record_number,buggy_code,fixed_code,code_similarity
157001,"@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  NBTTagList nbttaglist=nbt.getTagList(""String_Node_Str"");
  for (int j=0; j < nbttaglist.tagCount(); ++j)   try {
    NBTTagCompound dataTag=(NBTTagCompound)nbttaglist.tagAt(j);
    IPipedItem entity=new EntityPassiveItem(null);
    entity.readFromNBT(dataTag);
    if (entity.isCorrupted()) {
      entity.remove();
      continue;
    }
    entity.setContainer(container);
    EntityData data=new EntityData(entity,ForgeDirection.getOrientation(dataTag.getInteger(""String_Node_Str"")));
    data.output=ForgeDirection.getOrientation(dataTag.getInteger(""String_Node_Str""));
    data.toCenter=dataTag.getBoolean(""String_Node_Str"");
    entitiesToLoad.add(data);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}","@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  NBTTagList nbttaglist=nbt.getTagList(""String_Node_Str"");
  for (int j=0; j < nbttaglist.tagCount(); ++j) {
    try {
      NBTTagCompound dataTag=(NBTTagCompound)nbttaglist.tagAt(j);
      IPipedItem entity=new EntityPassiveItem(null);
      entity.readFromNBT(dataTag);
      if (entity.isCorrupted()) {
        entity.remove();
        continue;
      }
      entity.setContainer(container);
      EntityData data=new EntityData(entity,ForgeDirection.getOrientation(dataTag.getInteger(""String_Node_Str"")));
      data.output=ForgeDirection.getOrientation(dataTag.getInteger(""String_Node_Str""));
      data.toCenter=dataTag.getBoolean(""String_Node_Str"");
      entitiesToLoad.add(data);
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
}",0.9683698296836984
157002,"/** 
 * Handles a packet describing a stack of items inside a pipe.
 * @param packet
 */
public void handleItemPacket(PacketPipeTransportContent packet){
  if (packet.getID() != PacketIds.PIPE_CONTENTS)   return;
  EntityData data=travelingEntities.remove(packet.getEntityId());
  IPipedItem item=null;
  if (data == null) {
    item=EntityPassiveItem.getOrCreate(worldObj,packet.getEntityId());
  }
 else {
    item=data.item;
  }
  item.setItemStack(new ItemStack(packet.getItemId(),packet.getStackSize(),packet.getItemDamage()));
  if (item.getPosition() == null)   item.setPosition(packet.getPosX(),packet.getPosY(),packet.getPosZ());
  item.setSpeed(packet.getSpeed());
  if (item.getContainer() != null && item.getContainer() != container) {
    ((PipeTransportItems)((TileGenericPipe)item.getContainer()).pipe.transport).scheduleRemoval(item);
    item.setContainer(container);
  }
  data=new EntityData(item,packet.getInputOrientation());
  data.output=packet.getOutputOrientation();
  travelingEntities.put(item.getEntityId(),data);
}","/** 
 * Handles a packet describing a stack of items inside a pipe.
 * @param packet
 */
public void handleItemPacket(PacketPipeTransportContent packet){
  if (packet.getID() != PacketIds.PIPE_CONTENTS)   return;
  EntityData data=travelingEntities.remove(packet.getEntityId());
  IPipedItem item;
  if (data == null) {
    item=EntityPassiveItem.getOrCreate(worldObj,packet.getEntityId());
  }
 else {
    item=data.item;
  }
  item.setItemStack(new ItemStack(packet.getItemId(),packet.getStackSize(),packet.getItemDamage()));
  if (item.getPosition() == null)   item.setPosition(packet.getPosX(),packet.getPosY(),packet.getPosZ());
  item.setSpeed(packet.getSpeed());
  if (item.getContainer() != null && item.getContainer() != container) {
    ((PipeTransportItems)((TileGenericPipe)item.getContainer()).pipe.transport).scheduleRemoval(item);
    item.setContainer(container);
  }
  data=new EntityData(item,packet.getInputOrientation());
  data.output=packet.getOutputOrientation();
  travelingEntities.put(item.getEntityId(),data);
}",0.9975973089860644
157003,"/** 
 * Returns a list of all possible movements, that is to say adjacent implementers of IPipeEntry or TileEntityChest.
 */
public LinkedList<ForgeDirection> getPossibleMovements(EntityData data){
  LinkedList<ForgeDirection> result=new LinkedList<ForgeDirection>();
  data.blacklist.add(data.input.getOpposite());
  for (  ForgeDirection o : ForgeDirection.VALID_DIRECTIONS)   if (!data.blacklist.contains(o) && container.pipe.outputOpen(o))   if (canReceivePipeObjects(o,data.item))   result.add(o);
  if (result.size() == 0 && allowBouncing) {
    if (canReceivePipeObjects(data.input.getOpposite(),data.item))     result.add(data.input.getOpposite());
  }
  if (this.container.pipe instanceof IPipeTransportItemsHook) {
    Position pos=new Position(xCoord,yCoord,zCoord,data.input);
    result=((IPipeTransportItemsHook)this.container.pipe).filterPossibleMovements(result,pos,data.item);
  }
  return result;
}","/** 
 * Returns a list of all possible movements, that is to say adjacent implementers of IPipeEntry or TileEntityChest.
 */
public LinkedList<ForgeDirection> getPossibleMovements(EntityData data){
  LinkedList<ForgeDirection> result=new LinkedList<ForgeDirection>();
  data.blacklist.add(data.input.getOpposite());
  for (  ForgeDirection o : ForgeDirection.VALID_DIRECTIONS) {
    if (!data.blacklist.contains(o) && container.pipe.outputOpen(o))     if (canReceivePipeObjects(o,data.item))     result.add(o);
  }
  if (result.size() == 0 && allowBouncing) {
    if (canReceivePipeObjects(data.input.getOpposite(),data.item))     result.add(data.input.getOpposite());
  }
  if (this.container.pipe instanceof IPipeTransportItemsHook) {
    Position pos=new Position(xCoord,yCoord,zCoord,data.input);
    result=((IPipeTransportItemsHook)this.container.pipe).filterPossibleMovements(result,pos,data.item);
  }
  return result;
}",0.9934924078091106
157004,"private void moveToCenter(){
  int[] maxInput=new int[]{0,0,0,0,0,0};
  int transferInCount=0;
  LiquidStack stackInCenter=internalTanks[ForgeDirection.UNKNOWN.ordinal()].drain(flowRate,false);
  int spaceAvailable=internalTanks[ForgeDirection.UNKNOWN.ordinal()].getCapacity();
  if (stackInCenter != null) {
    spaceAvailable-=stackInCenter.amount;
  }
  for (  ForgeDirection direction : directions) {
    LiquidStack testStack=internalTanks[direction.ordinal()].drain(flowRate,false);
    if (testStack == null)     continue;
    if (stackInCenter != null && !stackInCenter.isLiquidEqual(testStack))     continue;
    maxInput[direction.ordinal()]=testStack.amount;
    transferInCount++;
  }
  for (  ForgeDirection direction : directions) {
    if (transferState[direction.ordinal()] != TransferState.Output && maxInput[direction.ordinal()] > 0) {
      int ammountToDrain=(int)((double)maxInput[direction.ordinal()] / (double)flowRate / (double)transferInCount * (double)Math.min(flowRate,spaceAvailable));
      if (ammountToDrain < 1) {
        ammountToDrain++;
      }
      LiquidStack liquidToPush=internalTanks[direction.ordinal()].drain(ammountToDrain,false);
      if (liquidToPush != null) {
        int filled=internalTanks[ForgeDirection.UNKNOWN.ordinal()].fill(liquidToPush,true);
        internalTanks[direction.ordinal()].drain(filled,true);
      }
    }
  }
}","private void moveToCenter(){
  int transferInCount=0;
  LiquidStack stackInCenter=internalTanks[ForgeDirection.UNKNOWN.ordinal()].drain(flowRate,false);
  int spaceAvailable=internalTanks[ForgeDirection.UNKNOWN.ordinal()].getCapacity();
  if (stackInCenter != null) {
    spaceAvailable-=stackInCenter.amount;
  }
  for (  ForgeDirection dir : directions) {
    inputPerTick[dir.ordinal()]=0;
    if (transferState[dir.ordinal()] == TransferState.Output) {
      continue;
    }
    LiquidStack testStack=internalTanks[dir.ordinal()].drain(flowRate,false);
    if (testStack == null) {
      continue;
    }
    if (stackInCenter != null && !stackInCenter.isLiquidEqual(testStack)) {
      continue;
    }
    inputPerTick[dir.ordinal()]=testStack.amount;
    transferInCount++;
  }
  for (  ForgeDirection dir : directions) {
    if (transferState[dir.ordinal()] != TransferState.Output && inputPerTick[dir.ordinal()] > 0) {
      int ammountToDrain=(int)((double)inputPerTick[dir.ordinal()] / (double)flowRate / (double)transferInCount * (double)Math.min(flowRate,spaceAvailable));
      if (ammountToDrain < 1) {
        ammountToDrain++;
      }
      LiquidStack liquidToPush=internalTanks[dir.ordinal()].drain(ammountToDrain,false);
      if (liquidToPush != null) {
        int filled=internalTanks[ForgeDirection.UNKNOWN.ordinal()].fill(liquidToPush,true);
        internalTanks[dir.ordinal()].drain(filled,true);
      }
    }
  }
}",0.8817280453257791
157005,"public PipeLiquidsGold(int itemID){
  super(new PipeTransportLiquids(),new PipeLogicGold(),itemID);
  ((PipeTransportLiquids)transport).flowRate=80;
  ((PipeTransportLiquids)transport).travelDelay=4;
}","public PipeLiquidsGold(int itemID){
  super(new PipeTransportLiquids(),new PipeLogicGold(),itemID);
  ((PipeTransportLiquids)transport).flowRate=40;
  ((PipeTransportLiquids)transport).travelDelay=4;
}",0.9950248756218906
157006,"protected void drawForegroundSelection(int mouseX,int mouseY){
  String s=""String_Node_Str"";
  int cornerX=(width - xSize) / 2;
  int cornerY=(height - ySize) / 2;
  int position=getSlotAtLocation(mouseX - cornerX,mouseY - cornerY);
  if (position != -1) {
    AdvancedSlot slot=slots[position];
    if (slot != null)     s=slot.getDescription();
  }
  if (s.length() > 0) {
    int i2=(mouseX - cornerX);
    int k2=mouseY - cornerY;
    drawCreativeTabHoveringText(s,i2,k2);
  }
}","protected void drawForegroundSelection(int mouseX,int mouseY){
  String s=""String_Node_Str"";
  int cornerX=(width - xSize) / 2;
  int cornerY=(height - ySize) / 2;
  int position=getSlotAtLocation(mouseX - cornerX,mouseY - cornerY);
  if (position != -1) {
    AdvancedSlot slot=slots[position];
    if (slot != null)     s=slot.getDescription();
  }
  if (s.length() > 0) {
    int i2=(mouseX - cornerX);
    int k2=mouseY - cornerY;
    drawCreativeTabHoveringText(s,i2,k2);
    RenderHelper.enableGUIStandardItemLighting();
  }
}",0.95069033530572
157007,"@Override public void setPowerProvider(IPowerProvider provider){
  provider=powerProvider;
}","@Override public void setPowerProvider(IPowerProvider provider){
  powerProvider=provider;
}",0.9021739130434784
157008,"public void step(){
  if (currentDate != worldObj.getWorldTime()) {
    currentDate=worldObj.getWorldTime();
    powerQuery=nextPowerQuery;
    nextPowerQuery=new int[]{0,0,0,0,0,0};
    double[] next=Arrays.copyOf(internalPower,6);
    internalPower=internalNextPower;
    internalNextPower=next;
    for (int i=0; i < nextPowerQuery.length; i++) {
      if (powerQuery[i] == 0.0d) {
        internalNextPower[i]-=1;
      }
    }
  }
}","public void step(){
  if (currentDate != worldObj.getWorldTime()) {
    currentDate=worldObj.getWorldTime();
    powerQuery=nextPowerQuery;
    nextPowerQuery=new int[]{0,0,0,0,0,0};
    double[] next=Arrays.copyOf(internalPower,6);
    internalPower=internalNextPower;
    internalNextPower=next;
    for (int i=0; i < nextPowerQuery.length; i++) {
      if (powerQuery[i] == 0.0d && internalNextPower[i] > 0) {
        internalNextPower[i]-=1;
      }
    }
  }
}",0.9689578713968958
157009,"public boolean findTarget(boolean doSet){
  if (worldObj.isRemote)   return false;
  boolean[][] blockedColumns=new boolean[bluePrintBuilder.bluePrint.sizeX - 2][bluePrintBuilder.bluePrint.sizeZ - 2];
  for (int searchY=yCoord + 3; searchY >= 0; --searchY) {
    int startX, endX, incX;
    if (searchY % 2 == 0) {
      startX=0;
      endX=bluePrintBuilder.bluePrint.sizeX - 2;
      incX=1;
    }
 else {
      startX=bluePrintBuilder.bluePrint.sizeX - 3;
      endX=-1;
      incX=-1;
    }
    for (int searchX=startX; searchX != endX; searchX+=incX) {
      int startZ, endZ, incZ;
      if (searchX % 2 == searchY % 2) {
        startZ=0;
        endZ=bluePrintBuilder.bluePrint.sizeZ - 2;
        incZ=1;
      }
 else {
        startZ=bluePrintBuilder.bluePrint.sizeZ - 3;
        endZ=-1;
        incZ=-1;
      }
      for (int searchZ=startZ; searchZ != endZ; searchZ+=incZ) {
        if (!blockedColumns[searchX][searchZ]) {
          int bx=box.xMin + searchX + 1, by=searchY, bz=box.zMin + searchZ + 1;
          int blockId=worldObj.getBlockId(bx,by,bz);
          if (!BlockUtil.canChangeBlock(worldObj,bx,by,bz)) {
            blockedColumns[searchX][searchZ]=true;
          }
 else           if (isQuarriableBlock(blockId,bx,by + 1,bz)) {
            if (doSet) {
              setTarget(bx,by + 1,bz);
            }
            return true;
          }
        }
      }
    }
  }
  return false;
}","public boolean findTarget(boolean doSet){
  if (worldObj.isRemote)   return false;
  boolean[][] blockedColumns=new boolean[bluePrintBuilder.bluePrint.sizeX - 2][bluePrintBuilder.bluePrint.sizeZ - 2];
  for (int searchY=yCoord + 3; searchY >= 0; --searchY) {
    int startX, endX, incX;
    if (searchY % 2 == 0) {
      startX=0;
      endX=bluePrintBuilder.bluePrint.sizeX - 2;
      incX=1;
    }
 else {
      startX=bluePrintBuilder.bluePrint.sizeX - 3;
      endX=-1;
      incX=-1;
    }
    for (int searchX=startX; searchX != endX; searchX+=incX) {
      int startZ, endZ, incZ;
      if (searchX % 2 == searchY % 2) {
        startZ=0;
        endZ=bluePrintBuilder.bluePrint.sizeZ - 2;
        incZ=1;
      }
 else {
        startZ=bluePrintBuilder.bluePrint.sizeZ - 3;
        endZ=-1;
        incZ=-1;
      }
      for (int searchZ=startZ; searchZ != endZ; searchZ+=incZ) {
        if (!blockedColumns[searchX][searchZ]) {
          int bx=box.xMin + searchX + 1, by=searchY, bz=box.zMin + searchZ + 1;
          if (!BlockUtil.canChangeBlock(worldObj,bx,by,bz)) {
            blockedColumns[searchX][searchZ]=true;
          }
 else           if (!BlockUtil.isSoftBlock(worldObj,bx,by,bz)) {
            if (doSet) {
              setTarget(bx,by + 1,bz);
            }
            return true;
          }
        }
      }
    }
  }
  return false;
}",0.9637603157517044
157010,"public void positionReached(){
  inProcess=false;
  if (worldObj.isRemote) {
    return;
  }
  int i=targetX;
  int j=targetY - 1;
  int k=targetZ;
  int blockId=worldObj.getBlockId(i,j,k);
  if (isQuarriableBlock(blockId,i,j,k)) {
    powerProvider.getTimeTracker().markTime(worldObj);
    ArrayList<ItemStack> stacks=BlockUtil.getItemStackFromBlock(worldObj,i,j,k);
    if (stacks != null) {
      for (      ItemStack s : stacks) {
        if (s != null) {
          mineStack(s);
        }
      }
    }
    worldObj.playAuxSFXAtEntity(null,2001,i,j,k,blockId + (worldObj.getBlockMetadata(i,j,k) << 12));
    worldObj.setBlockWithNotify(i,j,k,0);
  }
  double[] head=getHead();
  AxisAlignedBB axis=AxisAlignedBB.getBoundingBox(head[0] - 1.5,head[1],head[2] - 1.5,head[0] + 2.5,head[1] + 2.5,head[2] + 2.5);
  List result=worldObj.getEntitiesWithinAABB(EntityItem.class,axis);
  for (int ii=0; ii < result.size(); ii++) {
    if (result.get(ii) instanceof EntityItem) {
      EntityItem entity=(EntityItem)result.get(ii);
      if (entity.isDead)       continue;
      if (entity.item.stackSize <= 0)       continue;
      CoreProxy.proxy.removeEntity(entity);
      mineStack(entity.item);
    }
  }
}","public void positionReached(){
  inProcess=false;
  if (worldObj.isRemote) {
    return;
  }
  int i=targetX;
  int j=targetY - 1;
  int k=targetZ;
  int blockId=worldObj.getBlockId(i,j,k);
  if (isQuarriableBlock(i,j,k)) {
    powerProvider.getTimeTracker().markTime(worldObj);
    ArrayList<ItemStack> stacks=BlockUtil.getItemStackFromBlock(worldObj,i,j,k);
    if (stacks != null) {
      for (      ItemStack s : stacks) {
        if (s != null) {
          mineStack(s);
        }
      }
    }
    worldObj.playAuxSFXAtEntity(null,2001,i,j,k,blockId + (worldObj.getBlockMetadata(i,j,k) << 12));
    worldObj.setBlockWithNotify(i,j,k,0);
  }
  double[] head=getHead();
  AxisAlignedBB axis=AxisAlignedBB.getBoundingBox(head[0] - 1.5,head[1],head[2] - 1.5,head[0] + 2.5,head[1] + 2.5,head[2] + 2.5);
  List result=worldObj.getEntitiesWithinAABB(EntityItem.class,axis);
  for (int ii=0; ii < result.size(); ii++) {
    if (result.get(ii) instanceof EntityItem) {
      EntityItem entity=(EntityItem)result.get(ii);
      if (entity.isDead)       continue;
      if (entity.item.stackSize <= 0)       continue;
      CoreProxy.proxy.removeEntity(entity);
      mineStack(entity.item);
    }
  }
}",0.9966722129783694
157011,"private boolean isQuarriableBlock(int blockID,int bx,int by,int bz){
  return BlockUtil.canChangeBlock(worldObj,bx,by,bz) && !BlockUtil.isSoftBlock(worldObj,bx,by,bz);
}","private boolean isQuarriableBlock(int bx,int by,int bz){
  return BlockUtil.canChangeBlock(worldObj,bx,by,bz) && !BlockUtil.isSoftBlock(worldObj,bx,by,bz);
}",0.9631901840490796
157012,"private void handleTileReached(EntityData data,TileEntity tile){
  if (tile instanceof IPipeEntry)   ((IPipeEntry)tile).entityEntering(data.item,data.output);
 else   if (tile instanceof TileGenericPipe && ((TileGenericPipe)tile).pipe.transport instanceof PipeTransportItems) {
    TileGenericPipe pipe=(TileGenericPipe)tile;
    ((PipeTransportItems)pipe.pipe.transport).entityEntering(data.item,data.output);
  }
 else   if (tile instanceof IInventory) {
    if (!CoreProxy.proxy.isRenderWorld(worldObj)) {
      ItemStack added=Transactor.getTransactorFor(tile).add(data.item.getItemStack(),data.output.reverse(),true);
      data.item.getItemStack().stackSize-=added.stackSize;
      if (data.item.getItemStack().stackSize > 0) {
        data.toCenter=true;
        data.input=data.output.reverse();
        unscheduleRemoval(data.item);
        entityEntering(data.item,data.output.reverse());
      }
    }
  }
 else {
    if (travelHook != null)     travelHook.drop(this,data);
    EntityItem dropped=data.item.toEntityItem(data.output);
    if (dropped != null)     onDropped(dropped);
  }
}","private void handleTileReached(EntityData data,TileEntity tile){
  if (tile instanceof IPipeEntry)   ((IPipeEntry)tile).entityEntering(data.item,data.output);
 else   if (tile instanceof TileGenericPipe && ((TileGenericPipe)tile).pipe.transport instanceof PipeTransportItems) {
    TileGenericPipe pipe=(TileGenericPipe)tile;
    ((PipeTransportItems)pipe.pipe.transport).entityEntering(data.item,data.output);
  }
 else   if (tile instanceof IInventory) {
    if (!CoreProxy.proxy.isRenderWorld(worldObj)) {
      ItemStack added=Transactor.getTransactorFor(tile).add(data.item.getItemStack(),data.output.reverse(),true);
      data.item.getItemStack().stackSize-=added.stackSize;
      if (data.item.getItemStack().stackSize > 0) {
        unscheduleRemoval(data.item);
        reverseItem(data);
      }
    }
  }
 else {
    if (travelHook != null)     travelHook.drop(this,data);
    EntityItem dropped=data.item.toEntityItem(data.output);
    if (dropped != null)     onDropped(dropped);
  }
}",0.9170638703527167
157013,"/** 
 * Constructor for outgoing packets
 * @param x, y, z - the coordinates the tile to sync
 */
public PacketTileState(int x,int y,int z){
  super(PacketIds.STATE_UPDATE,x,y,z);
}","/** 
 * Constructor for outgoing packets
 * @param x, y, z - the coordinates the tile to sync
 */
public PacketTileState(int x,int y,int z){
  super(PacketIds.STATE_UPDATE,x,y,z);
  isChunkDataPacket=true;
}",0.9329896907216496
157014,"public boolean isPoweredTile(TileEntity tile){
  if (tile instanceof IPowerReceptor) {
    IPowerReceptor receptor=(IPowerReceptor)tile;
    IPowerProvider provider=receptor.getPowerProvider();
    return provider != null && provider.getClass().equals(PneumaticPowerProvider.class);
  }
  return false;
}","public boolean isPoweredTile(TileEntity tile){
  if (tile instanceof IPowerReceptor) {
    IPowerReceptor receptor=(IPowerReceptor)tile;
    IPowerProvider provider=receptor.getPowerProvider();
    return provider != null && provider.getClass().getSuperclass().equals(PowerProvider.class);
  }
  return false;
}",0.959349593495935
157015,"@Override public boolean blockActivated(World world,int i,int j,int k,EntityPlayer entityplayer){
  ItemStack current=entityplayer.inventory.getCurrentItem();
  if (current != null) {
    LiquidStack liquid=LiquidManager.getLiquidForFilledItem(current);
    TileTank tank=(TileTank)world.getBlockTileEntity(i,j,k);
    if (liquid != null) {
      int qty=tank.fill(Orientations.Unknown,liquid,true);
      if (qty != 0 && !BuildCraftCore.debugMode) {
        entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,Utils.consumeItem(current));
      }
      return true;
    }
 else {
      LiquidStack available=tank.drain(Orientations.Unknown,BuildCraftAPI.BUCKET_VOLUME,false);
      ItemStack filled=LiquidManager.fillLiquidContainer(available,current);
      liquid=LiquidManager.getLiquidForFilledItem(filled);
      if (liquid != null) {
        if (current.stackSize > 1) {
          if (!entityplayer.inventory.addItemStackToInventory(filled))           return false;
 else           entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,Utils.consumeItem(current));
        }
 else {
          entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,Utils.consumeItem(current));
          entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,filled);
        }
        tank.drain(Orientations.Unknown,liquid.amount,true);
        return true;
      }
    }
  }
  return false;
}","@Override public boolean blockActivated(World world,int i,int j,int k,EntityPlayer entityplayer){
  ItemStack current=entityplayer.inventory.getCurrentItem();
  if (current != null) {
    LiquidStack liquid=LiquidManager.getLiquidForFilledItem(current);
    TileTank tank=(TileTank)world.getBlockTileEntity(i,j,k);
    if (liquid != null) {
      int qty=tank.fill(Orientations.Unknown,liquid,true);
      if (qty != 0 && !BuildCraftCore.debugMode) {
        entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,Utils.consumeItem(current));
      }
      return true;
    }
 else {
      LiquidStack available=tank.getTanks()[0].getLiquid();
      ItemStack filled=LiquidManager.fillLiquidContainer(available,current);
      liquid=LiquidManager.getLiquidForFilledItem(filled);
      if (liquid != null) {
        if (current.stackSize > 1) {
          if (!entityplayer.inventory.addItemStackToInventory(filled))           return false;
 else           entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,Utils.consumeItem(current));
        }
 else {
          entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,Utils.consumeItem(current));
          entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,filled);
        }
        tank.drain(Orientations.Unknown,liquid.amount,true);
        return true;
      }
    }
  }
  return false;
}",0.4403236682400539
157016,"private void pipeFacadeRenderer(RenderBlocks renderblocks,Block block,PipeRenderState state,int x,int y,int z){
  float facadeThickness=1F / 16F;
  float zFightOffset=1F / 8192F;
  float[][] zeroState=new float[3][2];
  zeroState[0][0]=0.0F - zFightOffset / 2;
  zeroState[0][1]=1.0F + zFightOffset / 2;
  zeroState[1][0]=0.0F - zFightOffset;
  zeroState[1][1]=facadeThickness;
  zeroState[2][0]=0.0F;
  zeroState[2][1]=1.0F;
  for (  Orientations direction : Orientations.dirs()) {
    if (state.facadeMatrix.isConnected(direction)) {
      MinecraftForgeClient.bindTexture(state.facadeMatrix.getTextureFile(direction));
      state.currentTextureIndex=state.facadeMatrix.getTextureIndex(direction);
      if (state.pipeConnectionMatrix.isConnected(direction)) {
        float[][] rotated=deepClone(zeroState);
        rotated[2][0]=0.0F;
        rotated[2][1]=Utils.pipeMinPos;
        rotated[1][0]-=zFightOffset / 2;
        transform(rotated,direction);
        block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
        renderblocks.renderStandardBlock(block,x,y,z);
        rotated=deepClone(zeroState);
        rotated[2][0]=Utils.pipeMaxPos;
        rotated[1][0]-=zFightOffset / 2;
        transform(rotated,direction);
        block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
        renderblocks.renderStandardBlock(block,x,y,z);
        rotated=deepClone(zeroState);
        rotated[0][0]=0.0F;
        rotated[0][1]=Utils.pipeMinPos;
        transform(rotated,direction);
        block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
        renderblocks.renderStandardBlock(block,x,y,z);
        rotated=deepClone(zeroState);
        rotated[0][0]=Utils.pipeMaxPos;
        rotated[0][1]=1F;
        transform(rotated,direction);
        block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
        renderblocks.renderStandardBlock(block,x,y,z);
      }
 else {
        float[][] rotated=deepClone(zeroState);
        transform(rotated,direction);
        block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
        renderblocks.renderStandardBlock(block,x,y,z);
      }
    }
  }
  zeroState[0][0]=Utils.pipeMinPos;
  zeroState[0][1]=Utils.pipeMaxPos;
  zeroState[1][0]=facadeThickness;
  zeroState[1][1]=Utils.pipeMinPos;
  zeroState[2][0]=Utils.pipeMinPos;
  zeroState[2][1]=Utils.pipeMaxPos;
  MinecraftForgeClient.bindTexture(DefaultProps.TEXTURE_BLOCKS);
  state.currentTextureIndex=7 * 16 + 13;
  for (  Orientations direction : Orientations.dirs()) {
    if (state.facadeMatrix.isConnected(direction) && !state.pipeConnectionMatrix.isConnected(direction)) {
      float[][] rotated=deepClone(zeroState);
      transform(rotated,direction);
      block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
      renderblocks.renderStandardBlock(block,x,y,z);
    }
  }
}","private void pipeFacadeRenderer(RenderBlocks renderblocks,Block block,PipeRenderState state,int x,int y,int z){
  float facadeThickness=1F / 16F;
  float zFightOffset=1F / 4096F;
  float[][] zeroState=new float[3][2];
  zeroState[0][0]=0.0F - zFightOffset / 2;
  zeroState[0][1]=1.0F + zFightOffset / 2;
  zeroState[1][0]=0.0F - zFightOffset;
  zeroState[1][1]=facadeThickness;
  zeroState[2][0]=0.0F;
  zeroState[2][1]=1.0F;
  for (  Orientations direction : Orientations.dirs()) {
    if (state.facadeMatrix.isConnected(direction)) {
      MinecraftForgeClient.bindTexture(state.facadeMatrix.getTextureFile(direction));
      state.currentTextureIndex=state.facadeMatrix.getTextureIndex(direction);
      if (state.pipeConnectionMatrix.isConnected(direction)) {
        float[][] rotated=deepClone(zeroState);
        rotated[2][0]=0.0F;
        rotated[2][1]=Utils.pipeMinPos;
        rotated[1][0]-=zFightOffset / 2;
        transform(rotated,direction);
        block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
        renderblocks.renderStandardBlock(block,x,y,z);
        rotated=deepClone(zeroState);
        rotated[2][0]=Utils.pipeMaxPos;
        rotated[1][0]-=zFightOffset / 2;
        transform(rotated,direction);
        block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
        renderblocks.renderStandardBlock(block,x,y,z);
        rotated=deepClone(zeroState);
        rotated[0][0]=0.0F;
        rotated[0][1]=Utils.pipeMinPos;
        rotated[1][1]-=zFightOffset;
        transform(rotated,direction);
        block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
        renderblocks.renderStandardBlock(block,x,y,z);
        rotated=deepClone(zeroState);
        rotated[0][0]=Utils.pipeMaxPos;
        rotated[0][1]=1F;
        rotated[1][1]-=zFightOffset;
        transform(rotated,direction);
        block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
        renderblocks.renderStandardBlock(block,x,y,z);
      }
 else {
        float[][] rotated=deepClone(zeroState);
        transform(rotated,direction);
        block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
        renderblocks.renderStandardBlock(block,x,y,z);
      }
    }
  }
  zeroState[0][0]=Utils.pipeMinPos;
  zeroState[0][1]=Utils.pipeMaxPos;
  zeroState[1][0]=facadeThickness;
  zeroState[1][1]=Utils.pipeMinPos;
  zeroState[2][0]=Utils.pipeMinPos;
  zeroState[2][1]=Utils.pipeMaxPos;
  MinecraftForgeClient.bindTexture(DefaultProps.TEXTURE_BLOCKS);
  state.currentTextureIndex=7 * 16 + 13;
  for (  Orientations direction : Orientations.dirs()) {
    if (state.facadeMatrix.isConnected(direction) && !state.pipeConnectionMatrix.isConnected(direction)) {
      float[][] rotated=deepClone(zeroState);
      transform(rotated,direction);
      block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
      renderblocks.renderStandardBlock(block,x,y,z);
    }
  }
}",0.987313669521091
157017,"public Orientations resolveDestination(EntityData data){
  LinkedList<Orientations> listOfPossibleMovements=getPossibleMovements(new Position(xCoord,yCoord,zCoord,data.orientation),data.item);
  if (listOfPossibleMovements.size() == 0)   return Orientations.Unknown;
 else {
    int i;
    if (APIProxy.isClient(worldObj) || APIProxy.isServerSide())     i=Math.abs(data.item.entityId + xCoord + yCoord+ zCoord+ data.item.deterministicRandomization) % listOfPossibleMovements.size();
 else     i=worldObj.rand.nextInt(listOfPossibleMovements.size());
    return listOfPossibleMovements.get(i);
  }
}","public Orientations resolveDestination(EntityData data){
  LinkedList<Orientations> listOfPossibleMovements=getPossibleMovements(new Position(xCoord,yCoord,zCoord,data.orientation),data.item);
  if (listOfPossibleMovements.size() == 0)   return Orientations.Unknown;
 else {
    int i;
    if (APIProxy.isClient(worldObj) || APIProxy.isServerSide()) {
      i=Math.abs(data.item.entityId + xCoord + yCoord+ zCoord+ data.item.deterministicRandomization) % listOfPossibleMovements.size();
      data.item.deterministicRandomization*=11;
    }
 else     i=worldObj.rand.nextInt(listOfPossibleMovements.size());
    return listOfPossibleMovements.get(i);
  }
}",0.9537480063795852
157018,"public void drawSprite(int cornerX,int cornerY){
  if (isDefined())   if (getItemStack() != null)   drawStack(getItemStack());
 else   if (getTexture() != null && !getTexture().equals(""String_Node_Str"")) {
    int texture=mc.renderEngine.getTexture(getTexture());
    mc.renderEngine.bindTexture(texture);
    int textureI=getTextureIndex() >> 4;
    int textureJ=getTextureIndex() - textureI * 16;
    drawTexturedModalRect(cornerX + x,cornerY + y,16 * textureJ,16 * textureI,16,16);
  }
}","public void drawSprite(int cornerX,int cornerY){
  if (!isDefined())   return;
  GL11.glDisable(GL11.GL_LIGHTING);
  if (getItemStack() != null)   drawStack(getItemStack());
 else   if (getTexture() != null && !getTexture().equals(""String_Node_Str"")) {
    int texture=mc.renderEngine.getTexture(getTexture());
    mc.renderEngine.bindTexture(texture);
    int textureI=getTextureIndex() >> 4;
    int textureJ=getTextureIndex() - textureI * 16;
    drawTexturedModalRect(cornerX + x,cornerY + y,16 * textureJ,16 * textureI,16,16);
  }
  GL11.glEnable(GL11.GL_LIGHTING);
}",0.9227871939736346
157019,"public ItemEngine(int i){
  super(i,""String_Node_Str"");
}","public ItemEngine(int i){
  super(i,""String_Node_Str"");
  setMaxDamage(0);
  setHasSubtypes(true);
}",0.7261146496815286
157020,"@Override public void entityEntering(EntityPassiveItem item,Orientations orientation){
  if (item.isCorrupted())   return;
  readjustSpeed(item);
  if (!travelingEntities.containsKey(new Integer(item.entityId))) {
    travelingEntities.put(new Integer(item.entityId),new EntityData(item,orientation));
    if (item.container != null && item.container != this.container)     ((PipeTransportSolids)((TileGenericPipe)item.container).pipe.transport).scheduleRemoval(item);
    item.container=container;
  }
  if (orientation != Orientations.YPos && orientation != Orientations.YNeg)   item.setPosition(item.posX,yCoord + Utils.getPipeFloorOf(item.item),item.posZ);
  if (container.pipe instanceof IPipeTransportItemsHook)   ((IPipeTransportItemsHook)container.pipe).entityEntered(item,orientation);
  if (APIProxy.isServerSide())   if (item.synchroTracker.markTimeIfDelay(worldObj,6 * BuildCraftCore.updateFactor))   CoreProxy.sendToPlayers(createItemPacket(item,orientation),xCoord,yCoord,zCoord,50,mod_BuildCraftTransport.instance);
  if (travelingEntities.size() > BuildCraftTransport.groupItemsTrigger) {
    groupEntities();
    if (travelingEntities.size() > BuildCraftTransport.maxItemsInPipes)     worldObj.createExplosion(null,xCoord,yCoord,zCoord,1);
  }
}","@Override public void entityEntering(EntityPassiveItem item,Orientations orientation){
  if (item.isCorrupted())   return;
  readjustSpeed(item);
  if (!travelingEntities.containsKey(new Integer(item.entityId))) {
    travelingEntities.put(new Integer(item.entityId),new EntityData(item,orientation));
    if (item.container != null && item.container != this.container)     ((PipeTransportSolids)((TileGenericPipe)item.container).pipe.transport).scheduleRemoval(item);
    item.container=container;
  }
  if (orientation != Orientations.YPos && orientation != Orientations.YNeg)   item.setPosition(item.posX,yCoord + Utils.getPipeFloorOf(item.item),item.posZ);
  if (container.pipe instanceof IPipeTransportItemsHook)   ((IPipeTransportItemsHook)container.pipe).entityEntered(item,orientation);
  if (APIProxy.isServerSide())   if (item.synchroTracker.markTimeIfDelay(worldObj,6 * BuildCraftCore.updateFactor))   CoreProxy.sendToPlayers(createItemPacket(item,orientation),container.worldObj,xCoord,yCoord,zCoord,50,mod_BuildCraftTransport.instance);
  if (travelingEntities.size() > BuildCraftTransport.groupItemsTrigger) {
    groupEntities();
    if (travelingEntities.size() > BuildCraftTransport.maxItemsInPipes)     worldObj.createExplosion(null,xCoord,yCoord,zCoord,1);
  }
}",0.8116397955171057
157021,"public static void sendToPlayers(Packet packet,int x,int y,int z,int maxDistance,NetworkMod mod){
}","public static void sendToPlayers(Packet packet,World w,int x,int y,int z,int maxDistance,NetworkMod mod){
}",0.9611650485436892
157022,"public static void sendToPlayers(Packet packet,int x,int y,int z,int maxDistance,NetworkMod mod){
  if (packet != null) {
    World[] worlds=DimensionManager.getWorlds();
    for (int i=0; i < worlds.length; i++)     for (int j=0; j < worlds[i].playerEntities.size(); j++) {
      EntityPlayerMP player=(EntityPlayerMP)worlds[i].playerEntities.get(j);
      if (Math.abs(player.posX - x) <= maxDistance && Math.abs(player.posY - y) <= maxDistance && Math.abs(player.posZ - z) <= maxDistance)       player.playerNetServerHandler.sendPacket(packet);
    }
  }
}","public static void sendToPlayers(Packet packet,World w,int x,int y,int z,int maxDistance,NetworkMod mod){
  if (packet != null) {
    for (int j=0; j < w.playerEntities.size(); j++) {
      EntityPlayerMP player=(EntityPlayerMP)w.playerEntities.get(j);
      if (Math.abs(player.posX - x) <= maxDistance && Math.abs(player.posY - y) <= maxDistance && Math.abs(player.posZ - z) <= maxDistance)       player.playerNetServerHandler.sendPacket(packet);
    }
  }
}",0.8832188420019627
157023,"public void sendNetworkUpdate(){
  if (this instanceof ISynchronizedTile)   CoreProxy.sendToPlayers(((ISynchronizedTile)this).getUpdatePacket(),xCoord,yCoord,zCoord,50,mod_BuildCraftCore.instance);
}","public void sendNetworkUpdate(){
  if (this instanceof ISynchronizedTile)   CoreProxy.sendToPlayers(((ISynchronizedTile)this).getUpdatePacket(),worldObj,xCoord,yCoord,zCoord,50,mod_BuildCraftCore.instance);
}",0.977886977886978
157024,"public void sendSelectionTo(EntityPlayer player){
  for (  AssemblyRecipe r : BuildCraftCore.assemblyRecipes) {
    SelectionMessage message=new SelectionMessage();
    message.itemID=r.output.itemID;
    message.itemDmg=r.output.getItemDamage();
    if (isPlanned(r)) {
      message.select=true;
    }
 else {
      message.select=false;
    }
    PacketUpdate packet=new PacketUpdate(PacketIds.SELECTION_ASSEMBLY,selectionMessageWrapper.toPayload(xCoord,yCoord,zCoord,message));
    packet.posX=xCoord;
    packet.posY=yCoord;
    packet.posZ=zCoord;
    CoreProxy.sendToPlayers(packet.getPacket(),(int)player.posX,(int)player.posY,(int)player.posZ,100,mod_BuildCraftSilicon.instance);
  }
}","public void sendSelectionTo(EntityPlayer player){
  for (  AssemblyRecipe r : BuildCraftCore.assemblyRecipes) {
    SelectionMessage message=new SelectionMessage();
    message.itemID=r.output.itemID;
    message.itemDmg=r.output.getItemDamage();
    if (isPlanned(r)) {
      message.select=true;
    }
 else {
      message.select=false;
    }
    PacketUpdate packet=new PacketUpdate(PacketIds.SELECTION_ASSEMBLY,selectionMessageWrapper.toPayload(xCoord,yCoord,zCoord,message));
    packet.posX=xCoord;
    packet.posY=yCoord;
    packet.posZ=zCoord;
    CoreProxy.sendToPlayers(packet.getPacket(),worldObj,(int)player.posX,(int)player.posY,(int)player.posZ,100,mod_BuildCraftSilicon.instance);
  }
}",0.9935576234788832
157025,"@Override public ItemStack decrStackSize(int i,int j){
  ItemStack stack=items[i].copy();
  stack.stackSize=j;
  items[i].stackSize-=j;
  if (items[i].stackSize == 0)   items[i]=null;
  if (APIProxy.isServerSide())   for (int p=0; p < 6; ++p)   CoreProxy.sendToPlayers(getContentsPacket(p),xCoord,yCoord,zCoord,50,mod_BuildCraftTransport.instance);
  return stack;
}","@Override public ItemStack decrStackSize(int i,int j){
  ItemStack stack=items[i].copy();
  stack.stackSize=j;
  items[i].stackSize-=j;
  if (items[i].stackSize == 0)   items[i]=null;
  if (APIProxy.isServerSide())   for (int p=0; p < 6; ++p)   CoreProxy.sendToPlayers(getContentsPacket(p),worldObj,xCoord,yCoord,zCoord,50,mod_BuildCraftTransport.instance);
  return stack;
}",0.9878542510121456
157026,"@Override public void setInventorySlotContents(int i,ItemStack itemstack){
  if (items[i] == null && itemstack == null)   return;
 else   if (items[i] != null && itemstack != null && items[i].isStackEqual(itemstack))   return;
  if (itemstack != null)   items[i]=itemstack.copy();
 else   items[i]=null;
  if (APIProxy.isServerSide())   for (int p=0; p < 6; ++p)   CoreProxy.sendToPlayers(getContentsPacket(p),xCoord,yCoord,zCoord,50,mod_BuildCraftTransport.instance);
}","@Override public void setInventorySlotContents(int i,ItemStack itemstack){
  if (items[i] == null && itemstack == null)   return;
 else   if (items[i] != null && itemstack != null && items[i].isStackEqual(itemstack))   return;
  if (itemstack != null)   items[i]=itemstack.copy();
 else   items[i]=null;
  if (APIProxy.isServerSide())   for (int p=0; p < 6; ++p)   CoreProxy.sendToPlayers(getContentsPacket(p),worldObj,xCoord,yCoord,zCoord,50,mod_BuildCraftTransport.instance);
}",0.9905163329820864
157027,"@Override public void updateEntity(){
  if (tracker.markTimeIfDelay(worldObj,20 * BuildCraftCore.updateFactor))   if (APIProxy.isServerSide())   for (int p=0; p < 6; ++p)   CoreProxy.sendToPlayers(getContentsPacket(p),xCoord,yCoord,zCoord,50,mod_BuildCraftTransport.instance);
}","@Override public void updateEntity(){
  if (tracker.markTimeIfDelay(worldObj,20 * BuildCraftCore.updateFactor))   if (APIProxy.isServerSide())   for (int p=0; p < 6; ++p)   CoreProxy.sendToPlayers(getContentsPacket(p),worldObj,xCoord,yCoord,zCoord,50,mod_BuildCraftTransport.instance);
}",0.984070796460177
157028,"@Override public void entityEntering(EntityPassiveItem item,Orientations orientation){
  if (item.isCorrupted())   return;
  readjustSpeed(item);
  if (!travelingEntities.containsKey(new Integer(item.entityId))) {
    travelingEntities.put(new Integer(item.entityId),new EntityData(item,orientation));
    if (item.container != null && item.container != this.container)     ((PipeTransportItems)((TileGenericPipe)item.container).pipe.transport).scheduleRemoval(item);
    item.container=container;
  }
  if (orientation != Orientations.YPos && orientation != Orientations.YNeg)   item.setPosition(item.posX,yCoord + Utils.getPipeFloorOf(item.item),item.posZ);
  if (container.pipe instanceof IPipeTransportItemsHook)   ((IPipeTransportItemsHook)container.pipe).entityEntered(item,orientation);
  if (APIProxy.isServerSide())   if (item.synchroTracker.markTimeIfDelay(worldObj,6 * BuildCraftCore.updateFactor))   CoreProxy.sendToPlayers(createItemPacket(item,orientation),xCoord,yCoord,zCoord,50,mod_BuildCraftTransport.instance);
  if (travelingEntities.size() > BuildCraftTransport.groupItemsTrigger) {
    groupEntities();
    if (travelingEntities.size() > BuildCraftTransport.maxItemsInPipes)     worldObj.createExplosion(null,xCoord,yCoord,zCoord,1);
  }
}","@Override public void entityEntering(EntityPassiveItem item,Orientations orientation){
  if (item.isCorrupted())   return;
  readjustSpeed(item);
  if (!travelingEntities.containsKey(new Integer(item.entityId))) {
    travelingEntities.put(new Integer(item.entityId),new EntityData(item,orientation));
    if (item.container != null && item.container != this.container)     ((PipeTransportItems)((TileGenericPipe)item.container).pipe.transport).scheduleRemoval(item);
    item.container=container;
  }
  if (orientation != Orientations.YPos && orientation != Orientations.YNeg)   item.setPosition(item.posX,yCoord + Utils.getPipeFloorOf(item.item),item.posZ);
  if (container.pipe instanceof IPipeTransportItemsHook)   ((IPipeTransportItemsHook)container.pipe).entityEntered(item,orientation);
  if (APIProxy.isServerSide())   if (item.synchroTracker.markTimeIfDelay(worldObj,6 * BuildCraftCore.updateFactor))   CoreProxy.sendToPlayers(createItemPacket(item,orientation),worldObj,xCoord,yCoord,zCoord,50,mod_BuildCraftTransport.instance);
  if (travelingEntities.size() > BuildCraftTransport.groupItemsTrigger) {
    groupEntities();
    if (travelingEntities.size() > BuildCraftTransport.maxItemsInPipes)     worldObj.createExplosion(null,xCoord,yCoord,zCoord,1);
  }
}",0.814697747925721
157029,"@Override public void updateEntity(){
  if (APIProxy.isClient(worldObj))   return;
  step();
  TileEntity tiles[]=new TileEntity[6];
  for (int i=0; i < 6; ++i)   if (Utils.checkPipesConnections(container.getTile(Orientations.values()[i]),container))   tiles[i]=container.getTile(Orientations.values()[i]);
  displayPower=new short[]{0,0,0,0,0,0};
  for (int i=0; i < 6; ++i)   if (internalPower[i] > 0) {
    double div=0;
    for (int j=0; j < 6; ++j)     if (j != i && powerQuery[j] > 0)     if (tiles[j] instanceof TileGenericPipe || tiles[j] instanceof IPowerReceptor)     div+=powerQuery[j];
    double totalWatt=internalPower[i];
    for (int j=0; j < 6; ++j)     if (j != i && powerQuery[j] > 0) {
      double watts=(totalWatt / div * powerQuery[j]);
      if (tiles[j] instanceof TileGenericPipe) {
        TileGenericPipe nearbyTile=(TileGenericPipe)tiles[j];
        PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyTile.pipe.transport;
        nearbyTransport.receiveEnergy(Orientations.values()[j].reverse(),watts);
        displayPower[j]+=watts / 2F;
        displayPower[i]+=watts / 2F;
        internalPower[i]-=watts;
      }
 else       if (tiles[j] instanceof IPowerReceptor) {
        IPowerReceptor pow=(IPowerReceptor)tiles[j];
        pow.getPowerProvider().receiveEnergy((float)watts,Orientations.values()[j].reverse());
        displayPower[j]+=watts / 2F;
        displayPower[i]+=watts / 2F;
        internalPower[i]-=watts;
      }
    }
  }
  for (int i=0; i < 6; ++i)   if (tiles[i] instanceof IPowerReceptor && !(tiles[i] instanceof TileGenericPipe)) {
    IPowerReceptor receptor=(IPowerReceptor)tiles[i];
    int request=receptor.powerRequest();
    if (request > 0)     requestEnergy(Orientations.values()[i],request);
  }
  int transferQuery[]={0,0,0,0,0,0};
  for (int i=0; i < 6; ++i) {
    transferQuery[i]=0;
    for (int j=0; j < 6; ++j)     if (j != i)     transferQuery[i]+=powerQuery[j];
  }
  for (int i=0; i < 6; ++i)   if (transferQuery[i] != 0)   if (tiles[i] != null) {
    TileEntity entity=tiles[i];
    if (entity instanceof TileGenericPipe) {
      TileGenericPipe nearbyTile=(TileGenericPipe)entity;
      PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyTile.pipe.transport;
      nearbyTransport.requestEnergy(Orientations.values()[i].reverse(),transferQuery[i]);
    }
  }
  if (APIProxy.isServerSide())   if (tracker.markTimeIfDelay(worldObj,2 * BuildCraftCore.updateFactor))   CoreProxy.sendToPlayers(this.container.getUpdatePacket(),xCoord,yCoord,zCoord,40,mod_BuildCraftCore.instance);
}","@Override public void updateEntity(){
  if (APIProxy.isClient(worldObj))   return;
  step();
  TileEntity tiles[]=new TileEntity[6];
  for (int i=0; i < 6; ++i)   if (Utils.checkPipesConnections(container.getTile(Orientations.values()[i]),container))   tiles[i]=container.getTile(Orientations.values()[i]);
  displayPower=new short[]{0,0,0,0,0,0};
  for (int i=0; i < 6; ++i)   if (internalPower[i] > 0) {
    double div=0;
    for (int j=0; j < 6; ++j)     if (j != i && powerQuery[j] > 0)     if (tiles[j] instanceof TileGenericPipe || tiles[j] instanceof IPowerReceptor)     div+=powerQuery[j];
    double totalWatt=internalPower[i];
    for (int j=0; j < 6; ++j)     if (j != i && powerQuery[j] > 0) {
      double watts=(totalWatt / div * powerQuery[j]);
      if (tiles[j] instanceof TileGenericPipe) {
        TileGenericPipe nearbyTile=(TileGenericPipe)tiles[j];
        PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyTile.pipe.transport;
        nearbyTransport.receiveEnergy(Orientations.values()[j].reverse(),watts);
        displayPower[j]+=watts / 2F;
        displayPower[i]+=watts / 2F;
        internalPower[i]-=watts;
      }
 else       if (tiles[j] instanceof IPowerReceptor) {
        IPowerReceptor pow=(IPowerReceptor)tiles[j];
        pow.getPowerProvider().receiveEnergy((float)watts,Orientations.values()[j].reverse());
        displayPower[j]+=watts / 2F;
        displayPower[i]+=watts / 2F;
        internalPower[i]-=watts;
      }
    }
  }
  for (int i=0; i < 6; ++i)   if (tiles[i] instanceof IPowerReceptor && !(tiles[i] instanceof TileGenericPipe)) {
    IPowerReceptor receptor=(IPowerReceptor)tiles[i];
    int request=receptor.powerRequest();
    if (request > 0)     requestEnergy(Orientations.values()[i],request);
  }
  int transferQuery[]={0,0,0,0,0,0};
  for (int i=0; i < 6; ++i) {
    transferQuery[i]=0;
    for (int j=0; j < 6; ++j)     if (j != i)     transferQuery[i]+=powerQuery[j];
  }
  for (int i=0; i < 6; ++i)   if (transferQuery[i] != 0)   if (tiles[i] != null) {
    TileEntity entity=tiles[i];
    if (entity instanceof TileGenericPipe) {
      TileGenericPipe nearbyTile=(TileGenericPipe)entity;
      PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyTile.pipe.transport;
      nearbyTransport.requestEnergy(Orientations.values()[i].reverse(),transferQuery[i]);
    }
  }
  if (APIProxy.isServerSide())   if (tracker.markTimeIfDelay(worldObj,2 * BuildCraftCore.updateFactor))   CoreProxy.sendToPlayers(this.container.getUpdatePacket(),worldObj,xCoord,yCoord,zCoord,40,mod_BuildCraftCore.instance);
}",0.9982541222114452
157030,"public void synchronizeIfDelay(int delay){
  if (APIProxy.isServerSide())   if (networkSyncTracker.markTimeIfDelay(worldObj,delay))   CoreProxy.sendToPlayers(getUpdatePacket(),xCoord,yCoord,zCoord,40,mod_BuildCraftCore.instance);
}","public void synchronizeIfDelay(int delay){
  if (APIProxy.isServerSide())   if (networkSyncTracker.markTimeIfDelay(worldObj,delay))   CoreProxy.sendToPlayers(getUpdatePacket(),worldObj,xCoord,yCoord,zCoord,40,mod_BuildCraftCore.instance);
}",0.9808917197452228
157031,"@Override public void sendNotification(Check check,Subscription subscription,List<Alert> alerts) throws NotificationFailedException {
  LOGGER.info(""String_Node_Str"",check.getName(),check.getState().name(),url(check),alerts.size());
  Snmp snmp=createSnmpConnection();
  Address targetaddress=new UdpAddress(seyrenConfig.getSnmpHost() + ""String_Node_Str"" + seyrenConfig.getSnmpPort());
  CommunityTarget target=new CommunityTarget();
  target.setCommunity(octetString(seyrenConfig.getSnmpCommunity()));
  target.setVersion(SnmpConstants.version2c);
  target.setAddress(targetaddress);
  for (  Alert alert : alerts) {
    PDU trap=new PDU();
    trap.setType(PDU.TRAP);
    OID oid=new OID(seyrenConfig.getSnmpOID());
    OID name=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    OID metric=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    OID state=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    OID value=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    OID error=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    OID warn=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    OID id=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    OID checkUrl=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    trap.add(new VariableBinding(SnmpConstants.snmpTrapOID,oid));
    trap.add(new VariableBinding(SnmpConstants.sysUpTime,new TimeTicks(5000)));
    trap.add(variableBinding(name,check.getName()));
    trap.add(variableBinding(metric,alert.getTarget()));
    trap.add(variableBinding(state,check.getState().name()));
    trap.add(variableBinding(value,alert.getValue().toString()));
    trap.add(variableBinding(warn,check.getWarn().toString()));
    trap.add(variableBinding(error,check.getError().toString()));
    trap.add(variableBinding(id,check.getId()));
    trap.add(variableBinding(checkUrl,String.format(""String_Node_Str"",seyrenConfig.getBaseUrl(),check.getId())));
    sendAlert(check,snmp,target,trap);
  }
  closeSnmpConnection(snmp);
}","@Override public void sendNotification(Check check,Subscription subscription,List<Alert> alerts) throws NotificationFailedException {
  LOGGER.info(""String_Node_Str"",check.getName(),check.getState().name(),url(check),alerts.size());
  Snmp snmp=createSnmpConnection();
  Address targetaddress=new UdpAddress(seyrenConfig.getSnmpHost() + ""String_Node_Str"" + seyrenConfig.getSnmpPort());
  CommunityTarget target=new CommunityTarget();
  target.setCommunity(octetString(seyrenConfig.getSnmpCommunity()));
  target.setVersion(SnmpConstants.version2c);
  target.setAddress(targetaddress);
  for (  Alert alert : alerts) {
    PDU trap=new PDU();
    trap.setType(PDU.TRAP);
    OID oid=new OID(seyrenConfig.getSnmpOID());
    OID name=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    OID metric=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    OID state=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    OID value=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    OID error=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    OID warn=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    OID id=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    OID checkUrl=new OID(seyrenConfig.getSnmpOID() + ""String_Node_Str"");
    trap.add(new VariableBinding(SnmpConstants.sysUpTime,new TimeTicks(5000)));
    trap.add(new VariableBinding(SnmpConstants.snmpTrapOID,oid));
    trap.add(variableBinding(name,check.getName()));
    trap.add(variableBinding(metric,alert.getTarget()));
    trap.add(variableBinding(state,check.getState().name()));
    trap.add(variableBinding(value,alert.getValue().toString()));
    trap.add(variableBinding(warn,check.getWarn().toString()));
    trap.add(variableBinding(error,check.getError().toString()));
    trap.add(variableBinding(id,check.getId()));
    trap.add(variableBinding(checkUrl,String.format(""String_Node_Str"",seyrenConfig.getBaseUrl(),check.getId())));
    sendAlert(check,snmp,target,trap);
  }
  closeSnmpConnection(snmp);
}",0.967439565860878
157032,"private void closeOpenAlerts(OpsGenieClient client,String apiKey,Check check) throws OpsGenieClientException, ParseException, IOException {
}","private void closeOpenAlerts(OpsGenieClient client,String apiKey,Check check) throws OpsGenieClientException, ParseException, IOException {
  List<com.ifountain.opsgenie.client.model.beans.Alert> opsAlerts=getOpenAlerts(client,apiKey,check);
  for (  com.ifountain.opsgenie.client.model.beans.Alert alert : opsAlerts) {
    closeAlert(alert,client,apiKey,check);
  }
}",0.5540275049115914
157033,"private void sendMessage(String ircCatHost,int ircCatPort,String message,String channel) throws IOException {
  Socket socket=new Socket(ircCatHost,ircCatPort);
  Closer closer=Closer.create();
  try {
    Writer out=closer.register(new OutputStreamWriter(socket.getOutputStream()));
    out.write(format(""String_Node_Str"",channel,message));
    out.flush();
  }
 catch (  IOException e) {
    socket.close();
    throw closer.rethrow(e);
  }
 finally {
    closer.close();
  }
}","private void sendMessage(String ircCatHost,int ircCatPort,String message,String channel) throws IOException {
  Socket socket=new Socket(ircCatHost,ircCatPort);
  Closer closer=Closer.create();
  try {
    Writer out=closer.register(new OutputStreamWriter(socket.getOutputStream(),Charset.forName(""String_Node_Str"")));
    out.write(format(""String_Node_Str"",channel,message));
    out.flush();
  }
 catch (  IOException e) {
    socket.close();
    throw closer.rethrow(e);
  }
 finally {
    closer.close();
  }
}",0.9647532729103726
157034,"public static MessageType fromAlertType(AlertType alert){
switch (alert) {
case OK:
    return RECOVERY;
case WARN:
case UNKNOWN:
  return WARNING;
case ERROR:
case EXCEPTION:
return CRITICAL;
}
return INFO;
}","public static MessageType fromAlertType(AlertType alert){
switch (alert) {
case OK:
    return RECOVERY;
case WARN:
case UNKNOWN:
  return WARNING;
case ERROR:
case EXCEPTION:
return CRITICAL;
default :
return INFO;
}
}",0.9158878504672896
157035,"public static String create(String target){
  if (target == null) {
    return null;
  }
  return new String(DigestUtils.md5(target));
}","public static String create(String target){
  if (target == null) {
    return null;
  }
  return new String(DigestUtils.md5(target),Charset.forName(""String_Node_Str""));
}",0.8859934853420195
157036,"@Inject public MongoStore(SeyrenConfig seyrenConfig){
  try {
    String uri=seyrenConfig.getMongoUrl();
    MongoClientURI mongoClientUri=new MongoClientURI(uri);
    MongoClient mongoClient=new MongoClient(mongoClientUri);
    DB mongo=mongoClient.getDB(mongoClientUri.getDatabase());
    mongo.setWriteConcern(WriteConcern.ACKNOWLEDGED);
    this.mongo=mongo;
    bootstrapMongo();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@Inject public MongoStore(SeyrenConfig seyrenConfig){
  try {
    String uri=seyrenConfig.getMongoUrl();
    MongoClientURI mongoClientUri=new MongoClientURI(uri);
    MongoClient mongoClient=new MongoClient(mongoClientUri);
    DB mongoDB=mongoClient.getDB(mongoClientUri.getDatabase());
    mongoDB.setWriteConcern(WriteConcern.ACKNOWLEDGED);
    this.mongo=mongoDB;
    bootstrapMongo();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9934354485776804
157037,"@Override public Check saveCheck(Check check){
  DBObject findObject=forId(check.getId());
  DBObject updateObject=object(""String_Node_Str"",check.getName()).with(""String_Node_Str"",check.getDescription()).with(""String_Node_Str"",check.getTarget()).with(""String_Node_Str"",check.getWarn().toPlainString()).with(""String_Node_Str"",check.getError().toPlainString()).with(""String_Node_Str"",check.isEnabled()).with(""String_Node_Str"",new Date(check.getLastCheck().getMillis())).with(""String_Node_Str"",check.getState().toString());
  DBObject setObject=object(""String_Node_Str"",updateObject);
  getChecksCollection().update(findObject,setObject);
  return check;
}","@Override public Check saveCheck(Check check){
  DBObject findObject=forId(check.getId());
  DateTime lastCheck=check.getLastCheck();
  DBObject updateObject=object(""String_Node_Str"",check.getName()).with(""String_Node_Str"",check.getDescription()).with(""String_Node_Str"",check.getTarget()).with(""String_Node_Str"",check.getWarn().toPlainString()).with(""String_Node_Str"",check.getError().toPlainString()).with(""String_Node_Str"",check.isEnabled()).with(""String_Node_Str"",lastCheck == null ? null : new Date(lastCheck.getMillis())).with(""String_Node_Str"",check.getState().toString());
  DBObject setObject=object(""String_Node_Str"",updateObject);
  getChecksCollection().update(findObject,setObject);
  return check;
}",0.9274725274725276
157038,"@Override public final void run(){
  if (!check.isEnabled()) {
    return;
  }
  try {
    Map<String,Optional<BigDecimal>> targetValues=targetChecker.check(check);
    if (targetValues.isEmpty()) {
      return;
    }
    DateTime now=new DateTime();
    BigDecimal warn=check.getWarn();
    BigDecimal error=check.getError();
    AlertType worstState=AlertType.UNKNOWN;
    List<Alert> interestingAlerts=new ArrayList<Alert>();
    for (    Entry<String,Optional<BigDecimal>> entry : targetValues.entrySet()) {
      String target=entry.getKey();
      Optional<BigDecimal> value=entry.getValue();
      if (!value.isPresent()) {
        LOGGER.warn(""String_Node_Str"",target);
        continue;
      }
      BigDecimal currentValue=value.get();
      Alert lastAlert=alertsStore.getLastAlertForTarget(target);
      AlertType lastState;
      if (lastAlert == null) {
        lastState=AlertType.OK;
      }
 else {
        lastState=lastAlert.getToType();
      }
      AlertType currentState=valueChecker.checkValue(currentValue,warn,error);
      if (currentState.isWorseThan(worstState)) {
        worstState=currentState;
      }
      if (isStillOk(lastState,currentState)) {
        continue;
      }
      Alert alert=createAlert(target,currentValue,warn,error,lastState,currentState,now);
      alertsStore.createAlert(check.getId(),alert);
      if (stateIsTheSame(lastState,currentState)) {
        continue;
      }
      interestingAlerts.add(alert);
    }
    check.setState(worstState);
    checksStore.saveCheck(check);
    if (interestingAlerts.isEmpty()) {
      return;
    }
    for (    Subscription subscription : check.getSubscriptions()) {
      if (!subscription.shouldNotify(now)) {
        continue;
      }
      for (      NotificationService notificationService : notificationServices) {
        if (notificationService.canHandle(subscription.getType())) {
          try {
            notificationService.sendNotification(check,subscription,interestingAlerts);
          }
 catch (          Exception e) {
            LOGGER.warn(""String_Node_Str"" + subscription.getTarget() + ""String_Node_Str""+ subscription.getType()+ ""String_Node_Str"",e);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    LOGGER.warn(check.getName() + ""String_Node_Str"",e);
  }
}","@Override public final void run(){
  if (!check.isEnabled()) {
    return;
  }
  try {
    Map<String,Optional<BigDecimal>> targetValues=targetChecker.check(check);
    if (targetValues.isEmpty()) {
      return;
    }
    DateTime now=new DateTime();
    BigDecimal warn=check.getWarn();
    BigDecimal error=check.getError();
    AlertType worstState=AlertType.UNKNOWN;
    List<Alert> interestingAlerts=new ArrayList<Alert>();
    for (    Entry<String,Optional<BigDecimal>> entry : targetValues.entrySet()) {
      String target=entry.getKey();
      Optional<BigDecimal> value=entry.getValue();
      if (!value.isPresent()) {
        LOGGER.warn(""String_Node_Str"",target);
        continue;
      }
      BigDecimal currentValue=value.get();
      Alert lastAlert=alertsStore.getLastAlertForTargetOfCheck(target,check.getId());
      AlertType lastState;
      if (lastAlert == null) {
        lastState=AlertType.OK;
      }
 else {
        lastState=lastAlert.getToType();
      }
      AlertType currentState=valueChecker.checkValue(currentValue,warn,error);
      if (currentState.isWorseThan(worstState)) {
        worstState=currentState;
      }
      if (isStillOk(lastState,currentState)) {
        continue;
      }
      Alert alert=createAlert(target,currentValue,warn,error,lastState,currentState,now);
      alertsStore.createAlert(check.getId(),alert);
      if (stateIsTheSame(lastState,currentState)) {
        continue;
      }
      interestingAlerts.add(alert);
    }
    check.setState(worstState);
    checksStore.saveCheck(check);
    if (interestingAlerts.isEmpty()) {
      return;
    }
    for (    Subscription subscription : check.getSubscriptions()) {
      if (!subscription.shouldNotify(now)) {
        continue;
      }
      for (      NotificationService notificationService : notificationServices) {
        if (notificationService.canHandle(subscription.getType())) {
          try {
            notificationService.sendNotification(check,subscription,interestingAlerts);
          }
 catch (          Exception e) {
            LOGGER.warn(""String_Node_Str"" + subscription.getTarget() + ""String_Node_Str""+ subscription.getType()+ ""String_Node_Str"",e);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    LOGGER.warn(check.getName() + ""String_Node_Str"",e);
  }
}",0.9924291585550508
157039,"@Scheduled(fixedRate=10000) public void performChecks(){
  List<Check> checks=checksStore.getChecks();
  for (  Check check : checks) {
    if (check.isEnabled()) {
      try {
        Alert alert=checker.check(check);
        if (alert != null) {
          alertsStore.createAlert(check.getId(),alert);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
}","@Scheduled(fixedRate=10000) public void performChecks(){
  List<Check> checks=checksStore.getChecks();
  for (  Check check : checks) {
    if (check.isEnabled()) {
      try {
        Alert alert=checker.check(check);
        if (alert != null) {
          alertsStore.createAlert(check.getId(),alert);
          check.setState(alert.getToType());
          checksStore.saveCheck(check);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
}",0.9037372593431484
157040,"@Override public Check saveCheck(Check check){
  DBObject dbo=basicDBObjectById(check.getId());
  getChecksCollection().update(dbo,basicDBObjectWithSet(""String_Node_Str"",check.getName()));
  getChecksCollection().update(dbo,basicDBObjectWithSet(""String_Node_Str"",check.getTarget()));
  getChecksCollection().update(dbo,basicDBObjectWithSet(""String_Node_Str"",check.getWarn()));
  getChecksCollection().update(dbo,basicDBObjectWithSet(""String_Node_Str"",check.getError()));
  getChecksCollection().update(dbo,basicDBObjectWithSet(""String_Node_Str"",check.isEnabled()));
  return check;
}","@Override public Check saveCheck(Check check){
  DBObject dbo=basicDBObjectById(check.getId());
  getChecksCollection().update(dbo,basicDBObjectWithSet(""String_Node_Str"",check.getName()));
  getChecksCollection().update(dbo,basicDBObjectWithSet(""String_Node_Str"",check.getTarget()));
  getChecksCollection().update(dbo,basicDBObjectWithSet(""String_Node_Str"",check.getWarn()));
  getChecksCollection().update(dbo,basicDBObjectWithSet(""String_Node_Str"",check.getError()));
  getChecksCollection().update(dbo,basicDBObjectWithSet(""String_Node_Str"",check.isEnabled()));
  getChecksCollection().update(dbo,basicDBObjectWithSet(""String_Node_Str"",check.getState().toString()));
  return check;
}",0.9173878835562548
157041,"public static boolean canBeWrapped(Object object){
  if (object instanceof WrappedStack) {
    return true;
  }
 else   if (object instanceof Item || object instanceof Block) {
    return true;
  }
 else   if (object instanceof ItemStack && ((ItemStack)object).getItem() != null) {
    return true;
  }
 else   if (object instanceof OreStack) {
    return true;
  }
 else   if (object instanceof List && OreStack.getOreStackFrom((List<?>)object) != null) {
    return true;
  }
 else   if (object instanceof Fluid || object instanceof FluidStack) {
    return true;
  }
  return false;
}","public static boolean canBeWrapped(Object object){
  if (object instanceof WrappedStack) {
    return true;
  }
 else   if (object instanceof Item || object instanceof Block) {
    return true;
  }
 else   if (object instanceof ItemStack && ((ItemStack)object).getItem() != null && !((ItemStack)object).isEmpty()) {
    return true;
  }
 else   if (object instanceof OreStack) {
    return true;
  }
 else   if (object instanceof List && OreStack.getOreStackFrom((List<?>)object) != null) {
    return true;
  }
 else   if (object instanceof Fluid || object instanceof FluidStack) {
    return true;
  }
  return false;
}",0.9718543046357616
157042,"public static void init(){
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),32,Phase.PRE_CALCULATION);
  for (  String dyeName : Colors.DYE_NAMES) {
    EnergyValueRegistryProxy.setEnergyValue(new OreStack(dyeName),16,Phase.PRE_CALCULATION);
  }
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),8192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),8192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),864,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),256,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),2048,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),256,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),8192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),8192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),2048,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),256,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),864,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),256,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),8,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),2048,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),4,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),4,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),12,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),4,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(FluidRegistry.WATER,0.001,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(FluidRegistry.LAVA,0.064,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.STONE,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.GRASS,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.DIRT,1,OreDictionary.WILDCARD_VALUE),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.COBBLESTONE,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.SAND,1,OreDictionary.WILDCARD_VALUE),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.GRAVEL,4,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.GLASS,1,OreDictionary.WILDCARD_VALUE),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.SANDSTONE,1,OreDictionary.WILDCARD_VALUE),4,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.MOSSY_COBBLESTONE,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.OBSIDIAN,64,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.ICE,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.PUMPKIN,144,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.NETHERRACK,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.SOUL_SAND,49,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.STONEBRICK,1,OreDictionary.WILDCARD_VALUE),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.MYCELIUM,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.END_STONE,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.HARDENED_CLAY,256,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.WEB,12,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.TALLGRASS,1,OreDictionary.WILDCARD_VALUE),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.DEADBUSH,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.YELLOW_FLOWER,16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.RED_FLOWER,1,OreDictionary.WILDCARD_VALUE),16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.BROWN_MUSHROOM,32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.RED_MUSHROOM,32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.SNOW_LAYER,0.125f,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.CACTUS,8,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.VINE,8,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.WATERLILY,16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.ANVIL,1,1),5290.667f,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.ANVIL,1,2),2645.333f,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.DOUBLE_PLANT,1,OreDictionary.WILDCARD_VALUE),32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.REDSTONE,32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.SADDLE,192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.SNOWBALL,0.25f,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.BONE,48,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.ENDER_PEARL,1024,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.APPLE,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.GOLDEN_APPLE,1,1),147480,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.PORKCHOP,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.COOKED_PORKCHOP,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.FISH,1,OreDictionary.WILDCARD_VALUE),24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.COOKED_FISH,1,OreDictionary.WILDCARD_VALUE),24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.MELON,16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.BEEF,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.COOKED_BEEF,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.CHICKEN,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.COOKED_CHICKEN,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.ROTTEN_FLESH,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.SPIDER_EYE,128,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.CARROT,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.POTATO,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.BAKED_POTATO,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.POISONOUS_POTATO,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.RABBIT,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.COOKED_RABBIT,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.MUTTON,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.COOKED_MUTTON,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.BEETROOT,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.BEETROOT_SEEDS,16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.GHAST_TEAR,4096,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.RABBIT_FOOT,32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.DRAGON_BREATH,769,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.COAL,1,0),32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.COAL,1,1),32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.DIAMOND,8192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.IRON_INGOT,256,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.GOLD_INGOT,2048,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.STRING,12,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.FEATHER,48,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.GUNPOWDER,192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.WHEAT_SEEDS,16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.WHEAT,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.FLINT,4,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.LEATHER,64,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.BRICK,64,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.CLAY_BALL,64,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.REEDS,32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.EGG,32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.GLOWSTONE_DUST,384,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.DYE,1,0),16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.DYE,1,2),16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.DYE,1,3),16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.DYE,1,4),864,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.DYE,1,5),16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.DYE,1,6),16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.BLAZE_ROD,1536,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.NETHER_WART,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.EMERALD,8192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.NETHER_STAR,24576,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.NETHERBRICK,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.QUARTZ,256,Phase.PRE_CALCULATION);
}","public static void init(){
  EnergyValueRegistryProxy.setEnergyValue(ItemStack.EMPTY,0,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),32,Phase.PRE_CALCULATION);
  for (  String dyeName : Colors.DYE_NAMES) {
    EnergyValueRegistryProxy.setEnergyValue(new OreStack(dyeName),16,Phase.PRE_CALCULATION);
  }
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),8192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),8192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),864,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),256,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),2048,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),256,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),8192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),8192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),2048,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),256,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),864,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),256,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),8,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),2048,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),4,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),4,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),12,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),4,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new OreStack(""String_Node_Str""),32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(FluidRegistry.WATER,0.001,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(FluidRegistry.LAVA,0.064,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.STONE,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.GRASS,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.DIRT,1,OreDictionary.WILDCARD_VALUE),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.COBBLESTONE,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.SAND,1,OreDictionary.WILDCARD_VALUE),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.GRAVEL,4,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.GLASS,1,OreDictionary.WILDCARD_VALUE),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.SANDSTONE,1,OreDictionary.WILDCARD_VALUE),4,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.MOSSY_COBBLESTONE,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.OBSIDIAN,64,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.ICE,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.PUMPKIN,144,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.NETHERRACK,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.SOUL_SAND,49,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.STONEBRICK,1,OreDictionary.WILDCARD_VALUE),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.MYCELIUM,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.END_STONE,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.HARDENED_CLAY,256,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.WEB,12,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.TALLGRASS,1,OreDictionary.WILDCARD_VALUE),1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.DEADBUSH,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.YELLOW_FLOWER,16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.RED_FLOWER,1,OreDictionary.WILDCARD_VALUE),16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.BROWN_MUSHROOM,32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.RED_MUSHROOM,32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.SNOW_LAYER,0.125f,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.CACTUS,8,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.VINE,8,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Blocks.WATERLILY,16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.ANVIL,1,1),5290.667f,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.ANVIL,1,2),2645.333f,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Blocks.DOUBLE_PLANT,1,OreDictionary.WILDCARD_VALUE),32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.REDSTONE,32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.SADDLE,192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.SNOWBALL,0.25f,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.BONE,48,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.ENDER_PEARL,1024,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.APPLE,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.GOLDEN_APPLE,1,1),147480,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.PORKCHOP,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.COOKED_PORKCHOP,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.FISH,1,OreDictionary.WILDCARD_VALUE),24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.COOKED_FISH,1,OreDictionary.WILDCARD_VALUE),24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.MELON,16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.BEEF,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.COOKED_BEEF,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.CHICKEN,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.COOKED_CHICKEN,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.ROTTEN_FLESH,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.SPIDER_EYE,128,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.CARROT,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.POTATO,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.BAKED_POTATO,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.POISONOUS_POTATO,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.RABBIT,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.COOKED_RABBIT,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.MUTTON,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.COOKED_MUTTON,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.BEETROOT,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.BEETROOT_SEEDS,16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.GHAST_TEAR,4096,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.RABBIT_FOOT,32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.DRAGON_BREATH,769,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.COAL,1,0),32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.COAL,1,1),32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.DIAMOND,8192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.IRON_INGOT,256,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.GOLD_INGOT,2048,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.STRING,12,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.FEATHER,48,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.GUNPOWDER,192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.WHEAT_SEEDS,16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.WHEAT,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.FLINT,4,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.LEATHER,64,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.BRICK,64,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.CLAY_BALL,64,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.REEDS,32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.EGG,32,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.GLOWSTONE_DUST,384,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.DYE,1,0),16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.DYE,1,2),16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.DYE,1,3),16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.DYE,1,4),864,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.DYE,1,5),16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(new ItemStack(Items.DYE,1,6),16,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.BLAZE_ROD,1536,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.NETHER_WART,24,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.EMERALD,8192,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.NETHER_STAR,24576,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.NETHERBRICK,1,Phase.PRE_CALCULATION);
  EnergyValueRegistryProxy.setEnergyValue(Items.QUARTZ,256,Phase.PRE_CALCULATION);
}",0.9964117898334044
157043,"@Override public void onPostInit(FMLPostInitializationEvent event){
  FluidHelper.initMilk();
  Abilities.init();
  new VanillaTestSuite().build().save();
  new EETestSuite().build().save();
}","@Override public void onPostInit(FMLPostInitializationEvent event){
  FluidHelper.init();
  Abilities.init();
  new VanillaTestSuite().build().save();
  new EETestSuite().build().save();
}",0.9894736842105264
157044,"private void addBuildingBlocksTabTestCases(){
  add(Blocks.STONE,1);
  add(Blocks.GRASS,1);
  add(Blocks.DIRT,1);
  add(new ItemStack(Blocks.DIRT,1,1),1);
  add(new ItemStack(Blocks.DIRT,1,2),1);
  add(Blocks.COBBLESTONE,1);
  add(new ItemStack(Blocks.PLANKS,1,0),8);
  add(new ItemStack(Blocks.PLANKS,1,1),8);
  add(new ItemStack(Blocks.PLANKS,1,2),8);
  add(new ItemStack(Blocks.PLANKS,1,3),8);
  add(new ItemStack(Blocks.PLANKS,1,4),8);
  add(new ItemStack(Blocks.PLANKS,1,5),8);
  add(Blocks.BEDROCK,null);
  add(Blocks.SAND,1);
  add(new ItemStack(Blocks.SAND,1,1),1);
  add(Blocks.GRAVEL,4);
  add(Blocks.GOLD_ORE,2048);
  add(Blocks.IRON_ORE,256);
  add(Blocks.COAL_ORE,32);
  add(new ItemStack(Blocks.LOG,1,0),32);
  add(new ItemStack(Blocks.LOG,1,1),32);
  add(new ItemStack(Blocks.LOG,1,2),32);
  add(new ItemStack(Blocks.LOG,1,3),32);
  add(Blocks.SPONGE,null);
  add(new ItemStack(Blocks.SPONGE,1,1),null);
  add(Blocks.GLASS,1);
  add(Blocks.LAPIS_ORE,864);
  add(Blocks.LAPIS_BLOCK,9 * 864);
  add(new ItemStack(Blocks.SANDSTONE,1,0),4);
  add(new ItemStack(Blocks.SANDSTONE,1,1),4);
  add(new ItemStack(Blocks.SANDSTONE,1,2),4);
  add(new ItemStack(Blocks.WOOL,1,0),48);
  add(new ItemStack(Blocks.WOOL,1,1),64);
  add(new ItemStack(Blocks.WOOL,1,2),64);
  add(new ItemStack(Blocks.WOOL,1,3),64);
  add(new ItemStack(Blocks.WOOL,1,4),64);
  add(new ItemStack(Blocks.WOOL,1,5),64);
  add(new ItemStack(Blocks.WOOL,1,6),64);
  add(new ItemStack(Blocks.WOOL,1,7),64);
  add(new ItemStack(Blocks.WOOL,1,8),64);
  add(new ItemStack(Blocks.WOOL,1,9),64);
  add(new ItemStack(Blocks.WOOL,1,10),64);
  add(new ItemStack(Blocks.WOOL,1,11),64);
  add(new ItemStack(Blocks.WOOL,1,12),64);
  add(new ItemStack(Blocks.WOOL,1,13),64);
  add(new ItemStack(Blocks.WOOL,1,14),64);
  add(new ItemStack(Blocks.WOOL,1,15),64);
  add(Blocks.GOLD_BLOCK,9 * 2048);
  add(Blocks.IRON_BLOCK,9 * 256);
  add(new ItemStack(Blocks.STONE_SLAB,1,0),0.5);
  add(new ItemStack(Blocks.STONE_SLAB,1,1),2);
  add(new ItemStack(Blocks.STONE_SLAB,1,3),0.5);
  add(new ItemStack(Blocks.STONE_SLAB,1,4),128);
  add(new ItemStack(Blocks.STONE_SLAB,1,5),0.5);
  add(new ItemStack(Blocks.STONE_SLAB,1,6),2);
  add(new ItemStack(Blocks.STONE_SLAB,1,7),512);
  add(Blocks.BRICK_BLOCK,256);
  add(Blocks.BOOKSHELF,528);
  add(Blocks.MOSSY_COBBLESTONE,1);
  add(Blocks.OBSIDIAN,64);
  add(Blocks.OAK_STAIRS,12);
  add(Blocks.DIAMOND_ORE,8192);
  add(Blocks.DIAMOND_BLOCK,9 * 8192);
  add(Blocks.STONE_STAIRS,1.5);
  add(Blocks.REDSTONE_ORE,32);
  add(Blocks.ICE,1);
  add(Blocks.SNOW,1);
  add(Blocks.CLAY,256);
  add(Blocks.PUMPKIN,144);
  add(Blocks.NETHERRACK,1);
  add(Blocks.SOUL_SAND,49);
  add(Blocks.GLOWSTONE,1536);
  add(Blocks.LIT_PUMPKIN,153);
  add(new ItemStack(Blocks.STAINED_GLASS,1,0),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,1),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,2),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,3),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,4),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,5),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,6),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,7),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,8),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,9),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,10),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,11),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,12),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,13),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,14),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,15),3);
  add(new ItemStack(Blocks.STONEBRICK,1,0),1);
  add(new ItemStack(Blocks.STONEBRICK,1,1),1);
  add(new ItemStack(Blocks.STONEBRICK,1,2),1);
  add(new ItemStack(Blocks.STONEBRICK,1,3),1);
  add(Blocks.MELON_BLOCK,144);
  add(Blocks.BRICK_STAIRS,384);
  add(Blocks.STONE_BRICK_STAIRS,1.5);
  add(Blocks.MYCELIUM,1);
  add(Blocks.NETHER_BRICK,4);
  add(Blocks.NETHER_BRICK_STAIRS,6);
  add(Blocks.END_STONE,1);
  add(new ItemStack(Blocks.WOODEN_SLAB,1,0),4);
  add(new ItemStack(Blocks.WOODEN_SLAB,1,1),4);
  add(new ItemStack(Blocks.WOODEN_SLAB,1,2),4);
  add(new ItemStack(Blocks.WOODEN_SLAB,1,3),4);
  add(new ItemStack(Blocks.WOODEN_SLAB,1,4),4);
  add(new ItemStack(Blocks.WOODEN_SLAB,1,5),4);
  add(Blocks.SANDSTONE_STAIRS,6);
  add(Blocks.EMERALD_ORE,8192);
  add(Blocks.EMERALD_BLOCK,9 * 8192);
  add(Blocks.SPRUCE_STAIRS,12);
  add(Blocks.BIRCH_STAIRS,12);
  add(Blocks.JUNGLE_STAIRS,12);
  add(new ItemStack(Blocks.COBBLESTONE_WALL,1,0),1);
  add(new ItemStack(Blocks.COBBLESTONE_WALL,1,1),1);
  add(Blocks.QUARTZ_ORE,256);
  add(new ItemStack(Blocks.QUARTZ_BLOCK,1,0),1024);
  add(new ItemStack(Blocks.QUARTZ_BLOCK,1,1),1024);
  add(new ItemStack(Blocks.QUARTZ_BLOCK,1,2),1024);
  add(Blocks.QUARTZ_STAIRS,1536);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,0),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,1),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,2),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,3),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,4),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,5),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,6),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,7),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,8),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,9),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,10),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,11),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,12),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,13),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,14),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,15),258);
  add(new ItemStack(Blocks.LOG2,1,0),32);
  add(new ItemStack(Blocks.LOG2,1,1),32);
  add(Blocks.ACACIA_STAIRS,12);
  add(Blocks.DARK_OAK_STAIRS,12);
  add(Blocks.HAY_BLOCK,216);
  add(Blocks.HARDENED_CLAY,256);
  add(Blocks.COAL_BLOCK,288);
  add(Blocks.PACKED_ICE,null);
  add(Blocks.RED_SANDSTONE,4);
  add(new ItemStack(Blocks.RED_SANDSTONE,1,1),4);
  add(new ItemStack(Blocks.RED_SANDSTONE,1,2),4);
  add(Blocks.RED_SANDSTONE_STAIRS,6);
  add(Blocks.STONE_SLAB2,2);
  add(Blocks.END_BRICKS,1);
}","private void addBuildingBlocksTabTestCases(){
  add(Blocks.AIR,null);
  add(Blocks.STONE,1);
  add(Blocks.GRASS,1);
  add(Blocks.DIRT,1);
  add(new ItemStack(Blocks.DIRT,1,1),1);
  add(new ItemStack(Blocks.DIRT,1,2),1);
  add(Blocks.COBBLESTONE,1);
  add(new ItemStack(Blocks.PLANKS,1,0),8);
  add(new ItemStack(Blocks.PLANKS,1,1),8);
  add(new ItemStack(Blocks.PLANKS,1,2),8);
  add(new ItemStack(Blocks.PLANKS,1,3),8);
  add(new ItemStack(Blocks.PLANKS,1,4),8);
  add(new ItemStack(Blocks.PLANKS,1,5),8);
  add(Blocks.BEDROCK,null);
  add(Blocks.SAND,1);
  add(new ItemStack(Blocks.SAND,1,1),1);
  add(Blocks.GRAVEL,4);
  add(Blocks.GOLD_ORE,2048);
  add(Blocks.IRON_ORE,256);
  add(Blocks.COAL_ORE,32);
  add(new ItemStack(Blocks.LOG,1,0),32);
  add(new ItemStack(Blocks.LOG,1,1),32);
  add(new ItemStack(Blocks.LOG,1,2),32);
  add(new ItemStack(Blocks.LOG,1,3),32);
  add(Blocks.SPONGE,null);
  add(new ItemStack(Blocks.SPONGE,1,1),null);
  add(Blocks.GLASS,1);
  add(Blocks.LAPIS_ORE,864);
  add(Blocks.LAPIS_BLOCK,9 * 864);
  add(new ItemStack(Blocks.SANDSTONE,1,0),4);
  add(new ItemStack(Blocks.SANDSTONE,1,1),4);
  add(new ItemStack(Blocks.SANDSTONE,1,2),4);
  add(new ItemStack(Blocks.WOOL,1,0),48);
  add(new ItemStack(Blocks.WOOL,1,1),64);
  add(new ItemStack(Blocks.WOOL,1,2),64);
  add(new ItemStack(Blocks.WOOL,1,3),64);
  add(new ItemStack(Blocks.WOOL,1,4),64);
  add(new ItemStack(Blocks.WOOL,1,5),64);
  add(new ItemStack(Blocks.WOOL,1,6),64);
  add(new ItemStack(Blocks.WOOL,1,7),64);
  add(new ItemStack(Blocks.WOOL,1,8),64);
  add(new ItemStack(Blocks.WOOL,1,9),64);
  add(new ItemStack(Blocks.WOOL,1,10),64);
  add(new ItemStack(Blocks.WOOL,1,11),64);
  add(new ItemStack(Blocks.WOOL,1,12),64);
  add(new ItemStack(Blocks.WOOL,1,13),64);
  add(new ItemStack(Blocks.WOOL,1,14),64);
  add(new ItemStack(Blocks.WOOL,1,15),64);
  add(Blocks.GOLD_BLOCK,9 * 2048);
  add(Blocks.IRON_BLOCK,9 * 256);
  add(new ItemStack(Blocks.STONE_SLAB,1,0),0.5);
  add(new ItemStack(Blocks.STONE_SLAB,1,1),2);
  add(new ItemStack(Blocks.STONE_SLAB,1,3),0.5);
  add(new ItemStack(Blocks.STONE_SLAB,1,4),128);
  add(new ItemStack(Blocks.STONE_SLAB,1,5),0.5);
  add(new ItemStack(Blocks.STONE_SLAB,1,6),2);
  add(new ItemStack(Blocks.STONE_SLAB,1,7),512);
  add(Blocks.BRICK_BLOCK,256);
  add(Blocks.BOOKSHELF,528);
  add(Blocks.MOSSY_COBBLESTONE,1);
  add(Blocks.OBSIDIAN,64);
  add(Blocks.OAK_STAIRS,12);
  add(Blocks.DIAMOND_ORE,8192);
  add(Blocks.DIAMOND_BLOCK,9 * 8192);
  add(Blocks.STONE_STAIRS,1.5);
  add(Blocks.REDSTONE_ORE,32);
  add(Blocks.ICE,1);
  add(Blocks.SNOW,1);
  add(Blocks.CLAY,256);
  add(Blocks.PUMPKIN,144);
  add(Blocks.NETHERRACK,1);
  add(Blocks.SOUL_SAND,49);
  add(Blocks.GLOWSTONE,1536);
  add(Blocks.LIT_PUMPKIN,153);
  add(new ItemStack(Blocks.STAINED_GLASS,1,0),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,1),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,2),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,3),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,4),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,5),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,6),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,7),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,8),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,9),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,10),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,11),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,12),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,13),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,14),3);
  add(new ItemStack(Blocks.STAINED_GLASS,1,15),3);
  add(new ItemStack(Blocks.STONEBRICK,1,0),1);
  add(new ItemStack(Blocks.STONEBRICK,1,1),1);
  add(new ItemStack(Blocks.STONEBRICK,1,2),1);
  add(new ItemStack(Blocks.STONEBRICK,1,3),1);
  add(Blocks.MELON_BLOCK,144);
  add(Blocks.BRICK_STAIRS,384);
  add(Blocks.STONE_BRICK_STAIRS,1.5);
  add(Blocks.MYCELIUM,1);
  add(Blocks.NETHER_BRICK,4);
  add(Blocks.NETHER_BRICK_STAIRS,6);
  add(Blocks.END_STONE,1);
  add(new ItemStack(Blocks.WOODEN_SLAB,1,0),4);
  add(new ItemStack(Blocks.WOODEN_SLAB,1,1),4);
  add(new ItemStack(Blocks.WOODEN_SLAB,1,2),4);
  add(new ItemStack(Blocks.WOODEN_SLAB,1,3),4);
  add(new ItemStack(Blocks.WOODEN_SLAB,1,4),4);
  add(new ItemStack(Blocks.WOODEN_SLAB,1,5),4);
  add(Blocks.SANDSTONE_STAIRS,6);
  add(Blocks.EMERALD_ORE,8192);
  add(Blocks.EMERALD_BLOCK,9 * 8192);
  add(Blocks.SPRUCE_STAIRS,12);
  add(Blocks.BIRCH_STAIRS,12);
  add(Blocks.JUNGLE_STAIRS,12);
  add(new ItemStack(Blocks.COBBLESTONE_WALL,1,0),1);
  add(new ItemStack(Blocks.COBBLESTONE_WALL,1,1),1);
  add(Blocks.QUARTZ_ORE,256);
  add(new ItemStack(Blocks.QUARTZ_BLOCK,1,0),1024);
  add(new ItemStack(Blocks.QUARTZ_BLOCK,1,1),1024);
  add(new ItemStack(Blocks.QUARTZ_BLOCK,1,2),1024);
  add(Blocks.QUARTZ_STAIRS,1536);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,0),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,1),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,2),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,3),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,4),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,5),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,6),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,7),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,8),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,9),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,10),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,11),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,12),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,13),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,14),258);
  add(new ItemStack(Blocks.STAINED_HARDENED_CLAY,1,15),258);
  add(new ItemStack(Blocks.LOG2,1,0),32);
  add(new ItemStack(Blocks.LOG2,1,1),32);
  add(Blocks.ACACIA_STAIRS,12);
  add(Blocks.DARK_OAK_STAIRS,12);
  add(Blocks.HAY_BLOCK,216);
  add(Blocks.HARDENED_CLAY,256);
  add(Blocks.COAL_BLOCK,288);
  add(Blocks.PACKED_ICE,null);
  add(Blocks.RED_SANDSTONE,4);
  add(new ItemStack(Blocks.RED_SANDSTONE,1,1),4);
  add(new ItemStack(Blocks.RED_SANDSTONE,1,2),4);
  add(Blocks.RED_SANDSTONE_STAIRS,6);
  add(Blocks.STONE_SLAB2,2);
  add(Blocks.END_BRICKS,1);
}",0.998074145402022
157045,"/** 
 * An awkward fix for the case where milk may not be registered as a liquid but we want to assign an energy value to milk (the liquid). TLDR we substitute a dummy liquid and assign value/recipes to it
 */
public static void initMilk(){
  if (!FluidRegistry.isFluidRegistered(""String_Node_Str"")) {
    if (FluidRegistry.registerFluid(new Fluid(""String_Node_Str"",ResourceLocationHelper.getResourceLocation(""String_Node_Str""),ResourceLocationHelper.getResourceLocation(""String_Node_Str"")))) {
      RecipeRegistryProxy.addRecipe(Items.MILK_BUCKET,Items.BUCKET,new FluidStack(FluidRegistry.getFluid(""String_Node_Str""),Fluid.BUCKET_VOLUME));
      EnergyValueRegistryProxy.setEnergyValue(FluidRegistry.getFluid(""String_Node_Str""),0.064,EnergyValueRegistryProxy.Phase.PRE_CALCULATION);
    }
  }
 else {
    RecipeRegistryProxy.addRecipe(Items.MILK_BUCKET,Items.BUCKET,new FluidStack(FluidRegistry.getFluid(""String_Node_Str""),Fluid.BUCKET_VOLUME));
    EnergyValueRegistryProxy.setEnergyValue(FluidRegistry.getFluid(""String_Node_Str""),0.064,EnergyValueRegistryProxy.Phase.PRE_CALCULATION);
  }
}","/** 
 * An awkward fix for the case where milk may not be registered as a liquid but we want to assign an energy value to milk (the liquid). <p>TL-DR; we substitute a dummy liquid and assign value/recipes to it
 */
private static void initMilk(){
  if (!FluidRegistry.isFluidRegistered(""String_Node_Str"")) {
    if (FluidRegistry.registerFluid(new Fluid(""String_Node_Str"",ResourceLocationHelper.getResourceLocation(""String_Node_Str""),ResourceLocationHelper.getResourceLocation(""String_Node_Str"")))) {
      RecipeRegistryProxy.addRecipe(Items.MILK_BUCKET,Items.BUCKET,new FluidStack(FluidRegistry.getFluid(""String_Node_Str""),Fluid.BUCKET_VOLUME));
      EnergyValueRegistryProxy.setEnergyValue(FluidRegistry.getFluid(""String_Node_Str""),0.064,EnergyValueRegistryProxy.Phase.PRE_CALCULATION);
    }
  }
 else {
    RecipeRegistryProxy.addRecipe(Items.MILK_BUCKET,Items.BUCKET,new FluidStack(FluidRegistry.getFluid(""String_Node_Str""),Fluid.BUCKET_VOLUME));
    EnergyValueRegistryProxy.setEnergyValue(FluidRegistry.getFluid(""String_Node_Str""),0.064,EnergyValueRegistryProxy.Phase.PRE_CALCULATION);
  }
}",0.9927073837739288
157046,"/** 
 * TODO Finish JavaDoc
 * @param recipe
 * @return
 */
public static Set<WrappedStack> getRecipeInputs(IRecipe recipe){
  List<WrappedStack> recipeInputs=new ArrayList<>();
  if (recipe instanceof ShapedRecipes) {
    recipeInputs.addAll(Arrays.asList(((ShapedRecipes)recipe).recipeItems).stream().map(itemStack -> WrappedStack.build(itemStack,1)).collect(Collectors.toList()));
  }
 else   if (recipe instanceof ShapelessRecipes) {
    recipeInputs.addAll(((ShapelessRecipes)recipe).recipeItems.stream().filter(itemStack -> itemStack != null).map(itemStack -> WrappedStack.build(itemStack,1)).collect(Collectors.toList()));
  }
 else   if (recipe instanceof ShapedOreRecipe) {
    ShapedOreRecipe shapedOreRecipe=(ShapedOreRecipe)recipe;
    if (validateOreDictionaryRecipe(Arrays.asList(shapedOreRecipe.getInput()))) {
      for (int i=0; i < shapedOreRecipe.getInput().length; i++) {
        Object recipeInput=shapedOreRecipe.getInput()[i];
        if (recipeInput instanceof Collection) {
          WrappedStack oreStack=WrappedStack.build(recipeInput,1);
          if (oreStack != null) {
            recipeInputs.add(oreStack);
          }
        }
 else         if (recipeInput instanceof ItemStack) {
          recipeInputs.add(WrappedStack.build(recipeInput,1));
        }
      }
    }
  }
 else   if (recipe instanceof ShapelessOreRecipe) {
    ShapelessOreRecipe shapelessOreRecipe=((ShapelessOreRecipe)recipe);
    if (validateOreDictionaryRecipe(shapelessOreRecipe.getInput())) {
      recipeInputs.addAll(shapelessOreRecipe.getInput().stream().filter(recipeInput -> recipeInput instanceof ItemStack || recipeInput instanceof Collection).map(recipeInput -> WrappedStack.build(recipeInput,1)).collect(Collectors.toList()));
    }
  }
  return collateStacks(recipeInputs);
}","/** 
 * TODO Finish JavaDoc
 * @param recipe
 * @return
 */
public static Set<WrappedStack> getRecipeInputs(IRecipe recipe){
  List<WrappedStack> recipeInputs=new ArrayList<>();
  if (recipe instanceof ShapedRecipes) {
    recipeInputs.addAll(Arrays.asList(((ShapedRecipes)recipe).recipeItems).stream().filter(itemStack -> itemStack != null && !itemStack.isEmpty()).map(itemStack -> WrappedStack.build(itemStack,1)).collect(Collectors.toList()));
  }
 else   if (recipe instanceof ShapelessRecipes) {
    recipeInputs.addAll(((ShapelessRecipes)recipe).recipeItems.stream().filter(itemStack -> itemStack != null && !itemStack.isEmpty()).map(itemStack -> WrappedStack.build(itemStack,1)).collect(Collectors.toList()));
  }
 else   if (recipe instanceof ShapedOreRecipe) {
    ShapedOreRecipe shapedOreRecipe=(ShapedOreRecipe)recipe;
    if (validateOreDictionaryRecipe(Arrays.asList(shapedOreRecipe.getInput()))) {
      for (int i=0; i < shapedOreRecipe.getInput().length; i++) {
        Object recipeInput=shapedOreRecipe.getInput()[i];
        if (recipeInput instanceof Collection) {
          WrappedStack oreStack=WrappedStack.build(recipeInput,1);
          if (oreStack != null) {
            recipeInputs.add(oreStack);
          }
        }
 else         if (recipeInput instanceof ItemStack) {
          recipeInputs.add(WrappedStack.build(recipeInput,1));
        }
      }
    }
  }
 else   if (recipe instanceof ShapelessOreRecipe) {
    ShapelessOreRecipe shapelessOreRecipe=((ShapelessOreRecipe)recipe);
    if (validateOreDictionaryRecipe(shapelessOreRecipe.getInput())) {
      recipeInputs.addAll(shapelessOreRecipe.getInput().stream().filter(recipeInput -> recipeInput instanceof ItemStack || recipeInput instanceof Collection).map(recipeInput -> WrappedStack.build(recipeInput,1)).collect(Collectors.toList()));
    }
  }
  return collateStacks(recipeInputs);
}",0.974680098012524
157047,"private boolean mergeTransmutedItemStack(EntityPlayer entityPlayer,Slot transmutationOutputSlot,ItemStack itemStack,int slotMin,int slotMax,boolean ascending){
  int numCanTransmute=MathHelper.floor(this.transmutationTablet.getAvailableEnergy().getValue() / EnergyValueRegistryProxy.getEnergyValue(itemStack).getValue());
  int numTransmuted=0;
  ItemStack itemStack1=itemStack.copy();
  itemStack1.stackSize=Math.min(numCanTransmute,itemStack1.getMaxStackSize());
  if (numCanTransmute <= 0) {
    return false;
  }
  int currentSlotIndex=ascending ? slotMax - 1 : slotMin;
  Slot slot;
  ItemStack stackInSlot;
  while (itemStack1.stackSize > 0 && (!ascending && currentSlotIndex < slotMax || ascending && currentSlotIndex >= slotMin)) {
    slot=(Slot)this.inventorySlots.get(currentSlotIndex);
    stackInSlot=slot.getStack();
    if (stackInSlot == null) {
      stackInSlot=itemStack1.copy();
      stackInSlot.stackSize=itemStack1.stackSize;
      slot.putStack(stackInSlot);
      numTransmuted=itemStack1.stackSize;
      itemStack1.stackSize=0;
      slot.onSlotChanged();
    }
 else     if (slot.isItemValid(itemStack1) && ItemStackUtils.equalsIgnoreStackSize(itemStack1,stackInSlot)) {
      int slotStackSizeLimit=Math.min(stackInSlot.getMaxStackSize(),slot.getSlotStackLimit());
      int combinedStackSize=stackInSlot.stackSize + itemStack1.stackSize;
      if (combinedStackSize <= slotStackSizeLimit) {
        stackInSlot.stackSize=combinedStackSize;
        numTransmuted=itemStack1.stackSize;
        itemStack1.stackSize=0;
        slot.onSlotChanged();
      }
 else       if (stackInSlot.stackSize < slotStackSizeLimit) {
        itemStack1.stackSize-=slotStackSizeLimit - stackInSlot.stackSize;
        stackInSlot.stackSize=slotStackSizeLimit;
        numTransmuted=itemStack1.stackSize;
        itemStack1.stackSize=0;
        slot.onSlotChanged();
      }
    }
    currentSlotIndex+=ascending ? -1 : 1;
  }
  ((SlotTabletOutput)transmutationOutputSlot).onShiftPickupFromSlot(entityPlayer,ItemStackUtils.clone(itemStack,numTransmuted));
  return false;
}","private boolean mergeTransmutedItemStack(EntityPlayer entityPlayer,Slot transmutationOutputSlot,ItemStack itemStack,int slotMin,int slotMax,boolean ascending){
  int numCanTransmute=MathHelper.floor(this.transmutationTablet.getAvailableEnergy().getValue() / EnergyValueRegistryProxy.getEnergyValue(itemStack).getValue());
  int numTransmuted=0;
  ItemStack itemStack1=itemStack.copy();
  itemStack1.stackSize=Math.min(numCanTransmute,itemStack1.getMaxStackSize());
  if (numCanTransmute <= 0) {
    return false;
  }
  int currentSlotIndex=ascending ? slotMax - 1 : slotMin;
  Slot slot;
  ItemStack stackInSlot;
  while (itemStack1.stackSize > 0 && (!ascending && currentSlotIndex < slotMax || ascending && currentSlotIndex >= slotMin)) {
    slot=(Slot)this.inventorySlots.get(currentSlotIndex);
    stackInSlot=slot.getStack();
    if (stackInSlot == null) {
      stackInSlot=itemStack1.copy();
      stackInSlot.stackSize=itemStack1.stackSize;
      slot.putStack(stackInSlot);
      numTransmuted=itemStack1.stackSize;
      itemStack1.stackSize=0;
      slot.onSlotChanged();
    }
 else     if (slot.isItemValid(itemStack1) && ItemStackUtils.equalsIgnoreStackSize(itemStack1,stackInSlot)) {
      int slotStackSizeLimit=Math.min(stackInSlot.getMaxStackSize(),slot.getSlotStackLimit());
      int combinedStackSize=stackInSlot.stackSize + itemStack1.stackSize;
      if (combinedStackSize <= slotStackSizeLimit) {
        stackInSlot.stackSize=combinedStackSize;
        numTransmuted=itemStack1.stackSize;
        itemStack1.stackSize=0;
        slot.onSlotChanged();
      }
 else       if (stackInSlot.stackSize < slotStackSizeLimit) {
        itemStack1.stackSize=slotStackSizeLimit - stackInSlot.stackSize;
        stackInSlot.stackSize=slotStackSizeLimit;
        numTransmuted=itemStack1.stackSize;
        itemStack1.stackSize=0;
        slot.onSlotChanged();
      }
    }
    currentSlotIndex+=ascending ? -1 : 1;
  }
  ((SlotTabletOutput)transmutationOutputSlot).onShiftPickupFromSlot(entityPlayer,ItemStackUtils.clone(itemStack,numTransmuted));
  return false;
}",0.9997597886139804
157048,"@Override public int compare(WrappedStack wrappedStack1,WrappedStack wrappedStack2){
  if (wrappedStack1.wrappedStack instanceof ItemStack) {
    if (wrappedStack2.wrappedStack instanceof ItemStack) {
      return ItemHelper.compare((ItemStack)wrappedStack1.wrappedStack,(ItemStack)wrappedStack2.wrappedStack);
    }
 else {
      return 1;
    }
  }
 else   if (wrappedStack1.wrappedStack instanceof OreStack) {
    if (wrappedStack2.wrappedStack instanceof ItemStack) {
      return -1;
    }
 else     if (wrappedStack2.wrappedStack instanceof OreStack) {
      return OreStack.compare((OreStack)wrappedStack1.wrappedStack,(OreStack)wrappedStack2.wrappedStack);
    }
 else {
      return 1;
    }
  }
 else   if (wrappedStack1.wrappedStack instanceof FluidStack) {
    if (wrappedStack2.wrappedStack instanceof ItemStack || wrappedStack2.wrappedStack instanceof OreStack) {
      return -1;
    }
 else     if (wrappedStack2.wrappedStack instanceof FluidStack) {
      return FluidHelper.compare((FluidStack)wrappedStack1.wrappedStack,(FluidStack)wrappedStack2.wrappedStack);
    }
 else {
      return 1;
    }
  }
 else   if (wrappedStack1.wrappedStack == null) {
    if (wrappedStack2.wrappedStack != null) {
      return -1;
    }
 else {
      return 0;
    }
  }
  return 0;
}","@Override public int compare(WrappedStack wrappedStack1,WrappedStack wrappedStack2){
  if (wrappedStack1.wrappedStack instanceof ItemStack) {
    if (wrappedStack2.wrappedStack instanceof ItemStack) {
      int compareResult=ItemHelper.compare((ItemStack)wrappedStack1.wrappedStack,(ItemStack)wrappedStack2.wrappedStack);
      if (compareResult == 0) {
        return wrappedStack1.stackSize - wrappedStack2.stackSize;
      }
 else {
        return compareResult;
      }
    }
 else {
      return 1;
    }
  }
 else   if (wrappedStack1.wrappedStack instanceof OreStack) {
    if (wrappedStack2.wrappedStack instanceof ItemStack) {
      return -1;
    }
 else     if (wrappedStack2.wrappedStack instanceof OreStack) {
      int compareResult=OreStack.compare((OreStack)wrappedStack1.wrappedStack,(OreStack)wrappedStack2.wrappedStack);
      if (compareResult == 0) {
        return wrappedStack1.stackSize - wrappedStack2.stackSize;
      }
 else {
        return compareResult;
      }
    }
 else {
      return 1;
    }
  }
 else   if (wrappedStack1.wrappedStack instanceof FluidStack) {
    if (wrappedStack2.wrappedStack instanceof ItemStack || wrappedStack2.wrappedStack instanceof OreStack) {
      return -1;
    }
 else     if (wrappedStack2.wrappedStack instanceof FluidStack) {
      int compareResult=FluidHelper.compare((FluidStack)wrappedStack1.wrappedStack,(FluidStack)wrappedStack2.wrappedStack);
      if (compareResult == 0) {
        return wrappedStack1.stackSize - wrappedStack2.stackSize;
      }
 else {
        return compareResult;
      }
    }
 else {
      return 1;
    }
  }
 else   if (wrappedStack1.wrappedStack == null) {
    if (wrappedStack2.wrappedStack != null) {
      return -1;
    }
 else {
      return 0;
    }
  }
  return 0;
}",0.8265272786671023
157049,"/** 
 * TODO Finish JavaDoc
 * @param object
 * @param blacklist
 */
public void removeFromBlacklist(Object object,Blacklist blacklist){
  if (WrappedStack.canBeWrapped(object)) {
    WrappedStack wrappedStack=WrappedStack.wrap(object,1);
    if (blacklist == Blacklist.KNOWLEDGE) {
      if (wrappedStack != null && !MinecraftForge.EVENT_BUS.post(new KnowledgeWhitelistEvent(object))) {
        LogHelper.trace(KNOWLEDGE_WHITELIST_MARKER,""String_Node_Str"",LoaderHelper.getLoaderState(),Loader.instance().activeModContainer().getModId(),wrappedStack);
        knowledgeBlacklist.remove(wrappedStack);
      }
    }
 else     if (blacklist == Blacklist.EXCHANGE) {
      if (wrappedStack != null && !MinecraftForge.EVENT_BUS.post(new ExchangeWhitelistEvent(object))) {
        LogHelper.trace(EXCHANGE_WHITELIST_MARKER,""String_Node_Str"",LoaderHelper.getLoaderState(),Loader.instance().activeModContainer().getModId(),wrappedStack);
        exchangeBlacklist.remove(wrappedStack);
      }
    }
  }
}","/** 
 * TODO Finish JavaDoc
 * @param object
 * @param blacklist
 */
public void removeFromBlacklist(Object object,Blacklist blacklist){
  if (WrappedStack.canBeWrapped(object)) {
    WrappedStack wrappedStack=WrappedStack.wrap(object,1);
    if (blacklist == Blacklist.KNOWLEDGE) {
      if (wrappedStack != null && !MinecraftForge.EVENT_BUS.post(new KnowledgeWhitelistEvent(object))) {
        LogHelper.trace(KNOWLEDGE_WHITELIST_MARKER,""String_Node_Str"",LoaderHelper.getLoaderState(),Loader.instance().activeModContainer().getModId(),wrappedStack);
        knowledgeBlacklist.remove(wrappedStack);
        save(blacklist);
      }
    }
 else     if (blacklist == Blacklist.EXCHANGE) {
      if (wrappedStack != null && !MinecraftForge.EVENT_BUS.post(new ExchangeWhitelistEvent(object))) {
        LogHelper.trace(EXCHANGE_WHITELIST_MARKER,""String_Node_Str"",LoaderHelper.getLoaderState(),Loader.instance().activeModContainer().getModId(),wrappedStack);
        exchangeBlacklist.remove(wrappedStack);
        save(blacklist);
      }
    }
  }
}",0.975562072336266
157050,"@Override public void processCommand(ICommandSender commandSender,String[] args){
  if (args.length < 4) {
    throw new WrongUsageException(Messages.Commands.SET_ENERGY_VALUE_USAGE);
  }
 else {
    Item item=getItemByText(commandSender,args[2]);
    float energyValue=0;
    int metaData=0;
    if (args.length >= 4) {
      energyValue=(float)parseDoubleWithMin(commandSender,args[3],0);
    }
 else     if (args.length >= 5) {
      metaData=parseInt(commandSender,args[4]);
    }
    ItemStack itemStack=new ItemStack(item,1,metaData);
    if (args.length >= 6) {
      String stringNBTData=func_147178_a(commandSender,args,5).getUnformattedText();
      try {
        NBTBase nbtBase=JsonToNBT.func_150315_a(stringNBTData);
        if (!(nbtBase instanceof NBTTagCompound)) {
          func_152373_a(commandSender,this,Messages.Commands.INVALID_NBT_TAG_ERROR,new Object[]{""String_Node_Str""});
          return;
        }
        itemStack.setTagCompound((NBTTagCompound)nbtBase);
      }
 catch (      Exception exception) {
        func_152373_a(commandSender,this,Messages.Commands.INVALID_NBT_TAG_ERROR,new Object[]{exception.getMessage()});
        return;
      }
    }
    WrappedStack wrappedStack=WrappedStack.wrap(itemStack);
    EnergyValue newEnergyValue=new EnergyValue(energyValue);
    if (wrappedStack != null && newEnergyValue != null && Float.compare(newEnergyValue.getValue(),0) > 0) {
      if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
        EnergyValueRegistryProxy.setEnergyValue(wrappedStack,newEnergyValue,EnergyValueRegistryProxy.Phase.PRE_CALCULATION);
      }
 else       if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
        EnergyValueRegistryProxy.setEnergyValue(wrappedStack,newEnergyValue);
      }
 else {
        throw new WrongUsageException(Messages.Commands.SET_ENERGY_VALUE_USAGE);
      }
      EnergyValueRegistry.INSTANCE.save();
      func_152373_a(commandSender,this,Messages.Commands.SET_ENERGY_VALUE_SUCCESS,new Object[]{commandSender.getCommandSenderName(),args[1],itemStack.func_151000_E(),newEnergyValue.getChatComponent()});
    }
 else {
      throw new WrongUsageException(Messages.Commands.SET_ENERGY_VALUE_USAGE);
    }
  }
}","@Override public void processCommand(ICommandSender commandSender,String[] args){
  if (args.length < 4) {
    throw new WrongUsageException(Messages.Commands.SET_ENERGY_VALUE_USAGE);
  }
 else {
    Item item=getItemByText(commandSender,args[2]);
    float energyValue=0;
    int metaData=0;
    if (args.length >= 4) {
      energyValue=(float)parseDoubleWithMin(commandSender,args[3],0);
    }
 else     if (args.length >= 5) {
      metaData=parseInt(commandSender,args[4]);
    }
    ItemStack itemStack=new ItemStack(item,1,metaData);
    if (args.length >= 6) {
      String stringNBTData=func_147178_a(commandSender,args,5).getUnformattedText();
      try {
        NBTBase nbtBase=JsonToNBT.func_150315_a(stringNBTData);
        if (!(nbtBase instanceof NBTTagCompound)) {
          func_152373_a(commandSender,this,Messages.Commands.INVALID_NBT_TAG_ERROR,new Object[]{""String_Node_Str""});
          return;
        }
        itemStack.setTagCompound((NBTTagCompound)nbtBase);
      }
 catch (      Exception exception) {
        func_152373_a(commandSender,this,Messages.Commands.INVALID_NBT_TAG_ERROR,new Object[]{exception.getMessage()});
        return;
      }
    }
    WrappedStack wrappedStack=WrappedStack.wrap(itemStack);
    EnergyValue newEnergyValue=new EnergyValue(energyValue);
    if (wrappedStack != null && newEnergyValue != null) {
      if (Float.compare(newEnergyValue.getValue(),0) > 0) {
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          EnergyValueRegistryProxy.setEnergyValue(wrappedStack,newEnergyValue,EnergyValueRegistryProxy.Phase.PRE_CALCULATION);
        }
 else         if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          EnergyValueRegistryProxy.setEnergyValue(wrappedStack,newEnergyValue);
        }
 else {
          throw new WrongUsageException(Messages.Commands.SET_ENERGY_VALUE_USAGE);
        }
        EnergyValueRegistry.INSTANCE.save();
        func_152373_a(commandSender,this,Messages.Commands.SET_ENERGY_VALUE_SUCCESS,new Object[]{commandSender.getCommandSenderName(),args[1],itemStack.func_151000_E(),newEnergyValue.getChatComponent()});
      }
 else       if (Float.compare(newEnergyValue.getValue(),0) == 0) {
        BlacklistRegistryProxy.setAsNotLearnable(wrappedStack);
        BlacklistRegistryProxy.setAsNotExchangeable(wrappedStack);
        func_152373_a(commandSender,this,""String_Node_Str"",new Object[]{commandSender.getCommandSenderName(),itemStack.func_151000_E()});
      }
    }
 else {
      throw new WrongUsageException(Messages.Commands.SET_ENERGY_VALUE_USAGE);
    }
  }
}",0.9183074989526604
157051,"@Override public void processCommand(ICommandSender commandSender,String[] args){
  if (args.length < 3) {
    throw new WrongUsageException(Messages.Commands.SET_ENERGY_VALUE_CURRENT_ITEM_USAGE);
  }
 else {
    float energyValue=0;
    if (args.length >= 3) {
      energyValue=(float)parseDoubleWithMin(commandSender,args[2],0);
    }
    ItemStack itemStack=((EntityPlayer)commandSender).getCurrentEquippedItem();
    if (itemStack != null) {
      WrappedStack wrappedStack=WrappedStack.wrap(itemStack);
      EnergyValue newEnergyValue=new EnergyValue(energyValue);
      if (wrappedStack != null && newEnergyValue != null && Float.compare(newEnergyValue.getValue(),0) > 0) {
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          EnergyValueRegistryProxy.setEnergyValue(wrappedStack,newEnergyValue,EnergyValueRegistryProxy.Phase.PRE_CALCULATION);
        }
 else         if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          EnergyValueRegistryProxy.setEnergyValue(wrappedStack,newEnergyValue);
        }
 else {
          throw new WrongUsageException(Messages.Commands.SET_ENERGY_VALUE_CURRENT_ITEM_USAGE);
        }
        func_152373_a(commandSender,this,Messages.Commands.SET_ENERGY_VALUE_CURRENT_ITEM_SUCCESS,new Object[]{commandSender.getCommandSenderName(),args[1],itemStack.func_151000_E(),newEnergyValue.getChatComponent()});
      }
 else {
        throw new WrongUsageException(Messages.Commands.SET_ENERGY_VALUE_CURRENT_ITEM_USAGE);
      }
      EnergyValueRegistry.INSTANCE.save();
    }
 else {
      throw new WrongUsageException(Messages.Commands.NO_ITEM);
    }
  }
}","@Override public void processCommand(ICommandSender commandSender,String[] args){
  if (args.length < 3) {
    throw new WrongUsageException(Messages.Commands.SET_ENERGY_VALUE_CURRENT_ITEM_USAGE);
  }
 else {
    float energyValue=0;
    if (args.length >= 3) {
      energyValue=(float)parseDoubleWithMin(commandSender,args[2],0);
    }
    ItemStack itemStack=((EntityPlayer)commandSender).getCurrentEquippedItem();
    if (itemStack != null) {
      WrappedStack wrappedStack=WrappedStack.wrap(itemStack);
      EnergyValue newEnergyValue=new EnergyValue(energyValue);
      if (wrappedStack != null && newEnergyValue != null) {
        if (Float.compare(newEnergyValue.getValue(),0) > 0) {
          if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
            EnergyValueRegistryProxy.setEnergyValue(wrappedStack,newEnergyValue,EnergyValueRegistryProxy.Phase.PRE_CALCULATION);
          }
 else           if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
            EnergyValueRegistryProxy.setEnergyValue(wrappedStack,newEnergyValue);
          }
 else {
            throw new WrongUsageException(Messages.Commands.SET_ENERGY_VALUE_CURRENT_ITEM_USAGE);
          }
          func_152373_a(commandSender,this,Messages.Commands.SET_ENERGY_VALUE_CURRENT_ITEM_SUCCESS,new Object[]{commandSender.getCommandSenderName(),args[1],itemStack.func_151000_E(),newEnergyValue.getChatComponent()});
        }
 else         if (Float.compare(newEnergyValue.getValue(),0) == 0) {
          BlacklistRegistryProxy.setAsNotLearnable(wrappedStack);
          BlacklistRegistryProxy.setAsNotExchangeable(wrappedStack);
          func_152373_a(commandSender,this,""String_Node_Str"",new Object[]{commandSender.getCommandSenderName(),itemStack.func_151000_E()});
        }
      }
 else {
        throw new WrongUsageException(Messages.Commands.SET_ENERGY_VALUE_CURRENT_ITEM_USAGE);
      }
      EnergyValueRegistry.INSTANCE.save();
    }
 else {
      throw new WrongUsageException(Messages.Commands.NO_ITEM);
    }
  }
}",0.8890728476821192
157052,"/** 
 * TODO Finish JavaDoc This is where the magic happens
 */
public void compute(){
  valuesNeedRegeneration=false;
  final Map<WrappedStack,EnergyValue> stackValueMap=new TreeMap<>();
  uncomputedStacks=new TreeSet<>();
  preCalculationStackValueMap.keySet().stream().filter(wrappedStack -> wrappedStack != null && wrappedStack.getWrappedObject() != null && preCalculationStackValueMap.get(wrappedStack) != null).forEach(wrappedStack -> stackValueMap.put(wrappedStack,preCalculationStackValueMap.get(wrappedStack)));
  stackValueMap.putAll(calculateStackValueMap(stackValueMap));
  postCalculationStackValueMap.keySet().stream().filter(wrappedStack -> wrappedStack != null && wrappedStack.getWrappedObject() != null && postCalculationStackValueMap.get(wrappedStack) != null).forEach(wrappedStack -> stackValueMap.put(wrappedStack,postCalculationStackValueMap.get(wrappedStack)));
  ImmutableSortedMap.Builder<WrappedStack,EnergyValue> stackMappingsBuilder=ImmutableSortedMap.naturalOrder();
  stackMappingsBuilder.putAll(stackValueMap);
  this.stackValueMap=stackMappingsBuilder.build();
  calculateValueStackMap();
  save();
}","/** 
 * TODO Finish JavaDoc This is where the magic happens
 */
public void compute(){
  valuesNeedRegeneration=false;
  final Map<WrappedStack,EnergyValue> stackValueMap=new TreeMap<>();
  uncomputedStacks=new TreeSet<>();
  Map<WrappedStack,EnergyValue> fileValueMap=null;
  try {
    fileValueMap=SerializationHelper.readMapFromFile(preCalculationValuesFile);
  }
 catch (  FileNotFoundException e) {
    LogHelper.warn(ENERGY_VALUE_MARKER,""String_Node_Str"",preCalculationValuesFile.getAbsolutePath());
  }
  if (fileValueMap != null) {
    for (    WrappedStack wrappedStack : fileValueMap.keySet()) {
      if (wrappedStack != null && wrappedStack.getWrappedObject() != null && fileValueMap.get(wrappedStack) != null) {
        preCalculationStackValueMap.put(wrappedStack,fileValueMap.get(wrappedStack));
      }
    }
  }
  preCalculationStackValueMap.keySet().stream().filter(wrappedStack -> wrappedStack != null && wrappedStack.getWrappedObject() != null && preCalculationStackValueMap.get(wrappedStack) != null).forEach(wrappedStack -> stackValueMap.put(wrappedStack,preCalculationStackValueMap.get(wrappedStack)));
  stackValueMap.putAll(calculateStackValueMap(stackValueMap));
  fileValueMap=null;
  try {
    fileValueMap=SerializationHelper.readMapFromFile(postCalculationValuesFile);
  }
 catch (  FileNotFoundException e) {
    LogHelper.warn(ENERGY_VALUE_MARKER,""String_Node_Str"",postCalculationValuesFile.getAbsolutePath());
  }
  if (fileValueMap != null) {
    for (    WrappedStack wrappedStack : fileValueMap.keySet()) {
      if (wrappedStack != null && wrappedStack.getWrappedObject() != null && fileValueMap.get(wrappedStack) != null) {
        postCalculationStackValueMap.put(wrappedStack,fileValueMap.get(wrappedStack));
      }
    }
  }
  postCalculationStackValueMap.keySet().stream().filter(wrappedStack -> wrappedStack != null && wrappedStack.getWrappedObject() != null && postCalculationStackValueMap.get(wrappedStack) != null).forEach(wrappedStack -> stackValueMap.put(wrappedStack,postCalculationStackValueMap.get(wrappedStack)));
  ImmutableSortedMap.Builder<WrappedStack,EnergyValue> stackMappingsBuilder=ImmutableSortedMap.naturalOrder();
  stackMappingsBuilder.putAll(stackValueMap);
  this.stackValueMap=stackMappingsBuilder.build();
  calculateValueStackMap();
  save();
}",0.6200290275761974
157053,"/** 
 * @param valueMap
 */
public void load(Map<WrappedStack,EnergyValue> valueMap){
  if (valueMap != null) {
    setShouldSave(false);
    ImmutableSortedMap.Builder<WrappedStack,EnergyValue> stackMappingsBuilder=ImmutableSortedMap.naturalOrder();
    stackMappingsBuilder.putAll(valueMap);
    stackValueMap=stackMappingsBuilder.build();
    calculateValueStackMap();
  }
}","/** 
 * @param valueMap
 */
public void load(Map<WrappedStack,EnergyValue> valueMap){
  if (valueMap != null) {
    setShouldSave(false);
    ImmutableSortedMap.Builder<WrappedStack,EnergyValue> stackMappingsBuilder=ImmutableSortedMap.naturalOrder();
    valueMap.keySet().stream().filter(wrappedStack -> wrappedStack != null && wrappedStack.getWrappedObject() != null && valueMap.get(wrappedStack) != null).forEach(wrappedStack -> stackMappingsBuilder.put(wrappedStack,valueMap.get(wrappedStack)));
    stackValueMap=stackMappingsBuilder.build();
    calculateValueStackMap();
  }
}",0.7604166666666666
157054,"public ContainerAlchemicalBag(EntityPlayer entityPlayer,InventoryAlchemicalBag inventoryAlchemicalBag){
  this.entityPlayer=entityPlayer;
  this.inventoryAlchemicalBag=inventoryAlchemicalBag;
  if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 0) {
    bagInventoryRows=SMALL_BAG_INVENTORY_ROWS;
    bagInventoryColumns=SMALL_BAG_INVENTORY_COLUMNS;
  }
 else   if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 1) {
    bagInventoryRows=MEDIUM_BAG_INVENTORY_ROWS;
    bagInventoryColumns=MEDIUM_BAG_INVENTORY_COLUMNS;
  }
 else   if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 2) {
    bagInventoryRows=LARGE_BAG_INVENTORY_ROWS;
    bagInventoryColumns=LARGE_BAG_INVENTORY_COLUMNS;
  }
  for (int bagRowIndex=0; bagRowIndex < bagInventoryRows; ++bagRowIndex) {
    for (int bagColumnIndex=0; bagColumnIndex < bagInventoryColumns; ++bagColumnIndex) {
      if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 0) {
        this.addSlotToContainer(new SlotAlchemicalBag(this,inventoryAlchemicalBag,entityPlayer,bagColumnIndex + bagRowIndex * bagInventoryColumns,8 + bagColumnIndex * 18,18 + bagRowIndex * 18));
      }
 else       if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 1) {
        this.addSlotToContainer(new SlotAlchemicalBag(this,inventoryAlchemicalBag,entityPlayer,bagColumnIndex + bagRowIndex * bagInventoryColumns,8 + bagColumnIndex * 18,18 + bagRowIndex * 18));
      }
 else       if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 2) {
        this.addSlotToContainer(new SlotAlchemicalBag(this,inventoryAlchemicalBag,entityPlayer,bagColumnIndex + bagRowIndex * bagInventoryColumns,8 + bagColumnIndex * 18,8 + bagRowIndex * 18));
      }
    }
  }
  for (int inventoryRowIndex=0; inventoryRowIndex < PLAYER_INVENTORY_ROWS; ++inventoryRowIndex) {
    for (int inventoryColumnIndex=0; inventoryColumnIndex < PLAYER_INVENTORY_COLUMNS; ++inventoryColumnIndex) {
      if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 0) {
        this.addSlotToContainer(new Slot(entityPlayer.inventory,inventoryColumnIndex + inventoryRowIndex * 9 + 9,35 + inventoryColumnIndex * 18,104 + inventoryRowIndex * 18));
      }
 else       if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 1) {
        this.addSlotToContainer(new Slot(entityPlayer.inventory,inventoryColumnIndex + inventoryRowIndex * 9 + 9,35 + inventoryColumnIndex * 18,158 + inventoryRowIndex * 18));
      }
 else       if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 2) {
        this.addSlotToContainer(new Slot(entityPlayer.inventory,inventoryColumnIndex + inventoryRowIndex * 9 + 9,44 + inventoryColumnIndex * 18,174 + inventoryRowIndex * 18));
      }
    }
  }
  for (int actionBarSlotIndex=0; actionBarSlotIndex < PLAYER_INVENTORY_COLUMNS; ++actionBarSlotIndex) {
    if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 0) {
      this.addSlotToContainer(new Slot(entityPlayer.inventory,actionBarSlotIndex,35 + actionBarSlotIndex * 18,162));
    }
 else     if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 1) {
      this.addSlotToContainer(new Slot(entityPlayer.inventory,actionBarSlotIndex,35 + actionBarSlotIndex * 18,216));
    }
 else     if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 2) {
      this.addSlotToContainer(new Slot(entityPlayer.inventory,actionBarSlotIndex,44 + actionBarSlotIndex * 18,232));
    }
  }
}","public ContainerAlchemicalBag(EntityPlayer entityPlayer,InventoryAlchemicalBag inventoryAlchemicalBag){
  this.entityPlayer=entityPlayer;
  this.inventoryAlchemicalBag=inventoryAlchemicalBag;
  if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 0) {
    bagInventoryRows=SMALL_BAG_INVENTORY_ROWS;
    bagInventoryColumns=SMALL_BAG_INVENTORY_COLUMNS;
  }
 else   if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 1) {
    bagInventoryRows=MEDIUM_BAG_INVENTORY_ROWS;
    bagInventoryColumns=MEDIUM_BAG_INVENTORY_COLUMNS;
  }
 else   if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 2) {
    bagInventoryRows=LARGE_BAG_INVENTORY_ROWS;
    bagInventoryColumns=LARGE_BAG_INVENTORY_COLUMNS;
  }
  for (int bagRowIndex=0; bagRowIndex < bagInventoryRows; ++bagRowIndex) {
    for (int bagColumnIndex=0; bagColumnIndex < bagInventoryColumns; ++bagColumnIndex) {
      if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 0) {
        this.addSlotToContainer(new SlotAlchemicalBag(this,inventoryAlchemicalBag,entityPlayer,bagColumnIndex + bagRowIndex * bagInventoryColumns,8 + bagColumnIndex * 18,18 + bagRowIndex * 18));
      }
 else       if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 1) {
        this.addSlotToContainer(new SlotAlchemicalBag(this,inventoryAlchemicalBag,entityPlayer,bagColumnIndex + bagRowIndex * bagInventoryColumns,8 + bagColumnIndex * 18,18 + bagRowIndex * 18));
      }
 else       if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 2) {
        this.addSlotToContainer(new SlotAlchemicalBag(this,inventoryAlchemicalBag,entityPlayer,bagColumnIndex + bagRowIndex * bagInventoryColumns,8 + bagColumnIndex * 18,8 + bagRowIndex * 18));
      }
    }
  }
  for (int inventoryRowIndex=0; inventoryRowIndex < PLAYER_INVENTORY_ROWS; ++inventoryRowIndex) {
    for (int inventoryColumnIndex=0; inventoryColumnIndex < PLAYER_INVENTORY_COLUMNS; ++inventoryColumnIndex) {
      if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 0) {
        this.addSlotToContainer(new Slot(entityPlayer.inventory,inventoryColumnIndex + inventoryRowIndex * 9 + 9,35 + inventoryColumnIndex * 18,104 + inventoryRowIndex * 18));
      }
 else       if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 1) {
        this.addSlotToContainer(new Slot(entityPlayer.inventory,inventoryColumnIndex + inventoryRowIndex * 9 + 9,35 + inventoryColumnIndex * 18,158 + inventoryRowIndex * 18));
      }
 else       if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 2) {
        this.addSlotToContainer(new Slot(entityPlayer.inventory,inventoryColumnIndex + inventoryRowIndex * 9 + 9,44 + inventoryColumnIndex * 18,174 + inventoryRowIndex * 18));
      }
    }
  }
  for (int actionBarSlotIndex=0; actionBarSlotIndex < PLAYER_INVENTORY_COLUMNS; ++actionBarSlotIndex) {
    if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 0) {
      if (!(entityPlayer.inventory.getStackInSlot(actionBarSlotIndex) == inventoryAlchemicalBag.parentItemStack)) {
        this.addSlotToContainer(new Slot(entityPlayer.inventory,actionBarSlotIndex,35 + actionBarSlotIndex * 18,162));
      }
 else {
        this.addSlotToContainer(new Slot(entityPlayer.inventory,actionBarSlotIndex,35 + actionBarSlotIndex * 18,162){
          public boolean canTakeStack(          EntityPlayer p_82869_1_){
            return false;
          }
        }
);
      }
    }
 else     if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 1) {
      if (!(entityPlayer.inventory.getStackInSlot(actionBarSlotIndex) == inventoryAlchemicalBag.parentItemStack)) {
        this.addSlotToContainer(new Slot(entityPlayer.inventory,actionBarSlotIndex,35 + actionBarSlotIndex * 18,216));
      }
 else {
        this.addSlotToContainer(new Slot(entityPlayer.inventory,actionBarSlotIndex,35 + actionBarSlotIndex * 18,216){
          public boolean canTakeStack(          EntityPlayer p_82869_1_){
            return false;
          }
        }
);
      }
    }
 else     if (inventoryAlchemicalBag.parentItemStack.getItemDamage() == 2) {
      if (!(entityPlayer.inventory.getStackInSlot(actionBarSlotIndex) == inventoryAlchemicalBag.parentItemStack)) {
        this.addSlotToContainer(new Slot(entityPlayer.inventory,actionBarSlotIndex,44 + actionBarSlotIndex * 18,232));
      }
 else {
        this.addSlotToContainer(new Slot(entityPlayer.inventory,actionBarSlotIndex,44 + actionBarSlotIndex * 18,232){
          public boolean canTakeStack(          EntityPlayer p_82869_1_){
            return false;
          }
        }
);
      }
    }
  }
}",0.856396866840731
157055,"@Override public JsonElement serialize(JsonFluidStack src,Type typeOfSrc,JsonSerializationContext context){
  JsonObject jsonObject=new JsonObject();
  jsonObject.addProperty(""String_Node_Str"",src.fluidID);
  jsonObject.addProperty(""String_Node_Str"",src.amount);
  if (src.tag != null) {
    jsonObject.addProperty(""String_Node_Str"",src.tag.toString());
  }
  return jsonObject;
}","@Override public JsonElement serialize(JsonFluidStack src,Type typeOfSrc,JsonSerializationContext context){
  JsonObject jsonObject=new JsonObject();
  jsonObject.addProperty(""String_Node_Str"",src.fluid.getName());
  jsonObject.addProperty(""String_Node_Str"",src.amount);
  if (src.tag != null) {
    jsonObject.addProperty(""String_Node_Str"",src.tag.toString());
  }
  return jsonObject;
}",0.984375
157056,"@Override public String toString(){
  return String.format(""String_Node_Str"",fluidID,amount,tag);
}","@Override public String toString(){
  return String.format(""String_Node_Str"",fluid,amount,tag);
}",0.9897959183673468
157057,"public JsonFluidStack(int fluidID,int amount,NBTTagCompound tag){
  this.fluidID=fluidID;
  this.amount=amount;
  this.tag=tag;
}","public JsonFluidStack(FluidStack fluidStack){
  this.fluid=fluidStack.getFluid();
  this.amount=fluidStack.amount;
  this.tag=fluidStack.tag;
}",0.6911764705882353
157058,"@Override public JsonFluidStack deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  if (json.isJsonObject()) {
    JsonObject jsonObject=(JsonObject)json;
    JsonFluidStack jsonFluidStack=new JsonFluidStack();
    if (jsonObject.has(""String_Node_Str"")) {
      jsonFluidStack.fluidID=jsonObject.get(""String_Node_Str"").getAsInt();
    }
 else {
      throw new JsonParseException(""String_Node_Str"");
    }
    if (jsonObject.has(""String_Node_Str"")) {
      jsonFluidStack.amount=jsonObject.get(""String_Node_Str"").getAsInt();
    }
 else {
      throw new JsonParseException(""String_Node_Str"");
    }
    if (jsonObject.has(""String_Node_Str"")) {
      try {
        NBTBase nbtBase=JsonToNBT.func_150315_a(jsonObject.get(""String_Node_Str"").getAsString());
        if (nbtBase instanceof NBTTagCompound) {
          jsonFluidStack.tag=(NBTTagCompound)nbtBase;
        }
      }
 catch (      NBTException e) {
        throw new JsonParseException(e.getMessage(),e.getCause());
      }
    }
    return jsonFluidStack;
  }
  return null;
}","@Override public JsonFluidStack deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  if (json.isJsonObject()) {
    JsonObject jsonObject=(JsonObject)json;
    JsonFluidStack jsonFluidStack=new JsonFluidStack();
    if (jsonObject.has(""String_Node_Str"")) {
      jsonFluidStack.fluid=FluidRegistry.getFluid(jsonObject.get(""String_Node_Str"").getAsString());
    }
 else {
      throw new JsonParseException(""String_Node_Str"");
    }
    if (jsonObject.has(""String_Node_Str"")) {
      jsonFluidStack.amount=jsonObject.get(""String_Node_Str"").getAsInt();
    }
 else {
      throw new JsonParseException(""String_Node_Str"");
    }
    if (jsonObject.has(""String_Node_Str"")) {
      try {
        NBTBase nbtBase=JsonToNBT.func_150315_a(jsonObject.get(""String_Node_Str"").getAsString());
        if (nbtBase instanceof NBTTagCompound) {
          jsonFluidStack.tag=(NBTTagCompound)nbtBase;
        }
      }
 catch (      NBTException e) {
        throw new JsonParseException(e.getMessage(),e.getCause());
      }
    }
    return jsonFluidStack;
  }
  return null;
}",0.9832503395201448
157059,"/** 
 * Gson invokes this call-back method during deserialization when it encounters a field of the specified type. <p>In the implementation of this call-back method, you should consider invoking  {@link com.google.gson.JsonDeserializationContext#deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)} method to create objectsfor any non-trivial field of the returned object. However, you should never invoke it on the the same type passing  {@code jsonElement} since that will cause an infinite loop (Gson will call yourcall-back method again).
 * @param jsonElement The Json data being deserialized
 * @param typeOfT     The type of the Object to deserialize to
 * @param context
 * @return a deserialized object of the specified type typeOfT which is a subclass of {@code T}
 * @throws com.google.gson.JsonParseException if jsonElement is not in the expected format of {@code typeofT}
 */
@Override public WrappedStack deserialize(JsonElement jsonElement,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  if (!jsonElement.isJsonPrimitive()) {
    JsonObject jsonWrappedStack=(JsonObject)jsonElement;
    int stackSize=1;
    String objectType=null;
    Object stackObject=null;
    if (jsonWrappedStack.get(""String_Node_Str"") != null) {
      objectType=jsonWrappedStack.get(""String_Node_Str"").getAsString();
    }
    if (jsonWrappedStack.get(""String_Node_Str"") != null) {
      stackSize=jsonWrappedStack.get(""String_Node_Str"").getAsInt();
    }
    if (jsonWrappedStack.get(""String_Node_Str"") != null && !jsonWrappedStack.get(""String_Node_Str"").isJsonPrimitive()) {
      if (objectType != null) {
        if (objectType.equalsIgnoreCase(""String_Node_Str"")) {
          JsonItemStack jsonItemStack=JsonItemStack.jsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),JsonItemStack.class);
          ItemStack itemStack=null;
          Item item=(Item)Item.itemRegistry.getObject(jsonItemStack.itemName);
          if (stackSize > 0 && item != null) {
            itemStack=new ItemStack(item,stackSize,jsonItemStack.itemDamage);
            if (jsonItemStack.itemNBTTagCompound != null) {
              itemStack.stackTagCompound=jsonItemStack.itemNBTTagCompound;
            }
          }
          stackObject=itemStack;
        }
 else         if (objectType.equalsIgnoreCase(""String_Node_Str"")) {
          OreStack oreStack=jsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),OreStack.class);
          if (stackSize > 0) {
            oreStack.stackSize=stackSize;
          }
          stackObject=oreStack;
        }
 else         if (objectType.equalsIgnoreCase(""String_Node_Str"")) {
          JsonFluidStack jsonFluidStack=JsonFluidStack.jsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),JsonFluidStack.class);
          FluidStack fluidStack=new FluidStack(jsonFluidStack.fluidID,jsonFluidStack.amount,jsonFluidStack.tag);
          if (stackSize > 0) {
            fluidStack.amount=stackSize;
          }
          stackObject=fluidStack;
        }
      }
    }
    if (stackObject != null) {
      return new WrappedStack(stackObject);
    }
 else {
      throw new JsonParseException(String.format(""String_Node_Str"",jsonElement.toString()));
    }
  }
 else {
    throw new JsonParseException(String.format(""String_Node_Str"",jsonElement.toString()));
  }
}","/** 
 * Gson invokes this call-back method during deserialization when it encounters a field of the specified type. <p>In the implementation of this call-back method, you should consider invoking  {@link com.google.gson.JsonDeserializationContext#deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)} method to create objectsfor any non-trivial field of the returned object. However, you should never invoke it on the the same type passing  {@code jsonElement} since that will cause an infinite loop (Gson will call yourcall-back method again).
 * @param jsonElement The Json data being deserialized
 * @param typeOfT     The type of the Object to deserialize to
 * @param context
 * @return a deserialized object of the specified type typeOfT which is a subclass of {@code T}
 * @throws com.google.gson.JsonParseException if jsonElement is not in the expected format of {@code typeofT}
 */
@Override public WrappedStack deserialize(JsonElement jsonElement,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  if (!jsonElement.isJsonPrimitive()) {
    JsonObject jsonWrappedStack=(JsonObject)jsonElement;
    int stackSize=1;
    String objectType=null;
    Object stackObject=null;
    if (jsonWrappedStack.get(""String_Node_Str"") != null) {
      objectType=jsonWrappedStack.get(""String_Node_Str"").getAsString();
    }
    if (jsonWrappedStack.get(""String_Node_Str"") != null) {
      stackSize=jsonWrappedStack.get(""String_Node_Str"").getAsInt();
    }
    if (jsonWrappedStack.get(""String_Node_Str"") != null && !jsonWrappedStack.get(""String_Node_Str"").isJsonPrimitive()) {
      if (objectType != null) {
        if (objectType.equalsIgnoreCase(""String_Node_Str"")) {
          JsonItemStack jsonItemStack=JsonItemStack.jsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),JsonItemStack.class);
          ItemStack itemStack=null;
          Item item=(Item)Item.itemRegistry.getObject(jsonItemStack.itemName);
          if (stackSize > 0 && item != null) {
            itemStack=new ItemStack(item,stackSize,jsonItemStack.itemDamage);
            if (jsonItemStack.itemNBTTagCompound != null) {
              itemStack.stackTagCompound=jsonItemStack.itemNBTTagCompound;
            }
          }
          stackObject=itemStack;
        }
 else         if (objectType.equalsIgnoreCase(""String_Node_Str"")) {
          OreStack oreStack=jsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),OreStack.class);
          if (stackSize > 0) {
            oreStack.stackSize=stackSize;
          }
          stackObject=oreStack;
        }
 else         if (objectType.equalsIgnoreCase(""String_Node_Str"")) {
          JsonFluidStack jsonFluidStack=JsonFluidStack.jsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),JsonFluidStack.class);
          FluidStack fluidStack=new FluidStack(jsonFluidStack.fluid,jsonFluidStack.amount,jsonFluidStack.tag);
          if (stackSize > 0) {
            fluidStack.amount=stackSize;
          }
          stackObject=fluidStack;
        }
      }
    }
    if (stackObject != null) {
      return new WrappedStack(stackObject);
    }
 else {
      throw new JsonParseException(String.format(""String_Node_Str"",jsonElement.toString()));
    }
  }
 else {
    throw new JsonParseException(String.format(""String_Node_Str"",jsonElement.toString()));
  }
}",0.9997015816174276
157060,"@Override public int getInventoryStackLimit(){
  return 64;
}","@Override public int getInventoryStackLimit(){
  return 1;
}",0.975206611570248
157061,"public static void registerFluids(){
  if (!FluidRegistry.isFluidRegistered(""String_Node_Str"")) {
    Fluid milk=new Fluid(""String_Node_Str"").setUnlocalizedName(Names.Fluids.MILK);
    FluidRegistry.registerFluid(milk);
    FluidContainerRegistry.registerFluidContainer(new FluidStack(milk,1000),new ItemStack(Items.milk_bucket),new ItemStack(Items.bucket));
  }
}","public static void registerFluids(){
  if (!FluidRegistry.isFluidRegistered(""String_Node_Str"")) {
    Fluid milk=new Fluid(""String_Node_Str"").setUnlocalizedName(Names.Fluids.MILK);
    if (FluidRegistry.registerFluid(milk)) {
      FluidContainerRegistry.registerFluidContainer(new FluidStack(milk,1000),new ItemStack(Items.milk_bucket),new ItemStack(Items.bucket));
    }
  }
}",0.9757412398921832
157062,"public void savePlayerKnowledgeToDisk(UUID playerUUID){
  if (playerUUID != null && playerKnowledgeDirectory != null) {
    if (playerKnowledgeMap.containsKey(playerUUID) && playerKnowledgeMap.get(playerUUID) != null) {
      if (playerKnowledgeMap.get(playerUUID).hasBeenModified()) {
        SerializationHelper.writeTransmutationKnowledgeToFile(playerKnowledgeDirectory,playerUUID.toString() + ""String_Node_Str"",playerKnowledgeMap.get(playerUUID));
      }
    }
 else {
      loadPlayerFromDiskIfNeeded(playerUUID);
      SerializationHelper.writeTransmutationKnowledgeToFile(playerKnowledgeDirectory,playerUUID.toString() + ""String_Node_Str"",new TransmutationKnowledge());
    }
  }
}","public void savePlayerKnowledgeToDisk(UUID playerUUID){
  if (playerUUID != null && playerKnowledgeDirectory != null) {
    if (playerKnowledgeMap.containsKey(playerUUID) && playerKnowledgeMap.get(playerUUID) != null) {
      if (playerKnowledgeMap.get(playerUUID).hasBeenModified()) {
        SerializationHelper.writeTransmutationKnowledgeToFile(playerKnowledgeDirectory,playerUUID.toString() + ""String_Node_Str"",playerKnowledgeMap.get(playerUUID));
      }
    }
 else {
      loadPlayerFromDiskIfNeeded(playerUUID);
      SerializationHelper.writeTransmutationKnowledgeToFile(playerKnowledgeDirectory,playerUUID.toString() + ""String_Node_Str"",playerKnowledgeMap.get(playerUUID));
    }
  }
}",0.9566473988439308
157063,"public List<String> getOreNamesForItemStack(ItemStack itemStack){
  List<String> oreNameList=new ArrayList<String>();
  WrappedStack wrappedStack=new WrappedStack(itemStack);
  if (itemStackToOreNameMap.containsKey(wrappedStack)) {
    for (    String oreName : itemStackToOreNameMap.get(wrappedStack)) {
      oreNameList.add(oreName);
    }
  }
  return oreNameList;
}","public List<String> getOreNamesForItemStack(ItemStack itemStack){
  List<String> oreNameList=new ArrayList<String>();
  WrappedStack wrappedStack=new WrappedStack(itemStack);
  if (itemStackToOreNameMap.containsKey(wrappedStack)) {
    for (    String oreName : itemStackToOreNameMap.get(wrappedStack)) {
      oreNameList.add(oreName);
    }
  }
 else {
    for (    WrappedStack wrappedStack1 : itemStackToOreNameMap.keySet()) {
    }
  }
  return oreNameList;
}",0.8872901678657075
157064,"private void runDynamicEnergyValueResolution(){
  TreeMap<WrappedStack,EnergyValue> stackValueMap=new TreeMap<WrappedStack,EnergyValue>();
  stackValueMap.putAll(preAssignedMappings);
  Map<WrappedStack,EnergyValue> preAssignedValueMap=SerializationHelper.readEnergyValueStackMapFromJsonFile(Files.PRE_ASSIGNED_ENERGY_VALUES);
  for (  WrappedStack wrappedStack : preAssignedValueMap.keySet()) {
    if (preAssignedValueMap.get(wrappedStack) != null) {
      stackValueMap.put(wrappedStack,preAssignedValueMap.get(wrappedStack));
    }
  }
  ImmutableSortedMap.Builder<WrappedStack,EnergyValue> stackMappingsBuilder=ImmutableSortedMap.naturalOrder();
  stackMappingsBuilder.putAll(stackValueMap);
  stackMappings=stackMappingsBuilder.build();
  Map<WrappedStack,EnergyValue> computedStackValues=new TreeMap<WrappedStack,EnergyValue>();
  int passNumber=0;
  long computationStartTime=System.currentTimeMillis();
  long passStartTime;
  int computedValueCount=0;
  int totalComputedValueCount=0;
  LogHelper.info(""String_Node_Str"");
  boolean isFirstPass=true;
  while ((isFirstPass || computedValueCount > 0) && (passNumber < 16)) {
    if (isFirstPass) {
      isFirstPass=false;
    }
    computedValueCount=0;
    passStartTime=System.currentTimeMillis();
    passNumber++;
    computedStackValues=computeStackMappings(stackValueMap);
    for (    WrappedStack keyStack : computedStackValues.keySet()) {
      EnergyValue factoredExchangeEnergyValue=null;
      WrappedStack factoredKeyStack=null;
      if (keyStack != null && keyStack.getWrappedObject() != null && keyStack.getStackSize() > 0) {
        if (computedStackValues.get(keyStack) != null && Float.compare(computedStackValues.get(keyStack).getEnergyValue(),0f) > 0) {
          factoredExchangeEnergyValue=EnergyValueHelper.factorEnergyValue(computedStackValues.get(keyStack),keyStack.getStackSize());
          factoredKeyStack=new WrappedStack(keyStack,1);
        }
      }
      if (factoredExchangeEnergyValue != null) {
        if (stackValueMap.containsKey(factoredKeyStack)) {
          if (factoredExchangeEnergyValue.compareTo(stackValueMap.get(factoredKeyStack)) == -1) {
            stackValueMap.put(factoredKeyStack,factoredExchangeEnergyValue);
          }
        }
 else {
          stackValueMap.put(factoredKeyStack,factoredExchangeEnergyValue);
          computedValueCount++;
          totalComputedValueCount++;
        }
      }
    }
    LogHelper.info(String.format(""String_Node_Str"",passNumber,computedValueCount,System.currentTimeMillis() - passStartTime));
  }
  LogHelper.info(String.format(""String_Node_Str"",totalComputedValueCount,System.currentTimeMillis() - computationStartTime));
  if (postAssignedExactMappings != null) {
    for (    WrappedStack wrappedStack : postAssignedExactMappings.keySet()) {
      if (postAssignedExactMappings.get(wrappedStack) != null) {
        stackValueMap.put(wrappedStack,postAssignedExactMappings.get(wrappedStack));
      }
    }
  }
 else {
    postAssignedExactMappings=new TreeMap<WrappedStack,EnergyValue>();
  }
  Map<WrappedStack,EnergyValue> postAssignedValueMap=SerializationHelper.readEnergyValueStackMapFromJsonFile(Files.POST_ASSIGNED_ENERGY_VALUES);
  for (  WrappedStack wrappedStack : postAssignedValueMap.keySet()) {
    if (postAssignedValueMap.get(wrappedStack) != null) {
      stackValueMap.put(wrappedStack,postAssignedValueMap.get(wrappedStack));
    }
  }
  stackMappingsBuilder=ImmutableSortedMap.naturalOrder();
  stackMappingsBuilder.putAll(stackValueMap);
  stackMappings=stackMappingsBuilder.build();
  generateValueStackMappings();
  LogHelper.info(""String_Node_Str"");
  saveEnergyValueRegistryToFile();
}","private void runDynamicEnergyValueResolution(){
  TreeMap<WrappedStack,EnergyValue> stackValueMap=new TreeMap<WrappedStack,EnergyValue>();
  stackValueMap.putAll(preAssignedMappings);
  Map<WrappedStack,EnergyValue> preAssignedValueMap=SerializationHelper.readEnergyValueStackMapFromJsonFile(Files.PRE_ASSIGNED_ENERGY_VALUES);
  for (  WrappedStack wrappedStack : preAssignedValueMap.keySet()) {
    if (preAssignedValueMap.get(wrappedStack) != null) {
      stackValueMap.put(wrappedStack,preAssignedValueMap.get(wrappedStack));
    }
  }
  ImmutableSortedMap.Builder<WrappedStack,EnergyValue> stackMappingsBuilder=ImmutableSortedMap.naturalOrder();
  stackMappingsBuilder.putAll(stackValueMap);
  stackMappings=stackMappingsBuilder.build();
  Map<WrappedStack,EnergyValue> computedStackValues=new TreeMap<WrappedStack,EnergyValue>();
  int passNumber=0;
  long computationStartTime=System.currentTimeMillis();
  long passStartTime;
  int computedValueCount=0;
  int totalComputedValueCount=0;
  LogHelper.info(""String_Node_Str"");
  boolean isFirstPass=true;
  while ((isFirstPass || computedValueCount > 0) && (passNumber < 16)) {
    if (isFirstPass) {
      isFirstPass=false;
    }
    computedValueCount=0;
    passStartTime=System.currentTimeMillis();
    passNumber++;
    computedStackValues=computeStackMappings(stackValueMap);
    for (    WrappedStack keyStack : computedStackValues.keySet()) {
      EnergyValue factoredExchangeEnergyValue=null;
      WrappedStack factoredKeyStack=null;
      if (keyStack != null && keyStack.getWrappedObject() != null && keyStack.getStackSize() > 0) {
        if (computedStackValues.get(keyStack) != null && Float.compare(computedStackValues.get(keyStack).getEnergyValue(),0f) > 0) {
          factoredExchangeEnergyValue=EnergyValueHelper.factorEnergyValue(computedStackValues.get(keyStack),keyStack.getStackSize());
          factoredKeyStack=new WrappedStack(keyStack,1);
        }
      }
      if (factoredExchangeEnergyValue != null) {
        if (stackValueMap.containsKey(factoredKeyStack)) {
          if (factoredExchangeEnergyValue.compareTo(stackValueMap.get(factoredKeyStack)) == -1) {
            stackValueMap.put(factoredKeyStack,factoredExchangeEnergyValue);
          }
        }
 else {
          stackValueMap.put(factoredKeyStack,factoredExchangeEnergyValue);
          computedValueCount++;
          totalComputedValueCount++;
        }
      }
    }
    LogHelper.info(String.format(""String_Node_Str"",passNumber,computedValueCount,System.currentTimeMillis() - passStartTime));
  }
  LogHelper.info(String.format(""String_Node_Str"",totalComputedValueCount,System.currentTimeMillis() - computationStartTime));
  if (postAssignedMappings != null) {
    for (    WrappedStack wrappedStack : postAssignedMappings.keySet()) {
      if (postAssignedMappings.get(wrappedStack) != null) {
        stackValueMap.put(wrappedStack,postAssignedMappings.get(wrappedStack));
      }
    }
  }
 else {
    postAssignedMappings=new TreeMap<WrappedStack,EnergyValue>();
  }
  Map<WrappedStack,EnergyValue> postAssignedValueMap=SerializationHelper.readEnergyValueStackMapFromJsonFile(Files.POST_ASSIGNED_ENERGY_VALUES);
  for (  WrappedStack wrappedStack : postAssignedValueMap.keySet()) {
    if (postAssignedValueMap.get(wrappedStack) != null) {
      stackValueMap.put(wrappedStack,postAssignedValueMap.get(wrappedStack));
    }
  }
  stackMappingsBuilder=ImmutableSortedMap.naturalOrder();
  stackMappingsBuilder.putAll(stackValueMap);
  stackMappings=stackMappingsBuilder.build();
  generateValueStackMappings();
  LogHelper.info(""String_Node_Str"");
  saveEnergyValueRegistryToFile();
}",0.9965823650034176
157065,"public void dumpEnergyValueRegistryToLog(EnergyValueRegistryProxy.Phase phase){
  LogHelper.info(String.format(""String_Node_Str"",phase));
  if (phase == EnergyValueRegistryProxy.Phase.PRE_ASSIGNMENT) {
    for (    WrappedStack wrappedStack : this.preAssignedMappings.keySet()) {
      LogHelper.info(String.format(""String_Node_Str"",wrappedStack,EnergyValueRegistry.getInstance().getStackValueMap().get(wrappedStack)));
    }
  }
 else   if (phase == EnergyValueRegistryProxy.Phase.POST_ASSIGNMENT) {
    LogHelper.info(""String_Node_Str"");
    if (this.postAssignedDependentMappings != null) {
      for (      WrappedStack wrappedStack : this.postAssignedDependentMappings.keySet()) {
        LogHelper.info(String.format(""String_Node_Str"",wrappedStack,EnergyValueRegistry.getInstance().getStackValueMap().get(wrappedStack)));
      }
    }
    LogHelper.info(""String_Node_Str"");
    if (this.postAssignedExactMappings != null) {
      for (      WrappedStack wrappedStack : this.postAssignedExactMappings.keySet()) {
        LogHelper.info(String.format(""String_Node_Str"",wrappedStack,EnergyValueRegistry.getInstance().getStackValueMap().get(wrappedStack)));
      }
    }
  }
 else   if (phase == EnergyValueRegistryProxy.Phase.ALL) {
    for (    WrappedStack wrappedStack : EnergyValueRegistry.getInstance().getStackValueMap().keySet()) {
      LogHelper.info(String.format(""String_Node_Str"",wrappedStack,EnergyValueRegistry.getInstance().getStackValueMap().get(wrappedStack)));
    }
  }
  LogHelper.info(String.format(""String_Node_Str"",phase));
}","public void dumpEnergyValueRegistryToLog(EnergyValueRegistryProxy.Phase phase){
  LogHelper.info(String.format(""String_Node_Str"",phase));
  if (phase == EnergyValueRegistryProxy.Phase.PRE_ASSIGNMENT) {
    for (    WrappedStack wrappedStack : this.preAssignedMappings.keySet()) {
      LogHelper.info(String.format(""String_Node_Str"",wrappedStack,EnergyValueRegistry.getInstance().getStackValueMap().get(wrappedStack)));
    }
  }
 else   if (phase == EnergyValueRegistryProxy.Phase.POST_ASSIGNMENT) {
    if (this.postAssignedMappings != null) {
      for (      WrappedStack wrappedStack : this.postAssignedMappings.keySet()) {
        LogHelper.info(String.format(""String_Node_Str"",wrappedStack,EnergyValueRegistry.getInstance().getStackValueMap().get(wrappedStack)));
      }
    }
  }
 else   if (phase == EnergyValueRegistryProxy.Phase.ALL) {
    for (    WrappedStack wrappedStack : EnergyValueRegistry.getInstance().getStackValueMap().keySet()) {
      LogHelper.info(String.format(""String_Node_Str"",wrappedStack,EnergyValueRegistry.getInstance().getStackValueMap().get(wrappedStack)));
    }
  }
  LogHelper.info(String.format(""String_Node_Str"",phase));
}",0.7363770250368189
157066,"public void addPostAssignedExactEnergyValue(Object object,EnergyValue energyValue){
  if (postAssignedExactMappings == null) {
    postAssignedExactMappings=new TreeMap<WrappedStack,EnergyValue>();
  }
  if (WrappedStack.canBeWrapped(object) && energyValue != null && Float.compare(energyValue.getEnergyValue(),0f) > 0) {
    WrappedStack wrappedStack=new WrappedStack(object);
    if (wrappedStack.getStackSize() > 0) {
      WrappedStack factoredWrappedStack=new WrappedStack(wrappedStack,1);
      EnergyValue factoredEnergyValue=EnergyValueHelper.factorEnergyValue(energyValue,wrappedStack.getStackSize());
      postAssignedExactMappings.put(factoredWrappedStack,factoredEnergyValue);
    }
  }
}","public void addPostAssignedExactEnergyValue(Object object,EnergyValue energyValue){
  if (postAssignedMappings == null) {
    postAssignedMappings=new TreeMap<WrappedStack,EnergyValue>();
  }
  if (WrappedStack.canBeWrapped(object) && energyValue != null && Float.compare(energyValue.getEnergyValue(),0f) > 0) {
    WrappedStack wrappedStack=new WrappedStack(object);
    if (wrappedStack.getStackSize() > 0) {
      WrappedStack factoredWrappedStack=new WrappedStack(wrappedStack,1);
      EnergyValue factoredEnergyValue=EnergyValueHelper.factorEnergyValue(energyValue,wrappedStack.getStackSize());
      postAssignedMappings.put(factoredWrappedStack,factoredEnergyValue);
    }
  }
}",0.989185291997116
157067,"public EnergyValue getEnergyValueFromMap(Map<WrappedStack,EnergyValue> stackEnergyValueMap,Object object,boolean strict){
  if (WrappedStack.canBeWrapped(object)) {
    WrappedStack wrappedStackObject=new WrappedStack(object);
    WrappedStack unitWrappedStackObject=new WrappedStack(object);
    unitWrappedStackObject.setStackSize(1);
    Object wrappedObject=wrappedStackObject.getWrappedObject();
    if (wrappedObject instanceof ItemStack && ((ItemStack)wrappedObject).getItem() instanceof IEnergyValueProvider && !strict) {
      ItemStack itemStack=(ItemStack)wrappedObject;
      IEnergyValueProvider iEnergyValueProvider=(IEnergyValueProvider)itemStack.getItem();
      EnergyValue energyValue=iEnergyValueProvider.getEnergyValue(itemStack);
      if (energyValue != null && energyValue.getEnergyValue() > 0f) {
        return energyValue;
      }
    }
 else     if (stackEnergyValueMap != null) {
      if (stackEnergyValueMap.containsKey(unitWrappedStackObject)) {
        return stackEnergyValueMap.get(unitWrappedStackObject);
      }
 else       if (!strict) {
        if (wrappedObject instanceof ItemStack) {
          EnergyValue lowestValue=null;
          ItemStack wrappedItemStack=(ItemStack)wrappedObject;
          if (CachedOreDictionary.getInstance().getOreNamesForItemStack(wrappedItemStack).size() == 1) {
            OreStack oreStack=new OreStack(wrappedItemStack);
            if (stackEnergyValueMap.containsKey(new WrappedStack(oreStack))) {
              return stackEnergyValueMap.get(new WrappedStack(oreStack));
            }
          }
 else {
            for (            WrappedStack valuedStack : stackEnergyValueMap.keySet()) {
              if (valuedStack.getWrappedObject() instanceof ItemStack) {
                ItemStack valuedItemStack=(ItemStack)valuedStack.getWrappedObject();
                if (Item.getIdFromItem(valuedItemStack.getItem()) == Item.getIdFromItem(wrappedItemStack.getItem())) {
                  if (valuedItemStack.getItemDamage() == OreDictionary.WILDCARD_VALUE || wrappedItemStack.getItemDamage() == OreDictionary.WILDCARD_VALUE) {
                    EnergyValue stackValue=stackEnergyValueMap.get(valuedStack);
                    if (stackValue.compareTo(lowestValue) < 0) {
                      lowestValue=stackValue;
                    }
                  }
 else                   if (wrappedItemStack.getItem().isDamageable() && wrappedItemStack.isItemDamaged()) {
                    EnergyValue stackValue=new EnergyValue(stackEnergyValueMap.get(valuedStack).getEnergyValue() * (1 - (wrappedItemStack.getItemDamage() * 1.0F / wrappedItemStack.getMaxDamage())));
                    if (stackValue.compareTo(lowestValue) < 0) {
                      lowestValue=stackValue;
                    }
                  }
                }
              }
            }
            return lowestValue;
          }
        }
      }
    }
  }
  return null;
}","public EnergyValue getEnergyValueFromMap(Map<WrappedStack,EnergyValue> stackEnergyValueMap,Object object,boolean strict){
  if (WrappedStack.canBeWrapped(object)) {
    WrappedStack wrappedStackObject=new WrappedStack(object);
    WrappedStack unitWrappedStackObject=new WrappedStack(object);
    unitWrappedStackObject.setStackSize(1);
    Object wrappedObject=wrappedStackObject.getWrappedObject();
    if (wrappedObject instanceof ItemStack && ((ItemStack)wrappedObject).getItem() instanceof IEnergyValueProvider && !strict) {
      ItemStack itemStack=(ItemStack)wrappedObject;
      IEnergyValueProvider iEnergyValueProvider=(IEnergyValueProvider)itemStack.getItem();
      EnergyValue energyValue=iEnergyValueProvider.getEnergyValue(itemStack);
      if (energyValue != null && energyValue.getEnergyValue() > 0f) {
        return energyValue;
      }
    }
 else     if (stackEnergyValueMap != null) {
      if (stackEnergyValueMap.containsKey(unitWrappedStackObject)) {
        return stackEnergyValueMap.get(unitWrappedStackObject);
      }
 else       if (!strict) {
        if (wrappedObject instanceof ItemStack) {
          EnergyValue lowestValue=null;
          ItemStack wrappedItemStack=(ItemStack)wrappedObject;
          if (OreDictionary.getOreIDs(wrappedItemStack).length == 1) {
            OreStack oreStack=new OreStack(OreDictionary.getOreName(OreDictionary.getOreIDs(wrappedItemStack)[0]));
            if (stackEnergyValueMap.containsKey(new WrappedStack(oreStack))) {
              return stackEnergyValueMap.get(new WrappedStack(oreStack));
            }
          }
 else {
            for (            WrappedStack valuedStack : stackEnergyValueMap.keySet()) {
              if (valuedStack.getWrappedObject() instanceof ItemStack) {
                ItemStack valuedItemStack=(ItemStack)valuedStack.getWrappedObject();
                if (Item.getIdFromItem(valuedItemStack.getItem()) == Item.getIdFromItem(wrappedItemStack.getItem())) {
                  if (valuedItemStack.getItemDamage() == OreDictionary.WILDCARD_VALUE || wrappedItemStack.getItemDamage() == OreDictionary.WILDCARD_VALUE) {
                    EnergyValue stackValue=stackEnergyValueMap.get(valuedStack);
                    if (stackValue.compareTo(lowestValue) < 0) {
                      lowestValue=stackValue;
                    }
                  }
 else                   if (wrappedItemStack.getItem().isDamageable() && wrappedItemStack.isItemDamaged()) {
                    EnergyValue stackValue=new EnergyValue(stackEnergyValueMap.get(valuedStack).getEnergyValue() * (1 - (wrappedItemStack.getItemDamage() * 1.0F / wrappedItemStack.getMaxDamage())));
                    if (stackValue.compareTo(lowestValue) < 0) {
                      lowestValue=stackValue;
                    }
                  }
                }
              }
            }
            return lowestValue;
          }
        }
      }
    }
  }
  return null;
}",0.9691106585200272
157068,"public OreStack(ItemStack itemStack){
  if (itemStack != null && OreDictionary.getOreIDs(itemStack).length > 0) {
    this.oreName=OreDictionary.getOreName(OreDictionary.getOreIDs(itemStack)[0]);
    this.stackSize=itemStack.stackSize;
  }
}","public OreStack(String oreName,int stackSize){
  this.oreName=oreName;
  this.stackSize=stackSize;
}",0.4750733137829912
157069,"public static void addDefaultEnergyValues(){
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),1);
  String[] dyes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < dyes.length; i++) {
    EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"" + dyes[i])),8);
  }
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),8192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),8192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),8192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),8192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),2048);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),2048);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),256);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),256);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),864);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),864);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),256);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),256);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),8);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),2048);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),4);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),12);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),4);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),4);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(FluidRegistry.WATER),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(FluidRegistry.LAVA),64);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(FluidRegistry.getFluid(""String_Node_Str"")),64);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.stone),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.grass),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Blocks.dirt,1,OreDictionary.WILDCARD_VALUE)),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.cobblestone),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Blocks.sand,1,OreDictionary.WILDCARD_VALUE)),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.gravel),4);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.coal_ore),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.glass),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Blocks.sandstone,1,OreDictionary.WILDCARD_VALUE)),4);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.mossy_cobblestone),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.obsidian),64);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.ice),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.pumpkin),144);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.netherrack),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.soul_sand),49);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Blocks.stonebrick,1,OreDictionary.WILDCARD_VALUE)),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.mycelium),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.end_stone),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.hardened_clay),256);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.web),12);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Blocks.tallgrass,1,OreDictionary.WILDCARD_VALUE)),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.deadbush),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.yellow_flower),16);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Blocks.red_flower,1,OreDictionary.WILDCARD_VALUE)),16);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.brown_mushroom),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.red_mushroom),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.cactus),8);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.vine),8);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.waterlily),16);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Blocks.double_plant,1,OreDictionary.WILDCARD_VALUE)),16);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.redstone),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.saddle),192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.snowball),0.25f);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.slime_ball),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.bone),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.ender_pearl),1024);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.apple),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.porkchop),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.cooked_porkchop),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Items.fish,1,OreDictionary.WILDCARD_VALUE)),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Items.cooked_fished,1,OreDictionary.WILDCARD_VALUE)),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.melon),16);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.beef),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.cooked_beef),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.chicken),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.cooked_chicken),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.rotten_flesh),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.spider_eye),128);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.carrot),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.potato),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.baked_potato),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.poisonous_potato),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.ghast_tear),4096);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Items.coal,1,0)),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Items.coal,1,1)),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.diamond),8192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.iron_ingot),256);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.gold_ingot),2048);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.string),12);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.feather),48);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.gunpowder),192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.wheat_seeds),16);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.wheat),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.flint),4);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.leather),64);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.brick),64);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.clay_ball),64);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.reeds),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.egg),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.glowstone_dust),384);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Items.dye,1,4)),864);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.blaze_rod),1536);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.nether_wart),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.emerald),8192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.nether_star),24576);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.netherbrick),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.quartz),256);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(ModItems.alchemicalDust,1,0)),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(ModItems.alchemicalDust,1,1)),64);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(ModItems.alchemicalDust,1,2)),2048);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(ModItems.alchemicalDust,1,3)),8192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(ModItems.shardMinium)),8192);
}","public static void addDefaultEnergyValues(){
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),1);
  String[] dyes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < dyes.length; i++) {
    EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"" + dyes[i])),8);
  }
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),8192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),8192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),8192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),8192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),2048);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),2048);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),256);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),256);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),864);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),864);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),256);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),256);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),8);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),2048);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),4);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),12);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),4);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),4);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new OreStack(""String_Node_Str"")),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(FluidRegistry.WATER),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(FluidRegistry.LAVA),64);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(FluidRegistry.getFluid(""String_Node_Str"")),64);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.stone),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.grass),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Blocks.dirt,1,OreDictionary.WILDCARD_VALUE)),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.cobblestone),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Blocks.sand,1,OreDictionary.WILDCARD_VALUE)),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.gravel),4);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.coal_ore),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.glass),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Blocks.sandstone,1,OreDictionary.WILDCARD_VALUE)),4);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.mossy_cobblestone),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.obsidian),64);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.ice),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.pumpkin),144);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.netherrack),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.soul_sand),49);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Blocks.stonebrick,1,OreDictionary.WILDCARD_VALUE)),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.mycelium),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.end_stone),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.hardened_clay),256);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.web),12);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Blocks.tallgrass,1,OreDictionary.WILDCARD_VALUE)),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.deadbush),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.yellow_flower),16);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Blocks.red_flower,1,OreDictionary.WILDCARD_VALUE)),16);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.brown_mushroom),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.red_mushroom),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.cactus),8);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.vine),8);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Blocks.waterlily),16);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Blocks.double_plant,1,OreDictionary.WILDCARD_VALUE)),16);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.redstone),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.saddle),192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.snowball),0.25f);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.slime_ball),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.bone),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.ender_pearl),1024);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.apple),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.porkchop),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.cooked_porkchop),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Items.fish,1,OreDictionary.WILDCARD_VALUE)),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Items.cooked_fished,1,OreDictionary.WILDCARD_VALUE)),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.melon),16);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.beef),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.cooked_beef),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.chicken),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.cooked_chicken),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.rotten_flesh),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.spider_eye),128);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.carrot),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.potato),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.baked_potato),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.poisonous_potato),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.ghast_tear),4096);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Items.coal,1,0)),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Items.coal,1,1)),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.diamond),8192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.iron_ingot),256);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.gold_ingot),2048);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.string),12);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.feather),48);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.gunpowder),192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.wheat_seeds),16);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.wheat),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.flint),4);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.leather),64);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.brick),64);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.clay_ball),64);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.reeds),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.egg),32);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.glowstone_dust),384);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(Items.dye,1,4)),864);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.blaze_rod),1536);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.nether_wart),24);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.emerald),8192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.nether_star),24576);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.netherbrick),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(Items.quartz),256);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(ModItems.alchemicalDust,1,0)),1);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(ModItems.alchemicalDust,1,1)),64);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(ModItems.alchemicalDust,1,2)),2048);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(ModItems.alchemicalDust,1,3)),8192);
  EnergyValueRegistryProxy.addPreAssignedEnergyValue(new WrappedStack(new ItemStack(ModItems.shardMinium)),8192);
}",0.9950471596537318
157070,"public RecipeAludel(ItemStack recipeOutput,OreStack inputStack,ItemStack dustStack){
  this.recipeOutput=recipeOutput.copy();
  this.inputStack=new WrappedStack(inputStack);
  this.dustStack=dustStack.copy();
}","public RecipeAludel(ItemStack recipeOutput,ItemStack inputStack,ItemStack dustStack){
  this.recipeOutput=recipeOutput.copy();
  this.inputStack=new WrappedStack(inputStack);
  this.dustStack=dustStack.copy();
}",0.9833729216152018
157071,"private static boolean compareStacks(WrappedStack wrappedStack1,WrappedStack wrappedStack2){
  if (wrappedStack1 != null && wrappedStack1.getWrappedObject() != null && wrappedStack2 != null && wrappedStack2.getWrappedObject() != null) {
    if (wrappedStack1.getWrappedObject() instanceof ItemStack && wrappedStack2.getWrappedObject() instanceof ItemStack) {
      ItemStack itemStack1=(ItemStack)wrappedStack1.getWrappedObject();
      itemStack1.stackSize=wrappedStack1.getStackSize();
      ItemStack itemStack2=(ItemStack)wrappedStack2.getWrappedObject();
      itemStack2.stackSize=wrappedStack2.getStackSize();
      return compareItemStacks(itemStack1,itemStack2);
    }
 else     if (wrappedStack1.getWrappedObject() instanceof OreStack && wrappedStack2.getWrappedObject() instanceof OreStack) {
      if (((OreStack)wrappedStack1.getWrappedObject()).oreName.equalsIgnoreCase(((OreStack)wrappedStack2.getWrappedObject()).oreName)) {
        return wrappedStack2.getStackSize() >= wrappedStack1.getStackSize();
      }
    }
  }
  return false;
}","private static boolean compareStacks(WrappedStack wrappedStack1,WrappedStack wrappedStack2){
  if (wrappedStack1 != null && wrappedStack1.getWrappedObject() != null && wrappedStack2 != null && wrappedStack2.getWrappedObject() != null) {
    if (wrappedStack1.getWrappedObject() instanceof ItemStack && wrappedStack2.getWrappedObject() instanceof ItemStack) {
      ItemStack itemStack1=(ItemStack)wrappedStack1.getWrappedObject();
      itemStack1.stackSize=wrappedStack1.getStackSize();
      ItemStack itemStack2=(ItemStack)wrappedStack2.getWrappedObject();
      itemStack2.stackSize=wrappedStack2.getStackSize();
      return compareItemStacks(itemStack1,itemStack2);
    }
  }
  return false;
}",0.7796803652968036
157072,"public void addRecipe(ItemStack recipeOutput,OreStack recipeInputStack,ItemStack recipeInputDust){
  addRecipe(new RecipeAludel(recipeOutput,recipeInputStack,recipeInputDust));
}","public void addRecipe(RecipeAludel recipeAludel){
  if (!aludelRecipes.contains(recipeAludel)) {
    aludelRecipes.add(recipeAludel);
  }
}",0.3470031545741325
157073,"@Override public IMessage onMessage(MessageTransmutationKnowledgeUpdate message,MessageContext ctx){
  EntityPlayer entityPlayer=FMLClientHandler.instance().getClientPlayerEntity();
  if (entityPlayer != null && entityPlayer.openContainer instanceof ContainerTransmutationTablet) {
    ((ContainerTransmutationTablet)entityPlayer.openContainer).handleTransmutationKnowledgeUpdate(message.transmutationKnowledge);
  }
  return null;
}","@Override public IMessage onMessage(MessageTransmutationKnowledgeUpdate message,MessageContext ctx){
  if (FMLClientHandler.instance().getClient().currentScreen instanceof GuiContainer) {
    GuiContainer guiContainer=(GuiContainer)FMLClientHandler.instance().getClient().currentScreen;
    if (guiContainer.inventorySlots instanceof ContainerTransmutationTablet) {
      ((ContainerTransmutationTablet)guiContainer.inventorySlots).handleTransmutationKnowledgeUpdate(message.transmutationKnowledge);
    }
  }
  return null;
}",0.483837330552659
157074,"public static boolean equalsIgnoreStackSize(ItemStack itemStack1,ItemStack itemStack2){
  if (itemStack1 != null && itemStack2 != null) {
    if (Item.getIdFromItem(itemStack1.getItem()) - Item.getIdFromItem(itemStack2.getItem()) == 0) {
      if (itemStack1.getItem() == itemStack2.getItem()) {
        if (itemStack1.getItemDamage() == itemStack2.getItemDamage()) {
          if (itemStack1.hasTagCompound() && itemStack2.hasTagCompound()) {
            if (ItemStack.areItemStackTagsEqual(itemStack1,itemStack2)) {
              return true;
            }
          }
 else {
            return true;
          }
        }
      }
    }
  }
  return false;
}","public static boolean equalsIgnoreStackSize(ItemStack itemStack1,ItemStack itemStack2){
  if (itemStack1 != null && itemStack2 != null) {
    if (Item.getIdFromItem(itemStack1.getItem()) - Item.getIdFromItem(itemStack2.getItem()) == 0) {
      if (itemStack1.getItem() == itemStack2.getItem()) {
        if (itemStack1.getItemDamage() == itemStack2.getItemDamage()) {
          if (itemStack1.hasTagCompound() && itemStack2.hasTagCompound()) {
            if (ItemStack.areItemStackTagsEqual(itemStack1,itemStack2)) {
              return true;
            }
          }
 else           if (!itemStack1.hasTagCompound() && !itemStack2.hasTagCompound()) {
            return true;
          }
        }
      }
    }
  }
  return false;
}",0.9456366237482118
157075,"public static boolean equalsIgnoreStackSize(ItemStack itemStack1,ItemStack itemStack2){
  if (itemStack1 != null && itemStack2 != null) {
    if (Item.getIdFromItem(itemStack1.getItem()) - Item.getIdFromItem(itemStack2.getItem()) == 0) {
      if (itemStack1.getItemDamage() == itemStack2.getItemDamage()) {
        if (itemStack1.hasTagCompound() && itemStack2.hasTagCompound()) {
          if (itemStack1.getTagCompound().equals(itemStack2.getTagCompound())) {
            return true;
          }
        }
 else {
          return true;
        }
      }
    }
  }
  return false;
}","public static boolean equalsIgnoreStackSize(ItemStack itemStack1,ItemStack itemStack2){
  if (itemStack1 != null && itemStack2 != null) {
    if (Item.getIdFromItem(itemStack1.getItem()) - Item.getIdFromItem(itemStack2.getItem()) == 0) {
      if (itemStack1.getItem() == itemStack2.getItem()) {
        if (itemStack1.getItemDamage() == itemStack2.getItemDamage()) {
          if (itemStack1.hasTagCompound() && itemStack2.hasTagCompound()) {
            if (ItemStack.areItemStackTagsEqual(itemStack1,itemStack2)) {
              return true;
            }
          }
 else {
            return true;
          }
        }
      }
    }
  }
  return false;
}",0.7441860465116279
157076,"@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase entityLiving,ItemStack itemStack){
  super.onBlockPlacedBy(world,x,y,z,entityLiving,itemStack);
  if (world.getBlockTileEntity(x,y + 1,z) instanceof TileGlassBell) {
    TileGlassBell tileGlassBell=(TileGlassBell)world.getBlockTileEntity(x,y + 1,z);
    tileGlassBell.setOrientation(ForgeDirection.UP);
    if (world.getBlockTileEntity(x,y,z) instanceof TileAludel) {
      TileAludel tileAludel=(TileAludel)world.getBlockTileEntity(x,y,z);
      ItemStack itemStackGlassBell=tileGlassBell.getStackInSlot(TileGlassBell.DISPLAY_SLOT_INVENTORY_INDEX);
      tileGlassBell.setInventorySlotContents(TileGlassBell.DISPLAY_SLOT_INVENTORY_INDEX,null);
      tileAludel.setInventorySlotContents(TileAludel.INPUT_INVENTORY_INDEX,itemStackGlassBell);
    }
  }
}","@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase entityLiving,ItemStack itemStack){
  super.onBlockPlacedBy(world,x,y,z,entityLiving,itemStack);
  if (world.getBlockTileEntity(x,y + 1,z) instanceof TileGlassBell) {
    TileGlassBell tileGlassBell=(TileGlassBell)world.getBlockTileEntity(x,y + 1,z);
    tileGlassBell.setOrientation(ForgeDirection.UP);
    if (world.getBlockTileEntity(x,y,z) instanceof TileAludel) {
      TileAludel tileAludel=(TileAludel)world.getBlockTileEntity(x,y,z);
      ItemStack itemStackGlassBell=tileGlassBell.getStackInSlot(TileGlassBell.DISPLAY_SLOT_INVENTORY_INDEX);
      tileGlassBell.setInventorySlotContents(TileGlassBell.DISPLAY_SLOT_INVENTORY_INDEX,null);
      tileAludel.setInventorySlotContents(TileAludel.INPUT_INVENTORY_INDEX,itemStackGlassBell);
      tileAludel.hasGlassBell=true;
    }
  }
}",0.9789473684210528
157077,"@Override public void readFromNBT(NBTTagCompound nbtTagCompound){
  super.readFromNBT(nbtTagCompound);
  NBTTagList tagList=nbtTagCompound.getTagList(""String_Node_Str"");
  inventory=new ItemStack[this.getSizeInventory()];
  for (int i=0; i < tagList.tagCount(); ++i) {
    NBTTagCompound tagCompound=(NBTTagCompound)tagList.tagAt(i);
    byte slotIndex=tagCompound.getByte(""String_Node_Str"");
    if (slotIndex >= 0 && slotIndex < inventory.length) {
      inventory[slotIndex]=ItemStack.loadItemStackFromNBT(tagCompound);
    }
  }
  deviceCookTime=nbtTagCompound.getInteger(""String_Node_Str"");
  fuelBurnTime=nbtTagCompound.getInteger(""String_Node_Str"");
  itemCookTime=nbtTagCompound.getInteger(""String_Node_Str"");
}","@Override public void readFromNBT(NBTTagCompound nbtTagCompound){
  super.readFromNBT(nbtTagCompound);
  NBTTagList tagList=nbtTagCompound.getTagList(""String_Node_Str"");
  inventory=new ItemStack[this.getSizeInventory()];
  for (int i=0; i < tagList.tagCount(); ++i) {
    NBTTagCompound tagCompound=(NBTTagCompound)tagList.tagAt(i);
    byte slotIndex=tagCompound.getByte(""String_Node_Str"");
    if (slotIndex >= 0 && slotIndex < inventory.length) {
      inventory[slotIndex]=ItemStack.loadItemStackFromNBT(tagCompound);
    }
  }
  deviceCookTime=nbtTagCompound.getInteger(""String_Node_Str"");
  fuelBurnTime=nbtTagCompound.getInteger(""String_Node_Str"");
  itemCookTime=nbtTagCompound.getInteger(""String_Node_Str"");
  hasGlassBell=nbtTagCompound.getBoolean(""String_Node_Str"");
}",0.9593062041360908
157078,"private boolean canInfuse(){
  if (inventory[INPUT_INVENTORY_INDEX] == null || inventory[DUST_INVENTORY_INDEX] == null) {
    return false;
  }
 else {
    ItemStack infusedItemStack=RecipesAludel.getInstance().getResult(inventory[INPUT_INVENTORY_INDEX],inventory[DUST_INVENTORY_INDEX]);
    if (infusedItemStack == null) {
      return false;
    }
    if (inventory[OUTPUT_INVENTORY_INDEX] == null) {
      return true;
    }
 else {
      boolean outputEquals=this.inventory[OUTPUT_INVENTORY_INDEX].isItemEqual(infusedItemStack);
      int mergedOutputStackSize=this.inventory[OUTPUT_INVENTORY_INDEX].stackSize + infusedItemStack.stackSize;
      if (outputEquals) {
        return mergedOutputStackSize <= getInventoryStackLimit() && mergedOutputStackSize <= infusedItemStack.getMaxStackSize();
      }
    }
  }
  return false;
}","private boolean canInfuse(){
  if (!hasGlassBell || inventory[INPUT_INVENTORY_INDEX] == null || inventory[DUST_INVENTORY_INDEX] == null) {
    return false;
  }
 else {
    ItemStack infusedItemStack=RecipesAludel.getInstance().getResult(inventory[INPUT_INVENTORY_INDEX],inventory[DUST_INVENTORY_INDEX]);
    if (infusedItemStack == null) {
      return false;
    }
    if (inventory[OUTPUT_INVENTORY_INDEX] == null) {
      return true;
    }
 else {
      boolean outputEquals=this.inventory[OUTPUT_INVENTORY_INDEX].isItemEqual(infusedItemStack);
      int mergedOutputStackSize=this.inventory[OUTPUT_INVENTORY_INDEX].stackSize + infusedItemStack.stackSize;
      if (outputEquals) {
        return mergedOutputStackSize <= getInventoryStackLimit() && mergedOutputStackSize <= infusedItemStack.getMaxStackSize();
      }
    }
  }
  return false;
}",0.9899109792284868
157079,"@Override public void onInventoryChanged(){
  PacketDispatcher.sendPacketToAllAround(this.xCoord,this.yCoord,this.zCoord,128D,this.worldObj.provider.dimensionId,getDescriptionPacket());
  worldObj.updateAllLightTypes(xCoord,yCoord,zCoord);
  if (worldObj.getBlockTileEntity(xCoord,yCoord + 1,zCoord) instanceof TileGlassBell) {
    worldObj.updateAllLightTypes(xCoord,yCoord + 1,zCoord);
  }
}","@Override public void onInventoryChanged(){
  PacketDispatcher.sendPacketToAllAround(this.xCoord,this.yCoord,this.zCoord,128D,this.worldObj.provider.dimensionId,getDescriptionPacket());
  worldObj.updateAllLightTypes(xCoord,yCoord,zCoord);
  if (hasGlassBell) {
    worldObj.updateAllLightTypes(xCoord,yCoord + 1,zCoord);
  }
}",0.8055555555555556
157080,"@Override public void writeToNBT(NBTTagCompound nbtTagCompound){
  super.writeToNBT(nbtTagCompound);
  NBTTagList tagList=new NBTTagList();
  for (int currentIndex=0; currentIndex < inventory.length; ++currentIndex) {
    if (inventory[currentIndex] != null) {
      NBTTagCompound tagCompound=new NBTTagCompound();
      tagCompound.setByte(""String_Node_Str"",(byte)currentIndex);
      inventory[currentIndex].writeToNBT(tagCompound);
      tagList.appendTag(tagCompound);
    }
  }
  nbtTagCompound.setTag(""String_Node_Str"",tagList);
  nbtTagCompound.setInteger(""String_Node_Str"",deviceCookTime);
  nbtTagCompound.setInteger(""String_Node_Str"",fuelBurnTime);
  nbtTagCompound.setInteger(""String_Node_Str"",itemCookTime);
}","@Override public void writeToNBT(NBTTagCompound nbtTagCompound){
  super.writeToNBT(nbtTagCompound);
  NBTTagList tagList=new NBTTagList();
  for (int currentIndex=0; currentIndex < inventory.length; ++currentIndex) {
    if (inventory[currentIndex] != null) {
      NBTTagCompound tagCompound=new NBTTagCompound();
      tagCompound.setByte(""String_Node_Str"",(byte)currentIndex);
      inventory[currentIndex].writeToNBT(tagCompound);
      tagList.appendTag(tagCompound);
    }
  }
  nbtTagCompound.setTag(""String_Node_Str"",tagList);
  nbtTagCompound.setInteger(""String_Node_Str"",deviceCookTime);
  nbtTagCompound.setInteger(""String_Node_Str"",fuelBurnTime);
  nbtTagCompound.setInteger(""String_Node_Str"",itemCookTime);
  nbtTagCompound.setBoolean(""String_Node_Str"",hasGlassBell);
}",0.959468438538206
157081,"public static float[] convertIntColourToFloatArray(int intColour){
  float[] colourFloatArray=new float[3];
  colourFloatArray[0]=(float)(intColour >> 16 & 255) / 255F;
  colourFloatArray[1]=(float)(intColour >> 8 & 255) / 255F;
  colourFloatArray[2]=(float)(intColour & 255) / 255F;
  return colourFloatArray;
}","public static float[] convertIntColourToFloatArray(int intColour){
  float[] colourFloatArray=new float[3];
  colourFloatArray[0]=((intColour >> 16 & 0xFF) / 255F);
  colourFloatArray[1]=((intColour >> 8 & 0xFF) / 255F);
  colourFloatArray[2]=((intColour & 0xFF) / 255F);
  return colourFloatArray;
}",0.7745098039215687
157082,"private static float[] getBlendedDustColour(int leftStackSize,int leftStackColour,int rightStackSize,int rightStackColour){
  if (leftStackSize > 0 && rightStackSize > 0) {
    int stackSizeStepRange=8;
    int factoredLeftStackSize=leftStackSize / stackSizeStepRange;
    int factoredRightStackSize=rightStackSize / stackSizeStepRange;
    float[][] blendedColours=ColourUtils.getFloatBlendedColours(leftStackColour,rightStackColour,2 * stackSizeStepRange - 1);
    return blendedColours[stackSizeStepRange + (factoredLeftStackSize - factoredRightStackSize)];
  }
 else   if (leftStackSize > 0) {
    return ColourUtils.convertIntColourToFloatArray(leftStackColour);
  }
 else   if (rightStackSize > 0) {
    return ColourUtils.convertIntColourToFloatArray(rightStackColour);
  }
 else {
    return new float[]{1F,1F,1F};
  }
}","private static float[] getBlendedDustColour(int leftStackSize,int leftStackColour,int rightStackSize,int rightStackColour){
  if (leftStackSize > 0 && rightStackSize > 0) {
    int stackSizeStepRange=8;
    int factoredLeftStackSize=leftStackSize / stackSizeStepRange;
    int factoredRightStackSize=rightStackSize / stackSizeStepRange;
    float[][] blendedColours=ColourUtils.getFloatBlendedColours(leftStackColour,rightStackColour,2 * stackSizeStepRange - 1);
    if (blendedColours != null) {
      return blendedColours[stackSizeStepRange + (factoredLeftStackSize - factoredRightStackSize)];
    }
 else {
      return new float[]{1F,1F,1F};
    }
  }
 else   if (leftStackSize > 0) {
    return ColourUtils.convertIntColourToFloatArray(leftStackColour);
  }
 else   if (rightStackSize > 0) {
    return ColourUtils.convertIntColourToFloatArray(rightStackColour);
  }
 else {
    return new float[]{1F,1F,1F};
  }
}",0.7025171624713958
157083,"private int getLeftStackColour(){
  if (this.inventory[OUTPUT_LEFT_INVENTORY_INDEX] != null) {
    return this.inventory[OUTPUT_LEFT_INVENTORY_INDEX].getItem().getColorFromItemStack(this.inventory[OUTPUT_LEFT_INVENTORY_INDEX],1);
  }
  return Integer.parseInt(Colours.PURE_WHITE,16);
}","private int getLeftStackColour(){
  if (this.inventory[OUTPUT_LEFT_INVENTORY_INDEX] != null) {
    ItemStack itemStack=this.inventory[OUTPUT_LEFT_INVENTORY_INDEX];
    if (itemStack.getItem() instanceof ItemAlchemicalDust) {
      return Integer.parseInt(Colours.DUST_COLOURS[MathHelper.clamp_int(itemStack.getItemDamage(),0,Colours.DUST_COLOURS.length - 1)],16);
    }
  }
  return 16777215;
}",0.4742268041237113
157084,"private int getRightStackColour(){
  if (this.inventory[OUTPUT_RIGHT_INVENTORY_INDEX] != null) {
    return this.inventory[OUTPUT_RIGHT_INVENTORY_INDEX].getItem().getColorFromItemStack(this.inventory[OUTPUT_RIGHT_INVENTORY_INDEX],1);
  }
  return Integer.parseInt(Colours.PURE_WHITE,16);
}","private int getRightStackColour(){
  if (this.inventory[OUTPUT_RIGHT_INVENTORY_INDEX] != null) {
    ItemStack itemStack=this.inventory[OUTPUT_RIGHT_INVENTORY_INDEX];
    if (itemStack.getItem() instanceof ItemAlchemicalDust) {
      return Integer.parseInt(Colours.DUST_COLOURS[MathHelper.clamp_int(itemStack.getItemDamage(),0,Colours.DUST_COLOURS.length - 1)],16);
    }
  }
  return 16777215;
}",0.478134110787172
157085,"/** 
 * Returns the stack in slot i
 */
@Override public ItemStack getStackInSlot(int slotIndex){
  return inventory[slotIndex];
}","/** 
 * Returns the stack in slot i
 */
@Override public ItemStack getStackInSlot(int slotIndex){
  sendDustPileData();
  return inventory[slotIndex];
}",0.9219858156028368
157086,"@Override public void updateEntity(){
  boolean isBurning=this.deviceCookTime > 0;
  boolean sendUpdate=false;
  if (this.deviceCookTime > 0) {
    this.deviceCookTime--;
  }
  if (!this.worldObj.isRemote) {
    if (this.deviceCookTime == 0 && this.canCalcinate()) {
      this.fuelBurnTime=this.deviceCookTime=TileEntityFurnace.getItemBurnTime(this.inventory[FUEL_INVENTORY_INDEX]);
      if (this.deviceCookTime > 0) {
        sendUpdate=true;
        if (this.inventory[FUEL_INVENTORY_INDEX] != null) {
          --this.inventory[FUEL_INVENTORY_INDEX].stackSize;
          if (this.inventory[FUEL_INVENTORY_INDEX].stackSize == 0) {
            this.inventory[FUEL_INVENTORY_INDEX]=this.inventory[FUEL_INVENTORY_INDEX].getItem().getContainerItemStack(inventory[FUEL_INVENTORY_INDEX]);
          }
        }
      }
    }
    if (this.deviceCookTime > 0 && this.canCalcinate()) {
      this.itemCookTime++;
      if (this.itemCookTime == 200) {
        this.itemCookTime=0;
        this.calcinateItem();
        sendUpdate=true;
      }
    }
 else {
      this.itemCookTime=0;
    }
    if (isBurning != this.deviceCookTime > 0) {
      sendUpdate=true;
    }
  }
  if (sendUpdate) {
    this.onInventoryChanged();
    this.state=this.deviceCookTime > 0 ? (byte)1 : (byte)0;
    this.worldObj.addBlockEvent(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID,1,this.state);
    this.worldObj.addBlockEvent(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID,2,getLeftStackSize());
    this.worldObj.addBlockEvent(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID,3,getLeftStackColour());
    this.worldObj.addBlockEvent(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID,4,getRightStackSize());
    this.worldObj.addBlockEvent(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID,5,getRightStackColour());
    this.worldObj.notifyBlockChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
  }
}","@Override public void updateEntity(){
  boolean isBurning=this.deviceCookTime > 0;
  boolean sendUpdate=false;
  if (this.deviceCookTime > 0) {
    this.deviceCookTime--;
  }
  if (!this.worldObj.isRemote) {
    if (this.deviceCookTime == 0 && this.canCalcinate()) {
      this.fuelBurnTime=this.deviceCookTime=TileEntityFurnace.getItemBurnTime(this.inventory[FUEL_INVENTORY_INDEX]);
      if (this.deviceCookTime > 0) {
        sendUpdate=true;
        if (this.inventory[FUEL_INVENTORY_INDEX] != null) {
          --this.inventory[FUEL_INVENTORY_INDEX].stackSize;
          if (this.inventory[FUEL_INVENTORY_INDEX].stackSize == 0) {
            this.inventory[FUEL_INVENTORY_INDEX]=this.inventory[FUEL_INVENTORY_INDEX].getItem().getContainerItemStack(inventory[FUEL_INVENTORY_INDEX]);
          }
        }
      }
    }
    if (this.deviceCookTime > 0 && this.canCalcinate()) {
      this.itemCookTime++;
      if (this.itemCookTime == 200) {
        this.itemCookTime=0;
        this.calcinateItem();
        sendUpdate=true;
      }
    }
 else {
      this.itemCookTime=0;
    }
    if (isBurning != this.deviceCookTime > 0) {
      sendUpdate=true;
    }
  }
  if (sendUpdate) {
    this.onInventoryChanged();
    this.state=this.deviceCookTime > 0 ? (byte)1 : (byte)0;
    this.worldObj.addBlockEvent(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID,1,this.state);
    sendDustPileData();
    this.worldObj.notifyBlockChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
  }
}",0.8483981693363845
157087,"@Override public JsonElement serialize(WrappedStack wrappedStack,Type type,JsonSerializationContext context){
  JsonObject jsonWrappedStack=new JsonObject();
  Gson gsonWrappedStack=new Gson();
  jsonWrappedStack.addProperty(""String_Node_Str"",wrappedStack.className);
  jsonWrappedStack.addProperty(""String_Node_Str"",wrappedStack.stackSize);
  if (wrappedStack.wrappedStack instanceof ItemStack) {
    Gson gsonItemStackSerializer=(new GsonBuilder()).registerTypeAdapter(ItemStack.class,new GsonItemStackSerialization()).create();
    jsonWrappedStack.add(""String_Node_Str"",gsonItemStackSerializer.toJsonTree(wrappedStack.wrappedStack,ItemStack.class));
  }
 else   if (wrappedStack.wrappedStack instanceof OreStack) {
    jsonWrappedStack.add(""String_Node_Str"",gsonWrappedStack.toJsonTree(wrappedStack.wrappedStack,OreStack.class));
  }
 else   if (wrappedStack.wrappedStack instanceof EnergyStack) {
    jsonWrappedStack.add(""String_Node_Str"",gsonWrappedStack.toJsonTree(wrappedStack.wrappedStack,EnergyStack.class));
  }
 else   if (wrappedStack.wrappedStack instanceof FluidStack) {
    jsonWrappedStack.add(""String_Node_Str"",gsonWrappedStack.toJsonTree(wrappedStack.wrappedStack,FluidStack.class));
  }
  return jsonWrappedStack;
}","@Override public JsonElement serialize(WrappedStack wrappedStack,Type type,JsonSerializationContext context){
  JsonObject jsonWrappedStack=new JsonObject();
  Gson gsonWrappedStack=new Gson();
  jsonWrappedStack.addProperty(""String_Node_Str"",wrappedStack.className);
  jsonWrappedStack.addProperty(""String_Node_Str"",wrappedStack.stackSize);
  if (wrappedStack.wrappedStack instanceof ItemStack) {
    jsonWrappedStack.add(""String_Node_Str"",gsonWrappedStack.toJsonTree(wrappedStack.wrappedStack,ItemStack.class));
  }
 else   if (wrappedStack.wrappedStack instanceof OreStack) {
    jsonWrappedStack.add(""String_Node_Str"",gsonWrappedStack.toJsonTree(wrappedStack.wrappedStack,OreStack.class));
  }
 else   if (wrappedStack.wrappedStack instanceof EnergyStack) {
    jsonWrappedStack.add(""String_Node_Str"",gsonWrappedStack.toJsonTree(wrappedStack.wrappedStack,EnergyStack.class));
  }
 else   if (wrappedStack.wrappedStack instanceof FluidStack) {
    jsonWrappedStack.add(""String_Node_Str"",gsonWrappedStack.toJsonTree(wrappedStack.wrappedStack,FluidStack.class));
  }
  return jsonWrappedStack;
}",0.3765008576329331
157088,"/** 
 */
@Override public WrappedStack deserialize(JsonElement jsonElement,Type type,JsonDeserializationContext context) throws JsonParseException {
  if (!jsonElement.isJsonPrimitive()) {
    JsonObject jsonWrappedStack=(JsonObject)jsonElement;
    int stackSize=-1;
    String className=null;
    Object stackObject=null;
    if (jsonWrappedStack.get(""String_Node_Str"") != null) {
      className=jsonWrappedStack.get(""String_Node_Str"").getAsString();
    }
    if (jsonWrappedStack.get(""String_Node_Str"") != null) {
      stackSize=jsonWrappedStack.get(""String_Node_Str"").getAsInt();
    }
    if (jsonWrappedStack.get(""String_Node_Str"") != null && !jsonWrappedStack.get(""String_Node_Str"").isJsonPrimitive()) {
      if (className != null) {
        if (className.equalsIgnoreCase(ItemStack.class.getSimpleName())) {
          Gson gsonItemStackSerializer=(new GsonBuilder()).registerTypeAdapter(ItemStack.class,new GsonItemStackSerialization()).create();
          ItemStack itemStack=gsonItemStackSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),ItemStack.class);
          if (stackSize > 0) {
            itemStack.stackSize=stackSize;
          }
          stackObject=itemStack;
        }
 else         if (className.equalsIgnoreCase(OreStack.class.getSimpleName())) {
          OreStack oreStack=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),OreStack.class);
          if (stackSize > 0) {
            oreStack.stackSize=stackSize;
          }
          stackObject=oreStack;
        }
 else         if (className.equalsIgnoreCase(EnergyStack.class.getSimpleName())) {
          EnergyStack energyStack=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),EnergyStack.class);
          if (stackSize > 0) {
            energyStack.stackSize=stackSize;
          }
          stackObject=energyStack;
        }
 else         if (className.equalsIgnoreCase(FluidStack.class.getSimpleName())) {
          FluidStack fluidStack=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),FluidStack.class);
          if (stackSize > 0) {
            fluidStack.amount=stackSize;
          }
          stackObject=fluidStack;
        }
      }
    }
    if (stackObject != null) {
      return new WrappedStack(stackObject);
    }
 else {
      throw new JsonParseException(String.format(""String_Node_Str"",jsonElement.toString()));
    }
  }
 else {
    throw new JsonParseException(String.format(""String_Node_Str"",jsonElement.toString()));
  }
}","/** 
 */
@Override public WrappedStack deserialize(JsonElement jsonElement,Type type,JsonDeserializationContext context) throws JsonParseException {
  if (!jsonElement.isJsonPrimitive()) {
    JsonObject jsonWrappedStack=(JsonObject)jsonElement;
    int stackSize=-1;
    String className=null;
    Object stackObject=null;
    if (jsonWrappedStack.get(""String_Node_Str"") != null) {
      className=jsonWrappedStack.get(""String_Node_Str"").getAsString();
    }
    if (jsonWrappedStack.get(""String_Node_Str"") != null) {
      stackSize=jsonWrappedStack.get(""String_Node_Str"").getAsInt();
    }
    if (jsonWrappedStack.get(""String_Node_Str"") != null && !jsonWrappedStack.get(""String_Node_Str"").isJsonPrimitive()) {
      if (className != null) {
        if (className.equalsIgnoreCase(ItemStack.class.getSimpleName())) {
          ItemStack itemStack=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),ItemStack.class);
          if (stackSize > 0) {
            itemStack.stackSize=stackSize;
          }
          stackObject=itemStack;
        }
 else         if (className.equalsIgnoreCase(OreStack.class.getSimpleName())) {
          OreStack oreStack=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),OreStack.class);
          if (stackSize > 0) {
            oreStack.stackSize=stackSize;
          }
          stackObject=oreStack;
        }
 else         if (className.equalsIgnoreCase(EnergyStack.class.getSimpleName())) {
          EnergyStack energyStack=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),EnergyStack.class);
          if (stackSize > 0) {
            energyStack.stackSize=stackSize;
          }
          stackObject=energyStack;
        }
 else         if (className.equalsIgnoreCase(FluidStack.class.getSimpleName())) {
          FluidStack fluidStack=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),FluidStack.class);
          if (stackSize > 0) {
            fluidStack.amount=stackSize;
          }
          stackObject=fluidStack;
        }
      }
    }
    if (stackObject != null) {
      return new WrappedStack(stackObject);
    }
 else {
      throw new JsonParseException(String.format(""String_Node_Str"",jsonElement.toString()));
    }
  }
 else {
    throw new JsonParseException(String.format(""String_Node_Str"",jsonElement.toString()));
  }
}",0.9636363636363636
157089,"public WrappedStack(Object object,int stackSize){
  if (object instanceof Item) {
    object=new ItemStack((Item)object);
  }
 else   if (object instanceof Block) {
    object=new ItemStack((Block)object);
  }
 else   if (object instanceof Fluid) {
    object=new FluidStack((Fluid)object,1000);
  }
  if (object instanceof ItemStack) {
    ItemStack itemStack=((ItemStack)object).copy();
    className=ItemStack.class.getSimpleName();
    this.stackSize=stackSize;
    itemStack.stackSize=1;
    wrappedStack=itemStack;
  }
 else   if (object instanceof OreStack) {
    OreStack oreStack=(OreStack)object;
    className=OreStack.class.getSimpleName();
    this.stackSize=stackSize;
    oreStack.stackSize=1;
    wrappedStack=oreStack;
  }
 else   if (object instanceof ArrayList) {
    ArrayList<?> objectList=(ArrayList<?>)object;
    OreStack possibleOreStack=OreStack.getOreStackFromList(objectList);
    if (possibleOreStack != null) {
      className=OreStack.class.getSimpleName();
      this.stackSize=stackSize;
      possibleOreStack.stackSize=1;
      wrappedStack=possibleOreStack;
    }
 else {
      this.stackSize=-1;
      className=null;
      wrappedStack=null;
    }
  }
 else   if (object instanceof EnergyStack) {
    EnergyStack energyStack=(EnergyStack)object;
    className=EnergyStack.class.getSimpleName();
    this.stackSize=stackSize;
    energyStack.stackSize=1;
    wrappedStack=energyStack;
  }
 else   if (object instanceof FluidStack) {
    FluidStack fluidStack=(FluidStack)object;
    className=FluidStack.class.getSimpleName();
    this.stackSize=stackSize;
    fluidStack.amount=1;
    wrappedStack=fluidStack;
  }
 else   if (object instanceof WrappedStack) {
    WrappedStack wrappedStackObject=(WrappedStack)object;
    if (wrappedStackObject.getWrappedStack() != null) {
      className=wrappedStackObject.wrappedStack.getClass().getSimpleName();
      this.stackSize=stackSize;
      this.wrappedStack=wrappedStackObject.wrappedStack;
    }
 else {
      className=null;
      this.stackSize=-1;
      wrappedStack=null;
    }
  }
 else   if (object instanceof String) {
    WrappedStack wrappedStack=createFromJson((String)object);
    if (wrappedStack != null && wrappedStack.getWrappedStack() != null) {
      className=wrappedStack.getWrappedStack().getClass().getSimpleName();
      this.stackSize=stackSize;
      this.wrappedStack=wrappedStack.wrappedStack;
    }
 else {
      className=null;
      this.stackSize=-1;
      this.wrappedStack=null;
    }
  }
 else {
    className=null;
    this.stackSize=-1;
    wrappedStack=null;
  }
}","public WrappedStack(Object object,int stackSize){
  if (object instanceof Item) {
    object=new ItemStack((Item)object);
  }
 else   if (object instanceof Block) {
    object=new ItemStack((Block)object);
  }
 else   if (object instanceof Fluid) {
    object=new FluidStack((Fluid)object,1000);
  }
  if (object instanceof ItemStack) {
    ItemStack itemStack=((ItemStack)object).copy();
    className=ItemStack.class.getSimpleName();
    this.stackSize=stackSize;
    itemStack.stackSize=1;
    wrappedStack=itemStack;
  }
 else   if (object instanceof OreStack) {
    OreStack oreStack=(OreStack)object;
    className=OreStack.class.getSimpleName();
    this.stackSize=stackSize;
    oreStack.stackSize=1;
    wrappedStack=oreStack;
  }
 else   if (object instanceof ArrayList) {
    ArrayList<?> objectList=(ArrayList<?>)object;
    OreStack possibleOreStack=OreStack.getOreStackFromList(objectList);
    if (possibleOreStack != null) {
      className=OreStack.class.getSimpleName();
      this.stackSize=stackSize;
      possibleOreStack.stackSize=1;
      wrappedStack=possibleOreStack;
    }
 else {
      this.stackSize=-1;
      className=null;
      wrappedStack=null;
    }
  }
 else   if (object instanceof EnergyStack) {
    EnergyStack energyStack=(EnergyStack)object;
    className=EnergyStack.class.getSimpleName();
    this.stackSize=stackSize;
    energyStack.stackSize=1;
    wrappedStack=energyStack;
  }
 else   if (object instanceof FluidStack) {
    FluidStack fluidStack=(FluidStack)object;
    className=FluidStack.class.getSimpleName();
    this.stackSize=stackSize;
    fluidStack.amount=1;
    wrappedStack=fluidStack;
  }
 else   if (object instanceof WrappedStack) {
    WrappedStack wrappedStackObject=(WrappedStack)object;
    if (wrappedStackObject.getWrappedStack() != null) {
      className=wrappedStackObject.wrappedStack.getClass().getSimpleName();
      this.stackSize=stackSize;
      this.wrappedStack=wrappedStackObject.wrappedStack;
    }
 else {
      className=null;
      this.stackSize=-1;
      wrappedStack=null;
    }
  }
 else   if (object instanceof String) {
    WrappedStack wrappedStack=createFromJson((String)object);
    if (wrappedStack != null && wrappedStack.getWrappedStack() != null) {
      className=wrappedStack.wrappedStack.getClass().getSimpleName();
      this.stackSize=stackSize;
      this.wrappedStack=wrappedStack.wrappedStack;
    }
 else {
      className=null;
      this.stackSize=-1;
      this.wrappedStack=null;
    }
  }
 else {
    className=null;
    this.stackSize=-1;
    wrappedStack=null;
  }
}",0.9943896304894564
157090,"public String toJson(){
  return gsonSerializer.toJson(this);
}","@SuppressWarnings(""String_Node_Str"") public String toJson(){
  return gsonSerializer.toJson(this);
}",0.7730061349693251
157091,"public static void init(){
  GameRegistry.registerCraftingHandler(new CraftingHandler());
  CraftingManager.getInstance().getRecipeList().add(new RecipesAlchemicalBagDyes());
  initBlockRecipes();
  initItemRecipes();
}","public static void init(){
  GameRegistry.registerCraftingHandler(new CraftingHandler());
  CraftingManager.getInstance().getRecipeList().add(new RecipesAlchemicalBagDyes());
  RecipesEquivalentExchange.init();
}",0.8445475638051044
157092,"@Override public JsonElement serialize(RecipeMapping recipeMapping,Type type,JsonSerializationContext context){
  JsonObject jsonRecipeMapping=new JsonObject();
  Gson gsonWrappedStack=(new GsonBuilder()).registerTypeAdapter(WrappedStack.class,new WrappedStack()).create();
  JsonArray jsonArray=new JsonArray();
  for (  WrappedStack inputStack : recipeMapping.inputWrappedStacks) {
    jsonArray.add(gsonWrappedStack.toJsonTree(inputStack));
  }
  jsonRecipeMapping.add(""String_Node_Str"",gsonWrappedStack.toJsonTree(recipeMapping.outputWrappedStack));
  jsonRecipeMapping.add(""String_Node_Str"",jsonArray);
  return jsonRecipeMapping;
}","@Override public JsonElement serialize(RecipeMapping recipeMapping,Type type,JsonSerializationContext context){
  JsonObject jsonRecipeMapping=new JsonObject();
  Gson gsonWrappedStack=new Gson();
  JsonArray jsonArray=new JsonArray();
  for (  WrappedStack inputStack : recipeMapping.inputWrappedStacks) {
    jsonArray.add(gsonWrappedStack.toJsonTree(inputStack));
  }
  jsonRecipeMapping.add(""String_Node_Str"",gsonWrappedStack.toJsonTree(recipeMapping.outputWrappedStack));
  jsonRecipeMapping.add(""String_Node_Str"",jsonArray);
  return jsonRecipeMapping;
}",0.935672514619883
157093,"@Override public JsonElement serialize(WrappedStack wrappedStack,Type type,JsonSerializationContext context){
  JsonObject jsonWrappedStack=new JsonObject();
  Gson gsonWrappedStack=new Gson();
  jsonWrappedStack.addProperty(""String_Node_Str"",wrappedStack.className);
  jsonWrappedStack.addProperty(""String_Node_Str"",wrappedStack.stackSize);
  if (gsonWrappedStack != null) {
    jsonWrappedStack.add(""String_Node_Str"",gsonWrappedStack.toJsonTree(wrappedStack.wrappedStack));
  }
 else {
    jsonWrappedStack.add(""String_Node_Str"",JsonNull.INSTANCE);
  }
  return jsonWrappedStack;
}","@Override public JsonElement serialize(WrappedStack wrappedStack,Type type,JsonSerializationContext context){
  JsonObject jsonWrappedStack=new JsonObject();
  Gson gsonWrappedStack=new Gson();
  jsonWrappedStack.addProperty(""String_Node_Str"",wrappedStack.className);
  jsonWrappedStack.addProperty(""String_Node_Str"",wrappedStack.stackSize);
  jsonWrappedStack.add(""String_Node_Str"",gsonWrappedStack.toJsonTree(wrappedStack.wrappedStack));
  return jsonWrappedStack;
}",0.8430066603235015
157094,"/** 
 */
@Override public WrappedStack deserialize(JsonElement jsonElement,Type type,JsonDeserializationContext context) throws JsonParseException {
  if (!jsonElement.isJsonPrimitive()) {
    JsonObject jsonWrappedStack=(JsonObject)jsonElement;
    int stackSize=-1;
    String className=null;
    Object stackObject=null;
    if (jsonWrappedStack.get(""String_Node_Str"") != null) {
      className=jsonWrappedStack.get(""String_Node_Str"").getAsString();
    }
    if (jsonWrappedStack.get(""String_Node_Str"") != null) {
      stackSize=jsonWrappedStack.get(""String_Node_Str"").getAsInt();
    }
    if (jsonWrappedStack.get(""String_Node_Str"") != null && !jsonWrappedStack.get(""String_Node_Str"").isJsonPrimitive()) {
      if (className != null) {
        if (className.equalsIgnoreCase(Item.class.getSimpleName())) {
          stackObject=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),Item.class);
        }
 else         if (className.equalsIgnoreCase(Block.class.getSimpleName())) {
          stackObject=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),Block.class);
        }
 else         if (className.equalsIgnoreCase(Fluid.class.getSimpleName())) {
          stackObject=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),Fluid.class);
        }
 else         if (className.equalsIgnoreCase(ItemStack.class.getSimpleName())) {
          ItemStack itemStack=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),ItemStack.class);
          if (stackSize > 0) {
            itemStack.stackSize=stackSize;
          }
          stackObject=itemStack;
        }
 else         if (className.equalsIgnoreCase(OreStack.class.getSimpleName())) {
          OreStack oreStack=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),OreStack.class);
          if (stackSize > 0) {
            oreStack.stackSize=stackSize;
          }
          stackObject=oreStack;
        }
 else         if (className.equalsIgnoreCase(EnergyStack.class.getSimpleName())) {
          EnergyStack energyStack=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),EnergyStack.class);
          if (stackSize > 0) {
            energyStack.stackSize=stackSize;
          }
          stackObject=energyStack;
        }
 else         if (className.equalsIgnoreCase(FluidStack.class.getSimpleName())) {
          FluidStack fluidStack=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),FluidStack.class);
          if (stackSize > 0) {
            fluidStack.amount=stackSize;
          }
          stackObject=fluidStack;
        }
      }
    }
    if (stackObject != null) {
      return new WrappedStack(stackObject);
    }
 else {
      throw new JsonParseException(String.format(""String_Node_Str"",jsonElement.toString()));
    }
  }
 else {
    throw new JsonParseException(String.format(""String_Node_Str"",jsonElement.toString()));
  }
}","/** 
 */
@Override public WrappedStack deserialize(JsonElement jsonElement,Type type,JsonDeserializationContext context) throws JsonParseException {
  if (!jsonElement.isJsonPrimitive()) {
    JsonObject jsonWrappedStack=(JsonObject)jsonElement;
    int stackSize=-1;
    String className=null;
    Object stackObject=null;
    if (jsonWrappedStack.get(""String_Node_Str"") != null) {
      className=jsonWrappedStack.get(""String_Node_Str"").getAsString();
    }
    if (jsonWrappedStack.get(""String_Node_Str"") != null) {
      stackSize=jsonWrappedStack.get(""String_Node_Str"").getAsInt();
    }
    if (jsonWrappedStack.get(""String_Node_Str"") != null && !jsonWrappedStack.get(""String_Node_Str"").isJsonPrimitive()) {
      if (className != null) {
        if (className.equalsIgnoreCase(ItemStack.class.getSimpleName())) {
          ItemStack itemStack=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),ItemStack.class);
          if (stackSize > 0) {
            itemStack.stackSize=stackSize;
          }
          stackObject=itemStack;
        }
 else         if (className.equalsIgnoreCase(OreStack.class.getSimpleName())) {
          OreStack oreStack=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),OreStack.class);
          if (stackSize > 0) {
            oreStack.stackSize=stackSize;
          }
          stackObject=oreStack;
        }
 else         if (className.equalsIgnoreCase(EnergyStack.class.getSimpleName())) {
          EnergyStack energyStack=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),EnergyStack.class);
          if (stackSize > 0) {
            energyStack.stackSize=stackSize;
          }
          stackObject=energyStack;
        }
 else         if (className.equalsIgnoreCase(FluidStack.class.getSimpleName())) {
          FluidStack fluidStack=gsonSerializer.fromJson(jsonWrappedStack.get(""String_Node_Str""),FluidStack.class);
          if (stackSize > 0) {
            fluidStack.amount=stackSize;
          }
          stackObject=fluidStack;
        }
      }
    }
    if (stackObject != null) {
      return new WrappedStack(stackObject);
    }
 else {
      throw new JsonParseException(String.format(""String_Node_Str"",jsonElement.toString()));
    }
  }
 else {
    throw new JsonParseException(String.format(""String_Node_Str"",jsonElement.toString()));
  }
}",0.449438202247191
157095,"public static boolean transmuteInWorld(World world,EntityPlayer player,ItemStack stack,int x,int y,int z,int targetID,int targetMeta){
  if (Block.blocksList[targetID] != null) {
    world.setBlockMetadataWithNotify(x,y,z,targetID,targetMeta);
    return true;
  }
  return false;
}","public static boolean transmuteInWorld(World world,EntityPlayer player,ItemStack stack,int x,int y,int z,int targetID,int targetMeta){
  if (Block.blocksList[targetID] != null) {
    world.setBlock(x,y,z,targetID,targetMeta,2);
    return true;
  }
  return false;
}",0.9635036496350364
157096,"public void parseObjModel(URL fileURL){
  BufferedReader reader=null;
  InputStream inputStream=null;
  parserFactory=new ObjLineParserFactory(this);
  try {
    inputStream=fileURL.openStream();
    reader=new BufferedReader(new InputStreamReader(inputStream));
    String currentLine=null;
    while ((currentLine=reader.readLine()) != null) {
      currentLine=currentLine.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
      if (currentLine.startsWith(""String_Node_Str"") || currentLine.length() == 0) {
        continue;
      }
 else       if (currentLine.startsWith(""String_Node_Str"")) {
        LogHelper.log(Level.INFO,""String_Node_Str"");
      }
 else       if (currentLine.startsWith(""String_Node_Str"")) {
        LogHelper.log(Level.INFO,""String_Node_Str"");
      }
 else       if (currentLine.startsWith(""String_Node_Str"")) {
        LogHelper.log(Level.INFO,""String_Node_Str"");
      }
 else       if (currentLine.startsWith(""String_Node_Str"")) {
        LogHelper.log(Level.INFO,""String_Node_Str"");
      }
 else       if (currentLine.startsWith(""String_Node_Str"")) {
        LogHelper.log(Level.INFO,""String_Node_Str"");
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    try {
      reader.close();
      inputStream.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","public void parseObjModel(URL fileURL){
  BufferedReader reader=null;
  InputStream inputStream=null;
  parserFactory=new ObjLineParserFactory(this);
  try {
    inputStream=fileURL.openStream();
    reader=new BufferedReader(new InputStreamReader(inputStream));
    String currentLine=null;
    while ((currentLine=reader.readLine()) != null) {
      currentLine=currentLine.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
      if (currentLine.startsWith(""String_Node_Str"") || currentLine.length() == 0) {
        continue;
      }
 else       if (currentLine.startsWith(""String_Node_Str"")) {
        Vertex vertex=parseVertex(currentLine);
        if (vertex != null) {
          vertices.add(vertex);
        }
      }
 else       if (currentLine.startsWith(""String_Node_Str"")) {
        Vertex vertex=parseVertexNormal(currentLine);
        if (vertex != null) {
          vertexNormals.add(vertex);
        }
      }
 else       if (currentLine.startsWith(""String_Node_Str"")) {
        TextureCoordinate textureCoordinate=parseTextureCoordinate(currentLine);
        if (textureCoordinate != null) {
          textureCoordinates.add(textureCoordinate);
        }
      }
 else       if (currentLine.startsWith(""String_Node_Str"")) {
        Face face=parseFace(currentLine);
        if (face != null) {
          if (currentGroup == null) {
            currentGroup=new Group(""String_Node_Str"");
          }
          currentGroup.faces.add(face);
        }
      }
 else       if (currentLine.startsWith(""String_Node_Str"")) {
      }
    }
    groups.add(currentGroup);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    try {
      reader.close();
      inputStream.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  int faceSum=0;
  for (  Group group : groups) {
    faceSum+=group.faces.size();
  }
  LogHelper.log(Level.INFO,""String_Node_Str"" + fileName);
  LogHelper.log(Level.INFO,""String_Node_Str"" + vertices.size());
  LogHelper.log(Level.INFO,""String_Node_Str"" + vertexNormals.size());
  LogHelper.log(Level.INFO,""String_Node_Str"" + textureCoordinates.size());
  LogHelper.log(Level.INFO,""String_Node_Str"" + faceSum);
  LogHelper.log(Level.INFO,""String_Node_Str"" + groups.size());
}",0.4979298923544024
157097,"public ContainerAlchemicalChest(InventoryPlayer inventoryPlayer,TileAlchemicalChest tileAlchemicalChest){
  this.tileAlchemicalChest=tileAlchemicalChest;
  tileAlchemicalChest.openChest();
  for (int chestRowIndex=0; chestRowIndex < numChestRows; ++chestRowIndex) {
    for (int chestColumnIndex=0; chestColumnIndex < numChestColumns; ++chestColumnIndex) {
      this.addSlotToContainer(new Slot(tileAlchemicalChest,chestColumnIndex + chestRowIndex * 9 + 9,8 + chestColumnIndex * 18,18 + chestRowIndex * 18));
    }
  }
  for (int inventoryRowIndex=0; inventoryRowIndex < numPlayerRows; ++inventoryRowIndex) {
    for (int inventoryColumnIndex=0; inventoryColumnIndex < numPlayerColumns; ++inventoryColumnIndex) {
      this.addSlotToContainer(new Slot(inventoryPlayer,inventoryColumnIndex + inventoryRowIndex * 9 + 9,44 + inventoryColumnIndex * 18,104 + inventoryRowIndex * 18));
    }
  }
  for (int actionBarSlotIndex=0; actionBarSlotIndex < numPlayerColumns; ++actionBarSlotIndex) {
    this.addSlotToContainer(new Slot(inventoryPlayer,actionBarSlotIndex,44 + actionBarSlotIndex * 18,162));
  }
}","public ContainerAlchemicalChest(InventoryPlayer inventoryPlayer,TileAlchemicalChest tileAlchemicalChest){
  this.tileAlchemicalChest=tileAlchemicalChest;
  tileAlchemicalChest.openChest();
  for (int chestRowIndex=0; chestRowIndex < numChestRows; ++chestRowIndex) {
    for (int chestColumnIndex=0; chestColumnIndex < numChestColumns; ++chestColumnIndex) {
      this.addSlotToContainer(new Slot(tileAlchemicalChest,chestColumnIndex + chestRowIndex * 13,8 + chestColumnIndex * 18,18 + chestRowIndex * 18));
    }
  }
  for (int inventoryRowIndex=0; inventoryRowIndex < numPlayerRows; ++inventoryRowIndex) {
    for (int inventoryColumnIndex=0; inventoryColumnIndex < numPlayerColumns; ++inventoryColumnIndex) {
      this.addSlotToContainer(new Slot(inventoryPlayer,inventoryColumnIndex + inventoryRowIndex * 9 + 9,44 + inventoryColumnIndex * 18,104 + inventoryRowIndex * 18));
    }
  }
  for (int actionBarSlotIndex=0; actionBarSlotIndex < numPlayerColumns; ++actionBarSlotIndex) {
    this.addSlotToContainer(new Slot(inventoryPlayer,actionBarSlotIndex,44 + actionBarSlotIndex * 18,162));
  }
}",0.9968138370505234
157098,"@ForgeSubscribe public void onWorldTransmutationEvent(WorldTransmutationEvent event){
  int id=event.world.getBlockId(event.x,event.y,event.z);
  int meta=event.world.getBlockMetadata(event.x,event.y,event.z);
  boolean result=false;
  Block currentBlock=Block.blocksList[id];
  if (currentBlock != null) {
    meta=currentBlock.damageDropped(meta);
  }
  ItemStack worldStack=new ItemStack(id,1,meta);
  ItemStack targetStack=new ItemStack(event.targetID,1,event.targetMeta);
  if (!worldStack.isItemEqual(targetStack)) {
    if (EquivalencyHandler.instance().areEquivalent(worldStack,targetStack)) {
      if (event.itemStack.getItemDamage() < event.itemStack.getMaxDamage()) {
        result=TransmutationHelper.transmuteInWorld(event.world,event.player,event.player.getCurrentEquippedItem(),event.x,event.y,event.z,event.targetID,event.targetMeta);
      }
    }
  }
  if (result) {
    event.actionResult=ActionResult.SUCCESS;
  }
 else {
    event.actionResult=ActionResult.FAILURE;
  }
}","@ForgeSubscribe public void onWorldTransmutationEvent(WorldTransmutationEvent event){
  int id=event.world.getBlockId(event.x,event.y,event.z);
  int meta=event.world.getBlockMetadata(event.x,event.y,event.z);
  boolean result=false;
  Block currentBlock=Block.blocksList[id];
  if (currentBlock != null) {
    meta=currentBlock.damageDropped(meta);
  }
  ItemStack worldStack=new ItemStack(id,1,meta);
  ItemStack targetStack=new ItemStack(event.targetID,1,event.targetMeta);
  if (!worldStack.isItemEqual(targetStack)) {
    if (EquivalencyHandler.instance().areWorldEquivalent(worldStack,targetStack)) {
      if (event.itemStack.getItemDamage() < event.itemStack.getMaxDamage()) {
        result=TransmutationHelper.transmuteInWorld(event.world,event.player,event.player.getCurrentEquippedItem(),event.x,event.y,event.z,event.targetID,event.targetMeta);
      }
    }
  }
  if (result) {
    event.actionResult=ActionResult.SUCCESS;
  }
 else {
    event.actionResult=ActionResult.FAILURE;
  }
}",0.997491219267436
157099,"@Override public boolean onItemUse(ItemStack itemStack,EntityPlayer entityPlayer,World world,int x,int y,int z,int sideHit,float hitVecX,float hitVecY,float hitVecZ){
  transmuteBlock(itemStack,entityPlayer,world,x,y,z,sideHit);
  return true;
}","@Override public boolean onItemUse(ItemStack itemStack,EntityPlayer entityPlayer,World world,int x,int y,int z,int sideHit,float hitVecX,float hitVecY,float hitVecZ){
  if (world.isRemote) {
    transmuteBlock(itemStack,entityPlayer,world,x,y,z,sideHit);
  }
  return true;
}",0.9423076923076924
157100,"public List addTabCompletionOptions(ICommandSender commandSender,String[] args){
switch (args.length) {
case 1:
{
      return getListOfStringsMatchingLastWord(args,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    }
case 2:
{
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      return getListOfStringsMatchingLastWord(args,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      return getListOfStringsMatchingLastWord(args,new String[]{""String_Node_Str"",""String_Node_Str""});
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      return getListOfStringsMatchingLastWord(args,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    }
  }
case 3:
{
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      return getListOfStringsMatchingLastWord(args,new String[]{""String_Node_Str"",""String_Node_Str""});
    }
  }
}
case 4:
{
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (args[2].equalsIgnoreCase(""String_Node_Str"") || args[2].equalsIgnoreCase(""String_Node_Str"")) {
      return getListOfStringsMatchingLastWord(args,new String[]{""String_Node_Str"",""String_Node_Str""});
    }
  }
}
}
default :
{
return null;
}
}
}","public List addTabCompletionOptions(ICommandSender commandSender,String[] args){
switch (args.length) {
case 1:
{
      return getListOfStringsMatchingLastWord(args,new String[]{getLocalizedString(COMMAND_OVERLAY),getLocalizedString(COMMAND_PARTICLES),getLocalizedString(COMMAND_SOUNDS)});
    }
case 2:
{
    if (args[0].equalsIgnoreCase(getLocalizedString(COMMAND_OVERLAY))) {
      return getListOfStringsMatchingLastWord(args,new String[]{getLocalizedString(COMMAND_ON),getLocalizedString(COMMAND_OFF),getLocalizedString(COMMAND_POSITION),getLocalizedString(COMMAND_SCALE),getLocalizedString(COMMAND_OPACITY)});
    }
 else     if (args[0].equalsIgnoreCase(getLocalizedString(COMMAND_PARTICLES))) {
      return getListOfStringsMatchingLastWord(args,new String[]{getLocalizedString(COMMAND_ON),getLocalizedString(COMMAND_OFF)});
    }
 else     if (args[0].equalsIgnoreCase(getLocalizedString(COMMAND_SOUNDS))) {
      return getListOfStringsMatchingLastWord(args,new String[]{getLocalizedString(COMMAND_ALL),getLocalizedString(COMMAND_SELF),getLocalizedString(COMMAND_OFF)});
    }
  }
case 3:
{
  if (args[0].equalsIgnoreCase(getLocalizedString(COMMAND_OVERLAY))) {
    if (args[1].equalsIgnoreCase(getLocalizedString(COMMAND_POSITION))) {
      return getListOfStringsMatchingLastWord(args,new String[]{getLocalizedString(COMMAND_TOP),getLocalizedString(COMMAND_BOTTOM)});
    }
  }
}
case 4:
{
if (args[0].equalsIgnoreCase(getLocalizedString(COMMAND_OVERLAY))) {
  if (args[1].equalsIgnoreCase(getLocalizedString(COMMAND_POSITION))) {
    if (args[2].equalsIgnoreCase(getLocalizedString(COMMAND_TOP)) || args[2].equalsIgnoreCase(getLocalizedString(COMMAND_BOTTOM))) {
      return getListOfStringsMatchingLastWord(args,new String[]{getLocalizedString(COMMAND_LEFT),getLocalizedString(COMMAND_RIGHT)});
    }
  }
}
}
default :
{
return null;
}
}
}",0.6004266991770801
157101,"public String getCommandName(){
  return ""String_Node_Str"";
}","public String getCommandName(){
  return COMMAND_EE3;
}",0.7758620689655172
157102,"public void processCommand(ICommandSender commandSender,String[] args){
  if (args.length > 0) {
    String commandName=args[0];
    System.arraycopy(args,1,args,0,args.length - 1);
    if (commandName.toLowerCase().equals(""String_Node_Str"")) {
      CommandOverlay.processCommand(commandSender,args);
    }
 else     if (commandName.toLowerCase().equals(""String_Node_Str"")) {
      CommandParticles.processCommand(commandSender,args);
    }
 else     if (commandName.toLowerCase().equals(""String_Node_Str"")) {
      CommandSounds.processCommand(commandSender,args);
    }
  }
 else {
    throw new WrongUsageException(""String_Node_Str"",new Object[0]);
  }
}","public void processCommand(ICommandSender commandSender,String[] args){
  if (args.length > 0) {
    String commandName=args[0];
    System.arraycopy(args,1,args,0,args.length - 1);
    if (commandName.equalsIgnoreCase(getLocalizedString(COMMAND_OVERLAY))) {
      CommandOverlay.processCommand(commandSender,args);
    }
 else     if (commandName.equalsIgnoreCase(getLocalizedString(COMMAND_PARTICLES))) {
      CommandParticles.processCommand(commandSender,args);
    }
 else     if (commandName.equalsIgnoreCase(getLocalizedString(COMMAND_SOUNDS))) {
      CommandSounds.processCommand(commandSender,args);
    }
  }
 else {
    throw new WrongUsageException(getLocalizedString(COMMAND_EE3_USAGE),new Object[0]);
  }
}",0.7976794778825236
157103,"private static void processScaleCommand(ICommandSender commandSender,String[] args){
  if (args.length >= 2) {
    try {
      float scale=Float.parseFloat(args[1]);
      if (scale <= 0F) {
        throw new WrongUsageException(""String_Node_Str"",new Object[0]);
      }
 else {
        ConfigurationSettings.TARGET_BLOCK_OVERLAY_SCALE=scale;
        ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.TARGET_BLOCK_OVERLAY_SCALE_CONFIGNAME,args[1]);
        commandSender.sendChatToPlayer(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      throw new WrongUsageException(""String_Node_Str"",new Object[0]);
    }
  }
 else {
    throw new WrongUsageException(""String_Node_Str"",new Object[0]);
  }
}","private static void processScaleCommand(ICommandSender commandSender,String[] args){
  if (args.length >= 2) {
    try {
      float scale=Float.parseFloat(args[1]);
      if (scale <= 0F) {
        throw new WrongUsageException(getLocalizedString(COMMAND_OVERLAY_SCALE_USAGE),new Object[0]);
      }
 else {
        ConfigurationSettings.TARGET_BLOCK_OVERLAY_SCALE=scale;
        ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.TARGET_BLOCK_OVERLAY_SCALE_CONFIGNAME,args[1]);
        commandSender.sendChatToPlayer(getLocalizedString(COMMAND_OVERLAY_SCALE_UPDATED));
      }
    }
 catch (    Exception e) {
      throw new WrongUsageException(getLocalizedString(COMMAND_OVERLAY_SCALE_USAGE),new Object[0]);
    }
  }
 else {
    throw new WrongUsageException(getLocalizedString(COMMAND_OVERLAY_SCALE_USAGE),new Object[0]);
  }
}",0.8451053283767038
157104,"private static void processPositionCommand(ICommandSender commandSender,String[] args){
  String xPosition, yPosition;
  if (args.length >= 3) {
    xPosition=args[1];
    yPosition=args[2];
    if ((xPosition.toLowerCase().equals(""String_Node_Str"")) && (yPosition.toLowerCase().equals(""String_Node_Str""))) {
      ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION=0;
      ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION_CONFIGNAME,""String_Node_Str"");
      commandSender.sendChatToPlayer(""String_Node_Str"");
    }
 else     if ((xPosition.toLowerCase().equals(""String_Node_Str"")) && (yPosition.toLowerCase().equals(""String_Node_Str""))) {
      ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION=1;
      ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION_CONFIGNAME,""String_Node_Str"");
      commandSender.sendChatToPlayer(""String_Node_Str"");
    }
 else     if ((xPosition.toLowerCase().equals(""String_Node_Str"")) && (yPosition.toLowerCase().equals(""String_Node_Str""))) {
      ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION=2;
      ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION_CONFIGNAME,""String_Node_Str"");
      commandSender.sendChatToPlayer(""String_Node_Str"");
    }
 else     if ((xPosition.toLowerCase().equals(""String_Node_Str"")) && (yPosition.toLowerCase().equals(""String_Node_Str""))) {
      ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION=3;
      ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION_CONFIGNAME,""String_Node_Str"");
      commandSender.sendChatToPlayer(""String_Node_Str"");
    }
 else {
      throw new WrongUsageException(""String_Node_Str"",new Object[0]);
    }
  }
 else {
    new WrongUsageException(""String_Node_Str"",new Object[0]);
  }
}","private static void processPositionCommand(ICommandSender commandSender,String[] args){
  String yPosition, xPosition;
  if (args.length >= 3) {
    yPosition=args[1];
    xPosition=args[2];
    if ((yPosition.equalsIgnoreCase(getLocalizedString(COMMAND_TOP))) && (xPosition.equalsIgnoreCase(getLocalizedString(COMMAND_LEFT)))) {
      ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION=0;
      ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION_CONFIGNAME,""String_Node_Str"");
      commandSender.sendChatToPlayer(getLocalizedString(COMMAND_OVERLAY_POSITION_TOP_LEFT));
    }
 else     if ((yPosition.equalsIgnoreCase(getLocalizedString(COMMAND_TOP))) && (xPosition.equalsIgnoreCase(getLocalizedString(COMMAND_RIGHT)))) {
      ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION=1;
      ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION_CONFIGNAME,""String_Node_Str"");
      commandSender.sendChatToPlayer(getLocalizedString(COMMAND_OVERLAY_POSITION_TOP_RIGHT));
    }
 else     if ((yPosition.equalsIgnoreCase(getLocalizedString(COMMAND_BOTTOM))) && (xPosition.equalsIgnoreCase(getLocalizedString(COMMAND_LEFT)))) {
      ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION=2;
      ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION_CONFIGNAME,""String_Node_Str"");
      commandSender.sendChatToPlayer(getLocalizedString(COMMAND_OVERLAY_POSITION_BOTTOM_LEFT));
    }
 else     if ((yPosition.equalsIgnoreCase(getLocalizedString(COMMAND_BOTTOM))) && (xPosition.equalsIgnoreCase(getLocalizedString(COMMAND_RIGHT)))) {
      ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION=3;
      ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.TARGET_BLOCK_OVERLAY_POSITION_CONFIGNAME,""String_Node_Str"");
      commandSender.sendChatToPlayer(getLocalizedString(COMMAND_OVERLAY_POSITION_BOTTOM_RIGHT));
    }
 else {
      throw new WrongUsageException(getLocalizedString(COMMAND_OVERLAY_POSITION_USAGE),new Object[0]);
    }
  }
 else {
    new WrongUsageException(getLocalizedString(COMMAND_OVERLAY_POSITION_USAGE),new Object[0]);
  }
}",0.7161841480778358
157105,"private static void processOffCommand(ICommandSender commandSender){
  ConfigurationSettings.ENABLE_OVERLAY_WORLD_TRANSMUTATION=false;
  ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.ENABLE_OVERLAY_WORLD_TRANSMUTATION_CONFIGNAME,""String_Node_Str"");
  commandSender.sendChatToPlayer(""String_Node_Str"");
}","private static void processOffCommand(ICommandSender commandSender){
  ConfigurationSettings.ENABLE_OVERLAY_WORLD_TRANSMUTATION=false;
  ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.ENABLE_OVERLAY_WORLD_TRANSMUTATION_CONFIGNAME,FALSE);
  commandSender.sendChatToPlayer(getLocalizedString(COMMAND_OVERLAY_TURNED_OFF));
}",0.8790896159317212
157106,"private static void processOnCommand(ICommandSender commandSender){
  ConfigurationSettings.ENABLE_OVERLAY_WORLD_TRANSMUTATION=true;
  ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.ENABLE_OVERLAY_WORLD_TRANSMUTATION_CONFIGNAME,""String_Node_Str"");
  commandSender.sendChatToPlayer(""String_Node_Str"");
}","private static void processOnCommand(ICommandSender commandSender){
  ConfigurationSettings.ENABLE_OVERLAY_WORLD_TRANSMUTATION=true;
  ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.ENABLE_OVERLAY_WORLD_TRANSMUTATION_CONFIGNAME,TRUE);
  commandSender.sendChatToPlayer(getLocalizedString(COMMAND_OVERLAY_TURNED_ON));
}",0.8809182209469153
157107,"private static void processOpacityCommand(ICommandSender commandSender,String[] args){
  if (args.length >= 2) {
    try {
      float opacity=Float.parseFloat(args[1]);
      if ((opacity < 0F) || (opacity > 1F)) {
        throw new WrongUsageException(""String_Node_Str"",new Object[0]);
      }
 else {
        ConfigurationSettings.TARGET_BLOCK_OVERLAY_OPACITY=opacity;
        ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.TARGET_BLOCK_OVERLAY_OPACITY_CONFIGNAME,args[1]);
        commandSender.sendChatToPlayer(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      throw new WrongUsageException(""String_Node_Str"",new Object[0]);
    }
  }
 else {
    throw new WrongUsageException(""String_Node_Str"",new Object[0]);
  }
}","private static void processOpacityCommand(ICommandSender commandSender,String[] args){
  if (args.length >= 2) {
    try {
      float opacity=Float.parseFloat(args[1]);
      if ((opacity < 0F) || (opacity > 1F)) {
        throw new WrongUsageException(getLocalizedString(COMMAND_OVERLAY_OPACITY_USAGE),new Object[0]);
      }
 else {
        ConfigurationSettings.TARGET_BLOCK_OVERLAY_OPACITY=opacity;
        ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.TARGET_BLOCK_OVERLAY_OPACITY_CONFIGNAME,args[1]);
        commandSender.sendChatToPlayer(getLocalizedString(COMMAND_OVERLAY_OPACITY_UPDATED));
      }
    }
 catch (    Exception e) {
      throw new WrongUsageException(getLocalizedString(COMMAND_OVERLAY_OPACITY_USAGE),new Object[0]);
    }
  }
 else {
    throw new WrongUsageException(getLocalizedString(COMMAND_OVERLAY_OPACITY_USAGE),new Object[0]);
  }
}",0.8467933491686461
157108,"public static void processCommand(ICommandSender commandSender,String[] args){
  if (args.length > 0) {
    String subCommand=args[0];
    if (subCommand.toLowerCase().equals(""String_Node_Str"")) {
      processOnCommand(commandSender);
    }
 else     if (subCommand.toLowerCase().equals(""String_Node_Str"")) {
      processOffCommand(commandSender);
    }
 else     if (subCommand.toLowerCase().equals(""String_Node_Str"")) {
      processOpacityCommand(commandSender,args);
    }
 else     if (subCommand.toLowerCase().equals(""String_Node_Str"")) {
      processScaleCommand(commandSender,args);
    }
 else     if (subCommand.toLowerCase().equals(""String_Node_Str"")) {
      processPositionCommand(commandSender,args);
    }
 else {
      throw new WrongUsageException(""String_Node_Str"",new Object[0]);
    }
  }
 else {
    throw new WrongUsageException(""String_Node_Str"",new Object[0]);
  }
}","public static void processCommand(ICommandSender commandSender,String[] args){
  if (args.length > 0) {
    String subCommand=args[0];
    if (subCommand.equalsIgnoreCase(getLocalizedString(COMMAND_ON))) {
      processOnCommand(commandSender);
    }
 else     if (subCommand.equalsIgnoreCase(getLocalizedString(COMMAND_OFF))) {
      processOffCommand(commandSender);
    }
 else     if (subCommand.equalsIgnoreCase(getLocalizedString(COMMAND_OPACITY))) {
      processOpacityCommand(commandSender,args);
    }
 else     if (subCommand.equalsIgnoreCase(getLocalizedString(COMMAND_SCALE))) {
      processScaleCommand(commandSender,args);
    }
 else     if (subCommand.equalsIgnoreCase(getLocalizedString(COMMAND_POSITION))) {
      processPositionCommand(commandSender,args);
    }
 else {
      throw new WrongUsageException(getLocalizedString(COMMAND_OVERLAY_USAGE),new Object[0]);
    }
  }
 else {
    throw new WrongUsageException(getLocalizedString(COMMAND_OVERLAY_USAGE),new Object[0]);
  }
}",0.4783526927138332
157109,"private static void processOffCommand(ICommandSender commandSender){
  ConfigurationSettings.ENABLE_PARTICLE_FX=false;
  ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.ENABLE_PARTICLE_FX_CONFIGNAME,""String_Node_Str"");
  commandSender.sendChatToPlayer(""String_Node_Str"");
}","private static void processOffCommand(ICommandSender commandSender){
  ConfigurationSettings.ENABLE_PARTICLE_FX=false;
  ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.ENABLE_PARTICLE_FX_CONFIGNAME,FALSE);
  commandSender.sendChatToPlayer(getLocalizedString(COMMAND_PARTICLES_TURNED_OFF));
}",0.8642745709828393
157110,"private static void processOnCommand(ICommandSender commandSender){
  ConfigurationSettings.ENABLE_PARTICLE_FX=true;
  ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.ENABLE_PARTICLE_FX_CONFIGNAME,""String_Node_Str"");
  commandSender.sendChatToPlayer(""String_Node_Str"");
}","private static void processOnCommand(ICommandSender commandSender){
  ConfigurationSettings.ENABLE_PARTICLE_FX=true;
  ConfigurationHandler.set(ConfigurationHandler.CATEGORY_GRAPHICS,ConfigurationSettings.ENABLE_PARTICLE_FX_CONFIGNAME,TRUE);
  commandSender.sendChatToPlayer(getLocalizedString(COMMAND_PARTICLES_TURNED_ON));
}",0.8661417322834646
157111,"public static void processCommand(ICommandSender commandSender,String[] args){
  String subCommand;
  if (args.length > 0) {
    subCommand=args[0];
    if (subCommand.toLowerCase().equals(""String_Node_Str"")) {
      processOnCommand(commandSender);
    }
 else     if (subCommand.toLowerCase().equals(""String_Node_Str"")) {
      processOffCommand(commandSender);
    }
 else {
      throw new WrongUsageException(""String_Node_Str"",new Object[0]);
    }
  }
 else {
    throw new WrongUsageException(""String_Node_Str"",new Object[0]);
  }
}","public static void processCommand(ICommandSender commandSender,String[] args){
  String subCommand;
  if (args.length > 0) {
    subCommand=args[0];
    if (subCommand.toLowerCase().equals(getLocalizedString(COMMAND_ON))) {
      processOnCommand(commandSender);
    }
 else     if (subCommand.toLowerCase().equals(getLocalizedString(COMMAND_OFF))) {
      processOffCommand(commandSender);
    }
 else {
      throw new WrongUsageException(getLocalizedString(COMMAND_PARTICLES_USAGE),new Object[0]);
    }
  }
 else {
    throw new WrongUsageException(getLocalizedString(COMMAND_PARTICLES_USAGE),new Object[0]);
  }
}",0.8262748487467588
157112,"@ForgeSubscribe public void onWorldTransmutationEvent(WorldTransmutationEvent event){
  int id=event.world.getBlockId(event.x,event.y,event.z);
  int meta=event.world.getBlockMetadata(event.x,event.y,event.z);
  Material material=event.world.getBlockMaterial(event.x,event.y,event.z);
  boolean result=false;
  if ((material == Material.leaves) && (id == Block.leaves.blockID)) {
    meta=meta & 4;
  }
 else   if ((material == Material.pumpkin) && (id == Block.pumpkin.blockID)) {
    meta=0;
  }
  ItemStack worldStack=new ItemStack(id,1,meta);
  ItemStack targetStack=new ItemStack(event.targetID,1,event.targetMeta);
  if (!worldStack.isItemEqual(targetStack)) {
    if (EquivalencyHandler.instance().areEquivalent(worldStack,targetStack)) {
      if (event.itemStack.getItemDamage() < event.itemStack.getMaxDamage()) {
        result=TransmutationHelper.transmuteInWorld(event.world,event.player,event.player.getCurrentEquippedItem(),event.x,event.y,event.z,event.targetID,event.targetMeta);
      }
    }
  }
  if (result) {
    event.actionResult=ActionResult.SUCCESS;
  }
 else {
    event.actionResult=ActionResult.FAILURE;
  }
}","@ForgeSubscribe public void onWorldTransmutationEvent(WorldTransmutationEvent event){
  int id=event.world.getBlockId(event.x,event.y,event.z);
  int meta=event.world.getBlockMetadata(event.x,event.y,event.z);
  Material material=event.world.getBlockMaterial(event.x,event.y,event.z);
  boolean result=false;
  if ((material == Material.leaves) && (id == Block.leaves.blockID)) {
    meta=meta & 4;
  }
 else   if ((material == Material.pumpkin) && (id == Block.pumpkin.blockID)) {
    meta=0;
  }
  ItemStack worldStack=new ItemStack(id,1,meta);
  ItemStack targetStack=new ItemStack(event.targetID,1,event.targetMeta);
  if (!worldStack.isItemEqual(targetStack)) {
    if (EquivalencyHandler.instance().areWorldEquivalent(worldStack,targetStack)) {
      if (event.itemStack.getItemDamage() < event.itemStack.getMaxDamage()) {
        result=TransmutationHelper.transmuteInWorld(event.world,event.player,event.player.getCurrentEquippedItem(),event.x,event.y,event.z,event.targetID,event.targetMeta);
      }
    }
  }
  if (result) {
    event.actionResult=ActionResult.SUCCESS;
  }
 else {
    event.actionResult=ActionResult.FAILURE;
  }
}",0.997807978956598
157113,"@Override public void keyDown(EnumSet<TickType> types,KeyBinding kb,boolean tickEnd,boolean isRepeat){
  if (tickEnd) {
    if (FMLClientHandler.instance().getClient().inGameHasFocus) {
      EntityPlayer player=FMLClientHandler.instance().getClient().thePlayer;
      if (player != null) {
        ItemStack currentItem=FMLClientHandler.instance().getClient().thePlayer.getCurrentEquippedItem();
        if (currentItem != null) {
          if (currentItem.getItem() instanceof IKeyBound) {
            PacketDispatcher.sendPacketToServer(PacketTypeHandler.populatePacket(new PacketKeyPressed(kb.keyDescription)));
          }
        }
      }
    }
  }
}","@Override public void keyDown(EnumSet<TickType> types,KeyBinding kb,boolean tickEnd,boolean isRepeat){
  if (tickEnd) {
    if (FMLClientHandler.instance().getClient().inGameHasFocus) {
      EntityPlayer player=FMLClientHandler.instance().getClient().thePlayer;
      if (player != null) {
        ItemStack currentItem=FMLClientHandler.instance().getClient().thePlayer.getCurrentEquippedItem();
        if (currentItem != null) {
          if (currentItem.getItem() instanceof IKeyBound) {
            if (!KeyBindingHelper.isClientSided(kb.keyDescription)) {
              PacketDispatcher.sendPacketToServer(PacketTypeHandler.populatePacket(new PacketKeyPressed(kb.keyDescription)));
            }
 else {
              ((IKeyBound)currentItem.getItem()).doKeyBindingAction(player,currentItem,kb.keyDescription);
            }
          }
        }
      }
    }
  }
}",0.8593852190974494
157114,"@Override public boolean onItemUse(ItemStack itemStack,EntityPlayer entityPlayer,World world,int x,int y,int z,int sideHit,float hitVecX,float hitVecY,float hitVecZ){
  transmuteBlocks(itemStack,entityPlayer,world,x,y,z,sideHit);
  return true;
}","@Override public boolean onItemUse(ItemStack itemStack,EntityPlayer entityPlayer,World world,int x,int y,int z,int sideHit,float hitVecX,float hitVecY,float hitVecZ){
  transmuteBlock(itemStack,entityPlayer,world,x,y,z,sideHit);
  return true;
}",0.9979633401221996
157115,"@Override public boolean onItemUse(ItemStack itemStack,EntityPlayer entityPlayer,World world,int x,int y,int z,int sideHit,float hitVecX,float hitVecY,float hitVecZ){
  transmuteBlocks(itemStack,entityPlayer,world,x,y,z,sideHit);
  return true;
}","@Override public boolean onItemUse(ItemStack itemStack,EntityPlayer entityPlayer,World world,int x,int y,int z,int sideHit,float hitVecX,float hitVecY,float hitVecZ){
  transmuteBlock(itemStack,entityPlayer,world,x,y,z,sideHit);
  return true;
}",0.9979633401221996
157116,"@ForgeSubscribe public void onWorldTransmutationEvent(WorldTransmutationEvent event){
  int id=event.world.getBlockId(event.x,event.y,event.z);
  int meta=event.world.getBlockMetadata(event.x,event.y,event.z);
  Material material=event.world.getBlockMaterial(event.x,event.y,event.z);
  boolean result=false;
  if ((material == Material.leaves) && (id == Block.leaves.blockID)) {
    meta=meta & 4;
  }
 else   if ((material == Material.pumpkin) && (id == Block.pumpkin.blockID)) {
    meta=0;
  }
  ItemStack worldStack=new ItemStack(id,1,meta);
  ItemStack targetStack=new ItemStack(event.targetID,1,event.targetMeta);
  if (!worldStack.isItemEqual(targetStack)) {
    if (EquivalencyHandler.instance().areEquivalent(worldStack,targetStack)) {
      if (event.itemStack.getItemDamage() < event.itemStack.getMaxDamage()) {
        result=TransmutationHelper.transmuteInWorld(event.world,event.player,event.player.getCurrentEquippedItem(),event.x,event.y,event.z,event.targetID,event.targetMeta);
      }
    }
  }
  if (result) {
    event.actionResult=ActionResult.SUCCESS;
  }
 else {
    event.actionResult=ActionResult.FAILURE;
  }
}","@ForgeSubscribe public void onWorldTransmutationEvent(WorldTransmutationEvent event){
  int id=event.world.getBlockId(event.x,event.y,event.z);
  int meta=event.world.getBlockMetadata(event.x,event.y,event.z);
  Material material=event.world.getBlockMaterial(event.x,event.y,event.z);
  boolean result=false;
  if ((material == Material.leaves) && (id == Block.leaves.blockID)) {
    meta=meta & 4;
  }
 else   if ((material == Material.pumpkin) && (id == Block.pumpkin.blockID)) {
    meta=0;
  }
  ItemStack worldStack=new ItemStack(id,1,meta);
  ItemStack targetStack=new ItemStack(event.targetID,1,event.targetMeta);
  if (!worldStack.isItemEqual(targetStack)) {
    if (EquivalencyHandler.instance().areWorldEquivalent(worldStack,targetStack)) {
      if (event.itemStack.getItemDamage() < event.itemStack.getMaxDamage()) {
        result=TransmutationHelper.transmuteInWorld(event.world,event.player,event.player.getCurrentEquippedItem(),event.x,event.y,event.z,event.targetID,event.targetMeta);
      }
    }
  }
  if (result) {
    event.actionResult=ActionResult.SUCCESS;
  }
 else {
    event.actionResult=ActionResult.FAILURE;
  }
}",0.997807978956598
157117,"public void drawInWorldTransmutationOverlay(DrawBlockHighlightEvent event){
  double x=event.target.blockX + 0.5F;
  double y=event.target.blockY + 0.5F;
  double z=event.target.blockZ + 0.5F;
  double iPX=event.player.prevPosX + (event.player.posX - event.player.prevPosX) * event.partialTicks;
  double iPY=event.player.prevPosY + (event.player.posY - event.player.prevPosY) * event.partialTicks;
  double iPZ=event.player.prevPosZ + (event.player.posZ - event.player.prevPosZ) * event.partialTicks;
  int texture=event.context.renderEngine.getTexture(Sprites.SPRITE_SHEET_LOCATION + Sprites.WORLD_TRANSMUTATION_TEXTURE);
  int xScale=1;
  int yScale=1;
  int zScale=1;
  int chargeLevel;
  int itemChargeLevel=0;
  if (event.currentItem.getItem() instanceof IChargeable) {
    itemChargeLevel=((IChargeable)event.currentItem.getItem()).getCharge(event.currentItem);
  }
  chargeLevel=1 + itemChargeLevel * 2;
  if ((event.target.sideHit == 0) || (event.target.sideHit == 1)) {
    xScale=chargeLevel;
    zScale=chargeLevel;
  }
 else   if ((event.target.sideHit == 2) || (event.target.sideHit == 3)) {
    xScale=chargeLevel;
    yScale=chargeLevel;
  }
 else   if ((event.target.sideHit == 4) || (event.target.sideHit == 5)) {
    yScale=chargeLevel;
    zScale=chargeLevel;
  }
  float xShift=0.1F;
  float yShift=0.1F;
  float zShift=0.1F;
  if (event.target.sideHit == 0) {
    xShift=0;
    yShift=-yShift;
    zShift=0;
  }
 else   if (event.target.sideHit == 1) {
    xShift=0;
    zShift=0;
  }
 else   if (event.target.sideHit == 2) {
    xShift=0;
    yShift=0;
    if (chargeLevel > 1) {
      zShift=-zShift - 1;
    }
 else {
      zShift=-zShift;
    }
  }
 else   if (event.target.sideHit == 3) {
    xShift=0;
    yShift=0;
  }
 else   if (event.target.sideHit == 4) {
    xShift=-xShift;
    yShift=0;
    zShift=0;
  }
 else   if (event.target.sideHit == 5) {
    yShift=0;
    zShift=0;
  }
  GL11.glDepthMask(false);
  GL11.glDisable(GL11.GL_CULL_FACE);
  for (int i=0; i < 6; i++) {
    ForgeDirection forgeDir=ForgeDirection.getOrientation(i);
    GL11.glPushMatrix();
    GL11.glTranslated(-iPX + x + xShift,-iPY + y + yShift,-iPZ + z + zShift);
    GL11.glScalef(1F * xScale,1F * yScale,1F * zScale);
    GL11.glRotatef(90,forgeDir.offsetX,forgeDir.offsetY,forgeDir.offsetZ);
    GL11.glTranslated(0,0,0.5f);
    GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
    renderSlidingQuad(texture,0.75F);
    GL11.glPopMatrix();
  }
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glDepthMask(true);
}","public void drawInWorldTransmutationOverlay(DrawBlockHighlightEvent event){
  double x=event.target.blockX + 0.5F;
  double y=event.target.blockY + 0.5F;
  double z=event.target.blockZ + 0.5F;
  double iPX=event.player.prevPosX + (event.player.posX - event.player.prevPosX) * event.partialTicks;
  double iPY=event.player.prevPosY + (event.player.posY - event.player.prevPosY) * event.partialTicks;
  double iPZ=event.player.prevPosZ + (event.player.posZ - event.player.prevPosZ) * event.partialTicks;
  int texture=event.context.renderEngine.getTexture(Sprites.SPRITE_SHEET_LOCATION + Sprites.WORLD_TRANSMUTATION_TEXTURE);
  float xScale=1;
  float yScale=1;
  float zScale=1;
  float xShift=0.1F;
  float yShift=0.1F;
  float zShift=0.1F;
  int chargeLevel;
  int itemChargeLevel=0;
  if (event.currentItem.getItem() instanceof IChargeable) {
    itemChargeLevel=((IChargeable)event.currentItem.getItem()).getCharge(event.currentItem);
  }
  chargeLevel=1 + itemChargeLevel * 2;
  ForgeDirection sideHit=ForgeDirection.getOrientation(event.target.sideHit);
switch (sideHit) {
case UP:
{
      xScale=chargeLevel + 0.1F;
      zScale=chargeLevel + 0.1F;
      xShift=0;
      zShift=0;
      break;
    }
case DOWN:
{
    xScale=chargeLevel + 0.1F;
    zScale=chargeLevel + 0.1F;
    xShift=0;
    yShift=-yShift;
    zShift=0;
    break;
  }
case NORTH:
{
  xScale=chargeLevel + 0.1F;
  yScale=chargeLevel + 0.1F;
  xShift=0;
  yShift=0;
  zShift=-zShift;
  break;
}
case SOUTH:
{
xScale=chargeLevel + 0.1F;
yScale=chargeLevel + 0.1F;
xShift=0;
yShift=0;
break;
}
case EAST:
{
yScale=chargeLevel + 0.1F;
zScale=chargeLevel + 0.1F;
yShift=0;
zShift=0;
break;
}
case WEST:
{
yScale=chargeLevel + 0.1F;
zScale=chargeLevel + 0.1F;
xShift=-xShift;
yShift=0;
zShift=0;
break;
}
default :
break;
}
GL11.glDepthMask(false);
GL11.glDisable(GL11.GL_CULL_FACE);
for (int i=0; i < 6; i++) {
ForgeDirection forgeDir=ForgeDirection.getOrientation(i);
int zCorrection=(i == 2) ? -1 : 1;
GL11.glPushMatrix();
GL11.glTranslated(-iPX + x + xShift,-iPY + y + yShift,-iPZ + z + zShift);
GL11.glScalef(1F * xScale,1F * yScale,1F * zScale);
GL11.glRotatef(90,forgeDir.offsetX,forgeDir.offsetY,forgeDir.offsetZ);
GL11.glTranslated(0,0,0.5f * zCorrection);
GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
renderPulsingQuad(texture,0.75F);
GL11.glPopMatrix();
}
GL11.glEnable(GL11.GL_CULL_FACE);
GL11.glDepthMask(true);
}",0.6575510204081633
157118,"private static void renderStoneHUD(Minecraft minecraft,EntityPlayer player,ItemStack stack,float partialTicks){
  float overlayScale=2F;
  float blockScale=overlayScale / 2;
  float overlayOpacity=1F;
  MovingObjectPosition rayTrace=minecraft.objectMouseOver;
  ItemStack currentBlock=null;
  if ((player.worldObj != null) && (rayTrace != null)) {
    currentBlock=TransmutationHelper.getNextBlock(player.worldObj.getBlockId(rayTrace.blockX,rayTrace.blockY,rayTrace.blockZ),player.worldObj.getBlockMetadata(rayTrace.blockX,rayTrace.blockY,rayTrace.blockZ),player.isSneaking());
  }
  GL11.glPushMatrix();
  ScaledResolution sr=new ScaledResolution(minecraft.gameSettings,minecraft.displayWidth,minecraft.displayHeight);
  GL11.glClear(256);
  GL11.glMatrixMode(GL11.GL_PROJECTION);
  GL11.glLoadIdentity();
  GL11.glOrtho(0.0D,sr.getScaledWidth_double(),sr.getScaledHeight_double(),0.0D,1000.0D,3000.0D);
  GL11.glMatrixMode(GL11.GL_MODELVIEW);
  GL11.glLoadIdentity();
  GL11.glTranslatef(0.0F,0.0F,-2000.0F);
  GL11.glPushMatrix();
  RenderHelper.enableGUIStandardItemLighting();
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  GL11.glEnable(GL11.GL_COLOR_MATERIAL);
  GL11.glEnable(GL11.GL_LIGHTING);
  RenderUtils.renderItemIntoGUI(minecraft.fontRenderer,minecraft.renderEngine,stack,(int)(sr.getScaledWidth() - (16 * overlayScale)),(int)(sr.getScaledHeight() - (16 * overlayScale)),overlayOpacity / 2,overlayScale);
  if ((currentBlock != null) && (currentBlock.getItem() instanceof ItemBlock)) {
    RenderUtils.renderRotatingBlockIntoGUI(minecraft.fontRenderer,minecraft.renderEngine,currentBlock,(int)(sr.getScaledWidth() - (16 * overlayScale) / 2 - 8),(int)(sr.getScaledHeight() - (16 * overlayScale) / 2 - 8),-90,blockScale);
  }
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glPopMatrix();
  GL11.glPopMatrix();
}","private static void renderStoneHUD(Minecraft minecraft,EntityPlayer player,ItemStack stack,float partialTicks){
  float overlayScale=2F;
  float blockScale=overlayScale / 2;
  float overlayOpacity=0.5F;
  MovingObjectPosition rayTrace=minecraft.objectMouseOver;
  ItemStack currentBlock=null;
  if ((player.worldObj != null) && (rayTrace != null)) {
    currentBlock=TransmutationHelper.getNextBlock(player.worldObj.getBlockId(rayTrace.blockX,rayTrace.blockY,rayTrace.blockZ),player.worldObj.getBlockMetadata(rayTrace.blockX,rayTrace.blockY,rayTrace.blockZ),player.isSneaking());
  }
  GL11.glPushMatrix();
  ScaledResolution sr=new ScaledResolution(minecraft.gameSettings,minecraft.displayWidth,minecraft.displayHeight);
  GL11.glClear(256);
  GL11.glMatrixMode(GL11.GL_PROJECTION);
  GL11.glLoadIdentity();
  GL11.glOrtho(0.0D,sr.getScaledWidth_double(),sr.getScaledHeight_double(),0.0D,1000.0D,3000.0D);
  GL11.glMatrixMode(GL11.GL_MODELVIEW);
  GL11.glLoadIdentity();
  GL11.glTranslatef(0.0F,0.0F,-2000.0F);
  GL11.glPushMatrix();
  RenderHelper.enableGUIStandardItemLighting();
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  GL11.glEnable(GL11.GL_COLOR_MATERIAL);
  GL11.glEnable(GL11.GL_LIGHTING);
  RenderUtils.renderItemIntoGUI(minecraft.fontRenderer,minecraft.renderEngine,stack,(int)(sr.getScaledWidth() - (16 * overlayScale)),(int)(sr.getScaledHeight() - (16 * overlayScale)),overlayOpacity,overlayScale);
  if ((currentBlock != null) && (currentBlock.getItem() instanceof ItemBlock)) {
    RenderUtils.renderRotatingBlockIntoGUI(minecraft.fontRenderer,minecraft.renderEngine,currentBlock,(int)(sr.getScaledWidth() - (16 * overlayScale) / 2 - 8),(int)(sr.getScaledHeight() - (16 * overlayScale) / 2 - 8),-90,blockScale);
  }
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glPopMatrix();
  GL11.glPopMatrix();
}",0.9978390059427336
157119,"@PreInit public void preInit(FMLPreInitializationEvent event){
  LogHelper.init();
  LocalizationHandler.loadLanguages();
  ConfigurationHandler.init(event.getSuggestedConfigurationFile());
  if (ConfigurationSettings.ENABLE_VERSION_CHECK) {
    VersionHelper.checkVersion();
  }
  VersionHelper.logResult();
  TickRegistry.registerTickHandler(new VersionCheckTickHandler(),Side.CLIENT);
  TickRegistry.registerTickHandler(new RenderTickHandler(),Side.CLIENT);
  proxy.registerKeyBindingHandler();
  proxy.registerSoundHandler();
}","@PreInit public void preInit(FMLPreInitializationEvent event){
  LogHelper.init();
  LocalizationHandler.loadLanguages();
  ConfigurationHandler.init(event.getSuggestedConfigurationFile());
  if (ConfigurationSettings.ENABLE_VERSION_CHECK) {
    VersionHelper.checkVersion();
  }
  VersionHelper.logResult();
  TickRegistry.registerTickHandler(new VersionCheckTickHandler(),Side.CLIENT);
  proxy.registerRenderTickHandler();
  proxy.registerKeyBindingHandler();
  proxy.registerSoundHandler();
}",0.8927875243664717
157120,"@ForgeSubscribe public void onSoundLoad(SoundLoadEvent event){
  for (  String soundFile : Sounds.soundFiles) {
    try {
      event.manager.addSound(soundFile,new File(this.getClass().getResource(""String_Node_Str"" + soundFile).toURI()));
    }
 catch (    Exception e) {
      LogHelper.log(Level.WARNING,""String_Node_Str"" + soundFile);
    }
  }
}","@ForgeSubscribe public void onSoundLoad(SoundLoadEvent event){
  for (  String soundFile : Sounds.soundFiles) {
    try {
      event.manager.soundPoolSounds.addSound(soundFile,this.getClass().getResource(""String_Node_Str"" + soundFile));
    }
 catch (    Exception e) {
      LogHelper.log(Level.WARNING,""String_Node_Str"" + soundFile);
    }
  }
}",0.9512893982808024
157121,"public static void addSmeltingRecipe(ItemStack input,ItemStack stone,ItemStack fuel){
  ItemStack result=FurnaceRecipes.smelting().getSmeltingResult(input);
  if (result == null)   return;
  Object[] list=new Object[9];
  list[0]=stone;
  list[1]=fuel;
  for (int i=2; i < 9; i++)   list[i]=new ItemStack(input.getItem(),1,input.getItemDamage());
  GameRegistry.addShapelessRecipe(new ItemStack(result.getItem(),7,result.getItemDamage()),list);
}","public static void addSmeltingRecipe(ItemStack input,ItemStack stone,ItemStack fuel){
  ItemStack result=FurnaceRecipes.smelting().getSmeltingResult(input);
  if (result == null)   return;
  Object[] list=new Object[9];
  list[0]=stone;
  list[1]=fuel;
  for (int i=2; i < 9; i++)   list[i]=new ItemStack(input.getItem(),1,input.getItemDamage());
  GameRegistry.addShapelessRecipe(new ItemStack(result.getItem(),(result.stackSize * 7),result.getItemDamage()),list);
}",0.976998904709748
157122,"public ModelCalcinator(float scale){
  this.scale=scale;
  this.textureHeight=TEXTURE_HEIGHT;
  this.textureWidth=TEXTURE_WIDTH;
  this.legFrontLeft=new ModelRenderer(this,0,0);
  this.legFrontLeft.addBox(-1F,-8F,-1F,2,8,2);
  this.legFrontLeft.setRotationPoint(2,8,2);
  this.legFrontLeft.rotateAngleY=((float)Math.PI / 4F);
  this.legFrontRight=new ModelRenderer(this,0,0);
  this.legFrontRight.addBox(-1F,-8F,-1F,2,8,2);
  this.legFrontRight.setRotationPoint(2,8,14);
  this.legFrontRight.rotateAngleY=((float)Math.PI / 4F);
  this.legBackLeft=new ModelRenderer(this,0,0);
  this.legBackLeft.addBox(-1F,-8F,-1F,2,8,2);
  this.legBackLeft.setRotationPoint(14,8,2);
  this.legBackLeft.rotateAngleY=((float)Math.PI / 4F);
  this.legBackRight=new ModelRenderer(this,0,0);
  this.legBackRight.addBox(-1F,-8F,-1F,2,8,2);
  this.legBackRight.setRotationPoint(14,8,14);
  this.legBackRight.rotateAngleY=((float)Math.PI / 4F);
  this.armFrontLeft=new ModelRenderer(this,8,0);
  this.armFrontLeft.addBox(-2F,-0.5F,-0.5F,4,1,1);
  this.armFrontLeft.setRotationPoint(4,3,4);
  this.armFrontLeft.rotateAngleY=((float)Math.PI * 3 / 4F);
  this.armFrontRight=new ModelRenderer(this,8,0);
  this.armFrontRight.addBox(-2F,-0.5F,-0.5F,4,1,1);
  this.armFrontRight.setRotationPoint(12,3,4);
  this.armFrontRight.rotateAngleY=((float)Math.PI / 4F);
  this.armBackLeft=new ModelRenderer(this,8,0);
  this.armBackLeft.addBox(-2F,-0.5F,-0.5F,4,1,1);
  this.armBackLeft.setRotationPoint(12,3,12);
  this.armBackLeft.rotateAngleY=((float)Math.PI * 7 / 4F);
  this.armBackRight=new ModelRenderer(this,8,0);
  this.armBackRight.addBox(-2F,-0.5F,-0.5F,4,1,1);
  this.armBackRight.setRotationPoint(4,3,12);
  this.armBackRight.rotateAngleY=((float)Math.PI * 5 / 4F);
  this.firePlate=new ModelRenderer(this,0,10);
  this.firePlate.addBox(-4F,-0.5F,-4F,8,1,8);
  this.firePlate.setRotationPoint(8,3,8);
  this.firePlate.rotateAngleY=((float)Math.PI / 4F);
  this.bowlBottom=new ModelRenderer(this,0,19);
  this.bowlBottom.addBox(-8F,-1F,-8F,16,1,16);
  this.bowlBottom.setRotationPoint(8,9,8);
  this.bowlBack=new ModelRenderer(this,0,36);
  this.bowlBack.addBox(-8F,-3.5F,-0.5F,16,7,1);
  this.bowlBack.setRotationPoint(8F,12.5F,0.5F);
  this.bowlFront=new ModelRenderer(this,0,36);
  this.bowlFront.addBox(-8F,-3.5F,-0.5F,16,7,1);
  this.bowlFront.setRotationPoint(8,12.5F,15.5F);
  this.bowlLeft=new ModelRenderer(this,0,44);
  this.bowlLeft.addBox(-0.5F,-3.5F,-7F,1,7,14);
  this.bowlLeft.setRotationPoint(0.5F,12.5F,8);
  this.bowlRight=new ModelRenderer(this,0,44);
  this.bowlRight.addBox(-0.5F,-3.5F,-7F,1,7,14);
  this.bowlRight.setRotationPoint(15.5F,12.5F,8);
  this.ashLayer=new ModelRenderer(this,0,65);
  this.ashLayer.addBox(-7F,-0.5F,-7F,14,1,14);
  this.ashLayer.setRotationPoint(8,9,8);
  this.ashLayer.mirror=true;
}","public ModelCalcinator(float scale){
  this.scale=scale;
  this.textureHeight=TEXTURE_HEIGHT;
  this.textureWidth=TEXTURE_WIDTH;
  this.legFrontLeft=new ModelRenderer(this,0,0);
  this.legFrontLeft.addBox(-1F,-8F,-1F,2,8,2,scale);
  this.legFrontLeft.setRotationPoint(-9F,4,0);
  this.legFrontRight=new ModelRenderer(this,0,0);
  this.legFrontRight.addBox(-1F,-8F,-1F,2,8,2,scale);
  this.legFrontRight.setRotationPoint(9F,4,0);
  this.legBackLeft=new ModelRenderer(this,0,0);
  this.legBackLeft.addBox(-1F,-8F,-1F,2,8,2,scale);
  this.legBackLeft.setRotationPoint(0,4,-9F);
  this.legBackRight=new ModelRenderer(this,0,0);
  this.legBackRight.addBox(-1F,-8F,-1F,2,8,2,scale);
  this.legBackRight.setRotationPoint(0,4,9F);
  this.armFrontLeft=new ModelRenderer(this,0,10);
  this.armFrontLeft.addBox(-2F,-1F,-1F,4,2,2,scale);
  this.armFrontLeft.setRotationPoint(6,0,0);
  this.armFrontRight=new ModelRenderer(this,0,10);
  this.armFrontRight.addBox(-2F,-1F,-1F,4,2,2,scale);
  this.armFrontRight.setRotationPoint(-6,0,0);
  this.armBackLeft=new ModelRenderer(this,12,10);
  this.armBackLeft.addBox(-1F,-1F,-2.0F,2,2,4,scale);
  this.armBackLeft.setRotationPoint(0,0,6);
  this.armBackRight=new ModelRenderer(this,12,10);
  this.armBackRight.addBox(-1F,-1F,-2.0F,2,2,4,scale);
  this.armBackRight.setRotationPoint(0,0,-6);
  this.firePlate=new ModelRenderer(this,8,0);
  this.firePlate.addBox(-4F,-1F,-4F,8,2,8,scale);
  this.firePlate.setRotationPoint(8,4,8);
  this.firePlate.rotateAngleY=((float)Math.PI / 4F);
  this.firePlate.addChild(this.legFrontLeft);
  this.firePlate.addChild(this.legFrontRight);
  this.firePlate.addChild(this.legBackLeft);
  this.firePlate.addChild(this.legBackRight);
  this.firePlate.addChild(this.armFrontLeft);
  this.firePlate.addChild(this.armFrontRight);
  this.firePlate.addChild(this.armBackLeft);
  this.firePlate.addChild(this.armBackRight);
  this.bowlBottom=new ModelRenderer(this,0,19);
  this.bowlBottom.addBox(-8F,-1F,-8F,16,1,16,scale);
  this.bowlBottom.setRotationPoint(8,9,8);
  this.bowlBack=new ModelRenderer(this,0,36);
  this.bowlBack.addBox(-8F,-3.5F,-0.5F,16,7,1,scale);
  this.bowlBack.setRotationPoint(8F,12.5F,0.5F);
  this.bowlFront=new ModelRenderer(this,0,36);
  this.bowlFront.addBox(-8F,-3.5F,-0.5F,16,7,1,scale);
  this.bowlFront.setRotationPoint(8,12.5F,15.5F);
  this.bowlLeft=new ModelRenderer(this,0,44);
  this.bowlLeft.addBox(-0.5F,-3.5F,-7F,1,7,14,scale);
  this.bowlLeft.setRotationPoint(0.5F,12.5F,8);
  this.bowlRight=new ModelRenderer(this,0,44);
  this.bowlRight.addBox(-0.5F,-3.5F,-7F,1,7,14,scale);
  this.bowlRight.setRotationPoint(15.5F,12.5F,8);
  this.ashLayer=new ModelRenderer(this,0,65);
  this.ashLayer.addBox(-7F,-0.5F,-7F,14,1,14,scale);
  this.ashLayer.setRotationPoint(8,9,8);
  this.ashLayer.mirror=true;
}",0.4378233719892953
157123,"public void render(TileCalcinator calcinator,double x,double y,double z){
  GL11.glPushMatrix();
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glTranslated(x,y,z);
  ForgeHooksClient.bindTexture(Reference.SPRITE_SHEET_LOCATION + ""String_Node_Str"",0);
  legFrontLeft.render(scale);
  legFrontRight.render(scale);
  legBackLeft.render(scale);
  legBackRight.render(scale);
  armFrontLeft.render(scale);
  armFrontRight.render(scale);
  armBackLeft.render(scale);
  armBackRight.render(scale);
  firePlate.render(scale);
  bowlBottom.render(scale);
  bowlBack.render(scale);
  bowlFront.render(scale);
  bowlLeft.render(scale);
  bowlRight.render(scale);
  ashLayer.render(scale);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glPopMatrix();
}","public void render(TileCalcinator calcinator,double x,double y,double z){
  GL11.glPushMatrix();
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glTranslated(x,y,z);
  ForgeHooksClient.bindTexture(Reference.SPRITE_SHEET_LOCATION + ""String_Node_Str"",0);
  firePlate.render(scale);
  bowlBottom.render(scale);
  bowlBack.render(scale);
  bowlFront.render(scale);
  bowlLeft.render(scale);
  bowlRight.render(scale);
  ashLayer.render(scale);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glPopMatrix();
}",0.8042414355628059
157124,"@Override public void setCandidatesView(@NonNull View view){
  super.setCandidatesView(view);
  mCandidatesParent=view.getParent() instanceof View ? (View)view.getParent() : null;
  mCandidateView=view.findViewById(R.id.candidates);
  mCandidateView.setService(this);
  setCandidatesViewShown(false);
  final KeyboardTheme theme=getKeyboardThemeFactory(this).getEnabledAddOn();
  final TypedArray a=theme.getPackageContext().obtainStyledAttributes(null,R.styleable.AnyKeyboardViewTheme,0,theme.getThemeResId());
  int closeTextColor=ContextCompat.getColor(this,R.color.candidate_other);
  float fontSizePixel=getResources().getDimensionPixelSize(R.dimen.candidate_font_height);
  Drawable suggestionCloseDrawable=null;
  try {
    closeTextColor=a.getColor(R.styleable.AnyKeyboardViewTheme_suggestionOthersTextColor,closeTextColor);
    fontSizePixel=a.getDimension(R.styleable.AnyKeyboardViewTheme_suggestionTextSize,fontSizePixel);
    suggestionCloseDrawable=a.getDrawable(R.styleable.AnyKeyboardViewTheme_suggestionCloseImage);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  a.recycle();
  mCandidateCloseText=view.findViewById(R.id.close_suggestions_strip_text);
  ImageView closeIcon=view.findViewById(R.id.close_suggestions_strip_icon);
  if (suggestionCloseDrawable != null)   closeIcon.setImageDrawable(suggestionCloseDrawable);
  closeIcon.setOnClickListener(new OnClickListener(){
    private static final long DOUBLE_TAP_TIMEOUT=2 * 1000 - 50;
    @Override public void onClick(    View v){
      mKeyboardHandler.removeMessages(KeyboardUIStateHandler.MSG_REMOVE_CLOSE_SUGGESTIONS_HINT);
      mCandidateCloseText.setVisibility(View.VISIBLE);
      mCandidateCloseText.startAnimation(AnimationUtils.loadAnimation(getApplicationContext(),R.anim.close_candidates_hint_in));
      mKeyboardHandler.sendMessageDelayed(mKeyboardHandler.obtainMessage(KeyboardUIStateHandler.MSG_REMOVE_CLOSE_SUGGESTIONS_HINT),DOUBLE_TAP_TIMEOUT);
    }
  }
);
  mCandidateCloseText.setTextColor(closeTextColor);
  mCandidateCloseText.setTextSize(TypedValue.COMPLEX_UNIT_PX,fontSizePixel);
  mCandidateCloseText.setOnClickListener(v -> {
    mKeyboardHandler.removeMessages(KeyboardUIStateHandler.MSG_REMOVE_CLOSE_SUGGESTIONS_HINT);
    mCandidateCloseText.setVisibility(View.GONE);
    abortCorrectionAndResetPredictionState(true);
  }
);
}","@Override public void setCandidatesView(@NonNull View view){
  super.setCandidatesView(view);
  mCandidatesParent=view.getParent() instanceof View ? (View)view.getParent() : null;
  mCandidateView=view.findViewById(R.id.candidates);
  mCandidateView.setService(this);
  setCandidatesViewShown(false);
  final KeyboardTheme theme=getKeyboardThemeFactory(this).getEnabledAddOn();
  final TypedArray a=theme.getPackageContext().obtainStyledAttributes(null,R.styleable.AnyKeyboardViewTheme,0,theme.getThemeResId());
  int closeTextColor=ContextCompat.getColor(this,R.color.candidate_other);
  float fontSizePixel=getResources().getDimensionPixelSize(R.dimen.candidate_font_height);
  Drawable suggestionCloseDrawable=null;
  try {
    closeTextColor=a.getColor(R.styleable.AnyKeyboardViewTheme_suggestionOthersTextColor,closeTextColor);
    fontSizePixel=a.getDimension(R.styleable.AnyKeyboardViewTheme_suggestionTextSize,fontSizePixel);
    suggestionCloseDrawable=a.getDrawable(R.styleable.AnyKeyboardViewTheme_suggestionCloseImage);
  }
 catch (  Exception e) {
    Logger.w(TAG,e,""String_Node_Str"");
  }
  a.recycle();
  mCandidateCloseText=view.findViewById(R.id.close_suggestions_strip_text);
  ImageView closeIcon=view.findViewById(R.id.close_suggestions_strip_icon);
  if (suggestionCloseDrawable != null)   closeIcon.setImageDrawable(suggestionCloseDrawable);
  closeIcon.setOnClickListener(new OnClickListener(){
    private static final long DOUBLE_TAP_TIMEOUT=2 * 1000 - 50;
    @Override public void onClick(    View v){
      mKeyboardHandler.removeMessages(KeyboardUIStateHandler.MSG_REMOVE_CLOSE_SUGGESTIONS_HINT);
      mCandidateCloseText.setVisibility(View.VISIBLE);
      mCandidateCloseText.startAnimation(AnimationUtils.loadAnimation(getApplicationContext(),R.anim.close_candidates_hint_in));
      mKeyboardHandler.sendMessageDelayed(mKeyboardHandler.obtainMessage(KeyboardUIStateHandler.MSG_REMOVE_CLOSE_SUGGESTIONS_HINT),DOUBLE_TAP_TIMEOUT);
    }
  }
);
  mCandidateCloseText.setTextColor(closeTextColor);
  mCandidateCloseText.setTextSize(TypedValue.COMPLEX_UNIT_PX,fontSizePixel);
  mCandidateCloseText.setOnClickListener(v -> {
    mKeyboardHandler.removeMessages(KeyboardUIStateHandler.MSG_REMOVE_CLOSE_SUGGESTIONS_HINT);
    mCandidateCloseText.setVisibility(View.GONE);
    abortCorrectionAndResetPredictionState(true);
  }
);
}",0.9893571732652192
157125,"public static void onExternalPackChanged(Intent eventIntent,AnySoftKeyboard ime,AddOnsFactory... factories){
  boolean cleared=false;
  boolean recreateView=false;
  for (  AddOnsFactory<?> factory : factories) {
    try {
      if (factory.isEventRequiresCacheRefresh(eventIntent)) {
        cleared=true;
        if (factory.isEventRequiresViewReset(eventIntent))         recreateView=true;
        Logger.d(""String_Node_Str"",factory.getClass().getName() + ""String_Node_Str"" + recreateView);
        factory.clearAddOnList();
      }
    }
 catch (    PackageManager.NameNotFoundException e) {
      e.printStackTrace();
    }
  }
  if (cleared)   ime.resetAddOnsCaches(recreateView);
}","public static void onExternalPackChanged(Intent eventIntent,AnySoftKeyboard ime,AddOnsFactory... factories){
  boolean cleared=false;
  boolean recreateView=false;
  for (  AddOnsFactory<?> factory : factories) {
    try {
      if (factory.isEventRequiresCacheRefresh(eventIntent)) {
        cleared=true;
        if (factory.isEventRequiresViewReset(eventIntent))         recreateView=true;
        Logger.d(""String_Node_Str"",factory.getClass().getName() + ""String_Node_Str"" + recreateView);
        factory.clearAddOnList();
      }
    }
 catch (    PackageManager.NameNotFoundException e) {
      Logger.w(""String_Node_Str"",e,""String_Node_Str"",factory);
    }
  }
  if (cleared)   ime.resetAddOnsCaches(recreateView);
}",0.9490084985835694
157126,"@NonNull public List<DictionaryAddOnAndBuilder> getBuildersForKeyboard(AnyKeyboard keyboard){
  List<DictionaryAddOnAndBuilder> builders=new ArrayList<>();
  final String dictionaryValue=mSharedPreferences.getString(getDictionaryOverrideKey(keyboard),null);
  if (TextUtils.isEmpty(dictionaryValue)) {
    final DictionaryAddOnAndBuilder builderByLocale=AnyApplication.getExternalDictionaryFactory(mContext).getDictionaryBuilderByLocale(keyboard.getDefaultDictionaryLocale());
    if (builderByLocale != null)     builders.add(builderByLocale);
  }
 else {
    String[] ids=dictionaryValue.split(""String_Node_Str"");
    for (    String id : ids) {
      final DictionaryAddOnAndBuilder addOnById=AnyApplication.getExternalDictionaryFactory(mContext).getAddOnById(id);
      if (addOnById != null)       builders.add(addOnById);
    }
  }
  return builders;
}","@NonNull public List<DictionaryAddOnAndBuilder> getBuildersForKeyboard(AnyKeyboard keyboard){
  List<DictionaryAddOnAndBuilder> builders=new ArrayList<>();
  final String dictionaryValue=mSharedPreferences.getString(getDictionaryOverrideKey(keyboard),null);
  if (TextUtils.isEmpty(dictionaryValue)) {
    final DictionaryAddOnAndBuilder builderByLocale=AnyApplication.getExternalDictionaryFactory(mContext).getDictionaryBuilderByLocale(keyboard.getDefaultDictionaryLocale());
    if (builderByLocale != null)     builders.add(builderByLocale);
  }
 else {
    String[] ids=dictionaryValue.split(""String_Node_Str"",-1);
    for (    String id : ids) {
      final DictionaryAddOnAndBuilder addOnById=AnyApplication.getExternalDictionaryFactory(mContext).getAddOnById(id);
      if (addOnById != null)       builders.add(addOnById);
    }
  }
  return builders;
}",0.9982547993019196
157127,"@NonNull private int[] getKeyCodesFromPhysicalSequence(String keyCodesArray){
  String[] split=keyCodesArray.split(""String_Node_Str"");
  int[] keyCodes=new int[split.length];
  for (int i=0; i < keyCodes.length; i++) {
    try {
      keyCodes[i]=Integer.parseInt(split[i]);
    }
 catch (    final NumberFormatException nfe) {
      final String v=split[i];
      try {
        keyCodes[i]=android.view.KeyEvent.class.getField(v).getInt(null);
      }
 catch (      final Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
  return keyCodes;
}","@NonNull private int[] getKeyCodesFromPhysicalSequence(String keyCodesArray){
  String[] split=keyCodesArray.split(""String_Node_Str"",-1);
  int[] keyCodes=new int[split.length];
  for (int i=0; i < keyCodes.length; i++) {
    try {
      keyCodes[i]=Integer.parseInt(split[i]);
    }
 catch (    final NumberFormatException nfe) {
      final String v=split[i];
      try {
        keyCodes[i]=android.view.KeyEvent.class.getField(v).getInt(null);
      }
 catch (      final Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
  return keyCodes;
}",0.9973614775725592
157128,"public boolean setCondensedKeys(CondenseType condenseType,KeyboardDimens keyboardDimens){
  if (mKeyboardCondenseType.equals(condenseType))   return false;
  final float condensingFactor;
switch (condenseType) {
case CompactToLeft:
case CompactToRight:
    condensingFactor=mCondensingEdgeFactor;
  break;
default :
condensingFactor=mCondensingFullFactor;
break;
}
if (!condenseType.equals(CondenseType.None) && condensingFactor > 0.97f) return false;
final int halfHorizontalGap=(int)(keyboardDimens.getKeyHorizontalGap() / 2);
List<Key> keys=mKeyboard.getKeys();
if (mKeySizesMap == null) mKeySizesMap=new ArrayList<>(keys.size());
List<KeySize> stashedKeySizes=mKeySizesMap;
if (stashedKeySizes.size() > 0) {
if (stashedKeySizes.size() != keys.size()) throw new IllegalStateException(""String_Node_Str"");
for (int i=0; i < stashedKeySizes.size(); i++) {
Key k=keys.get(i);
KeySize originalSize=mKeySizesMap.get(i);
k.width=originalSize.width;
k.height=originalSize.height;
k.x=originalSize.X;
k.y=originalSize.Y;
}
}
mKeySizesMap.clear();
final int keyboardWidth=mKeyboard.getMinWidth();
switch (condenseType) {
case Split:
splitKeys(keyboardWidth,keyboardWidth / 2,halfHorizontalGap,condensingFactor);
break;
case CompactToLeft:
splitKeys(keyboardWidth,keyboardWidth,halfHorizontalGap,condensingFactor);
break;
case CompactToRight:
splitKeys(keyboardWidth,0,halfHorizontalGap,condensingFactor);
break;
case None:
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + condenseType);
}
mKeyboardCondenseType=condenseType;
return true;
}","public boolean setCondensedKeys(CondenseType condenseType,KeyboardDimens keyboardDimens){
  if (mKeyboardCondenseType.equals(condenseType))   return false;
  final float condensingFactor;
switch (condenseType) {
case CompactToLeft:
case CompactToRight:
    condensingFactor=mCondensingEdgeFactor;
  break;
default :
condensingFactor=mCondensingFullFactor;
break;
}
if (!condenseType.equals(CondenseType.None) && condensingFactor > 0.97f) return false;
final int halfHorizontalGap=(int)(keyboardDimens.getKeyHorizontalGap() / 2);
List<Key> keys=mKeyboard.getKeys();
if (mKeySizesMap == null) mKeySizesMap=new ArrayList<>(keys.size());
List<KeySize> stashedKeySizes=mKeySizesMap;
if (stashedKeySizes.size() > 0) {
if (stashedKeySizes.size() != keys.size()) throw new IllegalStateException(""String_Node_Str"");
for (int i=0; i < stashedKeySizes.size(); i++) {
Key k=keys.get(i);
KeySize originalSize=mKeySizesMap.get(i);
k.width=originalSize.width;
k.height=originalSize.height;
k.x=originalSize.x;
k.y=originalSize.y;
}
}
mKeySizesMap.clear();
final int keyboardWidth=mKeyboard.getMinWidth();
switch (condenseType) {
case Split:
splitKeys(keyboardWidth,keyboardWidth / 2,halfHorizontalGap,condensingFactor);
break;
case CompactToLeft:
splitKeys(keyboardWidth,keyboardWidth,halfHorizontalGap,condensingFactor);
break;
case CompactToRight:
splitKeys(keyboardWidth,0,halfHorizontalGap,condensingFactor);
break;
case None:
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + condenseType);
}
mKeyboardCondenseType=condenseType;
return true;
}",0.9864951768488746
157129,"public KeySize(int w,int h,int x,int y){
  width=w;
  height=h;
  X=x;
  Y=y;
}","KeySize(int w,int h,int x,int y){
  this.width=w;
  this.height=h;
  this.x=x;
  this.y=y;
}",0.8187134502923976
157130,"@RequiresApi(Build.VERSION_CODES.HONEYCOMB) private void loadKeyboardAppMapping(){
  Set<String> mapping=AnyApplication.prefs(mContext).getStringSet(R.string.settings_key_persistent_layout_per_package_id_mapping).get();
  for (  String aMapping : mapping) {
    String[] mapPair=aMapping.split(PACKAGE_ID_TO_KEYBOARD_ID_TOKEN);
    if (mapPair.length == 2) {
      mAlphabetKeyboardIndexByPackageId.put(mapPair[0],mapPair[1]);
    }
  }
}","@RequiresApi(Build.VERSION_CODES.HONEYCOMB) private void loadKeyboardAppMapping(){
  Set<String> mapping=AnyApplication.prefs(mContext).getStringSet(R.string.settings_key_persistent_layout_per_package_id_mapping).get();
  for (  String aMapping : mapping) {
    String[] mapPair=aMapping.split(PACKAGE_ID_TO_KEYBOARD_ID_TOKEN,-1);
    if (mapPair.length == 2) {
      mAlphabetKeyboardIndexByPackageId.put(mapPair[0],mapPair[1]);
    }
  }
}",0.9965870307167236
157131,"private static void decodeForOldDevices(@NonNull String encodedHistory,@NonNull List<HistoryKey> outputSet){
  String[] historyTokens=encodedHistory.split(HISTORY_TOKEN_SEPARATOR);
  int tokensIndex=0;
  while (tokensIndex + 1 < historyTokens.length && outputSet.size() < MAX_LIST_SIZE) {
    String name=historyTokens[tokensIndex];
    String value=historyTokens[tokensIndex + 1];
    if (!(TextUtils.isEmpty(name) || TextUtils.isEmpty(value))) {
      outputSet.add(new HistoryKey(name,value));
    }
    tokensIndex+=2;
  }
}","private static void decodeForOldDevices(@NonNull String encodedHistory,@NonNull List<HistoryKey> outputSet){
  String[] historyTokens=encodedHistory.split(HISTORY_TOKEN_SEPARATOR,-1);
  int tokensIndex=0;
  while (tokensIndex + 1 < historyTokens.length && outputSet.size() < MAX_LIST_SIZE) {
    String name=historyTokens[tokensIndex];
    String value=historyTokens[tokensIndex + 1];
    if (!(TextUtils.isEmpty(name) || TextUtils.isEmpty(value))) {
      outputSet.add(new HistoryKey(name,value));
    }
    tokensIndex+=2;
  }
}",0.9971671388101984
157132,"@VisibleForTesting static boolean isThisKeyboardEnabled(String enabledIMEList,String myPackageName){
  if (TextUtils.isEmpty(enabledIMEList))   return false;
  String[] enabledIMEs=enabledIMEList.split(""String_Node_Str"");
  for (  String enabledIMEId : enabledIMEs) {
    ComponentName enabledIME=ComponentName.unflattenFromString(enabledIMEId);
    if (enabledIME != null && enabledIME.getPackageName().equals(myPackageName)) {
      return true;
    }
  }
  return false;
}","@VisibleForTesting static boolean isThisKeyboardEnabled(String enabledIMEList,String myPackageName){
  if (TextUtils.isEmpty(enabledIMEList))   return false;
  String[] enabledIMEs=enabledIMEList.split(""String_Node_Str"",-1);
  for (  String enabledIMEId : enabledIMEs) {
    ComponentName enabledIME=ComponentName.unflattenFromString(enabledIMEId);
    if (enabledIME != null && enabledIME.getPackageName().equals(myPackageName)) {
      return true;
    }
  }
  return false;
}",0.9968520461699896
157133,"protected void onStorageChanged(){
  if (isClosed())   return;
  clearDictionary();
  mDictionaryChangedLoader=DictionaryBackgroundLoader.loadDictionaryInBackground(this);
}","protected void onStorageChanged(){
  if (isClosed())   return;
  clearDictionary();
  mDictionaryChangedLoader=DictionaryBackgroundLoader.reloadDictionaryInBackground(this);
}",0.9942528735632185
157134,"private void onFunctionKey(final int primaryCode,final Key key,final int multiTapIndex,final int[] nearByKeyCodes,final boolean fromUI){
  if (BuildConfig.DEBUG)   Logger.d(TAG,""String_Node_Str"",primaryCode);
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.DELETE:
    if (ic == null) {
      break;
    }
  if (mUseBackWord && mShiftKeyState.isPressed() && !mShiftKeyState.isLocked()) {
    handleBackWord(ic);
  }
 else {
    handleDeleteLastCharacter(false);
  }
break;
case KeyCodes.SHIFT:
if (fromUI) {
handleShift();
}
 else {
onPress(primaryCode);
onRelease(primaryCode);
}
break;
case KeyCodes.SHIFT_LOCK:
mShiftKeyState.toggleLocked();
handleShift();
break;
case KeyCodes.DELETE_WORD:
if (ic == null) {
break;
}
handleBackWord(ic);
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
abortCorrectionAndResetPredictionState(false);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.CTRL:
if (fromUI) {
handleControl();
}
 else {
onPress(primaryCode);
onRelease(primaryCode);
}
break;
case KeyCodes.CTRL_LOCK:
mControlKeyState.toggleLocked();
handleControl();
break;
case KeyCodes.ARROW_LEFT:
case KeyCodes.ARROW_RIGHT:
final int keyEventKeyCode=primaryCode == KeyCodes.ARROW_LEFT ? KeyEvent.KEYCODE_DPAD_LEFT : KeyEvent.KEYCODE_DPAD_RIGHT;
if (!handleSelectionExpending(keyEventKeyCode,ic,mGlobalSelectionStartPosition,mGlobalCursorPosition)) {
sendDownUpKeyEvents(keyEventKeyCode);
}
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) {
newPosition=0;
}
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) {
newPosition=textAfter.length();
}
try {
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
if (!TextUtils.isEmpty(textBefore)) {
newPosition=newPosition + textBefore.length();
}
ic.setSelection(newPosition,newPosition);
}
 catch (Throwable e) {
Logger.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger.isInstalled()) {
mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentAlphabetKeyboard().getDefaultDictionaryLocale());
}
 else {
Intent voiceInputNotInstalledIntent=new Intent(getApplicationContext(),VoiceInputNotInstalledActivity.class);
voiceInputNotInstalledIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
startActivity(voiceInputNotInstalledIntent);
}
break;
case KeyCodes.CANCEL:
mCancelKeyPressed=true;
hideWindow();
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
case KeyCodes.COMPACT_LAYOUT_TO_RIGHT:
case KeyCodes.COMPACT_LAYOUT_TO_LEFT:
if (getInputView() != null) {
mKeyboardInCondensedMode=CondenseType.fromKeyCode(primaryCode);
setKeyboardForView(getCurrentKeyboard());
}
break;
case KeyCodes.QUICK_TEXT:
onQuickTextRequested(key);
break;
case KeyCodes.QUICK_TEXT_POPUP:
onQuickTextKeyboardRequested(key);
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (getKeyboardSwitcher().shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else {
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
}
break;
case KeyCodes.UTILITY_KEYBOARD:
getInputView().openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD_COPY:
case KeyCodes.CLIPBOARD_PASTE:
case KeyCodes.CLIPBOARD_CUT:
case KeyCodes.CLIPBOARD_SELECT_ALL:
case KeyCodes.CLIPBOARD_PASTE_POPUP:
case KeyCodes.CLIPBOARD_SELECT:
case KeyCodes.UNDO:
case KeyCodes.REDO:
handleClipboardOperation(key,primaryCode,ic);
if (primaryCode == KeyCodes.CLIPBOARD_PASTE) mCommittedWord=""String_Node_Str"";
break;
default :
if (BuildConfig.DEBUG) {
throw new RuntimeException(""String_Node_Str"" + primaryCode);
}
 else {
Logger.w(TAG,""String_Node_Str"",primaryCode);
}
}
}","private void onFunctionKey(final int primaryCode,final Key key,final int multiTapIndex,final int[] nearByKeyCodes,final boolean fromUI){
  if (BuildConfig.DEBUG)   Logger.d(TAG,""String_Node_Str"",primaryCode);
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.DELETE:
    if (ic == null) {
      break;
    }
  if (mUseBackWord && mShiftKeyState.isPressed() && !mShiftKeyState.isLocked()) {
    handleBackWord(ic);
  }
 else {
    handleDeleteLastCharacter(false);
  }
break;
case KeyCodes.SHIFT:
if (fromUI) {
handleShift();
}
 else {
onPress(primaryCode);
onRelease(primaryCode);
}
break;
case KeyCodes.SHIFT_LOCK:
mShiftKeyState.toggleLocked();
handleShift();
break;
case KeyCodes.DELETE_WORD:
if (ic == null) {
break;
}
handleBackWord(ic);
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
abortCorrectionAndResetPredictionState(false);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.CTRL:
if (fromUI) {
handleControl();
}
 else {
onPress(primaryCode);
onRelease(primaryCode);
}
break;
case KeyCodes.CTRL_LOCK:
mControlKeyState.toggleLocked();
handleControl();
break;
case KeyCodes.ARROW_LEFT:
case KeyCodes.ARROW_RIGHT:
final int keyEventKeyCode=primaryCode == KeyCodes.ARROW_LEFT ? KeyEvent.KEYCODE_DPAD_LEFT : KeyEvent.KEYCODE_DPAD_RIGHT;
if (!handleSelectionExpending(keyEventKeyCode,ic,mGlobalSelectionStartPosition,mGlobalCursorPosition)) {
sendDownUpKeyEvents(keyEventKeyCode);
}
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) {
newPosition=0;
}
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) {
newPosition=textAfter.length();
}
try {
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
if (!TextUtils.isEmpty(textBefore)) {
newPosition=newPosition + textBefore.length();
}
ic.setSelection(newPosition,newPosition);
}
 catch (Throwable e) {
Logger.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger.isInstalled()) {
mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentAlphabetKeyboard().getDefaultDictionaryLocale());
}
 else {
Intent voiceInputNotInstalledIntent=new Intent(getApplicationContext(),VoiceInputNotInstalledActivity.class);
voiceInputNotInstalledIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
startActivity(voiceInputNotInstalledIntent);
}
break;
case KeyCodes.CANCEL:
mCancelKeyPressed=true;
if (mUtilityKeyboardShown) {
mUtilityKeyboardShown=false;
}
hideWindow();
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
case KeyCodes.COMPACT_LAYOUT_TO_RIGHT:
case KeyCodes.COMPACT_LAYOUT_TO_LEFT:
if (getInputView() != null) {
mKeyboardInCondensedMode=CondenseType.fromKeyCode(primaryCode);
setKeyboardForView(getCurrentKeyboard());
}
break;
case KeyCodes.QUICK_TEXT:
onQuickTextRequested(key);
break;
case KeyCodes.QUICK_TEXT_POPUP:
onQuickTextKeyboardRequested(key);
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (getKeyboardSwitcher().shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else {
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
}
break;
case KeyCodes.UTILITY_KEYBOARD:
mUtilityKeyboardShown=true;
getInputView().openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD_COPY:
case KeyCodes.CLIPBOARD_PASTE:
case KeyCodes.CLIPBOARD_CUT:
case KeyCodes.CLIPBOARD_SELECT_ALL:
case KeyCodes.CLIPBOARD_PASTE_POPUP:
case KeyCodes.CLIPBOARD_SELECT:
case KeyCodes.UNDO:
case KeyCodes.REDO:
handleClipboardOperation(key,primaryCode,ic);
if (primaryCode == KeyCodes.CLIPBOARD_PASTE) mCommittedWord=""String_Node_Str"";
break;
default :
if (BuildConfig.DEBUG) {
throw new RuntimeException(""String_Node_Str"" + primaryCode);
}
 else {
Logger.w(TAG,""String_Node_Str"",primaryCode);
}
}
}",0.9919561243144424
157135,"@CallSuper protected boolean handleCloseRequest(){
  if (mOptionsDialog != null && mOptionsDialog.isShowing()) {
    mOptionsDialog.dismiss();
    mOptionsDialog=null;
    return true;
  }
 else {
    return false;
  }
}","@CallSuper protected boolean handleCloseRequest(){
  if (mOptionsDialog != null && mOptionsDialog.isShowing()) {
    mOptionsDialog.dismiss();
    mOptionsDialog=null;
    return true;
  }
 else   if (mUtilityKeyboardShown) {
    super.hideWindow();
    return false;
  }
 else {
    return false;
  }
}",0.8413001912045889
157136,"@Override public boolean onKeyDown(final int keyEventKeyCode,@NonNull KeyEvent event){
  InputConnection ic=getCurrentInputConnection();
  if (handleSelectionExpending(keyEventKeyCode,ic,mGlobalSelectionStartPosition,mGlobalCursorPosition))   return true;
  final boolean shouldTranslateSpecialKeys=isInputViewShown();
  if (event.getDeviceId() > 0 && event.isPrintingKey())   onPhysicalKeyboardKeyPressed();
  mHardKeyboardAction.initializeAction(event,mMetaState);
switch (keyEventKeyCode) {
case KeyEvent.KEYCODE_VOLUME_UP:
    if (shouldTranslateSpecialKeys && mUseVolumeKeyForLeftRight) {
      sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_LEFT);
      return true;
    }
  return super.onKeyDown(keyEventKeyCode,event);
case KeyEvent.KEYCODE_VOLUME_DOWN:
if (shouldTranslateSpecialKeys && mUseVolumeKeyForLeftRight) {
  sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_RIGHT);
  return true;
}
return super.onKeyDown(keyEventKeyCode,event);
case KeyEvent.KEYCODE_BACK:
mBackKeyPressed=true;
if (event.getRepeatCount() == 0 && getInputView() != null) {
if (getInputView().handleBack()) {
if (ic != null) {
ic.clearMetaKeyStates(Integer.MAX_VALUE);
}
mMetaState=0;
return true;
}
}
if (mQuickTextKeyboardShown) {
hideWindow();
return true;
}
break;
case 0x000000cc:
switchToNextPhysicalKeyboard(ic);
return true;
case KeyEvent.KEYCODE_SHIFT_LEFT:
case KeyEvent.KEYCODE_SHIFT_RIGHT:
if (event.isAltPressed() && Workarounds.isAltSpaceLangSwitchNotPossible()) {
switchToNextPhysicalKeyboard(ic);
return true;
}
case KeyEvent.KEYCODE_ALT_LEFT:
case KeyEvent.KEYCODE_ALT_RIGHT:
case KeyEvent.KEYCODE_SYM:
mMetaState=MyMetaKeyKeyListener.handleKeyDown(mMetaState,keyEventKeyCode,event);
break;
case KeyEvent.KEYCODE_SPACE:
if ((event.isAltPressed() && !Workarounds.isAltSpaceLangSwitchNotPossible()) || event.isShiftPressed()) {
switchToNextPhysicalKeyboard(ic);
return true;
}
default :
if (!mUseKeyRepeat && event.getRepeatCount() > 0) return true;
AnyKeyboard.HardKeyboardTranslator keyTranslator=(AnyKeyboard.HardKeyboardTranslator)getCurrentAlphabetKeyboard();
if (getKeyboardSwitcher().isCurrentKeyboardPhysical() && keyTranslator != null) {
if (ic != null) ic.beginBatchEdit();
try {
if (mUseBackWord && keyEventKeyCode == KeyEvent.KEYCODE_DEL && event.isShiftPressed()) {
handleBackWord(ic);
return true;
}
 else {
keyTranslator.translatePhysicalCharacter(mHardKeyboardAction,this,mMultiTapTimeout);
if (mHardKeyboardAction.getKeyCodeWasChanged()) {
final int translatedChar=mHardKeyboardAction.getKeyCode();
onKey(translatedChar,null,-1,new int[]{translatedChar},true);
mMetaState=MyMetaKeyKeyListener.adjustMetaAfterKeypress(mMetaState);
return true;
}
}
}
  finally {
if (ic != null) ic.endBatchEdit();
}
}
if (event.isPrintingKey()) {
mMetaState=MyMetaKeyKeyListener.adjustMetaAfterKeypress(mMetaState);
}
}
return super.onKeyDown(keyEventKeyCode,event);
}","@Override public boolean onKeyDown(final int keyEventKeyCode,@NonNull KeyEvent event){
  InputConnection ic=getCurrentInputConnection();
  if (handleSelectionExpending(keyEventKeyCode,ic,mGlobalSelectionStartPosition,mGlobalCursorPosition))   return true;
  final boolean shouldTranslateSpecialKeys=isInputViewShown();
  if (event.getDeviceId() > 0 && event.isPrintingKey())   onPhysicalKeyboardKeyPressed();
  mHardKeyboardAction.initializeAction(event,mMetaState);
switch (keyEventKeyCode) {
case KeyEvent.KEYCODE_VOLUME_UP:
    if (shouldTranslateSpecialKeys && mUseVolumeKeyForLeftRight) {
      sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_LEFT);
      return true;
    }
  return super.onKeyDown(keyEventKeyCode,event);
case KeyEvent.KEYCODE_VOLUME_DOWN:
if (shouldTranslateSpecialKeys && mUseVolumeKeyForLeftRight) {
  sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_RIGHT);
  return true;
}
return super.onKeyDown(keyEventKeyCode,event);
case KeyEvent.KEYCODE_BACK:
mBackKeyPressed=true;
if (mUtilityKeyboardShown) {
mUtilityKeyboardShown=false;
}
if (event.getRepeatCount() == 0 && getInputView() != null) {
if (getInputView().handleBack()) {
if (ic != null) {
ic.clearMetaKeyStates(Integer.MAX_VALUE);
}
mMetaState=0;
return true;
}
}
if (mQuickTextKeyboardShown) {
hideWindow();
return true;
}
break;
case 0x000000cc:
switchToNextPhysicalKeyboard(ic);
return true;
case KeyEvent.KEYCODE_SHIFT_LEFT:
case KeyEvent.KEYCODE_SHIFT_RIGHT:
if (event.isAltPressed() && Workarounds.isAltSpaceLangSwitchNotPossible()) {
switchToNextPhysicalKeyboard(ic);
return true;
}
case KeyEvent.KEYCODE_ALT_LEFT:
case KeyEvent.KEYCODE_ALT_RIGHT:
case KeyEvent.KEYCODE_SYM:
mMetaState=MyMetaKeyKeyListener.handleKeyDown(mMetaState,keyEventKeyCode,event);
break;
case KeyEvent.KEYCODE_SPACE:
if ((event.isAltPressed() && !Workarounds.isAltSpaceLangSwitchNotPossible()) || event.isShiftPressed()) {
switchToNextPhysicalKeyboard(ic);
return true;
}
default :
if (!mUseKeyRepeat && event.getRepeatCount() > 0) return true;
AnyKeyboard.HardKeyboardTranslator keyTranslator=(AnyKeyboard.HardKeyboardTranslator)getCurrentAlphabetKeyboard();
if (getKeyboardSwitcher().isCurrentKeyboardPhysical() && keyTranslator != null) {
if (ic != null) ic.beginBatchEdit();
try {
if (mUseBackWord && keyEventKeyCode == KeyEvent.KEYCODE_DEL && event.isShiftPressed()) {
handleBackWord(ic);
return true;
}
 else {
keyTranslator.translatePhysicalCharacter(mHardKeyboardAction,this,mMultiTapTimeout);
if (mHardKeyboardAction.getKeyCodeWasChanged()) {
final int translatedChar=mHardKeyboardAction.getKeyCode();
onKey(translatedChar,null,-1,new int[]{translatedChar},true);
mMetaState=MyMetaKeyKeyListener.adjustMetaAfterKeypress(mMetaState);
return true;
}
}
}
  finally {
if (ic != null) ic.endBatchEdit();
}
}
if (event.isPrintingKey()) {
mMetaState=MyMetaKeyKeyListener.adjustMetaAfterKeypress(mMetaState);
}
}
return super.onKeyDown(keyEventKeyCode,event);
}",0.9896049896049895
157137,"public synchronized void setKeys(Iterable<Keyboard.Key> keys,Context context,int width,int height){
  if (mWordsCornersState == LoadingState.LOADING)   return;
  if (mWordsCornersState == LoadingState.LOADED && keys.equals(mKeys) && mWidth == width && mHeight == height)   return;
  this.mKeys=keys;
  this.mWidth=width;
  this.mHeight=height;
  mGeneratingDisposable.dispose();
  mGeneratingDisposable=generateCornersInBackground(mWords,mWordsCorners,keys);
}","public void setKeys(Iterable<Keyboard.Key> keys,Context context,int width,int height){
  if (mWordsCornersState == LoadingState.LOADING)   return;
  if (mWordsCornersState == LoadingState.LOADED && keys.equals(mKeys) && mWidth == width && mHeight == height)   return;
  this.mKeys=keys;
  this.mWidth=width;
  this.mHeight=height;
  mGeneratingDisposable.dispose();
  mGeneratingDisposable=generateCornersInBackground(mWords,mWordsCorners,keys);
}",0.9856670341786108
157138,"public PopupListKeyboard(@NonNull AddOn keyboardAddOn,Context askContext,KeyboardDimens keyboardDimens,List<String> keysNames,List<String> keyValues,CharSequence name){
  super(keyboardAddOn,askContext,askContext,R.xml.quick_text_list_popup,keyboardDimens,name);
  int rowWidth=0;
  Key baseKey=getKeys().get(0);
  Row row=baseKey.row;
  final float y=baseKey.y;
  final float keyHorizontalGap=row.defaultHorizontalGap;
  baseKey.mCodes=new int[]{0};
  baseKey.label=keysNames.get(0);
  baseKey.text=keyValues.get(0);
  float x=baseKey.width;
  Key aKey=null;
  for (int entryIndex=1; entryIndex < keysNames.size(); entryIndex++) {
    x+=(keyHorizontalGap / 2);
    aKey=new AnyKey(row,keyboardDimens);
    aKey.mCodes=new int[]{0};
    aKey.label=keysNames.get(entryIndex);
    aKey.text=keyValues.get(entryIndex);
    aKey.x=(int)x;
    aKey.width=(int)(aKey.width - keyHorizontalGap);
    aKey.y=(int)y;
    final int xOffset=(int)(aKey.width + keyHorizontalGap + (keyHorizontalGap / 2));
    x+=xOffset;
    rowWidth+=xOffset;
    getKeys().add(aKey);
  }
  baseKey.edgeFlags=EDGE_LEFT;
  if (aKey != null)   aKey.edgeFlags=EDGE_RIGHT;
 else   baseKey.edgeFlags|=EDGE_RIGHT;
  mAdditionalWidth=rowWidth;
}","public PopupListKeyboard(@NonNull AddOn keyboardAddOn,Context askContext,KeyboardDimens keyboardDimens,List<String> keysNames,List<String> keyValues,CharSequence name){
  super(keyboardAddOn,askContext,askContext,R.xml.quick_text_list_popup,keyboardDimens,name);
  int rowWidth=0;
  Key baseKey=getKeys().get(0);
  Row row=baseKey.row;
  final float y=baseKey.y;
  final float keyHorizontalGap=row.defaultHorizontalGap;
  baseKey.mCodes=new int[]{0};
  baseKey.label=keysNames.get(0);
  baseKey.text=keyValues.get(0);
  float x=baseKey.width;
  AnyKey aKey=null;
  for (int entryIndex=1; entryIndex < keysNames.size(); entryIndex++) {
    x+=(keyHorizontalGap / 2);
    aKey=new AnyKey(row,keyboardDimens);
    aKey.mCodes=new int[]{0};
    aKey.mShiftedCodes=new int[]{0};
    aKey.label=keysNames.get(entryIndex);
    aKey.text=keyValues.get(entryIndex);
    aKey.x=(int)x;
    aKey.width=(int)(aKey.width - keyHorizontalGap);
    aKey.y=(int)y;
    final int xOffset=(int)(aKey.width + keyHorizontalGap + (keyHorizontalGap / 2));
    x+=xOffset;
    rowWidth+=xOffset;
    getKeys().add(aKey);
  }
  baseKey.edgeFlags=EDGE_LEFT;
  if (aKey != null)   aKey.edgeFlags=EDGE_RIGHT;
 else   baseKey.edgeFlags|=EDGE_RIGHT;
  mAdditionalWidth=rowWidth;
}",0.983739837398374
157139,"@Override public void onSharedPreferenceChanged(SharedPreferences sp,String key){
  Logger.d(TAG,""String_Node_Str"");
  mFirstAppVersionInstalled=sp.getInt(mContext.getString(R.string.settings_key_first_app_version_installed),0);
  mFirstTimeAppInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_app_installed),0);
  mFirstTimeCurrentVersionInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_current_version_installed),0);
  mDomainText=sp.getString(""String_Node_Str"",""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"" + mDomainText);
  mShowKeyPreview=sp.getBoolean(mContext.getString(R.string.settings_key_key_press_shows_preview_popup),mContext.getResources().getBoolean(R.bool.settings_default_key_press_shows_preview_popup));
  Logger.d(TAG,""String_Node_Str"" + mShowKeyPreview);
  mKeyPreviewAboveKey=sp.getString(mContext.getString(R.string.settings_key_key_press_preview_popup_position),mContext.getString(R.string.settings_default_key_press_preview_popup_position)).equals(""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"" + mKeyPreviewAboveKey);
  mShowKeyboardNameText=sp.getBoolean(mContext.getString(R.string.settings_key_show_keyboard_name_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_keyboard_name_text_value));
  Logger.d(TAG,""String_Node_Str"" + mShowKeyboardNameText);
  mShowHintTextOnKeys=sp.getBoolean(mContext.getString(R.string.settings_key_show_hint_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_hint_text_value));
  Logger.d(TAG,""String_Node_Str"" + mShowHintTextOnKeys);
  mUseCustomHintAlign=sp.getBoolean(mContext.getString(R.string.settings_key_use_custom_hint_align_key),mContext.getResources().getBoolean(R.bool.settings_default_use_custom_hint_align_value));
  Logger.d(TAG,""String_Node_Str"" + mUseCustomHintAlign);
  mCustomHintAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_align_key),mContext.getString(R.string.settings_default_custom_hint_align_value));
  Logger.d(TAG,""String_Node_Str"" + mCustomHintAlign);
  mCustomHintVAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_valign_key),mContext.getString(R.string.settings_default_custom_hint_valign_value));
  Logger.d(TAG,""String_Node_Str"" + mCustomHintVAlign);
  mSwitchKeyboardOnSpace=sp.getBoolean(mContext.getString(R.string.settings_key_switch_keyboard_on_space),mContext.getResources().getBoolean(R.bool.settings_default_switch_to_alphabet_on_space));
  Logger.d(TAG,""String_Node_Str"" + mSwitchKeyboardOnSpace);
  mUseFullScreenInputInLandscape=sp.getBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
  Logger.d(TAG,""String_Node_Str"" + mUseFullScreenInputInLandscape);
  mUseFullScreenInputInPortrait=sp.getBoolean(mContext.getString(R.string.settings_key_portrait_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_portrait_fullscreen));
  Logger.d(TAG,""String_Node_Str"" + mUseFullScreenInputInPortrait);
  mUseKeyRepeat=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mUseKeyRepeat);
  mKeysHeightFactorInPortrait=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_portrait_keyboard_height_factor));
  Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  if (mKeysHeightFactorInPortrait > 2.0f) {
    mKeysHeightFactorInPortrait=2.0f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
  mKeysHeightFactorInLandscape=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_landscape_keyboard_height_factor));
  Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  if (mKeysHeightFactorInLandscape > 2.0f) {
    mKeysHeightFactorInLandscape=2.0f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
  mInsertSpaceAfterCandidatePick=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mInsertSpaceAfterCandidatePick);
  mSwipeUpKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_up_action,R.string.swipe_action_value_shift);
  Logger.d(TAG,""String_Node_Str"" + mSwipeUpKeyCode);
  mSwipeUpFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_up_from_spacebar_action,R.string.swipe_action_value_utility_keyboard);
  Logger.d(TAG,""String_Node_Str"" + mSwipeUpFromSpaceBarKeyCode);
  mSwipeDownKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_down_action,R.string.swipe_action_value_hide);
  Logger.d(TAG,""String_Node_Str"" + mSwipeDownKeyCode);
  mSwipeLeftKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_action,R.string.swipe_action_value_next_symbols);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftKeyCode);
  mSwipeRightKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_action,R.string.swipe_action_value_next_alphabet);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightKeyCode);
  mPinchKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_pinch_gesture_action,R.string.swipe_action_value_merge_layout);
  Logger.d(TAG,""String_Node_Str"" + mPinchKeyCode);
  mSeparateKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_separate_gesture_action,R.string.swipe_action_value_split_layout);
  Logger.d(TAG,""String_Node_Str"" + mSeparateKeyCode);
  mSwipeLeftFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_space_bar_action,R.string.swipe_action_value_next_symbols);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftFromSpaceBarKeyCode);
  mSwipeRightFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_space_bar_action,R.string.swipe_action_value_next_alphabet);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightFromSpaceBarKeyCode);
  mSwipeLeftWithTwoFingersKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_two_fingers_action,R.string.swipe_action_value_compact_layout_to_left);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftWithTwoFingersKeyCode);
  mSwipeRightWithTwoFingersKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_two_fingers_action,R.string.swipe_action_value_compact_layout_to_right);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightWithTwoFingersKeyCode);
  mActionKeyInvisibleWhenRequested=sp.getBoolean(""String_Node_Str"",false);
  Logger.d(TAG,""String_Node_Str"" + mActionKeyInvisibleWhenRequested);
  mIsDoubleSpaceChangesToPeroid=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mIsDoubleSpaceChangesToPeroid);
  mShouldPopupForLanguageSwitch=sp.getBoolean(mContext.getString(R.string.settings_key_lang_key_shows_popup),mContext.getResources().getBoolean(R.bool.settings_default_lang_key_shows_popup));
  Logger.d(TAG,""String_Node_Str"" + mShouldPopupForLanguageSwitch);
  mHideSoftKeyboardWhenPhysicalKeyPressed=sp.getBoolean(mContext.getString(R.string.settings_key_hide_soft_when_physical),mContext.getResources().getBoolean(R.bool.settings_default_hide_soft_when_physical));
  Logger.d(TAG,""String_Node_Str"" + mHideSoftKeyboardWhenPhysicalKeyPressed);
  mUse16KeysSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_use_16_keys_symbols_keyboards),mContext.getResources().getBoolean(R.bool.settings_default_use_16_keys_symbols_keyboards));
  Logger.d(TAG,""String_Node_Str"" + mUse16KeysSymbolsKeyboard);
  mUseBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_backword));
  Logger.d(TAG,""String_Node_Str"" + mUseBackword);
  mCycleOverAllSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_cycle_all_symbols),mContext.getResources().getBoolean(R.bool.settings_default_cycle_all_symbols));
  Logger.d(TAG,""String_Node_Str"" + mCycleOverAllSymbolsKeyboard);
  mUseCameraKeyForBackspaceBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_camera_key_for_backspace_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_camera_key_for_backspace_backword));
  Logger.d(TAG,""String_Node_Str"" + mUseCameraKeyForBackspaceBackword);
  mUseVolumeKeyForLeftRight=sp.getBoolean(mContext.getString(R.string.settings_key_use_volume_key_for_left_right),mContext.getResources().getBoolean(R.bool.settings_default_use_volume_key_for_left_right));
  Logger.d(TAG,""String_Node_Str"" + mUseVolumeKeyForLeftRight);
  mUseContactsDictionary=sp.getBoolean(mContext.getString(R.string.settings_key_use_contacts_dictionary),mContext.getResources().getBoolean(R.bool.settings_default_contacts_dictionary));
  Logger.d(TAG,""String_Node_Str"" + mUseContactsDictionary);
  mAutoDictionaryInsertionThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_auto_dictionary_threshold),mContext.getString(R.string.settings_default_auto_dictionary_add_threshold));
  Logger.d(TAG,""String_Node_Str"" + mAutoDictionaryInsertionThreshold);
  mIsStickyExtensionKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_is_sticky_extesion_keyboard),mContext.getResources().getBoolean(R.bool.settings_default_is_sticky_extesion_keyboard));
  Logger.d(TAG,""String_Node_Str"" + mIsStickyExtensionKeyboard);
  mGestureTyping=BuildConfig.DEBUG && sp.getBoolean(mContext.getString(R.string.settings_key_gesture_typing),mContext.getResources().getBoolean(R.bool.settings_default_gesture_typing));
  Logger.d(TAG,""String_Node_Str"" + mGestureTyping);
  mSwipeDistanceThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_distance_threshold),mContext.getString(R.string.settings_default_swipe_distance_threshold));
  Logger.d(TAG,""String_Node_Str"" + mSwipeDistanceThreshold);
  mSwipeVelocityThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_velocity_threshold),mContext.getString(R.string.settings_default_swipe_velocity_threshold));
  Logger.d(TAG,""String_Node_Str"" + mSwipeVelocityThreshold);
  mLongPressTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_long_press_timeout),mContext.getString(R.string.settings_default_long_press_timeout));
  Logger.d(TAG,""String_Node_Str"" + mLongPressTimeout);
  mMultiTapTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_multitap_timeout),mContext.getString(R.string.settings_default_multitap_timeout));
  Logger.d(TAG,""String_Node_Str"" + mMultiTapTimeout);
  mWorkaroundAlwaysUseDrawText=sp.getBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),getAlwaysUseDrawTextDefault());
  Logger.d(TAG,""String_Node_Str"" + mWorkaroundAlwaysUseDrawText);
  mUseChewbacca=sp.getBoolean(mContext.getString(R.string.settings_key_show_chewbacca),mContext.getResources().getBoolean(R.bool.settings_default_show_chewbacca));
  Logger.d(TAG,""String_Node_Str"" + mUseChewbacca);
  mSwapPunctuationAndSpace=sp.getBoolean(mContext.getString(R.string.settings_key_bool_should_swap_punctuation_and_space),mContext.getResources().getBoolean(R.bool.settings_default_bool_should_swap_punctuation_and_space));
  Logger.d(TAG,""String_Node_Str"" + mSwapPunctuationAndSpace);
  String animationsLevel=sp.getString(mContext.getString(R.string.settings_key_tweak_animations_level),mContext.getString(R.string.settings_default_tweak_animations_level));
  if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.None;
 else   if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.Some;
 else   mAnimationsLevel=AnimationsLevel.Full;
  Logger.d(TAG,""String_Node_Str"" + mAnimationsLevel);
  mAlwaysUseFallBackUserDictionary=sp.getBoolean(mContext.getString(R.string.settings_key_always_use_fallback_user_dictionary),mContext.getResources().getBoolean(R.bool.settings_default_always_use_fallback_user_dictionary));
  Logger.d(TAG,""String_Node_Str"" + mAlwaysUseFallBackUserDictionary);
  mAutomaticallySwitchToAppLayout=sp.getBoolean(mContext.getString(R.string.settings_key_persistent_layout_per_package_id),mContext.getResources().getBoolean(R.bool.settings_default_persistent_layout_per_package_id));
  Logger.d(TAG,""String_Node_Str"" + mAutomaticallySwitchToAppLayout);
  mAlwaysHideLanguageKey=sp.getBoolean(mContext.getString(R.string.settings_key_always_hide_language_key),mContext.getResources().getBoolean(R.bool.settings_default_always_hide_language_key));
  Logger.d(TAG,""String_Node_Str"" + mAutomaticallySwitchToAppLayout);
  for (int rowModeIndex=0; rowModeIndex < mEnableStateForRowModes.length; rowModeIndex++) {
    mEnableStateForRowModes[rowModeIndex]=sp.getBoolean(AskPrefs.ROW_MODE_ENABLED_PREFIX + (rowModeIndex + 2),true);
  }
  final LinkedList<OnSharedPreferenceChangeListener> disconnectedList=new LinkedList<>(mPreferencesChangedListeners);
  for (  OnSharedPreferenceChangeListener listener : disconnectedList) {
    if (mPreferencesChangedListeners.contains(listener)) {
      listener.onSharedPreferenceChanged(sp,key);
    }
  }
}","@Override public void onSharedPreferenceChanged(SharedPreferences sp,String key){
  Logger.d(TAG,""String_Node_Str"");
  mFirstAppVersionInstalled=sp.getInt(mContext.getString(R.string.settings_key_first_app_version_installed),0);
  mFirstTimeAppInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_app_installed),0);
  mFirstTimeCurrentVersionInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_current_version_installed),0);
  mDomainText=sp.getString(""String_Node_Str"",""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"" + mDomainText);
  mShowKeyPreview=sp.getBoolean(mContext.getString(R.string.settings_key_key_press_shows_preview_popup),mContext.getResources().getBoolean(R.bool.settings_default_key_press_shows_preview_popup));
  Logger.d(TAG,""String_Node_Str"" + mShowKeyPreview);
  mKeyPreviewAboveKey=sp.getString(mContext.getString(R.string.settings_key_key_press_preview_popup_position),mContext.getString(R.string.settings_default_key_press_preview_popup_position)).equals(""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"" + mKeyPreviewAboveKey);
  mShowKeyboardNameText=sp.getBoolean(mContext.getString(R.string.settings_key_show_keyboard_name_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_keyboard_name_text_value));
  Logger.d(TAG,""String_Node_Str"" + mShowKeyboardNameText);
  mShowHintTextOnKeys=sp.getBoolean(mContext.getString(R.string.settings_key_show_hint_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_hint_text_value));
  Logger.d(TAG,""String_Node_Str"" + mShowHintTextOnKeys);
  mUseCustomHintAlign=sp.getBoolean(mContext.getString(R.string.settings_key_use_custom_hint_align_key),mContext.getResources().getBoolean(R.bool.settings_default_use_custom_hint_align_value));
  Logger.d(TAG,""String_Node_Str"" + mUseCustomHintAlign);
  mCustomHintAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_align_key),mContext.getString(R.string.settings_default_custom_hint_align_value));
  Logger.d(TAG,""String_Node_Str"" + mCustomHintAlign);
  mCustomHintVAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_valign_key),mContext.getString(R.string.settings_default_custom_hint_valign_value));
  Logger.d(TAG,""String_Node_Str"" + mCustomHintVAlign);
  mSwitchKeyboardOnSpace=sp.getBoolean(mContext.getString(R.string.settings_key_switch_keyboard_on_space),mContext.getResources().getBoolean(R.bool.settings_default_switch_to_alphabet_on_space));
  Logger.d(TAG,""String_Node_Str"" + mSwitchKeyboardOnSpace);
  mUseFullScreenInputInLandscape=sp.getBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
  Logger.d(TAG,""String_Node_Str"" + mUseFullScreenInputInLandscape);
  mUseFullScreenInputInPortrait=sp.getBoolean(mContext.getString(R.string.settings_key_portrait_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_portrait_fullscreen));
  Logger.d(TAG,""String_Node_Str"" + mUseFullScreenInputInPortrait);
  mUseKeyRepeat=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mUseKeyRepeat);
  mKeysHeightFactorInPortrait=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_portrait_keyboard_height_factor));
  Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  if (mKeysHeightFactorInPortrait > 2.0f) {
    mKeysHeightFactorInPortrait=2.0f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
  mKeysHeightFactorInLandscape=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_landscape_keyboard_height_factor));
  Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  if (mKeysHeightFactorInLandscape > 2.0f) {
    mKeysHeightFactorInLandscape=2.0f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
  mInsertSpaceAfterCandidatePick=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mInsertSpaceAfterCandidatePick);
  mSwipeUpKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_up_action,R.string.swipe_action_value_shift);
  Logger.d(TAG,""String_Node_Str"" + mSwipeUpKeyCode);
  mSwipeUpFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_up_from_spacebar_action,R.string.swipe_action_value_utility_keyboard);
  Logger.d(TAG,""String_Node_Str"" + mSwipeUpFromSpaceBarKeyCode);
  mSwipeDownKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_down_action,R.string.swipe_action_value_hide);
  Logger.d(TAG,""String_Node_Str"" + mSwipeDownKeyCode);
  mSwipeLeftKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_action,R.string.swipe_action_value_next_symbols);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftKeyCode);
  mSwipeRightKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_action,R.string.swipe_action_value_next_alphabet);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightKeyCode);
  mPinchKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_pinch_gesture_action,R.string.swipe_action_value_merge_layout);
  Logger.d(TAG,""String_Node_Str"" + mPinchKeyCode);
  mSeparateKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_separate_gesture_action,R.string.swipe_action_value_split_layout);
  Logger.d(TAG,""String_Node_Str"" + mSeparateKeyCode);
  mSwipeLeftFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_space_bar_action,R.string.swipe_action_value_next_symbols);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftFromSpaceBarKeyCode);
  mSwipeRightFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_space_bar_action,R.string.swipe_action_value_next_alphabet);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightFromSpaceBarKeyCode);
  mSwipeLeftWithTwoFingersKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_two_fingers_action,R.string.swipe_action_value_compact_layout_to_left);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftWithTwoFingersKeyCode);
  mSwipeRightWithTwoFingersKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_two_fingers_action,R.string.swipe_action_value_compact_layout_to_right);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightWithTwoFingersKeyCode);
  mActionKeyInvisibleWhenRequested=sp.getBoolean(""String_Node_Str"",false);
  Logger.d(TAG,""String_Node_Str"" + mActionKeyInvisibleWhenRequested);
  mIsDoubleSpaceChangesToPeroid=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mIsDoubleSpaceChangesToPeroid);
  mShouldPopupForLanguageSwitch=sp.getBoolean(mContext.getString(R.string.settings_key_lang_key_shows_popup),mContext.getResources().getBoolean(R.bool.settings_default_lang_key_shows_popup));
  Logger.d(TAG,""String_Node_Str"" + mShouldPopupForLanguageSwitch);
  mHideSoftKeyboardWhenPhysicalKeyPressed=sp.getBoolean(mContext.getString(R.string.settings_key_hide_soft_when_physical),mContext.getResources().getBoolean(R.bool.settings_default_hide_soft_when_physical));
  Logger.d(TAG,""String_Node_Str"" + mHideSoftKeyboardWhenPhysicalKeyPressed);
  mUse16KeysSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_use_16_keys_symbols_keyboards),mContext.getResources().getBoolean(R.bool.settings_default_use_16_keys_symbols_keyboards));
  Logger.d(TAG,""String_Node_Str"" + mUse16KeysSymbolsKeyboard);
  mUseBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_backword));
  Logger.d(TAG,""String_Node_Str"" + mUseBackword);
  mCycleOverAllSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_cycle_all_symbols),mContext.getResources().getBoolean(R.bool.settings_default_cycle_all_symbols));
  Logger.d(TAG,""String_Node_Str"" + mCycleOverAllSymbolsKeyboard);
  mUseCameraKeyForBackspaceBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_camera_key_for_backspace_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_camera_key_for_backspace_backword));
  Logger.d(TAG,""String_Node_Str"" + mUseCameraKeyForBackspaceBackword);
  mUseVolumeKeyForLeftRight=sp.getBoolean(mContext.getString(R.string.settings_key_use_volume_key_for_left_right),mContext.getResources().getBoolean(R.bool.settings_default_use_volume_key_for_left_right));
  Logger.d(TAG,""String_Node_Str"" + mUseVolumeKeyForLeftRight);
  mUseContactsDictionary=sp.getBoolean(mContext.getString(R.string.settings_key_use_contacts_dictionary),mContext.getResources().getBoolean(R.bool.settings_default_contacts_dictionary));
  Logger.d(TAG,""String_Node_Str"" + mUseContactsDictionary);
  mAutoDictionaryInsertionThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_auto_dictionary_threshold),mContext.getString(R.string.settings_default_auto_dictionary_add_threshold));
  Logger.d(TAG,""String_Node_Str"" + mAutoDictionaryInsertionThreshold);
  mIsStickyExtensionKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_is_sticky_extesion_keyboard),mContext.getResources().getBoolean(R.bool.settings_default_is_sticky_extesion_keyboard));
  Logger.d(TAG,""String_Node_Str"" + mIsStickyExtensionKeyboard);
  mGestureTyping=BuildConfig.DEBUG && sp.getBoolean(mContext.getString(R.string.settings_key_gesture_typing),mContext.getResources().getBoolean(R.bool.settings_default_gesture_typing));
  Logger.d(TAG,""String_Node_Str"" + mGestureTyping);
  mSwipeDistanceThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_distance_threshold),mContext.getString(R.string.settings_default_swipe_distance_threshold));
  Logger.d(TAG,""String_Node_Str"" + mSwipeDistanceThreshold);
  mSwipeVelocityThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_velocity_threshold),mContext.getString(R.string.settings_default_swipe_velocity_threshold));
  Logger.d(TAG,""String_Node_Str"" + mSwipeVelocityThreshold);
  mLongPressTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_long_press_timeout),mContext.getString(R.string.settings_default_long_press_timeout));
  Logger.d(TAG,""String_Node_Str"" + mLongPressTimeout);
  mMultiTapTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_multitap_timeout),mContext.getString(R.string.settings_default_multitap_timeout));
  Logger.d(TAG,""String_Node_Str"" + mMultiTapTimeout);
  mWorkaroundAlwaysUseDrawText=sp.getBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),getAlwaysUseDrawTextDefault());
  Logger.d(TAG,""String_Node_Str"" + mWorkaroundAlwaysUseDrawText);
  mUseChewbacca=sp.getBoolean(mContext.getString(R.string.settings_key_show_chewbacca),mContext.getResources().getBoolean(R.bool.settings_default_show_chewbacca));
  Logger.d(TAG,""String_Node_Str"" + mUseChewbacca);
  mSwapPunctuationAndSpace=sp.getBoolean(mContext.getString(R.string.settings_key_bool_should_swap_punctuation_and_space),mContext.getResources().getBoolean(R.bool.settings_default_bool_should_swap_punctuation_and_space));
  Logger.d(TAG,""String_Node_Str"" + mSwapPunctuationAndSpace);
  String animationsLevel=sp.getString(mContext.getString(R.string.settings_key_tweak_animations_level),mContext.getString(R.string.settings_default_tweak_animations_level));
  if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.None;
 else   if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.Some;
 else   mAnimationsLevel=AnimationsLevel.Full;
  Logger.d(TAG,""String_Node_Str"" + mAnimationsLevel);
  mAlwaysUseFallBackUserDictionary=sp.getBoolean(mContext.getString(R.string.settings_key_always_use_fallback_user_dictionary),mContext.getResources().getBoolean(R.bool.settings_default_always_use_fallback_user_dictionary));
  Logger.d(TAG,""String_Node_Str"" + mAlwaysUseFallBackUserDictionary);
  mAutomaticallySwitchToAppLayout=sp.getBoolean(mContext.getString(R.string.settings_key_persistent_layout_per_package_id),mContext.getResources().getBoolean(R.bool.settings_default_persistent_layout_per_package_id));
  Logger.d(TAG,""String_Node_Str"" + mAutomaticallySwitchToAppLayout);
  mAlwaysHideLanguageKey=sp.getBoolean(mContext.getString(R.string.settings_key_always_hide_language_key),mContext.getResources().getBoolean(R.bool.settings_default_always_hide_language_key));
  Logger.d(TAG,""String_Node_Str"" + mAutomaticallySwitchToAppLayout);
  for (int rowModeIndex=0; rowModeIndex < mEnableStateForRowModes.length; rowModeIndex++) {
    mEnableStateForRowModes[rowModeIndex]=sp.getBoolean(AskPrefs.ROW_MODE_ENABLED_PREFIX + (rowModeIndex + 2),true);
  }
  final List<OnSharedPreferenceChangeListener> disconnectedList=new ArrayList<>(mPreferencesChangedListeners);
  for (  OnSharedPreferenceChangeListener listener : disconnectedList) {
    if (mPreferencesChangedListeners.contains(listener)) {
      listener.onSharedPreferenceChanged(sp,key);
    }
  }
}",0.9993608782285048
157140,"public void addNextState(int keyCode,KeyEventState next){
  if (this.mTransitions == null)   this.mTransitions=new LinkedList<>();
  this.mTransitions.add(new KeyEventTransition(keyCode,next));
}","public void addNextState(int keyCode,KeyEventState next){
  if (this.mTransitions == null)   this.mTransitions=new ArrayList<>();
  this.mTransitions.add(new KeyEventTransition(keyCode,next));
}",0.9717223650385604
157141,"private void condenseRightSide(final float condensingFactor,final int keyboardWidth,int currentRightX,Stack<Key> rightKeys,Key spaceKey){
  currentRightX=(int)(keyboardWidth - ((keyboardWidth - currentRightX) * condensingFactor));
  while (!rightKeys.isEmpty()) {
    Key rightKey=rightKeys.pop();
    currentRightX-=rightKey.width;
    rightKey.x=currentRightX;
    currentRightX=(int)(currentRightX - (rightKey.gap * condensingFactor));
  }
  if (spaceKey != null) {
    spaceKey.width=currentRightX - spaceKey.x;
  }
}","private void condenseRightSide(final float condensingFactor,final int keyboardWidth,int currentRightX,Deque<Key> rightKeys,Key spaceKey){
  currentRightX=(int)(keyboardWidth - ((keyboardWidth - currentRightX) * condensingFactor));
  while (!rightKeys.isEmpty()) {
    Key rightKey=rightKeys.pop();
    currentRightX-=rightKey.width;
    rightKey.x=currentRightX;
    currentRightX=(int)(currentRightX - (rightKey.gap * condensingFactor));
  }
  if (spaceKey != null) {
    spaceKey.width=currentRightX - spaceKey.x;
  }
}",0.9904030710172744
157142,"private void splitKeys(final int keyboardWidth,final int watershedLineX,final float condensingFactor){
  int currentLeftX=0;
  int currentRightX=keyboardWidth;
  int currentY=0;
  Stack<Key> rightKeys=new Stack<>();
  boolean flipSideLeft=true;
  Key spaceKey=null;
  for (  Key k : mKeyboard.getKeys()) {
    mKeySizesMap.add(new KeySize(k.width,k.height,k.x,k.y));
    if (currentY != k.y) {
      flipSideLeft=!flipSideLeft;
      condenseRightSide(condensingFactor,keyboardWidth,currentRightX,rightKeys,spaceKey);
      currentLeftX=0;
      currentRightX=keyboardWidth;
      currentY=k.y;
      rightKeys.clear();
    }
    int targetWidth=(int)(k.width * condensingFactor);
    int keyMidPoint=(k.gap + k.x + (k.width / 2));
    if (k.getPrimaryCode() == KeyCodes.SPACE && (k.gap + k.x) < watershedLineX && (k.gap + k.x + k.width) > watershedLineX) {
      spaceKey=k;
      currentLeftX=condenseLeftSide(condensingFactor,currentLeftX,k,targetWidth);
    }
 else     if (keyMidPoint < (watershedLineX - 5)) {
      currentLeftX=condenseLeftSide(condensingFactor,currentLeftX,k,targetWidth);
    }
 else     if (keyMidPoint > (watershedLineX + 5)) {
      currentRightX=stackRightSideKeyForLater(rightKeys,k,targetWidth);
    }
 else {
      if (flipSideLeft) {
        currentLeftX=condenseLeftSide(condensingFactor,currentLeftX,k,targetWidth);
      }
 else {
        currentRightX=stackRightSideKeyForLater(rightKeys,k,targetWidth);
      }
    }
  }
  condenseRightSide(condensingFactor,keyboardWidth,currentRightX,rightKeys,spaceKey);
}","private void splitKeys(final int keyboardWidth,final int watershedLineX,final float condensingFactor){
  int currentLeftX=0;
  int currentRightX=keyboardWidth;
  int currentY=0;
  Deque<Key> rightKeys=new ArrayDeque<>();
  boolean flipSideLeft=true;
  Key spaceKey=null;
  for (  Key k : mKeyboard.getKeys()) {
    mKeySizesMap.add(new KeySize(k.width,k.height,k.x,k.y));
    if (currentY != k.y) {
      flipSideLeft=!flipSideLeft;
      condenseRightSide(condensingFactor,keyboardWidth,currentRightX,rightKeys,spaceKey);
      currentLeftX=0;
      currentRightX=keyboardWidth;
      currentY=k.y;
      rightKeys.clear();
    }
    int targetWidth=(int)(k.width * condensingFactor);
    int keyMidPoint=(k.gap + k.x + (k.width / 2));
    if (k.getPrimaryCode() == KeyCodes.SPACE && (k.gap + k.x) < watershedLineX && (k.gap + k.x + k.width) > watershedLineX) {
      spaceKey=k;
      currentLeftX=condenseLeftSide(condensingFactor,currentLeftX,k,targetWidth);
    }
 else     if (keyMidPoint < (watershedLineX - 5)) {
      currentLeftX=condenseLeftSide(condensingFactor,currentLeftX,k,targetWidth);
    }
 else     if (keyMidPoint > (watershedLineX + 5)) {
      currentRightX=stackRightSideKeyForLater(rightKeys,k,targetWidth);
    }
 else {
      if (flipSideLeft) {
        currentLeftX=condenseLeftSide(condensingFactor,currentLeftX,k,targetWidth);
      }
 else {
        currentRightX=stackRightSideKeyForLater(rightKeys,k,targetWidth);
      }
    }
  }
  condenseRightSide(condensingFactor,keyboardWidth,currentRightX,rightKeys,spaceKey);
}",0.9919328815747016
157143,"private int stackRightSideKeyForLater(Stack<Key> rightKeys,Key k,int targetWidth){
  int currentRightX;
  rightKeys.push(k);
  currentRightX=k.x + k.width;
  k.width=targetWidth;
  return currentRightX;
}","private int stackRightSideKeyForLater(Deque<Key> rightKeys,Key k,int targetWidth){
  int currentRightX;
  rightKeys.push(k);
  currentRightX=k.x + k.width;
  k.width=targetWidth;
  return currentRightX;
}",0.9754901960784312
157144,"public int lastIndexOf(PointerTracker tracker){
  LinkedList<PointerTracker> queue=mQueue;
  for (int index=queue.size() - 1; index >= 0; index--) {
    PointerTracker t=queue.get(index);
    if (t == tracker)     return index;
  }
  return -1;
}","public int lastIndexOf(PointerTracker tracker){
  ArrayList<PointerTracker> queue=mQueue;
  for (int index=queue.size() - 1; index >= 0; index--) {
    PointerTracker t=queue.get(index);
    if (t == tracker)     return index;
  }
  return -1;
}",0.9775967413441956
157145,"public static int editDistance(@NonNull CharSequence s,@NonNull CharSequence t){
  final int sl=s.length();
  final int tl=t.length();
  int[][] dp=new int[sl + 1][tl + 1];
  for (int i=0; i <= sl; i++) {
    dp[i][0]=i;
  }
  for (int j=0; j <= tl; j++) {
    dp[0][j]=j;
  }
  for (int i=0; i < sl; ++i) {
    for (int j=0; j < tl; ++j) {
      final char sc=Character.toLowerCase(s.charAt(i));
      final char tc=Character.toLowerCase(t.charAt(j));
      final int cost=sc == tc ? 0 : 1;
      dp[i + 1][j + 1]=Math.min(dp[i][j + 1] + 1,Math.min(dp[i + 1][j] + 1,dp[i][j] + cost));
      if (i > 0 && j > 0 && sc == Character.toLowerCase(t.charAt(j - 1)) && tc == Character.toLowerCase(s.charAt(i - 1))) {
        dp[i + 1][j + 1]=Math.min(dp[i + 1][j + 1],dp[i - 1][j - 1] + cost);
      }
    }
  }
  if (BuildConfig.DEBUG) {
    Logger.d(TAG,""String_Node_Str"" + s + ""String_Node_Str""+ t);
    for (int i=0; i < dp.length; ++i) {
      StringBuffer sb=new StringBuffer();
      for (int j=0; j < dp[i].length; ++j) {
        sb.append(dp[i][j]).append(',');
      }
      Logger.d(TAG,i + ""String_Node_Str"" + sb.toString());
    }
  }
  return dp[sl][tl];
}","public static int editDistance(@NonNull CharSequence s,@NonNull CharSequence t){
  final int sl=s.length();
  final int tl=t.length();
  int[][] dp=new int[sl + 1][tl + 1];
  for (int i=0; i <= sl; i++) {
    dp[i][0]=i;
  }
  for (int j=0; j <= tl; j++) {
    dp[0][j]=j;
  }
  for (int i=0; i < sl; ++i) {
    for (int j=0; j < tl; ++j) {
      final char sc=Character.toLowerCase(s.charAt(i));
      final char tc=Character.toLowerCase(t.charAt(j));
      final int cost=sc == tc ? 0 : 1;
      dp[i + 1][j + 1]=Math.min(dp[i][j + 1] + 1,Math.min(dp[i + 1][j] + 1,dp[i][j] + cost));
      if (i > 0 && j > 0 && sc == Character.toLowerCase(t.charAt(j - 1)) && tc == Character.toLowerCase(s.charAt(i - 1))) {
        dp[i + 1][j + 1]=Math.min(dp[i + 1][j + 1],dp[i - 1][j - 1] + cost);
      }
    }
  }
  if (BuildConfig.DEBUG) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"").append(s).append(""String_Node_Str"").append(t);
    Logger.d(TAG,sb.toString());
    for (int i=0; i < dp.length; ++i) {
      sb.setLength(0);
      sb.append(i).append(':');
      for (int j=0; j < dp[i].length; ++j) {
        sb.append(dp[i][j]).append(',');
      }
      Logger.d(TAG,sb.toString());
    }
  }
  return dp[sl][tl];
}",0.885286783042394
157146,"/** 
 * Begin to output an entity.
 * @param name name of entity.
 */
public XmlWriter writeEntity(String name) throws IOException {
  closeOpeningTag(true);
  this.mClosed=false;
  for (int tabIndex=0; tabIndex < mStack.size() + mIndentingOffset; tabIndex++)   this.mWriter.write(INDENT_STRING);
  this.mWriter.write(""String_Node_Str"");
  this.mWriter.write(name);
  mStack.add(name);
  this.mEmpty=true;
  this.mJustWroteText=false;
  return this;
}","/** 
 * Begin to output an entity.
 * @param name name of entity.
 */
public XmlWriter writeEntity(String name) throws IOException {
  closeOpeningTag(true);
  this.mClosed=false;
  for (int tabIndex=0; tabIndex < mStack.size() + mIndentingOffset; tabIndex++)   this.mWriter.write(INDENT_STRING);
  this.mWriter.write(""String_Node_Str"");
  this.mWriter.write(name);
  mStack.push(name);
  this.mEmpty=true;
  this.mJustWroteText=false;
  return this;
}",0.992248062015504
157147,"/** 
 * End the current entity. This will throw an exception if it is called when there is not a currently open entity.
 * @throws IOException
 */
public XmlWriter endEntity() throws IOException {
  if (this.mStack.empty()) {
    throw new InvalidObjectException(""String_Node_Str"");
  }
  String name=this.mStack.pop();
  if (name != null) {
    if (this.mEmpty) {
      writeAttributes();
      this.mWriter.write(""String_Node_Str"");
    }
 else {
      if (!this.mJustWroteText) {
        for (int tabIndex=0; tabIndex < mStack.size() + mIndentingOffset; tabIndex++)         this.mWriter.write(INDENT_STRING);
      }
      this.mWriter.write(""String_Node_Str"");
      this.mWriter.write(name);
      this.mWriter.write(""String_Node_Str"");
    }
    this.mEmpty=false;
    this.mClosed=true;
    this.mJustWroteText=false;
  }
  return this;
}","/** 
 * End the current entity. This will throw an exception if it is called when there is not a currently open entity.
 * @throws IOException
 */
public XmlWriter endEntity() throws IOException {
  if (mStack.size() == 0) {
    throw new InvalidObjectException(""String_Node_Str"");
  }
  String name=mStack.pop();
  if (mEmpty) {
    writeAttributes();
    mWriter.write(""String_Node_Str"");
  }
 else {
    if (!mJustWroteText) {
      for (int tabIndex=0; tabIndex < mStack.size() + mIndentingOffset; tabIndex++)       mWriter.write(INDENT_STRING);
    }
    mWriter.write(""String_Node_Str"");
    mWriter.write(name);
    mWriter.write(""String_Node_Str"");
  }
  mEmpty=false;
  mClosed=true;
  mJustWroteText=false;
  return this;
}",0.8910012674271229
157148,"/** 
 * Close this mWriter. It does not close the underlying mWriter, but does throw an exception if there are as yet unclosed tags.
 * @throws IOException
 */
public void close() throws IOException {
  if (!this.mStack.empty()) {
    throw new InvalidObjectException(""String_Node_Str"" + ""String_Node_Str"" + this.mStack.pop() + ""String_Node_Str"");
  }
  if (mThisIsWriterOwner) {
    this.mWriter.flush();
    this.mWriter.close();
  }
}","/** 
 * Close this mWriter. It does not close the underlying mWriter, but does throw an exception if there are as yet unclosed tags.
 * @throws IOException
 */
public void close() throws IOException {
  if (this.mStack.size() > 0) {
    throw new InvalidObjectException(""String_Node_Str"" + ""String_Node_Str"" + this.mStack.pop() + ""String_Node_Str"");
  }
  if (mThisIsWriterOwner) {
    this.mWriter.flush();
    this.mWriter.close();
  }
}",0.9794520547945206
157149,"@Test public void testNavigationSupportedRowsAndCancel(){
  final AdditionalUiSettingsFragment fragment=startFragment();
  fragment.findPreference(""String_Node_Str"").performClick();
  Robolectric.flushForegroundThreadScheduler();
  AlertDialog latestAlertDialog=ShadowAlertDialog.getLatestAlertDialog();
  Assert.assertNotNull(latestAlertDialog);
  ShadowAlertDialog shadowAlertDialog=Shadows.shadowOf(latestAlertDialog);
  Assert.assertTrue(AnyApplication.getConfig().isEnableStateForRowMode(Keyboard.KEYBOARD_ROW_MODE_EMAIL));
  shadowAlertDialog.clickOnItem(2);
  latestAlertDialog.getButton(DialogInterface.BUTTON_NEGATIVE).performClick();
  Assert.assertTrue(shadowAlertDialog.hasBeenDismissed());
}","@Test public void testNavigationSupportedRowsAndCancel(){
  final AdditionalUiSettingsFragment fragment=startFragment();
  ViewTestUtils.performClick(fragment.findPreference(""String_Node_Str""));
  Robolectric.flushForegroundThreadScheduler();
  AlertDialog latestAlertDialog=ShadowAlertDialog.getLatestAlertDialog();
  Assert.assertNotNull(latestAlertDialog);
  ShadowAlertDialog shadowAlertDialog=Shadows.shadowOf(latestAlertDialog);
  Assert.assertTrue(AnyApplication.getConfig().isEnableStateForRowMode(Keyboard.KEYBOARD_ROW_MODE_EMAIL));
  shadowAlertDialog.clickOnItem(2);
  latestAlertDialog.getButton(DialogInterface.BUTTON_NEGATIVE).performClick();
  Assert.assertTrue(shadowAlertDialog.hasBeenDismissed());
}",0.9711470795214636
157150,"@Test public void testNavigationTweaks(){
  final AdditionalUiSettingsFragment fragment=startFragment();
  fragment.findPreference(""String_Node_Str"").performClick();
  Robolectric.flushForegroundThreadScheduler();
  final Fragment next=fragment.getActivity().getSupportFragmentManager().findFragmentById(R.id.main_ui_content);
  Assert.assertTrue(next instanceof UiTweaksFragment);
}","@Test public void testNavigationTweaks(){
  final AdditionalUiSettingsFragment fragment=startFragment();
  ViewTestUtils.performClick(fragment.findPreference(""String_Node_Str""));
  Robolectric.flushForegroundThreadScheduler();
  final Fragment next=fragment.getActivity().getSupportFragmentManager().findFragmentById(R.id.main_ui_content);
  Assert.assertTrue(next instanceof UiTweaksFragment);
}",0.9473684210526316
157151,"@Test public void testNavigationSupportedRowsAndHappyPath(){
  final AdditionalUiSettingsFragment fragment=startFragment();
  fragment.findPreference(""String_Node_Str"").performClick();
  Robolectric.flushForegroundThreadScheduler();
  AlertDialog latestAlertDialog=ShadowAlertDialog.getLatestAlertDialog();
  Assert.assertNotNull(latestAlertDialog);
  ShadowAlertDialog shadowAlertDialog=Shadows.shadowOf(latestAlertDialog);
  Assert.assertEquals(4,shadowAlertDialog.getItems().length);
  Assert.assertEquals(""String_Node_Str"",shadowAlertDialog.getItems()[0]);
  Assert.assertEquals(""String_Node_Str"",shadowAlertDialog.getItems()[1]);
  Assert.assertEquals(""String_Node_Str"",shadowAlertDialog.getItems()[2]);
  Assert.assertEquals(""String_Node_Str"",shadowAlertDialog.getItems()[3]);
  Assert.assertTrue(AnyApplication.getConfig().isEnableStateForRowMode(Keyboard.KEYBOARD_ROW_MODE_EMAIL));
  shadowAlertDialog.clickOnItem(2);
  Assert.assertFalse(shadowAlertDialog.hasBeenDismissed());
  latestAlertDialog.getButton(DialogInterface.BUTTON_POSITIVE).performClick();
  Assert.assertTrue(shadowAlertDialog.hasBeenDismissed());
  Assert.assertFalse(AnyApplication.getConfig().isEnableStateForRowMode(Keyboard.KEYBOARD_ROW_MODE_EMAIL));
}","@Test public void testNavigationSupportedRowsAndHappyPath(){
  final AdditionalUiSettingsFragment fragment=startFragment();
  ViewTestUtils.performClick(fragment.findPreference(""String_Node_Str""));
  Robolectric.flushForegroundThreadScheduler();
  AlertDialog latestAlertDialog=ShadowAlertDialog.getLatestAlertDialog();
  Assert.assertNotNull(latestAlertDialog);
  ShadowAlertDialog shadowAlertDialog=Shadows.shadowOf(latestAlertDialog);
  Assert.assertEquals(4,shadowAlertDialog.getItems().length);
  Assert.assertEquals(""String_Node_Str"",shadowAlertDialog.getItems()[0]);
  Assert.assertEquals(""String_Node_Str"",shadowAlertDialog.getItems()[1]);
  Assert.assertEquals(""String_Node_Str"",shadowAlertDialog.getItems()[2]);
  Assert.assertEquals(""String_Node_Str"",shadowAlertDialog.getItems()[3]);
  Assert.assertTrue(AnyApplication.getConfig().isEnableStateForRowMode(Keyboard.KEYBOARD_ROW_MODE_EMAIL));
  shadowAlertDialog.clickOnItem(2);
  Assert.assertFalse(shadowAlertDialog.hasBeenDismissed());
  latestAlertDialog.getButton(DialogInterface.BUTTON_POSITIVE).performClick();
  Assert.assertTrue(shadowAlertDialog.hasBeenDismissed());
  Assert.assertFalse(AnyApplication.getConfig().isEnableStateForRowMode(Keyboard.KEYBOARD_ROW_MODE_EMAIL));
}",0.9608713190802745
157152,"@Test public void testNavigationCommonBottomRow(){
  final AdditionalUiSettingsFragment fragment=startFragment();
  fragment.findPreference(""String_Node_Str"").performClick();
  Robolectric.flushForegroundThreadScheduler();
  final Fragment next=fragment.getActivity().getSupportFragmentManager().findFragmentById(R.id.main_ui_content);
  Assert.assertTrue(next instanceof AdditionalUiSettingsFragment.BottomRowAddOnBrowserFragment);
}","@Test public void testNavigationCommonBottomRow(){
  final AdditionalUiSettingsFragment fragment=startFragment();
  ViewTestUtils.performClick(fragment.findPreference(""String_Node_Str""));
  Robolectric.flushForegroundThreadScheduler();
  final Fragment next=fragment.getActivity().getSupportFragmentManager().findFragmentById(R.id.main_ui_content);
  Assert.assertTrue(next instanceof AdditionalUiSettingsFragment.BottomRowAddOnBrowserFragment);
}",0.9534619750283768
157153,"@Test public void testNavigationCommonTopRow(){
  final AdditionalUiSettingsFragment fragment=startFragment();
  fragment.findPreference(""String_Node_Str"").performClick();
  Robolectric.flushForegroundThreadScheduler();
  final Fragment next=fragment.getActivity().getSupportFragmentManager().findFragmentById(R.id.main_ui_content);
  Assert.assertTrue(next instanceof AdditionalUiSettingsFragment.TopRowAddOnBrowserFragment);
}","@Test public void testNavigationCommonTopRow(){
  final AdditionalUiSettingsFragment fragment=startFragment();
  ViewTestUtils.performClick(fragment.findPreference(""String_Node_Str""));
  Robolectric.flushForegroundThreadScheduler();
  final Fragment next=fragment.getActivity().getSupportFragmentManager().findFragmentById(R.id.main_ui_content);
  Assert.assertTrue(next instanceof AdditionalUiSettingsFragment.TopRowAddOnBrowserFragment);
}",0.952819332566168
157154,"public void run(){
  mList.focusableViewAvailable(mList);
}","@Override public void run(){
  mList.focusableViewAvailable(mList);
}",0.921875
157155,"/** 
 * {@inheritDoc}
 */
public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen,Preference preference){
  if (getActivity() instanceof OnPreferenceStartFragmentCallback) {
    return ((OnPreferenceStartFragmentCallback)getActivity()).onPreferenceStartFragment(this,preference);
  }
  return false;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen,Preference preference){
  if (getActivity() instanceof OnPreferenceStartFragmentCallback) {
    return ((OnPreferenceStartFragmentCallback)getActivity()).onPreferenceStartFragment(this,preference);
  }
  return false;
}",0.9844236760124612
157156,"public Object invoke(Object proxy,Method method,Object[] args){
  if (method.getName().equals(""String_Node_Str"")) {
    return Boolean.valueOf(listener.onPreferenceTreeClick((PreferenceScreen)args[0],(Preference)args[1]));
  }
 else {
    return null;
  }
}","@Override public Object invoke(Object proxy,Method method,Object[] args){
  if (method.getName().equals(""String_Node_Str"")) {
    return listener.onPreferenceTreeClick((PreferenceScreen)args[0],(Preference)args[1]);
  }
 else {
    return null;
  }
}",0.9467455621301776
157157,"/** 
 * Sets the callback to be invoked when a   {@link Preference} in thehierarchy rooted at this  {@link PreferenceManager} is clicked.
 * @param listener The callback to be invoked.
 */
static void setOnPreferenceTreeClickListener(PreferenceManager manager,final OnPreferenceTreeClickListener listener){
  try {
    Field onPreferenceTreeClickListener=PreferenceManager.class.getDeclaredField(""String_Node_Str"");
    onPreferenceTreeClickListener.setAccessible(true);
    if (listener != null) {
      Object proxy=Proxy.newProxyInstance(onPreferenceTreeClickListener.getType().getClassLoader(),new Class[]{onPreferenceTreeClickListener.getType()},new InvocationHandler(){
        public Object invoke(        Object proxy,        Method method,        Object[] args){
          if (method.getName().equals(""String_Node_Str"")) {
            return Boolean.valueOf(listener.onPreferenceTreeClick((PreferenceScreen)args[0],(Preference)args[1]));
          }
 else {
            return null;
          }
        }
      }
);
      onPreferenceTreeClickListener.set(manager,proxy);
    }
 else {
      onPreferenceTreeClickListener.set(manager,null);
    }
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"",e);
  }
}","/** 
 * Sets the callback to be invoked when a   {@link Preference} in thehierarchy rooted at this  {@link PreferenceManager} is clicked.
 * @param listener The callback to be invoked.
 */
static void setOnPreferenceTreeClickListener(PreferenceManager manager,final OnPreferenceTreeClickListener listener){
  try {
    Field onPreferenceTreeClickListener=PreferenceManager.class.getDeclaredField(""String_Node_Str"");
    onPreferenceTreeClickListener.setAccessible(true);
    if (listener != null) {
      Object proxy=Proxy.newProxyInstance(onPreferenceTreeClickListener.getType().getClassLoader(),new Class[]{onPreferenceTreeClickListener.getType()},new InvocationHandler(){
        @Override public Object invoke(        Object proxy,        Method method,        Object[] args){
          if (method.getName().equals(""String_Node_Str"")) {
            return listener.onPreferenceTreeClick((PreferenceScreen)args[0],(Preference)args[1]);
          }
 else {
            return null;
          }
        }
      }
);
      onPreferenceTreeClickListener.set(manager,proxy);
    }
 else {
      onPreferenceTreeClickListener.set(manager,null);
    }
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"",e);
  }
}",0.988957055214724
157158,"public void onText(Key key,CharSequence text){
  Logger.d(TAG,""String_Node_Str"",text);
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  abortCorrectionAndResetPredictionState(false);
  ic.commitText(text,1);
  mJustAddedAutoSpace=false;
  mCommittedWord=text;
  mUndoCommitCursorPosition=UNDO_COMMIT_WAITING_TO_RECORD_POSITION;
  TextEntryState.acceptedDefault(text);
  ic.endBatchEdit();
  setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,false),false,false,false);
}","@Override public void onText(Key key,CharSequence text){
  Logger.d(TAG,""String_Node_Str"",text);
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  abortCorrectionAndResetPredictionState(false);
  ic.commitText(text,1);
  mJustAddedAutoSpace=false;
  mCommittedWord=text;
  mUndoCommitCursorPosition=UNDO_COMMIT_WAITING_TO_RECORD_POSITION;
  TextEntryState.acceptedDefault(text);
  ic.endBatchEdit();
  setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,false),false,false,false);
}",0.9906716417910448
157159,"private void showLanguageSelectionDialog(){
  KeyboardAddOnAndBuilder[] builders=getKeyboardSwitcher().getEnabledKeyboardsBuilders();
  ArrayList<CharSequence> keyboardsIds=new ArrayList<>();
  ArrayList<CharSequence> keyboards=new ArrayList<>();
  for (  KeyboardAddOnAndBuilder keyboardBuilder : builders) {
    keyboardsIds.add(keyboardBuilder.getId());
    CharSequence name=keyboardBuilder.getName();
    keyboards.add(name);
  }
  final CharSequence[] ids=new CharSequence[keyboardsIds.size()];
  final CharSequence[] items=new CharSequence[keyboards.size()];
  keyboardsIds.toArray(ids);
  keyboards.toArray(items);
  showOptionsDialogWithData(getText(R.string.select_keyboard_popup_title),R.drawable.ic_keyboard_globe_menu,items,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface di,    int position){
      CharSequence id=ids[position];
      Logger.d(TAG,""String_Node_Str"",items[position],id);
      EditorInfo currentEditorInfo=getCurrentInputEditorInfo();
      getKeyboardSwitcher().nextAlphabetKeyboard(currentEditorInfo,id.toString());
    }
  }
);
}","private void showLanguageSelectionDialog(){
  KeyboardAddOnAndBuilder[] builders=getKeyboardSwitcher().getEnabledKeyboardsBuilders();
  ArrayList<CharSequence> keyboardsIds=new ArrayList<>();
  ArrayList<CharSequence> keyboards=new ArrayList<>();
  for (  KeyboardAddOnAndBuilder keyboardBuilder : builders) {
    keyboardsIds.add(keyboardBuilder.getId());
    CharSequence name=keyboardBuilder.getName();
    keyboards.add(name);
  }
  final CharSequence[] ids=new CharSequence[keyboardsIds.size()];
  final CharSequence[] items=new CharSequence[keyboards.size()];
  keyboardsIds.toArray(ids);
  keyboards.toArray(items);
  showOptionsDialogWithData(getText(R.string.select_keyboard_popup_title),R.drawable.ic_keyboard_globe_menu,items,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface di,    int position){
      CharSequence id=ids[position];
      Logger.d(TAG,""String_Node_Str"",items[position],id);
      EditorInfo currentEditorInfo=getCurrentInputEditorInfo();
      getKeyboardSwitcher().nextAlphabetKeyboard(currentEditorInfo,id.toString());
    }
  }
);
}",0.9954669084315504
157160,"public void onCancel(){
}","@Override public void onCancel(){
}",0.8333333333333334
157161,"private void launchDictionaryOverriding(){
  final List<DictionaryAddOnAndBuilder> buildersForKeyboard=AnyApplication.getExternalDictionaryFactory(this).getBuildersForKeyboard(getCurrentAlphabetKeyboard());
  final ArrayList<CharSequence> dictionariesNamesForToast=new ArrayList<>();
  final String SELECTED=""String_Node_Str"";
  final String NOT_SELECTED=""String_Node_Str"";
  final List<DictionaryAddOnAndBuilder> allBuilders=AnyApplication.getExternalDictionaryFactory(this).getAllAddOns();
  final CharSequence[] items=new CharSequence[allBuilders.size()];
  for (int dictionaryIndex=0; dictionaryIndex < allBuilders.size(); dictionaryIndex++) {
    DictionaryAddOnAndBuilder dictionaryBuilder=allBuilders.get(dictionaryIndex);
    String description=dictionaryBuilder.getName().toString();
    if (!TextUtils.isEmpty(dictionaryBuilder.getDescription())) {
      description+=""String_Node_Str"" + dictionaryBuilder.getDescription() + ""String_Node_Str"";
    }
    dictionariesNamesForToast.add(description);
    if (buildersForKeyboard.contains(dictionaryBuilder))     description=SELECTED + description;
 else     description=NOT_SELECTED + description;
    items[dictionaryIndex]=description;
  }
  showOptionsDialogWithData(getString(R.string.override_dictionary_title,getCurrentAlphabetKeyboard().getKeyboardName()),R.drawable.ic_settings_language,items,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface di,    int position){
      di.dismiss();
      final DictionaryAddOnAndBuilder clickedBuilder=allBuilders.get(position);
      List<DictionaryAddOnAndBuilder> newBuildersForKeyboard=new ArrayList<>(buildersForKeyboard);
      if (buildersForKeyboard.contains(clickedBuilder)) {
        newBuildersForKeyboard.remove(clickedBuilder);
        showToastMessage(R.string.override_disabled,true);
      }
 else {
        newBuildersForKeyboard.add(clickedBuilder);
        showToastMessage(getString(R.string.override_enabled,dictionariesNamesForToast.get(position)),true);
      }
      AnyApplication.getExternalDictionaryFactory(AnySoftKeyboard.this).setBuildersForKeyboard(getCurrentAlphabetKeyboard(),newBuildersForKeyboard);
    }
  }
);
}","private void launchDictionaryOverriding(){
  final List<DictionaryAddOnAndBuilder> buildersForKeyboard=AnyApplication.getExternalDictionaryFactory(this).getBuildersForKeyboard(getCurrentAlphabetKeyboard());
  final ArrayList<CharSequence> dictionariesNamesForToast=new ArrayList<>();
  final String SELECTED=""String_Node_Str"";
  final String NOT_SELECTED=""String_Node_Str"";
  final List<DictionaryAddOnAndBuilder> allBuilders=AnyApplication.getExternalDictionaryFactory(this).getAllAddOns();
  final CharSequence[] items=new CharSequence[allBuilders.size()];
  for (int dictionaryIndex=0; dictionaryIndex < allBuilders.size(); dictionaryIndex++) {
    DictionaryAddOnAndBuilder dictionaryBuilder=allBuilders.get(dictionaryIndex);
    String description=dictionaryBuilder.getName().toString();
    if (!TextUtils.isEmpty(dictionaryBuilder.getDescription())) {
      description+=""String_Node_Str"" + dictionaryBuilder.getDescription() + ""String_Node_Str"";
    }
    dictionariesNamesForToast.add(description);
    if (buildersForKeyboard.contains(dictionaryBuilder))     description=SELECTED + description;
 else     description=NOT_SELECTED + description;
    items[dictionaryIndex]=description;
  }
  showOptionsDialogWithData(getString(R.string.override_dictionary_title,getCurrentAlphabetKeyboard().getKeyboardName()),R.drawable.ic_settings_language,items,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface di,    int position){
      di.dismiss();
      final DictionaryAddOnAndBuilder clickedBuilder=allBuilders.get(position);
      List<DictionaryAddOnAndBuilder> newBuildersForKeyboard=new ArrayList<>(buildersForKeyboard);
      if (buildersForKeyboard.contains(clickedBuilder)) {
        newBuildersForKeyboard.remove(clickedBuilder);
        showToastMessage(R.string.override_disabled,true);
      }
 else {
        newBuildersForKeyboard.add(clickedBuilder);
        showToastMessage(getString(R.string.override_enabled,dictionariesNamesForToast.get(position)),true);
      }
      AnyApplication.getExternalDictionaryFactory(AnySoftKeyboard.this).setBuildersForKeyboard(getCurrentAlphabetKeyboard(),newBuildersForKeyboard);
    }
  }
);
}",0.997713763145862
157162,"public void onMultiTapStarted(){
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null)   ic.beginBatchEdit();
  handleDeleteLastCharacter(true);
  if (getInputView() != null)   getInputView().setShifted(mLastCharacterWasShifted);
}","@Override public void onMultiTapStarted(){
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null)   ic.beginBatchEdit();
  handleDeleteLastCharacter(true);
  if (getInputView() != null)   getInputView().setShifted(mLastCharacterWasShifted);
}",0.98046875
157163,"public void setSuggestions(List<? extends CharSequence> suggestions,boolean completions,boolean typedWordValid,boolean haveMinimalSuggestion){
  if (mCandidateView != null) {
    mCandidateView.setSuggestions(suggestions,completions,typedWordValid,haveMinimalSuggestion && isAutoCorrect());
  }
}","@Override public void setSuggestions(List<? extends CharSequence> suggestions,boolean completions,boolean typedWordValid,boolean haveMinimalSuggestion){
  if (mCandidateView != null) {
    mCandidateView.setSuggestions(suggestions,completions,typedWordValid,haveMinimalSuggestion && isAutoCorrect());
  }
}",0.9833887043189368
157164,"public void onPress(int primaryCode){
  super.onPress(primaryCode);
  InputConnection ic=getCurrentInputConnection();
  if (mVibrationDuration > 0 && primaryCode != 0 && mVibrator != null) {
    try {
      mVibrator.vibrate(mVibrationDuration);
    }
 catch (    Exception e) {
      Logger.w(TAG,""String_Node_Str"");
      mVibrationDuration=0;
    }
  }
  if (primaryCode == KeyCodes.SHIFT) {
    mShiftKeyState.onPress();
    handleShift();
  }
 else {
    mShiftKeyState.onOtherKeyPressed();
  }
  if (primaryCode == KeyCodes.CTRL) {
    mControlKeyState.onPress();
    handleControl();
    sendKeyDown(ic,113);
  }
 else {
    mControlKeyState.onOtherKeyPressed();
  }
  if (mSoundOn && (!mSilentMode) && primaryCode != 0) {
    final int keyFX;
switch (primaryCode) {
case 13:
case KeyCodes.ENTER:
      keyFX=AudioManager.FX_KEYPRESS_RETURN;
    break;
case KeyCodes.DELETE:
  keyFX=AudioManager.FX_KEYPRESS_DELETE;
break;
case KeyCodes.SPACE:
keyFX=AudioManager.FX_KEYPRESS_SPACEBAR;
break;
default :
keyFX=AudioManager.FX_KEY_CLICK;
}
final float fxVolume;
{
final int volume;
final int maxVolume;
if (mSoundVolume > 0) {
volume=mSoundVolume;
maxVolume=100;
fxVolume=((float)volume) / ((float)maxVolume);
}
 else {
fxVolume=-1.0f;
}
}
mAudioManager.playSoundEffect(keyFX,fxVolume);
}
}","@Override public void onPress(int primaryCode){
  super.onPress(primaryCode);
  InputConnection ic=getCurrentInputConnection();
  if (mVibrationDuration > 0 && primaryCode != 0 && mVibrator != null) {
    try {
      mVibrator.vibrate(mVibrationDuration);
    }
 catch (    Exception e) {
      Logger.w(TAG,""String_Node_Str"");
      mVibrationDuration=0;
    }
  }
  if (primaryCode == KeyCodes.SHIFT) {
    mShiftKeyState.onPress();
    handleShift();
  }
 else {
    mShiftKeyState.onOtherKeyPressed();
  }
  if (primaryCode == KeyCodes.CTRL) {
    mControlKeyState.onPress();
    handleControl();
    sendKeyDown(ic,113);
  }
 else {
    mControlKeyState.onOtherKeyPressed();
  }
  if (mSoundOn && (!mSilentMode) && primaryCode != 0) {
    final int keyFX;
switch (primaryCode) {
case 13:
case KeyCodes.ENTER:
      keyFX=AudioManager.FX_KEYPRESS_RETURN;
    break;
case KeyCodes.DELETE:
  keyFX=AudioManager.FX_KEYPRESS_DELETE;
break;
case KeyCodes.SPACE:
keyFX=AudioManager.FX_KEYPRESS_SPACEBAR;
break;
default :
keyFX=AudioManager.FX_KEY_CLICK;
}
final float fxVolume;
{
final int volume;
final int maxVolume;
if (mSoundVolume > 0) {
volume=mSoundVolume;
maxVolume=100;
fxVolume=((float)volume) / ((float)maxVolume);
}
 else {
fxVolume=-1.0f;
}
}
mAudioManager.playSoundEffect(keyFX,fxVolume);
}
}",0.9961508852963818
157165,"public void onClick(DialogInterface di,int position){
switch (position) {
case 0:
    launchSettings();
  break;
case 1:
launchDictionaryOverriding();
break;
case 2:
((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).showInputMethodPicker();
break;
case 3:
mSuggest.setIncognitoMode(!mSuggest.isIncognitoMode());
getQuickKeyHistoryRecords().setIncognitoMode(mSuggest.isIncognitoMode());
setupInputViewWatermark();
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + position + ""String_Node_Str"");
}
}","@Override public void onClick(DialogInterface di,int position){
switch (position) {
case 0:
    launchSettings();
  break;
case 1:
launchDictionaryOverriding();
break;
case 2:
((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).showInputMethodPicker();
break;
case 3:
mSuggest.setIncognitoMode(!mSuggest.isIncognitoMode());
getQuickKeyHistoryRecords().setIncognitoMode(mSuggest.isIncognitoMode());
setupInputViewWatermark();
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + position + ""String_Node_Str"");
}
}",0.990791896869245
157166,"public void onMultiTapEnded(){
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null)   ic.endBatchEdit();
  updateShiftStateNow();
}","@Override public void onMultiTapEnded(){
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null)   ic.endBatchEdit();
  updateShiftStateNow();
}",0.9681528662420382
157167,"@NonNull protected KeyboardSwitcher createKeyboardSwitcher(){
  return new KeyboardSwitcher(this,getApplicationContext());
}","@NonNull @Override protected KeyboardSwitcher createKeyboardSwitcher(){
  return new KeyboardSwitcher(this,getApplicationContext());
}",0.9612403100775194
157168,"public void onRelease(int primaryCode){
  InputConnection ic=getCurrentInputConnection();
  if (primaryCode == KeyCodes.SHIFT) {
    mShiftKeyState.onRelease(mAskPrefs.getMultiTapTimeout(),mAskPrefs.getLongPressTimeout());
    handleShift();
  }
 else {
    if (mShiftKeyState.onOtherKeyReleased()) {
      updateShiftStateNow();
    }
  }
  if (primaryCode == KeyCodes.CTRL) {
    sendKeyUp(ic,113);
    mControlKeyState.onRelease(mAskPrefs.getMultiTapTimeout(),mAskPrefs.getLongPressTimeout());
    handleControl();
  }
 else {
    mControlKeyState.onOtherKeyReleased();
  }
}","@Override public void onRelease(int primaryCode){
  InputConnection ic=getCurrentInputConnection();
  if (primaryCode == KeyCodes.SHIFT) {
    mShiftKeyState.onRelease(mAskPrefs.getMultiTapTimeout(),mAskPrefs.getLongPressTimeout());
    handleShift();
  }
 else {
    if (mShiftKeyState.onOtherKeyReleased()) {
      updateShiftStateNow();
    }
  }
  if (primaryCode == KeyCodes.CTRL) {
    sendKeyUp(ic,113);
    mControlKeyState.onRelease(mAskPrefs.getMultiTapTimeout(),mAskPrefs.getLongPressTimeout());
    handleControl();
  }
 else {
    mControlKeyState.onOtherKeyReleased();
  }
}",0.9914236706689536
157169,"public void updateRingerMode(){
  mSilentMode=(mAudioManager.getRingerMode() != AudioManager.RINGER_MODE_NORMAL);
}","@Override public void updateRingerMode(){
  mSilentMode=(mAudioManager.getRingerMode() != AudioManager.RINGER_MODE_NORMAL);
}",0.9583333333333334
157170,"private void showOptionsMenu(){
  showOptionsDialogWithData(getText(R.string.ime_name),R.mipmap.ic_launcher,new CharSequence[]{getText(R.string.ime_settings),getText(R.string.override_dictionary),getText(R.string.change_ime),getString(R.string.switch_incognito_template,getText(R.string.switch_incognito))},new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface di,    int position){
switch (position) {
case 0:
        launchSettings();
      break;
case 1:
    launchDictionaryOverriding();
  break;
case 2:
((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).showInputMethodPicker();
break;
case 3:
mSuggest.setIncognitoMode(!mSuggest.isIncognitoMode());
getQuickKeyHistoryRecords().setIncognitoMode(mSuggest.isIncognitoMode());
setupInputViewWatermark();
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + position + ""String_Node_Str"");
}
}
}
);
}","private void showOptionsMenu(){
  showOptionsDialogWithData(getText(R.string.ime_name),R.mipmap.ic_launcher,new CharSequence[]{getText(R.string.ime_settings),getText(R.string.override_dictionary),getText(R.string.change_ime),getString(R.string.switch_incognito_template,getText(R.string.switch_incognito))},new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface di,    int position){
switch (position) {
case 0:
        launchSettings();
      break;
case 1:
    launchDictionaryOverriding();
  break;
case 2:
((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).showInputMethodPicker();
break;
case 3:
mSuggest.setIncognitoMode(!mSuggest.isIncognitoMode());
getQuickKeyHistoryRecords().setIncognitoMode(mSuggest.isIncognitoMode());
setupInputViewWatermark();
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + position + ""String_Node_Str"");
}
}
}
);
}",0.9945770065075922
157171,"/** 
 * Commits the chosen word to the text field and saves it for later retrieval.
 * @param wordToCommit the suggestion picked by the user to be committed to the textfield
 * @param correcting   this is a correction commit
 */
protected void commitWordToInput(@NonNull CharSequence wordToCommit,boolean correcting){
  mWord.setPreferredWord(wordToCommit);
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    if (correcting) {
      AnyApplication.getDeviceSpecific().commitCorrectionToInputConnection(ic,mGlobalCursorPosition - mWord.getTypedWord().length(),mWord.getTypedWord(),mWord.getPreferredWord());
      getInputView().popTextOutOfKey(mWord.getPreferredWord());
    }
 else {
      ic.commitText(wordToCommit,1);
    }
  }
  mCommittedWord=wordToCommit;
  mUndoCommitCursorPosition=UNDO_COMMIT_WAITING_TO_RECORD_POSITION;
  clearSuggestions();
}","/** 
 * Commits the chosen word to the text field and saves it for later retrieval.
 * @param wordToCommit the suggestion picked by the user to be committed to the textfield
 * @param correcting   this is a correction commit
 */
@Override protected void commitWordToInput(@NonNull CharSequence wordToCommit,boolean correcting){
  mWord.setPreferredWord(wordToCommit);
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    if (correcting) {
      AnyApplication.getDeviceSpecific().commitCorrectionToInputConnection(ic,mGlobalCursorPosition - mWord.getTypedWord().length(),mWord.getTypedWord(),mWord.getPreferredWord());
      getInputView().popTextOutOfKey(mWord.getPreferredWord());
    }
 else {
      ic.commitText(wordToCommit,1);
    }
  }
  mCommittedWord=wordToCommit;
  mUndoCommitCursorPosition=UNDO_COMMIT_WAITING_TO_RECORD_POSITION;
  clearSuggestions();
}",0.9943310657596371
157172,"@Override public void setCandidatesView(@NonNull View view){
  super.setCandidatesView(view);
  mCandidatesParent=view.getParent() instanceof View ? (View)view.getParent() : null;
  mCandidateView=view.findViewById(R.id.candidates);
  mCandidateView.setService(this);
  setCandidatesViewShown(false);
  final KeyboardTheme theme=getKeyboardThemeFactory(this).getEnabledAddOn();
  final TypedArray a=theme.getPackageContext().obtainStyledAttributes(null,R.styleable.AnyKeyboardViewTheme,0,theme.getThemeResId());
  int closeTextColor=ContextCompat.getColor(this,R.color.candidate_other);
  float fontSizePixel=getResources().getDimensionPixelSize(R.dimen.candidate_font_height);
  Drawable suggestionCloseDrawable=null;
  try {
    closeTextColor=a.getColor(R.styleable.AnyKeyboardViewTheme_suggestionOthersTextColor,closeTextColor);
    fontSizePixel=a.getDimension(R.styleable.AnyKeyboardViewTheme_suggestionTextSize,fontSizePixel);
    suggestionCloseDrawable=a.getDrawable(R.styleable.AnyKeyboardViewTheme_suggestionCloseImage);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  a.recycle();
  mCandidateCloseText=view.findViewById(R.id.close_suggestions_strip_text);
  ImageView closeIcon=view.findViewById(R.id.close_suggestions_strip_icon);
  if (suggestionCloseDrawable != null)   closeIcon.setImageDrawable(suggestionCloseDrawable);
  closeIcon.setOnClickListener(new OnClickListener(){
    private static final long DOUBLE_TAP_TIMEOUT=2 * 1000 - 50;
    public void onClick(    View v){
      mKeyboardHandler.removeMessages(KeyboardUIStateHandler.MSG_REMOVE_CLOSE_SUGGESTIONS_HINT);
      mCandidateCloseText.setVisibility(View.VISIBLE);
      mCandidateCloseText.startAnimation(AnimationUtils.loadAnimation(getApplicationContext(),R.anim.close_candidates_hint_in));
      mKeyboardHandler.sendMessageDelayed(mKeyboardHandler.obtainMessage(KeyboardUIStateHandler.MSG_REMOVE_CLOSE_SUGGESTIONS_HINT),DOUBLE_TAP_TIMEOUT);
    }
  }
);
  mCandidateCloseText.setTextColor(closeTextColor);
  mCandidateCloseText.setTextSize(TypedValue.COMPLEX_UNIT_PX,fontSizePixel);
  mCandidateCloseText.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      mKeyboardHandler.removeMessages(KeyboardUIStateHandler.MSG_REMOVE_CLOSE_SUGGESTIONS_HINT);
      mCandidateCloseText.setVisibility(View.GONE);
      abortCorrectionAndResetPredictionState(true);
    }
  }
);
}","@Override public void setCandidatesView(@NonNull View view){
  super.setCandidatesView(view);
  mCandidatesParent=view.getParent() instanceof View ? (View)view.getParent() : null;
  mCandidateView=view.findViewById(R.id.candidates);
  mCandidateView.setService(this);
  setCandidatesViewShown(false);
  final KeyboardTheme theme=getKeyboardThemeFactory(this).getEnabledAddOn();
  final TypedArray a=theme.getPackageContext().obtainStyledAttributes(null,R.styleable.AnyKeyboardViewTheme,0,theme.getThemeResId());
  int closeTextColor=ContextCompat.getColor(this,R.color.candidate_other);
  float fontSizePixel=getResources().getDimensionPixelSize(R.dimen.candidate_font_height);
  Drawable suggestionCloseDrawable=null;
  try {
    closeTextColor=a.getColor(R.styleable.AnyKeyboardViewTheme_suggestionOthersTextColor,closeTextColor);
    fontSizePixel=a.getDimension(R.styleable.AnyKeyboardViewTheme_suggestionTextSize,fontSizePixel);
    suggestionCloseDrawable=a.getDrawable(R.styleable.AnyKeyboardViewTheme_suggestionCloseImage);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  a.recycle();
  mCandidateCloseText=view.findViewById(R.id.close_suggestions_strip_text);
  ImageView closeIcon=view.findViewById(R.id.close_suggestions_strip_icon);
  if (suggestionCloseDrawable != null)   closeIcon.setImageDrawable(suggestionCloseDrawable);
  closeIcon.setOnClickListener(new OnClickListener(){
    private static final long DOUBLE_TAP_TIMEOUT=2 * 1000 - 50;
    @Override public void onClick(    View v){
      mKeyboardHandler.removeMessages(KeyboardUIStateHandler.MSG_REMOVE_CLOSE_SUGGESTIONS_HINT);
      mCandidateCloseText.setVisibility(View.VISIBLE);
      mCandidateCloseText.startAnimation(AnimationUtils.loadAnimation(getApplicationContext(),R.anim.close_candidates_hint_in));
      mKeyboardHandler.sendMessageDelayed(mKeyboardHandler.obtainMessage(KeyboardUIStateHandler.MSG_REMOVE_CLOSE_SUGGESTIONS_HINT),DOUBLE_TAP_TIMEOUT);
    }
  }
);
  mCandidateCloseText.setTextColor(closeTextColor);
  mCandidateCloseText.setTextSize(TypedValue.COMPLEX_UNIT_PX,fontSizePixel);
  mCandidateCloseText.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mKeyboardHandler.removeMessages(KeyboardUIStateHandler.MSG_REMOVE_CLOSE_SUGGESTIONS_HINT);
      mCandidateCloseText.setVisibility(View.GONE);
      abortCorrectionAndResetPredictionState(true);
    }
  }
);
}",0.9958454507685915
157173,"public float getKeysHeightFactorInLandscape(){
  return mKeysHeightFactorInLandscape;
}","@Override public float getKeysHeightFactorInLandscape(){
  return mKeysHeightFactorInLandscape;
}",0.9456521739130436
157174,"public boolean getUseFullScreenInputInLandscape(){
  return mUseFullScreenInputInLandscape;
}","@Override public boolean getUseFullScreenInputInLandscape(){
  return mUseFullScreenInputInLandscape;
}",0.9489795918367347
157175,"public int getGestureSwipeDownKeyCode(){
  return mSwipeDownKeyCode;
}","@Override public int getGestureSwipeDownKeyCode(){
  return mSwipeDownKeyCode;
}",0.9333333333333332
157176,"public boolean shouldShowPopupForLanguageSwitch(){
  return mShouldPopupForLanguageSwitch;
}","@Override public boolean shouldShowPopupForLanguageSwitch(){
  return mShouldPopupForLanguageSwitch;
}",0.9484536082474226
157177,"public void removeChangedListener(OnSharedPreferenceChangeListener listener){
  mPreferencesChangedListeners.remove(listener);
}","@Override public void removeChangedListener(OnSharedPreferenceChangeListener listener){
  mPreferencesChangedListeners.remove(listener);
}",0.962406015037594
157178,"public float getKeysHeightFactorInPortrait(){
  return mKeysHeightFactorInPortrait;
}","@Override public float getKeysHeightFactorInPortrait(){
  return mKeysHeightFactorInPortrait;
}",0.9444444444444444
157179,"public boolean getActionKeyInvisibleWhenRequested(){
  return mActionKeyInvisibleWhenRequested;
}","@Override public boolean getActionKeyInvisibleWhenRequested(){
  return mActionKeyInvisibleWhenRequested;
}",0.9509803921568628
157180,"public boolean getShowKeyboardNameText(){
  return mShowKeyboardNameText;
}","@Override public boolean getShowKeyboardNameText(){
  return mShowKeyboardNameText;
}",0.9375
157181,"public String getDomainText(){
  return mDomainText;
}","@Override public String getDomainText(){
  return mDomainText;
}",0.9152542372881356
157182,"public boolean use16KeysSymbolsKeyboards(){
  return mUse16KeysSymbolsKeyboard;
}","@Override public boolean use16KeysSymbolsKeyboards(){
  return mUse16KeysSymbolsKeyboard;
}",0.9418604651162792
157183,"public boolean useChewbaccaNotifications(){
  return mUseChewbacca;
}","@Override public boolean useChewbaccaNotifications(){
  return mUseChewbacca;
}",0.9324324324324323
157184,"public int getGestureSeparateKeyCode(){
  return mSeparateKeyCode;
}","@Override public int getGestureSeparateKeyCode(){
  return mSeparateKeyCode;
}",0.9315068493150684
157185,"public boolean shouldSwapPunctuationAndSpace(){
  return mSwapPunctuationAndSpace;
}","@Override public boolean shouldSwapPunctuationAndSpace(){
  return mSwapPunctuationAndSpace;
}",0.9438202247191012
157186,"public boolean getUseRepeatingKeys(){
  return mUseKeyRepeat;
}","@Override public boolean getUseRepeatingKeys(){
  return mUseKeyRepeat;
}",0.9264705882352942
157187,"public boolean useBackword(){
  return mUseBackword;
}","@Override public boolean useBackword(){
  return mUseBackword;
}",0.9152542372881356
157188,"public AnimationsLevel getAnimationsLevel(){
  return mAnimationsLevel;
}","@Override public AnimationsLevel getAnimationsLevel(){
  return mAnimationsLevel;
}",0.935897435897436
157189,"public boolean getShowKeyPreview(){
  return mShowKeyPreview;
}","@Override public boolean getShowKeyPreview(){
  return mShowKeyPreview;
}",0.9264705882352942
157190,"public boolean showKeyPreviewAboveKey(){
  return mKeyPreviewAboveKey;
}","@Override public boolean showKeyPreviewAboveKey(){
  return mKeyPreviewAboveKey;
}",0.935064935064935
157191,"public void addChangedListener(OnSharedPreferenceChangeListener listener){
  mPreferencesChangedListeners.add(listener);
}","@Override public void addChangedListener(OnSharedPreferenceChangeListener listener){
  mPreferencesChangedListeners.add(listener);
}",0.9606299212598424
157192,"public boolean getSwitchKeyboardOnSpace(){
  return mSwitchKeyboardOnSpace;
}","@Override public boolean getSwitchKeyboardOnSpace(){
  return mSwitchKeyboardOnSpace;
}",0.9390243902439024
157193,"public boolean getInsertSpaceAfterCandidatePick(){
  return mInsertSpaceAfterCandidatePick;
}","@Override public boolean getInsertSpaceAfterCandidatePick(){
  return mInsertSpaceAfterCandidatePick;
}",0.9489795918367347
157194,"public int getGestureSwipeUpKeyCode(boolean fromSpaceBar){
  return fromSpaceBar ? mSwipeUpFromSpaceBarKeyCode : mSwipeUpKeyCode;
}","@Override public int getGestureSwipeUpKeyCode(boolean fromSpaceBar){
  return fromSpaceBar ? mSwipeUpFromSpaceBarKeyCode : mSwipeUpKeyCode;
}",0.9632352941176472
157195,"public int getGesturePinchKeyCode(){
  return mPinchKeyCode;
}","@Override public int getGesturePinchKeyCode(){
  return mPinchKeyCode;
}",0.9253731343283582
157196,"public boolean hideSoftKeyboardWhenPhysicalKeyPressed(){
  return mHideSoftKeyboardWhenPhysicalKeyPressed;
}","@Override public boolean hideSoftKeyboardWhenPhysicalKeyPressed(){
  return mHideSoftKeyboardWhenPhysicalKeyPressed;
}",0.9557522123893806
157197,"public boolean getUseFullScreenInputInPortrait(){
  return mUseFullScreenInputInPortrait;
}","@Override public boolean getUseFullScreenInputInPortrait(){
  return mUseFullScreenInputInPortrait;
}",0.9479166666666666
157198,"public boolean isDoubleSpaceChangesToPeriod(){
  return mIsDoubleSpaceChangesToPeroid;
}","@Override public boolean isDoubleSpaceChangesToPeriod(){
  return mIsDoubleSpaceChangesToPeroid;
}",0.946236559139785
157199,"public int getGestureSwipeLeftKeyCode(boolean fromSpaceBar,boolean withTwoFingers){
  return fromSpaceBar ? mSwipeLeftFromSpaceBarKeyCode : withTwoFingers ? mSwipeLeftWithTwoFingersKeyCode : mSwipeLeftKeyCode;
}","@Override public int getGestureSwipeLeftKeyCode(boolean fromSpaceBar,boolean withTwoFingers){
  return fromSpaceBar ? mSwipeLeftFromSpaceBarKeyCode : withTwoFingers ? mSwipeLeftWithTwoFingersKeyCode : mSwipeLeftKeyCode;
}",0.976851851851852
157200,"public void onSharedPreferenceChanged(SharedPreferences sp,String key){
  Logger.d(TAG,""String_Node_Str"");
  mFirstAppVersionInstalled=sp.getInt(mContext.getString(R.string.settings_key_first_app_version_installed),0);
  mFirstTimeAppInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_app_installed),0);
  mFirstTimeCurrentVersionInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_current_version_installed),0);
  mDomainText=sp.getString(""String_Node_Str"",""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"" + mDomainText);
  mShowKeyPreview=sp.getBoolean(mContext.getString(R.string.settings_key_key_press_shows_preview_popup),mContext.getResources().getBoolean(R.bool.settings_default_key_press_shows_preview_popup));
  Logger.d(TAG,""String_Node_Str"" + mShowKeyPreview);
  mKeyPreviewAboveKey=sp.getString(mContext.getString(R.string.settings_key_key_press_preview_popup_position),mContext.getString(R.string.settings_default_key_press_preview_popup_position)).equals(""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"" + mKeyPreviewAboveKey);
  mShowKeyboardNameText=sp.getBoolean(mContext.getString(R.string.settings_key_show_keyboard_name_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_keyboard_name_text_value));
  Logger.d(TAG,""String_Node_Str"" + mShowKeyboardNameText);
  mShowHintTextOnKeys=sp.getBoolean(mContext.getString(R.string.settings_key_show_hint_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_hint_text_value));
  Logger.d(TAG,""String_Node_Str"" + mShowHintTextOnKeys);
  mUseCustomHintAlign=sp.getBoolean(mContext.getString(R.string.settings_key_use_custom_hint_align_key),mContext.getResources().getBoolean(R.bool.settings_default_use_custom_hint_align_value));
  Logger.d(TAG,""String_Node_Str"" + mUseCustomHintAlign);
  mCustomHintAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_align_key),mContext.getString(R.string.settings_default_custom_hint_align_value));
  Logger.d(TAG,""String_Node_Str"" + mCustomHintAlign);
  mCustomHintVAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_valign_key),mContext.getString(R.string.settings_default_custom_hint_valign_value));
  Logger.d(TAG,""String_Node_Str"" + mCustomHintVAlign);
  mSwitchKeyboardOnSpace=sp.getBoolean(mContext.getString(R.string.settings_key_switch_keyboard_on_space),mContext.getResources().getBoolean(R.bool.settings_default_switch_to_alphabet_on_space));
  Logger.d(TAG,""String_Node_Str"" + mSwitchKeyboardOnSpace);
  mUseFullScreenInputInLandscape=sp.getBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
  Logger.d(TAG,""String_Node_Str"" + mUseFullScreenInputInLandscape);
  mUseFullScreenInputInPortrait=sp.getBoolean(mContext.getString(R.string.settings_key_portrait_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_portrait_fullscreen));
  Logger.d(TAG,""String_Node_Str"" + mUseFullScreenInputInPortrait);
  mUseKeyRepeat=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mUseKeyRepeat);
  mKeysHeightFactorInPortrait=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_portrait_keyboard_height_factor));
  Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  if (mKeysHeightFactorInPortrait > 2.0f) {
    mKeysHeightFactorInPortrait=2.0f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
  mKeysHeightFactorInLandscape=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_landscape_keyboard_height_factor));
  Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  if (mKeysHeightFactorInLandscape > 2.0f) {
    mKeysHeightFactorInLandscape=2.0f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
  mInsertSpaceAfterCandidatePick=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mInsertSpaceAfterCandidatePick);
  mSwipeUpKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_up_action,R.string.swipe_action_value_shift);
  Logger.d(TAG,""String_Node_Str"" + mSwipeUpKeyCode);
  mSwipeUpFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_up_from_spacebar_action,R.string.swipe_action_value_utility_keyboard);
  Logger.d(TAG,""String_Node_Str"" + mSwipeUpFromSpaceBarKeyCode);
  mSwipeDownKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_down_action,R.string.swipe_action_value_hide);
  Logger.d(TAG,""String_Node_Str"" + mSwipeDownKeyCode);
  mSwipeLeftKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_action,R.string.swipe_action_value_next_symbols);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftKeyCode);
  mSwipeRightKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_action,R.string.swipe_action_value_next_alphabet);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightKeyCode);
  mPinchKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_pinch_gesture_action,R.string.swipe_action_value_merge_layout);
  Logger.d(TAG,""String_Node_Str"" + mPinchKeyCode);
  mSeparateKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_separate_gesture_action,R.string.swipe_action_value_split_layout);
  Logger.d(TAG,""String_Node_Str"" + mSeparateKeyCode);
  mSwipeLeftFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_space_bar_action,R.string.swipe_action_value_next_symbols);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftFromSpaceBarKeyCode);
  mSwipeRightFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_space_bar_action,R.string.swipe_action_value_next_alphabet);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightFromSpaceBarKeyCode);
  mSwipeLeftWithTwoFingersKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_two_fingers_action,R.string.swipe_action_value_compact_layout_to_left);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftWithTwoFingersKeyCode);
  mSwipeRightWithTwoFingersKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_two_fingers_action,R.string.swipe_action_value_compact_layout_to_right);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightWithTwoFingersKeyCode);
  mActionKeyInvisibleWhenRequested=sp.getBoolean(""String_Node_Str"",false);
  Logger.d(TAG,""String_Node_Str"" + mActionKeyInvisibleWhenRequested);
  mIsDoubleSpaceChangesToPeroid=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mIsDoubleSpaceChangesToPeroid);
  mShouldPopupForLanguageSwitch=sp.getBoolean(mContext.getString(R.string.settings_key_lang_key_shows_popup),mContext.getResources().getBoolean(R.bool.settings_default_lang_key_shows_popup));
  Logger.d(TAG,""String_Node_Str"" + mShouldPopupForLanguageSwitch);
  mHideSoftKeyboardWhenPhysicalKeyPressed=sp.getBoolean(mContext.getString(R.string.settings_key_hide_soft_when_physical),mContext.getResources().getBoolean(R.bool.settings_default_hide_soft_when_physical));
  Logger.d(TAG,""String_Node_Str"" + mHideSoftKeyboardWhenPhysicalKeyPressed);
  mSupportPasswordKeyboardMode=sp.getBoolean(mContext.getString(R.string.settings_key_support_password_keyboard_type_state),mContext.getResources().getBoolean(R.bool.settings_default_bool_support_password_keyboard_type_state));
  Logger.d(TAG,""String_Node_Str"" + mSupportPasswordKeyboardMode);
  mUse16KeysSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_use_16_keys_symbols_keyboards),mContext.getResources().getBoolean(R.bool.settings_default_use_16_keys_symbols_keyboards));
  Logger.d(TAG,""String_Node_Str"" + mUse16KeysSymbolsKeyboard);
  mUseBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_backword));
  Logger.d(TAG,""String_Node_Str"" + mUseBackword);
  mCycleOverAllSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_cycle_all_symbols),mContext.getResources().getBoolean(R.bool.settings_default_cycle_all_symbols));
  Logger.d(TAG,""String_Node_Str"" + mCycleOverAllSymbolsKeyboard);
  mUseCameraKeyForBackspaceBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_camera_key_for_backspace_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_camera_key_for_backspace_backword));
  Logger.d(TAG,""String_Node_Str"" + mUseCameraKeyForBackspaceBackword);
  mUseVolumeKeyForLeftRight=sp.getBoolean(mContext.getString(R.string.settings_key_use_volume_key_for_left_right),mContext.getResources().getBoolean(R.bool.settings_default_use_volume_key_for_left_right));
  Logger.d(TAG,""String_Node_Str"" + mUseVolumeKeyForLeftRight);
  mUseContactsDictionary=sp.getBoolean(mContext.getString(R.string.settings_key_use_contacts_dictionary),mContext.getResources().getBoolean(R.bool.settings_default_contacts_dictionary));
  Logger.d(TAG,""String_Node_Str"" + mUseContactsDictionary);
  mAutoDictionaryInsertionThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_auto_dictionary_threshold),mContext.getString(R.string.settings_default_auto_dictionary_add_threshold));
  Logger.d(TAG,""String_Node_Str"" + mAutoDictionaryInsertionThreshold);
  mIsStickyExtensionKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_is_sticky_extesion_keyboard),mContext.getResources().getBoolean(R.bool.settings_default_is_sticky_extesion_keyboard));
  Logger.d(TAG,""String_Node_Str"" + mIsStickyExtensionKeyboard);
  mGestureTyping=BuildConfig.DEBUG && sp.getBoolean(mContext.getString(R.string.settings_key_gesture_typing),mContext.getResources().getBoolean(R.bool.settings_default_gesture_typing));
  Logger.d(TAG,""String_Node_Str"" + mGestureTyping);
  mSwipeDistanceThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_distance_threshold),mContext.getString(R.string.settings_default_swipe_distance_threshold));
  Logger.d(TAG,""String_Node_Str"" + mSwipeDistanceThreshold);
  mSwipeVelocityThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_velocity_threshold),mContext.getString(R.string.settings_default_swipe_velocity_threshold));
  Logger.d(TAG,""String_Node_Str"" + mSwipeVelocityThreshold);
  mLongPressTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_long_press_timeout),mContext.getString(R.string.settings_default_long_press_timeout));
  Logger.d(TAG,""String_Node_Str"" + mLongPressTimeout);
  mMultiTapTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_multitap_timeout),mContext.getString(R.string.settings_default_multitap_timeout));
  Logger.d(TAG,""String_Node_Str"" + mMultiTapTimeout);
  mWorkaroundAlwaysUseDrawText=sp.getBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),getAlwaysUseDrawTextDefault());
  Logger.d(TAG,""String_Node_Str"" + mWorkaroundAlwaysUseDrawText);
  mUseChewbacca=sp.getBoolean(mContext.getString(R.string.settings_key_show_chewbacca),mContext.getResources().getBoolean(R.bool.settings_default_show_chewbacca));
  Logger.d(TAG,""String_Node_Str"" + mUseChewbacca);
  mSwapPunctuationAndSpace=sp.getBoolean(mContext.getString(R.string.settings_key_bool_should_swap_punctuation_and_space),mContext.getResources().getBoolean(R.bool.settings_default_bool_should_swap_punctuation_and_space));
  Logger.d(TAG,""String_Node_Str"" + mSwapPunctuationAndSpace);
  String animationsLevel=sp.getString(mContext.getString(R.string.settings_key_tweak_animations_level),mContext.getString(R.string.settings_default_tweak_animations_level));
  if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.None;
 else   if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.Some;
 else   mAnimationsLevel=AnimationsLevel.Full;
  Logger.d(TAG,""String_Node_Str"" + mAnimationsLevel);
  mAlwaysUseFallBackUserDictionary=sp.getBoolean(mContext.getString(R.string.settings_key_always_use_fallback_user_dictionary),mContext.getResources().getBoolean(R.bool.settings_default_always_use_fallback_user_dictionary));
  Logger.d(TAG,""String_Node_Str"" + mAlwaysUseFallBackUserDictionary);
  mAutomaticallySwitchToAppLayout=sp.getBoolean(mContext.getString(R.string.settings_key_persistent_layout_per_package_id),mContext.getResources().getBoolean(R.bool.settings_default_persistent_layout_per_package_id));
  Logger.d(TAG,""String_Node_Str"" + mAutomaticallySwitchToAppLayout);
  mAlwaysHideLanguageKey=sp.getBoolean(mContext.getString(R.string.settings_key_always_hide_language_key),mContext.getResources().getBoolean(R.bool.settings_default_always_hide_language_key));
  Logger.d(TAG,""String_Node_Str"" + mAutomaticallySwitchToAppLayout);
  final LinkedList<OnSharedPreferenceChangeListener> disconnectedList=new LinkedList<>(mPreferencesChangedListeners);
  for (  OnSharedPreferenceChangeListener listener : disconnectedList) {
    if (mPreferencesChangedListeners.contains(listener)) {
      listener.onSharedPreferenceChanged(sp,key);
    }
  }
}","@Override public void onSharedPreferenceChanged(SharedPreferences sp,String key){
  Logger.d(TAG,""String_Node_Str"");
  mFirstAppVersionInstalled=sp.getInt(mContext.getString(R.string.settings_key_first_app_version_installed),0);
  mFirstTimeAppInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_app_installed),0);
  mFirstTimeCurrentVersionInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_current_version_installed),0);
  mDomainText=sp.getString(""String_Node_Str"",""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"" + mDomainText);
  mShowKeyPreview=sp.getBoolean(mContext.getString(R.string.settings_key_key_press_shows_preview_popup),mContext.getResources().getBoolean(R.bool.settings_default_key_press_shows_preview_popup));
  Logger.d(TAG,""String_Node_Str"" + mShowKeyPreview);
  mKeyPreviewAboveKey=sp.getString(mContext.getString(R.string.settings_key_key_press_preview_popup_position),mContext.getString(R.string.settings_default_key_press_preview_popup_position)).equals(""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"" + mKeyPreviewAboveKey);
  mShowKeyboardNameText=sp.getBoolean(mContext.getString(R.string.settings_key_show_keyboard_name_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_keyboard_name_text_value));
  Logger.d(TAG,""String_Node_Str"" + mShowKeyboardNameText);
  mShowHintTextOnKeys=sp.getBoolean(mContext.getString(R.string.settings_key_show_hint_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_hint_text_value));
  Logger.d(TAG,""String_Node_Str"" + mShowHintTextOnKeys);
  mUseCustomHintAlign=sp.getBoolean(mContext.getString(R.string.settings_key_use_custom_hint_align_key),mContext.getResources().getBoolean(R.bool.settings_default_use_custom_hint_align_value));
  Logger.d(TAG,""String_Node_Str"" + mUseCustomHintAlign);
  mCustomHintAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_align_key),mContext.getString(R.string.settings_default_custom_hint_align_value));
  Logger.d(TAG,""String_Node_Str"" + mCustomHintAlign);
  mCustomHintVAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_valign_key),mContext.getString(R.string.settings_default_custom_hint_valign_value));
  Logger.d(TAG,""String_Node_Str"" + mCustomHintVAlign);
  mSwitchKeyboardOnSpace=sp.getBoolean(mContext.getString(R.string.settings_key_switch_keyboard_on_space),mContext.getResources().getBoolean(R.bool.settings_default_switch_to_alphabet_on_space));
  Logger.d(TAG,""String_Node_Str"" + mSwitchKeyboardOnSpace);
  mUseFullScreenInputInLandscape=sp.getBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
  Logger.d(TAG,""String_Node_Str"" + mUseFullScreenInputInLandscape);
  mUseFullScreenInputInPortrait=sp.getBoolean(mContext.getString(R.string.settings_key_portrait_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_portrait_fullscreen));
  Logger.d(TAG,""String_Node_Str"" + mUseFullScreenInputInPortrait);
  mUseKeyRepeat=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mUseKeyRepeat);
  mKeysHeightFactorInPortrait=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_portrait_keyboard_height_factor));
  Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  if (mKeysHeightFactorInPortrait > 2.0f) {
    mKeysHeightFactorInPortrait=2.0f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
  mKeysHeightFactorInLandscape=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_landscape_keyboard_height_factor));
  Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  if (mKeysHeightFactorInLandscape > 2.0f) {
    mKeysHeightFactorInLandscape=2.0f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
  mInsertSpaceAfterCandidatePick=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mInsertSpaceAfterCandidatePick);
  mSwipeUpKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_up_action,R.string.swipe_action_value_shift);
  Logger.d(TAG,""String_Node_Str"" + mSwipeUpKeyCode);
  mSwipeUpFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_up_from_spacebar_action,R.string.swipe_action_value_utility_keyboard);
  Logger.d(TAG,""String_Node_Str"" + mSwipeUpFromSpaceBarKeyCode);
  mSwipeDownKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_down_action,R.string.swipe_action_value_hide);
  Logger.d(TAG,""String_Node_Str"" + mSwipeDownKeyCode);
  mSwipeLeftKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_action,R.string.swipe_action_value_next_symbols);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftKeyCode);
  mSwipeRightKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_action,R.string.swipe_action_value_next_alphabet);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightKeyCode);
  mPinchKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_pinch_gesture_action,R.string.swipe_action_value_merge_layout);
  Logger.d(TAG,""String_Node_Str"" + mPinchKeyCode);
  mSeparateKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_separate_gesture_action,R.string.swipe_action_value_split_layout);
  Logger.d(TAG,""String_Node_Str"" + mSeparateKeyCode);
  mSwipeLeftFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_space_bar_action,R.string.swipe_action_value_next_symbols);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftFromSpaceBarKeyCode);
  mSwipeRightFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_space_bar_action,R.string.swipe_action_value_next_alphabet);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightFromSpaceBarKeyCode);
  mSwipeLeftWithTwoFingersKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_two_fingers_action,R.string.swipe_action_value_compact_layout_to_left);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftWithTwoFingersKeyCode);
  mSwipeRightWithTwoFingersKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_two_fingers_action,R.string.swipe_action_value_compact_layout_to_right);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightWithTwoFingersKeyCode);
  mActionKeyInvisibleWhenRequested=sp.getBoolean(""String_Node_Str"",false);
  Logger.d(TAG,""String_Node_Str"" + mActionKeyInvisibleWhenRequested);
  mIsDoubleSpaceChangesToPeroid=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mIsDoubleSpaceChangesToPeroid);
  mShouldPopupForLanguageSwitch=sp.getBoolean(mContext.getString(R.string.settings_key_lang_key_shows_popup),mContext.getResources().getBoolean(R.bool.settings_default_lang_key_shows_popup));
  Logger.d(TAG,""String_Node_Str"" + mShouldPopupForLanguageSwitch);
  mHideSoftKeyboardWhenPhysicalKeyPressed=sp.getBoolean(mContext.getString(R.string.settings_key_hide_soft_when_physical),mContext.getResources().getBoolean(R.bool.settings_default_hide_soft_when_physical));
  Logger.d(TAG,""String_Node_Str"" + mHideSoftKeyboardWhenPhysicalKeyPressed);
  mSupportPasswordKeyboardMode=sp.getBoolean(mContext.getString(R.string.settings_key_support_password_keyboard_type_state),mContext.getResources().getBoolean(R.bool.settings_default_bool_support_password_keyboard_type_state));
  Logger.d(TAG,""String_Node_Str"" + mSupportPasswordKeyboardMode);
  mUse16KeysSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_use_16_keys_symbols_keyboards),mContext.getResources().getBoolean(R.bool.settings_default_use_16_keys_symbols_keyboards));
  Logger.d(TAG,""String_Node_Str"" + mUse16KeysSymbolsKeyboard);
  mUseBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_backword));
  Logger.d(TAG,""String_Node_Str"" + mUseBackword);
  mCycleOverAllSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_cycle_all_symbols),mContext.getResources().getBoolean(R.bool.settings_default_cycle_all_symbols));
  Logger.d(TAG,""String_Node_Str"" + mCycleOverAllSymbolsKeyboard);
  mUseCameraKeyForBackspaceBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_camera_key_for_backspace_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_camera_key_for_backspace_backword));
  Logger.d(TAG,""String_Node_Str"" + mUseCameraKeyForBackspaceBackword);
  mUseVolumeKeyForLeftRight=sp.getBoolean(mContext.getString(R.string.settings_key_use_volume_key_for_left_right),mContext.getResources().getBoolean(R.bool.settings_default_use_volume_key_for_left_right));
  Logger.d(TAG,""String_Node_Str"" + mUseVolumeKeyForLeftRight);
  mUseContactsDictionary=sp.getBoolean(mContext.getString(R.string.settings_key_use_contacts_dictionary),mContext.getResources().getBoolean(R.bool.settings_default_contacts_dictionary));
  Logger.d(TAG,""String_Node_Str"" + mUseContactsDictionary);
  mAutoDictionaryInsertionThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_auto_dictionary_threshold),mContext.getString(R.string.settings_default_auto_dictionary_add_threshold));
  Logger.d(TAG,""String_Node_Str"" + mAutoDictionaryInsertionThreshold);
  mIsStickyExtensionKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_is_sticky_extesion_keyboard),mContext.getResources().getBoolean(R.bool.settings_default_is_sticky_extesion_keyboard));
  Logger.d(TAG,""String_Node_Str"" + mIsStickyExtensionKeyboard);
  mGestureTyping=BuildConfig.DEBUG && sp.getBoolean(mContext.getString(R.string.settings_key_gesture_typing),mContext.getResources().getBoolean(R.bool.settings_default_gesture_typing));
  Logger.d(TAG,""String_Node_Str"" + mGestureTyping);
  mSwipeDistanceThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_distance_threshold),mContext.getString(R.string.settings_default_swipe_distance_threshold));
  Logger.d(TAG,""String_Node_Str"" + mSwipeDistanceThreshold);
  mSwipeVelocityThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_velocity_threshold),mContext.getString(R.string.settings_default_swipe_velocity_threshold));
  Logger.d(TAG,""String_Node_Str"" + mSwipeVelocityThreshold);
  mLongPressTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_long_press_timeout),mContext.getString(R.string.settings_default_long_press_timeout));
  Logger.d(TAG,""String_Node_Str"" + mLongPressTimeout);
  mMultiTapTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_multitap_timeout),mContext.getString(R.string.settings_default_multitap_timeout));
  Logger.d(TAG,""String_Node_Str"" + mMultiTapTimeout);
  mWorkaroundAlwaysUseDrawText=sp.getBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),getAlwaysUseDrawTextDefault());
  Logger.d(TAG,""String_Node_Str"" + mWorkaroundAlwaysUseDrawText);
  mUseChewbacca=sp.getBoolean(mContext.getString(R.string.settings_key_show_chewbacca),mContext.getResources().getBoolean(R.bool.settings_default_show_chewbacca));
  Logger.d(TAG,""String_Node_Str"" + mUseChewbacca);
  mSwapPunctuationAndSpace=sp.getBoolean(mContext.getString(R.string.settings_key_bool_should_swap_punctuation_and_space),mContext.getResources().getBoolean(R.bool.settings_default_bool_should_swap_punctuation_and_space));
  Logger.d(TAG,""String_Node_Str"" + mSwapPunctuationAndSpace);
  String animationsLevel=sp.getString(mContext.getString(R.string.settings_key_tweak_animations_level),mContext.getString(R.string.settings_default_tweak_animations_level));
  if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.None;
 else   if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.Some;
 else   mAnimationsLevel=AnimationsLevel.Full;
  Logger.d(TAG,""String_Node_Str"" + mAnimationsLevel);
  mAlwaysUseFallBackUserDictionary=sp.getBoolean(mContext.getString(R.string.settings_key_always_use_fallback_user_dictionary),mContext.getResources().getBoolean(R.bool.settings_default_always_use_fallback_user_dictionary));
  Logger.d(TAG,""String_Node_Str"" + mAlwaysUseFallBackUserDictionary);
  mAutomaticallySwitchToAppLayout=sp.getBoolean(mContext.getString(R.string.settings_key_persistent_layout_per_package_id),mContext.getResources().getBoolean(R.bool.settings_default_persistent_layout_per_package_id));
  Logger.d(TAG,""String_Node_Str"" + mAutomaticallySwitchToAppLayout);
  mAlwaysHideLanguageKey=sp.getBoolean(mContext.getString(R.string.settings_key_always_hide_language_key),mContext.getResources().getBoolean(R.bool.settings_default_always_hide_language_key));
  Logger.d(TAG,""String_Node_Str"" + mAutomaticallySwitchToAppLayout);
  final LinkedList<OnSharedPreferenceChangeListener> disconnectedList=new LinkedList<>(mPreferencesChangedListeners);
  for (  OnSharedPreferenceChangeListener listener : disconnectedList) {
    if (mPreferencesChangedListeners.contains(listener)) {
      listener.onSharedPreferenceChanged(sp,key);
    }
  }
}",0.9996262799910308
157201,"public int getGestureSwipeRightKeyCode(boolean fromSpaceBar,boolean withTwoFingers){
  return fromSpaceBar ? mSwipeRightFromSpaceBarKeyCode : withTwoFingers ? mSwipeRightWithTwoFingersKeyCode : mSwipeRightKeyCode;
}","@Override public int getGestureSwipeRightKeyCode(boolean fromSpaceBar,boolean withTwoFingers){
  return fromSpaceBar ? mSwipeRightFromSpaceBarKeyCode : withTwoFingers ? mSwipeRightWithTwoFingersKeyCode : mSwipeRightKeyCode;
}",0.9772727272727272
157202,"public void onAnimationRepeat(Animation animation){
}","@Override public void onAnimationRepeat(Animation animation){
}",0.913793103448276
157203,"public void onAnimationEnd(Animation animation){
  mCloseText.setVisibility(View.GONE);
  mCloseText=null;
}","@Override public void onAnimationEnd(Animation animation){
  mCloseText.setVisibility(View.GONE);
  mCloseText=null;
}",0.9557522123893806
157204,"public void onAnimationStart(Animation animation){
}","@Override public void onAnimationStart(Animation animation){
}",0.912280701754386
157205,"public void onAnimationEnd(Animation animation){
  final com.anysoftkeyboard.keyboards.views.AnyKeyboardView view=(com.anysoftkeyboard.keyboards.views.AnyKeyboardView)mIme.getInputView();
  if (view != null)   view.requestInAnimation(getEndAnimation(mCurrentAnimationType));
  mIme.onKey(mTargetKeyCode,null,-1,new int[]{mTargetKeyCode},false);
}","@Override public void onAnimationEnd(Animation animation){
  final com.anysoftkeyboard.keyboards.views.AnyKeyboardView view=(com.anysoftkeyboard.keyboards.views.AnyKeyboardView)mIme.getInputView();
  if (view != null)   view.requestInAnimation(getEndAnimation(mCurrentAnimationType));
  mIme.onKey(mTargetKeyCode,null,-1,new int[]{mTargetKeyCode},false);
}",0.9857549857549858
157206,"public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){
  setAnimations();
}","@Override public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){
  setAnimations();
}",0.9553571428571428
157207,"public void onAnimationRepeat(Animation animation){
}","@Override public void onAnimationRepeat(Animation animation){
}",0.913793103448276
157208,"public void onAnimationStart(Animation animation){
}","@Override public void onAnimationStart(Animation animation){
}",0.912280701754386
157209,"public final int getSortIndex(){
  return mSortIndex;
}","@Override public final int getSortIndex(){
  return mSortIndex;
}",0.9166666666666666
157210,"public CharSequence getName(){
  return mName;
}","@Override public CharSequence getName(){
  return mName;
}",0.9056603773584906
157211,"public final CharSequence getId(){
  return mId;
}","@Override public final CharSequence getId(){
  return mId;
}",0.9090909090909092
157212,"public final CharSequence getDescription(){
  return mDescription;
}","@Override public final CharSequence getDescription(){
  return mDescription;
}",0.9315068493150684
157213,"@Nullable public final Context getPackageContext(){
  Context c=mPackageContext.get();
  if (c == null) {
    try {
      c=mAskAppContext.createPackageContext(mPackageName,Context.CONTEXT_IGNORE_SECURITY);
      mPackageContext=new WeakReference<>(c);
    }
 catch (    NameNotFoundException e) {
      Logger.w(TAG,""String_Node_Str"",mPackageName);
      Logger.w(TAG,""String_Node_Str"",e);
    }
  }
  return c;
}","@Nullable @Override public final Context getPackageContext(){
  Context c=mPackageContext.get();
  if (c == null) {
    try {
      c=mAskAppContext.createPackageContext(mPackageName,Context.CONTEXT_IGNORE_SECURITY);
      mPackageContext=new WeakReference<>(c);
    }
 catch (    NameNotFoundException e) {
      Logger.w(TAG,""String_Node_Str"",mPackageName);
      Logger.w(TAG,""String_Node_Str"",e);
    }
  }
  return c;
}",0.9880668257756564
157214,"public String getPackageName(){
  return mPackageName;
}","@Override public String getPackageName(){
  return mPackageName;
}",0.918032786885246
157215,"private void ensureList(){
  if (mList != null) {
    return;
  }
  View root=getView();
  if (root == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  View rawListView=root.findViewById(android.R.id.list);
  if (!(rawListView instanceof ListView)) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
  }
  mList=(ListView)rawListView;
  if (mList == null) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
  }
  mList.setOnKeyListener(mListOnKeyListener);
  mHandler.post(mRequestFocus);
}","private void ensureList(){
  if (mList != null) {
    return;
  }
  View root=getView();
  if (root == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  View rawListView=root.findViewById(android.R.id.list);
  if (!(rawListView instanceof ListView)) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
  }
  mList=(ListView)rawListView;
  mHandler.post(mRequestFocus);
}",0.8509316770186336
157216,"private void showLanguageSelectionDialog(){
  KeyboardAddOnAndBuilder[] builders=getKeyboardSwitcher().getEnabledKeyboardsBuilders();
  ArrayList<CharSequence> keyboardsIds=new ArrayList<>();
  ArrayList<CharSequence> keyboards=new ArrayList<>();
  for (  KeyboardAddOnAndBuilder keyboardBuilder : builders) {
    keyboardsIds.add(keyboardBuilder.getId());
    CharSequence name=keyboardBuilder.getName();
    keyboards.add(name);
  }
  final CharSequence[] ids=new CharSequence[keyboardsIds.size()];
  final CharSequence[] items=new CharSequence[keyboards.size()];
  keyboardsIds.toArray(ids);
  keyboards.toArray(items);
  showOptionsDialogWithData(getText(R.string.select_keyboard_popup_title),R.drawable.ic_keyboard_globe_menu,items,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface di,    int position){
      CharSequence id=ids[position];
      Logger.d(TAG,""String_Node_Str"",items[position],id);
      EditorInfo currentEditorInfo=getCurrentInputEditorInfo();
      getKeyboardSwitcher().nextAlphabetKeyboard(currentEditorInfo,id.toString());
    }
  }
);
}","private void showLanguageSelectionDialog(){
  List<KeyboardAddOnAndBuilder> builders=getKeyboardSwitcher().getEnabledKeyboardsBuilders();
  ArrayList<CharSequence> keyboardsIds=new ArrayList<>();
  ArrayList<CharSequence> keyboards=new ArrayList<>();
  for (  KeyboardAddOnAndBuilder keyboardBuilder : builders) {
    keyboardsIds.add(keyboardBuilder.getId());
    CharSequence name=keyboardBuilder.getName();
    keyboards.add(name);
  }
  final CharSequence[] ids=new CharSequence[keyboardsIds.size()];
  final CharSequence[] items=new CharSequence[keyboards.size()];
  keyboardsIds.toArray(ids);
  keyboards.toArray(items);
  showOptionsDialogWithData(getText(R.string.select_keyboard_popup_title),R.drawable.ic_keyboard_globe_menu,items,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface di,    int position){
      CharSequence id=ids[position];
      Logger.d(TAG,""String_Node_Str"",items[position],id);
      EditorInfo currentEditorInfo=getCurrentInputEditorInfo();
      getKeyboardSwitcher().nextAlphabetKeyboard(currentEditorInfo,id.toString());
    }
  }
);
}",0.9963963963963964
157217,"@Override public void onStartInputView(final EditorInfo attribute,final boolean restarting){
  Logger.v(TAG,""String_Node_Str"",attribute.imeOptions,attribute.inputType,restarting);
  super.onStartInputView(attribute,restarting);
  if (mVoiceRecognitionTrigger != null) {
    mVoiceRecognitionTrigger.onStartInputView();
  }
  if (getInputView() == null) {
    return;
  }
  getInputView().dismissPopupKeyboard();
  getInputView().setKeyboardActionType(attribute.imeOptions);
  mPredictionOn=false;
  mCompletionOn=false;
  mCompletions=null;
  mInputFieldSupportsAutoPick=false;
switch (attribute.inputType & EditorInfo.TYPE_MASK_CLASS) {
case EditorInfo.TYPE_CLASS_DATETIME:
    Logger.d(TAG,""String_Node_Str"");
  getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_DATETIME,attribute,restarting);
break;
case EditorInfo.TYPE_CLASS_NUMBER:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_NUMBERS,attribute,restarting);
break;
case EditorInfo.TYPE_CLASS_PHONE:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_PHONE,attribute,restarting);
break;
case EditorInfo.TYPE_CLASS_TEXT:
Logger.d(TAG,""String_Node_Str"");
final int variation=attribute.inputType & EditorInfo.TYPE_MASK_VARIATION;
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_PASSWORD:
case EditorInfo.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD:
case EditorInfo.TYPE_TEXT_VARIATION_WEB_PASSWORD:
Logger.d(TAG,""String_Node_Str"");
mPredictionOn=false;
break;
case EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
case EditorInfo.TYPE_TEXT_VARIATION_URI:
case EditorInfo.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS:
Logger.d(TAG,""String_Node_Str"");
mPredictionOn=true;
mInputFieldSupportsAutoPick=false;
break;
default :
mInputFieldSupportsAutoPick=true;
mPredictionOn=true;
}
if (mAskPrefs.getInsertSpaceAfterCandidatePick()) {
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
case EditorInfo.TYPE_TEXT_VARIATION_URI:
case EditorInfo.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS:
mAutoSpace=false;
break;
default :
mAutoSpace=true;
}
}
 else {
mAutoSpace=false;
}
final int textFlag=attribute.inputType & EditorInfo.TYPE_MASK_FLAGS;
if ((textFlag & EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS) == EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS || (textFlag & EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE) == EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE) {
Logger.d(TAG,""String_Node_Str"");
mPredictionOn=false;
}
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
case EditorInfo.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_EMAIL,attribute,restarting);
break;
case EditorInfo.TYPE_TEXT_VARIATION_URI:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_URL,attribute,restarting);
break;
case EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_IM,attribute,restarting);
break;
default :
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_TEXT,attribute,restarting);
}
break;
default :
Logger.d(TAG,""String_Node_Str"");
mPredictionOn=false;
mAutoSpace=true;
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_TEXT,attribute,restarting);
}
mJustAddedAutoSpace=false;
setCandidatesViewShown(false);
mPredictionOn=mPredictionOn && mShowSuggestions;
TextEntryState.newSession(mPredictionOn);
clearSuggestions();
updateShiftStateNow();
}","@Override public void onStartInputView(final EditorInfo attribute,final boolean restarting){
  Logger.v(TAG,""String_Node_Str"",attribute.imeOptions,attribute.inputType,restarting);
  super.onStartInputView(attribute,restarting);
  if (mVoiceRecognitionTrigger != null) {
    mVoiceRecognitionTrigger.onStartInputView();
  }
  if (getInputView() == null) {
    return;
  }
  getInputView().dismissPopupKeyboard();
  getInputView().setKeyboardActionType(attribute.imeOptions);
  mPredictionOn=false;
  mCompletionOn=false;
  mCompletions=EMPTY_COMPLETIONS;
  mInputFieldSupportsAutoPick=false;
switch (attribute.inputType & EditorInfo.TYPE_MASK_CLASS) {
case EditorInfo.TYPE_CLASS_DATETIME:
    Logger.d(TAG,""String_Node_Str"");
  getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_DATETIME,attribute,restarting);
break;
case EditorInfo.TYPE_CLASS_NUMBER:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_NUMBERS,attribute,restarting);
break;
case EditorInfo.TYPE_CLASS_PHONE:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_PHONE,attribute,restarting);
break;
case EditorInfo.TYPE_CLASS_TEXT:
Logger.d(TAG,""String_Node_Str"");
final int variation=attribute.inputType & EditorInfo.TYPE_MASK_VARIATION;
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_PASSWORD:
case EditorInfo.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD:
case EditorInfo.TYPE_TEXT_VARIATION_WEB_PASSWORD:
Logger.d(TAG,""String_Node_Str"");
mPredictionOn=false;
break;
case EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
case EditorInfo.TYPE_TEXT_VARIATION_URI:
case EditorInfo.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS:
Logger.d(TAG,""String_Node_Str"");
mPredictionOn=true;
mInputFieldSupportsAutoPick=false;
break;
default :
mInputFieldSupportsAutoPick=true;
mPredictionOn=true;
}
if (mAskPrefs.getInsertSpaceAfterCandidatePick()) {
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
case EditorInfo.TYPE_TEXT_VARIATION_URI:
case EditorInfo.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS:
mAutoSpace=false;
break;
default :
mAutoSpace=true;
}
}
 else {
mAutoSpace=false;
}
final int textFlag=attribute.inputType & EditorInfo.TYPE_MASK_FLAGS;
if ((textFlag & EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS) == EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS || (textFlag & EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE) == EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE) {
Logger.d(TAG,""String_Node_Str"");
mPredictionOn=false;
}
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
case EditorInfo.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_EMAIL,attribute,restarting);
break;
case EditorInfo.TYPE_TEXT_VARIATION_URI:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_URL,attribute,restarting);
break;
case EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_IM,attribute,restarting);
break;
default :
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_TEXT,attribute,restarting);
}
break;
default :
Logger.d(TAG,""String_Node_Str"");
mPredictionOn=false;
mAutoSpace=true;
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_TEXT,attribute,restarting);
}
mJustAddedAutoSpace=false;
setCandidatesViewShown(false);
mPredictionOn=mPredictionOn && mShowSuggestions;
TextEntryState.newSession(mPredictionOn);
clearSuggestions();
updateShiftStateNow();
}",0.9970950338912712
157218,"@Override public void setSuggestions(List<? extends CharSequence> suggestions,boolean completions,boolean typedWordValid,boolean haveMinimalSuggestion){
  if (mCandidateView != null) {
    mCandidateView.setSuggestions(suggestions,completions,typedWordValid,haveMinimalSuggestion && isAutoCorrect());
  }
}","@Override public void setSuggestions(List<? extends CharSequence> suggestions,boolean completions,boolean typedWordValid,boolean haveMinimalSuggestion){
  if (mCandidateView != null) {
    mCandidateView.setSuggestions(suggestions,typedWordValid,haveMinimalSuggestion && isAutoCorrect());
  }
}",0.98
157219,"public void pickSuggestionManually(int index,CharSequence suggestion){
  final String typedWord=mWord.getTypedWord().toString();
  if (mWord.isAtTagsSearchState()) {
    if (index == 0) {
      suggestion=typedWord;
    }
 else {
      getQuickKeyHistoryRecords().store(suggestion.toString(),suggestion.toString());
    }
  }
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  TextEntryState.acceptedSuggestion(typedWord,suggestion);
  try {
    if (mCompletionOn && mCompletions != null && index >= 0 && index < mCompletions.length) {
      CompletionInfo ci=mCompletions[index];
      if (ic != null) {
        ic.commitCompletion(ci);
      }
      mCommittedWord=suggestion;
      if (mCandidateView != null) {
        mCandidateView.clear();
      }
      return;
    }
    commitWordToInput(suggestion,false);
    TextEntryState.acceptedSuggestion(mWord.getTypedWord(),suggestion);
    if (mAutoSpace && (index == 0 || !mWord.isAtTagsSearchState())) {
      sendKeyChar((char)KeyCodes.SPACE);
      mJustAddedAutoSpace=true;
      setSpaceTimeStamp(true);
      TextEntryState.typedCharacter(' ',true);
    }
    mJustAutoAddedWord=false;
    if (!mWord.isAtTagsSearchState()) {
      if (index == 0) {
        checkAddToDictionaryWithAutoDictionary(mWord,Suggest.AdditionType.Picked);
      }
      final boolean showingAddToDictionaryHint=(!mJustAutoAddedWord) && index == 0 && (mShowSuggestions) && (!mSuggest.isValidWord(suggestion)) && (!mSuggest.isValidWord(suggestion.toString().toLowerCase(getCurrentAlphabetKeyboard().getLocale())));
      if (showingAddToDictionaryHint) {
        if (mCandidateView != null)         mCandidateView.showAddToDictionaryHint(suggestion);
      }
 else       if (!TextUtils.isEmpty(mCommittedWord) && !mJustAutoAddedWord) {
        setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,mWord.isAllUpperCase()),false,false,false);
        mWord.setFirstCharCapitalized(false);
      }
    }
  }
  finally {
    if (ic != null) {
      ic.endBatchEdit();
    }
  }
}","public void pickSuggestionManually(int index,CharSequence suggestion){
  final String typedWord=mWord.getTypedWord().toString();
  if (mWord.isAtTagsSearchState()) {
    if (index == 0) {
      suggestion=typedWord;
    }
 else {
      getQuickKeyHistoryRecords().store(suggestion.toString(),suggestion.toString());
    }
  }
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  TextEntryState.acceptedSuggestion(typedWord,suggestion);
  try {
    if (mCompletionOn && index >= 0 && index < mCompletions.length) {
      CompletionInfo ci=mCompletions[index];
      if (ic != null) {
        ic.commitCompletion(ci);
      }
      mCommittedWord=suggestion;
      if (mCandidateView != null) {
        mCandidateView.clear();
      }
      return;
    }
    commitWordToInput(suggestion,false);
    TextEntryState.acceptedSuggestion(mWord.getTypedWord(),suggestion);
    if (mAutoSpace && (index == 0 || !mWord.isAtTagsSearchState())) {
      sendKeyChar((char)KeyCodes.SPACE);
      mJustAddedAutoSpace=true;
      setSpaceTimeStamp(true);
      TextEntryState.typedCharacter(' ',true);
    }
    mJustAutoAddedWord=false;
    if (!mWord.isAtTagsSearchState()) {
      if (index == 0) {
        checkAddToDictionaryWithAutoDictionary(mWord,Suggest.AdditionType.Picked);
      }
      final boolean showingAddToDictionaryHint=(!mJustAutoAddedWord) && index == 0 && (mShowSuggestions) && (!mSuggest.isValidWord(suggestion)) && (!mSuggest.isValidWord(suggestion.toString().toLowerCase(getCurrentAlphabetKeyboard().getLocale())));
      if (showingAddToDictionaryHint) {
        if (mCandidateView != null)         mCandidateView.showAddToDictionaryHint(suggestion);
      }
 else       if (!TextUtils.isEmpty(mCommittedWord) && !mJustAutoAddedWord) {
        setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,mWord.isAllUpperCase()),false,false,false);
        mWord.setFirstCharCapitalized(false);
      }
    }
  }
  finally {
    if (ic != null) {
      ic.endBatchEdit();
    }
  }
}",0.4484936831875607
157220,"@Override public void onDisplayCompletions(CompletionInfo[] completions){
  if (BuildConfig.DEBUG) {
    Logger.d(TAG,""String_Node_Str"");
    for (int i=0; i < (completions != null ? completions.length : 0); i++) {
      Logger.d(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ completions[i]);
    }
  }
  if (mCompletionOn || (isFullscreenMode() && (completions != null))) {
    mCompletions=completions;
    mCompletionOn=true;
    if (completions == null) {
      clearSuggestions();
      return;
    }
    List<CharSequence> stringList=new ArrayList<>();
    for (    CompletionInfo ci : completions) {
      if (ci != null)       stringList.add(ci.getText());
    }
    setSuggestions(stringList,true,true,true);
    mWord.setPreferredWord(null);
    setCandidatesViewShown(true);
  }
}","@Override public void onDisplayCompletions(CompletionInfo[] completions){
  if (BuildConfig.DEBUG) {
    Logger.d(TAG,""String_Node_Str"");
    for (int i=0; i < (completions != null ? completions.length : 0); i++) {
      Logger.d(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ completions[i]);
    }
  }
  if (mCompletionOn || (isFullscreenMode() && (completions != null))) {
    mCompletions=copyCompletionsFromAndroid(completions);
    mCompletionOn=true;
    if (mCompletions.length == 0) {
      clearSuggestions();
    }
 else {
      List<CharSequence> stringList=new ArrayList<>();
      for (      CompletionInfo ci : mCompletions) {
        if (ci != null)         stringList.add(ci.getText());
      }
      setSuggestions(stringList,true,true,true);
      mWord.setPreferredWord(null);
      setCandidatesViewShown(true);
    }
  }
}",0.9144254278728606
157221,"public WordsSQLiteConnection(Context context,String databaseFilename,String currentLocale){
  super(context,databaseFilename,null,7);
  mContext=context;
  mCurrentLocale=currentLocale;
  mDbName=databaseFilename;
}","public WordsSQLiteConnection(Context context,String databaseFilename,String currentLocale){
  super(context,databaseFilename,null,7);
  mCurrentLocale=currentLocale;
  mDbName=databaseFilename;
}",0.951219512195122
157222,"private void updatePaths(){
  int size=mLines.size();
  if (size == 0)   return;
  LineElement line=null;
  int j=0;
  for (; j < size; j++) {
    line=mLines.get(j);
    if (line.updatePathPoints())     break;
  }
  if (j == size) {
    mLines.clear();
    return;
  }
 else {
    for (j--; j >= 0; j--) {
      mLines.remove(0);
    }
  }
  line.updatePath();
  size=mLines.size();
  LineElement lastLine=null;
  for (int i=1; i < size; i++) {
    line=mLines.get(i);
    if (line.updatePathPoints()) {
      if (lastLine == null) {
        lastLine=mLines.get(i - 1);
      }
      line.updatePathWithStartPoints(lastLine.mPoints[3],lastLine.mPoints[2]);
      lastLine=null;
    }
 else {
      mLines.remove(i);
      size=mLines.size();
    }
  }
}","private void updatePaths(){
  int size=mLines.size();
  if (size == 0)   return;
  LineElement line=null;
  int j=0;
  for (; j < size; j++) {
    line=mLines.get(j);
    if (line.updatePathPoints())     break;
  }
  if (j == size) {
    mLines.clear();
    return;
  }
 else {
    for (j--; j >= 0; j--) {
      mLines.remove(0);
    }
  }
  line.updatePath();
  size=mLines.size();
  LineElement lastLine;
  for (int i=1; i < size; i++) {
    line=mLines.get(i);
    if (line.updatePathPoints()) {
      lastLine=mLines.get(i - 1);
      line.updatePathWithStartPoints(lastLine.mPoints[3],lastLine.mPoints[2]);
    }
 else {
      mLines.remove(i);
      size=mLines.size();
    }
  }
}",0.954230235783634
157223,"private KeyboardMetadata addKeyboardRow(@NonNull AddOn.AddOnResourceMapping resourceMapping,Context context,int rowResId,final KeyboardDimens keyboardDimens,@KeyboardRowModeId int rowMode){
  XmlResourceParser parser=context.getResources().getXml(rowResId);
  List<Key> keys=getKeys();
  boolean inKey=false;
  boolean inRow=false;
  final float keyHorizontalGap=keyboardDimens.getKeyHorizontalGap();
  final float rowVerticalGap=keyboardDimens.getRowVerticalGap();
  float x=0;
  float y=rowVerticalGap;
  Key key=null;
  Row currentRow=null;
  float rowHeight=0;
  Resources res=context.getResources();
  KeyboardMetadata m=new KeyboardMetadata();
  try {
    int event;
    while ((event=parser.next()) != XmlResourceParser.END_DOCUMENT) {
      if (event == XmlResourceParser.START_TAG) {
        String tag=parser.getName();
        if (TAG_ROW.equals(tag)) {
          inRow=true;
          x=0;
          currentRow=createRowFromXml(resourceMapping,res,parser,rowMode);
          if (currentRow == null) {
            skipToEndOfRow(parser);
            inRow=false;
          }
 else {
            m.rowsCount++;
            m.isTopRow=currentRow.rowEdgeFlags == Keyboard.EDGE_TOP;
            if (!m.isTopRow) {
              y=getHeight() + getVerticalGap();
            }
            rowHeight=0;
          }
        }
 else         if (TAG_KEY.equals(tag)) {
          inKey=true;
          x+=(keyHorizontalGap / 2);
          key=createKeyFromXml(resourceMapping,mLocalContext,context,currentRow,keyboardDimens,(int)x,(int)y,parser);
          key.width=(int)(key.width - keyHorizontalGap);
          if (m.isTopRow)           keys.add(m.keysCount,key);
 else           keys.add(key);
          m.keysCount++;
          rowHeight=Math.max(key.height,rowHeight);
        }
      }
 else       if (event == XmlResourceParser.END_TAG) {
        if (inKey) {
          inKey=false;
          x+=(key.gap + key.width);
          x+=(keyHorizontalGap / 2);
          if (x > m.rowWidth) {
            m.rowWidth=(int)x;
            mMaxGenericRowsWidth=Math.max(mMaxGenericRowsWidth,m.rowWidth);
          }
        }
 else         if (inRow) {
          inRow=false;
          y+=currentRow.verticalGap;
          y+=rowHeight;
          y+=rowVerticalGap;
          m.totalHeight=(int)(m.totalHeight + (rowHeight + currentRow.verticalGap));
        }
      }
    }
  }
 catch (  Exception e) {
    Logger.e(TAG,""String_Node_Str"" + e);
    e.printStackTrace();
  }
  return m;
}","private KeyboardMetadata addKeyboardRow(@NonNull AddOn.AddOnResourceMapping resourceMapping,Context context,int rowResId,final KeyboardDimens keyboardDimens,@KeyboardRowModeId int rowMode){
  XmlResourceParser parser=context.getResources().getXml(rowResId);
  List<Key> keys=getKeys();
  boolean inKey=false;
  boolean inRow=false;
  final float keyHorizontalGap=keyboardDimens.getKeyHorizontalGap();
  final float rowVerticalGap=keyboardDimens.getRowVerticalGap();
  float x=0;
  float y=rowVerticalGap;
  Key key=null;
  Row currentRow=null;
  float rowHeight=0;
  Resources res=context.getResources();
  KeyboardMetadata m=new KeyboardMetadata();
  try {
    int event;
    while ((event=parser.next()) != XmlResourceParser.END_DOCUMENT) {
      if (event == XmlResourceParser.START_TAG) {
        String tag=parser.getName();
        if (TAG_ROW.equals(tag)) {
          inRow=true;
          x=0;
          currentRow=createRowFromXml(resourceMapping,res,parser,rowMode);
          if (currentRow == null) {
            skipToEndOfRow(parser);
            inRow=false;
          }
 else {
            m.rowsCount++;
            m.isTopRow=currentRow.rowEdgeFlags == Keyboard.EDGE_TOP;
            if (!m.isTopRow) {
              y=getHeight() + getVerticalGap();
            }
            rowHeight=0;
          }
        }
 else         if (TAG_KEY.equals(tag)) {
          inKey=true;
          x+=(keyHorizontalGap / 2);
          key=createKeyFromXml(resourceMapping,mLocalContext,context,currentRow,keyboardDimens,(int)x,(int)y,parser);
          key.width=(int)(key.width - keyHorizontalGap);
          if (m.isTopRow)           keys.add(m.keysCount,key);
 else           keys.add(key);
          m.keysCount++;
          rowHeight=Math.max(key.height,rowHeight);
        }
      }
 else       if (event == XmlResourceParser.END_TAG) {
        if (inKey) {
          inKey=false;
          x+=(key.gap + key.width);
          x+=(keyHorizontalGap / 2);
          if (x > m.rowWidth) {
            m.rowWidth=(int)x;
            mMaxGenericRowsWidth=Math.max(mMaxGenericRowsWidth,m.rowWidth);
          }
        }
 else         if (inRow) {
          inRow=false;
          y+=currentRow.verticalGap;
          y+=rowHeight;
          y+=rowVerticalGap;
          m.totalHeight=(int)(m.totalHeight + (rowHeight + currentRow.verticalGap));
        }
      }
    }
  }
 catch (  XmlPullParserException e) {
    Logger.e(TAG,e,""String_Node_Str"" + e.getMessage());
  }
catch (  IOException e) {
    Logger.e(TAG,e,""String_Node_Str"" + e.getMessage());
  }
  return m;
}",0.973335966818092
157224,"private int[] getKeyCodesFromPhysicalSequence(String keyCodesArray){
  String[] splitted=keyCodesArray.split(""String_Node_Str"");
  int[] keyCodes=new int[splitted.length];
  for (int i=0; i < keyCodes.length; i++) {
    try {
      keyCodes[i]=Integer.parseInt(splitted[i]);
    }
 catch (    final NumberFormatException nfe) {
      final String v=splitted[i];
      try {
        keyCodes[i]=android.view.KeyEvent.class.getField(v).getInt(null);
      }
 catch (      final Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
  return keyCodes;
}","@NonNull private int[] getKeyCodesFromPhysicalSequence(String keyCodesArray){
  String[] splitted=keyCodesArray.split(""String_Node_Str"");
  int[] keyCodes=new int[splitted.length];
  for (int i=0; i < keyCodes.length; i++) {
    try {
      keyCodes[i]=Integer.parseInt(splitted[i]);
    }
 catch (    final NumberFormatException nfe) {
      final String v=splitted[i];
      try {
        keyCodes[i]=android.view.KeyEvent.class.getField(v).getInt(null);
      }
 catch (      final Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
  return keyCodes;
}",0.9921671018276762
157225,"@Override public char[] getSentenceSeparators(){
  return mSentenceSeparators;
}","@Override @SuppressFBWarnings(""String_Node_Str"") public char[] getSentenceSeparators(){
  return mSentenceSeparators;
}",0.8040201005025126
157226,"private HardKeyboardSequenceHandler createPhysicalTranslatorFromResourceId(Context context,int qwertyTranslationId){
  HardKeyboardSequenceHandler translator=new HardKeyboardSequenceHandler();
  XmlPullParser parser=context.getResources().getXml(qwertyTranslationId);
  final String TAG=""String_Node_Str"";
  try {
    int event;
    boolean inTranslations=false;
    while ((event=parser.next()) != XmlPullParser.END_DOCUMENT) {
      String tag=parser.getName();
      if (event == XmlPullParser.START_TAG) {
        if (XML_TRANSLATION_TAG.equals(tag)) {
          inTranslations=true;
          AttributeSet attrs=Xml.asAttributeSet(parser);
          final String qwerty=attrs.getAttributeValue(null,XML_QWERTY_ATTRIBUTE);
          if (qwerty != null)           translator.addQwertyTranslation(qwerty);
        }
 else         if (inTranslations && XML_SEQUENCE_TAG.equals(tag)) {
          AttributeSet attrs=Xml.asAttributeSet(parser);
          final int[] keyCodes=getKeyCodesFromPhysicalSequence(attrs.getAttributeValue(null,XML_KEYS_ATTRIBUTE));
          final boolean isAlt=attrs.getAttributeBooleanValue(null,XML_ALT_ATTRIBUTE,false);
          final boolean isShift=attrs.getAttributeBooleanValue(null,XML_SHIFT_ATTRIBUTE,false);
          final String targetChar=attrs.getAttributeValue(null,XML_TARGET_ATTRIBUTE);
          final String targetCharCode=attrs.getAttributeValue(null,XML_TARGET_CHAR_CODE_ATTRIBUTE);
          final Integer target;
          if (targetCharCode == null)           target=(int)targetChar.charAt(0);
 else           target=Integer.valueOf(targetCharCode);
          if ((keyCodes == null) || (keyCodes.length == 0) || (target == null)) {
            Logger.e(TAG,""String_Node_Str"" + XML_KEYS_ATTRIBUTE + ""String_Node_Str""+ XML_TARGET_ATTRIBUTE);
          }
 else {
            if (!isAlt && !isShift) {
              translator.addSequence(keyCodes,target);
              translator.addShiftSequence(keyCodes,Character.toUpperCase(target));
            }
 else             if (isAlt) {
              translator.addAltSequence(keyCodes,target);
            }
 else {
              translator.addShiftSequence(keyCodes,target);
            }
          }
        }
 else         if (inTranslations && XML_MULTITAP_TAG.equals(tag)) {
          AttributeSet attrs=Xml.asAttributeSet(parser);
          final int[] keyCodes=getKeyCodesFromPhysicalSequence(attrs.getAttributeValue(null,XML_MULTITAP_KEY_ATTRIBUTE));
          if (keyCodes.length != 1)           throw new ParseException(""String_Node_Str"" + XML_MULTITAP_KEY_ATTRIBUTE + ""String_Node_Str""+ XML_MULTITAP_TAG+ ""String_Node_Str"",parser.getLineNumber());
          final boolean isAlt=attrs.getAttributeBooleanValue(null,XML_ALT_ATTRIBUTE,false);
          final boolean isShift=attrs.getAttributeBooleanValue(null,XML_SHIFT_ATTRIBUTE,false);
          final String targetCharacters=attrs.getAttributeValue(null,XML_MULTITAP_CHARACTERS_ATTRIBUTE);
          if (TextUtils.isEmpty(targetCharacters) || targetCharacters.length() < 2)           throw new ParseException(""String_Node_Str"" + XML_MULTITAP_CHARACTERS_ATTRIBUTE + ""String_Node_Str""+ XML_MULTITAP_TAG+ ""String_Node_Str"",parser.getLineNumber());
          for (int characterIndex=0; characterIndex <= targetCharacters.length(); characterIndex++) {
            int[] multiTapCodes=new int[characterIndex + 1];
            for (int tapIndex=0; tapIndex < multiTapCodes.length; tapIndex++) {
              multiTapCodes[tapIndex]=keyCodes[0];
            }
            if (characterIndex < targetCharacters.length()) {
              final int target=targetCharacters.charAt(characterIndex);
              if (!isAlt && !isShift) {
                translator.addSequence(multiTapCodes,target);
                translator.addShiftSequence(multiTapCodes,Character.toUpperCase(target));
              }
 else               if (isAlt) {
                translator.addAltSequence(keyCodes,target);
              }
 else {
                translator.addShiftSequence(keyCodes,target);
              }
            }
 else {
              if (!isAlt && !isShift) {
                translator.addSequence(multiTapCodes,KeyEventStateMachine.KEYCODE_FIRST_CHAR);
                translator.addShiftSequence(multiTapCodes,KeyEventStateMachine.KEYCODE_FIRST_CHAR);
              }
 else               if (isAlt) {
                translator.addAltSequence(keyCodes,KeyEventStateMachine.KEYCODE_FIRST_CHAR);
              }
 else {
                translator.addShiftSequence(keyCodes,KeyEventStateMachine.KEYCODE_FIRST_CHAR);
              }
            }
          }
        }
      }
 else       if (event == XmlPullParser.END_TAG) {
        if (XML_TRANSLATION_TAG.equals(tag)) {
          break;
        }
      }
    }
  }
 catch (  Exception e) {
    String errorMessage=String.format(Locale.US,""String_Node_Str"",getKeyboardName(),getKeyboardId(),getKeyboardAddOn().getPackageName(),qwertyTranslationId);
    Logger.e(TAG,errorMessage,e);
    e.printStackTrace();
    if (BuildConfig.DEBUG)     throw new RuntimeException(errorMessage,e);
  }
  return translator;
}","private HardKeyboardSequenceHandler createPhysicalTranslatorFromResourceId(Context context,int qwertyTranslationId){
  HardKeyboardSequenceHandler translator=new HardKeyboardSequenceHandler();
  XmlPullParser parser=context.getResources().getXml(qwertyTranslationId);
  final String TAG=""String_Node_Str"";
  try {
    int event;
    boolean inTranslations=false;
    while ((event=parser.next()) != XmlPullParser.END_DOCUMENT) {
      String tag=parser.getName();
      if (event == XmlPullParser.START_TAG) {
        if (XML_TRANSLATION_TAG.equals(tag)) {
          inTranslations=true;
          AttributeSet attrs=Xml.asAttributeSet(parser);
          final String qwerty=attrs.getAttributeValue(null,XML_QWERTY_ATTRIBUTE);
          if (qwerty != null)           translator.addQwertyTranslation(qwerty);
        }
 else         if (inTranslations && XML_SEQUENCE_TAG.equals(tag)) {
          AttributeSet attrs=Xml.asAttributeSet(parser);
          final int[] keyCodes=getKeyCodesFromPhysicalSequence(attrs.getAttributeValue(null,XML_KEYS_ATTRIBUTE));
          final boolean isAlt=attrs.getAttributeBooleanValue(null,XML_ALT_ATTRIBUTE,false);
          final boolean isShift=attrs.getAttributeBooleanValue(null,XML_SHIFT_ATTRIBUTE,false);
          final String targetChar=attrs.getAttributeValue(null,XML_TARGET_ATTRIBUTE);
          final String targetCharCode=attrs.getAttributeValue(null,XML_TARGET_CHAR_CODE_ATTRIBUTE);
          final Integer target;
          if (targetCharCode == null)           target=(int)targetChar.charAt(0);
 else           target=Integer.valueOf(targetCharCode);
          if ((keyCodes.length == 0) || (target == null)) {
            Logger.e(TAG,""String_Node_Str"" + XML_KEYS_ATTRIBUTE + ""String_Node_Str""+ XML_TARGET_ATTRIBUTE);
          }
 else {
            if (!isAlt && !isShift) {
              translator.addSequence(keyCodes,target);
              translator.addShiftSequence(keyCodes,Character.toUpperCase(target));
            }
 else             if (isAlt) {
              translator.addAltSequence(keyCodes,target);
            }
 else {
              translator.addShiftSequence(keyCodes,target);
            }
          }
        }
 else         if (inTranslations && XML_MULTITAP_TAG.equals(tag)) {
          AttributeSet attrs=Xml.asAttributeSet(parser);
          final int[] keyCodes=getKeyCodesFromPhysicalSequence(attrs.getAttributeValue(null,XML_MULTITAP_KEY_ATTRIBUTE));
          if (keyCodes.length != 1)           throw new XmlPullParserException(""String_Node_Str"" + XML_MULTITAP_KEY_ATTRIBUTE + ""String_Node_Str""+ XML_MULTITAP_TAG+ ""String_Node_Str"",parser,new ParseException(XML_MULTITAP_KEY_ATTRIBUTE,parser.getLineNumber()));
          final boolean isAlt=attrs.getAttributeBooleanValue(null,XML_ALT_ATTRIBUTE,false);
          final boolean isShift=attrs.getAttributeBooleanValue(null,XML_SHIFT_ATTRIBUTE,false);
          final String targetCharacters=attrs.getAttributeValue(null,XML_MULTITAP_CHARACTERS_ATTRIBUTE);
          if (TextUtils.isEmpty(targetCharacters) || targetCharacters.length() < 2)           throw new XmlPullParserException(""String_Node_Str"" + XML_MULTITAP_CHARACTERS_ATTRIBUTE + ""String_Node_Str""+ XML_MULTITAP_TAG+ ""String_Node_Str"",parser,new ParseException(XML_MULTITAP_CHARACTERS_ATTRIBUTE,parser.getLineNumber()));
          for (int characterIndex=0; characterIndex <= targetCharacters.length(); characterIndex++) {
            int[] multiTapCodes=new int[characterIndex + 1];
            for (int tapIndex=0; tapIndex < multiTapCodes.length; tapIndex++) {
              multiTapCodes[tapIndex]=keyCodes[0];
            }
            if (characterIndex < targetCharacters.length()) {
              final int target=targetCharacters.charAt(characterIndex);
              if (!isAlt && !isShift) {
                translator.addSequence(multiTapCodes,target);
                translator.addShiftSequence(multiTapCodes,Character.toUpperCase(target));
              }
 else               if (isAlt) {
                translator.addAltSequence(keyCodes,target);
              }
 else {
                translator.addShiftSequence(keyCodes,target);
              }
            }
 else {
              if (!isAlt && !isShift) {
                translator.addSequence(multiTapCodes,KeyEventStateMachine.KEYCODE_FIRST_CHAR);
                translator.addShiftSequence(multiTapCodes,KeyEventStateMachine.KEYCODE_FIRST_CHAR);
              }
 else               if (isAlt) {
                translator.addAltSequence(keyCodes,KeyEventStateMachine.KEYCODE_FIRST_CHAR);
              }
 else {
                translator.addShiftSequence(keyCodes,KeyEventStateMachine.KEYCODE_FIRST_CHAR);
              }
            }
          }
        }
      }
 else       if (event == XmlPullParser.END_TAG) {
        if (XML_TRANSLATION_TAG.equals(tag)) {
          break;
        }
      }
    }
  }
 catch (  XmlPullParserException e) {
    Logger.e(TAG,e,""String_Node_Str"",getKeyboardName(),getKeyboardId(),getKeyboardAddOn().getPackageName(),qwertyTranslationId);
    if (BuildConfig.DEBUG)     throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    Logger.e(TAG,e,""String_Node_Str"");
  }
  return translator;
}",0.9583736689254598
157227,"/** 
 * Checks if the given word occurs in the dictionary
 * @param word the word to search for. The search should be case-insensitive.
 * @return true if the word exists, false otherwise
 */
abstract public boolean isValidWord(CharSequence word);","/** 
 * Checks if the given word occurs in the dictionary
 * @param word the word to search for. The search should be case-insensitive.
 * @return true if the word exists, false otherwise
 */
public abstract boolean isValidWord(CharSequence word);",0.9635627530364372
157228,"/** 
 * Compares the contents of the character array with the typed word and returns true if they are the same.
 * @param word      the array of characters that make up the word
 * @param length    the number of valid characters in the character array
 * @param typedWord the word to compare with
 * @return true if they are the same, false otherwise.
 */
static protected boolean same(final char[] word,final int length,final CharSequence typedWord){
  if (typedWord.length() != length) {
    return false;
  }
  for (int i=0; i < length; i++) {
    if (word[i] != typedWord.charAt(i)) {
      return false;
    }
  }
  return true;
}","/** 
 * Compares the contents of the character array with the typed word and returns true if they are the same.
 * @param word      the array of characters that make up the word
 * @param length    the number of valid characters in the character array
 * @param typedWord the word to compare with
 * @return true if they are the same, false otherwise.
 */
protected static boolean same(final char[] word,final int length,final CharSequence typedWord){
  if (typedWord.length() != length) {
    return false;
  }
  for (int i=0; i < length; i++) {
    if (word[i] != typedWord.charAt(i)) {
      return false;
    }
  }
  return true;
}",0.9748031496062992
157229,"public boolean performOperationWithMemRetry(String TAG,MemRelatedOperation operation,boolean failWithException){
  reset();
  boolean retry=true;
  while (retry) {
    try {
      operation.operation();
      return true;
    }
 catch (    OutOfMemoryError e) {
      Log.w(TAG,""String_Node_Str"");
      retry=tryGCOrWait(TAG,e);
      if (!retry && failWithException)       throw e;
    }
  }
  return false;
}","public boolean performOperationWithMemRetry(final String tag,MemRelatedOperation operation,final boolean failWithException){
  reset();
  boolean retry=true;
  while (retry) {
    try {
      operation.operation();
      return true;
    }
 catch (    OutOfMemoryError e) {
      Log.w(tag,""String_Node_Str"");
      retry=tryGCOrWait(tag,e);
      if (!retry && failWithException)       throw e;
    }
  }
  return false;
}",0.9640287769784172
157230,"private void reset(){
  mGCTryCount=0;
}","private void reset(){
  mGarbageCollectingTryCount=0;
}",0.8421052631578947
157231,"private boolean tryGCOrWait(String metaData,Throwable t){
  if (mGCTryCount % GC_TRY_COUNT == 0) {
    System.gc();
  }
  if (mGCTryCount > GC_TRY_LOOP_MAX) {
    return false;
  }
 else {
    mGCTryCount++;
    try {
      Thread.sleep(GC_INTERVAL);
      return true;
    }
 catch (    InterruptedException e) {
      Log.e(metaData,""String_Node_Str"");
      return false;
    }
  }
}","private boolean tryGCOrWait(String metaData,Throwable t){
  if (mGarbageCollectingTryCount % GC_TRY_COUNT == 0) {
    System.gc();
  }
  if (mGarbageCollectingTryCount > GC_TRY_LOOP_MAX) {
    return false;
  }
 else {
    mGarbageCollectingTryCount++;
    try {
      Thread.sleep(GC_INTERVAL);
      return true;
    }
 catch (    InterruptedException e) {
      Log.e(metaData,""String_Node_Str"");
      return false;
    }
  }
}",0.9375764993880048
157232,"public static float convertDipToPx(Context context,float fDip){
  float fPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,fDip,context.getResources().getDisplayMetrics());
  return fPx;
}","public static float convertDipToPx(Context context,float dp){
  float fPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,context.getResources().getDisplayMetrics());
  return fPx;
}",0.9792746113989638
157233,"public boolean updatePathPoints(){
  float distance=mPathWidth / 2;
  float dx=0, dy=0;
  PointF leftTop, leftBottom, rightBottom, rightTop;
  PointF direction=new PointF(mEndX - mStartX,mEndY - mStartY);
  direction.x=direction.x / direction.length();
  direction.y=direction.y / direction.length();
  PointF directionV=new PointF(direction.y,-direction.x);
  dx=distance * directionV.x;
  dy=distance * directionV.y;
  leftTop=new PointF(mEndX + dx,mEndY + dy);
  rightTop=new PointF(mEndX - dx,mEndY - dy);
  leftBottom=new PointF(mStartX + dx,mStartY + dy);
  rightBottom=new PointF(mStartX - dx,mStartY - dy);
  mPoints[0]=leftTop;
  mPoints[1]=rightTop;
  mPoints[2]=rightBottom;
  mPoints[3]=leftBottom;
  return true;
}","public boolean updatePathPoints(){
  float distance=mPathWidth / 2;
  PointF direction=new PointF(mEndX - mStartX,mEndY - mStartY);
  direction.x=direction.x / direction.length();
  direction.y=direction.y / direction.length();
  PointF directionV=new PointF(direction.y,-direction.x);
  float dx=distance * directionV.x;
  float dy=distance * directionV.y;
  PointF leftTop=new PointF(mEndX + dx,mEndY + dy);
  PointF rightTop=new PointF(mEndX - dx,mEndY - dy);
  PointF leftBottom=new PointF(mStartX + dx,mStartY + dy);
  PointF rightBottom=new PointF(mStartX - dx,mStartY - dy);
  mPoints[0]=leftTop;
  mPoints[1]=rightTop;
  mPoints[2]=rightBottom;
  mPoints[3]=leftBottom;
  return true;
}",0.9204785362420832
157234,"public ArrayList<String> getCandidates(){
  int[] corners=getPathCorners(mXs,mYs,CURVATURE_SIZE);
  int numSuggestions=5;
  ArrayList<String> candidates=new ArrayList<>();
  ArrayList<Double> weights=new ArrayList<>();
  int startChar='-';
  for (  Keyboard.Key k : mKeys) {
    if (Math.abs(k.x + k.width / 2 - corners[0]) < k.width / 2 && Math.abs(k.y + k.height / 2 - corners[1]) < k.height / 2) {
      startChar=k.getPrimaryCode();
      break;
    }
  }
  for (int i=0; i < mWords.size(); i++) {
    int code=mWords.get(i).charAt(0);
    if (code < startChar)     continue;
    if (code > startChar)     break;
    double weight=getWordDistance(corners,mWordsCorners.get(i));
    if (weights.size() == numSuggestions && weight >= weights.get(weights.size() - 1))     continue;
    int j=0;
    while (j < weights.size() && weights.get(j) <= weight)     j++;
    weights.add(j,weight);
    candidates.add(j,mWords.get(i));
    if (weights.size() > 5) {
      weights.remove(weights.size() - 1);
      candidates.remove(candidates.size() - 1);
    }
  }
  return candidates;
}","public ArrayList<String> getCandidates(){
  ArrayList<String> candidates=new ArrayList<>();
  if (mWordsCorners.size() != mWords.size()) {
    return candidates;
  }
  int[] corners=getPathCorners(mXs,mYs,CURVATURE_SIZE);
  int numSuggestions=5;
  ArrayList<Double> weights=new ArrayList<>();
  int startChar='-';
  for (  Keyboard.Key k : mKeys) {
    if (Math.abs(k.x + k.width / 2 - corners[0]) < k.width / 2 && Math.abs(k.y + k.height / 2 - corners[1]) < k.height / 2) {
      startChar=k.getPrimaryCode();
      break;
    }
  }
  for (int i=0; i < mWords.size(); i++) {
    int code=mWords.get(i).charAt(0);
    if (code < startChar)     continue;
    if (code > startChar)     break;
    double weight=getWordDistance(corners,mWordsCorners.get(i));
    if (weights.size() == numSuggestions && weight >= weights.get(weights.size() - 1))     continue;
    int j=0;
    while (j < weights.size() && weights.get(j) <= weight)     j++;
    weights.add(j,weight);
    candidates.add(j,mWords.get(i));
    if (weights.size() > 5) {
      weights.remove(weights.size() - 1);
      candidates.remove(candidates.size() - 1);
    }
  }
  return candidates;
}",0.9221128021486124
157235,"/** 
 * Did we come close enough to a normal (alphabet) character for this to be considered the start of a gesture?
 */
public boolean isValidStartTouch(int x,int y){
  if (mWordsCornersState == LoadingState.LOADING)   return false;
  for (  Keyboard.Key key : mKeys) {
    final float closestX=(x < key.x) ? key.x : (x > (key.x + key.width)) ? (key.x + key.width) : x;
    final float closestY=(y < key.y) ? key.y : (y > (key.y + key.height)) ? (key.y + key.height) : y;
    final float xDist=Math.abs(closestX - x);
    final float yDist=Math.abs(closestY - y);
    if (xDist <= key.width / 3f && yDist <= key.height / 3f && key.label != null && key.label.length() == 1 && Character.isLetter(key.label.charAt(0))) {
      return true;
    }
  }
  return false;
}","/** 
 * Did we come close enough to a normal (alphabet) character for this to be considered the start of a gesture?
 */
public boolean isValidStartTouch(int x,int y){
  for (  Keyboard.Key key : mKeys) {
    final float closestX=(x < key.x) ? key.x : (x > (key.x + key.width)) ? (key.x + key.width) : x;
    final float closestY=(y < key.y) ? key.y : (y > (key.y + key.height)) ? (key.y + key.height) : y;
    final float xDist=Math.abs(closestX - x);
    final float yDist=Math.abs(closestY - y);
    if (xDist <= key.width / 3f && yDist <= key.height / 3f && key.label != null && key.label.length() == 1 && Character.isLetter(key.label.charAt(0))) {
      return true;
    }
  }
  return false;
}",0.9548563611491108
157236,"@Override public void onGestureTypingInputDone(){
  if (!mGestureTypingEnabled)   return;
  InputConnection ic=getCurrentInputConnection();
  if (mGestureTypingEnabled && ic != null) {
    ArrayList<String> gestureTypingPossibilities=mGestureTypingDetector.getCandidates();
    final boolean isShifted=mShiftKeyState.isActive();
    final boolean isCapsLocked=mShiftKeyState.isLocked();
    if (gestureTypingPossibilities.size() > 0) {
      ic.beginBatchEdit();
      final boolean alsoAddSpace=TextEntryState.getState() == TextEntryState.State.PERFORMED_GESTURE;
      abortCorrectionAndResetPredictionState(false);
      if (alsoAddSpace) {
        ic.commitText(""String_Node_Str"",1);
      }
      CharSequence word=gestureTypingPossibilities.get(0);
      mWord.reset();
      mWord.setAutoCapitalized(isShifted || isCapsLocked);
      mWord.simulateTypedWord(word);
      commitWordToInput(mWord.getTypedWord(),false);
      TextEntryState.performedGesture();
      if (gestureTypingPossibilities.size() > 1) {
        setCandidatesViewShown(true);
        setSuggestions(gestureTypingPossibilities,false,true,true);
      }
 else {
        setSuggestions(Collections.<CharSequence>emptyList(),false,false,false);
      }
      ic.endBatchEdit();
    }
    mGestureTypingDetector.clearGesture();
  }
}","@Override public void onGestureTypingInputDone(){
  if (!getGestureTypeingEnabled())   return;
  InputConnection ic=getCurrentInputConnection();
  if (getGestureTypeingEnabled() && ic != null) {
    ArrayList<String> gestureTypingPossibilities=mGestureTypingDetector.getCandidates();
    final boolean isShifted=mShiftKeyState.isActive();
    final boolean isCapsLocked=mShiftKeyState.isLocked();
    if (gestureTypingPossibilities.size() > 0) {
      ic.beginBatchEdit();
      final boolean alsoAddSpace=TextEntryState.getState() == TextEntryState.State.PERFORMED_GESTURE;
      abortCorrectionAndResetPredictionState(false);
      if (alsoAddSpace) {
        ic.commitText(""String_Node_Str"",1);
      }
      CharSequence word=gestureTypingPossibilities.get(0);
      mWord.reset();
      mWord.setAutoCapitalized(isShifted || isCapsLocked);
      mWord.simulateTypedWord(word);
      commitWordToInput(mWord.getTypedWord(),false);
      TextEntryState.performedGesture();
      if (gestureTypingPossibilities.size() > 1) {
        setCandidatesViewShown(true);
        setSuggestions(gestureTypingPossibilities,false,true,true);
      }
 else {
        setSuggestions(Collections.<CharSequence>emptyList(),false,false,false);
      }
      ic.endBatchEdit();
    }
    mGestureTypingDetector.clearGesture();
  }
}",0.9946646341463414
157237,"@Override public void onGestureTypingInput(int x,int y,long eventTime){
  if (!mGestureTypingEnabled)   return;
  mGestureTypingDetector.addPoint(x,y,eventTime);
}","@Override public void onGestureTypingInput(int x,int y,long eventTime){
  if (!getGestureTypeingEnabled())   return;
  mGestureTypingDetector.addPoint(x,y,eventTime);
}",0.9788519637462236
157238,"@Override public boolean isValidGestureTypingStart(int x,int y){
  if (!mGestureTypingEnabled)   return false;
  mGestureTypingDetector.setKeys(getCurrentAlphabetKeyboard().getKeys(),this,getCurrentAlphabetKeyboard().getMinWidth(),getCurrentAlphabetKeyboard().getHeight());
  return mGestureTypingDetector.isValidStartTouch(x,y);
}","@Override public boolean isValidGestureTypingStart(int x,int y){
  if (!getGestureTypeingEnabled())   return false;
  mGestureTypingDetector.setKeys(getCurrentAlphabetKeyboard().getKeys(),this,getCurrentAlphabetKeyboard().getMinWidth(),getCurrentAlphabetKeyboard().getHeight());
  return mGestureTypingDetector.isValidStartTouch(x,y);
}",0.9895052473763118
157239,"@Override public void onGestureTypingInputStart(int x,int y,long eventTime){
  if (!mGestureTypingEnabled)   return;
  mGestureTypingDetector.clearGesture();
  mGestureTypingDetector.addPoint(x,y,eventTime);
}","@Override public void onGestureTypingInputStart(int x,int y,long eventTime){
  if (!getGestureTypeingEnabled())   return;
  mGestureTypingDetector.clearGesture();
  mGestureTypingDetector.addPoint(x,y,eventTime);
}",0.9361702127659576
157240,"@RequiresApi(Build.VERSION_CODES.HONEYCOMB) private void storeKeyboardByAppMapping(){
  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(mContext);
  Set<String> mapping=new HashSet<>(mAlphabetKeyboardIndexByPackageId.size());
  for (  Map.Entry<String,CharSequence> aMapping : mAlphabetKeyboardIndexByPackageId.entrySet()) {
    mapping.add(String.format(Locale.US,""String_Node_Str"",aMapping.getKey(),aMapping.getValue()));
  }
  final SharedPreferences.Editor editor=sharedPreferences.edit();
  editor.putStringSet(mContext.getString(R.string.settings_key_persistent_layout_per_package_id_mapping),mapping);
  editor.commit();
}","@RequiresApi(Build.VERSION_CODES.HONEYCOMB) private void storeKeyboardByAppMapping(){
  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(mContext);
  Set<String> mapping=new HashSet<>(mAlphabetKeyboardIndexByPackageId.size());
  for (  Map.Entry<String,CharSequence> aMapping : mAlphabetKeyboardIndexByPackageId.entrySet()) {
    mapping.add(String.format(Locale.US,""String_Node_Str"",aMapping.getKey(),aMapping.getValue()));
  }
  final SharedPreferences.Editor editor=sharedPreferences.edit();
  editor.putStringSet(mContext.getString(R.string.settings_key_persistent_layout_per_package_id_mapping),mapping);
  SharedPreferencesCompat.EditorCompat.getInstance().apply(editor);
}",0.944
157241,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  Context appContext=getActivity().getApplicationContext();
  mRecyclerView=(RecyclerView)view.findViewById(R.id.recycler_view);
  mRecyclerView.setHasFixedSize(false);
  mRecyclerView.setLayoutManager(createLayoutManager(appContext));
  mRecyclerView.setAdapter(new DemoKeyboardAdapter());
  mRecyclerViewItemTouchHelper.attachToRecyclerView(mRecyclerView);
  if (mIsSingleSelection) {
    mSelectedKeyboardView=(DemoAnyKeyboardView)view.findViewById(R.id.selected_demo_keyboard_view);
    if (mSimulateTyping) {
      mSelectedKeyboardView.setSimulatedTypingText(""String_Node_Str"");
    }
  }
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  Context appContext=getActivity().getApplicationContext();
  mRecyclerView=view.findViewById(R.id.recycler_view);
  mRecyclerView.setHasFixedSize(false);
  mRecyclerView.setLayoutManager(createLayoutManager(appContext));
  mRecyclerView.setAdapter(new DemoKeyboardAdapter());
  mRecyclerViewItemTouchHelper.attachToRecyclerView(mRecyclerView);
  if (mIsSingleSelection) {
    mSelectedKeyboardView=view.findViewById(R.id.selected_demo_keyboard_view);
    if (mSimulateTyping) {
      mSelectedKeyboardView.setSimulatedTypingText(""String_Node_Str"");
    }
  }
}",0.9750178443968592
157242,"@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  super.onCreateOptionsMenu(menu,inflater);
  if (hasOptionsMenu()) {
    inflater.inflate(R.menu.add_on_selector_menu,menu);
    menu.findItem(R.id.add_on_market_search_menu_option).setVisible(getMarketSearchTitle() != 0);
    menu.findItem(R.id.tweaks_menu_option).setVisible(mHasTweaksOption);
  }
}","@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  super.onCreateOptionsMenu(menu,inflater);
  inflater.inflate(R.menu.add_on_selector_menu,menu);
  menu.findItem(R.id.add_on_market_search_menu_option).setVisible(getMarketSearchTitle() != 0);
  menu.findItem(R.id.tweaks_menu_option).setVisible(mHasTweaksOption);
}",0.95
157243,"@SuppressWarnings(""String_Node_Str"") private void saveCorners(Context context){
  try {
    final File outFile=new File(context.getFilesDir(),""String_Node_Str"");
    outFile.createNewFile();
    DataOutputStream writer=new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(new FileOutputStream(outFile))));
    for (    int[] corners : mWordsCorners) {
      writer.writeShort(corners.length);
      for (int i=0; i < corners.length / 2; i++) {
        writer.writeShort((short)(corners[i * 2] / (float)width * WORDS_SIZE));
        writer.writeShort((short)(corners[i * 2 + 1] / (float)height * WORDS_SIZE));
      }
    }
    writer.flush();
    writer.close();
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
}","@SuppressWarnings(""String_Node_Str"") private void saveCorners(Context context){
  try {
    final File outFile=new File(context.getFilesDir(),""String_Node_Str"");
    outFile.createNewFile();
    DataOutputStream writer=new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(new FileOutputStream(outFile))));
    for (    int[] corners : mWordsCorners) {
      writer.writeShort(corners.length);
      for (int i=0; i < corners.length / 2; i++) {
        writer.writeShort((short)(corners[i * 2] * WORDS_SIZE / width));
        writer.writeShort((short)(corners[i * 2 + 1] * WORDS_SIZE / height));
      }
    }
    writer.flush();
    writer.close();
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
}",0.9691119691119692
157244,"private int[] getPathCorners(ArrayList<Integer> xs,ArrayList<Integer> ys,int curvatureSize){
  ArrayList<Integer> maxima=new ArrayList<>();
  if (xs.size() > 0) {
    maxima.add(xs.get(0));
    maxima.add(ys.get(0));
  }
  for (int i=0; i < xs.size(); i++) {
    if (curvature(xs,ys,i,curvatureSize)) {
      int end=i;
      while (end < xs.size()) {
        if (curvature(xs,ys,end,curvatureSize)) {
          break;
        }
        end++;
      }
      int avgX=0;
      int avgY=0;
      for (int j=i; j <= end; j++) {
        avgX+=xs.get(i);
        avgY+=ys.get(i);
      }
      avgX/=(end - i + 1);
      avgY/=(end - i + 1);
      maxima.add(avgX);
      maxima.add(avgY);
      i=end;
    }
  }
  if (xs.size() > 1) {
    maxima.add(xs.get(xs.size() - 1));
    maxima.add(ys.get(ys.size() - 1));
  }
  int[] arr=new int[maxima.size()];
  for (int i=0; i < maxima.size(); i++)   arr[i]=maxima.get(i);
  return arr;
}","private int[] getPathCorners(ArrayList<Integer> xs,ArrayList<Integer> ys,int curvatureSize){
  ArrayList<Integer> maxima=new ArrayList<>();
  if (xs.size() > 0) {
    maxima.add(xs.get(0));
    maxima.add(ys.get(0));
  }
  for (int i=0; i < xs.size(); i++) {
    if (curvature(xs,ys,i,curvatureSize)) {
      maxima.add(xs.get(i));
      maxima.add(ys.get(i));
    }
  }
  if (xs.size() > 1) {
    maxima.add(xs.get(xs.size() - 1));
    maxima.add(ys.get(ys.size() - 1));
  }
  int[] arr=new int[maxima.size()];
  for (int i=0; i < maxima.size(); i++)   arr[i]=maxima.get(i);
  return arr;
}",0.4700460829493088
157245,"private double getWordDistance(int[] user,int[] word){
  if (word.length > user.length)   return Float.MAX_VALUE;
  double dist=0;
  int currentWordIndex=0;
  for (int i=0; i < user.length / 2; i++) {
    int ux=user[i * 2];
    int uy=user[i * 2 + 1];
    double d=dist(ux,uy,word[currentWordIndex * 2] / WORDS_SIZE * width,word[currentWordIndex * 2 + 1] / WORDS_SIZE * height);
    double d2;
    if (currentWordIndex + 1 < word.length / 2 && i > 0 && (d2=dist(ux,uy,word[currentWordIndex * 2 + 2] / WORDS_SIZE * width,word[currentWordIndex * 2 + 3] / WORDS_SIZE * width)) < d) {
      d=d2;
      currentWordIndex++;
    }
    dist+=d;
  }
  while (currentWordIndex + 1 < word.length / 2) {
    currentWordIndex++;
    dist+=10 * dist(user[user.length - 2],user[user.length - 1],word[currentWordIndex * 2] / WORDS_SIZE * width,word[currentWordIndex * 2 + 1] / WORDS_SIZE * width);
  }
  return dist;
}","private double getWordDistance(int[] user,int[] word){
  if (word.length > user.length)   return Float.MAX_VALUE;
  double dist=0;
  int currentWordIndex=0;
  for (int i=0; i < user.length / 2; i++) {
    int ux=user[i * 2];
    int uy=user[i * 2 + 1];
    double d=dist(ux,uy,word[currentWordIndex * 2] * width / WORDS_SIZE,word[currentWordIndex * 2 + 1] * height / WORDS_SIZE);
    double d2;
    if (currentWordIndex + 1 < word.length / 2 && i > 0 && (d2=dist(ux,uy,word[currentWordIndex * 2 + 2] * width / WORDS_SIZE,word[currentWordIndex * 2 + 3] * height / WORDS_SIZE)) < d) {
      d=d2;
      currentWordIndex++;
    }
    dist+=d;
  }
  while (currentWordIndex + 1 < word.length / 2) {
    currentWordIndex++;
    dist+=10 * dist(user[user.length - 2],user[user.length - 1],word[currentWordIndex * 2] * width / WORDS_SIZE,word[currentWordIndex * 2 + 1] * height / WORDS_SIZE);
  }
  return dist;
}",0.9447513812154696
157246,"/** 
 * Did we come close enough to a normal (alphabet) character for this to be considered the start of a gesture?
 */
public boolean isValidStartTouch(int x,int y){
  for (  Keyboard.Key key : keys) {
    final float closestX=(x < key.x) ? key.x : (x > (key.x + key.width)) ? (key.x + key.width) : x;
    final float closestY=(y < key.y) ? key.y : (y > (key.y + key.height)) ? (key.y + key.height) : y;
    final float xDist=Math.abs(closestX - x);
    final float yDist=Math.abs(closestY - y);
    if (xDist <= key.width / 3f && yDist <= key.height / 3f && key.label != null && key.label.length() == 1 && Character.isLetter(key.label.charAt(0))) {
      return true;
    }
  }
  return false;
}","/** 
 * Did we come close enough to a normal (alphabet) character for this to be considered the start of a gesture?
 */
public boolean isValidStartTouch(int x,int y){
  for (  Keyboard.Key key : mKeys) {
    final float closestX=(x < key.x) ? key.x : (x > (key.x + key.width)) ? (key.x + key.width) : x;
    final float closestY=(y < key.y) ? key.y : (y > (key.y + key.height)) ? (key.y + key.height) : y;
    final float xDist=Math.abs(closestX - x);
    final float yDist=Math.abs(closestY - y);
    if (xDist <= key.width / 3f && yDist <= key.height / 3f && key.label != null && key.label.length() == 1 && Character.isLetter(key.label.charAt(0))) {
      return true;
    }
  }
  return false;
}",0.9978494623655914
157247,"public void clearGesture(){
  xs.clear();
  ys.clear();
  times.clear();
}","public void clearGesture(){
  mXs.clear();
  mYs.clear();
  mTimestamps.clear();
}",0.9102564102564102
157248,"public ArrayList<String> getCandidates(){
  DEBUG_PATH_CORNERS=getPathCorners();
  DEBUG_PATH_X.clear();
  DEBUG_PATH_X.addAll(xs);
  DEBUG_PATH_Y.clear();
  DEBUG_PATH_Y.addAll(ys);
  ArrayList<String> arr=new ArrayList<>();
  arr.add(words.get(0));
  arr.add(words.get(1));
  return arr;
}","public ArrayList<String> getCandidates(){
  DEBUG_PATH_CORNERS=getPathCorners();
  DEBUG_PATH_X.clear();
  DEBUG_PATH_X.addAll(mXs);
  DEBUG_PATH_Y.clear();
  DEBUG_PATH_Y.addAll(mYs);
  ArrayList<String> arr=new ArrayList<>();
  arr.add(mWords.get(0));
  arr.add(mWords.get(1));
  return arr;
}",0.9795221843003412
157249,"private ArrayList<Integer> getPathCorners(){
  ArrayList<Integer> maxima=new ArrayList<>();
  if (xs.size() > 0) {
    maxima.add(xs.get(0));
    maxima.add(ys.get(0));
  }
  for (int i=0; i < xs.size(); i++) {
    if (curvature(i)) {
      int end=i;
      while (end < xs.size()) {
        if (curvature(end)) {
          break;
        }
        end++;
      }
      int avg_x=0;
      int avg_y=0;
      for (int j=i; j <= end; j++) {
        avg_x+=xs.get(i);
        avg_y+=ys.get(i);
      }
      avg_x/=(end - i + 1);
      avg_y/=(end - i + 1);
      maxima.add(avg_x);
      maxima.add(avg_y);
      i=end;
    }
  }
  if (xs.size() > 1) {
    maxima.add(xs.get(xs.size() - 1));
    maxima.add(ys.get(ys.size() - 1));
  }
  return maxima;
}","private ArrayList<Integer> getPathCorners(){
  ArrayList<Integer> maxima=new ArrayList<>();
  if (mXs.size() > 0) {
    maxima.add(mXs.get(0));
    maxima.add(mYs.get(0));
  }
  for (int i=0; i < mXs.size(); i++) {
    if (curvature(i)) {
      int end=i;
      while (end < mXs.size()) {
        if (curvature(end)) {
          break;
        }
        end++;
      }
      int avgX=0;
      int avgY=0;
      for (int j=i; j <= end; j++) {
        avgX+=mXs.get(i);
        avgY+=mYs.get(i);
      }
      avgX/=(end - i + 1);
      avgY/=(end - i + 1);
      maxima.add(avgX);
      maxima.add(avgY);
      i=end;
    }
  }
  if (mXs.size() > 1) {
    maxima.add(mXs.get(mXs.size() - 1));
    maxima.add(mYs.get(mYs.size() - 1));
  }
  return maxima;
}",0.5737051792828686
157250,"public GestureTypingDetector(Iterable<Keyboard.Key> keys,Context context){
  this.keys=keys;
  try {
    InputStream is=context.getResources().openRawResource(R.raw.gesturetyping_temp_dictionary);
    BufferedReader reader=new BufferedReader(new InputStreamReader(is));
    String line;
    while ((line=reader.readLine()) != null) {
      if (!line.isEmpty())       words.add(line);
    }
    reader.close();
    is.close();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public GestureTypingDetector(Iterable<Keyboard.Key> keys,Context context){
  this.mKeys=keys;
  try {
    InputStream is=context.getResources().openRawResource(R.raw.gesturetyping_temp_dictionary);
    BufferedReader reader=new BufferedReader(new InputStreamReader(is));
    String line;
    while ((line=reader.readLine()) != null) {
      if (!line.isEmpty())       mWords.add(line);
    }
    reader.close();
    is.close();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.993975903614458
157251,"public void addPoint(int x,int y,long time){
  if (xs.size() > 0) {
    int dx=xs.get(xs.size() - 1) - x;
    int dy=ys.get(ys.size() - 1) - y;
    if (dx * dx + dy * dy <= 5)     return;
  }
  xs.add(x);
  ys.add(y);
  times.add(time);
}","public void addPoint(int x,int y,long time){
  if (mXs.size() > 0) {
    int dx=mXs.get(mXs.size() - 1) - x;
    int dy=mYs.get(mYs.size() - 1) - y;
    if (dx * dx + dy * dy <= 5)     return;
  }
  mXs.add(x);
  mYs.add(y);
  mTimestamps.add(time);
}",0.8302658486707567
157252,"private boolean curvature(int middle){
  int si=Math.max(0,middle - CURVATURE_SIZE);
  int sx=xs.get(si);
  int sy=ys.get(si);
  int ei=Math.min(xs.size() - 1,middle + CURVATURE_SIZE);
  int ex=xs.get(ei);
  int ey=ys.get(ei);
  int mx=xs.get(middle);
  int my=ys.get(middle);
  double m1=Math.sqrt((sx - mx) * (sx - mx) + (sy - my) * (sy - my));
  double m2=Math.sqrt((ex - mx) * (ex - mx) + (ey - my) * (ey - my));
  double dot=(sx - mx) * (ex - mx) + (sy - my) * (ey - my);
  double angle=Math.abs(Math.acos(dot / m1 / m2));
  System.out.println(""String_Node_Str"" + Math.toDegrees(angle));
  return angle > 0 && angle <= CURVATURE_THRESHOLD;
}","private boolean curvature(int middle){
  int si=Math.max(0,middle - CURVATURE_SIZE);
  int sx=mXs.get(si);
  int sy=mYs.get(si);
  int ei=Math.min(mXs.size() - 1,middle + CURVATURE_SIZE);
  int ex=mXs.get(ei);
  int ey=mYs.get(ei);
  int mx=mXs.get(middle);
  int my=mYs.get(middle);
  double m1=Math.sqrt((sx - mx) * (sx - mx) + (sy - my) * (sy - my));
  double m2=Math.sqrt((ex - mx) * (ex - mx) + (ey - my) * (ey - my));
  double dot=(sx - mx) * (ex - mx) + (sy - my) * (ey - my);
  double angle=Math.abs(Math.acos(dot / m1 / m2));
  System.out.println(""String_Node_Str"" + Math.toDegrees(angle));
  return angle > 0 && angle <= CURVATURE_THRESHOLD;
}",0.8545034642032333
157253,"@Override public void onGestureTypingInputDone(){
  InputConnection ic=getCurrentInputConnection();
  if (mGestureTypingEnabled && ic != null) {
    ArrayList<String> gestureTypingPossibilities=gestureTypingDetector.getCandidates();
    final boolean isShifted=mShiftKeyState.isActive();
    final boolean isCapsLocked=mShiftKeyState.isLocked();
    if (gestureTypingPossibilities.size() > 0) {
      ic.beginBatchEdit();
      final boolean alsoAddSpace=TextEntryState.getState() == TextEntryState.State.PERFORMED_GESTURE;
      abortCorrectionAndResetPredictionState(false);
      if (alsoAddSpace) {
        ic.commitText(""String_Node_Str"",1);
      }
      CharSequence word=gestureTypingPossibilities.get(0);
      mWord.reset();
      mWord.setAutoCapitalized(isShifted || isCapsLocked);
      mWord.simulateTypedWord(word);
      commitWordToInput(mWord.getTypedWord(),false);
      TextEntryState.performedGesture();
      if (gestureTypingPossibilities.size() > 1) {
        setCandidatesViewShown(true);
        setSuggestions(gestureTypingPossibilities,false,true,true);
      }
 else {
        setSuggestions(Collections.<CharSequence>emptyList(),false,false,false);
      }
      ic.endBatchEdit();
    }
    gestureTypingDetector.clearGesture();
  }
}","@Override public void onGestureTypingInputDone(){
  InputConnection ic=getCurrentInputConnection();
  if (mGestureTypingEnabled && ic != null) {
    ArrayList<String> gestureTypingPossibilities=mGestureTypingDetector.getCandidates();
    final boolean isShifted=mShiftKeyState.isActive();
    final boolean isCapsLocked=mShiftKeyState.isLocked();
    if (gestureTypingPossibilities.size() > 0) {
      ic.beginBatchEdit();
      final boolean alsoAddSpace=TextEntryState.getState() == TextEntryState.State.PERFORMED_GESTURE;
      abortCorrectionAndResetPredictionState(false);
      if (alsoAddSpace) {
        ic.commitText(""String_Node_Str"",1);
      }
      CharSequence word=gestureTypingPossibilities.get(0);
      mWord.reset();
      mWord.setAutoCapitalized(isShifted || isCapsLocked);
      mWord.simulateTypedWord(word);
      commitWordToInput(mWord.getTypedWord(),false);
      TextEntryState.performedGesture();
      if (gestureTypingPossibilities.size() > 1) {
        setCandidatesViewShown(true);
        setSuggestions(gestureTypingPossibilities,false,true,true);
      }
 else {
        setSuggestions(Collections.<CharSequence>emptyList(),false,false,false);
      }
      ic.endBatchEdit();
    }
    mGestureTypingDetector.clearGesture();
  }
}",0.9976303317535544
157254,"@Override public void onGestureTypingInput(int x,int y,long eventTime){
  gestureTypingDetector.addPoint(x,y,eventTime);
}","@Override public void onGestureTypingInput(int x,int y,long eventTime){
  mGestureTypingDetector.addPoint(x,y,eventTime);
}",0.9877551020408164
157255,"@Override public boolean isValidGestureTypingStart(int x,int y){
  if (gestureTypingDetector == null) {
    gestureTypingDetector=new GestureTypingDetector(getCurrentAlphabetKeyboard().getKeys(),this);
  }
  return gestureTypingDetector.isValidStartTouch(x,y);
}","@Override public boolean isValidGestureTypingStart(int x,int y){
  if (mGestureTypingDetector == null) {
    mGestureTypingDetector=new GestureTypingDetector(getCurrentAlphabetKeyboard().getKeys(),this);
  }
  return mGestureTypingDetector.isValidStartTouch(x,y);
}",0.98292220113852
157256,"@Override public void onGestureTypingInputStart(int x,int y,long eventTime){
  gestureTypingDetector.clearGesture();
  gestureTypingDetector.addPoint(x,y,eventTime);
}","@Override public void onGestureTypingInputStart(int x,int y,long eventTime){
  mGestureTypingDetector.clearGesture();
  mGestureTypingDetector.addPoint(x,y,eventTime);
}",0.9821428571428572
157257,"private void setInitialCondensedState(Configuration newConfig){
  final String defaultCondensed=mAskPrefs.getInitialKeyboardCondenseState();
  mKeyboardInCondensedMode=CondenseType.None;
switch (defaultCondensed) {
case ""String_Node_Str"":
    mKeyboardInCondensedMode=CondenseType.Split;
  break;
case ""String_Node_Str"":
if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) mKeyboardInCondensedMode=CondenseType.Split;
 else mKeyboardInCondensedMode=CondenseType.None;
break;
case ""String_Node_Str"":
mKeyboardInCondensedMode=CondenseType.CompactToRight;
break;
case ""String_Node_Str"":
mKeyboardInCondensedMode=CondenseType.CompactToLeft;
break;
}
}","private void setInitialCondensedState(SharedPreferences sp,Configuration configuration){
  final int settingsKeyResId=configuration.orientation == Configuration.ORIENTATION_LANDSCAPE ? R.string.settings_key_default_split_state_landscape : R.string.settings_key_default_split_state_portrait;
  final String initialKeyboardCondenseState=sp.getString(getString(settingsKeyResId),getString(R.string.settings_default_default_split_state));
  final CondenseType previousCondenseType=mKeyboardInCondensedMode;
  mKeyboardInCondensedMode=CondenseType.None;
switch (initialKeyboardCondenseState) {
case ""String_Node_Str"":
    mKeyboardInCondensedMode=CondenseType.Split;
  break;
case ""String_Node_Str"":
mKeyboardInCondensedMode=CondenseType.CompactToRight;
break;
case ""String_Node_Str"":
mKeyboardInCondensedMode=CondenseType.CompactToLeft;
break;
}
if (previousCondenseType != mKeyboardInCondensedMode) {
getKeyboardSwitcher().flushKeyboardsCache();
resetKeyboardView(false);
}
}",0.3723208818126148
157258,"@Override protected void onLoadSettingsRequired(SharedPreferences sp){
  super.onLoadSettingsRequired(sp);
  mVibrationDuration=Integer.parseInt(sp.getString(getString(R.string.settings_key_vibrate_on_key_press_duration),getString(R.string.settings_default_vibrate_on_key_press_duration)));
  mSoundOn=sp.getBoolean(getString(R.string.settings_key_sound_on),getResources().getBoolean(R.bool.settings_default_sound_on));
  if (mSoundOn) {
    Logger.i(TAG,""String_Node_Str"");
    try {
      mAudioManager.loadSoundEffects();
    }
 catch (    SecurityException e) {
      Logger.w(TAG,""String_Node_Str"",e);
      mSoundOn=false;
    }
  }
  boolean customVolume=sp.getBoolean(""String_Node_Str"",false);
  int newVolume;
  if (customVolume) {
    newVolume=sp.getInt(""String_Node_Str"",0) + 1;
    Logger.i(TAG,""String_Node_Str"" + newVolume + ""String_Node_Str"");
  }
 else {
    Logger.i(TAG,""String_Node_Str"");
    newVolume=-1;
  }
  mSoundVolume=newVolume;
  mShowKeyboardIconInStatusBar=sp.getBoolean(getString(R.string.settings_key_keyboard_icon_in_status_bar),getResources().getBoolean(R.bool.settings_default_keyboard_icon_in_status_bar));
  if (mShowKeyboardIconInStatusBar) {
    setKeyboardStatusIcon();
  }
 else {
    mInputMethodManager.hideStatusIcon(mImeToken);
  }
  mAutoCap=sp.getBoolean(""String_Node_Str"",true);
  mShowSuggestions=sp.getBoolean(""String_Node_Str"",true);
  if (!mShowSuggestions) {
    closeDictionaries();
  }
  final String autoPickAggressiveness=sp.getString(getString(R.string.settings_key_auto_pick_suggestion_aggressiveness),getString(R.string.settings_default_auto_pick_suggestion_aggressiveness));
  final int calculatedCommonalityMaxLengthDiff;
  final int calculatedCommonalityMaxDistance;
switch (autoPickAggressiveness) {
case ""String_Node_Str"":
    calculatedCommonalityMaxLengthDiff=0;
  calculatedCommonalityMaxDistance=0;
mAutoComplete=false;
break;
case ""String_Node_Str"":
calculatedCommonalityMaxLengthDiff=1;
calculatedCommonalityMaxDistance=1;
mAutoComplete=true;
break;
case ""String_Node_Str"":
calculatedCommonalityMaxLengthDiff=3;
calculatedCommonalityMaxDistance=4;
mAutoComplete=true;
break;
case ""String_Node_Str"":
calculatedCommonalityMaxLengthDiff=5;
calculatedCommonalityMaxDistance=5;
mAutoComplete=true;
break;
default :
calculatedCommonalityMaxLengthDiff=2;
calculatedCommonalityMaxDistance=3;
mAutoComplete=true;
}
mAutoCorrectOn=mAutoComplete=mAutoComplete && mShowSuggestions;
mQuickFixes=sp.getBoolean(""String_Node_Str"",true);
mAllowSuggestionsRestart=sp.getBoolean(getString(R.string.settings_key_allow_suggestions_restart),getResources().getBoolean(R.bool.settings_default_allow_suggestions_restart));
mSuggest.setCorrectionMode(mQuickFixes,mShowSuggestions,calculatedCommonalityMaxLengthDiff,calculatedCommonalityMaxDistance,sp.getInt(getString(R.string.settings_key_min_length_for_word_correction__),2));
setInitialCondensedState(getResources().getConfiguration());
}","@Override protected void onLoadSettingsRequired(SharedPreferences sp){
  super.onLoadSettingsRequired(sp);
  mVibrationDuration=Integer.parseInt(sp.getString(getString(R.string.settings_key_vibrate_on_key_press_duration),getString(R.string.settings_default_vibrate_on_key_press_duration)));
  mSoundOn=sp.getBoolean(getString(R.string.settings_key_sound_on),getResources().getBoolean(R.bool.settings_default_sound_on));
  if (mSoundOn) {
    Logger.i(TAG,""String_Node_Str"");
    try {
      mAudioManager.loadSoundEffects();
    }
 catch (    SecurityException e) {
      Logger.w(TAG,""String_Node_Str"",e);
      mSoundOn=false;
    }
  }
  boolean customVolume=sp.getBoolean(""String_Node_Str"",false);
  int newVolume;
  if (customVolume) {
    newVolume=sp.getInt(""String_Node_Str"",0) + 1;
    Logger.i(TAG,""String_Node_Str"" + newVolume + ""String_Node_Str"");
  }
 else {
    Logger.i(TAG,""String_Node_Str"");
    newVolume=-1;
  }
  mSoundVolume=newVolume;
  mShowKeyboardIconInStatusBar=sp.getBoolean(getString(R.string.settings_key_keyboard_icon_in_status_bar),getResources().getBoolean(R.bool.settings_default_keyboard_icon_in_status_bar));
  if (mShowKeyboardIconInStatusBar) {
    setKeyboardStatusIcon();
  }
 else {
    mInputMethodManager.hideStatusIcon(mImeToken);
  }
  mAutoCap=sp.getBoolean(""String_Node_Str"",true);
  mShowSuggestions=sp.getBoolean(""String_Node_Str"",true);
  if (!mShowSuggestions) {
    closeDictionaries();
  }
  final String autoPickAggressiveness=sp.getString(getString(R.string.settings_key_auto_pick_suggestion_aggressiveness),getString(R.string.settings_default_auto_pick_suggestion_aggressiveness));
  final int calculatedCommonalityMaxLengthDiff;
  final int calculatedCommonalityMaxDistance;
switch (autoPickAggressiveness) {
case ""String_Node_Str"":
    calculatedCommonalityMaxLengthDiff=0;
  calculatedCommonalityMaxDistance=0;
mAutoComplete=false;
break;
case ""String_Node_Str"":
calculatedCommonalityMaxLengthDiff=1;
calculatedCommonalityMaxDistance=1;
mAutoComplete=true;
break;
case ""String_Node_Str"":
calculatedCommonalityMaxLengthDiff=3;
calculatedCommonalityMaxDistance=4;
mAutoComplete=true;
break;
case ""String_Node_Str"":
calculatedCommonalityMaxLengthDiff=5;
calculatedCommonalityMaxDistance=5;
mAutoComplete=true;
break;
default :
calculatedCommonalityMaxLengthDiff=2;
calculatedCommonalityMaxDistance=3;
mAutoComplete=true;
}
mAutoCorrectOn=mAutoComplete=mAutoComplete && mShowSuggestions;
mQuickFixes=sp.getBoolean(""String_Node_Str"",true);
mAllowSuggestionsRestart=sp.getBoolean(getString(R.string.settings_key_allow_suggestions_restart),getResources().getBoolean(R.bool.settings_default_allow_suggestions_restart));
mSuggest.setCorrectionMode(mQuickFixes,mShowSuggestions,calculatedCommonalityMaxLengthDiff,calculatedCommonalityMaxDistance,sp.getInt(getString(R.string.settings_key_min_length_for_word_correction__),2));
setInitialCondensedState(sp,getResources().getConfiguration());
}",0.9994895354772844
157259,"@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  if (newConfig.orientation != mOrientation) {
    mOrientation=newConfig.orientation;
    setInitialCondensedState(newConfig);
    abortCorrectionAndResetPredictionState(false);
    String sentenceSeparatorsForCurrentKeyboard=getKeyboardSwitcher().getCurrentKeyboardSentenceSeparators();
    if (sentenceSeparatorsForCurrentKeyboard == null) {
      mSentenceSeparators.clear();
    }
 else {
      fillSeparatorsSparseArray(mSentenceSeparators,sentenceSeparatorsForCurrentKeyboard.toCharArray());
    }
  }
}","@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  if (newConfig.orientation != mOrientation) {
    mOrientation=newConfig.orientation;
    setInitialCondensedState(getSharedPrefs(),newConfig);
    abortCorrectionAndResetPredictionState(false);
    String sentenceSeparatorsForCurrentKeyboard=getKeyboardSwitcher().getCurrentKeyboardSentenceSeparators();
    if (sentenceSeparatorsForCurrentKeyboard == null) {
      mSentenceSeparators.clear();
    }
 else {
      fillSeparatorsSparseArray(mSentenceSeparators,sentenceSeparatorsForCurrentKeyboard.toCharArray());
    }
  }
}",0.9865612648221344
157260,"public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){
  super.onSharedPreferenceChanged(sharedPreferences,key);
  AnyApplication.requestBackupToCloud();
  onLoadSettingsRequired(sharedPreferences);
  if (key.startsWith(KeyboardAddOnAndBuilder.KEYBOARD_PREF_PREFIX) && key.endsWith(PREFS_KEY_POSTFIX_OVERRIDE_DICTIONARY)) {
    setDictionariesForCurrentKeyboard();
  }
 else   if (key.startsWith(KeyboardAddOnAndBuilder.KEYBOARD_PREF_PREFIX) || key.startsWith(""String_Node_Str"") || key.equals(getString(R.string.settings_key_active_quick_text_key))|| key.equals(getString(R.string.settings_key_ext_kbd_bottom_row_key))|| key.equals(getString(R.string.settings_key_ext_kbd_top_row_key))|| key.equals(getString(R.string.settings_key_ext_kbd_ext_ketboard_key))|| key.equals(getString(R.string.settings_key_ext_kbd_hidden_bottom_row_key))|| key.equals(getString(R.string.settings_key_keyboard_theme_key))|| key.equals(""String_Node_Str"")|| key.equals(""String_Node_Str"")|| key.equals(getString(R.string.settings_key_smiley_icon_on_smileys_key))|| key.equals(getString(R.string.settings_key_long_press_timeout))|| key.equals(getString(R.string.settings_key_multitap_timeout))|| key.equals(getString(R.string.settings_key_always_hide_language_key))|| key.equals(getString(R.string.settings_key_default_split_state))|| key.equals(getString(R.string.settings_key_support_password_keyboard_type_state))) {
    resetKeyboardView(true);
  }
}","public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){
  super.onSharedPreferenceChanged(sharedPreferences,key);
  AnyApplication.requestBackupToCloud();
  onLoadSettingsRequired(sharedPreferences);
  if (key.startsWith(KeyboardAddOnAndBuilder.KEYBOARD_PREF_PREFIX) && key.endsWith(PREFS_KEY_POSTFIX_OVERRIDE_DICTIONARY)) {
    setDictionariesForCurrentKeyboard();
  }
 else   if (key.startsWith(KeyboardAddOnAndBuilder.KEYBOARD_PREF_PREFIX) || key.startsWith(""String_Node_Str"") || key.equals(getString(R.string.settings_key_active_quick_text_key))|| key.equals(getString(R.string.settings_key_ext_kbd_bottom_row_key))|| key.equals(getString(R.string.settings_key_ext_kbd_top_row_key))|| key.equals(getString(R.string.settings_key_ext_kbd_ext_ketboard_key))|| key.equals(getString(R.string.settings_key_ext_kbd_hidden_bottom_row_key))|| key.equals(getString(R.string.settings_key_keyboard_theme_key))|| key.equals(""String_Node_Str"")|| key.equals(""String_Node_Str"")|| key.equals(getString(R.string.settings_key_smiley_icon_on_smileys_key))|| key.equals(getString(R.string.settings_key_long_press_timeout))|| key.equals(getString(R.string.settings_key_multitap_timeout))|| key.equals(getString(R.string.settings_key_always_hide_language_key))|| key.equals(getString(R.string.settings_key_default_split_state_portrait))|| key.equals(getString(R.string.settings_key_default_split_state_landscape))|| key.equals(getString(R.string.settings_key_support_password_keyboard_type_state))) {
    resetKeyboardView(true);
  }
}",0.9714095744680852
157261,"public void resetKeyboardView(boolean recreateView){
  hideWindow();
  if (recreateView) {
    setInputView(onCreateInputView());
    setCandidatesView(onCreateCandidatesView());
    setCandidatesViewShown(false);
  }
}","public void resetKeyboardView(boolean recreateView){
  hideWindow();
  if (recreateView) {
    getKeyboardSwitcher().flushKeyboardsCache();
    setInputView(onCreateInputView());
    setCandidatesView(onCreateCandidatesView());
    setCandidatesViewShown(false);
  }
}",0.8993839835728953
157262,"public void onSharedPreferenceChanged(SharedPreferences sp,String key){
  Logger.d(TAG,""String_Node_Str"");
  mFirstAppVersionInstalled=sp.getInt(mContext.getString(R.string.settings_key_first_app_version_installed),0);
  mFirstTimeAppInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_app_installed),0);
  mFirstTimeCurrentVersionInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_current_version_installed),0);
  mDomainText=sp.getString(""String_Node_Str"",""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"" + mDomainText);
  mShowKeyPreview=sp.getBoolean(mContext.getString(R.string.settings_key_key_press_shows_preview_popup),mContext.getResources().getBoolean(R.bool.settings_default_key_press_shows_preview_popup));
  Logger.d(TAG,""String_Node_Str"" + mShowKeyPreview);
  mKeyPreviewAboveKey=sp.getString(mContext.getString(R.string.settings_key_key_press_preview_popup_position),mContext.getString(R.string.settings_default_key_press_preview_popup_position)).equals(""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"" + mKeyPreviewAboveKey);
  mShowKeyboardNameText=sp.getBoolean(mContext.getString(R.string.settings_key_show_keyboard_name_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_keyboard_name_text_value));
  Logger.d(TAG,""String_Node_Str"" + mShowKeyboardNameText);
  mShowHintTextOnKeys=sp.getBoolean(mContext.getString(R.string.settings_key_show_hint_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_hint_text_value));
  Logger.d(TAG,""String_Node_Str"" + mShowHintTextOnKeys);
  mUseCustomHintAlign=sp.getBoolean(mContext.getString(R.string.settings_key_use_custom_hint_align_key),mContext.getResources().getBoolean(R.bool.settings_default_use_custom_hint_align_value));
  Logger.d(TAG,""String_Node_Str"" + mUseCustomHintAlign);
  mCustomHintAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_align_key),mContext.getString(R.string.settings_default_custom_hint_align_value));
  Logger.d(TAG,""String_Node_Str"" + mCustomHintAlign);
  mCustomHintVAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_valign_key),mContext.getString(R.string.settings_default_custom_hint_valign_value));
  Logger.d(TAG,""String_Node_Str"" + mCustomHintVAlign);
  mSwitchKeyboardOnSpace=sp.getBoolean(mContext.getString(R.string.settings_key_switch_keyboard_on_space),mContext.getResources().getBoolean(R.bool.settings_default_switch_to_alphabet_on_space));
  Logger.d(TAG,""String_Node_Str"" + mSwitchKeyboardOnSpace);
  mUseFullScreenInputInLandscape=sp.getBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
  Logger.d(TAG,""String_Node_Str"" + mUseFullScreenInputInLandscape);
  mUseFullScreenInputInPortrait=sp.getBoolean(mContext.getString(R.string.settings_key_portrait_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_portrait_fullscreen));
  Logger.d(TAG,""String_Node_Str"" + mUseFullScreenInputInPortrait);
  mUseKeyRepeat=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mUseKeyRepeat);
  mKeysHeightFactorInPortrait=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_portrait_keyboard_height_factor));
  Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  if (mKeysHeightFactorInPortrait > 2.0f) {
    mKeysHeightFactorInPortrait=2.0f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
  mKeysHeightFactorInLandscape=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_landscape_keyboard_height_factor));
  Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  if (mKeysHeightFactorInLandscape > 2.0f) {
    mKeysHeightFactorInLandscape=2.0f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
  mInsertSpaceAfterCandidatePick=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mInsertSpaceAfterCandidatePick);
  mSwipeUpKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_up_action,R.string.swipe_action_value_shift);
  Logger.d(TAG,""String_Node_Str"" + mSwipeUpKeyCode);
  mSwipeUpFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_up_from_spacebar_action,R.string.swipe_action_value_utility_keyboard);
  Logger.d(TAG,""String_Node_Str"" + mSwipeUpFromSpaceBarKeyCode);
  mSwipeDownKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_down_action,R.string.swipe_action_value_hide);
  Logger.d(TAG,""String_Node_Str"" + mSwipeDownKeyCode);
  mSwipeLeftKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_action,R.string.swipe_action_value_next_symbols);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftKeyCode);
  mSwipeRightKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_action,R.string.swipe_action_value_next_alphabet);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightKeyCode);
  mPinchKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_pinch_gesture_action,R.string.swipe_action_value_merge_layout);
  Logger.d(TAG,""String_Node_Str"" + mPinchKeyCode);
  mSeparateKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_separate_gesture_action,R.string.swipe_action_value_split_layout);
  Logger.d(TAG,""String_Node_Str"" + mSeparateKeyCode);
  mSwipeLeftFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_space_bar_action,R.string.swipe_action_value_next_symbols);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftFromSpaceBarKeyCode);
  mSwipeRightFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_space_bar_action,R.string.swipe_action_value_next_alphabet);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightFromSpaceBarKeyCode);
  mSwipeLeftWithTwoFingersKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_two_fingers_action,R.string.swipe_action_value_compact_layout_to_left);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftWithTwoFingersKeyCode);
  mSwipeRightWithTwoFingersKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_two_fingers_action,R.string.swipe_action_value_compact_layout_to_right);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightWithTwoFingersKeyCode);
  mActionKeyInvisibleWhenRequested=sp.getBoolean(""String_Node_Str"",false);
  Logger.d(TAG,""String_Node_Str"" + mActionKeyInvisibleWhenRequested);
  mIsDoubleSpaceChangesToPeroid=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mIsDoubleSpaceChangesToPeroid);
  mShouldPopupForLanguageSwitch=sp.getBoolean(mContext.getString(R.string.settings_key_lang_key_shows_popup),mContext.getResources().getBoolean(R.bool.settings_default_lang_key_shows_popup));
  Logger.d(TAG,""String_Node_Str"" + mShouldPopupForLanguageSwitch);
  mHideSoftKeyboardWhenPhysicalKeyPressed=sp.getBoolean(mContext.getString(R.string.settings_key_hide_soft_when_physical),mContext.getResources().getBoolean(R.bool.settings_default_hide_soft_when_physical));
  Logger.d(TAG,""String_Node_Str"" + mHideSoftKeyboardWhenPhysicalKeyPressed);
  mSupportPasswordKeyboardMode=sp.getBoolean(mContext.getString(R.string.settings_key_support_password_keyboard_type_state),mContext.getResources().getBoolean(R.bool.settings_default_bool_support_password_keyboard_type_state));
  Logger.d(TAG,""String_Node_Str"" + mSupportPasswordKeyboardMode);
  mUse16KeysSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_use_16_keys_symbols_keyboards),mContext.getResources().getBoolean(R.bool.settings_default_use_16_keys_symbols_keyboards));
  Logger.d(TAG,""String_Node_Str"" + mUse16KeysSymbolsKeyboard);
  mUseBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_backword));
  Logger.d(TAG,""String_Node_Str"" + mUseBackword);
  mCycleOverAllSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_cycle_all_symbols),mContext.getResources().getBoolean(R.bool.settings_default_cycle_all_symbols));
  Logger.d(TAG,""String_Node_Str"" + mCycleOverAllSymbolsKeyboard);
  mUseCameraKeyForBackspaceBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_camera_key_for_backspace_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_camera_key_for_backspace_backword));
  Logger.d(TAG,""String_Node_Str"" + mUseCameraKeyForBackspaceBackword);
  mUseVolumeKeyForLeftRight=sp.getBoolean(mContext.getString(R.string.settings_key_use_volume_key_for_left_right),mContext.getResources().getBoolean(R.bool.settings_default_use_volume_key_for_left_right));
  Logger.d(TAG,""String_Node_Str"" + mUseVolumeKeyForLeftRight);
  mUseContactsDictionary=sp.getBoolean(mContext.getString(R.string.settings_key_use_contacts_dictionary),mContext.getResources().getBoolean(R.bool.settings_default_contacts_dictionary));
  Logger.d(TAG,""String_Node_Str"" + mUseContactsDictionary);
  mAutoDictionaryInsertionThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_auto_dictionary_threshold),mContext.getString(R.string.settings_default_auto_dictionary_add_threshold));
  Logger.d(TAG,""String_Node_Str"" + mAutoDictionaryInsertionThreshold);
  mIsStickyExtensionKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_is_sticky_extesion_keyboard),mContext.getResources().getBoolean(R.bool.settings_default_is_sticky_extesion_keyboard));
  Logger.d(TAG,""String_Node_Str"" + mIsStickyExtensionKeyboard);
  mSwipeDistanceThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_distance_threshold),mContext.getString(R.string.settings_default_swipe_distance_threshold));
  Logger.d(TAG,""String_Node_Str"" + mSwipeDistanceThreshold);
  mSwipeVelocityThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_velocity_threshold),mContext.getString(R.string.settings_default_swipe_velocity_threshold));
  Logger.d(TAG,""String_Node_Str"" + mSwipeVelocityThreshold);
  mLongPressTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_long_press_timeout),mContext.getString(R.string.settings_default_long_press_timeout));
  Logger.d(TAG,""String_Node_Str"" + mLongPressTimeout);
  mMultiTapTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_multitap_timeout),mContext.getString(R.string.settings_default_multitap_timeout));
  Logger.d(TAG,""String_Node_Str"" + mMultiTapTimeout);
  mWorkaround_alwaysUseDrawText=sp.getBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),getAlwaysUseDrawTextDefault());
  Logger.d(TAG,""String_Node_Str"" + mWorkaround_alwaysUseDrawText);
  mInitialKeyboardCondenseState=sp.getString(mContext.getString(R.string.settings_key_default_split_state),mContext.getString(R.string.settings_default_default_split_state));
  Logger.d(TAG,""String_Node_Str"" + mInitialKeyboardCondenseState);
  mUseChewbacca=sp.getBoolean(mContext.getString(R.string.settings_key_show_chewbacca),mContext.getResources().getBoolean(R.bool.settings_default_show_chewbacca));
  Logger.d(TAG,""String_Node_Str"" + mUseChewbacca);
  mSwapPunctuationAndSpace=sp.getBoolean(mContext.getString(R.string.settings_key_bool_should_swap_punctuation_and_space),mContext.getResources().getBoolean(R.bool.settings_default_bool_should_swap_punctuation_and_space));
  Logger.d(TAG,""String_Node_Str"" + mSwapPunctuationAndSpace);
  String animationsLevel=sp.getString(mContext.getString(R.string.settings_key_tweak_animations_level),mContext.getString(R.string.settings_default_tweak_animations_level));
  if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.None;
 else   if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.Some;
 else   mAnimationsLevel=AnimationsLevel.Full;
  Logger.d(TAG,""String_Node_Str"" + mAnimationsLevel);
  mAlwaysUseFallBackUserDictionary=sp.getBoolean(mContext.getString(R.string.settings_key_always_use_fallback_user_dictionary),mContext.getResources().getBoolean(R.bool.settings_default_always_use_fallback_user_dictionary));
  Logger.d(TAG,""String_Node_Str"" + mAlwaysUseFallBackUserDictionary);
  mAutomaticallySwitchToAppLayout=sp.getBoolean(mContext.getString(R.string.settings_key_persistent_layout_per_package_id),mContext.getResources().getBoolean(R.bool.settings_default_persistent_layout_per_package_id));
  Logger.d(TAG,""String_Node_Str"" + mAutomaticallySwitchToAppLayout);
  mAlwaysHideLanguageKey=sp.getBoolean(mContext.getString(R.string.settings_key_always_hide_language_key),mContext.getResources().getBoolean(R.bool.settings_default_always_hide_language_key));
  Logger.d(TAG,""String_Node_Str"" + mAutomaticallySwitchToAppLayout);
  final LinkedList<OnSharedPreferenceChangeListener> disconnectedList=new LinkedList<>(mPreferencesChangedListeners);
  for (  OnSharedPreferenceChangeListener listener : disconnectedList) {
    if (mPreferencesChangedListeners.contains(listener)) {
      listener.onSharedPreferenceChanged(sp,key);
    }
  }
}","public void onSharedPreferenceChanged(SharedPreferences sp,String key){
  Logger.d(TAG,""String_Node_Str"");
  mFirstAppVersionInstalled=sp.getInt(mContext.getString(R.string.settings_key_first_app_version_installed),0);
  mFirstTimeAppInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_app_installed),0);
  mFirstTimeCurrentVersionInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_current_version_installed),0);
  mDomainText=sp.getString(""String_Node_Str"",""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"" + mDomainText);
  mShowKeyPreview=sp.getBoolean(mContext.getString(R.string.settings_key_key_press_shows_preview_popup),mContext.getResources().getBoolean(R.bool.settings_default_key_press_shows_preview_popup));
  Logger.d(TAG,""String_Node_Str"" + mShowKeyPreview);
  mKeyPreviewAboveKey=sp.getString(mContext.getString(R.string.settings_key_key_press_preview_popup_position),mContext.getString(R.string.settings_default_key_press_preview_popup_position)).equals(""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"" + mKeyPreviewAboveKey);
  mShowKeyboardNameText=sp.getBoolean(mContext.getString(R.string.settings_key_show_keyboard_name_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_keyboard_name_text_value));
  Logger.d(TAG,""String_Node_Str"" + mShowKeyboardNameText);
  mShowHintTextOnKeys=sp.getBoolean(mContext.getString(R.string.settings_key_show_hint_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_hint_text_value));
  Logger.d(TAG,""String_Node_Str"" + mShowHintTextOnKeys);
  mUseCustomHintAlign=sp.getBoolean(mContext.getString(R.string.settings_key_use_custom_hint_align_key),mContext.getResources().getBoolean(R.bool.settings_default_use_custom_hint_align_value));
  Logger.d(TAG,""String_Node_Str"" + mUseCustomHintAlign);
  mCustomHintAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_align_key),mContext.getString(R.string.settings_default_custom_hint_align_value));
  Logger.d(TAG,""String_Node_Str"" + mCustomHintAlign);
  mCustomHintVAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_valign_key),mContext.getString(R.string.settings_default_custom_hint_valign_value));
  Logger.d(TAG,""String_Node_Str"" + mCustomHintVAlign);
  mSwitchKeyboardOnSpace=sp.getBoolean(mContext.getString(R.string.settings_key_switch_keyboard_on_space),mContext.getResources().getBoolean(R.bool.settings_default_switch_to_alphabet_on_space));
  Logger.d(TAG,""String_Node_Str"" + mSwitchKeyboardOnSpace);
  mUseFullScreenInputInLandscape=sp.getBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
  Logger.d(TAG,""String_Node_Str"" + mUseFullScreenInputInLandscape);
  mUseFullScreenInputInPortrait=sp.getBoolean(mContext.getString(R.string.settings_key_portrait_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_portrait_fullscreen));
  Logger.d(TAG,""String_Node_Str"" + mUseFullScreenInputInPortrait);
  mUseKeyRepeat=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mUseKeyRepeat);
  mKeysHeightFactorInPortrait=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_portrait_keyboard_height_factor));
  Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  if (mKeysHeightFactorInPortrait > 2.0f) {
    mKeysHeightFactorInPortrait=2.0f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
  mKeysHeightFactorInLandscape=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_landscape_keyboard_height_factor));
  Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  if (mKeysHeightFactorInLandscape > 2.0f) {
    mKeysHeightFactorInLandscape=2.0f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Logger.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
  mInsertSpaceAfterCandidatePick=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mInsertSpaceAfterCandidatePick);
  mSwipeUpKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_up_action,R.string.swipe_action_value_shift);
  Logger.d(TAG,""String_Node_Str"" + mSwipeUpKeyCode);
  mSwipeUpFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_up_from_spacebar_action,R.string.swipe_action_value_utility_keyboard);
  Logger.d(TAG,""String_Node_Str"" + mSwipeUpFromSpaceBarKeyCode);
  mSwipeDownKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_down_action,R.string.swipe_action_value_hide);
  Logger.d(TAG,""String_Node_Str"" + mSwipeDownKeyCode);
  mSwipeLeftKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_action,R.string.swipe_action_value_next_symbols);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftKeyCode);
  mSwipeRightKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_action,R.string.swipe_action_value_next_alphabet);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightKeyCode);
  mPinchKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_pinch_gesture_action,R.string.swipe_action_value_merge_layout);
  Logger.d(TAG,""String_Node_Str"" + mPinchKeyCode);
  mSeparateKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_separate_gesture_action,R.string.swipe_action_value_split_layout);
  Logger.d(TAG,""String_Node_Str"" + mSeparateKeyCode);
  mSwipeLeftFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_space_bar_action,R.string.swipe_action_value_next_symbols);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftFromSpaceBarKeyCode);
  mSwipeRightFromSpaceBarKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_space_bar_action,R.string.swipe_action_value_next_alphabet);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightFromSpaceBarKeyCode);
  mSwipeLeftWithTwoFingersKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_left_two_fingers_action,R.string.swipe_action_value_compact_layout_to_left);
  Logger.d(TAG,""String_Node_Str"" + mSwipeLeftWithTwoFingersKeyCode);
  mSwipeRightWithTwoFingersKeyCode=getIntFromSwipeConfiguration(sp,R.string.settings_key_swipe_right_two_fingers_action,R.string.swipe_action_value_compact_layout_to_right);
  Logger.d(TAG,""String_Node_Str"" + mSwipeRightWithTwoFingersKeyCode);
  mActionKeyInvisibleWhenRequested=sp.getBoolean(""String_Node_Str"",false);
  Logger.d(TAG,""String_Node_Str"" + mActionKeyInvisibleWhenRequested);
  mIsDoubleSpaceChangesToPeroid=sp.getBoolean(""String_Node_Str"",true);
  Logger.d(TAG,""String_Node_Str"" + mIsDoubleSpaceChangesToPeroid);
  mShouldPopupForLanguageSwitch=sp.getBoolean(mContext.getString(R.string.settings_key_lang_key_shows_popup),mContext.getResources().getBoolean(R.bool.settings_default_lang_key_shows_popup));
  Logger.d(TAG,""String_Node_Str"" + mShouldPopupForLanguageSwitch);
  mHideSoftKeyboardWhenPhysicalKeyPressed=sp.getBoolean(mContext.getString(R.string.settings_key_hide_soft_when_physical),mContext.getResources().getBoolean(R.bool.settings_default_hide_soft_when_physical));
  Logger.d(TAG,""String_Node_Str"" + mHideSoftKeyboardWhenPhysicalKeyPressed);
  mSupportPasswordKeyboardMode=sp.getBoolean(mContext.getString(R.string.settings_key_support_password_keyboard_type_state),mContext.getResources().getBoolean(R.bool.settings_default_bool_support_password_keyboard_type_state));
  Logger.d(TAG,""String_Node_Str"" + mSupportPasswordKeyboardMode);
  mUse16KeysSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_use_16_keys_symbols_keyboards),mContext.getResources().getBoolean(R.bool.settings_default_use_16_keys_symbols_keyboards));
  Logger.d(TAG,""String_Node_Str"" + mUse16KeysSymbolsKeyboard);
  mUseBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_backword));
  Logger.d(TAG,""String_Node_Str"" + mUseBackword);
  mCycleOverAllSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_cycle_all_symbols),mContext.getResources().getBoolean(R.bool.settings_default_cycle_all_symbols));
  Logger.d(TAG,""String_Node_Str"" + mCycleOverAllSymbolsKeyboard);
  mUseCameraKeyForBackspaceBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_camera_key_for_backspace_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_camera_key_for_backspace_backword));
  Logger.d(TAG,""String_Node_Str"" + mUseCameraKeyForBackspaceBackword);
  mUseVolumeKeyForLeftRight=sp.getBoolean(mContext.getString(R.string.settings_key_use_volume_key_for_left_right),mContext.getResources().getBoolean(R.bool.settings_default_use_volume_key_for_left_right));
  Logger.d(TAG,""String_Node_Str"" + mUseVolumeKeyForLeftRight);
  mUseContactsDictionary=sp.getBoolean(mContext.getString(R.string.settings_key_use_contacts_dictionary),mContext.getResources().getBoolean(R.bool.settings_default_contacts_dictionary));
  Logger.d(TAG,""String_Node_Str"" + mUseContactsDictionary);
  mAutoDictionaryInsertionThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_auto_dictionary_threshold),mContext.getString(R.string.settings_default_auto_dictionary_add_threshold));
  Logger.d(TAG,""String_Node_Str"" + mAutoDictionaryInsertionThreshold);
  mIsStickyExtensionKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_is_sticky_extesion_keyboard),mContext.getResources().getBoolean(R.bool.settings_default_is_sticky_extesion_keyboard));
  Logger.d(TAG,""String_Node_Str"" + mIsStickyExtensionKeyboard);
  mSwipeDistanceThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_distance_threshold),mContext.getString(R.string.settings_default_swipe_distance_threshold));
  Logger.d(TAG,""String_Node_Str"" + mSwipeDistanceThreshold);
  mSwipeVelocityThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_velocity_threshold),mContext.getString(R.string.settings_default_swipe_velocity_threshold));
  Logger.d(TAG,""String_Node_Str"" + mSwipeVelocityThreshold);
  mLongPressTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_long_press_timeout),mContext.getString(R.string.settings_default_long_press_timeout));
  Logger.d(TAG,""String_Node_Str"" + mLongPressTimeout);
  mMultiTapTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_multitap_timeout),mContext.getString(R.string.settings_default_multitap_timeout));
  Logger.d(TAG,""String_Node_Str"" + mMultiTapTimeout);
  mWorkaround_alwaysUseDrawText=sp.getBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),getAlwaysUseDrawTextDefault());
  Logger.d(TAG,""String_Node_Str"" + mWorkaround_alwaysUseDrawText);
  mUseChewbacca=sp.getBoolean(mContext.getString(R.string.settings_key_show_chewbacca),mContext.getResources().getBoolean(R.bool.settings_default_show_chewbacca));
  Logger.d(TAG,""String_Node_Str"" + mUseChewbacca);
  mSwapPunctuationAndSpace=sp.getBoolean(mContext.getString(R.string.settings_key_bool_should_swap_punctuation_and_space),mContext.getResources().getBoolean(R.bool.settings_default_bool_should_swap_punctuation_and_space));
  Logger.d(TAG,""String_Node_Str"" + mSwapPunctuationAndSpace);
  String animationsLevel=sp.getString(mContext.getString(R.string.settings_key_tweak_animations_level),mContext.getString(R.string.settings_default_tweak_animations_level));
  if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.None;
 else   if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.Some;
 else   mAnimationsLevel=AnimationsLevel.Full;
  Logger.d(TAG,""String_Node_Str"" + mAnimationsLevel);
  mAlwaysUseFallBackUserDictionary=sp.getBoolean(mContext.getString(R.string.settings_key_always_use_fallback_user_dictionary),mContext.getResources().getBoolean(R.bool.settings_default_always_use_fallback_user_dictionary));
  Logger.d(TAG,""String_Node_Str"" + mAlwaysUseFallBackUserDictionary);
  mAutomaticallySwitchToAppLayout=sp.getBoolean(mContext.getString(R.string.settings_key_persistent_layout_per_package_id),mContext.getResources().getBoolean(R.bool.settings_default_persistent_layout_per_package_id));
  Logger.d(TAG,""String_Node_Str"" + mAutomaticallySwitchToAppLayout);
  mAlwaysHideLanguageKey=sp.getBoolean(mContext.getString(R.string.settings_key_always_hide_language_key),mContext.getResources().getBoolean(R.bool.settings_default_always_hide_language_key));
  Logger.d(TAG,""String_Node_Str"" + mAutomaticallySwitchToAppLayout);
  final LinkedList<OnSharedPreferenceChangeListener> disconnectedList=new LinkedList<>(mPreferencesChangedListeners);
  for (  OnSharedPreferenceChangeListener listener : disconnectedList) {
    if (mPreferencesChangedListeners.contains(listener)) {
      listener.onSharedPreferenceChanged(sp,key);
    }
  }
}",0.8987103099781281
157263,"@Override public void onCreate(){
  SharedPreferencesBackupHelper helper=new SharedPreferencesBackupHelper(getApplicationContext(),DEFAULT_PREFS_FILE){
    @Override public void restoreEntity(    BackupDataInputStream data){
      final String key=data.getKey();
      if (!TextUtils.isEmpty(key)) {
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_default_split_state)))         return;
        if (key.equalsIgnoreCase(""String_Node_Str""))         return;
        if (key.equalsIgnoreCase(""String_Node_Str""))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_portrait_fullscreen)))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_landscape_fullscreen)))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_workaround_disable_rtl_fix)))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_allow_suggestions_restart)))         return;
      }
      super.restoreEntity(data);
    }
  }
;
  addHelper(PREFS_BACKUP_KEY,helper);
}","@Override public void onCreate(){
  SharedPreferencesBackupHelper helper=new SharedPreferencesBackupHelper(getApplicationContext(),DEFAULT_PREFS_FILE){
    @Override public void restoreEntity(    BackupDataInputStream data){
      final String key=data.getKey();
      if (!TextUtils.isEmpty(key)) {
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_default_split_state_landscape)))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_default_split_state_portrait)))         return;
        if (key.equalsIgnoreCase(""String_Node_Str""))         return;
        if (key.equalsIgnoreCase(""String_Node_Str""))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_portrait_fullscreen)))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_landscape_fullscreen)))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_workaround_disable_rtl_fix)))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_allow_suggestions_restart)))         return;
      }
      super.restoreEntity(data);
    }
  }
;
  addHelper(PREFS_BACKUP_KEY,helper);
}",0.9415506958250496
157264,"@Override public void restoreEntity(BackupDataInputStream data){
  final String key=data.getKey();
  if (!TextUtils.isEmpty(key)) {
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_default_split_state)))     return;
    if (key.equalsIgnoreCase(""String_Node_Str""))     return;
    if (key.equalsIgnoreCase(""String_Node_Str""))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_portrait_fullscreen)))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_landscape_fullscreen)))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_workaround_disable_rtl_fix)))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_allow_suggestions_restart)))     return;
  }
  super.restoreEntity(data);
}","@Override public void restoreEntity(BackupDataInputStream data){
  final String key=data.getKey();
  if (!TextUtils.isEmpty(key)) {
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_default_split_state_landscape)))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_default_split_state_portrait)))     return;
    if (key.equalsIgnoreCase(""String_Node_Str""))     return;
    if (key.equalsIgnoreCase(""String_Node_Str""))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_portrait_fullscreen)))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_landscape_fullscreen)))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_workaround_disable_rtl_fix)))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_allow_suggestions_restart)))     return;
  }
  super.restoreEntity(data);
}",0.9284611425630468
157265,"public void setCondensedKeys(CondenseType condenseType){
  if (mKeyboardCondenser.setCondensedKeys(condenseType))   computeNearestNeighbors();
}","public void setCondensedKeys(CondenseType condenseType){
  if (mKeyboardCondenser.setCondensedKeys(condenseType)) {
    computeNearestNeighbors();
  }
}",0.972972972972973
157266,"void condenseRightSide(final float CONDENSING_FACTOR,final int keyboardWidth,int currentRightX,Stack<Key> rightKeys,Key spaceKey){
  currentRightX=(int)(keyboardWidth - ((keyboardWidth - currentRightX) * CONDENSING_FACTOR));
  while (!rightKeys.isEmpty()) {
    Key rightKey=rightKeys.pop();
    currentRightX-=rightKey.width;
    rightKey.x=currentRightX;
    currentRightX-=(rightKey.gap * CONDENSING_FACTOR);
  }
  if (spaceKey != null) {
    spaceKey.width=currentRightX - spaceKey.x;
  }
}","private void condenseRightSide(final float CONDENSING_FACTOR,final int keyboardWidth,int currentRightX,Stack<Key> rightKeys,Key spaceKey){
  currentRightX=(int)(keyboardWidth - ((keyboardWidth - currentRightX) * CONDENSING_FACTOR));
  while (!rightKeys.isEmpty()) {
    Key rightKey=rightKeys.pop();
    currentRightX-=rightKey.width;
    rightKey.x=currentRightX;
    currentRightX-=(rightKey.gap * CONDENSING_FACTOR);
  }
  if (spaceKey != null) {
    spaceKey.width=currentRightX - spaceKey.x;
  }
}",0.9919678714859438
157267,"int stackRightSideKeyForLater(Stack<Key> rightKeys,Key k,int targetWidth){
  int currentRightX;
  rightKeys.push(k);
  currentRightX=k.x + k.width;
  k.width=targetWidth;
  return currentRightX;
}","private int stackRightSideKeyForLater(Stack<Key> rightKeys,Key k,int targetWidth){
  int currentRightX;
  rightKeys.push(k);
  currentRightX=k.x + k.width;
  k.width=targetWidth;
  return currentRightX;
}",0.98
157268,"int condenseLeftSide(final float CONDENSING_FACTOR,int currentLeftX,Key k,int targetWidth){
  currentLeftX+=(k.gap * CONDENSING_FACTOR);
  k.x=currentLeftX;
  k.width=targetWidth;
  currentLeftX+=k.width;
  return currentLeftX;
}","private int condenseLeftSide(final float CONDENSING_FACTOR,int currentLeftX,Key k,int targetWidth){
  currentLeftX+=(k.gap * CONDENSING_FACTOR);
  k.x=currentLeftX;
  k.width=targetWidth;
  currentLeftX+=k.width;
  return currentLeftX;
}",0.9828326180257512
157269,"@Override public void onClick(View v){
switch (v.getId()) {
case R.id.quick_keys_popup_close:
    mKeyboardActionListener.onCancel();
  break;
case R.id.quick_keys_popup_backspace:
mKeyboardActionListener.onKey(KeyCodes.DELETE,null,0,null,true);
break;
case R.id.quick_keys_popup_quick_keys_settings:
Intent startSettings=FragmentChauffeurActivity.createStartActivityIntentForAddingFragmentToUi(v.getContext(),MainSettingsActivity.class,new QuickTextSettingsFragment(),TransitionExperiences.ROOT_FRAGMENT_EXPERIENCE_TRANSITION);
startSettings.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_HISTORY | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
v.getContext().startActivity(startSettings);
mKeyboardActionListener.onCancel();
break;
}
}","@Override public void onClick(View v){
switch (v.getId()) {
case R.id.quick_keys_popup_close:
    mKeyboardActionListener.onKey(KeyCodes.CANCEL,null,0,null,true);
  break;
case R.id.quick_keys_popup_backspace:
mKeyboardActionListener.onKey(KeyCodes.DELETE,null,0,null,true);
break;
case R.id.quick_keys_popup_quick_keys_settings:
Intent startSettings=FragmentChauffeurActivity.createStartActivityIntentForAddingFragmentToUi(v.getContext(),MainSettingsActivity.class,new QuickTextSettingsFragment(),TransitionExperiences.ROOT_FRAGMENT_EXPERIENCE_TRANSITION);
startSettings.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_HISTORY | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
v.getContext().startActivity(startSettings);
mKeyboardActionListener.onKey(KeyCodes.CANCEL,null,0,null,true);
break;
}
}",0.9450127877237852
157270,"@Test public void testOnClickClose() throws Exception {
  OnKeyboardActionListener keyboardActionListener=Mockito.mock(OnKeyboardActionListener.class);
  FrameKeyboardViewClickListener listener=new FrameKeyboardViewClickListener(keyboardActionListener);
  Mockito.verifyZeroInteractions(keyboardActionListener);
  View view=new View(RuntimeEnvironment.application);
  view.setId(R.id.quick_keys_popup_close);
  listener.onClick(view);
  Mockito.verify(keyboardActionListener).onCancel();
  Mockito.verifyNoMoreInteractions(keyboardActionListener);
}","@Test public void testOnClickClose() throws Exception {
  OnKeyboardActionListener keyboardActionListener=Mockito.mock(OnKeyboardActionListener.class);
  FrameKeyboardViewClickListener listener=new FrameKeyboardViewClickListener(keyboardActionListener);
  Mockito.verifyZeroInteractions(keyboardActionListener);
  View view=new View(RuntimeEnvironment.application);
  view.setId(R.id.quick_keys_popup_close);
  listener.onClick(view);
  Mockito.verify(keyboardActionListener).onKey(KeyCodes.CANCEL,null,0,null,true);
  Mockito.verifyNoMoreInteractions(keyboardActionListener);
}",0.9618456078083408
157271,"private void switchToQuickTextKeyboard(){
  abortCorrectionAndResetPredictionState(false);
  setCandidatesViewShown(false);
  cleanUpQuickTextKeyboard(false);
  View standardKeyboardView=(View)getInputView();
  final int height=standardKeyboardView.getHeight();
  standardKeyboardView.setVisibility(View.GONE);
  QuickTextPagerView quickTextsLayout=QuickTextViewFactory.createQuickTextView(getApplicationContext(),getInputViewContainer(),height);
  quickTextsLayout.setThemeValues(((AnyKeyboardView)getInputView()).getLabelTextSize(),((AnyKeyboardView)getInputView()).getKeyTextColor(),((AnyKeyboardView)getInputView()).getDrawableForKeyCode(KeyCodes.CANCEL),((AnyKeyboardView)getInputView()).getDrawableForKeyCode(KeyCodes.DELETE),((AnyKeyboardView)getInputView()).getDrawableForKeyCode(KeyCodes.SETTINGS));
  getInputViewContainer().addView(quickTextsLayout);
}","private void switchToQuickTextKeyboard(){
  abortCorrectionAndResetPredictionState(false);
  setCandidatesViewShown(false);
  cleanUpQuickTextKeyboard(false);
  View standardKeyboardView=(View)getInputView();
  final int height=standardKeyboardView.getHeight();
  standardKeyboardView.setVisibility(View.GONE);
  QuickTextPagerView quickTextsLayout=QuickTextViewFactory.createQuickTextView(getApplicationContext(),getInputViewContainer(),height);
  AnyKeyboardView actualInputView=(AnyKeyboardView)getInputView();
  quickTextsLayout.setThemeValues(actualInputView.getLabelTextSize(),actualInputView.getKeyTextColor(),actualInputView.getDrawableForKeyCode(KeyCodes.CANCEL),actualInputView.getDrawableForKeyCode(KeyCodes.DELETE),actualInputView.getDrawableForKeyCode(KeyCodes.SETTINGS),actualInputView.getBackground());
  getInputViewContainer().addView(quickTextsLayout);
}",0.8046109510086455
157272,"private static void setupSlidingTab(View rootView,float tabTitleTextSize,ColorStateList tabTitleTextColor,ViewPager pager,PagerAdapter adapter,ViewPager.OnPageChangeListener onPageChangeListener,int startIndex){
  PagerSlidingTabStrip pagerTabStrip=(PagerSlidingTabStrip)rootView.findViewById(R.id.pager_tabs);
  pagerTabStrip.setTextSize((int)tabTitleTextSize);
  pagerTabStrip.setTextColor(tabTitleTextColor.getDefaultColor());
  pagerTabStrip.setIndicatorColor(tabTitleTextColor.getDefaultColor());
  pager.setAdapter(adapter);
  pager.setCurrentItem(startIndex);
  pagerTabStrip.setViewPager(pager);
  pagerTabStrip.setOnPageChangeListener(onPageChangeListener);
}","@RequiresApi(Build.VERSION_CODES.GINGERBREAD_MR1) private static void setupSlidingTab(View rootView,float tabTitleTextSize,ColorStateList tabTitleTextColor,ViewPager pager,PagerAdapter adapter,ViewPager.OnPageChangeListener onPageChangeListener,int startIndex){
  PagerSlidingTabStrip pagerTabStrip=(PagerSlidingTabStrip)rootView.findViewById(R.id.pager_tabs);
  pagerTabStrip.setTextSize((int)tabTitleTextSize);
  pagerTabStrip.setTextColor(tabTitleTextColor.getDefaultColor());
  pagerTabStrip.setIndicatorColor(tabTitleTextColor.getDefaultColor());
  pager.setAdapter(adapter);
  pager.setCurrentItem(startIndex);
  pagerTabStrip.setViewPager(pager);
  pagerTabStrip.setOnPageChangeListener(onPageChangeListener);
}",0.963924963924964
157273,"private static void setupSupportTab(float tabTitleTextSize,ColorStateList tabTitleTextColor,ViewPager pager,PagerAdapter adapter,ViewPager.OnPageChangeListener onPageChangeListener,int startIndex){
  PagerTabStrip pagerTabStrip=(PagerTabStrip)pager.findViewById(R.id.pager_tabs);
  pagerTabStrip.setTextSize(TypedValue.COMPLEX_UNIT_PX,tabTitleTextSize);
  pagerTabStrip.setTextColor(tabTitleTextColor.getDefaultColor());
  pagerTabStrip.setTabIndicatorColor(tabTitleTextColor.getDefaultColor());
  pager.setAdapter(adapter);
  pager.setCurrentItem(startIndex);
  pager.setOnPageChangeListener(onPageChangeListener);
}","@TargetApi(Build.VERSION_CODES.GINGERBREAD) private static void setupSupportTab(float tabTitleTextSize,ColorStateList tabTitleTextColor,ViewPager pager,PagerAdapter adapter,ViewPager.OnPageChangeListener onPageChangeListener,int startIndex){
  PagerTabStrip pagerTabStrip=(PagerTabStrip)pager.findViewById(R.id.pager_tabs);
  pagerTabStrip.setTextSize(TypedValue.COMPLEX_UNIT_PX,tabTitleTextSize);
  pagerTabStrip.setTextColor(tabTitleTextColor.getDefaultColor());
  pagerTabStrip.setTabIndicatorColor(tabTitleTextColor.getDefaultColor());
  pager.setAdapter(adapter);
  pager.setCurrentItem(startIndex);
  pager.setOnPageChangeListener(onPageChangeListener);
}",0.9655712050078248
157274,"public void setThemeValues(float tabTextSize,ColorStateList tabTextColor,Drawable closeKeyboardIcon,Drawable backspaceIcon,Drawable settingsIcon){
  mTabTitleTextSize=tabTextSize;
  mTabTitleTextColor=tabTextColor;
  mCloseKeyboardIcon=closeKeyboardIcon;
  mBackspaceIcon=backspaceIcon;
  mSettingsIcon=settingsIcon;
}","public void setThemeValues(float tabTextSize,ColorStateList tabTextColor,Drawable closeKeyboardIcon,Drawable backspaceIcon,Drawable settingsIcon,Drawable keyboardDrawable){
  mTabTitleTextSize=tabTextSize;
  mTabTitleTextColor=tabTextColor;
  mCloseKeyboardIcon=closeKeyboardIcon;
  mBackspaceIcon=backspaceIcon;
  mSettingsIcon=settingsIcon;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
    setBackground(keyboardDrawable);
  }
 else {
    setBackgroundDrawable(keyboardDrawable);
  }
}",0.7709090909090909
157275,"@Test public void testInstantiateItem() throws Exception {
  ViewGroup container=new LinearLayout(RuntimeEnvironment.application);
  Object instance0=mUnderTest.instantiateItem(container,0);
  Assert.assertNotNull(instance0);
  Assert.assertTrue(instance0 instanceof ScrollViewWithDisable);
  Assert.assertEquals(1,container.getChildCount());
  Assert.assertSame(instance0,container.getChildAt(0));
  final QuickKeysKeyboardView keyboardView0=(QuickKeysKeyboardView)((View)instance0).findViewById(R.id.keys_container);
  Assert.assertNotNull(keyboardView0);
  Object instance1=mUnderTest.instantiateItem(container,1);
  Assert.assertNotNull(instance1);
  Assert.assertNotSame(instance0,instance1);
  final QuickKeysKeyboardView keyboardView1=(QuickKeysKeyboardView)((View)instance1).findViewById(R.id.keys_container);
  Assert.assertNotNull(keyboardView1);
  Assert.assertNotEquals(keyboardView0.getKeyboard().getKeyboardAddOn().getId(),keyboardView1.getKeyboard().getKeyboardAddOn().getId());
  Object instance0Again=mUnderTest.instantiateItem(container,0);
  Assert.assertNotNull(instance0Again);
  Assert.assertNotSame(instance0,instance0Again);
  final QuickKeysKeyboardView keyboardView0Again=(QuickKeysKeyboardView)((View)instance0Again).findViewById(R.id.keys_container);
  Assert.assertNotNull(keyboardView0Again);
  Assert.assertSame(keyboardView0.getKeyboard(),keyboardView0Again.getKeyboard());
}","@Test public void testInstantiateItem() throws Exception {
  ViewGroup container=new LinearLayout(RuntimeEnvironment.application);
  Object instance0=mUnderTest.instantiateItem(container,0);
  Assert.assertNotNull(instance0);
  Assert.assertTrue(instance0 instanceof ScrollViewWithDisable);
  Assert.assertEquals(1,container.getChildCount());
  Assert.assertSame(instance0,container.getChildAt(0));
  final QuickKeysKeyboardView keyboardView0=(QuickKeysKeyboardView)((View)instance0).findViewById(R.id.keys_container);
  Assert.assertNotNull(keyboardView0);
  Object instance1=mUnderTest.instantiateItem(container,1);
  Assert.assertNotNull(instance1);
  Assert.assertNotSame(instance0,instance1);
  final QuickKeysKeyboardView keyboardView1=(QuickKeysKeyboardView)((View)instance1).findViewById(R.id.keys_container);
  Assert.assertNotNull(keyboardView1);
  Assert.assertNotEquals(keyboardView0.getKeyboard().getKeyboardAddOn().getId(),keyboardView1.getKeyboard().getKeyboardAddOn().getId());
  Object instance0Again=mUnderTest.instantiateItem(container,0);
  Assert.assertNotNull(instance0Again);
  Assert.assertNotSame(instance0,instance0Again);
  final QuickKeysKeyboardView keyboardView0Again=(QuickKeysKeyboardView)((View)instance0Again).findViewById(R.id.keys_container);
  Assert.assertNotNull(keyboardView0Again);
  Assert.assertSame(keyboardView0.getKeyboard(),keyboardView0Again.getKeyboard());
  Assert.assertSame(null,keyboardView0.getBackground());
  Assert.assertSame(null,keyboardView1.getBackground());
}",0.9610655737704918
157276,"@Before public void setup(){
  Context context=RuntimeEnvironment.application;
  mUnderTest=(QuickTextPagerView)LayoutInflater.from(RuntimeEnvironment.application).inflate(R.layout.quick_text_popup_root_view,null,false);
  mUnderTest.setThemeValues(10f,new ColorStateList(new int[][]{{0}},new int[]{Color.WHITE}),context.getDrawable(R.drawable.ic_cancel),context.getDrawable(R.drawable.sym_keyboard_delete_light),context.getDrawable(R.drawable.ic_action_settings));
}","@Before public void setup(){
  Context context=RuntimeEnvironment.application;
  mUnderTest=(QuickTextPagerView)LayoutInflater.from(RuntimeEnvironment.application).inflate(R.layout.quick_text_popup_root_view,null,false);
  mUnderTest.setThemeValues(10f,new ColorStateList(new int[][]{{0}},new int[]{Color.WHITE}),context.getDrawable(R.drawable.ic_cancel),context.getDrawable(R.drawable.sym_keyboard_delete_light),context.getDrawable(R.drawable.ic_action_settings),context.getDrawable(R.drawable.dark_background));
}",0.9511201629327902
157277,"@Override public boolean onTouchEvent(@NonNull MotionEvent me){
  if (getKeyboard() == null)   return false;
  if (areTouchesDisabled())   return super.onTouchEvent(me);
  final int action=MotionEventCompat.getActionMasked(me);
  if (!mMiniKeyboardPopup.isShowing() && mGestureDetector != null && mGestureDetector.onTouchEvent(me)) {
    Logger.d(TAG,""String_Node_Str"");
    mKeyPressTimingHandler.cancelAllMessages();
    dismissAllKeyPreviews();
    return true;
  }
  if (action == MotionEvent.ACTION_DOWN) {
    mFirstTouchPoint.x=(int)me.getX();
    mFirstTouchPoint.y=(int)me.getY();
    mIsFirstDownEventInsideSpaceBar=mSpaceBarKey != null && mSpaceBarKey.isInside(mFirstTouchPoint.x,mFirstTouchPoint.y);
  }
  if (!mIsFirstDownEventInsideSpaceBar && me.getY() < mExtensionKeyboardYActivationPoint && !mMiniKeyboardPopup.isShowing() && !mExtensionVisible && action == MotionEvent.ACTION_MOVE) {
    if (mExtensionKeyboardAreaEntranceTime <= 0)     mExtensionKeyboardAreaEntranceTime=SystemClock.uptimeMillis();
    if (SystemClock.uptimeMillis() - mExtensionKeyboardAreaEntranceTime > DELAY_BEFORE_POPPING_UP_EXTENSION_KBD) {
      KeyboardExtension extKbd=((ExternalAnyKeyboard)getKeyboard()).getExtensionLayout();
      if (extKbd == null || extKbd.getKeyboardResId() == AddOn.INVALID_RES_ID) {
        Logger.i(TAG,""String_Node_Str"");
        return super.onTouchEvent(me);
      }
 else {
        MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX(),me.getY(),0);
        super.onTouchEvent(cancel);
        cancel.recycle();
        mExtensionVisible=true;
        dismissAllKeyPreviews();
        if (mExtensionKey == null) {
          mExtensionKey=new AnyKey(new Row(getKeyboard()),getThemedKeyboardDimens());
          mExtensionKey.edgeFlags=0;
          mExtensionKey.height=1;
          mExtensionKey.width=1;
          mExtensionKey.popupResId=extKbd.getKeyboardResId();
          mExtensionKey.externalResourcePopupLayout=mExtensionKey.popupResId != 0;
          mExtensionKey.x=getWidth() / 2;
          mExtensionKey.y=mExtensionKeyboardPopupOffset;
        }
        mExtensionKey.x=(int)me.getX();
        onLongPress(extKbd,mExtensionKey,AnyApplication.getConfig().isStickyExtensionKeyboard(),getPointerTracker(me));
        getMiniKeyboard().setPreviewEnabled(true);
        return true;
      }
    }
 else {
      return super.onTouchEvent(me);
    }
  }
 else   if (mExtensionVisible && me.getY() > mExtensionKeyboardYDismissPoint) {
    dismissPopupKeyboard();
    return true;
  }
 else {
    return super.onTouchEvent(me);
  }
}","@Override public boolean onTouchEvent(@NonNull MotionEvent me){
  if (getKeyboard() == null)   return false;
  if (areTouchesDisabled(me)) {
    return super.onTouchEvent(me);
  }
  final int action=MotionEventCompat.getActionMasked(me);
  if (!mMiniKeyboardPopup.isShowing() && mGestureDetector != null && mGestureDetector.onTouchEvent(me)) {
    Logger.d(TAG,""String_Node_Str"");
    mKeyPressTimingHandler.cancelAllMessages();
    dismissAllKeyPreviews();
    return true;
  }
  if (action == MotionEvent.ACTION_DOWN) {
    mFirstTouchPoint.x=(int)me.getX();
    mFirstTouchPoint.y=(int)me.getY();
    mIsFirstDownEventInsideSpaceBar=mSpaceBarKey != null && mSpaceBarKey.isInside(mFirstTouchPoint.x,mFirstTouchPoint.y);
  }
  if (!mIsFirstDownEventInsideSpaceBar && me.getY() < mExtensionKeyboardYActivationPoint && !mMiniKeyboardPopup.isShowing() && !mExtensionVisible && action == MotionEvent.ACTION_MOVE) {
    if (mExtensionKeyboardAreaEntranceTime <= 0)     mExtensionKeyboardAreaEntranceTime=SystemClock.uptimeMillis();
    if (SystemClock.uptimeMillis() - mExtensionKeyboardAreaEntranceTime > DELAY_BEFORE_POPPING_UP_EXTENSION_KBD) {
      KeyboardExtension extKbd=((ExternalAnyKeyboard)getKeyboard()).getExtensionLayout();
      if (extKbd == null || extKbd.getKeyboardResId() == AddOn.INVALID_RES_ID) {
        Logger.i(TAG,""String_Node_Str"");
        return super.onTouchEvent(me);
      }
 else {
        MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX(),me.getY(),0);
        super.onTouchEvent(cancel);
        cancel.recycle();
        mExtensionVisible=true;
        dismissAllKeyPreviews();
        if (mExtensionKey == null) {
          mExtensionKey=new AnyKey(new Row(getKeyboard()),getThemedKeyboardDimens());
          mExtensionKey.edgeFlags=0;
          mExtensionKey.height=1;
          mExtensionKey.width=1;
          mExtensionKey.popupResId=extKbd.getKeyboardResId();
          mExtensionKey.externalResourcePopupLayout=mExtensionKey.popupResId != 0;
          mExtensionKey.x=getWidth() / 2;
          mExtensionKey.y=mExtensionKeyboardPopupOffset;
        }
        mExtensionKey.x=(int)me.getX();
        onLongPress(extKbd,mExtensionKey,AnyApplication.getConfig().isStickyExtensionKeyboard(),getPointerTracker(me));
        getMiniKeyboard().setPreviewEnabled(true);
        return true;
      }
    }
 else {
      return super.onTouchEvent(me);
    }
  }
 else   if (mExtensionVisible && me.getY() > mExtensionKeyboardYDismissPoint) {
    dismissPopupKeyboard();
    return true;
  }
 else {
    return super.onTouchEvent(me);
  }
}",0.9973302822273074
157278,"public boolean areTouchesDisabled(){
  return mTouchesAreDisabledTillLastFingerIsUp;
}","public boolean areTouchesDisabled(MotionEvent motionEvent){
  if (motionEvent != null && mTouchesAreDisabledTillLastFingerIsUp) {
    final int action=MotionEventCompat.getActionMasked(motionEvent);
    if (MotionEventCompat.getPointerCount(motionEvent) == 1 && (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_UP)) {
      mTouchesAreDisabledTillLastFingerIsUp=false;
      return action == MotionEvent.ACTION_UP;
    }
  }
  return mTouchesAreDisabledTillLastFingerIsUp;
}",0.2787682333873582
157279,"@Override public boolean onTouchEvent(@NonNull MotionEvent nativeMotionEvent){
  if (mKeyboard == null)   return false;
  final int action=MotionEventCompat.getActionMasked(nativeMotionEvent);
  final int pointerCount=MotionEventCompat.getPointerCount(nativeMotionEvent);
  if (pointerCount > 1)   mLastTimeHadTwoFingers=SystemClock.elapsedRealtime();
  if (mTouchesAreDisabledTillLastFingerIsUp) {
    if (pointerCount == 1 && (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_UP)) {
      mTouchesAreDisabledTillLastFingerIsUp=false;
      if (action != MotionEvent.ACTION_DOWN) {
        return true;
      }
    }
 else {
      return true;
    }
  }
  final long eventTime=nativeMotionEvent.getEventTime();
  final int index=MotionEventCompat.getActionIndex(nativeMotionEvent);
  final int id=nativeMotionEvent.getPointerId(index);
  final int x=(int)nativeMotionEvent.getX(index);
  final int y=(int)nativeMotionEvent.getY(index);
  if (mKeyPressTimingHandler.isInKeyRepeat()) {
    if (action == MotionEvent.ACTION_MOVE) {
      return true;
    }
    final PointerTracker tracker=getPointerTracker(id);
    if (pointerCount > 1 && !tracker.isModifier()) {
      mKeyPressTimingHandler.cancelKeyRepeatTimer();
    }
  }
  if (action == MotionEvent.ACTION_MOVE) {
    for (int i=0; i < pointerCount; i++) {
      PointerTracker tracker=getPointerTracker(nativeMotionEvent.getPointerId(i));
      tracker.onMoveEvent((int)nativeMotionEvent.getX(i),(int)nativeMotionEvent.getY(i));
    }
  }
 else {
    PointerTracker tracker=getPointerTracker(id);
    sendOnXEvent(action,eventTime,x,y,tracker);
  }
  return true;
}","@Override public boolean onTouchEvent(@NonNull MotionEvent nativeMotionEvent){
  if (mKeyboard == null)   return false;
  final int action=MotionEventCompat.getActionMasked(nativeMotionEvent);
  final int pointerCount=MotionEventCompat.getPointerCount(nativeMotionEvent);
  if (pointerCount > 1)   mLastTimeHadTwoFingers=SystemClock.elapsedRealtime();
  if (mTouchesAreDisabledTillLastFingerIsUp) {
    if (!areTouchesDisabled(nativeMotionEvent)) {
      mTouchesAreDisabledTillLastFingerIsUp=false;
      if (action != MotionEvent.ACTION_DOWN) {
        return true;
      }
    }
 else {
      return true;
    }
  }
  final long eventTime=nativeMotionEvent.getEventTime();
  final int index=MotionEventCompat.getActionIndex(nativeMotionEvent);
  final int id=nativeMotionEvent.getPointerId(index);
  final int x=(int)nativeMotionEvent.getX(index);
  final int y=(int)nativeMotionEvent.getY(index);
  if (mKeyPressTimingHandler.isInKeyRepeat()) {
    if (action == MotionEvent.ACTION_MOVE) {
      return true;
    }
    final PointerTracker tracker=getPointerTracker(id);
    if (pointerCount > 1 && !tracker.isModifier()) {
      mKeyPressTimingHandler.cancelKeyRepeatTimer();
    }
  }
  if (action == MotionEvent.ACTION_MOVE) {
    for (int i=0; i < pointerCount; i++) {
      PointerTracker tracker=getPointerTracker(nativeMotionEvent.getPointerId(i));
      tracker.onMoveEvent((int)nativeMotionEvent.getX(i),(int)nativeMotionEvent.getY(i));
    }
  }
 else {
    PointerTracker tracker=getPointerTracker(id);
    sendOnXEvent(action,eventTime,x,y,tracker);
  }
  return true;
}",0.9044117647058824
157280,"@Test public void testTouchIsDisabledOnGestureUntilAllPointersAreUp(){
  final int primaryKey1='a';
  final int keyAIndex=findKeyIndex(primaryKey1);
  final int keyFIndex=findKeyIndex('f');
  final int keyJIndex=findKeyIndex('j');
  AnyKeyboard.AnyKey key1=(AnyKeyboard.AnyKey)mEnglishKeyboard.getKeys().get(keyAIndex);
  AnyKeyboard.AnyKey key2=(AnyKeyboard.AnyKey)mEnglishKeyboard.getKeys().get(keyJIndex);
  Assert.assertFalse(mViewUnderTest.areTouchesDisabled());
  ViewTestUtils.navigateFromTo(mViewUnderTest,key1,key2,100,true,false);
  InOrder inOrder=Mockito.inOrder(mMockKeyboardListener);
  inOrder.verify(mMockKeyboardListener).onPress(primaryKey1);
  Mockito.verify(mMockKeyboardListener).onFirstDownKey(primaryKey1);
  for (int keyIndex=keyAIndex; keyIndex < keyFIndex; keyIndex++) {
    inOrder.verify(mMockKeyboardListener).onRelease(mEnglishKeyboard.getKeys().get(keyIndex).getCodeAtIndex(0,false));
    inOrder.verify(mMockKeyboardListener).onPress(mEnglishKeyboard.getKeys().get(keyIndex + 1).getCodeAtIndex(0,false));
  }
  inOrder.verify(mMockKeyboardListener).onSwipeRight(false);
  inOrder.verifyNoMoreInteractions();
  Assert.assertTrue(mViewUnderTest.areTouchesDisabled());
  ViewTestUtils.navigateFromTo(mViewUnderTest,key2,key2,20,false,true);
  Assert.assertFalse(mViewUnderTest.areTouchesDisabled());
}","@Test public void testTouchIsDisabledOnGestureUntilAllPointersAreUp(){
  final int primaryKey1='a';
  final int keyAIndex=findKeyIndex(primaryKey1);
  final int keyFIndex=findKeyIndex('f');
  final int keyJIndex=findKeyIndex('j');
  AnyKeyboard.AnyKey key1=(AnyKeyboard.AnyKey)mEnglishKeyboard.getKeys().get(keyAIndex);
  AnyKeyboard.AnyKey key2=(AnyKeyboard.AnyKey)mEnglishKeyboard.getKeys().get(keyJIndex);
  Assert.assertFalse(mViewUnderTest.areTouchesDisabled(null));
  ViewTestUtils.navigateFromTo(mViewUnderTest,key1,key2,100,true,false);
  InOrder inOrder=Mockito.inOrder(mMockKeyboardListener);
  inOrder.verify(mMockKeyboardListener).onPress(primaryKey1);
  Mockito.verify(mMockKeyboardListener).onFirstDownKey(primaryKey1);
  for (int keyIndex=keyAIndex; keyIndex < keyFIndex; keyIndex++) {
    inOrder.verify(mMockKeyboardListener).onRelease(mEnglishKeyboard.getKeys().get(keyIndex).getCodeAtIndex(0,false));
    inOrder.verify(mMockKeyboardListener).onPress(mEnglishKeyboard.getKeys().get(keyIndex + 1).getCodeAtIndex(0,false));
  }
  inOrder.verify(mMockKeyboardListener).onSwipeRight(false);
  inOrder.verifyNoMoreInteractions();
  Assert.assertTrue(mViewUnderTest.areTouchesDisabled(null));
  ViewTestUtils.navigateFromTo(mViewUnderTest,key2,key2,20,false,true);
  Assert.assertFalse(mViewUnderTest.areTouchesDisabled(null));
}",0.9955089820359282
157281,"public void onCancel(){
  hideWindow();
}","public void onCancel(){
}",0.7575757575757576
157282,"private void handleSeparator(int primaryCode){
  if (!getCurrentAlphabetKeyboard().isLeftToRightLanguage()) {
    if (primaryCode == (int)')')     primaryCode=(int)'(';
 else     if (primaryCode == (int)'(')     primaryCode=(int)')';
  }
  mExpectingSelectionUpdateBy=SystemClock.uptimeMillis() + MAX_TIME_TO_EXPECT_SELECTION_UPDATE;
  boolean isEndOfSentence=(primaryCode == KeyCodes.ENTER || mSentenceSeparators.get(primaryCode));
  if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
    postUpdateSuggestions();
  }
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  final boolean separatorInsideWord=(mWord.cursorPosition() < mWord.length());
  if (mPredicting && !separatorInsideWord) {
    if (primaryCode != '\'') {
      pickDefaultSuggestion(mAutoCorrectOn && primaryCode != KeyCodes.ENTER);
      if (primaryCode == KeyCodes.SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
      if (isEndOfSentence)       abortCorrection(true,false);
    }
  }
 else   if (separatorInsideWord) {
    abortCorrection(true,false);
  }
  if (mJustAddedAutoSpace && primaryCode == KeyCodes.ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  if (primaryCode == KeyCodes.ENTER && mShiftKeyState.isPressed() && ic != null) {
    ic.commitText(""String_Node_Str"",1);
  }
 else {
    boolean handledOutputToInputConnection=false;
    if (ic != null) {
      if (primaryCode == KeyCodes.SPACE) {
        if (mAskPrefs.isDoubleSpaceChangesToPeriod()) {
          if ((SystemClock.uptimeMillis() - mLastSpaceTimeStamp) < ((long)mAskPrefs.getMultiTapTimeout())) {
            ic.deleteSurroundingText(1,0);
            ic.commitText(""String_Node_Str"",1);
            mJustAddedAutoSpace=true;
            isEndOfSentence=true;
            handledOutputToInputConnection=true;
          }
        }
      }
 else       if (mJustAddedAutoSpace && mLastSpaceTimeStamp != NEVER_TIME_STAMP && mAskPrefs.shouldSwapPunctuationAndSpace() && primaryCode != KeyCodes.ENTER && isSentenceSeparator(primaryCode)) {
        ic.deleteSurroundingText(1,0);
        ic.commitText(((char)primaryCode) + ""String_Node_Str"",1);
        mJustAddedAutoSpace=true;
        handledOutputToInputConnection=true;
      }
    }
    if (!handledOutputToInputConnection) {
      final EditorInfo ei=getCurrentInputEditorInfo();
      if (primaryCode == KeyCodes.ENTER && ic != null && ei != null && ((ei.imeOptions & EditorInfo.IME_MASK_ACTION) > EditorInfo.IME_ACTION_NONE || ei.actionId > EditorInfo.IME_ACTION_NONE)) {
        final int actionId=ei.actionId > EditorInfo.IME_ACTION_NONE ? ei.actionId : ei.imeOptions & EditorInfo.IME_MASK_ACTION;
        ic.performEditorAction(actionId);
      }
 else {
        sendKeyChar((char)primaryCode);
      }
    }
    TextEntryState.typedCharacter((char)primaryCode,true);
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
  if (isEndOfSentence) {
    mSuggest.resetNextWordSentence();
    clearSuggestions();
  }
 else   if (!TextUtils.isEmpty(mCommittedWord)) {
    setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,mWord.isAllUpperCase()),false,false,false);
    mWord.setFirstCharCapitalized(false);
  }
}","private void handleSeparator(int primaryCode){
  if (!getCurrentAlphabetKeyboard().isLeftToRightLanguage()) {
    if (primaryCode == (int)')')     primaryCode=(int)'(';
 else     if (primaryCode == (int)'(')     primaryCode=(int)')';
  }
  mExpectingSelectionUpdateBy=SystemClock.uptimeMillis() + MAX_TIME_TO_EXPECT_SELECTION_UPDATE;
  boolean isEndOfSentence=(primaryCode == KeyCodes.ENTER || mSentenceSeparators.get(primaryCode));
  if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
    postUpdateSuggestions();
  }
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  final boolean separatorInsideWord=(mWord.cursorPosition() < mWord.length());
  if (mPredicting && !separatorInsideWord) {
    if (primaryCode != '\'') {
      pickDefaultSuggestion(mAutoCorrectOn && primaryCode != KeyCodes.ENTER);
      if (primaryCode == KeyCodes.SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
      if (isEndOfSentence)       abortCorrection(true,false);
    }
  }
 else   if (separatorInsideWord) {
    abortCorrection(true,false);
  }
  if (mJustAddedAutoSpace && primaryCode == KeyCodes.ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  boolean handledOutputToInputConnection=false;
  if (ic != null) {
    if (primaryCode == KeyCodes.SPACE) {
      if (mAskPrefs.isDoubleSpaceChangesToPeriod()) {
        if ((SystemClock.uptimeMillis() - mLastSpaceTimeStamp) < ((long)mAskPrefs.getMultiTapTimeout())) {
          ic.deleteSurroundingText(1,0);
          ic.commitText(""String_Node_Str"",1);
          mJustAddedAutoSpace=true;
          isEndOfSentence=true;
          handledOutputToInputConnection=true;
        }
      }
    }
 else     if (mJustAddedAutoSpace && mLastSpaceTimeStamp != NEVER_TIME_STAMP && mAskPrefs.shouldSwapPunctuationAndSpace() && primaryCode != KeyCodes.ENTER && isSentenceSeparator(primaryCode)) {
      ic.deleteSurroundingText(1,0);
      ic.commitText(((char)primaryCode) + ""String_Node_Str"",1);
      mJustAddedAutoSpace=true;
      handledOutputToInputConnection=true;
    }
  }
  if (!handledOutputToInputConnection) {
    sendKeyChar((char)primaryCode);
  }
  TextEntryState.typedCharacter((char)primaryCode,true);
  if (ic != null) {
    ic.endBatchEdit();
  }
  if (isEndOfSentence) {
    mSuggest.resetNextWordSentence();
    clearSuggestions();
  }
 else   if (!TextUtils.isEmpty(mCommittedWord)) {
    setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,mWord.isAllUpperCase()),false,false,false);
    mWord.setFirstCharCapitalized(false);
  }
}",0.5384615384615384
157283,"private void onNonFunctionKey(final int primaryCode,final Key key,final int multiTapIndex,final int[] nearByKeyCodes,final boolean fromUI){
  if (BuildConfig.DEBUG)   Logger.d(TAG,""String_Node_Str"",primaryCode);
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.ENTER:
case KeyCodes.SPACE:
    handleSeparator(primaryCode);
  if (!isInAlphabetKeyboardMode()) {
    Logger.d(TAG,""String_Node_Str"");
    if (mAskPrefs.getSwitchKeyboardOnSpace()) {
      Logger.d(TAG,""String_Node_Str"");
      getKeyboardSwitcher().nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
    }
  }
break;
case KeyCodes.TAB:
sendTab();
break;
case KeyCodes.ESCAPE:
sendEscape();
break;
default :
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
}
 else {
if (mControlKeyState.isActive() && primaryCode >= 32 && primaryCode < 127) {
int controlCode=primaryCode & 31;
Logger.d(TAG,""String_Node_Str"",primaryCode,controlCode);
if (controlCode == 9) {
sendTab();
}
 else {
ic.commitText(Character.toString((char)controlCode),1);
}
}
 else {
handleCharacter(primaryCode,key,multiTapIndex,nearByKeyCodes);
}
mJustAddedAutoSpace=false;
}
break;
}
}","private void onNonFunctionKey(final int primaryCode,final Key key,final int multiTapIndex,final int[] nearByKeyCodes,final boolean fromUI){
  if (BuildConfig.DEBUG)   Logger.d(TAG,""String_Node_Str"",primaryCode);
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.ENTER:
    if (mShiftKeyState.isPressed() && ic != null) {
      ic.commitText(""String_Node_Str"",1);
      break;
    }
  final EditorInfo editorInfo=getCurrentInputEditorInfo();
final int imeOptionsActionId=IMEUtil.getImeOptionsActionIdFromEditorInfo(editorInfo);
if (ic != null && IMEUtil.IME_ACTION_CUSTOM_LABEL == imeOptionsActionId) {
ic.performEditorAction(editorInfo.actionId);
}
 else if (ic != null && EditorInfo.IME_ACTION_NONE != imeOptionsActionId) {
ic.performEditorAction(imeOptionsActionId);
}
 else {
handleSeparator(primaryCode);
}
break;
case KeyCodes.SPACE:
handleSeparator(primaryCode);
if (!isInAlphabetKeyboardMode()) {
Logger.d(TAG,""String_Node_Str"");
if (mAskPrefs.getSwitchKeyboardOnSpace()) {
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
}
}
break;
case KeyCodes.TAB:
sendTab();
break;
case KeyCodes.ESCAPE:
sendEscape();
break;
default :
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
}
 else {
if (mControlKeyState.isActive() && primaryCode >= 32 && primaryCode < 127) {
int controlCode=primaryCode & 31;
Logger.d(TAG,""String_Node_Str"",primaryCode,controlCode);
if (controlCode == 9) {
sendTab();
}
 else {
ic.commitText(Character.toString((char)controlCode),1);
}
}
 else {
handleCharacter(primaryCode,key,multiTapIndex,nearByKeyCodes);
}
mJustAddedAutoSpace=false;
}
break;
}
}",0.7915949018256976
157284,"public void setKeyboardActionType(final int imeOptions){
  if ((imeOptions & EditorInfo.IME_FLAG_NO_ENTER_ACTION) != 0)   mKeyboardActionType=EditorInfo.IME_ACTION_UNSPECIFIED;
 else   mKeyboardActionType=(imeOptions & EditorInfo.IME_MASK_ACTION);
  setSpecialKeysIconsAndLabels();
}","public void setKeyboardActionType(final int imeOptions){
  if ((imeOptions & EditorInfo.IME_FLAG_NO_ENTER_ACTION) != 0)   mKeyboardActionType=EditorInfo.IME_ACTION_NONE;
 else   mKeyboardActionType=(imeOptions & EditorInfo.IME_MASK_ACTION);
  setSpecialKeysIconsAndLabels();
}",0.6225402504472272
157285,"@Test public void testSendsEnterIfNoneAction() throws Exception {
  mAnySoftKeyboardUnderTest.onFinishInputView(true);
  mAnySoftKeyboardUnderTest.onFinishInput();
  EditorInfo editorInfo=TestableAnySoftKeyboard.createEditorInfo(EditorInfo.IME_ACTION_NONE,InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  mAnySoftKeyboardUnderTest.onStartInput(editorInfo,false);
  mAnySoftKeyboardUnderTest.onStartInputView(editorInfo,false);
  TestInputConnection inputConnection=(TestInputConnection)mAnySoftKeyboardUnderTest.getCurrentInputConnection();
  Assert.assertEquals(0,inputConnection.getLastEditorAction());
  mAnySoftKeyboardUnderTest.simulateKeyPress(KeyCodes.ENTER);
  Assert.assertEquals(0,inputConnection.getLastEditorAction());
}","@Test public void testSendsEnterIfNoneAction() throws Exception {
  mAnySoftKeyboardUnderTest.onFinishInputView(true);
  mAnySoftKeyboardUnderTest.onFinishInput();
  EditorInfo editorInfo=TestableAnySoftKeyboard.createEditorInfo(EditorInfo.IME_ACTION_NONE,InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  mAnySoftKeyboardUnderTest.onStartInput(editorInfo,false);
  mAnySoftKeyboardUnderTest.onStartInputView(editorInfo,false);
  TestInputConnection inputConnection=(TestInputConnection)mAnySoftKeyboardUnderTest.getCurrentInputConnection();
  Assert.assertEquals(0,inputConnection.getLastEditorAction());
  mAnySoftKeyboardUnderTest.simulateKeyPress(KeyCodes.ENTER);
  Assert.assertEquals(0,inputConnection.getLastEditorAction());
  Assert.assertEquals(""String_Node_Str"",inputConnection.getCurrentTextInInputConnection());
}",0.9423558897243108
157286,"@Test public void testEditorPerformsActionIfImeOptionsSpecified() throws Exception {
  mAnySoftKeyboardUnderTest.onFinishInputView(true);
  mAnySoftKeyboardUnderTest.onFinishInput();
  EditorInfo editorInfo=TestableAnySoftKeyboard.createEditorInfo(EditorInfo.IME_ACTION_DONE,InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  mAnySoftKeyboardUnderTest.onStartInput(editorInfo,false);
  mAnySoftKeyboardUnderTest.onStartInputView(editorInfo,false);
  TestInputConnection inputConnection=(TestInputConnection)mAnySoftKeyboardUnderTest.getCurrentInputConnection();
  Assert.assertEquals(0,inputConnection.getLastEditorAction());
  mAnySoftKeyboardUnderTest.simulateKeyPress(KeyCodes.ENTER);
  Assert.assertEquals(EditorInfo.IME_ACTION_DONE,inputConnection.getLastEditorAction());
}","@Test public void testEditorPerformsActionIfImeOptionsSpecified() throws Exception {
  mAnySoftKeyboardUnderTest.onFinishInputView(true);
  mAnySoftKeyboardUnderTest.onFinishInput();
  EditorInfo editorInfo=TestableAnySoftKeyboard.createEditorInfo(EditorInfo.IME_ACTION_DONE,InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  mAnySoftKeyboardUnderTest.onStartInput(editorInfo,false);
  mAnySoftKeyboardUnderTest.onStartInputView(editorInfo,false);
  TestInputConnection inputConnection=(TestInputConnection)mAnySoftKeyboardUnderTest.getCurrentInputConnection();
  Assert.assertEquals(0,inputConnection.getLastEditorAction());
  mAnySoftKeyboardUnderTest.simulateKeyPress(KeyCodes.ENTER);
  Assert.assertEquals(EditorInfo.IME_ACTION_DONE,inputConnection.getLastEditorAction());
  Assert.assertEquals(""String_Node_Str"",inputConnection.getCurrentTextInInputConnection());
}",0.9453681710213776
157287,"@Test public void testSendsENTERKeyEventIfShiftIsNotPressedAndImeDoesNotHaveAction(){
  TestInputConnection inputConnection=(TestInputConnection)mAnySoftKeyboardUnderTest.getCurrentInputConnection();
  mAnySoftKeyboardUnderTest.simulateKeyPress(KeyCodes.ENTER);
  ArgumentCaptor<KeyEvent> keyEventArgumentCaptor=ArgumentCaptor.forClass(KeyEvent.class);
  Mockito.verify(inputConnection,Mockito.times(2)).sendKeyEvent(keyEventArgumentCaptor.capture());
  Assert.assertEquals(2,keyEventArgumentCaptor.getAllValues().size());
  Assert.assertEquals(KeyEvent.KEYCODE_ENTER,keyEventArgumentCaptor.getAllValues().get(0).getKeyCode());
  Assert.assertEquals(KeyEvent.ACTION_DOWN,keyEventArgumentCaptor.getAllValues().get(0).getAction());
  Assert.assertEquals(KeyEvent.KEYCODE_ENTER,keyEventArgumentCaptor.getAllValues().get(1).getKeyCode());
  Assert.assertEquals(KeyEvent.ACTION_UP,keyEventArgumentCaptor.getAllValues().get(1).getAction());
  Mockito.verify(inputConnection,Mockito.never()).commitText(""String_Node_Str"",1);
}","@Test public void testSendsENTERKeyEventIfShiftIsNotPressedAndImeDoesNotHaveAction(){
  TestInputConnection inputConnection=(TestInputConnection)mAnySoftKeyboardUnderTest.getCurrentInputConnection();
  mAnySoftKeyboardUnderTest.simulateKeyPress(KeyCodes.ENTER);
  ArgumentCaptor<KeyEvent> keyEventArgumentCaptor=ArgumentCaptor.forClass(KeyEvent.class);
  Mockito.verify(inputConnection,Mockito.times(2)).sendKeyEvent(keyEventArgumentCaptor.capture());
  Assert.assertEquals(2,keyEventArgumentCaptor.getAllValues().size());
  Assert.assertEquals(KeyEvent.KEYCODE_ENTER,keyEventArgumentCaptor.getAllValues().get(0).getKeyCode());
  Assert.assertEquals(KeyEvent.ACTION_DOWN,keyEventArgumentCaptor.getAllValues().get(0).getAction());
  Assert.assertEquals(KeyEvent.KEYCODE_ENTER,keyEventArgumentCaptor.getAllValues().get(1).getKeyCode());
  Assert.assertEquals(KeyEvent.ACTION_UP,keyEventArgumentCaptor.getAllValues().get(1).getAction());
  Assert.assertEquals(""String_Node_Str"",inputConnection.getCurrentTextInInputConnection());
}",0.9379579872984856
157288,"@Override public boolean sendKeyEvent(KeyEvent event){
  boolean handled=false;
  if (event.getAction() == KeyEvent.ACTION_UP) {
    if (event.getKeyCode() == KeyEvent.KEYCODE_DEL) {
      if (mSelectionEndPosition == mCursorPosition) {
        handled=true;
        deleteSurroundingText(1,0);
      }
 else {
        handled=true;
        mInputText.delete(mCursorPosition,mSelectionEndPosition);
        notifyTextChange(0);
      }
    }
 else     if (event.getKeyCode() == KeyEvent.KEYCODE_SPACE) {
      handled=true;
      commitText(""String_Node_Str"",1);
    }
 else     if (event.getKeyCode() >= KeyEvent.KEYCODE_0 || event.getKeyCode() <= KeyEvent.KEYCODE_9) {
      handled=true;
      commitText(Integer.toString(event.getKeyCode() - KeyEvent.KEYCODE_0),1);
    }
 else     if (event.getKeyCode() >= KeyEvent.KEYCODE_A || event.getKeyCode() <= KeyEvent.KEYCODE_Z) {
      handled=true;
      commitText(""String_Node_Str"" + (char)(event.getKeyCode() - KeyEvent.KEYCODE_A + 'a'),1);
    }
  }
  if (!handled) {
    if (event.getAction() == KeyEvent.ACTION_DOWN) {
      mIme.onKeyDown(event.getKeyCode(),event);
    }
 else {
      mIme.onKeyUp(event.getKeyCode(),event);
    }
  }
  return true;
}","@Override public boolean sendKeyEvent(KeyEvent event){
  boolean handled=false;
  if (event.getAction() == KeyEvent.ACTION_UP) {
    if (event.getKeyCode() == KeyEvent.KEYCODE_DEL) {
      if (mSelectionEndPosition == mCursorPosition) {
        handled=true;
        deleteSurroundingText(1,0);
      }
 else {
        handled=true;
        mInputText.delete(mCursorPosition,mSelectionEndPosition);
        notifyTextChange(0);
      }
    }
 else     if (event.getKeyCode() == KeyEvent.KEYCODE_SPACE) {
      handled=true;
      commitText(""String_Node_Str"",1);
    }
 else     if (event.getKeyCode() == KeyEvent.KEYCODE_ENTER) {
      handled=true;
      commitText(""String_Node_Str"",1);
    }
 else     if (event.getKeyCode() >= KeyEvent.KEYCODE_0 || event.getKeyCode() <= KeyEvent.KEYCODE_9) {
      handled=true;
      commitText(Integer.toString(event.getKeyCode() - KeyEvent.KEYCODE_0),1);
    }
 else     if (event.getKeyCode() >= KeyEvent.KEYCODE_A || event.getKeyCode() <= KeyEvent.KEYCODE_Z) {
      handled=true;
      commitText(""String_Node_Str"" + (char)(event.getKeyCode() - KeyEvent.KEYCODE_A + 'a'),1);
    }
  }
  if (!handled) {
    if (event.getAction() == KeyEvent.ACTION_DOWN) {
      mIme.onKeyDown(event.getKeyCode(),event);
    }
 else {
      mIme.onKeyUp(event.getKeyCode(),event);
    }
  }
  return true;
}",0.9500589854502556
157289,"private void setDictionariesForCurrentKeyboard(){
  mSuggest.resetNextWordSentence();
  if (mPredictionOn) {
    mLastDictionaryRefresh=SystemClock.elapsedRealtime();
    final AnyKeyboard currentAlphabetKeyboard=getCurrentAlphabetKeyboard();
    if ((currentAlphabetKeyboard != null) && isInAlphabetKeyboardMode()) {
      fillSeparatorsSparseArray(mSentenceSeparators,currentAlphabetKeyboard.getSentenceSeparators());
      String mappingSettingsKey=getDictionaryOverrideKey(currentAlphabetKeyboard);
      String defaultDictionary=currentAlphabetKeyboard.getDefaultDictionaryLocale();
      String dictionaryValue=getSharedPrefs().getString(mappingSettingsKey,null);
      final DictionaryAddOnAndBuilder dictionaryBuilder;
      if (dictionaryValue == null) {
        dictionaryBuilder=ExternalDictionaryFactory.getDictionaryBuilderByLocale(currentAlphabetKeyboard.getDefaultDictionaryLocale(),getApplicationContext());
      }
 else {
        Logger.d(TAG,""String_Node_Str"",defaultDictionary,currentAlphabetKeyboard.getKeyboardPrefId(),dictionaryValue);
        dictionaryBuilder=ExternalDictionaryFactory.getDictionaryBuilderById(dictionaryValue,getApplicationContext());
      }
      mSuggest.setMainDictionary(getApplicationContext(),dictionaryBuilder);
      String localeForSupportingDictionaries=dictionaryBuilder != null ? dictionaryBuilder.getLanguage() : defaultDictionary;
      Dictionary userDictionary=mSuggest.getDictionaryFactory().createUserDictionary(getApplicationContext(),localeForSupportingDictionaries);
      mSuggest.setUserDictionary(userDictionary);
      mAutoDictionary=mSuggest.getDictionaryFactory().createAutoDictionary(getApplicationContext(),localeForSupportingDictionaries);
      mSuggest.setAutoDictionary(mAutoDictionary);
      mSuggest.setContactsDictionary(getApplicationContext(),mAskPrefs.useContactsDictionary());
    }
  }
}","private void setDictionariesForCurrentKeyboard(){
  mSuggest.resetNextWordSentence();
  if (mPredictionOn) {
    final AnyKeyboard currentAlphabetKeyboard=getCurrentAlphabetKeyboard();
    if ((currentAlphabetKeyboard != null) && isInAlphabetKeyboardMode()) {
      fillSeparatorsSparseArray(mSentenceSeparators,currentAlphabetKeyboard.getSentenceSeparators());
      String mappingSettingsKey=getDictionaryOverrideKey(currentAlphabetKeyboard);
      String defaultDictionary=currentAlphabetKeyboard.getDefaultDictionaryLocale();
      String dictionaryValue=getSharedPrefs().getString(mappingSettingsKey,null);
      final DictionaryAddOnAndBuilder dictionaryBuilder;
      if (dictionaryValue == null) {
        dictionaryBuilder=ExternalDictionaryFactory.getDictionaryBuilderByLocale(currentAlphabetKeyboard.getDefaultDictionaryLocale(),getApplicationContext());
      }
 else {
        Logger.d(TAG,""String_Node_Str"",defaultDictionary,currentAlphabetKeyboard.getKeyboardPrefId(),dictionaryValue);
        dictionaryBuilder=ExternalDictionaryFactory.getDictionaryBuilderById(dictionaryValue,getApplicationContext());
      }
      mSuggest.setMainDictionary(getApplicationContext(),dictionaryBuilder);
      String localeForSupportingDictionaries=dictionaryBuilder != null ? dictionaryBuilder.getLanguage() : defaultDictionary;
      Dictionary userDictionary=mSuggest.getDictionaryFactory().createUserDictionary(getApplicationContext(),localeForSupportingDictionaries);
      mSuggest.setUserDictionary(userDictionary);
      mAutoDictionary=mSuggest.getDictionaryFactory().createAutoDictionary(getApplicationContext(),localeForSupportingDictionaries);
      mSuggest.setAutoDictionary(mAutoDictionary);
      mSuggest.setContactsDictionary(getApplicationContext(),mAskPrefs.useContactsDictionary());
    }
  }
}",0.9842818428184282
157290,"private void nextKeyboard(EditorInfo currentEditorInfo,KeyboardSwitcher.NextKeyboardType type){
  getKeyboardSwitcher().nextKeyboard(currentEditorInfo,type);
  setKeyboardFinalStuff();
}","private void nextKeyboard(EditorInfo currentEditorInfo,KeyboardSwitcher.NextKeyboardType type){
  getKeyboardSwitcher().nextKeyboard(currentEditorInfo,type);
}",0.9217391304347826
157291,"private void showLanguageSelectionDialog(){
  KeyboardAddOnAndBuilder[] builders=getKeyboardSwitcher().getEnabledKeyboardsBuilders();
  ArrayList<CharSequence> keyboardsIds=new ArrayList<>();
  ArrayList<CharSequence> keyboards=new ArrayList<>();
  for (  KeyboardAddOnAndBuilder keyboardBuilder : builders) {
    keyboardsIds.add(keyboardBuilder.getId());
    String name=keyboardBuilder.getName();
    keyboards.add(name);
  }
  final CharSequence[] ids=new CharSequence[keyboardsIds.size()];
  final CharSequence[] items=new CharSequence[keyboards.size()];
  keyboardsIds.toArray(ids);
  keyboards.toArray(items);
  showOptionsDialogWithData(getText(R.string.select_keyboard_popup_title),R.drawable.ic_keyboard_globe_menu,items,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface di,    int position){
      CharSequence id=ids[position];
      Logger.d(TAG,""String_Node_Str"",items[position],id);
      EditorInfo currentEditorInfo=getCurrentInputEditorInfo();
      getKeyboardSwitcher().nextAlphabetKeyboard(currentEditorInfo,id.toString());
      setKeyboardFinalStuff();
    }
  }
);
}","private void showLanguageSelectionDialog(){
  KeyboardAddOnAndBuilder[] builders=getKeyboardSwitcher().getEnabledKeyboardsBuilders();
  ArrayList<CharSequence> keyboardsIds=new ArrayList<>();
  ArrayList<CharSequence> keyboards=new ArrayList<>();
  for (  KeyboardAddOnAndBuilder keyboardBuilder : builders) {
    keyboardsIds.add(keyboardBuilder.getId());
    String name=keyboardBuilder.getName();
    keyboards.add(name);
  }
  final CharSequence[] ids=new CharSequence[keyboardsIds.size()];
  final CharSequence[] items=new CharSequence[keyboards.size()];
  keyboardsIds.toArray(ids);
  keyboards.toArray(items);
  showOptionsDialogWithData(getText(R.string.select_keyboard_popup_title),R.drawable.ic_keyboard_globe_menu,items,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface di,    int position){
      CharSequence id=ids[position];
      Logger.d(TAG,""String_Node_Str"",items[position],id);
      EditorInfo currentEditorInfo=getCurrentInputEditorInfo();
      getKeyboardSwitcher().nextAlphabetKeyboard(currentEditorInfo,id.toString());
    }
  }
);
}",0.9860045146726862
157292,"void closeDictionaries(){
  mSuggest.closeDictionaries();
  mLastDictionaryRefresh=-1;
}","void closeDictionaries(){
  mSuggest.closeDictionaries();
}",0.8027210884353742
157293,"@Override public void onStartInputView(final EditorInfo attribute,final boolean restarting){
  Logger.v(TAG,""String_Node_Str"",attribute.imeOptions,attribute.inputType,restarting);
  super.onStartInputView(attribute,restarting);
  if (mVoiceRecognitionTrigger != null) {
    mVoiceRecognitionTrigger.onStartInputView();
  }
  if (getInputView() == null) {
    return;
  }
  getInputView().dismissPopupKeyboard();
  getInputView().setKeyboardActionType(attribute.imeOptions);
  mPredictionOn=false;
  mCompletionOn=false;
  mCompletions=null;
switch (attribute.inputType & EditorInfo.TYPE_MASK_CLASS) {
case EditorInfo.TYPE_CLASS_DATETIME:
    Logger.d(TAG,""String_Node_Str"");
  getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_DATETIME,attribute,restarting);
break;
case EditorInfo.TYPE_CLASS_NUMBER:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_NUMBERS,attribute,restarting);
break;
case EditorInfo.TYPE_CLASS_PHONE:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_PHONE,attribute,restarting);
break;
case EditorInfo.TYPE_CLASS_TEXT:
Logger.d(TAG,""String_Node_Str"");
final int variation=attribute.inputType & EditorInfo.TYPE_MASK_VARIATION;
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_PASSWORD:
case EditorInfo.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD:
case EditorInfo.TYPE_TEXT_VARIATION_WEB_PASSWORD:
Logger.d(TAG,""String_Node_Str"");
mPredictionOn=false;
break;
default :
mPredictionOn=true;
}
if (mAskPrefs.getInsertSpaceAfterCandidatePick()) {
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
case EditorInfo.TYPE_TEXT_VARIATION_URI:
case EditorInfo.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS:
mAutoSpace=false;
break;
default :
mAutoSpace=true;
}
}
 else {
mAutoSpace=false;
}
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
case EditorInfo.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_EMAIL,attribute,restarting);
mPredictionOn=false;
break;
case EditorInfo.TYPE_TEXT_VARIATION_URI:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_URL,attribute,restarting);
mPredictionOn=false;
break;
case EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_IM,attribute,restarting);
break;
default :
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_TEXT,attribute,restarting);
}
final int textFlag=attribute.inputType & EditorInfo.TYPE_MASK_FLAGS;
if ((textFlag & EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS) == EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS || (textFlag & EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE) == EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE) {
Logger.d(TAG,""String_Node_Str"");
mPredictionOn=false;
}
break;
default :
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_TEXT,attribute,restarting);
mPredictionOn=false;
mAutoSpace=true;
}
mPredicting=false;
mJustAddedAutoSpace=false;
setCandidatesViewShown(false);
mPredictionOn=mPredictionOn && (mShowSuggestions);
clearSuggestions();
if (mPredictionOn) {
if (mLastDictionaryRefresh < 0 || (SystemClock.elapsedRealtime() - mLastDictionaryRefresh) > MINIMUM_REFRESH_TIME_FOR_DICTIONARIES) {
setDictionariesForCurrentKeyboard();
}
}
updateShiftStateNow();
}","@Override public void onStartInputView(final EditorInfo attribute,final boolean restarting){
  Logger.v(TAG,""String_Node_Str"",attribute.imeOptions,attribute.inputType,restarting);
  super.onStartInputView(attribute,restarting);
  if (mVoiceRecognitionTrigger != null) {
    mVoiceRecognitionTrigger.onStartInputView();
  }
  if (getInputView() == null) {
    return;
  }
  getInputView().dismissPopupKeyboard();
  getInputView().setKeyboardActionType(attribute.imeOptions);
  mPredictionOn=false;
  mCompletionOn=false;
  mCompletions=null;
switch (attribute.inputType & EditorInfo.TYPE_MASK_CLASS) {
case EditorInfo.TYPE_CLASS_DATETIME:
    Logger.d(TAG,""String_Node_Str"");
  getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_DATETIME,attribute,restarting);
break;
case EditorInfo.TYPE_CLASS_NUMBER:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_NUMBERS,attribute,restarting);
break;
case EditorInfo.TYPE_CLASS_PHONE:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_PHONE,attribute,restarting);
break;
case EditorInfo.TYPE_CLASS_TEXT:
Logger.d(TAG,""String_Node_Str"");
final int variation=attribute.inputType & EditorInfo.TYPE_MASK_VARIATION;
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_PASSWORD:
case EditorInfo.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD:
case EditorInfo.TYPE_TEXT_VARIATION_WEB_PASSWORD:
Logger.d(TAG,""String_Node_Str"");
mPredictionOn=false;
break;
default :
mPredictionOn=true;
}
if (mAskPrefs.getInsertSpaceAfterCandidatePick()) {
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
case EditorInfo.TYPE_TEXT_VARIATION_URI:
case EditorInfo.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS:
mAutoSpace=false;
break;
default :
mAutoSpace=true;
}
}
 else {
mAutoSpace=false;
}
final int textFlag=attribute.inputType & EditorInfo.TYPE_MASK_FLAGS;
if ((textFlag & EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS) == EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS || (textFlag & EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE) == EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE) {
Logger.d(TAG,""String_Node_Str"");
mPredictionOn=false;
}
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
case EditorInfo.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_EMAIL,attribute,restarting);
mPredictionOn=false;
break;
case EditorInfo.TYPE_TEXT_VARIATION_URI:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_URL,attribute,restarting);
mPredictionOn=false;
break;
case EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE:
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_IM,attribute,restarting);
break;
default :
Logger.d(TAG,""String_Node_Str"");
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_TEXT,attribute,restarting);
}
break;
default :
Logger.d(TAG,""String_Node_Str"");
mPredictionOn=false;
mAutoSpace=true;
getKeyboardSwitcher().setKeyboardMode(KeyboardSwitcher.INPUT_MODE_TEXT,attribute,restarting);
}
mPredicting=false;
mJustAddedAutoSpace=false;
setCandidatesViewShown(false);
mPredictionOn=mPredictionOn && (mShowSuggestions);
clearSuggestions();
updateShiftStateNow();
}",0.833626244874048
157294,"@Override public void onAlphabetKeyboardSet(@NonNull AnyKeyboard keyboard){
  super.onAlphabetKeyboardSet(keyboard);
  setKeyboardForView(keyboard);
}","@Override public void onAlphabetKeyboardSet(@NonNull AnyKeyboard keyboard){
  super.onAlphabetKeyboardSet(keyboard);
  setKeyboardForView(keyboard);
  setKeyboardFinalStuff();
}",0.9174311926605504
157295,"@Test public void testDoesNotCloseDictionaryIfInputRestartsQuickly(){
  final EditorInfo editorInfo=TestableAnySoftKeyboard.createEditorInfoTextWithSuggestions();
  mAnySoftKeyboardUnderTest.onStartInput(editorInfo,false);
  mAnySoftKeyboardUnderTest.onCreateInputView();
  mAnySoftKeyboardUnderTest.onStartInputView(editorInfo,false);
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest()).setUserDictionary(Mockito.isNotNull(Dictionary.class));
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedSuggest());
  mAnySoftKeyboardUnderTest.onFinishInputView(true);
  mAnySoftKeyboardUnderTest.onFinishInput();
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).closeDictionaries();
  ShadowSystemClock.sleep(10);
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).closeDictionaries();
  mAnySoftKeyboardUnderTest.onStartInput(editorInfo,false);
  mAnySoftKeyboardUnderTest.onStartInputView(editorInfo,false);
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).setUserDictionary(Mockito.any(Dictionary.class));
}","@Test public void testDoesNotCloseDictionaryIfInputRestartsQuickly(){
  final EditorInfo editorInfo=TestableAnySoftKeyboard.createEditorInfoTextWithSuggestions();
  mAnySoftKeyboardUnderTest.onStartInput(editorInfo,false);
  mAnySoftKeyboardUnderTest.onCreateInputView();
  mAnySoftKeyboardUnderTest.onStartInputView(editorInfo,false);
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest()).setUserDictionary(Mockito.isNotNull(Dictionary.class));
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedSuggest());
  mAnySoftKeyboardUnderTest.onFinishInputView(true);
  mAnySoftKeyboardUnderTest.onFinishInput();
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).closeDictionaries();
  ShadowSystemClock.sleep(10);
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).closeDictionaries();
  mAnySoftKeyboardUnderTest.onStartInput(editorInfo,false);
  mAnySoftKeyboardUnderTest.onStartInputView(editorInfo,false);
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest()).setUserDictionary(Mockito.any(Dictionary.class));
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).closeDictionaries();
}",0.93010989010989
157296,"@Before public void setUp() throws Exception {
  ServiceController<TestableAnySoftKeyboard> mAnySoftKeyboardController=Robolectric.buildService(TestableAnySoftKeyboard.class);
  mAnySoftKeyboardUnderTest=mAnySoftKeyboardController.attach().create().get();
  Assert.assertNotNull(mAnySoftKeyboardUnderTest.getSpiedSuggest());
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).setUserDictionary(Mockito.any(Dictionary.class));
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).setAutoDictionary(Mockito.any(Dictionary.class));
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).setContactsDictionary(Mockito.any(Context.class),Mockito.anyBoolean());
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).setMainDictionary(Mockito.any(Context.class),Mockito.any(DictionaryAddOnAndBuilder.class));
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest()).setCorrectionMode(true,true,2,3,2);
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedSuggest());
  UserDictionary userDictionary=new UserDictionary(RuntimeEnvironment.application,""String_Node_Str"");
  userDictionary.loadDictionary();
  for (int wordIndex=0; wordIndex < DICTIONATY_WORDS.length; wordIndex++) {
    userDictionary.addWord(DICTIONATY_WORDS[wordIndex],DICTIONATY_WORDS.length - wordIndex);
  }
  userDictionary.close();
}","@Before public void setUp() throws Exception {
  ServiceController<TestableAnySoftKeyboard> mAnySoftKeyboardController=Robolectric.buildService(TestableAnySoftKeyboard.class);
  mAnySoftKeyboardUnderTest=mAnySoftKeyboardController.attach().create().get();
  Assert.assertNotNull(mAnySoftKeyboardUnderTest.getSpiedSuggest());
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).setUserDictionary(Mockito.any(Dictionary.class));
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).setAutoDictionary(Mockito.any(Dictionary.class));
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).setContactsDictionary(Mockito.any(Context.class),Mockito.anyBoolean());
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).setMainDictionary(Mockito.any(Context.class),Mockito.any(DictionaryAddOnAndBuilder.class));
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest()).setCorrectionMode(true,true,2,3,2);
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedSuggest());
  UserDictionary userDictionary=new UserDictionary(RuntimeEnvironment.application,""String_Node_Str"");
  userDictionary.loadDictionary();
  for (int wordIndex=0; wordIndex < DICTIONATY_WORDS.length; wordIndex++) {
    userDictionary.addWord(DICTIONATY_WORDS[wordIndex],DICTIONATY_WORDS.length - wordIndex);
  }
  userDictionary.close();
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedSuggest());
}",0.9783065080475856
157297,"private void launchDictionaryOverriding(){
  final String dictionaryOverridingKey=getDictionaryOverrideKey(getCurrentAlphabetKeyboard());
  final String dictionaryOverrideValue=getSharedPrefs().getString(dictionaryOverridingKey,null);
  ArrayList<CharSequence> dictionaryIds=new ArrayList<>();
  ArrayList<CharSequence> dictionariesNamesWithSelectedMark=new ArrayList<>();
  final ArrayList<CharSequence> dictionariesNamesForToast=new ArrayList<>();
  dictionaryIds.add(null);
  final String SELECTED=""String_Node_Str"";
  final String NOT_SELECTED=""String_Node_Str"";
  if (dictionaryOverrideValue == null) {
    dictionariesNamesWithSelectedMark.add(SELECTED + getString(R.string.override_dictionary_default));
  }
 else {
    dictionariesNamesWithSelectedMark.add(NOT_SELECTED + getString(R.string.override_dictionary_default));
  }
  dictionariesNamesForToast.add(getString(R.string.override_dictionary_default));
  for (  DictionaryAddOnAndBuilder dictionaryBuilder : ExternalDictionaryFactory.getAllAvailableExternalDictionaries(getApplicationContext())) {
    dictionaryIds.add(dictionaryBuilder.getId());
    String description=dictionaryBuilder.getName();
    if (!TextUtils.isEmpty(dictionaryBuilder.getDescription())) {
      description+=""String_Node_Str"" + dictionaryBuilder.getDescription() + ""String_Node_Str"";
    }
    dictionariesNamesForToast.add(description);
    if (dictionaryOverrideValue != null && dictionaryBuilder.getId().equals(dictionaryOverrideValue))     description=SELECTED + description;
 else     description=NOT_SELECTED + description;
    dictionariesNamesWithSelectedMark.add(description);
  }
  final CharSequence[] ids=new CharSequence[dictionaryIds.size()];
  final CharSequence[] items=new CharSequence[dictionariesNamesWithSelectedMark.size()];
  dictionariesNamesWithSelectedMark.toArray(items);
  dictionaryIds.toArray(ids);
  showOptionsDialogWithData(getString(R.string.override_dictionary_title,getCurrentAlphabetKeyboard().getKeyboardName()),R.drawable.ic_settings_language,items,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface di,    int position){
      di.dismiss();
      Editor editor=getSharedPrefs().edit();
      if (position == 0) {
        editor.remove(dictionaryOverridingKey);
        showToastMessage(R.string.override_disabled,true);
      }
 else {
        CharSequence id=ids[position];
        String selectedDictionaryId=(id == null) ? null : id.toString();
        editor.putString(dictionaryOverridingKey,selectedDictionaryId);
        showToastMessage(getString(R.string.override_enabled,dictionariesNamesForToast.get(position)),true);
      }
      editor.commit();
    }
  }
);
}","private void launchDictionaryOverriding(){
  final String dictionaryOverridingKey=getDictionaryOverrideKey(getCurrentAlphabetKeyboard());
  final String dictionaryOverrideValue=getSharedPrefs().getString(dictionaryOverridingKey,null);
  ArrayList<CharSequence> dictionaryIds=new ArrayList<>();
  ArrayList<CharSequence> dictionariesNamesWithSelectedMark=new ArrayList<>();
  final ArrayList<CharSequence> dictionariesNamesForToast=new ArrayList<>();
  dictionaryIds.add(null);
  final String SELECTED=""String_Node_Str"";
  final String NOT_SELECTED=""String_Node_Str"";
  if (dictionaryOverrideValue == null) {
    dictionariesNamesWithSelectedMark.add(SELECTED + getString(R.string.override_dictionary_default));
  }
 else {
    dictionariesNamesWithSelectedMark.add(NOT_SELECTED + getString(R.string.override_dictionary_default));
  }
  dictionariesNamesForToast.add(getString(R.string.override_dictionary_default));
  for (  DictionaryAddOnAndBuilder dictionaryBuilder : ExternalDictionaryFactory.getAllAvailableExternalDictionaries(getApplicationContext())) {
    dictionaryIds.add(dictionaryBuilder.getId());
    String description=dictionaryBuilder.getName();
    if (!TextUtils.isEmpty(dictionaryBuilder.getDescription())) {
      description+=""String_Node_Str"" + dictionaryBuilder.getDescription() + ""String_Node_Str"";
    }
    dictionariesNamesForToast.add(description);
    if (dictionaryOverrideValue != null && dictionaryBuilder.getId().equals(dictionaryOverrideValue))     description=SELECTED + description;
 else     description=NOT_SELECTED + description;
    dictionariesNamesWithSelectedMark.add(description);
  }
  final CharSequence[] ids=new CharSequence[dictionaryIds.size()];
  final CharSequence[] items=new CharSequence[dictionariesNamesWithSelectedMark.size()];
  dictionariesNamesWithSelectedMark.toArray(items);
  dictionaryIds.toArray(ids);
  showOptionsDialogWithData(getString(R.string.override_dictionary_title,getCurrentAlphabetKeyboard().getKeyboardName()),R.drawable.ic_settings_language,items,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface di,    int position){
      di.dismiss();
      Editor editor=getSharedPrefs().edit();
      if (position == 0) {
        editor.remove(dictionaryOverridingKey);
        showToastMessage(R.string.override_disabled,true);
      }
 else {
        CharSequence id=ids[position];
        String selectedDictionaryId=(id == null) ? null : id.toString();
        editor.putString(dictionaryOverridingKey,selectedDictionaryId);
        showToastMessage(getString(R.string.override_enabled,dictionariesNamesForToast.get(position)),true);
      }
      SharedPreferencesCompat.EditorCompat.getInstance().apply(editor);
    }
  }
);
}",0.9868979516515962
157298,"private void updateStatistics(SharedPreferences sp,Context context){
  boolean firstAppInstall=false;
  boolean firstVersionInstall=false;
  final String FIRST_APP_VERSION_INSTALL=context.getString(R.string.settings_key_first_app_version_installed);
  if (!sp.contains(FIRST_APP_VERSION_INSTALL)) {
    firstAppInstall=true;
  }
  final String LAST_APP_VERSION_INSTALLED=context.getString(R.string.settings_key_last_app_version_installed);
  if (sp.getInt(LAST_APP_VERSION_INSTALLED,0) != BuildConfig.VERSION_CODE) {
    firstVersionInstall=true;
  }
  if (firstAppInstall || firstVersionInstall) {
    Editor editor=sp.edit();
    final long installTime=System.currentTimeMillis();
    if (firstAppInstall) {
      editor.putInt(FIRST_APP_VERSION_INSTALL,BuildConfig.VERSION_CODE);
      editor.putLong(context.getString(R.string.settings_key_first_time_app_installed),installTime);
    }
    if (firstVersionInstall) {
      editor.putInt(LAST_APP_VERSION_INSTALLED,BuildConfig.VERSION_CODE);
      editor.putLong(context.getString(R.string.settings_key_first_time_current_version_installed),installTime);
    }
    editor.commit();
  }
}","private void updateStatistics(SharedPreferences sp,Context context){
  boolean firstAppInstall=false;
  boolean firstVersionInstall=false;
  final String FIRST_APP_VERSION_INSTALL=context.getString(R.string.settings_key_first_app_version_installed);
  if (!sp.contains(FIRST_APP_VERSION_INSTALL)) {
    firstAppInstall=true;
  }
  final String LAST_APP_VERSION_INSTALLED=context.getString(R.string.settings_key_last_app_version_installed);
  if (sp.getInt(LAST_APP_VERSION_INSTALLED,0) != BuildConfig.VERSION_CODE) {
    firstVersionInstall=true;
  }
  if (firstAppInstall || firstVersionInstall) {
    Editor editor=sp.edit();
    final long installTime=System.currentTimeMillis();
    if (firstAppInstall) {
      editor.putInt(FIRST_APP_VERSION_INSTALL,BuildConfig.VERSION_CODE);
      editor.putLong(context.getString(R.string.settings_key_first_time_app_installed),installTime);
    }
    if (firstVersionInstall) {
      editor.putInt(LAST_APP_VERSION_INSTALLED,BuildConfig.VERSION_CODE);
      editor.putLong(context.getString(R.string.settings_key_first_time_current_version_installed),installTime);
    }
    SharedPreferencesCompat.EditorCompat.getInstance().apply(editor);
  }
}",0.970373550880206
157299,"/** 
 * The purpose of this function is to set in the preferences file the computed values. This is required since the Preferences xml UI elements can not take computed values, only static ones, as default. So, the computed default could be one, and the static default may be another! See https://github.com/AnySoftKeyboard/AnySoftKeyboard/issues/110
 */
private void initializeComputedValues(SharedPreferences sp){
  boolean drawType=sp.getBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),getAlwaysUseDrawTextDefault());
  Editor e=sp.edit();
  e.putBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),drawType);
  e.commit();
}","/** 
 * The purpose of this function is to set in the preferences file the computed values. This is required since the Preferences xml UI elements can not take computed values, only static ones, as default. So, the computed default could be one, and the static default may be another! See https://github.com/AnySoftKeyboard/AnySoftKeyboard/issues/110
 */
private void initializeComputedValues(SharedPreferences sp){
  boolean drawType=sp.getBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),getAlwaysUseDrawTextDefault());
  Editor e=sp.edit();
  e.putBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),drawType);
  SharedPreferencesCompat.EditorCompat.getInstance().apply(e);
}",0.9525831564048124
157300,"private void upgradeSettingsValues(SharedPreferences sp){
  Logger.d(TAG,""String_Node_Str"");
  int configurationVersion=sp.getInt(CONFIGURATION_VERSION,9);
  if (configurationVersion < 1) {
    boolean oldLandscapeFullScreenValue=sp.getBoolean(""String_Node_Str"",mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
    Logger.i(TAG,""String_Node_Str"");
    Editor e=sp.edit();
    e.putBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),oldLandscapeFullScreenValue);
    e.remove(""String_Node_Str"");
    e.commit();
  }
  if (configurationVersion < 2) {
    Logger.i(TAG,""String_Node_Str"");
    Editor e=sp.edit();
    e.putString(""String_Node_Str"",mContext.getString(R.string.settings_default_portrait_keyboard_height_factor));
    e.putString(""String_Node_Str"",mContext.getString(R.string.settings_default_landscape_keyboard_height_factor));
    e.commit();
  }
  if (configurationVersion < 3) {
    Editor e=sp.edit();
    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.ECLAIR_MR1) {
      Logger.i(TAG,""String_Node_Str"");
      final String bottomRowKey=mContext.getString(R.string.settings_key_ext_kbd_bottom_row_key);
      String currentBottomRowId=sp.getString(bottomRowKey,mContext.getString(R.string.settings_default_ext_kbd_bottom_row_key));
      String newBottomRowId=""String_Node_Str"";
      if (currentBottomRowId.equals(""String_Node_Str"")) {
        newBottomRowId=""String_Node_Str"";
      }
 else       if (currentBottomRowId.equals(""String_Node_Str"")) {
        newBottomRowId=""String_Node_Str"";
      }
      if (!TextUtils.isEmpty(newBottomRowId)) {
        Logger.i(TAG,""String_Node_Str"" + currentBottomRowId + ""String_Node_Str""+ newBottomRowId+ ""String_Node_Str"");
        e.putString(bottomRowKey,newBottomRowId);
      }
    }
    e.commit();
  }
  if (configurationVersion < 4) {
    Editor e=sp.edit();
    Logger.i(TAG,""String_Node_Str"");
    e.putBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
    e.commit();
  }
  if (configurationVersion < 5) {
    Editor e=sp.edit();
    Logger.i(TAG,""String_Node_Str"");
    e.putBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),getAlwaysUseDrawTextDefault());
    e.commit();
  }
  if (configurationVersion < 6) {
    Editor e=sp.edit();
    Logger.i(TAG,""String_Node_Str"");
    e.remove(mContext.getString(R.string.settings_key_allow_suggestions_restart));
    e.commit();
  }
  if (configurationVersion < 7) {
    Editor e=sp.edit();
    Logger.i(TAG,""String_Node_Str"");
    e.remove(mContext.getString(R.string.settings_key_ordered_active_quick_text_keys));
    e.commit();
  }
  if (configurationVersion < 8) {
    final boolean autoPick=sp.getBoolean(""String_Node_Str"",true);
    Editor e=sp.edit();
    Logger.i(TAG,""String_Node_Str"");
    e.remove(""String_Node_Str"");
    if (autoPick) {
      e.putString(mContext.getString(R.string.settings_key_next_word_suggestion_aggressiveness),mContext.getString(R.string.settings_default_auto_pick_suggestion_aggressiveness));
      Logger.i(TAG,""String_Node_Str"");
    }
 else {
      e.putString(mContext.getString(R.string.settings_key_next_word_suggestion_aggressiveness),""String_Node_Str"");
      Logger.i(TAG,""String_Node_Str"");
    }
    e.commit();
  }
  if (configurationVersion < 9) {
    final boolean swapSpace=sp.getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
    Editor e=sp.edit();
    Logger.i(TAG,""String_Node_Str"");
    e.remove(""String_Node_Str"");
    e.putBoolean(mContext.getString(R.string.settings_key_bool_should_swap_punctuation_and_space),swapSpace);
    e.commit();
  }
  if (configurationVersion < 10) {
    Editor e=sp.edit();
    Logger.i(TAG,""String_Node_Str"");
    e.remove(mContext.getString(R.string.settings_key_ordered_active_quick_text_keys));
    e.commit();
  }
  Editor e=sp.edit();
  e.putInt(CONFIGURATION_VERSION,10);
  e.commit();
}","private void upgradeSettingsValues(SharedPreferences sp){
  Logger.d(TAG,""String_Node_Str"");
  int configurationVersion=sp.getInt(CONFIGURATION_VERSION,9);
  if (configurationVersion < 1) {
    boolean oldLandscapeFullScreenValue=sp.getBoolean(""String_Node_Str"",mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
    Logger.i(TAG,""String_Node_Str"");
    Editor e=sp.edit();
    e.putBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),oldLandscapeFullScreenValue);
    e.remove(""String_Node_Str"");
    SharedPreferencesCompat.EditorCompat.getInstance().apply(e);
  }
  if (configurationVersion < 2) {
    Logger.i(TAG,""String_Node_Str"");
    Editor e=sp.edit();
    e.putString(""String_Node_Str"",mContext.getString(R.string.settings_default_portrait_keyboard_height_factor));
    e.putString(""String_Node_Str"",mContext.getString(R.string.settings_default_landscape_keyboard_height_factor));
    SharedPreferencesCompat.EditorCompat.getInstance().apply(e);
  }
  if (configurationVersion < 3) {
    Editor e=sp.edit();
    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.ECLAIR_MR1) {
      Logger.i(TAG,""String_Node_Str"");
      final String bottomRowKey=mContext.getString(R.string.settings_key_ext_kbd_bottom_row_key);
      String currentBottomRowId=sp.getString(bottomRowKey,mContext.getString(R.string.settings_default_ext_kbd_bottom_row_key));
      String newBottomRowId=""String_Node_Str"";
      if (currentBottomRowId.equals(""String_Node_Str"")) {
        newBottomRowId=""String_Node_Str"";
      }
 else       if (currentBottomRowId.equals(""String_Node_Str"")) {
        newBottomRowId=""String_Node_Str"";
      }
      if (!TextUtils.isEmpty(newBottomRowId)) {
        Logger.i(TAG,""String_Node_Str"" + currentBottomRowId + ""String_Node_Str""+ newBottomRowId+ ""String_Node_Str"");
        e.putString(bottomRowKey,newBottomRowId);
      }
    }
    SharedPreferencesCompat.EditorCompat.getInstance().apply(e);
  }
  if (configurationVersion < 4) {
    Editor e=sp.edit();
    Logger.i(TAG,""String_Node_Str"");
    e.putBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
    SharedPreferencesCompat.EditorCompat.getInstance().apply(e);
  }
  if (configurationVersion < 5) {
    Editor e=sp.edit();
    Logger.i(TAG,""String_Node_Str"");
    e.putBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),getAlwaysUseDrawTextDefault());
    SharedPreferencesCompat.EditorCompat.getInstance().apply(e);
  }
  if (configurationVersion < 6) {
    Editor e=sp.edit();
    Logger.i(TAG,""String_Node_Str"");
    e.remove(mContext.getString(R.string.settings_key_allow_suggestions_restart));
    SharedPreferencesCompat.EditorCompat.getInstance().apply(e);
  }
  if (configurationVersion < 7) {
    Editor e=sp.edit();
    Logger.i(TAG,""String_Node_Str"");
    e.remove(mContext.getString(R.string.settings_key_ordered_active_quick_text_keys));
    SharedPreferencesCompat.EditorCompat.getInstance().apply(e);
  }
  if (configurationVersion < 8) {
    final boolean autoPick=sp.getBoolean(""String_Node_Str"",true);
    Editor e=sp.edit();
    Logger.i(TAG,""String_Node_Str"");
    e.remove(""String_Node_Str"");
    if (autoPick) {
      e.putString(mContext.getString(R.string.settings_key_next_word_suggestion_aggressiveness),mContext.getString(R.string.settings_default_auto_pick_suggestion_aggressiveness));
      Logger.i(TAG,""String_Node_Str"");
    }
 else {
      e.putString(mContext.getString(R.string.settings_key_next_word_suggestion_aggressiveness),""String_Node_Str"");
      Logger.i(TAG,""String_Node_Str"");
    }
    SharedPreferencesCompat.EditorCompat.getInstance().apply(e);
  }
  if (configurationVersion < 9) {
    final boolean swapSpace=sp.getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
    Editor e=sp.edit();
    Logger.i(TAG,""String_Node_Str"");
    e.remove(""String_Node_Str"");
    e.putBoolean(mContext.getString(R.string.settings_key_bool_should_swap_punctuation_and_space),swapSpace);
    SharedPreferencesCompat.EditorCompat.getInstance().apply(e);
  }
  if (configurationVersion < 10) {
    Editor e=sp.edit();
    Logger.i(TAG,""String_Node_Str"");
    e.remove(mContext.getString(R.string.settings_key_ordered_active_quick_text_keys));
    SharedPreferencesCompat.EditorCompat.getInstance().apply(e);
  }
  Editor e=sp.edit();
  e.putInt(CONFIGURATION_VERSION,10);
  SharedPreferencesCompat.EditorCompat.getInstance().apply(e);
}",0.9137709137709138
157301,"public static KeyboardExtension getCurrentKeyboardExtension(@NonNull Context context,@KeyboardExtension.KeyboardExtensionType final int type){
  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);
  final String settingKey;
  final String defaultValue;
switch (type) {
case KeyboardExtension.TYPE_BOTTOM:
    settingKey=context.getString(R.string.settings_key_ext_kbd_bottom_row_key);
  defaultValue=context.getString(R.string.settings_default_ext_kbd_bottom_row_key);
break;
case KeyboardExtension.TYPE_TOP:
settingKey=context.getString(R.string.settings_key_ext_kbd_top_row_key);
defaultValue=context.getString(R.string.settings_default_top_row_key);
break;
case KeyboardExtension.TYPE_EXTENSION:
settingKey=context.getString(R.string.settings_key_ext_kbd_ext_ketboard_key);
defaultValue=context.getString(R.string.settings_default_ext_keyboard_key);
break;
default :
throw new RuntimeException(""String_Node_Str"" + type);
}
String selectedKeyId=sharedPreferences.getString(settingKey,defaultValue);
KeyboardExtension selectedKeyboard=null;
List<KeyboardExtension> keys=msInstance.getAllAddOns(context);
for (KeyboardExtension aKey : keys) {
if (aKey.getExtensionType() != type) continue;
if (aKey.getId().equals(selectedKeyId)) {
selectedKeyboard=aKey;
break;
}
}
if (selectedKeyboard == null) {
for (KeyboardExtension aKey : keys) {
if (aKey.getExtensionType() != type) continue;
selectedKeyboard=aKey;
break;
}
if (selectedKeyboard != null) {
SharedPreferences.Editor editor=sharedPreferences.edit();
editor.putString(settingKey,selectedKeyboard.getId());
editor.commit();
}
}
return selectedKeyboard;
}","public static KeyboardExtension getCurrentKeyboardExtension(@NonNull Context context,@KeyboardExtension.KeyboardExtensionType final int type){
  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);
  final String settingKey;
  final String defaultValue;
switch (type) {
case KeyboardExtension.TYPE_BOTTOM:
    settingKey=context.getString(R.string.settings_key_ext_kbd_bottom_row_key);
  defaultValue=context.getString(R.string.settings_default_ext_kbd_bottom_row_key);
break;
case KeyboardExtension.TYPE_TOP:
settingKey=context.getString(R.string.settings_key_ext_kbd_top_row_key);
defaultValue=context.getString(R.string.settings_default_top_row_key);
break;
case KeyboardExtension.TYPE_EXTENSION:
settingKey=context.getString(R.string.settings_key_ext_kbd_ext_ketboard_key);
defaultValue=context.getString(R.string.settings_default_ext_keyboard_key);
break;
default :
throw new RuntimeException(""String_Node_Str"" + type);
}
String selectedKeyId=sharedPreferences.getString(settingKey,defaultValue);
KeyboardExtension selectedKeyboard=null;
List<KeyboardExtension> keys=msInstance.getAllAddOns(context);
for (KeyboardExtension aKey : keys) {
if (aKey.getExtensionType() != type) continue;
if (aKey.getId().equals(selectedKeyId)) {
selectedKeyboard=aKey;
break;
}
}
if (selectedKeyboard == null) {
for (KeyboardExtension aKey : keys) {
if (aKey.getExtensionType() != type) continue;
selectedKeyboard=aKey;
break;
}
if (selectedKeyboard != null) {
SharedPreferences.Editor editor=sharedPreferences.edit();
editor.putString(settingKey,selectedKeyboard.getId());
SharedPreferencesCompat.EditorCompat.getInstance().apply(editor);
}
}
return selectedKeyboard;
}",0.9787615913849836
157302,"public static List<KeyboardAddOnAndBuilder> getEnabledKeyboards(Context askContext){
  final List<KeyboardAddOnAndBuilder> allAddOns=msInstance.getAllAddOns(askContext);
  Logger.i(TAG,""String_Node_Str"" + allAddOns.size() + ""String_Node_Str"");
  final SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(askContext);
  final ArrayList<KeyboardAddOnAndBuilder> enabledAddOns=new ArrayList<>();
  for (int addOnIndex=0; addOnIndex < allAddOns.size(); addOnIndex++) {
    final KeyboardAddOnAndBuilder addOn=allAddOns.get(addOnIndex);
    final boolean addOnEnabled=sharedPreferences.getBoolean(addOn.getId(),addOn.getKeyboardDefaultEnabled());
    if (addOnEnabled) {
      enabledAddOns.add(addOn);
    }
  }
  if (enabledAddOns.size() == 0) {
    final SharedPreferences.Editor editor=sharedPreferences.edit();
    final KeyboardAddOnAndBuilder addOn=allAddOns.get(0);
    editor.putBoolean(addOn.getId(),true);
    editor.commit();
    enabledAddOns.add(addOn);
  }
  if (BuildConfig.TESTING_BUILD) {
    for (    final KeyboardAddOnAndBuilder addOn : enabledAddOns) {
      Logger.d(TAG,""String_Node_Str"",addOn.getId());
    }
  }
  return enabledAddOns;
}","public static List<KeyboardAddOnAndBuilder> getEnabledKeyboards(Context askContext){
  final List<KeyboardAddOnAndBuilder> allAddOns=msInstance.getAllAddOns(askContext);
  Logger.i(TAG,""String_Node_Str"" + allAddOns.size() + ""String_Node_Str"");
  final SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(askContext);
  final ArrayList<KeyboardAddOnAndBuilder> enabledAddOns=new ArrayList<>();
  for (int addOnIndex=0; addOnIndex < allAddOns.size(); addOnIndex++) {
    final KeyboardAddOnAndBuilder addOn=allAddOns.get(addOnIndex);
    final boolean addOnEnabled=sharedPreferences.getBoolean(addOn.getId(),addOn.getKeyboardDefaultEnabled());
    if (addOnEnabled) {
      enabledAddOns.add(addOn);
    }
  }
  if (enabledAddOns.size() == 0) {
    final SharedPreferences.Editor editor=sharedPreferences.edit();
    final KeyboardAddOnAndBuilder addOn=allAddOns.get(0);
    editor.putBoolean(addOn.getId(),true);
    SharedPreferencesCompat.EditorCompat.getInstance().apply(editor);
    enabledAddOns.add(addOn);
  }
  if (BuildConfig.TESTING_BUILD) {
    for (    final KeyboardAddOnAndBuilder addOn : enabledAddOns) {
      Logger.d(TAG,""String_Node_Str"",addOn.getId());
    }
  }
  return enabledAddOns;
}",0.9715463917525772
157303,"public static void storeOrderedEnabledQuickKeys(Context applicationContext,List<QuickTextKey> orderedKeys){
  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(applicationContext);
  String settingKey=applicationContext.getString(R.string.settings_key_ordered_active_quick_text_keys);
  Set<String> storedKeys=new HashSet<>();
  List<String> quickKeyIdOrder=new ArrayList<>(orderedKeys.size());
  for (  QuickTextKey key : orderedKeys) {
    final String id=key.getId();
    if (!storedKeys.contains(id))     quickKeyIdOrder.add(id);
    storedKeys.add(id);
  }
  SharedPreferences.Editor editor=sharedPreferences.edit();
  editor.putString(settingKey,TextUtils.join(""String_Node_Str"",quickKeyIdOrder)).commit();
}","public static void storeOrderedEnabledQuickKeys(Context applicationContext,List<QuickTextKey> orderedKeys){
  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(applicationContext);
  String settingKey=applicationContext.getString(R.string.settings_key_ordered_active_quick_text_keys);
  Set<String> storedKeys=new HashSet<>();
  List<String> quickKeyIdOrder=new ArrayList<>(orderedKeys.size());
  for (  QuickTextKey key : orderedKeys) {
    final String id=key.getId();
    if (!storedKeys.contains(id))     quickKeyIdOrder.add(id);
    storedKeys.add(id);
  }
  SharedPreferences.Editor editor=sharedPreferences.edit();
  editor.putString(settingKey,TextUtils.join(""String_Node_Str"",quickKeyIdOrder));
  SharedPreferencesCompat.EditorCompat.getInstance().apply(editor);
}",0.9555125725338492
157304,"public void setLastSelectedAddOnId(@Nullable String addOnId){
  mSharedPreferences.edit().putString(KEY_QUICK_TEXT_PREF_LAST_SELECTED_TAB_ADD_ON_ID,addOnId).commit();
}","public void setLastSelectedAddOnId(@Nullable String addOnId){
  final SharedPreferences.Editor editor=mSharedPreferences.edit().putString(KEY_QUICK_TEXT_PREF_LAST_SELECTED_TAB_ADD_ON_ID,addOnId);
  SharedPreferencesCompat.EditorCompat.getInstance().apply(editor);
}",0.7528868360277137
157305,"public static KeyboardTheme getCurrentKeyboardTheme(Context appContext){
  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(appContext);
  String settingKey=appContext.getString(R.string.settings_key_keyboard_theme_key);
  String selectedThemeId=sharedPreferences.getString(settingKey,appContext.getString(R.string.settings_default_keyboard_theme_key));
  KeyboardTheme selectedTheme=null;
  List<KeyboardTheme> themes=msInstance.getAllAddOns(appContext);
  for (  KeyboardTheme aTheme : themes) {
    if (aTheme.getId().equals(selectedThemeId)) {
      selectedTheme=aTheme;
      break;
    }
  }
  if (selectedTheme == null) {
    selectedTheme=themes.get(0);
    SharedPreferences.Editor editor=sharedPreferences.edit();
    editor.putString(settingKey,selectedTheme.getId());
    editor.commit();
  }
  return selectedTheme;
}","public static KeyboardTheme getCurrentKeyboardTheme(Context appContext){
  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(appContext);
  String settingKey=appContext.getString(R.string.settings_key_keyboard_theme_key);
  String selectedThemeId=sharedPreferences.getString(settingKey,appContext.getString(R.string.settings_default_keyboard_theme_key));
  KeyboardTheme selectedTheme=null;
  List<KeyboardTheme> themes=msInstance.getAllAddOns(appContext);
  for (  KeyboardTheme aTheme : themes) {
    if (aTheme.getId().equals(selectedThemeId)) {
      selectedTheme=aTheme;
      break;
    }
  }
  if (selectedTheme == null) {
    selectedTheme=themes.get(0);
    SharedPreferences.Editor editor=sharedPreferences.edit();
    editor.putString(settingKey,selectedTheme.getId());
    SharedPreferencesCompat.EditorCompat.getInstance().apply(editor);
  }
  return selectedTheme;
}",0.9566685424873382
157306,"public static void setTracingRequested(Context applicationContext,boolean enabled){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(applicationContext);
  Editor e=prefs.edit();
  e.putBoolean(KEY_SDCARD_TRACING_ENABLED,enabled);
  e.commit();
}","public static void setTracingRequested(Context applicationContext,boolean enabled){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(applicationContext);
  Editor e=prefs.edit();
  e.putBoolean(KEY_SDCARD_TRACING_ENABLED,enabled);
  SharedPreferencesCompat.EditorCompat.getInstance().apply(e);
}",0.8960817717206133
157307,"@Override protected final void onEnabledAddOnsChanged(@NonNull List<String> newEnabledAddOns){
  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(getContext()).edit();
  editor.putString(getString(mPrefKeyResourceId),newEnabledAddOns.get(0));
  editor.commit();
}","@Override protected final void onEnabledAddOnsChanged(@NonNull List<String> newEnabledAddOns){
  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(getContext()).edit();
  editor.putString(getString(mPrefKeyResourceId),newEnabledAddOns.get(0));
  SharedPreferencesCompat.EditorCompat.getInstance().apply(editor);
}",0.8878357030015798
157308,"private static boolean firstTestersTimeVersionLoaded(Context context){
  final String KEY=""String_Node_Str"";
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
  final String lastDebugVersionHash=sp.getString(KEY,""String_Node_Str"");
  String currentHash=BuildConfig.VERSION_NAME + ""String_Node_Str"" + BuildConfig.VERSION_CODE;
  Editor e=sp.edit();
  e.putString(KEY,currentHash);
  e.commit();
  return !currentHash.equals(lastDebugVersionHash);
}","private static boolean firstTestersTimeVersionLoaded(Context context){
  final String KEY=""String_Node_Str"";
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
  final String lastDebugVersionHash=sp.getString(KEY,""String_Node_Str"");
  String currentHash=BuildConfig.VERSION_NAME + ""String_Node_Str"" + BuildConfig.VERSION_CODE;
  Editor e=sp.edit();
  e.putString(KEY,currentHash);
  SharedPreferencesCompat.EditorCompat.getInstance().apply(e);
  return !currentHash.equals(lastDebugVersionHash);
}",0.939060939060939
157309,"@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (BuildConfig.DEBUG)   Logger.d(TAG,""String_Node_Str"",oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  mGlobalCursorPosition=newSelEnd;
  mGlobalSelectionStartPosition=newSelStart;
  if (mUndoCommitCursorPosition == UNDO_COMMIT_WAITING_TO_RECORD_POSITION) {
    Logger.d(TAG,""String_Node_Str"");
    mUndoCommitCursorPosition=newSelStart;
  }
  updateShiftStateNow();
  final boolean isExpectedEvent=SystemClock.uptimeMillis() < mExpectingSelectionUpdateBy;
  mExpectingSelectionUpdateBy=NEVER_TIME_STAMP;
  if (isExpectedEvent) {
    Logger.v(TAG,""String_Node_Str"");
    return;
  }
  if (!isPredictionOn()) {
    return;
  }
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  Logger.d(TAG,""String_Node_Str"");
  if (mCandidateView != null)   mCandidateView.dismissAddToDictionaryHint();
  if (newSelStart != newSelEnd) {
    Logger.d(TAG,""String_Node_Str"");
    abortCorrection(true,false);
  }
 else {
    if (mPredicting) {
      if (newSelStart >= candidatesStart && newSelStart <= candidatesEnd) {
        int cursorPosition=newSelEnd - candidatesStart;
        if (mWord.setCursorPosition(cursorPosition)) {
          Logger.d(TAG,""String_Node_Str"");
        }
      }
 else {
        Logger.d(TAG,""String_Node_Str"");
        abortCorrection(true,false);
        postRestartWordSuggestion();
      }
    }
 else {
      Logger.d(TAG,""String_Node_Str"");
      if (TextEntryState.willUndoCommitOnBackspace()) {
        if (mUndoCommitCursorPosition == oldSelStart && mUndoCommitCursorPosition != newSelStart) {
          Logger.d(TAG,""String_Node_Str"");
          abortCorrection(true,false);
        }
      }
      postRestartWordSuggestion();
    }
  }
}","@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (BuildConfig.DEBUG)   Logger.d(TAG,""String_Node_Str"",oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  mGlobalCursorPosition=newSelEnd;
  mGlobalSelectionStartPosition=newSelStart;
  if (mUndoCommitCursorPosition == UNDO_COMMIT_WAITING_TO_RECORD_POSITION) {
    Logger.d(TAG,""String_Node_Str"");
    mUndoCommitCursorPosition=newSelStart;
  }
  updateShiftStateNow();
  final boolean isExpectedEvent=SystemClock.uptimeMillis() < mExpectingSelectionUpdateBy;
  mExpectingSelectionUpdateBy=NEVER_TIME_STAMP;
  if (isExpectedEvent) {
    Logger.v(TAG,""String_Node_Str"");
    return;
  }
  if (!isPredictionOn()) {
    return;
  }
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  Logger.d(TAG,""String_Node_Str"");
  if (newSelStart != newSelEnd) {
    Logger.d(TAG,""String_Node_Str"");
    abortCorrection(true,false);
  }
 else {
    if (mPredicting) {
      if (newSelStart >= candidatesStart && newSelStart <= candidatesEnd) {
        int cursorPosition=newSelEnd - candidatesStart;
        if (mWord.setCursorPosition(cursorPosition)) {
          Logger.d(TAG,""String_Node_Str"");
        }
      }
 else {
        Logger.d(TAG,""String_Node_Str"");
        abortCorrection(true,false);
        postRestartWordSuggestion();
      }
    }
 else {
      Logger.d(TAG,""String_Node_Str"");
      if (TextEntryState.willUndoCommitOnBackspace()) {
        if (mUndoCommitCursorPosition == oldSelStart && mUndoCommitCursorPosition != newSelStart) {
          Logger.d(TAG,""String_Node_Str"");
          abortCorrection(true,false);
        }
      }
      postRestartWordSuggestion();
    }
  }
}",0.98006730520321
157310,"private void handleDeleteLastCharacter(boolean forMultiTap){
  InputConnection ic=getCurrentInputConnection();
  if (!forMultiTap && performOnTextDeletion(ic))   return;
  boolean deleteChar=false;
  if (mPredicting) {
    final boolean wordManipulation=mWord.length() > 0 && mWord.cursorPosition() > 0;
    if (wordManipulation) {
      mWord.deleteLast();
      final int cursorPosition;
      if (mWord.cursorPosition() != mWord.length())       cursorPosition=getCursorPosition(ic);
 else       cursorPosition=-1;
      if (cursorPosition >= 0)       ic.beginBatchEdit();
      ic.setComposingText(mWord.getTypedWord(),1);
      if (mWord.length() == 0) {
        mPredicting=false;
      }
 else       if (cursorPosition >= 0) {
        ic.setSelection(cursorPosition - 1,cursorPosition - 1);
      }
      if (cursorPosition >= 0)       ic.endBatchEdit();
      postUpdateSuggestions();
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    deleteChar=true;
  }
  TextEntryState.backspace();
  if (TextEntryState.getState() == TextEntryState.State.UNDO_COMMIT) {
    revertLastWord(deleteChar);
  }
 else   if (deleteChar) {
    if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
      revertLastWord(true);
    }
 else {
      if (!forMultiTap) {
        sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
      }
 else {
        final CharSequence beforeText=ic == null ? null : ic.getTextBeforeCursor(1,0);
        final int textLengthBeforeDelete=(TextUtils.isEmpty(beforeText)) ? 0 : beforeText.length();
        if (textLengthBeforeDelete > 0)         ic.deleteSurroundingText(1,0);
 else         sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
      }
    }
  }
}","private void handleDeleteLastCharacter(boolean forMultiTap){
  InputConnection ic=getCurrentInputConnection();
  if (!forMultiTap && performOnTextDeletion(ic))   return;
  boolean deleteChar=false;
  if (mPredicting) {
    final boolean wordManipulation=mWord.length() > 0 && mWord.cursorPosition() > 0;
    if (wordManipulation) {
      mWord.deleteLast();
      final int cursorPosition;
      if (mWord.cursorPosition() != mWord.length())       cursorPosition=getCursorPosition(ic);
 else       cursorPosition=-1;
      if (cursorPosition >= 0)       ic.beginBatchEdit();
      ic.setComposingText(mWord.getTypedWord(),1);
      if (mWord.length() == 0) {
        mPredicting=false;
      }
 else       if (cursorPosition >= 0) {
        ic.setSelection(cursorPosition - 1,cursorPosition - 1);
      }
      if (cursorPosition >= 0)       ic.endBatchEdit();
      postUpdateSuggestions();
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    deleteChar=true;
  }
  TextEntryState.backspace();
  if (TextEntryState.getState() == TextEntryState.State.UNDO_COMMIT) {
    revertLastWord(deleteChar);
  }
 else   if (deleteChar) {
    if (mCandidateView != null)     mCandidateView.dismissAddToDictionaryHint();
    if (!forMultiTap) {
      sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    }
 else {
      final CharSequence beforeText=ic == null ? null : ic.getTextBeforeCursor(1,0);
      final int textLengthBeforeDelete=(TextUtils.isEmpty(beforeText)) ? 0 : beforeText.length();
      if (textLengthBeforeDelete > 0)       ic.deleteSurroundingText(1,0);
 else       sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    }
  }
}",0.96415770609319
157311,"@Test public void testAsksToAddToDictionaryWhenTouchingTypedUnknownWordAndAdds(){
  TestInputConnection inputConnection=(TestInputConnection)mAnySoftKeyboardUnderTest.getCurrentInputConnection();
  mAnySoftKeyboardUnderTest.simulateTextTyping(""String_Node_Str"");
  mAnySoftKeyboardUnderTest.pickSuggestionManually(0,""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getMockCandidateView()).showAddToDictionaryHint(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",inputConnection.getCurrentTextInInputConnection());
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).addWordToUserDictionary(Mockito.anyString());
  Mockito.verify(mAnySoftKeyboardUnderTest.getMockCandidateView(),Mockito.never()).notifyAboutWordAdded(Mockito.anyString());
  mAnySoftKeyboardUnderTest.addWordToDictionary(""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest()).addWordToUserDictionary(""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getMockCandidateView()).notifyAboutWordAdded(""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).removeWordFromUserDictionary(Mockito.anyString());
  mAnySoftKeyboardUnderTest.removeFromUserDictionary(""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest()).removeWordFromUserDictionary(""String_Node_Str"");
}","@Test public void testAsksToAddToDictionaryWhenTouchingTypedUnknownWordAndAdds(){
  TestInputConnection inputConnection=(TestInputConnection)mAnySoftKeyboardUnderTest.getCurrentInputConnection();
  mAnySoftKeyboardUnderTest.simulateTextTyping(""String_Node_Str"");
  mAnySoftKeyboardUnderTest.pickSuggestionManually(0,""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getMockCandidateView()).showAddToDictionaryHint(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",inputConnection.getCurrentTextInInputConnection());
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).addWordToUserDictionary(Mockito.anyString());
  Mockito.verify(mAnySoftKeyboardUnderTest.getMockCandidateView(),Mockito.never()).notifyAboutWordAdded(Mockito.anyString());
  Assert.assertTrue(mAnySoftKeyboardUnderTest.isAddToDictionartHintShown());
  mAnySoftKeyboardUnderTest.addWordToDictionary(""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest()).addWordToUserDictionary(""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getMockCandidateView()).notifyAboutWordAdded(""String_Node_Str"");
  Assert.assertFalse(mAnySoftKeyboardUnderTest.isAddToDictionartHintShown());
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest(),Mockito.never()).removeWordFromUserDictionary(Mockito.anyString());
  mAnySoftKeyboardUnderTest.removeFromUserDictionary(""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedSuggest()).removeWordFromUserDictionary(""String_Node_Str"");
}",0.903931623931624
157312,"public void resetMockCandidateView(){
  Mockito.reset(mMockCandidateView);
  Mockito.doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      boolean previousState=mCandidateShowsHint;
      mCandidateShowsHint=false;
      return previousState;
    }
  }
).when(mMockCandidateView).dismissAddToDictionaryHint();
  Mockito.doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      mCandidateShowsHint=true;
      return null;
    }
  }
).when(mMockCandidateView).showAddToDictionaryHint(Mockito.any(CharSequence.class));
}","public void resetMockCandidateView(){
  Mockito.reset(mMockCandidateView);
  Mockito.doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      boolean previousState=mCandidateShowsHint;
      mCandidateShowsHint=false;
      return previousState;
    }
  }
).when(mMockCandidateView).dismissAddToDictionaryHint();
  Mockito.doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      mCandidateShowsHint=true;
      return null;
    }
  }
).when(mMockCandidateView).showAddToDictionaryHint(Mockito.any(CharSequence.class));
  Mockito.doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      mCandidateShowsHint=false;
      return null;
    }
  }
).when(mMockCandidateView).notifyAboutWordAdded(Mockito.any(CharSequence.class));
}",0.8287937743190662
157313,"@Override public Object answer(InvocationOnMock invocation) throws Throwable {
  mCandidateShowsHint=true;
  return null;
}","@Override public Object answer(InvocationOnMock invocation) throws Throwable {
  mCandidateShowsHint=false;
  return null;
}",0.97165991902834
157314,"@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (BuildConfig.DEBUG)   Logger.d(TAG,""String_Node_Str"",oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  mGlobalCursorPosition=newSelEnd;
  mGlobalSelectionStartPosition=newSelStart;
  if (mUndoCommitCursorPosition == UNDO_COMMIT_WAITING_TO_RECORD_POSITION) {
    Logger.d(TAG,""String_Node_Str"");
    mUndoCommitCursorPosition=newSelStart;
  }
  updateShiftStateNow();
  final boolean isExpectedEvent=SystemClock.uptimeMillis() < mExpectingSelectionUpdateBy;
  mExpectingSelectionUpdateBy=NEVER_TIME_STAMP;
  if (isExpectedEvent) {
    Logger.v(TAG,""String_Node_Str"");
    return;
  }
  if (!isPredictionOn()) {
    return;
  }
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  Logger.d(TAG,""String_Node_Str"");
  if (newSelStart != newSelEnd) {
    Logger.d(TAG,""String_Node_Str"");
    abortCorrection(true,false);
  }
 else {
    if (mPredicting) {
      if (newSelStart >= candidatesStart && newSelStart <= candidatesEnd) {
        int cursorPosition=newSelEnd - candidatesStart;
        if (mWord.setCursorPosition(cursorPosition)) {
          Logger.d(TAG,""String_Node_Str"");
        }
      }
 else {
        Logger.d(TAG,""String_Node_Str"");
        abortCorrection(true,false);
        postRestartWordSuggestion();
      }
    }
 else {
      Logger.d(TAG,""String_Node_Str"");
      if (TextEntryState.willUndoCommitOnBackspace()) {
        if (mUndoCommitCursorPosition == oldSelStart && mUndoCommitCursorPosition != newSelStart) {
          Logger.d(TAG,""String_Node_Str"");
          abortCorrection(true,false);
        }
      }
      postRestartWordSuggestion();
    }
  }
}","@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (BuildConfig.DEBUG)   Logger.d(TAG,""String_Node_Str"",oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  mGlobalCursorPosition=newSelEnd;
  mGlobalSelectionStartPosition=newSelStart;
  if (mUndoCommitCursorPosition == UNDO_COMMIT_WAITING_TO_RECORD_POSITION) {
    Logger.d(TAG,""String_Node_Str"");
    mUndoCommitCursorPosition=newSelStart;
  }
  updateShiftStateNow();
  final boolean isExpectedEvent=SystemClock.uptimeMillis() < mExpectingSelectionUpdateBy;
  mExpectingSelectionUpdateBy=NEVER_TIME_STAMP;
  if (isExpectedEvent) {
    Logger.v(TAG,""String_Node_Str"");
    return;
  }
  if (!isPredictionOn()) {
    return;
  }
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  Logger.d(TAG,""String_Node_Str"");
  if (mCandidateView != null)   mCandidateView.dismissAddToDictionaryHint();
  if (newSelStart != newSelEnd) {
    Logger.d(TAG,""String_Node_Str"");
    abortCorrection(true,false);
  }
 else {
    if (mPredicting) {
      if (newSelStart >= candidatesStart && newSelStart <= candidatesEnd) {
        int cursorPosition=newSelEnd - candidatesStart;
        if (mWord.setCursorPosition(cursorPosition)) {
          Logger.d(TAG,""String_Node_Str"");
        }
      }
 else {
        Logger.d(TAG,""String_Node_Str"");
        abortCorrection(true,false);
        postRestartWordSuggestion();
      }
    }
 else {
      Logger.d(TAG,""String_Node_Str"");
      if (TextEntryState.willUndoCommitOnBackspace()) {
        if (mUndoCommitCursorPosition == oldSelStart && mUndoCommitCursorPosition != newSelStart) {
          Logger.d(TAG,""String_Node_Str"");
          abortCorrection(true,false);
        }
      }
      postRestartWordSuggestion();
    }
  }
}",0.98006730520321
157315,"public void pickSuggestionManually(int index,CharSequence suggestion){
  final String typedWord=mWord.getTypedWord().toString();
  if (mWord.isAtTagsSearchState()) {
    if (index == 0) {
      suggestion=typedWord;
    }
 else {
      List<QuickKeyHistoryRecords.HistoryKey> keys=QuickKeyHistoryRecords.load(getSharedPrefs());
      QuickKeyHistoryRecords.store(getSharedPrefs(),keys,new QuickKeyHistoryRecords.HistoryKey(suggestion.toString(),suggestion.toString()));
    }
  }
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  TextEntryState.acceptedSuggestion(typedWord,suggestion);
  final boolean correcting=TextEntryState.isCorrecting();
  try {
    if (mCompletionOn && mCompletions != null && index >= 0 && index < mCompletions.length) {
      CompletionInfo ci=mCompletions[index];
      if (ic != null) {
        ic.commitCompletion(ci);
      }
      mCommittedLength=suggestion.length();
      mCommittedWord=suggestion;
      if (mCandidateView != null) {
        mCandidateView.clear();
      }
      return;
    }
    pickSuggestion(suggestion,correcting);
    TextEntryState.acceptedSuggestion(mWord.getTypedWord(),suggestion);
    if (mAutoSpace && (!correcting) && (index == 0 || !mWord.isAtTagsSearchState())) {
      sendKeyChar((char)KeyCodes.SPACE);
      mJustAddedAutoSpace=true;
      setSpaceTimeStamp(true);
      TextEntryState.typedCharacter(' ',true);
    }
    mJustAutoAddedWord=false;
    if (!mWord.isAtTagsSearchState()) {
      if (index == 0) {
        mJustAutoAddedWord=checkAddToDictionaryWithAutoDictionary(mWord,AutoDictionary.AdditionType.Picked);
      }
      final boolean showingAddToDictionaryHint=(!mJustAutoAddedWord) && index == 0 && (mQuickFixes || mShowSuggestions) && (!mSuggest.isValidWord(suggestion)) && (!mSuggest.isValidWord(suggestion.toString().toLowerCase(getCurrentAlphabetKeyboard().getLocale())));
      if (showingAddToDictionaryHint) {
        TextEntryState.acceptedSuggestionAddedToDictionary();
        if (mCandidateView != null)         mCandidateView.showAddToDictionaryHint(suggestion);
      }
 else       if (!TextUtils.isEmpty(mCommittedWord) && !mJustAutoAddedWord) {
        setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,mWord.isAllUpperCase()),false,false,false);
        mWord.setFirstCharCapitalized(false);
      }
    }
  }
  finally {
    if (ic != null) {
      ic.endBatchEdit();
    }
  }
}","public void pickSuggestionManually(int index,CharSequence suggestion){
  final String typedWord=mWord.getTypedWord().toString();
  if (mWord.isAtTagsSearchState()) {
    if (index == 0) {
      suggestion=typedWord;
    }
 else {
      List<QuickKeyHistoryRecords.HistoryKey> keys=QuickKeyHistoryRecords.load(getSharedPrefs());
      QuickKeyHistoryRecords.store(getSharedPrefs(),keys,new QuickKeyHistoryRecords.HistoryKey(suggestion.toString(),suggestion.toString()));
    }
  }
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  TextEntryState.acceptedSuggestion(typedWord,suggestion);
  final boolean correcting=TextEntryState.isCorrecting();
  try {
    if (mCompletionOn && mCompletions != null && index >= 0 && index < mCompletions.length) {
      CompletionInfo ci=mCompletions[index];
      if (ic != null) {
        ic.commitCompletion(ci);
      }
      mCommittedLength=suggestion.length();
      mCommittedWord=suggestion;
      if (mCandidateView != null) {
        mCandidateView.clear();
      }
      return;
    }
    pickSuggestion(suggestion,correcting);
    TextEntryState.acceptedSuggestion(mWord.getTypedWord(),suggestion);
    if (mAutoSpace && (!correcting) && (index == 0 || !mWord.isAtTagsSearchState())) {
      sendKeyChar((char)KeyCodes.SPACE);
      mJustAddedAutoSpace=true;
      setSpaceTimeStamp(true);
      TextEntryState.typedCharacter(' ',true);
    }
    mJustAutoAddedWord=false;
    if (!mWord.isAtTagsSearchState()) {
      if (index == 0) {
        mJustAutoAddedWord=checkAddToDictionaryWithAutoDictionary(mWord,AutoDictionary.AdditionType.Picked);
        if (mJustAutoAddedWord)         TextEntryState.acceptedSuggestionAddedToDictionary();
      }
      final boolean showingAddToDictionaryHint=(!mJustAutoAddedWord) && index == 0 && (mQuickFixes || mShowSuggestions) && (!mSuggest.isValidWord(suggestion)) && (!mSuggest.isValidWord(suggestion.toString().toLowerCase(getCurrentAlphabetKeyboard().getLocale())));
      if (showingAddToDictionaryHint) {
        if (mCandidateView != null)         mCandidateView.showAddToDictionaryHint(suggestion);
      }
 else       if (!TextUtils.isEmpty(mCommittedWord) && !mJustAutoAddedWord) {
        setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,mWord.isAllUpperCase()),false,false,false);
        mWord.setFirstCharCapitalized(false);
      }
    }
  }
  finally {
    if (ic != null) {
      ic.endBatchEdit();
    }
  }
}",0.968344155844156
157316,"private boolean pickDefaultSuggestion(boolean autoCorrectToPreferred){
  if (mKeyboardHandler.hasMessages(KeyboardUIStateHandler.MSG_UPDATE_SUGGESTIONS)) {
    performUpdateSuggestions();
  }
  final CharSequence typedWord=mWord.getTypedWord();
  final CharSequence bestWord=autoCorrectToPreferred ? mWord.getPreferredWord() : typedWord;
  Logger.d(TAG,""String_Node_Str"",bestWord,mAutoCorrectOn);
  if (!TextUtils.isEmpty(bestWord)) {
    TextEntryState.acceptedDefault(typedWord);
    final boolean fixed=!typedWord.equals(pickSuggestion(bestWord,!bestWord.equals(typedWord)));
    if (!fixed) {
      checkAddToDictionaryWithAutoDictionary(mWord,mAutoComplete ? AutoDictionary.AdditionType.Picked : AutoDictionary.AdditionType.Typed);
    }
    return true;
  }
  return false;
}","private boolean pickDefaultSuggestion(boolean autoCorrectToPreferred){
  if (mKeyboardHandler.hasMessages(KeyboardUIStateHandler.MSG_UPDATE_SUGGESTIONS)) {
    performUpdateSuggestions();
  }
  final CharSequence typedWord=mWord.getTypedWord();
  final CharSequence bestWord=autoCorrectToPreferred ? mWord.getPreferredWord() : typedWord;
  Logger.d(TAG,""String_Node_Str"",bestWord,mAutoCorrectOn);
  if (!TextUtils.isEmpty(bestWord)) {
    TextEntryState.acceptedDefault(typedWord);
    final CharSequence outputWord=pickSuggestion(bestWord,!bestWord.equals(typedWord));
    final boolean fixed=!typedWord.equals(outputWord);
    if (!fixed) {
      checkAddToDictionaryWithAutoDictionary(mWord,mAutoComplete ? AutoDictionary.AdditionType.Picked : AutoDictionary.AdditionType.Typed);
    }
    return true;
  }
  return false;
}",0.9067164179104478
157317,"public static void typedCharacter(char c,boolean isSeparator){
  final boolean isSpace=c == ' ';
switch (sState) {
case IN_WORD:
    if (isSpace || isSeparator) {
      sState=State.START;
    }
  break;
case ACCEPTED_DEFAULT:
case PICKED_SUGGESTION:
case PICKED_CORRECTION:
case PICKED_TYPED_ADDED_TO_DICTIONARY:
if (isSpace) {
  if (sState == State.ACCEPTED_DEFAULT || sState == State.SPACE_AFTER_PICKED) {
    sState=State.SPACE_AFTER_ACCEPTED;
  }
 else {
    sState=State.SPACE_AFTER_PICKED;
  }
}
 else if (isSeparator) {
  sState=State.PUNCTUATION_AFTER_ACCEPTED;
}
 else {
  sState=State.IN_WORD;
}
break;
case START:
case UNKNOWN:
case SPACE_AFTER_ACCEPTED:
case SPACE_AFTER_PICKED:
case PUNCTUATION_AFTER_ACCEPTED:
case PUNCTUATION_AFTER_WORD:
if (!isSpace && !isSeparator) {
sState=State.IN_WORD;
}
 else {
sState=State.START;
}
break;
case UNDO_COMMIT:
if (isSpace || isSeparator) {
sState=State.ACCEPTED_DEFAULT;
}
 else {
sState=State.IN_WORD;
}
break;
case CORRECTING:
sState=State.START;
break;
}
displayState();
}","public static void typedCharacter(char c,boolean isSeparator){
  final boolean isSpace=c == ' ';
switch (sState) {
case IN_WORD:
    if (isSpace || isSeparator) {
      sState=State.START;
    }
  break;
case ACCEPTED_DEFAULT:
if (isSpace) {
  sState=State.SPACE_AFTER_ACCEPTED;
}
 else if (isSeparator) {
  sState=State.PUNCTUATION_AFTER_ACCEPTED;
}
 else {
  sState=State.IN_WORD;
}
break;
case PICKED_SUGGESTION:
case PICKED_CORRECTION:
case PICKED_TYPED_ADDED_TO_DICTIONARY:
if (isSpace) {
sState=State.SPACE_AFTER_PICKED;
}
 else if (isSeparator) {
sState=State.PUNCTUATION_AFTER_PICKED;
}
 else {
sState=State.IN_WORD;
}
break;
case START:
case UNKNOWN:
case SPACE_AFTER_ACCEPTED:
case SPACE_AFTER_PICKED:
case PUNCTUATION_AFTER_ACCEPTED:
case PUNCTUATION_AFTER_PICKED:
if (!isSpace && !isSeparator) {
sState=State.IN_WORD;
}
 else {
sState=State.START;
}
break;
case UNDO_COMMIT:
if (isSpace || isSeparator) {
sState=State.ACCEPTED_DEFAULT;
}
 else {
sState=State.IN_WORD;
}
break;
case CORRECTING:
sState=State.START;
break;
}
displayState();
}",0.4697406340057637
157318,"private static State getNextStateOnBackSpace(State currentState){
switch (currentState) {
case ACCEPTED_DEFAULT:
case SPACE_AFTER_ACCEPTED:
case PUNCTUATION_AFTER_ACCEPTED:
case PICKED_TYPED_ADDED_TO_DICTIONARY:
    return State.UNDO_COMMIT;
case SPACE_AFTER_PICKED:
case PICKED_SUGGESTION:
  return State.UNKNOWN;
case UNDO_COMMIT:
return State.IN_WORD;
default :
return currentState;
}
}","private static State getNextStateOnBackSpace(State currentState){
switch (currentState) {
case ACCEPTED_DEFAULT:
case SPACE_AFTER_ACCEPTED:
case PUNCTUATION_AFTER_ACCEPTED:
    return State.UNDO_COMMIT;
case PICKED_TYPED_ADDED_TO_DICTIONARY:
case SPACE_AFTER_PICKED:
case PICKED_SUGGESTION:
case PUNCTUATION_AFTER_PICKED:
  return State.UNKNOWN;
case UNDO_COMMIT:
return State.IN_WORD;
default :
return currentState;
}
}",0.865265760197775
157319,"public static void acceptedSuggestion(CharSequence typedWord,CharSequence actualWord){
  State oldState=sState;
  if (typedWord.equals(actualWord)) {
    acceptedTyped();
  }
  if (oldState == State.CORRECTING || oldState == State.PICKED_CORRECTION) {
    sState=State.PICKED_CORRECTION;
  }
 else {
    sState=State.PICKED_SUGGESTION;
  }
  displayState();
}","public static void acceptedSuggestion(CharSequence typedWord,CharSequence actualWord){
  State oldState=sState;
  if (typedWord.equals(actualWord)) {
    acceptedTyped();
  }
 else   if (oldState == State.CORRECTING || oldState == State.PICKED_CORRECTION) {
    sState=State.PICKED_CORRECTION;
  }
 else {
    sState=State.PICKED_SUGGESTION;
  }
  displayState();
}",0.9917127071823204
157320,"@Test public void testBackSpaceCorrectlyWhenEditingManuallyPickedWord(){
  TestInputConnection inputConnection=(TestInputConnection)mAnySoftKeyboardUnderTest.getCurrentInputConnection();
  verifyNoSuggestionsInteractions();
  mAnySoftKeyboardUnderTest.simulateTextTyping(""String_Node_Str"");
  verifySuggestions(true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",inputConnection.getLastCommitCorrection());
  mAnySoftKeyboardUnderTest.pickSuggestionManually(0,""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",inputConnection.getCurrentTextInInputConnection());
  inputConnection.setSelection(2,2);
  Assert.assertEquals(""String_Node_Str"",inputConnection.getCurrentTextInInputConnection());
  Assert.assertEquals(2,inputConnection.getCurrentStartPosition());
  mAnySoftKeyboardUnderTest.simulateKeyPress(KeyCodes.DELETE,true);
  Assert.assertEquals(""String_Node_Str"",inputConnection.getCurrentTextInInputConnection());
  Assert.assertEquals(1,inputConnection.getCurrentStartPosition());
}","@Test public void testBackSpaceCorrectlyWhenEditingManuallyPickedWord(){
  TestInputConnection inputConnection=(TestInputConnection)mAnySoftKeyboardUnderTest.getCurrentInputConnection();
  verifyNoSuggestionsInteractions();
  mAnySoftKeyboardUnderTest.simulateTextTyping(""String_Node_Str"");
  verifySuggestions(true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",inputConnection.getLastCommitCorrection());
  mAnySoftKeyboardUnderTest.pickSuggestionManually(0,""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",inputConnection.getCurrentTextInInputConnection());
  inputConnection.setSelection(2,2);
  Assert.assertEquals(""String_Node_Str"",inputConnection.getCurrentTextInInputConnection());
  Assert.assertEquals(2,inputConnection.getCurrentStartPosition());
  mAnySoftKeyboardUnderTest.simulateKeyPress(KeyCodes.DELETE);
  Assert.assertEquals(""String_Node_Str"",inputConnection.getCurrentTextInInputConnection());
  Assert.assertEquals(1,inputConnection.getCurrentStartPosition());
}",0.9976065102920058
157321,"private void handleCharacter(final int primaryCode,final Key key,final int multiTapIndex,int[] nearByKeyCodes){
  if (BuildConfig.DEBUG)   Logger.d(TAG,""String_Node_Str"",primaryCode,isPredictionOn(),mPredicting);
  mExpectingSelectionUpdateBy=SystemClock.uptimeMillis() + MAX_TIME_TO_EXPECT_SELECTION_UPDATE;
  if (!mPredicting && isPredictionOn() && isAlphabet(primaryCode)&& !isCursorTouchingWord()) {
    mPredicting=true;
    mUndoCommitCursorPosition=UNDO_COMMIT_NONE;
    mWord.reset();
    mAutoCorrectOn=mAutoComplete;
  }
  mLastCharacterWasShifted=(getInputView() != null) && getInputView().isShifted();
  final int primaryCodeToOutput;
  if (mShiftKeyState.isActive()) {
    if (key != null) {
      primaryCodeToOutput=key.getCodeAtIndex(multiTapIndex,true);
    }
 else {
      primaryCodeToOutput=Character.toUpperCase(primaryCode);
    }
  }
 else {
    primaryCodeToOutput=primaryCode;
  }
  if (mPredicting) {
    if (mShiftKeyState.isActive() && mWord.cursorPosition() == 0) {
      mWord.setFirstCharCapitalized(true);
    }
    final InputConnection ic=getCurrentInputConnection();
    mWord.add(primaryCodeToOutput,nearByKeyCodes);
    ChewbaccaOnTheDrums.onKeyTyped(mWord,getApplicationContext());
    if (ic != null) {
      final int cursorPosition;
      if (mWord.cursorPosition() != mWord.length()) {
        cursorPosition=mGlobalCursorPosition + 1;
        ic.beginBatchEdit();
      }
 else {
        cursorPosition=-1;
      }
      ic.setComposingText(mWord.getTypedWord(),1);
      if (cursorPosition > 0) {
        ic.setSelection(cursorPosition,cursorPosition);
        ic.endBatchEdit();
      }
    }
    if (isSuggestionAffectingCharacter(primaryCodeToOutput)) {
      postUpdateSuggestions();
    }
 else {
      if (mCandidateView != null)       mCandidateView.replaceTypedWord(mWord.getTypedWord());
    }
  }
 else {
    sendKeyChar((char)primaryCodeToOutput);
  }
  TextEntryState.typedCharacter((char)primaryCodeToOutput,false);
  mJustAutoAddedWord=false;
}","private void handleCharacter(final int primaryCode,final Key key,final int multiTapIndex,int[] nearByKeyCodes){
  if (BuildConfig.DEBUG)   Logger.d(TAG,""String_Node_Str"",primaryCode,isPredictionOn(),mPredicting);
  mExpectingSelectionUpdateBy=SystemClock.uptimeMillis() + MAX_TIME_TO_EXPECT_SELECTION_UPDATE;
  if (!mPredicting && isPredictionOn() && isAlphabet(primaryCode)&& !isCursorTouchingWord()) {
    mPredicting=true;
    mUndoCommitCursorPosition=UNDO_COMMIT_NONE;
    mWord.reset();
    mAutoCorrectOn=mAutoComplete;
  }
  mLastCharacterWasShifted=(getInputView() != null) && getInputView().isShifted();
  if (mPredicting) {
    if (mShiftKeyState.isActive() && mWord.cursorPosition() == 0) {
      mWord.setFirstCharCapitalized(true);
    }
    final InputConnection ic=getCurrentInputConnection();
    mWord.add(primaryCode,nearByKeyCodes);
    ChewbaccaOnTheDrums.onKeyTyped(mWord,getApplicationContext());
    if (ic != null) {
      final int cursorPosition;
      if (mWord.cursorPosition() != mWord.length()) {
        cursorPosition=mGlobalCursorPosition + 1;
        ic.beginBatchEdit();
      }
 else {
        cursorPosition=-1;
      }
      ic.setComposingText(mWord.getTypedWord(),1);
      if (cursorPosition > 0) {
        ic.setSelection(cursorPosition,cursorPosition);
        ic.endBatchEdit();
      }
    }
    if (isSuggestionAffectingCharacter(primaryCode)) {
      postUpdateSuggestions();
    }
 else {
      if (mCandidateView != null)       mCandidateView.replaceTypedWord(mWord.getTypedWord());
    }
  }
 else {
    sendKeyChar((char)primaryCode);
  }
  TextEntryState.typedCharacter((char)primaryCode,false);
  mJustAutoAddedWord=false;
}",0.8619565217391304
157322,"public boolean setShiftLocked(boolean shiftLocked){
  if (keyboardSupportShift()) {
    final int initialState=mShiftState;
    if (shiftLocked) {
      mShiftState=STICKY_KEY_LOCKED;
    }
 else     if (mShiftState == STICKY_KEY_LOCKED) {
      mShiftState=STICKY_KEY_ON;
    }
    setShiftViewAsState();
    return initialState != mShiftState;
  }
  return false;
}","public boolean setShiftLocked(boolean shiftLocked){
  if (keyboardSupportShift()) {
    final int initialState=mShiftState;
    if (shiftLocked) {
      mShiftState=STICKY_KEY_LOCKED;
    }
 else     if (mShiftState == STICKY_KEY_LOCKED) {
      mShiftState=STICKY_KEY_ON;
    }
    return initialState != mShiftState;
  }
  return false;
}",0.9618104667609618
157323,"private void initKeysMembers(Context askContext){
  for (  final Key key : getKeys()) {
    if (key.codes.length > 0) {
      final int primaryCode=key.getPrimaryCode();
      if (key instanceof AnyKey) {
switch (primaryCode) {
case KeyCodes.DELETE:
case KeyCodes.MODE_ALPHABET:
case KeyCodes.KEYBOARD_MODE_CHANGE:
case KeyCodes.KEYBOARD_CYCLE:
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
case KeyCodes.ALT:
case KeyCodes.MODE_SYMOBLS:
case KeyCodes.QUICK_TEXT:
case KeyCodes.DOMAIN:
case KeyCodes.CANCEL:
case KeyCodes.CTRL:
          ((AnyKey)key).setAsFunctional();
        break;
    }
  }
  if (Workarounds.isRightToLeftCharacter((char)primaryCode))   mRightToLeftLayout=true;
switch (primaryCode) {
case KeyCodes.QUICK_TEXT:
    QuickTextKey quickKey=QuickTextKeyFactory.getCurrentQuickTextKey(askContext);
  if (quickKey == null) {
    Logger.w(TAG,""String_Node_Str"");
    break;
  }
Resources quickTextKeyResources=quickKey.getPackageContext().getResources();
key.label=quickKey.getKeyLabel();
int iconResId=quickKey.getKeyIconResId();
int previewResId=quickKey.getIconPreviewResId();
if (iconResId > 0) {
setKeyIcons(key,quickTextKeyResources,iconResId,previewResId);
}
if (key instanceof AnyKey) {
AnyKey anyKey=(AnyKey)key;
if (anyKey.longPressCode == 0 && anyKey.popupResId == 0 && TextUtils.isEmpty(anyKey.popupCharacters)) {
anyKey.longPressCode=KeyCodes.QUICK_TEXT_POPUP;
}
}
break;
case KeyCodes.DOMAIN:
key.label=AnyApplication.getConfig().getDomainText().trim();
key.popupResId=R.xml.popup_domains;
break;
default :
if (isAlphabetKey(key) && (key.icon == null)) {
final boolean labelIsOriginallyEmpty=TextUtils.isEmpty(key.label);
if (labelIsOriginallyEmpty) {
final char code=(char)key.codes[0];
if (code > 31 && !Character.isWhitespace(code)) key.label=Character.toString(code);
}
}
}
}
}
mKeyboardCondenser=new KeyboardCondenser(askContext,this);
}","private void initKeysMembers(Context askContext){
  for (  final Key key : getKeys()) {
    if (key.codes.length > 0) {
      final int primaryCode=key.getPrimaryCode();
      if (key instanceof AnyKey) {
switch (primaryCode) {
case KeyCodes.DELETE:
case KeyCodes.MODE_ALPHABET:
case KeyCodes.KEYBOARD_MODE_CHANGE:
case KeyCodes.KEYBOARD_CYCLE:
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
case KeyCodes.ALT:
case KeyCodes.MODE_SYMOBLS:
case KeyCodes.QUICK_TEXT:
case KeyCodes.DOMAIN:
case KeyCodes.CANCEL:
case KeyCodes.CTRL:
case KeyCodes.SHIFT:
          ((AnyKey)key).setAsFunctional();
        break;
    }
  }
  if (Workarounds.isRightToLeftCharacter((char)primaryCode))   mRightToLeftLayout=true;
switch (primaryCode) {
case KeyCodes.QUICK_TEXT:
    QuickTextKey quickKey=QuickTextKeyFactory.getCurrentQuickTextKey(askContext);
  if (quickKey == null) {
    Logger.w(TAG,""String_Node_Str"");
    break;
  }
Resources quickTextKeyResources=quickKey.getPackageContext().getResources();
key.label=quickKey.getKeyLabel();
int iconResId=quickKey.getKeyIconResId();
int previewResId=quickKey.getIconPreviewResId();
if (iconResId > 0) {
setKeyIcons(key,quickTextKeyResources,iconResId,previewResId);
}
if (key instanceof AnyKey) {
AnyKey anyKey=(AnyKey)key;
if (anyKey.longPressCode == 0 && anyKey.popupResId == 0 && TextUtils.isEmpty(anyKey.popupCharacters)) {
anyKey.longPressCode=KeyCodes.QUICK_TEXT_POPUP;
}
}
break;
case KeyCodes.DOMAIN:
key.label=AnyApplication.getConfig().getDomainText().trim();
key.popupResId=R.xml.popup_domains;
break;
default :
if (isAlphabetKey(key) && (key.icon == null)) {
final boolean labelIsOriginallyEmpty=TextUtils.isEmpty(key.label);
if (labelIsOriginallyEmpty) {
final char code=(char)key.codes[0];
if (code > 31 && !Character.isWhitespace(code)) key.label=Character.toString(code);
}
}
}
}
}
mKeyboardCondenser=new KeyboardCondenser(askContext,this);
}",0.9945184025058732
157324,"public AnyKey(@NonNull AddOn.AddOnResourceMapping resourceMapping,Context askContext,Context keyboardContext,Keyboard.Row parent,KeyboardDimens keyboardDimens,int x,int y,XmlResourceParser parser){
  super(resourceMapping,askContext,keyboardContext,parent,keyboardDimens,x,y,parser);
  mEnabled=true;
  mFunctionalKey=false;
  longPressCode=0;
  shiftedKeyLabel=null;
  hintLabel=null;
  TypedArray a=keyboardContext.obtainStyledAttributes(Xml.asAttributeSet(parser),resourceMapping.getRemoteStyleableArrayFromLocal(R.styleable.KeyboardLayout_Key));
  int n=a.getIndexCount();
  for (int i=0; i < n; i++) {
    final int remoteIndex=a.getIndex(i);
    final int localAttrId=R.styleable.KeyboardLayout_Key[remoteIndex];
    try {
switch (localAttrId) {
case R.attr.shiftedCodes:
        shiftedCodes=KeyboardSupport.getKeyCodesFromTypedArray(a,remoteIndex);
      break;
case R.attr.longPressCode:
    longPressCode=a.getInt(remoteIndex,0);
  break;
case R.attr.isFunctional:
mFunctionalKey=a.getBoolean(remoteIndex,false);
break;
case R.attr.shiftedKeyLabel:
shiftedKeyLabel=a.getString(remoteIndex);
break;
case R.attr.hintLabel:
hintLabel=a.getString(remoteIndex);
break;
case R.attr.tags:
String tags=a.getString(remoteIndex);
if (!TextUtils.isEmpty(tags)) {
mKeyTags=Arrays.asList(tags.split(""String_Node_Str""));
}
break;
}
}
 catch (Exception e) {
Logger.w(TAG,""String_Node_Str"",e);
}
}
a.recycle();
if (shiftedCodes.length != codes.length) {
int[] wrongSizedShiftCodes=shiftedCodes;
shiftedCodes=new int[codes.length];
int i;
for (i=0; i < wrongSizedShiftCodes.length && i < codes.length; i++) shiftedCodes[i]=wrongSizedShiftCodes[i];
for (; i < codes.length; i++) {
final int code=codes[i];
if (Character.isLetter(code)) shiftedCodes[i]=Character.toUpperCase(code);
 else shiftedCodes[i]=code;
}
}
if (popupCharacters != null && popupCharacters.length() == 0) {
popupResId=0;
}
}","public AnyKey(@NonNull AddOn.AddOnResourceMapping resourceMapping,Context askContext,Context keyboardContext,Keyboard.Row parent,KeyboardDimens keyboardDimens,int x,int y,XmlResourceParser parser){
  super(resourceMapping,askContext,keyboardContext,parent,keyboardDimens,x,y,parser);
  mEnabled=true;
  mFunctionalKey=false;
  longPressCode=0;
  shiftedKeyLabel=null;
  hintLabel=null;
  TypedArray a=keyboardContext.obtainStyledAttributes(Xml.asAttributeSet(parser),resourceMapping.getRemoteStyleableArrayFromLocal(R.styleable.KeyboardLayout_Key));
  int n=a.getIndexCount();
  for (int i=0; i < n; i++) {
    final int remoteIndex=a.getIndex(i);
    final int localAttrId=R.styleable.KeyboardLayout_Key[remoteIndex];
    try {
switch (localAttrId) {
case R.attr.shiftedCodes:
        shiftedCodes=KeyboardSupport.getKeyCodesFromTypedArray(a,remoteIndex);
      break;
case R.attr.longPressCode:
    longPressCode=a.getInt(remoteIndex,0);
  break;
case R.attr.isFunctional:
mFunctionalKey=a.getBoolean(remoteIndex,false);
break;
case R.attr.shiftedKeyLabel:
shiftedKeyLabel=a.getString(remoteIndex);
break;
case R.attr.hintLabel:
hintLabel=a.getString(remoteIndex);
break;
case R.attr.tags:
String tags=a.getString(remoteIndex);
if (!TextUtils.isEmpty(tags)) {
mKeyTags=Arrays.asList(tags.split(""String_Node_Str""));
}
break;
}
}
 catch (Exception e) {
Logger.w(TAG,""String_Node_Str"",e);
}
}
a.recycle();
if (shiftedCodes.length != codes.length) {
int[] wrongSizedShiftCodes=shiftedCodes;
shiftedCodes=new int[codes.length];
int i;
for (i=0; i < wrongSizedShiftCodes.length && i < codes.length; i++) shiftedCodes[i]=wrongSizedShiftCodes[i];
for (; i < codes.length; i++) {
final int code=codes[i];
if (Character.isLetter(code)) shiftedCodes[i]=Character.toUpperCase(code);
 else shiftedCodes[i]=code;
}
}
mShiftCodesAlways=shiftedCodes.length == 0 || Character.isLetter(shiftedCodes[0]);
if (popupCharacters != null && popupCharacters.length() == 0) {
popupResId=0;
}
}",0.9784695201037612
157325,"@Override public boolean setShifted(boolean shiftState){
  if (keyboardSupportShift()) {
    final int initialState=mShiftState;
    if (shiftState) {
      if (mShiftState == STICKY_KEY_OFF) {
        mShiftState=STICKY_KEY_ON;
      }
    }
 else {
      mShiftState=STICKY_KEY_OFF;
    }
    setShiftViewAsState();
    return mShiftState != initialState;
  }
 else {
    super.setShifted(shiftState);
    return false;
  }
}","@Override public boolean setShifted(boolean shiftState){
  if (keyboardSupportShift()) {
    final int initialState=mShiftState;
    if (shiftState) {
      if (mShiftState == STICKY_KEY_OFF) {
        mShiftState=STICKY_KEY_ON;
      }
    }
 else {
      mShiftState=STICKY_KEY_OFF;
    }
    return mShiftState != initialState;
  }
 else {
    super.setShifted(shiftState);
    return false;
  }
}",0.9673518742442564
157326,"private boolean isAlphabetKey(Key key){
  return (!key.modifier) && (!key.sticky) && (!key.repeatable)&& (key.getPrimaryCode() > 0);
}","private boolean isAlphabetKey(Key key){
  return (!key.repeatable) && (key.getPrimaryCode() > 0);
}",0.8412017167381974
157327,"public boolean setControl(boolean control){
  if (mControlKey != null) {
    final int initialState=mControlState;
    if (control) {
      if (mControlState == STICKY_KEY_OFF) {
        mControlState=STICKY_KEY_ON;
      }
    }
 else {
      mControlState=STICKY_KEY_OFF;
    }
    setControlViewAsState();
    return mControlState != initialState;
  }
 else {
    return false;
  }
}","public boolean setControl(boolean control){
  if (mControlKey != null) {
    final int initialState=mControlState;
    if (control) {
      if (mControlState == STICKY_KEY_OFF) {
        mControlState=STICKY_KEY_ON;
      }
    }
 else {
      mControlState=STICKY_KEY_OFF;
    }
    return mControlState != initialState;
  }
 else {
    return false;
  }
}",0.7725437415881561
157328,"public boolean setShifted(boolean shiftState){
  if (mShiftKey != null) {
    mShiftKey.on=shiftState;
  }
  if (mShifted != shiftState) {
    mShifted=shiftState;
    return true;
  }
  return false;
}","public boolean setShifted(boolean shiftState){
  if (mShifted != shiftState) {
    mShifted=shiftState;
    return true;
  }
  return false;
}",0.8255813953488372
157329,"/** 
 * Returns the drawable state for the key, based on the current state and type of the key.
 * @return the drawable state of the key.
 * @see android.graphics.drawable.StateListDrawable#setState(int[])
 */
public int[] getCurrentDrawableState(KeyDrawableStateProvider provider){
  int[] states=provider.KEY_STATE_NORMAL;
  if (on) {
    if (pressed) {
      states=provider.KEY_STATE_PRESSED_ON;
    }
 else {
      states=provider.KEY_STATE_NORMAL_ON;
    }
  }
 else {
    if (sticky) {
      if (pressed) {
        states=provider.KEY_STATE_PRESSED_OFF;
      }
 else {
        states=provider.KEY_STATE_NORMAL_OFF;
      }
    }
 else {
      if (pressed) {
        states=provider.KEY_STATE_PRESSED;
      }
    }
  }
  return states;
}","/** 
 * Returns the drawable state for the key, based on the current state and type of the key.
 * @return the drawable state of the key.
 * @see android.graphics.drawable.StateListDrawable#setState(int[])
 */
public int[] getCurrentDrawableState(KeyDrawableStateProvider provider){
  int[] states=provider.KEY_STATE_NORMAL;
  if (pressed) {
    states=provider.KEY_STATE_PRESSED;
  }
  return states;
}",0.6655052264808362
157330,"private void setDataFromTypedArray(Row parent,KeyboardDimens keyboardDimens,Resources askResources,TypedArray a,int remoteIndex,int localAttrId){
  try {
switch (localAttrId) {
case android.R.attr.keyWidth:
      width=getDimensionOrFraction(a,remoteIndex,keyboard.mDisplayWidth,parent.defaultWidth);
    width=Math.min(keyboardDimens.getKeyMaxWidth(),width);
  break;
case android.R.attr.keyHeight:
int heightCode=getKeyHeightCode(a,remoteIndex,parent.defaultHeightCode);
height=KeyboardSupport.getKeyHeightFromHeightCode(keyboardDimens,heightCode,askResources.getConfiguration().orientation);
break;
case android.R.attr.horizontalGap:
gap=getDimensionOrFraction(a,remoteIndex,keyboard.mDisplayWidth,parent.defaultHorizontalGap);
break;
case android.R.attr.codes:
codes=KeyboardSupport.getKeyCodesFromTypedArray(a,remoteIndex);
break;
case android.R.attr.iconPreview:
iconPreview=a.getDrawable(remoteIndex);
KeyboardSupport.updateDrawableBounds(iconPreview);
break;
case android.R.attr.popupCharacters:
popupCharacters=a.getText(remoteIndex);
break;
case android.R.attr.popupKeyboard:
popupResId=a.getResourceId(remoteIndex,0);
break;
case android.R.attr.isRepeatable:
repeatable=a.getBoolean(remoteIndex,false);
break;
case R.attr.showPreview:
showPreview=a.getBoolean(remoteIndex,true);
break;
case R.attr.keyDynamicEmblem:
dynamicEmblem=a.getInt(remoteIndex,KEY_EMBLEM_NONE);
break;
case android.R.attr.isModifier:
modifier=a.getBoolean(remoteIndex,false);
break;
case android.R.attr.isSticky:
sticky=a.getBoolean(remoteIndex,false);
break;
case android.R.attr.keyEdgeFlags:
edgeFlags=a.getInt(remoteIndex,0);
edgeFlags|=parent.rowEdgeFlags;
break;
case android.R.attr.keyIcon:
icon=a.getDrawable(remoteIndex);
KeyboardSupport.updateDrawableBounds(icon);
break;
case android.R.attr.keyLabel:
label=a.getText(remoteIndex);
break;
case android.R.attr.keyOutputText:
text=a.getText(remoteIndex);
break;
}
}
 catch (Exception e) {
Logger.w(TAG,""String_Node_Str"",e);
}
}","private void setDataFromTypedArray(Row parent,KeyboardDimens keyboardDimens,Resources askResources,TypedArray a,int remoteIndex,int localAttrId){
  try {
switch (localAttrId) {
case android.R.attr.keyWidth:
      width=getDimensionOrFraction(a,remoteIndex,keyboard.mDisplayWidth,parent.defaultWidth);
    width=Math.min(keyboardDimens.getKeyMaxWidth(),width);
  break;
case android.R.attr.keyHeight:
int heightCode=getKeyHeightCode(a,remoteIndex,parent.defaultHeightCode);
height=KeyboardSupport.getKeyHeightFromHeightCode(keyboardDimens,heightCode,askResources.getConfiguration().orientation);
break;
case android.R.attr.horizontalGap:
gap=getDimensionOrFraction(a,remoteIndex,keyboard.mDisplayWidth,parent.defaultHorizontalGap);
break;
case android.R.attr.codes:
codes=KeyboardSupport.getKeyCodesFromTypedArray(a,remoteIndex);
break;
case android.R.attr.iconPreview:
iconPreview=a.getDrawable(remoteIndex);
KeyboardSupport.updateDrawableBounds(iconPreview);
break;
case android.R.attr.popupCharacters:
popupCharacters=a.getText(remoteIndex);
break;
case android.R.attr.popupKeyboard:
popupResId=a.getResourceId(remoteIndex,0);
break;
case android.R.attr.isRepeatable:
repeatable=a.getBoolean(remoteIndex,false);
break;
case R.attr.showPreview:
showPreview=a.getBoolean(remoteIndex,true);
break;
case R.attr.keyDynamicEmblem:
dynamicEmblem=a.getInt(remoteIndex,KEY_EMBLEM_NONE);
break;
case android.R.attr.isModifier:
modifier=a.getBoolean(remoteIndex,false);
break;
case android.R.attr.keyEdgeFlags:
edgeFlags=a.getInt(remoteIndex,0);
edgeFlags|=parent.rowEdgeFlags;
break;
case android.R.attr.keyIcon:
icon=a.getDrawable(remoteIndex);
KeyboardSupport.updateDrawableBounds(icon);
break;
case android.R.attr.keyLabel:
label=a.getText(remoteIndex);
break;
case android.R.attr.keyOutputText:
text=a.getText(remoteIndex);
break;
}
}
 catch (Exception e) {
Logger.w(TAG,""String_Node_Str"",e);
}
}",0.98005698005698
157331,"public void loadKeyboard(final KeyboardDimens keyboardDimens){
  mDisplayWidth=keyboardDimens.getKeyboardMaxWidth();
  final float rowVerticalGap=keyboardDimens.getRowVerticalGap();
  final float keyHorizontalGap=keyboardDimens.getKeyHorizontalGap();
  mDefaultHorizontalGap=0;
  mDefaultWidth=mDisplayWidth / 10;
  mDefaultHeightCode=-1;
  XmlResourceParser parser=mKeyboardContext.getResources().getXml(mLayoutResId);
  boolean inKey=false;
  boolean inRow=false;
  boolean inUnknown=false;
  int row=0;
  float x=0;
  float y=rowVerticalGap;
  int rowHeight=0;
  Key key=null;
  Row currentRow=null;
  Resources res=mKeyboardContext.getResources();
  int lastVerticalGap=0;
  try {
    int event;
    while ((event=parser.next()) != XmlResourceParser.END_DOCUMENT) {
      if (event == XmlResourceParser.START_TAG) {
        String tag=parser.getName();
        if (TAG_ROW.equals(tag)) {
          inRow=true;
          x=0;
          rowHeight=0;
          currentRow=createRowFromXml(mKeyboardResourceMap,res,parser,mKeyboardMode);
          if (currentRow == null) {
            skipToEndOfRow(parser);
            inRow=false;
          }
        }
 else         if (TAG_KEY.equals(tag)) {
          inKey=true;
          x+=(keyHorizontalGap / 2);
          key=createKeyFromXml(mKeyboardResourceMap,mASKContext,mKeyboardContext,currentRow,keyboardDimens,(int)x,(int)y,parser);
          rowHeight=Math.max(rowHeight,key.height);
          key.width-=keyHorizontalGap;
          mKeys.add(key);
          if (key.getPrimaryCode() == KeyCodes.SHIFT) {
            mShiftKey=key;
            mShiftKeyIndex=mKeys.size() - 1;
            mModifierKeys.add(key);
          }
 else           if (key.getPrimaryCode() == KeyCodes.ALT) {
            mModifierKeys.add(key);
          }
        }
 else         if (TAG_KEYBOARD.equals(tag)) {
          parseKeyboardAttributes(mASKContext,res,parser);
        }
 else {
          inUnknown=true;
          Logger.w(TAG,""String_Node_Str"",tag);
        }
      }
 else       if (event == XmlResourceParser.END_TAG) {
        if (inKey) {
          inKey=false;
          x+=key.gap + key.width;
          x+=(keyHorizontalGap / 2);
          if (x > mTotalWidth) {
            mTotalWidth=(int)x;
          }
        }
 else         if (inRow) {
          inRow=false;
          lastVerticalGap=currentRow.verticalGap;
          y+=currentRow.verticalGap;
          y+=rowHeight;
          y+=rowVerticalGap;
          row++;
        }
 else         if (inUnknown) {
          inUnknown=false;
        }
      }
    }
  }
 catch (  Exception e) {
    Logger.e(TAG,""String_Node_Str"" + e);
    e.printStackTrace();
  }
  mTotalHeight=(int)(y - lastVerticalGap);
}","public void loadKeyboard(final KeyboardDimens keyboardDimens){
  mDisplayWidth=keyboardDimens.getKeyboardMaxWidth();
  final float rowVerticalGap=keyboardDimens.getRowVerticalGap();
  final float keyHorizontalGap=keyboardDimens.getKeyHorizontalGap();
  mDefaultHorizontalGap=0;
  mDefaultWidth=mDisplayWidth / 10;
  mDefaultHeightCode=-1;
  XmlResourceParser parser=mKeyboardContext.getResources().getXml(mLayoutResId);
  boolean inKey=false;
  boolean inRow=false;
  boolean inUnknown=false;
  int row=0;
  float x=0;
  float y=rowVerticalGap;
  int rowHeight=0;
  Key key=null;
  Row currentRow=null;
  Resources res=mKeyboardContext.getResources();
  int lastVerticalGap=0;
  try {
    int event;
    while ((event=parser.next()) != XmlResourceParser.END_DOCUMENT) {
      if (event == XmlResourceParser.START_TAG) {
        String tag=parser.getName();
        if (TAG_ROW.equals(tag)) {
          inRow=true;
          x=0;
          rowHeight=0;
          currentRow=createRowFromXml(mKeyboardResourceMap,res,parser,mKeyboardMode);
          if (currentRow == null) {
            skipToEndOfRow(parser);
            inRow=false;
          }
        }
 else         if (TAG_KEY.equals(tag)) {
          inKey=true;
          x+=(keyHorizontalGap / 2);
          key=createKeyFromXml(mKeyboardResourceMap,mASKContext,mKeyboardContext,currentRow,keyboardDimens,(int)x,(int)y,parser);
          rowHeight=Math.max(rowHeight,key.height);
          key.width-=keyHorizontalGap;
          mKeys.add(key);
          if (key.getPrimaryCode() == KeyCodes.SHIFT) {
            mShiftKey=key;
            mModifierKeys.add(key);
          }
 else           if (key.getPrimaryCode() == KeyCodes.ALT) {
            mModifierKeys.add(key);
          }
        }
 else         if (TAG_KEYBOARD.equals(tag)) {
          parseKeyboardAttributes(mASKContext,res,parser);
        }
 else {
          inUnknown=true;
          Logger.w(TAG,""String_Node_Str"",tag);
        }
      }
 else       if (event == XmlResourceParser.END_TAG) {
        if (inKey) {
          inKey=false;
          x+=key.gap + key.width;
          x+=(keyHorizontalGap / 2);
          if (x > mTotalWidth) {
            mTotalWidth=(int)x;
          }
        }
 else         if (inRow) {
          inRow=false;
          lastVerticalGap=currentRow.verticalGap;
          y+=currentRow.verticalGap;
          y+=rowHeight;
          y+=rowVerticalGap;
          row++;
        }
 else         if (inUnknown) {
          inUnknown=false;
        }
      }
    }
  }
 catch (  Exception e) {
    Logger.e(TAG,""String_Node_Str"" + e);
    e.printStackTrace();
  }
  mTotalHeight=(int)(y - lastVerticalGap);
}",0.9916279069767442
157332,"/** 
 * Create a key with the given top-left coordinate and extract its attributes from the XML parser.
 * @param parent the row that this key belongs to. The row must alreadybe attached to a  {@link Keyboard}.
 * @param x      the x coordinate of the top-left
 * @param y      the y coordinate of the top-left
 * @param parser the XML parser containing the attributes for this key
 */
public Key(@NonNull AddOn.AddOnResourceMapping resourceMapping,Context askContext,Context keyboardContext,Row parent,KeyboardDimens keyboardDimens,int x,int y,XmlResourceParser parser){
  this(parent,keyboardDimens);
  final Resources askResources=askContext.getResources();
  this.x=x;
  this.y=y;
  width=Math.min(keyboardDimens.getKeyMaxWidth(),parent.defaultWidth);
  height=KeyboardSupport.getKeyHeightFromHeightCode(keyboardDimens,parent.defaultHeightCode,askResources.getConfiguration().orientation);
  gap=parent.defaultHorizontalGap;
  codes=new int[0];
  iconPreview=null;
  popupCharacters=null;
  popupResId=0;
  repeatable=false;
  showPreview=true;
  dynamicEmblem=KEY_EMBLEM_NONE;
  modifier=false;
  sticky=false;
  int[] remoteKeyboardLayoutStyleable=resourceMapping.getRemoteStyleableArrayFromLocal(R.styleable.KeyboardLayout);
  TypedArray a=keyboardContext.obtainStyledAttributes(Xml.asAttributeSet(parser),remoteKeyboardLayoutStyleable);
  int n=a.getIndexCount();
  for (int i=0; i < n; i++) {
    final int remoteIndex=a.getIndex(i);
    final int localAttrId=R.styleable.KeyboardLayout[remoteIndex];
    setDataFromTypedArray(parent,keyboardDimens,askResources,a,remoteIndex,localAttrId);
  }
  a.recycle();
  this.x+=gap;
  int[] remoteKeyboardKeyLayoutStyleable=resourceMapping.getRemoteStyleableArrayFromLocal(R.styleable.KeyboardLayout_Key);
  a=keyboardContext.obtainStyledAttributes(Xml.asAttributeSet(parser),remoteKeyboardKeyLayoutStyleable);
  n=a.getIndexCount();
  for (int i=0; i < n; i++) {
    final int remoteIndex=a.getIndex(i);
    final int localAttrId=R.styleable.KeyboardLayout_Key[remoteIndex];
    setDataFromTypedArray(parent,keyboardDimens,askResources,a,remoteIndex,localAttrId);
  }
  externalResourcePopupLayout=popupResId != 0;
  if (codes.length == 0 && !TextUtils.isEmpty(label)) {
    codes=new int[]{label.charAt(0)};
  }
  a.recycle();
}","/** 
 * Create a key with the given top-left coordinate and extract its attributes from the XML parser.
 * @param parent the row that this key belongs to. The row must alreadybe attached to a  {@link Keyboard}.
 * @param x      the x coordinate of the top-left
 * @param y      the y coordinate of the top-left
 * @param parser the XML parser containing the attributes for this key
 */
public Key(@NonNull AddOn.AddOnResourceMapping resourceMapping,Context askContext,Context keyboardContext,Row parent,KeyboardDimens keyboardDimens,int x,int y,XmlResourceParser parser){
  this(parent,keyboardDimens);
  final Resources askResources=askContext.getResources();
  this.x=x;
  this.y=y;
  width=Math.min(keyboardDimens.getKeyMaxWidth(),parent.defaultWidth);
  height=KeyboardSupport.getKeyHeightFromHeightCode(keyboardDimens,parent.defaultHeightCode,askResources.getConfiguration().orientation);
  gap=parent.defaultHorizontalGap;
  codes=new int[0];
  iconPreview=null;
  popupCharacters=null;
  popupResId=0;
  repeatable=false;
  showPreview=true;
  dynamicEmblem=KEY_EMBLEM_NONE;
  modifier=false;
  int[] remoteKeyboardLayoutStyleable=resourceMapping.getRemoteStyleableArrayFromLocal(R.styleable.KeyboardLayout);
  TypedArray a=keyboardContext.obtainStyledAttributes(Xml.asAttributeSet(parser),remoteKeyboardLayoutStyleable);
  int n=a.getIndexCount();
  for (int i=0; i < n; i++) {
    final int remoteIndex=a.getIndex(i);
    final int localAttrId=R.styleable.KeyboardLayout[remoteIndex];
    setDataFromTypedArray(parent,keyboardDimens,askResources,a,remoteIndex,localAttrId);
  }
  a.recycle();
  this.x+=gap;
  int[] remoteKeyboardKeyLayoutStyleable=resourceMapping.getRemoteStyleableArrayFromLocal(R.styleable.KeyboardLayout_Key);
  a=keyboardContext.obtainStyledAttributes(Xml.asAttributeSet(parser),remoteKeyboardKeyLayoutStyleable);
  n=a.getIndexCount();
  for (int i=0; i < n; i++) {
    final int remoteIndex=a.getIndex(i);
    final int localAttrId=R.styleable.KeyboardLayout_Key[remoteIndex];
    setDataFromTypedArray(parent,keyboardDimens,askResources,a,remoteIndex,localAttrId);
  }
  externalResourcePopupLayout=popupResId != 0;
  if (codes.length == 0 && !TextUtils.isEmpty(label)) {
    codes=new int[]{label.charAt(0)};
  }
  a.recycle();
}",0.9964788732394366
157333,"@Override public void showPreview(int keyIndex,PointerTracker tracker){
  final boolean hidePreviewOrShowSpaceKeyPreview=(tracker == null);
  final Key key=hidePreviewOrShowSpaceKeyPreview ? null : tracker.getKey(keyIndex);
  if (keyIndex != NOT_A_KEY && key != null) {
    Drawable iconToDraw=getIconToDrawForKey(key,true);
    if (iconToDraw != null) {
      mKeyPreviewsManager.showPreviewForKey(key,iconToDraw);
    }
 else {
      CharSequence label=tracker.getPreviewText(key,mKeyboard.isShifted());
      if (TextUtils.isEmpty(label)) {
        label=guessLabelForKey(key.getPrimaryCode());
      }
      mKeyPreviewsManager.showPreviewForKey(key,label);
    }
  }
}","@Override public void showPreview(int keyIndex,PointerTracker tracker){
  final boolean hidePreviewOrShowSpaceKeyPreview=(tracker == null);
  final Key key=hidePreviewOrShowSpaceKeyPreview ? null : tracker.getKey(keyIndex);
  if (keyIndex != NOT_A_KEY && key != null) {
    Drawable iconToDraw=getIconToDrawForKey(key,true);
    if (iconToDraw != null) {
      mKeyPreviewsManager.showPreviewForKey(key,iconToDraw);
    }
 else {
      CharSequence label=tracker.getPreviewText(key);
      if (TextUtils.isEmpty(label)) {
        label=guessLabelForKey(key.getPrimaryCode());
      }
      mKeyPreviewsManager.showPreviewForKey(key,label);
    }
  }
}",0.9833836858006042
157334,"@NonNull private synchronized AnyKeyboard getSymbolsKeyboard(int keyboardIndex,@Keyboard.KeyboardRowModeId int mode){
  ensureKeyboardsAreBuilt();
  AnyKeyboard keyboard=mSymbolsKeyboardsArray[keyboardIndex];
  if (keyboard == null) {
switch (keyboardIndex) {
case SYMBOLS_KEYBOARD_REGULAR_INDEX:
      if (AnyApplication.getConfig().use16KeysSymbolsKeyboards())       keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols_16keys,R.xml.symbols,mContext.getString(R.string.symbols_keyboard),""String_Node_Str"",mode,false);
 else       keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols,R.xml.symbols,mContext.getString(R.string.symbols_keyboard),""String_Node_Str"",mode,false);
    break;
case SYMBOLS_KEYBOARD_ALT_INDEX:
  if (AnyApplication.getConfig().use16KeysSymbolsKeyboards())   keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols_alt_16keys,R.xml.symbols_alt,mContext.getString(R.string.symbols_alt_keyboard),""String_Node_Str"",mode,false);
 else   keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols_alt,R.xml.symbols_alt,mContext.getString(R.string.symbols_alt_keyboard),""String_Node_Str"",mode,false);
break;
case SYMBOLS_KEYBOARD_ALT_NUMBERS_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_alt_numbers,R.xml.simple_alt_numbers,mContext.getString(R.string.symbols_alt_num_keyboard),""String_Node_Str"",mode,false);
break;
case SYMBOLS_KEYBOARD_PHONE_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_phone,R.xml.simple_phone,mContext.getString(R.string.symbols_phone_keyboard),""String_Node_Str"",mode,true);
break;
case SYMBOLS_KEYBOARD_NUMBERS_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_numbers,R.xml.simple_numbers,mContext.getString(R.string.symbols_numbers_keyboard),""String_Node_Str"",mode,false);
break;
case SYMBOLS_KEYBOARD_DATETIME_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_datetime,R.xml.simple_datetime,mContext.getString(R.string.symbols_time_keyboard),""String_Node_Str"",mode,false);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + keyboardIndex);
}
mSymbolsKeyboardsArray[keyboardIndex]=keyboard;
mLastSelectedSymbolsKeyboard=keyboardIndex;
keyboard.loadKeyboard((mInputView != null) ? mInputView.getThemedKeyboardDimens() : mKeyboardDimens);
mIME.onSymbolsKeyboardSet(keyboard);
}
return keyboard;
}","@NonNull private synchronized AnyKeyboard getSymbolsKeyboard(int keyboardIndex,@Keyboard.KeyboardRowModeId int mode){
  ensureKeyboardsAreBuilt();
  AnyKeyboard keyboard=mSymbolsKeyboardsArray[keyboardIndex];
  if (keyboard == null || keyboard.getKeyboardMode() != mode) {
switch (keyboardIndex) {
case SYMBOLS_KEYBOARD_REGULAR_INDEX:
      if (AnyApplication.getConfig().use16KeysSymbolsKeyboards())       keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols_16keys,R.xml.symbols,mContext.getString(R.string.symbols_keyboard),""String_Node_Str"",mode,false);
 else       keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols,R.xml.symbols,mContext.getString(R.string.symbols_keyboard),""String_Node_Str"",mode,false);
    break;
case SYMBOLS_KEYBOARD_ALT_INDEX:
  if (AnyApplication.getConfig().use16KeysSymbolsKeyboards())   keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols_alt_16keys,R.xml.symbols_alt,mContext.getString(R.string.symbols_alt_keyboard),""String_Node_Str"",mode,false);
 else   keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols_alt,R.xml.symbols_alt,mContext.getString(R.string.symbols_alt_keyboard),""String_Node_Str"",mode,false);
break;
case SYMBOLS_KEYBOARD_ALT_NUMBERS_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_alt_numbers,R.xml.simple_alt_numbers,mContext.getString(R.string.symbols_alt_num_keyboard),""String_Node_Str"",mode,false);
break;
case SYMBOLS_KEYBOARD_PHONE_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_phone,R.xml.simple_phone,mContext.getString(R.string.symbols_phone_keyboard),""String_Node_Str"",mode,true);
break;
case SYMBOLS_KEYBOARD_NUMBERS_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_numbers,R.xml.simple_numbers,mContext.getString(R.string.symbols_numbers_keyboard),""String_Node_Str"",mode,false);
break;
case SYMBOLS_KEYBOARD_DATETIME_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_datetime,R.xml.simple_datetime,mContext.getString(R.string.symbols_time_keyboard),""String_Node_Str"",mode,false);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + keyboardIndex);
}
mSymbolsKeyboardsArray[keyboardIndex]=keyboard;
mLastSelectedSymbolsKeyboard=keyboardIndex;
keyboard.loadKeyboard((mInputView != null) ? mInputView.getThemedKeyboardDimens() : mKeyboardDimens);
mIME.onSymbolsKeyboardSet(keyboard);
}
return keyboard;
}",0.9921939194741168
157335,"private void addPopupKeysToList(int baseKeyIndex,KeyboardDimens keyboardDimens,List<Key> keys,CharSequence popupCharacters,int characterOffset,int keysPerRow){
  int rowWidth=0;
  AnyKey baseKey=(AnyKey)keys.get(baseKeyIndex);
  Row row=baseKey.row;
  final float y=baseKey.y;
  final float keyHorizontalGap=row.defaultHorizontalGap;
  char popupCharacter=popupCharacters.charAt(characterOffset);
  baseKey.codes=new int[]{(int)popupCharacter};
  baseKey.label=Character.toString(popupCharacter);
  char upperCasePopupCharacter=Character.toUpperCase(popupCharacter);
  baseKey.shiftedCodes=new int[]{(int)upperCasePopupCharacter};
  baseKey.shiftedKeyLabel=Character.toString(upperCasePopupCharacter);
  float x=baseKey.width;
  AnyKey aKey=null;
  for (int popupCharIndex=characterOffset + 1; popupCharIndex < characterOffset + keysPerRow && popupCharIndex < popupCharacters.length(); popupCharIndex++) {
    x+=(keyHorizontalGap / 2);
    aKey=new AnyKey(row,keyboardDimens);
    popupCharacter=popupCharacters.charAt(popupCharIndex);
    aKey.codes=new int[]{(int)popupCharacter};
    aKey.label=Character.toString(popupCharacter);
    upperCasePopupCharacter=Character.toUpperCase(popupCharacter);
    aKey.shiftedCodes=new int[]{(int)upperCasePopupCharacter};
    aKey.shiftedKeyLabel=Character.toString(upperCasePopupCharacter);
    aKey.x=(int)x;
    aKey.width-=keyHorizontalGap;
    aKey.y=(int)y;
    final int xOffset=(int)(aKey.width + keyHorizontalGap + (keyHorizontalGap / 2));
    x+=xOffset;
    rowWidth+=xOffset;
    keys.add(baseKeyIndex,aKey);
  }
  baseKey.edgeFlags=EDGE_LEFT;
  if (aKey != null)   aKey.edgeFlags=EDGE_RIGHT;
 else   baseKey.edgeFlags|=EDGE_RIGHT;
  mAdditionalWidth=Math.max(rowWidth,mAdditionalWidth);
}","private void addPopupKeysToList(int baseKeyIndex,KeyboardDimens keyboardDimens,List<Key> keys,CharSequence popupCharacters,int characterOffset,int keysPerRow){
  int rowWidth=0;
  AnyKey baseKey=(AnyKey)keys.get(baseKeyIndex);
  Row row=baseKey.row;
  final float y=baseKey.y;
  final float keyHorizontalGap=row.defaultHorizontalGap;
  char popupCharacter=popupCharacters.charAt(characterOffset);
  baseKey.codes=new int[]{(int)popupCharacter};
  baseKey.label=Character.toString(popupCharacter);
  char upperCasePopupCharacter=Character.toUpperCase(popupCharacter);
  baseKey.shiftedCodes=new int[]{(int)upperCasePopupCharacter};
  float x=baseKey.width;
  AnyKey aKey=null;
  for (int popupCharIndex=characterOffset + 1; popupCharIndex < characterOffset + keysPerRow && popupCharIndex < popupCharacters.length(); popupCharIndex++) {
    x+=(keyHorizontalGap / 2);
    aKey=new AnyKey(row,keyboardDimens);
    popupCharacter=popupCharacters.charAt(popupCharIndex);
    aKey.codes=new int[]{(int)popupCharacter};
    aKey.label=Character.toString(popupCharacter);
    upperCasePopupCharacter=Character.toUpperCase(popupCharacter);
    aKey.shiftedCodes=new int[]{(int)upperCasePopupCharacter};
    aKey.x=(int)x;
    aKey.width-=keyHorizontalGap;
    aKey.y=(int)y;
    final int xOffset=(int)(aKey.width + keyHorizontalGap + (keyHorizontalGap / 2));
    x+=xOffset;
    rowWidth+=xOffset;
    keys.add(baseKeyIndex,aKey);
  }
  baseKey.edgeFlags=EDGE_LEFT;
  if (aKey != null)   aKey.edgeFlags=EDGE_RIGHT;
 else   baseKey.edgeFlags|=EDGE_RIGHT;
  mAdditionalWidth=Math.max(rowWidth,mAdditionalWidth);
}",0.957872721840454
157336,"private CharSequence adjustLabelToShiftState(AnyKey key){
  CharSequence label=key.label;
  if (mKeyboard.isShifted()) {
    if (!TextUtils.isEmpty(key.shiftedKeyLabel)) {
      return key.shiftedKeyLabel;
    }
 else     if (label != null && label.length() == 1) {
      label=Character.toString((char)key.getCodeAtIndex(0,true));
    }
    key.shiftedKeyLabel=label;
  }
  return label;
}","private CharSequence adjustLabelToShiftState(AnyKey key){
  CharSequence label=key.label;
  if (mKeyboard.isShifted()) {
    if (!TextUtils.isEmpty(key.shiftedKeyLabel)) {
      return key.shiftedKeyLabel;
    }
 else     if (label != null && label.length() == 1) {
      label=Character.toString((char)key.getCodeAtIndex(0,mKeyDetector.isKeyShifted(key)));
    }
    if (key.isShiftCodesAlways())     key.shiftedKeyLabel=label;
  }
  return label;
}",0.919047619047619
157337,"private void initKeysMembers(Context askContext){
  for (  final Key key : getKeys()) {
    if (key.y == 0)     key.edgeFlags|=Keyboard.EDGE_TOP;
    if (key.codes.length > 0) {
      final int primaryCode=key.getPrimaryCode();
      if (key instanceof AnyKey) {
switch (primaryCode) {
case KeyCodes.DELETE:
case KeyCodes.MODE_ALPHABET:
case KeyCodes.KEYBOARD_MODE_CHANGE:
case KeyCodes.KEYBOARD_CYCLE:
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
case KeyCodes.ALT:
case KeyCodes.MODE_SYMOBLS:
case KeyCodes.QUICK_TEXT:
case KeyCodes.DOMAIN:
case KeyCodes.CANCEL:
case KeyCodes.CTRL:
          ((AnyKey)key).setAsFunctional();
        break;
    }
  }
  if (Workarounds.isRightToLeftCharacter((char)primaryCode))   mRightToLeftLayout=true;
switch (primaryCode) {
case KeyCodes.QUICK_TEXT:
    QuickTextKey quickKey=QuickTextKeyFactory.getCurrentQuickTextKey(askContext);
  if (quickKey == null) {
    Logger.w(TAG,""String_Node_Str"");
    break;
  }
Resources quickTextKeyResources=quickKey.getPackageContext().getResources();
key.label=quickKey.getKeyLabel();
int iconResId=quickKey.getKeyIconResId();
int previewResId=quickKey.getIconPreviewResId();
if (iconResId > 0) {
setKeyIcons(key,quickTextKeyResources,iconResId,previewResId);
}
if (key instanceof AnyKey) {
AnyKey anyKey=(AnyKey)key;
if (anyKey.longPressCode == 0 && anyKey.popupResId == 0 && TextUtils.isEmpty(anyKey.popupCharacters)) {
anyKey.longPressCode=KeyCodes.QUICK_TEXT_POPUP;
}
}
break;
case KeyCodes.DOMAIN:
key.label=AnyApplication.getConfig().getDomainText().trim();
key.popupResId=R.xml.popup_domains;
break;
default :
if (isAlphabetKey(key) && (key.icon == null)) {
final boolean labelIsOriginallyEmpty=TextUtils.isEmpty(key.label);
if (labelIsOriginallyEmpty) {
final char code=(char)key.codes[0];
if (code > 31 && !Character.isWhitespace(code)) key.label=Character.toString(code);
}
}
}
}
}
mKeyboardCondenser=new KeyboardCondenser(askContext,this);
}","private void initKeysMembers(Context askContext){
  for (  final Key key : getKeys()) {
    if (key.codes.length > 0) {
      final int primaryCode=key.getPrimaryCode();
      if (key instanceof AnyKey) {
switch (primaryCode) {
case KeyCodes.DELETE:
case KeyCodes.MODE_ALPHABET:
case KeyCodes.KEYBOARD_MODE_CHANGE:
case KeyCodes.KEYBOARD_CYCLE:
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
case KeyCodes.ALT:
case KeyCodes.MODE_SYMOBLS:
case KeyCodes.QUICK_TEXT:
case KeyCodes.DOMAIN:
case KeyCodes.CANCEL:
case KeyCodes.CTRL:
          ((AnyKey)key).setAsFunctional();
        break;
    }
  }
  if (Workarounds.isRightToLeftCharacter((char)primaryCode))   mRightToLeftLayout=true;
switch (primaryCode) {
case KeyCodes.QUICK_TEXT:
    QuickTextKey quickKey=QuickTextKeyFactory.getCurrentQuickTextKey(askContext);
  if (quickKey == null) {
    Logger.w(TAG,""String_Node_Str"");
    break;
  }
Resources quickTextKeyResources=quickKey.getPackageContext().getResources();
key.label=quickKey.getKeyLabel();
int iconResId=quickKey.getKeyIconResId();
int previewResId=quickKey.getIconPreviewResId();
if (iconResId > 0) {
setKeyIcons(key,quickTextKeyResources,iconResId,previewResId);
}
if (key instanceof AnyKey) {
AnyKey anyKey=(AnyKey)key;
if (anyKey.longPressCode == 0 && anyKey.popupResId == 0 && TextUtils.isEmpty(anyKey.popupCharacters)) {
anyKey.longPressCode=KeyCodes.QUICK_TEXT_POPUP;
}
}
break;
case KeyCodes.DOMAIN:
key.label=AnyApplication.getConfig().getDomainText().trim();
key.popupResId=R.xml.popup_domains;
break;
default :
if (isAlphabetKey(key) && (key.icon == null)) {
final boolean labelIsOriginallyEmpty=TextUtils.isEmpty(key.label);
if (labelIsOriginallyEmpty) {
final char code=(char)key.codes[0];
if (code > 31 && !Character.isWhitespace(code)) key.label=Character.toString(code);
}
}
}
}
}
mKeyboardCondenser=new KeyboardCondenser(askContext,this);
}",0.9850051706308168
157338,"public void loadKeyboard(final KeyboardDimens keyboardDimens,@NonNull KeyboardExtension topRowPlugin,@NonNull KeyboardExtension bottomRowPlugin){
  super.loadKeyboard(keyboardDimens);
  addGenericRows(keyboardDimens,topRowPlugin,bottomRowPlugin);
  initKeysMembers(mASKContext);
}","public void loadKeyboard(final KeyboardDimens keyboardDimens,@NonNull KeyboardExtension topRowPlugin,@NonNull KeyboardExtension bottomRowPlugin){
  super.loadKeyboard(keyboardDimens);
  addGenericRows(keyboardDimens,topRowPlugin,bottomRowPlugin);
  initKeysMembers(mASKContext);
  fixEdgeFlags();
}",0.9688581314878892
157339,"/** 
 * Informs the key that it has been pressed, in case it needs to change its appearance or state.
 * @see #onReleased(boolean)
 */
public void onPressed(){
  pressed=true;
}","/** 
 * Informs the key that it has been pressed, in case it needs to change its appearance or state.
 * @see #onReleased()
 */
public void onPressed(){
  pressed=true;
}",0.9798270893371758
157340,"@NonNull private AnyKeyboard createAndLoadKeyboardForMode(@Keyboard.KeyboardRowModeId int mode,int topRowIndex){
  AnyKeyboard keyboard=Preconditions.checkNotNull(mKeyboardBuilder.createKeyboard(RuntimeEnvironment.application,mode));
  KeyboardExtension topRow=KeyboardExtensionFactory.getAllAvailableExtensions(RuntimeEnvironment.application,KeyboardExtension.TYPE_TOP).get(topRowIndex);
  KeyboardExtension bottomRow=KeyboardExtensionFactory.getCurrentKeyboardExtension(RuntimeEnvironment.application,KeyboardExtension.TYPE_BOTTOM);
  keyboard.loadKeyboard(SIMPLE_KeyboardDimens,topRow,bottomRow);
  return keyboard;
}","@NonNull private AnyKeyboard createAndLoadKeyboardForMode(@Keyboard.KeyboardRowModeId int mode,int topRowIndex) throws Exception {
  AnyKeyboard keyboard=Preconditions.checkNotNull(mKeyboardBuilder.createKeyboard(RuntimeEnvironment.application,mode));
  KeyboardExtension topRow=KeyboardExtensionFactory.getAllAvailableExtensions(RuntimeEnvironment.application,KeyboardExtension.TYPE_TOP).get(topRowIndex);
  KeyboardExtension bottomRow=KeyboardExtensionFactory.getCurrentKeyboardExtension(RuntimeEnvironment.application,KeyboardExtension.TYPE_BOTTOM);
  keyboard.loadKeyboard(SIMPLE_KeyboardDimens,topRow,bottomRow);
  verifyKeysLocationByListOrder(keyboard.getKeys());
  verifyAllEdgesOnKeyboardKeys(keyboard.getKeys());
  return keyboard;
}",0.90975788701394
157341,"private void onFunctionKey(final int primaryCode,final Key key,final int multiTapIndex,final int[] nearByKeyCodes,final boolean fromUI){
  if (BuildConfig.DEBUG)   Logger.d(TAG,""String_Node_Str"",primaryCode);
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.DELETE:
    if (ic == null)     break;
  if ((getInputView() != null && getInputView().isShifted() && !getInputView().getKeyboard().isShiftLocked() && mShiftKeyState.isPressed()) || mAskPrefs.useBackword()) {
    handleBackWord(ic);
  }
 else {
    handleDeleteLastCharacter(false);
  }
break;
case KeyCodes.SHIFT:
if (fromUI) {
handleShift();
}
 else {
onPress(primaryCode);
onRelease(primaryCode);
}
break;
case KeyCodes.SHIFT_LOCK:
mShiftKeyState.toggleLocked();
handleShift();
break;
case KeyCodes.DELETE_WORD:
if (ic == null) break;
handleBackWord(ic);
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
commitTyped(ic);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.CTRL:
if (fromUI) {
handleControl();
}
 else {
onPress(primaryCode);
onRelease(primaryCode);
}
break;
case KeyCodes.CTRL_LOCK:
mControlKeyState.toggleLocked();
handleControl();
break;
case KeyCodes.ARROW_LEFT:
case KeyCodes.ARROW_RIGHT:
final int keyEventKeyCode=primaryCode == KeyCodes.ARROW_LEFT ? KeyEvent.KEYCODE_DPAD_LEFT : KeyEvent.KEYCODE_DPAD_RIGHT;
if (!handleSelectionExpending(keyEventKeyCode,ic,mGlobalSelectionStartPosition,mGlobalCursorPosition)) {
sendDownUpKeyEvents(keyEventKeyCode);
}
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) newPosition=0;
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) newPosition=textAfter.length();
try {
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
if (!TextUtils.isEmpty(textBefore)) {
newPosition=newPosition + textBefore.length();
}
ic.setSelection(newPosition,newPosition);
}
 catch (Throwable e) {
Logger.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger.isInstalled()) {
mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentAlphabetKeyboard().getDefaultDictionaryLocale());
}
 else {
Intent voiceInputNotInstalledIntent=new Intent(getApplicationContext(),VoiceInputNotInstalledActivity.class);
voiceInputNotInstalledIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
startActivity(voiceInputNotInstalledIntent);
}
break;
case KeyCodes.CANCEL:
handleClose();
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
case KeyCodes.COMPACT_LAYOUT_TO_RIGHT:
case KeyCodes.COMPACT_LAYOUT_TO_LEFT:
if (getInputView() != null) {
mKeyboardInCondensedMode=CondenseType.fromKeyCode(primaryCode);
setKeyboardForView(getCurrentKeyboard());
}
break;
case KeyCodes.DOMAIN:
onText(key,mAskPrefs.getDomainText());
break;
case KeyCodes.QUICK_TEXT:
if (mDoNotFlipQuickTextKeyAndPopupFunctionality) {
outputCurrentQuickTextKey(key);
}
 else {
openQuickTextPopup(key);
}
break;
case KeyCodes.QUICK_TEXT_POPUP:
if (mDoNotFlipQuickTextKeyAndPopupFunctionality) {
openQuickTextPopup(key);
}
 else {
outputCurrentQuickTextKey(key);
}
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (getKeyboardSwitcher().shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else {
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
}
break;
case KeyCodes.UTILITY_KEYBOARD:
getInputView().openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD_COPY:
case KeyCodes.CLIPBOARD_PASTE:
case KeyCodes.CLIPBOARD_CUT:
case KeyCodes.CLIPBOARD_SELECT_ALL:
case KeyCodes.CLIPBOARD_PASTE_POPUP:
case KeyCodes.CLIPBOARD_SELECT:
handleClipboardOperation(key,primaryCode,ic);
if (primaryCode == KeyCodes.CLIPBOARD_PASTE) mJustAddOnText=null;
break;
default :
if (BuildConfig.DEBUG) {
throw new RuntimeException(""String_Node_Str"" + primaryCode);
}
 else {
Logger.w(TAG,""String_Node_Str"",primaryCode);
}
}
}","private void onFunctionKey(final int primaryCode,final Key key,final int multiTapIndex,final int[] nearByKeyCodes,final boolean fromUI){
  if (BuildConfig.DEBUG)   Logger.d(TAG,""String_Node_Str"",primaryCode);
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.DELETE:
    if (ic == null)     break;
  if (mAskPrefs.useBackword() && mShiftKeyState.isPressed() && !mShiftKeyState.isLocked()) {
    handleBackWord(ic);
  }
 else {
    handleDeleteLastCharacter(false);
  }
break;
case KeyCodes.SHIFT:
if (fromUI) {
handleShift();
}
 else {
onPress(primaryCode);
onRelease(primaryCode);
}
break;
case KeyCodes.SHIFT_LOCK:
mShiftKeyState.toggleLocked();
handleShift();
break;
case KeyCodes.DELETE_WORD:
if (ic == null) break;
handleBackWord(ic);
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
commitTyped(ic);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.CTRL:
if (fromUI) {
handleControl();
}
 else {
onPress(primaryCode);
onRelease(primaryCode);
}
break;
case KeyCodes.CTRL_LOCK:
mControlKeyState.toggleLocked();
handleControl();
break;
case KeyCodes.ARROW_LEFT:
case KeyCodes.ARROW_RIGHT:
final int keyEventKeyCode=primaryCode == KeyCodes.ARROW_LEFT ? KeyEvent.KEYCODE_DPAD_LEFT : KeyEvent.KEYCODE_DPAD_RIGHT;
if (!handleSelectionExpending(keyEventKeyCode,ic,mGlobalSelectionStartPosition,mGlobalCursorPosition)) {
sendDownUpKeyEvents(keyEventKeyCode);
}
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) newPosition=0;
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) newPosition=textAfter.length();
try {
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
if (!TextUtils.isEmpty(textBefore)) {
newPosition=newPosition + textBefore.length();
}
ic.setSelection(newPosition,newPosition);
}
 catch (Throwable e) {
Logger.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger.isInstalled()) {
mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentAlphabetKeyboard().getDefaultDictionaryLocale());
}
 else {
Intent voiceInputNotInstalledIntent=new Intent(getApplicationContext(),VoiceInputNotInstalledActivity.class);
voiceInputNotInstalledIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
startActivity(voiceInputNotInstalledIntent);
}
break;
case KeyCodes.CANCEL:
handleClose();
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
case KeyCodes.COMPACT_LAYOUT_TO_RIGHT:
case KeyCodes.COMPACT_LAYOUT_TO_LEFT:
if (getInputView() != null) {
mKeyboardInCondensedMode=CondenseType.fromKeyCode(primaryCode);
setKeyboardForView(getCurrentKeyboard());
}
break;
case KeyCodes.DOMAIN:
onText(key,mAskPrefs.getDomainText());
break;
case KeyCodes.QUICK_TEXT:
if (mDoNotFlipQuickTextKeyAndPopupFunctionality) {
outputCurrentQuickTextKey(key);
}
 else {
openQuickTextPopup(key);
}
break;
case KeyCodes.QUICK_TEXT_POPUP:
if (mDoNotFlipQuickTextKeyAndPopupFunctionality) {
openQuickTextPopup(key);
}
 else {
outputCurrentQuickTextKey(key);
}
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (getKeyboardSwitcher().shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else {
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
}
break;
case KeyCodes.UTILITY_KEYBOARD:
getInputView().openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD_COPY:
case KeyCodes.CLIPBOARD_PASTE:
case KeyCodes.CLIPBOARD_CUT:
case KeyCodes.CLIPBOARD_SELECT_ALL:
case KeyCodes.CLIPBOARD_PASTE_POPUP:
case KeyCodes.CLIPBOARD_SELECT:
handleClipboardOperation(key,primaryCode,ic);
if (primaryCode == KeyCodes.CLIPBOARD_PASTE) mJustAddOnText=null;
break;
default :
if (BuildConfig.DEBUG) {
throw new RuntimeException(""String_Node_Str"" + primaryCode);
}
 else {
Logger.w(TAG,""String_Node_Str"",primaryCode);
}
}
}",0.985071958523286
157342,"private void handleSeparator(int primaryCode){
  mExpectingSelectionUpdateBy=SystemClock.uptimeMillis() + MAX_TIME_TO_EXPECT_SELECTION_UPDATE;
  boolean isEndOfSentence=(primaryCode == KeyCodes.ENTER || mSentenceSeparators.get(primaryCode));
  if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
    postUpdateSuggestions();
  }
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  final boolean separatorInsideWord=(mWord.cursorPosition() < mWord.length());
  if (mPredicting && !separatorInsideWord) {
    if (primaryCode != '\'') {
      pickDefaultSuggestion(mAutoCorrectOn && primaryCode != KeyCodes.ENTER);
      if (primaryCode == KeyCodes.SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
      if (isEndOfSentence)       abortCorrection(true,false);
    }
  }
 else   if (separatorInsideWord) {
    abortCorrection(true,false);
  }
  if (mJustAddedAutoSpace && primaryCode == KeyCodes.ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  final EditorInfo ei=getCurrentInputEditorInfo();
  if (primaryCode == KeyCodes.ENTER && mShiftKeyState.isActive() && ic != null && ei != null && (ei.imeOptions & EditorInfo.IME_MASK_ACTION) != EditorInfo.IME_ACTION_NONE) {
    ic.commitText(""String_Node_Str"",1);
  }
 else {
    boolean handledOutputToInputConnection=false;
    if (ic != null) {
      if (primaryCode == KeyCodes.SPACE) {
        if (mAskPrefs.isDoubleSpaceChangesToPeriod()) {
          if ((SystemClock.uptimeMillis() - mLastSpaceTimeStamp) < ((long)mAskPrefs.getMultiTapTimeout())) {
            ic.deleteSurroundingText(1,0);
            ic.commitText(""String_Node_Str"",1);
            mJustAddedAutoSpace=true;
            isEndOfSentence=true;
            handledOutputToInputConnection=true;
          }
        }
      }
 else       if (mJustAddedAutoSpace && mLastSpaceTimeStamp != NEVER_TIME_STAMP && mAskPrefs.shouldSwapPunctuationAndSpace() && primaryCode != KeyCodes.ENTER && isSentenceSeparator(primaryCode)) {
        ic.deleteSurroundingText(1,0);
        ic.commitText(((char)primaryCode) + ""String_Node_Str"",1);
        mJustAddedAutoSpace=true;
        handledOutputToInputConnection=true;
      }
    }
    if (!handledOutputToInputConnection)     sendKeyChar((char)primaryCode);
    TextEntryState.typedCharacter((char)primaryCode,true);
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
  if (isEndOfSentence) {
    mSuggest.resetNextWordSentence();
    clearSuggestions();
  }
 else   if (!TextUtils.isEmpty(mCommittedWord)) {
    setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,mWord.isAllUpperCase()),false,false,false);
    mWord.setFirstCharCapitalized(false);
  }
}","private void handleSeparator(int primaryCode){
  if (!getCurrentAlphabetKeyboard().isLeftToRightLanguage()) {
    if (primaryCode == (int)')')     primaryCode=(int)'(';
 else     if (primaryCode == (int)'(')     primaryCode=(int)')';
  }
  mExpectingSelectionUpdateBy=SystemClock.uptimeMillis() + MAX_TIME_TO_EXPECT_SELECTION_UPDATE;
  boolean isEndOfSentence=(primaryCode == KeyCodes.ENTER || mSentenceSeparators.get(primaryCode));
  if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
    postUpdateSuggestions();
  }
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  final boolean separatorInsideWord=(mWord.cursorPosition() < mWord.length());
  if (mPredicting && !separatorInsideWord) {
    if (primaryCode != '\'') {
      pickDefaultSuggestion(mAutoCorrectOn && primaryCode != KeyCodes.ENTER);
      if (primaryCode == KeyCodes.SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
      if (isEndOfSentence)       abortCorrection(true,false);
    }
  }
 else   if (separatorInsideWord) {
    abortCorrection(true,false);
  }
  if (mJustAddedAutoSpace && primaryCode == KeyCodes.ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  final EditorInfo ei=getCurrentInputEditorInfo();
  if (primaryCode == KeyCodes.ENTER && mShiftKeyState.isActive() && ic != null && ei != null && (ei.imeOptions & EditorInfo.IME_MASK_ACTION) != EditorInfo.IME_ACTION_NONE) {
    ic.commitText(""String_Node_Str"",1);
  }
 else {
    boolean handledOutputToInputConnection=false;
    if (ic != null) {
      if (primaryCode == KeyCodes.SPACE) {
        if (mAskPrefs.isDoubleSpaceChangesToPeriod()) {
          if ((SystemClock.uptimeMillis() - mLastSpaceTimeStamp) < ((long)mAskPrefs.getMultiTapTimeout())) {
            ic.deleteSurroundingText(1,0);
            ic.commitText(""String_Node_Str"",1);
            mJustAddedAutoSpace=true;
            isEndOfSentence=true;
            handledOutputToInputConnection=true;
          }
        }
      }
 else       if (mJustAddedAutoSpace && mLastSpaceTimeStamp != NEVER_TIME_STAMP && mAskPrefs.shouldSwapPunctuationAndSpace() && primaryCode != KeyCodes.ENTER && isSentenceSeparator(primaryCode)) {
        ic.deleteSurroundingText(1,0);
        ic.commitText(((char)primaryCode) + ""String_Node_Str"",1);
        mJustAddedAutoSpace=true;
        handledOutputToInputConnection=true;
      }
    }
    if (!handledOutputToInputConnection)     sendKeyChar((char)primaryCode);
    TextEntryState.typedCharacter((char)primaryCode,true);
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
  if (isEndOfSentence) {
    mSuggest.resetNextWordSentence();
    clearSuggestions();
  }
 else   if (!TextUtils.isEmpty(mCommittedWord)) {
    setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,mWord.isAllUpperCase()),false,false,false);
    mWord.setFirstCharCapitalized(false);
  }
}",0.9664382358109296
157343,"private void handleCharacter(final int primaryCode,final Key key,final int multiTapIndex,int[] nearByKeyCodes){
  if (BuildConfig.DEBUG)   Logger.d(TAG,""String_Node_Str"",primaryCode,isPredictionOn(),mPredicting);
  mExpectingSelectionUpdateBy=SystemClock.uptimeMillis() + MAX_TIME_TO_EXPECT_SELECTION_UPDATE;
  if (!mPredicting && isPredictionOn() && isAlphabet(primaryCode)&& !isCursorTouchingWord()) {
    mPredicting=true;
    mUndoCommitCursorPosition=UNDO_COMMIT_NONE;
    mWord.reset();
    mAutoCorrectOn=mAutoComplete;
  }
  mLastCharacterWasShifted=(getInputView() != null) && getInputView().isShifted();
  final int primaryCodeToOutput;
  if (mShiftKeyState.isActive()) {
    if (key != null) {
      primaryCodeToOutput=key.getCodeAtIndex(multiTapIndex,true);
    }
 else {
      primaryCodeToOutput=Character.toUpperCase(primaryCode);
    }
  }
 else {
    if (getKeyboardSwitcher().isRightToLeftMode()) {
      if (primaryCode == (int)')')       primaryCodeToOutput=(int)'(';
 else       if (primaryCode == (int)'(')       primaryCodeToOutput=(int)')';
 else       primaryCodeToOutput=primaryCode;
    }
 else {
      primaryCodeToOutput=primaryCode;
    }
  }
  if (mPredicting) {
    if (mShiftKeyState.isActive() && mWord.cursorPosition() == 0) {
      mWord.setFirstCharCapitalized(true);
    }
    final InputConnection ic=getCurrentInputConnection();
    mWord.add(primaryCodeToOutput,nearByKeyCodes);
    ChewbaccaOnTheDrums.onKeyTyped(mWord,getApplicationContext());
    if (ic != null) {
      final int cursorPosition;
      if (mWord.cursorPosition() != mWord.length()) {
        cursorPosition=mGlobalCursorPosition + 1;
        ic.beginBatchEdit();
      }
 else {
        cursorPosition=-1;
      }
      ic.setComposingText(mWord.getTypedWord(),1);
      if (cursorPosition > 0) {
        ic.setSelection(cursorPosition,cursorPosition);
        ic.endBatchEdit();
      }
    }
    if (Character.isLetter((char)primaryCodeToOutput)) {
      postUpdateSuggestions();
    }
 else {
      if (mCandidateView != null)       mCandidateView.replaceTypedWord(mWord.getTypedWord());
    }
  }
 else {
    sendKeyChar((char)primaryCodeToOutput);
  }
  TextEntryState.typedCharacter((char)primaryCodeToOutput,false);
  mJustAutoAddedWord=false;
}","private void handleCharacter(final int primaryCode,final Key key,final int multiTapIndex,int[] nearByKeyCodes){
  if (BuildConfig.DEBUG)   Logger.d(TAG,""String_Node_Str"",primaryCode,isPredictionOn(),mPredicting);
  mExpectingSelectionUpdateBy=SystemClock.uptimeMillis() + MAX_TIME_TO_EXPECT_SELECTION_UPDATE;
  if (!mPredicting && isPredictionOn() && isAlphabet(primaryCode)&& !isCursorTouchingWord()) {
    mPredicting=true;
    mUndoCommitCursorPosition=UNDO_COMMIT_NONE;
    mWord.reset();
    mAutoCorrectOn=mAutoComplete;
  }
  mLastCharacterWasShifted=(getInputView() != null) && getInputView().isShifted();
  final int primaryCodeToOutput;
  if (mShiftKeyState.isActive()) {
    if (key != null) {
      primaryCodeToOutput=key.getCodeAtIndex(multiTapIndex,true);
    }
 else {
      primaryCodeToOutput=Character.toUpperCase(primaryCode);
    }
  }
 else {
    primaryCodeToOutput=primaryCode;
  }
  if (mPredicting) {
    if (mShiftKeyState.isActive() && mWord.cursorPosition() == 0) {
      mWord.setFirstCharCapitalized(true);
    }
    final InputConnection ic=getCurrentInputConnection();
    mWord.add(primaryCodeToOutput,nearByKeyCodes);
    ChewbaccaOnTheDrums.onKeyTyped(mWord,getApplicationContext());
    if (ic != null) {
      final int cursorPosition;
      if (mWord.cursorPosition() != mWord.length()) {
        cursorPosition=mGlobalCursorPosition + 1;
        ic.beginBatchEdit();
      }
 else {
        cursorPosition=-1;
      }
      ic.setComposingText(mWord.getTypedWord(),1);
      if (cursorPosition > 0) {
        ic.setSelection(cursorPosition,cursorPosition);
        ic.endBatchEdit();
      }
    }
    if (Character.isLetter((char)primaryCodeToOutput)) {
      postUpdateSuggestions();
    }
 else {
      if (mCandidateView != null)       mCandidateView.replaceTypedWord(mWord.getTypedWord());
    }
  }
 else {
    sendKeyChar((char)primaryCodeToOutput);
  }
  TextEntryState.typedCharacter((char)primaryCodeToOutput,false);
  mJustAutoAddedWord=false;
}",0.9225352112676056
157344,"@Nullable private AnyKeyboard getLockedKeyboard(EditorInfo currentEditorInfo){
  if (mKeyboardLocked) {
    AnyKeyboard current=getCurrentKeyboard();
    Logger.i(TAG,""String_Node_Str"" + current.getKeyboardName());
    mRightToLeftMode=!current.isLeftToRightLanguage();
    current.setImeOptions(mContext.getResources(),currentEditorInfo);
    mIME.onSymbolsKeyboardSet(current);
    return current;
  }
 else {
    return null;
  }
}","@Nullable private AnyKeyboard getLockedKeyboard(EditorInfo currentEditorInfo){
  if (mKeyboardLocked) {
    AnyKeyboard current=getCurrentKeyboard();
    Logger.i(TAG,""String_Node_Str"" + current.getKeyboardName());
    current.setImeOptions(mContext.getResources(),currentEditorInfo);
    mIME.onSymbolsKeyboardSet(current);
    return current;
  }
 else {
    return null;
  }
}",0.932349323493235
157345,"private AnyKeyboard nextAlphabetKeyboard(EditorInfo currentEditorInfo,boolean supportsPhysical){
  AnyKeyboard current=getLockedKeyboard(currentEditorInfo);
  if (current == null) {
    final int keyboardsCount=getAlphabetKeyboards().length;
    if (isAlphabetMode())     mLastSelectedKeyboardIndex++;
    mAlphabetMode=true;
    if (mLastSelectedKeyboardIndex >= keyboardsCount)     mLastSelectedKeyboardIndex=0;
    current=getAlphabetKeyboard(mLastSelectedKeyboardIndex,currentEditorInfo);
    mLastSelectedSymbolsKeyboard=0;
    if (supportsPhysical) {
      int testsLeft=keyboardsCount;
      while (!(current instanceof HardKeyboardTranslator) && (testsLeft > 0)) {
        mLastSelectedKeyboardIndex++;
        if (mLastSelectedKeyboardIndex >= keyboardsCount)         mLastSelectedKeyboardIndex=0;
        current=getAlphabetKeyboard(mLastSelectedKeyboardIndex,currentEditorInfo);
        testsLeft--;
      }
      if (testsLeft == 0) {
        Logger.w(TAG,""String_Node_Str"" + current.getKeyboardName());
      }
    }
    mRightToLeftMode=!current.isLeftToRightLanguage();
    current.setImeOptions(mContext.getResources(),currentEditorInfo);
    mIME.onAlphabetKeyboardSet(current);
    return current;
  }
 else {
    return current;
  }
}","private AnyKeyboard nextAlphabetKeyboard(EditorInfo currentEditorInfo,boolean supportsPhysical){
  AnyKeyboard current=getLockedKeyboard(currentEditorInfo);
  if (current == null) {
    final int keyboardsCount=getAlphabetKeyboards().length;
    if (isAlphabetMode())     mLastSelectedKeyboardIndex++;
    mAlphabetMode=true;
    if (mLastSelectedKeyboardIndex >= keyboardsCount)     mLastSelectedKeyboardIndex=0;
    current=getAlphabetKeyboard(mLastSelectedKeyboardIndex,currentEditorInfo);
    mLastSelectedSymbolsKeyboard=0;
    if (supportsPhysical) {
      int testsLeft=keyboardsCount;
      while (!(current instanceof HardKeyboardTranslator) && (testsLeft > 0)) {
        mLastSelectedKeyboardIndex++;
        if (mLastSelectedKeyboardIndex >= keyboardsCount)         mLastSelectedKeyboardIndex=0;
        current=getAlphabetKeyboard(mLastSelectedKeyboardIndex,currentEditorInfo);
        testsLeft--;
      }
      if (testsLeft == 0) {
        Logger.w(TAG,""String_Node_Str"" + current.getKeyboardName());
      }
    }
    current.setImeOptions(mContext.getResources(),currentEditorInfo);
    mIME.onAlphabetKeyboardSet(current);
    return current;
  }
 else {
    return current;
  }
}",0.977560179518564
157346,"public static void d(String TAG,String text,Throwable t){
  if (BuildConfig.TESTING_BUILD) {
    msLogger.d(TAG,text + NEW_LINE + t);
    addLog(LVL_D,TAG,text,t);
  }
}","public synchronized static void d(String TAG,String text,Throwable t){
  if (BuildConfig.TESTING_BUILD) {
    msLogger.d(TAG,text + NEW_LINE + t);
    addLog(LVL_D,TAG,text,t);
  }
}",0.9629629629629628
157347,"public static void e(String TAG,String text,Throwable t){
  msLogger.e(TAG,text + NEW_LINE + t);
  addLog(LVL_E,TAG,text,t);
}","public synchronized static void e(String TAG,String text,Throwable t){
  msLogger.e(TAG,text + NEW_LINE + t);
  addLog(LVL_E,TAG,text,t);
}",0.9509433962264152
157348,"public static void wtf(String TAG,String text,Throwable t){
  addLog(LVL_WTF,TAG,text,t);
  msLogger.wtf(TAG,text + NEW_LINE + t);
}","public synchronized static void wtf(String TAG,String text,Throwable t){
  addLog(LVL_WTF,TAG,text,t);
  msLogger.wtf(TAG,text + NEW_LINE + t);
}",0.9530685920577616
157349,"public static void i(String TAG,String text,Throwable t){
  msLogger.i(TAG,text + NEW_LINE + t);
  addLog(LVL_I,TAG,text,t);
}","public synchronized static void i(String TAG,String text,Throwable t){
  msLogger.i(TAG,text + NEW_LINE + t);
  addLog(LVL_I,TAG,text,t);
}",0.9509433962264152
157350,"public static void yell(String TAG,String text,Object... args){
  if (BuildConfig.TESTING_BUILD) {
    String msg=args == null ? text : msFormatter.format(text,args).toString();
    msFormatBuilder.setLength(0);
    msLogger.yell(TAG,msg);
    addLog(LVL_YELL,TAG,msg);
  }
}","public synchronized static void yell(String TAG,String text,Object... args){
  if (BuildConfig.TESTING_BUILD) {
    String msg=args == null ? text : msFormatter.format(text,args).toString();
    msFormatBuilder.setLength(0);
    msLogger.yell(TAG,msg);
    addLog(LVL_YELL,TAG,msg);
  }
}",0.9769094138543516
157351,"public static void v(String TAG,String text,Throwable t){
  if (BuildConfig.DEBUG) {
    msLogger.v(TAG,text + NEW_LINE + t);
    addLog(LVL_V,TAG,text,t);
  }
}","public synchronized static void v(String TAG,String text,Throwable t){
  if (BuildConfig.DEBUG) {
    msLogger.v(TAG,text + NEW_LINE + t);
    addLog(LVL_V,TAG,text,t);
  }
}",0.9611940298507464
157352,"public static void w(String TAG,Throwable e,String text,Object... args){
  String msg=args == null ? text : msFormatter.format(text,args).toString();
  msFormatBuilder.setLength(0);
  msLogger.e(TAG,msg + NEW_LINE + e);
  addLog(LVL_E,TAG,msg);
}","public synchronized static void w(String TAG,Throwable e,String text,Object... args){
  String msg=args == null ? text : msFormatter.format(text,args).toString();
  msFormatBuilder.setLength(0);
  msLogger.e(TAG,msg + NEW_LINE + e);
  addLog(LVL_E,TAG,msg);
}",0.9742574257425742
157353,"static List<VersionChangeLog> createChangeLog(){
  List<VersionChangeLog> log=new ArrayList<>();
  log.add(new VersionChangeLog(1,8,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str""));
  log.add(new VersionChangeLog(1,8,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,8,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str""));
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str""));
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,4,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,4,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str""));
  log.add(new VersionChangeLog(1,4,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,3,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  return log;
}","static List<VersionChangeLog> createChangeLog(){
  List<VersionChangeLog> log=new ArrayList<>();
  log.add(new VersionChangeLog(1,8,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,8,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,8,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,7,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str""));
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str""));
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,4,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,4,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str""));
  log.add(new VersionChangeLog(1,4,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,3,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  return log;
}",0.9976905311778292
157354,"public TestableKeyboardSwitcher(@NonNull AnySoftKeyboard ime){
  super(ime);
}","public TestableKeyboardSwitcher(@NonNull AnySoftKeyboard ime){
  super(ime,RuntimeEnvironment.application);
}",0.8342245989304813
157355,"@Override public void handleMessage(Message msg){
  SetUpKeyboardWizardFragment fragment=mWeakFragment.get();
  if (fragment == null)   return;
switch (msg.what) {
case KEY_MESSAGE_SCROLL_TO_PAGE:
    int pageToScrollTo=msg.arg1;
  if (fragment.mWizardPager != null) {
    fragment.mWizardPager.setCurrentItem(pageToScrollTo,true);
    fragment.setFullIndicatorTo(pageToScrollTo,0.0f);
  }
break;
case KEY_MESSAGE_UPDATE_INDICATOR:
int position=msg.arg1;
float offset=(Float)msg.obj;
fragment.setFullIndicatorTo(position,offset);
break;
case KEY_MESSAGE_UPDATE_FRAGMENTS:
if (fragment.isResumed() && fragment.getActivity() != null) {
fragment.refreshFragmentsUi();
}
 else {
fragment.mReloadPager=true;
}
break;
}
}","@Override public void handleMessage(Message msg){
  SetUpKeyboardWizardFragment fragment=mWeakFragment.get();
  if (fragment == null)   return;
switch (msg.what) {
case KEY_MESSAGE_SCROLL_TO_PAGE:
    int pageToScrollTo=msg.arg1;
  if (fragment.mWizardPager != null) {
    fragment.mWizardPager.setCurrentItem(pageToScrollTo,true);
    fragment.setFullIndicatorTo(pageToScrollTo,0.0f);
  }
break;
case KEY_MESSAGE_UPDATE_INDICATOR:
int position=msg.arg1;
float offset=(Float)msg.obj;
fragment.setFullIndicatorTo(position,offset);
break;
case KEY_MESSAGE_UPDATE_FRAGMENTS:
if (fragment.isResumed()) {
fragment.refreshFragmentsUi();
}
 else {
fragment.mReloadPager=true;
}
break;
}
}",0.9756446991404012
157356,"private void refreshFragmentUi(FragmentManager fragmentManager,int layoutId){
  Fragment step=fragmentManager.findFragmentById(layoutId);
  if (step instanceof WizardPageBaseFragment) {
    ((WizardPageBaseFragment)step).refreshFragmentUi();
  }
}","private void refreshFragmentUi(@NonNull FragmentManager fragmentManager,@IdRes int layoutId){
  Fragment step=fragmentManager.findFragmentById(layoutId);
  if (step instanceof WizardPageBaseFragment) {
    ((WizardPageBaseFragment)step).refreshFragmentUi();
  }
}",0.9686274509803922
157357,"public WizardHandler(SetUpKeyboardWizardFragment setUpKeyboardWizardFragment){
  mWeakFragment=new WeakReference<>(setUpKeyboardWizardFragment);
}","public WizardHandler(@NonNull SetUpKeyboardWizardFragment setUpKeyboardWizardFragment){
  mWeakFragment=new WeakReference<>(setUpKeyboardWizardFragment);
}",0.9700996677740864
157358,"public void refreshFragmentUi(){
  final View pareStepNotCompleted=getView().findViewById(R.id.previous_step_not_complete);
  final View thisStepCompleted=getView().findViewById(R.id.this_step_complete);
  final View thisStepSetup=getView().findViewById(R.id.this_step_needs_setup);
  pareStepNotCompleted.setVisibility(View.GONE);
  thisStepCompleted.setVisibility(View.GONE);
  thisStepSetup.setVisibility(View.GONE);
  if (!isStepPreConditionDone()) {
    pareStepNotCompleted.setVisibility(View.VISIBLE);
  }
 else   if (isStepCompleted()) {
    thisStepCompleted.setVisibility(View.VISIBLE);
  }
 else {
    thisStepSetup.setVisibility(View.VISIBLE);
  }
}","public void refreshFragmentUi(){
  if ((!isResumed()) || getActivity() == null) {
    return;
  }
  final View pareStepNotCompleted=getView().findViewById(R.id.previous_step_not_complete);
  final View thisStepCompleted=getView().findViewById(R.id.this_step_complete);
  final View thisStepSetup=getView().findViewById(R.id.this_step_needs_setup);
  pareStepNotCompleted.setVisibility(View.GONE);
  thisStepCompleted.setVisibility(View.GONE);
  thisStepSetup.setVisibility(View.GONE);
  if (!isStepPreConditionDone()) {
    pareStepNotCompleted.setVisibility(View.VISIBLE);
  }
 else   if (isStepCompleted()) {
    thisStepCompleted.setVisibility(View.VISIBLE);
  }
 else {
    thisStepSetup.setVisibility(View.VISIBLE);
  }
}",0.9531362653208364
157359,"private void swapPunctuationAndSpace(@NonNull InputConnection ic){
  CharSequence lastTwo=ic.getTextBeforeCursor(2,0);
  if (lastTwo != null && lastTwo.length() == 2 && lastTwo.charAt(0) == KeyCodes.SPACE && isWordSeparator(lastTwo.charAt(1))) {
    ic.beginBatchEdit();
    ic.deleteSurroundingText(2,0);
    ic.commitText(lastTwo.charAt(1) + ""String_Node_Str"",1);
    ic.endBatchEdit();
    mJustAddedAutoSpace=true;
    Log.d(TAG,""String_Node_Str"");
  }
}","private void swapPunctuationAndSpace(@NonNull InputConnection ic,final char punctuationCharacter){
  CharSequence lastTwo=ic.getTextBeforeCursor(2,0);
  if (lastTwo != null && lastTwo.length() == 2 && lastTwo.charAt(0) == KeyCodes.SPACE && lastTwo.charAt(1) == punctuationCharacter) {
    ic.deleteSurroundingText(2,0);
    ic.commitText(punctuationCharacter + ""String_Node_Str"",1);
    mJustAddedAutoSpace=true;
  }
}",0.7808219178082192
157360,"public void onFunctionKey(int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes,boolean fromUI){
  if (BuildConfig.DEBUG)   Log.d(TAG,""String_Node_Str"",primaryCode);
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.DELETE:
    if (ic == null)     break;
  if (mInputView != null && mInputView.isShifted() && !mInputView.getKeyboard().isShiftLocked() && ((mDistinctMultiTouch && mShiftKeyState.isPressed()) || mAskPrefs.useBackword())) {
    handleBackWord(ic);
  }
 else {
    handleDeleteLastCharacter(false);
  }
break;
case KeyCodes.SHIFT:
if (fromUI) {
handleShift();
}
 else {
onPress(primaryCode);
onRelease(primaryCode);
}
break;
case KeyCodes.SHIFT_LOCK:
mShiftKeyState.toggleLocked();
handleShift();
break;
case KeyCodes.DELETE_WORD:
if (ic == null) break;
handleBackWord(ic);
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
commitTyped(ic);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.CTRL:
if (fromUI) {
handleControl();
}
 else {
onPress(primaryCode);
onRelease(primaryCode);
}
break;
case KeyCodes.CTRL_LOCK:
mControlKeyState.toggleLocked();
handleControl();
break;
case KeyCodes.ARROW_LEFT:
case KeyCodes.ARROW_RIGHT:
final int keyEventKeyCode=primaryCode == KeyCodes.ARROW_LEFT ? KeyEvent.KEYCODE_DPAD_LEFT : KeyEvent.KEYCODE_DPAD_RIGHT;
if (!handleSelectionExpending(keyEventKeyCode,ic)) {
sendDownUpKeyEvents(keyEventKeyCode);
}
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) newPosition=0;
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) newPosition=textAfter.length();
try {
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
if (!TextUtils.isEmpty(textBefore)) {
newPosition=newPosition + textBefore.length();
}
ic.setSelection(newPosition,newPosition);
}
 catch (Throwable e) {
Log.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger.isInstalled()) {
mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentKeyboard().getDefaultDictionaryLocale());
}
 else {
Intent voiceInputNotInstalledIntent=new Intent(getApplicationContext(),VoiceInputNotInstalledActivity.class);
voiceInputNotInstalledIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
startActivity(voiceInputNotInstalledIntent);
}
break;
case KeyCodes.CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
case KeyCodes.COMPACT_LAYOUT_TO_RIGHT:
case KeyCodes.COMPACT_LAYOUT_TO_LEFT:
if (getCurrentKeyboard() != null && mInputView != null) {
mKeyboardInCondensedMode=CondenseType.fromKeyCode(primaryCode);
AnyKeyboard currentKeyboard=getCurrentKeyboard();
setKeyboardStuffBeforeSetToView(currentKeyboard);
mInputView.setKeyboard(currentKeyboard);
}
break;
case KeyCodes.DOMAIN:
onText(key,mAskPrefs.getDomainText());
break;
case KeyCodes.QUICK_TEXT:
if (mDoNotFlipQuickTextKeyAndPopupFunctionality) {
outputCurrentQuickTextKey(key);
}
 else {
openQuickTextPopup(key);
}
break;
case KeyCodes.QUICK_TEXT_POPUP:
if (mDoNotFlipQuickTextKeyAndPopupFunctionality) {
openQuickTextPopup(key);
}
 else {
outputCurrentQuickTextKey(key);
}
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (mKeyboardSwitcher.shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
case KeyCodes.UTILITY_KEYBOARD:
mInputView.openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD_COPY:
case KeyCodes.CLIPBOARD_PASTE:
case KeyCodes.CLIPBOARD_CUT:
handleClipboardOperation(key,primaryCode);
break;
case KeyCodes.CLIPBOARD_SELECT_ALL:
final CharSequence toLeft=ic.getTextBeforeCursor(10240,0);
final CharSequence toRight=ic.getTextAfterCursor(10240,0);
final int leftLength=toLeft == null ? 0 : toLeft.length();
final int rightLength=toRight == null ? 0 : toRight.length();
if (leftLength != 0 || rightLength != 0) {
ic.setSelection(0,leftLength + rightLength);
}
break;
case KeyCodes.CLIPBOARD_SELECT:
mArrowSelectionState=!mArrowSelectionState;
break;
case KeyCodes.CLIPBOARD_PASTE_POPUP:
showAllClipboardEntries(key);
break;
default :
if (BuildConfig.DEBUG) {
throw new RuntimeException(""String_Node_Str"" + primaryCode);
}
 else {
Log.w(TAG,""String_Node_Str"",primaryCode);
}
}
}","public void onFunctionKey(int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes,boolean fromUI){
  if (BuildConfig.DEBUG)   Log.d(TAG,""String_Node_Str"",primaryCode);
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.DELETE:
    if (ic == null)     break;
  if (mInputView != null && mInputView.isShifted() && !mInputView.getKeyboard().isShiftLocked() && ((mDistinctMultiTouch && mShiftKeyState.isPressed()) || mAskPrefs.useBackword())) {
    handleBackWord(ic);
  }
 else {
    handleDeleteLastCharacter(false);
  }
break;
case KeyCodes.SHIFT:
if (fromUI) {
handleShift();
}
 else {
onPress(primaryCode);
onRelease(primaryCode);
}
break;
case KeyCodes.SHIFT_LOCK:
mShiftKeyState.toggleLocked();
handleShift();
break;
case KeyCodes.DELETE_WORD:
if (ic == null) break;
handleBackWord(ic);
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
commitTyped(ic);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.CTRL:
if (fromUI) {
handleControl();
}
 else {
onPress(primaryCode);
onRelease(primaryCode);
}
break;
case KeyCodes.CTRL_LOCK:
mControlKeyState.toggleLocked();
handleControl();
break;
case KeyCodes.ARROW_LEFT:
case KeyCodes.ARROW_RIGHT:
final int keyEventKeyCode=primaryCode == KeyCodes.ARROW_LEFT ? KeyEvent.KEYCODE_DPAD_LEFT : KeyEvent.KEYCODE_DPAD_RIGHT;
if (!handleSelectionExpending(keyEventKeyCode,ic)) {
sendDownUpKeyEvents(keyEventKeyCode);
}
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) newPosition=0;
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) newPosition=textAfter.length();
try {
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
if (!TextUtils.isEmpty(textBefore)) {
newPosition=newPosition + textBefore.length();
}
ic.setSelection(newPosition,newPosition);
}
 catch (Throwable e) {
Log.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger.isInstalled()) {
mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentKeyboard().getDefaultDictionaryLocale());
}
 else {
Intent voiceInputNotInstalledIntent=new Intent(getApplicationContext(),VoiceInputNotInstalledActivity.class);
voiceInputNotInstalledIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
startActivity(voiceInputNotInstalledIntent);
}
break;
case KeyCodes.CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
case KeyCodes.COMPACT_LAYOUT_TO_RIGHT:
case KeyCodes.COMPACT_LAYOUT_TO_LEFT:
if (getCurrentKeyboard() != null && mInputView != null) {
mKeyboardInCondensedMode=CondenseType.fromKeyCode(primaryCode);
setKeyboardForView(getCurrentKeyboard());
}
break;
case KeyCodes.DOMAIN:
onText(key,mAskPrefs.getDomainText());
break;
case KeyCodes.QUICK_TEXT:
if (mDoNotFlipQuickTextKeyAndPopupFunctionality) {
outputCurrentQuickTextKey(key);
}
 else {
openQuickTextPopup(key);
}
break;
case KeyCodes.QUICK_TEXT_POPUP:
if (mDoNotFlipQuickTextKeyAndPopupFunctionality) {
openQuickTextPopup(key);
}
 else {
outputCurrentQuickTextKey(key);
}
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (mKeyboardSwitcher.shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
case KeyCodes.UTILITY_KEYBOARD:
mInputView.openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD_COPY:
case KeyCodes.CLIPBOARD_PASTE:
case KeyCodes.CLIPBOARD_CUT:
handleClipboardOperation(key,primaryCode);
break;
case KeyCodes.CLIPBOARD_SELECT_ALL:
final CharSequence toLeft=ic.getTextBeforeCursor(10240,0);
final CharSequence toRight=ic.getTextAfterCursor(10240,0);
final int leftLength=toLeft == null ? 0 : toLeft.length();
final int rightLength=toRight == null ? 0 : toRight.length();
if (leftLength != 0 || rightLength != 0) {
ic.setSelection(0,leftLength + rightLength);
}
break;
case KeyCodes.CLIPBOARD_SELECT:
mArrowSelectionState=!mArrowSelectionState;
break;
case KeyCodes.CLIPBOARD_PASTE_POPUP:
showAllClipboardEntries(key);
break;
default :
if (BuildConfig.DEBUG) {
throw new RuntimeException(""String_Node_Str"" + primaryCode);
}
 else {
Log.w(TAG,""String_Node_Str"",primaryCode);
}
}
}",0.9861491249896326
157361,"public boolean isWordSeparator(int code){
  return (!isAlphabet(code));
}","private boolean isWordSeparator(int code){
  return (!isAlphabet(code));
}",0.9387755102040816
157362,"private void setKeyboardFinalStuff(@NonNull AnyKeyboard keyboard,@Nullable KeyboardSwitcher.NextKeyboardType type){
  mShiftKeyState.reset();
  mControlKeyState.reset();
  mSuggest.resetNextWordSentence();
  if (!(keyboard instanceof GenericKeyboard)) {
    fillSeparatorsSparseArray(mSentenceSeparators,keyboard.getSentenceSeparators());
  }
  setDictionariesForCurrentKeyboard();
  if ((mKeyboardChangeNotificationType.equals(KEYBOARD_NOTIFICATION_ALWAYS)) || (mKeyboardChangeNotificationType.equals(KEYBOARD_NOTIFICATION_ON_PHYSICAL) && (type == NextKeyboardType.AlphabetSupportsPhysical))) {
    notifyKeyboardChangeIfNeeded();
  }
  postUpdateSuggestions();
  updateShiftStateNow();
}","private void setKeyboardFinalStuff(@NonNull AnyKeyboard keyboard,@NonNull KeyboardSwitcher.NextKeyboardType type){
  mShiftKeyState.reset();
  mControlKeyState.reset();
  mSuggest.resetNextWordSentence();
  fillSeparatorsSparseArray(mSentenceSeparators,keyboard.getSentenceSeparators());
  setDictionariesForCurrentKeyboard();
  if ((mKeyboardChangeNotificationType.equals(KEYBOARD_NOTIFICATION_ALWAYS)) || (mKeyboardChangeNotificationType.equals(KEYBOARD_NOTIFICATION_ON_PHYSICAL) && (type == NextKeyboardType.AlphabetSupportsPhysical))) {
    notifyKeyboardChangeIfNeeded();
  }
  postUpdateSuggestions();
  updateShiftStateNow();
}",0.9493575207860924
157363,"private void handleSeparator(int primaryCode){
  mExpectingSelectionUpdateBy=SystemClock.uptimeMillis() + MAX_TIME_TO_EXPECT_SELECTION_UPDATE;
  boolean isEndOfSentence=(primaryCode == KeyCodes.ENTER || mSentenceSeparators.get(primaryCode));
  if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
    postUpdateSuggestions();
  }
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  final boolean separatorInsideWord=(mWord.cursorPosition() < mWord.length());
  if (mPredicting && !separatorInsideWord) {
    if (primaryCode != '\'') {
      pickDefaultSuggestion(mAutoCorrectOn && primaryCode != KeyCodes.ENTER);
      if (primaryCode == KeyCodes.SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
      if (isEndOfSentence)       abortCorrection(true,false);
    }
  }
 else   if (separatorInsideWord) {
    abortCorrection(true,false);
  }
  if (mJustAddedAutoSpace && primaryCode == KeyCodes.ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  final EditorInfo ei=getCurrentInputEditorInfo();
  if (primaryCode == KeyCodes.ENTER && mShiftKeyState.isActive() && ic != null && ei != null && (ei.imeOptions & EditorInfo.IME_MASK_ACTION) != EditorInfo.IME_ACTION_NONE) {
    ic.commitText(""String_Node_Str"",1);
  }
 else {
    sendKeyChar((char)primaryCode);
    TextEntryState.typedCharacter((char)primaryCode,true);
    if (ic != null) {
      if (primaryCode == KeyCodes.SPACE) {
        if (mAskPrefs.isDoubleSpaceChangesToPeriod()) {
          if ((SystemClock.uptimeMillis() - mLastSpaceTimeStamp) < ((long)mAskPrefs.getMultiTapTimeout())) {
            ic.deleteSurroundingText(2,0);
            ic.commitText(""String_Node_Str"",1);
            mJustAddedAutoSpace=true;
            isEndOfSentence=true;
          }
        }
      }
 else       if (mJustAddedAutoSpace && mAskPrefs.shouldSwapPunctuationAndSpace() && primaryCode != KeyCodes.ENTER) {
        swapPunctuationAndSpace(ic);
      }
    }
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
  if (isEndOfSentence) {
    mSuggest.resetNextWordSentence();
    clearSuggestions();
  }
 else   if (!TextUtils.isEmpty(mCommittedWord)) {
    setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,mWord.isAllUpperCase()),false,false,false);
    mWord.setFirstCharCapitalized(false);
  }
}","private void handleSeparator(int primaryCode){
  mExpectingSelectionUpdateBy=SystemClock.uptimeMillis() + MAX_TIME_TO_EXPECT_SELECTION_UPDATE;
  boolean isEndOfSentence=(primaryCode == KeyCodes.ENTER || mSentenceSeparators.get(primaryCode));
  if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
    postUpdateSuggestions();
  }
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  final boolean separatorInsideWord=(mWord.cursorPosition() < mWord.length());
  if (mPredicting && !separatorInsideWord) {
    if (primaryCode != '\'') {
      pickDefaultSuggestion(mAutoCorrectOn && primaryCode != KeyCodes.ENTER);
      if (primaryCode == KeyCodes.SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
      if (isEndOfSentence)       abortCorrection(true,false);
    }
  }
 else   if (separatorInsideWord) {
    abortCorrection(true,false);
  }
  if (mJustAddedAutoSpace && primaryCode == KeyCodes.ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  final EditorInfo ei=getCurrentInputEditorInfo();
  if (primaryCode == KeyCodes.ENTER && mShiftKeyState.isActive() && ic != null && ei != null && (ei.imeOptions & EditorInfo.IME_MASK_ACTION) != EditorInfo.IME_ACTION_NONE) {
    ic.commitText(""String_Node_Str"",1);
  }
 else {
    sendKeyChar((char)primaryCode);
    TextEntryState.typedCharacter((char)primaryCode,true);
    if (ic != null) {
      if (primaryCode == KeyCodes.SPACE) {
        if (mAskPrefs.isDoubleSpaceChangesToPeriod()) {
          if ((SystemClock.uptimeMillis() - mLastSpaceTimeStamp) < ((long)mAskPrefs.getMultiTapTimeout())) {
            ic.deleteSurroundingText(2,0);
            ic.commitText(""String_Node_Str"",1);
            mJustAddedAutoSpace=true;
            isEndOfSentence=true;
          }
        }
      }
 else       if (mJustAddedAutoSpace && mAskPrefs.shouldSwapPunctuationAndSpace() && primaryCode != KeyCodes.ENTER && isSentenceSeparator(primaryCode)) {
        swapPunctuationAndSpace(ic,(char)primaryCode);
      }
    }
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
  if (isEndOfSentence) {
    mSuggest.resetNextWordSentence();
    clearSuggestions();
  }
 else   if (!TextUtils.isEmpty(mCommittedWord)) {
    setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,mWord.isAllUpperCase()),false,false,false);
    mWord.setFirstCharCapitalized(false);
  }
}",0.9888013272501036
157364,"@Override public void setInputView(@NonNull View view){
  super.setInputView(view);
  ViewParent parent=view.getParent();
  if (parent instanceof View) {
    ((View)parent).setBackgroundResource(R.drawable.ask_wallpaper);
  }
 else {
    Log.w(TAG,""String_Node_Str"");
  }
}","@Override public void setInputView(@NonNull View view){
  super.setInputView(view);
  setKeyboardFinalStuff(getCurrentKeyboard(),NextKeyboardType.Alphabet);
  ViewParent parent=view.getParent();
  if (parent instanceof View) {
    ((View)parent).setBackgroundResource(R.drawable.ask_wallpaper);
  }
 else {
    Log.w(TAG,""String_Node_Str"");
  }
}",0.8820678513731826
157365,"@Override protected KeyboardAddOnAndBuilder createConcreteAddOn(Context askContext,Context context,String prefId,int nameId,String description,int sortIndex,AttributeSet attrs){
  final int layoutResId=attrs.getAttributeResourceValue(null,XML_LAYOUT_RES_ID_ATTRIBUTE,AddOn.INVALID_RES_ID);
  final int landscapeLayoutResId=attrs.getAttributeResourceValue(null,XML_LANDSCAPE_LAYOUT_RES_ID_ATTRIBUTE,AddOn.INVALID_RES_ID);
  final int iconResId=attrs.getAttributeResourceValue(null,XML_ICON_RES_ID_ATTRIBUTE,R.drawable.sym_keyboard_notification_icon);
  final String defaultDictionary=attrs.getAttributeValue(null,XML_DICTIONARY_NAME_ATTRIBUTE);
  final String additionalIsLetterExceptions=attrs.getAttributeValue(null,XML_ADDITIONAL_IS_LETTER_EXCEPTIONS_ATTRIBUTE);
  String sentenceSeparators=attrs.getAttributeValue(null,XML_SENTENCE_SEPARATOR_CHARACTERS_ATTRIBUTE);
  if (sentenceSeparators == null)   sentenceSeparators=DEFAULT_SENTENCE_SEPARATORS;
  final int physicalTranslationResId=attrs.getAttributeResourceValue(null,XML_PHYSICAL_TRANSLATION_RES_ID_ATTRIBUTE,AddOn.INVALID_RES_ID);
  final boolean keyboardDefault=attrs.getAttributeBooleanValue(null,XML_DEFAULT_ATTRIBUTE,sortIndex == 1);
  final int screenshotResId=attrs.getAttributeResourceValue(null,XML_SCREENSHOT_RES_ID_ATTRIBUTE,AddOn.INVALID_RES_ID);
  if ((prefId == null) || (nameId == AddOn.INVALID_RES_ID) || (layoutResId == AddOn.INVALID_RES_ID)) {
    Log.e(TAG,""String_Node_Str"");
    return null;
  }
 else {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + prefId + ""String_Node_Str""+ nameId+ ""String_Node_Str""+ layoutResId+ ""String_Node_Str""+ landscapeLayoutResId+ ""String_Node_Str""+ iconResId+ ""String_Node_Str""+ defaultDictionary);
    }
    return new KeyboardAddOnAndBuilder(askContext,context,prefId,nameId,layoutResId,landscapeLayoutResId,defaultDictionary,iconResId,physicalTranslationResId,additionalIsLetterExceptions,sentenceSeparators,description,sortIndex,keyboardDefault,screenshotResId);
  }
}","@Override protected KeyboardAddOnAndBuilder createConcreteAddOn(Context askContext,Context context,String prefId,int nameId,String description,int sortIndex,AttributeSet attrs){
  final int layoutResId=attrs.getAttributeResourceValue(null,XML_LAYOUT_RES_ID_ATTRIBUTE,AddOn.INVALID_RES_ID);
  final int landscapeLayoutResId=attrs.getAttributeResourceValue(null,XML_LANDSCAPE_LAYOUT_RES_ID_ATTRIBUTE,AddOn.INVALID_RES_ID);
  final int iconResId=attrs.getAttributeResourceValue(null,XML_ICON_RES_ID_ATTRIBUTE,R.drawable.sym_keyboard_notification_icon);
  final String defaultDictionary=attrs.getAttributeValue(null,XML_DICTIONARY_NAME_ATTRIBUTE);
  final String additionalIsLetterExceptions=attrs.getAttributeValue(null,XML_ADDITIONAL_IS_LETTER_EXCEPTIONS_ATTRIBUTE);
  String sentenceSeparators=attrs.getAttributeValue(null,XML_SENTENCE_SEPARATOR_CHARACTERS_ATTRIBUTE);
  if (TextUtils.isEmpty(sentenceSeparators))   sentenceSeparators=DEFAULT_SENTENCE_SEPARATORS;
  final int physicalTranslationResId=attrs.getAttributeResourceValue(null,XML_PHYSICAL_TRANSLATION_RES_ID_ATTRIBUTE,AddOn.INVALID_RES_ID);
  final boolean keyboardDefault=attrs.getAttributeBooleanValue(null,XML_DEFAULT_ATTRIBUTE,sortIndex == 1);
  final int screenshotResId=attrs.getAttributeResourceValue(null,XML_SCREENSHOT_RES_ID_ATTRIBUTE,AddOn.INVALID_RES_ID);
  if ((prefId == null) || (nameId == AddOn.INVALID_RES_ID) || (layoutResId == AddOn.INVALID_RES_ID)) {
    Log.e(TAG,""String_Node_Str"");
    return null;
  }
 else {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + prefId + ""String_Node_Str""+ nameId+ ""String_Node_Str""+ layoutResId+ ""String_Node_Str""+ landscapeLayoutResId+ ""String_Node_Str""+ iconResId+ ""String_Node_Str""+ defaultDictionary);
    }
    return new KeyboardAddOnAndBuilder(askContext,context,prefId,nameId,layoutResId,landscapeLayoutResId,defaultDictionary,iconResId,physicalTranslationResId,additionalIsLetterExceptions,sentenceSeparators,description,sortIndex,keyboardDefault,screenshotResId);
  }
}",0.9847918224881576
157366,"public void setKeyboardMode(final int mode,final EditorInfo attr,final boolean restarting){
  ensureKeyboardsAreBuilt();
  final int previousMode=mMode;
  mMode=mode;
  boolean resubmitToView=true;
  AnyKeyboard keyboard;
switch (mode) {
case MODE_DATETIME:
    mAlphabetMode=false;
  mKeyboardLocked=true;
keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_DATETIME_INDEX,getKeyboardMode(attr));
break;
case MODE_NUMBERS:
mAlphabetMode=false;
mKeyboardLocked=true;
keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_NUMBERS_INDEX,getKeyboardMode(attr));
break;
case MODE_SYMBOLS:
mAlphabetMode=false;
mKeyboardLocked=true;
keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_REGULAR_INDEX,getKeyboardMode(attr));
break;
case MODE_PHONE:
mAlphabetMode=false;
mKeyboardLocked=true;
keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_PHONE_INDEX,getKeyboardMode(attr));
break;
default :
mKeyboardLocked=false;
if ((!restarting && mLatinKeyboardIndex >= 0) && (mode == MODE_URL || mode == MODE_EMAIL)) {
mLastSelectedKeyboardIndex=mLatinKeyboardIndex;
}
 else {
if (AnyApplication.getConfig().getPersistLayoutForPackageId() && (!TextUtils.isEmpty(attr.packageName)) && mAlphabetKeyboardIndexByPackageId.containsKey(attr.packageName)) {
final String reusedKeyboardAddOnId=mAlphabetKeyboardIndexByPackageId.get(attr.packageName);
for (int builderIndex=0; builderIndex < mAlphabetKeyboardsCreators.length; builderIndex++) {
KeyboardAddOnAndBuilder builder=mAlphabetKeyboardsCreators[builderIndex];
if (builder.getId().equals(reusedKeyboardAddOnId)) {
Log.d(TAG,""String_Node_Str"",builderIndex,attr.packageName);
mLastSelectedKeyboardIndex=builderIndex;
}
}
}
}
if (!restarting || mMode != previousMode) {
mAlphabetMode=true;
keyboard=getAlphabetKeyboard(mLastSelectedKeyboardIndex,attr);
}
 else {
keyboard=getCurrentKeyboard();
resubmitToView=false;
}
break;
}
keyboard.setImeOptions(mContext.getResources(),attr);
if (resubmitToView) {
mIME.setKeyboardStuffBeforeSetToView(keyboard);
if (mInputView != null) {
mInputView.setKeyboard(keyboard);
}
}
}","public void setKeyboardMode(final int mode,final EditorInfo attr,final boolean restarting){
  ensureKeyboardsAreBuilt();
  final int previousMode=mMode;
  mMode=mode;
  boolean resubmitToView=true;
  AnyKeyboard keyboard;
switch (mode) {
case MODE_DATETIME:
    mAlphabetMode=false;
  mKeyboardLocked=true;
keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_DATETIME_INDEX,getKeyboardMode(attr));
break;
case MODE_NUMBERS:
mAlphabetMode=false;
mKeyboardLocked=true;
keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_NUMBERS_INDEX,getKeyboardMode(attr));
break;
case MODE_SYMBOLS:
mAlphabetMode=false;
mKeyboardLocked=true;
keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_REGULAR_INDEX,getKeyboardMode(attr));
break;
case MODE_PHONE:
mAlphabetMode=false;
mKeyboardLocked=true;
keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_PHONE_INDEX,getKeyboardMode(attr));
break;
default :
mKeyboardLocked=false;
if ((!restarting && mLatinKeyboardIndex >= 0) && (mode == MODE_URL || mode == MODE_EMAIL)) {
mLastSelectedKeyboardIndex=mLatinKeyboardIndex;
}
 else {
if (AnyApplication.getConfig().getPersistLayoutForPackageId() && (!TextUtils.isEmpty(attr.packageName)) && mAlphabetKeyboardIndexByPackageId.containsKey(attr.packageName)) {
final String reusedKeyboardAddOnId=mAlphabetKeyboardIndexByPackageId.get(attr.packageName);
for (int builderIndex=0; builderIndex < mAlphabetKeyboardsCreators.length; builderIndex++) {
KeyboardAddOnAndBuilder builder=mAlphabetKeyboardsCreators[builderIndex];
if (builder.getId().equals(reusedKeyboardAddOnId)) {
Log.d(TAG,""String_Node_Str"",builderIndex,attr.packageName);
mLastSelectedKeyboardIndex=builderIndex;
}
}
}
}
if (!restarting || mMode != previousMode) {
mAlphabetMode=true;
keyboard=getAlphabetKeyboard(mLastSelectedKeyboardIndex,attr);
}
 else {
keyboard=getCurrentKeyboard();
resubmitToView=false;
}
break;
}
keyboard.setImeOptions(mContext.getResources(),attr);
if (resubmitToView) {
mIME.setKeyboardForView(keyboard);
}
}",0.979560938682816
157367,"@NonNull private synchronized AnyKeyboard getAlphabetKeyboard(int index,@Nullable EditorInfo editorInfo){
  AnyKeyboard[] keyboards=getAlphabetKeyboards();
  if (index >= keyboards.length)   index=0;
  AnyKeyboard keyboard=keyboards[index];
  final int mode=getKeyboardMode(editorInfo);
  if (keyboard == null || keyboard.getKeyboardMode() != mode) {
    KeyboardAddOnAndBuilder creator=mAlphabetKeyboardsCreators[index];
    if ((keyboard=keyboards[index]=createKeyboardFromCreator(mode,creator)) == null) {
      flushKeyboardsCache();
      index=0;
      return getAlphabetKeyboard(index,editorInfo);
    }
 else {
      if (mInputView != null) {
        keyboard.loadKeyboard(mInputView.getThemedKeyboardDimens());
        mIME.setKeyboardStuffBeforeSetToView(keyboard);
        mInputView.setKeyboard(keyboard);
      }
 else {
        keyboard.loadKeyboard(mKeyboardDimens);
      }
    }
  }
  if (editorInfo != null && !TextUtils.isEmpty(editorInfo.packageName)) {
    mAlphabetKeyboardIndexByPackageId.put(editorInfo.packageName,keyboard.getKeyboardAddOn().getId());
  }
  return keyboard;
}","@NonNull private synchronized AnyKeyboard getAlphabetKeyboard(int index,@Nullable EditorInfo editorInfo){
  AnyKeyboard[] keyboards=getAlphabetKeyboards();
  if (index >= keyboards.length)   index=0;
  AnyKeyboard keyboard=keyboards[index];
  final int mode=getKeyboardMode(editorInfo);
  if (keyboard == null || keyboard.getKeyboardMode() != mode) {
    KeyboardAddOnAndBuilder creator=mAlphabetKeyboardsCreators[index];
    if ((keyboard=keyboards[index]=createKeyboardFromCreator(mode,creator)) == null) {
      flushKeyboardsCache();
      index=0;
      return getAlphabetKeyboard(index,editorInfo);
    }
 else {
      if (mInputView != null) {
        keyboard.loadKeyboard(mInputView.getThemedKeyboardDimens());
        mIME.setKeyboardForView(keyboard);
      }
 else {
        keyboard.loadKeyboard(mKeyboardDimens);
      }
    }
  }
  if (editorInfo != null && !TextUtils.isEmpty(editorInfo.packageName)) {
    mAlphabetKeyboardIndexByPackageId.put(editorInfo.packageName,keyboard.getKeyboardAddOn().getId());
  }
  return keyboard;
}",0.9715882626921284
157368,"private AnyKeyboard setKeyboard(EditorInfo currentEditorInfo,AnyKeyboard current){
  current.setImeOptions(mContext.getResources(),currentEditorInfo);
  mIME.setKeyboardStuffBeforeSetToView(current);
  if (mInputView != null)   mInputView.setKeyboard(current);
  return current;
}","private AnyKeyboard setKeyboard(EditorInfo currentEditorInfo,AnyKeyboard current){
  current.setImeOptions(mContext.getResources(),currentEditorInfo);
  mIME.setKeyboardForView(current);
  return current;
}",0.7777777777777778
157369,"@NonNull private synchronized AnyKeyboard getSymbolsKeyboard(int keyboardIndex,int mode){
  ensureKeyboardsAreBuilt();
  AnyKeyboard keyboard=mSymbolsKeyboardsArray[keyboardIndex];
  if (keyboard == null) {
switch (keyboardIndex) {
case SYMBOLS_KEYBOARD_REGULAR_INDEX:
      if (AnyApplication.getConfig().use16KeysSymbolsKeyboards())       keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols_16keys,R.xml.symbols,mContext.getString(R.string.symbols_keyboard),""String_Node_Str"",mode,false);
 else       keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols,R.xml.symbols,mContext.getString(R.string.symbols_keyboard),""String_Node_Str"",mode,false);
    break;
case SYMBOLS_KEYBOARD_ALT_INDEX:
  if (AnyApplication.getConfig().use16KeysSymbolsKeyboards())   keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols_alt_16keys,R.xml.symbols_alt,mContext.getString(R.string.symbols_alt_keyboard),""String_Node_Str"",mode,false);
 else   keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols_alt,R.xml.symbols_alt,mContext.getString(R.string.symbols_alt_keyboard),""String_Node_Str"",mode,false);
break;
case SYMBOLS_KEYBOARD_ALT_NUMBERS_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_alt_numbers,R.xml.simple_alt_numbers,mContext.getString(R.string.symbols_alt_num_keyboard),""String_Node_Str"",mode,false);
break;
case SYMBOLS_KEYBOARD_PHONE_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_phone,R.xml.simple_phone,mContext.getString(R.string.symbols_phone_keyboard),""String_Node_Str"",mode,true);
break;
case SYMBOLS_KEYBOARD_NUMBERS_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_numbers,R.xml.simple_numbers,mContext.getString(R.string.symbols_numbers_keyboard),""String_Node_Str"",mode,false);
break;
case SYMBOLS_KEYBOARD_DATETIME_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_datetime,R.xml.simple_datetime,mContext.getString(R.string.symbols_time_keyboard),""String_Node_Str"",mode,false);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + keyboardIndex);
}
mSymbolsKeyboardsArray[keyboardIndex]=keyboard;
mLastSelectedSymbolsKeyboard=keyboardIndex;
if (mInputView != null) {
keyboard.loadKeyboard(mInputView.getThemedKeyboardDimens());
mIME.setKeyboardStuffBeforeSetToView(keyboard);
mInputView.setKeyboard(keyboard);
}
 else {
keyboard.loadKeyboard(mKeyboardDimens);
}
}
return keyboard;
}","@NonNull private synchronized AnyKeyboard getSymbolsKeyboard(int keyboardIndex,int mode){
  ensureKeyboardsAreBuilt();
  AnyKeyboard keyboard=mSymbolsKeyboardsArray[keyboardIndex];
  if (keyboard == null) {
switch (keyboardIndex) {
case SYMBOLS_KEYBOARD_REGULAR_INDEX:
      if (AnyApplication.getConfig().use16KeysSymbolsKeyboards())       keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols_16keys,R.xml.symbols,mContext.getString(R.string.symbols_keyboard),""String_Node_Str"",mode,false);
 else       keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols,R.xml.symbols,mContext.getString(R.string.symbols_keyboard),""String_Node_Str"",mode,false);
    break;
case SYMBOLS_KEYBOARD_ALT_INDEX:
  if (AnyApplication.getConfig().use16KeysSymbolsKeyboards())   keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols_alt_16keys,R.xml.symbols_alt,mContext.getString(R.string.symbols_alt_keyboard),""String_Node_Str"",mode,false);
 else   keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.symbols_alt,R.xml.symbols_alt,mContext.getString(R.string.symbols_alt_keyboard),""String_Node_Str"",mode,false);
break;
case SYMBOLS_KEYBOARD_ALT_NUMBERS_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_alt_numbers,R.xml.simple_alt_numbers,mContext.getString(R.string.symbols_alt_num_keyboard),""String_Node_Str"",mode,false);
break;
case SYMBOLS_KEYBOARD_PHONE_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_phone,R.xml.simple_phone,mContext.getString(R.string.symbols_phone_keyboard),""String_Node_Str"",mode,true);
break;
case SYMBOLS_KEYBOARD_NUMBERS_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_numbers,R.xml.simple_numbers,mContext.getString(R.string.symbols_numbers_keyboard),""String_Node_Str"",mode,false);
break;
case SYMBOLS_KEYBOARD_DATETIME_INDEX:
keyboard=createGenericKeyboard(mDefaultAddOn,mContext,R.xml.simple_datetime,R.xml.simple_datetime,mContext.getString(R.string.symbols_time_keyboard),""String_Node_Str"",mode,false);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + keyboardIndex);
}
mSymbolsKeyboardsArray[keyboardIndex]=keyboard;
mLastSelectedSymbolsKeyboard=keyboardIndex;
if (mInputView != null) {
keyboard.loadKeyboard(mInputView.getThemedKeyboardDimens());
mIME.setKeyboardForView(keyboard);
}
 else {
keyboard.loadKeyboard(mKeyboardDimens);
}
}
return keyboard;
}",0.9629932529135146
157370,"@Test public void testForceMakeKeyboardsOnAddOnsPrefChange(){
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher());
  SharedPrefsHelper.setPrefsValue(KeyboardAddOnAndBuilder.KEYBOARD_PREF_PREFIX + ""String_Node_Str"",false);
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).flushKeyboardsCache();
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).setInputView(Mockito.isNotNull(AnyKeyboardView.class));
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher());
  SharedPrefsHelper.setPrefsValue(""String_Node_Str"",false);
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).flushKeyboardsCache();
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).setInputView(Mockito.isNotNull(AnyKeyboardView.class));
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher());
  SharedPrefsHelper.setPrefsValue(RuntimeEnvironment.application.getString(R.string.settings_key_active_quick_text_key),""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).flushKeyboardsCache();
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).setInputView(Mockito.isNotNull(AnyKeyboardView.class));
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher());
  SharedPrefsHelper.setPrefsValue(RuntimeEnvironment.application.getString(R.string.settings_key_ext_kbd_top_row_key),""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).flushKeyboardsCache();
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).setInputView(Mockito.isNotNull(AnyKeyboardView.class));
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher());
  SharedPrefsHelper.setPrefsValue(RuntimeEnvironment.application.getString(R.string.settings_key_ext_kbd_bottom_row_key),""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).flushKeyboardsCache();
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).setInputView(Mockito.isNotNull(AnyKeyboardView.class));
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher());
  SharedPrefsHelper.setPrefsValue(""String_Node_Str"",""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher(),Mockito.never()).flushKeyboardsCache();
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher(),Mockito.never()).setInputView(Mockito.isNotNull(AnyKeyboardView.class));
}","@Test public void testForceMakeKeyboardsOnAddOnsPrefChange(){
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher());
  SharedPrefsHelper.setPrefsValue(KeyboardAddOnAndBuilder.KEYBOARD_PREF_PREFIX + ""String_Node_Str"",false);
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).flushKeyboardsCache();
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).setInputView(Mockito.isNotNull(AnyKeyboardView.class));
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher());
  SharedPrefsHelper.setPrefsValue(""String_Node_Str"",false);
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).flushKeyboardsCache();
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).setInputView(Mockito.isNotNull(AnyKeyboardView.class));
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher());
  SharedPrefsHelper.setPrefsValue(RuntimeEnvironment.application.getString(R.string.settings_key_active_quick_text_key),""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).flushKeyboardsCache();
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher()).setInputView(Mockito.isNotNull(AnyKeyboardView.class));
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher());
  SharedPrefsHelper.setPrefsValue(RuntimeEnvironment.application.getString(R.string.settings_key_ext_kbd_top_row_key),""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher(),Mockito.times(2)).flushKeyboardsCache();
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher(),Mockito.times(2)).setInputView(Mockito.isNotNull(AnyKeyboardView.class));
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher());
  SharedPrefsHelper.setPrefsValue(RuntimeEnvironment.application.getString(R.string.settings_key_ext_kbd_bottom_row_key),""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher(),Mockito.times(2)).flushKeyboardsCache();
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher(),Mockito.times(2)).setInputView(Mockito.isNotNull(AnyKeyboardView.class));
  Mockito.reset(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher());
  SharedPrefsHelper.setPrefsValue(""String_Node_Str"",""String_Node_Str"");
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher(),Mockito.never()).flushKeyboardsCache();
  Mockito.verify(mAnySoftKeyboardUnderTest.getSpiedKeyboardSwitcher(),Mockito.never()).setInputView(Mockito.isNotNull(AnyKeyboardView.class));
}",0.986608901142182
157371,"@Override public boolean sendKeyEvent(KeyEvent event){
  boolean handled=false;
  if (event.getAction() == KeyEvent.ACTION_UP) {
    if (event.getKeyCode() == KeyEvent.KEYCODE_DEL) {
      if (mSelectionEndPosition == mCursorPosition) {
        handled=true;
        deleteSurroundingText(1,0);
      }
 else {
        handled=true;
        mInputText.delete(mCursorPosition,mSelectionEndPosition);
        notifyTextChange(0);
      }
    }
 else     if (event.getKeyCode() == KeyEvent.KEYCODE_SPACE) {
      handled=true;
      commitText(""String_Node_Str"",1);
    }
  }
  if (!handled) {
    if (event.getAction() == KeyEvent.ACTION_DOWN) {
      mIme.onKeyDown(event.getKeyCode(),event);
    }
 else {
      mIme.onKeyUp(event.getKeyCode(),event);
    }
  }
  return true;
}","@Override public boolean sendKeyEvent(KeyEvent event){
  boolean handled=false;
  if (event.getAction() == KeyEvent.ACTION_UP) {
    if (event.getKeyCode() == KeyEvent.KEYCODE_DEL) {
      if (mSelectionEndPosition == mCursorPosition) {
        handled=true;
        deleteSurroundingText(1,0);
      }
 else {
        handled=true;
        mInputText.delete(mCursorPosition,mSelectionEndPosition);
        notifyTextChange(0);
      }
    }
 else     if (event.getKeyCode() == KeyEvent.KEYCODE_SPACE) {
      handled=true;
      commitText(""String_Node_Str"",1);
    }
 else     if (event.getKeyCode() >= KeyEvent.KEYCODE_0 || event.getKeyCode() <= KeyEvent.KEYCODE_9) {
      handled=true;
      commitText(Integer.toString(event.getKeyCode() - KeyEvent.KEYCODE_0),1);
    }
 else     if (event.getKeyCode() >= KeyEvent.KEYCODE_A || event.getKeyCode() <= KeyEvent.KEYCODE_Z) {
      handled=true;
      commitText(""String_Node_Str"" + (char)(event.getKeyCode() - KeyEvent.KEYCODE_A + 'a'),1);
    }
  }
  if (!handled) {
    if (event.getAction() == KeyEvent.ACTION_DOWN) {
      mIme.onKeyDown(event.getKeyCode(),event);
    }
 else {
      mIme.onKeyUp(event.getKeyCode(),event);
    }
  }
  return true;
}",0.783484390735146
157372,"@Override protected Void doAsyncTask(Void[] params) throws Exception {
  final File externalFolder=Environment.getExternalStorageDirectory();
  final File targetFolder=new File(externalFolder,""String_Node_Str"" + mAppContext.getPackageName() + ""String_Node_Str"");
  targetFolder.mkdirs();
  XmlWriter output=new XmlWriter(new File(targetFolder,mFilename));
  output.writeEntity(""String_Node_Str"");
  for (  String locale : mLocalesToSave) {
    mLocale=locale;
synchronized (mLocale) {
      Log.d(TAG,""String_Node_Str"" + mLocale);
      publishProgress();
      try {
        mLocale.wait();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    Log.d(TAG,""String_Node_Str"" + locale);
    WordsCursor wordsCursor=mDictionary.getWordsCursor();
    output.writeEntity(""String_Node_Str"").writeAttribute(""String_Node_Str"",locale);
    Cursor cursor=wordsCursor.getCursor();
    cursor.moveToFirst();
    final int wordIndex=cursor.getColumnIndex(Words.WORD);
    final int freqIndex=cursor.getColumnIndex(Words.FREQUENCY);
    while (!cursor.isAfterLast()) {
      String word=cursor.getString(wordIndex).trim();
      int freq=cursor.getInt(freqIndex);
      output.writeEntity(""String_Node_Str"").writeAttribute(""String_Node_Str"",Integer.toString(freq)).writeText(word).endEntity();
      Log.d(TAG,""String_Node_Str"" + word + ""String_Node_Str""+ freq);
      cursor.moveToNext();
    }
    wordsCursor.close();
    mDictionary.close();
    output.endEntity();
  }
  output.endEntity();
  output.close();
  return null;
}","@Override protected Void doAsyncTask(Void[] params) throws Exception {
  final File externalFolder=Environment.getExternalStorageDirectory();
  final File targetFolder=new File(externalFolder,""String_Node_Str"" + mAppContext.getPackageName() + ""String_Node_Str"");
  targetFolder.mkdirs();
  XmlWriter output=new XmlWriter(new File(targetFolder,mFilename));
  output.writeEntity(""String_Node_Str"");
  for (  String locale : mLocalesToSave) {
    Log.d(TAG,""String_Node_Str"" + locale);
    UserDictionary dictionary=new UserDictionary(mAppContext,locale);
    dictionary.loadDictionary();
    Log.d(TAG,""String_Node_Str"" + locale);
    WordsCursor wordsCursor=dictionary.getWordsCursor();
    output.writeEntity(""String_Node_Str"").writeAttribute(""String_Node_Str"",locale);
    Cursor cursor=wordsCursor.getCursor();
    cursor.moveToFirst();
    final int wordIndex=cursor.getColumnIndex(Words.WORD);
    final int freqIndex=cursor.getColumnIndex(Words.FREQUENCY);
    while (!cursor.isAfterLast()) {
      String word=cursor.getString(wordIndex).trim();
      int freq=cursor.getInt(freqIndex);
      output.writeEntity(""String_Node_Str"").writeAttribute(""String_Node_Str"",Integer.toString(freq)).writeText(word).endEntity();
      Log.d(TAG,""String_Node_Str"" + word + ""String_Node_Str""+ freq);
      cursor.moveToNext();
    }
    wordsCursor.close();
    dictionary.close();
    output.endEntity();
  }
  output.endEntity();
  output.close();
  return null;
}",0.894195688225539
157373,"@Override protected Void doAsyncTask(Void[] params) throws Exception {
  final File externalFolder=Environment.getExternalStorageDirectory();
  final File targetFolder=new File(externalFolder,""String_Node_Str"" + mAppContext.getPackageName() + ""String_Node_Str"");
  SAXParserFactory factory=SAXParserFactory.newInstance();
  SAXParser parser=factory.newSAXParser();
  parser.parse(new FileInputStream(new File(targetFolder,mFilename)),new DefaultHandler(){
    private boolean inWord=false;
    private int freq=1;
    private String word=""String_Node_Str"";
    @Override public void characters(    char[] ch,    int start,    int length) throws SAXException {
      super.characters(ch,start,length);
      if (inWord) {
        word+=new String(ch,start,length);
      }
    }
    @Override public void startElement(    String uri,    String localName,    String qName,    Attributes attributes) throws SAXException {
      super.startElement(uri,localName,qName,attributes);
      if (localName.equals(""String_Node_Str"")) {
        inWord=true;
        word=""String_Node_Str"";
        freq=Integer.parseInt(attributes.getValue(""String_Node_Str""));
      }
      if (localName.equals(""String_Node_Str"")) {
        mLocale=attributes.getValue(""String_Node_Str"");
synchronized (mLoadMonitor) {
          Log.d(TAG,""String_Node_Str"" + mLocale);
          publishProgress();
          try {
            mLoadMonitor.wait();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
        Log.d(TAG,""String_Node_Str"" + mLocale);
      }
    }
    @Override public void endElement(    String uri,    String localName,    String qName) throws SAXException {
      if (inWord && localName.equals(""String_Node_Str"")) {
        if (!TextUtils.isEmpty(word)) {
          Log.d(TAG,""String_Node_Str"" + word + ""String_Node_Str""+ freq);
          mDictionary.deleteWord(word);
          mDictionary.addWord(word,freq);
        }
        inWord=false;
      }
      super.endElement(uri,localName,qName);
    }
  }
);
  return null;
}","@Override protected Void doAsyncTask(Void[] params) throws Exception {
  final File externalFolder=Environment.getExternalStorageDirectory();
  final File targetFolder=new File(externalFolder,""String_Node_Str"" + mAppContext.getPackageName() + ""String_Node_Str"");
  SAXParserFactory factory=SAXParserFactory.newInstance();
  SAXParser parser=factory.newSAXParser();
  parser.parse(new FileInputStream(new File(targetFolder,mFilename)),new DefaultHandler(){
    private boolean inWord=false;
    private int freq=1;
    private String word=""String_Node_Str"";
    @Override public void characters(    char[] ch,    int start,    int length) throws SAXException {
      super.characters(ch,start,length);
      if (inWord) {
        word+=new String(ch,start,length);
      }
    }
    @Override public void startElement(    String uri,    String localName,    String qName,    Attributes attributes) throws SAXException {
      super.startElement(uri,localName,qName,attributes);
      if (localName.equals(""String_Node_Str"")) {
        inWord=true;
        word=""String_Node_Str"";
        freq=Integer.parseInt(attributes.getValue(""String_Node_Str""));
      }
      if (localName.equals(""String_Node_Str"")) {
        mLocale=attributes.getValue(""String_Node_Str"");
        Log.d(TAG,""String_Node_Str"" + mLocale);
        if (mDictionary != null) {
          mDictionary.close();
        }
        mDictionary=new UserDictionary(mAppContext,mLocale);
        mDictionary.loadDictionary();
        Log.d(TAG,""String_Node_Str"" + mLocale);
      }
    }
    @Override public void endElement(    String uri,    String localName,    String qName) throws SAXException {
      if (inWord && localName.equals(""String_Node_Str"")) {
        if (!TextUtils.isEmpty(word)) {
          Log.d(TAG,""String_Node_Str"" + word + ""String_Node_Str""+ freq);
          mDictionary.deleteWord(word);
          mDictionary.addWord(word,freq);
        }
        inWord=false;
      }
      super.endElement(uri,localName,qName);
    }
  }
);
  return null;
}",0.9166666666666666
157374,"@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  super.startElement(uri,localName,qName,attributes);
  if (localName.equals(""String_Node_Str"")) {
    inWord=true;
    word=""String_Node_Str"";
    freq=Integer.parseInt(attributes.getValue(""String_Node_Str""));
  }
  if (localName.equals(""String_Node_Str"")) {
    mLocale=attributes.getValue(""String_Node_Str"");
synchronized (mLoadMonitor) {
      Log.d(TAG,""String_Node_Str"" + mLocale);
      publishProgress();
      try {
        mLoadMonitor.wait();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    Log.d(TAG,""String_Node_Str"" + mLocale);
  }
}","@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  super.startElement(uri,localName,qName,attributes);
  if (localName.equals(""String_Node_Str"")) {
    inWord=true;
    word=""String_Node_Str"";
    freq=Integer.parseInt(attributes.getValue(""String_Node_Str""));
  }
  if (localName.equals(""String_Node_Str"")) {
    mLocale=attributes.getValue(""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"" + mLocale);
    if (mDictionary != null) {
      mDictionary.close();
    }
    mDictionary=new UserDictionary(mAppContext,mLocale);
    mDictionary.loadDictionary();
    Log.d(TAG,""String_Node_Str"" + mLocale);
  }
}",0.7650429799426934
157375,"@Override public void handleMessage(Message msg){
  SetUpKeyboardWizardFragment fragment=mWeakFragment.get();
  if (fragment == null)   return;
switch (msg.what) {
case KEY_MESSAGE_SCROLL_TO_PAGE:
    int pageToScrollTo=msg.arg1;
  if (fragment.mWizardPager != null) {
    fragment.mWizardPager.setCurrentItem(pageToScrollTo,true);
    fragment.setFullIndicatorTo(pageToScrollTo,0.0f);
  }
break;
case KEY_MESSAGE_UPDATE_INDICATOR:
int position=msg.arg1;
float offset=(Float)msg.obj;
fragment.setFullIndicatorTo(position,offset);
break;
case KEY_MESSAGE_UPDATE_FRAGMENTS:
if (fragment.isResumed()) {
fragment.refreshFragmentsUi();
}
 else {
fragment.mReloadPager=true;
}
break;
}
}","@Override public void handleMessage(Message msg){
  SetUpKeyboardWizardFragment fragment=mWeakFragment.get();
  if (fragment == null)   return;
switch (msg.what) {
case KEY_MESSAGE_SCROLL_TO_PAGE:
    int pageToScrollTo=msg.arg1;
  if (fragment.mWizardPager != null) {
    fragment.mWizardPager.setCurrentItem(pageToScrollTo,true);
    fragment.setFullIndicatorTo(pageToScrollTo,0.0f);
  }
break;
case KEY_MESSAGE_UPDATE_INDICATOR:
int position=msg.arg1;
float offset=(Float)msg.obj;
fragment.setFullIndicatorTo(position,offset);
break;
case KEY_MESSAGE_UPDATE_FRAGMENTS:
if (fragment.isResumed() && fragment.getActivity() != null) {
fragment.refreshFragmentsUi();
}
 else {
fragment.mReloadPager=true;
}
break;
}
}",0.9756446991404012
157376,"private void handleSeparator(int primaryCode){
  mExpectingSelectionUpdateBy=SystemClock.uptimeMillis() + MAX_TIME_TO_EXPECT_SELECTION_UPDATE;
  boolean isEndOfSentence=(primaryCode == KeyCodes.ENTER || mSentenceSeparators.get(primaryCode));
  if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
    postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  final boolean separatorInsideWord=(mWord.cursorPosition() < mWord.length());
  if (mPredicting && !separatorInsideWord) {
    if (mAutoCorrectOn && primaryCode != '\'' && primaryCode != KeyCodes.ENTER) {
      pickedDefault=pickDefaultSuggestion();
      if (primaryCode == KeyCodes.SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
      if (isEndOfSentence)       abortCorrection(true,false);
    }
  }
 else   if (separatorInsideWord) {
    abortCorrection(true,false);
  }
  if (mJustAddedAutoSpace && primaryCode == KeyCodes.ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  final EditorInfo ei=getCurrentInputEditorInfo();
  if (primaryCode == KeyCodes.ENTER && mShiftKeyState.isActive() && ic != null && ei != null && (ei.imeOptions & EditorInfo.IME_MASK_ACTION) != EditorInfo.IME_ACTION_NONE) {
    ic.commitText(""String_Node_Str"",1);
  }
 else {
    sendKeyChar((char)primaryCode);
  }
  if (mJustAddedAutoSpace && primaryCode == '.') {
    swapPeriodAndSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true);
  if (TextEntryState.getState() == TextEntryState.State.PUNCTUATION_AFTER_ACCEPTED && primaryCode != KeyCodes.ENTER) {
    swapPunctuationAndSpace();
  }
 else   if (primaryCode == ' ') {
    if (doubleSpace()) {
      isEndOfSentence=true;
    }
  }
  if (pickedDefault && mWord.getPreferredWord() != null) {
    TextEntryState.acceptedDefault(mWord.getTypedWord(),mWord.getPreferredWord());
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
  if (isEndOfSentence) {
    mSuggest.resetNextWordSentence();
    clearSuggestions();
  }
 else   if (!TextUtils.isEmpty(mCommittedWord)) {
    setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,mWord.isAllUpperCase()),false,false,false);
    mWord.setFirstCharCapitalized(false);
  }
}","private void handleSeparator(int primaryCode){
  mExpectingSelectionUpdateBy=SystemClock.uptimeMillis() + MAX_TIME_TO_EXPECT_SELECTION_UPDATE;
  boolean isEndOfSentence=(primaryCode == KeyCodes.ENTER || mSentenceSeparators.get(primaryCode));
  if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
    postUpdateSuggestions();
  }
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  final boolean separatorInsideWord=(mWord.cursorPosition() < mWord.length());
  if (mPredicting && !separatorInsideWord) {
    if (primaryCode != '\'') {
      pickDefaultSuggestion(mAutoCorrectOn && primaryCode != KeyCodes.ENTER);
      if (primaryCode == KeyCodes.SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
      if (isEndOfSentence)       abortCorrection(true,false);
    }
  }
 else   if (separatorInsideWord) {
    abortCorrection(true,false);
  }
  if (mJustAddedAutoSpace && primaryCode == KeyCodes.ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  final EditorInfo ei=getCurrentInputEditorInfo();
  if (primaryCode == KeyCodes.ENTER && mShiftKeyState.isActive() && ic != null && ei != null && (ei.imeOptions & EditorInfo.IME_MASK_ACTION) != EditorInfo.IME_ACTION_NONE) {
    ic.commitText(""String_Node_Str"",1);
  }
 else {
    sendKeyChar((char)primaryCode);
  }
  if (mJustAddedAutoSpace && primaryCode == '.') {
    swapPeriodAndSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true);
  if (TextEntryState.getState() == TextEntryState.State.PUNCTUATION_AFTER_ACCEPTED && primaryCode != KeyCodes.ENTER) {
    swapPunctuationAndSpace();
  }
 else   if (primaryCode == ' ') {
    if (doubleSpace()) {
      isEndOfSentence=true;
    }
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
  if (isEndOfSentence) {
    mSuggest.resetNextWordSentence();
    clearSuggestions();
  }
 else   if (!TextUtils.isEmpty(mCommittedWord)) {
    setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,mWord.isAllUpperCase()),false,false,false);
    mWord.setFirstCharCapitalized(false);
  }
}",0.8047736996172034
157377,"public void pickSuggestionManually(int index,CharSequence suggestion){
  final boolean correcting=TextEntryState.isCorrecting();
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  try {
    if (mCompletionOn && mCompletions != null && index >= 0 && index < mCompletions.length) {
      CompletionInfo ci=mCompletions[index];
      if (ic != null) {
        ic.commitCompletion(ci);
      }
      mCommittedLength=suggestion.length();
      mCommittedWord=suggestion;
      if (mCandidateView != null) {
        mCandidateView.clear();
      }
      return;
    }
    pickSuggestion(suggestion,correcting);
    TextEntryState.acceptedSuggestion(mWord.getTypedWord(),suggestion);
    if (mAutoSpace && !correcting) {
      sendSpace();
      mJustAddedAutoSpace=true;
    }
    mJustAutoAddedWord=false;
    if (index == 0) {
      mJustAutoAddedWord=addToDictionaries(mWord,AutoDictionary.AdditionType.Picked);
    }
    final boolean showingAddToDictionaryHint=(!mJustAutoAddedWord) && index == 0 && (mQuickFixes || mShowSuggestions) && (!mSuggest.isValidWord(suggestion)) && (!mSuggest.isValidWord(suggestion.toString().toLowerCase(getCurrentKeyboard().getLocale())));
    if (showingAddToDictionaryHint) {
      TextEntryState.acceptedSuggestionAddedToDictionary();
      if (mCandidateView != null)       mCandidateView.showAddToDictionaryHint(suggestion);
    }
 else     if (!TextUtils.isEmpty(mCommittedWord) && !mJustAutoAddedWord) {
      setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,mWord.isAllUpperCase()),false,false,false);
      mWord.setFirstCharCapitalized(false);
    }
  }
  finally {
    if (ic != null) {
      ic.endBatchEdit();
    }
  }
}","public void pickSuggestionManually(int index,CharSequence suggestion){
  final boolean correcting=TextEntryState.isCorrecting();
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  try {
    if (mCompletionOn && mCompletions != null && index >= 0 && index < mCompletions.length) {
      CompletionInfo ci=mCompletions[index];
      if (ic != null) {
        ic.commitCompletion(ci);
      }
      mCommittedLength=suggestion.length();
      mCommittedWord=suggestion;
      if (mCandidateView != null) {
        mCandidateView.clear();
      }
      return;
    }
    pickSuggestion(suggestion,correcting);
    TextEntryState.acceptedSuggestion(mWord.getTypedWord(),suggestion);
    if (mAutoSpace && !correcting) {
      sendSpace();
      mJustAddedAutoSpace=true;
    }
    mJustAutoAddedWord=false;
    if (index == 0) {
      mJustAutoAddedWord=checkAddToDictionaryWithAutoDictionary(mWord,AutoDictionary.AdditionType.Picked);
    }
    final boolean showingAddToDictionaryHint=(!mJustAutoAddedWord) && index == 0 && (mQuickFixes || mShowSuggestions) && (!mSuggest.isValidWord(suggestion)) && (!mSuggest.isValidWord(suggestion.toString().toLowerCase(getCurrentKeyboard().getLocale())));
    if (showingAddToDictionaryHint) {
      TextEntryState.acceptedSuggestionAddedToDictionary();
      if (mCandidateView != null)       mCandidateView.showAddToDictionaryHint(suggestion);
    }
 else     if (!TextUtils.isEmpty(mCommittedWord) && !mJustAutoAddedWord) {
      setSuggestions(mSuggest.getNextSuggestions(mCommittedWord,mWord.isAllUpperCase()),false,false,false);
      mWord.setFirstCharCapitalized(false);
    }
  }
  finally {
    if (ic != null) {
      ic.endBatchEdit();
    }
  }
}",0.9916642713423396
157378,"private boolean pickDefaultSuggestion(){
  if (mKeyboardHandler.hasMessages(KeyboardUIStateHandler.MSG_UPDATE_SUGGESTIONS)) {
    postUpdateSuggestions(-1);
  }
  final CharSequence bestWord=mWord.getPreferredWord();
  Log.d(TAG,""String_Node_Str"",bestWord);
  if (!TextUtils.isEmpty(bestWord)) {
    final CharSequence typedWord=mWord.getTypedWord();
    TextEntryState.acceptedDefault(typedWord,bestWord);
    final boolean fixed=!typedWord.equals(pickSuggestion(bestWord,!bestWord.equals(typedWord)));
    if (!fixed) {
      addToDictionaries(mWord,AutoDictionary.AdditionType.Typed);
    }
    return true;
  }
  return false;
}","private boolean pickDefaultSuggestion(boolean autoCorrectToPreferred){
  if (mKeyboardHandler.hasMessages(KeyboardUIStateHandler.MSG_UPDATE_SUGGESTIONS)) {
    postUpdateSuggestions(-1);
  }
  final CharSequence typedWord=mWord.getTypedWord();
  final CharSequence bestWord=autoCorrectToPreferred ? mWord.getPreferredWord() : typedWord;
  Log.d(TAG,""String_Node_Str"",bestWord,mAutoCorrectOn);
  if (!TextUtils.isEmpty(bestWord)) {
    TextEntryState.acceptedDefault(typedWord,bestWord);
    final boolean fixed=!typedWord.equals(pickSuggestion(bestWord,!bestWord.equals(typedWord)));
    if (!fixed) {
      checkAddToDictionaryWithAutoDictionary(mWord,mAutoComplete ? AutoDictionary.AdditionType.Picked : AutoDictionary.AdditionType.Typed);
    }
    return true;
  }
  return false;
}",0.7940761636107193
157379,"private void commitTyped(InputConnection inputConnection){
  if (mPredicting) {
    mPredicting=false;
    if (mWord.length() > 0) {
      if (inputConnection != null) {
        inputConnection.commitText(mWord.getTypedWord(),1);
      }
      mCommittedLength=mWord.length();
      mCommittedWord=mWord.getTypedWord();
      TextEntryState.acceptedTyped(mWord.getTypedWord());
      addToDictionaries(mWord,AutoDictionary.AdditionType.Typed);
    }
    if (mKeyboardHandler.hasMessages(KeyboardUIStateHandler.MSG_UPDATE_SUGGESTIONS)) {
      postUpdateSuggestions(-1);
    }
  }
}","private void commitTyped(InputConnection inputConnection){
  if (mPredicting) {
    mPredicting=false;
    if (mWord.length() > 0) {
      if (inputConnection != null) {
        inputConnection.commitText(mWord.getTypedWord(),1);
      }
      mCommittedLength=mWord.length();
      mCommittedWord=mWord.getTypedWord();
      TextEntryState.acceptedTyped(mWord.getTypedWord());
      checkAddToDictionaryWithAutoDictionary(mWord,AutoDictionary.AdditionType.Typed);
    }
    if (mKeyboardHandler.hasMessages(KeyboardUIStateHandler.MSG_UPDATE_SUGGESTIONS)) {
      postUpdateSuggestions(-1);
    }
  }
}",0.9754860524091292
157380,"public static boolean willUndoCommitOnBackspace(){
switch (sState) {
case ACCEPTED_DEFAULT:
case PICKED_TYPED_ADDED_TO_DICTIONARY:
    return true;
default :
  return false;
}
}","public static boolean willUndoCommitOnBackspace(){
switch (sState) {
case ACCEPTED_DEFAULT:
case SPACE_AFTER_ACCEPTED:
case PICKED_TYPED_ADDED_TO_DICTIONARY:
case SPACE_AFTER_PICKED:
    return true;
default :
  return false;
}
}",0.8719211822660099
157381,"public static void backspace(){
  if (sState == State.ACCEPTED_DEFAULT) {
    sState=State.UNDO_COMMIT;
    sAutoSuggestUndoneCount++;
  }
 else   if (sState == State.PICKED_TYPED_ADDED_TO_DICTIONARY) {
    sState=State.UNDO_COMMIT;
  }
 else   if (sState == State.UNDO_COMMIT) {
    sState=State.IN_WORD;
  }
  sBackspaceCount++;
  displayState();
}","public static void backspace(){
switch (sState) {
case ACCEPTED_DEFAULT:
case SPACE_AFTER_ACCEPTED:
    sState=State.UNDO_COMMIT;
  sAutoSuggestUndoneCount++;
break;
case PICKED_TYPED_ADDED_TO_DICTIONARY:
case SPACE_AFTER_PICKED:
sState=State.UNDO_COMMIT;
break;
case UNDO_COMMIT:
sState=State.IN_WORD;
break;
}
sBackspaceCount++;
displayState();
}",0.492836676217765
157382,"@Test public void testAutoPickWordWhenCursorAtTheEndOfTheWord(){
  TestInputConnection inputConnection=(TestInputConnection)mAnySoftKeyboardUnderTest.getCurrentInputConnection();
  verifyNoSuggestionsInteractions(mSpiedCandidateView);
  mAnySoftKeyboardUnderTest.simulateTextTyping(""String_Node_Str"");
  verifySuggestions(mSpiedCandidateView,true,""String_Node_Str"");
  mAnySoftKeyboardUnderTest.simulateTextTyping(""String_Node_Str"");
  verifySuggestions(mSpiedCandidateView,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  mAnySoftKeyboardUnderTest.simulateTextTyping(""String_Node_Str"");
  verifySuggestions(mSpiedCandidateView,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",inputConnection.getLastCommitCorrection());
  mAnySoftKeyboardUnderTest.simulateKeyPress(' ');
  Assert.assertEquals(""String_Node_Str"",inputConnection.getLastCommitCorrection());
  Assert.assertEquals(""String_Node_Str"",inputConnection.getCurrentTextInInputConnection());
}","@Test public void testAutoPickWordWhenCursorAtTheEndOfTheWord(){
  TestInputConnection inputConnection=(TestInputConnection)mAnySoftKeyboardUnderTest.getCurrentInputConnection();
  verifyNoSuggestionsInteractions(mSpiedCandidateView);
  mAnySoftKeyboardUnderTest.simulateTextTyping(""String_Node_Str"");
  verifySuggestions(mSpiedCandidateView,true,""String_Node_Str"");
  mAnySoftKeyboardUnderTest.simulateTextTyping(""String_Node_Str"");
  verifySuggestions(mSpiedCandidateView,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  mAnySoftKeyboardUnderTest.simulateTextTyping(""String_Node_Str"");
  verifySuggestions(mSpiedCandidateView,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",inputConnection.getLastCommitCorrection());
  mAnySoftKeyboardUnderTest.simulateKeyPress(' ');
  Assert.assertEquals(""String_Node_Str"",inputConnection.getLastCommitCorrection());
  Assert.assertEquals(""String_Node_Str"",inputConnection.getCurrentTextInInputConnection());
  mAnySoftKeyboardUnderTest.simulateKeyPress(KeyCodes.DELETE);
  Assert.assertEquals(""String_Node_Str"",inputConnection.getCurrentTextInInputConnection());
}",0.930211616389014
157383,"public void releaseAllPointersOlderThan(final PointerTracker tracker,final long eventTime){
  final ListIterator<PointerTracker> iterator=mQueue.listIterator();
  while (iterator.hasNext()) {
    final PointerTracker t=iterator.next();
    if (t == tracker)     return;
    if (!t.isModifier()) {
      t.onUpEvent(t.getLastX(),t.getLastY(),eventTime);
      t.setAlreadyProcessed();
      iterator.remove();
    }
  }
}","public void releaseAllPointersOlderThan(final PointerTracker tracker,final long eventTime){
  ArrayList<PointerTracker> pointersToRemove=new ArrayList<>();
  for (  PointerTracker t : mQueue) {
    if (t == tracker)     break;
    if (!t.isModifier()) {
      t.onUpEvent(t.getLastX(),t.getLastY(),eventTime);
      t.setAlreadyProcessed();
      pointersToRemove.add(t);
    }
  }
  for (int i=0, pointersToRemoveSize=pointersToRemove.size(); i < pointersToRemoveSize; i++) {
    mQueue.remove(pointersToRemove.get(i));
  }
}",0.6088794926004228
157384,"public void deleteNode(int nodeIndexToDelete){
}","public void deleteNode(int nodeIndexToDelete){
  length--;
  if (length > 0) {
    for (int i=nodeIndexToDelete; i < length; i++) {
      data[i]=data[i + 1];
    }
  }
}",0.4403669724770642
157385,"public void addSpecialKeySequence(int[] sequence,int specialKey,int result){
  KeyEventState c=this.start;
  for (int i=0; i < sequence.length; i++) {
    if (specialKey != 0) {
      c=addNextState(c,specialKey);
    }
    c=addNextState(c,sequence[i]);
  }
  c.setCharacter(result);
}","public void addSpecialKeySequence(int[] sequence,int specialKey,int result){
  KeyEventState c=this.start;
  for (  int aSequence : sequence) {
    if (specialKey != 0) {
      c=addNextState(c,specialKey);
    }
    c=addNextState(c,aSequence);
  }
  c.setCharacter(result);
}",0.7673179396092362
157386,"void putItem(NFAPart item){
  assert(this.count < MAX_NFA_DIVIDES);
  this.buffer[this.end]=item;
  this.end=(this.end + 1) % MAX_NFA_DIVIDES;
  this.count++;
}","void putItem(NFAPart item){
  this.buffer[this.end]=item;
  this.end=(this.end + 1) % MAX_NFA_DIVIDES;
  this.count++;
}",0.8571428571428571
157387,"NFAPart getItem(){
  assert(this.count > 0);
  NFAPart result=this.buffer[this.start];
  this.buffer[this.start]=null;
  this.start=(this.start + 1) % MAX_NFA_DIVIDES;
  this.count--;
  return result;
}","NFAPart getItem(){
  NFAPart result=this.buffer[this.start];
  this.buffer[this.start]=null;
  this.start=(this.start + 1) % MAX_NFA_DIVIDES;
  this.count--;
  return result;
}",0.9312169312169312
157388,"/** 
 * Handle multi-tap keys by producing the key label for the current multi-tap state.
 */
public CharSequence getPreviewText(Key key,boolean isShifted){
  AnyKey anyKey=(AnyKey)key;
  if (isShifted && !TextUtils.isEmpty(anyKey.shiftedKeyLabel)) {
    return anyKey.shiftedKeyLabel;
  }
 else   if (!TextUtils.isEmpty(anyKey.label)) {
    return isShifted ? anyKey.label.toString().toUpperCase() : anyKey.label;
  }
 else {
    return Character.toString(getMultiTapCode(key,isShifted));
  }
}","/** 
 * Handle multi-tap keys by producing the key label for the current multi-tap state.
 */
public CharSequence getPreviewText(Key key,boolean isShifted){
  AnyKey anyKey=(AnyKey)key;
  if (isShifted && !TextUtils.isEmpty(anyKey.shiftedKeyLabel)) {
    return anyKey.shiftedKeyLabel;
  }
 else   if (!TextUtils.isEmpty(anyKey.label)) {
    return isShifted ? anyKey.label.toString().toUpperCase(Locale.getDefault()) : anyKey.label;
  }
 else {
    return Character.toString(getMultiTapCode(key,isShifted));
  }
}",0.981169474727453
157389,"public void releaseAllPointersOlderThan(PointerTracker tracker,long eventTime){
  LinkedList<PointerTracker> queue=mQueue;
  int oldestPos=0;
  for (PointerTracker t=queue.get(oldestPos); t != tracker; t=queue.get(oldestPos)) {
    if (t.isModifier()) {
      oldestPos++;
    }
 else {
      t.onUpEvent(t.getLastX(),t.getLastY(),eventTime);
      t.setAlreadyProcessed();
      queue.remove(oldestPos);
    }
  }
}","public void releaseAllPointersOlderThan(final PointerTracker tracker,final long eventTime){
  final ListIterator<PointerTracker> iterator=mQueue.listIterator();
  while (iterator.hasNext()) {
    final PointerTracker t=iterator.next();
    if (t == tracker)     return;
    if (!t.isModifier()) {
      t.onUpEvent(t.getLastX(),t.getLastY(),eventTime);
      t.setAlreadyProcessed();
      iterator.remove();
    }
  }
}",0.5430622009569378
157390,"static List<VersionChangeLog> createChangeLog(){
  List<VersionChangeLog> log=new ArrayList<>();
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,4,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,4,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str""));
  log.add(new VersionChangeLog(1,4,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,3,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  return log;
}","static List<VersionChangeLog> createChangeLog(){
  List<VersionChangeLog> log=new ArrayList<>();
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,6,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,5,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,4,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,4,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str""));
  log.add(new VersionChangeLog(1,4,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  log.add(new VersionChangeLog(1,3,""String_Node_Str"",Uri.parse(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  return log;
}",0.9897084048027444
157391,"public AddOnCheckBoxPreference(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  setPersistent(true);
}","public AddOnCheckBoxPreference(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  setLayoutResource(R.layout.addon_checkbox_pref);
  setPersistent(true);
}",0.8440366972477065
157392,"@Override protected View onCreateView(ViewGroup parent){
  LayoutInflater layoutInflater=LayoutInflater.from(getContext());
  ViewGroup layout=(ViewGroup)layoutInflater.inflate(R.layout.addon_checkbox_pref,parent,false);
  mCheckBox=(CheckBox)layout.findViewById(R.id.addon_checkbox);
  mCheckBox.setOnCheckedChangeListener(this);
  mName=(TextView)layout.findViewById(R.id.addon_title);
  mDescription=(TextView)layout.findViewById(R.id.addon_description);
  mAddOnIcon=(ImageView)layout.findViewById(R.id.addon_image);
  mIconOverlay=layout.findViewById(R.id.addon_image_more_overlay);
  populateViews();
  return layout;
}","@Override protected View onCreateView(ViewGroup parent){
  View layout=super.onCreateView(parent);
  mCheckBox=(CheckBox)layout.findViewById(R.id.addon_checkbox);
  mCheckBox.setOnCheckedChangeListener(this);
  mName=(TextView)layout.findViewById(R.id.addon_title);
  mDescription=(TextView)layout.findViewById(R.id.addon_description);
  mAddOnIcon=(ImageView)layout.findViewById(R.id.addon_image);
  mIconOverlay=layout.findViewById(R.id.addon_image_more_overlay);
  populateViews();
  return layout;
}",0.7464539007092199
157393,"public AddOnStoreSearchPreference(Context context,AttributeSet attrs){
  super(context,attrs);
  setPersistent(false);
}","public AddOnStoreSearchPreference(Context context,AttributeSet attrs){
  super(context,attrs);
  setLayoutResource(R.layout.addon_store_search_pref);
  setPersistent(false);
}",0.8135593220338984
157394,"@Override protected View onCreateView(ViewGroup parent){
  LayoutInflater inflater=LayoutInflater.from(getContext());
  View layout=inflater.inflate(R.layout.addon_store_search_pref,parent,false);
  layout.setOnClickListener(this);
  CharSequence title=getTitle();
  if (!TextUtils.isEmpty(title)) {
    TextView cta=(TextView)layout.findViewById(R.id.cta_title);
    cta.setText(title);
  }
  mStoreNotFoundView=layout.findViewById(R.id.no_store_found_error);
  mStoreNotFoundView.setVisibility(View.GONE);
  return layout;
}","@Override protected View onCreateView(ViewGroup parent){
  View layout=super.onCreateView(parent);
  layout.setOnClickListener(this);
  CharSequence title=getTitle();
  if (!TextUtils.isEmpty(title)) {
    TextView cta=(TextView)layout.findViewById(R.id.cta_title);
    cta.setText(title);
  }
  mStoreNotFoundView=layout.findViewById(R.id.no_store_found_error);
  mStoreNotFoundView.setVisibility(View.GONE);
  return layout;
}",0.8238993710691824
157395,"@Override protected View onCreateView(ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Service.LAYOUT_INFLATER_SERVICE);
  ViewGroup rootLayout=(ViewGroup)inflater.inflate(R.layout.about_app_pref,null);
  ImageView appIcon=(ImageView)rootLayout.findViewById(R.id.app_icon);
  if (mAppIconResId == 0) {
    appIcon.setVisibility(View.GONE);
  }
 else {
    appIcon.setImageResource(mAppIconResId);
  }
  TextView name=(TextView)rootLayout.findViewById(R.id.app_name);
  name.setText(mAppName);
  String appVersionName=""String_Node_Str"";
  int appVersionNumber=0;
  try {
    PackageInfo info=getContext().getPackageManager().getPackageInfo(getContext().getPackageName(),0);
    appVersionName=info.versionName;
    appVersionNumber=info.versionCode;
  }
 catch (  PackageManager.NameNotFoundException e) {
    e.printStackTrace();
  }
  TextView version=(TextView)rootLayout.findViewById(R.id.app_version);
  version.setText(getContext().getString(R.string.version_text,appVersionName,appVersionNumber));
  TextView appCopyright=(TextView)rootLayout.findViewById(R.id.app_copyright);
  if (mAppOwner == null) {
    appCopyright.setVisibility(View.GONE);
  }
 else {
    int year=Calendar.getInstance().get(Calendar.YEAR);
    appCopyright.setText(getContext().getString(R.string.copyright_text,year,mAppOwner));
  }
  return rootLayout;
}","@Override protected View onCreateView(ViewGroup parent){
  View rootLayout=super.onCreateView(parent);
  ImageView appIcon=(ImageView)rootLayout.findViewById(R.id.app_icon);
  if (mAppIconResId == 0) {
    appIcon.setVisibility(View.GONE);
  }
 else {
    appIcon.setImageResource(mAppIconResId);
  }
  TextView name=(TextView)rootLayout.findViewById(R.id.app_name);
  name.setText(mAppName);
  String appVersionName=""String_Node_Str"";
  int appVersionNumber=0;
  try {
    PackageInfo info=getContext().getPackageManager().getPackageInfo(getContext().getPackageName(),0);
    appVersionName=info.versionName;
    appVersionNumber=info.versionCode;
  }
 catch (  PackageManager.NameNotFoundException e) {
    e.printStackTrace();
  }
  TextView version=(TextView)rootLayout.findViewById(R.id.app_version);
  version.setText(getContext().getString(R.string.version_text,appVersionName,appVersionNumber));
  TextView appCopyright=(TextView)rootLayout.findViewById(R.id.app_copyright);
  if (mAppOwner == null) {
    appCopyright.setVisibility(View.GONE);
  }
 else {
    int year=Calendar.getInstance().get(Calendar.YEAR);
    appCopyright.setText(getContext().getString(R.string.copyright_text,year,mAppOwner));
  }
  return rootLayout;
}",0.9197247706422018
157396,"public AboutAppPreference(Context context,AttributeSet attrs){
  super(context,attrs);
  setSelectable(false);
  setPersistent(false);
  TypedArray array=context.obtainStyledAttributes(attrs,R.styleable.AboutAppPreferenceAttributes);
  mAppIconResId=array.getResourceId(R.styleable.AboutAppPreferenceAttributes_appIcon,0);
  mAppName=getStringOrReference(array,R.styleable.AboutAppPreferenceAttributes_appName);
  mAppOwner=getStringOrReference(array,R.styleable.AboutAppPreferenceAttributes_appOwner);
  array.recycle();
}","public AboutAppPreference(Context context,AttributeSet attrs){
  super(context,attrs);
  setLayoutResource(R.layout.about_app_pref);
  setSelectable(false);
  setPersistent(false);
  TypedArray array=context.obtainStyledAttributes(attrs,R.styleable.AboutAppPreferenceAttributes);
  mAppIconResId=array.getResourceId(R.styleable.AboutAppPreferenceAttributes_appIcon,0);
  mAppName=getStringOrReference(array,R.styleable.AboutAppPreferenceAttributes_appName);
  mAppOwner=getStringOrReference(array,R.styleable.AboutAppPreferenceAttributes_appOwner);
  array.recycle();
}",0.957875457875458
157397,"public SlidePreference(Context context,AttributeSet attrs){
  super(context,attrs);
  mContext=context;
  TypedArray array=context.obtainStyledAttributes(attrs,R.styleable.SlidePreferenceAttributes);
  mDefault=array.getInteger(R.styleable.SlidePreferenceAttributes_android_defaultValue,0);
  mMax=array.getInteger(R.styleable.SlidePreferenceAttributes_slideMaximum,100);
  mMin=array.getInteger(R.styleable.SlidePreferenceAttributes_slideMinimum,0);
  int titleResId=array.getResourceId(R.styleable.SlidePreferenceAttributes_android_title,0);
  if (titleResId == 0)   mTitle=array.getString(R.styleable.SlidePreferenceAttributes_android_title);
 else   mTitle=context.getString(titleResId);
  array.recycle();
}","public SlidePreference(Context context,AttributeSet attrs){
  super(context,attrs);
  setLayoutResource(R.layout.slide_pref);
  TypedArray array=context.obtainStyledAttributes(attrs,R.styleable.SlidePreferenceAttributes);
  mDefault=array.getInteger(R.styleable.SlidePreferenceAttributes_android_defaultValue,0);
  mMax=array.getInteger(R.styleable.SlidePreferenceAttributes_slideMaximum,100);
  mMin=array.getInteger(R.styleable.SlidePreferenceAttributes_slideMinimum,0);
  int titleResId=array.getResourceId(R.styleable.SlidePreferenceAttributes_android_title,0);
  if (titleResId == 0)   mTitle=array.getString(R.styleable.SlidePreferenceAttributes_android_title);
 else   mTitle=context.getString(titleResId);
  array.recycle();
}",0.9626556016597512
157398,"@Override protected View onCreateView(ViewGroup parent){
  LayoutInflater inflator=(LayoutInflater)mContext.getSystemService(Service.LAYOUT_INFLATER_SERVICE);
  ViewGroup mySeekBarLayout=(ViewGroup)inflator.inflate(R.layout.slide_pref,null);
  mSeekBar=(SeekBar)mySeekBarLayout.findViewById(R.id.pref_seekbar);
  if (shouldPersist())   mValue=getPersistedInt(mDefault);
  mCurrentValue=(TextView)mySeekBarLayout.findViewById(R.id.pref_current_value);
  mMaxValue=(TextView)mySeekBarLayout.findViewById(R.id.pref_max_value);
  mMinValue=(TextView)mySeekBarLayout.findViewById(R.id.pref_min_value);
  mCurrentValue.setText(Integer.toString(mValue));
  ((TextView)mySeekBarLayout.findViewById(R.id.pref_title)).setText(mTitle);
  writeBoundaries();
  mSeekBar.setMax(mMax - mMin);
  mSeekBar.setProgress(mValue - mMin);
  mSeekBar.setOnSeekBarChangeListener(this);
  return mySeekBarLayout;
}","@Override protected View onCreateView(ViewGroup parent){
  View mySeekBarLayout=super.onCreateView(parent);
  mSeekBar=(SeekBar)mySeekBarLayout.findViewById(R.id.pref_seekbar);
  if (shouldPersist())   mValue=getPersistedInt(mDefault);
  mCurrentValue=(TextView)mySeekBarLayout.findViewById(R.id.pref_current_value);
  mMaxValue=(TextView)mySeekBarLayout.findViewById(R.id.pref_max_value);
  mMinValue=(TextView)mySeekBarLayout.findViewById(R.id.pref_min_value);
  mCurrentValue.setText(Integer.toString(mValue));
  ((TextView)mySeekBarLayout.findViewById(R.id.pref_title)).setText(mTitle);
  writeBoundaries();
  mSeekBar.setMax(mMax - mMin);
  mSeekBar.setProgress(mValue - mMin);
  mSeekBar.setOnSeekBarChangeListener(this);
  return mySeekBarLayout;
}",0.8722627737226277
157399,"/** 
 * Returns a list of words that match the list of character codes passed in. This list will be overwritten the next time this function is called.
 * @return list of suggestions.
 */
public List<CharSequence> getSuggestions(WordComposer wordComposer,boolean includeTypedWordIfValid){
  mExplodedAbbreviations.clear();
  mHaveCorrection=false;
  mIsFirstCharCapitalized=wordComposer.isFirstCharCapitalized();
  mIsAllUpperCase=wordComposer.isAllUpperCase();
  collectGarbage();
  Arrays.fill(mPriorities,0);
  mOriginalWord=wordComposer.getTypedWord();
  if (mOriginalWord.length() > 0) {
    mOriginalWord=mOriginalWord.toString();
    mLowerOriginalWord=mOriginalWord.toString().toLowerCase(mLocale);
  }
 else {
    mLowerOriginalWord=""String_Node_Str"";
  }
  if (wordComposer.length() >= mMinimumWordSizeToStartCorrecting) {
    if (mContactsDictionary != null) {
      mContactsDictionary.getWords(wordComposer,this);
    }
    if (mUserDictionary != null) {
      mUserDictionary.getWords(wordComposer,this);
    }
    if (mSuggestions.size() > 0 && isValidWord(mOriginalWord)) {
      mHaveCorrection=true;
    }
    if (mMainDict != null) {
      mMainDict.getWords(wordComposer,this);
    }
    if (mAutoTextEnabled && mAbbreviationDictionary != null) {
      mAbbreviationDictionary.getWords(wordComposer,this);
    }
    if (mSuggestions.size() > 0) {
      mHaveCorrection=true;
    }
    if (mOriginalWord != null) {
      mSuggestions.add(0,mOriginalWord.toString());
    }
    if (mExplodedAbbreviations.size() > 0) {
      for (      String explodedWord : mExplodedAbbreviations)       mSuggestions.add(1,explodedWord);
      mHaveCorrection=true;
    }
  }
  if (mMainDictionaryEnabled && mSuggestions.size() > 1 && mExplodedAbbreviations.size() == 0) {
    if (!haveSufficientCommonality(mLowerOriginalWord,mSuggestions.get(1))) {
      mHaveCorrection=false;
    }
  }
  if (mLowerOriginalWord.length() > 0) {
    CharSequence autoText=mAutoTextEnabled && mAutoText != null ? mAutoText.lookup(mLowerOriginalWord,0,mLowerOriginalWord.length()) : null;
    boolean canAdd=(!TextUtils.isEmpty(autoText)) && (!TextUtils.equals(autoText,mOriginalWord));
    if (canAdd) {
      mHaveCorrection=true;
      if (mSuggestions.size() == 0) {
        mSuggestions.add(mOriginalWord);
      }
      mSuggestions.add(1,autoText);
    }
  }
  final int maxSearch=Math.min(5,mSuggestions.size());
  for (int suggestionIndex=1; suggestionIndex < maxSearch; suggestionIndex++) {
    if (TextUtils.equals(mOriginalWord,mSuggestions.get(suggestionIndex))) {
      mSuggestions.remove(suggestionIndex);
    }
  }
  return mSuggestions;
}","/** 
 * Returns a list of words that match the list of character codes passed in. This list will be overwritten the next time this function is called.
 * @return list of suggestions.
 */
public List<CharSequence> getSuggestions(WordComposer wordComposer,boolean includeTypedWordIfValid){
  mExplodedAbbreviations.clear();
  mHaveCorrection=false;
  mIsFirstCharCapitalized=wordComposer.isFirstCharCapitalized();
  mIsAllUpperCase=wordComposer.isAllUpperCase();
  collectGarbage();
  Arrays.fill(mPriorities,0);
  mOriginalWord=wordComposer.getTypedWord();
  if (mOriginalWord.length() > 0) {
    mOriginalWord=mOriginalWord.toString();
    mLowerOriginalWord=mOriginalWord.toString().toLowerCase(mLocale);
  }
 else {
    mLowerOriginalWord=""String_Node_Str"";
  }
  if (wordComposer.length() >= mMinimumWordSizeToStartCorrecting) {
    if (mContactsDictionary != null) {
      mContactsDictionary.getWords(wordComposer,this);
    }
    if (mUserDictionary != null) {
      mUserDictionary.getWords(wordComposer,this);
    }
    if (mSuggestions.size() > 0 && isValidWord(mOriginalWord)) {
      mHaveCorrection=true;
    }
    if (mMainDict != null) {
      mMainDict.getWords(wordComposer,this);
    }
    if (mAutoTextEnabled && mAbbreviationDictionary != null) {
      mAbbreviationDictionary.getWords(wordComposer,this);
    }
    if (mSuggestions.size() > 0) {
      mHaveCorrection=true;
    }
    if (mOriginalWord != null) {
      mSuggestions.add(0,mOriginalWord.toString());
    }
    if (mExplodedAbbreviations.size() > 0) {
      for (      String explodedWord : mExplodedAbbreviations)       mSuggestions.add(1,explodedWord);
      mHaveCorrection=true;
    }
  }
  if (mMainDictionaryEnabled && mSuggestions.size() > 1 && mExplodedAbbreviations.size() == 0) {
    if (!haveSufficientCommonality(mLowerOriginalWord,mSuggestions.get(1))) {
      mHaveCorrection=false;
    }
  }
  if (mLowerOriginalWord.length() > 0) {
    CharSequence autoText=mAutoTextEnabled && mAutoText != null ? mAutoText.lookup(mLowerOriginalWord,0,mLowerOriginalWord.length()) : null;
    boolean canAdd=(!TextUtils.isEmpty(autoText)) && (!TextUtils.equals(autoText,mOriginalWord));
    if (canAdd) {
      mHaveCorrection=true;
      if (mSuggestions.size() == 0) {
        mSuggestions.add(mOriginalWord);
      }
      mSuggestions.add(1,autoText);
    }
  }
  int maxSearchIndex=Math.min(5,mSuggestions.size());
  for (int suggestionIndex=1; suggestionIndex < maxSearchIndex; suggestionIndex++) {
    if (TextUtils.equals(mOriginalWord,mSuggestions.get(suggestionIndex))) {
      mSuggestions.remove(suggestionIndex);
      maxSearchIndex--;
    }
  }
  return mSuggestions;
}",0.9924642049736248
157400,"@Override protected EditorWordsAdapter createAdapterForWords(List<EditorWord> wordsList){
  return new AbbreviationEditorWordsAdapter(wordsList,getActivity(),this);
}","@Override protected EditorWordsAdapter createAdapterForWords(List<EditorWord> wordsList){
  Activity activity=getActivity();
  if (activity == null)   return null;
  return new AbbreviationEditorWordsAdapter(wordsList,activity,this);
}",0.7630922693266833
157401,"protected EditorWordsAdapter createAdapterForWords(List<EditorWord> wordsList){
  return new EditorWordsAdapter(wordsList,LayoutInflater.from(getActivity()),this);
}","protected EditorWordsAdapter createAdapterForWords(List<EditorWord> wordsList){
  Activity activity=getActivity();
  if (activity == null)   return null;
  return new EditorWordsAdapter(wordsList,LayoutInflater.from(activity),this);
}",0.7619047619047619
157402,"private void fillWordsList(){
  Log.d(TAG,""String_Node_Str"" + mSelectedLocale);
  new UserWordsEditorAsyncTask(this,true){
    private EditableDictionary mNewDictionary;
    private List<EditorWord> mWordsList;
    @Override protected void onPreExecute(){
      super.onPreExecute();
      mNewDictionary=getEditableDictionary(mSelectedLocale);
      if (mNewDictionary != mCurrentDictionary && mCurrentDictionary != null && mCursor != null) {
        mCurrentDictionary.close();
      }
    }
    @Override protected Void doAsyncTask(    Void[] params) throws Exception {
      mCurrentDictionary=mNewDictionary;
      mCurrentDictionary.loadDictionary();
      mCursor=mCurrentDictionary.getWordsCursor();
      Cursor cursor=mCursor.getCursor();
      mWordsList=new ArrayList<>(mCursor.getCursor().getCount());
      cursor.moveToFirst();
      while (!cursor.isAfterLast()) {
        EditorWord word=new EditorWord(mCursor.getCurrentWord(),mCursor.getCurrentWordFrequency());
        mWordsList.add(word);
        cursor.moveToNext();
      }
      Collections.sort(mWordsList,msWordsComparator);
      return null;
    }
    protected void applyResults(    Void result,    Exception backgroundException){
      mWordsRecyclerView.setAdapter(createAdapterForWords(mWordsList));
    }
  }
.execute();
}","private void fillWordsList(){
  Log.d(TAG,""String_Node_Str"" + mSelectedLocale);
  new UserWordsEditorAsyncTask(this,true){
    private EditableDictionary mNewDictionary;
    private List<EditorWord> mWordsList;
    @Override protected void onPreExecute(){
      super.onPreExecute();
      mNewDictionary=getEditableDictionary(mSelectedLocale);
      if (mNewDictionary != mCurrentDictionary && mCurrentDictionary != null && mCursor != null) {
        mCurrentDictionary.close();
      }
    }
    @Override protected Void doAsyncTask(    Void[] params) throws Exception {
      mCurrentDictionary=mNewDictionary;
      mCurrentDictionary.loadDictionary();
      mCursor=mCurrentDictionary.getWordsCursor();
      Cursor cursor=mCursor.getCursor();
      mWordsList=new ArrayList<>(mCursor.getCursor().getCount());
      cursor.moveToFirst();
      while (!cursor.isAfterLast()) {
        EditorWord word=new EditorWord(mCursor.getCurrentWord(),mCursor.getCurrentWordFrequency());
        mWordsList.add(word);
        cursor.moveToNext();
      }
      Collections.sort(mWordsList,msWordsComparator);
      return null;
    }
    protected void applyResults(    Void result,    Exception backgroundException){
      RecyclerView.Adapter adapter=createAdapterForWords(mWordsList);
      if (adapter != null) {
        mWordsRecyclerView.setAdapter(adapter);
      }
    }
  }
.execute();
}",0.9595547309833024
157403,"public void removeFromUserDictionary(String word){
  if (mUserDictionary != null) {
    mUserDictionary.deleteWord(word);
    abortCorrection(true,false);
    if (mCandidateView != null)     mCandidateView.notifyAboutRemovedWord(word);
  }
}","public void removeFromUserDictionary(String word){
  mJustAutoAddedWord=false;
  if (mUserDictionary != null) {
    mUserDictionary.deleteWord(word);
    abortCorrection(true,false);
    if (mCandidateView != null)     mCandidateView.notifyAboutRemovedWord(word);
  }
}",0.9450980392156862
157404,"private void handleCharacter(final int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes){
  Log.d(TAG,""String_Node_Str"" + primaryCode + ""String_Node_Str""+ isPredictionOn()+ ""String_Node_Str""+ mPredicting);
  if (!mPredicting && isPredictionOn() && isAlphabet(primaryCode)&& !isCursorTouchingWord()) {
    mPredicting=true;
    mUndoCommitCursorPosition=-2;
    mWord.reset();
    mAutoCorrectOn=mAutoComplete;
  }
  mLastCharacterWasShifted=(mInputView != null) && mInputView.isShifted();
  final int primaryCodeForShow;
  if (mInputView != null) {
    if (mInputView.isShifted()) {
      if (key != null && key instanceof AnyKey) {
        AnyKey anyKey=(AnyKey)key;
        int[] shiftCodes=anyKey.shiftedCodes;
        primaryCodeForShow=shiftCodes != null && shiftCodes.length > multiTapIndex ? shiftCodes[multiTapIndex] : Character.toUpperCase(primaryCode);
      }
 else {
        primaryCodeForShow=Character.toUpperCase(primaryCode);
      }
    }
 else {
      primaryCodeForShow=primaryCode;
    }
  }
 else {
    primaryCodeForShow=primaryCode;
  }
  if (mPredicting) {
    if ((mInputView != null) && mInputView.isShifted() && mWord.cursorPosition() == 0) {
      mWord.setFirstCharCapitalized(true);
    }
    final InputConnection ic=getCurrentInputConnection();
    if (mWord.add(primaryCodeForShow,nearByKeyCodes)) {
      Toast note=Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG);
      note.show();
      Log.i(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      Intent easterEgg=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
      easterEgg.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      startActivity(easterEgg);
    }
    if (ic != null) {
      final int cursorPosition;
      if (mWord.cursorPosition() != mWord.length()) {
        Log.d(TAG,""String_Node_Str"");
        cursorPosition=getCursorPosition(ic);
      }
 else {
        cursorPosition=-1;
      }
      if (cursorPosition >= 0)       ic.beginBatchEdit();
      ic.setComposingText(mWord.getTypedWord(),1);
      if (cursorPosition >= 0) {
        ic.setSelection(cursorPosition + 1,cursorPosition + 1);
        ic.endBatchEdit();
      }
    }
    if (Character.isLetter((char)primaryCodeForShow)) {
      postUpdateSuggestions();
    }
 else {
      if (mCandidateView != null)       mCandidateView.replaceTypedWord(mWord.getTypedWord());
    }
  }
 else {
    sendKeyChar((char)primaryCodeForShow);
  }
  TextEntryState.typedCharacter((char)primaryCodeForShow,false);
}","private void handleCharacter(final int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes){
  Log.d(TAG,""String_Node_Str"" + primaryCode + ""String_Node_Str""+ isPredictionOn()+ ""String_Node_Str""+ mPredicting);
  if (!mPredicting && isPredictionOn() && isAlphabet(primaryCode)&& !isCursorTouchingWord()) {
    mPredicting=true;
    mUndoCommitCursorPosition=-2;
    mWord.reset();
    mAutoCorrectOn=mAutoComplete;
  }
  mLastCharacterWasShifted=(mInputView != null) && mInputView.isShifted();
  final int primaryCodeForShow;
  if (mInputView != null) {
    if (mInputView.isShifted()) {
      if (key != null && key instanceof AnyKey) {
        AnyKey anyKey=(AnyKey)key;
        int[] shiftCodes=anyKey.shiftedCodes;
        primaryCodeForShow=shiftCodes != null && shiftCodes.length > multiTapIndex ? shiftCodes[multiTapIndex] : Character.toUpperCase(primaryCode);
      }
 else {
        primaryCodeForShow=Character.toUpperCase(primaryCode);
      }
    }
 else {
      primaryCodeForShow=primaryCode;
    }
  }
 else {
    primaryCodeForShow=primaryCode;
  }
  if (mPredicting) {
    if ((mInputView != null) && mInputView.isShifted() && mWord.cursorPosition() == 0) {
      mWord.setFirstCharCapitalized(true);
    }
    final InputConnection ic=getCurrentInputConnection();
    if (mWord.add(primaryCodeForShow,nearByKeyCodes)) {
      Toast note=Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG);
      note.show();
      Log.i(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      Intent easterEgg=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
      easterEgg.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      startActivity(easterEgg);
    }
    if (ic != null) {
      final int cursorPosition;
      if (mWord.cursorPosition() != mWord.length()) {
        Log.d(TAG,""String_Node_Str"");
        cursorPosition=getCursorPosition(ic);
      }
 else {
        cursorPosition=-1;
      }
      if (cursorPosition >= 0)       ic.beginBatchEdit();
      ic.setComposingText(mWord.getTypedWord(),1);
      if (cursorPosition >= 0) {
        ic.setSelection(cursorPosition + 1,cursorPosition + 1);
        ic.endBatchEdit();
      }
    }
    if (Character.isLetter((char)primaryCodeForShow)) {
      postUpdateSuggestions();
    }
 else {
      if (mCandidateView != null)       mCandidateView.replaceTypedWord(mWord.getTypedWord());
    }
  }
 else {
    sendKeyChar((char)primaryCodeForShow);
  }
  TextEntryState.typedCharacter((char)primaryCodeForShow,false);
  mJustAutoAddedWord=false;
}",0.9947289156626506
157405,"public void revertLastWord(boolean deleteChar){
  Log.d(TAG,""String_Node_Str"" + deleteChar + ""String_Node_Str""+ mWord.length()+ ""String_Node_Str""+ mPredicting+ ""String_Node_Str""+ mCommittedLength);
  final int length=mWord.length();
  if (!mPredicting && length > 0) {
    mAutoCorrectOn=false;
    final CharSequence typedWord=mWord.getTypedWord();
    final InputConnection ic=getCurrentInputConnection();
    mPredicting=true;
    mUndoCommitCursorPosition=-2;
    ic.beginBatchEdit();
    if (deleteChar)     ic.deleteSurroundingText(1,0);
    int toDelete=mCommittedLength;
    CharSequence toTheLeft=ic.getTextBeforeCursor(mCommittedLength,0);
    if (toTheLeft != null && toTheLeft.length() > 0 && isWordSeparator(toTheLeft.charAt(0))) {
      toDelete--;
    }
    ic.deleteSurroundingText(toDelete,0);
    ic.setComposingText(typedWord,1);
    TextEntryState.backspace();
    ic.endBatchEdit();
    postUpdateSuggestions(-1);
    if (mJustAutoAddedWord && mUserDictionary != null) {
      Log.i(TAG,""String_Node_Str"" + typedWord + ""String_Node_Str"");
      removeFromUserDictionary(typedWord.toString());
    }
  }
 else {
    sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
  }
}","public void revertLastWord(boolean deleteChar){
  Log.d(TAG,""String_Node_Str"" + deleteChar + ""String_Node_Str""+ mWord.length()+ ""String_Node_Str""+ mPredicting+ ""String_Node_Str""+ mCommittedLength);
  final int length=mWord.length();
  if (!mPredicting && length > 0) {
    mAutoCorrectOn=false;
    final CharSequence typedWord=mWord.getTypedWord();
    final InputConnection ic=getCurrentInputConnection();
    mPredicting=true;
    mUndoCommitCursorPosition=-2;
    ic.beginBatchEdit();
    if (deleteChar)     ic.deleteSurroundingText(1,0);
    int toDelete=mCommittedLength;
    CharSequence toTheLeft=ic.getTextBeforeCursor(mCommittedLength,0);
    if (toTheLeft != null && toTheLeft.length() > 0 && isWordSeparator(toTheLeft.charAt(0))) {
      toDelete--;
    }
    ic.deleteSurroundingText(toDelete,0);
    ic.setComposingText(typedWord,1);
    TextEntryState.backspace();
    ic.endBatchEdit();
    postUpdateSuggestions(-1);
    if (mJustAutoAddedWord && mUserDictionary != null) {
      removeFromUserDictionary(typedWord.toString());
    }
  }
 else {
    sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
  }
}",0.9704347826086956
157406,"private void abortCorrection(boolean force,boolean forever){
  if (force || TextEntryState.isCorrecting()) {
    Log.d(TAG,""String_Node_Str"");
    mHandler.removeMessages(KeyboardUIStateHandler.MSG_UPDATE_SUGGESTIONS);
    mHandler.removeMessages(KeyboardUIStateHandler.MSG_RESTART_NEW_WORD_SUGGESTIONS);
    final InputConnection ic=getCurrentInputConnection();
    if (ic != null)     ic.finishComposingText();
    clearSuggestions();
    TextEntryState.reset();
    mUndoCommitCursorPosition=-2;
    mWord.reset();
    mPredicting=false;
    mJustAddedAutoSpace=false;
    if (forever) {
      Log.d(TAG,""String_Node_Str"");
      mPredictionOn=false;
      setCandidatesViewShown(false);
      if (mSuggest != null) {
        mSuggest.setCorrectionMode(false,false);
      }
    }
  }
}","private void abortCorrection(boolean force,boolean forever){
  if (force || TextEntryState.isCorrecting()) {
    Log.d(TAG,""String_Node_Str"");
    mHandler.removeMessages(KeyboardUIStateHandler.MSG_UPDATE_SUGGESTIONS);
    mHandler.removeMessages(KeyboardUIStateHandler.MSG_RESTART_NEW_WORD_SUGGESTIONS);
    final InputConnection ic=getCurrentInputConnection();
    if (ic != null)     ic.finishComposingText();
    clearSuggestions();
    TextEntryState.reset();
    mUndoCommitCursorPosition=-2;
    mWord.reset();
    mPredicting=false;
    mJustAddedAutoSpace=false;
    mJustAutoAddedWord=false;
    if (forever) {
      Log.d(TAG,""String_Node_Str"");
      mPredictionOn=false;
      setCandidatesViewShown(false);
      if (mSuggest != null) {
        mSuggest.setCorrectionMode(false,false);
      }
    }
  }
}",0.9813432835820896
157407,"public void removeFromUserDictionary(String word){
  if (mUserDictionary != null) {
    mUserDictionary.deleteWord(word);
    abortCorrection(true,false);
    if (mCandidateView != null)     mCandidateView.notifyAboutRemovedWord(word);
  }
}","public void removeFromUserDictionary(String word){
  mJustAutoAddedWord=false;
  if (mUserDictionary != null) {
    mUserDictionary.deleteWord(word);
    abortCorrection(true,false);
    if (mCandidateView != null)     mCandidateView.notifyAboutRemovedWord(word);
  }
}",0.9450980392156862
157408,"private void handleCharacter(final int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes){
  Log.d(TAG,""String_Node_Str"" + primaryCode + ""String_Node_Str""+ isPredictionOn()+ ""String_Node_Str""+ mPredicting);
  if (!mPredicting && isPredictionOn() && isAlphabet(primaryCode)&& !isCursorTouchingWord()) {
    mPredicting=true;
    mUndoCommitCursorPosition=-2;
    mWord.reset();
    mAutoCorrectOn=mAutoComplete;
  }
  mLastCharacterWasShifted=(mInputView != null) && mInputView.isShifted();
  final int primaryCodeForShow;
  if (mInputView != null) {
    if (mInputView.isShifted()) {
      if (key != null && key instanceof AnyKey) {
        AnyKey anyKey=(AnyKey)key;
        int[] shiftCodes=anyKey.shiftedCodes;
        primaryCodeForShow=shiftCodes != null && shiftCodes.length > multiTapIndex ? shiftCodes[multiTapIndex] : Character.toUpperCase(primaryCode);
      }
 else {
        primaryCodeForShow=Character.toUpperCase(primaryCode);
      }
    }
 else {
      primaryCodeForShow=primaryCode;
    }
  }
 else {
    primaryCodeForShow=primaryCode;
  }
  if (mPredicting) {
    if ((mInputView != null) && mInputView.isShifted() && mWord.cursorPosition() == 0) {
      mWord.setFirstCharCapitalized(true);
    }
    final InputConnection ic=getCurrentInputConnection();
    if (mWord.add(primaryCodeForShow,nearByKeyCodes)) {
      Toast note=Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG);
      note.show();
      Log.i(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      Intent easterEgg=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
      easterEgg.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      startActivity(easterEgg);
    }
    if (ic != null) {
      final int cursorPosition;
      if (mWord.cursorPosition() != mWord.length()) {
        Log.d(TAG,""String_Node_Str"");
        cursorPosition=getCursorPosition(ic);
      }
 else {
        cursorPosition=-1;
      }
      if (cursorPosition >= 0)       ic.beginBatchEdit();
      ic.setComposingText(mWord.getTypedWord(),1);
      if (cursorPosition >= 0) {
        ic.setSelection(cursorPosition + 1,cursorPosition + 1);
        ic.endBatchEdit();
      }
    }
    if (Character.isLetter((char)primaryCodeForShow)) {
      postUpdateSuggestions();
    }
 else {
      if (mCandidateView != null)       mCandidateView.replaceTypedWord(mWord.getTypedWord());
    }
  }
 else {
    sendKeyChar((char)primaryCodeForShow);
  }
  TextEntryState.typedCharacter((char)primaryCodeForShow,false);
}","private void handleCharacter(final int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes){
  Log.d(TAG,""String_Node_Str"" + primaryCode + ""String_Node_Str""+ isPredictionOn()+ ""String_Node_Str""+ mPredicting);
  if (!mPredicting && isPredictionOn() && isAlphabet(primaryCode)&& !isCursorTouchingWord()) {
    mPredicting=true;
    mUndoCommitCursorPosition=-2;
    mWord.reset();
    mAutoCorrectOn=mAutoComplete;
  }
  mLastCharacterWasShifted=(mInputView != null) && mInputView.isShifted();
  final int primaryCodeForShow;
  if (mInputView != null) {
    if (mInputView.isShifted()) {
      if (key != null && key instanceof AnyKey) {
        AnyKey anyKey=(AnyKey)key;
        int[] shiftCodes=anyKey.shiftedCodes;
        primaryCodeForShow=shiftCodes != null && shiftCodes.length > multiTapIndex ? shiftCodes[multiTapIndex] : Character.toUpperCase(primaryCode);
      }
 else {
        primaryCodeForShow=Character.toUpperCase(primaryCode);
      }
    }
 else {
      primaryCodeForShow=primaryCode;
    }
  }
 else {
    primaryCodeForShow=primaryCode;
  }
  if (mPredicting) {
    if ((mInputView != null) && mInputView.isShifted() && mWord.cursorPosition() == 0) {
      mWord.setFirstCharCapitalized(true);
    }
    final InputConnection ic=getCurrentInputConnection();
    if (mWord.add(primaryCodeForShow,nearByKeyCodes)) {
      Toast note=Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG);
      note.show();
      Log.i(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      Intent easterEgg=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
      easterEgg.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      startActivity(easterEgg);
    }
    if (ic != null) {
      final int cursorPosition;
      if (mWord.cursorPosition() != mWord.length()) {
        Log.d(TAG,""String_Node_Str"");
        cursorPosition=getCursorPosition(ic);
      }
 else {
        cursorPosition=-1;
      }
      if (cursorPosition >= 0)       ic.beginBatchEdit();
      ic.setComposingText(mWord.getTypedWord(),1);
      if (cursorPosition >= 0) {
        ic.setSelection(cursorPosition + 1,cursorPosition + 1);
        ic.endBatchEdit();
      }
    }
    if (Character.isLetter((char)primaryCodeForShow)) {
      postUpdateSuggestions();
    }
 else {
      if (mCandidateView != null)       mCandidateView.replaceTypedWord(mWord.getTypedWord());
    }
  }
 else {
    sendKeyChar((char)primaryCodeForShow);
  }
  TextEntryState.typedCharacter((char)primaryCodeForShow,false);
  mJustAutoAddedWord=false;
}",0.9947289156626506
157409,"public void revertLastWord(boolean deleteChar){
  Log.d(TAG,""String_Node_Str"" + deleteChar + ""String_Node_Str""+ mWord.length()+ ""String_Node_Str""+ mPredicting+ ""String_Node_Str""+ mCommittedLength);
  final int length=mWord.length();
  if (!mPredicting && length > 0) {
    mAutoCorrectOn=false;
    final CharSequence typedWord=mWord.getTypedWord();
    final InputConnection ic=getCurrentInputConnection();
    mPredicting=true;
    mUndoCommitCursorPosition=-2;
    ic.beginBatchEdit();
    if (deleteChar)     ic.deleteSurroundingText(1,0);
    int toDelete=mCommittedLength;
    CharSequence toTheLeft=ic.getTextBeforeCursor(mCommittedLength,0);
    if (toTheLeft != null && toTheLeft.length() > 0 && isWordSeparator(toTheLeft.charAt(0))) {
      toDelete--;
    }
    ic.deleteSurroundingText(toDelete,0);
    ic.setComposingText(typedWord,1);
    TextEntryState.backspace();
    ic.endBatchEdit();
    postUpdateSuggestions(-1);
    if (mJustAutoAddedWord && mUserDictionary != null) {
      Log.i(TAG,""String_Node_Str"" + typedWord + ""String_Node_Str"");
      removeFromUserDictionary(typedWord.toString());
    }
  }
 else {
    sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
  }
}","public void revertLastWord(boolean deleteChar){
  Log.d(TAG,""String_Node_Str"" + deleteChar + ""String_Node_Str""+ mWord.length()+ ""String_Node_Str""+ mPredicting+ ""String_Node_Str""+ mCommittedLength);
  final int length=mWord.length();
  if (!mPredicting && length > 0) {
    mAutoCorrectOn=false;
    final CharSequence typedWord=mWord.getTypedWord();
    final InputConnection ic=getCurrentInputConnection();
    mPredicting=true;
    mUndoCommitCursorPosition=-2;
    ic.beginBatchEdit();
    if (deleteChar)     ic.deleteSurroundingText(1,0);
    int toDelete=mCommittedLength;
    CharSequence toTheLeft=ic.getTextBeforeCursor(mCommittedLength,0);
    if (toTheLeft != null && toTheLeft.length() > 0 && isWordSeparator(toTheLeft.charAt(0))) {
      toDelete--;
    }
    ic.deleteSurroundingText(toDelete,0);
    ic.setComposingText(typedWord,1);
    TextEntryState.backspace();
    ic.endBatchEdit();
    postUpdateSuggestions(-1);
    if (mJustAutoAddedWord && mUserDictionary != null) {
      removeFromUserDictionary(typedWord.toString());
    }
  }
 else {
    sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
  }
}",0.9704347826086956
157410,"private void abortCorrection(boolean force,boolean forever){
  if (force || TextEntryState.isCorrecting()) {
    Log.d(TAG,""String_Node_Str"");
    mHandler.removeMessages(KeyboardUIStateHandler.MSG_UPDATE_SUGGESTIONS);
    mHandler.removeMessages(KeyboardUIStateHandler.MSG_RESTART_NEW_WORD_SUGGESTIONS);
    final InputConnection ic=getCurrentInputConnection();
    if (ic != null)     ic.finishComposingText();
    clearSuggestions();
    TextEntryState.reset();
    mUndoCommitCursorPosition=-2;
    mWord.reset();
    mPredicting=false;
    mJustAddedAutoSpace=false;
    if (forever) {
      Log.d(TAG,""String_Node_Str"");
      mPredictionOn=false;
      setCandidatesViewShown(false);
      if (mSuggest != null) {
        mSuggest.setCorrectionMode(false,false);
      }
    }
  }
}","private void abortCorrection(boolean force,boolean forever){
  if (force || TextEntryState.isCorrecting()) {
    Log.d(TAG,""String_Node_Str"");
    mHandler.removeMessages(KeyboardUIStateHandler.MSG_UPDATE_SUGGESTIONS);
    mHandler.removeMessages(KeyboardUIStateHandler.MSG_RESTART_NEW_WORD_SUGGESTIONS);
    final InputConnection ic=getCurrentInputConnection();
    if (ic != null)     ic.finishComposingText();
    clearSuggestions();
    TextEntryState.reset();
    mUndoCommitCursorPosition=-2;
    mWord.reset();
    mPredicting=false;
    mJustAddedAutoSpace=false;
    mJustAutoAddedWord=false;
    if (forever) {
      Log.d(TAG,""String_Node_Str"");
      mPredictionOn=false;
      setCandidatesViewShown(false);
      if (mSuggest != null) {
        mSuggest.setCorrectionMode(false,false);
      }
    }
  }
}",0.9813432835820896
157411,"public NextWordDictionary(Context context,String locale){
  super(""String_Node_Str"" + locale);
  mStorage=new NextWordsStorage(context,locale);
}","public NextWordDictionary(Context context,String locale){
  mStorage=new NextWordsStorage(context,locale);
}",0.8537549407114624
157412,"@Override public void storeNextWords(@NonNull Iterable<NextWordsContainer> nextWords,OutputStream outputStream) throws IOException {
  outputStream.write(1);
  for (  NextWordsContainer nextWordsContainer : nextWords) {
    writeWord(outputStream,nextWordsContainer.word);
    int maxWordsToStore=12;
    for (    NextWord nextWord : nextWordsContainer.getNextWordSuggestions()) {
      writeWord(outputStream,nextWord.nextWord);
      maxWordsToStore--;
      if (maxWordsToStore == 0)       break;
    }
  }
}","@Override public void storeNextWords(@NonNull Iterable<NextWordsContainer> nextWords,@NonNull OutputStream outputStream) throws IOException {
  outputStream.write(1);
  for (  NextWordsContainer nextWordsContainer : nextWords) {
    if (Utils.DEBUG)     Log.d(TAG,""String_Node_Str"" + nextWordsContainer);
    writeWord(outputStream,nextWordsContainer.word);
    int maxWordsToStore=Math.min(12,nextWordsContainer.getNextWordSuggestions().size());
    outputStream.write(maxWordsToStore);
    if (Utils.DEBUG)     Log.d(TAG,""String_Node_Str"" + maxWordsToStore + ""String_Node_Str"");
    for (    NextWord nextWord : nextWordsContainer.getNextWordSuggestions()) {
      if (Utils.DEBUG)       Log.d(TAG,""String_Node_Str"" + nextWord.nextWord);
      writeWord(outputStream,nextWord.nextWord);
      maxWordsToStore--;
      if (maxWordsToStore == 0)       break;
    }
  }
}",0.7313540912382331
157413,"@NonNull @Override public Iterable<NextWordsContainer> loadStoredNextWords(InputStream inputStream) throws IOException {
  final byte[] buffer=new byte[256];
  LinkedList<NextWordsContainer> loadedEntries=new LinkedList<>();
  String word;
  while (null != (word=readWord(buffer,inputStream))) {
    final ArrayList<String> nextWords=new ArrayList<>();
    String nextWord;
    while (null != (nextWord=readWord(buffer,inputStream))) {
      nextWords.add(nextWord);
    }
    loadedEntries.add(new NextWordsContainer(word,nextWords));
  }
  return loadedEntries;
}","@NonNull @Override public Iterable<NextWordsContainer> loadStoredNextWords(@NonNull InputStream inputStream) throws IOException {
  final byte[] buffer=new byte[256];
  LinkedList<NextWordsContainer> loadedEntries=new LinkedList<>();
  String word;
  while (null != (word=readWord(buffer,inputStream))) {
    if (Utils.DEBUG)     Log.d(TAG,""String_Node_Str"" + word);
    final int nextWordsCount=inputStream.read();
    if (Utils.DEBUG)     Log.d(TAG,""String_Node_Str"" + word + ""String_Node_Str""+ nextWordsCount+ ""String_Node_Str"");
    if (nextWordsCount <= 0)     break;
    final ArrayList<String> nextWords=new ArrayList<>(nextWordsCount);
    String nextWord;
    while (nextWordsCount > nextWords.size() && null != (nextWord=readWord(buffer,inputStream))) {
      nextWords.add(nextWord);
    }
    loadedEntries.add(new NextWordsContainer(word,nextWords));
  }
  return loadedEntries;
}",0.7750342935528121
157414,"private String readWord(byte[] buffer,InputStream inputStream) throws IOException {
  final int bytesToRead=inputStream.read();
  if (bytesToRead < 1)   return null;
  final int actualReadBytes=inputStream.read(buffer,0,bytesToRead);
  if (bytesToRead == actualReadBytes) {
    return new String(buffer,0,bytesToRead);
  }
 else {
    return null;
  }
}","@Nullable private String readWord(@NonNull byte[] buffer,@NonNull InputStream inputStream) throws IOException {
  final int bytesToRead=inputStream.read();
  if (bytesToRead < 1)   return null;
  final int actualReadBytes=inputStream.read(buffer,0,bytesToRead);
  if (bytesToRead == actualReadBytes) {
    return new String(buffer,0,bytesToRead);
  }
 else {
    return null;
  }
}",0.9618528610354224
157415,"public void storeNextWords(@NonNull Iterable<NextWordsContainer> nextWords){
  NextWordsFileParser parser=new NextWordsFileParserV1();
  FileOutputStream outputStream=null;
  try {
    outputStream=mContext.openFileOutput(mNextWordsStorageFilename,Context.MODE_PRIVATE);
    parser.storeNextWords(nextWords,outputStream);
    outputStream.flush();
  }
 catch (  IOException e) {
    Log.w(TAG,e);
    Log.w(TAG,String.format(""String_Node_Str"",mNextWordsStorageFilename));
    mContext.deleteFile(mNextWordsStorageFilename);
  }
 finally {
    if (outputStream != null)     try {
      outputStream.close();
    }
 catch (    IOException e) {
    }
  }
}","public void storeNextWords(@NonNull Iterable<NextWordsContainer> nextWords){
  NextWordsFileParser parser=new NextWordsFileParserV1();
  FileOutputStream outputStream=null;
  try {
    Log.d(TAG,""String_Node_Str"" + mNextWordsStorageFilename);
    outputStream=mContext.openFileOutput(mNextWordsStorageFilename,Context.MODE_PRIVATE);
    parser.storeNextWords(nextWords,outputStream);
    outputStream.flush();
  }
 catch (  IOException e) {
    Log.w(TAG,e);
    Log.w(TAG,String.format(""String_Node_Str"",mNextWordsStorageFilename));
    mContext.deleteFile(mNextWordsStorageFilename);
  }
 finally {
    if (outputStream != null)     try {
      outputStream.close();
    }
 catch (    IOException e) {
    }
  }
}",0.9546783625730996
157416,"@NonNull public Iterable<NextWordsContainer> loadStoredNextWords(){
  FileInputStream inputStream=null;
  try {
    inputStream=mContext.openFileInput(mNextWordsStorageFilename);
    final int version=inputStream.read();
    if (version < 1) {
      Log.w(TAG,""String_Node_Str"");
      return Collections.emptyList();
    }
    final NextWordsFileParser parser;
switch (version) {
case 1:
      parser=new NextWordsFileParserV1();
    break;
default :
  Log.w(TAG,String.format(""String_Node_Str"",version));
return Collections.emptyList();
}
return parser.loadStoredNextWords(inputStream);
}
 catch (FileNotFoundException e) {
Log.w(TAG,e);
Log.w(TAG,String.format(""String_Node_Str"",mNextWordsStorageFilename));
return Collections.emptyList();
}
catch (IOException e) {
Log.w(TAG,e);
Log.w(TAG,String.format(""String_Node_Str"",mNextWordsStorageFilename));
return Collections.emptyList();
}
 finally {
if (inputStream != null) try {
inputStream.close();
}
 catch (IOException e) {
}
}
}","@NonNull public Iterable<NextWordsContainer> loadStoredNextWords(){
  FileInputStream inputStream=null;
  try {
    if (Utils.DEBUG)     Log.d(TAG,""String_Node_Str"" + mNextWordsStorageFilename);
    inputStream=mContext.openFileInput(mNextWordsStorageFilename);
    final int version=inputStream.read();
    if (version < 1) {
      Log.w(TAG,""String_Node_Str"" + mNextWordsStorageFilename);
      return Collections.emptyList();
    }
    final NextWordsFileParser parser;
switch (version) {
case 1:
      parser=new NextWordsFileParserV1();
    break;
default :
  Log.w(TAG,String.format(""String_Node_Str"",version));
return Collections.emptyList();
}
return parser.loadStoredNextWords(inputStream);
}
 catch (FileNotFoundException e) {
Log.w(TAG,e);
Log.w(TAG,String.format(""String_Node_Str"",mNextWordsStorageFilename));
return Collections.emptyList();
}
catch (IOException e) {
Log.w(TAG,e);
Log.w(TAG,String.format(""String_Node_Str"",mNextWordsStorageFilename));
return Collections.emptyList();
}
 finally {
if (inputStream != null) try {
inputStream.close();
}
 catch (IOException e) {
}
}
}",0.4689455946076071
157417,"private void abortCorrection(boolean force,boolean forever){
  if (force || TextEntryState.isCorrecting()) {
    Log.d(TAG,""String_Node_Str"");
    mHandler.removeMessages(KeyboardUIStateHandler.MSG_UPDATE_SUGGESTIONS);
    mHandler.removeMessages(KeyboardUIStateHandler.MSG_RESTART_NEW_WORD_SUGGESTIONS);
    final InputConnection ic=getCurrentInputConnection();
    if (ic != null)     ic.finishComposingText();
    clearSuggestions();
    TextEntryState.reset();
    mUndoCommitCursorPosition=-2;
    mWord.reset();
    mPredicting=false;
    mJustAddedAutoSpace=false;
    mJustAutoAddedWord=false;
    if (forever) {
      Log.d(TAG,""String_Node_Str"");
      mPredictionOn=false;
      setCandidatesViewShown(false);
      if (mSuggest != null) {
        mSuggest.setCorrectionMode(false,false);
      }
    }
  }
}","private void abortCorrection(boolean force,boolean forever){
  mSuggest.resetNextWordSentence();
  mJustAutoAddedWord=false;
  if (force || TextEntryState.isCorrecting()) {
    Log.d(TAG,""String_Node_Str"");
    mHandler.removeMessages(KeyboardUIStateHandler.MSG_UPDATE_SUGGESTIONS);
    mHandler.removeMessages(KeyboardUIStateHandler.MSG_RESTART_NEW_WORD_SUGGESTIONS);
    final InputConnection ic=getCurrentInputConnection();
    if (ic != null)     ic.finishComposingText();
    clearSuggestions();
    TextEntryState.reset();
    mUndoCommitCursorPosition=-2;
    mWord.reset();
    mPredicting=false;
    mJustAddedAutoSpace=false;
    if (forever) {
      Log.d(TAG,""String_Node_Str"");
      mPredictionOn=false;
      setCandidatesViewShown(false);
      if (mSuggest != null) {
        mSuggest.setCorrectionMode(false,false);
      }
    }
  }
}",0.94377990430622
157418,"public boolean addWord(final char[] word,final int offset,final int length,final int freq,final Dictionary from){
  Log.v(TAG,""String_Node_Str"");
  if (from == mAbbreviationDictionary) {
    mExplodedAbbreviations.add(new String(word,offset,length));
    return true;
  }
  int pos=0;
  final int[] priorities=mPriorities;
  final int prefMaxSuggestions=mPrefMaxSuggestions;
  if (compareCaseInsensitive(mLowerOriginalWord,word,offset,length)) {
    Log.v(TAG,""String_Node_Str"");
    pos=0;
  }
 else {
    if (priorities[prefMaxSuggestions - 1] >= freq)     return true;
    while (pos < prefMaxSuggestions) {
      if (priorities[pos] < freq || (priorities[pos] == freq && length < mSuggestions.get(pos).length())) {
        break;
      }
      pos++;
    }
  }
  if (pos >= prefMaxSuggestions) {
    return true;
  }
  System.arraycopy(priorities,pos,priorities,pos + 1,prefMaxSuggestions - pos - 1);
  priorities[pos]=freq;
  int poolSize=mStringPool.size();
  StringBuilder sb=poolSize > 0 ? (StringBuilder)mStringPool.remove(poolSize - 1) : new StringBuilder(32);
  sb.setLength(0);
  if (mIsAllUpperCase) {
    sb.append(new String(word,offset,length).toUpperCase(mLocale));
  }
 else   if (mIsFirstCharCapitalized) {
    sb.append(Character.toUpperCase(word[offset]));
    if (length > 1) {
      sb.append(word,offset + 1,length - 1);
    }
  }
 else {
    sb.append(word,offset,length);
  }
  mSuggestions.add(pos,sb);
  if (mSuggestions.size() > prefMaxSuggestions) {
    CharSequence garbage=mSuggestions.remove(prefMaxSuggestions);
    if (garbage instanceof StringBuilder) {
      mStringPool.add(garbage);
    }
  }
  return true;
}","@Override public boolean addWord(final char[] word,final int offset,final int length,final int freq,final Dictionary from){
  if (from == mAbbreviationDictionary) {
    mExplodedAbbreviations.add(new String(word,offset,length));
    return true;
  }
  int pos=0;
  final int[] priorities=mPriorities;
  final int prefMaxSuggestions=mPrefMaxSuggestions;
  if (compareCaseInsensitive(mLowerOriginalWord,word,offset,length)) {
    Log.v(TAG,""String_Node_Str"");
    pos=0;
  }
 else {
    if (priorities[prefMaxSuggestions - 1] >= freq)     return true;
    while (pos < prefMaxSuggestions) {
      if (priorities[pos] < freq || (priorities[pos] == freq && length < mSuggestions.get(pos).length())) {
        break;
      }
      pos++;
    }
  }
  if (pos >= prefMaxSuggestions) {
    return true;
  }
  System.arraycopy(priorities,pos,priorities,pos + 1,prefMaxSuggestions - pos - 1);
  priorities[pos]=freq;
  int poolSize=mStringPool.size();
  StringBuilder sb=poolSize > 0 ? (StringBuilder)mStringPool.remove(poolSize - 1) : new StringBuilder(32);
  sb.setLength(0);
  if (mIsAllUpperCase) {
    sb.append(new String(word,offset,length).toUpperCase(mLocale));
  }
 else   if (mIsFirstCharCapitalized) {
    sb.append(Character.toUpperCase(word[offset]));
    if (length > 1) {
      sb.append(word,offset + 1,length - 1);
    }
  }
 else {
    sb.append(word,offset,length);
  }
  mSuggestions.add(pos,sb);
  if (mSuggestions.size() > prefMaxSuggestions) {
    CharSequence garbage=mSuggestions.remove(prefMaxSuggestions);
    if (garbage instanceof StringBuilder) {
      mStringPool.add(garbage);
    }
  }
  return true;
}",0.6340867440439829
157419,"/** 
 * Returns a list of suggested next words for the given typed word
 * @return list of suggestions.
 */
public List<CharSequence> getNextSuggestions(WordComposer wordComposerOfCompletedWord){
  if (mUserDictionary == null || wordComposerOfCompletedWord.length() < mMinimumWordSizeToStartCorrecting)   return Collections.emptyList();
  mHaveCorrection=false;
  mIsFirstCharCapitalized=false;
  mIsAllUpperCase=wordComposerOfCompletedWord.isAllUpperCase();
  collectGarbage();
  Arrays.fill(mPriorities,0);
  final CharSequence preferredWord=wordComposerOfCompletedWord.getPreferredWord();
  if (isValidWord(preferredWord)) {
    wordComposerOfCompletedWord.setPreferredWord(preferredWord.toString().toLowerCase(mLocale));
    mUserDictionary.getNextWords(wordComposerOfCompletedWord,mNextWordsCallback,mPrefMaxSuggestions,mSuggestions,mLocaleSpecificPunctuations);
  }
  return mSuggestions;
}","/** 
 * Returns a list of suggested next words for the given typed word
 * @return list of suggestions.
 */
public List<CharSequence> getNextSuggestions(WordComposer wordComposerOfCompletedWord){
  if (mUserDictionary == null || wordComposerOfCompletedWord.length() < mMinimumWordSizeToStartCorrecting)   return Collections.emptyList();
  collectGarbage();
  mIsAllUpperCase=wordComposerOfCompletedWord.isAllUpperCase();
  final CharSequence preferredWord=wordComposerOfCompletedWord.getPreferredWord();
  if (isValidWord(preferredWord)) {
    mUserDictionary.getNextWords(preferredWord.toString().toLowerCase(mLocale),mPrefMaxSuggestions,mSuggestions,mLocaleSpecificPunctuations);
    if (mIsAllUpperCase) {
      for (int suggestionIndex=0; suggestionIndex < mSuggestions.size(); suggestionIndex++) {
        mSuggestions.set(suggestionIndex,mSuggestions.get(suggestionIndex).toString().toUpperCase(mLocale));
      }
    }
  }
  return mSuggestions;
}",0.6054054054054054
157420,"private void updateShiftStateNow(){
  final InputConnection ic=getCurrentInputConnection();
  EditorInfo ei=getCurrentInputEditorInfo();
  final int caps;
  if (mAutoCap && ei != null && ei.inputType != EditorInfo.TYPE_NULL) {
    caps=ic.getCursorCapsMode(ei.inputType);
  }
 else {
    caps=0;
  }
  final boolean inputSaysCaps=caps != 0;
  Log.d(TAG,""String_Node_Str"",inputSaysCaps);
  mShiftKeyState.setActiveState(inputSaysCaps);
  handleShift();
}","private void updateShiftStateNow(){
  final InputConnection ic=getCurrentInputConnection();
  EditorInfo ei=getCurrentInputEditorInfo();
  final int caps;
  if (mAutoCap && ic != null && ei != null && ei.inputType != EditorInfo.TYPE_NULL) {
    caps=ic.getCursorCapsMode(ei.inputType);
  }
 else {
    caps=0;
  }
  final boolean inputSaysCaps=caps != 0;
  Log.d(TAG,""String_Node_Str"",inputSaysCaps);
  mShiftKeyState.setActiveState(inputSaysCaps);
  handleShift();
}",0.9847826086956522
157421,"public void uncaughtException(Thread thread,Throwable ex){
  Log.e(TAG,""String_Node_Str"",ex);
  boolean ignore=false;
  String stackTrace=Log.getStackTrace(ex);
  if (ex instanceof NullPointerException && stackTrace != null && stackTrace.contains(""String_Node_Str"")) {
    Log.w(TAG,""String_Node_Str"");
    ignore=true;
  }
  if (!ignore && AnyApplication.getConfig().useChewbaccaNotifications()) {
    String appName=DeveloperUtils.getAppDetails(mApp);
    final CharSequence utcTimeDate=DateFormat.format(""String_Node_Str"",new Date());
    final String newline=DeveloperUtils.NEW_LINE;
    String logText=""String_Node_Str"" + newline + ""String_Node_Str""+ utcTimeDate+ newline+ ""String_Node_Str""+ appName+ newline+ ""String_Node_Str""+ newline+ ""String_Node_Str""+ ex.getClass().getName()+ newline+ ""String_Node_Str""+ ex.getMessage()+ newline+ ""String_Node_Str""+ newline+ stackTrace+ newline;
    logText+=""String_Node_Str"" + newline + ""String_Node_Str""+ newline+ DeveloperUtils.getSysInfo();
    if (ex instanceof OutOfMemoryError || (ex.getCause() != null && ex.getCause() instanceof OutOfMemoryError)) {
      logText+=""String_Node_Str"" + ""String_Node_Str"" + newline + getMemory();
    }
    logText+=""String_Node_Str"" + newline + ""String_Node_Str""+ newline+ Log.getAllLogLines();
    String crashType=ex.getClass().getSimpleName() + ""String_Node_Str"" + ex.getMessage();
    Intent notificationIntent=new Intent(mApp,SendBugReportUiActivity.class);
    notificationIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    notificationIntent.putExtra(SendBugReportUiActivity.EXTRA_KEY_BugReportDetails,(Parcelable)new SendBugReportUiActivity.BugReportDetails(ex,logText));
    PendingIntent contentIntent=PendingIntent.getActivity(mApp,0,notificationIntent,0);
    NotificationCompat.Builder builder=new NotificationCompat.Builder(mApp);
    builder.setSmallIcon(R.drawable.notification_error_icon).setTicker(mApp.getText(R.string.ime_crashed_ticker)).setContentTitle(mApp.getText(R.string.ime_name)).setContentText(mApp.getText(R.string.ime_crashed_sub_text)).setSubText(BuildConfig.DEBUG ? crashType : null).setWhen(System.currentTimeMillis()).setContentIntent(contentIntent).setAutoCancel(true).setOnlyAlertOnce(true).setDefaults(Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE);
    NotificationManager notificationManager=(NotificationManager)mApp.getSystemService(Context.NOTIFICATION_SERVICE);
    notificationManager.notify(1,builder.build());
  }
  if (!ignore && mOsDefaultHandler != null) {
    Log.i(TAG,""String_Node_Str"");
    mOsDefaultHandler.uncaughtException(thread,ex);
  }
  Thread.yield();
  System.exit(0);
}","public void uncaughtException(Thread thread,Throwable ex){
  Log.e(TAG,""String_Node_Str"",ex);
  boolean ignore=false;
  String stackTrace=Log.getStackTrace(ex);
  if (ex instanceof NullPointerException && stackTrace != null) {
    if (stackTrace.contains(""String_Node_Str"") || stackTrace.contains(""String_Node_Str"")) {
      Log.w(TAG,""String_Node_Str"");
      ignore=true;
    }
  }
  if (!ignore && AnyApplication.getConfig().useChewbaccaNotifications()) {
    String appName=DeveloperUtils.getAppDetails(mApp);
    final CharSequence utcTimeDate=DateFormat.format(""String_Node_Str"",new Date());
    final String newline=DeveloperUtils.NEW_LINE;
    String logText=""String_Node_Str"" + newline + ""String_Node_Str""+ utcTimeDate+ newline+ ""String_Node_Str""+ appName+ newline+ ""String_Node_Str""+ newline+ ""String_Node_Str""+ ex.getClass().getName()+ newline+ ""String_Node_Str""+ ex.getMessage()+ newline+ ""String_Node_Str""+ newline+ stackTrace+ newline;
    logText+=""String_Node_Str"" + newline + ""String_Node_Str""+ newline+ DeveloperUtils.getSysInfo();
    if (ex instanceof OutOfMemoryError || (ex.getCause() != null && ex.getCause() instanceof OutOfMemoryError)) {
      logText+=""String_Node_Str"" + ""String_Node_Str"" + newline + getMemory();
    }
    logText+=""String_Node_Str"" + newline + ""String_Node_Str""+ newline+ Log.getAllLogLines();
    String crashType=ex.getClass().getSimpleName() + ""String_Node_Str"" + ex.getMessage();
    Intent notificationIntent=new Intent(mApp,SendBugReportUiActivity.class);
    notificationIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    notificationIntent.putExtra(SendBugReportUiActivity.EXTRA_KEY_BugReportDetails,(Parcelable)new SendBugReportUiActivity.BugReportDetails(ex,logText));
    PendingIntent contentIntent=PendingIntent.getActivity(mApp,0,notificationIntent,0);
    NotificationCompat.Builder builder=new NotificationCompat.Builder(mApp);
    builder.setSmallIcon(R.drawable.notification_error_icon).setTicker(mApp.getText(R.string.ime_crashed_ticker)).setContentTitle(mApp.getText(R.string.ime_name)).setContentText(mApp.getText(R.string.ime_crashed_sub_text)).setSubText(BuildConfig.DEBUG ? crashType : null).setWhen(System.currentTimeMillis()).setContentIntent(contentIntent).setAutoCancel(true).setOnlyAlertOnce(true).setDefaults(Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE);
    NotificationManager notificationManager=(NotificationManager)mApp.getSystemService(Context.NOTIFICATION_SERVICE);
    notificationManager.notify(1,builder.build());
  }
  if (!ignore && mOsDefaultHandler != null) {
    Log.i(TAG,""String_Node_Str"");
    mOsDefaultHandler.uncaughtException(thread,ex);
  }
  Thread.yield();
  System.exit(0);
}",0.9872372372372372
157422,"@Override protected boolean onLongPress(Context packageContext,Key key,boolean isSticky,boolean requireSlideInto){
  if (key != null && key instanceof AnyKey) {
    AnyKey anyKey=(AnyKey)key;
    if (anyKey.longPressCode != 0) {
      invokeOnKey(anyKey.longPressCode,anyKey,0);
      return true;
    }
 else     if (anyKey.codes[0] == KeyCodes.QUICK_TEXT) {
      invokeOnKey(KeyCodes.QUICK_TEXT_POPUP,null,0);
      return true;
    }
  }
  if (mAnimationLevel == AnimationsLevel.None) {
    mMiniKeyboardPopup.setAnimationStyle(0);
  }
 else   if (mExtensionVisible && mMiniKeyboardPopup.getAnimationStyle() != R.style.ExtensionKeyboardAnimation) {
    Log.d(TAG,""String_Node_Str"");
    mMiniKeyboardPopup.setAnimationStyle(R.style.ExtensionKeyboardAnimation);
  }
 else   if (!mExtensionVisible && mMiniKeyboardPopup.getAnimationStyle() != R.style.MiniKeyboardAnimation) {
    Log.d(TAG,""String_Node_Str"");
    mMiniKeyboardPopup.setAnimationStyle(R.style.MiniKeyboardAnimation);
  }
  return super.onLongPress(packageContext,key,isSticky,requireSlideInto);
}","@Override protected boolean onLongPress(Context packageContext,Key key,boolean isSticky,boolean requireSlideInto){
  if (key != null && key instanceof AnyKey) {
    AnyKey anyKey=(AnyKey)key;
    if (anyKey.longPressCode != 0) {
      invokeOnKey(anyKey.longPressCode,anyKey,0);
      return true;
    }
 else     if (anyKey.codes[0] == KeyCodes.QUICK_TEXT) {
      invokeOnKey(KeyCodes.QUICK_TEXT_POPUP,anyKey,0);
      return true;
    }
  }
  if (mAnimationLevel == AnimationsLevel.None) {
    mMiniKeyboardPopup.setAnimationStyle(0);
  }
 else   if (mExtensionVisible && mMiniKeyboardPopup.getAnimationStyle() != R.style.ExtensionKeyboardAnimation) {
    Log.d(TAG,""String_Node_Str"");
    mMiniKeyboardPopup.setAnimationStyle(R.style.ExtensionKeyboardAnimation);
  }
 else   if (!mExtensionVisible && mMiniKeyboardPopup.getAnimationStyle() != R.style.MiniKeyboardAnimation) {
    Log.d(TAG,""String_Node_Str"");
    mMiniKeyboardPopup.setAnimationStyle(R.style.MiniKeyboardAnimation);
  }
  return super.onLongPress(packageContext,key,isSticky,requireSlideInto);
}",0.9953051643192488
157423,"public boolean dismissPopupKeyboard(){
  if (isPopupShowing()) {
    mMiniKeyboard.closing();
    mMiniKeyboardPopup.dismiss();
    mMiniKeyboardVisible=false;
    mMiniKeyboardOriginX=0;
    mMiniKeyboardOriginY=0;
    invalidateAllKeys();
    return true;
  }
 else   return false;
}","public boolean dismissPopupKeyboard(){
  if (mMiniKeyboardPopup.isShowing()) {
    if (mMiniKeyboard != null)     mMiniKeyboard.closing();
    mMiniKeyboardPopup.dismiss();
    mMiniKeyboardOriginX=0;
    mMiniKeyboardOriginY=0;
    invalidateAllKeys();
    return true;
  }
 else   return false;
}",0.8610634648370498
157424,"private void onBufferDraw(Canvas canvas){
  if (mKeyboardChanged) {
    invalidateAllKeys();
    mKeyboardChanged=false;
  }
  canvas.getClipBounds(mDirtyRect);
  if (mKeyboard == null)   return;
  final boolean drawKeyboardNameText=(mKeyboardNameTextSize > 1f) && AnyApplication.getConfig().getShowKeyboardNameText();
  final boolean drawHintText=(mHintTextSize > 1) && AnyApplication.getConfig().getShowHintTextOnKeys();
  final boolean useCustomKeyTextColor=false;
  final ColorStateList keyTextColor=useCustomKeyTextColor ? new ColorStateList(new int[][]{{0}},new int[]{0xFF6666FF}) : mKeyTextColor;
  final boolean useCustomHintColor=drawHintText && false;
  final ColorStateList hintColor=useCustomHintColor ? new ColorStateList(new int[][]{{0}},new int[]{0xFFFF6666}) : mHintTextColor;
  final boolean useCustomHintAlign=drawHintText && AnyApplication.getConfig().getUseCustomHintAlign();
  final int hintAlign=useCustomHintAlign ? AnyApplication.getConfig().getCustomHintAlign() : mHintLabelAlign;
  final int hintVAlign=useCustomHintAlign ? AnyApplication.getConfig().getCustomHintVAlign() : mHintLabelVAlign;
  final Paint paint=mPaint;
  final Drawable keyBackground=mKeyBackground;
  final Rect clipRegion=mClipRegion;
  final int kbdPaddingLeft=getPaddingLeft();
  final int kbdPaddingTop=getPaddingTop();
  final Key[] keys=mKeys;
  final Key invalidKey=mInvalidatedKey;
  boolean drawSingleKey=false;
  if (invalidKey != null && canvas.getClipBounds(clipRegion)) {
    if (invalidKey.x + kbdPaddingLeft - 1 <= clipRegion.left && invalidKey.y + kbdPaddingTop - 1 <= clipRegion.top && invalidKey.x + invalidKey.width + kbdPaddingLeft+ 1 >= clipRegion.right && invalidKey.y + invalidKey.height + kbdPaddingTop+ 1 >= clipRegion.bottom) {
      drawSingleKey=true;
    }
  }
  for (  Key keyBase : keys) {
    final AnyKey key=(AnyKey)keyBase;
    final boolean keyIsSpace=isSpaceKey(key);
    if (drawSingleKey && (invalidKey != key)) {
      continue;
    }
    if (!mDirtyRect.intersects(key.x + kbdPaddingLeft,key.y + kbdPaddingTop,key.x + key.width + kbdPaddingLeft,key.y + key.height + kbdPaddingTop)) {
      continue;
    }
    int[] drawableState=key.getCurrentDrawableState(mDrawableStatesProvider);
    if (keyIsSpace)     paint.setColor(mKeyboardNameTextColor.getColorForState(drawableState,0xFF000000));
 else     paint.setColor(keyTextColor.getColorForState(drawableState,0xFF000000));
    keyBackground.setState(drawableState);
    CharSequence label=key.label == null ? null : adjustCase(key).toString();
    final Rect bounds=keyBackground.getBounds();
    if ((key.width != bounds.right) || (key.height != bounds.bottom)) {
      keyBackground.setBounds(0,0,key.width,key.height);
    }
    canvas.translate(key.x + kbdPaddingLeft,key.y + kbdPaddingTop);
    keyBackground.draw(canvas);
    if (TextUtils.isEmpty(label)) {
      Drawable iconToDraw=getIconToDrawForKey(key,false);
      if (iconToDraw != null) {
        final boolean is9Patch=iconToDraw.getCurrent() instanceof NinePatchDrawable;
        final int drawableWidth;
        final int drawableHeight;
        final int drawableX;
        final int drawableY;
        drawableWidth=is9Patch ? key.width : iconToDraw.getIntrinsicWidth();
        drawableHeight=is9Patch ? key.height : iconToDraw.getIntrinsicHeight();
        drawableX=(key.width + mKeyBackgroundPadding.left - mKeyBackgroundPadding.right - drawableWidth) / 2;
        drawableY=(key.height + mKeyBackgroundPadding.top - mKeyBackgroundPadding.bottom - drawableHeight) / 2;
        canvas.translate(drawableX,drawableY);
        iconToDraw.setBounds(0,0,drawableWidth,drawableHeight);
        iconToDraw.draw(canvas);
        canvas.translate(-drawableX,-drawableY);
        if (keyIsSpace && drawKeyboardNameText) {
          label=mKeyboardName;
        }
      }
 else {
        label=guessLabelForKey(key.codes[0]);
        if (TextUtils.isEmpty(label)) {
          Log.w(TAG,""String_Node_Str"" + key.codes[0] + ""String_Node_Str""+ key.x+ ""String_Node_Str""+ key.y+ ""String_Node_Str""+ mKeyboardActionType);
        }
      }
    }
    if (label != null) {
      final FontMetrics fm;
      if (keyIsSpace) {
        paint.setTextSize(mKeyboardNameTextSize);
        paint.setTypeface(Typeface.DEFAULT_BOLD);
        if (mKeyboardNameFM == null)         mKeyboardNameFM=paint.getFontMetrics();
        fm=mKeyboardNameFM;
      }
 else       if (label.length() > 1 && key.codes.length < 2) {
        setPaintForLabelText(paint);
        if (mLabelFM == null)         mLabelFM=paint.getFontMetrics();
        fm=mLabelFM;
      }
 else {
        setPaintToKeyText(paint);
        if (mTextFM == null)         mTextFM=paint.getFontMetrics();
        fm=mTextFM;
      }
      final float labelHeight=-fm.top;
      paint.setShadowLayer(mShadowRadius,mShadowOffsetX,mShadowOffsetY,mShadowColor);
      float textWidth=paint.measureText(label,0,label.length());
      if (textWidth > key.width) {
        Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
        paint.setTextSize(mKeyTextSize / 1.5f);
        textWidth=paint.measureText(label,0,label.length());
        if (textWidth > key.width) {
          Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
          paint.setTextSize(mKeyTextSize / 2.5f);
          textWidth=paint.measureText(label,0,label.length());
          if (textWidth > key.width) {
            Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
            paint.setTextSize(0f);
            textWidth=paint.measureText(label,0,label.length());
          }
        }
      }
      final float centerY=mKeyBackgroundPadding.top + ((key.height - mKeyBackgroundPadding.top - mKeyBackgroundPadding.bottom) / (keyIsSpace ? 3 : 2));
      final float textX=mKeyBackgroundPadding.left + (key.width - mKeyBackgroundPadding.left - mKeyBackgroundPadding.right) / 2;
      final float textY;
      if (label.length() > 1 && !AnyApplication.getConfig().workaround_alwaysUseDrawText()) {
        textY=centerY - ((labelHeight - paint.descent()) / 2);
        canvas.translate(textX,textY);
        Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
        StaticLayout labelText=new StaticLayout(label,new TextPaint(paint),(int)textWidth,Alignment.ALIGN_NORMAL,1.0f,0.0f,false);
        labelText.draw(canvas);
      }
 else {
        textY=centerY + ((labelHeight - paint.descent()) / 2);
        canvas.translate(textX,textY);
        canvas.drawText(label,0,label.length(),0,0,paint);
      }
      canvas.translate(-textX,-textY);
      paint.setShadowLayer(0,0,0,0);
    }
    if (drawHintText) {
      if ((key.popupCharacters != null && key.popupCharacters.length() > 0) || (key.popupResId != 0) || (key.longPressCode != 0)) {
        Align oldAlign=paint.getTextAlign();
        String hintText=null;
        if (key.hintLabel != null && key.hintLabel.length() > 0) {
          hintText=key.hintLabel.toString();
        }
 else         if (key.longPressCode != 0) {
          if (Character.isLetterOrDigit(key.longPressCode))           hintText=Character.toString((char)key.longPressCode);
        }
 else         if (key.popupCharacters != null) {
          final String hintString=key.popupCharacters.toString();
          final int hintLength=hintString.length();
          if (hintLength <= 3)           hintText=hintString;
        }
        if (hintText == null) {
          if (mHintOverflowLabel != null)           hintText=mHintOverflowLabel;
 else {
            if (hintVAlign == Gravity.TOP)             hintText=""String_Node_Str"";
 else             hintText=""String_Node_Str"";
          }
        }
        if (mKeyboard.isShifted())         hintText=hintText.toUpperCase(getKeyboard().getLocale());
        paint.setTypeface(Typeface.DEFAULT);
        paint.setColor(hintColor.getColorForState(drawableState,0xFF000000));
        paint.setTextSize(mHintTextSize);
        if (mHintTextFM == null) {
          mHintTextFM=paint.getFontMetrics();
        }
        final float hintX;
        final float hintY;
        if (hintAlign == Gravity.START) {
          paint.setTextAlign(Align.LEFT);
          hintX=mKeyBackgroundPadding.left + (float)0.5;
        }
 else         if (hintAlign == Gravity.CENTER) {
          paint.setTextAlign(Align.CENTER);
          hintX=mKeyBackgroundPadding.left + (key.width - mKeyBackgroundPadding.left - mKeyBackgroundPadding.right) / 2;
        }
 else {
          paint.setTextAlign(Align.RIGHT);
          hintX=key.width - mKeyBackgroundPadding.right - (float)0.5;
        }
        if (hintVAlign == Gravity.TOP) {
          hintY=mKeyBackgroundPadding.top - mHintTextFM.top + (float)0.5;
        }
 else {
          hintY=key.height - mKeyBackgroundPadding.bottom - mHintTextFM.bottom- (float)0.5;
        }
        canvas.drawText(hintText,hintX,hintY,paint);
        paint.setTextAlign(oldAlign);
      }
    }
    canvas.translate(-key.x - kbdPaddingLeft,-key.y - kbdPaddingTop);
  }
  mInvalidatedKey=null;
  if (mMiniKeyboard != null && mMiniKeyboardVisible) {
    paint.setColor((int)(mBackgroundDimAmount * 0xFF) << 24);
    canvas.drawRect(0,0,getWidth(),getHeight(),paint);
  }
  mDrawPending=false;
  mDirtyRect.setEmpty();
}","private void onBufferDraw(Canvas canvas){
  if (mKeyboardChanged) {
    invalidateAllKeys();
    mKeyboardChanged=false;
  }
  canvas.getClipBounds(mDirtyRect);
  if (mKeyboard == null)   return;
  final boolean drawKeyboardNameText=(mKeyboardNameTextSize > 1f) && AnyApplication.getConfig().getShowKeyboardNameText();
  final boolean drawHintText=(mHintTextSize > 1) && AnyApplication.getConfig().getShowHintTextOnKeys();
  final boolean useCustomKeyTextColor=false;
  final ColorStateList keyTextColor=useCustomKeyTextColor ? new ColorStateList(new int[][]{{0}},new int[]{0xFF6666FF}) : mKeyTextColor;
  final boolean useCustomHintColor=drawHintText && false;
  final ColorStateList hintColor=useCustomHintColor ? new ColorStateList(new int[][]{{0}},new int[]{0xFFFF6666}) : mHintTextColor;
  final boolean useCustomHintAlign=drawHintText && AnyApplication.getConfig().getUseCustomHintAlign();
  final int hintAlign=useCustomHintAlign ? AnyApplication.getConfig().getCustomHintAlign() : mHintLabelAlign;
  final int hintVAlign=useCustomHintAlign ? AnyApplication.getConfig().getCustomHintVAlign() : mHintLabelVAlign;
  final Paint paint=mPaint;
  final Drawable keyBackground=mKeyBackground;
  final Rect clipRegion=mClipRegion;
  final int kbdPaddingLeft=getPaddingLeft();
  final int kbdPaddingTop=getPaddingTop();
  final Key[] keys=mKeys;
  final Key invalidKey=mInvalidatedKey;
  boolean drawSingleKey=false;
  if (invalidKey != null && canvas.getClipBounds(clipRegion)) {
    if (invalidKey.x + kbdPaddingLeft - 1 <= clipRegion.left && invalidKey.y + kbdPaddingTop - 1 <= clipRegion.top && invalidKey.x + invalidKey.width + kbdPaddingLeft+ 1 >= clipRegion.right && invalidKey.y + invalidKey.height + kbdPaddingTop+ 1 >= clipRegion.bottom) {
      drawSingleKey=true;
    }
  }
  for (  Key keyBase : keys) {
    final AnyKey key=(AnyKey)keyBase;
    final boolean keyIsSpace=isSpaceKey(key);
    if (drawSingleKey && (invalidKey != key)) {
      continue;
    }
    if (!mDirtyRect.intersects(key.x + kbdPaddingLeft,key.y + kbdPaddingTop,key.x + key.width + kbdPaddingLeft,key.y + key.height + kbdPaddingTop)) {
      continue;
    }
    int[] drawableState=key.getCurrentDrawableState(mDrawableStatesProvider);
    if (keyIsSpace)     paint.setColor(mKeyboardNameTextColor.getColorForState(drawableState,0xFF000000));
 else     paint.setColor(keyTextColor.getColorForState(drawableState,0xFF000000));
    keyBackground.setState(drawableState);
    CharSequence label=key.label == null ? null : adjustCase(key).toString();
    final Rect bounds=keyBackground.getBounds();
    if ((key.width != bounds.right) || (key.height != bounds.bottom)) {
      keyBackground.setBounds(0,0,key.width,key.height);
    }
    canvas.translate(key.x + kbdPaddingLeft,key.y + kbdPaddingTop);
    keyBackground.draw(canvas);
    if (TextUtils.isEmpty(label)) {
      Drawable iconToDraw=getIconToDrawForKey(key,false);
      if (iconToDraw != null) {
        final boolean is9Patch=iconToDraw.getCurrent() instanceof NinePatchDrawable;
        final int drawableWidth;
        final int drawableHeight;
        final int drawableX;
        final int drawableY;
        drawableWidth=is9Patch ? key.width : iconToDraw.getIntrinsicWidth();
        drawableHeight=is9Patch ? key.height : iconToDraw.getIntrinsicHeight();
        drawableX=(key.width + mKeyBackgroundPadding.left - mKeyBackgroundPadding.right - drawableWidth) / 2;
        drawableY=(key.height + mKeyBackgroundPadding.top - mKeyBackgroundPadding.bottom - drawableHeight) / 2;
        canvas.translate(drawableX,drawableY);
        iconToDraw.setBounds(0,0,drawableWidth,drawableHeight);
        iconToDraw.draw(canvas);
        canvas.translate(-drawableX,-drawableY);
        if (keyIsSpace && drawKeyboardNameText) {
          label=mKeyboardName;
        }
      }
 else {
        label=guessLabelForKey(key.codes[0]);
        if (TextUtils.isEmpty(label)) {
          Log.w(TAG,""String_Node_Str"" + key.codes[0] + ""String_Node_Str""+ key.x+ ""String_Node_Str""+ key.y+ ""String_Node_Str""+ mKeyboardActionType);
        }
      }
    }
    if (label != null) {
      final FontMetrics fm;
      if (keyIsSpace) {
        paint.setTextSize(mKeyboardNameTextSize);
        paint.setTypeface(Typeface.DEFAULT_BOLD);
        if (mKeyboardNameFM == null)         mKeyboardNameFM=paint.getFontMetrics();
        fm=mKeyboardNameFM;
      }
 else       if (label.length() > 1 && key.codes.length < 2) {
        setPaintForLabelText(paint);
        if (mLabelFM == null)         mLabelFM=paint.getFontMetrics();
        fm=mLabelFM;
      }
 else {
        setPaintToKeyText(paint);
        if (mTextFM == null)         mTextFM=paint.getFontMetrics();
        fm=mTextFM;
      }
      final float labelHeight=-fm.top;
      paint.setShadowLayer(mShadowRadius,mShadowOffsetX,mShadowOffsetY,mShadowColor);
      float textWidth=paint.measureText(label,0,label.length());
      if (textWidth > key.width) {
        Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
        paint.setTextSize(mKeyTextSize / 1.5f);
        textWidth=paint.measureText(label,0,label.length());
        if (textWidth > key.width) {
          Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
          paint.setTextSize(mKeyTextSize / 2.5f);
          textWidth=paint.measureText(label,0,label.length());
          if (textWidth > key.width) {
            Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
            paint.setTextSize(0f);
            textWidth=paint.measureText(label,0,label.length());
          }
        }
      }
      final float centerY=mKeyBackgroundPadding.top + ((key.height - mKeyBackgroundPadding.top - mKeyBackgroundPadding.bottom) / (keyIsSpace ? 3 : 2));
      final float textX=mKeyBackgroundPadding.left + (key.width - mKeyBackgroundPadding.left - mKeyBackgroundPadding.right) / 2;
      final float textY;
      if (label.length() > 1 && !AnyApplication.getConfig().workaround_alwaysUseDrawText()) {
        textY=centerY - ((labelHeight - paint.descent()) / 2);
        canvas.translate(textX,textY);
        Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
        StaticLayout labelText=new StaticLayout(label,new TextPaint(paint),(int)textWidth,Alignment.ALIGN_NORMAL,1.0f,0.0f,false);
        labelText.draw(canvas);
      }
 else {
        textY=centerY + ((labelHeight - paint.descent()) / 2);
        canvas.translate(textX,textY);
        canvas.drawText(label,0,label.length(),0,0,paint);
      }
      canvas.translate(-textX,-textY);
      paint.setShadowLayer(0,0,0,0);
    }
    if (drawHintText) {
      if ((key.popupCharacters != null && key.popupCharacters.length() > 0) || (key.popupResId != 0) || (key.longPressCode != 0)) {
        Align oldAlign=paint.getTextAlign();
        String hintText=null;
        if (key.hintLabel != null && key.hintLabel.length() > 0) {
          hintText=key.hintLabel.toString();
        }
 else         if (key.longPressCode != 0) {
          if (Character.isLetterOrDigit(key.longPressCode))           hintText=Character.toString((char)key.longPressCode);
        }
 else         if (key.popupCharacters != null) {
          final String hintString=key.popupCharacters.toString();
          final int hintLength=hintString.length();
          if (hintLength <= 3)           hintText=hintString;
        }
        if (hintText == null) {
          if (mHintOverflowLabel != null)           hintText=mHintOverflowLabel;
 else {
            if (hintVAlign == Gravity.TOP)             hintText=""String_Node_Str"";
 else             hintText=""String_Node_Str"";
          }
        }
        if (mKeyboard.isShifted())         hintText=hintText.toUpperCase(getKeyboard().getLocale());
        paint.setTypeface(Typeface.DEFAULT);
        paint.setColor(hintColor.getColorForState(drawableState,0xFF000000));
        paint.setTextSize(mHintTextSize);
        if (mHintTextFM == null) {
          mHintTextFM=paint.getFontMetrics();
        }
        final float hintX;
        final float hintY;
        if (hintAlign == Gravity.START) {
          paint.setTextAlign(Align.LEFT);
          hintX=mKeyBackgroundPadding.left + (float)0.5;
        }
 else         if (hintAlign == Gravity.CENTER) {
          paint.setTextAlign(Align.CENTER);
          hintX=mKeyBackgroundPadding.left + (key.width - mKeyBackgroundPadding.left - mKeyBackgroundPadding.right) / 2;
        }
 else {
          paint.setTextAlign(Align.RIGHT);
          hintX=key.width - mKeyBackgroundPadding.right - (float)0.5;
        }
        if (hintVAlign == Gravity.TOP) {
          hintY=mKeyBackgroundPadding.top - mHintTextFM.top + (float)0.5;
        }
 else {
          hintY=key.height - mKeyBackgroundPadding.bottom - mHintTextFM.bottom- (float)0.5;
        }
        canvas.drawText(hintText,hintX,hintY,paint);
        paint.setTextAlign(oldAlign);
      }
    }
    canvas.translate(-key.x - kbdPaddingLeft,-key.y - kbdPaddingTop);
  }
  mInvalidatedKey=null;
  if (mMiniKeyboardPopup.isShowing()) {
    paint.setColor((int)(mBackgroundDimAmount * 0xFF) << 24);
    canvas.drawRect(0,0,getWidth(),getHeight(),paint);
  }
  mDrawPending=false;
  mDirtyRect.setEmpty();
}",0.9974435681261898
157425,"/** 
 * Returns the state of the shift key of the keyboard, if any.
 * @return true if the shift is in a pressed state, false otherwise. Ifthere is no shift key on the keyboard or there is no keyboard attached, it returns false.
 */
public boolean isShifted(){
  if (isPopupShowing())   return mMiniKeyboard.isShifted();
  return mKeyboard != null && mKeyboard.isShifted();
}","/** 
 * Returns the state of the shift key of the keyboard, if any.
 * @return true if the shift is in a pressed state, false otherwise. Ifthere is no shift key on the keyboard or there is no keyboard attached, it returns false.
 */
public boolean isShifted(){
  if (mMiniKeyboardPopup.isShowing())   return mMiniKeyboard.isShifted();
  return mKeyboard != null && mKeyboard.isShifted();
}",0.9109947643979056
157426,"private void setPopupKeyboardWithView(int x,int y,View contentView){
  mMiniKeyboardVisible=true;
  mMiniKeyboardPopup.setContentView(contentView);
  mMiniKeyboardPopup.setWidth(contentView.getMeasuredWidth());
  mMiniKeyboardPopup.setHeight(contentView.getMeasuredHeight());
  mMiniKeyboardPopup.showAtLocation(this,Gravity.NO_GRAVITY,x,y);
  invalidateAllKeys();
}","private void setPopupKeyboardWithView(int x,int y,View contentView){
  mMiniKeyboardPopup.setContentView(contentView);
  mMiniKeyboardPopup.setWidth(contentView.getMeasuredWidth());
  mMiniKeyboardPopup.setHeight(contentView.getMeasuredHeight());
  mMiniKeyboardPopup.showAtLocation(this,Gravity.NO_GRAVITY,x,y);
  invalidateAllKeys();
}",0.9587482219061166
157427,"@Override public boolean onTouchEvent(@NonNull MotionEvent nativeMotionEvent){
  if (mKeyboard == null)   return false;
  final int action=MotionEventCompat.getActionMasked(nativeMotionEvent);
  final int pointerCount=MotionEventCompat.getPointerCount(nativeMotionEvent);
  final int oldPointerCount=mOldPointerCount;
  mOldPointerCount=pointerCount;
  if (pointerCount > 1)   mLastTimeHadTwoFingers=SystemClock.elapsedRealtime();
  if (mTouchesAreDisabledTillLastFingerIsUp) {
    if (mOldPointerCount == 1 && (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP)) {
      mTouchesAreDisabledTillLastFingerIsUp=false;
    }
    return true;
  }
  if (!mHasDistinctMultitouch && pointerCount > 1 && oldPointerCount > 1) {
    return true;
  }
  if (!mMiniKeyboardVisible && mGestureDetector != null && (mGestureDetector.onTouchEvent(nativeMotionEvent))) {
    Log.d(TAG,""String_Node_Str"");
    mHandler.cancelKeyTimers();
    dismissKeyPreview();
    return true;
  }
  final long eventTime=nativeMotionEvent.getEventTime();
  final int index=MotionEventCompat.getActionIndex(nativeMotionEvent);
  final int id=nativeMotionEvent.getPointerId(index);
  final int x=(int)nativeMotionEvent.getX(index);
  final int y=(int)nativeMotionEvent.getY(index);
  if (mMiniKeyboard != null && mMiniKeyboardVisible) {
    final int miniKeyboardPointerIndex=nativeMotionEvent.findPointerIndex(mMiniKeyboardTrackerId);
    if (miniKeyboardPointerIndex >= 0 && miniKeyboardPointerIndex < pointerCount) {
      final int miniKeyboardX=(int)nativeMotionEvent.getX(miniKeyboardPointerIndex);
      final int miniKeyboardY=(int)nativeMotionEvent.getY(miniKeyboardPointerIndex);
      MotionEvent translated=generateMiniKeyboardMotionEvent(action,miniKeyboardX,miniKeyboardY,eventTime);
      mMiniKeyboard.onTouchEvent(translated);
      translated.recycle();
    }
    return true;
  }
  if (mHandler.isInKeyRepeat()) {
    if (action == MotionEvent.ACTION_MOVE) {
      return true;
    }
    final PointerTracker tracker=getPointerTracker(id);
    if (pointerCount > 1 && !tracker.isModifier()) {
      mHandler.cancelKeyRepeatTimer();
    }
  }
  if (!mHasDistinctMultitouch) {
    PointerTracker tracker=getPointerTracker(0);
    if (pointerCount == 1 && oldPointerCount == 2) {
      tracker.onDownEvent(x,y,eventTime);
    }
 else     if (pointerCount == 2 && oldPointerCount == 1) {
      tracker.onUpEvent(tracker.getLastX(),tracker.getLastY(),eventTime);
    }
 else     if (pointerCount == 1 && oldPointerCount == 1) {
      tracker.onTouchEvent(action,x,y,eventTime);
    }
 else {
      Log.w(TAG,""String_Node_Str"" + pointerCount + ""String_Node_Str""+ oldPointerCount+ ""String_Node_Str"");
    }
    return true;
  }
  if (action == MotionEvent.ACTION_MOVE) {
    for (int i=0; i < pointerCount; i++) {
      PointerTracker tracker=getPointerTracker(nativeMotionEvent.getPointerId(i));
      tracker.onMoveEvent((int)nativeMotionEvent.getX(i),(int)nativeMotionEvent.getY(i),eventTime);
    }
  }
 else {
    PointerTracker tracker=getPointerTracker(id);
    sendOnXEvent(action,eventTime,x,y,tracker);
  }
  return true;
}","@Override public boolean onTouchEvent(@NonNull MotionEvent nativeMotionEvent){
  if (mKeyboard == null)   return false;
  final int action=MotionEventCompat.getActionMasked(nativeMotionEvent);
  final int pointerCount=MotionEventCompat.getPointerCount(nativeMotionEvent);
  final int oldPointerCount=mOldPointerCount;
  mOldPointerCount=pointerCount;
  if (pointerCount > 1)   mLastTimeHadTwoFingers=SystemClock.elapsedRealtime();
  if (mTouchesAreDisabledTillLastFingerIsUp) {
    if (mOldPointerCount == 1 && (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP)) {
      mTouchesAreDisabledTillLastFingerIsUp=false;
    }
    return true;
  }
  if (!mHasDistinctMultitouch && pointerCount > 1 && oldPointerCount > 1) {
    return true;
  }
  if (!mMiniKeyboardPopup.isShowing() && mGestureDetector != null && mGestureDetector.onTouchEvent(nativeMotionEvent)) {
    Log.d(TAG,""String_Node_Str"");
    mHandler.cancelKeyTimers();
    dismissKeyPreview();
    return true;
  }
  final long eventTime=nativeMotionEvent.getEventTime();
  final int index=MotionEventCompat.getActionIndex(nativeMotionEvent);
  final int id=nativeMotionEvent.getPointerId(index);
  final int x=(int)nativeMotionEvent.getX(index);
  final int y=(int)nativeMotionEvent.getY(index);
  if (mMiniKeyboard != null && mMiniKeyboardPopup.isShowing()) {
    final int miniKeyboardPointerIndex=nativeMotionEvent.findPointerIndex(mMiniKeyboardTrackerId);
    if (miniKeyboardPointerIndex >= 0 && miniKeyboardPointerIndex < pointerCount) {
      final int miniKeyboardX=(int)nativeMotionEvent.getX(miniKeyboardPointerIndex);
      final int miniKeyboardY=(int)nativeMotionEvent.getY(miniKeyboardPointerIndex);
      MotionEvent translated=generateMiniKeyboardMotionEvent(action,miniKeyboardX,miniKeyboardY,eventTime);
      mMiniKeyboard.onTouchEvent(translated);
      translated.recycle();
    }
    return true;
  }
  if (mHandler.isInKeyRepeat()) {
    if (action == MotionEvent.ACTION_MOVE) {
      return true;
    }
    final PointerTracker tracker=getPointerTracker(id);
    if (pointerCount > 1 && !tracker.isModifier()) {
      mHandler.cancelKeyRepeatTimer();
    }
  }
  if (!mHasDistinctMultitouch) {
    PointerTracker tracker=getPointerTracker(0);
    if (pointerCount == 1 && oldPointerCount == 2) {
      tracker.onDownEvent(x,y,eventTime);
    }
 else     if (pointerCount == 2 && oldPointerCount == 1) {
      tracker.onUpEvent(tracker.getLastX(),tracker.getLastY(),eventTime);
    }
 else     if (pointerCount == 1 && oldPointerCount == 1) {
      tracker.onTouchEvent(action,x,y,eventTime);
    }
 else {
      Log.w(TAG,""String_Node_Str"" + pointerCount + ""String_Node_Str""+ oldPointerCount+ ""String_Node_Str"");
    }
    return true;
  }
  if (action == MotionEvent.ACTION_MOVE) {
    for (int i=0; i < pointerCount; i++) {
      PointerTracker tracker=getPointerTracker(nativeMotionEvent.getPointerId(i));
      tracker.onMoveEvent((int)nativeMotionEvent.getX(i),(int)nativeMotionEvent.getY(i),eventTime);
    }
  }
 else {
    PointerTracker tracker=getPointerTracker(id);
    sendOnXEvent(action,eventTime,x,y,tracker);
  }
  return true;
}",0.9920407513530722
157428,"public boolean isInSlidingKeyInput(){
  if (mMiniKeyboard != null && mMiniKeyboardVisible) {
    return mMiniKeyboard.isInSlidingKeyInput();
  }
 else {
    return mPointerQueue.isInSlidingKeyInput();
  }
}","public boolean isInSlidingKeyInput(){
  if (mMiniKeyboard != null && mMiniKeyboardPopup.isShowing()) {
    return mMiniKeyboard.isInSlidingKeyInput();
  }
 else {
    return mPointerQueue.isInSlidingKeyInput();
  }
}",0.943127962085308
157429,"@Override public boolean onTouchEvent(@NonNull MotionEvent me){
  Log.d(TAG,""String_Node_Str"" + me.getPointerCount() + ""String_Node_Str"");
  if (getKeyboard() == null)   return false;
  if (areTouchesDisabled())   return super.onTouchEvent(me);
  if (me.getAction() == MotionEvent.ACTION_DOWN) {
    mFirstTouchPoint.x=(int)me.getX();
    mFirstTouchPoint.y=(int)me.getY();
    mIsFirstDownEventInsideSpaceBar=mSpaceBarKey != null && mSpaceBarKey.isInside(mFirstTouchPoint.x,mFirstTouchPoint.y);
  }
 else   if (mIsFirstDownEventInsideSpaceBar) {
    if (me.getAction() == MotionEvent.ACTION_MOVE) {
      setGesturePreviewText(mSwitcher,me);
      return true;
    }
 else     if (me.getAction() == MotionEvent.ACTION_UP) {
      final int slide=getSlideDistance(me);
      final int distance=slide & 0x00FF;
      if (distance > SLIDE_RATIO_FOR_GESTURE) {
switch (slide & 0xFF00) {
case DIRECTION_DOWN:
          mKeyboardActionListener.onSwipeDown(true);
        break;
case DIRECTION_UP:
      mKeyboardActionListener.onSwipeUp(true);
    break;
case DIRECTION_LEFT:
  mKeyboardActionListener.onSwipeLeft(true,isAtTwoFingersState());
break;
case DIRECTION_RIGHT:
mKeyboardActionListener.onSwipeRight(true,isAtTwoFingersState());
break;
}
}
 else {
super.onTouchEvent(me);
}
return true;
}
}
if (!mIsFirstDownEventInsideSpaceBar && me.getY() < mExtensionKeyboardYActivationPoint && !isPopupShowing() && !mExtensionVisible && me.getAction() == MotionEvent.ACTION_MOVE) {
if (mExtensionKeyboardAreaEntranceTime <= 0) mExtensionKeyboardAreaEntranceTime=System.currentTimeMillis();
if (System.currentTimeMillis() - mExtensionKeyboardAreaEntranceTime > DELAY_BEFORE_POPPING_UP_EXTENSION_KBD) {
KeyboardExtension extKbd=((ExternalAnyKeyboard)getKeyboard()).getExtensionLayout();
if (extKbd == null || extKbd.getKeyboardResId() == -1) {
return super.onTouchEvent(me);
}
 else {
MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX(),me.getY(),0);
super.onTouchEvent(cancel);
cancel.recycle();
mExtensionVisible=true;
dismissKeyPreview();
if (mExtensionKey == null) {
mExtensionKey=new AnyKey(new Row(getKeyboard()),getThemedKeyboardDimens());
mExtensionKey.codes=new int[]{0};
mExtensionKey.edgeFlags=0;
mExtensionKey.height=1;
mExtensionKey.width=1;
mExtensionKey.popupResId=extKbd.getKeyboardResId();
mExtensionKey.externalResourcePopupLayout=mExtensionKey.popupResId != 0;
mExtensionKey.x=getWidth() / 2;
mExtensionKey.y=mExtensionKeyboardPopupOffset;
}
mExtensionKey.x=(int)me.getX();
onLongPress(extKbd.getPackageContext(),mExtensionKey,AnyApplication.getConfig().isStickyExtensionKeyboard(),!AnyApplication.getConfig().isStickyExtensionKeyboard());
mMiniKeyboard.setPreviewEnabled(true);
return true;
}
}
 else {
return super.onTouchEvent(me);
}
}
 else if (mExtensionVisible && me.getY() > mExtensionKeyboardYDismissPoint) {
dismissPopupKeyboard();
return true;
}
 else {
return super.onTouchEvent(me);
}
}","@Override public boolean onTouchEvent(@NonNull MotionEvent me){
  Log.d(TAG,""String_Node_Str"" + me.getPointerCount() + ""String_Node_Str"");
  if (getKeyboard() == null)   return false;
  if (areTouchesDisabled())   return super.onTouchEvent(me);
  if (me.getAction() == MotionEvent.ACTION_DOWN) {
    mFirstTouchPoint.x=(int)me.getX();
    mFirstTouchPoint.y=(int)me.getY();
    mIsFirstDownEventInsideSpaceBar=mSpaceBarKey != null && mSpaceBarKey.isInside(mFirstTouchPoint.x,mFirstTouchPoint.y);
  }
 else   if (mIsFirstDownEventInsideSpaceBar) {
    if (me.getAction() == MotionEvent.ACTION_MOVE) {
      setGesturePreviewText(mSwitcher,me);
      return true;
    }
 else     if (me.getAction() == MotionEvent.ACTION_UP) {
      final int slide=getSlideDistance(me);
      final int distance=slide & 0x00FF;
      if (distance > SLIDE_RATIO_FOR_GESTURE) {
switch (slide & 0xFF00) {
case DIRECTION_DOWN:
          mKeyboardActionListener.onSwipeDown(true);
        break;
case DIRECTION_UP:
      mKeyboardActionListener.onSwipeUp(true);
    break;
case DIRECTION_LEFT:
  mKeyboardActionListener.onSwipeLeft(true,isAtTwoFingersState());
break;
case DIRECTION_RIGHT:
mKeyboardActionListener.onSwipeRight(true,isAtTwoFingersState());
break;
}
}
 else {
super.onTouchEvent(me);
}
return true;
}
}
if (!mIsFirstDownEventInsideSpaceBar && me.getY() < mExtensionKeyboardYActivationPoint && !mMiniKeyboardPopup.isShowing() && !mExtensionVisible && me.getAction() == MotionEvent.ACTION_MOVE) {
if (mExtensionKeyboardAreaEntranceTime <= 0) mExtensionKeyboardAreaEntranceTime=System.currentTimeMillis();
if (System.currentTimeMillis() - mExtensionKeyboardAreaEntranceTime > DELAY_BEFORE_POPPING_UP_EXTENSION_KBD) {
KeyboardExtension extKbd=((ExternalAnyKeyboard)getKeyboard()).getExtensionLayout();
if (extKbd == null || extKbd.getKeyboardResId() == -1) {
return super.onTouchEvent(me);
}
 else {
MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX(),me.getY(),0);
super.onTouchEvent(cancel);
cancel.recycle();
mExtensionVisible=true;
dismissKeyPreview();
if (mExtensionKey == null) {
mExtensionKey=new AnyKey(new Row(getKeyboard()),getThemedKeyboardDimens());
mExtensionKey.codes=new int[]{0};
mExtensionKey.edgeFlags=0;
mExtensionKey.height=1;
mExtensionKey.width=1;
mExtensionKey.popupResId=extKbd.getKeyboardResId();
mExtensionKey.externalResourcePopupLayout=mExtensionKey.popupResId != 0;
mExtensionKey.x=getWidth() / 2;
mExtensionKey.y=mExtensionKeyboardPopupOffset;
}
mExtensionKey.x=(int)me.getX();
onLongPress(extKbd.getPackageContext(),mExtensionKey,AnyApplication.getConfig().isStickyExtensionKeyboard(),!AnyApplication.getConfig().isStickyExtensionKeyboard());
mMiniKeyboard.setPreviewEnabled(true);
return true;
}
}
 else {
return super.onTouchEvent(me);
}
}
 else if (mExtensionVisible && me.getY() > mExtensionKeyboardYDismissPoint) {
dismissPopupKeyboard();
return true;
}
 else {
return super.onTouchEvent(me);
}
}",0.996969696969697
157430,"public OrderedListViewHolder(View itemView){
  super(itemView);
  titleView=(TextView)itemView.findViewById(R.id.orderedListTitle);
  subtitleVew=(TextView)itemView.findViewById(R.id.orderedListSubTitle);
}","public OrderedListViewHolder(View itemView){
  super(itemView);
  title=(TextView)itemView.findViewById(R.id.orderedListTitle);
}",0.7701492537313432
157431,"@Override public void onBindViewHolder(OrderedListViewHolder viewHolder,int position){
  QuickTextKey value=mQuickKeysAddOnsToStore.get(position);
  viewHolder.titleView.setText(value.getName());
  viewHolder.subtitleVew.setText(value.getDescription());
}","@Override public void onBindViewHolder(OrderedListViewHolder viewHolder,int position){
  QuickTextKey value=mQuickKeysAddOnsToStore.get(position);
  viewHolder.title.setText(value.getName());
}",0.8616071428571429
157432,"private void loadSettings(){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  mVibrationDuration=Integer.parseInt(sp.getString(getString(R.string.settings_key_vibrate_on_key_press_duration),getString(R.string.settings_default_vibrate_on_key_press_duration)));
  mSoundOn=sp.getBoolean(getString(R.string.settings_key_sound_on),getResources().getBoolean(R.bool.settings_default_sound_on));
  if (mSoundOn) {
    Log.i(TAG,""String_Node_Str"");
    mAudioManager.loadSoundEffects();
  }
  boolean customVolume=sp.getBoolean(""String_Node_Str"",false);
  int newVolume;
  if (customVolume) {
    newVolume=sp.getInt(""String_Node_Str"",0) + 1;
    Log.i(TAG,""String_Node_Str"" + newVolume + ""String_Node_Str"");
  }
 else {
    Log.i(TAG,""String_Node_Str"");
    newVolume=-1;
  }
  mSoundVolume=newVolume;
  mKeyboardChangeNotificationType=sp.getString(getString(R.string.settings_key_physical_keyboard_change_notification_type),getString(R.string.settings_default_physical_keyboard_change_notification_type));
  mInputMethodManager.hideStatusIcon(mImeToken);
  if (mKeyboardChangeNotificationType.equals(KEYBOARD_NOTIFICATION_ALWAYS))   notifyKeyboardChangeIfNeeded();
  mAutoCap=sp.getBoolean(""String_Node_Str"",true);
  mShowSuggestions=sp.getBoolean(""String_Node_Str"",true);
  setDictionariesForCurrentKeyboard();
  mAutoComplete=sp.getBoolean(""String_Node_Str"",true) && mShowSuggestions;
  mQuickFixes=sp.getBoolean(""String_Node_Str"",true);
  mAllowSuggestionsRestart=sp.getBoolean(getString(R.string.settings_key_allow_suggestions_restart),getResources().getBoolean(R.bool.settings_default_allow_suggestions_restart));
  mAutoCorrectOn=mAutoComplete;
  mFlipQuickTextKeyAndPopupFunctionality=sp.getBoolean(getString(R.string.settings_key_emoticon_long_press_opens_popup),getResources().getBoolean(R.bool.settings_default_emoticon_long_press_opens_popup));
  mOverrideQuickTextText=sp.getString(getString(R.string.settings_key_emoticon_default_text),null);
  mMinimumWordCorrectionLength=sp.getInt(getString(R.string.settings_key_min_length_for_word_correction__),2);
  if (mSuggest != null)   mSuggest.setMinimumWordLengthForCorrection(mMinimumWordCorrectionLength);
  setInitialCondensedState(getResources().getConfiguration());
}","private void loadSettings(){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  mVibrationDuration=Integer.parseInt(sp.getString(getString(R.string.settings_key_vibrate_on_key_press_duration),getString(R.string.settings_default_vibrate_on_key_press_duration)));
  mSoundOn=sp.getBoolean(getString(R.string.settings_key_sound_on),getResources().getBoolean(R.bool.settings_default_sound_on));
  if (mSoundOn) {
    Log.i(TAG,""String_Node_Str"");
    mAudioManager.loadSoundEffects();
  }
  boolean customVolume=sp.getBoolean(""String_Node_Str"",false);
  int newVolume;
  if (customVolume) {
    newVolume=sp.getInt(""String_Node_Str"",0) + 1;
    Log.i(TAG,""String_Node_Str"" + newVolume + ""String_Node_Str"");
  }
 else {
    Log.i(TAG,""String_Node_Str"");
    newVolume=-1;
  }
  mSoundVolume=newVolume;
  mKeyboardChangeNotificationType=sp.getString(getString(R.string.settings_key_physical_keyboard_change_notification_type),getString(R.string.settings_default_physical_keyboard_change_notification_type));
  mInputMethodManager.hideStatusIcon(mImeToken);
  if (mKeyboardChangeNotificationType.equals(KEYBOARD_NOTIFICATION_ALWAYS))   notifyKeyboardChangeIfNeeded();
  mAutoCap=sp.getBoolean(""String_Node_Str"",true);
  mShowSuggestions=sp.getBoolean(""String_Node_Str"",true);
  setDictionariesForCurrentKeyboard();
  mAutoComplete=sp.getBoolean(""String_Node_Str"",true) && mShowSuggestions;
  mQuickFixes=sp.getBoolean(""String_Node_Str"",true);
  mAllowSuggestionsRestart=sp.getBoolean(getString(R.string.settings_key_allow_suggestions_restart),getResources().getBoolean(R.bool.settings_default_allow_suggestions_restart));
  mAutoCorrectOn=mAutoComplete;
  mDoNotFlipQuickTextKeyAndPopupFunctionality=sp.getBoolean(getString(R.string.settings_key_do_not_flip_quick_key_codes_functionality),getResources().getBoolean(R.bool.settings_default_do_not_flip_quick_keys_functionality));
  mOverrideQuickTextText=sp.getString(getString(R.string.settings_key_emoticon_default_text),null);
  mMinimumWordCorrectionLength=sp.getInt(getString(R.string.settings_key_min_length_for_word_correction__),2);
  if (mSuggest != null)   mSuggest.setMinimumWordLengthForCorrection(mMinimumWordCorrectionLength);
  setInitialCondensedState(getResources().getConfiguration());
}",0.9681978798586572
157433,"public void onKey(int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes,boolean fromUI){
  Log.d(TAG,""String_Node_Str"" + primaryCode);
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.ENTER:
case KeyCodes.SPACE:
    handleSeparator(primaryCode);
  if (!mKeyboardSwitcher.isAlphabetMode()) {
    Log.d(TAG,""String_Node_Str"");
    if (mAskPrefs.getSwitchKeyboardOnSpace()) {
      Log.d(TAG,""String_Node_Str"");
      mKeyboardSwitcher.nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
    }
  }
break;
case KeyCodes.DELETE_WORD:
if (ic == null) break;
handleBackWord(ic);
break;
case KeyCodes.DELETE:
if (ic == null) break;
if (mInputView != null && mInputView.isShifted() && !mInputView.getKeyboard().isShiftLocked() && ((mDistinctMultiTouch && mShiftKeyState.isPressed()) || mAskPrefs.useBackword())) {
handleBackWord(ic);
}
 else {
handleDeleteLastCharacter(false);
}
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
commitTyped(ic);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.CTRL:
if ((!mDistinctMultiTouch) || (!fromUI)) handleControl();
break;
case KeyCodes.SHIFT:
if ((!mDistinctMultiTouch) || (!fromUI)) handleShift();
break;
case KeyCodes.ARROW_LEFT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_LEFT);
break;
case KeyCodes.ARROW_RIGHT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_RIGHT);
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) newPosition=0;
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) newPosition=textAfter.length();
try {
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
if (!TextUtils.isEmpty(textBefore)) {
newPosition=newPosition + textBefore.length();
}
ic.setSelection(newPosition,newPosition);
}
 catch (Throwable e) {
Log.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger.isInstalled()) {
mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentKeyboard().getDefaultDictionaryLocale());
}
 else {
Intent voiceInputNotInstalledIntent=new Intent(getApplicationContext(),VoiceInputNotInstalledActivity.class);
voiceInputNotInstalledIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
startActivity(voiceInputNotInstalledIntent);
}
break;
case KeyCodes.CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
case KeyCodes.COMPACT_LAYOUT_TO_RIGHT:
case KeyCodes.COMPACT_LAYOUT_TO_LEFT:
if (getCurrentKeyboard() != null && mInputView != null) {
mKeyboardInCondensedMode=CondenseType.fromKeyCode(primaryCode);
AnyKeyboard currentKeyboard=getCurrentKeyboard();
setKeyboardStuffBeforeSetToView(currentKeyboard);
mInputView.setKeyboard(currentKeyboard);
}
break;
case KeyCodes.DOMAIN:
onText(mAskPrefs.getDomainText());
break;
case KeyCodes.QUICK_TEXT:
if (mFlipQuickTextKeyAndPopupFunctionality) {
openQuickTextPopup(key);
}
 else {
outputCurrentQuickTextKey();
}
break;
case KeyCodes.QUICK_TEXT_POPUP:
if (mFlipQuickTextKeyAndPopupFunctionality) {
outputCurrentQuickTextKey();
}
 else {
openQuickTextPopup(key);
}
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (mKeyboardSwitcher.shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
case KeyCodes.UTILITY_KEYBOARD:
mInputView.openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD:
Clipboard cp=AnyApplication.getFrankenRobot().embody(new Clipboard.ClipboardDiagram(getApplicationContext()));
CharSequence clipboardText=cp.getText();
if (!TextUtils.isEmpty(clipboardText)) {
onText(clipboardText);
}
break;
case KeyCodes.TAB:
sendTab();
break;
case KeyCodes.ESCAPE:
sendEscape();
break;
default :
if (mKeyboardSwitcher.isRightToLeftMode()) {
if (primaryCode == (int)')') primaryCode=(int)'(';
 else if (primaryCode == (int)'(') primaryCode=(int)')';
}
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
}
 else {
if (mControlKeyState.isActive() && primaryCode >= 32 && primaryCode < 127) {
int controlCode=primaryCode & 31;
Log.d(TAG,""String_Node_Str"",primaryCode,controlCode);
if (controlCode == 9) {
sendTab();
}
 else {
ic.commitText(Character.toString((char)controlCode),1);
}
}
 else {
handleCharacter(primaryCode,key,multiTapIndex,nearByKeyCodes);
}
mJustAddedAutoSpace=false;
}
break;
}
}","public void onKey(int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes,boolean fromUI){
  Log.d(TAG,""String_Node_Str"" + primaryCode);
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.ENTER:
case KeyCodes.SPACE:
    handleSeparator(primaryCode);
  if (!mKeyboardSwitcher.isAlphabetMode()) {
    Log.d(TAG,""String_Node_Str"");
    if (mAskPrefs.getSwitchKeyboardOnSpace()) {
      Log.d(TAG,""String_Node_Str"");
      mKeyboardSwitcher.nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
    }
  }
break;
case KeyCodes.DELETE_WORD:
if (ic == null) break;
handleBackWord(ic);
break;
case KeyCodes.DELETE:
if (ic == null) break;
if (mInputView != null && mInputView.isShifted() && !mInputView.getKeyboard().isShiftLocked() && ((mDistinctMultiTouch && mShiftKeyState.isPressed()) || mAskPrefs.useBackword())) {
handleBackWord(ic);
}
 else {
handleDeleteLastCharacter(false);
}
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
commitTyped(ic);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.CTRL:
if ((!mDistinctMultiTouch) || (!fromUI)) handleControl();
break;
case KeyCodes.SHIFT:
if ((!mDistinctMultiTouch) || (!fromUI)) handleShift();
break;
case KeyCodes.ARROW_LEFT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_LEFT);
break;
case KeyCodes.ARROW_RIGHT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_RIGHT);
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) newPosition=0;
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) newPosition=textAfter.length();
try {
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
if (!TextUtils.isEmpty(textBefore)) {
newPosition=newPosition + textBefore.length();
}
ic.setSelection(newPosition,newPosition);
}
 catch (Throwable e) {
Log.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger.isInstalled()) {
mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentKeyboard().getDefaultDictionaryLocale());
}
 else {
Intent voiceInputNotInstalledIntent=new Intent(getApplicationContext(),VoiceInputNotInstalledActivity.class);
voiceInputNotInstalledIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
startActivity(voiceInputNotInstalledIntent);
}
break;
case KeyCodes.CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
case KeyCodes.COMPACT_LAYOUT_TO_RIGHT:
case KeyCodes.COMPACT_LAYOUT_TO_LEFT:
if (getCurrentKeyboard() != null && mInputView != null) {
mKeyboardInCondensedMode=CondenseType.fromKeyCode(primaryCode);
AnyKeyboard currentKeyboard=getCurrentKeyboard();
setKeyboardStuffBeforeSetToView(currentKeyboard);
mInputView.setKeyboard(currentKeyboard);
}
break;
case KeyCodes.DOMAIN:
onText(mAskPrefs.getDomainText());
break;
case KeyCodes.QUICK_TEXT:
if (mDoNotFlipQuickTextKeyAndPopupFunctionality) {
outputCurrentQuickTextKey();
}
 else {
openQuickTextPopup(key);
}
break;
case KeyCodes.QUICK_TEXT_POPUP:
if (mDoNotFlipQuickTextKeyAndPopupFunctionality) {
openQuickTextPopup(key);
}
 else {
outputCurrentQuickTextKey();
}
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (mKeyboardSwitcher.shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
case KeyCodes.UTILITY_KEYBOARD:
mInputView.openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD:
Clipboard cp=AnyApplication.getFrankenRobot().embody(new Clipboard.ClipboardDiagram(getApplicationContext()));
CharSequence clipboardText=cp.getText();
if (!TextUtils.isEmpty(clipboardText)) {
onText(clipboardText);
}
break;
case KeyCodes.TAB:
sendTab();
break;
case KeyCodes.ESCAPE:
sendEscape();
break;
default :
if (mKeyboardSwitcher.isRightToLeftMode()) {
if (primaryCode == (int)')') primaryCode=(int)'(';
 else if (primaryCode == (int)'(') primaryCode=(int)')';
}
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
}
 else {
if (mControlKeyState.isActive() && primaryCode >= 32 && primaryCode < 127) {
int controlCode=primaryCode & 31;
Log.d(TAG,""String_Node_Str"",primaryCode,controlCode);
if (controlCode == 9) {
sendTab();
}
 else {
ic.commitText(Character.toString((char)controlCode),1);
}
}
 else {
handleCharacter(primaryCode,key,multiTapIndex,nearByKeyCodes);
}
mJustAddedAutoSpace=false;
}
break;
}
}",0.9877310649435628
157434,"@Override protected boolean onLongPress(Context packageContext,Key key,boolean isSticky,boolean requireSlideInto){
  if (key != null && key instanceof AnyKey) {
    AnyKey anyKey=(AnyKey)key;
    if (anyKey.longPressCode != 0) {
      invokeOnKey(anyKey.longPressCode,null,0);
      return true;
    }
 else     if (anyKey.codes[0] == KeyCodes.QUICK_TEXT) {
      invokeOnKey(KeyCodes.QUICK_TEXT_POPUP,null,0);
      return true;
    }
  }
  if (mAnimationLevel == AnimationsLevel.None) {
    mMiniKeyboardPopup.setAnimationStyle(0);
  }
 else   if (mExtensionVisible && mMiniKeyboardPopup.getAnimationStyle() != R.style.ExtensionKeyboardAnimation) {
    Log.d(TAG,""String_Node_Str"");
    mMiniKeyboardPopup.setAnimationStyle(R.style.ExtensionKeyboardAnimation);
  }
 else   if (!mExtensionVisible && mMiniKeyboardPopup.getAnimationStyle() != R.style.MiniKeyboardAnimation) {
    Log.d(TAG,""String_Node_Str"");
    mMiniKeyboardPopup.setAnimationStyle(R.style.MiniKeyboardAnimation);
  }
  return super.onLongPress(packageContext,key,isSticky,requireSlideInto);
}","@Override protected boolean onLongPress(Context packageContext,Key key,boolean isSticky,boolean requireSlideInto){
  if (key != null && key instanceof AnyKey) {
    AnyKey anyKey=(AnyKey)key;
    if (anyKey.longPressCode != 0) {
      invokeOnKey(anyKey.longPressCode,anyKey,0);
      return true;
    }
 else     if (anyKey.codes[0] == KeyCodes.QUICK_TEXT) {
      invokeOnKey(KeyCodes.QUICK_TEXT_POPUP,null,0);
      return true;
    }
  }
  if (mAnimationLevel == AnimationsLevel.None) {
    mMiniKeyboardPopup.setAnimationStyle(0);
  }
 else   if (mExtensionVisible && mMiniKeyboardPopup.getAnimationStyle() != R.style.ExtensionKeyboardAnimation) {
    Log.d(TAG,""String_Node_Str"");
    mMiniKeyboardPopup.setAnimationStyle(R.style.ExtensionKeyboardAnimation);
  }
 else   if (!mExtensionVisible && mMiniKeyboardPopup.getAnimationStyle() != R.style.MiniKeyboardAnimation) {
    Log.d(TAG,""String_Node_Str"");
    mMiniKeyboardPopup.setAnimationStyle(R.style.MiniKeyboardAnimation);
  }
  return super.onLongPress(packageContext,key,isSticky,requireSlideInto);
}",0.995296331138288
157435,"public void testOnClickBackSpace() throws Exception {
  OnKeyboardActionListener keyboardActionListener=Mockito.mock(OnKeyboardActionListener.class);
  FrameKeyboardViewClickListener listener=new FrameKeyboardViewClickListener(keyboardActionListener);
  Mockito.verifyZeroInteractions(keyboardActionListener);
  View view=new View(Robolectric.application);
  view.setId(R.id.quick_keys_popup_backspace);
  listener.onClick(view);
  Mockito.verify(keyboardActionListener).onKey(KeyEvent.KEYCODE_DEL,null,0,null,true);
  Mockito.verifyNoMoreInteractions(keyboardActionListener);
}","@Test public void testOnClickBackSpace() throws Exception {
  OnKeyboardActionListener keyboardActionListener=Mockito.mock(OnKeyboardActionListener.class);
  FrameKeyboardViewClickListener listener=new FrameKeyboardViewClickListener(keyboardActionListener);
  Mockito.verifyZeroInteractions(keyboardActionListener);
  View view=new View(Robolectric.application);
  view.setId(R.id.quick_keys_popup_backspace);
  listener.onClick(view);
  Mockito.verify(keyboardActionListener).onKey(KeyCodes.DELETE,null,0,null,true);
  Mockito.verifyNoMoreInteractions(keyboardActionListener);
}",0.9766637856525496
157436,"public void testOnClickEnter() throws Exception {
  OnKeyboardActionListener keyboardActionListener=Mockito.mock(OnKeyboardActionListener.class);
  FrameKeyboardViewClickListener listener=new FrameKeyboardViewClickListener(keyboardActionListener);
  Mockito.verifyZeroInteractions(keyboardActionListener);
  View view=new View(Robolectric.application);
  view.setId(R.id.quick_keys_popup_return);
  listener.onClick(view);
  Mockito.verify(keyboardActionListener).onKey(KeyEvent.KEYCODE_ENTER,null,0,null,true);
  Mockito.verifyNoMoreInteractions(keyboardActionListener);
}","@Test public void testOnClickEnter() throws Exception {
  OnKeyboardActionListener keyboardActionListener=Mockito.mock(OnKeyboardActionListener.class);
  FrameKeyboardViewClickListener listener=new FrameKeyboardViewClickListener(keyboardActionListener);
  Mockito.verifyZeroInteractions(keyboardActionListener);
  View view=new View(Robolectric.application);
  view.setId(R.id.quick_keys_popup_return);
  listener.onClick(view);
  Mockito.verify(keyboardActionListener).onKey(KeyCodes.ENTER,null,0,null,true);
  Mockito.verifyNoMoreInteractions(keyboardActionListener);
}",0.9790209790209792
157437,"public void testOnClickClose() throws Exception {
  OnKeyboardActionListener keyboardActionListener=Mockito.mock(OnKeyboardActionListener.class);
  FrameKeyboardViewClickListener listener=new FrameKeyboardViewClickListener(keyboardActionListener);
  Mockito.verifyZeroInteractions(keyboardActionListener);
  View view=new View(Robolectric.application);
  view.setId(R.id.quick_keys_popup_close);
  listener.onClick(view);
  Mockito.verify(keyboardActionListener).onCancel();
  Mockito.verifyNoMoreInteractions(keyboardActionListener);
}","@Test public void testOnClickClose() throws Exception {
  OnKeyboardActionListener keyboardActionListener=Mockito.mock(OnKeyboardActionListener.class);
  FrameKeyboardViewClickListener listener=new FrameKeyboardViewClickListener(keyboardActionListener);
  Mockito.verifyZeroInteractions(keyboardActionListener);
  View view=new View(Robolectric.application);
  view.setId(R.id.quick_keys_popup_close);
  listener.onClick(view);
  Mockito.verify(keyboardActionListener).onCancel();
  Mockito.verifyNoMoreInteractions(keyboardActionListener);
}",0.9944341372912802
157438,"public QuickKeysPagerAdapter(@NonNull Context context,@NonNull List<QuickTextKey> quickTextKeys,OnKeyboardActionListener keyboardActionListener){
  mContext=context;
  mQuickTextKeys=quickTextKeys.toArray(new QuickTextKey[quickTextKeys.size()]);
  mLayoutInflater=LayoutInflater.from(context);
}","public QuickKeysPagerAdapter(@NonNull Context context,@NonNull List<QuickTextKey> quickTextKeys,OnKeyboardActionListener keyboardActionListener){
  mKeyboardActionListener=keyboardActionListener;
  mQuickTextKeys=quickTextKeys.toArray(new QuickTextKey[quickTextKeys.size()]);
  mLayoutInflater=LayoutInflater.from(context);
}",0.9064516129032258
157439,"@Override public Object instantiateItem(ViewGroup container,int position){
  TextView root=(TextView)mLayoutInflater.inflate(R.layout.quick_text_popup_keyboard_view,container,false);
  QuickTextKey quickTextKey=mQuickTextKeys[position];
  root.setTag(quickTextKey);
  root.setText(quickTextKey.getName());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
    root.setCompoundDrawablesRelativeWithIntrinsicBounds(quickTextKey.getKeyIconResId(),0,0,0);
  }
 else {
    root.setCompoundDrawablesWithIntrinsicBounds(quickTextKey.getKeyIconResId(),0,0,0);
  }
  return root;
}","@Override public Object instantiateItem(ViewGroup container,int position){
  TextView root=(TextView)mLayoutInflater.inflate(R.layout.quick_text_popup_keyboard_view,container,false);
  QuickTextKey quickTextKey=mQuickTextKeys[position];
  root.setTag(quickTextKey);
  root.setText(quickTextKey.getName());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
    root.setCompoundDrawablesRelativeWithIntrinsicBounds(quickTextKey.getKeyIconResId(),0,0,0);
  }
 else {
    root.setCompoundDrawablesWithIntrinsicBounds(quickTextKey.getKeyIconResId(),0,0,0);
  }
  container.addView(root);
  return root;
}",0.977667493796526
157440,"@Override public boolean isViewFromObject(View view,Object object){
  return view.getTag() == object;
}","@Override public boolean isViewFromObject(View view,Object object){
  return view == object;
}",0.9543147208121828
157441,"private void handleControl(boolean reset){
  if (mInputView == null)   return;
  if (reset) {
    mInputView.setControl(false);
  }
 else {
    mInputView.setControl(!mInputView.isControl());
  }
}","private void handleControl(boolean reset){
  if (mInputView != null && mKeyboardSwitcher.isAlphabetMode()) {
    if (reset) {
      mControlKeyState.reset();
    }
    mInputView.setControl(mControlKeyState.isActive());
  }
}",0.3507109004739336
157442,"public void onKey(int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes,boolean fromUI){
  Log.d(TAG,""String_Node_Str"" + primaryCode);
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.ENTER:
case KeyCodes.SPACE:
    handleSeparator(primaryCode);
  if (!mKeyboardSwitcher.isAlphabetMode()) {
    Log.d(TAG,""String_Node_Str"");
    if (mAskPrefs.getSwitchKeyboardOnSpace()) {
      Log.d(TAG,""String_Node_Str"");
      mKeyboardSwitcher.nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
    }
  }
break;
case KeyCodes.DELETE_WORD:
if (ic == null) break;
handleBackword(ic);
break;
case KeyCodes.DELETE:
if (ic == null) break;
if (mInputView != null && mInputView.isShifted() && !mInputView.getKeyboard().isShiftLocked() && ((mDistinctMultiTouch && mShiftKeyState.isPressed()) || mAskPrefs.useBackword())) {
handleBackword(ic);
}
 else {
handleDeleteLastCharacter(false);
}
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
commitTyped(ic);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.SHIFT:
if ((!mDistinctMultiTouch) || !fromUI) handleShift(false);
break;
case KeyCodes.CTRL:
if ((!mDistinctMultiTouch) || !fromUI) handleControl(false);
break;
case KeyCodes.ARROW_LEFT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_LEFT);
break;
case KeyCodes.ARROW_RIGHT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_RIGHT);
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) newPosition=0;
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) newPosition=textAfter.length();
try {
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
if (!TextUtils.isEmpty(textBefore)) {
newPosition=newPosition + textBefore.length();
}
ic.setSelection(newPosition,newPosition);
}
 catch (Throwable e) {
Log.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger != null) mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentKeyboard().getDefaultDictionaryLocale());
break;
case KeyCodes.CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
case KeyCodes.COMPACT_LAYOUT_TO_RIGHT:
case KeyCodes.COMPACT_LAYOUT_TO_LEFT:
if (getCurrentKeyboard() != null && mInputView != null) {
mKeyboardInCondensedMode=CondenseType.fromKeyCode(primaryCode);
AnyKeyboard currentKeyboard=getCurrentKeyboard();
setKeyboardStuffBeforeSetToView(currentKeyboard);
mInputView.setKeyboard(currentKeyboard);
}
break;
case KeyCodes.DOMAIN:
onText(mAskPrefs.getDomainText());
break;
case KeyCodes.QUICK_TEXT:
QuickTextKey quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.QUICK_TEXT_POPUP:
quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (quickTextKey.getId().equals(SMILEY_PLUGIN_ID) && !mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (mKeyboardSwitcher.shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
case KeyCodes.UTILITY_KEYBOARD:
mInputView.openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD:
Clipboard cp=AnyApplication.getFrankenRobot().embody(new Clipboard.ClipboardDiagram(getApplicationContext()));
CharSequence clipboardText=cp.getText();
if (!TextUtils.isEmpty(clipboardText)) {
onText(clipboardText);
}
break;
case KeyCodes.TAB:
sendTab();
break;
case KeyCodes.ESCAPE:
sendEscape();
break;
default :
if (mKeyboardSwitcher.isRightToLeftMode()) {
if (primaryCode == (int)')') primaryCode=(int)'(';
 else if (primaryCode == (int)'(') primaryCode=(int)')';
}
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
}
 else {
if (mInputView != null && mInputView.isControl() && primaryCode >= 32 && primaryCode < 127) {
int controlCode=primaryCode & 31;
Log.d(TAG,""String_Node_Str"" + primaryCode + ""String_Node_Str""+ controlCode);
if (controlCode == 9) {
sendTab();
}
 else {
ic.commitText(Character.toString((char)controlCode),1);
}
}
 else {
handleCharacter(primaryCode,key,multiTapIndex,nearByKeyCodes);
}
mJustAddedAutoSpace=false;
}
break;
}
}","public void onKey(int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes,boolean fromUI){
  Log.d(TAG,""String_Node_Str"" + primaryCode);
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.ENTER:
case KeyCodes.SPACE:
    handleSeparator(primaryCode);
  if (!mKeyboardSwitcher.isAlphabetMode()) {
    Log.d(TAG,""String_Node_Str"");
    if (mAskPrefs.getSwitchKeyboardOnSpace()) {
      Log.d(TAG,""String_Node_Str"");
      mKeyboardSwitcher.nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
    }
  }
break;
case KeyCodes.DELETE_WORD:
if (ic == null) break;
handleBackword(ic);
break;
case KeyCodes.DELETE:
if (ic == null) break;
if (mInputView != null && mInputView.isShifted() && !mInputView.getKeyboard().isShiftLocked() && ((mDistinctMultiTouch && mShiftKeyState.isPressed()) || mAskPrefs.useBackword())) {
handleBackword(ic);
}
 else {
handleDeleteLastCharacter(false);
}
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
commitTyped(ic);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.SHIFT:
if ((!mDistinctMultiTouch) || !fromUI) handleShift(false);
break;
case KeyCodes.CTRL:
if ((!mDistinctMultiTouch) || !fromUI) handleControl(false);
break;
case KeyCodes.ARROW_LEFT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_LEFT);
break;
case KeyCodes.ARROW_RIGHT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_RIGHT);
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) newPosition=0;
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) newPosition=textAfter.length();
try {
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
if (!TextUtils.isEmpty(textBefore)) {
newPosition=newPosition + textBefore.length();
}
ic.setSelection(newPosition,newPosition);
}
 catch (Throwable e) {
Log.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger != null) mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentKeyboard().getDefaultDictionaryLocale());
break;
case KeyCodes.CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
case KeyCodes.COMPACT_LAYOUT_TO_RIGHT:
case KeyCodes.COMPACT_LAYOUT_TO_LEFT:
if (getCurrentKeyboard() != null && mInputView != null) {
mKeyboardInCondensedMode=CondenseType.fromKeyCode(primaryCode);
AnyKeyboard currentKeyboard=getCurrentKeyboard();
setKeyboardStuffBeforeSetToView(currentKeyboard);
mInputView.setKeyboard(currentKeyboard);
}
break;
case KeyCodes.DOMAIN:
onText(mAskPrefs.getDomainText());
break;
case KeyCodes.QUICK_TEXT:
QuickTextKey quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.QUICK_TEXT_POPUP:
quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (quickTextKey.getId().equals(SMILEY_PLUGIN_ID) && !mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (mKeyboardSwitcher.shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
case KeyCodes.UTILITY_KEYBOARD:
mInputView.openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD:
Clipboard cp=AnyApplication.getFrankenRobot().embody(new Clipboard.ClipboardDiagram(getApplicationContext()));
CharSequence clipboardText=cp.getText();
if (!TextUtils.isEmpty(clipboardText)) {
onText(clipboardText);
}
break;
case KeyCodes.TAB:
sendTab();
break;
case KeyCodes.ESCAPE:
sendEscape();
break;
default :
if (mKeyboardSwitcher.isRightToLeftMode()) {
if (primaryCode == (int)')') primaryCode=(int)'(';
 else if (primaryCode == (int)'(') primaryCode=(int)')';
}
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
}
 else {
if (mControlKeyState.isActive() && primaryCode >= 32 && primaryCode < 127) {
int controlCode=primaryCode & 31;
Log.d(TAG,""String_Node_Str"",primaryCode,controlCode);
if (controlCode == 9) {
sendTab();
}
 else {
ic.commitText(Character.toString((char)controlCode),1);
}
}
 else {
handleCharacter(primaryCode,key,multiTapIndex,nearByKeyCodes);
}
mJustAddedAutoSpace=false;
}
break;
}
}",0.9911819306930691
157443,"public void onKey(int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes,boolean fromUI){
  Log.d(TAG,""String_Node_Str"" + primaryCode);
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.ENTER:
    handleSeparator(primaryCode);
  break;
case KeyCodes.DELETE_WORD:
if (ic == null) break;
handleBackword(ic);
break;
case KeyCodes.DELETE:
if (ic == null) break;
if (mInputView != null && mInputView.isShifted() && !mInputView.getKeyboard().isShiftLocked() && ((mDistinctMultiTouch && mShiftKeyState.isPressed()) || mAskPrefs.useBackword())) {
handleBackword(ic);
}
 else {
handleDeleteLastCharacter(false);
}
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
commitTyped(ic);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.SHIFT:
if ((!mDistinctMultiTouch) || !fromUI) handleShift(false);
break;
case KeyCodes.CTRL:
if ((!mDistinctMultiTouch) || !fromUI) handleControl(false);
break;
case KeyCodes.ARROW_LEFT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_LEFT);
break;
case KeyCodes.ARROW_RIGHT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_RIGHT);
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) newPosition=0;
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) newPosition=textAfter.length();
try {
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
if (!TextUtils.isEmpty(textBefore)) {
newPosition=newPosition + textBefore.length();
}
ic.setSelection(newPosition,newPosition);
}
 catch (Throwable e) {
Log.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger != null) mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentKeyboard().getDefaultDictionaryLocale());
break;
case KeyCodes.CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
case KeyCodes.COMPACT_LAYOUT_TO_RIGHT:
case KeyCodes.COMPACT_LAYOUT_TO_LEFT:
if (getCurrentKeyboard() != null && mInputView != null) {
mKeyboardInCondensedMode=CondenseType.fromKeyCode(primaryCode);
AnyKeyboard currentKeyboard=getCurrentKeyboard();
setKeyboardStuffBeforeSetToView(currentKeyboard);
mInputView.setKeyboard(currentKeyboard);
}
break;
case KeyCodes.DOMAIN:
onText(mAskPrefs.getDomainText());
break;
case KeyCodes.QUICK_TEXT:
QuickTextKey quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.QUICK_TEXT_POPUP:
quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (quickTextKey.getId().equals(SMILEY_PLUGIN_ID) && !mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (mKeyboardSwitcher.shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
case KeyCodes.UTILITY_KEYBOARD:
mInputView.openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD:
Clipboard cp=AnyApplication.getFrankenRobot().embody(new Clipboard.ClipboardDiagram(getApplicationContext()));
CharSequence clipboardText=cp.getText();
if (!TextUtils.isEmpty(clipboardText)) {
onText(clipboardText);
}
break;
case KeyCodes.TAB:
sendTab();
break;
case KeyCodes.ESCAPE:
sendEscape();
break;
default :
if (mKeyboardSwitcher.isRightToLeftMode()) {
if (primaryCode == (int)')') primaryCode=(int)'(';
 else if (primaryCode == (int)'(') primaryCode=(int)')';
}
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
}
 else {
if (mInputView != null && mInputView.isControl() && primaryCode >= 32 && primaryCode < 127) {
int controlCode=primaryCode & 31;
Log.d(TAG,""String_Node_Str"" + primaryCode + ""String_Node_Str""+ controlCode);
if (controlCode == 9) {
sendTab();
}
 else {
ic.commitText(Character.toString((char)controlCode),1);
}
}
 else {
handleCharacter(primaryCode,key,multiTapIndex,nearByKeyCodes);
}
mJustAddedAutoSpace=false;
}
if (mKeyboardSwitcher.isKeyCodeRequireSwitchingToAlphabet(primaryCode)) {
mKeyboardSwitcher.nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
}
break;
}
}","public void onKey(int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes,boolean fromUI){
  Log.d(TAG,""String_Node_Str"" + primaryCode);
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.ENTER:
case KeyCodes.SPACE:
    handleSeparator(primaryCode);
  if (!mKeyboardSwitcher.isAlphabetMode()) {
    Log.d(TAG,""String_Node_Str"");
    if (mAskPrefs.getSwitchKeyboardOnSpace()) {
      Log.d(TAG,""String_Node_Str"");
      mKeyboardSwitcher.nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
    }
  }
break;
case KeyCodes.DELETE_WORD:
if (ic == null) break;
handleBackword(ic);
break;
case KeyCodes.DELETE:
if (ic == null) break;
if (mInputView != null && mInputView.isShifted() && !mInputView.getKeyboard().isShiftLocked() && ((mDistinctMultiTouch && mShiftKeyState.isPressed()) || mAskPrefs.useBackword())) {
handleBackword(ic);
}
 else {
handleDeleteLastCharacter(false);
}
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
commitTyped(ic);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.SHIFT:
if ((!mDistinctMultiTouch) || !fromUI) handleShift(false);
break;
case KeyCodes.CTRL:
if ((!mDistinctMultiTouch) || !fromUI) handleControl(false);
break;
case KeyCodes.ARROW_LEFT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_LEFT);
break;
case KeyCodes.ARROW_RIGHT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_RIGHT);
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) newPosition=0;
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) newPosition=textAfter.length();
try {
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
if (!TextUtils.isEmpty(textBefore)) {
newPosition=newPosition + textBefore.length();
}
ic.setSelection(newPosition,newPosition);
}
 catch (Throwable e) {
Log.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger != null) mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentKeyboard().getDefaultDictionaryLocale());
break;
case KeyCodes.CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
case KeyCodes.COMPACT_LAYOUT_TO_RIGHT:
case KeyCodes.COMPACT_LAYOUT_TO_LEFT:
if (getCurrentKeyboard() != null && mInputView != null) {
mKeyboardInCondensedMode=CondenseType.fromKeyCode(primaryCode);
AnyKeyboard currentKeyboard=getCurrentKeyboard();
setKeyboardStuffBeforeSetToView(currentKeyboard);
mInputView.setKeyboard(currentKeyboard);
}
break;
case KeyCodes.DOMAIN:
onText(mAskPrefs.getDomainText());
break;
case KeyCodes.QUICK_TEXT:
QuickTextKey quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.QUICK_TEXT_POPUP:
quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (quickTextKey.getId().equals(SMILEY_PLUGIN_ID) && !mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (mKeyboardSwitcher.shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
case KeyCodes.UTILITY_KEYBOARD:
mInputView.openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD:
Clipboard cp=AnyApplication.getFrankenRobot().embody(new Clipboard.ClipboardDiagram(getApplicationContext()));
CharSequence clipboardText=cp.getText();
if (!TextUtils.isEmpty(clipboardText)) {
onText(clipboardText);
}
break;
case KeyCodes.TAB:
sendTab();
break;
case KeyCodes.ESCAPE:
sendEscape();
break;
default :
if (mKeyboardSwitcher.isRightToLeftMode()) {
if (primaryCode == (int)')') primaryCode=(int)'(';
 else if (primaryCode == (int)'(') primaryCode=(int)')';
}
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
}
 else {
if (mInputView != null && mInputView.isControl() && primaryCode >= 32 && primaryCode < 127) {
int controlCode=primaryCode & 31;
Log.d(TAG,""String_Node_Str"" + primaryCode + ""String_Node_Str""+ controlCode);
if (controlCode == 9) {
sendTab();
}
 else {
ic.commitText(Character.toString((char)controlCode),1);
}
}
 else {
handleCharacter(primaryCode,key,multiTapIndex,nearByKeyCodes);
}
mJustAddedAutoSpace=false;
}
break;
}
}",0.9588977113498364
157444,"@Override public boolean onTouchEvent(MotionEvent ev){
  int singleFingerEventPointerId=mSingleFingerEventPointerId;
switch (MotionEventCompat.getActionMasked(ev)) {
case MotionEvent.ACTION_DOWN:
    if (ev.getPointerCount() == 1) {
      mSingleFingerEventPointerId=ev.getPointerId(0);
      singleFingerEventPointerId=mSingleFingerEventPointerId;
    }
  break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (ev.getPointerCount() == 1) mSingleFingerEventPointerId=NOT_A_POINTER_ID;
}
try {
mScaleGestureDetector.onTouchEvent(ev);
}
 catch (IllegalArgumentException e) {
}
catch (ArrayIndexOutOfBoundsException e) {
}
if (ev.getPointerCount() == 1 && ev.getPointerId(0) == singleFingerEventPointerId) return super.onTouchEvent(ev);
 else return false;
}","@Override public boolean onTouchEvent(@Nonnull MotionEvent ev){
  int singleFingerEventPointerId=mSingleFingerEventPointerId;
switch (MotionEventCompat.getActionMasked(ev)) {
case MotionEvent.ACTION_DOWN:
    if (ev.getPointerCount() == 1) {
      mSingleFingerEventPointerId=ev.getPointerId(0);
      singleFingerEventPointerId=mSingleFingerEventPointerId;
    }
  break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (ev.getPointerCount() == 1) mSingleFingerEventPointerId=NOT_A_POINTER_ID;
}
try {
mScaleGestureDetector.onTouchEvent(ev);
}
 catch (IllegalArgumentException e) {
}
catch (ArrayIndexOutOfBoundsException e) {
}
if (ev.getPointerCount() == 1 && ev.getPointerId(0) == singleFingerEventPointerId) return super.onTouchEvent(ev);
 else return false;
}",0.9941972920696324
157445,"public AskV8GestureDetector(Context context,AskOnGestureListener listener,Handler handler,boolean ignoreMultitouch){
  super(context,listener,handler,ignoreMultitouch);
  mListener=listener;
  mScaleGestureDetector=new ScaleGestureDetector(context,new ScaleGestureDetector.SimpleOnScaleGestureListener(){
    @Override public boolean onScale(    ScaleGestureDetector detector){
      final float factor=detector.getScaleFactor();
      Log.d(TAG,""String_Node_Str"" + factor);
      if (factor > 1.1)       return mListener.onSeparate(factor);
 else       if (factor < 0.9)       return mListener.onPinch(factor);
      return false;
    }
  }
);
}","public AskV8GestureDetector(Context context,AskOnGestureListener listener){
  super(context,listener,null,true);
  mListener=listener;
  mScaleGestureDetector=new ScaleGestureDetector(context,new ScaleGestureDetector.SimpleOnScaleGestureListener(){
    @Override public boolean onScale(    ScaleGestureDetector detector){
      final float factor=detector.getScaleFactor();
      Log.d(TAG,""String_Node_Str"" + factor);
      if (factor > 1.1)       return mListener.onSeparate(factor);
 else       if (factor < 0.9)       return mListener.onPinch(factor);
      return false;
    }
  }
);
}",0.9029126213592232
157446,"@Override public GestureDetector createGestureDetector(Context appContext,AskOnGestureListener listener){
  return new AskV8GestureDetector(appContext,listener,null,true);
}","@Override public GestureDetector createGestureDetector(Context appContext,AskOnGestureListener listener){
  return new AskV8GestureDetector(appContext,listener);
}",0.9702380952380952
157447,"private boolean canRestartWordSuggestion(final InputConnection ic){
  if (mPredicting || !isPredictionOn() || !mAllowSuggestionsRestart|| !mCurrentlyAllowSuggestionRestart|| mInputView == null || !mInputView.isShown()) {
    Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + mPredicting + ""String_Node_Str""+ isPredictionOn()+ ""String_Node_Str""+ mAllowSuggestionsRestart+ ""String_Node_Str""+ mCurrentlyAllowSuggestionRestart);
    return false;
  }
 else   if (!isCursorTouchingWord()) {
    Log.d(TAG,""String_Node_Str"");
    return false;
  }
  return true;
}","private boolean canRestartWordSuggestion(final InputConnection ic){
  if (mPredicting || !isPredictionOn() || !mAllowSuggestionsRestart|| !mCurrentlyAllowSuggestionRestart|| mInputView == null || !mInputView.isShown()) {
    Log.d(TAG,""String_Node_Str"",mPredicting,isPredictionOn(),mAllowSuggestionsRestart,mCurrentlyAllowSuggestionRestart);
    return false;
  }
 else   if (!isCursorTouchingWord()) {
    Log.d(TAG,""String_Node_Str"");
    return false;
  }
  return true;
}",0.5769603097773476
157448,"private void upgradeSettingsValues(SharedPreferences sp){
  Log.d(TAG,""String_Node_Str"");
  int configurationVersion=sp.getInt(CONFIGURATION_VERSION,5);
  if (configurationVersion < 1) {
    boolean oldLandscapeFullScreenValue=sp.getBoolean(""String_Node_Str"",mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
    Log.i(TAG,""String_Node_Str"");
    Editor e=sp.edit();
    e.putBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),oldLandscapeFullScreenValue);
    e.remove(""String_Node_Str"");
    e.putInt(CONFIGURATION_VERSION,1);
    e.commit();
  }
  if (configurationVersion < 2) {
    Log.i(TAG,""String_Node_Str"");
    Editor e=sp.edit();
    e.putString(""String_Node_Str"",mContext.getString(R.string.settings_default_portrait_keyboard_height_factor));
    e.putString(""String_Node_Str"",mContext.getString(R.string.settings_default_landscape_keyboard_height_factor));
    e.putInt(CONFIGURATION_VERSION,2);
    e.commit();
  }
  if (configurationVersion < 3) {
    Editor e=sp.edit();
    if (Workarounds.getApiLevel() <= 7) {
      Log.i(TAG,""String_Node_Str"");
      final String bottomRowKey=mContext.getString(R.string.settings_key_ext_kbd_bottom_row_key);
      String currentBottomRowId=sp.getString(bottomRowKey,mContext.getString(R.string.settings_default_ext_kbd_bottom_row_key));
      String newBottomRowId=""String_Node_Str"";
      if (currentBottomRowId.equals(""String_Node_Str"")) {
        newBottomRowId=""String_Node_Str"";
      }
 else       if (currentBottomRowId.equals(""String_Node_Str"")) {
        newBottomRowId=""String_Node_Str"";
      }
      if (!TextUtils.isEmpty(newBottomRowId)) {
        Log.i(TAG,""String_Node_Str"" + currentBottomRowId + ""String_Node_Str""+ newBottomRowId+ ""String_Node_Str"");
        e.putString(bottomRowKey,newBottomRowId);
      }
    }
    e.putInt(CONFIGURATION_VERSION,3);
    e.commit();
  }
  if (configurationVersion < 4) {
    Editor e=sp.edit();
    Log.i(TAG,""String_Node_Str"");
    e.putBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
    e.putInt(CONFIGURATION_VERSION,4);
    e.commit();
  }
  if (configurationVersion < 5) {
    Editor e=sp.edit();
    Log.i(TAG,""String_Node_Str"");
    e.putBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),getAlwaysUseDrawTextDefault());
    e.putInt(CONFIGURATION_VERSION,5);
    e.commit();
  }
}","private void upgradeSettingsValues(SharedPreferences sp){
  Log.d(TAG,""String_Node_Str"");
  int configurationVersion=sp.getInt(CONFIGURATION_VERSION,6);
  if (configurationVersion < 1) {
    boolean oldLandscapeFullScreenValue=sp.getBoolean(""String_Node_Str"",mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
    Log.i(TAG,""String_Node_Str"");
    Editor e=sp.edit();
    e.putBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),oldLandscapeFullScreenValue);
    e.remove(""String_Node_Str"");
    e.putInt(CONFIGURATION_VERSION,1);
    e.commit();
  }
  if (configurationVersion < 2) {
    Log.i(TAG,""String_Node_Str"");
    Editor e=sp.edit();
    e.putString(""String_Node_Str"",mContext.getString(R.string.settings_default_portrait_keyboard_height_factor));
    e.putString(""String_Node_Str"",mContext.getString(R.string.settings_default_landscape_keyboard_height_factor));
    e.putInt(CONFIGURATION_VERSION,2);
    e.commit();
  }
  if (configurationVersion < 3) {
    Editor e=sp.edit();
    if (Workarounds.getApiLevel() <= 7) {
      Log.i(TAG,""String_Node_Str"");
      final String bottomRowKey=mContext.getString(R.string.settings_key_ext_kbd_bottom_row_key);
      String currentBottomRowId=sp.getString(bottomRowKey,mContext.getString(R.string.settings_default_ext_kbd_bottom_row_key));
      String newBottomRowId=""String_Node_Str"";
      if (currentBottomRowId.equals(""String_Node_Str"")) {
        newBottomRowId=""String_Node_Str"";
      }
 else       if (currentBottomRowId.equals(""String_Node_Str"")) {
        newBottomRowId=""String_Node_Str"";
      }
      if (!TextUtils.isEmpty(newBottomRowId)) {
        Log.i(TAG,""String_Node_Str"" + currentBottomRowId + ""String_Node_Str""+ newBottomRowId+ ""String_Node_Str"");
        e.putString(bottomRowKey,newBottomRowId);
      }
    }
    e.putInt(CONFIGURATION_VERSION,3);
    e.commit();
  }
  if (configurationVersion < 4) {
    Editor e=sp.edit();
    Log.i(TAG,""String_Node_Str"");
    e.putBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
    e.putInt(CONFIGURATION_VERSION,4);
    e.commit();
  }
  if (configurationVersion < 5) {
    Editor e=sp.edit();
    Log.i(TAG,""String_Node_Str"");
    e.putBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),getAlwaysUseDrawTextDefault());
    e.putInt(CONFIGURATION_VERSION,5);
    e.commit();
  }
  if (configurationVersion < 6) {
    Editor e=sp.edit();
    Log.i(TAG,""String_Node_Str"");
    e.remove(mContext.getString(R.string.settings_key_allow_suggestions_restart));
    e.putInt(CONFIGURATION_VERSION,6);
    e.commit();
  }
}",0.9546153846153846
157449,"@Override public void onCreate(){
  SharedPreferencesBackupHelper helper=new SharedPreferencesBackupHelper(getApplicationContext(),DEFAULT_PREFS_FILE){
    @Override public void restoreEntity(    BackupDataInputStream data){
      final String key=data.getKey();
      if (!TextUtils.isEmpty(key)) {
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_default_split_state)))         return;
        if (key.equalsIgnoreCase(""String_Node_Str""))         return;
        if (key.equalsIgnoreCase(""String_Node_Str""))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_portrait_fullscreen)))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_landscape_fullscreen)))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_workaround_disable_rtl_fix)))         return;
      }
      super.restoreEntity(data);
    }
  }
;
  addHelper(PREFS_BACKUP_KEY,helper);
}","@Override public void onCreate(){
  SharedPreferencesBackupHelper helper=new SharedPreferencesBackupHelper(getApplicationContext(),DEFAULT_PREFS_FILE){
    @Override public void restoreEntity(    BackupDataInputStream data){
      final String key=data.getKey();
      if (!TextUtils.isEmpty(key)) {
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_default_split_state)))         return;
        if (key.equalsIgnoreCase(""String_Node_Str""))         return;
        if (key.equalsIgnoreCase(""String_Node_Str""))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_portrait_fullscreen)))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_landscape_fullscreen)))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_workaround_disable_rtl_fix)))         return;
        if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_allow_suggestions_restart)))         return;
      }
      super.restoreEntity(data);
    }
  }
;
  addHelper(PREFS_BACKUP_KEY,helper);
}",0.9400179051029544
157450,"@Override public void restoreEntity(BackupDataInputStream data){
  final String key=data.getKey();
  if (!TextUtils.isEmpty(key)) {
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_default_split_state)))     return;
    if (key.equalsIgnoreCase(""String_Node_Str""))     return;
    if (key.equalsIgnoreCase(""String_Node_Str""))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_portrait_fullscreen)))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_landscape_fullscreen)))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_workaround_disable_rtl_fix)))     return;
  }
  super.restoreEntity(data);
}","@Override public void restoreEntity(BackupDataInputStream data){
  final String key=data.getKey();
  if (!TextUtils.isEmpty(key)) {
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_default_split_state)))     return;
    if (key.equalsIgnoreCase(""String_Node_Str""))     return;
    if (key.equalsIgnoreCase(""String_Node_Str""))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_portrait_fullscreen)))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_landscape_fullscreen)))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_workaround_disable_rtl_fix)))     return;
    if (key.equalsIgnoreCase(getApplicationContext().getString(R.string.settings_key_allow_suggestions_restart)))     return;
  }
  super.restoreEntity(data);
}",0.9249106078665076
157451,"@Override public boolean onTouchEvent(MotionEvent ev){
  try {
    mScaleGestureDetector.onTouchEvent(ev);
  }
 catch (  IllegalArgumentException e) {
  }
catch (  ArrayIndexOutOfBoundsException e) {
  }
  return super.onTouchEvent(ev);
}","@Override public boolean onTouchEvent(MotionEvent ev){
switch (MotionEventCompat.getActionMasked(ev)) {
case MotionEvent.ACTION_DOWN:
    if (ev.getPointerCount() == 1)     mSingleFingerEventPointerId=ev.getPointerId(0);
  break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (ev.getPointerCount() == 1) mSingleFingerEventPointerId=NOT_A_POINTER_ID;
}
try {
mScaleGestureDetector.onTouchEvent(ev);
}
 catch (IllegalArgumentException e) {
}
catch (ArrayIndexOutOfBoundsException e) {
}
if (ev.getPointerCount() == 1 && ev.getPointerId(0) == mSingleFingerEventPointerId) return super.onTouchEvent(ev);
 else return false;
}",0.5068493150684932
157452,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  Log.d(TAG,""String_Node_Str"" + (savedInstanceState != null));
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  if (savedInstanceState == null) {
    FragmentManager fragmentManager=getChildFragmentManager();
    fragmentManager.beginTransaction().replace(R.id.change_log_fragment,new ChangeLogFragment.CardedChangeLogFragment()).replace(R.id.tip_fragment,new TipsFragment.RandomTipFragment()).commit();
  }
}",0.4349258649093904
157453,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mFullIndicator=view.findViewById(R.id.selected_page_indicator);
  mWizardPager=(ViewPager)view.findViewById(R.id.wizard_pages_pager);
  isInTabletUi=(mWizardPager == null);
  if (isInTabletUi) {
    FragmentManager fragmentManager=getChildFragmentManager();
    fragmentManager.beginTransaction().add(R.id.wizard_step_one,new WizardPageEnableKeyboardFragment()).add(R.id.wizard_step_two,new WizardPageSwitchToKeyboardFragment()).add(R.id.wizard_step_three,new WizardPageDoneAndMoreSettingsFragment()).commit();
  }
 else {
    mWizardPager.setAdapter(new WizardPagesAdapter(getChildFragmentManager()));
    mWizardPager.setOnPageChangeListener(onPageChangedListener);
  }
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mFullIndicator=view.findViewById(R.id.selected_page_indicator);
  mWizardPager=(ViewPager)view.findViewById(R.id.wizard_pages_pager);
  isInTabletUi=(mWizardPager == null);
  if (isInTabletUi) {
    if (savedInstanceState == null) {
      FragmentManager fragmentManager=getChildFragmentManager();
      fragmentManager.beginTransaction().replace(R.id.wizard_step_one,new WizardPageEnableKeyboardFragment()).replace(R.id.wizard_step_two,new WizardPageSwitchToKeyboardFragment()).replace(R.id.wizard_step_three,new WizardPageDoneAndMoreSettingsFragment()).commit();
    }
  }
 else {
    mWizardPager.setAdapter(new WizardPagesAdapter(getChildFragmentManager()));
    mWizardPager.setOnPageChangeListener(onPageChangedListener);
  }
}",0.9528415961305924
157454,"private void scrollToPageRequiresSetup(){
  if (mWizardPager == null)   return;
  int positionToStartAt=0;
  if (SetupSupport.isThisKeyboardEnabled(getActivity())) {
    positionToStartAt=1;
    if (SetupSupport.isThisKeyboardSetAsDefaultIME(getActivity())) {
      positionToStartAt=2;
    }
  }
  mUiHandler.removeMessages(KEY_MESSAGE_SCROLL_TO_PAGE);
  mUiHandler.sendMessageDelayed(mUiHandler.obtainMessage(KEY_MESSAGE_SCROLL_TO_PAGE,positionToStartAt,0),getResources().getInteger(android.R.integer.config_longAnimTime));
}","private void scrollToPageRequiresSetup(){
  if (isInTabletUi)   return;
  int positionToStartAt=0;
  if (SetupSupport.isThisKeyboardEnabled(getActivity())) {
    positionToStartAt=1;
    if (SetupSupport.isThisKeyboardSetAsDefaultIME(getActivity())) {
      positionToStartAt=2;
    }
  }
  mUiHandler.removeMessages(KEY_MESSAGE_SCROLL_TO_PAGE);
  mUiHandler.sendMessageDelayed(mUiHandler.obtainMessage(KEY_MESSAGE_SCROLL_TO_PAGE,positionToStartAt,0),getResources().getInteger(android.R.integer.config_longAnimTime));
}",0.9694072657743786
157455,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mFullIndicator=view.findViewById(R.id.selected_page_indicator);
  mWizardPager=(ViewPager)view.findViewById(R.id.wizard_pages_pager);
  if (mWizardPager != null) {
    mWizardPager.setAdapter(new WizardPagesAdapter(getChildFragmentManager()));
    mWizardPager.setOnPageChangeListener(onPageChangedListener);
  }
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mFullIndicator=view.findViewById(R.id.selected_page_indicator);
  mWizardPager=(ViewPager)view.findViewById(R.id.wizard_pages_pager);
  isInTabletUi=(mWizardPager == null);
  if (isInTabletUi) {
    FragmentManager fragmentManager=getChildFragmentManager();
    fragmentManager.beginTransaction().add(R.id.wizard_step_one,new WizardPageEnableKeyboardFragment()).add(R.id.wizard_step_two,new WizardPageSwitchToKeyboardFragment()).add(R.id.wizard_step_three,new WizardPageDoneAndMoreSettingsFragment()).commit();
  }
 else {
    mWizardPager.setAdapter(new WizardPagesAdapter(getChildFragmentManager()));
    mWizardPager.setOnPageChangeListener(onPageChangedListener);
  }
}",0.5425101214574899
157456,"private void refreshFragmentsUi(){
  if (mWizardPager != null) {
    mWizardPager.getAdapter().notifyDataSetChanged();
    scrollToPageRequiresSetup();
  }
 else {
    FragmentManager fragmentManager=getFragmentManager();
    refreshFragmentUi(fragmentManager,R.id.wizard_step_one);
    refreshFragmentUi(fragmentManager,R.id.wizard_step_two);
    refreshFragmentUi(fragmentManager,R.id.wizard_step_three);
  }
}","private void refreshFragmentsUi(){
  if (isInTabletUi) {
    FragmentManager fragmentManager=getChildFragmentManager();
    refreshFragmentUi(fragmentManager,R.id.wizard_step_one);
    refreshFragmentUi(fragmentManager,R.id.wizard_step_two);
    refreshFragmentUi(fragmentManager,R.id.wizard_step_three);
  }
 else {
    mWizardPager.getAdapter().notifyDataSetChanged();
    scrollToPageRequiresSetup();
  }
}",0.3459196102314251
157457,"private void postSetFullIndicatorPosition(int position,float positionOffset){
  mScrollHandler.removeMessages(KEY_MESSAGE_UPDATE_INDICATOR);
  mScrollHandler.sendMessage(mScrollHandler.obtainMessage(KEY_MESSAGE_UPDATE_INDICATOR,position,0,Float.valueOf(positionOffset)));
}","private void postSetFullIndicatorPosition(int position,float positionOffset){
  mUiHandler.removeMessages(KEY_MESSAGE_UPDATE_INDICATOR);
  mUiHandler.sendMessage(mUiHandler.obtainMessage(KEY_MESSAGE_UPDATE_INDICATOR,position,0,Float.valueOf(positionOffset)));
}",0.9550561797752808
157458,"@Override public void onChange(boolean selfChange){
  if (isResumed() && mWizardPager != null) {
    mWizardPager.getAdapter().notifyDataSetChanged();
    scrollToPageRequiresSetup();
  }
 else {
    mReloadPager=true;
  }
}","@Override public void onChange(boolean selfChange){
  mUiHandler.removeMessages(KEY_MESSAGE_UPDATE_FRAGMENTS);
  mUiHandler.sendMessageDelayed(mUiHandler.obtainMessage(KEY_MESSAGE_UPDATE_FRAGMENTS),50);
}",0.308411214953271
157459,"@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
switch (msg.what) {
case KEY_MESSAGE_SCROLL_TO_PAGE:
    int pageToScrollTo=msg.arg1;
  mWizardPager.setCurrentItem(pageToScrollTo,true);
setFullIndicatorTo(pageToScrollTo,0.0f);
break;
case KEY_MESSAGE_UPDATE_INDICATOR:
int position=msg.arg1;
float offset=((Float)msg.obj).floatValue();
setFullIndicatorTo(position,offset);
break;
}
}","@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
switch (msg.what) {
case KEY_MESSAGE_SCROLL_TO_PAGE:
    int pageToScrollTo=msg.arg1;
  mWizardPager.setCurrentItem(pageToScrollTo,true);
setFullIndicatorTo(pageToScrollTo,0.0f);
break;
case KEY_MESSAGE_UPDATE_INDICATOR:
int position=msg.arg1;
float offset=((Float)msg.obj).floatValue();
setFullIndicatorTo(position,offset);
break;
case KEY_MESSAGE_UPDATE_FRAGMENTS:
if (isResumed()) {
refreshFragmentsUi();
}
 else {
mReloadPager=true;
}
break;
}
}",0.8787234042553191
157460,"private void scrollToPageRequiresSetup(){
  if (mWizardPager == null)   return;
  int positionToStartAt=0;
  if (SetupSupport.isThisKeyboardEnabled(getActivity())) {
    positionToStartAt=1;
    if (SetupSupport.isThisKeyboardSetAsDefaultIME(getActivity())) {
      positionToStartAt=2;
    }
  }
  mScrollHandler.removeMessages(KEY_MESSAGE_SCROLL_TO_PAGE);
  mScrollHandler.sendMessageDelayed(mScrollHandler.obtainMessage(KEY_MESSAGE_SCROLL_TO_PAGE,positionToStartAt,0),getResources().getInteger(android.R.integer.config_longAnimTime));
}","private void scrollToPageRequiresSetup(){
  if (mWizardPager == null)   return;
  int positionToStartAt=0;
  if (SetupSupport.isThisKeyboardEnabled(getActivity())) {
    positionToStartAt=1;
    if (SetupSupport.isThisKeyboardSetAsDefaultIME(getActivity())) {
      positionToStartAt=2;
    }
  }
  mUiHandler.removeMessages(KEY_MESSAGE_SCROLL_TO_PAGE);
  mUiHandler.sendMessageDelayed(mUiHandler.obtainMessage(KEY_MESSAGE_SCROLL_TO_PAGE,positionToStartAt,0),getResources().getInteger(android.R.integer.config_longAnimTime));
}",0.9774859287054408
157461,"@Override public void onStart(){
  super.onStart();
  if (mReloadPager && mWizardPager != null) {
    mWizardPager.getAdapter().notifyDataSetChanged();
  }
  scrollToPageRequiresSetup();
  mReloadPager=false;
}","@Override public void onStart(){
  super.onStart();
  if (mReloadPager) {
    refreshFragmentsUi();
  }
  mReloadPager=false;
}",0.6824925816023739
157462,"@Override public void onStop(){
  super.onStop();
  mScrollHandler.removeMessages(KEY_MESSAGE_SCROLL_TO_PAGE);
}","@Override public void onStop(){
  super.onStop();
  mUiHandler.removeMessages(KEY_MESSAGE_SCROLL_TO_PAGE);
}",0.9636363636363636
157463,"@Override public void onStart(){
  super.onStart();
  final View preStepNotCompeleted=getView().findViewById(R.id.previous_step_not_complete);
  final View thisStepCompeleted=getView().findViewById(R.id.this_step_complete);
  final View thisStepSetup=getView().findViewById(R.id.this_step_needs_setup);
  preStepNotCompeleted.setVisibility(View.GONE);
  thisStepCompeleted.setVisibility(View.GONE);
  thisStepSetup.setVisibility(View.GONE);
  if (!isStepPreConditionDone()) {
    preStepNotCompeleted.setVisibility(View.VISIBLE);
  }
 else   if (isStepCompleted()) {
    thisStepCompeleted.setVisibility(View.VISIBLE);
  }
 else {
    thisStepSetup.setVisibility(View.VISIBLE);
  }
}","@Override public void onStart(){
  super.onStart();
  refreshFragmentUi();
}",0.1686429512516469
157464,"public void onSendCrashReport(View v){
  String[] recipients=new String[]{BuildConfig.CRASH_REPORT_EMAIL_ADDRESS};
  Intent callingIntent=getIntent();
  Intent sendMail=new Intent();
  sendMail.setAction(Intent.ACTION_SEND);
  sendMail.setType(""String_Node_Str"");
  sendMail.putExtra(Intent.EXTRA_EMAIL,recipients);
  sendMail.putExtra(Intent.EXTRA_SUBJECT,getText(R.string.ime_crashed_title));
  sendMail.putExtra(Intent.EXTRA_TEXT,callingIntent.getStringExtra(CRASH_REPORT_TEXT));
  try {
    Intent sender=Intent.createChooser(sendMail,getString(R.string.ime_crashed_intent_selector_title));
    sender.putExtra(Intent.EXTRA_EMAIL,sendMail.getStringExtra(Intent.EXTRA_EMAIL));
    sender.putExtra(Intent.EXTRA_SUBJECT,sendMail.getStringExtra(Intent.EXTRA_SUBJECT));
    sender.putExtra(Intent.EXTRA_TEXT,callingIntent.getStringExtra(CRASH_REPORT_TEXT));
    Log.i(TAG,""String_Node_Str"" + sender);
    startActivity(sender);
  }
 catch (  android.content.ActivityNotFoundException ex) {
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
  finish();
}","public void onSendCrashReport(View v){
  String[] recipients=new String[]{BuildConfig.CRASH_REPORT_EMAIL_ADDRESS};
  Intent callingIntent=getIntent();
  Intent sendMail=new Intent();
  sendMail.setAction(Intent.ACTION_SEND);
  sendMail.setType(""String_Node_Str"");
  sendMail.putExtra(Intent.EXTRA_EMAIL,recipients);
  sendMail.putExtra(Intent.EXTRA_SUBJECT,getText(R.string.ime_crashed_title));
  sendMail.putExtra(Intent.EXTRA_TEXT,callingIntent.getStringExtra(CRASH_REPORT_TEXT));
  try {
    Intent sender=Intent.createChooser(sendMail,getString(R.string.ime_crashed_intent_selector_title));
    sender.putExtra(Intent.EXTRA_EMAIL,sendMail.getStringArrayExtra(Intent.EXTRA_EMAIL));
    sender.putExtra(Intent.EXTRA_SUBJECT,sendMail.getStringExtra(Intent.EXTRA_SUBJECT));
    sender.putExtra(Intent.EXTRA_TEXT,callingIntent.getStringExtra(CRASH_REPORT_TEXT));
    Log.i(TAG,""String_Node_Str"" + sender);
    startActivity(sender);
  }
 catch (  android.content.ActivityNotFoundException ex) {
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
  finish();
}",0.997720018239854
157465,"@Override public void onDestroy(){
  super.onDestroy();
  mAppContext.getContentResolver().unregisterContentObserver(mSecureSettingsChanged);
  mAppContext=null;
}","@Override public void onDestroy(){
  super.onDestroy();
  if (mAppContext != null)   mAppContext.getContentResolver().unregisterContentObserver(mSecureSettingsChanged);
  mAppContext=null;
}",0.923512747875354
157466,"public void fillWordsList(){
  Log.d(TAG,""String_Node_Str"" + mSelectedLocale);
  new UserWordsEditorAsyncTask(this){
    private UserDictionary mNewDictionary;
    private List<String> mWordsList;
    @Override protected void onPreExecute(){
      super.onPreExecute();
      mNewDictionary=new UserDictionary(getActivity().getApplicationContext(),mSelectedLocale);
      if (mNewDictionary != mCurrentDictionary && mCurrentDictionary != null && mCursor != null) {
        mCurrentDictionary.close();
      }
    }
    @Override protected Void doAsyncTask(    Void[] params) throws Exception {
      mCurrentDictionary=mNewDictionary;
      mCurrentDictionary.loadDictionary();
      mCursor=mCurrentDictionary.getWordsCursor();
      Cursor cursor=mCursor.getCursor();
      mWordsList=new ArrayList<>(mCursor.getCursor().getCount());
      cursor.moveToFirst();
      while (!cursor.isAfterLast()) {
        mWordsList.add(mCursor.getCurrentWord());
        cursor.moveToNext();
      }
      return null;
    }
    protected void applyResults(    Void result,    Exception backgroundException){
      UserWordsListAdapter adapter=new UserWordsListAdapter(UserDictionaryEditorFragment.this.getActivity(),mWordsList,UserDictionaryEditorFragment.this);
      mWordsListView.setAdapter(adapter);
    }
  }
.execute();
}","public void fillWordsList(){
  Log.d(TAG,""String_Node_Str"" + mSelectedLocale);
  new UserWordsEditorAsyncTask(this){
    private UserDictionary mNewDictionary;
    private List<String> mWordsList;
    @Override protected void onPreExecute(){
      super.onPreExecute();
      mNewDictionary=new UserDictionary(getActivity().getApplicationContext(),mSelectedLocale);
      if (mNewDictionary != mCurrentDictionary && mCurrentDictionary != null && mCursor != null) {
        mCurrentDictionary.close();
      }
    }
    @Override protected Void doAsyncTask(    Void[] params) throws Exception {
      mCurrentDictionary=mNewDictionary;
      mCurrentDictionary.loadDictionary();
      mCursor=mCurrentDictionary.getWordsCursor();
      Cursor cursor=mCursor.getCursor();
      mWordsList=new ArrayList<>(mCursor.getCursor().getCount());
      cursor.moveToFirst();
      while (!cursor.isAfterLast()) {
        mWordsList.add(mCursor.getCurrentWord());
        cursor.moveToNext();
      }
      return null;
    }
    protected void applyResults(    Void result,    Exception backgroundException){
      UserWordsListAdapter adapter=new UserWordsListAdapter(UserDictionaryEditorFragment.this.getActivity(),mWordsList,UserDictionaryEditorFragment.this);
      if (mWordsListView instanceof ListView) {
        ((ListView)mWordsListView).setAdapter(adapter);
      }
 else       if (mWordsListView instanceof GridView) {
        ((GridView)mWordsListView).setAdapter(adapter);
      }
 else {
        throw new ClassCastException(""String_Node_Str"" + mWordsListView.getClass());
      }
    }
  }
.execute();
}",0.8936752136752136
157467,"@Override protected void onRestoreInstanceState(Parcelable state){
  if (state == null || !(state instanceof AddOnsListSavedState)) {
    super.onRestoreInstanceState(state);
  }
 else {
    AddOnsListSavedState myState=(AddOnsListSavedState)state;
    String selectedAddOnId=myState.selectedAddOnId;
    String[] addOnIds=myState.addOnIds;
    AddOn[] addOns=new AddOn[addOnIds.length];
    for (int i=0; i < addOns.length; i++)     addOns[i]=AddOnsFactory.locateAddOn(addOnIds[i],getContext().getApplicationContext());
    setAddOnsList(addOns);
    setSelectedAddOn(AddOnsFactory.locateAddOn(selectedAddOnId,getContext().getApplicationContext()));
    super.onRestoreInstanceState(myState.getSuperState());
  }
}","@Override protected void onRestoreInstanceState(Parcelable state){
  if (state == null || !(state instanceof AddOnsListSavedState)) {
    super.onRestoreInstanceState(state);
  }
 else {
    AddOnsListSavedState myState=(AddOnsListSavedState)state;
    String selectedAddOnId=myState.selectedAddOnId;
    String[] addOnIds=myState.addOnIds;
    AddOn[] addOns=new AddOn[addOnIds.length];
    for (int i=0; i < addOns.length; i++)     addOns[i]=AddOnsFactory.locateAddOn(addOnIds[i],getContext().getApplicationContext());
    setAddOnsList(addOns);
    setSelectedAddOn(selectedAddOnId == null ? null : AddOnsFactory.locateAddOn(selectedAddOnId,getContext().getApplicationContext()));
    super.onRestoreInstanceState(myState.getSuperState());
  }
}",0.9774436090225564
157468,"@Override protected Parcelable onSaveInstanceState(){
  Parcelable superP=super.onSaveInstanceState();
  AddOnsListSavedState myState=new AddOnsListSavedState(superP);
  myState.selectedAddOnId=mSelectedAddOn.getId();
  String[] addOns=new String[mAddOns.length];
  for (int i=0; i < addOns.length; i++)   addOns[i]=mAddOns[i].getId();
  myState.addOnIds=addOns;
  return myState;
}","@Override protected Parcelable onSaveInstanceState(){
  Parcelable superP=super.onSaveInstanceState();
  AddOnsListSavedState myState=new AddOnsListSavedState(superP);
  myState.selectedAddOnId=mSelectedAddOn == null ? null : mSelectedAddOn.getId();
  String[] addOns=new String[mAddOns.length];
  for (int i=0; i < addOns.length; i++)   addOns[i]=mAddOns[i].getId();
  myState.addOnIds=addOns;
  return myState;
}",0.9597989949748744
157469,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final AddOn addOn=getItem(position);
  final View row;
  if (convertView == null) {
    LayoutInflater inflater=LayoutInflater.from(getContext());
    row=inflater.inflate(R.layout.addon_list_item_pref,parent,false);
  }
 else {
    row=convertView;
  }
  row.setTag(addOn);
  row.setOnClickListener(this);
  TextView title=(TextView)row.findViewById(R.id.addon_title);
  title.setText(addOn.getName());
  TextView description=(TextView)row.findViewById(R.id.addon_description);
  description.setText(addOn.getDescription());
  Drawable icon=null;
  if (addOn instanceof IconHolder) {
    IconHolder iconHolder=(IconHolder)addOn;
    icon=iconHolder.getIcon();
  }
  if (icon == null) {
    try {
      PackageManager packageManager=getContext().getPackageManager();
      PackageInfo packageInfo=packageManager.getPackageInfo(addOn.getPackageName(),0);
      icon=packageInfo.applicationInfo.loadIcon(packageManager);
    }
 catch (    PackageManager.NameNotFoundException e) {
      icon=null;
    }
  }
  ImageView addOnIcon=(ImageView)row.findViewById(R.id.addon_image);
  addOnIcon.setImageDrawable(icon);
  if (addOn instanceof ScreenshotHolder) {
    if (((ScreenshotHolder)addOn).hasScreenshot()) {
      addOnIcon.setOnClickListener(this);
      addOnIcon.setTag(addOn);
      row.findViewById(R.id.addon_image_more_overlay).setVisibility(View.VISIBLE);
    }
  }
  RadioButton tb=(RadioButton)row.findViewById(R.id.addon_checkbox);
  tb.setClickable(false);
  tb.setChecked(addOn.getId() == mSelectedAddOn.getId());
  return row;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final AddOn addOn=getItem(position);
  final View row;
  if (convertView == null) {
    LayoutInflater inflater=LayoutInflater.from(getContext());
    row=inflater.inflate(R.layout.addon_list_item_pref,parent,false);
  }
 else {
    row=convertView;
  }
  row.setTag(addOn);
  row.setOnClickListener(this);
  TextView title=(TextView)row.findViewById(R.id.addon_title);
  title.setText(addOn.getName());
  TextView description=(TextView)row.findViewById(R.id.addon_description);
  description.setText(addOn.getDescription());
  Drawable icon=null;
  if (addOn instanceof IconHolder) {
    IconHolder iconHolder=(IconHolder)addOn;
    icon=iconHolder.getIcon();
  }
  if (icon == null) {
    try {
      PackageManager packageManager=getContext().getPackageManager();
      PackageInfo packageInfo=packageManager.getPackageInfo(addOn.getPackageName(),0);
      icon=packageInfo.applicationInfo.loadIcon(packageManager);
    }
 catch (    PackageManager.NameNotFoundException e) {
      icon=null;
    }
  }
  ImageView addOnIcon=(ImageView)row.findViewById(R.id.addon_image);
  addOnIcon.setImageDrawable(icon);
  if (addOn instanceof ScreenshotHolder) {
    if (((ScreenshotHolder)addOn).hasScreenshot()) {
      addOnIcon.setOnClickListener(this);
      addOnIcon.setTag(addOn);
      row.findViewById(R.id.addon_image_more_overlay).setVisibility(View.VISIBLE);
    }
  }
  RadioButton tb=(RadioButton)row.findViewById(R.id.addon_checkbox);
  tb.setClickable(false);
  tb.setChecked(addOn.getId().equals(mSelectedAddOn.getId()));
  return row;
}",0.9959987688519544
157470,"public boolean isAtTwoFingersState(){
  return SystemClock.elapsedRealtime() - mLastTimeHadTwoFingers > TWO_FINGERS_LINGER_TIME;
}","public boolean isAtTwoFingersState(){
  return SystemClock.elapsedRealtime() - mLastTimeHadTwoFingers < TWO_FINGERS_LINGER_TIME;
}",0.9923076923076924
157471,"@Override public boolean onTouchEvent(MotionEvent nativeMotionEvent){
  if (mKeyboard == null)   return false;
  mMotionEvent.setNativeMotionEvent(nativeMotionEvent);
  WMotionEvent me=mMotionEvent;
  final int action=me.getActionMasked();
  final int pointerCount=me.getPointerCount();
  final int oldPointerCount=mOldPointerCount;
  mOldPointerCount=pointerCount;
  if (pointerCount > 1)   mLastTimeHadTwoFingers=SystemClock.elapsedRealtime();
  if (!mHasDistinctMultitouch && pointerCount > 1 && oldPointerCount > 1) {
    return true;
  }
  mSwipeTracker.addMovement(nativeMotionEvent);
  if (!mMiniKeyboardVisible && mGestureDetector != null && (mGestureDetector.onTouchEvent(nativeMotionEvent))) {
    Log.d(TAG,""String_Node_Str"");
    mHandler.cancelKeyTimers();
    dismissKeyPreview();
    return true;
  }
  final long eventTime=me.getEventTime();
  final int index=me.getActionIndex();
  final int id=me.getPointerId(index);
  final int x=(int)me.getX(index);
  final int y=(int)me.getY(index);
  if (mMiniKeyboard != null && mMiniKeyboardVisible) {
    final int miniKeyboardPointerIndex=me.findPointerIndex(mMiniKeyboardTrackerId);
    if (miniKeyboardPointerIndex >= 0 && miniKeyboardPointerIndex < pointerCount) {
      final int miniKeyboardX=(int)me.getX(miniKeyboardPointerIndex);
      final int miniKeyboardY=(int)me.getY(miniKeyboardPointerIndex);
      MotionEvent translated=generateMiniKeyboardMotionEvent(action,miniKeyboardX,miniKeyboardY,eventTime);
      mMiniKeyboard.onTouchEvent(translated);
      translated.recycle();
    }
    return true;
  }
  if (mHandler.isInKeyRepeat()) {
    if (action == MotionEvent.ACTION_MOVE) {
      return true;
    }
    final PointerTracker tracker=getPointerTracker(id);
    if (pointerCount > 1 && !tracker.isModifier()) {
      mHandler.cancelKeyRepeatTimer();
    }
  }
  if (!mHasDistinctMultitouch) {
    PointerTracker tracker=getPointerTracker(0);
    if (pointerCount == 1 && oldPointerCount == 2) {
      tracker.onDownEvent(x,y,eventTime);
    }
 else     if (pointerCount == 2 && oldPointerCount == 1) {
      tracker.onUpEvent(tracker.getLastX(),tracker.getLastY(),eventTime);
    }
 else     if (pointerCount == 1 && oldPointerCount == 1) {
      tracker.onTouchEvent(action,x,y,eventTime);
    }
 else {
      Log.w(TAG,""String_Node_Str"" + pointerCount + ""String_Node_Str""+ oldPointerCount+ ""String_Node_Str"");
    }
    return true;
  }
  if (action == MotionEvent.ACTION_MOVE) {
    for (int i=0; i < pointerCount; i++) {
      PointerTracker tracker=getPointerTracker(me.getPointerId(i));
      tracker.onMoveEvent((int)me.getX(i),(int)me.getY(i),eventTime);
    }
  }
 else {
    PointerTracker tracker=getPointerTracker(id);
    sendOnXEvent(action,eventTime,x,y,tracker);
  }
  return true;
}","@Override public boolean onTouchEvent(MotionEvent nativeMotionEvent){
  if (mKeyboard == null)   return false;
  mMotionEvent.setNativeMotionEvent(nativeMotionEvent);
  WMotionEvent me=mMotionEvent;
  final int action=me.getActionMasked();
  final int pointerCount=me.getPointerCount();
  final int oldPointerCount=mOldPointerCount;
  mOldPointerCount=pointerCount;
  if (pointerCount > 1)   mLastTimeHadTwoFingers=SystemClock.elapsedRealtime();
  if (mTouchesAreDisabledTillLastFingerIsUp) {
    if (mOldPointerCount == 1 && (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP)) {
      mTouchesAreDisabledTillLastFingerIsUp=false;
    }
    return true;
  }
  if (!mHasDistinctMultitouch && pointerCount > 1 && oldPointerCount > 1) {
    return true;
  }
  mSwipeTracker.addMovement(nativeMotionEvent);
  if (!mMiniKeyboardVisible && mGestureDetector != null && (mGestureDetector.onTouchEvent(nativeMotionEvent))) {
    Log.d(TAG,""String_Node_Str"");
    mHandler.cancelKeyTimers();
    dismissKeyPreview();
    return true;
  }
  final long eventTime=me.getEventTime();
  final int index=me.getActionIndex();
  final int id=me.getPointerId(index);
  final int x=(int)me.getX(index);
  final int y=(int)me.getY(index);
  if (mMiniKeyboard != null && mMiniKeyboardVisible) {
    final int miniKeyboardPointerIndex=me.findPointerIndex(mMiniKeyboardTrackerId);
    if (miniKeyboardPointerIndex >= 0 && miniKeyboardPointerIndex < pointerCount) {
      final int miniKeyboardX=(int)me.getX(miniKeyboardPointerIndex);
      final int miniKeyboardY=(int)me.getY(miniKeyboardPointerIndex);
      MotionEvent translated=generateMiniKeyboardMotionEvent(action,miniKeyboardX,miniKeyboardY,eventTime);
      mMiniKeyboard.onTouchEvent(translated);
      translated.recycle();
    }
    return true;
  }
  if (mHandler.isInKeyRepeat()) {
    if (action == MotionEvent.ACTION_MOVE) {
      return true;
    }
    final PointerTracker tracker=getPointerTracker(id);
    if (pointerCount > 1 && !tracker.isModifier()) {
      mHandler.cancelKeyRepeatTimer();
    }
  }
  if (!mHasDistinctMultitouch) {
    PointerTracker tracker=getPointerTracker(0);
    if (pointerCount == 1 && oldPointerCount == 2) {
      tracker.onDownEvent(x,y,eventTime);
    }
 else     if (pointerCount == 2 && oldPointerCount == 1) {
      tracker.onUpEvent(tracker.getLastX(),tracker.getLastY(),eventTime);
    }
 else     if (pointerCount == 1 && oldPointerCount == 1) {
      tracker.onTouchEvent(action,x,y,eventTime);
    }
 else {
      Log.w(TAG,""String_Node_Str"" + pointerCount + ""String_Node_Str""+ oldPointerCount+ ""String_Node_Str"");
    }
    return true;
  }
  if (action == MotionEvent.ACTION_MOVE) {
    for (int i=0; i < pointerCount; i++) {
      PointerTracker tracker=getPointerTracker(me.getPointerId(i));
      tracker.onMoveEvent((int)me.getX(i),(int)me.getY(i),eventTime);
    }
  }
 else {
    PointerTracker tracker=getPointerTracker(id);
    sendOnXEvent(action,eventTime,x,y,tracker);
  }
  return true;
}",0.9595994475138122
157472,"@Override public boolean onTouchEvent(MotionEvent me){
  Log.d(TAG,""String_Node_Str"" + me.getPointerCount() + ""String_Node_Str"");
  if (getKeyboard() == null)   return false;
  if (me.getAction() == MotionEvent.ACTION_DOWN) {
    mFirstTouchPont.x=(int)me.getX();
    mFirstTouchPont.y=(int)me.getY();
    mIsFirstDownEventInsideSpaceBar=mSpaceBarKey != null && mSpaceBarKey.isInside(mFirstTouchPont.x,mFirstTouchPont.y);
  }
 else   if (mIsFirstDownEventInsideSpaceBar) {
    if (me.getAction() == MotionEvent.ACTION_MOVE) {
      setGesturePreviewText(mSwitcher,me);
      return true;
    }
 else     if (me.getAction() == MotionEvent.ACTION_UP) {
      final int slide=getSlideDistance(me);
      final int distance=slide & 0x00FF;
      if (distance > SLIDE_RATIO_FOR_GESTURE) {
switch (slide & 0xFF00) {
case DIRECTION_DOWN:
          mKeyboardActionListener.onSwipeDown(true);
        break;
case DIRECTION_UP:
      mKeyboardActionListener.onSwipeUp(true);
    break;
case DIRECTION_LEFT:
  mKeyboardActionListener.onSwipeLeft(true,isAtTwoFingersState());
break;
case DIRECTION_RIGHT:
mKeyboardActionListener.onSwipeRight(true,isAtTwoFingersState());
break;
}
}
 else {
super.onTouchEvent(me);
}
return true;
}
}
if (!mIsFirstDownEventInsideSpaceBar && me.getY() < mExtensionKeyboardYActivationPoint && !isPopupShowing() && !mExtensionVisible && me.getAction() == MotionEvent.ACTION_MOVE) {
if (mExtensionKeyboardAreaEntranceTime <= 0) mExtensionKeyboardAreaEntranceTime=System.currentTimeMillis();
if (System.currentTimeMillis() - mExtensionKeyboardAreaEntranceTime > DELAY_BEFORE_POPING_UP_EXTENSION_KBD) {
KeyboardExtension extKbd=((ExternalAnyKeyboard)getKeyboard()).getExtensionLayout();
if (extKbd == null || extKbd.getKeyboardResId() == -1) {
return super.onTouchEvent(me);
}
 else {
MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX(),me.getY(),0);
super.onTouchEvent(cancel);
cancel.recycle();
mExtensionVisible=true;
dismissKeyPreview();
if (mExtensionKey == null) {
mExtensionKey=new AnyKey(new Row(getKeyboard()),getThemedKeyboardDimens());
mExtensionKey.codes=new int[]{0};
mExtensionKey.edgeFlags=0;
mExtensionKey.height=1;
mExtensionKey.width=1;
mExtensionKey.popupResId=extKbd.getKeyboardResId();
mExtensionKey.externalResourcePopupLayout=mExtensionKey.popupResId != 0;
mExtensionKey.x=getWidth() / 2;
mExtensionKey.y=mExtensionKeyboardPopupOffset;
}
mExtensionKey.x=(int)me.getX();
onLongPress(extKbd.getPackageContext(),mExtensionKey,AnyApplication.getConfig().isStickyExtensionKeyboard(),!AnyApplication.getConfig().isStickyExtensionKeyboard());
mMiniKeyboard.setPreviewEnabled(true);
return true;
}
}
 else {
return super.onTouchEvent(me);
}
}
 else if (mExtensionVisible && me.getY() > mExtensionKeyboardYDismissPoint) {
dismissPopupKeyboard();
return true;
}
 else {
return super.onTouchEvent(me);
}
}","@Override public boolean onTouchEvent(MotionEvent me){
  Log.d(TAG,""String_Node_Str"" + me.getPointerCount() + ""String_Node_Str"");
  if (getKeyboard() == null)   return false;
  if (areTouchesDisabled())   return super.onTouchEvent(me);
  if (me.getAction() == MotionEvent.ACTION_DOWN) {
    mFirstTouchPont.x=(int)me.getX();
    mFirstTouchPont.y=(int)me.getY();
    mIsFirstDownEventInsideSpaceBar=mSpaceBarKey != null && mSpaceBarKey.isInside(mFirstTouchPont.x,mFirstTouchPont.y);
  }
 else   if (mIsFirstDownEventInsideSpaceBar) {
    if (me.getAction() == MotionEvent.ACTION_MOVE) {
      setGesturePreviewText(mSwitcher,me);
      return true;
    }
 else     if (me.getAction() == MotionEvent.ACTION_UP) {
      final int slide=getSlideDistance(me);
      final int distance=slide & 0x00FF;
      if (distance > SLIDE_RATIO_FOR_GESTURE) {
switch (slide & 0xFF00) {
case DIRECTION_DOWN:
          mKeyboardActionListener.onSwipeDown(true);
        break;
case DIRECTION_UP:
      mKeyboardActionListener.onSwipeUp(true);
    break;
case DIRECTION_LEFT:
  mKeyboardActionListener.onSwipeLeft(true,isAtTwoFingersState());
break;
case DIRECTION_RIGHT:
mKeyboardActionListener.onSwipeRight(true,isAtTwoFingersState());
break;
}
}
 else {
super.onTouchEvent(me);
}
return true;
}
}
if (!mIsFirstDownEventInsideSpaceBar && me.getY() < mExtensionKeyboardYActivationPoint && !isPopupShowing() && !mExtensionVisible && me.getAction() == MotionEvent.ACTION_MOVE) {
if (mExtensionKeyboardAreaEntranceTime <= 0) mExtensionKeyboardAreaEntranceTime=System.currentTimeMillis();
if (System.currentTimeMillis() - mExtensionKeyboardAreaEntranceTime > DELAY_BEFORE_POPING_UP_EXTENSION_KBD) {
KeyboardExtension extKbd=((ExternalAnyKeyboard)getKeyboard()).getExtensionLayout();
if (extKbd == null || extKbd.getKeyboardResId() == -1) {
return super.onTouchEvent(me);
}
 else {
MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX(),me.getY(),0);
super.onTouchEvent(cancel);
cancel.recycle();
mExtensionVisible=true;
dismissKeyPreview();
if (mExtensionKey == null) {
mExtensionKey=new AnyKey(new Row(getKeyboard()),getThemedKeyboardDimens());
mExtensionKey.codes=new int[]{0};
mExtensionKey.edgeFlags=0;
mExtensionKey.height=1;
mExtensionKey.width=1;
mExtensionKey.popupResId=extKbd.getKeyboardResId();
mExtensionKey.externalResourcePopupLayout=mExtensionKey.popupResId != 0;
mExtensionKey.x=getWidth() / 2;
mExtensionKey.y=mExtensionKeyboardPopupOffset;
}
mExtensionKey.x=(int)me.getX();
onLongPress(extKbd.getPackageContext(),mExtensionKey,AnyApplication.getConfig().isStickyExtensionKeyboard(),!AnyApplication.getConfig().isStickyExtensionKeyboard());
mMiniKeyboard.setPreviewEnabled(true);
return true;
}
}
 else {
return super.onTouchEvent(me);
}
}
 else if (mExtensionVisible && me.getY() > mExtensionKeyboardYDismissPoint) {
dismissPopupKeyboard();
return true;
}
 else {
return super.onTouchEvent(me);
}
}",0.9895494260750386
157473,"public boolean onSeparate(float factor){
  if (factor > 1.35) {
    mKeyboardView.mKeyboardActionListener.onSeparate();
    return true;
  }
  return false;
}","public boolean onSeparate(float factor){
  if (factor > 1.35) {
    mKeyboardView.disableTouchesTillFingersAreUp();
    mKeyboardView.mKeyboardActionListener.onSeparate();
    return true;
  }
  return false;
}",0.8586956521739131
157474,"public boolean onScroll(MotionEvent e1,MotionEvent e2,float distanceX,float distanceY){
  final float scrollXDistance=Math.abs(e2.getX() - e1.getX());
  final float scrollYDistance=Math.abs(e2.getY() - e1.getY());
  final float totalScrollTime=((float)(e2.getEventTime() - e1.getEventTime()));
  final float velocityX=1000 * Math.abs(scrollXDistance / totalScrollTime);
  final float velocityY=1000 * Math.abs(scrollYDistance / totalScrollTime);
  Log.d(TAG,""String_Node_Str"",scrollXDistance,scrollYDistance,velocityX,velocityY);
  if (velocityX > velocityY) {
    Log.v(TAG,""String_Node_Str"");
    if (velocityX > mKeyboardView.mSwipeVelocityThreshold) {
      Log.v(TAG,""String_Node_Str"");
      final int swipeXDistance=mKeyboardView.isFirstDownEventInsideSpaceBar() ? mKeyboardView.mSwipeSpaceXDistanceThreshold : mKeyboardView.mSwipeXDistanceThreshold;
      if (scrollXDistance > swipeXDistance) {
        Log.v(TAG,""String_Node_Str"");
        if (e2.getX() > e1.getX()) {
          mKeyboardView.mKeyboardActionListener.onSwipeRight(mKeyboardView.isFirstDownEventInsideSpaceBar(),mKeyboardView.isAtTwoFingersState());
        }
 else {
          mKeyboardView.mKeyboardActionListener.onSwipeLeft(mKeyboardView.isFirstDownEventInsideSpaceBar(),mKeyboardView.isAtTwoFingersState());
        }
        return true;
      }
    }
  }
 else {
    Log.v(TAG,""String_Node_Str"");
    if (velocityX > mKeyboardView.mSwipeVelocityThreshold) {
      Log.v(TAG,""String_Node_Str"");
      if (scrollYDistance > mKeyboardView.mSwipeYDistanceThreshold) {
        Log.v(TAG,""String_Node_Str"");
        if (e2.getY() > e1.getY()) {
          mKeyboardView.mKeyboardActionListener.onSwipeDown(mKeyboardView.isFirstDownEventInsideSpaceBar());
        }
 else {
          mKeyboardView.mKeyboardActionListener.onSwipeUp(mKeyboardView.isFirstDownEventInsideSpaceBar());
        }
        return true;
      }
    }
  }
  return false;
}","public boolean onScroll(MotionEvent e1,MotionEvent e2,float distanceX,float distanceY){
  final float scrollXDistance=Math.abs(e2.getX() - e1.getX());
  final float scrollYDistance=Math.abs(e2.getY() - e1.getY());
  final float totalScrollTime=((float)(e2.getEventTime() - e1.getEventTime()));
  final float velocityX=1000 * Math.abs(scrollXDistance / totalScrollTime);
  final float velocityY=1000 * Math.abs(scrollYDistance / totalScrollTime);
  Log.d(TAG,""String_Node_Str"",scrollXDistance,scrollYDistance,velocityX,velocityY);
  if (velocityX > velocityY) {
    Log.v(TAG,""String_Node_Str"");
    if (velocityX > mKeyboardView.mSwipeVelocityThreshold) {
      Log.v(TAG,""String_Node_Str"");
      final int swipeXDistance=mKeyboardView.isFirstDownEventInsideSpaceBar() ? mKeyboardView.mSwipeSpaceXDistanceThreshold : mKeyboardView.mSwipeXDistanceThreshold;
      if (scrollXDistance > swipeXDistance) {
        Log.v(TAG,""String_Node_Str"");
        mKeyboardView.disableTouchesTillFingersAreUp();
        if (e2.getX() > e1.getX()) {
          mKeyboardView.mKeyboardActionListener.onSwipeRight(mKeyboardView.isFirstDownEventInsideSpaceBar(),mKeyboardView.isAtTwoFingersState());
        }
 else {
          mKeyboardView.mKeyboardActionListener.onSwipeLeft(mKeyboardView.isFirstDownEventInsideSpaceBar(),mKeyboardView.isAtTwoFingersState());
        }
        return true;
      }
    }
  }
 else {
    Log.v(TAG,""String_Node_Str"");
    if (velocityX > mKeyboardView.mSwipeVelocityThreshold) {
      Log.v(TAG,""String_Node_Str"");
      if (scrollYDistance > mKeyboardView.mSwipeYDistanceThreshold) {
        mKeyboardView.disableTouchesTillFingersAreUp();
        Log.v(TAG,""String_Node_Str"");
        if (e2.getY() > e1.getY()) {
          mKeyboardView.mKeyboardActionListener.onSwipeDown(mKeyboardView.isFirstDownEventInsideSpaceBar());
        }
 else {
          mKeyboardView.mKeyboardActionListener.onSwipeUp(mKeyboardView.isFirstDownEventInsideSpaceBar());
        }
        return true;
      }
    }
  }
  return false;
}",0.9716742539200808
157475,"public boolean onFling(MotionEvent me1,MotionEvent me2,float velocityX,float velocityY){
  Log.d(TAG,""String_Node_Str"",velocityX,velocityY);
  final float absX=Math.abs(velocityX);
  final float absY=Math.abs(velocityY);
  float deltaX=me2.getX() - me1.getX();
  float deltaY=me2.getY() - me1.getY();
  mSwipeTracker.computeCurrentVelocity(1000);
  final float endingVelocityX=mSwipeTracker.getXVelocity();
  final float endingVelocityY=mSwipeTracker.getYVelocity();
  final int swipeXDistance=mKeyboardView.isFirstDownEventInsideSpaceBar() ? mKeyboardView.mSwipeSpaceXDistanceThreshold : mKeyboardView.mSwipeXDistanceThreshold;
  if (velocityX > mKeyboardView.mSwipeVelocityThreshold && absY < absX && deltaX > swipeXDistance) {
    if (mKeyboardView.mDisambiguateSwipe && endingVelocityX >= velocityX / 4) {
      mKeyboardView.mKeyboardActionListener.onSwipeRight(mKeyboardView.isFirstDownEventInsideSpaceBar(),mKeyboardView.isAtTwoFingersState());
      return true;
    }
  }
 else   if (velocityX < -mKeyboardView.mSwipeVelocityThreshold && absY < absX && deltaX < -swipeXDistance) {
    if (mKeyboardView.mDisambiguateSwipe && endingVelocityX <= velocityX / 4) {
      mKeyboardView.mKeyboardActionListener.onSwipeLeft(mKeyboardView.isFirstDownEventInsideSpaceBar(),mKeyboardView.isAtTwoFingersState());
      return true;
    }
  }
 else   if (velocityY < -mKeyboardView.mSwipeVelocityThreshold && absX < absY && deltaY < -mKeyboardView.mSwipeYDistanceThreshold) {
    if (mKeyboardView.mDisambiguateSwipe && endingVelocityY <= velocityY / 4) {
      mKeyboardView.mKeyboardActionListener.onSwipeUp(mKeyboardView.isFirstDownEventInsideSpaceBar());
      return true;
    }
  }
 else   if (velocityY > mKeyboardView.mSwipeVelocityThreshold && absX < absY / 2 && deltaY > mKeyboardView.mSwipeYDistanceThreshold) {
    if (mKeyboardView.mDisambiguateSwipe && endingVelocityY >= velocityY / 4) {
      mKeyboardView.mKeyboardActionListener.onSwipeDown(mKeyboardView.isFirstDownEventInsideSpaceBar());
      return true;
    }
  }
  return false;
}","public boolean onFling(MotionEvent me1,MotionEvent me2,float velocityX,float velocityY){
  Log.d(TAG,""String_Node_Str"",velocityX,velocityY);
  final float absX=Math.abs(velocityX);
  final float absY=Math.abs(velocityY);
  float deltaX=me2.getX() - me1.getX();
  float deltaY=me2.getY() - me1.getY();
  mSwipeTracker.computeCurrentVelocity(1000);
  final float endingVelocityX=mSwipeTracker.getXVelocity();
  final float endingVelocityY=mSwipeTracker.getYVelocity();
  final int swipeXDistance=mKeyboardView.isFirstDownEventInsideSpaceBar() ? mKeyboardView.mSwipeSpaceXDistanceThreshold : mKeyboardView.mSwipeXDistanceThreshold;
  if (velocityX > mKeyboardView.mSwipeVelocityThreshold && absY < absX && deltaX > swipeXDistance) {
    if (mKeyboardView.mDisambiguateSwipe && endingVelocityX >= velocityX / 4) {
      mKeyboardView.disableTouchesTillFingersAreUp();
      mKeyboardView.mKeyboardActionListener.onSwipeRight(mKeyboardView.isFirstDownEventInsideSpaceBar(),mKeyboardView.isAtTwoFingersState());
      return true;
    }
  }
 else   if (velocityX < -mKeyboardView.mSwipeVelocityThreshold && absY < absX && deltaX < -swipeXDistance) {
    if (mKeyboardView.mDisambiguateSwipe && endingVelocityX <= velocityX / 4) {
      mKeyboardView.disableTouchesTillFingersAreUp();
      mKeyboardView.mKeyboardActionListener.onSwipeLeft(mKeyboardView.isFirstDownEventInsideSpaceBar(),mKeyboardView.isAtTwoFingersState());
      return true;
    }
  }
 else   if (velocityY < -mKeyboardView.mSwipeVelocityThreshold && absX < absY && deltaY < -mKeyboardView.mSwipeYDistanceThreshold) {
    if (mKeyboardView.mDisambiguateSwipe && endingVelocityY <= velocityY / 4) {
      mKeyboardView.disableTouchesTillFingersAreUp();
      mKeyboardView.mKeyboardActionListener.onSwipeUp(mKeyboardView.isFirstDownEventInsideSpaceBar());
      return true;
    }
  }
 else   if (velocityY > mKeyboardView.mSwipeVelocityThreshold && absX < absY / 2 && deltaY > mKeyboardView.mSwipeYDistanceThreshold) {
    if (mKeyboardView.mDisambiguateSwipe && endingVelocityY >= velocityY / 4) {
      mKeyboardView.disableTouchesTillFingersAreUp();
      mKeyboardView.mKeyboardActionListener.onSwipeDown(mKeyboardView.isFirstDownEventInsideSpaceBar());
      return true;
    }
  }
  return false;
}",0.9499768411301528
157476,"public boolean onPinch(float factor){
  if (factor < 0.65) {
    mKeyboardView.mKeyboardActionListener.onPinch();
    return true;
  }
  return false;
}","public boolean onPinch(float factor){
  if (factor < 0.65) {
    mKeyboardView.disableTouchesTillFingersAreUp();
    mKeyboardView.mKeyboardActionListener.onPinch();
    return true;
  }
  return false;
}",0.8539325842696629
157477,"@Override public boolean onTouchEvent(MotionEvent me){
  if (me.getAction() == MotionEvent.ACTION_DOWN) {
    mFirstTouchPont.x=(int)me.getX();
    mFirstTouchPont.y=(int)me.getY();
    mIsFirstDownEventInsideSpaceBar=mSpaceBarKey != null && mSpaceBarKey.isInside(mFirstTouchPont.x,mFirstTouchPont.y);
  }
 else   if (mIsFirstDownEventInsideSpaceBar) {
    if (me.getAction() == MotionEvent.ACTION_MOVE) {
      setGesturePreviewText(mSwitcher,me);
      return true;
    }
 else     if (me.getAction() == MotionEvent.ACTION_UP) {
      final int slide=getSlideDistance(me);
      final int distance=slide & 0x00FF;
      if (distance > SLIDE_RATIO_FOR_GESTURE) {
switch (slide & 0xFF00) {
case DIRECTION_DOWN:
          mKeyboardActionListener.onSwipeDown(true);
        break;
case DIRECTION_UP:
      mKeyboardActionListener.onSwipeUp(true);
    break;
case DIRECTION_LEFT:
  mKeyboardActionListener.onSwipeLeft(true);
break;
case DIRECTION_RIGHT:
mKeyboardActionListener.onSwipeRight(true);
break;
}
}
 else {
super.onTouchEvent(me);
}
return true;
}
}
if (!mIsFirstDownEventInsideSpaceBar && me.getY() < mExtensionKeyboardYActivationPoint && !isPopupShowing() && !mExtensionVisible && me.getAction() == MotionEvent.ACTION_MOVE) {
if (mExtensionKeyboardAreaEntranceTime <= 0) mExtensionKeyboardAreaEntranceTime=System.currentTimeMillis();
if (System.currentTimeMillis() - mExtensionKeyboardAreaEntranceTime > DELAY_BEFORE_POPING_UP_EXTENSION_KBD) {
KeyboardExtension extKbd=((ExternalAnyKeyboard)getKeyboard()).getExtensionLayout();
if (extKbd == null || extKbd.getKeyboardResId() == -1) {
return super.onTouchEvent(me);
}
 else {
MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX(),me.getY(),0);
super.onTouchEvent(cancel);
cancel.recycle();
mExtensionVisible=true;
dismissKeyPreview();
if (mExtensionKey == null) {
mExtensionKey=new AnyKey(new Row(getKeyboard()),getThemedKeyboardDimens());
mExtensionKey.codes=new int[]{0};
mExtensionKey.edgeFlags=0;
mExtensionKey.height=1;
mExtensionKey.width=1;
mExtensionKey.popupResId=extKbd.getKeyboardResId();
mExtensionKey.externalResourcePopupLayout=mExtensionKey.popupResId != 0;
mExtensionKey.x=getWidth() / 2;
mExtensionKey.y=mExtensionKeyboardPopupOffset;
}
mExtensionKey.x=(int)me.getX();
onLongPress(extKbd.getPackageContext(),mExtensionKey,AnyApplication.getConfig().isStickyExtensionKeyboard(),!AnyApplication.getConfig().isStickyExtensionKeyboard());
mMiniKeyboard.setPreviewEnabled(true);
return true;
}
}
 else {
return super.onTouchEvent(me);
}
}
 else if (mExtensionVisible && me.getY() > mExtensionKeyboardYDismissPoint) {
dismissPopupKeyboard();
return true;
}
 else {
return super.onTouchEvent(me);
}
}","@Override public boolean onTouchEvent(MotionEvent me){
  if (getKeyboard() == null)   return false;
  if (me.getAction() == MotionEvent.ACTION_DOWN) {
    mFirstTouchPont.x=(int)me.getX();
    mFirstTouchPont.y=(int)me.getY();
    mIsFirstDownEventInsideSpaceBar=mSpaceBarKey != null && mSpaceBarKey.isInside(mFirstTouchPont.x,mFirstTouchPont.y);
  }
 else   if (mIsFirstDownEventInsideSpaceBar) {
    if (me.getAction() == MotionEvent.ACTION_MOVE) {
      setGesturePreviewText(mSwitcher,me);
      return true;
    }
 else     if (me.getAction() == MotionEvent.ACTION_UP) {
      final int slide=getSlideDistance(me);
      final int distance=slide & 0x00FF;
      if (distance > SLIDE_RATIO_FOR_GESTURE) {
switch (slide & 0xFF00) {
case DIRECTION_DOWN:
          mKeyboardActionListener.onSwipeDown(true);
        break;
case DIRECTION_UP:
      mKeyboardActionListener.onSwipeUp(true);
    break;
case DIRECTION_LEFT:
  mKeyboardActionListener.onSwipeLeft(true);
break;
case DIRECTION_RIGHT:
mKeyboardActionListener.onSwipeRight(true);
break;
}
}
 else {
super.onTouchEvent(me);
}
return true;
}
}
if (!mIsFirstDownEventInsideSpaceBar && me.getY() < mExtensionKeyboardYActivationPoint && !isPopupShowing() && !mExtensionVisible && me.getAction() == MotionEvent.ACTION_MOVE) {
if (mExtensionKeyboardAreaEntranceTime <= 0) mExtensionKeyboardAreaEntranceTime=System.currentTimeMillis();
if (System.currentTimeMillis() - mExtensionKeyboardAreaEntranceTime > DELAY_BEFORE_POPING_UP_EXTENSION_KBD) {
KeyboardExtension extKbd=((ExternalAnyKeyboard)getKeyboard()).getExtensionLayout();
if (extKbd == null || extKbd.getKeyboardResId() == -1) {
return super.onTouchEvent(me);
}
 else {
MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX(),me.getY(),0);
super.onTouchEvent(cancel);
cancel.recycle();
mExtensionVisible=true;
dismissKeyPreview();
if (mExtensionKey == null) {
mExtensionKey=new AnyKey(new Row(getKeyboard()),getThemedKeyboardDimens());
mExtensionKey.codes=new int[]{0};
mExtensionKey.edgeFlags=0;
mExtensionKey.height=1;
mExtensionKey.width=1;
mExtensionKey.popupResId=extKbd.getKeyboardResId();
mExtensionKey.externalResourcePopupLayout=mExtensionKey.popupResId != 0;
mExtensionKey.x=getWidth() / 2;
mExtensionKey.y=mExtensionKeyboardPopupOffset;
}
mExtensionKey.x=(int)me.getX();
onLongPress(extKbd.getPackageContext(),mExtensionKey,AnyApplication.getConfig().isStickyExtensionKeyboard(),!AnyApplication.getConfig().isStickyExtensionKeyboard());
mMiniKeyboard.setPreviewEnabled(true);
return true;
}
}
 else {
return super.onTouchEvent(me);
}
}
 else if (mExtensionVisible && me.getY() > mExtensionKeyboardYDismissPoint) {
dismissPopupKeyboard();
return true;
}
 else {
return super.onTouchEvent(me);
}
}",0.991807755324959
157478,"public void onKey(int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes,boolean fromUI){
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + primaryCode);
  }
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.DELETE_WORD:
    if (ic == null)     break;
  handleBackword(ic);
break;
case KeyCodes.DELETE:
if (ic == null) break;
if (mInputView != null && mInputView.isShifted() && !mInputView.getKeyboard().isShiftLocked() && ((mDistinctMultiTouch && mShiftKeyState.isMomentary()) || mConfig.useBackword())) {
handleBackword(ic);
}
 else {
handleDeleteLastCharacter(false);
}
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
commitTyped(ic);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.SHIFT:
if ((!mDistinctMultiTouch) || !fromUI) handleShift(false);
break;
case KeyCodes.CTRL:
if ((!mDistinctMultiTouch) || !fromUI) handleControl(false);
break;
case KeyCodes.ARROW_LEFT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_LEFT);
break;
case KeyCodes.ARROW_RIGHT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_RIGHT);
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) newPosition=0;
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) newPosition=textAfter.length();
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
ic.setSelection(newPosition + textBefore.length(),newPosition + textBefore.length());
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger != null) mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentKeyboard().getDefaultDictionaryLocale());
break;
case KeyCodes.CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
if (getCurrentKeyboard() != null && mInputView != null) {
mKeyboardInCondensedMode=KeyCodes.SPLIT_LAYOUT == primaryCode;
AnyKeyboard currentKeyboard=getCurrentKeyboard();
setKeyboardStuffBeforeSetToView(currentKeyboard);
mInputView.setKeyboard(currentKeyboard);
}
break;
case KeyCodes.DOMAIN:
onText(mConfig.getDomainText());
break;
case KeyCodes.QUICK_TEXT:
QuickTextKey quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.QUICK_TEXT_POPUP:
quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (quickTextKey.getId().equals(SMILEY_PLUGIN_ID) && !mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (mKeyboardSwitcher.shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
case KeyCodes.UTILITY_KEYBOARD:
mInputView.openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD:
Clipboard cp=AnyApplication.getFrankenRobot().embody(new Clipboard.ClipboardDiagram(getApplicationContext()));
CharSequence clipboardText=cp.getText();
if (!TextUtils.isEmpty(clipboardText)) {
onText(clipboardText);
}
break;
case KeyCodes.TAB:
sendTab();
break;
case KeyCodes.ESCAPE:
sendEscape();
break;
default :
if (mKeyboardSwitcher.isRightToLeftMode()) {
if (primaryCode == (int)')') primaryCode=(int)'(';
 else if (primaryCode == (int)'(') primaryCode=(int)')';
}
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
}
 else {
if (mInputView != null && mInputView.isControl() && primaryCode >= 32 && primaryCode < 127) {
int controlCode=primaryCode & 31;
if (AnyApplication.DEBUG) Log.d(TAG,""String_Node_Str"" + primaryCode + ""String_Node_Str""+ controlCode);
if (controlCode == 9) {
sendTab();
}
 else {
ic.commitText(Character.toString((char)controlCode),1);
}
}
 else {
handleCharacter(primaryCode,key,multiTapIndex,nearByKeyCodes);
}
mJustAddedAutoSpace=false;
}
if (mKeyboardSwitcher.isKeyRequireSwitchToAlphabet(primaryCode)) {
mKeyboardSwitcher.nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
}
break;
}
}","public void onKey(int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes,boolean fromUI){
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + primaryCode);
  }
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.DELETE_WORD:
    if (ic == null)     break;
  handleBackword(ic);
break;
case KeyCodes.DELETE:
if (ic == null) break;
if (mInputView != null && mInputView.isShifted() && !mInputView.getKeyboard().isShiftLocked() && ((mDistinctMultiTouch && mShiftKeyState.isMomentary()) || mConfig.useBackword())) {
handleBackword(ic);
}
 else {
handleDeleteLastCharacter(false);
}
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
commitTyped(ic);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.SHIFT:
if ((!mDistinctMultiTouch) || !fromUI) handleShift(false);
break;
case KeyCodes.CTRL:
if ((!mDistinctMultiTouch) || !fromUI) handleControl(false);
break;
case KeyCodes.ARROW_LEFT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_LEFT);
break;
case KeyCodes.ARROW_RIGHT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_RIGHT);
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) newPosition=0;
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) newPosition=textAfter.length();
try {
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
if (!TextUtils.isEmpty(textBefore)) {
newPosition=newPosition + textBefore.length();
}
ic.setSelection(newPosition,newPosition);
}
 catch (Throwable e) {
Log.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger != null) mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentKeyboard().getDefaultDictionaryLocale());
break;
case KeyCodes.CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
if (getCurrentKeyboard() != null && mInputView != null) {
mKeyboardInCondensedMode=KeyCodes.SPLIT_LAYOUT == primaryCode;
AnyKeyboard currentKeyboard=getCurrentKeyboard();
setKeyboardStuffBeforeSetToView(currentKeyboard);
mInputView.setKeyboard(currentKeyboard);
}
break;
case KeyCodes.DOMAIN:
onText(mConfig.getDomainText());
break;
case KeyCodes.QUICK_TEXT:
QuickTextKey quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.QUICK_TEXT_POPUP:
quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (quickTextKey.getId().equals(SMILEY_PLUGIN_ID) && !mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (mKeyboardSwitcher.shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
case KeyCodes.UTILITY_KEYBOARD:
mInputView.openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD:
Clipboard cp=AnyApplication.getFrankenRobot().embody(new Clipboard.ClipboardDiagram(getApplicationContext()));
CharSequence clipboardText=cp.getText();
if (!TextUtils.isEmpty(clipboardText)) {
onText(clipboardText);
}
break;
case KeyCodes.TAB:
sendTab();
break;
case KeyCodes.ESCAPE:
sendEscape();
break;
default :
if (mKeyboardSwitcher.isRightToLeftMode()) {
if (primaryCode == (int)')') primaryCode=(int)'(';
 else if (primaryCode == (int)'(') primaryCode=(int)')';
}
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
}
 else {
if (mInputView != null && mInputView.isControl() && primaryCode >= 32 && primaryCode < 127) {
int controlCode=primaryCode & 31;
if (AnyApplication.DEBUG) Log.d(TAG,""String_Node_Str"" + primaryCode + ""String_Node_Str""+ controlCode);
if (controlCode == 9) {
sendTab();
}
 else {
ic.commitText(Character.toString((char)controlCode),1);
}
}
 else {
handleCharacter(primaryCode,key,multiTapIndex,nearByKeyCodes);
}
mJustAddedAutoSpace=false;
}
if (mKeyboardSwitcher.isKeyRequireSwitchToAlphabet(primaryCode)) {
mKeyboardSwitcher.nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
}
break;
}
}",0.984872867718056
157479,"@Override public CharSequence getSummary(){
  return String.format(super.getSummary().toString(),getEntry());
}","@Override public CharSequence getSummary(){
  final CharSequence baseSummary=super.getSummary();
  if (TextUtils.isEmpty(baseSummary))   return baseSummary;
 else   return String.format(baseSummary.toString(),getEntry());
}",0.5568862275449101
157480,"private void onBufferDraw(Canvas canvas){
  if (mKeyboardChanged) {
    invalidateAllKeys();
    mKeyboardChanged=false;
  }
  canvas.getClipBounds(mDirtyRect);
  if (mKeyboard == null)   return;
  final boolean drawKeyboardNameText=(mKeyboardNameTextSize > 1f) && AnyApplication.getConfig().getShowKeyboardNameText();
  final boolean drawHintText=(mHintTextSize > 1) && AnyApplication.getConfig().getShowHintTextOnKeys();
  if (AnyApplication.DEBUG && !drawHintText) {
    Log.d(TAG,""String_Node_Str"" + mHintTextSize + ""String_Node_Str""+ AnyApplication.getConfig().getShowHintTextOnKeys());
  }
  final boolean useCustomKeyTextColor=false;
  final ColorStateList keyTextColor=useCustomKeyTextColor ? new ColorStateList(new int[][]{{0}},new int[]{0xFF6666FF}) : mKeyTextColor;
  final boolean useCustomHintColor=drawHintText && false;
  final ColorStateList hintColor=useCustomHintColor ? new ColorStateList(new int[][]{{0}},new int[]{0xFFFF6666}) : mHintTextColor;
  final boolean useCustomHintAlign=drawHintText && AnyApplication.getConfig().getUseCustomHintAlign();
  final int hintAlign=useCustomHintAlign ? AnyApplication.getConfig().getCustomHintAlign() : mHintLabelAlign;
  final int hintVAlign=useCustomHintAlign ? AnyApplication.getConfig().getCustomHintVAlign() : mHintLabelVAlign;
  final Paint paint=mPaint;
  final Drawable keyBackground=mKeyBackground;
  final Rect clipRegion=mClipRegion;
  final int kbdPaddingLeft=getPaddingLeft();
  final int kbdPaddingTop=getPaddingTop();
  final Key[] keys=mKeys;
  final Key invalidKey=mInvalidatedKey;
  boolean drawSingleKey=false;
  if (invalidKey != null && canvas.getClipBounds(clipRegion)) {
    if (invalidKey.x + kbdPaddingLeft - 1 <= clipRegion.left && invalidKey.y + kbdPaddingTop - 1 <= clipRegion.top && invalidKey.x + invalidKey.width + kbdPaddingLeft+ 1 >= clipRegion.right && invalidKey.y + invalidKey.height + kbdPaddingTop+ 1 >= clipRegion.bottom) {
      drawSingleKey=true;
    }
  }
  final int keyCount=keys.length;
  for (int i=0; i < keyCount; i++) {
    final AnyKey key=(AnyKey)keys[i];
    final boolean keyIsSpace=isSpaceKey(key);
    if (drawSingleKey && (invalidKey != key)) {
      continue;
    }
    if (!mDirtyRect.intersects(key.x + kbdPaddingLeft,key.y + kbdPaddingTop,key.x + key.width + kbdPaddingLeft,key.y + key.height + kbdPaddingTop)) {
      continue;
    }
    int[] drawableState=key.getCurrentDrawableState();
    if (keyIsSpace)     paint.setColor(mKeyboardNameTextColor.getColorForState(drawableState,0xFF000000));
 else     paint.setColor(keyTextColor.getColorForState(drawableState,0xFF000000));
    keyBackground.setState(drawableState);
    CharSequence label=key.label == null ? null : adjustCase(key).toString();
    final Rect bounds=keyBackground.getBounds();
    if ((key.width != bounds.right) || (key.height != bounds.bottom)) {
      keyBackground.setBounds(0,0,key.width,key.height);
    }
    canvas.translate(key.x + kbdPaddingLeft,key.y + kbdPaddingTop);
    keyBackground.draw(canvas);
    if (TextUtils.isEmpty(label)) {
      Drawable iconToDraw=getIconToDrawForKey(key,false);
      if (iconToDraw != null) {
        final int drawableWidth;
        final int drawableHeight;
        final int drawableX;
        final int drawableY;
        drawableWidth=iconToDraw.getIntrinsicWidth();
        drawableHeight=iconToDraw.getIntrinsicHeight();
        drawableX=(key.width + mKeyBackgroundPadding.left - mKeyBackgroundPadding.right - drawableWidth) / 2;
        drawableY=(key.height + mKeyBackgroundPadding.top - mKeyBackgroundPadding.bottom - drawableHeight) / 2;
        canvas.translate(drawableX,drawableY);
        iconToDraw.setBounds(0,0,drawableWidth,drawableHeight);
        iconToDraw.draw(canvas);
        canvas.translate(-drawableX,-drawableY);
        if (keyIsSpace && drawKeyboardNameText) {
          label=mKeyboardName;
        }
      }
 else {
        label=guessLabelForKey(key.codes[0]);
        if (TextUtils.isEmpty(label)) {
          Log.w(TAG,""String_Node_Str"" + key.codes[0] + ""String_Node_Str""+ key.x+ ""String_Node_Str""+ key.y+ ""String_Node_Str""+ mKeyboardActionType);
        }
      }
    }
    if (label != null) {
      final FontMetrics fm;
      if (keyIsSpace) {
        paint.setTextSize(mKeyboardNameTextSize);
        paint.setTypeface(Typeface.DEFAULT_BOLD);
        if (mKeyboardNameFM == null)         mKeyboardNameFM=paint.getFontMetrics();
        fm=mKeyboardNameFM;
      }
 else       if (label.length() > 1 && key.codes.length < 2) {
        paint.setTextSize(mLabelTextSize);
        paint.setTypeface(Typeface.DEFAULT_BOLD);
        if (mLabelFM == null)         mLabelFM=paint.getFontMetrics();
        fm=mLabelFM;
      }
 else {
        fm=setPaintToKeyText(paint);
      }
      final float labelHeight=-fm.top;
      paint.setShadowLayer(mShadowRadius,mShadowOffsetX,mShadowOffsetY,mShadowColor);
      float textWidth=paint.measureText(label,0,label.length());
      if (textWidth > key.width) {
        if (AnyApplication.DEBUG)         Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
        paint.setTextSize(mKeyTextSize / 1.5f);
        textWidth=paint.measureText(label,0,label.length());
        if (textWidth > key.width) {
          if (AnyApplication.DEBUG)           Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
          paint.setTextSize(mKeyTextSize / 2.5f);
          textWidth=paint.measureText(label,0,label.length());
          if (textWidth > key.width) {
            if (AnyApplication.DEBUG)             Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
            paint.setTextSize(0f);
            textWidth=paint.measureText(label,0,label.length());
          }
        }
      }
      final float centerY=mKeyBackgroundPadding.top + ((key.height - mKeyBackgroundPadding.top - mKeyBackgroundPadding.bottom) / (keyIsSpace ? 3 : 2));
      final float centerX=mKeyBackgroundPadding.left + (key.width - mKeyBackgroundPadding.left - mKeyBackgroundPadding.right) / 2;
      final float textX=centerX;
      final float textY;
      if (label.length() > 1 && !AnyApplication.getConfig().workaround_alwaysUseDrawText()) {
        textY=centerY - ((labelHeight - paint.descent()) / 2);
        canvas.translate(textX,textY);
        if (AnyApplication.DEBUG)         Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
        StaticLayout labelText=new StaticLayout(label,new TextPaint(paint),(int)textWidth,Alignment.ALIGN_NORMAL,0.0f,0.0f,false);
        labelText.draw(canvas);
      }
 else {
        textY=centerY + ((labelHeight - paint.descent()) / 2);
        canvas.translate(textX,textY);
        canvas.drawText(label,0,label.length(),0,0,paint);
      }
      canvas.translate(-textX,-textY);
      paint.setShadowLayer(0,0,0,0);
    }
    if (drawHintText) {
      if ((key.popupCharacters != null && key.popupCharacters.length() > 0) || (key.popupResId != 0) || (key.longPressCode != 0)) {
        Paint.Align oldAlign=paint.getTextAlign();
        String hintText=null;
        if (key.hintLabel != null && key.hintLabel.length() > 0) {
          hintText=key.hintLabel.toString();
        }
 else         if (key.longPressCode != 0) {
          if (Character.isLetterOrDigit(key.longPressCode))           hintText=Character.toString((char)key.longPressCode);
        }
 else         if (key.popupCharacters != null) {
          final String hintString=key.popupCharacters.toString();
          final int hintLength=hintString.length();
          if (hintLength <= 3)           hintText=hintString;
        }
        if (hintText == null) {
          if (mHintOverflowLabel != null)           hintText=mHintOverflowLabel.toString();
 else {
            if (hintVAlign == Gravity.TOP)             hintText=""String_Node_Str"";
 else             hintText=""String_Node_Str"";
          }
        }
        if (mKeyboard.isShifted())         hintText=hintText.toUpperCase();
        paint.setTypeface(Typeface.DEFAULT);
        paint.setColor(hintColor.getColorForState(drawableState,0xFF000000));
        paint.setTextSize(mHintTextSize);
        if (mHintTextFM == null) {
          mHintTextFM=paint.getFontMetrics();
        }
        final float hintX;
        final float hintY;
        if (hintAlign == Gravity.LEFT) {
          paint.setTextAlign(Paint.Align.LEFT);
          hintX=mKeyBackgroundPadding.left + (float)0.5;
        }
 else         if (hintAlign == Gravity.CENTER) {
          paint.setTextAlign(Paint.Align.CENTER);
          hintX=mKeyBackgroundPadding.left + (key.width - mKeyBackgroundPadding.left - mKeyBackgroundPadding.right) / 2;
        }
 else {
          paint.setTextAlign(Paint.Align.RIGHT);
          hintX=key.width - mKeyBackgroundPadding.right - (float)0.5;
        }
        if (hintVAlign == Gravity.TOP) {
          hintY=mKeyBackgroundPadding.top - mHintTextFM.top + (float)0.5;
        }
 else {
          hintY=key.height - mKeyBackgroundPadding.bottom - mHintTextFM.bottom- (float)0.5;
        }
        canvas.drawText(hintText,hintX,hintY,paint);
        paint.setTextAlign(oldAlign);
      }
    }
    canvas.translate(-key.x - kbdPaddingLeft,-key.y - kbdPaddingTop);
  }
  mInvalidatedKey=null;
  if (mMiniKeyboard != null && mMiniKeyboardVisible) {
    paint.setColor((int)(mBackgroundDimAmount * 0xFF) << 24);
    canvas.drawRect(0,0,getWidth(),getHeight(),paint);
  }
  if (AnyApplication.DEBUG) {
    if (mShowTouchPoints) {
      for (      PointerTracker tracker : mPointerTrackers) {
        int startX=tracker.getStartX();
        int startY=tracker.getStartY();
        int lastX=tracker.getLastX();
        int lastY=tracker.getLastY();
        paint.setAlpha(128);
        paint.setColor(0xFFFF0000);
        canvas.drawCircle(startX,startY,3,paint);
        canvas.drawLine(startX,startY,lastX,lastY,paint);
        paint.setColor(0xFF0000FF);
        canvas.drawCircle(lastX,lastY,3,paint);
        paint.setColor(0xFF00FF00);
        canvas.drawCircle((startX + lastX) / 2,(startY + lastY) / 2,2,paint);
      }
    }
  }
  mDrawPending=false;
  mDirtyRect.setEmpty();
}","private void onBufferDraw(Canvas canvas){
  if (mKeyboardChanged) {
    invalidateAllKeys();
    mKeyboardChanged=false;
  }
  canvas.getClipBounds(mDirtyRect);
  if (mKeyboard == null)   return;
  final boolean drawKeyboardNameText=(mKeyboardNameTextSize > 1f) && AnyApplication.getConfig().getShowKeyboardNameText();
  final boolean drawHintText=(mHintTextSize > 1) && AnyApplication.getConfig().getShowHintTextOnKeys();
  if (AnyApplication.DEBUG && !drawHintText) {
    Log.d(TAG,""String_Node_Str"" + mHintTextSize + ""String_Node_Str""+ AnyApplication.getConfig().getShowHintTextOnKeys());
  }
  final boolean useCustomKeyTextColor=false;
  final ColorStateList keyTextColor=useCustomKeyTextColor ? new ColorStateList(new int[][]{{0}},new int[]{0xFF6666FF}) : mKeyTextColor;
  final boolean useCustomHintColor=drawHintText && false;
  final ColorStateList hintColor=useCustomHintColor ? new ColorStateList(new int[][]{{0}},new int[]{0xFFFF6666}) : mHintTextColor;
  final boolean useCustomHintAlign=drawHintText && AnyApplication.getConfig().getUseCustomHintAlign();
  final int hintAlign=useCustomHintAlign ? AnyApplication.getConfig().getCustomHintAlign() : mHintLabelAlign;
  final int hintVAlign=useCustomHintAlign ? AnyApplication.getConfig().getCustomHintVAlign() : mHintLabelVAlign;
  final Paint paint=mPaint;
  final Drawable keyBackground=mKeyBackground;
  final Rect clipRegion=mClipRegion;
  final int kbdPaddingLeft=getPaddingLeft();
  final int kbdPaddingTop=getPaddingTop();
  final Key[] keys=mKeys;
  final Key invalidKey=mInvalidatedKey;
  boolean drawSingleKey=false;
  if (invalidKey != null && canvas.getClipBounds(clipRegion)) {
    if (invalidKey.x + kbdPaddingLeft - 1 <= clipRegion.left && invalidKey.y + kbdPaddingTop - 1 <= clipRegion.top && invalidKey.x + invalidKey.width + kbdPaddingLeft+ 1 >= clipRegion.right && invalidKey.y + invalidKey.height + kbdPaddingTop+ 1 >= clipRegion.bottom) {
      drawSingleKey=true;
    }
  }
  final int keyCount=keys.length;
  for (int i=0; i < keyCount; i++) {
    final AnyKey key=(AnyKey)keys[i];
    final boolean keyIsSpace=isSpaceKey(key);
    if (drawSingleKey && (invalidKey != key)) {
      continue;
    }
    if (!mDirtyRect.intersects(key.x + kbdPaddingLeft,key.y + kbdPaddingTop,key.x + key.width + kbdPaddingLeft,key.y + key.height + kbdPaddingTop)) {
      continue;
    }
    int[] drawableState=key.getCurrentDrawableState();
    if (keyIsSpace)     paint.setColor(mKeyboardNameTextColor.getColorForState(drawableState,0xFF000000));
 else     paint.setColor(keyTextColor.getColorForState(drawableState,0xFF000000));
    keyBackground.setState(drawableState);
    CharSequence label=key.label == null ? null : adjustCase(key).toString();
    final Rect bounds=keyBackground.getBounds();
    if ((key.width != bounds.right) || (key.height != bounds.bottom)) {
      keyBackground.setBounds(0,0,key.width,key.height);
    }
    canvas.translate(key.x + kbdPaddingLeft,key.y + kbdPaddingTop);
    keyBackground.draw(canvas);
    if (TextUtils.isEmpty(label)) {
      Drawable iconToDraw=getIconToDrawForKey(key,false);
      if (iconToDraw != null) {
        final int drawableWidth;
        final int drawableHeight;
        final int drawableX;
        final int drawableY;
        drawableWidth=iconToDraw.getIntrinsicWidth();
        drawableHeight=iconToDraw.getIntrinsicHeight();
        drawableX=(key.width + mKeyBackgroundPadding.left - mKeyBackgroundPadding.right - drawableWidth) / 2;
        drawableY=(key.height + mKeyBackgroundPadding.top - mKeyBackgroundPadding.bottom - drawableHeight) / 2;
        canvas.translate(drawableX,drawableY);
        iconToDraw.setBounds(0,0,drawableWidth,drawableHeight);
        iconToDraw.draw(canvas);
        canvas.translate(-drawableX,-drawableY);
        if (keyIsSpace && drawKeyboardNameText) {
          label=mKeyboardName;
        }
      }
 else {
        label=guessLabelForKey(key.codes[0]);
        if (TextUtils.isEmpty(label)) {
          Log.w(TAG,""String_Node_Str"" + key.codes[0] + ""String_Node_Str""+ key.x+ ""String_Node_Str""+ key.y+ ""String_Node_Str""+ mKeyboardActionType);
        }
      }
    }
    if (label != null) {
      final FontMetrics fm;
      if (keyIsSpace) {
        paint.setTextSize(mKeyboardNameTextSize);
        paint.setTypeface(Typeface.DEFAULT_BOLD);
        if (mKeyboardNameFM == null)         mKeyboardNameFM=paint.getFontMetrics();
        fm=mKeyboardNameFM;
      }
 else       if (label.length() > 1 && key.codes.length < 2) {
        paint.setTextSize(mLabelTextSize);
        paint.setTypeface(Typeface.DEFAULT_BOLD);
        if (mLabelFM == null)         mLabelFM=paint.getFontMetrics();
        fm=mLabelFM;
      }
 else {
        fm=setPaintToKeyText(paint);
      }
      final float labelHeight=-fm.top;
      paint.setShadowLayer(mShadowRadius,mShadowOffsetX,mShadowOffsetY,mShadowColor);
      float textWidth=paint.measureText(label,0,label.length());
      if (textWidth > key.width) {
        if (AnyApplication.DEBUG)         Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
        paint.setTextSize(mKeyTextSize / 1.5f);
        textWidth=paint.measureText(label,0,label.length());
        if (textWidth > key.width) {
          if (AnyApplication.DEBUG)           Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
          paint.setTextSize(mKeyTextSize / 2.5f);
          textWidth=paint.measureText(label,0,label.length());
          if (textWidth > key.width) {
            if (AnyApplication.DEBUG)             Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
            paint.setTextSize(0f);
            textWidth=paint.measureText(label,0,label.length());
          }
        }
      }
      final float centerY=mKeyBackgroundPadding.top + ((key.height - mKeyBackgroundPadding.top - mKeyBackgroundPadding.bottom) / (keyIsSpace ? 3 : 2));
      final float centerX=mKeyBackgroundPadding.left + (key.width - mKeyBackgroundPadding.left - mKeyBackgroundPadding.right) / 2;
      final float textX=centerX;
      final float textY;
      if (label.length() > 1 && !AnyApplication.getConfig().workaround_alwaysUseDrawText()) {
        textY=centerY - ((labelHeight - paint.descent()) / 2);
        canvas.translate(textX,textY);
        if (AnyApplication.DEBUG)         Log.d(TAG,""String_Node_Str"" + label + ""String_Node_Str"");
        StaticLayout labelText=new StaticLayout(label,new TextPaint(paint),(int)textWidth,Alignment.ALIGN_NORMAL,1.0f,0.0f,false);
        labelText.draw(canvas);
      }
 else {
        textY=centerY + ((labelHeight - paint.descent()) / 2);
        canvas.translate(textX,textY);
        canvas.drawText(label,0,label.length(),0,0,paint);
      }
      canvas.translate(-textX,-textY);
      paint.setShadowLayer(0,0,0,0);
    }
    if (drawHintText) {
      if ((key.popupCharacters != null && key.popupCharacters.length() > 0) || (key.popupResId != 0) || (key.longPressCode != 0)) {
        Paint.Align oldAlign=paint.getTextAlign();
        String hintText=null;
        if (key.hintLabel != null && key.hintLabel.length() > 0) {
          hintText=key.hintLabel.toString();
        }
 else         if (key.longPressCode != 0) {
          if (Character.isLetterOrDigit(key.longPressCode))           hintText=Character.toString((char)key.longPressCode);
        }
 else         if (key.popupCharacters != null) {
          final String hintString=key.popupCharacters.toString();
          final int hintLength=hintString.length();
          if (hintLength <= 3)           hintText=hintString;
        }
        if (hintText == null) {
          if (mHintOverflowLabel != null)           hintText=mHintOverflowLabel.toString();
 else {
            if (hintVAlign == Gravity.TOP)             hintText=""String_Node_Str"";
 else             hintText=""String_Node_Str"";
          }
        }
        if (mKeyboard.isShifted())         hintText=hintText.toUpperCase();
        paint.setTypeface(Typeface.DEFAULT);
        paint.setColor(hintColor.getColorForState(drawableState,0xFF000000));
        paint.setTextSize(mHintTextSize);
        if (mHintTextFM == null) {
          mHintTextFM=paint.getFontMetrics();
        }
        final float hintX;
        final float hintY;
        if (hintAlign == Gravity.LEFT) {
          paint.setTextAlign(Paint.Align.LEFT);
          hintX=mKeyBackgroundPadding.left + (float)0.5;
        }
 else         if (hintAlign == Gravity.CENTER) {
          paint.setTextAlign(Paint.Align.CENTER);
          hintX=mKeyBackgroundPadding.left + (key.width - mKeyBackgroundPadding.left - mKeyBackgroundPadding.right) / 2;
        }
 else {
          paint.setTextAlign(Paint.Align.RIGHT);
          hintX=key.width - mKeyBackgroundPadding.right - (float)0.5;
        }
        if (hintVAlign == Gravity.TOP) {
          hintY=mKeyBackgroundPadding.top - mHintTextFM.top + (float)0.5;
        }
 else {
          hintY=key.height - mKeyBackgroundPadding.bottom - mHintTextFM.bottom- (float)0.5;
        }
        canvas.drawText(hintText,hintX,hintY,paint);
        paint.setTextAlign(oldAlign);
      }
    }
    canvas.translate(-key.x - kbdPaddingLeft,-key.y - kbdPaddingTop);
  }
  mInvalidatedKey=null;
  if (mMiniKeyboard != null && mMiniKeyboardVisible) {
    paint.setColor((int)(mBackgroundDimAmount * 0xFF) << 24);
    canvas.drawRect(0,0,getWidth(),getHeight(),paint);
  }
  if (AnyApplication.DEBUG) {
    if (mShowTouchPoints) {
      for (      PointerTracker tracker : mPointerTrackers) {
        int startX=tracker.getStartX();
        int startY=tracker.getStartY();
        int lastX=tracker.getLastX();
        int lastY=tracker.getLastY();
        paint.setAlpha(128);
        paint.setColor(0xFFFF0000);
        canvas.drawCircle(startX,startY,3,paint);
        canvas.drawLine(startX,startY,lastX,lastY,paint);
        paint.setColor(0xFF0000FF);
        canvas.drawCircle(lastX,lastY,3,paint);
        paint.setColor(0xFF00FF00);
        canvas.drawCircle((startX + lastX) / 2,(startY + lastY) / 2,2,paint);
      }
    }
  }
  mDrawPending=false;
  mDirtyRect.setEmpty();
}",0.9999007838079176
157481,"/** 
 * If the canvas is null, then only touch calculations are performed to pick the target candidate.
 */
@Override protected void onDraw(Canvas canvas){
  if (canvas != null) {
    super.onDraw(canvas);
  }
  mTotalWidth=0;
  final int height=getHeight();
  if (mBgPadding == null) {
    mBgPadding=new Rect(0,0,0,0);
    if (getBackground() != null) {
      getBackground().getPadding(mBgPadding);
    }
    mDivider.setBounds(0,0,mDivider.getIntrinsicWidth(),mDivider.getIntrinsicHeight());
  }
  final int dividerYOffest=(height - mDivider.getMinimumHeight()) / 2;
  final int count=mSuggestions.size();
  final Rect bgPadding=mBgPadding;
  final Paint paint=mPaint;
  final int touchX=mTouchX;
  final int scrollX=getScrollX();
  final boolean scrolled=mScrolled;
  final boolean typedWordValid=mTypedWordValid;
  int x=0;
  for (int i=0; i < count; i++) {
    CharSequence suggestion=mSuggestions.get(i);
    if (suggestion == null)     continue;
    final int wordLength=suggestion.length();
    paint.setColor(mColorNormal);
    if (mHaveMinimalSuggestion && ((i == 1 && !typedWordValid) || (i == 0 && typedWordValid))) {
      paint.setTypeface(Typeface.DEFAULT_BOLD);
      paint.setColor(mColorRecommended);
    }
 else     if (i != 0 || (wordLength == 1 && count > 1)) {
      paint.setColor(mColorOther);
    }
    int wordWidth;
    if ((wordWidth=mWordWidth[i]) == 0) {
      float textWidth=paint.measureText(suggestion,0,wordLength);
      wordWidth=(int)(textWidth + mXGap * 2);
      mWordWidth[i]=wordWidth;
    }
    mWordX[i]=x;
    if (touchX != OUT_OF_BOUNDS_X_COORD && !scrolled && touchX + scrollX >= x && touchX + scrollX < x + wordWidth) {
      if (canvas != null && !mShowingAddToDictionary) {
        canvas.translate(x,0);
        mSelectionHighlight.setBounds(0,bgPadding.top,wordWidth,height);
        mSelectionHighlight.draw(canvas);
        canvas.translate(-x,0);
      }
      mSelectedString=suggestion;
      mSelectedIndex=i;
    }
    if (canvas != null) {
      if (AnyApplication.getConfig().workaround_alwaysUseDrawText()) {
        final int y=(int)(height + mPaint.getTextSize() - mPaint.descent()) / 2;
        canvas.drawText(suggestion,0,wordLength,x + wordWidth / 2,y,paint);
      }
 else {
        final int y=(int)(height - mPaint.getTextSize() + mPaint.descent()) / 2;
        float textX=x + (wordWidth / 2) - mXGap;
        float textY=y - bgPadding.bottom - bgPadding.top;
        canvas.translate(textX,textY);
        mTextPaint.setTypeface(paint.getTypeface());
        mTextPaint.setColor(paint.getColor());
        StaticLayout suggestionText=new StaticLayout(suggestion,mTextPaint,wordWidth,Alignment.ALIGN_CENTER,0.0f,0.0f,false);
        suggestionText.draw(canvas);
        canvas.translate(-textX,-textY);
      }
      paint.setColor(mColorOther);
      canvas.translate(x + wordWidth,0);
      if (count > 1 && (!mShowingAddToDictionary) && i != (count - 1)) {
        canvas.translate(0,dividerYOffest);
        mDivider.draw(canvas);
        canvas.translate(0,-dividerYOffest);
      }
      canvas.translate(-x - wordWidth,0);
    }
    paint.setTypeface(Typeface.DEFAULT);
    x+=wordWidth;
  }
  mTotalWidth=x;
  if (mTargetScrollX != scrollX) {
    scrollToTarget();
  }
}","/** 
 * If the canvas is null, then only touch calculations are performed to pick the target candidate.
 */
@Override protected void onDraw(Canvas canvas){
  if (canvas != null) {
    super.onDraw(canvas);
  }
  mTotalWidth=0;
  final int height=getHeight();
  if (mBgPadding == null) {
    mBgPadding=new Rect(0,0,0,0);
    if (getBackground() != null) {
      getBackground().getPadding(mBgPadding);
    }
    mDivider.setBounds(0,0,mDivider.getIntrinsicWidth(),mDivider.getIntrinsicHeight());
  }
  final int dividerYOffest=(height - mDivider.getMinimumHeight()) / 2;
  final int count=mSuggestions.size();
  final Rect bgPadding=mBgPadding;
  final Paint paint=mPaint;
  final int touchX=mTouchX;
  final int scrollX=getScrollX();
  final boolean scrolled=mScrolled;
  final boolean typedWordValid=mTypedWordValid;
  int x=0;
  for (int i=0; i < count; i++) {
    CharSequence suggestion=mSuggestions.get(i);
    if (suggestion == null)     continue;
    final int wordLength=suggestion.length();
    paint.setColor(mColorNormal);
    if (mHaveMinimalSuggestion && ((i == 1 && !typedWordValid) || (i == 0 && typedWordValid))) {
      paint.setTypeface(Typeface.DEFAULT_BOLD);
      paint.setColor(mColorRecommended);
    }
 else     if (i != 0 || (wordLength == 1 && count > 1)) {
      paint.setColor(mColorOther);
    }
    int wordWidth;
    if ((wordWidth=mWordWidth[i]) == 0) {
      float textWidth=paint.measureText(suggestion,0,wordLength);
      wordWidth=(int)(textWidth + mXGap * 2);
      mWordWidth[i]=wordWidth;
    }
    mWordX[i]=x;
    if (touchX != OUT_OF_BOUNDS_X_COORD && !scrolled && touchX + scrollX >= x && touchX + scrollX < x + wordWidth) {
      if (canvas != null && !mShowingAddToDictionary) {
        canvas.translate(x,0);
        mSelectionHighlight.setBounds(0,bgPadding.top,wordWidth,height);
        mSelectionHighlight.draw(canvas);
        canvas.translate(-x,0);
      }
      mSelectedString=suggestion;
      mSelectedIndex=i;
    }
    if (canvas != null) {
      if (AnyApplication.getConfig().workaround_alwaysUseDrawText()) {
        final int y=(int)(height + paint.getTextSize() - paint.descent()) / 2;
        canvas.drawText(suggestion,0,wordLength,x + wordWidth / 2,y,paint);
      }
 else {
        final int y=(int)(height - paint.getTextSize() + paint.descent()) / 2;
        float textX=x + (wordWidth / 2) - mXGap;
        float textY=y - bgPadding.bottom - bgPadding.top;
        canvas.translate(textX,textY);
        mTextPaint.setTypeface(paint.getTypeface());
        mTextPaint.setColor(paint.getColor());
        StaticLayout suggestionText=new StaticLayout(suggestion,mTextPaint,wordWidth,Alignment.ALIGN_CENTER,1.0f,0.0f,false);
        suggestionText.draw(canvas);
        canvas.translate(-textX,-textY);
      }
      paint.setColor(mColorOther);
      canvas.translate(x + wordWidth,0);
      if (count > 1 && (!mShowingAddToDictionary) && i != (count - 1)) {
        canvas.translate(0,dividerYOffest);
        mDivider.draw(canvas);
        canvas.translate(0,-dividerYOffest);
      }
      canvas.translate(-x - wordWidth,0);
    }
    paint.setTypeface(Typeface.DEFAULT);
    x+=wordWidth;
  }
  mTotalWidth=x;
  if (mTargetScrollX != scrollX) {
    scrollToTarget();
  }
}",0.9978461538461538
157482,"/** 
 * Sets an optional contacts dictionary resource to be loaded.
 */
public void setContactsDictionary(Context context,boolean enabled){
  if (!enabled && mContactsDictionary != null) {
    Log.i(TAG,""String_Node_Str"");
    mContactsDictionary.close();
    mContactsDictionary=null;
  }
 else   if (enabled && mContactsDictionary == null) {
    mContactsDictionary=mDictionaryFactory.createContactsDictionary(context);
    DictionaryASyncLoader loader=new DictionaryASyncLoader(null);
    loader.execute(mContactsDictionary);
    loader.waitTillLoadingStarted();
  }
}","/** 
 * Sets an optional contacts dictionary resource to be loaded.
 */
public void setContactsDictionary(Context context,boolean enabled){
  if (!enabled && mContactsDictionary != null) {
    Log.i(TAG,""String_Node_Str"");
    mContactsDictionary.close();
    mContactsDictionary=null;
  }
 else   if (enabled && mContactsDictionary == null) {
    mContactsDictionary=mDictionaryFactory.createContactsDictionary(context);
    if (mContactsDictionary != null) {
      DictionaryASyncLoader loader=new DictionaryASyncLoader(null);
      loader.execute(mContactsDictionary);
      loader.waitTillLoadingStarted();
    }
  }
}",0.9572506286672254
157483,"public void showPreview(int keyIndex,PointerTracker tracker){
  int oldKeyIndex=mOldPreviewKeyIndex;
  mOldPreviewKeyIndex=keyIndex;
  final boolean isLanguageSwitchEnabled=false;
  final boolean hidePreviewOrShowSpaceKeyPreview=(tracker == null);
  if (oldKeyIndex != keyIndex && (mShowPreview || (hidePreviewOrShowSpaceKeyPreview && isLanguageSwitchEnabled))) {
    if (keyIndex == NOT_A_KEY) {
      mHandler.cancelPopupPreview();
      mHandler.dismissPreview(mDelayAfterPreview);
    }
 else     if (tracker != null) {
      if (tracker.getKey(keyIndex).showPreview)       mHandler.popupPreview(mDelayBeforePreview,keyIndex,tracker);
    }
  }
}","public void showPreview(int keyIndex,PointerTracker tracker){
  int oldKeyIndex=mOldPreviewKeyIndex;
  mOldPreviewKeyIndex=keyIndex;
  final boolean isLanguageSwitchEnabled=false;
  final boolean hidePreviewOrShowSpaceKeyPreview=(tracker == null);
  if (oldKeyIndex != keyIndex && (mShowPreview || (hidePreviewOrShowSpaceKeyPreview && isLanguageSwitchEnabled))) {
    final Key key=hidePreviewOrShowSpaceKeyPreview ? null : tracker.getKey(keyIndex);
    if (keyIndex == NOT_A_KEY || key == null || !key.showPreview) {
      mHandler.cancelPopupPreview();
      mHandler.dismissPreview(mDelayAfterPreview);
    }
 else     if (tracker != null) {
      mHandler.popupPreview(mDelayBeforePreview,keyIndex,tracker);
    }
  }
}",0.8681718863801894
157484,"/** 
 * Enables or disables the key feedback popup. This is a popup that shows a magnified version of the depressed key. By default the preview is enabled.
 * @param previewEnabled whether or not to enable the key feedback popup
 * @see #isPreviewEnabled()
 */
protected void setPreviewEnabled(boolean previewEnabled){
  mShowPreview=mPreviewText != null && previewEnabled;
}","/** 
 * Enables or disables the key feedback popup. This is a popup that shows a magnified version of the depressed key. By default the preview is enabled.
 * @param previewEnabled whether or not to enable the key feedback popup
 */
protected void setPreviewEnabled(boolean previewEnabled){
  mShowPreview=mPreviewText != null && previewEnabled;
}",0.961218836565097
157485,"/** 
 * This method will help in the rare case the access to the dictionary is done before loading started (hence the storage is not ready)
 */
public void waitTillLoadingStarted(){
synchronized (mLoadingStartedMonitor) {
    if (mLoadingStarted == false) {
      try {
        mLoadingStartedMonitor.wait();
        waitTillLoadingStarted();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        return;
      }
    }
  }
}","/** 
 * This method will help in the rare case the access to the dictionary is done before loading started (hence the storage is not ready)
 */
public void waitTillLoadingStarted(){
  Thread.yield();
synchronized (mLoadingStartedMonitor) {
    if (mLoadingStarted == false) {
      try {
        mLoadingStartedMonitor.wait();
        waitTillLoadingStarted();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        return;
      }
    }
  }
}",0.980603448275862
157486,"/** 
 * Sets an optional contacts dictionary resource to be loaded.
 */
public void setContactsDictionary(Context context,boolean enabled){
  if (!enabled && mContactsDictionary != null) {
    Log.i(TAG,""String_Node_Str"");
    mContactsDictionary.close();
    mContactsDictionary=null;
  }
 else   if (enabled && mContactsDictionary == null) {
    mContactsDictionary=mDictionaryFactory.createContactsDictionary(context);
  }
}","/** 
 * Sets an optional contacts dictionary resource to be loaded.
 */
public void setContactsDictionary(Context context,boolean enabled){
  if (!enabled && mContactsDictionary != null) {
    Log.i(TAG,""String_Node_Str"");
    mContactsDictionary.close();
    mContactsDictionary=null;
  }
 else   if (enabled && mContactsDictionary == null) {
    mContactsDictionary=mDictionaryFactory.createContactsDictionary(context);
    DictionaryASyncLoader loader=new DictionaryASyncLoader(null);
    loader.execute(mContactsDictionary);
    loader.waitTillLoadingStarted();
  }
}",0.8557114228456913
157487,"/** 
 * Returns a list of words that match the list of character codes passed in. This list will be overwritten the next time this function is called.
 * @param a     view for retrieving the context for AutoText
 * @param codes the list of codes. Each list item contains an array ofcharacter codes in order of probability where the character at index 0 in the array has the highest probability.
 * @return list of suggestions.
 */
public List<CharSequence> getSuggestions(WordComposer wordComposer,boolean includeTypedWordIfValid){
  mHaveCorrection=false;
  mIsFirstCharCapitalized=wordComposer.isFirstCharCapitalized();
  mIsAllUpperCase=wordComposer.isAllUpperCase();
  collectGarbage();
  Arrays.fill(mPriorities,0);
  mOriginalWord=wordComposer.getTypedWord();
  if (mOriginalWord.length() > 0) {
    mOriginalWord=mOriginalWord.toString();
    mLowerOriginalWord=mOriginalWord.toString().toLowerCase();
  }
 else {
    mLowerOriginalWord=""String_Node_Str"";
  }
  if (wordComposer.length() >= mMinimumWordSizeToStartCorrecting) {
    if (mContactsDictionary != null) {
      if (AnyApplication.DEBUG)       Log.v(TAG,""String_Node_Str"");
      mContactsDictionary.getWords(wordComposer,this);
    }
    if (mUserDictionary != null) {
      if (AnyApplication.DEBUG)       Log.v(TAG,""String_Node_Str"");
      mUserDictionary.getWords(wordComposer,this);
    }
    if (mSuggestions.size() > 0 && isValidWord(mOriginalWord)) {
      mHaveCorrection=true;
    }
    if (mMainDict != null) {
      if (AnyApplication.DEBUG)       Log.v(TAG,""String_Node_Str"");
      mMainDict.getWords(wordComposer,this);
    }
    if (mMainDictioanryEnabled && mSuggestions.size() > 0) {
      mHaveCorrection=true;
    }
  }
  if (mOriginalWord != null) {
    mSuggestions.add(0,mOriginalWord.toString());
  }
  if (mMainDictioanryEnabled && mSuggestions.size() > 1) {
    if (!haveSufficientCommonality(mLowerOriginalWord,mSuggestions.get(1))) {
      mHaveCorrection=false;
    }
  }
  int i=0;
  int max=6;
  if (!mMainDictioanryEnabled && mAutoTextEnabled)   max=1;
  while (i < mSuggestions.size() && i < max) {
    String suggestedWord=mSuggestions.get(i).toString().toLowerCase();
    CharSequence autoText=mAutoTextEnabled && mAutoText != null ? mAutoText.lookup(suggestedWord,0,suggestedWord.length()) : null;
    boolean canAdd=autoText != null;
    canAdd&=!TextUtils.equals(autoText,mSuggestions.get(i));
    if (canAdd && i + 1 < mSuggestions.size() && mMainDictioanryEnabled) {
      canAdd&=!TextUtils.equals(autoText,mSuggestions.get(i + 1));
    }
    if (canAdd) {
      mHaveCorrection=true;
      mSuggestions.add(i + 1,autoText);
      i++;
    }
    i++;
  }
  return mSuggestions;
}","/** 
 * Returns a list of words that match the list of character codes passed in. This list will be overwritten the next time this function is called.
 * @return list of suggestions.
 */
public List<CharSequence> getSuggestions(WordComposer wordComposer,boolean includeTypedWordIfValid){
  mHaveCorrection=false;
  mIsFirstCharCapitalized=wordComposer.isFirstCharCapitalized();
  mIsAllUpperCase=wordComposer.isAllUpperCase();
  collectGarbage();
  Arrays.fill(mPriorities,0);
  mOriginalWord=wordComposer.getTypedWord();
  if (mOriginalWord.length() > 0) {
    mOriginalWord=mOriginalWord.toString();
    mLowerOriginalWord=mOriginalWord.toString().toLowerCase();
  }
 else {
    mLowerOriginalWord=""String_Node_Str"";
  }
  if (wordComposer.length() >= mMinimumWordSizeToStartCorrecting) {
    if (mContactsDictionary != null) {
      if (AnyApplication.DEBUG)       Log.v(TAG,""String_Node_Str"");
      mContactsDictionary.getWords(wordComposer,this);
    }
    if (mUserDictionary != null) {
      if (AnyApplication.DEBUG)       Log.v(TAG,""String_Node_Str"");
      mUserDictionary.getWords(wordComposer,this);
    }
    if (mSuggestions.size() > 0 && isValidWord(mOriginalWord)) {
      mHaveCorrection=true;
    }
    if (mMainDict != null) {
      if (AnyApplication.DEBUG)       Log.v(TAG,""String_Node_Str"");
      mMainDict.getWords(wordComposer,this);
    }
    if (mMainDictioanryEnabled && mSuggestions.size() > 0) {
      mHaveCorrection=true;
    }
  }
  if (mOriginalWord != null) {
    mSuggestions.add(0,mOriginalWord.toString());
  }
  if (mMainDictioanryEnabled && mSuggestions.size() > 1) {
    if (!haveSufficientCommonality(mLowerOriginalWord,mSuggestions.get(1))) {
      mHaveCorrection=false;
    }
  }
  int i=0;
  int max=6;
  if (!mMainDictioanryEnabled && mAutoTextEnabled)   max=1;
  while (i < mSuggestions.size() && i < max) {
    String suggestedWord=mSuggestions.get(i).toString().toLowerCase();
    CharSequence autoText=mAutoTextEnabled && mAutoText != null ? mAutoText.lookup(suggestedWord,0,suggestedWord.length()) : null;
    boolean canAdd=autoText != null;
    canAdd&=!TextUtils.equals(autoText,mSuggestions.get(i));
    if (canAdd && i + 1 < mSuggestions.size() && mMainDictioanryEnabled) {
      canAdd&=!TextUtils.equals(autoText,mSuggestions.get(i + 1));
    }
    if (canAdd) {
      mHaveCorrection=true;
      mSuggestions.add(i + 1,autoText);
      i++;
    }
    i++;
  }
  return mSuggestions;
}",0.9524737047136737
157488,"public void popTextOutOfKey(CharSequence text){
  if (TextUtils.isEmpty(text)) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  if (!AnyApplication.getConfig().workaround_alwaysUseDrawText())   return;
  mPopOutText=text;
  mPopOutTime=SystemClock.elapsedRealtime();
  mPopOutStartPoint.x=mFirstTouchPont.x;
  mPopOutStartPoint.y=mFirstTouchPont.y;
  postInvalidate();
}","public void popTextOutOfKey(CharSequence text){
  if (TextUtils.isEmpty(text)) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  if (!AnyApplication.getConfig().workaround_alwaysUseDrawText())   return;
  mPopOutText=text.toString();
  mPopOutTime=SystemClock.elapsedRealtime();
  mPopOutStartPoint.x=mFirstTouchPont.x;
  mPopOutStartPoint.y=mFirstTouchPont.y;
  postInvalidate();
}",0.985545335085414
157489,"/** 
 * Adds a word to the dictionary and makes it persistent.
 * @param word      the word to add. If the word is capitalized, then thedictionary will recognize it as a capitalized word when searched.
 * @param frequency the frequency of occurrence of the word. A frequency of 255 isconsidered the highest.
 */
public boolean addWord(String word,int frequency){
synchronized (mResourceMonitor) {
    if (isClosed())     return false;
    if (word.length() >= MAX_WORD_LENGTH)     return false;
    Log.e(TAG,""String_Node_Str"" + word + ""String_Node_Str""+ getClass().getSimpleName()+ ""String_Node_Str""+ frequency);
    addWordRec(mRoots,word,0,frequency);
    AddWordToStorage(word,frequency);
  }
  return true;
}","/** 
 * Adds a word to the dictionary and makes it persistent.
 * @param word      the word to add. If the word is capitalized, then thedictionary will recognize it as a capitalized word when searched.
 * @param frequency the frequency of occurrence of the word. A frequency of 255 isconsidered the highest.
 */
public boolean addWord(String word,int frequency){
synchronized (mResourceMonitor) {
    if (isClosed())     return false;
    if (word.length() >= MAX_WORD_LENGTH)     return false;
    Log.i(TAG,""String_Node_Str"" + word + ""String_Node_Str""+ getClass().getSimpleName()+ ""String_Node_Str""+ frequency);
    deleteWord(word);
    addWordRec(mRoots,word,0,frequency);
    AddWordToStorage(word,frequency);
  }
  return true;
}",0.9834254143646408
157490,"private boolean deleteWordRec(final NodeArray children,final CharSequence word,final int offset,final int length){
  final int count=children.length;
  final char currentChar=word.charAt(offset);
  for (int j=0; j < count; j++) {
    final Node node=children.data[j];
    if (node.code == currentChar) {
      if (offset == length - 1) {
        if (node.terminal) {
          children.deleteNode(j);
          return true;
        }
 else {
          return false;
        }
      }
 else {
        final boolean aChildNodeWasDeleted=deleteWordRec(node.children,word,offset + 1,length);
        if (aChildNodeWasDeleted) {
          if (node.children.length == 0) {
            children.deleteNode(j);
            return true;
          }
 else {
            return false;
          }
        }
      }
    }
  }
  return false;
}","private boolean deleteWordRec(final NodeArray children,final CharSequence word,final int offset,final int length){
  final int count=children.length;
  final char currentChar=word.charAt(offset);
  for (int j=0; j < count; j++) {
    final Node node=children.data[j];
    if (node.code == currentChar) {
      if (offset == length - 1) {
        if (node.terminal) {
          children.deleteNode(j);
          return true;
        }
 else {
          return false;
        }
      }
 else       if (node.terminal && (node.children == null || node.children.length == 0)) {
        return false;
      }
 else {
        final boolean aChildNodeWasDeleted=deleteWordRec(node.children,word,offset + 1,length);
        if (aChildNodeWasDeleted) {
          if (node.children.length == 0) {
            children.deleteNode(j);
            return true;
          }
 else {
            return false;
          }
        }
      }
    }
  }
  return false;
}",0.9331836047164516
157491,"/** 
 * <p> Creates a blank keyboard from the given resource file and populates it with the specified characters in left-to-right, top-to-bottom fashion, using the specified number of columns. </p> <p> If the specified number of columns is -1, then the keyboard will fit as many keys as possible in each row. </p>
 * @param context             the application or service context
 * @param layoutTemplateResId the layout template file, containing no keys.
 * @param characters          the list of characters to display on the keyboard. Onekey will be created for each character.
 * @param columns             the number of columns of keys to display. If this numberis greater than the number of keys that can fit in a row, it will be ignored. If this number is -1, the keyboard will fit as many keys as possible in each row.
 */
public List<Key> getKeys(){
  return mKeys;
}","public List<Key> getKeys(){
  return mKeys;
}",0.0979325353645266
157492,"private void setupMiniKeyboardContainer(Context packageContext,CharSequence popupCharacters,int popupKeyboardId,boolean isSticky){
  final AnyPopupKeyboard keyboard;
  if (popupCharacters != null) {
    keyboard=new AnyPopupKeyboard(getContext().getApplicationContext(),popupCharacters,mMiniKeyboard.getThemedKeyboardDimens());
  }
 else {
    keyboard=new AnyPopupKeyboard(getContext().getApplicationContext(),packageContext,popupKeyboardId,mMiniKeyboard.getThemedKeyboardDimens());
  }
  keyboard.setIsOneKeyEventPopup(!isSticky);
  if (isSticky)   mMiniKeyboard.setKeyboard(keyboard,mVerticalCorrection);
 else   mMiniKeyboard.setKeyboard(keyboard);
  mMiniKeyboard.measure(MeasureSpec.makeMeasureSpec(getWidth(),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(getHeight(),MeasureSpec.AT_MOST));
}","private void setupMiniKeyboardContainer(CharSequence popupCharacters,int popupKeyboardId,boolean isSticky){
  final AnyPopupKeyboard keyboard;
  if (popupCharacters != null) {
    keyboard=new AnyPopupKeyboard(getContext().getApplicationContext(),popupCharacters,mMiniKeyboard.getThemedKeyboardDimens());
  }
 else {
    keyboard=new AnyPopupKeyboard(getContext().getApplicationContext(),mKeyboard.getKeyboardContext(),popupKeyboardId,mMiniKeyboard.getThemedKeyboardDimens());
  }
  keyboard.setIsOneKeyEventPopup(!isSticky);
  if (isSticky)   mMiniKeyboard.setKeyboard(keyboard,mVerticalCorrection);
 else   mMiniKeyboard.setKeyboard(keyboard);
  mMiniKeyboard.measure(MeasureSpec.makeMeasureSpec(getWidth(),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(getHeight(),MeasureSpec.AT_MOST));
}",0.9667711598746082
157493,"/** 
 * Called when a key is long pressed. By default this will open any popup keyboard associated with this key through the attributes popupLayout and popupCharacters.
 * @param popupKey the key that was long pressed
 * @return true if the long press is handled, false otherwise. Subclassesshould call the method on the base class if the subclass doesn't wish to handle the call.
 */
protected boolean onLongPress(Context packageContext,Key popupKey,boolean isSticky,boolean requireSlideInto){
  if (popupKey.popupResId == 0)   return false;
  if (mMiniKeyboard == null) {
    createMiniKeyboard();
  }
  setupMiniKeyboardContainer(packageContext,popupKey.popupCharacters,popupKey.popupResId,isSticky);
  mMiniKeyboardVisible=true;
  if (mWindowOffset == null) {
    mWindowOffset=new int[2];
    getLocationInWindow(mWindowOffset);
  }
  int popupX=popupKey.x + mWindowOffset[0];
  popupX-=mMiniKeyboard.getPaddingLeft();
  int popupY=popupKey.y + mWindowOffset[1];
  popupY+=getPaddingTop();
  popupY-=mMiniKeyboard.getMeasuredHeight();
  popupY-=mMiniKeyboard.getPaddingBottom();
  final int x=popupX;
  final int y=mShowPreview && mOldPreviewKeyIndex != NOT_A_KEY && isOneRowKeys(mMiniKeyboard.getKeyboard().getKeys()) ? mPopupPreviewDisplayedY : popupY;
  int adjustedX=x;
  if (x < 0) {
    adjustedX=0;
  }
 else   if (x > (getMeasuredWidth() - mMiniKeyboard.getMeasuredWidth())) {
    adjustedX=getMeasuredWidth() - mMiniKeyboard.getMeasuredWidth();
  }
  mMiniKeyboardOriginX=adjustedX + mMiniKeyboard.getPaddingLeft() - mWindowOffset[0];
  mMiniKeyboardOriginY=y + mMiniKeyboard.getPaddingTop() - mWindowOffset[1];
  mMiniKeyboard.setPopupOffset(adjustedX,y);
  mMiniKeyboard.setShifted(mKeyboard != null ? mKeyboard.isShifted() : false);
  mMiniKeyboard.setPreviewEnabled(false);
  mMiniKeyboardPopup.setContentView(mMiniKeyboard);
  mMiniKeyboardPopup.setWidth(mMiniKeyboard.getMeasuredWidth());
  mMiniKeyboardPopup.setHeight(mMiniKeyboard.getMeasuredHeight());
  mMiniKeyboardPopup.showAtLocation(this,Gravity.NO_GRAVITY,adjustedX,y);
  if (requireSlideInto) {
    long eventTime=SystemClock.uptimeMillis();
    mMiniKeyboardPopupTime=eventTime;
    MotionEvent downEvent=generateMiniKeyboardMotionEvent(MotionEvent.ACTION_DOWN,popupKey.x + popupKey.width / 2,popupKey.y + popupKey.height / 2,eventTime);
    mMiniKeyboard.onTouchEvent(downEvent);
    downEvent.recycle();
  }
  invalidateAllKeys();
  return true;
}","/** 
 * Called when a key is long pressed. By default this will open any popup keyboard associated with this key through the attributes popupLayout and popupCharacters.
 * @param popupKey the key that was long pressed
 * @return true if the long press is handled, false otherwise. Subclassesshould call the method on the base class if the subclass doesn't wish to handle the call.
 */
protected boolean onLongPress(Context packageContext,Key popupKey,boolean isSticky,boolean requireSlideInto){
  if (popupKey.popupResId == 0)   return false;
  if (mMiniKeyboard == null) {
    createMiniKeyboard();
  }
  setupMiniKeyboardContainer(popupKey.popupCharacters,popupKey.popupResId,isSticky);
  mMiniKeyboardVisible=true;
  if (mWindowOffset == null) {
    mWindowOffset=new int[2];
    getLocationInWindow(mWindowOffset);
  }
  int popupX=popupKey.x + mWindowOffset[0];
  popupX-=mMiniKeyboard.getPaddingLeft();
  int popupY=popupKey.y + mWindowOffset[1];
  popupY+=getPaddingTop();
  popupY-=mMiniKeyboard.getMeasuredHeight();
  popupY-=mMiniKeyboard.getPaddingBottom();
  final int x=popupX;
  final int y=mShowPreview && mOldPreviewKeyIndex != NOT_A_KEY && isOneRowKeys(mMiniKeyboard.getKeyboard().getKeys()) ? mPopupPreviewDisplayedY : popupY;
  int adjustedX=x;
  if (x < 0) {
    adjustedX=0;
  }
 else   if (x > (getMeasuredWidth() - mMiniKeyboard.getMeasuredWidth())) {
    adjustedX=getMeasuredWidth() - mMiniKeyboard.getMeasuredWidth();
  }
  mMiniKeyboardOriginX=adjustedX + mMiniKeyboard.getPaddingLeft() - mWindowOffset[0];
  mMiniKeyboardOriginY=y + mMiniKeyboard.getPaddingTop() - mWindowOffset[1];
  mMiniKeyboard.setPopupOffset(adjustedX,y);
  mMiniKeyboard.setShifted(mKeyboard != null ? mKeyboard.isShifted() : false);
  mMiniKeyboard.setPreviewEnabled(false);
  mMiniKeyboardPopup.setContentView(mMiniKeyboard);
  mMiniKeyboardPopup.setWidth(mMiniKeyboard.getMeasuredWidth());
  mMiniKeyboardPopup.setHeight(mMiniKeyboard.getMeasuredHeight());
  mMiniKeyboardPopup.showAtLocation(this,Gravity.NO_GRAVITY,adjustedX,y);
  if (requireSlideInto) {
    long eventTime=SystemClock.uptimeMillis();
    mMiniKeyboardPopupTime=eventTime;
    MotionEvent downEvent=generateMiniKeyboardMotionEvent(MotionEvent.ACTION_DOWN,popupKey.x + popupKey.width / 2,popupKey.y + popupKey.height / 2,eventTime);
    mMiniKeyboard.onTouchEvent(downEvent);
    downEvent.recycle();
  }
  invalidateAllKeys();
  return true;
}",0.9969053022488136
157494,"@Override public boolean onTouchEvent(MotionEvent me){
  if (me.getAction() == MotionEvent.ACTION_DOWN) {
    mFirstTouchPont.x=(int)me.getX();
    mFirstTouchPont.y=(int)me.getY();
    mIsFirstDownEventInsideSpaceBar=mSpaceBarKey != null && mSpaceBarKey.isInside(mFirstTouchPont.x,mFirstTouchPont.y);
  }
 else   if (mIsFirstDownEventInsideSpaceBar) {
    if (me.getAction() == MotionEvent.ACTION_MOVE) {
      setGesturePreviewText(mSwitcher,me);
      return true;
    }
 else     if (me.getAction() == MotionEvent.ACTION_UP) {
      final int slide=getSlideDistance(me);
      final int distance=slide & 0x00FF;
      if (distance > SLIDE_RATIO_FOR_GESTURE) {
switch (slide & 0xFF00) {
case DIRECTION_DOWN:
          mKeyboardActionListener.onSwipeDown(true);
        break;
case DIRECTION_UP:
      mKeyboardActionListener.onSwipeUp(true);
    break;
case DIRECTION_LEFT:
  mKeyboardActionListener.onSwipeLeft(true);
break;
case DIRECTION_RIGHT:
mKeyboardActionListener.onSwipeRight(true);
break;
}
}
 else {
super.onTouchEvent(me);
}
return true;
}
}
if (!mIsFirstDownEventInsideSpaceBar && me.getY() < mExtensionKeyboardYActivationPoint && !isPopupShowing() && !mExtensionVisible && me.getAction() != MotionEvent.ACTION_UP) {
if (mExtensionKeyboardAreaEntranceTime <= 0) mExtensionKeyboardAreaEntranceTime=System.currentTimeMillis();
if (System.currentTimeMillis() - mExtensionKeyboardAreaEntranceTime > DELAY_BEFORE_POPING_UP_EXTENSION_KBD) {
KeyboardExtension extKbd=((ExternalAnyKeyboard)getKeyboard()).getExtensionLayout();
if (extKbd == null || extKbd.getKeyboardResId() == -1) {
return super.onTouchEvent(me);
}
 else {
MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX(),me.getY(),0);
super.onTouchEvent(cancel);
cancel.recycle();
mExtensionVisible=true;
dismissKeyPreview();
if (mExtensionKey == null) {
mExtensionKey=new AnyKey(new Row(getKeyboard()),getThemedKeyboardDimens());
mExtensionKey.codes=new int[]{0};
mExtensionKey.edgeFlags=0;
mExtensionKey.height=1;
mExtensionKey.width=1;
mExtensionKey.popupResId=extKbd.getKeyboardResId();
mExtensionKey.x=getWidth() / 2;
mExtensionKey.y=mExtensionKeyboardPopupOffset;
}
mExtensionKey.x=(int)me.getX();
onLongPress(getContext(),mExtensionKey,AnyApplication.getConfig().isStickyExtensionKeyboard(),!AnyApplication.getConfig().isStickyExtensionKeyboard());
mMiniKeyboard.setPreviewEnabled(true);
return true;
}
}
 else {
return super.onTouchEvent(me);
}
}
 else if (mExtensionVisible && me.getY() > mExtensionKeyboardYDismissPoint) {
dismissPopupKeyboard();
return true;
}
 else {
return super.onTouchEvent(me);
}
}","@Override public boolean onTouchEvent(MotionEvent me){
  if (me.getAction() == MotionEvent.ACTION_DOWN) {
    mFirstTouchPont.x=(int)me.getX();
    mFirstTouchPont.y=(int)me.getY();
    mIsFirstDownEventInsideSpaceBar=mSpaceBarKey != null && mSpaceBarKey.isInside(mFirstTouchPont.x,mFirstTouchPont.y);
  }
 else   if (mIsFirstDownEventInsideSpaceBar) {
    if (me.getAction() == MotionEvent.ACTION_MOVE) {
      setGesturePreviewText(mSwitcher,me);
      return true;
    }
 else     if (me.getAction() == MotionEvent.ACTION_UP) {
      final int slide=getSlideDistance(me);
      final int distance=slide & 0x00FF;
      if (distance > SLIDE_RATIO_FOR_GESTURE) {
switch (slide & 0xFF00) {
case DIRECTION_DOWN:
          mKeyboardActionListener.onSwipeDown(true);
        break;
case DIRECTION_UP:
      mKeyboardActionListener.onSwipeUp(true);
    break;
case DIRECTION_LEFT:
  mKeyboardActionListener.onSwipeLeft(true);
break;
case DIRECTION_RIGHT:
mKeyboardActionListener.onSwipeRight(true);
break;
}
}
 else {
super.onTouchEvent(me);
}
return true;
}
}
if (!mIsFirstDownEventInsideSpaceBar && me.getY() < mExtensionKeyboardYActivationPoint && !isPopupShowing() && !mExtensionVisible && me.getAction() != MotionEvent.ACTION_UP) {
if (mExtensionKeyboardAreaEntranceTime <= 0) mExtensionKeyboardAreaEntranceTime=System.currentTimeMillis();
if (System.currentTimeMillis() - mExtensionKeyboardAreaEntranceTime > DELAY_BEFORE_POPING_UP_EXTENSION_KBD) {
KeyboardExtension extKbd=((ExternalAnyKeyboard)getKeyboard()).getExtensionLayout();
if (extKbd == null || extKbd.getKeyboardResId() == -1) {
return super.onTouchEvent(me);
}
 else {
MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX(),me.getY(),0);
super.onTouchEvent(cancel);
cancel.recycle();
mExtensionVisible=true;
dismissKeyPreview();
if (mExtensionKey == null) {
mExtensionKey=new AnyKey(new Row(getKeyboard()),getThemedKeyboardDimens());
mExtensionKey.codes=new int[]{0};
mExtensionKey.edgeFlags=0;
mExtensionKey.height=1;
mExtensionKey.width=1;
mExtensionKey.popupResId=extKbd.getKeyboardResId();
mExtensionKey.x=getWidth() / 2;
mExtensionKey.y=mExtensionKeyboardPopupOffset;
}
mExtensionKey.x=(int)me.getX();
onLongPress(getKeyboard().getKeyboardContext(),mExtensionKey,AnyApplication.getConfig().isStickyExtensionKeyboard(),!AnyApplication.getConfig().isStickyExtensionKeyboard());
mMiniKeyboard.setPreviewEnabled(true);
return true;
}
}
 else {
return super.onTouchEvent(me);
}
}
 else if (mExtensionVisible && me.getY() > mExtensionKeyboardYDismissPoint) {
dismissPopupKeyboard();
return true;
}
 else {
return super.onTouchEvent(me);
}
}",0.9958427815570672
157495,"private void setGesturePreviewText(KeyboardSwitcher switcher,MotionEvent me){
  if (mPreviewText == null)   return;
  final int slide=getSlideDistance(me);
  final int slideDisatance=slide & 0x00FF;
  if (slideDisatance >= 20) {
    final boolean isGesture=slideDisatance > SLIDE_RATIO_FOR_GESTURE;
    final int alpha=isGesture ? 255 : slideDisatance / 2;
    mPreviewText.setTextSize(TypedValue.COMPLEX_UNIT_PX,mGesturePreviewTextSize);
    int color=Color.argb(alpha,mGesturePreviewTextColorRed,mGesturePreviewTextColorGreen,mGesturePreviewTextColorBlue);
    mPreviewText.setTextColor(color);
    final int swipeKeyTarget;
    final Configuration cfg=AnyApplication.getConfig();
switch (slide & 0xFF00) {
case DIRECTION_UP:
      swipeKeyTarget=cfg.getGestureSwipeUpFromSpacebarKeyCode();
    break;
case DIRECTION_DOWN:
  swipeKeyTarget=cfg.getGestureSwipeDownKeyCode();
break;
case DIRECTION_LEFT:
swipeKeyTarget=cfg.getGestureSwipeLeftKeyCode();
break;
case DIRECTION_RIGHT:
swipeKeyTarget=cfg.getGestureSwipeRightKeyCode();
break;
default :
swipeKeyTarget=KeyCodes.SPACE;
break;
}
String tooltip;
switch (swipeKeyTarget) {
case KeyCodes.MODE_ALPHABET:
tooltip=switcher.peekNextAlphabetKeyboard();
break;
case KeyCodes.MODE_SYMOBLS:
tooltip=switcher.peekNextSymbolsKeyboard();
break;
default :
tooltip=""String_Node_Str"";
break;
}
mPreviewText.setText(tooltip);
}
 else {
mPreviewText.setText(""String_Node_Str"");
}
}","private void setGesturePreviewText(KeyboardSwitcher switcher,MotionEvent me){
  if (mPreviewText == null)   return;
  final int slide=getSlideDistance(me);
  final int slideDisatance=slide & 0x00FF;
  if (slideDisatance >= 20) {
    final boolean isGesture=slideDisatance > SLIDE_RATIO_FOR_GESTURE;
    final int alpha=isGesture ? 255 : slideDisatance / 2;
    mPreviewText.setTextSize(TypedValue.COMPLEX_UNIT_PX,mGesturePreviewTextSize);
    int color=Color.argb(alpha,mGesturePreviewTextColorRed,mGesturePreviewTextColorGreen,mGesturePreviewTextColorBlue);
    mPreviewText.setTextColor(color);
    final int swipeKeyTarget;
    final Configuration cfg=AnyApplication.getConfig();
switch (slide & 0xFF00) {
case DIRECTION_UP:
      swipeKeyTarget=cfg.getGestureSwipeUpFromSpacebarKeyCode();
    break;
case DIRECTION_DOWN:
  swipeKeyTarget=cfg.getGestureSwipeDownKeyCode();
break;
case DIRECTION_LEFT:
swipeKeyTarget=cfg.getGestureSwipeLeftKeyCode();
break;
case DIRECTION_RIGHT:
swipeKeyTarget=cfg.getGestureSwipeRightKeyCode();
break;
default :
swipeKeyTarget=KeyCodes.SPACE;
break;
}
String tooltip;
switch (swipeKeyTarget) {
case KeyCodes.MODE_ALPHABET:
tooltip=switcher != null ? switcher.peekNextAlphabetKeyboard() : ""String_Node_Str"";
break;
case KeyCodes.MODE_SYMOBLS:
tooltip=switcher != null ? switcher.peekNextSymbolsKeyboard() : ""String_Node_Str"";
break;
default :
tooltip=""String_Node_Str"";
break;
}
mPreviewText.setText(tooltip);
}
 else {
mPreviewText.setText(""String_Node_Str"");
}
}",0.973305954825462
157496,"DictionaryContentObserver(DictionaryContentObserverDiagram diagram){
  super(null);
  mDictionary=new WeakReference<BTreeDictionary>(diagram.getOwningDictionary());
}","public DictionaryContentObserver(DictionaryContentObserverDiagram diagram){
  super(null);
  mDictionary=new WeakReference<BTreeDictionary>(diagram.getOwningDictionary());
}",0.9793510324483776
157497,"@Override protected boolean isEventRequiresViewReset(Intent eventIntent,Context context){
  KeyboardTheme selectedTheme=getCurrentKeyboardTheme(context.getApplicationContext());
  if ((selectedTheme != null) && (selectedTheme.getPackageContext().getPackageName().equals(eventIntent.getData().getSchemeSpecificPart()))) {
    Log.d(TAG,""String_Node_Str"");
    return true;
  }
  return false;
}","@Override protected boolean isEventRequiresViewReset(Intent eventIntent,Context context){
  KeyboardTheme selectedTheme=getCurrentKeyboardTheme(context.getApplicationContext());
  if ((selectedTheme != null) && (selectedTheme.getPackageName().equals(eventIntent.getData().getSchemeSpecificPart()))) {
    Log.d(TAG,""String_Node_Str"");
    return true;
  }
  return false;
}",0.9738903394255874
157498,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final AddOn addOn=getItem(position);
  LayoutInflater inflator=(LayoutInflater)getContext().getSystemService(Service.LAYOUT_INFLATER_SERVICE);
  View row=inflator.inflate(R.layout.addon_list_item_pref,parent,false);
  row.setTag(addOn);
  row.setOnClickListener(this);
  TextView title=(TextView)row.findViewById(R.id.addon_title);
  title.setText(addOn.getName());
  TextView description=(TextView)row.findViewById(R.id.addon_description);
  description.setText(addOn.getDescription());
  Drawable icon=null;
  if (addOn instanceof IconHolder) {
    IconHolder iconHolder=(IconHolder)addOn;
    icon=iconHolder.getIcon();
  }
  if (icon == null) {
    try {
      PackageManager packageManager=getContext().getPackageManager();
      PackageInfo packageInfo=packageManager.getPackageInfo(addOn.getPackageContext().getPackageName(),0);
      icon=packageInfo.applicationInfo.loadIcon(packageManager);
    }
 catch (    PackageManager.NameNotFoundException e) {
      icon=null;
    }
  }
  ImageView addOnIcon=(ImageView)row.findViewById(R.id.addon_image);
  addOnIcon.setImageDrawable(icon);
  if (addOn instanceof ScreenshotHolder) {
    if (((ScreenshotHolder)addOn).hasScreenshot()) {
      addOnIcon.setOnClickListener(this);
      addOnIcon.setTag(addOn);
      row.findViewById(R.id.addon_image_more_overlay).setVisibility(View.VISIBLE);
    }
  }
  RadioButton tb=(RadioButton)row.findViewById(R.id.addon_checkbox);
  tb.setClickable(false);
  tb.setChecked(addOn.getId() == mSelectedAddOn.getId());
  return row;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final AddOn addOn=getItem(position);
  LayoutInflater inflator=(LayoutInflater)getContext().getSystemService(Service.LAYOUT_INFLATER_SERVICE);
  View row=inflator.inflate(R.layout.addon_list_item_pref,parent,false);
  row.setTag(addOn);
  row.setOnClickListener(this);
  TextView title=(TextView)row.findViewById(R.id.addon_title);
  title.setText(addOn.getName());
  TextView description=(TextView)row.findViewById(R.id.addon_description);
  description.setText(addOn.getDescription());
  Drawable icon=null;
  if (addOn instanceof IconHolder) {
    IconHolder iconHolder=(IconHolder)addOn;
    icon=iconHolder.getIcon();
  }
  if (icon == null) {
    try {
      PackageManager packageManager=getContext().getPackageManager();
      PackageInfo packageInfo=packageManager.getPackageInfo(addOn.getPackageName(),0);
      icon=packageInfo.applicationInfo.loadIcon(packageManager);
    }
 catch (    PackageManager.NameNotFoundException e) {
      icon=null;
    }
  }
  ImageView addOnIcon=(ImageView)row.findViewById(R.id.addon_image);
  addOnIcon.setImageDrawable(icon);
  if (addOn instanceof ScreenshotHolder) {
    if (((ScreenshotHolder)addOn).hasScreenshot()) {
      addOnIcon.setOnClickListener(this);
      addOnIcon.setTag(addOn);
      row.findViewById(R.id.addon_image_more_overlay).setVisibility(View.VISIBLE);
    }
  }
  RadioButton tb=(RadioButton)row.findViewById(R.id.addon_checkbox);
  tb.setClickable(false);
  tb.setChecked(addOn.getId() == mSelectedAddOn.getId());
  return row;
}",0.9937264742785444
157499,"@Override public final WordsCursor getWordsCursor(){
  try {
    if (mStorage == null)     mStorage=createStorage(mLocale);
    return mStorage.getWordsCursor();
  }
 catch (  SQLiteException e) {
    e.printStackTrace();
    final String dbFile=mStorage.getDatabaseName();
    try {
      mStorage.close();
    }
 catch (    SQLiteException swallow) {
    }
    Log.w(TAG,""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ dbFile+ ""String_Node_Str"");
    mContext.deleteDatabase(dbFile);
    mStorage=null;
    mStorage=createStorage(mLocale);
    return mStorage.getWordsCursor();
  }
}","@Override public final WordsCursor getWordsCursor(){
  try {
    if (mStorage == null)     mStorage=createStorage(mLocale);
    return mStorage.getWordsCursor();
  }
 catch (  SQLiteException e) {
    e.printStackTrace();
    final String dbFile=mStorage.getDbFilename();
    try {
      mStorage.close();
    }
 catch (    SQLiteException swallow) {
    }
    Log.w(TAG,""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ dbFile+ ""String_Node_Str"");
    mContext.deleteDatabase(dbFile);
    mStorage=null;
    mStorage=createStorage(mLocale);
    return mStorage.getWordsCursor();
  }
}",0.9898648648648648
157500,"public WordsSQLiteConnection(Context context,String DbFilename,String currentLocale){
  super(context,DbFilename,null,7);
  mContext=context;
  mCurrentLocale=currentLocale;
}","public WordsSQLiteConnection(Context context,String DbFilename,String currentLocale){
  super(context,DbFilename,null,7);
  mContext=context;
  mCurrentLocale=currentLocale;
  mDbName=DbFilename;
}",0.9408602150537636
157501,"private void upgradeSettingsValues(SharedPreferences sp){
  if (AnyApplication.DEBUG)   Log.d(TAG,""String_Node_Str"");
  int configurationVersion=sp.getInt(CONFIGURATION_VERSION,4);
  if (configurationVersion < 1) {
    boolean oldLandscapeFullScreenValue=sp.getBoolean(""String_Node_Str"",mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
    if (AnyApplication.DEBUG)     Log.d(TAG,""String_Node_Str"");
    Editor e=sp.edit();
    e.putBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),oldLandscapeFullScreenValue);
    e.remove(""String_Node_Str"");
    e.putInt(CONFIGURATION_VERSION,1);
    e.commit();
  }
  if (configurationVersion < 2) {
    if (AnyApplication.DEBUG)     Log.d(TAG,""String_Node_Str"");
    Editor e=sp.edit();
    e.putString(""String_Node_Str"",mContext.getString(R.string.settings_default_portrait_keyboard_height_factor));
    e.putString(""String_Node_Str"",mContext.getString(R.string.settings_default_landscape_keyboard_height_factor));
    e.putInt(CONFIGURATION_VERSION,2);
    e.commit();
  }
  if (configurationVersion < 3) {
    Editor e=sp.edit();
    if (Workarounds.getApiLevel() <= 7) {
      if (AnyApplication.DEBUG)       Log.d(TAG,""String_Node_Str"");
      final String bottomRowKey=mContext.getString(R.string.settings_key_ext_kbd_bottom_row_key);
      String currentBottomRowId=sp.getString(bottomRowKey,mContext.getString(R.string.settings_default_ext_kbd_bottom_row_key));
      String newBottomRowId=""String_Node_Str"";
      if (currentBottomRowId.equals(""String_Node_Str"")) {
        newBottomRowId=""String_Node_Str"";
      }
 else       if (currentBottomRowId.equals(""String_Node_Str"")) {
        newBottomRowId=""String_Node_Str"";
      }
      if (!TextUtils.isEmpty(newBottomRowId)) {
        Log.i(TAG,""String_Node_Str"" + currentBottomRowId + ""String_Node_Str""+ newBottomRowId+ ""String_Node_Str"");
        e.putString(bottomRowKey,newBottomRowId);
      }
    }
    e.putInt(CONFIGURATION_VERSION,3);
    e.commit();
  }
  if (configurationVersion < 4) {
    Editor e=sp.edit();
    if (AnyApplication.DEBUG)     Log.d(TAG,""String_Node_Str"");
    e.putBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
    e.putInt(CONFIGURATION_VERSION,4);
    e.commit();
  }
}","private void upgradeSettingsValues(SharedPreferences sp){
  if (AnyApplication.DEBUG)   Log.d(TAG,""String_Node_Str"");
  int configurationVersion=sp.getInt(CONFIGURATION_VERSION,5);
  if (configurationVersion < 1) {
    boolean oldLandscapeFullScreenValue=sp.getBoolean(""String_Node_Str"",mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
    Log.i(TAG,""String_Node_Str"");
    Editor e=sp.edit();
    e.putBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),oldLandscapeFullScreenValue);
    e.remove(""String_Node_Str"");
    e.putInt(CONFIGURATION_VERSION,1);
    e.commit();
  }
  if (configurationVersion < 2) {
    Log.i(TAG,""String_Node_Str"");
    Editor e=sp.edit();
    e.putString(""String_Node_Str"",mContext.getString(R.string.settings_default_portrait_keyboard_height_factor));
    e.putString(""String_Node_Str"",mContext.getString(R.string.settings_default_landscape_keyboard_height_factor));
    e.putInt(CONFIGURATION_VERSION,2);
    e.commit();
  }
  if (configurationVersion < 3) {
    Editor e=sp.edit();
    if (Workarounds.getApiLevel() <= 7) {
      Log.i(TAG,""String_Node_Str"");
      final String bottomRowKey=mContext.getString(R.string.settings_key_ext_kbd_bottom_row_key);
      String currentBottomRowId=sp.getString(bottomRowKey,mContext.getString(R.string.settings_default_ext_kbd_bottom_row_key));
      String newBottomRowId=""String_Node_Str"";
      if (currentBottomRowId.equals(""String_Node_Str"")) {
        newBottomRowId=""String_Node_Str"";
      }
 else       if (currentBottomRowId.equals(""String_Node_Str"")) {
        newBottomRowId=""String_Node_Str"";
      }
      if (!TextUtils.isEmpty(newBottomRowId)) {
        Log.i(TAG,""String_Node_Str"" + currentBottomRowId + ""String_Node_Str""+ newBottomRowId+ ""String_Node_Str"");
        e.putString(bottomRowKey,newBottomRowId);
      }
    }
    e.putInt(CONFIGURATION_VERSION,3);
    e.commit();
  }
  if (configurationVersion < 4) {
    Editor e=sp.edit();
    Log.i(TAG,""String_Node_Str"");
    e.putBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
    e.putInt(CONFIGURATION_VERSION,4);
    e.commit();
  }
  if (configurationVersion < 5) {
    Editor e=sp.edit();
    Log.i(TAG,""String_Node_Str"");
    e.putBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),getAlwaysUseDrawTextDefault());
    e.putInt(CONFIGURATION_VERSION,5);
    e.commit();
  }
}",0.9177435897435896
157502,"public ConfigurationImpl(Context context){
  mContext=context;
  String version=""String_Node_Str"";
  int releaseNumber=0;
  try {
    PackageInfo info=mContext.getPackageManager().getPackageInfo(mContext.getPackageName(),0);
    version=info.versionName;
    releaseNumber=info.versionCode;
  }
 catch (  NameNotFoundException e) {
    Log.e(TAG,""String_Node_Str"");
  }
  Log.i(TAG,""String_Node_Str"" + version);
  Log.i(TAG,""String_Node_Str"" + releaseNumber);
  Log.i(TAG,""String_Node_Str"" + AnyApplication.DEBUG);
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(mContext);
  updateStatistics(sp,mContext);
  customizeSettingValues(mContext.getApplicationContext(),sp);
  upgradeSettingsValues(sp);
  onSharedPreferenceChanged(sp,""String_Node_Str"");
}","public ConfigurationImpl(Context context){
  mContext=context;
  String version=""String_Node_Str"";
  int releaseNumber=0;
  try {
    PackageInfo info=mContext.getPackageManager().getPackageInfo(mContext.getPackageName(),0);
    version=info.versionName;
    releaseNumber=info.versionCode;
  }
 catch (  NameNotFoundException e) {
    Log.e(TAG,""String_Node_Str"");
  }
  Log.i(TAG,""String_Node_Str"" + version);
  Log.i(TAG,""String_Node_Str"" + releaseNumber);
  Log.i(TAG,""String_Node_Str"" + AnyApplication.DEBUG);
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(mContext);
  updateStatistics(sp,mContext);
  customizeSettingValues(mContext.getApplicationContext(),sp);
  upgradeSettingsValues(sp);
  initializeComputedValues(sp);
  onSharedPreferenceChanged(sp,""String_Node_Str"");
}",0.9796954314720812
157503,"public void onSharedPreferenceChanged(SharedPreferences sp,String key){
  Log.i(TAG,""String_Node_Str"");
  mFirstAppVersionInstalled=sp.getInt(mContext.getString(R.string.settings_key_first_app_version_installed),0);
  mFirstTimeAppInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_app_installed),0);
  mFirstTimeCurrentVersionInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_current_version_installed),0);
  mDomainText=sp.getString(""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mDomainText);
  mShowKeyPreview=sp.getBoolean(mContext.getString(R.string.settings_key_key_press_shows_preview_popup),mContext.getResources().getBoolean(R.bool.settings_default_key_press_shows_preview_popup));
  Log.d(TAG,""String_Node_Str"" + mShowKeyPreview);
  mKeyPreviewAboveKey=sp.getString(mContext.getString(R.string.settings_key_key_press_preview_popup_position),mContext.getString(R.string.settings_default_key_press_preview_popup_position)).equals(""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mKeyPreviewAboveKey);
  mShowKeyboardNameText=sp.getBoolean(mContext.getString(R.string.settings_key_show_keyboard_name_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_keyboard_name_text_value));
  Log.d(TAG,""String_Node_Str"" + mShowKeyboardNameText);
  mShowHintTextOnKeys=sp.getBoolean(mContext.getString(R.string.settings_key_show_hint_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_hint_text_value));
  Log.d(TAG,""String_Node_Str"" + mShowHintTextOnKeys);
  mUseCustomHintAlign=sp.getBoolean(mContext.getString(R.string.settings_key_use_custom_hint_align_key),mContext.getResources().getBoolean(R.bool.settings_default_use_custom_hint_align_value));
  Log.d(TAG,""String_Node_Str"" + mUseCustomHintAlign);
  mCustomHintAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_align_key),mContext.getString(R.string.settings_default_custom_hint_align_value));
  Log.d(TAG,""String_Node_Str"" + mCustomHintAlign);
  mCustomHintVAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_valign_key),mContext.getString(R.string.settings_default_custom_hint_valign_value));
  Log.d(TAG,""String_Node_Str"" + mCustomHintVAlign);
  mSwitchKeyboardOnSpace=sp.getBoolean(""String_Node_Str"",false);
  Log.d(TAG,""String_Node_Str"" + mSwitchKeyboardOnSpace);
  mUseFullScreenInputInLandscape=sp.getBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
  Log.d(TAG,""String_Node_Str"" + mUseFullScreenInputInLandscape);
  mUseFullScreenInputInPortrait=sp.getBoolean(mContext.getString(R.string.settings_key_portrait_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_portrait_fullscreen));
  Log.d(TAG,""String_Node_Str"" + mUseFullScreenInputInPortrait);
  mUseKeyRepeat=sp.getBoolean(""String_Node_Str"",true);
  Log.d(TAG,""String_Node_Str"" + mUseKeyRepeat);
  mKeysHeightFactorInPortrait=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_portrait_keyboard_height_factor));
  Log.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  if (mKeysHeightFactorInPortrait > 2.0f) {
    mKeysHeightFactorInPortrait=2.0f;
    Log.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Log.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
  mKeysHeightFactorInLandscape=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_landscape_keyboard_height_factor));
  Log.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  if (mKeysHeightFactorInLandscape > 2.0f) {
    mKeysHeightFactorInLandscape=2.0f;
    Log.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Log.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
  mInsertSpaceAfterCandidatePick=sp.getBoolean(""String_Node_Str"",true);
  Log.d(TAG,""String_Node_Str"" + mInsertSpaceAfterCandidatePick);
  mSwipeUpKeyCode=getIntFromSwipeConfiguration(sp,""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mSwipeUpKeyCode);
  mSwipeUpFromSpacebarKeyCode=getIntFromSwipeConfiguration(sp,""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mSwipeUpFromSpacebarKeyCode);
  mSwipeDownKeyCode=getIntFromSwipeConfiguration(sp,""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mSwipeDownKeyCode);
  mSwipeLeftKeyCode=getIntFromSwipeConfiguration(sp,""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mSwipeLeftKeyCode);
  mSwipeRightKeyCode=getIntFromSwipeConfiguration(sp,""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mSwipeRightKeyCode);
  mPinchKeyCode=getIntFromSwipeConfiguration(sp,""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mPinchKeyCode);
  mSeparateKeyCode=getIntFromSwipeConfiguration(sp,""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mSeparateKeyCode);
  mActionKeyInvisibleWhenRequested=sp.getBoolean(""String_Node_Str"",false);
  Log.d(TAG,""String_Node_Str"" + mActionKeyInvisibleWhenRequested);
  mIsDoubleSpaceChangesToPeroid=sp.getBoolean(""String_Node_Str"",true);
  Log.d(TAG,""String_Node_Str"" + mIsDoubleSpaceChangesToPeroid);
  mShouldPopupForLanguageSwitch=sp.getBoolean(mContext.getString(R.string.settings_key_lang_key_shows_popup),mContext.getResources().getBoolean(R.bool.settings_default_lang_key_shows_popup));
  Log.d(TAG,""String_Node_Str"" + mShouldPopupForLanguageSwitch);
  mHideSoftKeyboardWhenPhysicalKeyPressed=sp.getBoolean(mContext.getString(R.string.settings_key_hide_soft_when_physical),mContext.getResources().getBoolean(R.bool.settings_default_hide_soft_when_physical));
  Log.d(TAG,""String_Node_Str"" + mHideSoftKeyboardWhenPhysicalKeyPressed);
  mShowVersionNotification=sp.getBoolean(mContext.getString(R.string.settings_key_show_version_notification),mContext.getResources().getBoolean(R.bool.settings_default_show_version_notification));
  Log.d(TAG,""String_Node_Str"" + mShowVersionNotification);
  mShowTipsNotification=sp.getBoolean(mContext.getString(R.string.settings_key_show_tips_notification),mContext.getResources().getBoolean(R.bool.settings_default_show_tips_notification));
  Log.d(TAG,""String_Node_Str"" + mShowTipsNotification);
  mUse16KeysSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_use_16_keys_symbols_keyboards),mContext.getResources().getBoolean(R.bool.settings_default_use_16_keys_symbols_keyboards));
  Log.d(TAG,""String_Node_Str"" + mUse16KeysSymbolsKeyboard);
  mUseBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_backword));
  Log.d(TAG,""String_Node_Str"" + mUseBackword);
  mCycleOverAllSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_cycle_all_symbols),mContext.getResources().getBoolean(R.bool.settings_default_cycle_all_symbols));
  Log.d(TAG,""String_Node_Str"" + mCycleOverAllSymbolsKeyboard);
  mUseCameraKeyForBackspaceBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_camera_key_for_backspace_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_camera_key_for_backspace_backword));
  Log.d(TAG,""String_Node_Str"" + mUseCameraKeyForBackspaceBackword);
  mUseVolumeKeyForLeftRight=sp.getBoolean(mContext.getString(R.string.settings_key_use_volume_key_for_left_right),mContext.getResources().getBoolean(R.bool.settings_default_use_volume_key_for_left_right));
  Log.d(TAG,""String_Node_Str"" + mUseVolumeKeyForLeftRight);
  mUseContactsDictionary=sp.getBoolean(mContext.getString(R.string.settings_key_use_contacts_dictionary),mContext.getResources().getBoolean(R.bool.settings_default_contacts_dictionary));
  Log.d(TAG,""String_Node_Str"" + mUseContactsDictionary);
  mAutoDictionaryInsertionThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_auto_dictionary_threshold),mContext.getString(R.string.settings_default_auto_dictionary_add_threshold));
  Log.d(TAG,""String_Node_Str"" + mAutoDictionaryInsertionThreshold);
  mIsStickyExtensionKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_is_sticky_extesion_keyboard),mContext.getResources().getBoolean(R.bool.settings_default_is_sticky_extesion_keyboard));
  Log.d(TAG,""String_Node_Str"" + mIsStickyExtensionKeyboard);
  mDrawExtensionKeyboardAboveMainKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_is_extesion_keyboard_above_keyboard),mContext.getResources().getBoolean(R.bool.settings_default_is_extesion_keyboard_above_keyboard));
  Log.d(TAG,""String_Node_Str"" + mDrawExtensionKeyboardAboveMainKeyboard);
  mSwipeDistanceThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_distance_threshold),mContext.getString(R.string.settings_default_swipe_distance_threshold));
  Log.d(TAG,""String_Node_Str"" + mSwipeDistanceThreshold);
  mSwipeVelocityThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_velocity_threshold),mContext.getString(R.string.settings_default_swipe_velocity_threshold));
  Log.d(TAG,""String_Node_Str"" + mSwipeVelocityThreshold);
  mLongPressTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_long_press_timeout),mContext.getString(R.string.settings_default_long_press_timeout));
  Log.d(TAG,""String_Node_Str"" + mLongPressTimeout);
  mMultiTapTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_multitap_timeout),mContext.getString(R.string.settings_default_multitap_timeout));
  Log.d(TAG,""String_Node_Str"" + mMultiTapTimeout);
  mWorkaround_alwaysUseDrawText=sp.getBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),getAlwaysUseDrawTextDefault());
  Log.d(TAG,""String_Node_Str"" + mWorkaround_alwaysUseDrawText);
  mInitialKeyboardSplitState=sp.getString(mContext.getString(R.string.settings_key_default_split_state),mContext.getString(R.string.settings_default_default_split_state));
  Log.d(TAG,""String_Node_Str"" + mInitialKeyboardSplitState);
  mUseChewbacca=sp.getBoolean(mContext.getString(R.string.settings_key_show_chewbacca),mContext.getResources().getBoolean(R.bool.settings_default_show_chewbacca));
  Log.d(TAG,""String_Node_Str"" + mUseChewbacca);
  String shouldSwapType=sp.getString(mContext.getString(R.string.settings_key_should_swap_punctuation_and_space),mContext.getString(R.string.settings_default_should_swap_punctuation_and_space));
  mSwapPunctuationAndSpace=shouldSwapType.equals(""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mSwapPunctuationAndSpace);
  String animationsLevel=sp.getString(mContext.getString(R.string.settings_key_tweak_animations_level),mContext.getString(R.string.settings_default_tweak_animations_level));
  if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.None;
 else   if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.Some;
 else   mAnimationsLevel=AnimationsLevel.Full;
  Log.d(TAG,""String_Node_Str"" + mAnimationsLevel);
  final LinkedList<OnSharedPreferenceChangeListener> disconnectedList=new LinkedList<SharedPreferences.OnSharedPreferenceChangeListener>(mPreferencesChangedListeners);
  for (  OnSharedPreferenceChangeListener listener : disconnectedList) {
    listener.onSharedPreferenceChanged(sp,key);
  }
}","public void onSharedPreferenceChanged(SharedPreferences sp,String key){
  Log.d(TAG,""String_Node_Str"");
  mFirstAppVersionInstalled=sp.getInt(mContext.getString(R.string.settings_key_first_app_version_installed),0);
  mFirstTimeAppInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_app_installed),0);
  mFirstTimeCurrentVersionInstalled=sp.getLong(mContext.getString(R.string.settings_key_first_time_current_version_installed),0);
  mDomainText=sp.getString(""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mDomainText);
  mShowKeyPreview=sp.getBoolean(mContext.getString(R.string.settings_key_key_press_shows_preview_popup),mContext.getResources().getBoolean(R.bool.settings_default_key_press_shows_preview_popup));
  Log.d(TAG,""String_Node_Str"" + mShowKeyPreview);
  mKeyPreviewAboveKey=sp.getString(mContext.getString(R.string.settings_key_key_press_preview_popup_position),mContext.getString(R.string.settings_default_key_press_preview_popup_position)).equals(""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mKeyPreviewAboveKey);
  mShowKeyboardNameText=sp.getBoolean(mContext.getString(R.string.settings_key_show_keyboard_name_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_keyboard_name_text_value));
  Log.d(TAG,""String_Node_Str"" + mShowKeyboardNameText);
  mShowHintTextOnKeys=sp.getBoolean(mContext.getString(R.string.settings_key_show_hint_text_key),mContext.getResources().getBoolean(R.bool.settings_default_show_hint_text_value));
  Log.d(TAG,""String_Node_Str"" + mShowHintTextOnKeys);
  mUseCustomHintAlign=sp.getBoolean(mContext.getString(R.string.settings_key_use_custom_hint_align_key),mContext.getResources().getBoolean(R.bool.settings_default_use_custom_hint_align_value));
  Log.d(TAG,""String_Node_Str"" + mUseCustomHintAlign);
  mCustomHintAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_align_key),mContext.getString(R.string.settings_default_custom_hint_align_value));
  Log.d(TAG,""String_Node_Str"" + mCustomHintAlign);
  mCustomHintVAlign=getIntFromString(sp,mContext.getString(R.string.settings_key_custom_hint_valign_key),mContext.getString(R.string.settings_default_custom_hint_valign_value));
  Log.d(TAG,""String_Node_Str"" + mCustomHintVAlign);
  mSwitchKeyboardOnSpace=sp.getBoolean(""String_Node_Str"",false);
  Log.d(TAG,""String_Node_Str"" + mSwitchKeyboardOnSpace);
  mUseFullScreenInputInLandscape=sp.getBoolean(mContext.getString(R.string.settings_key_landscape_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_landscape_fullscreen));
  Log.d(TAG,""String_Node_Str"" + mUseFullScreenInputInLandscape);
  mUseFullScreenInputInPortrait=sp.getBoolean(mContext.getString(R.string.settings_key_portrait_fullscreen),mContext.getResources().getBoolean(R.bool.settings_default_portrait_fullscreen));
  Log.d(TAG,""String_Node_Str"" + mUseFullScreenInputInPortrait);
  mUseKeyRepeat=sp.getBoolean(""String_Node_Str"",true);
  Log.d(TAG,""String_Node_Str"" + mUseKeyRepeat);
  mKeysHeightFactorInPortrait=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_portrait_keyboard_height_factor));
  Log.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  if (mKeysHeightFactorInPortrait > 2.0f) {
    mKeysHeightFactorInPortrait=2.0f;
    Log.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Log.d(TAG,""String_Node_Str"" + mKeysHeightFactorInPortrait);
  }
  mKeysHeightFactorInLandscape=getFloatFromString(sp,""String_Node_Str"",mContext.getString(R.string.settings_default_landscape_keyboard_height_factor));
  Log.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  if (mKeysHeightFactorInLandscape > 2.0f) {
    mKeysHeightFactorInLandscape=2.0f;
    Log.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
 else   if (mKeysHeightFactorInPortrait < 0.2f) {
    mKeysHeightFactorInPortrait=0.2f;
    Log.d(TAG,""String_Node_Str"" + mKeysHeightFactorInLandscape);
  }
  mInsertSpaceAfterCandidatePick=sp.getBoolean(""String_Node_Str"",true);
  Log.d(TAG,""String_Node_Str"" + mInsertSpaceAfterCandidatePick);
  mSwipeUpKeyCode=getIntFromSwipeConfiguration(sp,""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mSwipeUpKeyCode);
  mSwipeUpFromSpacebarKeyCode=getIntFromSwipeConfiguration(sp,""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mSwipeUpFromSpacebarKeyCode);
  mSwipeDownKeyCode=getIntFromSwipeConfiguration(sp,""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mSwipeDownKeyCode);
  mSwipeLeftKeyCode=getIntFromSwipeConfiguration(sp,""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mSwipeLeftKeyCode);
  mSwipeRightKeyCode=getIntFromSwipeConfiguration(sp,""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mSwipeRightKeyCode);
  mPinchKeyCode=getIntFromSwipeConfiguration(sp,""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mPinchKeyCode);
  mSeparateKeyCode=getIntFromSwipeConfiguration(sp,""String_Node_Str"",""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mSeparateKeyCode);
  mActionKeyInvisibleWhenRequested=sp.getBoolean(""String_Node_Str"",false);
  Log.d(TAG,""String_Node_Str"" + mActionKeyInvisibleWhenRequested);
  mIsDoubleSpaceChangesToPeroid=sp.getBoolean(""String_Node_Str"",true);
  Log.d(TAG,""String_Node_Str"" + mIsDoubleSpaceChangesToPeroid);
  mShouldPopupForLanguageSwitch=sp.getBoolean(mContext.getString(R.string.settings_key_lang_key_shows_popup),mContext.getResources().getBoolean(R.bool.settings_default_lang_key_shows_popup));
  Log.d(TAG,""String_Node_Str"" + mShouldPopupForLanguageSwitch);
  mHideSoftKeyboardWhenPhysicalKeyPressed=sp.getBoolean(mContext.getString(R.string.settings_key_hide_soft_when_physical),mContext.getResources().getBoolean(R.bool.settings_default_hide_soft_when_physical));
  Log.d(TAG,""String_Node_Str"" + mHideSoftKeyboardWhenPhysicalKeyPressed);
  mShowVersionNotification=sp.getBoolean(mContext.getString(R.string.settings_key_show_version_notification),mContext.getResources().getBoolean(R.bool.settings_default_show_version_notification));
  Log.d(TAG,""String_Node_Str"" + mShowVersionNotification);
  mShowTipsNotification=sp.getBoolean(mContext.getString(R.string.settings_key_show_tips_notification),mContext.getResources().getBoolean(R.bool.settings_default_show_tips_notification));
  Log.d(TAG,""String_Node_Str"" + mShowTipsNotification);
  mUse16KeysSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_use_16_keys_symbols_keyboards),mContext.getResources().getBoolean(R.bool.settings_default_use_16_keys_symbols_keyboards));
  Log.d(TAG,""String_Node_Str"" + mUse16KeysSymbolsKeyboard);
  mUseBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_backword));
  Log.d(TAG,""String_Node_Str"" + mUseBackword);
  mCycleOverAllSymbolsKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_cycle_all_symbols),mContext.getResources().getBoolean(R.bool.settings_default_cycle_all_symbols));
  Log.d(TAG,""String_Node_Str"" + mCycleOverAllSymbolsKeyboard);
  mUseCameraKeyForBackspaceBackword=sp.getBoolean(mContext.getString(R.string.settings_key_use_camera_key_for_backspace_backword),mContext.getResources().getBoolean(R.bool.settings_default_use_camera_key_for_backspace_backword));
  Log.d(TAG,""String_Node_Str"" + mUseCameraKeyForBackspaceBackword);
  mUseVolumeKeyForLeftRight=sp.getBoolean(mContext.getString(R.string.settings_key_use_volume_key_for_left_right),mContext.getResources().getBoolean(R.bool.settings_default_use_volume_key_for_left_right));
  Log.d(TAG,""String_Node_Str"" + mUseVolumeKeyForLeftRight);
  mUseContactsDictionary=sp.getBoolean(mContext.getString(R.string.settings_key_use_contacts_dictionary),mContext.getResources().getBoolean(R.bool.settings_default_contacts_dictionary));
  Log.d(TAG,""String_Node_Str"" + mUseContactsDictionary);
  mAutoDictionaryInsertionThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_auto_dictionary_threshold),mContext.getString(R.string.settings_default_auto_dictionary_add_threshold));
  Log.d(TAG,""String_Node_Str"" + mAutoDictionaryInsertionThreshold);
  mIsStickyExtensionKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_is_sticky_extesion_keyboard),mContext.getResources().getBoolean(R.bool.settings_default_is_sticky_extesion_keyboard));
  Log.d(TAG,""String_Node_Str"" + mIsStickyExtensionKeyboard);
  mDrawExtensionKeyboardAboveMainKeyboard=sp.getBoolean(mContext.getString(R.string.settings_key_is_extesion_keyboard_above_keyboard),mContext.getResources().getBoolean(R.bool.settings_default_is_extesion_keyboard_above_keyboard));
  Log.d(TAG,""String_Node_Str"" + mDrawExtensionKeyboardAboveMainKeyboard);
  mSwipeDistanceThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_distance_threshold),mContext.getString(R.string.settings_default_swipe_distance_threshold));
  Log.d(TAG,""String_Node_Str"" + mSwipeDistanceThreshold);
  mSwipeVelocityThreshold=getIntFromString(sp,mContext.getString(R.string.settings_key_swipe_velocity_threshold),mContext.getString(R.string.settings_default_swipe_velocity_threshold));
  Log.d(TAG,""String_Node_Str"" + mSwipeVelocityThreshold);
  mLongPressTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_long_press_timeout),mContext.getString(R.string.settings_default_long_press_timeout));
  Log.d(TAG,""String_Node_Str"" + mLongPressTimeout);
  mMultiTapTimeout=getIntFromString(sp,mContext.getString(R.string.settings_key_multitap_timeout),mContext.getString(R.string.settings_default_multitap_timeout));
  Log.d(TAG,""String_Node_Str"" + mMultiTapTimeout);
  mWorkaround_alwaysUseDrawText=sp.getBoolean(mContext.getString(R.string.settings_key_workaround_disable_rtl_fix),getAlwaysUseDrawTextDefault());
  Log.d(TAG,""String_Node_Str"" + mWorkaround_alwaysUseDrawText);
  mInitialKeyboardSplitState=sp.getString(mContext.getString(R.string.settings_key_default_split_state),mContext.getString(R.string.settings_default_default_split_state));
  Log.d(TAG,""String_Node_Str"" + mInitialKeyboardSplitState);
  mUseChewbacca=sp.getBoolean(mContext.getString(R.string.settings_key_show_chewbacca),mContext.getResources().getBoolean(R.bool.settings_default_show_chewbacca));
  Log.d(TAG,""String_Node_Str"" + mUseChewbacca);
  String shouldSwapType=sp.getString(mContext.getString(R.string.settings_key_should_swap_punctuation_and_space),mContext.getString(R.string.settings_default_should_swap_punctuation_and_space));
  mSwapPunctuationAndSpace=shouldSwapType.equals(""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + mSwapPunctuationAndSpace);
  String animationsLevel=sp.getString(mContext.getString(R.string.settings_key_tweak_animations_level),mContext.getString(R.string.settings_default_tweak_animations_level));
  if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.None;
 else   if (""String_Node_Str"".equals(animationsLevel))   mAnimationsLevel=AnimationsLevel.Some;
 else   mAnimationsLevel=AnimationsLevel.Full;
  Log.d(TAG,""String_Node_Str"" + mAnimationsLevel);
  final LinkedList<OnSharedPreferenceChangeListener> disconnectedList=new LinkedList<SharedPreferences.OnSharedPreferenceChangeListener>(mPreferencesChangedListeners);
  for (  OnSharedPreferenceChangeListener listener : disconnectedList) {
    listener.onSharedPreferenceChanged(sp,key);
  }
}",0.999913269731136
157504,"public void deleteNode(int nodeIndexToDelete){
  length--;
  final int oldChildrenCount=data.length;
  Node[] newChildren=new Node[oldChildrenCount - 1];
  int newArrayIndex=0;
  for (int oldArrayIndex=0; oldArrayIndex < oldChildrenCount; oldArrayIndex++) {
    if (oldArrayIndex != nodeIndexToDelete)     newChildren[newArrayIndex]=data[oldArrayIndex];
 else     newArrayIndex++;
  }
  data=newChildren;
}","public void deleteNode(int nodeIndexToDelete){
  length--;
  final int oldChildrenCount=data.length;
  Node[] newChildren=new Node[oldChildrenCount - 1];
  int newArrayIndex=0;
  for (int oldArrayIndex=0; oldArrayIndex < oldChildrenCount; oldArrayIndex++) {
    if (oldArrayIndex != nodeIndexToDelete) {
      newChildren[newArrayIndex]=data[oldArrayIndex];
      newArrayIndex++;
    }
  }
  data=newChildren;
}",0.938875305623472
157505,"private int deleteWordRec(final NodeArray children,final CharSequence word,final int offset,final int length){
  final int count=children.length;
  final char currentChar=word.charAt(offset);
  for (int j=0; j < count; j++) {
    final Node node=children.data[j];
    if (node.code == currentChar) {
      if (offset == length - 1) {
        if (node.terminal) {
          node.terminal=false;
          return j;
        }
      }
 else {
        if (node.children != null) {
          final int deletedIndex=deleteWordRec(node.children,word,offset + 1,length);
          if (deletedIndex >= 0) {
            Node deletedNode=node.children.data[deletedIndex];
            if (deletedNode.children.length == 0 && !deletedNode.terminal) {
              node.children.deleteNode(deletedIndex);
              return j;
            }
 else {
              return -1;
            }
          }
        }
      }
    }
  }
  return -1;
}","private boolean deleteWordRec(final NodeArray children,final CharSequence word,final int offset,final int length){
  final int count=children.length;
  final char currentChar=word.charAt(offset);
  for (int j=0; j < count; j++) {
    final Node node=children.data[j];
    if (node.code == currentChar) {
      if (offset == length - 1) {
        if (node.terminal) {
          children.deleteNode(j);
          return true;
        }
 else {
          return false;
        }
      }
 else {
        final boolean aChildNodeWasDeleted=deleteWordRec(node.children,word,offset + 1,length);
        if (aChildNodeWasDeleted) {
          if (node.children.length == 0) {
            children.deleteNode(j);
            return true;
          }
 else {
            return false;
          }
        }
      }
    }
  }
  return false;
}",0.5187287173666288
157506,"private void handleShift(boolean reset){
  mHandler.removeMessages(MSG_UPDATE_SHIFT_STATE);
  if (mKeyboardSwitcher.isAlphabetMode()) {
    final boolean caps;
    if (reset) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mInputView.setShifted(false);
      caps=false;
    }
 else {
      if (!mInputView.isShifted()) {
        mShiftStartTime=SystemClock.elapsedRealtime();
        if (DEBUG)         Log.d(TAG,""String_Node_Str"");
        mInputView.setShifted(true);
        caps=false;
      }
 else {
        if (mInputView.isShiftLocked()) {
          if (DEBUG)           Log.d(TAG,""String_Node_Str"");
          mInputView.setShifted(false);
          caps=false;
        }
 else {
          if ((SystemClock.elapsedRealtime() - mShiftStartTime) < mConfig.getMultiTapTimeout()) {
            if (DEBUG)             Log.d(TAG,""String_Node_Str"");
            mInputView.setShifted(true);
            caps=true;
          }
 else {
            if (DEBUG)             Log.d(TAG,""String_Node_Str"");
            mInputView.setShifted(false);
            caps=false;
          }
        }
      }
    }
    mCapsLock=caps;
    mInputView.setShiftLocked(mCapsLock);
  }
}","private void handleShift(boolean reset){
  mHandler.removeMessages(MSG_UPDATE_SHIFT_STATE);
  if (mInputView != null && mKeyboardSwitcher.isAlphabetMode()) {
    final boolean caps;
    if (reset) {
      mInputView.setShifted(false);
      caps=false;
    }
 else {
      if (!mInputView.isShifted()) {
        mShiftStartTime=SystemClock.elapsedRealtime();
        mInputView.setShifted(true);
        caps=false;
      }
 else {
        if (mInputView.isShiftLocked()) {
          mInputView.setShifted(false);
          caps=false;
        }
 else {
          if ((SystemClock.elapsedRealtime() - mShiftStartTime) < mConfig.getMultiTapTimeout()) {
            Log.d(TAG,""String_Node_Str"");
            mInputView.setShifted(true);
            caps=true;
          }
 else {
            Log.d(TAG,""String_Node_Str"");
            mInputView.setShifted(false);
            caps=false;
          }
        }
      }
    }
    mCapsLock=caps;
    mInputView.setShiftLocked(mCapsLock);
  }
}",0.4454670961803957
157507,"@Override public boolean onTouchEvent(MotionEvent nativeMotionEvent){
  mMotionEvent.setNativeMotionEvent(nativeMotionEvent);
  WMotionEvent me=mMotionEvent;
  final int action=me.getActionMasked();
  final int pointerCount=me.getPointerCount();
  final int oldPointerCount=mOldPointerCount;
  mOldPointerCount=pointerCount;
  if (!mHasDistinctMultitouch && pointerCount > 1 && oldPointerCount > 1) {
    return true;
  }
  mSwipeTracker.addMovement(nativeMotionEvent);
  if (!mMiniKeyboardVisible && mGestureDetector != null && (mGestureDetector.onTouchEvent(nativeMotionEvent))) {
    if (AnyApplication.DEBUG)     Log.d(TAG,""String_Node_Str"");
    mHandler.cancelKeyTimers();
    dismissKeyPreview();
    return true;
  }
  final long eventTime=me.getEventTime();
  final int index=me.getActionIndex();
  final int id=me.getPointerId(index);
  final int x=(int)me.getX(index);
  final int y=(int)me.getY(index);
  if (mMiniKeyboard != null && mMiniKeyboardVisible) {
    final int miniKeyboardPointerIndex=me.findPointerIndex(mMiniKeyboardTrackerId);
    if (miniKeyboardPointerIndex >= 0 && miniKeyboardPointerIndex < pointerCount) {
      final int miniKeyboardX=(int)me.getX(miniKeyboardPointerIndex);
      final int miniKeyboardY=(int)me.getY(miniKeyboardPointerIndex);
      MotionEvent translated=generateMiniKeyboardMotionEvent(action,miniKeyboardX,miniKeyboardY,eventTime);
      mMiniKeyboard.onTouchEvent(translated);
      translated.recycle();
    }
    return true;
  }
  if (mHandler.isInKeyRepeat()) {
    if (action == MotionEvent.ACTION_MOVE) {
      return true;
    }
    final PointerTracker tracker=getPointerTracker(id);
    if (pointerCount > 1 && !tracker.isModifier()) {
      mHandler.cancelKeyRepeatTimer();
    }
  }
  if (!mHasDistinctMultitouch) {
    PointerTracker tracker=getPointerTracker(0);
    if (pointerCount == 1 && oldPointerCount == 2) {
      tracker.onDownEvent(x,y,eventTime);
    }
 else     if (pointerCount == 2 && oldPointerCount == 1) {
      tracker.onUpEvent(tracker.getLastX(),tracker.getLastY(),eventTime);
    }
 else     if (pointerCount == 1 && oldPointerCount == 1) {
      tracker.onTouchEvent(action,x,y,eventTime);
    }
 else {
      Log.w(TAG,""String_Node_Str"" + pointerCount + ""String_Node_Str""+ oldPointerCount+ ""String_Node_Str"");
    }
    return true;
  }
  if (action == MotionEvent.ACTION_MOVE) {
    for (int i=0; i < pointerCount; i++) {
      PointerTracker tracker=getPointerTracker(me.getPointerId(i));
      tracker.onMoveEvent((int)me.getX(i),(int)me.getY(i),eventTime);
    }
  }
 else {
    PointerTracker tracker=getPointerTracker(id);
    sendOnXEvent(action,eventTime,x,y,tracker);
  }
  return true;
}","@Override public boolean onTouchEvent(MotionEvent nativeMotionEvent){
  if (mKeyboard == null)   return false;
  mMotionEvent.setNativeMotionEvent(nativeMotionEvent);
  WMotionEvent me=mMotionEvent;
  final int action=me.getActionMasked();
  final int pointerCount=me.getPointerCount();
  final int oldPointerCount=mOldPointerCount;
  mOldPointerCount=pointerCount;
  if (!mHasDistinctMultitouch && pointerCount > 1 && oldPointerCount > 1) {
    return true;
  }
  mSwipeTracker.addMovement(nativeMotionEvent);
  if (!mMiniKeyboardVisible && mGestureDetector != null && (mGestureDetector.onTouchEvent(nativeMotionEvent))) {
    if (AnyApplication.DEBUG)     Log.d(TAG,""String_Node_Str"");
    mHandler.cancelKeyTimers();
    dismissKeyPreview();
    return true;
  }
  final long eventTime=me.getEventTime();
  final int index=me.getActionIndex();
  final int id=me.getPointerId(index);
  final int x=(int)me.getX(index);
  final int y=(int)me.getY(index);
  if (mMiniKeyboard != null && mMiniKeyboardVisible) {
    final int miniKeyboardPointerIndex=me.findPointerIndex(mMiniKeyboardTrackerId);
    if (miniKeyboardPointerIndex >= 0 && miniKeyboardPointerIndex < pointerCount) {
      final int miniKeyboardX=(int)me.getX(miniKeyboardPointerIndex);
      final int miniKeyboardY=(int)me.getY(miniKeyboardPointerIndex);
      MotionEvent translated=generateMiniKeyboardMotionEvent(action,miniKeyboardX,miniKeyboardY,eventTime);
      mMiniKeyboard.onTouchEvent(translated);
      translated.recycle();
    }
    return true;
  }
  if (mHandler.isInKeyRepeat()) {
    if (action == MotionEvent.ACTION_MOVE) {
      return true;
    }
    final PointerTracker tracker=getPointerTracker(id);
    if (pointerCount > 1 && !tracker.isModifier()) {
      mHandler.cancelKeyRepeatTimer();
    }
  }
  if (!mHasDistinctMultitouch) {
    PointerTracker tracker=getPointerTracker(0);
    if (pointerCount == 1 && oldPointerCount == 2) {
      tracker.onDownEvent(x,y,eventTime);
    }
 else     if (pointerCount == 2 && oldPointerCount == 1) {
      tracker.onUpEvent(tracker.getLastX(),tracker.getLastY(),eventTime);
    }
 else     if (pointerCount == 1 && oldPointerCount == 1) {
      tracker.onTouchEvent(action,x,y,eventTime);
    }
 else {
      Log.w(TAG,""String_Node_Str"" + pointerCount + ""String_Node_Str""+ oldPointerCount+ ""String_Node_Str"");
    }
    return true;
  }
  if (action == MotionEvent.ACTION_MOVE) {
    for (int i=0; i < pointerCount; i++) {
      PointerTracker tracker=getPointerTracker(me.getPointerId(i));
      tracker.onMoveEvent((int)me.getX(i),(int)me.getY(i),eventTime);
    }
  }
 else {
    PointerTracker tracker=getPointerTracker(id);
    sendOnXEvent(action,eventTime,x,y,tracker);
  }
  return true;
}",0.992431235000923
157508,"public void onViewNotRequired(){
  if (AnyApplication.DEBUG)   Log.d(TAG,""String_Node_Str"");
  AnyApplication.getConfig().removeChangedListener(this);
  unbindDrawable(mPreviewPopup.getBackground());
  unbindDrawable(getBackground());
  for (int i=0; i < mKeysIcons.size(); i++) {
    Drawable d=mKeysIcons.valueAt(i);
    unbindDrawable(d);
  }
  mKeysIcons.clear();
  mKeysIconBuilders.clear();
  unbindDrawable(mPreviewKeyBackground);
  unbindDrawable(mKeyBackground);
  mMiniKeyboardParent=null;
  if (mMiniKeyboard != null)   mMiniKeyboard.onViewNotRequired();
  mMiniKeyboard=null;
  mKeyboardActionListener=null;
  mKeyboard=null;
  closing();
}","public void onViewNotRequired(){
  if (AnyApplication.DEBUG)   Log.d(TAG,""String_Node_Str"");
  AnyApplication.getConfig().removeChangedListener(this);
  unbindDrawable(mPreviewPopup.getBackground());
  unbindDrawable(getBackground());
  for (int i=0; i < mKeysIcons.size(); i++) {
    Drawable d=mKeysIcons.valueAt(i);
    unbindDrawable(d);
  }
  mKeysIcons.clear();
  mKeysIconBuilders.clear();
  unbindDrawable(mPreviewKeyBackground);
  unbindDrawable(mKeyBackground);
  mMiniKeyboardParent=null;
  if (mMiniKeyboard != null)   mMiniKeyboard.onViewNotRequired();
  mMiniKeyboard=null;
  mKeyboardActionListener=null;
  mGestureDetector=null;
  mKeyboard=null;
  closing();
}",0.981188863807374
157509,"private void setDictionariesForCurrentKeyboard(){
  if (mSuggest != null) {
    if (!mPredictionOn) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mSuggest.setMainDictionary(null);
      mSuggest.setUserDictionary(null);
      mSuggest.setAutoDictionary(null);
      mLastDictionaryRefresh=-1;
    }
 else {
      mLastDictionaryRefresh=SystemClock.elapsedRealtime();
      if ((mKeyboardSwitcher != null) && mKeyboardSwitcher.isAlphabetMode()) {
        AnyKeyboard currentKeyobard=mKeyboardSwitcher.getCurrentKeyboard();
        String mappingSettingsKey=getDictionaryOverrideKey(currentKeyobard);
        String defaultDictionary=currentKeyobard.getDefaultDictionaryLocale();
        String dictionaryValue=getSharedPreferences().getString(mappingSettingsKey,null);
        DictionaryAddOnAndBuilder dictionaryBuilder=null;
        if (dictionaryValue == null) {
          dictionaryBuilder=ExternalDictionaryFactory.getDictionaryBuilderByLocale(currentKeyobard.getDefaultDictionaryLocale(),this);
        }
 else {
          if (DEBUG) {
            Log.d(TAG,""String_Node_Str"" + (defaultDictionary == null ? ""String_Node_Str"" : defaultDictionary) + ""String_Node_Str""+ currentKeyobard.getKeyboardPrefId()+ ""String_Node_Str""+ dictionaryValue+ ""String_Node_Str"");
          }
          dictionaryBuilder=ExternalDictionaryFactory.getDictionaryBuilderById(dictionaryValue,this);
        }
        mSuggest.setMainDictionary(dictionaryBuilder);
        String localeForSupportingDictionaries=dictionaryBuilder != null ? dictionaryBuilder.getLanguage() : defaultDictionary;
        mUserDictionary=DictionaryFactory.getInstance().createUserDictionary(this,localeForSupportingDictionaries);
        mSuggest.setUserDictionary(mUserDictionary);
        mAutoDictionary=DictionaryFactory.getInstance().createAutoDictionary(this,this,localeForSupportingDictionaries);
        mSuggest.setAutoDictionary(mAutoDictionary);
        mSuggest.setContactsDictionary(getApplicationContext(),mConfig.useContactsDictionary());
      }
    }
  }
}","private void setDictionariesForCurrentKeyboard(){
  if (mSuggest != null) {
    if (!mPredictionOn) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mSuggest.setMainDictionary(null);
      mSuggest.setUserDictionary(null);
      mSuggest.setAutoDictionary(null);
      mLastDictionaryRefresh=-1;
    }
 else {
      mLastDictionaryRefresh=SystemClock.elapsedRealtime();
      if ((mKeyboardSwitcher != null) && mKeyboardSwitcher.isAlphabetMode()) {
        AnyKeyboard currentKeyobard=mKeyboardSwitcher.getCurrentKeyboard();
        String mappingSettingsKey=getDictionaryOverrideKey(currentKeyobard);
        String defaultDictionary=currentKeyobard.getDefaultDictionaryLocale();
        String dictionaryValue=getSharedPreferences().getString(mappingSettingsKey,null);
        DictionaryAddOnAndBuilder dictionaryBuilder=null;
        if (dictionaryValue == null) {
          dictionaryBuilder=ExternalDictionaryFactory.getDictionaryBuilderByLocale(currentKeyobard.getDefaultDictionaryLocale(),this);
        }
 else {
          if (DEBUG) {
            Log.d(TAG,""String_Node_Str"" + (defaultDictionary == null ? ""String_Node_Str"" : defaultDictionary) + ""String_Node_Str""+ currentKeyobard.getKeyboardPrefId()+ ""String_Node_Str""+ dictionaryValue+ ""String_Node_Str"");
          }
          dictionaryBuilder=ExternalDictionaryFactory.getDictionaryBuilderById(dictionaryValue,this);
        }
        mSuggest.setMainDictionary(dictionaryBuilder);
        String localeForSupportingDictionaries=dictionaryBuilder != null ? dictionaryBuilder.getLanguage() : defaultDictionary;
        mUserDictionary=DictionaryFactory.getInstance().createUserDictionary(this,localeForSupportingDictionaries);
        mUserDictionary.loadDictionary();
        mSuggest.setUserDictionary(mUserDictionary);
        mAutoDictionary=DictionaryFactory.getInstance().createAutoDictionary(this,this,localeForSupportingDictionaries);
        mSuggest.setAutoDictionary(mAutoDictionary);
        mSuggest.setContactsDictionary(getApplicationContext(),mConfig.useContactsDictionary());
      }
    }
  }
}",0.9898403483309144
157510,"public synchronized EditableDictionary createUserDictionary(Context context,String locale){
  if (mUserDictionary != null && equalsString(mUserDictionaryLocale,locale)) {
    Log.d(TAG,""String_Node_Str"" + mUserDictionaryLocale);
    return mUserDictionary;
  }
  Log.d(TAG,""String_Node_Str"" + locale);
  mUserDictionary=new SafeUserDictionary(context,locale);
  mUserDictionary.loadDictionary();
  mUserDictionaryLocale=locale;
  return mUserDictionary;
}","public synchronized EditableDictionary createUserDictionary(Context context,String locale){
  if (mUserDictionary != null && equalsString(mUserDictionaryLocale,locale)) {
    Log.d(TAG,""String_Node_Str"" + mUserDictionaryLocale);
    return mUserDictionary;
  }
  Log.d(TAG,""String_Node_Str"" + locale);
  mUserDictionary=new SafeUserDictionary(context,locale);
  mUserDictionaryLocale=locale;
  return mUserDictionary;
}",0.9588100686498856
157511,"@Override protected Void doInBackground(Void... params){
  try {
    final File externalFolder=Environment.getExternalStorageDirectory();
    final File targetFolder=new File(externalFolder,""String_Node_Str"" + getPackageName() + ""String_Node_Str"");
    targetFolder.mkdirs();
    XmlWriter output=new XmlWriter(new File(targetFolder,ASK_USER_WORDS_SDCARD_FILENAME));
    output.writeEntity(""String_Node_Str"");
    for (    String locale : mLocalesToSave) {
      EditableDictionary dictionary=DictionaryFactory.getInstance().createUserDictionary(getApplicationContext(),locale);
      Log.d(TAG,""String_Node_Str"" + locale);
      if (dictionary != mCurrentDictionary && mCurrentDictionary != null) {
        mCursor.close();
        mCurrentDictionary.close();
      }
      mCurrentDictionary=dictionary;
      mCursor=mCurrentDictionary.getWordsCursor();
      output.writeEntity(""String_Node_Str"").writeAttribute(""String_Node_Str"",locale);
      Cursor cursor=mCursor.getCursor();
      cursor.moveToFirst();
      final int wordIndex=cursor.getColumnIndex(Words.WORD);
      final int freqIndex=cursor.getColumnIndex(Words.FREQUENCY);
      while (!cursor.isAfterLast()) {
        String word=cursor.getString(wordIndex).trim();
        int freq=cursor.getInt(freqIndex);
        output.writeEntity(""String_Node_Str"").writeAttribute(""String_Node_Str"",Integer.toString(freq)).writeText(word).endEntity();
        if (AnyApplication.DEBUG)         Log.d(TAG,""String_Node_Str"" + word + ""String_Node_Str""+ freq);
        cursor.moveToNext();
      }
      output.endEntity();
    }
    output.endEntity();
    output.close();
  }
 catch (  Exception e) {
    mException=e;
    e.printStackTrace();
  }
  return null;
}","@Override protected Void doInBackground(Void... params){
  try {
    final File externalFolder=Environment.getExternalStorageDirectory();
    final File targetFolder=new File(externalFolder,""String_Node_Str"" + getPackageName() + ""String_Node_Str"");
    targetFolder.mkdirs();
    XmlWriter output=new XmlWriter(new File(targetFolder,ASK_USER_WORDS_SDCARD_FILENAME));
    output.writeEntity(""String_Node_Str"");
    for (    String locale : mLocalesToSave) {
      EditableDictionary dictionary=new SafeUserDictionary(getApplicationContext(),locale);
      Log.d(TAG,""String_Node_Str"" + locale);
      if (dictionary != mCurrentDictionary && mCurrentDictionary != null) {
        mCursor.close();
        mCurrentDictionary.close();
      }
      mCurrentDictionary=dictionary;
      mCurrentDictionary.loadDictionary();
      mCursor=mCurrentDictionary.getWordsCursor();
      output.writeEntity(""String_Node_Str"").writeAttribute(""String_Node_Str"",locale);
      Cursor cursor=mCursor.getCursor();
      cursor.moveToFirst();
      final int wordIndex=cursor.getColumnIndex(Words.WORD);
      final int freqIndex=cursor.getColumnIndex(Words.FREQUENCY);
      while (!cursor.isAfterLast()) {
        String word=cursor.getString(wordIndex).trim();
        int freq=cursor.getInt(freqIndex);
        output.writeEntity(""String_Node_Str"").writeAttribute(""String_Node_Str"",Integer.toString(freq)).writeText(word).endEntity();
        if (AnyApplication.DEBUG)         Log.d(TAG,""String_Node_Str"" + word + ""String_Node_Str""+ freq);
        cursor.moveToNext();
      }
      output.endEntity();
    }
    output.endEntity();
    output.close();
  }
 catch (  Exception e) {
    mException=e;
    e.printStackTrace();
  }
  return null;
}",0.9747752971875906
157512,"@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  super.startElement(uri,localName,qName,attributes);
  if (localName.equals(""String_Node_Str"")) {
    inWord=true;
    word=""String_Node_Str"";
    freq=Integer.parseInt(attributes.getValue(""String_Node_Str""));
  }
  if (localName.equals(""String_Node_Str"")) {
    String locale=attributes.getValue(""String_Node_Str"");
    EditableDictionary dictionary=DictionaryFactory.getInstance().createUserDictionary(getApplicationContext(),locale);
    Log.d(TAG,""String_Node_Str"" + locale);
    if (dictionary != mCurrentDictionary && mCurrentDictionary != null)     mCurrentDictionary.close();
    mCurrentDictionary=dictionary;
  }
}","@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  super.startElement(uri,localName,qName,attributes);
  if (localName.equals(""String_Node_Str"")) {
    inWord=true;
    word=""String_Node_Str"";
    freq=Integer.parseInt(attributes.getValue(""String_Node_Str""));
  }
  if (localName.equals(""String_Node_Str"")) {
    String locale=attributes.getValue(""String_Node_Str"");
    EditableDictionary dictionary=new SafeUserDictionary(getApplicationContext(),locale);
    Log.d(TAG,""String_Node_Str"" + locale);
    if (dictionary != mCurrentDictionary && mCurrentDictionary != null)     mCurrentDictionary.close();
    mCurrentDictionary=dictionary;
    mCurrentDictionary.loadDictionary();
  }
}",0.9434464404524284
157513,"public void fillWordsList(){
  Log.d(TAG,""String_Node_Str"" + mSelectedLocale);
  new UserWordsEditorAsyncTask(this){
    private EditableDictionary mNewDictionary;
    @Override protected void onPreExecute(){
      super.onPreExecute();
      mNewDictionary=DictionaryFactory.getInstance().createUserDictionary(getApplicationContext(),mSelectedLocale);
    }
    @Override protected Void doInBackground(    Void... params){
      try {
        if (mNewDictionary != mCurrentDictionary && mCurrentDictionary != null) {
          mCursor.close();
          mCurrentDictionary.close();
        }
        mCurrentDictionary=mNewDictionary;
        mCursor=mCurrentDictionary.getWordsCursor();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      return null;
    }
    @Override protected void applyResults(    Void result){
      MyAdapter adapter=(MyAdapter)getListAdapter();
      if (adapter == null) {
        if (AnyApplication.DEBUG)         Log.d(TAG,""String_Node_Str"");
        adapter=new MyAdapter();
        setListAdapter(adapter);
      }
 else {
        if (AnyApplication.DEBUG)         Log.d(TAG,""String_Node_Str"");
        adapter.changeCursor(mCursor.getCursor());
      }
    }
  }
.execute();
}","public void fillWordsList(){
  Log.d(TAG,""String_Node_Str"" + mSelectedLocale);
  new UserWordsEditorAsyncTask(this){
    private EditableDictionary mNewDictionary;
    @Override protected void onPreExecute(){
      super.onPreExecute();
      mNewDictionary=new SafeUserDictionary(getApplicationContext(),mSelectedLocale);
      mNewDictionary.loadDictionary();
      if (mNewDictionary != mCurrentDictionary && mCurrentDictionary != null) {
        mCursor.close();
        mCurrentDictionary.close();
      }
    }
    @Override protected Void doInBackground(    Void... params){
      try {
        mCurrentDictionary=mNewDictionary;
        mCursor=mCurrentDictionary.getWordsCursor();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      return null;
    }
    @Override protected void applyResults(    Void result){
      MyAdapter adapter=(MyAdapter)getListAdapter();
      if (AnyApplication.DEBUG)       Log.d(TAG,""String_Node_Str"");
      adapter=new MyAdapter();
      setListAdapter(adapter);
    }
  }
.execute();
}",0.7256868730920192
157514,"@Override protected Void doInBackground(Void... v){
  loadDictionaryAsync();
synchronized (mUpdatingLock) {
    mUpdatingDictionary=false;
  }
  return null;
}","@Override protected Void doInBackground(Void... v){
synchronized (mUpdatingLock) {
    mUpdatingDictionary=false;
  }
  return null;
}",0.9146757679180888
157515,"public AutoText createAutoText(){
  if (mAutoTextResId == INVALID_RES_ID)   return null;
 else   return new AutoText(getPackageContext().getResources(),mAutoTextResId);
}","public AutoText createAutoText(){
  if (mAutoTextResId == INVALID_RES_ID) {
    return null;
  }
 else {
    try {
      return new AutoText(getPackageContext().getResources(),mAutoTextResId);
    }
 catch (    OutOfMemoryError e) {
      Log.i(TAG,""String_Node_Str"");
      return null;
    }
  }
}",0.6353944562899787
157516,"@Override public void onStartInputView(EditorInfo attribute,boolean restarting){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + attribute.imeOptions + ""String_Node_Str""+ attribute.inputType+ ""String_Node_Str""+ restarting+ ""String_Node_Str"");
  super.onStartInputView(attribute,restarting);
  if (mVoiceRecognitionTrigger != null) {
    mVoiceRecognitionTrigger.onStartInputView();
  }
  if (mInputView == null) {
    return;
  }
  mInputView.setKeyboardActionType(attribute.imeOptions);
  mKeyboardSwitcher.makeKeyboards(false);
  mPredictionOn=false;
  mCompletionOn=false;
  mCompletions=null;
  mCapsLock=false;
switch (attribute.inputType & EditorInfo.TYPE_MASK_CLASS) {
case EditorInfo.TYPE_CLASS_DATETIME:
    if (DEBUG)     Log.d(TAG,""String_Node_Str"");
  mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_DATETIME,attribute);
break;
case EditorInfo.TYPE_CLASS_NUMBER:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_NUMBERS,attribute);
break;
case EditorInfo.TYPE_CLASS_PHONE:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_PHONE,attribute);
break;
case EditorInfo.TYPE_CLASS_TEXT:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
final int variation=attribute.inputType & EditorInfo.TYPE_MASK_VARIATION;
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_PASSWORD:
case EditorInfo.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD:
case 0xe0:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mPredictionOn=false;
break;
default :
mPredictionOn=true;
}
if (mConfig.getInsertSpaceAfterCandidatePick()) {
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
case EditorInfo.TYPE_TEXT_VARIATION_URI:
case 0xd0:
mAutoSpace=false;
break;
default :
mAutoSpace=true;
}
}
 else {
mAutoSpace=false;
}
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
case 0xd0:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_EMAIL,attribute);
mPredictionOn=false;
break;
case EditorInfo.TYPE_TEXT_VARIATION_URI:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_URL,attribute);
mPredictionOn=false;
break;
case EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_IM,attribute);
break;
default :
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_TEXT,attribute);
}
final int textFlag=attribute.inputType & EditorInfo.TYPE_MASK_FLAGS;
switch (textFlag) {
case 0x00080000:
case EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mPredictionOn=false;
break;
default :
}
break;
default :
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_TEXT,attribute);
mPredictionOn=false;
mAutoSpace=true;
}
mPredicting=false;
mJustAddedAutoSpace=false;
setCandidatesViewShown(false);
updateShiftKeyState(attribute);
if (mSuggest != null) {
mSuggest.setCorrectionMode(mQuickFixes,mShowSuggestions);
}
mPredictionOn=mPredictionOn && (mShowSuggestions);
if (mCandidateView != null) mCandidateView.setSuggestions(null,false,false,false);
if (mPredictionOn) {
if ((SystemClock.elapsedRealtime() - mLastDictionaryRefresh) > MINIMUM_REFRESH_TIME_FOR_DICTIONARIES) setDictionariesForCurrentKeyboard();
}
 else {
setDictionariesForCurrentKeyboard();
}
if (TRACE_SDCARD) Debug.startMethodTracing(""String_Node_Str"");
}","@Override public void onStartInputView(final EditorInfo attribute,final boolean restarting){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + attribute.imeOptions + ""String_Node_Str""+ attribute.inputType+ ""String_Node_Str""+ restarting+ ""String_Node_Str"");
  super.onStartInputView(attribute,restarting);
  if (mVoiceRecognitionTrigger != null) {
    mVoiceRecognitionTrigger.onStartInputView();
  }
  if (mInputView == null) {
    return;
  }
  mInputView.setKeyboardActionType(attribute.imeOptions);
  mKeyboardSwitcher.makeKeyboards(false);
  mPredictionOn=false;
  mCompletionOn=false;
  mCompletions=null;
  mCapsLock=false;
switch (attribute.inputType & EditorInfo.TYPE_MASK_CLASS) {
case EditorInfo.TYPE_CLASS_DATETIME:
    if (DEBUG)     Log.d(TAG,""String_Node_Str"");
  mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_DATETIME,attribute,restarting);
break;
case EditorInfo.TYPE_CLASS_NUMBER:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_NUMBERS,attribute,restarting);
break;
case EditorInfo.TYPE_CLASS_PHONE:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_PHONE,attribute,restarting);
break;
case EditorInfo.TYPE_CLASS_TEXT:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
final int variation=attribute.inputType & EditorInfo.TYPE_MASK_VARIATION;
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_PASSWORD:
case EditorInfo.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD:
case 0xe0:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mPredictionOn=false;
break;
default :
mPredictionOn=true;
}
if (mConfig.getInsertSpaceAfterCandidatePick()) {
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
case EditorInfo.TYPE_TEXT_VARIATION_URI:
case 0xd0:
mAutoSpace=false;
break;
default :
mAutoSpace=true;
}
}
 else {
mAutoSpace=false;
}
switch (variation) {
case EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
case 0xd0:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_EMAIL,attribute,restarting);
mPredictionOn=false;
break;
case EditorInfo.TYPE_TEXT_VARIATION_URI:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_URL,attribute,restarting);
mPredictionOn=false;
break;
case EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_IM,attribute,restarting);
break;
default :
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_TEXT,attribute,restarting);
}
final int textFlag=attribute.inputType & EditorInfo.TYPE_MASK_FLAGS;
switch (textFlag) {
case 0x00080000:
case EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mPredictionOn=false;
break;
default :
}
break;
default :
if (DEBUG) Log.d(TAG,""String_Node_Str"");
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_TEXT,attribute,restarting);
mPredictionOn=false;
mAutoSpace=true;
}
mPredicting=false;
mJustAddedAutoSpace=false;
setCandidatesViewShown(false);
updateShiftKeyState(attribute);
if (mSuggest != null) {
mSuggest.setCorrectionMode(mQuickFixes,mShowSuggestions);
}
mPredictionOn=mPredictionOn && (mShowSuggestions);
if (mCandidateView != null) mCandidateView.setSuggestions(null,false,false,false);
if (mPredictionOn) {
if ((SystemClock.elapsedRealtime() - mLastDictionaryRefresh) > MINIMUM_REFRESH_TIME_FOR_DICTIONARIES) setDictionariesForCurrentKeyboard();
}
 else {
setDictionariesForCurrentKeyboard();
}
if (TRACE_SDCARD) Debug.startMethodTracing(""String_Node_Str"");
}",0.9859432105707056
157517,"public void setKeyboardMode(int mode,EditorInfo attr){
  AnyKeyboard keyboard=null;
switch (mode) {
case MODE_DATETIME:
    keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_DATETIME_INDEX,getKeyboardMode(attr));
  mAlphabetMode=false;
mKeyboardLocked=true;
break;
case MODE_NUMBERS:
keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_NUMBERS_INDEX,getKeyboardMode(attr));
mAlphabetMode=false;
mKeyboardLocked=true;
break;
case MODE_SYMBOLS:
keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_REGULAR_INDEX,getKeyboardMode(attr));
mAlphabetMode=false;
mKeyboardLocked=true;
break;
case MODE_PHONE:
keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_PHONE_INDEX,getKeyboardMode(attr));
mAlphabetMode=false;
mKeyboardLocked=true;
break;
case MODE_URL:
case MODE_EMAIL:
if (mLatinKeyboardIndex >= 0) mLastSelectedKeyboard=mLatinKeyboardIndex;
default :
mKeyboardLocked=false;
keyboard=getAlphabetKeyboard(mLastSelectedKeyboard,getKeyboardMode(attr));
mAlphabetMode=true;
break;
}
keyboard.setImeOptions(mContext.getResources(),attr);
mContext.setKeyboardStuffBeforeSetToView(keyboard);
if (mInputView != null) {
mInputView.setKeyboard(keyboard);
}
}","public void setKeyboardMode(final int mode,final EditorInfo attr,final boolean restarting){
  AnyKeyboard keyboard=null;
switch (mode) {
case MODE_DATETIME:
    keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_DATETIME_INDEX,getKeyboardMode(attr));
  mAlphabetMode=false;
mKeyboardLocked=true;
break;
case MODE_NUMBERS:
keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_NUMBERS_INDEX,getKeyboardMode(attr));
mAlphabetMode=false;
mKeyboardLocked=true;
break;
case MODE_SYMBOLS:
keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_REGULAR_INDEX,getKeyboardMode(attr));
mAlphabetMode=false;
mKeyboardLocked=true;
break;
case MODE_PHONE:
keyboard=getSymbolsKeyboard(SYMBOLS_KEYBOARD_PHONE_INDEX,getKeyboardMode(attr));
mAlphabetMode=false;
mKeyboardLocked=true;
break;
case MODE_URL:
case MODE_EMAIL:
if (!restarting && mLatinKeyboardIndex >= 0) {
mLastSelectedKeyboard=mLatinKeyboardIndex;
}
default :
mKeyboardLocked=false;
keyboard=getAlphabetKeyboard(mLastSelectedKeyboard,getKeyboardMode(attr));
mAlphabetMode=true;
break;
}
keyboard.setImeOptions(mContext.getResources(),attr);
mContext.setKeyboardStuffBeforeSetToView(keyboard);
if (mInputView != null) {
mInputView.setKeyboard(keyboard);
}
}",0.9626411815812336
157518,"public static void onPackageChanged(final Intent eventIntent,final AnySoftKeyboard ask){
  boolean cleared=false;
  boolean recreateView=false;
  for (  AddOnsFactory<?> factory : mActiveInstances) {
    try {
      if (factory.isEventRequiresCacheRefresh(eventIntent,ask.getApplicationContext())) {
        cleared=true;
        if (factory.isEventRequiresViewReset(eventIntent,ask.getApplicationContext()))         recreateView=true;
        if (AnyApplication.DEBUG)         Log.d(""String_Node_Str"",factory.getClass().getName() + ""String_Node_Str"" + recreateView);
        factory.clearAddOnList();
      }
    }
 catch (    NameNotFoundException e) {
      e.printStackTrace();
    }
  }
  if (cleared)   ask.resetKeyboardView(recreateView);
}","public static void onPackageChanged(final Intent eventIntent,final AnySoftKeyboard ask){
  boolean cleared=false;
  boolean recreateView=false;
  for (  AddOnsFactory<?> factory : mActiveInstances) {
    try {
      if (factory.isEventRequiresCacheRefresh(eventIntent,ask.getApplicationContext())) {
        cleared=true;
        if (factory.isEventRequiresViewReset(eventIntent,ask.getApplicationContext()))         recreateView=true;
        Log.d(sTAG,factory.getClass().getName() + ""String_Node_Str"" + recreateView);
        factory.clearAddOnList();
      }
    }
 catch (    NameNotFoundException e) {
      e.printStackTrace();
    }
  }
  if (cleared)   ask.resetKeyboardView(recreateView);
}",0.9136143745680718
157519,"@Override protected void onPrepareDialogBuilder(Builder builder){
  ListAdapter listAdapter=new AddOnArrayAdapter(getContext(),R.layout.addon_list_item_pref,mAddOns);
  builder.setAdapter(listAdapter,this);
  super.onPrepareDialogBuilder(builder);
}","@Override protected void onPrepareDialogBuilder(Builder builder){
  if (mAddOns != null) {
    ListAdapter listAdapter=new AddOnArrayAdapter(getContext(),R.layout.addon_list_item_pref,mAddOns);
    builder.setAdapter(listAdapter,this);
  }
  super.onPrepareDialogBuilder(builder);
}",0.9378531073446328
157520,"/** 
 * Get Key from primary code. on onKey event, it only gets primary key. So, to access Key of it, we need to find Key which contains it.
 */
public void onKey(int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes,boolean fromUI){
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + primaryCode);
  }
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.DELETE_WORD:
    if (ic == null)     break;
  handleBackword(ic);
break;
case KeyCodes.DELETE:
if (ic == null) break;
if (mInputView != null && mInputView.isShifted() && !mInputView.getKeyboard().isShiftLocked() && ((mDistinctMultiTouch && mShiftKeyState.isMomentary()) || mConfig.useBackword())) {
handleBackword(ic);
}
 else {
handleDeleteLastCharacter(false);
}
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
commitTyped(ic);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.SHIFT:
if ((!mDistinctMultiTouch) || !fromUI) handleShift(false);
break;
case KeyCodes.CTRL:
if ((!mDistinctMultiTouch) || !fromUI) handleControl(false);
break;
case KeyCodes.ARROW_LEFT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_LEFT);
break;
case KeyCodes.ARROW_RIGHT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_RIGHT);
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) newPosition=0;
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) newPosition=textAfter.length();
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
ic.setSelection(newPosition + textBefore.length(),newPosition + textBefore.length());
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger != null) mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentKeyboard().getDefaultDictionaryLocale());
break;
case KeyCodes.CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
if (getCurrentKeyboard() != null && mInputView != null) {
mKeyboardInCondensedMode=KeyCodes.SPLIT_LAYOUT == primaryCode;
AnyKeyboard currentKeyboard=getCurrentKeyboard();
setKeyboardStuffBeforeSetToView(currentKeyboard);
mInputView.setKeyboard(currentKeyboard);
}
break;
case KeyCodes.DOMAIN:
onText(mConfig.getDomainText());
break;
case KeyCodes.QUICK_TEXT:
QuickTextKey quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.QUICK_TEXT_POPUP:
quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (quickTextKey.getId().equals(SMILEY_PLUGIN_ID) && !mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (mKeyboardSwitcher.shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
case KeyCodes.UTILITY_KEYBOARD:
mInputView.openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD:
Clipboard cp=AnyApplication.getDeviceSpecific().getClipboard(getApplicationContext());
CharSequence clipboardText=cp.getText();
if (!TextUtils.isEmpty(clipboardText)) {
onText(clipboardText);
}
break;
case KeyCodes.TAB:
sendTab();
break;
case KeyCodes.ESCAPE:
sendEscape();
break;
default :
if (mKeyboardSwitcher.isRightToLeftMode()) {
if (primaryCode == (int)')') primaryCode=(int)'(';
 else if (primaryCode == (int)'(') primaryCode=(int)')';
}
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
}
 else {
if (mInputView != null && mInputView.isControl() && primaryCode >= 32 && primaryCode < 127) {
int controlCode=primaryCode & 31;
if (AnyApplication.DEBUG) Log.d(TAG,""String_Node_Str"" + primaryCode + ""String_Node_Str""+ controlCode);
if (controlCode == 9) {
sendTab();
}
 else {
ic.commitText(Character.toString((char)controlCode),1);
}
}
 else {
handleCharacter(primaryCode,key,multiTapIndex,nearByKeyCodes);
}
mJustAddedAutoSpace=false;
}
if (mKeyboardSwitcher.isKeyRequireSwitchToAlphabet(primaryCode)) {
mKeyboardSwitcher.nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
}
break;
}
}","public void onKey(int primaryCode,Key key,int multiTapIndex,int[] nearByKeyCodes,boolean fromUI){
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + primaryCode);
  }
  final InputConnection ic=getCurrentInputConnection();
switch (primaryCode) {
case KeyCodes.DELETE_WORD:
    if (ic == null)     break;
  handleBackword(ic);
break;
case KeyCodes.DELETE:
if (ic == null) break;
if (mInputView != null && mInputView.isShifted() && !mInputView.getKeyboard().isShiftLocked() && ((mDistinctMultiTouch && mShiftKeyState.isMomentary()) || mConfig.useBackword())) {
handleBackword(ic);
}
 else {
handleDeleteLastCharacter(false);
}
break;
case KeyCodes.CLEAR_INPUT:
if (ic != null) {
ic.beginBatchEdit();
commitTyped(ic);
ic.deleteSurroundingText(Integer.MAX_VALUE,Integer.MAX_VALUE);
ic.endBatchEdit();
}
break;
case KeyCodes.SHIFT:
if ((!mDistinctMultiTouch) || !fromUI) handleShift(false);
break;
case KeyCodes.CTRL:
if ((!mDistinctMultiTouch) || !fromUI) handleControl(false);
break;
case KeyCodes.ARROW_LEFT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_LEFT);
break;
case KeyCodes.ARROW_RIGHT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_RIGHT);
break;
case KeyCodes.ARROW_UP:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_UP);
break;
case KeyCodes.ARROW_DOWN:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_DOWN);
break;
case KeyCodes.MOVE_HOME:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007a);
}
 else {
if (ic != null) {
CharSequence textBefore=ic.getTextBeforeCursor(1024,0);
if (!TextUtils.isEmpty(textBefore)) {
int newPosition=textBefore.length() - 1;
while (newPosition > 0) {
char chatAt=textBefore.charAt(newPosition - 1);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition--;
}
if (newPosition < 0) newPosition=0;
ic.setSelection(newPosition,newPosition);
}
}
}
break;
case KeyCodes.MOVE_END:
if (Workarounds.getApiLevel() >= 11) {
sendDownUpKeyEvents(0x0000007b);
}
 else {
if (ic != null) {
CharSequence textAfter=ic.getTextAfterCursor(1024,0);
if (!TextUtils.isEmpty(textAfter)) {
int newPosition=1;
while (newPosition < textAfter.length()) {
char chatAt=textAfter.charAt(newPosition);
if (chatAt == '\n' || chatAt == '\r') {
break;
}
newPosition++;
}
if (newPosition > textAfter.length()) newPosition=textAfter.length();
CharSequence textBefore=ic.getTextBeforeCursor(Integer.MAX_VALUE,0);
ic.setSelection(newPosition + textBefore.length(),newPosition + textBefore.length());
}
}
}
break;
case KeyCodes.VOICE_INPUT:
if (mVoiceRecognitionTrigger != null) mVoiceRecognitionTrigger.startVoiceRecognition(getCurrentKeyboard().getDefaultDictionaryLocale());
break;
case KeyCodes.CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case KeyCodes.SETTINGS:
showOptionsMenu();
break;
case KeyCodes.SPLIT_LAYOUT:
case KeyCodes.MERGE_LAYOUT:
if (getCurrentKeyboard() != null && mInputView != null) {
mKeyboardInCondensedMode=KeyCodes.SPLIT_LAYOUT == primaryCode;
AnyKeyboard currentKeyboard=getCurrentKeyboard();
setKeyboardStuffBeforeSetToView(currentKeyboard);
mInputView.setKeyboard(currentKeyboard);
}
break;
case KeyCodes.DOMAIN:
onText(mConfig.getDomainText());
break;
case KeyCodes.QUICK_TEXT:
QuickTextKey quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.QUICK_TEXT_POPUP:
quickTextKey=QuickTextKeyFactory.getCurrentQuickTextKey(this);
if (quickTextKey.getId().equals(SMILEY_PLUGIN_ID) && !mSmileyOnShortPress) {
if (TextUtils.isEmpty(mOverrideQuickTextText)) onText(quickTextKey.getKeyOutputText());
 else onText(mOverrideQuickTextText);
}
 else {
if (quickTextKey.isPopupKeyboardUsed()) {
showQuickTextKeyPopupKeyboard(quickTextKey);
}
 else {
showQuickTextKeyPopupList(quickTextKey);
}
}
break;
case KeyCodes.MODE_SYMOBLS:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case KeyCodes.MODE_ALPHABET:
if (mKeyboardSwitcher.shouldPopupForLanguageSwitch()) {
showLanguageSelectionDialog();
}
 else nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
case KeyCodes.UTILITY_KEYBOARD:
mInputView.openUtilityKeyboard();
break;
case KeyCodes.MODE_ALPHABET_POPUP:
showLanguageSelectionDialog();
break;
case KeyCodes.ALT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case KeyCodes.KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case KeyCodes.KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KeyCodes.KEYBOARD_CYCLE_INSIDE_MODE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AnyInsideMode);
break;
case KeyCodes.KEYBOARD_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.OtherMode);
break;
case KeyCodes.CLIPBOARD:
Clipboard cp=AnyApplication.getDeviceSpecific().getClipboard(getApplicationContext());
CharSequence clipboardText=cp.getText();
if (!TextUtils.isEmpty(clipboardText)) {
onText(clipboardText);
}
break;
case KeyCodes.TAB:
sendTab();
break;
case KeyCodes.ESCAPE:
sendEscape();
break;
default :
if (mKeyboardSwitcher.isRightToLeftMode()) {
if (primaryCode == (int)')') primaryCode=(int)'(';
 else if (primaryCode == (int)'(') primaryCode=(int)')';
}
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
}
 else {
if (mInputView != null && mInputView.isControl() && primaryCode >= 32 && primaryCode < 127) {
int controlCode=primaryCode & 31;
if (AnyApplication.DEBUG) Log.d(TAG,""String_Node_Str"" + primaryCode + ""String_Node_Str""+ controlCode);
if (controlCode == 9) {
sendTab();
}
 else {
ic.commitText(Character.toString((char)controlCode),1);
}
}
 else {
handleCharacter(primaryCode,key,multiTapIndex,nearByKeyCodes);
}
mJustAddedAutoSpace=false;
}
if (mKeyboardSwitcher.isKeyRequireSwitchToAlphabet(primaryCode)) {
mKeyboardSwitcher.nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
}
break;
}
}",0.9883224611419829
157521,"private boolean pickDefaultSuggestion(){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + mBestWord);
  if (mHandler.hasMessages(MSG_UPDATE_SUGGESTIONS)) {
    postUpdateSuggestionsNow();
  }
  if (!TextUtils.isEmpty(mBestWord)) {
    TextEntryState.acceptedDefault(mWord.getTypedWord(),mBestWord);
    pickSuggestion(mBestWord,false);
    addToDictionaries(mBestWord,AutoDictionary.FREQUENCY_FOR_TYPED);
    return true;
  }
  return false;
}","private boolean pickDefaultSuggestion(){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + mBestWord);
  if (mHandler.hasMessages(MSG_UPDATE_SUGGESTIONS)) {
    performUpdateSuggestions();
  }
  if (!TextUtils.isEmpty(mBestWord)) {
    TextEntryState.acceptedDefault(mWord.getTypedWord(),mBestWord);
    pickSuggestion(mBestWord,false);
    addToDictionaries(mBestWord,AutoDictionary.FREQUENCY_FOR_TYPED);
    return true;
  }
  return false;
}",0.9476082004555808
157522,"private void commitTyped(InputConnection inputConnection){
  if (mPredicting) {
    mPredicting=false;
    if (mWord.size() > 0) {
      if (inputConnection != null) {
        inputConnection.commitText(mWord.getTypedWord(),1);
      }
      mCommittedLength=mWord.size();
      TextEntryState.acceptedTyped(mWord.getTypedWord());
      addToDictionaries(mWord.getTypedWord(),AutoDictionary.FREQUENCY_FOR_TYPED);
    }
    postUpdateSuggestionsNow();
  }
}","private void commitTyped(InputConnection inputConnection){
  if (mPredicting) {
    mPredicting=false;
    if (mWord.size() > 0) {
      if (inputConnection != null) {
        inputConnection.commitText(mWord.getTypedWord(),1);
      }
      mCommittedLength=mWord.size();
      TextEntryState.acceptedTyped(mWord.getTypedWord());
      addToDictionaries(mWord.getTypedWord(),AutoDictionary.FREQUENCY_FOR_TYPED);
    }
    if (mHandler.hasMessages(MSG_UPDATE_SUGGESTIONS)) {
      performUpdateSuggestions();
    }
  }
}",0.8913934426229508
157523,"protected void onPostExecute(Void result){
  progresDialog.dismiss();
  applyResults(result);
}","protected void onPostExecute(Void result){
  if (progresDialog.isShowing())   progresDialog.dismiss();
  applyResults(result);
}",0.852017937219731
157524,"@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  if (!mPredictionOn)   return;
  if (mPredicting && mWord.size() > 0 && (candidatesEnd - candidatesStart) != mWord.size()) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + mWord.size());
    return;
  }
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  if (newSelStart != newSelEnd) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"");
    abortCorrection(true,false);
  }
 else {
    if (mPredicting) {
      if (newSelStart >= candidatesStart && newSelStart <= candidatesEnd) {
        int cursorPosition=newSelEnd - candidatesStart;
        if (mWord.setCursorPostion(cursorPosition)) {
          if (DEBUG)           Log.d(TAG,""String_Node_Str"");
          updateShiftKeyState(getCurrentInputEditorInfo());
        }
      }
 else {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"");
        abortCorrection(true,false);
        postRestartWordSuggestion();
      }
    }
 else {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      postRestartWordSuggestion();
    }
  }
}","@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  if (!mPredictionOn)   return;
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  if (newSelStart != newSelEnd) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"");
    abortCorrection(true,false);
  }
 else {
    if (mPredicting) {
      if (newSelStart >= candidatesStart && newSelStart <= candidatesEnd) {
        int cursorPosition=newSelEnd - candidatesStart;
        if (mWord.setCursorPostion(cursorPosition)) {
          if (DEBUG)           Log.d(TAG,""String_Node_Str"");
          updateShiftKeyState(getCurrentInputEditorInfo());
        }
      }
 else {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"");
        abortCorrection(true,false);
        postRestartWordSuggestion();
      }
    }
 else {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      postRestartWordSuggestion();
    }
  }
}",0.6057692307692307
157525,"private void abortCorrection(boolean force,boolean forever){
  if (force || TextEntryState.isCorrecting()) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"");
    mHandler.removeMessages(MSG_UPDATE_SUGGESTIONS);
    mHandler.removeMessages(MSG_RESTART_NEW_WORD_SUGGESTIONS);
    getCurrentInputConnection().finishComposingText();
    clearSuggestions();
    mWord.reset();
    mPredicting=false;
    mJustAddedAutoSpace=false;
    if (forever) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mPredictionOn=false;
      setCandidatesViewShown(false);
      if (mSuggest != null) {
        mSuggest.setCorrectionMode(false,false);
      }
    }
  }
}","private void abortCorrection(boolean force,boolean forever){
  if (force || TextEntryState.isCorrecting()) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"");
    mHandler.removeMessages(MSG_UPDATE_SUGGESTIONS);
    mHandler.removeMessages(MSG_RESTART_NEW_WORD_SUGGESTIONS);
    final InputConnection ic=getCurrentInputConnection();
    if (ic != null)     ic.finishComposingText();
    clearSuggestions();
    TextEntryState.reset();
    mWord.reset();
    mPredicting=false;
    mJustAddedAutoSpace=false;
    if (forever) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mPredictionOn=false;
      setCandidatesViewShown(false);
      if (mSuggest != null) {
        mSuggest.setCorrectionMode(false,false);
      }
    }
  }
}",0.939329050678087
157526,"protected boolean isPackageContainAnAddon(Context context,String packageNameSchemePart) throws NameNotFoundException {
  PackageInfo newPackage=context.getPackageManager().getPackageInfo(packageNameSchemePart,PackageManager.GET_RECEIVERS);
  if (newPackage.receivers != null) {
    ActivityInfo[] receivers=newPackage.receivers;
    for (    ActivityInfo aReceiver : receivers) {
      final XmlPullParser xml=aReceiver.loadXmlMetaData(context.getPackageManager(),RECEIVER_META_DATA);
      if (xml != null) {
        return true;
      }
    }
  }
  return false;
}","protected boolean isPackageContainAnAddon(Context context,String packageNameSchemePart) throws NameNotFoundException {
  PackageInfo newPackage=context.getPackageManager().getPackageInfo(packageNameSchemePart,PackageManager.GET_RECEIVERS + PackageManager.GET_META_DATA);
  if (newPackage.receivers != null) {
    ActivityInfo[] receivers=newPackage.receivers;
    for (    ActivityInfo aReceiver : receivers) {
      final XmlPullParser xml=aReceiver.loadXmlMetaData(context.getPackageManager(),RECEIVER_META_DATA);
      if (xml != null) {
        return true;
      }
    }
  }
  return false;
}",0.9733447979363714
157527,"@Override public boolean onKeyUp(int keyCode,KeyEvent event){
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_DOWN:
case KeyEvent.KEYCODE_VOLUME_UP:
    if (AnySoftKeyboard.getInstance().isInputViewShown() == false) {
      return super.onKeyUp(keyCode,event);
    }
  if (mConfig.useVolumeKeyForLeftRight()) {
    return true;
  }
case KeyEvent.KEYCODE_DPAD_DOWN:
case KeyEvent.KEYCODE_DPAD_UP:
case KeyEvent.KEYCODE_DPAD_LEFT:
case KeyEvent.KEYCODE_DPAD_RIGHT:
if (mInputView != null && mInputView.isShown() && mInputView.isShifted()) {
  event=new KeyEvent(event.getDownTime(),event.getEventTime(),event.getAction(),event.getKeyCode(),event.getRepeatCount(),event.getDeviceId(),event.getScanCode(),KeyEvent.META_SHIFT_LEFT_ON | KeyEvent.META_SHIFT_ON);
  InputConnection ic=getCurrentInputConnection();
  if (ic != null)   ic.sendKeyEvent(event);
  return true;
}
break;
case KeyEvent.KEYCODE_ALT_LEFT:
case KeyEvent.KEYCODE_ALT_RIGHT:
case KeyEvent.KEYCODE_SHIFT_LEFT:
case KeyEvent.KEYCODE_SHIFT_RIGHT:
case KeyEvent.KEYCODE_SYM:
mMetaState=MyMetaKeyKeyListener.handleKeyUp(mMetaState,keyCode,event);
if (DEBUG) Log.d(""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
setInputConnectionMetaStateAsCurrentMetaKeyKeyListenerState();
break;
}
return super.onKeyUp(keyCode,event);
}","@Override public boolean onKeyUp(int keyCode,KeyEvent event){
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_DOWN:
case KeyEvent.KEYCODE_VOLUME_UP:
    if (isInputViewShown() == false) {
      return super.onKeyUp(keyCode,event);
    }
  if (mConfig.useVolumeKeyForLeftRight()) {
    updateShiftKeyState(getCurrentInputEditorInfo());
    return true;
  }
case KeyEvent.KEYCODE_DPAD_DOWN:
case KeyEvent.KEYCODE_DPAD_UP:
case KeyEvent.KEYCODE_DPAD_LEFT:
case KeyEvent.KEYCODE_DPAD_RIGHT:
if (mInputView != null && mInputView.isShown() && mInputView.isShifted()) {
  event=new KeyEvent(event.getDownTime(),event.getEventTime(),event.getAction(),event.getKeyCode(),event.getRepeatCount(),event.getDeviceId(),event.getScanCode(),KeyEvent.META_SHIFT_LEFT_ON | KeyEvent.META_SHIFT_ON);
  InputConnection ic=getCurrentInputConnection();
  if (ic != null)   ic.sendKeyEvent(event);
  updateShiftKeyState(getCurrentInputEditorInfo());
  return true;
}
break;
case KeyEvent.KEYCODE_ALT_LEFT:
case KeyEvent.KEYCODE_ALT_RIGHT:
case KeyEvent.KEYCODE_SHIFT_LEFT:
case KeyEvent.KEYCODE_SHIFT_RIGHT:
case KeyEvent.KEYCODE_SYM:
mMetaState=MyMetaKeyKeyListener.handleKeyUp(mMetaState,keyCode,event);
if (DEBUG) Log.d(""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
setInputConnectionMetaStateAsCurrentMetaKeyKeyListenerState();
break;
}
boolean r=super.onKeyUp(keyCode,event);
updateShiftKeyState(getCurrentInputEditorInfo());
return r;
}",0.9216623758734828
157528,"private void handleShift(boolean reset){
  mHandler.removeMessages(MSG_UPDATE_SHIFT_STATE);
  if (mKeyboardSwitcher.isAlphabetMode()) {
    if (DEBUG) {
      final AnyKeyboard viewKeyboard=(AnyKeyboard)mInputView.getKeyboard();
      if (mCurrentKeyboard != viewKeyboard) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
    final boolean caps;
    if (reset) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mInputView.setShifted(false);
      caps=false;
    }
 else {
      if (!mInputView.isShifted()) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"");
        mInputView.setShifted(true);
        caps=false;
      }
 else {
        if (mCurrentKeyboard.isShiftLocked()) {
          if (DEBUG)           Log.d(TAG,""String_Node_Str"");
          mInputView.setShifted(false);
          caps=false;
        }
 else {
          if (DEBUG)           Log.d(TAG,""String_Node_Str"");
          mInputView.setShifted(true);
          caps=true;
        }
      }
    }
    mCapsLock=caps;
    mCurrentKeyboard.setShiftLocked(mCapsLock);
  }
}","private void handleShift(boolean reset){
  if (mKeyboardSwitcher.isAlphabetMode()) {
    if (DEBUG) {
      final AnyKeyboard viewKeyboard=(AnyKeyboard)mInputView.getKeyboard();
      if (mCurrentKeyboard != viewKeyboard) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
    final boolean caps;
    if (reset) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mInputView.setShifted(false);
      caps=false;
    }
 else {
      if (!mInputView.isShifted()) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"");
        mInputView.setShifted(true);
        caps=false;
      }
 else {
        if (mCurrentKeyboard.isShiftLocked()) {
          if (DEBUG)           Log.d(TAG,""String_Node_Str"");
          mInputView.setShifted(false);
          caps=false;
        }
 else {
          if (DEBUG)           Log.d(TAG,""String_Node_Str"");
          mInputView.setShifted(true);
          caps=true;
        }
      }
    }
    mCapsLock=caps;
    mCurrentKeyboard.setShiftLocked(mCapsLock);
  }
}",0.975421686746988
157529,"public void onRelease(int primaryCode){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + primaryCode);
  final boolean distinctMultiTouch=mInputView.hasDistinctMultitouch();
  if (distinctMultiTouch && primaryCode == Keyboard.KEYCODE_SHIFT) {
    if (mShiftKeyState.isMomentary())     handleShift(true);
    mShiftKeyState.onRelease();
  }
  if (distinctMultiTouch && primaryCode == AnyKeyboard.KEYCODE_CTRL) {
    if (mControlKeyState.isMomentary())     handleControl(true);
    mControlKeyState.onRelease();
  }
}","public void onRelease(int primaryCode){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + primaryCode);
  final boolean distinctMultiTouch=mInputView.hasDistinctMultitouch();
  if (distinctMultiTouch && primaryCode == Keyboard.KEYCODE_SHIFT) {
    if (mShiftKeyState.isMomentary())     handleShift(true);
    mShiftKeyState.onRelease();
  }
  if (distinctMultiTouch && primaryCode == AnyKeyboard.KEYCODE_CTRL) {
    if (mControlKeyState.isMomentary())     handleControl(true);
    mControlKeyState.onRelease();
  }
  if (primaryCode != Keyboard.KEYCODE_SHIFT)   updateShiftKeyState(getCurrentInputEditorInfo());
}",0.9133154602323504
157530,"@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  if ((((mComposing.length() > 0 && mPredicting)) && (newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart)) {
    mComposing.setLength(0);
    mPredicting=false;
    postUpdateSuggestions();
    TextEntryState.reset();
    InputConnection ic=getCurrentInputConnection();
    if (ic != null) {
      ic.finishComposingText();
    }
  }
 else   if (!mPredicting && !mJustAccepted) {
switch (TextEntryState.getState()) {
case ACCEPTED_DEFAULT:
      TextEntryState.reset();
case SPACE_AFTER_PICKED:
    mJustAddedAutoSpace=false;
  break;
}
}
mJustAccepted=false;
postUpdateShiftKeyState();
mLastSelectionStart=newSelStart;
mLastSelectionEnd=newSelEnd;
}","@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  if ((((mComposing.length() > 0 && mPredicting)) && (newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart)) {
    mComposing.setLength(0);
    mPredicting=false;
    postUpdateSuggestions();
    TextEntryState.reset();
    InputConnection ic=getCurrentInputConnection();
    if (ic != null) {
      ic.finishComposingText();
    }
  }
 else   if (!mPredicting && !mJustAccepted) {
switch (TextEntryState.getState()) {
case ACCEPTED_DEFAULT:
      TextEntryState.reset();
case SPACE_AFTER_PICKED:
    mJustAddedAutoSpace=false;
  break;
}
}
mJustAccepted=false;
updateShiftKeyState(getCurrentInputEditorInfo());
mLastSelectionStart=newSelStart;
mLastSelectionEnd=newSelEnd;
}",0.9860228716645488
157531,"public void updateShiftKeyState(EditorInfo attr){
  mHandler.removeMessages(MSG_UPDATE_SHIFT_STATE);
  InputConnection ic=getCurrentInputConnection();
  if (ic != null && attr != null && mKeyboardSwitcher.isAlphabetMode() && (mInputView != null)) {
    mInputView.setShifted(mShiftKeyState.isMomentary() || mCapsLock || getCursorCapsMode(ic,attr) != 0);
  }
}","public void updateShiftKeyState(EditorInfo attr){
  InputConnection ic=getCurrentInputConnection();
  if (ic != null && attr != null && mKeyboardSwitcher.isAlphabetMode() && (mInputView != null)) {
    mInputView.setShifted(mShiftKeyState.isMomentary() || mCapsLock || getCursorCapsMode(ic,attr) != 0);
  }
}",0.9235382308845578
157532,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case MSG_UPDATE_SUGGESTIONS:
    performUpdateSuggestions();
  break;
case MSG_UPDATE_SHIFT_STATE:
updateShiftKeyState(getCurrentInputEditorInfo());
break;
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case MSG_UPDATE_SUGGESTIONS:
    performUpdateSuggestions();
  break;
default :
super.handleMessage(msg);
}
}",0.7696078431372549
157533,"/** 
 * Search array for an entry BEGINNING with key.
 * @param array the array to search over
 * @param key the string to search for
 * @return true if the key was found in the array
 */
private static boolean linearSearch(String listOfIme,final String key){
  String[] arrayOfIme=listOfIme.split(""String_Node_Str"");
  if (AnyApplication.DEBUG)   Log.d(TAG,""String_Node_Str"" + listOfIme);
  for (  final String ime : arrayOfIme) {
    if (AnyApplication.DEBUG)     Log.d(TAG,""String_Node_Str"" + ime + ""String_Node_Str""+ key+ ""String_Node_Str"");
    if (ime.startsWith(key))     return true;
  }
  if (AnyApplication.DEBUG)   Log.d(TAG,""String_Node_Str"" + key + ""String_Node_Str"");
  return false;
}","/** 
 * Search array for an entry BEGINNING with key.
 * @param array the array to search over
 * @param key the string to search for
 * @return true if the key was found in the array
 */
private static boolean linearSearch(String listOfIme,final String key){
  if (TextUtils.isEmpty(listOfIme) || TextUtils.isEmpty(key))   return false;
  if (AnyApplication.DEBUG)   Log.d(TAG,""String_Node_Str"" + listOfIme);
  String[] arrayOfIme=listOfIme.split(""String_Node_Str"");
  if (arrayOfIme == null)   return false;
  for (  final String ime : arrayOfIme) {
    if (TextUtils.isEmpty(ime))     continue;
    if (AnyApplication.DEBUG)     Log.d(TAG,""String_Node_Str"" + ime + ""String_Node_Str""+ key+ ""String_Node_Str"");
    if (ime.startsWith(key))     return true;
  }
  if (AnyApplication.DEBUG)   Log.d(TAG,""String_Node_Str"" + key + ""String_Node_Str"");
  return false;
}",0.8312020460358056
157534,"private void onBufferDraw(){
  if (mBuffer == null || mKeyboardChanged) {
    if (mBuffer == null || mKeyboardChanged && (mBuffer.getWidth() != getWidth() || mBuffer.getHeight() != getHeight())) {
      final int width=Math.max(1,getWidth());
      final int height=Math.max(1,getHeight());
      mBuffer=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
      mCanvas=new Canvas(mBuffer);
    }
    invalidateAllKeys();
    mKeyboardChanged=false;
  }
  final Canvas canvas=mCanvas;
  canvas.clipRect(mDirtyRect,Op.REPLACE);
  if (mKeyboard == null)   return;
  final Paint paint=mPaint;
  final Drawable keyBackground=mKeyBackground;
  final Rect clipRegion=mClipRegion;
  final Rect padding=mPadding;
  final int kbdPaddingLeft=getPaddingLeft();
  final int kbdPaddingTop=getPaddingTop();
  final Key[] keys=mKeys;
  final Key invalidKey=mInvalidatedKey;
  paint.setColor(mKeyTextColor);
  boolean drawSingleKey=false;
  if (invalidKey != null && canvas.getClipBounds(clipRegion)) {
    if (invalidKey.x + kbdPaddingLeft - 1 <= clipRegion.left && invalidKey.y + kbdPaddingTop - 1 <= clipRegion.top && invalidKey.x + invalidKey.width + kbdPaddingLeft+ 1 >= clipRegion.right && invalidKey.y + invalidKey.height + kbdPaddingTop+ 1 >= clipRegion.bottom) {
      drawSingleKey=true;
    }
  }
  canvas.drawColor(0x00000000,PorterDuff.Mode.CLEAR);
  final int keyCount=keys.length;
  for (int i=0; i < keyCount; i++) {
    final Key key=keys[i];
    if (drawSingleKey && invalidKey != key) {
      continue;
    }
    int[] drawableState=key.getCurrentDrawableState();
    keyBackground.setState(drawableState);
    String label=key.label == null ? null : adjustCase(key.label).toString();
    final Rect bounds=keyBackground.getBounds();
    if (key.width != bounds.right || key.height != bounds.bottom) {
      keyBackground.setBounds(0,0,key.width,key.height);
    }
    canvas.translate(key.x + kbdPaddingLeft,key.y + kbdPaddingTop);
    keyBackground.draw(canvas);
    boolean shouldDrawIcon=true;
    if (label != null) {
      final int labelSize;
      if (label.length() > 1 && key.codes.length < 2) {
        labelSize=mLabelTextSize;
        paint.setTypeface(Typeface.DEFAULT_BOLD);
      }
 else {
        labelSize=mKeyTextSize;
        paint.setTypeface(mKeyTextStyle);
      }
      paint.setTextSize(labelSize);
      Integer labelHeightValue=mTextHeightCache.get(labelSize);
      final int labelHeight;
      if (labelHeightValue != null) {
        labelHeight=labelHeightValue;
      }
 else {
        Rect textBounds=new Rect();
        paint.getTextBounds(KEY_LABEL_HEIGHT_REFERENCE_CHAR,0,1,textBounds);
        labelHeight=textBounds.height();
        mTextHeightCache.put(labelSize,labelHeight);
      }
      paint.setShadowLayer(mShadowRadius,0,0,mShadowColor);
      final int centerX=(key.width + padding.left - padding.right) / 2;
      final int centerY=(key.height + padding.top - padding.bottom) / 2;
      final float baseline=centerY + labelHeight * KEY_LABEL_VERTICAL_ADJUSTMENT_FACTOR;
      canvas.drawText(label,centerX,baseline,paint);
      paint.setShadowLayer(0,0,0,0);
      shouldDrawIcon=shouldDrawLabelAndIcon(key);
    }
    if (key.icon != null && shouldDrawIcon) {
      final int drawableWidth;
      final int drawableHeight;
      final int drawableX;
      final int drawableY;
      if (shouldDrawIconFully(key)) {
        drawableWidth=key.width;
        drawableHeight=key.height;
        drawableX=0;
        drawableY=NUMBER_HINT_VERTICAL_ADJUSTMENT_PIXEL;
      }
 else {
        drawableWidth=key.icon.getIntrinsicWidth();
        drawableHeight=key.icon.getIntrinsicHeight();
        drawableX=(key.width + padding.left - padding.right - drawableWidth) / 2;
        drawableY=(key.height + padding.top - padding.bottom - drawableHeight) / 2;
      }
      canvas.translate(drawableX,drawableY);
      key.icon.setBounds(0,0,drawableWidth,drawableHeight);
      key.icon.draw(canvas);
      canvas.translate(-drawableX,-drawableY);
    }
    canvas.translate(-key.x - kbdPaddingLeft,-key.y - kbdPaddingTop);
  }
  mInvalidatedKey=null;
  if (mMiniKeyboard != null) {
    paint.setColor((int)(mBackgroundDimAmount * 0xFF) << 24);
    canvas.drawRect(0,0,getWidth(),getHeight(),paint);
  }
  if (AnySoftKeyboardConfiguration.DEBUG) {
    if (mShowTouchPoints) {
      for (      PointerTracker tracker : mPointerTrackers) {
        int startX=tracker.getStartX();
        int startY=tracker.getStartY();
        int lastX=tracker.getLastX();
        int lastY=tracker.getLastY();
        paint.setAlpha(128);
        paint.setColor(0xFFFF0000);
        canvas.drawCircle(startX,startY,3,paint);
        canvas.drawLine(startX,startY,lastX,lastY,paint);
        paint.setColor(0xFF0000FF);
        canvas.drawCircle(lastX,lastY,3,paint);
        paint.setColor(0xFF00FF00);
        canvas.drawCircle((startX + lastX) / 2,(startY + lastY) / 2,2,paint);
      }
    }
  }
  mDrawPending=false;
  mDirtyRect.setEmpty();
}","private void onBufferDraw(){
  if (mBuffer == null || mKeyboardChanged) {
    if (mBuffer == null || mKeyboardChanged && (mBuffer.getWidth() != getWidth() || mBuffer.getHeight() != getHeight())) {
      final int width=Math.max(1,getWidth());
      final int height=Math.max(1,getHeight());
      mBuffer=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
      mCanvas=new Canvas(mBuffer);
    }
    invalidateAllKeys();
    mKeyboardChanged=false;
  }
  final Canvas canvas=mCanvas;
  canvas.clipRect(mDirtyRect,Op.REPLACE);
  if (mKeyboard == null)   return;
  final Paint paint=mPaint;
  final Drawable keyBackground=mKeyBackground;
  final Rect clipRegion=mClipRegion;
  final Rect padding=mPadding;
  final int kbdPaddingLeft=getPaddingLeft();
  final int kbdPaddingTop=getPaddingTop();
  final Key[] keys=mKeys;
  final Key invalidKey=mInvalidatedKey;
  paint.setColor(mKeyTextColor);
  boolean drawSingleKey=false;
  if (invalidKey != null && canvas.getClipBounds(clipRegion)) {
    if (invalidKey.x + kbdPaddingLeft - 1 <= clipRegion.left && invalidKey.y + kbdPaddingTop - 1 <= clipRegion.top && invalidKey.x + invalidKey.width + kbdPaddingLeft+ 1 >= clipRegion.right && invalidKey.y + invalidKey.height + kbdPaddingTop+ 1 >= clipRegion.bottom) {
      drawSingleKey=true;
    }
  }
  canvas.drawColor(0x00000000,PorterDuff.Mode.CLEAR);
  final int keyCount=keys.length;
  for (int i=0; i < keyCount; i++) {
    final Key key=keys[i];
    if (drawSingleKey && invalidKey != key) {
      continue;
    }
    int[] drawableState=key.getCurrentDrawableState();
    keyBackground.setState(drawableState);
    String label=key.label == null ? null : adjustCase(key.label).toString();
    final Rect bounds=keyBackground.getBounds();
    if (key.width != bounds.right || key.height != bounds.bottom) {
      keyBackground.setBounds(0,0,key.width,key.height);
    }
    canvas.translate(key.x + kbdPaddingLeft,key.y + kbdPaddingTop);
    keyBackground.draw(canvas);
    boolean shouldDrawIcon=true;
    if (label != null) {
      final int labelSize;
      if (label.length() > 1 && key.codes.length < 2) {
        labelSize=mLabelTextSize;
        paint.setTypeface(Typeface.DEFAULT_BOLD);
      }
 else {
        labelSize=mKeyTextSize;
        paint.setTypeface(mKeyTextStyle);
      }
      paint.setTextSize(labelSize);
      Integer labelHeightValue=mTextHeightCache.get(labelSize);
      final int labelHeight;
      if (labelHeightValue != null) {
        labelHeight=labelHeightValue;
      }
 else {
        Rect textBounds=new Rect();
        paint.getTextBounds(KEY_LABEL_HEIGHT_REFERENCE_CHAR,0,1,textBounds);
        labelHeight=textBounds.height();
        mTextHeightCache.put(labelSize,labelHeight);
      }
      paint.setShadowLayer(mShadowRadius,0,0,mShadowColor);
      final float centerX=(key.width + padding.left - padding.right) / 2;
      final float centerY=padding.top + ((key.height - -padding.bottom - padding.top) / 2);
      float textX=centerX;
      float textY=centerY - (labelHeight / 2) - paint.descent();
      canvas.translate(textX,textY);
      TextPaint labelPaint=new TextPaint(paint);
      StaticLayout labelText=new StaticLayout(label,labelPaint,key.width,Alignment.ALIGN_NORMAL,1.0f,1.0f,false);
      labelText.draw(canvas);
      canvas.translate(-textX,-textY);
      paint.setShadowLayer(0,0,0,0);
      shouldDrawIcon=shouldDrawLabelAndIcon(key);
    }
    if (key.icon != null && shouldDrawIcon) {
      final int drawableWidth;
      final int drawableHeight;
      final int drawableX;
      final int drawableY;
      if (shouldDrawIconFully(key)) {
        drawableWidth=key.width;
        drawableHeight=key.height;
        drawableX=0;
        drawableY=NUMBER_HINT_VERTICAL_ADJUSTMENT_PIXEL;
      }
 else {
        drawableWidth=key.icon.getIntrinsicWidth();
        drawableHeight=key.icon.getIntrinsicHeight();
        drawableX=(key.width + padding.left - padding.right - drawableWidth) / 2;
        drawableY=(key.height + padding.top - padding.bottom - drawableHeight) / 2;
      }
      canvas.translate(drawableX,drawableY);
      key.icon.setBounds(0,0,drawableWidth,drawableHeight);
      key.icon.draw(canvas);
      canvas.translate(-drawableX,-drawableY);
    }
    canvas.translate(-key.x - kbdPaddingLeft,-key.y - kbdPaddingTop);
  }
  mInvalidatedKey=null;
  if (mMiniKeyboard != null) {
    paint.setColor((int)(mBackgroundDimAmount * 0xFF) << 24);
    canvas.drawRect(0,0,getWidth(),getHeight(),paint);
  }
  if (AnySoftKeyboardConfiguration.DEBUG) {
    if (mShowTouchPoints) {
      for (      PointerTracker tracker : mPointerTrackers) {
        int startX=tracker.getStartX();
        int startY=tracker.getStartY();
        int lastX=tracker.getLastX();
        int lastY=tracker.getLastY();
        paint.setAlpha(128);
        paint.setColor(0xFFFF0000);
        canvas.drawCircle(startX,startY,3,paint);
        canvas.drawLine(startX,startY,lastX,lastY,paint);
        paint.setColor(0xFF0000FF);
        canvas.drawCircle(lastX,lastY,3,paint);
        paint.setColor(0xFF00FF00);
        canvas.drawCircle((startX + lastX) / 2,(startY + lastY) / 2,2,paint);
      }
    }
  }
  mDrawPending=false;
  mDirtyRect.setEmpty();
}",0.9502156017248138
157535,"/** 
 * If the canvas is null, then only touch calculations are performed to pick the target candidate.
 */
@Override protected void onDraw(Canvas canvas){
  if (canvas != null) {
    super.onDraw(canvas);
  }
  mTotalWidth=0;
  final int height=getHeight();
  if (mBgPadding == null) {
    mBgPadding=new Rect(0,0,0,0);
    if (getBackground() != null) {
      getBackground().getPadding(mBgPadding);
    }
    mDivider.setBounds(0,0,mDivider.getIntrinsicWidth(),mDivider.getIntrinsicHeight());
  }
  final int count=mSuggestions.size();
  final Rect bgPadding=mBgPadding;
  final Paint paint=mPaint;
  final int touchX=mTouchX;
  final int scrollX=getScrollX();
  final boolean scrolled=mScrolled;
  final boolean typedWordValid=mTypedWordValid;
  int x=0;
  for (int i=0; i < count; i++) {
    CharSequence suggestion=mSuggestions.get(i);
    if (suggestion == null)     continue;
    final int wordLength=suggestion.length();
    paint.setColor(mColorNormal);
    if (mHaveMinimalSuggestion && ((i == 1 && !typedWordValid) || (i == 0 && typedWordValid))) {
      paint.setTypeface(Typeface.DEFAULT_BOLD);
      paint.setColor(mColorRecommended);
    }
 else     if (i != 0 || (wordLength == 1 && count > 1)) {
      paint.setColor(mColorOther);
    }
    final int y=(int)(height - mPaint.getTextSize() - mDescent) / 2;
    int wordWidth;
    if ((wordWidth=mWordWidth[i]) == 0) {
      float textWidth=paint.measureText(suggestion,0,wordLength);
      wordWidth=Math.max(mMinTouchableWidth,(int)textWidth + X_GAP * 2);
      mWordWidth[i]=wordWidth;
    }
    mWordX[i]=x;
    if (touchX != OUT_OF_BOUNDS_X_COORD && !scrolled && touchX + scrollX >= x && touchX + scrollX < x + wordWidth) {
      if (canvas != null && !mShowingAddToDictionary) {
        canvas.translate(x,0);
        mSelectionHighlight.setBounds(0,bgPadding.top,wordWidth,height);
        mSelectionHighlight.draw(canvas);
        canvas.translate(-x,0);
      }
      mSelectedString=suggestion;
      mSelectedIndex=i;
    }
    if (canvas != null) {
      int textX=x - bgPadding.left - bgPadding.right + (wordWidth / 2);
      int textY=y - bgPadding.bottom - bgPadding.top;
      canvas.translate(textX,textY);
      TextPaint suggestionPaint=new TextPaint(paint);
      StaticLayout suggestionText=new StaticLayout(suggestion,suggestionPaint,wordWidth,Alignment.ALIGN_NORMAL,1.0f,1.0f,false);
      suggestionText.draw(canvas);
      canvas.translate(-textX,-textY);
      paint.setColor(mColorOther);
      canvas.translate(x + wordWidth,0);
      if (!(mShowingAddToDictionary && i == 1)) {
        mDivider.draw(canvas);
      }
      canvas.translate(-x - wordWidth,0);
    }
    paint.setTypeface(Typeface.DEFAULT);
    x+=wordWidth;
  }
  mTotalWidth=x;
  if (mTargetScrollX != scrollX) {
    scrollToTarget();
  }
}","/** 
 * If the canvas is null, then only touch calculations are performed to pick the target candidate.
 */
@Override protected void onDraw(Canvas canvas){
  if (canvas != null) {
    super.onDraw(canvas);
  }
  mTotalWidth=0;
  final int height=getHeight();
  if (mBgPadding == null) {
    mBgPadding=new Rect(0,0,0,0);
    if (getBackground() != null) {
      getBackground().getPadding(mBgPadding);
    }
    mDivider.setBounds(0,0,mDivider.getIntrinsicWidth(),mDivider.getIntrinsicHeight());
  }
  final int count=mSuggestions.size();
  final Rect bgPadding=mBgPadding;
  final Paint paint=mPaint;
  final int touchX=mTouchX;
  final int scrollX=getScrollX();
  final boolean scrolled=mScrolled;
  final boolean typedWordValid=mTypedWordValid;
  int x=0;
  for (int i=0; i < count; i++) {
    CharSequence suggestion=mSuggestions.get(i);
    if (suggestion == null)     continue;
    final int wordLength=suggestion.length();
    paint.setColor(mColorNormal);
    if (mHaveMinimalSuggestion && ((i == 1 && !typedWordValid) || (i == 0 && typedWordValid))) {
      paint.setTypeface(Typeface.DEFAULT_BOLD);
      paint.setColor(mColorRecommended);
    }
 else     if (i != 0 || (wordLength == 1 && count > 1)) {
      paint.setColor(mColorOther);
    }
    final int y=(int)(height - mPaint.getTextSize() - mDescent) / 2;
    int wordWidth;
    if ((wordWidth=mWordWidth[i]) == 0) {
      float textWidth=paint.measureText(suggestion,0,wordLength);
      wordWidth=Math.max(mMinTouchableWidth,(int)textWidth + X_GAP * 2);
      mWordWidth[i]=wordWidth;
    }
    mWordX[i]=x;
    if (touchX != OUT_OF_BOUNDS_X_COORD && !scrolled && touchX + scrollX >= x && touchX + scrollX < x + wordWidth) {
      if (canvas != null && !mShowingAddToDictionary) {
        canvas.translate(x,0);
        mSelectionHighlight.setBounds(0,bgPadding.top,wordWidth,height);
        mSelectionHighlight.draw(canvas);
        canvas.translate(-x,0);
      }
      mSelectedString=suggestion;
      mSelectedIndex=i;
    }
    if (canvas != null) {
      float textX=x - bgPadding.left - bgPadding.right + (wordWidth / 2);
      float textY=y - bgPadding.bottom - bgPadding.top;
      canvas.translate(textX,textY);
      TextPaint suggestionPaint=new TextPaint(paint);
      StaticLayout suggestionText=new StaticLayout(suggestion,suggestionPaint,wordWidth,Alignment.ALIGN_NORMAL,1.0f,1.0f,false);
      suggestionText.draw(canvas);
      canvas.translate(-textX,-textY);
      paint.setColor(mColorOther);
      canvas.translate(x + wordWidth,0);
      if (!(mShowingAddToDictionary && i == 1)) {
        mDivider.draw(canvas);
      }
      canvas.translate(-x - wordWidth,0);
    }
    paint.setTypeface(Typeface.DEFAULT);
    x+=wordWidth;
  }
  mTotalWidth=x;
  if (mTargetScrollX != scrollX) {
    scrollToTarget();
  }
}",0.9978601997146932
157536,"void setMainDictionaryForCurrentKeyboard(){
  if (mSuggest != null) {
    if (!mShowSuggestions) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mSuggest.setMainDictionary(null);
    }
 else {
      if ((mKeyboardSwitcher != null) && mKeyboardSwitcher.isAlphabetMode()) {
        AnyKeyboard currentKeyobard=mKeyboardSwitcher.getCurrentKeyboard();
        Dictionary dictionary=getDictionaryForKeyboard(currentKeyobard);
        mSuggest.setMainDictionary(dictionary);
      }
    }
  }
}","void setMainDictionaryForCurrentKeyboard(){
  if (mSuggest != null) {
    if (!mShowSuggestions) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mSuggest.setMainDictionary(null);
      mSuggest.setUserDictionary(null);
    }
 else {
      if ((mKeyboardSwitcher != null) && mKeyboardSwitcher.isAlphabetMode()) {
        AnyKeyboard currentKeyobard=mKeyboardSwitcher.getCurrentKeyboard();
        String mappingSettingsKey=getDictionaryOverrideKey(currentKeyobard);
        String defaultDictionary=currentKeyobard.getDefaultDictionaryLocale();
        String dictionaryValue=getSharedPreferences().getString(mappingSettingsKey,null);
        Dictionary dictionary=null;
        if (dictionaryValue == null) {
          dictionary=DictionaryFactory.getInstance().getDictionaryByLanguage(currentKeyobard.getDefaultDictionaryLocale(),this);
        }
 else {
          if (AnySoftKeyboardConfiguration.DEBUG) {
            Log.d(""String_Node_Str"",""String_Node_Str"" + (defaultDictionary == null ? ""String_Node_Str"" : defaultDictionary) + ""String_Node_Str""+ currentKeyobard.getKeyboardPrefId()+ ""String_Node_Str""+ dictionaryValue+ ""String_Node_Str"");
          }
          dictionary=DictionaryFactory.getInstance().getDictionaryById(dictionaryValue,this);
        }
        mSuggest.setMainDictionary(dictionary);
        mUserDictionary=DictionaryFactory.getInstance().createUserDictionary(this,defaultDictionary);
        mSuggest.setUserDictionary(mUserDictionary);
      }
    }
  }
}",0.4574574574574575
157537,"private void initSuggest(){
  mSuggest=new Suggest(this);
  mSuggest.setCorrectionMode(mCorrectionMode);
  mUserDictionary=DictionaryFactory.getInstance().createUserDictionary(this);
  mSuggest.setUserDictionary(mUserDictionary);
  handleContactsDictionaryMember();
  handleAutoDictionaryMember();
  setMainDictionaryForCurrentKeyboard();
}","private void initSuggest(){
  mSuggest=new Suggest(this);
  mSuggest.setCorrectionMode(mCorrectionMode);
  handleContactsDictionaryMember();
  handleAutoDictionaryMember();
  setMainDictionaryForCurrentKeyboard();
}",0.4972972972972973
157538,"protected void AddWordToStorage(String word,int frequency){
  Words.addWord(mContext,word,frequency,Words.LOCALE_TYPE_CURRENT);
}","protected void AddWordToStorage(String word,int frequency){
  if (TextUtils.isEmpty(word)) {
    return;
  }
  if (frequency < 0)   frequency=0;
  if (frequency > 255)   frequency=255;
  ContentValues values=new ContentValues(4);
  values.put(Words.WORD,word);
  values.put(Words.FREQUENCY,frequency);
  values.put(Words.LOCALE,mLocale);
  values.put(Words.APP_ID,0);
  Uri result=mContext.getContentResolver().insert(Words.CONTENT_URI,values);
  Log.i(TAG,""String_Node_Str"" + word + ""String_Node_Str""+ result);
}",0.3021806853582554
157539,"public AndroidUserDictionary(AnyKeyboardContextProvider context){
  super(""String_Node_Str"",context);
}","public AndroidUserDictionary(AnyKeyboardContextProvider context,String locale){
  super(""String_Node_Str"",context);
  mLocale=locale;
}",0.865546218487395
157540,"protected void loadDictionaryAsync(){
  Cursor cursor=mContext.getContentResolver().query(Words.CONTENT_URI,PROJECTION,null,null,null);
  if (cursor == null)   throw new RuntimeException(""String_Node_Str"");
  addWords(cursor);
  ContentResolver cres=mContext.getContentResolver();
  cres.registerContentObserver(Words.CONTENT_URI,true,mObserver=new ContentObserver(null){
    @Override public void onChange(    boolean self){
      mRequiresReload=true;
    }
  }
);
}","protected void loadDictionaryAsync(){
  Cursor cursor=mContext.getContentResolver().query(Words.CONTENT_URI,PROJECTION,""String_Node_Str"" + Words.LOCALE + ""String_Node_Str""+ Words.LOCALE+ ""String_Node_Str"",new String[]{mLocale},null);
  if (cursor == null)   throw new RuntimeException(""String_Node_Str"");
  addWords(cursor);
  ContentResolver cres=mContext.getContentResolver();
  cres.registerContentObserver(Words.CONTENT_URI,true,mObserver=new ContentObserver(null){
    @Override public void onChange(    boolean self){
      mRequiresReload=true;
    }
  }
);
}",0.8916827852998066
157541,"@Override protected void loadDictionaryAsync(){
  Cursor cursor=query(COLUMN_LOCALE + ""String_Node_Str"",new String[]{mLocale});
  try {
    if (cursor.moveToFirst()) {
      int wordIndex=cursor.getColumnIndex(COLUMN_WORD);
      int frequencyIndex=cursor.getColumnIndex(COLUMN_FREQUENCY);
      while (!cursor.isAfterLast()) {
        String word=cursor.getString(wordIndex);
        int frequency=cursor.getInt(frequencyIndex);
        if (word.length() < MAX_WORD_LENGTH) {
          super.addWord(word,frequency);
        }
        cursor.moveToNext();
      }
    }
  }
  finally {
    cursor.close();
  }
}","@Override protected void loadDictionaryAsync(){
  Cursor cursor=query(COLUMN_LOCALE + ""String_Node_Str"",new String[]{mLocale});
  try {
    if (cursor.moveToFirst()) {
      int wordIndex=cursor.getColumnIndex(COLUMN_WORD);
      int frequencyIndex=cursor.getColumnIndex(COLUMN_FREQUENCY);
      while (!cursor.isAfterLast()) {
        String word=cursor.getString(wordIndex);
        int frequency=cursor.getInt(frequencyIndex);
        if (word.length() < MAX_WORD_LENGTH) {
          addWordFromStorage(word,frequency);
        }
        cursor.moveToNext();
      }
    }
  }
  finally {
    cursor.close();
  }
}",0.9861676159479252
157542,"private void addWords(Cursor cursor){
  int newCount=0;
  long newHash=0;
  if (cursor.moveToFirst()) {
    while (!cursor.isAfterLast()) {
      String name=cursor.getString(INDEX_NAME);
      if (name != null) {
        newHash+=name.hashCode();
        newCount++;
      }
      cursor.moveToNext();
    }
  }
  if (newCount == mContactsCount && newHash == mContactsHash) {
    cursor.close();
    return;
  }
  if (AnySoftKeyboardConfiguration.DEBUG)   Log.d(TAG,""String_Node_Str"" + newCount + ""String_Node_Str""+ mContactsCount+ ""String_Node_Str""+ newHash+ ""String_Node_Str""+ mContactsHash+ ""String_Node_Str"");
  mContactsCount=newCount;
  mContactsHash=newHash;
  clearDictionary();
  int loadedContacts=0;
  final int maxWordLength=MAX_WORD_LENGTH;
  if (cursor.moveToFirst()) {
    while (!cursor.isAfterLast()) {
      String name=cursor.getString(INDEX_NAME);
      if (name != null) {
        int len=name.length();
        for (int i=0; i < len; i++) {
          if (Character.isLetter(name.charAt(i))) {
            int j;
            for (j=i + 1; j < len; j++) {
              char c=name.charAt(j);
              if (!(c == '-' || c == '\'' || Character.isLetter(c))) {
                break;
              }
            }
            String word=name.substring(i,j);
            i=j - 1;
            final int wordLen=word.length();
            if (wordLen < maxWordLength && wordLen > 1) {
              if (AnySoftKeyboardConfiguration.DEBUG)               Log.d(TAG,""String_Node_Str"" + word + ""String_Node_Str"");
              loadedContacts++;
              super.addWord(word,128);
            }
          }
        }
      }
      cursor.moveToNext();
    }
  }
  Log.i(TAG,""String_Node_Str"" + loadedContacts + ""String_Node_Str"");
  cursor.close();
}","private void addWords(Cursor cursor){
  int newCount=0;
  long newHash=0;
  if (cursor.moveToFirst()) {
    while (!cursor.isAfterLast()) {
      String name=cursor.getString(INDEX_NAME);
      if (name != null) {
        newHash+=name.hashCode();
        newCount++;
      }
      cursor.moveToNext();
    }
  }
  if (newCount == mContactsCount && newHash == mContactsHash) {
    cursor.close();
    return;
  }
  if (AnySoftKeyboardConfiguration.DEBUG)   Log.d(TAG,""String_Node_Str"" + newCount + ""String_Node_Str""+ mContactsCount+ ""String_Node_Str""+ newHash+ ""String_Node_Str""+ mContactsHash+ ""String_Node_Str"");
  mContactsCount=newCount;
  mContactsHash=newHash;
  clearDictionary();
  int loadedContacts=0;
  final int maxWordLength=MAX_WORD_LENGTH;
  if (cursor.moveToFirst()) {
    while (!cursor.isAfterLast()) {
      String name=cursor.getString(INDEX_NAME);
      if (name != null) {
        int len=name.length();
        for (int i=0; i < len; i++) {
          if (Character.isLetter(name.charAt(i))) {
            int j;
            for (j=i + 1; j < len; j++) {
              char c=name.charAt(j);
              if (!(c == '-' || c == '\'' || Character.isLetter(c))) {
                break;
              }
            }
            String word=name.substring(i,j);
            i=j - 1;
            final int wordLen=word.length();
            if (wordLen < maxWordLength && wordLen > 1) {
              if (AnySoftKeyboardConfiguration.DEBUG)               Log.d(TAG,""String_Node_Str"" + word + ""String_Node_Str"");
              loadedContacts++;
              addWordFromStorage(word,128);
            }
          }
        }
      }
      cursor.moveToNext();
    }
  }
  Log.i(TAG,""String_Node_Str"" + loadedContacts + ""String_Node_Str"");
  cursor.close();
}",0.9952099182868414
157543,public abstract void loadDictionary() throws Exception ;,public abstract void loadDictionary();,0.8085106382978723
157544,"public synchronized AddableDictionary createUserDictionary(AnyKeyboardContextProvider context){
  if (mUserDictionary != null) {
    return mUserDictionary;
  }
  mUserDictionary=new SafeUserDictionary(context);
  return mUserDictionary;
}","public synchronized AddableDictionary createUserDictionary(AnyKeyboardContextProvider context,String locale){
  if (mUserDictionary != null && equalsString(mUserDictionaryLocale,locale)) {
    return mUserDictionary;
  }
  mUserDictionary=new SafeUserDictionary(context,locale);
  mUserDictionary.loadDictionary();
  mUserDictionaryLocale=locale;
  return mUserDictionary;
}",0.7765089722675367
157545,"public synchronized AutoDictionary createAutoDictionary(AnyKeyboardContextProvider context,AnySoftKeyboard ime,String currentAutoDictionaryLocale){
  if (mAutoDictionary != null && equalsString(mAutoDictionary.getLocale(),currentAutoDictionaryLocale)) {
    return mAutoDictionary;
  }
  Log.d(TAG,""String_Node_Str"" + currentAutoDictionaryLocale);
  mAutoDictionary=new AutoDictionary(context,ime,currentAutoDictionaryLocale);
  return mAutoDictionary;
}","public synchronized AutoDictionary createAutoDictionary(AnyKeyboardContextProvider context,AnySoftKeyboard ime,String currentAutoDictionaryLocale){
  if (mAutoDictionary != null && equalsString(mAutoDictionary.getLocale(),currentAutoDictionaryLocale)) {
    return mAutoDictionary;
  }
  Log.d(TAG,""String_Node_Str"" + currentAutoDictionaryLocale);
  mAutoDictionary=new AutoDictionary(context,ime,currentAutoDictionaryLocale);
  mAutoDictionary.loadDictionary();
  return mAutoDictionary;
}",0.9152542372881356
157546,"public void loadDictionary(){
synchronized (mUpdatingLock) {
    startDictionaryLoadingTaskLocked();
  }
}","public void loadDictionary(){
synchronized (mUpdatingLock) {
    if (!mUpdatingDictionary) {
      mUpdatingDictionary=true;
      new LoadDictionaryTask().execute();
    }
  }
}",0.6830985915492958
157547,"protected SafeUserDictionary(AnyKeyboardContextProvider context){
  super(""String_Node_Str"");
  mAnyContext=context;
}","protected SafeUserDictionary(AnyKeyboardContextProvider context,String locale){
  super(""String_Node_Str"");
  mLocale=locale;
  mAnyContext=context;
}",0.8805970149253731
157548,"private void loadDictionaryAsync(){
  try {
    AndroidUserDictionary androidBuiltIn=new AndroidUserDictionary(mAnyContext);
    androidBuiltIn.loadDictionary();
    mActualDictionary=androidBuiltIn;
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"");
    FallbackUserDictionary fallback=new FallbackUserDictionary(mAnyContext);
    fallback.loadDictionary();
  }
}","private void loadDictionaryAsync(){
  try {
    AndroidUserDictionary androidBuiltIn=new AndroidUserDictionary(mAnyContext,mLocale);
    androidBuiltIn.loadDictionary();
    mActualDictionary=androidBuiltIn;
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"");
    FallbackUserDictionary fallback=new FallbackUserDictionary(mAnyContext);
    fallback.loadDictionary();
    mActualDictionary=fallback;
  }
}",0.9494949494949496
157549,"private void showQuickTextKeyPopupList(QuickTextKey key){
  if (mQuickTextKeyDialog == null) {
    String[] names=getResources().getStringArray(R.array.smiley_names);
    final String[] texts=getResources().getStringArray(R.array.smiley_texts);
    final int N=names.length;
    List<Map<String,?>> entries=new ArrayList<Map<String,?>>();
    for (int i=0; i < N; i++) {
      HashMap<String,Object> entry=new HashMap<String,Object>();
      entry.put(""String_Node_Str"",names[i]);
      entry.put(""String_Node_Str"",texts[i]);
      entries.add(entry);
    }
    final SimpleAdapter a=new SimpleAdapter(this,entries,R.layout.quick_text_key_menu_item,new String[]{""String_Node_Str"",""String_Node_Str""},new int[]{R.id.quick_text_name,R.id.quick_text_output});
    SimpleAdapter.ViewBinder viewBinder=new SimpleAdapter.ViewBinder(){
      public boolean setViewValue(      View view,      Object data,      String textRepresentation){
        if (view instanceof ImageView) {
          Drawable img=getResources().getDrawable((Integer)data);
          ((ImageView)view).setImageDrawable(img);
          return true;
        }
        return false;
      }
    }
;
    a.setViewBinder(viewBinder);
    AlertDialog.Builder b=new AlertDialog.Builder(this);
    b.setTitle(getString(R.string.menu_insert_smiley));
    b.setCancelable(true);
    b.setAdapter(a,new DialogInterface.OnClickListener(){
      @SuppressWarnings(""String_Node_Str"") public final void onClick(      DialogInterface dialog,      int which){
        HashMap<String,Object> item=(HashMap<String,Object>)a.getItem(which);
        onText((String)item.get(""String_Node_Str""));
        dialog.dismiss();
      }
    }
);
    mQuickTextKeyDialog=b.create();
    Window window=mQuickTextKeyDialog.getWindow();
    WindowManager.LayoutParams lp=window.getAttributes();
    lp.token=mInputView.getWindowToken();
    lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;
    window.setAttributes(lp);
    window.addFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
  }
  mQuickTextKeyDialog.show();
}","private void showQuickTextKeyPopupList(QuickTextKey key){
  if (mQuickTextKeyDialog == null) {
    String[] names=key.getPopupListNames();
    final String[] texts=key.getPopupListValues();
    final int N=names.length;
    List<Map<String,?>> entries=new ArrayList<Map<String,?>>();
    for (int i=0; i < N; i++) {
      HashMap<String,Object> entry=new HashMap<String,Object>();
      entry.put(""String_Node_Str"",names[i]);
      entry.put(""String_Node_Str"",texts[i]);
      entries.add(entry);
    }
    final SimpleAdapter a=new SimpleAdapter(this,entries,R.layout.quick_text_key_menu_item,new String[]{""String_Node_Str"",""String_Node_Str""},new int[]{R.id.quick_text_name,R.id.quick_text_output});
    SimpleAdapter.ViewBinder viewBinder=new SimpleAdapter.ViewBinder(){
      public boolean setViewValue(      View view,      Object data,      String textRepresentation){
        if (view instanceof ImageView) {
          Drawable img=getResources().getDrawable((Integer)data);
          ((ImageView)view).setImageDrawable(img);
          return true;
        }
        return false;
      }
    }
;
    a.setViewBinder(viewBinder);
    AlertDialog.Builder b=new AlertDialog.Builder(this);
    b.setTitle(getString(R.string.menu_insert_smiley));
    b.setCancelable(true);
    b.setAdapter(a,new DialogInterface.OnClickListener(){
      @SuppressWarnings(""String_Node_Str"") public final void onClick(      DialogInterface dialog,      int which){
        HashMap<String,Object> item=(HashMap<String,Object>)a.getItem(which);
        onText((String)item.get(""String_Node_Str""));
        dialog.dismiss();
      }
    }
);
    mQuickTextKeyDialog=b.create();
    Window window=mQuickTextKeyDialog.getWindow();
    WindowManager.LayoutParams lp=window.getAttributes();
    lp.token=mInputView.getWindowToken();
    lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;
    window.setAttributes(lp);
    window.addFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
  }
  mQuickTextKeyDialog.show();
}",0.965584574078594
157550,"private void swapPunctuationAndSpace(){
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  CharSequence lastTwo=ic.getTextBeforeCursor(2,0);
  if (lastTwo != null && lastTwo.length() == 2 && lastTwo.charAt(0) == KEYCODE_SPACE && SPACE_SWAP_CHARACTERS.contains(String.valueOf(lastTwo.charAt(1)))) {
    ic.beginBatchEdit();
    ic.deleteSurroundingText(2,0);
    ic.commitText(lastTwo.charAt(1) + ""String_Node_Str"",1);
    ic.endBatchEdit();
    updateShiftKeyState(getCurrentInputEditorInfo());
  }
}","private void swapPunctuationAndSpace(){
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  CharSequence lastTwo=ic.getTextBeforeCursor(2,0);
  if (lastTwo != null && lastTwo.length() == 2 && lastTwo.charAt(0) == KEYCODE_SPACE && SPACE_SWAP_CHARACTERS.contains((int)lastTwo.charAt(1))) {
    ic.beginBatchEdit();
    ic.deleteSurroundingText(2,0);
    ic.commitText(lastTwo.charAt(1) + ""String_Node_Str"",1);
    ic.endBatchEdit();
    updateShiftKeyState(getCurrentInputEditorInfo());
  }
}",0.980169971671388
157551,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  addPreferencesFromResource(R.layout.prefs);
  String version=""String_Node_Str"";
  try {
    final PackageInfo info=getPackageInfo(getApplicationContext());
    version=info.versionName + ""String_Node_Str"" + info.versionCode+ ""String_Node_Str"";
  }
 catch (  final NameNotFoundException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
  final Preference label=super.findPreference(""String_Node_Str"");
  label.setSummary(label.getSummary() + version);
  final Preference searcher=(Preference)super.findPreference(""String_Node_Str"");
  searcher.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (preference.getKey().equals(""String_Node_Str"")) {
        MainForm.searchMarketForAddons(SoftKeyboardSettings.this.getApplicationContext());
        return true;
      }
      return false;
    }
  }
);
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  addPreferencesFromResource(R.layout.prefs);
  final PreferenceCategory keyboards=(PreferenceCategory)super.findPreference(""String_Node_Str"");
  default_preference_count=keyboards.getPreferenceCount();
  String version=""String_Node_Str"";
  try {
    final PackageInfo info=getPackageInfo(getApplicationContext());
    version=info.versionName + ""String_Node_Str"" + info.versionCode+ ""String_Node_Str"";
  }
 catch (  final NameNotFoundException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
  final Preference label=super.findPreference(""String_Node_Str"");
  label.setSummary(label.getSummary() + version);
  final Preference searcher=(Preference)super.findPreference(""String_Node_Str"");
  searcher.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (preference.getKey().equals(""String_Node_Str"")) {
        MainForm.searchMarketForAddons(SoftKeyboardSettings.this.getApplicationContext());
        return true;
      }
      return false;
    }
  }
);
}",0.9250596658711218
157552,"@Override protected void onResume(){
  super.onResume();
  KeyboardBuildersFactory.resetBuildersCache();
  final ArrayList<KeyboardBuilder> creators=KeyboardBuildersFactory.getAllBuilders(getApplicationContext());
  final PreferenceCategory keyboards=(PreferenceCategory)super.findPreference(""String_Node_Str"");
  keyboards.removeAll();
  for (  final KeyboardBuilder creator : creators) {
    final Context creatorContext=creator.getPackageContext() == null ? getApplicationContext() : creator.getPackageContext();
    if (creatorContext == getApplicationContext() && creator.getKeyboardNameResId() == R.string.eng_keyboard) {
      continue;
    }
    final CheckBoxPreference checkBox=new CheckBoxPreference(getApplicationContext());
    checkBox.setKey(creator.getId());
    checkBox.setTitle(creatorContext.getText(creator.getKeyboardNameResId()));
    checkBox.setPersistent(true);
    checkBox.setDefaultValue(false);
    checkBox.setSummaryOn(creator.getDescription());
    checkBox.setSummaryOff(creator.getDescription());
    keyboards.addPreference(checkBox);
  }
}","@Override protected void onResume(){
  super.onResume();
  KeyboardBuildersFactory.resetBuildersCache();
  final ArrayList<KeyboardBuilder> creators=KeyboardBuildersFactory.getAllBuilders(getApplicationContext());
  final PreferenceCategory keyboards=(PreferenceCategory)super.findPreference(""String_Node_Str"");
  removeNonDefaultPreferences();
  for (  final KeyboardBuilder creator : creators) {
    final Context creatorContext=creator.getPackageContext() == null ? getApplicationContext() : creator.getPackageContext();
    if (creatorContext == getApplicationContext() && creator.getKeyboardNameResId() == R.string.eng_keyboard) {
      continue;
    }
    final CheckBoxPreference checkBox=new CheckBoxPreference(getApplicationContext());
    checkBox.setKey(creator.getId());
    checkBox.setTitle(creatorContext.getText(creator.getKeyboardNameResId()));
    checkBox.setPersistent(true);
    checkBox.setDefaultValue(false);
    checkBox.setSummaryOn(creator.getDescription());
    checkBox.setSummaryOff(creator.getDescription());
    keyboards.addPreference(checkBox);
  }
}",0.9842592592592592
157553,"private void longPressFirstWord(){
  mSelectedIndex=0;
  mSelectedString=mSuggestions.get(0);
  CharSequence suggestion=mService.pickSuggestionManually(mSelectedIndex,mSelectedString);
  mSelectedString=null;
  mSelectedIndex=OUT_OF_BOUNDS;
  if (mService.addWordToDictionary(suggestion.toString())) {
    showPreview(0,getContext().getResources().getString(R.string.added_word,suggestion));
  }
}","private void longPressFirstWord(){
  CharSequence word=mSuggestions.get(0);
  if (mService.addWordToDictionary(word.toString())) {
    showPreview(0,getContext().getResources().getString(R.string.added_word,word));
  }
}",0.5607779578606159
157554,"/** 
 * Add a new keystroke, with codes[0] containing the pressed key's unicode and the rest of the array containing unicode for adjacent keys, sorted by reducing probability/proximity.
 * @param codes the array of unicode values
 */
public void add(int primaryCode,int[] codes){
  mTypedWord.append(Character.toLowerCase((char)primaryCode));
  mCodes.add(codes);
  if (mTypedWord.length() == 1) {
    mIsCapitalized=Character.isUpperCase(primaryCode);
  }
}","/** 
 * Add a new keystroke, with codes[0] containing the pressed key's unicode and the rest of the array containing unicode for adjacent keys, sorted by reducing probability/proximity.
 * @param codes the array of unicode values
 */
public void add(int primaryCode,int[] codes){
  mTypedWord.append((char)primaryCode);
  mCodes.add(codes);
  if (mTypedWord.length() == 1) {
    mIsCapitalized=Character.isUpperCase(primaryCode);
  }
}",0.9361702127659576
157555,"public void append(CharSequence textToAdd){
  String loweredText=textToAdd.toString().toLowerCase();
  mTypedWord.append(loweredText);
  for (int i=0; i < loweredText.length(); i++) {
    char c=loweredText.charAt(i);
    mCodes.add(new int[]{c});
  }
}","public void append(CharSequence textToAdd){
  mTypedWord.append(textToAdd);
  int len=textToAdd.length();
  for (int i=0; i < len; i++) {
    char c=textToAdd.charAt(i);
    mCodes.add(new int[]{c});
  }
}",0.6069868995633187
157556,"/** 
 * This looks at the ime options given by the current editor, to set the appropriate label on the keyboard's enter key (if it has one).
 */
public void setImeOptions(Resources res,EditorInfo editor){
  if (mDebug) {
    if (editor == null) {
      Log.d(TAG,""String_Node_Str"");
    }
 else {
      Log.d(TAG,""String_Node_Str"" + editor.packageName + ""String_Node_Str""+ editor.fieldId);
    }
  }
  if (mEnterKey == null) {
    return;
  }
  if (Workarounds.doubleActionKeyDisableWorkAround(editor)) {
    mEnterKey.disable();
    return;
  }
  int options=(editor == null) ? 0 : editor.imeOptions;
  CharSequence imeLabel=(editor == null) ? null : editor.actionLabel;
  int imeActionId=(editor == null) ? -1 : editor.actionId;
  mEnterKey.enable();
  boolean inNoEnterActionMode=((options & EditorInfo.IME_FLAG_NO_ENTER_ACTION) != 0);
  final int action=(options & EditorInfo.IME_MASK_ACTION);
  if (AnySoftKeyboardConfiguration.getInstance().getDEBUG())   Log.d(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ inNoEnterActionMode);
  if (inNoEnterActionMode) {
    mEnterKey.icon=res.getDrawable(R.drawable.sym_keyboard_return);
    mEnterKey.label=null;
  }
 else {
switch (action) {
case EditorInfo.IME_ACTION_GO:
      mEnterKey.iconPreview=null;
    mEnterKey.icon=null;
  mEnterKey.label=Workarounds.workaroundCorrectStringDirection(res.getText(R.string.label_go_key));
break;
case EditorInfo.IME_ACTION_NEXT:
mEnterKey.iconPreview=null;
mEnterKey.icon=null;
mEnterKey.label=Workarounds.workaroundCorrectStringDirection(res.getText(R.string.label_next_key));
break;
case EditorInfo.IME_ACTION_DONE:
mEnterKey.iconPreview=null;
mEnterKey.icon=null;
mEnterKey.label=Workarounds.workaroundCorrectStringDirection(res.getText(R.string.label_done_key));
break;
case EditorInfo.IME_ACTION_NONE:
Log.d(TAG,""String_Node_Str"");
mEnterKey.disable();
break;
case EditorInfo.IME_ACTION_SEARCH:
mEnterKey.icon=res.getDrawable(R.drawable.sym_keyboard_search);
mEnterKey.label=null;
break;
case EditorInfo.IME_ACTION_SEND:
mEnterKey.iconPreview=null;
mEnterKey.icon=null;
mEnterKey.label=Workarounds.workaroundCorrectStringDirection(res.getText(R.string.label_send_key));
break;
case EditorInfo.IME_ACTION_UNSPECIFIED:
default :
mEnterKey.icon=res.getDrawable(R.drawable.sym_keyboard_return);
mEnterKey.label=null;
break;
}
}
}","/** 
 * This looks at the ime options given by the current editor, to set the appropriate label on the keyboard's enter key (if it has one).
 */
public void setImeOptions(Resources res,EditorInfo editor){
  if (mDebug) {
    if (editor == null) {
      Log.d(TAG,""String_Node_Str"");
    }
 else {
      Log.d(TAG,""String_Node_Str"" + editor.packageName + ""String_Node_Str""+ editor.fieldId);
    }
  }
  if (mEnterKey == null) {
    return;
  }
  if (Workarounds.doubleActionKeyDisableWorkAround(editor)) {
    mEnterKey.disable();
    return;
  }
  int options=(editor == null) ? 0 : editor.imeOptions;
  CharSequence imeLabel=(editor == null) ? null : editor.actionLabel;
  int imeActionId=(editor == null) ? -1 : editor.actionId;
  mEnterKey.enable();
  boolean inNoEnterActionMode=((options & EditorInfo.IME_FLAG_NO_ENTER_ACTION) != 0);
  final int action=(options & EditorInfo.IME_MASK_ACTION);
  if (AnySoftKeyboardConfiguration.getInstance().getDEBUG())   Log.d(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ inNoEnterActionMode);
  if (inNoEnterActionMode) {
    mEnterKey.icon=res.getDrawable(R.drawable.sym_keyboard_return);
    mEnterKey.label=null;
  }
 else {
switch (action) {
case EditorInfo.IME_ACTION_GO:
      mEnterKey.iconPreview=null;
    mEnterKey.icon=null;
  mEnterKey.label=Workarounds.workaroundCorrectStringDirection(res.getText(R.string.label_go_key));
break;
case EditorInfo.IME_ACTION_NEXT:
mEnterKey.iconPreview=null;
mEnterKey.icon=null;
mEnterKey.label=Workarounds.workaroundCorrectStringDirection(res.getText(R.string.label_next_key));
break;
case EditorInfo.IME_ACTION_DONE:
mEnterKey.iconPreview=null;
mEnterKey.icon=null;
mEnterKey.label=Workarounds.workaroundCorrectStringDirection(res.getText(R.string.label_done_key));
break;
case EditorInfo.IME_ACTION_SEARCH:
mEnterKey.icon=res.getDrawable(R.drawable.sym_keyboard_search);
mEnterKey.label=null;
break;
case EditorInfo.IME_ACTION_SEND:
mEnterKey.iconPreview=null;
mEnterKey.icon=null;
mEnterKey.label=Workarounds.workaroundCorrectStringDirection(res.getText(R.string.label_send_key));
break;
case EditorInfo.IME_ACTION_NONE:
case EditorInfo.IME_ACTION_UNSPECIFIED:
default :
mEnterKey.icon=res.getDrawable(R.drawable.sym_keyboard_return);
mEnterKey.label=null;
break;
}
}
}",0.9729965156794426
157557,"public void onClick(DialogInterface di,int position){
  di.dismiss();
switch (position) {
case 0:
    launchSettings();
  break;
case 1:
launchDictioanryOverriding();
break;
case 2:
((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).showInputMethodPicker();
break;
}
}","public void onClick(DialogInterface di,int position){
  di.dismiss();
switch (position) {
case 0:
    launchSettings();
  break;
case 1:
launchDictionaryOverriding();
break;
case 2:
((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).showInputMethodPicker();
break;
}
}",0.993006993006993
157558,"private Dictionary getDictionaryForKeyboard(AnyKeyboard currentKeyboard){
  String mappingSettingsKey=getDictionaryOverrideKey(currentKeyboard);
  String defaultDictionary=currentKeyboard.getDefaultDictionaryLanguage();
  String dictionaryValue=getSharedPreferences().getString(mappingSettingsKey,null);
  Dictionary dictionary=null;
  if (dictionaryValue == null)   dictionary=DictionaryFactory.getDictionaryByLanguage(currentKeyboard.getDefaultDictionaryLanguage(),this);
 else {
    if (dictionaryValue != null) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + (defaultDictionary == null ? ""String_Node_Str"" : defaultDictionary) + ""String_Node_Str""+ currentKeyboard.getKeyboardPrefId()+ ""String_Node_Str""+ dictionaryValue+ ""String_Node_Str"");
      dictionary=DictionaryFactory.getDictionaryById(dictionaryValue,this);
    }
  }
  return dictionary;
}","private Dictionary getDictionaryForKeyboard(AnyKeyboard currentKeyboard){
  String mappingSettingsKey=getDictionaryOverrideKey(currentKeyboard);
  String defaultDictionary=currentKeyboard.getDefaultDictionaryLanguage();
  String dictionaryValue=getSharedPreferences().getString(mappingSettingsKey,null);
  Dictionary dictionary=null;
  if (dictionaryValue == null) {
    dictionary=DictionaryFactory.getDictionaryByLanguage(currentKeyboard.getDefaultDictionaryLanguage(),this);
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"" + (defaultDictionary == null ? ""String_Node_Str"" : defaultDictionary) + ""String_Node_Str""+ currentKeyboard.getKeyboardPrefId()+ ""String_Node_Str""+ dictionaryValue+ ""String_Node_Str"");
    dictionary=DictionaryFactory.getDictionaryById(dictionaryValue,this);
  }
  return dictionary;
}",0.9457364341085271
157559,"private void showOptionsMenu(){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setCancelable(true);
  builder.setIcon(R.drawable.icon_8_key);
  builder.setNegativeButton(android.R.string.cancel,null);
  CharSequence itemSettings=getString(R.string.ime_settings);
  CharSequence itemOverrideDictionary=getString(R.string.override_dictionary);
  CharSequence itemInputMethod=getString(R.string.change_ime);
  builder.setItems(new CharSequence[]{itemSettings,itemOverrideDictionary,itemInputMethod},new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface di,    int position){
      di.dismiss();
switch (position) {
case 0:
        launchSettings();
      break;
case 1:
    launchDictioanryOverriding();
  break;
case 2:
((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).showInputMethodPicker();
break;
}
}
}
);
builder.setTitle(getResources().getString(R.string.ime_name));
mOptionsDialog=builder.create();
Window window=mOptionsDialog.getWindow();
WindowManager.LayoutParams lp=window.getAttributes();
lp.token=mInputView.getWindowToken();
lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;
window.setAttributes(lp);
window.addFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
mOptionsDialog.show();
}","private void showOptionsMenu(){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setCancelable(true);
  builder.setIcon(R.drawable.icon_8_key);
  builder.setNegativeButton(android.R.string.cancel,null);
  CharSequence itemSettings=getString(R.string.ime_settings);
  CharSequence itemOverrideDictionary=getString(R.string.override_dictionary);
  CharSequence itemInputMethod=getString(R.string.change_ime);
  builder.setItems(new CharSequence[]{itemSettings,itemOverrideDictionary,itemInputMethod},new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface di,    int position){
      di.dismiss();
switch (position) {
case 0:
        launchSettings();
      break;
case 1:
    launchDictionaryOverriding();
  break;
case 2:
((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).showInputMethodPicker();
break;
}
}
}
);
builder.setTitle(getResources().getString(R.string.ime_name));
mOptionsDialog=builder.create();
Window window=mOptionsDialog.getWindow();
WindowManager.LayoutParams lp=window.getAttributes();
lp.token=mInputView.getWindowToken();
lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;
window.setAttributes(lp);
window.addFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
mOptionsDialog.show();
}",0.9984579799537394
157560,"public synchronized static Dictionary getDictionaryByLanguage(final String language,AnyKeyboardContextProvider context){
  return getDictionaryImpl(null,language,context);
}","public synchronized static Dictionary getDictionaryByLanguage(final String language,AnyKeyboardContextProvider context){
  return getDictionaryImpl(language,null,context);
}",0.9710982658959536
157561,"private static Dictionary locateDictionaryByIdInFactory(final String id,AnyKeyboardContextProvider context) throws Exception {
  Dictionary dict=null;
  final ArrayList<DictionaryBuilder> allBuilders=ExternalDictionaryFactory.getAllBuilders(context.getApplicationContext());
  for (  DictionaryBuilder builder : allBuilders) {
    if (AnySoftKeyboardConfiguration.getInstance().getDEBUG()) {
      Log.d(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",new Object[]{builder.getId(),builder.getLanguage(),id}));
    }
    if (builder.getId().equalsIgnoreCase(id)) {
      dict=builder.createDictionary();
      break;
    }
  }
  return dict;
}","private static Dictionary locateDictionaryByIdInFactory(final String id,AnyKeyboardContextProvider context) throws Exception {
  Dictionary dict=null;
  if (id == null)   return dict;
  final ArrayList<DictionaryBuilder> allBuilders=ExternalDictionaryFactory.getAllBuilders(context.getApplicationContext());
  for (  DictionaryBuilder builder : allBuilders) {
    if (AnySoftKeyboardConfiguration.getInstance().getDEBUG()) {
      Log.d(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",new Object[]{builder.getId(),builder.getLanguage(),id}));
    }
    if (builder.getId().equalsIgnoreCase(id)) {
      dict=builder.createDictionary();
      break;
    }
  }
  return dict;
}",0.9752808988764043
157562,"private synchronized static Dictionary getDictionaryImpl(final String language,final String id,AnyKeyboardContextProvider context){
  final String languageFormat=language == null ? ""String_Node_Str"" : language;
  final String idFormat=id == null ? ""String_Node_Str"" : id;
  if (language != null && msDictionariesByLanguage.containsKey(language)) {
    return msDictionaries.get(msDictionariesByLanguage.get(language));
  }
  if (id != null && msDictionariesById.containsKey(id)) {
    return msDictionaries.get(msDictionariesById.get(id));
  }
  Dictionary dict=null;
  try {
    if (id == null) {
      if ((language == null) || (language.length() == 0 || (""String_Node_Str"".equalsIgnoreCase(language)))) {
        return null;
      }
    }
 else {
      dict=locateDictionaryByIdInFactory(language,context);
    }
    if (language == null) {
      if ((id == null) || (id.length() == 0 || (""String_Node_Str"".equalsIgnoreCase(id)))) {
        return null;
      }
    }
 else {
      dict=locateDictionaryByLanguageInFactory(language,context);
    }
    if (dict == null) {
      Log.d(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",new Object[]{languageFormat,idFormat}));
      ExternalDictionaryFactory.resetBuildersCache();
      if (id != null) {
        dict=locateDictionaryByIdInFactory(language,context);
      }
 else       if (language != null) {
        dict=locateDictionaryByLanguageInFactory(language,context);
      }
      if (dict == null)       Log.w(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",new Object[]{languageFormat,idFormat}));
    }
    if (dict != null) {
      final Dictionary dictToLoad=dict;
      final Thread loader=new Thread(){
        @Override public void run(){
          try {
            dictToLoad.loadDictionary();
          }
 catch (          final Exception e) {
            Log.e(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",new Object[]{languageFormat,idFormat,e.getMessage()}));
            e.printStackTrace();
            if (id != null) {
              removeDictionaryById(id);
            }
 else {
              removeDictionaryByLanguage(language);
            }
          }
        }
      }
;
      loader.setPriority(Thread.NORM_PRIORITY - 1);
      loader.start();
      if (id != null) {
        addDictionaryById(id,dict);
      }
 else {
        addDictionaryByLanguage(language,dict);
      }
    }
  }
 catch (  final Exception ex) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + language);
    ex.printStackTrace();
  }
  return dict;
}","private synchronized static Dictionary getDictionaryImpl(final String language,final String id,AnyKeyboardContextProvider context){
  final String languageFormat=language == null ? ""String_Node_Str"" : language;
  final String idFormat=id == null ? ""String_Node_Str"" : id;
  if (language != null && msDictionariesByLanguage.containsKey(language)) {
    return msDictionaries.get(msDictionariesByLanguage.get(language));
  }
  if (id != null && msDictionariesById.containsKey(id)) {
    return msDictionaries.get(msDictionariesById.get(id));
  }
  Dictionary dict=null;
  try {
    if (id == null) {
      if ((language == null) || (language.length() == 0 || (""String_Node_Str"".equalsIgnoreCase(language)))) {
        return null;
      }
    }
    if (language == null) {
      if ((id == null) || (id.length() == 0 || (""String_Node_Str"".equalsIgnoreCase(id)))) {
        return null;
      }
    }
    if (id != null) {
      dict=locateDictionaryByIdInFactory(id,context);
    }
 else     if (language != null) {
      dict=locateDictionaryByLanguageInFactory(language,context);
    }
    if (dict == null) {
      Log.d(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",new Object[]{languageFormat,idFormat}));
      ExternalDictionaryFactory.resetBuildersCache();
      if (id != null) {
        dict=locateDictionaryByIdInFactory(id,context);
      }
 else       if (language != null) {
        dict=locateDictionaryByLanguageInFactory(language,context);
      }
      if (dict == null)       Log.w(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",new Object[]{languageFormat,idFormat}));
    }
    if (dict != null) {
      final Dictionary dictToLoad=dict;
      final Thread loader=new Thread(){
        @Override public void run(){
          try {
            dictToLoad.loadDictionary();
          }
 catch (          final Exception e) {
            Log.e(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",new Object[]{languageFormat,idFormat,e.getMessage()}));
            e.printStackTrace();
            if (id != null) {
              removeDictionaryById(id);
            }
 else {
              removeDictionaryByLanguage(language);
            }
          }
        }
      }
;
      loader.setPriority(Thread.NORM_PRIORITY - 1);
      loader.start();
      if (id != null) {
        addDictionaryById(id,dict);
      }
 else {
        addDictionaryByLanguage(language,dict);
      }
    }
  }
 catch (  final Exception ex) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + language);
    ex.printStackTrace();
  }
  return dict;
}",0.9608763693270737
157563,"public synchronized static Dictionary getDictionaryById(final String id,AnyKeyboardContextProvider context){
  return getDictionaryImpl(id,null,context);
}","public synchronized static Dictionary getDictionaryById(final String id,AnyKeyboardContextProvider context){
  return getDictionaryImpl(null,id,context);
}",0.9806451612903224
157564,"private static Dictionary locateDictionaryByLanguageInFactory(final String language,AnyKeyboardContextProvider context) throws Exception {
  Dictionary dict=null;
  final ArrayList<DictionaryBuilder> allBuilders=ExternalDictionaryFactory.getAllBuilders(context.getApplicationContext());
  for (  DictionaryBuilder builder : allBuilders) {
    if (AnySoftKeyboardConfiguration.getInstance().getDEBUG()) {
      Log.d(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",new Object[]{builder.getId(),builder.getLanguage(),language}));
    }
    if (builder.getLanguage().equalsIgnoreCase(language)) {
      dict=builder.createDictionary();
      break;
    }
  }
  return dict;
}","private static Dictionary locateDictionaryByLanguageInFactory(final String language,AnyKeyboardContextProvider context) throws Exception {
  Dictionary dict=null;
  if (language == null)   return dict;
  final ArrayList<DictionaryBuilder> allBuilders=ExternalDictionaryFactory.getAllBuilders(context.getApplicationContext());
  for (  DictionaryBuilder builder : allBuilders) {
    if (AnySoftKeyboardConfiguration.getInstance().getDEBUG()) {
      Log.d(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",new Object[]{builder.getId(),builder.getLanguage(),language}));
    }
    if (builder.getLanguage().equalsIgnoreCase(language)) {
      dict=builder.createDictionary();
      break;
    }
  }
  return dict;
}",0.9721627408993576
157565,"public String getLanguage(){
  return null;
}","public String getLanguage(){
  return mLanguage;
}",0.9052631578947368
157566,"protected AnyKeyboard(AnyKeyboardContextProvider context,int xmlLayoutResId){
  super(context.getApplicationContext(),xmlLayoutResId);
  mDebug=AnySoftKeyboardConfiguration.getInstance().getDEBUG();
  mKeyboardContext=context;
  mOnShiftIcon=context.getApplicationContext().getResources().getDrawable(R.drawable.sym_keyboard_shift_on);
}","protected AnyKeyboard(AnyKeyboardContextProvider context,int xmlLayoutResId){
  super(context.getApplicationContext(),xmlLayoutResId);
  mDebug=AnySoftKeyboardConfiguration.getInstance().getDEBUG();
  mKeyboardContext=context;
  mOnShiftIcon=context.getApplicationContext().getResources().getDrawable(R.drawable.sym_keyboard_shift_on);
  mOffShiftIcon=context.getApplicationContext().getResources().getDrawable(R.drawable.sym_keyboard_shift);
}",0.8629961587708067
157567,"@Override protected Key createKeyFromXml(Resources res,Row parent,int x,int y,XmlResourceParser parser){
  if (mSpecialShiftKeys == null)   mSpecialShiftKeys=new HashMap<Character,ShiftedKeyData>();
  AnyKey key=new AnyKey(res,parent,x,y,parser);
  if ((key.codes != null) && (key.codes.length > 0)) {
    final int primaryCode=key.codes[0];
    if (Workarounds.isRightToLeftCharacter((char)primaryCode))     mRightToLeftLayout=true;
switch (primaryCode) {
case 10:
case KEYCODE_DELETE:
case KEYCODE_SHIFT:
      key=new LessSensitiveAnyKey(res,parent,x,y,parser);
  }
  if (primaryCode == 10) {
    mEnterKey=key;
  }
 else   if (primaryCode == KEYCODE_SHIFT) {
    mShiftKey=key;
    mOffShiftIcon=mShiftKey.icon;
  }
 else   if ((primaryCode == AnyKeyboard.KEYCODE_SMILEY) && (parent.rowEdgeFlags == Keyboard.EDGE_BOTTOM)) {
    mSmileyKey=key;
  }
 else   if ((primaryCode == 63) && (parent.rowEdgeFlags == Keyboard.EDGE_BOTTOM)) {
    mQuestionMarkKey=key;
  }
 else   if ((primaryCode == Keyboard.KEYCODE_MODE_CHANGE) || (primaryCode == AnyKeyboard.KEYCODE_LANG_CHANGE)) {
    final String keysMode=AnySoftKeyboardConfiguration.getInstance().getChangeLayoutKeysSize();
    if (keysMode.equals(""String_Node_Str"")) {
      key.label=null;
      key.height=0;
      key.width=0;
    }
 else     if (keysMode.equals(""String_Node_Str"")) {
      String keyText=(primaryCode == Keyboard.KEYCODE_MODE_CHANGE) ? res.getString(R.string.change_symbols_regular) : res.getString(R.string.change_lang_regular);
      key.label=keyText;
    }
 else {
      String keyText=(primaryCode == Keyboard.KEYCODE_MODE_CHANGE) ? res.getString(R.string.change_symbols_wide) : res.getString(R.string.change_lang_wide);
      key.label=keyText;
    }
  }
 else {
    if (isAlphabetKey(key)) {
      key.label=""String_Node_Str"" + ((char)primaryCode);
    }
  }
}
if (mDebug) {
  final int primaryKey=((key.codes != null) && key.codes.length > 0) ? key.codes[0] : -1;
  Log.v(""String_Node_Str"",""String_Node_Str"" + primaryKey + ""String_Node_Str""+ key.width+ ""String_Node_Str""+ key.height+ ""String_Node_Str""+ key.label+ ""String_Node_Str"");
}
setPopupKeyChars(key);
if ((key.codes != null) && (key.codes.length > 1)) {
  final int primaryCode=key.codes[0];
  if ((primaryCode > 0) && (primaryCode < Character.MAX_VALUE)) {
    Character primary=new Character((char)primaryCode);
    ShiftedKeyData keyData=new ShiftedKeyData(key);
    if (!mSpecialShiftKeys.containsKey(primary))     mSpecialShiftKeys.put(primary,keyData);
    if (mDebug)     Log.v(""String_Node_Str"",""String_Node_Str"" + primary + ""String_Node_Str""+ keyData.ShiftCharacter+ ""String_Node_Str"");
  }
}
return key;
}","@Override protected Key createKeyFromXml(Resources res,Row parent,int x,int y,XmlResourceParser parser){
  if (mSpecialShiftKeys == null)   mSpecialShiftKeys=new HashMap<Character,ShiftedKeyData>();
  AnyKey key=new AnyKey(res,parent,x,y,parser);
  if ((key.codes != null) && (key.codes.length > 0)) {
    final int primaryCode=key.codes[0];
    if (Workarounds.isRightToLeftCharacter((char)primaryCode))     mRightToLeftLayout=true;
switch (primaryCode) {
case 10:
case KEYCODE_DELETE:
case KEYCODE_SHIFT:
      key=new LessSensitiveAnyKey(res,parent,x,y,parser);
  }
  if (primaryCode == 10) {
    mEnterKey=key;
  }
 else   if (primaryCode == KEYCODE_SHIFT) {
    mShiftKey=key;
  }
 else   if ((primaryCode == AnyKeyboard.KEYCODE_SMILEY) && (parent.rowEdgeFlags == Keyboard.EDGE_BOTTOM)) {
    mSmileyKey=key;
  }
 else   if ((primaryCode == 63) && (parent.rowEdgeFlags == Keyboard.EDGE_BOTTOM)) {
    mQuestionMarkKey=key;
  }
 else   if ((primaryCode == Keyboard.KEYCODE_MODE_CHANGE) || (primaryCode == AnyKeyboard.KEYCODE_LANG_CHANGE)) {
    final String keysMode=AnySoftKeyboardConfiguration.getInstance().getChangeLayoutKeysSize();
    if (keysMode.equals(""String_Node_Str"")) {
      key.label=null;
      key.height=0;
      key.width=0;
    }
 else     if (keysMode.equals(""String_Node_Str"")) {
      String keyText=(primaryCode == Keyboard.KEYCODE_MODE_CHANGE) ? res.getString(R.string.change_symbols_regular) : res.getString(R.string.change_lang_regular);
      key.label=keyText;
    }
 else {
      String keyText=(primaryCode == Keyboard.KEYCODE_MODE_CHANGE) ? res.getString(R.string.change_symbols_wide) : res.getString(R.string.change_lang_wide);
      key.label=keyText;
    }
  }
 else {
    if (isAlphabetKey(key)) {
      key.label=""String_Node_Str"" + ((char)primaryCode);
    }
  }
}
if (mDebug) {
  final int primaryKey=((key.codes != null) && key.codes.length > 0) ? key.codes[0] : -1;
  Log.v(""String_Node_Str"",""String_Node_Str"" + primaryKey + ""String_Node_Str""+ key.width+ ""String_Node_Str""+ key.height+ ""String_Node_Str""+ key.label+ ""String_Node_Str"");
}
setPopupKeyChars(key);
if ((key.codes != null) && (key.codes.length > 1)) {
  final int primaryCode=key.codes[0];
  if ((primaryCode > 0) && (primaryCode < Character.MAX_VALUE)) {
    Character primary=new Character((char)primaryCode);
    ShiftedKeyData keyData=new ShiftedKeyData(key);
    if (!mSpecialShiftKeys.containsKey(primary))     mSpecialShiftKeys.put(primary,keyData);
    if (mDebug)     Log.v(""String_Node_Str"",""String_Node_Str"" + primary + ""String_Node_Str""+ keyData.ShiftCharacter+ ""String_Node_Str"");
  }
}
return key;
}",0.9935532802427
157568,"public static KeyboardCreator[] createAlphaBetKeyboards(AnyKeyboardContextProvider contextProvider){
  final ArrayList<KeyboardCreator> keyboardCreators=KeyboardCreatorsFactory.getAllCreators(contextProvider);
  Log.i(""String_Node_Str"",""String_Node_Str"" + keyboardCreators.size() + ""String_Node_Str"");
  final SharedPreferences sharedPreferences=contextProvider.getSharedPreferences();
  ArrayList<KeyboardCreator> keyboards=new ArrayList<KeyboardCreator>();
  for (int keyboardIndex=0; keyboardIndex < keyboardCreators.size(); keyboardIndex++) {
    final KeyboardCreator creator=keyboardCreators.get(keyboardIndex);
    final boolean keyboardIsEnabled=sharedPreferences.getBoolean(creator.getKeyboardPrefId(),keyboardIndex == 0);
    if (keyboardIsEnabled) {
      keyboards.add(creator);
    }
  }
  Collections.sort(keyboards,new Comparator<KeyboardCreator>(){
    public int compare(    KeyboardCreator k1,    KeyboardCreator k2){
      return k1.getSortOrderValue() - k2.getSortOrderValue();
    }
  }
);
  if (keyboards.size() == 0) {
    final SharedPreferences.Editor editor=sharedPreferences.edit();
    final KeyboardCreator creator=keyboardCreators.get(0);
    editor.putBoolean(creator.getKeyboardPrefId(),true);
    editor.commit();
    keyboards.add(creator);
  }
  for (  final KeyboardCreator aKeyboard : keyboards) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + aKeyboard.getKeyboardPrefId());
  }
  keyboards.trimToSize();
  final KeyboardCreator[] keyboardsArray=new KeyboardCreator[keyboards.size()];
  return keyboards.toArray(keyboardsArray);
}","public static KeyboardCreator[] createAlphaBetKeyboards(AnyKeyboardContextProvider contextProvider){
  final ArrayList<KeyboardCreator> keyboardCreators=KeyboardCreatorsFactory.getAllCreators(contextProvider);
  Log.i(""String_Node_Str"",""String_Node_Str"" + keyboardCreators.size() + ""String_Node_Str"");
  final SharedPreferences sharedPreferences=contextProvider.getSharedPreferences();
  ArrayList<KeyboardCreator> keyboards=new ArrayList<KeyboardCreator>();
  for (int keyboardIndex=0; keyboardIndex < keyboardCreators.size(); keyboardIndex++) {
    final KeyboardCreator creator=keyboardCreators.get(keyboardIndex);
    final boolean keyboardIsEnabled=sharedPreferences.getBoolean(creator.getKeyboardPrefId(),false);
    if (keyboardIsEnabled) {
      keyboards.add(creator);
    }
  }
  Collections.sort(keyboards,new Comparator<KeyboardCreator>(){
    public int compare(    KeyboardCreator k1,    KeyboardCreator k2){
      return k1.getSortOrderValue() - k2.getSortOrderValue();
    }
  }
);
  if (keyboards.size() == 0) {
    final SharedPreferences.Editor editor=sharedPreferences.edit();
    final KeyboardCreator creator=keyboardCreators.get(0);
    editor.putBoolean(creator.getKeyboardPrefId(),true);
    editor.commit();
    keyboards.add(creator);
  }
  for (  final KeyboardCreator aKeyboard : keyboards) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + aKeyboard.getKeyboardPrefId());
  }
  keyboards.trimToSize();
  final KeyboardCreator[] keyboardsArray=new KeyboardCreator[keyboards.size()];
  return keyboards.toArray(keyboardsArray);
}",0.9926447073872722
157569,"@Override public void setKeyboard(Keyboard keyboard){
  if ((keyboard != null) && (keyboard.getMinWidth() != getWidth())) {
    Log.w(""String_Node_Str"",""String_Node_Str"" + keyboard.getMinWidth() + ""String_Node_Str""+ getWidth());
  }
  super.setKeyboard(keyboard);
}","@Override public void setKeyboard(Keyboard keyboard){
  if ((keyboard != null) && (keyboard.getMinWidth() != getWidth())) {
    Log.w(TAG,""String_Node_Str"" + keyboard.getMinWidth() + ""String_Node_Str""+ getWidth());
  }
  super.setKeyboard(keyboard);
}",0.9612403100775194
157570,"public void onPress(int primaryCode){
  if (mVibrationDuration > 0) {
    if (DEBUG)     Log.d(""String_Node_Str"",""String_Node_Str"");
    ((Vibrator)getSystemService(Context.VIBRATOR_SERVICE)).vibrate(mVibrationDuration);
  }
  if (mSoundOn) {
    AudioManager manager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
    if (manager.getRingerMode() == AudioManager.RINGER_MODE_NORMAL) {
      int keyFX;
switch (primaryCode) {
case 13:
        keyFX=AudioManager.FX_KEYPRESS_RETURN;
case Keyboard.KEYCODE_DELETE:
      keyFX=AudioManager.FX_KEYPRESS_DELETE;
case 32:
    keyFX=AudioManager.FX_KEYPRESS_SPACEBAR;
default :
  keyFX=AudioManager.FX_KEY_CLICK;
}
final float volume=(mSoundVolume < 0) ? manager.getStreamVolume(AudioManager.STREAM_NOTIFICATION) : mSoundVolume;
if (DEBUG) Log.d(""String_Node_Str"",""String_Node_Str"" + keyFX + ""String_Node_Str""+ volume);
manager.playSoundEffect(keyFX,volume);
}
 else {
if (DEBUG) Log.v(""String_Node_Str"",""String_Node_Str"");
}
}
if (primaryCode == KEYCODE_SPACE) {
if (DEBUG) Log.d(""String_Node_Str"",""String_Node_Str"" + mSwitchKeyboardOnSpace);
if (mSwitchKeyboardOnSpace && !mKeyboardSwitcher.isAlphabetMode()) {
mKeyboardSwitcher.nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
}
}
}","public void onPress(int primaryCode){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + primaryCode);
  if (mVibrationDuration > 0) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"");
    ((Vibrator)getSystemService(Context.VIBRATOR_SERVICE)).vibrate(mVibrationDuration);
  }
  if (mSoundOn) {
    AudioManager manager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
    if (manager.getRingerMode() == AudioManager.RINGER_MODE_NORMAL) {
      int keyFX;
switch (primaryCode) {
case 13:
        keyFX=AudioManager.FX_KEYPRESS_RETURN;
case Keyboard.KEYCODE_DELETE:
      keyFX=AudioManager.FX_KEYPRESS_DELETE;
case 32:
    keyFX=AudioManager.FX_KEYPRESS_SPACEBAR;
default :
  keyFX=AudioManager.FX_KEY_CLICK;
}
final float volume=(mSoundVolume < 0) ? manager.getStreamVolume(AudioManager.STREAM_NOTIFICATION) : mSoundVolume;
if (DEBUG) Log.d(""String_Node_Str"",""String_Node_Str"" + keyFX + ""String_Node_Str""+ volume);
manager.playSoundEffect(keyFX,volume);
}
 else {
if (DEBUG) Log.v(""String_Node_Str"",""String_Node_Str"");
}
}
}",0.812637121544537
157571,"public void onRelease(int primaryCode){
}","public void onRelease(int primaryCode){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + primaryCode);
}",0.5815602836879432
157572,"@Override public void onFinishInput(){
  if (DEBUG)   Log.d(""String_Node_Str"",""String_Node_Str"");
  super.onFinishInput();
  if (mInputView != null) {
    mInputView.closing();
  }
  if (!mKeyboardChangeNotificationType.equals(KEYBOARD_NOTIFICATION_ALWAYS)) {
    NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
    notificationManager.cancel(KEYBOARD_NOTIFICATION_ID);
  }
  resetComposing();
  System.gc();
}","@Override public void onFinishInput(){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  super.onFinishInput();
  if (mInputView != null) {
    mInputView.closing();
  }
  if (!mKeyboardChangeNotificationType.equals(KEYBOARD_NOTIFICATION_ALWAYS)) {
    NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
    notificationManager.cancel(KEYBOARD_NOTIFICATION_ID);
  }
  resetComposing();
  System.gc();
}",0.978448275862069
157573,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  InputConnection ic=getCurrentInputConnection();
  if (!mPredictionLandscape) {
    commitTyped(ic);
    mPredicting=false;
  }
  if (DEBUG)   Log.d(""String_Node_Str"",""String_Node_Str"" + event.getKeyCode() + ""String_Node_Str""+ ((event.getMetaState() & KeyEvent.META_SHIFT_ON) != 0)+ ""String_Node_Str""+ ((event.getMetaState() & KeyEvent.META_ALT_ON) != 0)+ ""String_Node_Str""+ event.getRepeatCount());
switch (keyCode) {
case KeyEvent.KEYCODE_BACK:
    if (event.getRepeatCount() == 0 && mInputView != null) {
      if (mInputView.handleBack()) {
        if (ic != null) {
          ic.clearMetaKeyStates(Integer.MAX_VALUE);
        }
        mMetaState=0;
        return true;
      }
    }
  break;
case KeyEvent.KEYCODE_ALT_LEFT:
case KeyEvent.KEYCODE_ALT_RIGHT:
case KeyEvent.KEYCODE_SHIFT_LEFT:
case KeyEvent.KEYCODE_SHIFT_RIGHT:
case KeyEvent.KEYCODE_SYM:
if (DEBUG) Log.d(""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
mMetaState=MyMetaKeyKeyListener.handleKeyDown(mMetaState,keyCode,event);
if (DEBUG) Log.d(""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
break;
case KeyEvent.KEYCODE_SPACE:
if (event.isAltPressed()) {
Log.d(""String_Node_Str"",""String_Node_Str"");
if (ic != null) {
ic.clearMetaKeyStates(Integer.MAX_VALUE);
}
mMetaState=0;
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AlphabetSupportsPhysical);
return true;
}
default :
if (!AnySoftKeyboardConfiguration.getInstance().getUseRepeatingKeys() && event.getRepeatCount() > 0) return true;
if (mKeyboardSwitcher.isCurrentKeyboardPhysical()) {
if (ic != null) ic.beginBatchEdit();
try {
if (event.isPrintingKey()) {
mHardKeyboardAction.initializeAction(event,mMetaState);
AnyKeyboard current=mKeyboardSwitcher.getCurrentKeyboard();
HardKeyboardTranslator keyTranslator=(HardKeyboardTranslator)current;
if (DEBUG) {
final String keyboardName=current.getKeyboardName();
Log.d(""String_Node_Str"",""String_Node_Str"" + keyboardName + ""String_Node_Str""+ keyCode);
Log.v(""String_Node_Str"",""String_Node_Str"" + mHardKeyboardAction.isShiftActive() + ""String_Node_Str""+ mHardKeyboardAction.isAltActive()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCode()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCodeWasChanged());
}
keyTranslator.translatePhysicalCharacter(mHardKeyboardAction);
if (DEBUG) Log.v(""String_Node_Str"",""String_Node_Str"" + mHardKeyboardAction.getKeyCode() + ""String_Node_Str""+ mHardKeyboardAction.getKeyCodeWasChanged());
if (mHardKeyboardAction.getKeyCodeWasChanged()) {
final int translatedChar=mHardKeyboardAction.getKeyCode();
onKey(translatedChar,new int[]{translatedChar});
mMetaState=MyMetaKeyKeyListener.adjustMetaAfterKeypress(mMetaState);
if (DEBUG) Log.d(""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
return true;
}
}
}
  finally {
if (ic != null) ic.endBatchEdit();
}
}
if (event.isPrintingKey()) {
mMetaState=MyMetaKeyKeyListener.adjustMetaAfterKeypress(mMetaState);
if (DEBUG) Log.d(""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
}
}
return super.onKeyDown(keyCode,event);
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  Log.d(TAG,""String_Node_Str"" + keyCode);
  InputConnection ic=getCurrentInputConnection();
  if (!mPredictionLandscape) {
    commitTyped(ic);
    mPredicting=false;
  }
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + event.getKeyCode() + ""String_Node_Str""+ ((event.getMetaState() & KeyEvent.META_SHIFT_ON) != 0)+ ""String_Node_Str""+ ((event.getMetaState() & KeyEvent.META_ALT_ON) != 0)+ ""String_Node_Str""+ event.getRepeatCount());
switch (keyCode) {
case KeyEvent.KEYCODE_BACK:
    if (event.getRepeatCount() == 0 && mInputView != null) {
      if (mInputView.handleBack()) {
        if (ic != null) {
          ic.clearMetaKeyStates(Integer.MAX_VALUE);
        }
        mMetaState=0;
        return true;
      }
    }
  break;
case KeyEvent.KEYCODE_ALT_LEFT:
case KeyEvent.KEYCODE_ALT_RIGHT:
case KeyEvent.KEYCODE_SHIFT_LEFT:
case KeyEvent.KEYCODE_SHIFT_RIGHT:
case KeyEvent.KEYCODE_SYM:
if (DEBUG) Log.d(TAG + ""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
mMetaState=MyMetaKeyKeyListener.handleKeyDown(mMetaState,keyCode,event);
if (DEBUG) Log.d(TAG + ""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
break;
case KeyEvent.KEYCODE_SPACE:
if (event.isAltPressed()) {
Log.d(TAG,""String_Node_Str"");
if (ic != null) {
ic.clearMetaKeyStates(Integer.MAX_VALUE);
}
mMetaState=0;
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AlphabetSupportsPhysical);
return true;
}
default :
if (!AnySoftKeyboardConfiguration.getInstance().getUseRepeatingKeys() && event.getRepeatCount() > 0) return true;
if (mKeyboardSwitcher.isCurrentKeyboardPhysical()) {
if (ic != null) ic.beginBatchEdit();
try {
if (event.isPrintingKey()) {
mHardKeyboardAction.initializeAction(event,mMetaState);
AnyKeyboard current=mKeyboardSwitcher.getCurrentKeyboard();
HardKeyboardTranslator keyTranslator=(HardKeyboardTranslator)current;
if (DEBUG) {
final String keyboardName=current.getKeyboardName();
Log.d(TAG,""String_Node_Str"" + keyboardName + ""String_Node_Str""+ keyCode);
Log.v(TAG,""String_Node_Str"" + mHardKeyboardAction.isShiftActive() + ""String_Node_Str""+ mHardKeyboardAction.isAltActive()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCode()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCodeWasChanged());
}
keyTranslator.translatePhysicalCharacter(mHardKeyboardAction);
if (DEBUG) Log.v(TAG,""String_Node_Str"" + mHardKeyboardAction.getKeyCode() + ""String_Node_Str""+ mHardKeyboardAction.getKeyCodeWasChanged());
if (mHardKeyboardAction.getKeyCodeWasChanged()) {
final int translatedChar=mHardKeyboardAction.getKeyCode();
onKey(translatedChar,new int[]{translatedChar});
mMetaState=MyMetaKeyKeyListener.adjustMetaAfterKeypress(mMetaState);
if (DEBUG) Log.d(TAG + ""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
return true;
}
}
}
  finally {
if (ic != null) ic.endBatchEdit();
}
}
if (event.isPrintingKey()) {
mMetaState=MyMetaKeyKeyListener.adjustMetaAfterKeypress(mMetaState);
if (DEBUG) Log.d(TAG + ""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
}
}
return super.onKeyDown(keyCode,event);
}",0.961963589076723
157574,"public void onKey(int primaryCode,int[] keyCodes){
  if (DEBUG)   Log.d(""String_Node_Str"",""String_Node_Str"" + primaryCode);
switch (primaryCode) {
case Keyboard.KEYCODE_DELETE:
    handleBackspace();
  break;
case Keyboard.KEYCODE_SHIFT:
handleShift();
break;
case AnyKeyboard.KEYCODE_CTRL:
break;
case AnyKeyboard.KEYCODE_LEFT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_LEFT);
break;
case AnyKeyboard.KEYCODE_RIGHT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_RIGHT);
break;
case Keyboard.KEYCODE_CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case AnyKeyboardView.KEYCODE_OPTIONS:
showOptionsMenu();
break;
case AnyKeyboard.KEYCODE_SMILEY:
if (mSmileyOnShortPress) {
onText(mConfig.getSmileyText());
}
 else {
if (mInputView != null) mInputView.simulateLongPress(AnyKeyboard.KEYCODE_SMILEY);
}
break;
case AnyKeyboardView.KEYCODE_SMILEY_LONGPRESS:
if (mSmileyOnShortPress) {
if (mInputView != null) mInputView.simulateLongPress(AnyKeyboard.KEYCODE_SMILEY);
}
 else {
onText(mConfig.getSmileyText());
}
break;
case Keyboard.KEYCODE_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case AnyKeyboard.KEYCODE_LANG_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
case AnyKeyboard.KEYCODE_ALTER_LAYOUT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case AnyKeyboard.KEYCODE_KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case AnyKeyboard.KEYCODE_KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
default :
primaryCode=translatePrimaryCodeFromCurrentKeyboard(primaryCode);
if (mKeyboardSwitcher.isRightToLeftMode()) primaryCode=Workarounds.workaroundParenthesisDirectionFix(primaryCode);
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
}
 else {
handleCharacter(primaryCode,keyCodes);
mSpaceSent=false;
}
mJustRevertedSeparator=null;
}
}","public void onKey(int primaryCode,int[] keyCodes){
  if (DEBUG)   Log.d(""String_Node_Str"",""String_Node_Str"" + primaryCode);
  boolean switchToAlphabetAtTheEnd=false;
switch (primaryCode) {
case Keyboard.KEYCODE_DELETE:
    handleBackspace();
  break;
case Keyboard.KEYCODE_SHIFT:
handleShift();
break;
case AnyKeyboard.KEYCODE_CTRL:
break;
case AnyKeyboard.KEYCODE_LEFT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_LEFT);
break;
case AnyKeyboard.KEYCODE_RIGHT:
sendDownUpKeyEvents(KeyEvent.KEYCODE_DPAD_RIGHT);
break;
case Keyboard.KEYCODE_CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case AnyKeyboardView.KEYCODE_OPTIONS:
showOptionsMenu();
break;
case AnyKeyboard.KEYCODE_SMILEY:
if (mSmileyOnShortPress) {
onText(mConfig.getSmileyText());
}
 else {
if (mInputView != null) mInputView.simulateLongPress(AnyKeyboard.KEYCODE_SMILEY);
}
break;
case AnyKeyboardView.KEYCODE_SMILEY_LONGPRESS:
if (mSmileyOnShortPress) {
if (mInputView != null) mInputView.simulateLongPress(AnyKeyboard.KEYCODE_SMILEY);
}
 else {
onText(mConfig.getSmileyText());
}
break;
case Keyboard.KEYCODE_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case AnyKeyboard.KEYCODE_LANG_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
case AnyKeyboard.KEYCODE_ALTER_LAYOUT:
nextAlterKeyboard(getCurrentInputEditorInfo());
break;
case AnyKeyboard.KEYCODE_KEYBOARD_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Any);
break;
case AnyKeyboard.KEYCODE_KEYBOARD_REVERSE_CYCLE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.PreviousAny);
break;
case KEYCODE_SPACE:
if (DEBUG) Log.d(TAG,""String_Node_Str"" + mSwitchKeyboardOnSpace);
if (mSwitchKeyboardOnSpace && !mKeyboardSwitcher.isAlphabetMode()) {
switchToAlphabetAtTheEnd=true;
}
default :
primaryCode=translatePrimaryCodeFromCurrentKeyboard(primaryCode);
if (mKeyboardSwitcher.isRightToLeftMode()) primaryCode=Workarounds.workaroundParenthesisDirectionFix(primaryCode);
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
}
 else {
handleCharacter(primaryCode,keyCodes);
mSpaceSent=false;
}
mJustRevertedSeparator=null;
if (switchToAlphabetAtTheEnd) {
mKeyboardSwitcher.nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
}
break;
}
}",0.9167441860465116
157575,"@Override public void onDisplayCompletions(CompletionInfo[] completions){
  if (DEBUG) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    for (int i=0; i < (completions != null ? completions.length : 0); i++) {
      Log.i(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str""+ completions[i]);
    }
  }
  if (mCompletionOn || (isFullscreenMode() && (completions != null))) {
    if (DEBUG)     Log.v(""String_Node_Str"",""String_Node_Str"" + mCompletionOn + ""String_Node_Str""+ isFullscreenMode());
    mCompletions=completions;
    if (completions == null) {
      if (DEBUG)       Log.v(""String_Node_Str"",""String_Node_Str"");
      mCandidateView.setSuggestions(null,false,false,false);
      return;
    }
    List<CharSequence> stringList=new ArrayList<CharSequence>();
    for (int i=0; i < (completions != null ? completions.length : 0); i++) {
      CompletionInfo ci=completions[i];
      if (ci != null)       stringList.add(ci.getText());
    }
    if (DEBUG)     Log.v(""String_Node_Str"",""String_Node_Str"" + stringList.size() + ""String_Node_Str"");
    mCandidateView.setSuggestions(stringList,true,true,true);
    mBestWord=null;
    setCandidatesViewShown(true);
  }
 else   if (DEBUG)   Log.v(""String_Node_Str"",""String_Node_Str"");
}","@Override public void onDisplayCompletions(CompletionInfo[] completions){
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"");
    for (int i=0; i < (completions != null ? completions.length : 0); i++) {
      Log.i(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str""+ completions[i]);
    }
  }
  if (mCompletionOn || (isFullscreenMode() && (completions != null))) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + mCompletionOn + ""String_Node_Str""+ isFullscreenMode());
    mCompletions=completions;
    if (completions == null) {
      if (DEBUG)       Log.v(TAG,""String_Node_Str"");
      mCandidateView.setSuggestions(null,false,false,false);
      return;
    }
    List<CharSequence> stringList=new ArrayList<CharSequence>();
    for (int i=0; i < (completions != null ? completions.length : 0); i++) {
      CompletionInfo ci=completions[i];
      if (ci != null)       stringList.add(ci.getText());
    }
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + stringList.size() + ""String_Node_Str"");
    mCandidateView.setSuggestions(stringList,true,true,true);
    mBestWord=null;
    setCandidatesViewShown(true);
  }
 else   if (DEBUG)   Log.v(TAG,""String_Node_Str"");
}",0.957990115321252
157576,"@Override public void onStartInputView(EditorInfo attribute,boolean restarting){
  if (DEBUG)   Log.d(""String_Node_Str"",""String_Node_Str"" + attribute.imeOptions + ""String_Node_Str""+ attribute.inputType+ ""String_Node_Str""+ restarting+ ""String_Node_Str"");
  super.onStartInputView(attribute,restarting);
  if (mInputView != null) {
    mInputView.closing();
    if (AutoText.getSize(mInputView) < 1)     mQuickFixes=true;
  }
}","@Override public void onStartInputView(EditorInfo attribute,boolean restarting){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + attribute.imeOptions + ""String_Node_Str""+ attribute.inputType+ ""String_Node_Str""+ restarting+ ""String_Node_Str"");
  super.onStartInputView(attribute,restarting);
  if (mInputView != null) {
    mInputView.closing();
    if (AutoText.getSize(mInputView) < 1)     mQuickFixes=true;
  }
}",0.9760765550239234
157577,"@Override public void onDestroy(){
  DictionaryFactory.close();
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  sp.unregisterOnSharedPreferenceChangeListener(this);
  if (mSoundOn) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    mAudioManager.unloadSoundEffects();
  }
  mNotificationManager.cancel(KEYBOARD_NOTIFICATION_ID);
  super.onDestroy();
}","@Override public void onDestroy(){
  DictionaryFactory.close();
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  sp.unregisterOnSharedPreferenceChangeListener(this);
  if (mSoundOn) {
    Log.i(TAG,""String_Node_Str"");
    mAudioManager.unloadSoundEffects();
  }
  mNotificationManager.cancel(KEYBOARD_NOTIFICATION_ID);
  super.onDestroy();
}",0.973474801061008
157578,"@Override public void onFinishInputView(boolean finishingInput){
  if (DEBUG)   Log.d(""String_Node_Str"",""String_Node_Str"" + finishingInput + ""String_Node_Str"");
  super.onFinishInputView(finishingInput);
  if (!mKeyboardChangeNotificationType.equals(KEYBOARD_NOTIFICATION_ALWAYS)) {
    mNotificationManager.cancel(KEYBOARD_NOTIFICATION_ID);
  }
  if (finishingInput)   resetComposing();
}","@Override public void onFinishInputView(boolean finishingInput){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + finishingInput + ""String_Node_Str"");
  super.onFinishInputView(finishingInput);
  if (!mKeyboardChangeNotificationType.equals(KEYBOARD_NOTIFICATION_ALWAYS)) {
    mNotificationManager.cancel(KEYBOARD_NOTIFICATION_ID);
  }
  if (finishingInput)   resetComposing();
}",0.9738219895287958
157579,"@Override public void onStartInput(EditorInfo attribute,boolean restarting){
  if (DEBUG)   Log.d(""String_Node_Str"",""String_Node_Str"" + attribute.imeOptions + ""String_Node_Str""+ attribute.inputType+ ""String_Node_Str""+ restarting+ ""String_Node_Str"");
  super.onStartInput(attribute,restarting);
  mKeyboardSwitcher.makeKeyboards(false);
  resetComposing();
  TextEntryState.newSession(this);
  if (!restarting) {
    mMetaState=0;
  }
  mPredictionOn=false;
  mCompletionOn=false;
  mCompletions=null;
  mCapsLock=false;
switch (attribute.inputType & EditorInfo.TYPE_MASK_CLASS) {
case EditorInfo.TYPE_CLASS_NUMBER:
case EditorInfo.TYPE_CLASS_DATETIME:
case EditorInfo.TYPE_CLASS_PHONE:
    mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_PHONE,attribute);
  break;
case EditorInfo.TYPE_CLASS_TEXT:
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_TEXT,attribute);
mPredictionOn=true;
final int variation=attribute.inputType & EditorInfo.TYPE_MASK_VARIATION;
if (variation == EditorInfo.TYPE_TEXT_VARIATION_PASSWORD || variation == EditorInfo.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD) {
mPredictionOn=false;
}
if ((!AnySoftKeyboardConfiguration.getInstance().getInsertSpaceAfterCandidatePick()) || variation == EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS || variation == EditorInfo.TYPE_TEXT_VARIATION_PERSON_NAME) {
mAutoSpace=false;
}
 else {
mAutoSpace=true;
}
if (variation == EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS) {
mPredictionOn=false;
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_EMAIL,attribute);
}
 else if (variation == EditorInfo.TYPE_TEXT_VARIATION_URI) {
mPredictionOn=false;
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_URL,attribute);
}
 else if (variation == EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE) {
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_IM,attribute);
}
 else if (variation == EditorInfo.TYPE_TEXT_VARIATION_FILTER) {
mPredictionOn=false;
}
if ((attribute.inputType & EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE) != 0) {
mPredictionOn=false;
mCompletionOn=true && isFullscreenMode();
}
updateShiftKeyState(attribute);
break;
default :
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_TEXT,attribute);
updateShiftKeyState(attribute);
}
mComposing.setLength(0);
mPredicting=false;
setCandidatesViewShown(false);
if (mSuggest != null) {
mSuggest.setCorrectionMode(mCorrectionMode);
}
mPredictionOn=mPredictionOn && mCorrectionMode > 0;
if (mCandidateView != null) mCandidateView.setSuggestions(null,false,false,false);
if (TRACE_SDCARD) Debug.startMethodTracing(""String_Node_Str"");
}","@Override public void onStartInput(EditorInfo attribute,boolean restarting){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + attribute.imeOptions + ""String_Node_Str""+ attribute.inputType+ ""String_Node_Str""+ restarting+ ""String_Node_Str"");
  super.onStartInput(attribute,restarting);
  mKeyboardSwitcher.makeKeyboards(false);
  resetComposing();
  TextEntryState.newSession(this);
  if (!restarting) {
    mMetaState=0;
  }
  mPredictionOn=false;
  mCompletionOn=false;
  mCompletions=null;
  mCapsLock=false;
switch (attribute.inputType & EditorInfo.TYPE_MASK_CLASS) {
case EditorInfo.TYPE_CLASS_NUMBER:
case EditorInfo.TYPE_CLASS_DATETIME:
case EditorInfo.TYPE_CLASS_PHONE:
    mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_PHONE,attribute);
  break;
case EditorInfo.TYPE_CLASS_TEXT:
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_TEXT,attribute);
mPredictionOn=true;
final int variation=attribute.inputType & EditorInfo.TYPE_MASK_VARIATION;
if (variation == EditorInfo.TYPE_TEXT_VARIATION_PASSWORD || variation == EditorInfo.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD) {
mPredictionOn=false;
}
if ((!AnySoftKeyboardConfiguration.getInstance().getInsertSpaceAfterCandidatePick()) || variation == EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS || variation == EditorInfo.TYPE_TEXT_VARIATION_PERSON_NAME) {
mAutoSpace=false;
}
 else {
mAutoSpace=true;
}
if (variation == EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS) {
mPredictionOn=false;
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_EMAIL,attribute);
}
 else if (variation == EditorInfo.TYPE_TEXT_VARIATION_URI) {
mPredictionOn=false;
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_URL,attribute);
}
 else if (variation == EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE) {
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_IM,attribute);
}
 else if (variation == EditorInfo.TYPE_TEXT_VARIATION_FILTER) {
mPredictionOn=false;
}
if ((attribute.inputType & EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE) != 0) {
mPredictionOn=false;
mCompletionOn=true && isFullscreenMode();
}
updateShiftKeyState(attribute);
break;
default :
mKeyboardSwitcher.setKeyboardMode(KeyboardSwitcher.MODE_TEXT,attribute);
updateShiftKeyState(attribute);
}
mComposing.setLength(0);
mPredicting=false;
setCandidatesViewShown(false);
if (mSuggest != null) {
mSuggest.setCorrectionMode(mCorrectionMode);
}
mPredictionOn=mPredictionOn && mCorrectionMode > 0;
if (mCandidateView != null) mCandidateView.setSuggestions(null,false,false,false);
if (TRACE_SDCARD) Debug.startMethodTracing(""String_Node_Str"");
}",0.9960922235248144
157580,"private void launchDictioanryOverriding(){
  AnyKeyboard currentKeyboard=mKeyboardSwitcher.getCurrentKeyboard();
  final String dictionaryOverridingKey=getDictionaryOverrideKey(currentKeyboard);
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setCancelable(true);
  builder.setIcon(R.drawable.icon_8_key);
  builder.setTitle(getResources().getString(R.string.override_dictionary_title,currentKeyboard.getKeyboardName()));
  builder.setNegativeButton(android.R.string.cancel,null);
  ArrayList<CharSequence> dictioanries=new ArrayList<CharSequence>();
  dictioanries.add(getString(R.string.override_dictionary_default));
  for (  DictionaryBuilder dictionaryBuilder : ExternalDictionaryFactory.getAllCreators(this)) {
    dictioanries.add(this.getResources().getString(dictionaryBuilder.getDictionaryNameResId()));
  }
  final CharSequence[] items=new CharSequence[dictioanries.size()];
  dictioanries.toArray(items);
  builder.setItems(items,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface di,    int position){
      di.dismiss();
      Editor editor=getSharedPreferences().edit();
switch (position) {
case 0:
        Log.d(""String_Node_Str"",""String_Node_Str"");
      editor.remove(dictionaryOverridingKey);
    showToastMessage(R.string.override_disabled,true);
  break;
default :
if ((position < 0) || (position >= items.length)) {
  Log.d(""String_Node_Str"",""String_Node_Str"");
}
 else {
  String selectedLanguageString=items[position].toString();
  Log.d(""String_Node_Str"",""String_Node_Str"" + selectedLanguageString);
  editor.putString(dictionaryOverridingKey,selectedLanguageString);
  showToastMessage(getString(R.string.override_enabled,selectedLanguageString),true);
}
break;
}
editor.commit();
setMainDictionaryForCurrentKeyboard();
}
}
);
mOptionsDialog=builder.create();
Window window=mOptionsDialog.getWindow();
WindowManager.LayoutParams lp=window.getAttributes();
lp.token=mInputView.getWindowToken();
lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;
window.setAttributes(lp);
window.addFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
mOptionsDialog.show();
}","private void launchDictioanryOverriding(){
  AnyKeyboard currentKeyboard=mKeyboardSwitcher.getCurrentKeyboard();
  final String dictionaryOverridingKey=getDictionaryOverrideKey(currentKeyboard);
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setCancelable(true);
  builder.setIcon(R.drawable.icon_8_key);
  builder.setTitle(getResources().getString(R.string.override_dictionary_title,currentKeyboard.getKeyboardName()));
  builder.setNegativeButton(android.R.string.cancel,null);
  ArrayList<CharSequence> dictioanries=new ArrayList<CharSequence>();
  dictioanries.add(getString(R.string.override_dictionary_default));
  for (  DictionaryBuilder dictionaryBuilder : ExternalDictionaryFactory.getAllCreators(this)) {
    dictioanries.add(dictionaryBuilder.getDictionaryName());
  }
  final CharSequence[] items=new CharSequence[dictioanries.size()];
  dictioanries.toArray(items);
  builder.setItems(items,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface di,    int position){
      di.dismiss();
      Editor editor=getSharedPreferences().edit();
switch (position) {
case 0:
        Log.d(""String_Node_Str"",""String_Node_Str"");
      editor.remove(dictionaryOverridingKey);
    showToastMessage(R.string.override_disabled,true);
  break;
default :
if ((position < 0) || (position >= items.length)) {
  Log.d(""String_Node_Str"",""String_Node_Str"");
}
 else {
  String selectedLanguageString=items[position].toString();
  Log.d(""String_Node_Str"",""String_Node_Str"" + selectedLanguageString);
  editor.putString(dictionaryOverridingKey,selectedLanguageString);
  showToastMessage(getString(R.string.override_enabled,selectedLanguageString),true);
}
break;
}
editor.commit();
setMainDictionaryForCurrentKeyboard();
}
}
);
mOptionsDialog=builder.create();
Window window=mOptionsDialog.getWindow();
WindowManager.LayoutParams lp=window.getAttributes();
lp.token=mInputView.getWindowToken();
lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;
window.setAttributes(lp);
window.addFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
mOptionsDialog.show();
}",0.9911339244050396
157581,"public synchronized static Dictionary getDictionary(final String language,AnyKeyboardContextProvider context){
  if (msDictionaries.containsKey(language)) {
    return msDictionaries.get(language);
  }
  Dictionary dict=null;
  try {
    ArrayList<DictionaryBuilder> allBuilders=ExternalDictionaryFactory.getAllCreators(context.getApplicationContext());
    if ((language == null) || (language.length() == 0 || (""String_Node_Str"".equalsIgnoreCase(language))))     return null;
    for (    DictionaryBuilder builder : allBuilders) {
      if (AnySoftKeyboardConfiguration.getInstance().getDEBUG())       Log.d(""String_Node_Str"",""String_Node_Str"" + builder.getDictionaryKey() + ""String_Node_Str""+ language+ ""String_Node_Str"");
      if (builder.getDictionaryKey().equalsIgnoreCase(language)) {
        dict=builder.createDictionary(context);
        break;
      }
    }
    if (dict == null) {
      Log.w(""String_Node_Str"",""String_Node_Str"" + language);
    }
 else {
      final Dictionary dictToLoad=dict;
      final Thread loader=new Thread(){
        @Override public void run(){
          try {
            dictToLoad.loadDictionary();
          }
 catch (          final Exception e) {
            Log.e(""String_Node_Str"",""String_Node_Str"" + language + ""String_Node_Str""+ e.getMessage());
            e.printStackTrace();
            removeDictionary(language);
          }
        }
      }
;
      loader.setPriority(Thread.NORM_PRIORITY - 1);
      loader.start();
      msDictionaries.put(language,dict);
    }
  }
 catch (  final Exception ex) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + language);
    ex.printStackTrace();
  }
  return dict;
}","public synchronized static Dictionary getDictionary(final String language,AnyKeyboardContextProvider context){
  if (msDictionaries.containsKey(language)) {
    return msDictionaries.get(language);
  }
  Dictionary dict=null;
  try {
    ArrayList<DictionaryBuilder> allBuilders=ExternalDictionaryFactory.getAllCreators(context.getApplicationContext());
    if ((language == null) || (language.length() == 0 || (""String_Node_Str"".equalsIgnoreCase(language))))     return null;
    for (    DictionaryBuilder builder : allBuilders) {
      if (AnySoftKeyboardConfiguration.getInstance().getDEBUG())       Log.d(""String_Node_Str"",""String_Node_Str"" + builder.getDictionaryKey() + ""String_Node_Str""+ language+ ""String_Node_Str"");
      if (builder.getDictionaryKey().equalsIgnoreCase(language)) {
        dict=builder.createDictionary();
        break;
      }
    }
    if (dict == null) {
      Log.w(""String_Node_Str"",""String_Node_Str"" + language);
    }
 else {
      final Dictionary dictToLoad=dict;
      final Thread loader=new Thread(){
        @Override public void run(){
          try {
            dictToLoad.loadDictionary();
          }
 catch (          final Exception e) {
            Log.e(""String_Node_Str"",""String_Node_Str"" + language + ""String_Node_Str""+ e.getMessage());
            e.printStackTrace();
            removeDictionary(language);
          }
        }
      }
;
      loader.setPriority(Thread.NORM_PRIORITY - 1);
      loader.start();
      msDictionaries.put(language,dict);
    }
  }
 catch (  final Exception ex) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + language);
    ex.printStackTrace();
  }
  return dict;
}",0.9978922011442336
157582,"public Dictionary createDictionary(AnyKeyboardContextProvider context) throws Exception {
  return new BinaryDictionary(context.getApplicationContext().getAssets().openFd(mAssetsFilename));
}","public Dictionary createDictionary() throws Exception {
  return new BinaryDictionary(mPackageContext.getAssets().openFd(mAssetsFilename));
}",0.8192771084337349
157583,"public BinaryDictionaryBuilderImpl(Context context,String key,int nameId,String assetsFilename,String description){
  mKey=key;
  mNameId=nameId;
  mDescription=description;
  mAssetsFilename=assetsFilename;
  Log.d(""String_Node_Str"",""String_Node_Str"" + mKey + ""String_Node_Str""+ mAssetsFilename);
}","public BinaryDictionaryBuilderImpl(Context context,String key,int nameId,String assetsFilename,String description){
  mKey=key;
  mNameId=nameId;
  mDescription=description;
  mAssetsFilename=assetsFilename;
  mPackageContext=context;
  Log.d(""String_Node_Str"",""String_Node_Str"" + mKey + ""String_Node_Str""+ mAssetsFilename+ ""String_Node_Str""+ mPackageContext.getPackageName());
}",0.8820058997050148
157584,"private void initializeStuff(){
  setPreviewEnabled(AnySoftKeyboardConfigurationImpl.getInstance().getShowKeyPreview());
  setProximityCorrectionEnabled(true);
}","private void initializeStuff(){
  setPreviewEnabled(AnySoftKeyboardConfiguration.getInstance().getShowKeyPreview());
  setProximityCorrectionEnabled(true);
}",0.9874213836477987
157585,"private boolean loadSettings(){
  PreferenceManager.setDefaultValues(this,R.xml.prefs,false);
  boolean handled=false;
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  int newVibrationDuration=Integer.parseInt(sp.getString(""String_Node_Str"",""String_Node_Str""));
  handled=handled || (newVibrationDuration != mVibrationDuration);
  mVibrationDuration=newVibrationDuration;
  boolean newSoundOn=sp.getBoolean(""String_Node_Str"",false);
  boolean soundChanged=(newSoundOn != mSoundOn);
  if (soundChanged) {
    if (newSoundOn) {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      mAudioManager.loadSoundEffects();
    }
 else {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      mAudioManager.unloadSoundEffects();
    }
  }
  handled=handled || soundChanged;
  mSoundOn=newSoundOn;
  boolean customVolume=sp.getBoolean(""String_Node_Str"",true);
  float newVolume;
  if (customVolume) {
    newVolume=(float)((float)((float)sp.getInt(""String_Node_Str"",0)) / 12.5);
    Log.i(""String_Node_Str"",""String_Node_Str"" + newVolume);
  }
 else {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    newVolume=-1;
  }
  handled=handled || (newVolume != mSoundVolume);
  mSoundVolume=newVolume;
  String newKeyboardChangeNotificationType=sp.getString(""String_Node_Str"",KEYBOARD_NOTIFICATION_ON_PHYSICAL);
  boolean notificationChanged=(!newKeyboardChangeNotificationType.equalsIgnoreCase(mKeyboardChangeNotificationType));
  handled=handled || notificationChanged;
  mKeyboardChangeNotificationType=newKeyboardChangeNotificationType;
  if (notificationChanged) {
    NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
    notificationManager.cancel(KEYBOARD_NOTIFICATION_ID);
    if (mKeyboardChangeNotificationType.equals(KEYBOARD_NOTIFICATION_ALWAYS))     notifyKeyboardChangeIfNeeded();
  }
  boolean newAutoCap=sp.getBoolean(""String_Node_Str"",true);
  handled=handled || (newAutoCap != mAutoCap);
  mAutoCap=newAutoCap;
  boolean newShowSuggestions=sp.getBoolean(""String_Node_Str"",true);
  boolean suggestionsChanged=(newShowSuggestions != mShowSuggestions);
  handled=handled || suggestionsChanged;
  mShowSuggestions=newShowSuggestions;
  if (suggestionsChanged || (!mShowSuggestions))   setMainDictionaryForCurrentKeyboard();
  boolean newAutoComplete=sp.getBoolean(""String_Node_Str"",true) && mShowSuggestions;
  handled=handled || (newAutoComplete != mAutoComplete);
  mAutoComplete=newAutoComplete;
  boolean newQuickFixes=sp.getBoolean(""String_Node_Str"",true);
  handled=handled || (newQuickFixes != mQuickFixes);
  mQuickFixes=newQuickFixes;
  mAutoCorrectOn=(mAutoComplete || mQuickFixes);
  mCorrectionMode=mAutoComplete ? 2 : (mShowSuggestions ? 1 : 0);
  boolean newUseKeyRepeat=sp.getBoolean(""String_Node_Str"",true);
  handled=handled || (newUseKeyRepeat != mUseKeyRepeat);
  mUseKeyRepeat=newUseKeyRepeat;
  Log.v(""String_Node_Str"",""String_Node_Str"" + mUseKeyRepeat);
  boolean newSwitchKeyboardOnSpace=sp.getBoolean(""String_Node_Str"",false);
  handled=handled || (newSwitchKeyboardOnSpace != mSwitchKeyboardOnSpace);
  mSwitchKeyboardOnSpace=newSwitchKeyboardOnSpace;
  boolean newSmileyOnShort=sp.getBoolean(""String_Node_Str"",false);
  handled=handled || (newSmileyOnShort != mSmileyOnShortPress);
  mSmileyOnShortPress=newSmileyOnShort;
  handled=handled || mConfig.handleConfigurationChange(sp);
  if (mInputView != null)   mInputView.setPreviewEnabled(mConfig.getShowKeyPreview());
  return handled;
}","private boolean loadSettings(){
  PreferenceManager.setDefaultValues(this,R.xml.prefs,false);
  boolean handled=false;
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  int newVibrationDuration=Integer.parseInt(sp.getString(""String_Node_Str"",""String_Node_Str""));
  handled=handled || (newVibrationDuration != mVibrationDuration);
  mVibrationDuration=newVibrationDuration;
  boolean newSoundOn=sp.getBoolean(""String_Node_Str"",false);
  boolean soundChanged=(newSoundOn != mSoundOn);
  if (soundChanged) {
    if (newSoundOn) {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      mAudioManager.loadSoundEffects();
    }
 else {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      mAudioManager.unloadSoundEffects();
    }
  }
  handled=handled || soundChanged;
  mSoundOn=newSoundOn;
  boolean customVolume=sp.getBoolean(""String_Node_Str"",true);
  float newVolume;
  if (customVolume) {
    newVolume=(float)((float)((float)sp.getInt(""String_Node_Str"",0)) / 12.5);
    Log.i(""String_Node_Str"",""String_Node_Str"" + newVolume);
  }
 else {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    newVolume=-1;
  }
  handled=handled || (newVolume != mSoundVolume);
  mSoundVolume=newVolume;
  String newKeyboardChangeNotificationType=sp.getString(""String_Node_Str"",KEYBOARD_NOTIFICATION_ON_PHYSICAL);
  boolean notificationChanged=(!newKeyboardChangeNotificationType.equalsIgnoreCase(mKeyboardChangeNotificationType));
  handled=handled || notificationChanged;
  mKeyboardChangeNotificationType=newKeyboardChangeNotificationType;
  if (notificationChanged) {
    NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
    notificationManager.cancel(KEYBOARD_NOTIFICATION_ID);
    if (mKeyboardChangeNotificationType.equals(KEYBOARD_NOTIFICATION_ALWAYS))     notifyKeyboardChangeIfNeeded();
  }
  boolean newAutoCap=sp.getBoolean(""String_Node_Str"",true);
  handled=handled || (newAutoCap != mAutoCap);
  mAutoCap=newAutoCap;
  boolean newShowSuggestions=sp.getBoolean(""String_Node_Str"",true);
  boolean suggestionsChanged=(newShowSuggestions != mShowSuggestions);
  handled=handled || suggestionsChanged;
  mShowSuggestions=newShowSuggestions;
  if (suggestionsChanged || (!mShowSuggestions))   setMainDictionaryForCurrentKeyboard();
  boolean newAutoComplete=sp.getBoolean(""String_Node_Str"",true) && mShowSuggestions;
  handled=handled || (newAutoComplete != mAutoComplete);
  mAutoComplete=newAutoComplete;
  boolean newQuickFixes=sp.getBoolean(""String_Node_Str"",true);
  handled=handled || (newQuickFixes != mQuickFixes);
  mQuickFixes=newQuickFixes;
  mAutoCorrectOn=(mAutoComplete || mQuickFixes);
  mCorrectionMode=mAutoComplete ? 2 : (mShowSuggestions ? 1 : 0);
  boolean newSwitchKeyboardOnSpace=sp.getBoolean(""String_Node_Str"",false);
  handled=handled || (newSwitchKeyboardOnSpace != mSwitchKeyboardOnSpace);
  mSwitchKeyboardOnSpace=newSwitchKeyboardOnSpace;
  boolean newSmileyOnShort=sp.getBoolean(""String_Node_Str"",false);
  handled=handled || (newSmileyOnShort != mSmileyOnShortPress);
  mSmileyOnShortPress=newSmileyOnShort;
  handled=handled | ((AnySoftKeyboardConfiguration.AnySoftKeyboardConfigurationImpl)mConfig).handleConfigurationChange(sp);
  if (mInputView != null)   mInputView.setPreviewEnabled(mConfig.getShowKeyPreview());
  return handled;
}",0.8954048140043763
157586,"@Override public boolean onEvaluateFullscreenMode(){
  if (AnySoftKeyboardConfigurationImpl.getInstance().getUseFullScreenInput())   return super.onEvaluateFullscreenMode();
 else   return false;
}","@Override public boolean onEvaluateFullscreenMode(){
  if (AnySoftKeyboardConfiguration.getInstance().getUseFullScreenInput())   return super.onEvaluateFullscreenMode();
 else   return false;
}",0.9897435897435898
157587,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  InputConnection ic=getCurrentInputConnection();
  if (!mPredictionLandscape) {
    commitTyped(ic);
    mPredicting=false;
  }
  if (DEBUG)   Log.d(""String_Node_Str"",""String_Node_Str"" + event.getKeyCode() + ""String_Node_Str""+ ((event.getMetaState() & KeyEvent.META_SHIFT_ON) != 0)+ ""String_Node_Str""+ ((event.getMetaState() & KeyEvent.META_ALT_ON) != 0)+ ""String_Node_Str""+ event.getRepeatCount());
switch (keyCode) {
case KeyEvent.KEYCODE_BACK:
    if (event.getRepeatCount() == 0 && mInputView != null) {
      if (mInputView.handleBack()) {
        if (ic != null) {
          ic.clearMetaKeyStates(Integer.MAX_VALUE);
        }
        mMetaState=0;
        return true;
      }
    }
  break;
case KeyEvent.KEYCODE_ALT_LEFT:
case KeyEvent.KEYCODE_ALT_RIGHT:
case KeyEvent.KEYCODE_SHIFT_LEFT:
case KeyEvent.KEYCODE_SHIFT_RIGHT:
case KeyEvent.KEYCODE_SYM:
if (DEBUG) Log.d(""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
mMetaState=MyMetaKeyKeyListener.handleKeyDown(mMetaState,keyCode,event);
if (DEBUG) Log.d(""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
break;
case KeyEvent.KEYCODE_SPACE:
if (event.isAltPressed()) {
Log.d(""String_Node_Str"",""String_Node_Str"");
if (ic != null) {
ic.clearMetaKeyStates(Integer.MAX_VALUE);
}
mMetaState=0;
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AlphabetSupportsPhysical);
return true;
}
default :
if (!mUseKeyRepeat && event.getRepeatCount() > 0) return true;
if (mKeyboardSwitcher.isCurrentKeyboardPhysical()) {
if (ic != null) ic.beginBatchEdit();
try {
if (event.isPrintingKey()) {
mHardKeyboardAction.initializeAction(event,mMetaState);
AnyKeyboard current=mKeyboardSwitcher.getCurrentKeyboard();
String keyboardName=current.getKeyboardName();
HardKeyboardTranslator keyTranslator=(HardKeyboardTranslator)current;
if (DEBUG) Log.d(""String_Node_Str"",""String_Node_Str"" + keyboardName + ""String_Node_Str""+ keyCode);
if (DEBUG) Log.v(""String_Node_Str"",""String_Node_Str"" + mHardKeyboardAction.isShiftActive() + ""String_Node_Str""+ mHardKeyboardAction.isAltActive()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCode()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCodeWasChanged());
keyTranslator.translatePhysicalCharacter(mHardKeyboardAction);
if (DEBUG) Log.v(""String_Node_Str"",""String_Node_Str"" + mHardKeyboardAction.getKeyCode() + ""String_Node_Str""+ mHardKeyboardAction.getKeyCodeWasChanged());
if (mHardKeyboardAction.getKeyCodeWasChanged()) {
final int translatedChar=mHardKeyboardAction.getKeyCode();
onKey(translatedChar,new int[]{translatedChar});
mMetaState=MyMetaKeyKeyListener.adjustMetaAfterKeypress(mMetaState);
if (DEBUG) Log.d(""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
return true;
}
}
}
  finally {
if (ic != null) ic.endBatchEdit();
}
}
if (event.isPrintingKey()) {
mMetaState=MyMetaKeyKeyListener.adjustMetaAfterKeypress(mMetaState);
if (DEBUG) Log.d(""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
}
}
return super.onKeyDown(keyCode,event);
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  InputConnection ic=getCurrentInputConnection();
  if (!mPredictionLandscape) {
    commitTyped(ic);
    mPredicting=false;
  }
  if (DEBUG)   Log.d(""String_Node_Str"",""String_Node_Str"" + event.getKeyCode() + ""String_Node_Str""+ ((event.getMetaState() & KeyEvent.META_SHIFT_ON) != 0)+ ""String_Node_Str""+ ((event.getMetaState() & KeyEvent.META_ALT_ON) != 0)+ ""String_Node_Str""+ event.getRepeatCount());
switch (keyCode) {
case KeyEvent.KEYCODE_BACK:
    if (event.getRepeatCount() == 0 && mInputView != null) {
      if (mInputView.handleBack()) {
        if (ic != null) {
          ic.clearMetaKeyStates(Integer.MAX_VALUE);
        }
        mMetaState=0;
        return true;
      }
    }
  break;
case KeyEvent.KEYCODE_ALT_LEFT:
case KeyEvent.KEYCODE_ALT_RIGHT:
case KeyEvent.KEYCODE_SHIFT_LEFT:
case KeyEvent.KEYCODE_SHIFT_RIGHT:
case KeyEvent.KEYCODE_SYM:
if (DEBUG) Log.d(""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
mMetaState=MyMetaKeyKeyListener.handleKeyDown(mMetaState,keyCode,event);
if (DEBUG) Log.d(""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
break;
case KeyEvent.KEYCODE_SPACE:
if (event.isAltPressed()) {
Log.d(""String_Node_Str"",""String_Node_Str"");
if (ic != null) {
ic.clearMetaKeyStates(Integer.MAX_VALUE);
}
mMetaState=0;
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AlphabetSupportsPhysical);
return true;
}
default :
if (!AnySoftKeyboardConfiguration.getInstance().getUseRepeatingKeys() && event.getRepeatCount() > 0) return true;
if (mKeyboardSwitcher.isCurrentKeyboardPhysical()) {
if (ic != null) ic.beginBatchEdit();
try {
if (event.isPrintingKey()) {
mHardKeyboardAction.initializeAction(event,mMetaState);
AnyKeyboard current=mKeyboardSwitcher.getCurrentKeyboard();
String keyboardName=current.getKeyboardName();
HardKeyboardTranslator keyTranslator=(HardKeyboardTranslator)current;
if (DEBUG) Log.d(""String_Node_Str"",""String_Node_Str"" + keyboardName + ""String_Node_Str""+ keyCode);
if (DEBUG) Log.v(""String_Node_Str"",""String_Node_Str"" + mHardKeyboardAction.isShiftActive() + ""String_Node_Str""+ mHardKeyboardAction.isAltActive()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCode()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCodeWasChanged());
keyTranslator.translatePhysicalCharacter(mHardKeyboardAction);
if (DEBUG) Log.v(""String_Node_Str"",""String_Node_Str"" + mHardKeyboardAction.getKeyCode() + ""String_Node_Str""+ mHardKeyboardAction.getKeyCodeWasChanged());
if (mHardKeyboardAction.getKeyCodeWasChanged()) {
final int translatedChar=mHardKeyboardAction.getKeyCode();
onKey(translatedChar,new int[]{translatedChar});
mMetaState=MyMetaKeyKeyListener.adjustMetaAfterKeypress(mMetaState);
if (DEBUG) Log.d(""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
return true;
}
}
}
  finally {
if (ic != null) ic.endBatchEdit();
}
}
if (event.isPrintingKey()) {
mMetaState=MyMetaKeyKeyListener.adjustMetaAfterKeypress(mMetaState);
if (DEBUG) Log.d(""String_Node_Str"",getMetaKeysStates(""String_Node_Str""));
}
}
return super.onKeyDown(keyCode,event);
}",0.9903389552972
157588,"public AnySoftKeyboard(){
  mConfig=(AnySoftKeyboardConfigurationImpl)AnySoftKeyboardConfigurationImpl.getInstance();
  mHardKeyboardAction=new HardKeyboardActionImpl();
}","public AnySoftKeyboard(){
  mConfig=AnySoftKeyboardConfiguration.getInstance();
  mHardKeyboardAction=new HardKeyboardActionImpl();
}",0.875
157589,"@Override public void onCreate(){
  super.onCreate();
  Log.i(""String_Node_Str"",""String_Node_Str"");
  ((AnySoftKeyboardConfigurationImpl)mConfig).initializeConfiguration(this);
  DEBUG=mConfig.getDEBUG();
  mNotificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  loadSettings();
  mKeyboardSwitcher=new KeyboardSwitcher(this);
  if (mSuggest == null) {
    if (mKeyboardChangeNotificationType.equals(KEYBOARD_NOTIFICATION_ALWAYS))     notifyKeyboardChangeIfNeeded();
    initSuggest();
  }
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  sp.registerOnSharedPreferenceChangeListener(this);
}","@Override public void onCreate(){
  super.onCreate();
  Log.i(""String_Node_Str"",""String_Node_Str"");
  ((AnySoftKeyboardConfiguration.AnySoftKeyboardConfigurationImpl)mConfig).initializeConfiguration(this);
  DEBUG=mConfig.getDEBUG();
  mNotificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  loadSettings();
  mKeyboardSwitcher=new KeyboardSwitcher(this);
  if (mSuggest == null) {
    if (mKeyboardChangeNotificationType.equals(KEYBOARD_NOTIFICATION_ALWAYS))     notifyKeyboardChangeIfNeeded();
    initSuggest();
  }
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  sp.registerOnSharedPreferenceChangeListener(this);
}",0.980445043830074
157590,boolean getShowKeyPreview();,"public boolean getShowKeyPreview(){
  return mShowKeyPreview;
}",0.6153846153846154
157591,boolean getDEBUG();,"public boolean getDEBUG(){
  return mDEBUG;
}",0.59375
157592,String getChangeLayoutKeysSize();,"public String getChangeLayoutKeysSize(){
  return mLayoutChangeKeysSize;
}",0.616822429906542
157593,boolean getUseFullScreenInput();,"public boolean getUseFullScreenInput(){
  return mUseFullScreenInput;
}",0.6213592233009708
157594,String getDomainText();,"public String getDomainText(){
  return mDomainText;
}",0.5974025974025974
157595,String getSmileyText();,"public String getSmileyText(){
  return mSmileyText;
}",0.5974025974025974
157596,boolean getSwitchKeyboardOnSpace();,"public boolean getSwitchKeyboardOnSpace(){
  return mSwitchKeyboardOnSpace;
}",0.625
157597,"public static KeyboardCreator[] createAlphaBetKeyboards(AnyKeyboardContextProvider contextProvider){
  Log.i(""String_Node_Str"",""String_Node_Str"" + ms_creators.size() + ""String_Node_Str"");
  ArrayList<KeyboardCreator> keyboards=new ArrayList<KeyboardCreator>();
  SharedPreferences sharedPreferences=contextProvider.getSharedPreferences();
  for (int keyboardIndex=0; keyboardIndex < ms_creators.size(); keyboardIndex++) {
    KeyboardCreator creator=ms_creators.get(keyboardIndex);
    boolean keyboardIsEnabled=sharedPreferences.getBoolean(creator.getKeyboardPrefId(),keyboardIndex == 0);
    if (keyboardIsEnabled) {
      keyboards.add(creator);
    }
  }
  for (  KeyboardCreator aKeyboard : keyboards)   Log.d(""String_Node_Str"",""String_Node_Str"" + aKeyboard.getKeyboardPrefId());
  keyboards.trimToSize();
  KeyboardCreator[] keyboardsArray=new KeyboardCreator[keyboards.size()];
  return keyboards.toArray(keyboardsArray);
}","public static KeyboardCreator[] createAlphaBetKeyboards(AnyKeyboardContextProvider contextProvider){
  Log.i(""String_Node_Str"",""String_Node_Str"" + ms_creators.size() + ""String_Node_Str"");
  ArrayList<KeyboardCreator> keyboards=new ArrayList<KeyboardCreator>();
  SharedPreferences sharedPreferences=contextProvider.getSharedPreferences();
  for (int keyboardIndex=0; keyboardIndex < ms_creators.size(); keyboardIndex++) {
    KeyboardCreator creator=ms_creators.get(keyboardIndex);
    boolean keyboardIsEnabled=sharedPreferences.getBoolean(creator.getKeyboardPrefId(),keyboardIndex == 0);
    if (keyboardIsEnabled) {
      keyboards.add(creator);
    }
  }
  if (keyboards.size() == 0) {
    SharedPreferences.Editor editor=sharedPreferences.edit();
    KeyboardCreator creator=ms_creators.get(0);
    editor.putBoolean(creator.getKeyboardPrefId(),true);
    editor.commit();
    keyboards.add(creator);
  }
  for (  KeyboardCreator aKeyboard : keyboards)   Log.d(""String_Node_Str"",""String_Node_Str"" + aKeyboard.getKeyboardPrefId());
  keyboards.trimToSize();
  KeyboardCreator[] keyboardsArray=new KeyboardCreator[keyboards.size()];
  return keyboards.toArray(keyboardsArray);
}",0.8810990052108005
157598,"public void onKey(int primaryCode,int[] keyCodes){
  if (DEBUG)   Log.d(""String_Node_Str"",""String_Node_Str"" + primaryCode);
switch (primaryCode) {
case Keyboard.KEYCODE_DELETE:
    handleBackspace();
  break;
case Keyboard.KEYCODE_SHIFT:
handleShift();
break;
case Keyboard.KEYCODE_CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case AnyKeyboardView.KEYCODE_OPTIONS:
showOptionsMenu();
break;
case AnyKeyboard.KEYCODE_SMILEY:
if (mSmileyOnShortPress) {
onText(mConfig.getSmileyText());
}
 else {
if (mInputView != null) mInputView.simulateLongPress(AnyKeyboard.KEYCODE_SMILEY);
}
break;
case AnyKeyboardView.KEYCODE_SMILEY_LONGPRESS:
if (mSmileyOnShortPress) {
if (mInputView != null) mInputView.simulateLongPress(AnyKeyboard.KEYCODE_SMILEY);
}
 else {
onText(mConfig.getSmileyText());
}
break;
case Keyboard.KEYCODE_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case AnyKeyboard.KEYCODE_LANG_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
case KEYCODE_SPACE:
if (DEBUG) Log.d(""String_Node_Str"",""String_Node_Str"" + mSwitchKeyboardOnSpace);
if (mSwitchKeyboardOnSpace && !mKeyboardSwitcher.isAlphabetMode()) nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
default :
primaryCode=translatePrimaryCodeFromCurrentKeyboard(primaryCode);
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
}
 else {
handleCharacter(primaryCode,keyCodes);
mSpaceSent=false;
}
mJustRevertedSeparator=null;
}
}","public void onKey(int primaryCode,int[] keyCodes){
  if (DEBUG)   Log.d(""String_Node_Str"",""String_Node_Str"" + primaryCode);
switch (primaryCode) {
case Keyboard.KEYCODE_DELETE:
    handleBackspace();
  break;
case Keyboard.KEYCODE_SHIFT:
handleShift();
break;
case Keyboard.KEYCODE_CANCEL:
if (mOptionsDialog == null || !mOptionsDialog.isShowing()) {
handleClose();
}
break;
case AnyKeyboardView.KEYCODE_OPTIONS:
showOptionsMenu();
break;
case AnyKeyboard.KEYCODE_SMILEY:
if (mSmileyOnShortPress) {
onText(mConfig.getSmileyText());
}
 else {
if (mInputView != null) mInputView.simulateLongPress(AnyKeyboard.KEYCODE_SMILEY);
}
break;
case AnyKeyboardView.KEYCODE_SMILEY_LONGPRESS:
if (mSmileyOnShortPress) {
if (mInputView != null) mInputView.simulateLongPress(AnyKeyboard.KEYCODE_SMILEY);
}
 else {
onText(mConfig.getSmileyText());
}
break;
case Keyboard.KEYCODE_MODE_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Symbols);
break;
case AnyKeyboard.KEYCODE_LANG_CHANGE:
nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
break;
default :
primaryCode=translatePrimaryCodeFromCurrentKeyboard(primaryCode);
if (isWordSeparator(primaryCode)) {
handleSeparator(primaryCode);
if (primaryCode == KEYCODE_SPACE) {
if (DEBUG) Log.d(""String_Node_Str"",""String_Node_Str"" + mSwitchKeyboardOnSpace);
if (mSwitchKeyboardOnSpace && !mKeyboardSwitcher.isAlphabetMode()) {
AnyKeyboard currentKeyboard=mKeyboardSwitcher.getCurrentKeyboard();
currentKeyboard=mKeyboardSwitcher.nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.Alphabet);
}
}
}
 else {
handleCharacter(primaryCode,keyCodes);
mSpaceSent=false;
}
mJustRevertedSeparator=null;
}
}",0.8704856787048568
157599,"void setKeyboardMode(int mode,EditorInfo attr){
  mImeOptions=(attr == null) ? 0 : attr.imeOptions;
  AnyKeyboard keyboard=(AnyKeyboard)mInputView.getKeyboard();
  mInputView.setPreviewEnabled(true);
switch (mode) {
case MODE_TEXT:
case MODE_URL:
case MODE_EMAIL:
case MODE_IM:
    keyboard=getAlphabetKeyboard(mLastSelectedKeyboard);
  if (keyboard == null)   mAlphabetMode=true;
break;
case MODE_SYMBOLS:
case MODE_PHONE:
keyboard=(mode == MODE_PHONE) ? getSymbolsKeyboard(SYMBOLS_KEYBOARD_PHONE_INDEX) : getSymbolsKeyboard(0);
mAlphabetMode=true;
break;
}
if (mInputView != null) mInputView.setKeyboard(keyboard);
keyboard.setShifted(mInputView.isShifted());
keyboard.setShiftLocked(keyboard.isShiftLocked());
keyboard.setImeOptions(mContext.getResources(),(attr == null) ? 0 : attr.imeOptions);
keyboard.setTextVariation(mContext.getResources(),(attr == null) ? 0 : attr.inputType);
}","void setKeyboardMode(int mode,EditorInfo attr){
  mImeOptions=(attr == null) ? 0 : attr.imeOptions;
  AnyKeyboard keyboard=null;
  mInputView.setPreviewEnabled(true);
switch (mode) {
case MODE_SYMBOLS:
case MODE_PHONE:
    keyboard=(mode == MODE_PHONE) ? getSymbolsKeyboard(SYMBOLS_KEYBOARD_PHONE_INDEX) : getSymbolsKeyboard(0);
  mAlphabetMode=false;
break;
default :
keyboard=getAlphabetKeyboard(mLastSelectedKeyboard);
mAlphabetMode=true;
break;
}
if (mInputView != null) mInputView.setKeyboard(keyboard);
keyboard.setShifted(mInputView.isShifted());
keyboard.setShiftLocked(keyboard.isShiftLocked());
keyboard.setImeOptions(mContext.getResources(),(attr == null) ? 0 : attr.imeOptions);
keyboard.setTextVariation(mContext.getResources(),(attr == null) ? 0 : attr.inputType);
}",0.8141486810551559
157600,"public char getSequenceCharacter(int currentKeyEvent,AnyKeyboardContextProvider inputHandler){
  long currentTime=System.currentTimeMillis();
  if ((currentTime - mLastTypedKeyEventTime) >= msSequenceLivingTime)   mCurrentTypedSequence.reset();
  mLastTypedKeyEventTime=currentTime;
  mCurrentTypedSequence.appendKeyEvent(currentKeyEvent);
  if (mSequences.containsKey(mCurrentTypedSequence)) {
    KeyEventSequence mappedSequence=mSequences.get(mCurrentTypedSequence);
    char mappedChar=mappedSequence.getTarget();
    if (mappedChar == 0)     return 0;
 else {
      inputHandler.deleteLastCharactersFromInput(mappedSequence.getSequenceLength() - 1);
      return mappedChar;
    }
  }
 else {
    int lastSequenceLength=mCurrentTypedSequence.getSequenceLength();
    mCurrentTypedSequence.reset();
    if (lastSequenceLength > 1) {
      return getSequenceCharacter(currentKeyEvent,inputHandler);
    }
    return 0;
  }
}","public char getSequenceCharacter(int currentKeyEvent,AnyKeyboardContextProvider inputHandler){
  long currentTime=System.currentTimeMillis();
  if ((currentTime - mLastTypedKeyEventTime) >= msSequenceLivingTime)   mCurrentTypedSequence.reset();
  mLastTypedKeyEventTime=currentTime;
  mCurrentTypedSequence.appendKeyEvent(currentKeyEvent);
  if (mSequences.containsKey(mCurrentTypedSequence)) {
    KeyEventSequence mappedSequence=mSequences.get(mCurrentTypedSequence);
    char mappedChar=mappedSequence.getTarget();
    if (mappedChar == 0)     return 0;
 else {
      final int charactersToDelete=mappedSequence.getSequenceLength() - 1;
      inputHandler.deleteLastCharactersFromInput(charactersToDelete - mCurrentTypedSequence.getDeletedCharactersCountTillNow());
      mCurrentTypedSequence.setDeletedCharactersCountAtInput(charactersToDelete);
      return mappedChar;
    }
  }
 else {
    int lastSequenceLength=mCurrentTypedSequence.getSequenceLength();
    mCurrentTypedSequence.reset();
    if (lastSequenceLength > 1) {
      return getSequenceCharacter(currentKeyEvent,inputHandler);
    }
    return 0;
  }
}",0.8819512195121951
157601,"public void reset(){
  mCurrentSequenceLength=0;
  mHashCode=0;
}","public void reset(){
  mCurrentSequenceLength=0;
  mHashCode=0;
  mDeletedCharactersTillNow=0;
}",0.8074534161490683
157602,"public void addSequence(int[] sequence,char result){
  for (int sequenceLength=1; sequenceLength < sequence.length; sequenceLength++) {
    int[] subSequence=new int[sequenceLength];
    for (int i=0; i < sequenceLength; i++)     subSequence[i]=sequence[i];
    KeyEventSequence keysSequence=new KeyEventSequence(subSequence,(char)0);
    if (!mSequences.containsKey(keysSequence))     mSequences.put(keysSequence,keysSequence);
  }
  KeyEventSequence actualSequence=new KeyEventSequence(sequence,result);
  mSequences.put(actualSequence,actualSequence);
}","public void addSequence(int[] sequence,char result){
  for (int sequenceLength=1; sequenceLength < sequence.length; sequenceLength++) {
    int[] subSequence=new int[sequenceLength];
    for (int i=0; i < sequenceLength; i++)     subSequence[i]=sequence[i];
    KeyEventSequence keysSequence=new KeyEventSequence(subSequence,(char)0);
    if (!mSequences.containsKey(keysSequence))     mSequences.put(keysSequence,keysSequence);
  }
  KeyEventSequence actualSequence=new KeyEventSequence(sequence,result);
  if (mSequences.containsKey(actualSequence)) {
    mSequences.remove(actualSequence);
  }
  mSequences.put(actualSequence,actualSequence);
}",0.9243557772236076
157603,"public EnglishKeyboard(AnyKeyboardContextProvider context,int keyboardLayoutId,int keyboardNameId){
  super(context,keyboardLayoutId,keyboardNameId,Dictionary.Language.English);
}","public EnglishKeyboard(AnyKeyboardContextProvider context){
  super(context,KeyboardFactory.ENGLISH_KEYBOARD,R.xml.qwerty,R.string.eng_keyboard,Dictionary.Language.English);
}",0.655367231638418
157604,"public AnyKeyboard createKeyboard(AnyKeyboardContextProvider contextProvider){
  return new LatinKeyboard(contextProvider,R.xml.de_qwerty,R.string.de_keyboard,Dictionary.Language.German);
}","public AnyKeyboard createKeyboard(AnyKeyboardContextProvider contextProvider){
  return new LatinKeyboard(contextProvider,KeyboardFactory.DE_KEYBOARD,R.xml.de_qwerty,R.string.de_keyboard,Dictionary.Language.German);
}",0.9310344827586208
157605,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  InputConnection ic=getCurrentInputConnection();
  if (mCompletionOn)   commitTyped(ic);
  mCompletionOn=false;
  if (DEBUG)   Log.d(""String_Node_Str"",""String_Node_Str"" + event.getKeyCode() + ""String_Node_Str""+ ((event.getMetaState() & KeyEvent.META_SHIFT_ON) != 0)+ ""String_Node_Str""+ ((event.getMetaState() & KeyEvent.META_ALT_ON) != 0)+ ""String_Node_Str""+ event.getRepeatCount());
  boolean handledByAction=mHardKeyboardAction.initializeAction(event);
  if (!handledByAction) {
switch (keyCode) {
case KeyEvent.KEYCODE_SPACE:
      if (mHardKeyboardAction.isAltActive()) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        mHardKeyboardAction.resetMetaState();
        if (ic != null)         ic.clearMetaKeyStates(Integer.MAX_VALUE);
        nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AlphabetSupportsPhysical);
        return true;
      }
    break;
case KeyEvent.KEYCODE_BACK:
  if (event.getRepeatCount() == 0 && mInputView != null) {
    if (mInputView.handleBack()) {
      mHardKeyboardAction.resetMetaState();
      if (ic != null)       ic.clearMetaKeyStates(Integer.MAX_VALUE);
      return true;
    }
  }
break;
default :
if (mKeyboardSwitcher.isCurrentKeyboardPhysical()) {
AnyKeyboard current=mKeyboardSwitcher.getCurrentKeyboard();
if (AnySoftKeyboard.DEBUG) Log.d(""String_Node_Str"",""String_Node_Str"" + current.getKeyboardName() + ""String_Node_Str""+ keyCode);
if (ic != null) ic.beginBatchEdit();
try {
  if (DEBUG)   Log.v(""String_Node_Str"",""String_Node_Str"" + mHardKeyboardAction.isShiftActive() + ""String_Node_Str""+ mHardKeyboardAction.isAltActive()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCode()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCodeWasChanged());
  ((HardKeyboardTranslator)current).translatePhysicalCharacter(mHardKeyboardAction);
  if (DEBUG)   Log.v(""String_Node_Str"",""String_Node_Str"" + mHardKeyboardAction.isShiftActive() + ""String_Node_Str""+ mHardKeyboardAction.isAltActive()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCode()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCodeWasChanged());
  if (mHardKeyboardAction.getKeyCodeWasChanged()) {
    final char translatedChar=(char)mHardKeyboardAction.getKeyCode();
    if (ic != null) {
      int metaStateToClear=Integer.MAX_VALUE;
      if (mHardKeyboardAction.isStickyShift() || ((event.getMetaState() & KeyEvent.META_SHIFT_ON) != 0))       metaStateToClear-=KeyEvent.META_SHIFT_ON;
      if (mHardKeyboardAction.isStickyAlt() || ((event.getMetaState() & KeyEvent.META_ALT_ON) != 0))       metaStateToClear-=KeyEvent.META_ALT_ON;
      ic.clearMetaKeyStates(metaStateToClear);
    }
    if (AnySoftKeyboard.DEBUG)     Log.d(""String_Node_Str"",""String_Node_Str"" + current.getKeyboardName() + ""String_Node_Str""+ keyCode+ ""String_Node_Str""+ translatedChar);
    onKey(translatedChar,new int[]{translatedChar});
    return true;
  }
 else {
    if (AnySoftKeyboard.DEBUG)     Log.d(""String_Node_Str"",""String_Node_Str"" + current.getKeyboardName() + ""String_Node_Str""+ keyCode+ ""String_Node_Str"");
  }
}
  finally {
  mHardKeyboardAction.resetNoneStickyMetaState();
  if (ic != null)   ic.endBatchEdit();
}
}
break;
}
}
return super.onKeyDown(keyCode,event);
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  InputConnection ic=getCurrentInputConnection();
  if (mCompletionOn)   commitTyped(ic);
  mCompletionOn=false;
  if (DEBUG)   Log.d(""String_Node_Str"",""String_Node_Str"" + event.getKeyCode() + ""String_Node_Str""+ ((event.getMetaState() & KeyEvent.META_SHIFT_ON) != 0)+ ""String_Node_Str""+ ((event.getMetaState() & KeyEvent.META_ALT_ON) != 0)+ ""String_Node_Str""+ event.getRepeatCount());
  boolean handledByAction=mHardKeyboardAction.initializeAction(event);
  if (!handledByAction) {
switch (keyCode) {
case KeyEvent.KEYCODE_SPACE:
      if (mHardKeyboardAction.isAltActive()) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        mHardKeyboardAction.resetMetaState();
        if (ic != null)         ic.clearMetaKeyStates(Integer.MAX_VALUE);
        nextKeyboard(getCurrentInputEditorInfo(),NextKeyboardType.AlphabetSupportsPhysical);
        return true;
      }
    break;
case KeyEvent.KEYCODE_BACK:
  if (event.getRepeatCount() == 0 && mInputView != null) {
    if (mInputView.handleBack()) {
      mHardKeyboardAction.resetMetaState();
      if (ic != null)       ic.clearMetaKeyStates(Integer.MAX_VALUE);
      return true;
    }
  }
break;
default :
if (mKeyboardSwitcher.isCurrentKeyboardPhysical()) {
AnyKeyboard current=mKeyboardSwitcher.getCurrentKeyboard();
if (AnySoftKeyboard.DEBUG) Log.d(""String_Node_Str"",""String_Node_Str"" + current.getKeyboardName() + ""String_Node_Str""+ keyCode);
if (ic != null) ic.beginBatchEdit();
try {
  if (DEBUG)   Log.v(""String_Node_Str"",""String_Node_Str"" + mHardKeyboardAction.isShiftActive() + ""String_Node_Str""+ mHardKeyboardAction.isAltActive()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCode()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCodeWasChanged());
  ((HardKeyboardTranslator)current).translatePhysicalCharacter(mHardKeyboardAction);
  if (DEBUG)   Log.v(""String_Node_Str"",""String_Node_Str"" + mHardKeyboardAction.isShiftActive() + ""String_Node_Str""+ mHardKeyboardAction.isAltActive()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCode()+ ""String_Node_Str""+ mHardKeyboardAction.getKeyCodeWasChanged());
  final char translatedChar=(char)mHardKeyboardAction.consumeKeyCode();
  if (mHardKeyboardAction.getKeyCodeWasChanged()) {
    if (ic != null) {
      int metaStateToClear=Integer.MAX_VALUE;
      if (mHardKeyboardAction.isShiftActive())       metaStateToClear-=KeyEvent.META_SHIFT_ON;
      if (mHardKeyboardAction.isAltActive())       metaStateToClear-=KeyEvent.META_ALT_ON;
      ic.clearMetaKeyStates(metaStateToClear);
    }
    if (AnySoftKeyboard.DEBUG)     Log.d(""String_Node_Str"",""String_Node_Str"" + current.getKeyboardName() + ""String_Node_Str""+ keyCode+ ""String_Node_Str""+ translatedChar);
    onKey(translatedChar,new int[]{translatedChar});
    return true;
  }
 else {
    if (AnySoftKeyboard.DEBUG)     Log.d(""String_Node_Str"",""String_Node_Str"" + current.getKeyboardName() + ""String_Node_Str""+ keyCode+ ""String_Node_Str"");
  }
}
  finally {
  if (ic != null)   ic.endBatchEdit();
}
}
break;
}
}
return super.onKeyDown(keyCode,event);
}",0.9273301737756714
157606,"public boolean initializeAction(KeyEvent event){
  mChanegd=false;
  mKeyCode=event.getKeyCode();
switch (mKeyCode) {
case KeyEvent.KEYCODE_SHIFT_LEFT:
case KeyEvent.KEYCODE_SHIFT_RIGHT:
    if (event.getRepeatCount() == 0) {
      mPhysicalShiftState=getNextState(mPhysicalShiftState,event.isShiftPressed());
      if (DEBUG)       Log.d(""String_Node_Str"",""String_Node_Str"" + mPhysicalShiftState);
    }
  return true;
case KeyEvent.KEYCODE_ALT_LEFT:
case KeyEvent.KEYCODE_ALT_RIGHT:
if (event.getRepeatCount() == 0) {
  mPhysicalAltState=getNextState(mPhysicalAltState,event.isAltPressed());
  if (DEBUG)   Log.d(""String_Node_Str"",""String_Node_Str"" + mPhysicalAltState);
}
return true;
default :
if (((event.getMetaState() & KeyEvent.META_SHIFT_ON) == 0) && (mPhysicalShiftState == MetaKeyState.On)) mPhysicalShiftState=MetaKeyState.Off;
if (((event.getMetaState() & KeyEvent.META_ALT_ON) == 0) && (mPhysicalAltState == MetaKeyState.On)) mPhysicalAltState=MetaKeyState.Off;
return false;
}
}","public boolean initializeAction(KeyEvent event){
  mChanegd=false;
  mKeyCode=event.getKeyCode();
switch (mKeyCode) {
case KeyEvent.KEYCODE_SHIFT_LEFT:
case KeyEvent.KEYCODE_SHIFT_RIGHT:
    if (event.getRepeatCount() == 0) {
      mPhysicalShiftState=getNextStateOnMetaKeyPress(mPhysicalShiftState,event.isShiftPressed());
      if (DEBUG)       Log.d(""String_Node_Str"",""String_Node_Str"" + mPhysicalShiftState);
    }
  return true;
case KeyEvent.KEYCODE_ALT_LEFT:
case KeyEvent.KEYCODE_ALT_RIGHT:
if (event.getRepeatCount() == 0) {
  mPhysicalAltState=getNextStateOnMetaKeyPress(mPhysicalAltState,event.isAltPressed());
  if (DEBUG)   Log.d(""String_Node_Str"",""String_Node_Str"" + mPhysicalAltState);
}
return true;
default :
mPhysicalShiftState=getNextStateOnRegularKey(mPhysicalShiftState,event.isShiftPressed());
mPhysicalAltState=getNextStateOnRegularKey(mPhysicalAltState,event.isAltPressed());
return false;
}
}",0.7549738219895288
157607,"@Override protected Key createKeyFromXml(Resources res,Row parent,int x,int y,XmlResourceParser parser){
  Key key=super.createKeyFromXml(res,parent,x,y,parser);
  if (key.codes[0] == 10) {
    mEnterKey=key;
  }
 else   if ((key.codes[0] == Keyboard.KEYCODE_MODE_CHANGE) || (key.codes[0] == AnyKeyboard.KEYCODE_LANG_CHANGE)) {
    if (SoftKeyboard.mChangeKeysMode.equals(""String_Node_Str"")) {
      key.label=""String_Node_Str"";
      key.height=0;
      key.width=0;
    }
  }
 else {
    if (isAlphabetKey(key)) {
      key.label=""String_Node_Str"" + ((char)key.codes[0]);
    }
  }
  Log.v(""String_Node_Str"",""String_Node_Str"" + key.codes[0] + ""String_Node_Str""+ key.width+ ""String_Node_Str""+ key.height+ ""String_Node_Str""+ key.label+ ""String_Node_Str"");
  return key;
}","@Override protected Key createKeyFromXml(Resources res,Row parent,int x,int y,XmlResourceParser parser){
  Key key=super.createKeyFromXml(res,parent,x,y,parser);
  if (key.codes[0] == 10) {
    mEnterKey=key;
  }
 else   if ((key.codes[0] == Keyboard.KEYCODE_MODE_CHANGE) || (key.codes[0] == AnyKeyboard.KEYCODE_LANG_CHANGE)) {
    if (SoftKeyboard.mChangeKeysMode.equals(""String_Node_Str"")) {
      key.label=null;
      key.height=0;
      key.width=0;
    }
  }
 else {
    if (isAlphabetKey(key)) {
      key.label=""String_Node_Str"" + ((char)key.codes[0]);
    }
  }
  Log.v(""String_Node_Str"",""String_Node_Str"" + key.codes[0] + ""String_Node_Str""+ key.width+ ""String_Node_Str""+ key.height+ ""String_Node_Str""+ key.label+ ""String_Node_Str"");
  return key;
}",0.9862655330281228
157608,"public void onPress(int primaryCode){
  if (mVibrateOnKeyPress) {
    ((Vibrator)getSystemService(Context.VIBRATOR_SERVICE)).vibrate(12);
  }
  if (mSoundOnKeyPress) {
    int keyFX=AudioManager.FX_KEY_CLICK;
switch (primaryCode) {
case 13:
      keyFX=AudioManager.FX_KEYPRESS_RETURN;
case Keyboard.KEYCODE_DELETE:
    keyFX=AudioManager.FX_KEYPRESS_DELETE;
case 32:
  keyFX=AudioManager.FX_KEYPRESS_SPACEBAR;
}
((AudioManager)getSystemService(Context.AUDIO_SERVICE)).playSoundEffect(keyFX);
}
}","public void onPress(int primaryCode){
  if (mVibrateOnKeyPress) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    ((Vibrator)getSystemService(Context.VIBRATOR_SERVICE)).vibrate(12);
  }
  if (mSoundOnKeyPress) {
    AudioManager manager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
    if (manager.getRingerMode() == AudioManager.RINGER_MODE_NORMAL) {
      int keyFX=AudioManager.FX_KEY_CLICK;
switch (primaryCode) {
case 13:
        keyFX=AudioManager.FX_KEYPRESS_RETURN;
case Keyboard.KEYCODE_DELETE:
      keyFX=AudioManager.FX_KEYPRESS_DELETE;
case 32:
    keyFX=AudioManager.FX_KEYPRESS_SPACEBAR;
}
int volume=manager.getStreamVolume(AudioManager.STREAM_NOTIFICATION);
Log.d(""String_Node_Str"",""String_Node_Str"" + keyFX + ""String_Node_Str""+ volume);
manager.playSoundEffect(keyFX,volume);
}
 else {
Log.d(""String_Node_Str"",""String_Node_Str"");
}
}
}",0.3727072633895818
157609,"@Override public void onDestroy(){
  super.onDestroy();
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  sp.unregisterOnSharedPreferenceChangeListener(this);
}","@Override public void onDestroy(){
  super.onDestroy();
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  sp.unregisterOnSharedPreferenceChangeListener(this);
  if (mSoundOnKeyPress) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    ((AudioManager)getSystemService(Context.AUDIO_SERVICE)).unloadSoundEffects();
  }
}",0.7014925373134329
157610,"private void reloadConfiguration(){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  mVibrateOnKeyPress=sp.getBoolean(""String_Node_Str"",false);
  mSoundOnKeyPress=sp.getBoolean(""String_Node_Str"",false);
  mKeyboardChangeNotification=sp.getBoolean(""String_Node_Str"",true);
  if (mSoundOnKeyPress)   ((AudioManager)getSystemService(Context.AUDIO_SERVICE)).loadSoundEffects();
  mAutoCaps=sp.getBoolean(""String_Node_Str"",true);
  mShowCandidates=sp.getBoolean(""String_Node_Str"",true);
  mChangeKeysMode=sp.getString(""String_Node_Str"",""String_Node_Str"");
  Log.d(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + mVibrateOnKeyPress + ""String_Node_Str""+ mSoundOnKeyPress+ ""String_Node_Str""+ mKeyboardChangeNotification+ ""String_Node_Str""+ mAutoCaps+ ""String_Node_Str""+ mShowCandidates+ ""String_Node_Str""+ mChangeKeysMode);
}","private void reloadConfiguration(){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  mVibrateOnKeyPress=sp.getBoolean(""String_Node_Str"",false);
  mSoundOnKeyPress=sp.getBoolean(""String_Node_Str"",false);
  mKeyboardChangeNotification=sp.getBoolean(""String_Node_Str"",true);
  if (mSoundOnKeyPress) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    ((AudioManager)getSystemService(Context.AUDIO_SERVICE)).loadSoundEffects();
  }
  mAutoCaps=sp.getBoolean(""String_Node_Str"",true);
  mShowCandidates=sp.getBoolean(""String_Node_Str"",true);
  mChangeKeysMode=sp.getString(""String_Node_Str"",""String_Node_Str"");
  Log.d(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + mVibrateOnKeyPress + ""String_Node_Str""+ mSoundOnKeyPress+ ""String_Node_Str""+ mKeyboardChangeNotification+ ""String_Node_Str""+ mAutoCaps+ ""String_Node_Str""+ mShowCandidates+ ""String_Node_Str""+ mChangeKeysMode);
}",0.9683257918552036
157611,"/** 
 * This is called when the user is done editing a field.  We can use this to reset our state.
 */
@Override public void onFinishInput(){
  super.onFinishInput();
  Log.i(""String_Node_Str"",""String_Node_Str"");
  mComposing.setLength(0);
  updateCandidates();
  setCandidatesViewShown(false);
  mCurKeyboard=mKeyboards[mLastSelectedKeyboard];
  if (mInputView != null) {
    mInputView.closing();
  }
  if (mSoundOnKeyPress)   ((AudioManager)getSystemService(Context.AUDIO_SERVICE)).unloadSoundEffects();
  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  notificationManager.cancel(KEYBOARD_NOTIFICATION_ID);
}","/** 
 * This is called when the user is done editing a field.  We can use this to reset our state.
 */
@Override public void onFinishInput(){
  super.onFinishInput();
  Log.i(""String_Node_Str"",""String_Node_Str"");
  mComposing.setLength(0);
  updateCandidates();
  setCandidatesViewShown(false);
  mCurKeyboard=mKeyboards[mLastSelectedKeyboard];
  if (mInputView != null) {
    mInputView.closing();
  }
  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  notificationManager.cancel(KEYBOARD_NOTIFICATION_ID);
}",0.9165329052969502
157612,"@Override public boolean addCounters(Counter counter,Ability source,Game game,List<UUID> appliedEffects,boolean isEffect){
  boolean returnCode=true;
  UUID sourceId=(source == null ? getId() : source.getSourceId());
  GameEvent countersEvent=GameEvent.getEvent(GameEvent.EventType.ADD_COUNTERS,objectId,sourceId,getControllerOrOwner(),counter.getName(),counter.getCount());
  countersEvent.setAppliedEffects(appliedEffects);
  countersEvent.setFlag(isEffect);
  if (!game.replaceEvent(countersEvent)) {
    int amount=countersEvent.getAmount();
    int finalAmount=amount;
    for (int i=0; i < amount; i++) {
      Counter eventCounter=counter.copy();
      eventCounter.remove(eventCounter.getCount() - 1);
      GameEvent event=GameEvent.getEvent(GameEvent.EventType.ADD_COUNTER,objectId,sourceId,getControllerOrOwner(),counter.getName(),1);
      event.setAppliedEffects(appliedEffects);
      if (!game.replaceEvent(event)) {
        getCounters(game).addCounter(eventCounter);
        game.fireEvent(GameEvent.getEvent(GameEvent.EventType.COUNTER_ADDED,objectId,sourceId,getControllerOrOwner(),counter.getName(),1));
      }
 else {
        finalAmount--;
        returnCode=false;
      }
    }
    if (finalAmount > 0) {
      game.fireEvent(GameEvent.getEvent(GameEvent.EventType.COUNTERS_ADDED,objectId,sourceId,getControllerOrOwner(),counter.getName(),amount));
    }
  }
 else {
    returnCode=false;
  }
  return returnCode;
}","@Override public boolean addCounters(Counter counter,Ability source,Game game,List<UUID> appliedEffects,boolean isEffect){
  boolean returnCode=true;
  UUID sourceId=getId();
  if (source != null) {
    MageObject object=game.getObject(source.getId());
    if (object instanceof StackObject) {
      sourceId=source.getId();
    }
 else {
      sourceId=source.getSourceId();
    }
  }
  GameEvent countersEvent=GameEvent.getEvent(GameEvent.EventType.ADD_COUNTERS,objectId,sourceId,getControllerOrOwner(),counter.getName(),counter.getCount());
  countersEvent.setAppliedEffects(appliedEffects);
  countersEvent.setFlag(isEffect);
  if (!game.replaceEvent(countersEvent)) {
    int amount=countersEvent.getAmount();
    int finalAmount=amount;
    for (int i=0; i < amount; i++) {
      Counter eventCounter=counter.copy();
      eventCounter.remove(eventCounter.getCount() - 1);
      GameEvent event=GameEvent.getEvent(GameEvent.EventType.ADD_COUNTER,objectId,sourceId,getControllerOrOwner(),counter.getName(),1);
      event.setAppliedEffects(appliedEffects);
      if (!game.replaceEvent(event)) {
        getCounters(game).addCounter(eventCounter);
        game.fireEvent(GameEvent.getEvent(GameEvent.EventType.COUNTER_ADDED,objectId,sourceId,getControllerOrOwner(),counter.getName(),1));
      }
 else {
        finalAmount--;
        returnCode=false;
      }
    }
    if (finalAmount > 0) {
      game.fireEvent(GameEvent.getEvent(GameEvent.EventType.COUNTERS_ADDED,objectId,sourceId,getControllerOrOwner(),counter.getName(),amount));
    }
  }
 else {
    returnCode=false;
  }
  return returnCode;
}",0.922925549360446
157613,"@Override public AdaptiveAutomatonAddSubtypeEffect copy(){
  return new AdaptiveAutomatonAddSubtypeEffect(this);
}","@Override public AdaptiveAutomaton copy(){
  return new AdaptiveAutomaton(this);
}",0.8367346938775511
157614,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanentEntering(source.getSourceId());
  SubType subtype=(SubType)game.getState().getValue(source.getSourceId() + ""String_Node_Str"");
  if (permanent != null && subtype != null) {
    MageObject mageObject=permanent.getBasicMageObject(game);
    if (!mageObject.getSubtype(null).contains(subtype)) {
      mageObject.getSubtype(null).add(subtype);
    }
    if (!permanent.getSubtype(null).contains(subtype)) {
      permanent.getSubtype(null).add(subtype);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanentEntering(source.getSourceId());
  SubType subtype=(SubType)game.getState().getValue(source.getSourceId() + ""String_Node_Str"");
  if (permanent != null && subtype != null) {
    if (!permanent.getSubtype(game).contains(subtype)) {
      permanent.getSubtype(game).add(subtype);
    }
    return true;
  }
  return false;
}",0.5663366336633663
157615,"@Override public boolean apply(Game game,Ability source){
  FilterCard filter=new FilterCard(""String_Node_Str"");
  filter.add(new ChosenSubtypePredicate(source.getSourceId()));
  return new RevealLibraryPutIntoHandEffect(4,filter,Zone.LIBRARY).apply(game,source);
}","@Override public boolean apply(Game game,Ability source){
  FilterCard filter=new FilterCard(""String_Node_Str"");
  filter.add(new ChosenSubtypePredicate());
  return new RevealLibraryPutIntoHandEffect(4,filter,Zone.LIBRARY).apply(game,source);
}",0.9607843137254902
157616,"@Override public void adjustCosts(Ability ability,Game game){
  MageObject mageObject=game.getObject(ability.getSourceId());
  Effect effect=new ChooseCreatureTypeEffect(Outcome.Benefit);
  if (mageObject != null && effect.apply(game,ability)) {
    FilterPermanent filter=new FilterPermanent();
    filter.add(new ChosenSubtypePredicate(mageObject.getId()));
    ContinuousEffect effectPower=new SetPowerSourceEffect(new PermanentsOnBattlefieldCount(filter),Duration.Custom);
    ContinuousEffect effectToughness=new SetToughnessSourceEffect(new PermanentsOnBattlefieldCount(filter),Duration.Custom);
    game.addEffect(effectPower,ability);
    game.addEffect(effectToughness,ability);
  }
}","@Override public void adjustCosts(Ability ability,Game game){
  MageObject mageObject=game.getObject(ability.getSourceId());
  Effect effect=new ChooseCreatureTypeEffect(Outcome.Benefit);
  if (mageObject != null && effect.apply(game,ability)) {
    FilterPermanent filter=new FilterPermanent();
    filter.add(new ChosenSubtypePredicate());
    ContinuousEffect effectPower=new SetPowerSourceEffect(new PermanentsOnBattlefieldCount(filter),Duration.Custom);
    ContinuousEffect effectToughness=new SetToughnessSourceEffect(new PermanentsOnBattlefieldCount(filter),Duration.Custom);
    game.addEffect(effectPower,ability);
    game.addEffect(effectToughness,ability);
  }
}",0.986842105263158
157617,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller.getLibrary().hasCards()) {
    Card card=controller.getLibrary().getFromTop(game);
    Cards cards=new CardsImpl(card);
    controller.lookAtCards(sourceObject.getIdName(),cards,game);
    FilterCreatureCard filter=new FilterCreatureCard(""String_Node_Str"");
    filter.add(new ChosenSubtypePredicate(source.getSourceId()));
    String message=""String_Node_Str"";
    if (card != null) {
      if (filter.match(card,game) && controller.chooseUse(Outcome.Benefit,message,source,game)) {
        controller.moveCards(card,Zone.HAND,source,game);
        controller.revealCards(sourceObject.getIdName() + ""String_Node_Str"",cards,game);
      }
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller.getLibrary().hasCards()) {
    Card card=controller.getLibrary().getFromTop(game);
    Cards cards=new CardsImpl(card);
    controller.lookAtCards(sourceObject.getIdName(),cards,game);
    FilterCreatureCard filter=new FilterCreatureCard(""String_Node_Str"");
    filter.add(new ChosenSubtypePredicate());
    String message=""String_Node_Str"";
    if (card != null) {
      if (filter.match(card,game) && controller.chooseUse(Outcome.Benefit,message,source,game)) {
        controller.moveCards(card,Zone.HAND,source,game);
        controller.revealCards(sourceObject.getIdName() + ""String_Node_Str"",cards,game);
      }
    }
  }
  return true;
}",0.9883177570093458
157618,"@Override public boolean apply(MageObject input,Game game){
  SubType subType=ChooseCreatureTypeEffect.getChoosenCreatureType(cardID,game);
  return input.hasSubtype(subType,game);
}","@Override public boolean apply(ObjectSourcePlayer<MageObject> input,Game game){
  SubType subType=ChooseCreatureTypeEffect.getChoosenCreatureType(input.getSourceId(),game);
  return input.getObject().hasSubtype(subType,game);
}",0.8655256723716381
157619,"public ChosenSubtypePredicate(UUID cardID){
  this.cardID=cardID;
}","public ChosenSubtypePredicate(){
}",0.6732673267326733
157620,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (permanent == null) {
    return false;
  }
  Player player=game.getPlayer(permanent.getControllerId());
  if (player == null) {
    return false;
  }
  if (player.chooseUse(Outcome.GainLife,""String_Node_Str"" + permanent.getLogName() + ""String_Node_Str"",source,game)) {
    permanent.sacrifice(source.getSourceId(),game);
  }
 else {
    player.damage(permanent.getConvertedManaCost(),permanent.getId(),game,false,true);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getFirstTarget());
  if (permanent == null) {
    return false;
  }
  Player player=game.getPlayer(permanent.getControllerId());
  if (player == null) {
    return false;
  }
  if (player.chooseUse(Outcome.GainLife,""String_Node_Str"" + permanent.getLogName() + ""String_Node_Str"",source,game)) {
    permanent.sacrifice(source.getSourceId(),game);
  }
 else {
    player.damage(permanent.getConvertedManaCost(),permanent.getId(),game,false,true);
  }
  return true;
}",0.9832893579595426
157621,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Player opponent=game.getPlayer(source.getFirstTarget());
  if (controller == null || opponent == null) {
    return false;
  }
  Cards cardsToShuffle=new CardsImpl();
  while (opponent.getLibrary().hasCards()) {
    Card card=opponent.getLibrary().getFromTop(game);
    if (card == null) {
      break;
    }
    opponent.moveCards(card,Zone.EXILED,source,game);
    if (card.isInstant() || card.isSorcery()) {
      if (!controller.chooseUse(outcome,""String_Node_Str"" + card.getName() + ""String_Node_Str"",source,game) || !controller.cast(card.getSpellAbility(),game,true,new MageObjectReference(source.getSourceObject(game),game))) {
        cardsToShuffle.add(card);
      }
      break;
    }
    cardsToShuffle.add(card);
  }
  return opponent.putCardsOnBottomOfLibrary(cardsToShuffle,game,source,false);
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Player opponent=game.getPlayer(source.getFirstTarget());
  if (controller == null || opponent == null) {
    return false;
  }
  Cards cardsToShuffle=new CardsImpl();
  while (opponent.getLibrary().hasCards()) {
    Card card=opponent.getLibrary().getFromTop(game);
    if (card == null) {
      break;
    }
    opponent.moveCards(card,Zone.EXILED,source,game);
    controller.revealCards(source,new CardsImpl(card),game);
    if (card.isInstant() || card.isSorcery()) {
      if (!controller.chooseUse(outcome,""String_Node_Str"" + card.getName() + ""String_Node_Str"",source,game) || !controller.cast(card.getSpellAbility(),game,true,new MageObjectReference(source.getSourceObject(game),game))) {
        cardsToShuffle.add(card);
      }
      break;
    }
 else {
      cardsToShuffle.add(card);
    }
  }
  return opponent.putCardsOnBottomOfLibrary(cardsToShuffle,game,source,false);
}",0.9603297269448736
157622,"@Override public boolean apply(Game game,Ability source){
  int otherCreatures=new PermanentsOnBattlefieldCount(filter).calculate(game,source,this);
  if (otherCreatures > 0) {
    new SacrificeControllerEffect(filter,1,""String_Node_Str"").apply(game,source);
  }
 else {
    Permanent permanent=game.getPermanentOrLKIBattlefield(source.getSourceId());
    if (permanent != null) {
      permanent.damage(6,permanent.getId(),game,false,true);
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  int otherCreatures=new PermanentsOnBattlefieldCount(filter).calculate(game,source,this);
  if (otherCreatures > 0) {
    new SacrificeControllerEffect(filter,1,""String_Node_Str"").apply(game,source);
  }
 else {
    Player controller=game.getPlayer(source.getControllerId());
    if (controller != null) {
      controller.damage(6,source.getSourceId(),game,false,true);
    }
  }
  return true;
}",0.8181818181818182
157623,"@Override public boolean apply(Game game,Ability source){
  Permanent sourceObject=game.getPermanent(source.getSourceId());
  if (sourceObject == null || sourceObject.getImprinted() == null) {
    return false;
  }
  for (  UUID imprinted : sourceObject.getImprinted()) {
    if (imprinted != null) {
      Card card=game.getCard(imprinted);
      if (card != null) {
        for (        CardType cardType : card.getCardType()) {
          FilterCard filterCard;
          if (cardType.equals(CardType.SORCERY)) {
            filterCard=new FilterCard(""String_Node_Str"");
          }
 else           if (cardType.equals(CardType.TRIBAL)) {
            filterCard=new FilterCard(""String_Node_Str"");
          }
 else {
            filterCard=new FilterCard(cardType.toString() + ""String_Node_Str"");
          }
          filterCard.add(new CardTypePredicate(cardType));
          sourceObject.addAbility(new ProtectionAbility(filterCard));
        }
      }
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent sourceObject=game.getPermanent(source.getSourceId());
  ExileZone exileZone=game.getExile().getExileZone(CardUtil.getCardExileZoneId(game,source.getSourceId()));
  if (sourceObject == null || sourceObject.getImprinted() == null) {
    return false;
  }
  for (  UUID imprinted : sourceObject.getImprinted()) {
    if (imprinted != null && exileZone.contains(imprinted)) {
      Card card=game.getCard(imprinted);
      if (card != null) {
        for (        CardType cardType : card.getCardType()) {
          FilterCard filterCard;
          if (cardType.equals(CardType.SORCERY)) {
            filterCard=new FilterCard(""String_Node_Str"");
          }
 else           if (cardType.equals(CardType.TRIBAL)) {
            filterCard=new FilterCard(""String_Node_Str"");
          }
 else {
            filterCard=new FilterCard(cardType.toString() + ""String_Node_Str"");
          }
          filterCard.add(new CardTypePredicate(cardType));
          sourceObject.addAbility(new ProtectionAbility(filterCard));
        }
      }
    }
  }
  return true;
}",0.9331436699857752
157624,"@Override public String getRule(){
  return new StringBuilder(""String_Node_Str"").append(super.getRule()).toString();
}","@Override public String getRule(){
  return ""String_Node_Str"" + super.getRule();
}",0.79
157625,"public void playDaxosAndVampire(boolean castVampireDifferentWay){
  addCard(Zone.HAND,playerA,daxosCard,1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",4);
  addCard(Zone.HAND,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",8);
  addCard(Zone.HAND,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",2);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,daxosCard);
  checkPermanentCount(""String_Node_Str"",1,PhaseStep.POSTCOMBAT_MAIN,playerA,daxosCard,1);
  if (castVampireDifferentWay) {
    castSpell(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    castSpell(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  }
 else {
    activateManaAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    activateManaAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    activateManaAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    activateManaAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    activateManaAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    activateManaAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    castSpell(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    castSpell(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  }
  checkPT(""String_Node_Str"",3,PhaseStep.BEGIN_COMBAT,playerA,daxosCard,5,5);
  checkAbility(""String_Node_Str"",3,PhaseStep.BEGIN_COMBAT,playerA,daxosCard,FlyingAbility.class,true);
  checkSubType(""String_Node_Str"",3,PhaseStep.BEGIN_COMBAT,playerA,daxosCard,SubType.VAMPIRE,true);
  setStopAt(3,PhaseStep.END_TURN);
  execute();
}","public void playDaxosAndVampire(boolean castVampireDifferentWay){
  addCard(Zone.HAND,playerA,daxosCard,1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",4);
  addCard(Zone.HAND,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",8);
  addCard(Zone.HAND,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",2);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,daxosCard);
  checkPermanentCount(""String_Node_Str"",1,PhaseStep.POSTCOMBAT_MAIN,playerA,daxosCard,1);
  if (castVampireDifferentWay) {
    castSpell(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    castSpell(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  }
 else {
    activateManaAbility(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    activateManaAbility(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    activateManaAbility(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    activateManaAbility(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    activateManaAbility(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    activateManaAbility(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    castSpell(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
    castSpell(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  }
  checkPT(""String_Node_Str"",3,PhaseStep.BEGIN_COMBAT,playerA,daxosCard,5,5);
  checkAbility(""String_Node_Str"",3,PhaseStep.BEGIN_COMBAT,playerA,daxosCard,FlyingAbility.class,true);
  checkSubType(""String_Node_Str"",3,PhaseStep.BEGIN_COMBAT,playerA,daxosCard,SubType.VAMPIRE,true);
  setStopAt(3,PhaseStep.END_TURN);
  execute();
}",0.9963746223564954
157626,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    checkToFirePossibleEvents(getMana(game,source),game,source);
    controller.getManaPool().addMana(getMana(game,source),game,source);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    controller.getManaPool().addMana(getMana(game,source),game,source);
    return true;
  }
  return false;
}",0.802065404475043
157627,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getSourceId());
  ChooseFriendsAndFoes choice=new ChooseFriendsAndFoes();
  if (!choice.chooseFriendOrFoe(controller,source,game)) {
    return false;
  }
  for (  Player player : choice.getFriends()) {
    if (player != null) {
      TargetCardInLibrary target=new TargetCardInLibrary(0,1,StaticFilters.FILTER_CARD_LAND);
      if (player.searchLibrary(target,game)) {
        player.moveCards(new CardsImpl(target.getTargets()).getCards(game),Zone.BATTLEFIELD,source,game,true,false,true,null);
        player.shuffleLibrary(source,game);
      }
    }
  }
  for (  Player player : choice.getFoes()) {
    if (player != null) {
      Effect effect=new SacrificeEffect(StaticFilters.FILTER_PERMANENT_ARTIFACT_OR_ENCHANTMENT,1,""String_Node_Str"");
      effect.setTargetPointer(new FixedTarget(player.getId(),game));
      effect.apply(game,source);
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  ChooseFriendsAndFoes choice=new ChooseFriendsAndFoes();
  if (!choice.chooseFriendOrFoe(controller,source,game)) {
    return false;
  }
  for (  Player player : choice.getFriends()) {
    if (player != null) {
      TargetCardInLibrary target=new TargetCardInLibrary(0,1,StaticFilters.FILTER_CARD_LAND);
      if (player.searchLibrary(target,game)) {
        player.moveCards(new CardsImpl(target.getTargets()).getCards(game),Zone.BATTLEFIELD,source,game,true,false,true,null);
        player.shuffleLibrary(source,game);
      }
    }
  }
  for (  Player player : choice.getFoes()) {
    if (player != null) {
      Effect effect=new SacrificeEffect(StaticFilters.FILTER_PERMANENT_ARTIFACT_OR_ENCHANTMENT,1,""String_Node_Str"");
      effect.setTargetPointer(new FixedTarget(player.getId(),game));
      effect.apply(game,source);
    }
  }
  return true;
}",0.9918116683725692
157628,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getSourceId());
  ChooseFriendsAndFoes choice=new ChooseFriendsAndFoes();
  if (!choice.chooseFriendOrFoe(controller,source,game)) {
    return false;
  }
  Map<UUID,Card> getBackMap=new HashMap<>();
  for (  Player player : choice.getFriends()) {
    if (player == null) {
      continue;
    }
    FilterCard filter=new FilterCard(""String_Node_Str"");
    filter.add(new OwnerIdPredicate(player.getId()));
    TargetCardInGraveyard target=new TargetCardInGraveyard(filter);
    getBackMap.put(player.getId(),null);
    if (player.choose(Outcome.ReturnToHand,target,source.getSourceId(),game)) {
      getBackMap.put(player.getId(),game.getCard(target.getFirstTarget()));
    }
  }
  for (  Player player : choice.getFriends()) {
    if (player == null) {
      continue;
    }
    Card card=getBackMap.getOrDefault(player.getId(),null);
    if (card == null) {
      continue;
    }
    player.moveCards(card,Zone.HAND,source,game);
  }
  List<UUID> perms=new ArrayList<>();
  for (  Player player : choice.getFoes()) {
    if (player == null) {
      continue;
    }
    TargetControlledPermanent target=new TargetControlledPermanent(1,1,StaticFilters.FILTER_CONTROLLED_A_CREATURE,true);
    player.choose(Outcome.Sacrifice,target,source.getSourceId(),game);
    perms.addAll(target.getTargets());
  }
  for (  UUID permID : perms) {
    Permanent permanent=game.getPermanent(permID);
    if (permanent != null) {
      permanent.sacrifice(source.getSourceId(),game);
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  ChooseFriendsAndFoes choice=new ChooseFriendsAndFoes();
  if (!choice.chooseFriendOrFoe(controller,source,game)) {
    return false;
  }
  Map<UUID,Card> getBackMap=new HashMap<>();
  for (  Player player : choice.getFriends()) {
    if (player == null) {
      continue;
    }
    FilterCard filter=new FilterCard(""String_Node_Str"");
    filter.add(new OwnerIdPredicate(player.getId()));
    TargetCardInGraveyard target=new TargetCardInGraveyard(filter);
    getBackMap.put(player.getId(),null);
    if (player.choose(Outcome.ReturnToHand,target,source.getSourceId(),game)) {
      getBackMap.put(player.getId(),game.getCard(target.getFirstTarget()));
    }
  }
  for (  Player player : choice.getFriends()) {
    if (player == null) {
      continue;
    }
    Card card=getBackMap.getOrDefault(player.getId(),null);
    if (card == null) {
      continue;
    }
    player.moveCards(card,Zone.HAND,source,game);
  }
  List<UUID> perms=new ArrayList<>();
  for (  Player player : choice.getFoes()) {
    if (player == null) {
      continue;
    }
    TargetControlledPermanent target=new TargetControlledPermanent(1,1,StaticFilters.FILTER_CONTROLLED_A_CREATURE,true);
    player.choose(Outcome.Sacrifice,target,source.getSourceId(),game);
    perms.addAll(target.getTargets());
  }
  for (  UUID permID : perms) {
    Permanent permanent=game.getPermanent(permID);
    if (permanent != null) {
      permanent.sacrifice(source.getSourceId(),game);
    }
  }
  return true;
}",0.9949937421777222
157629,"/** 
 * 509.1c The defending player checks each creature he or she controls to see whether it's affected by any requirements (effects that say a creature must block, or that it must block if some condition is met). If the number of requirements that are being obeyed is fewer than the maximum possible number of requirements that could be obeyed without disobeying any restrictions, the declaration of blockers is illegal. If a creature can't block unless a player pays a cost, that player is not required to pay that cost, even if blocking with that creature would increase the number of requirements being obeyed. Example: A player controls one creature that ""blocks if able"" and another creature with no abilities. An effect states ""Creatures can't be blocked except by two or more creatures."" Having only the first creature block violates the restriction. Having neither creature block fulfills the restriction but not the requirement. Having both creatures block the same attacking creature fulfills both the restriction and the requirement, so that's the only option.
 * @param player
 * @param controller
 * @param game
 * @return
 */
public boolean checkBlockRequirementsAfter(Player player,Player controller,Game game){
  Set<UUID> opponents=game.getOpponents(attackingPlayerId);
  Map<UUID,Set<UUID>> mustBeBlockedByAtLeastOne=new HashMap<>();
  int minNumberOfBlockers=0;
  for (  Permanent creature : game.getBattlefield().getActivePermanents(StaticFilters.FILTER_PERMANENT_CREATURES_CONTROLLED,player.getId(),game)) {
    if (opponents.contains(creature.getControllerId())) {
      if (creature.getBlocking() > 0) {
        for (        Map.Entry<RequirementEffect,Set<Ability>> entry : game.getContinuousEffects().getApplicableRequirementEffects(creature,false,game).entrySet()) {
          RequirementEffect effect=entry.getKey();
          for (          Ability ability : entry.getValue()) {
            UUID toBeBlockedCreature=effect.mustBlockAttackerIfElseUnblocked(ability,game);
            if (toBeBlockedCreature != null) {
              minNumberOfBlockers=effect.getMinNumberOfBlockers();
              Set<UUID> potentialBlockers;
              if (mustBeBlockedByAtLeastOne.containsKey(toBeBlockedCreature)) {
                potentialBlockers=mustBeBlockedByAtLeastOne.get(toBeBlockedCreature);
              }
 else {
                potentialBlockers=new HashSet<>();
                mustBeBlockedByAtLeastOne.put(toBeBlockedCreature,potentialBlockers);
              }
              potentialBlockers.add(creature.getId());
            }
          }
          if (effect.mustBlockAllAttackers(game)) {
            Set<UUID> attackersToBlock=new HashSet<>();
            boolean mayBlock=false;
            for (            UUID attackingCreatureId : getAttackers()) {
              if (creature.canBlock(attackingCreatureId,game)) {
                Permanent attackingCreature=game.getPermanent(attackingCreatureId);
                if (attackingCreature != null) {
                  if (attackingCreature.getMaxBlockedBy() != 0) {
                    int alreadyBlockingCreatures=0;
                    for (                    CombatGroup group : getGroups()) {
                      if (group.getAttackers().contains(attackingCreatureId)) {
                        alreadyBlockingCreatures=group.getBlockers().size();
                        break;
                      }
                    }
                    if (attackingCreature.getMaxBlockedBy() <= alreadyBlockingCreatures) {
                      continue;
                    }
                  }
                  if (attackingCreature.getMinBlockedBy() > 1) {
                    int alreadyBlockingCreatures=0;
                    for (                    CombatGroup group : getGroups()) {
                      if (group.getAttackers().contains(attackingCreatureId)) {
                        alreadyBlockingCreatures=group.getBlockers().size();
                        break;
                      }
                    }
                    if (attackingCreature.getMinBlockedBy() >= alreadyBlockingCreatures) {
                      continue;
                    }
                  }
 else {
                    attackersToBlock.add(attackingCreatureId);
                  }
                }
              }
            }
            if (!attackersToBlock.isEmpty()) {
              for (              UUID attackerId : attackersToBlock) {
                if (!findGroup(attackerId).getBlockers().contains(creature.getId())) {
                  mayBlock=true;
                  break;
                }
              }
            }
            if (mayBlock) {
              if (controller.isHuman()) {
                if (!game.isSimulation()) {
                  game.informPlayer(controller,""String_Node_Str"" + creature.getIdName());
                }
              }
 else {
                Player defender=game.getPlayer(creature.getControllerId());
                if (defender != null) {
                  for (                  UUID attackingCreatureId : getAttackers()) {
                    if (creature.canBlock(attackingCreatureId,game) && !findGroup(attackingCreatureId).getBlockers().contains(creature.getId()) && attackersToBlock.contains(attackingCreatureId)) {
                      defender.declareBlocker(defender.getId(),creature.getId(),attackingCreatureId,game);
                    }
                  }
                }
              }
              return false;
            }
          }
        }
      }
      if (creature.getBlocking() == 0) {
        for (        Map.Entry<RequirementEffect,Set<Ability>> entry : game.getContinuousEffects().getApplicableRequirementEffects(creature,false,game).entrySet()) {
          RequirementEffect effect=entry.getKey();
          for (          Ability ability : entry.getValue()) {
            UUID toBeBlockedCreature=effect.mustBlockAttackerIfElseUnblocked(ability,game);
            if (toBeBlockedCreature != null) {
              minNumberOfBlockers=effect.getMinNumberOfBlockers();
              Set<UUID> potentialBlockers;
              if (mustBeBlockedByAtLeastOne.containsKey(toBeBlockedCreature)) {
                potentialBlockers=mustBeBlockedByAtLeastOne.get(toBeBlockedCreature);
              }
 else {
                potentialBlockers=new HashSet<>();
                mustBeBlockedByAtLeastOne.put(toBeBlockedCreature,potentialBlockers);
              }
              potentialBlockers.add(creature.getId());
            }
          }
          if (effect.mustBlockAny(game) || effect.mustBlockAllAttackers(game)) {
            boolean mayBlock=false;
            for (            UUID attackingCreatureId : getAttackers()) {
              if (creature.canBlock(attackingCreatureId,game)) {
                Permanent attackingCreature=game.getPermanent(attackingCreatureId);
                if (attackingCreature != null) {
                  if (attackingCreature.getMaxBlockedBy() != 0) {
                    int alreadyBlockingCreatures=0;
                    for (                    CombatGroup group : getGroups()) {
                      if (group.getAttackers().contains(attackingCreatureId)) {
                        alreadyBlockingCreatures=group.getBlockers().size();
                        break;
                      }
                    }
                    if (attackingCreature.getMaxBlockedBy() <= alreadyBlockingCreatures) {
                      continue;
                    }
                  }
                  if (attackingCreature.getMinBlockedBy() > 1) {
                    int alreadyBlockingCreatures=0;
                    for (                    CombatGroup group : getGroups()) {
                      if (group.getAttackers().contains(attackingCreatureId)) {
                        alreadyBlockingCreatures=group.getBlockers().size();
                        break;
                      }
                    }
                    if (attackingCreature.getMinBlockedBy() >= alreadyBlockingCreatures) {
                      continue;
                    }
                  }
 else {
                    mayBlock=true;
                    break;
                  }
                }
              }
            }
            if (mayBlock) {
              if (controller.isHuman()) {
                if (!game.isSimulation()) {
                  game.informPlayer(controller,""String_Node_Str"" + creature.getIdName());
                }
              }
 else {
                Player defender=game.getPlayer(creature.getControllerId());
                if (defender != null) {
                  for (                  UUID attackingCreatureId : getAttackers()) {
                    if (creature.canBlock(attackingCreatureId,game) && !findGroup(attackingCreatureId).getBlockers().contains(creature.getId())) {
                      defender.declareBlocker(defender.getId(),creature.getId(),attackingCreatureId,game);
                      break;
                    }
                  }
                }
              }
              return false;
            }
          }
        }
      }
    }
  }
  for (  UUID toBeBlockedCreatureId : mustBeBlockedByAtLeastOne.keySet()) {
    for (    CombatGroup combatGroup : game.getCombat().getGroups()) {
      if (combatGroup.getAttackers().contains(toBeBlockedCreatureId)) {
        boolean requirementFulfilled=false;
        for (        UUID blockerId : combatGroup.getBlockers()) {
          if (mustBeBlockedByAtLeastOne.get(toBeBlockedCreatureId).contains(blockerId)) {
            requirementFulfilled=true;
            break;
          }
        }
        requirementFulfilled&=(combatGroup.getBlockers().size() >= Math.min(minNumberOfBlockers,mustBeBlockedByAtLeastOne.get(toBeBlockedCreatureId).size()));
        if (!requirementFulfilled) {
          if (controller.isHuman()) {
            Permanent toBeBlockedCreature=game.getPermanent(toBeBlockedCreatureId);
            if (toBeBlockedCreature != null) {
              for (              UUID possibleBlockerId : mustBeBlockedByAtLeastOne.get(toBeBlockedCreatureId)) {
                if (combatGroup.getBlockers().contains(possibleBlockerId)) {
                  continue;
                }
                String blockRequiredMessage=isCreatureDoingARequiredBlock(possibleBlockerId,toBeBlockedCreatureId,mustBeBlockedByAtLeastOne,game);
                if (blockRequiredMessage != null) {
                  removeBlocker(possibleBlockerId,game);
                  game.informPlayer(controller,blockRequiredMessage + ""String_Node_Str"" + toBeBlockedCreature.getIdName()+ '.');
                  return false;
                }
              }
            }
          }
 else {
            for (            UUID possibleBlockerId : mustBeBlockedByAtLeastOne.get(toBeBlockedCreatureId)) {
              String blockRequiredMessage=isCreatureDoingARequiredBlock(possibleBlockerId,toBeBlockedCreatureId,mustBeBlockedByAtLeastOne,game);
              if (blockRequiredMessage != null) {
                Permanent possibleBlocker=game.getPermanent(possibleBlockerId);
                Player defender=game.getPlayer(possibleBlocker.getControllerId());
                if (defender != null) {
                  if (possibleBlocker.getBlocking() > 0) {
                    removeBlocker(possibleBlockerId,game);
                  }
                  defender.declareBlocker(defender.getId(),possibleBlockerId,toBeBlockedCreatureId,game);
                }
                if (combatGroup.getBlockers().size() >= minNumberOfBlockers) {
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<UUID,Set<UUID>> entry : creatureMustBlockAttackers.entrySet()) {
    boolean blockIsValid=true;
    Permanent creatureForcedToBlock=game.getPermanent(entry.getKey());
    if (creatureForcedToBlock == null) {
      break;
    }
    if (!creatureForcedToBlock.getControllerId().equals(player.getId())) {
      continue;
    }
    if (creatureForcedToBlock.getBlocking() == 0) {
      blockIsValid=entry.getValue().isEmpty();
      for (      UUID possibleAttackerId : entry.getValue()) {
        CombatGroup attackersGroup=game.getCombat().findGroup(possibleAttackerId);
        Permanent attackingCreature=game.getPermanent(possibleAttackerId);
        if (attackersGroup == null || attackingCreature == null) {
          continue;
        }
        if (attackingCreature.getMinBlockedBy() > 1) {
          if (attackersGroup.getBlockers().size() + 1 < attackingCreature.getMinBlockedBy()) {
            blockIsValid=true;
          }
        }
      }
    }
 else {
      blockIsValid=false;
      CombatGroups:       for (      CombatGroup combatGroup : game.getCombat().getGroups()) {
        if (combatGroup.getBlockers().contains(creatureForcedToBlock.getId())) {
          for (          UUID forcingAttackerId : combatGroup.getAttackers()) {
            if (entry.getValue().contains(forcingAttackerId)) {
              blockIsValid=true;
              break CombatGroups;
            }
 else {
              if (combatGroup.getBlockers().size() == 1) {
                if (mustBeBlockedByAtLeastOne.containsKey(forcingAttackerId)) {
                  if (mustBeBlockedByAtLeastOne.get(forcingAttackerId).contains(creatureForcedToBlock.getId())) {
                    blockIsValid=true;
                    break CombatGroups;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (!blockIsValid) {
      sb.append(' ').append(creatureForcedToBlock.getIdName());
    }
  }
  if (sb.length() > 0) {
    if (!game.isSimulation()) {
      sb.insert(0,""String_Node_Str"");
      sb.append(""String_Node_Str"");
      game.informPlayer(controller,sb.toString());
    }
    return false;
  }
  return true;
}","/** 
 * 509.1c The defending player checks each creature he or she controls to see whether it's affected by any requirements (effects that say a creature must block, or that it must block if some condition is met). If the number of requirements that are being obeyed is fewer than the maximum possible number of requirements that could be obeyed without disobeying any restrictions, the declaration of blockers is illegal. If a creature can't block unless a player pays a cost, that player is not required to pay that cost, even if blocking with that creature would increase the number of requirements being obeyed. Example: A player controls one creature that ""blocks if able"" and another creature with no abilities. An effect states ""Creatures can't be blocked except by two or more creatures."" Having only the first creature block violates the restriction. Having neither creature block fulfills the restriction but not the requirement. Having both creatures block the same attacking creature fulfills both the restriction and the requirement, so that's the only option.
 * @param player
 * @param controller
 * @param game
 * @return
 */
public boolean checkBlockRequirementsAfter(Player player,Player controller,Game game){
  Set<UUID> opponents=game.getOpponents(attackingPlayerId);
  Map<UUID,Set<UUID>> mustBeBlockedByAtLeastOne=new HashMap<>();
  Map<UUID,Integer> minNumberOfBlockersMap=new HashMap<>();
  for (  Permanent creature : game.getBattlefield().getActivePermanents(StaticFilters.FILTER_PERMANENT_CREATURES_CONTROLLED,player.getId(),game)) {
    if (opponents.contains(creature.getControllerId())) {
      if (creature.getBlocking() > 0) {
        for (        Map.Entry<RequirementEffect,Set<Ability>> entry : game.getContinuousEffects().getApplicableRequirementEffects(creature,false,game).entrySet()) {
          RequirementEffect effect=entry.getKey();
          for (          Ability ability : entry.getValue()) {
            UUID toBeBlockedCreature=effect.mustBlockAttackerIfElseUnblocked(ability,game);
            if (toBeBlockedCreature != null) {
              minNumberOfBlockersMap.put(toBeBlockedCreature,effect.getMinNumberOfBlockers());
              Set<UUID> potentialBlockers;
              if (mustBeBlockedByAtLeastOne.containsKey(toBeBlockedCreature)) {
                potentialBlockers=mustBeBlockedByAtLeastOne.get(toBeBlockedCreature);
              }
 else {
                potentialBlockers=new HashSet<>();
                mustBeBlockedByAtLeastOne.put(toBeBlockedCreature,potentialBlockers);
              }
              potentialBlockers.add(creature.getId());
            }
          }
          if (effect.mustBlockAllAttackers(game)) {
            Set<UUID> attackersToBlock=new HashSet<>();
            boolean mayBlock=false;
            for (            UUID attackingCreatureId : getAttackers()) {
              if (creature.canBlock(attackingCreatureId,game)) {
                Permanent attackingCreature=game.getPermanent(attackingCreatureId);
                if (attackingCreature != null) {
                  if (attackingCreature.getMaxBlockedBy() != 0) {
                    int alreadyBlockingCreatures=0;
                    for (                    CombatGroup group : getGroups()) {
                      if (group.getAttackers().contains(attackingCreatureId)) {
                        alreadyBlockingCreatures=group.getBlockers().size();
                        break;
                      }
                    }
                    if (attackingCreature.getMaxBlockedBy() <= alreadyBlockingCreatures) {
                      continue;
                    }
                  }
                  if (attackingCreature.getMinBlockedBy() > 1) {
                    int alreadyBlockingCreatures=0;
                    for (                    CombatGroup group : getGroups()) {
                      if (group.getAttackers().contains(attackingCreatureId)) {
                        alreadyBlockingCreatures=group.getBlockers().size();
                        break;
                      }
                    }
                    if (attackingCreature.getMinBlockedBy() >= alreadyBlockingCreatures) {
                      continue;
                    }
                  }
 else {
                    attackersToBlock.add(attackingCreatureId);
                  }
                }
              }
            }
            if (!attackersToBlock.isEmpty()) {
              for (              UUID attackerId : attackersToBlock) {
                if (!findGroup(attackerId).getBlockers().contains(creature.getId())) {
                  mayBlock=true;
                  break;
                }
              }
            }
            if (mayBlock) {
              if (controller.isHuman()) {
                if (!game.isSimulation()) {
                  game.informPlayer(controller,""String_Node_Str"" + creature.getIdName());
                }
              }
 else {
                Player defender=game.getPlayer(creature.getControllerId());
                if (defender != null) {
                  for (                  UUID attackingCreatureId : getAttackers()) {
                    if (creature.canBlock(attackingCreatureId,game) && !findGroup(attackingCreatureId).getBlockers().contains(creature.getId()) && attackersToBlock.contains(attackingCreatureId)) {
                      defender.declareBlocker(defender.getId(),creature.getId(),attackingCreatureId,game);
                    }
                  }
                }
              }
              return false;
            }
          }
        }
      }
      if (creature.getBlocking() == 0) {
        for (        Map.Entry<RequirementEffect,Set<Ability>> entry : game.getContinuousEffects().getApplicableRequirementEffects(creature,false,game).entrySet()) {
          RequirementEffect effect=entry.getKey();
          for (          Ability ability : entry.getValue()) {
            UUID toBeBlockedCreature=effect.mustBlockAttackerIfElseUnblocked(ability,game);
            if (toBeBlockedCreature != null) {
              minNumberOfBlockersMap.put(toBeBlockedCreature,effect.getMinNumberOfBlockers());
              Set<UUID> potentialBlockers;
              if (mustBeBlockedByAtLeastOne.containsKey(toBeBlockedCreature)) {
                potentialBlockers=mustBeBlockedByAtLeastOne.get(toBeBlockedCreature);
              }
 else {
                potentialBlockers=new HashSet<>();
                mustBeBlockedByAtLeastOne.put(toBeBlockedCreature,potentialBlockers);
              }
              potentialBlockers.add(creature.getId());
            }
          }
          if (effect.mustBlockAny(game) || effect.mustBlockAllAttackers(game)) {
            boolean mayBlock=false;
            for (            UUID attackingCreatureId : getAttackers()) {
              if (creature.canBlock(attackingCreatureId,game)) {
                Permanent attackingCreature=game.getPermanent(attackingCreatureId);
                if (attackingCreature != null) {
                  if (attackingCreature.getMaxBlockedBy() != 0) {
                    int alreadyBlockingCreatures=0;
                    for (                    CombatGroup group : getGroups()) {
                      if (group.getAttackers().contains(attackingCreatureId)) {
                        alreadyBlockingCreatures=group.getBlockers().size();
                        break;
                      }
                    }
                    if (attackingCreature.getMaxBlockedBy() <= alreadyBlockingCreatures) {
                      continue;
                    }
                  }
                  if (attackingCreature.getMinBlockedBy() > 1) {
                    int alreadyBlockingCreatures=0;
                    for (                    CombatGroup group : getGroups()) {
                      if (group.getAttackers().contains(attackingCreatureId)) {
                        alreadyBlockingCreatures=group.getBlockers().size();
                        break;
                      }
                    }
                    if (attackingCreature.getMinBlockedBy() >= alreadyBlockingCreatures) {
                      continue;
                    }
                  }
 else {
                    mayBlock=true;
                    break;
                  }
                }
              }
            }
            if (mayBlock) {
              if (controller.isHuman()) {
                if (!game.isSimulation()) {
                  game.informPlayer(controller,""String_Node_Str"" + creature.getIdName());
                }
              }
 else {
                Player defender=game.getPlayer(creature.getControllerId());
                if (defender != null) {
                  for (                  UUID attackingCreatureId : getAttackers()) {
                    if (creature.canBlock(attackingCreatureId,game) && !findGroup(attackingCreatureId).getBlockers().contains(creature.getId())) {
                      defender.declareBlocker(defender.getId(),creature.getId(),attackingCreatureId,game);
                      break;
                    }
                  }
                }
              }
              return false;
            }
          }
        }
      }
    }
  }
  for (  UUID toBeBlockedCreatureId : mustBeBlockedByAtLeastOne.keySet()) {
    for (    CombatGroup combatGroup : game.getCombat().getGroups()) {
      if (combatGroup.getAttackers().contains(toBeBlockedCreatureId)) {
        boolean requirementFulfilled=false;
        for (        UUID blockerId : combatGroup.getBlockers()) {
          if (mustBeBlockedByAtLeastOne.get(toBeBlockedCreatureId).contains(blockerId)) {
            requirementFulfilled=true;
            break;
          }
        }
        requirementFulfilled&=(combatGroup.getBlockers().size() >= Math.min(minNumberOfBlockersMap.get(toBeBlockedCreatureId),mustBeBlockedByAtLeastOne.get(toBeBlockedCreatureId).size()));
        if (!requirementFulfilled) {
          if (controller.isHuman()) {
            Permanent toBeBlockedCreature=game.getPermanent(toBeBlockedCreatureId);
            if (toBeBlockedCreature != null) {
              for (              UUID possibleBlockerId : mustBeBlockedByAtLeastOne.get(toBeBlockedCreatureId)) {
                if (combatGroup.getBlockers().contains(possibleBlockerId)) {
                  continue;
                }
                String blockRequiredMessage=isCreatureDoingARequiredBlock(possibleBlockerId,toBeBlockedCreatureId,mustBeBlockedByAtLeastOne,game);
                if (blockRequiredMessage != null) {
                  removeBlocker(possibleBlockerId,game);
                  game.informPlayer(controller,blockRequiredMessage + ""String_Node_Str"" + toBeBlockedCreature.getIdName()+ '.');
                  return false;
                }
              }
            }
          }
 else {
            for (            UUID possibleBlockerId : mustBeBlockedByAtLeastOne.get(toBeBlockedCreatureId)) {
              String blockRequiredMessage=isCreatureDoingARequiredBlock(possibleBlockerId,toBeBlockedCreatureId,mustBeBlockedByAtLeastOne,game);
              if (blockRequiredMessage != null) {
                Permanent possibleBlocker=game.getPermanent(possibleBlockerId);
                Player defender=game.getPlayer(possibleBlocker.getControllerId());
                if (defender != null) {
                  if (possibleBlocker.getBlocking() > 0) {
                    removeBlocker(possibleBlockerId,game);
                  }
                  defender.declareBlocker(defender.getId(),possibleBlockerId,toBeBlockedCreatureId,game);
                }
                if (combatGroup.getBlockers().size() >= minNumberOfBlockersMap.get(toBeBlockedCreatureId)) {
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<UUID,Set<UUID>> entry : creatureMustBlockAttackers.entrySet()) {
    boolean blockIsValid=true;
    Permanent creatureForcedToBlock=game.getPermanent(entry.getKey());
    if (creatureForcedToBlock == null) {
      break;
    }
    if (!creatureForcedToBlock.getControllerId().equals(player.getId())) {
      continue;
    }
    if (creatureForcedToBlock.getBlocking() == 0) {
      blockIsValid=entry.getValue().isEmpty();
      for (      UUID possibleAttackerId : entry.getValue()) {
        CombatGroup attackersGroup=game.getCombat().findGroup(possibleAttackerId);
        Permanent attackingCreature=game.getPermanent(possibleAttackerId);
        if (attackersGroup == null || attackingCreature == null) {
          continue;
        }
        if (attackingCreature.getMinBlockedBy() > 1) {
          if (attackersGroup.getBlockers().size() + 1 < attackingCreature.getMinBlockedBy()) {
            blockIsValid=true;
          }
        }
      }
    }
 else {
      blockIsValid=false;
      CombatGroups:       for (      CombatGroup combatGroup : game.getCombat().getGroups()) {
        if (combatGroup.getBlockers().contains(creatureForcedToBlock.getId())) {
          for (          UUID forcingAttackerId : combatGroup.getAttackers()) {
            if (entry.getValue().contains(forcingAttackerId)) {
              blockIsValid=true;
              break CombatGroups;
            }
 else {
              if (combatGroup.getBlockers().size() == 1) {
                if (mustBeBlockedByAtLeastOne.containsKey(forcingAttackerId)) {
                  if (mustBeBlockedByAtLeastOne.get(forcingAttackerId).contains(creatureForcedToBlock.getId())) {
                    blockIsValid=true;
                    break CombatGroups;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (!blockIsValid) {
      sb.append(' ').append(creatureForcedToBlock.getIdName());
    }
  }
  if (sb.length() > 0) {
    if (!game.isSimulation()) {
      sb.insert(0,""String_Node_Str"");
      sb.append(""String_Node_Str"");
      game.informPlayer(controller,sb.toString());
    }
    return false;
  }
  return true;
}",0.9928865058087578
157630,"private IceAge(){
  super(""String_Node_Str"",""String_Node_Str"",ExpansionSet.buildDate(1995,5,1),SetType.EXPANSION);
  this.blockName=""String_Node_Str"";
  this.hasBoosters=true;
  this.numBoosterLands=0;
  this.numBoosterCommon=11;
  this.numBoosterUncommon=3;
  this.numBoosterRare=1;
  this.ratioBoosterMythic=0;
  cards.add(new SetCardInfo(""String_Node_Str"",113,Rarity.UNCOMMON,mage.cards.a.AbyssalSpecter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",306,Rarity.UNCOMMON,mage.cards.a.AdarkarSentinel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",351,Rarity.RARE,mage.cards.a.AdarkarWastes.class));
  cards.add(new SetCardInfo(""String_Node_Str"",307,Rarity.RARE,mage.cards.a.AegisOfTheMeek.class));
  cards.add(new SetCardInfo(""String_Node_Str"",281,Rarity.RARE,mage.cards.a.AltarOfBone.class));
  cards.add(new SetCardInfo(""String_Node_Str"",170,Rarity.UNCOMMON,mage.cards.a.Anarchy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",3,Rarity.COMMON,mage.cards.a.ArensonsAura.class));
  cards.add(new SetCardInfo(""String_Node_Str"",4,Rarity.COMMON,mage.cards.a.ArmorOfFaith.class));
  cards.add(new SetCardInfo(""String_Node_Str"",57,Rarity.COMMON,mage.cards.a.ArnjlotsAscent.class));
  cards.add(new SetCardInfo(""String_Node_Str"",114,Rarity.UNCOMMON,mage.cards.a.AshenGhoul.class));
  cards.add(new SetCardInfo(""String_Node_Str"",225,Rarity.COMMON,mage.cards.a.Aurochs.class));
  cards.add(new SetCardInfo(""String_Node_Str"",171,Rarity.UNCOMMON,mage.cards.a.Avalanche.class));
  cards.add(new SetCardInfo(""String_Node_Str"",172,Rarity.COMMON,mage.cards.b.BalduvianBarbarians.class));
  cards.add(new SetCardInfo(""String_Node_Str"",226,Rarity.COMMON,mage.cards.b.BalduvianBears.class));
  cards.add(new SetCardInfo(""String_Node_Str"",58,Rarity.UNCOMMON,mage.cards.b.BalduvianConjurer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",173,Rarity.RARE,mage.cards.b.BalduvianHydra.class));
  cards.add(new SetCardInfo(""String_Node_Str"",312,Rarity.COMMON,mage.cards.b.BarbedSextant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",313,Rarity.UNCOMMON,mage.cards.b.BatonOfMorale.class));
  cards.add(new SetCardInfo(""String_Node_Str"",5,Rarity.UNCOMMON,mage.cards.b.BattleCry.class));
  cards.add(new SetCardInfo(""String_Node_Str"",175,Rarity.COMMON,mage.cards.b.BattleFrenzy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",60,Rarity.UNCOMMON,mage.cards.b.BindingGrasp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",6,Rarity.UNCOMMON,mage.cards.b.BlackScarab.class));
  cards.add(new SetCardInfo(""String_Node_Str"",7,Rarity.COMMON,mage.cards.b.BlessedWine.class));
  cards.add(new SetCardInfo(""String_Node_Str"",8,Rarity.RARE,mage.cards.b.BlinkingSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",227,Rarity.RARE,mage.cards.b.Blizzard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",9,Rarity.UNCOMMON,mage.cards.b.BlueScarab.class));
  cards.add(new SetCardInfo(""String_Node_Str"",61,Rarity.COMMON,mage.cards.b.Brainstorm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",177,Rarity.RARE,mage.cards.b.BrandOfIllOmen.class));
  cards.add(new SetCardInfo(""String_Node_Str"",62,Rarity.UNCOMMON,mage.cards.b.BreathOfDreams.class));
  cards.add(new SetCardInfo(""String_Node_Str"",115,Rarity.COMMON,mage.cards.b.BrineShaman.class));
  cards.add(new SetCardInfo(""String_Node_Str"",228,Rarity.COMMON,mage.cards.b.BrownOuphe.class));
  cards.add(new SetCardInfo(""String_Node_Str"",352,Rarity.RARE,mage.cards.b.Brushland.class));
  cards.add(new SetCardInfo(""String_Node_Str"",116,Rarity.COMMON,mage.cards.b.BurntOffering.class));
  cards.add(new SetCardInfo(""String_Node_Str"",10,Rarity.RARE,mage.cards.c.CallToArms.class));
  cards.add(new SetCardInfo(""String_Node_Str"",11,Rarity.RARE,mage.cards.c.CaribouRange.class));
  cards.add(new SetCardInfo(""String_Node_Str"",314,Rarity.RARE,mage.cards.c.CelestialSword.class));
  cards.add(new SetCardInfo(""String_Node_Str"",282,Rarity.UNCOMMON,mage.cards.c.CentaurArcher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",179,Rarity.RARE,mage.cards.c.ChaosMoon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",229,Rarity.COMMON,mage.cards.c.ChubToad.class));
  cards.add(new SetCardInfo(""String_Node_Str"",12,Rarity.COMMON,mage.cards.c.CircleOfProtectionBlack.class));
  cards.add(new SetCardInfo(""String_Node_Str"",13,Rarity.COMMON,mage.cards.c.CircleOfProtectionBlue.class));
  cards.add(new SetCardInfo(""String_Node_Str"",14,Rarity.COMMON,mage.cards.c.CircleOfProtectionGreen.class));
  cards.add(new SetCardInfo(""String_Node_Str"",15,Rarity.COMMON,mage.cards.c.CircleOfProtectionRed.class));
  cards.add(new SetCardInfo(""String_Node_Str"",16,Rarity.COMMON,mage.cards.c.CircleOfProtectionWhite.class));
  cards.add(new SetCardInfo(""String_Node_Str"",63,Rarity.COMMON,mage.cards.c.Clairvoyance.class));
  cards.add(new SetCardInfo(""String_Node_Str"",17,Rarity.UNCOMMON,mage.cards.c.ColdSnap.class));
  cards.add(new SetCardInfo(""String_Node_Str"",180,Rarity.UNCOMMON,mage.cards.c.Conquer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",18,Rarity.COMMON,mage.cards.c.Cooperation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",64,Rarity.COMMON,mage.cards.c.Counterspell.class));
  cards.add(new SetCardInfo(""String_Node_Str"",315,Rarity.RARE,mage.cards.c.CrownOfTheAges.class));
  cards.add(new SetCardInfo(""String_Node_Str"",181,Rarity.RARE,mage.cards.c.CurseOfMaritLage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",118,Rarity.UNCOMMON,mage.cards.d.DanceOfTheDead.class));
  cards.add(new SetCardInfo(""String_Node_Str"",119,Rarity.COMMON,mage.cards.d.DarkBanishing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",120,Rarity.COMMON,mage.cards.d.DarkRitual.class));
  cards.add(new SetCardInfo(""String_Node_Str"",19,Rarity.COMMON,mage.cards.d.DeathWard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",65,Rarity.RARE,mage.cards.d.Deflection.class));
  cards.add(new SetCardInfo(""String_Node_Str"",121,Rarity.UNCOMMON,mage.cards.d.DemonicConsultation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",316,Rarity.RARE,mage.cards.d.DespoticScepter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",284,Rarity.UNCOMMON,mage.cards.d.DiabolicVision.class));
  cards.add(new SetCardInfo(""String_Node_Str"",230,Rarity.COMMON,mage.cards.d.DireWolves.class));
  cards.add(new SetCardInfo(""String_Node_Str"",20,Rarity.COMMON,mage.cards.d.Disenchant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",66,Rarity.UNCOMMON,mage.cards.d.DreamsOfTheDead.class));
  cards.add(new SetCardInfo(""String_Node_Str"",123,Rarity.UNCOMMON,mage.cards.d.DriftOfTheDead.class));
  cards.add(new SetCardInfo(""String_Node_Str"",21,Rarity.UNCOMMON,mage.cards.d.Drought.class));
  cards.add(new SetCardInfo(""String_Node_Str"",182,Rarity.RARE,mage.cards.d.DwarvenArmory.class));
  cards.add(new SetCardInfo(""String_Node_Str"",285,Rarity.RARE,mage.cards.e.Earthlink.class));
  cards.add(new SetCardInfo(""String_Node_Str"",231,Rarity.COMMON,mage.cards.e.Earthlore.class));
  cards.add(new SetCardInfo(""String_Node_Str"",232,Rarity.RARE,mage.cards.e.ElderDruid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",286,Rarity.RARE,mage.cards.e.ElementalAugury.class));
  cards.add(new SetCardInfo(""String_Node_Str"",317,Rarity.RARE,mage.cards.e.ElkinBottle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",23,Rarity.RARE,mage.cards.e.EnduringRenewal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",24,Rarity.RARE,mage.cards.e.EnergyStorm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",67,Rarity.COMMON,mage.cards.e.Enervate.class));
  cards.add(new SetCardInfo(""String_Node_Str"",183,Rarity.COMMON,mage.cards.e.Errantry.class));
  cards.add(new SetCardInfo(""String_Node_Str"",233,Rarity.COMMON,mage.cards.e.EssenceFilter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",69,Rarity.COMMON,mage.cards.e.EssenceFlare.class));
  cards.add(new SetCardInfo(""String_Node_Str"",234,Rarity.UNCOMMON,mage.cards.f.FanaticalFever.class));
  cards.add(new SetCardInfo(""String_Node_Str"",124,Rarity.COMMON,mage.cards.f.Fear.class));
  cards.add(new SetCardInfo(""String_Node_Str"",288,Rarity.RARE,mage.cards.f.FieryJustice.class));
  cards.add(new SetCardInfo(""String_Node_Str"",289,Rarity.UNCOMMON,mage.cards.f.FireCovenant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",184,Rarity.UNCOMMON,mage.cards.f.FlameSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",185,Rarity.COMMON,mage.cards.f.Flare.class));
  cards.add(new SetCardInfo(""String_Node_Str"",290,Rarity.RARE,mage.cards.f.FloodedWoodlands.class));
  cards.add(new SetCardInfo(""String_Node_Str"",125,Rarity.RARE,mage.cards.f.FlowOfMaggots.class));
  cards.add(new SetCardInfo(""String_Node_Str"",235,Rarity.COMMON,mage.cards.f.FolkOfThePines.class));
  cards.add(new SetCardInfo(""String_Node_Str"",236,Rarity.RARE,mage.cards.f.ForbiddenLore.class));
  cards.add(new SetCardInfo(""String_Node_Str"",70,Rarity.UNCOMMON,mage.cards.f.ForceVoid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",380,Rarity.LAND,mage.cards.basiclands.Forest.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",381,Rarity.LAND,mage.cards.basiclands.Forest.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",382,Rarity.LAND,mage.cards.basiclands.Forest.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",237,Rarity.UNCOMMON,mage.cards.f.ForgottenLore.class));
  cards.add(new SetCardInfo(""String_Node_Str"",25,Rarity.RARE,mage.cards.f.Formation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",126,Rarity.COMMON,mage.cards.f.FoulFamiliar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",238,Rarity.COMMON,mage.cards.f.Foxfire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",240,Rarity.UNCOMMON,mage.cards.f.FreyalisesCharm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",291,Rarity.UNCOMMON,mage.cards.f.Fumarole.class));
  cards.add(new SetCardInfo(""String_Node_Str"",318,Rarity.UNCOMMON,mage.cards.f.FyndhornBow.class));
  cards.add(new SetCardInfo(""String_Node_Str"",242,Rarity.COMMON,mage.cards.f.FyndhornBrownie.class));
  cards.add(new SetCardInfo(""String_Node_Str"",243,Rarity.UNCOMMON,mage.cards.f.FyndhornElder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",244,Rarity.COMMON,mage.cards.f.FyndhornElves.class));
  cards.add(new SetCardInfo(""String_Node_Str"",245,Rarity.RARE,mage.cards.f.FyndhornPollen.class));
  cards.add(new SetCardInfo(""String_Node_Str"",186,Rarity.RARE,mage.cards.g.GameOfChaos.class));
  cards.add(new SetCardInfo(""String_Node_Str"",127,Rarity.COMMON,mage.cards.g.GangrenousZombies.class));
  cards.add(new SetCardInfo(""String_Node_Str"",27,Rarity.RARE,mage.cards.g.GeneralJarkeld.class));
  cards.add(new SetCardInfo(""String_Node_Str"",246,Rarity.COMMON,mage.cards.g.GiantGrowth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",293,Rarity.UNCOMMON,mage.cards.g.GiantTrapDoorSpider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",353,Rarity.UNCOMMON,mage.cards.g.GlacialChasm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",187,Rarity.RARE,mage.cards.g.GlacialCrevasses.class));
  cards.add(new SetCardInfo(""String_Node_Str"",71,Rarity.UNCOMMON,mage.cards.g.GlacialWall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",319,Rarity.RARE,mage.cards.g.GoblinLyre.class));
  cards.add(new SetCardInfo(""String_Node_Str"",188,Rarity.UNCOMMON,mage.cards.g.GoblinMutant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",191,Rarity.UNCOMMON,mage.cards.g.GoblinSnowman.class));
  cards.add(new SetCardInfo(""String_Node_Str"",247,Rarity.COMMON,mage.cards.g.GorillaPack.class));
  cards.add(new SetCardInfo(""String_Node_Str"",129,Rarity.RARE,mage.cards.g.Gravebind.class));
  cards.add(new SetCardInfo(""String_Node_Str"",28,Rarity.UNCOMMON,mage.cards.g.GreenScarab.class));
  cards.add(new SetCardInfo(""String_Node_Str"",29,Rarity.UNCOMMON,mage.cards.h.HallowedGround.class));
  cards.add(new SetCardInfo(""String_Node_Str"",354,Rarity.RARE,mage.cards.h.HallsOfMist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",30,Rarity.COMMON,mage.cards.h.Heal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",130,Rarity.RARE,mage.cards.h.Hecatomb.class));
  cards.add(new SetCardInfo(""String_Node_Str"",320,Rarity.UNCOMMON,mage.cards.h.HematiteTalisman.class));
  cards.add(new SetCardInfo(""String_Node_Str"",131,Rarity.COMMON,mage.cards.h.HoarShade.class));
  cards.add(new SetCardInfo(""String_Node_Str"",248,Rarity.RARE,mage.cards.h.HotSprings.class));
  cards.add(new SetCardInfo(""String_Node_Str"",132,Rarity.COMMON,mage.cards.h.HowlFromBeyond.class));
  cards.add(new SetCardInfo(""String_Node_Str"",249,Rarity.UNCOMMON,mage.cards.h.Hurricane.class));
  cards.add(new SetCardInfo(""String_Node_Str"",133,Rarity.UNCOMMON,mage.cards.h.HyalopterousLemure.class));
  cards.add(new SetCardInfo(""String_Node_Str"",72,Rarity.COMMON,mage.cards.h.Hydroblast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",295,Rarity.UNCOMMON,mage.cards.h.HymnOfRebirth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",321,Rarity.RARE,mage.cards.i.IceCauldron.class));
  cards.add(new SetCardInfo(""String_Node_Str"",355,Rarity.UNCOMMON,mage.cards.i.IceFloe.class));
  cards.add(new SetCardInfo(""String_Node_Str"",73,Rarity.UNCOMMON,mage.cards.i.Iceberg.class));
  cards.add(new SetCardInfo(""String_Node_Str"",134,Rarity.UNCOMMON,mage.cards.i.Icequake.class));
  cards.add(new SetCardInfo(""String_Node_Str"",322,Rarity.UNCOMMON,mage.cards.i.IcyManipulator.class));
  cards.add(new SetCardInfo(""String_Node_Str"",74,Rarity.RARE,mage.cards.i.IcyPrison.class));
  cards.add(new SetCardInfo(""String_Node_Str"",75,Rarity.COMMON,mage.cards.i.IllusionaryForces.class));
  cards.add(new SetCardInfo(""String_Node_Str"",78,Rarity.COMMON,mage.cards.i.IllusionaryWall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",79,Rarity.RARE,mage.cards.i.IllusionsOfGrandeur.class));
  cards.add(new SetCardInfo(""String_Node_Str"",193,Rarity.COMMON,mage.cards.i.ImposingVisage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",194,Rarity.COMMON,mage.cards.i.Incinerate.class));
  cards.add(new SetCardInfo(""String_Node_Str"",135,Rarity.RARE,mage.cards.i.InfernalDarkness.class));
  cards.add(new SetCardInfo(""String_Node_Str"",136,Rarity.RARE,mage.cards.i.InfernalDenizen.class));
  cards.add(new SetCardInfo(""String_Node_Str"",323,Rarity.RARE,mage.cards.i.InfiniteHourglass.class));
  cards.add(new SetCardInfo(""String_Node_Str"",80,Rarity.COMMON,mage.cards.i.Infuse.class));
  cards.add(new SetCardInfo(""String_Node_Str"",368,Rarity.LAND,mage.cards.basiclands.Island.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",369,Rarity.LAND,mage.cards.basiclands.Island.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",370,Rarity.LAND,mage.cards.basiclands.Island.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",324,Rarity.RARE,mage.cards.j.JestersCap.class));
  cards.add(new SetCardInfo(""String_Node_Str"",325,Rarity.RARE,mage.cards.j.JestersMask.class));
  cards.add(new SetCardInfo(""String_Node_Str"",326,Rarity.UNCOMMON,mage.cards.j.JeweledAmulet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",250,Rarity.UNCOMMON,mage.cards.j.JohtullWurm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",195,Rarity.RARE,mage.cards.j.Jokulhaups.class));
  cards.add(new SetCardInfo(""String_Node_Str"",251,Rarity.COMMON,mage.cards.j.JuniperOrderDruid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",32,Rarity.UNCOMMON,mage.cards.j.Justice.class));
  cards.add(new SetCardInfo(""String_Node_Str"",356,Rarity.RARE,mage.cards.k.KarplusanForest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",196,Rarity.UNCOMMON,mage.cards.k.KarplusanGiant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",197,Rarity.RARE,mage.cards.k.KarplusanYeti.class));
  cards.add(new SetCardInfo(""String_Node_Str"",33,Rarity.COMMON,mage.cards.k.KelsinkoRanger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",137,Rarity.COMMON,mage.cards.k.KjeldoranDead.class));
  cards.add(new SetCardInfo(""String_Node_Str"",296,Rarity.UNCOMMON,mage.cards.k.KjeldoranFrostbeast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",36,Rarity.RARE,mage.cards.k.KjeldoranKnight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",37,Rarity.RARE,mage.cards.k.KjeldoranPhalanx.class));
  cards.add(new SetCardInfo(""String_Node_Str"",38,Rarity.RARE,mage.cards.k.KjeldoranRoyalGuard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",39,Rarity.UNCOMMON,mage.cards.k.KjeldoranSkycaptain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",40,Rarity.COMMON,mage.cards.k.KjeldoranSkyknight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",41,Rarity.COMMON,mage.cards.k.KjeldoranWarrior.class));
  cards.add(new SetCardInfo(""String_Node_Str"",138,Rarity.UNCOMMON,mage.cards.k.KnightOfStromgald.class));
  cards.add(new SetCardInfo(""String_Node_Str"",27,Rarity.UNCOMMON,mage.cards.k.KrovikanElementalist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",140,Rarity.COMMON,mage.cards.k.KrovikanFetish.class));
  cards.add(new SetCardInfo(""String_Node_Str"",81,Rarity.COMMON,mage.cards.k.KrovikanSorcerer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",357,Rarity.RARE,mage.cards.l.LandCap.class));
  cards.add(new SetCardInfo(""String_Node_Str"",327,Rarity.UNCOMMON,mage.cards.l.LapisLazuliTalisman.class));
  cards.add(new SetCardInfo(""String_Node_Str"",358,Rarity.RARE,mage.cards.l.LavaTubes.class));
  cards.add(new SetCardInfo(""String_Node_Str"",142,Rarity.COMMON,mage.cards.l.LegionsOfLimDul.class));
  cards.add(new SetCardInfo(""String_Node_Str"",143,Rarity.UNCOMMON,mage.cards.l.LeshracsRite.class));
  cards.add(new SetCardInfo(""String_Node_Str"",144,Rarity.UNCOMMON,mage.cards.l.LeshracsSigil.class));
  cards.add(new SetCardInfo(""String_Node_Str"",252,Rarity.RARE,mage.cards.l.Lhurgoyf.class));
  cards.add(new SetCardInfo(""String_Node_Str"",42,Rarity.RARE,mage.cards.l.LightningBlow.class));
  cards.add(new SetCardInfo(""String_Node_Str"",146,Rarity.UNCOMMON,mage.cards.l.LimDulsHex.class));
  cards.add(new SetCardInfo(""String_Node_Str"",253,Rarity.UNCOMMON,mage.cards.l.Lure.class));
  cards.add(new SetCardInfo(""String_Node_Str"",82,Rarity.RARE,mage.cards.m.MagusOfTheUnseen.class));
  cards.add(new SetCardInfo(""String_Node_Str"",328,Rarity.UNCOMMON,mage.cards.m.MalachiteTalisman.class));
  cards.add(new SetCardInfo(""String_Node_Str"",204,Rarity.RARE,mage.cards.m.MartonStromgald.class));
  cards.add(new SetCardInfo(""String_Node_Str"",199,Rarity.UNCOMMON,mage.cards.m.Melee.class));
  cards.add(new SetCardInfo(""String_Node_Str"",200,Rarity.UNCOMMON,mage.cards.m.Melting.class));
  cards.add(new SetCardInfo(""String_Node_Str"",297,Rarity.RARE,mage.cards.m.MeriekeRiBerit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",83,Rarity.RARE,mage.cards.m.MesmericTrance.class));
  cards.add(new SetCardInfo(""String_Node_Str"",201,Rarity.COMMON,mage.cards.m.MeteorShower.class));
  cards.add(new SetCardInfo(""String_Node_Str"",147,Rarity.COMMON,mage.cards.m.MindRavel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",148,Rarity.UNCOMMON,mage.cards.m.MindWarp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",150,Rarity.RARE,mage.cards.m.MinionOfLeshrac.class));
  cards.add(new SetCardInfo(""String_Node_Str"",151,Rarity.RARE,mage.cards.m.MinionOfTeveshSzat.class));
  cards.add(new SetCardInfo(""String_Node_Str"",152,Rarity.UNCOMMON,mage.cards.m.MoleWorms.class));
  cards.add(new SetCardInfo(""String_Node_Str"",298,Rarity.RARE,mage.cards.m.Monsoon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",153,Rarity.COMMON,mage.cards.m.MoorFiend.class));
  cards.add(new SetCardInfo(""String_Node_Str"",202,Rarity.COMMON,mage.cards.m.MountainGoat.class));
  cards.add(new SetCardInfo(""String_Node_Str"",299,Rarity.RARE,mage.cards.m.MountainTitan.class));
  cards.add(new SetCardInfo(""String_Node_Str"",376,Rarity.LAND,mage.cards.basiclands.Mountain.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",377,Rarity.LAND,mage.cards.basiclands.Mountain.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",378,Rarity.LAND,mage.cards.basiclands.Mountain.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",203,Rarity.RARE,mage.cards.m.Mudslide.class));
  cards.add(new SetCardInfo(""String_Node_Str"",86,Rarity.RARE,mage.cards.m.MysticMight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",87,Rarity.COMMON,mage.cards.m.MysticRemora.class));
  cards.add(new SetCardInfo(""String_Node_Str"",329,Rarity.UNCOMMON,mage.cards.n.NacreTalisman.class));
  cards.add(new SetCardInfo(""String_Node_Str"",330,Rarity.RARE,mage.cards.n.NakedSingularity.class));
  cards.add(new SetCardInfo(""String_Node_Str"",255,Rarity.UNCOMMON,mage.cards.n.NaturesLore.class));
  cards.add(new SetCardInfo(""String_Node_Str"",154,Rarity.RARE,mage.cards.n.Necropotence.class));
  cards.add(new SetCardInfo(""String_Node_Str"",155,Rarity.COMMON,mage.cards.n.Norritt.class));
  cards.add(new SetCardInfo(""String_Node_Str"",331,Rarity.UNCOMMON,mage.cards.o.OnyxTalisman.class));
  cards.add(new SetCardInfo(""String_Node_Str"",205,Rarity.UNCOMMON,mage.cards.o.OrcishCannoneers.class));
  cards.add(new SetCardInfo(""String_Node_Str"",208,Rarity.UNCOMMON,mage.cards.o.OrcishHealer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",209,Rarity.RARE,mage.cards.o.OrcishLibrarian.class));
  cards.add(new SetCardInfo(""String_Node_Str"",210,Rarity.COMMON,mage.cards.o.OrcishLumberjack.class));
  cards.add(new SetCardInfo(""String_Node_Str"",211,Rarity.RARE,mage.cards.o.OrcishSquatters.class));
  cards.add(new SetCardInfo(""String_Node_Str"",45,Rarity.RARE,mage.cards.o.OrderOfTheSacredTorch.class));
  cards.add(new SetCardInfo(""String_Node_Str"",46,Rarity.UNCOMMON,mage.cards.o.OrderOfTheWhiteShield.class));
  cards.add(new SetCardInfo(""String_Node_Str"",256,Rarity.RARE,mage.cards.p.PaleBears.class));
  cards.add(new SetCardInfo(""String_Node_Str"",212,Rarity.COMMON,mage.cards.p.Panic.class));
  cards.add(new SetCardInfo(""String_Node_Str"",332,Rarity.RARE,mage.cards.p.PentagramOfTheAges.class));
  cards.add(new SetCardInfo(""String_Node_Str"",157,Rarity.COMMON,mage.cards.p.PestilenceRats.class));
  cards.add(new SetCardInfo(""String_Node_Str"",333,Rarity.UNCOMMON,mage.cards.p.PitTrap.class));
  cards.add(new SetCardInfo(""String_Node_Str"",364,Rarity.LAND,mage.cards.basiclands.Plains.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",365,Rarity.LAND,mage.cards.basiclands.Plains.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",366,Rarity.LAND,mage.cards.basiclands.Plains.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",89,Rarity.RARE,mage.cards.p.PolarKraken.class));
  cards.add(new SetCardInfo(""String_Node_Str"",90,Rarity.COMMON,mage.cards.p.Portent.class));
  cards.add(new SetCardInfo(""String_Node_Str"",91,Rarity.COMMON,mage.cards.p.PowerSink.class));
  cards.add(new SetCardInfo(""String_Node_Str"",158,Rarity.RARE,mage.cards.p.Pox.class));
  cards.add(new SetCardInfo(""String_Node_Str"",47,Rarity.COMMON,mage.cards.p.PrismaticWard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",257,Rarity.RARE,mage.cards.p.PygmyAllosaurus.class));
  cards.add(new SetCardInfo(""String_Node_Str"",258,Rarity.COMMON,mage.cards.p.Pyknite.class));
  cards.add(new SetCardInfo(""String_Node_Str"",213,Rarity.COMMON,mage.cards.p.Pyroblast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",214,Rarity.UNCOMMON,mage.cards.p.Pyroclasm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",48,Rarity.COMMON,mage.cards.r.Rally.class));
  cards.add(new SetCardInfo(""String_Node_Str"",92,Rarity.COMMON,mage.cards.r.RayOfCommand.class));
  cards.add(new SetCardInfo(""String_Node_Str"",93,Rarity.COMMON,mage.cards.r.RayOfErasure.class));
  cards.add(new SetCardInfo(""String_Node_Str"",94,Rarity.RARE,mage.cards.r.RealityTwist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",300,Rarity.RARE,mage.cards.r.Reclamation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",49,Rarity.UNCOMMON,mage.cards.r.RedScarab.class));
  cards.add(new SetCardInfo(""String_Node_Str"",259,Rarity.COMMON,mage.cards.r.Regeneration.class));
  cards.add(new SetCardInfo(""String_Node_Str"",260,Rarity.COMMON,mage.cards.r.RimeDryad.class));
  cards.add(new SetCardInfo(""String_Node_Str"",261,Rarity.RARE,mage.cards.r.RitualOfSubdual.class));
  cards.add(new SetCardInfo(""String_Node_Str"",359,Rarity.RARE,mage.cards.r.RiverDelta.class));
  cards.add(new SetCardInfo(""String_Node_Str"",334,Rarity.RARE,mage.cards.r.RunedArch.class));
  cards.add(new SetCardInfo(""String_Node_Str"",215,Rarity.COMMON,mage.cards.s.SabretoothTiger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",262,Rarity.COMMON,mage.cards.s.ScaledWurm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",95,Rarity.UNCOMMON,mage.cards.s.SeaSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",159,Rarity.COMMON,mage.cards.s.Seizures.class));
  cards.add(new SetCardInfo(""String_Node_Str"",263,Rarity.COMMON,mage.cards.s.ShamblingStrider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",216,Rarity.COMMON,mage.cards.s.Shatter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",52,Rarity.COMMON,mage.cards.s.ShieldBearer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",335,Rarity.UNCOMMON,mage.cards.s.ShieldOfTheAges.class));
  cards.add(new SetCardInfo(""String_Node_Str"",96,Rarity.RARE,mage.cards.s.Shyft.class));
  cards.add(new SetCardInfo(""String_Node_Str"",97,Rarity.RARE,mage.cards.s.SibilantSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",98,Rarity.UNCOMMON,mage.cards.s.SilverErne.class));
  cards.add(new SetCardInfo(""String_Node_Str"",301,Rarity.RARE,mage.cards.s.SkeletonShip.class));
  cards.add(new SetCardInfo(""String_Node_Str"",336,Rarity.UNCOMMON,mage.cards.s.SkullCatapult.class));
  cards.add(new SetCardInfo(""String_Node_Str"",337,Rarity.RARE,mage.cards.s.SnowFortress.class));
  cards.add(new SetCardInfo(""String_Node_Str"",53,Rarity.UNCOMMON,mage.cards.s.SnowHound.class));
  cards.add(new SetCardInfo(""String_Node_Str"",383,Rarity.LAND,mage.cards.s.SnowCoveredForest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",371,Rarity.LAND,mage.cards.s.SnowCoveredIsland.class));
  cards.add(new SetCardInfo(""String_Node_Str"",379,Rarity.LAND,mage.cards.s.SnowCoveredMountain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",367,Rarity.LAND,mage.cards.s.SnowCoveredPlains.class));
  cards.add(new SetCardInfo(""String_Node_Str"",372,Rarity.LAND,mage.cards.s.SnowCoveredSwamp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",338,Rarity.RARE,mage.cards.s.SoldeviGolem.class));
  cards.add(new SetCardInfo(""String_Node_Str"",102,Rarity.UNCOMMON,mage.cards.s.SoldeviMachinist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",339,Rarity.UNCOMMON,mage.cards.s.SoldeviSimulacrum.class));
  cards.add(new SetCardInfo(""String_Node_Str"",160,Rarity.COMMON,mage.cards.s.SongsOfTheDamned.class));
  cards.add(new SetCardInfo(""String_Node_Str"",103,Rarity.UNCOMMON,mage.cards.s.SoulBarrier.class));
  cards.add(new SetCardInfo(""String_Node_Str"",161,Rarity.COMMON,mage.cards.s.SoulBurn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",162,Rarity.COMMON,mage.cards.s.SoulKiss.class));
  cards.add(new SetCardInfo(""String_Node_Str"",163,Rarity.RARE,mage.cards.s.SpoilsOfEvil.class));
  cards.add(new SetCardInfo(""String_Node_Str"",340,Rarity.RARE,mage.cards.s.StaffOfTheAges.class));
  cards.add(new SetCardInfo(""String_Node_Str"",265,Rarity.RARE,mage.cards.s.Stampede.class));
  cards.add(new SetCardInfo(""String_Node_Str"",217,Rarity.COMMON,mage.cards.s.StoneRain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",218,Rarity.UNCOMMON,mage.cards.s.StoneSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",219,Rarity.COMMON,mage.cards.s.Stonehands.class));
  cards.add(new SetCardInfo(""String_Node_Str"",303,Rarity.RARE,mage.cards.s.StormSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",304,Rarity.RARE,mage.cards.s.Stormbind.class));
  cards.add(new SetCardInfo(""String_Node_Str"",166,Rarity.RARE,mage.cards.s.StromgaldCabal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",266,Rarity.RARE,mage.cards.s.StuntedGrowth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",360,Rarity.RARE,mage.cards.s.SulfurousSprings.class));
  cards.add(new SetCardInfo(""String_Node_Str"",341,Rarity.UNCOMMON,mage.cards.s.Sunstone.class));
  cards.add(new SetCardInfo(""String_Node_Str"",373,Rarity.LAND,mage.cards.basiclands.Swamp.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",374,Rarity.LAND,mage.cards.basiclands.Swamp.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",375,Rarity.LAND,mage.cards.basiclands.Swamp.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",54,Rarity.UNCOMMON,mage.cards.s.SwordsToPlowshares.class));
  cards.add(new SetCardInfo(""String_Node_Str"",267,Rarity.COMMON,mage.cards.t.Tarpan.class));
  cards.add(new SetCardInfo(""String_Node_Str"",268,Rarity.UNCOMMON,mage.cards.t.Thermokarst.class));
  cards.add(new SetCardInfo(""String_Node_Str"",269,Rarity.UNCOMMON,mage.cards.t.Thoughtleech.class));
  cards.add(new SetCardInfo(""String_Node_Str"",104,Rarity.UNCOMMON,mage.cards.t.ThunderWall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",361,Rarity.RARE,mage.cards.t.TimberlineRidge.class));
  cards.add(new SetCardInfo(""String_Node_Str"",342,Rarity.RARE,mage.cards.t.TimeBomb.class));
  cards.add(new SetCardInfo(""String_Node_Str"",270,Rarity.COMMON,mage.cards.t.TinderWall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",220,Rarity.COMMON,mage.cards.t.TorGiant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",221,Rarity.RARE,mage.cards.t.TotalWar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",167,Rarity.COMMON,mage.cards.t.TouchOfDeath.class));
  cards.add(new SetCardInfo(""String_Node_Str"",272,Rarity.RARE,mage.cards.t.Trailblazer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",362,Rarity.RARE,mage.cards.u.UndergroundRiver.class));
  cards.add(new SetCardInfo(""String_Node_Str"",105,Rarity.UNCOMMON,mage.cards.u.Updraft.class));
  cards.add(new SetCardInfo(""String_Node_Str"",343,Rarity.UNCOMMON,mage.cards.u.UrzasBauble.class));
  cards.add(new SetCardInfo(""String_Node_Str"",363,Rarity.RARE,mage.cards.v.Veldt.class));
  cards.add(new SetCardInfo(""String_Node_Str"",273,Rarity.UNCOMMON,mage.cards.v.VenomousBreath.class));
  cards.add(new SetCardInfo(""String_Node_Str"",222,Rarity.UNCOMMON,mage.cards.v.Vertigo.class));
  cards.add(new SetCardInfo(""String_Node_Str"",344,Rarity.RARE,mage.cards.v.VexingArcanix.class));
  cards.add(new SetCardInfo(""String_Node_Str"",345,Rarity.RARE,mage.cards.v.VibratingSphere.class));
  cards.add(new SetCardInfo(""String_Node_Str"",346,Rarity.UNCOMMON,mage.cards.w.WalkingWall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",223,Rarity.UNCOMMON,mage.cards.w.WallOfLava.class));
  cards.add(new SetCardInfo(""String_Node_Str"",274,Rarity.UNCOMMON,mage.cards.w.WallOfPineNeedles.class));
  cards.add(new SetCardInfo(""String_Node_Str"",347,Rarity.UNCOMMON,mage.cards.w.WallOfShields.class));
  cards.add(new SetCardInfo(""String_Node_Str"",348,Rarity.UNCOMMON,mage.cards.w.WarChariot.class));
  cards.add(new SetCardInfo(""String_Node_Str"",55,Rarity.COMMON,mage.cards.w.Warning.class));
  cards.add(new SetCardInfo(""String_Node_Str"",349,Rarity.UNCOMMON,mage.cards.w.WhaleboneGlider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",56,Rarity.UNCOMMON,mage.cards.w.WhiteScarab.class));
  cards.add(new SetCardInfo(""String_Node_Str"",275,Rarity.UNCOMMON,mage.cards.w.Whiteout.class));
  cards.add(new SetCardInfo(""String_Node_Str"",277,Rarity.COMMON,mage.cards.w.WildGrowth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",106,Rarity.UNCOMMON,mage.cards.w.WindSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",305,Rarity.UNCOMMON,mage.cards.w.WingsOfAesthir.class));
  cards.add(new SetCardInfo(""String_Node_Str"",168,Rarity.UNCOMMON,mage.cards.w.WitheringWisps.class));
  cards.add(new SetCardInfo(""String_Node_Str"",278,Rarity.COMMON,mage.cards.w.WoollyMammoths.class));
  cards.add(new SetCardInfo(""String_Node_Str"",279,Rarity.COMMON,mage.cards.w.WoollySpider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",224,Rarity.UNCOMMON,mage.cards.w.WordOfBlasting.class));
  cards.add(new SetCardInfo(""String_Node_Str"",108,Rarity.COMMON,mage.cards.w.WordOfUndoing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",109,Rarity.RARE,mage.cards.w.WrathOfMaritLage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",280,Rarity.UNCOMMON,mage.cards.y.YavimayaGnats.class));
  cards.add(new SetCardInfo(""String_Node_Str"",110,Rarity.RARE,mage.cards.z.ZursWeirding.class));
  cards.add(new SetCardInfo(""String_Node_Str"",111,Rarity.COMMON,mage.cards.z.ZuranEnchanter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",350,Rarity.UNCOMMON,mage.cards.z.ZuranOrb.class));
  cards.add(new SetCardInfo(""String_Node_Str"",112,Rarity.COMMON,mage.cards.z.ZuranSpellcaster.class));
}","private IceAge(){
  super(""String_Node_Str"",""String_Node_Str"",ExpansionSet.buildDate(1995,5,1),SetType.EXPANSION);
  this.blockName=""String_Node_Str"";
  this.hasBoosters=true;
  this.numBoosterLands=0;
  this.numBoosterCommon=11;
  this.numBoosterUncommon=3;
  this.numBoosterRare=1;
  this.ratioBoosterMythic=0;
  cards.add(new SetCardInfo(""String_Node_Str"",113,Rarity.UNCOMMON,mage.cards.a.AbyssalSpecter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",306,Rarity.UNCOMMON,mage.cards.a.AdarkarSentinel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",351,Rarity.RARE,mage.cards.a.AdarkarWastes.class));
  cards.add(new SetCardInfo(""String_Node_Str"",307,Rarity.RARE,mage.cards.a.AegisOfTheMeek.class));
  cards.add(new SetCardInfo(""String_Node_Str"",281,Rarity.RARE,mage.cards.a.AltarOfBone.class));
  cards.add(new SetCardInfo(""String_Node_Str"",170,Rarity.UNCOMMON,mage.cards.a.Anarchy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",3,Rarity.COMMON,mage.cards.a.ArensonsAura.class));
  cards.add(new SetCardInfo(""String_Node_Str"",4,Rarity.COMMON,mage.cards.a.ArmorOfFaith.class));
  cards.add(new SetCardInfo(""String_Node_Str"",57,Rarity.COMMON,mage.cards.a.ArnjlotsAscent.class));
  cards.add(new SetCardInfo(""String_Node_Str"",114,Rarity.UNCOMMON,mage.cards.a.AshenGhoul.class));
  cards.add(new SetCardInfo(""String_Node_Str"",225,Rarity.COMMON,mage.cards.a.Aurochs.class));
  cards.add(new SetCardInfo(""String_Node_Str"",171,Rarity.UNCOMMON,mage.cards.a.Avalanche.class));
  cards.add(new SetCardInfo(""String_Node_Str"",172,Rarity.COMMON,mage.cards.b.BalduvianBarbarians.class));
  cards.add(new SetCardInfo(""String_Node_Str"",226,Rarity.COMMON,mage.cards.b.BalduvianBears.class));
  cards.add(new SetCardInfo(""String_Node_Str"",58,Rarity.UNCOMMON,mage.cards.b.BalduvianConjurer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",173,Rarity.RARE,mage.cards.b.BalduvianHydra.class));
  cards.add(new SetCardInfo(""String_Node_Str"",312,Rarity.COMMON,mage.cards.b.BarbedSextant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",313,Rarity.UNCOMMON,mage.cards.b.BatonOfMorale.class));
  cards.add(new SetCardInfo(""String_Node_Str"",5,Rarity.UNCOMMON,mage.cards.b.BattleCry.class));
  cards.add(new SetCardInfo(""String_Node_Str"",175,Rarity.COMMON,mage.cards.b.BattleFrenzy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",60,Rarity.UNCOMMON,mage.cards.b.BindingGrasp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",6,Rarity.UNCOMMON,mage.cards.b.BlackScarab.class));
  cards.add(new SetCardInfo(""String_Node_Str"",7,Rarity.COMMON,mage.cards.b.BlessedWine.class));
  cards.add(new SetCardInfo(""String_Node_Str"",8,Rarity.RARE,mage.cards.b.BlinkingSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",227,Rarity.RARE,mage.cards.b.Blizzard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",9,Rarity.UNCOMMON,mage.cards.b.BlueScarab.class));
  cards.add(new SetCardInfo(""String_Node_Str"",61,Rarity.COMMON,mage.cards.b.Brainstorm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",177,Rarity.RARE,mage.cards.b.BrandOfIllOmen.class));
  cards.add(new SetCardInfo(""String_Node_Str"",62,Rarity.UNCOMMON,mage.cards.b.BreathOfDreams.class));
  cards.add(new SetCardInfo(""String_Node_Str"",115,Rarity.COMMON,mage.cards.b.BrineShaman.class));
  cards.add(new SetCardInfo(""String_Node_Str"",228,Rarity.COMMON,mage.cards.b.BrownOuphe.class));
  cards.add(new SetCardInfo(""String_Node_Str"",352,Rarity.RARE,mage.cards.b.Brushland.class));
  cards.add(new SetCardInfo(""String_Node_Str"",116,Rarity.COMMON,mage.cards.b.BurntOffering.class));
  cards.add(new SetCardInfo(""String_Node_Str"",10,Rarity.RARE,mage.cards.c.CallToArms.class));
  cards.add(new SetCardInfo(""String_Node_Str"",11,Rarity.RARE,mage.cards.c.CaribouRange.class));
  cards.add(new SetCardInfo(""String_Node_Str"",314,Rarity.RARE,mage.cards.c.CelestialSword.class));
  cards.add(new SetCardInfo(""String_Node_Str"",282,Rarity.UNCOMMON,mage.cards.c.CentaurArcher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",179,Rarity.RARE,mage.cards.c.ChaosMoon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",229,Rarity.COMMON,mage.cards.c.ChubToad.class));
  cards.add(new SetCardInfo(""String_Node_Str"",12,Rarity.COMMON,mage.cards.c.CircleOfProtectionBlack.class));
  cards.add(new SetCardInfo(""String_Node_Str"",13,Rarity.COMMON,mage.cards.c.CircleOfProtectionBlue.class));
  cards.add(new SetCardInfo(""String_Node_Str"",14,Rarity.COMMON,mage.cards.c.CircleOfProtectionGreen.class));
  cards.add(new SetCardInfo(""String_Node_Str"",15,Rarity.COMMON,mage.cards.c.CircleOfProtectionRed.class));
  cards.add(new SetCardInfo(""String_Node_Str"",16,Rarity.COMMON,mage.cards.c.CircleOfProtectionWhite.class));
  cards.add(new SetCardInfo(""String_Node_Str"",63,Rarity.COMMON,mage.cards.c.Clairvoyance.class));
  cards.add(new SetCardInfo(""String_Node_Str"",17,Rarity.UNCOMMON,mage.cards.c.ColdSnap.class));
  cards.add(new SetCardInfo(""String_Node_Str"",180,Rarity.UNCOMMON,mage.cards.c.Conquer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",18,Rarity.COMMON,mage.cards.c.Cooperation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",64,Rarity.COMMON,mage.cards.c.Counterspell.class));
  cards.add(new SetCardInfo(""String_Node_Str"",315,Rarity.RARE,mage.cards.c.CrownOfTheAges.class));
  cards.add(new SetCardInfo(""String_Node_Str"",181,Rarity.RARE,mage.cards.c.CurseOfMaritLage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",118,Rarity.UNCOMMON,mage.cards.d.DanceOfTheDead.class));
  cards.add(new SetCardInfo(""String_Node_Str"",119,Rarity.COMMON,mage.cards.d.DarkBanishing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",120,Rarity.COMMON,mage.cards.d.DarkRitual.class));
  cards.add(new SetCardInfo(""String_Node_Str"",19,Rarity.COMMON,mage.cards.d.DeathWard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",65,Rarity.RARE,mage.cards.d.Deflection.class));
  cards.add(new SetCardInfo(""String_Node_Str"",121,Rarity.UNCOMMON,mage.cards.d.DemonicConsultation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",316,Rarity.RARE,mage.cards.d.DespoticScepter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",284,Rarity.UNCOMMON,mage.cards.d.DiabolicVision.class));
  cards.add(new SetCardInfo(""String_Node_Str"",230,Rarity.COMMON,mage.cards.d.DireWolves.class));
  cards.add(new SetCardInfo(""String_Node_Str"",20,Rarity.COMMON,mage.cards.d.Disenchant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",66,Rarity.UNCOMMON,mage.cards.d.DreamsOfTheDead.class));
  cards.add(new SetCardInfo(""String_Node_Str"",123,Rarity.UNCOMMON,mage.cards.d.DriftOfTheDead.class));
  cards.add(new SetCardInfo(""String_Node_Str"",21,Rarity.UNCOMMON,mage.cards.d.Drought.class));
  cards.add(new SetCardInfo(""String_Node_Str"",182,Rarity.RARE,mage.cards.d.DwarvenArmory.class));
  cards.add(new SetCardInfo(""String_Node_Str"",285,Rarity.RARE,mage.cards.e.Earthlink.class));
  cards.add(new SetCardInfo(""String_Node_Str"",231,Rarity.COMMON,mage.cards.e.Earthlore.class));
  cards.add(new SetCardInfo(""String_Node_Str"",232,Rarity.RARE,mage.cards.e.ElderDruid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",286,Rarity.RARE,mage.cards.e.ElementalAugury.class));
  cards.add(new SetCardInfo(""String_Node_Str"",317,Rarity.RARE,mage.cards.e.ElkinBottle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",23,Rarity.RARE,mage.cards.e.EnduringRenewal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",24,Rarity.RARE,mage.cards.e.EnergyStorm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",67,Rarity.COMMON,mage.cards.e.Enervate.class));
  cards.add(new SetCardInfo(""String_Node_Str"",183,Rarity.COMMON,mage.cards.e.Errantry.class));
  cards.add(new SetCardInfo(""String_Node_Str"",233,Rarity.COMMON,mage.cards.e.EssenceFilter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",69,Rarity.COMMON,mage.cards.e.EssenceFlare.class));
  cards.add(new SetCardInfo(""String_Node_Str"",234,Rarity.UNCOMMON,mage.cards.f.FanaticalFever.class));
  cards.add(new SetCardInfo(""String_Node_Str"",124,Rarity.COMMON,mage.cards.f.Fear.class));
  cards.add(new SetCardInfo(""String_Node_Str"",288,Rarity.RARE,mage.cards.f.FieryJustice.class));
  cards.add(new SetCardInfo(""String_Node_Str"",289,Rarity.UNCOMMON,mage.cards.f.FireCovenant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",184,Rarity.UNCOMMON,mage.cards.f.FlameSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",185,Rarity.COMMON,mage.cards.f.Flare.class));
  cards.add(new SetCardInfo(""String_Node_Str"",290,Rarity.RARE,mage.cards.f.FloodedWoodlands.class));
  cards.add(new SetCardInfo(""String_Node_Str"",125,Rarity.RARE,mage.cards.f.FlowOfMaggots.class));
  cards.add(new SetCardInfo(""String_Node_Str"",235,Rarity.COMMON,mage.cards.f.FolkOfThePines.class));
  cards.add(new SetCardInfo(""String_Node_Str"",236,Rarity.RARE,mage.cards.f.ForbiddenLore.class));
  cards.add(new SetCardInfo(""String_Node_Str"",70,Rarity.UNCOMMON,mage.cards.f.ForceVoid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",380,Rarity.LAND,mage.cards.basiclands.Forest.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",381,Rarity.LAND,mage.cards.basiclands.Forest.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",382,Rarity.LAND,mage.cards.basiclands.Forest.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",237,Rarity.UNCOMMON,mage.cards.f.ForgottenLore.class));
  cards.add(new SetCardInfo(""String_Node_Str"",25,Rarity.RARE,mage.cards.f.Formation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",126,Rarity.COMMON,mage.cards.f.FoulFamiliar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",238,Rarity.COMMON,mage.cards.f.Foxfire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",240,Rarity.UNCOMMON,mage.cards.f.FreyalisesCharm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",291,Rarity.UNCOMMON,mage.cards.f.Fumarole.class));
  cards.add(new SetCardInfo(""String_Node_Str"",318,Rarity.UNCOMMON,mage.cards.f.FyndhornBow.class));
  cards.add(new SetCardInfo(""String_Node_Str"",242,Rarity.COMMON,mage.cards.f.FyndhornBrownie.class));
  cards.add(new SetCardInfo(""String_Node_Str"",243,Rarity.UNCOMMON,mage.cards.f.FyndhornElder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",244,Rarity.COMMON,mage.cards.f.FyndhornElves.class));
  cards.add(new SetCardInfo(""String_Node_Str"",245,Rarity.RARE,mage.cards.f.FyndhornPollen.class));
  cards.add(new SetCardInfo(""String_Node_Str"",186,Rarity.RARE,mage.cards.g.GameOfChaos.class));
  cards.add(new SetCardInfo(""String_Node_Str"",127,Rarity.COMMON,mage.cards.g.GangrenousZombies.class));
  cards.add(new SetCardInfo(""String_Node_Str"",27,Rarity.RARE,mage.cards.g.GeneralJarkeld.class));
  cards.add(new SetCardInfo(""String_Node_Str"",246,Rarity.COMMON,mage.cards.g.GiantGrowth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",293,Rarity.UNCOMMON,mage.cards.g.GiantTrapDoorSpider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",353,Rarity.UNCOMMON,mage.cards.g.GlacialChasm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",187,Rarity.RARE,mage.cards.g.GlacialCrevasses.class));
  cards.add(new SetCardInfo(""String_Node_Str"",71,Rarity.UNCOMMON,mage.cards.g.GlacialWall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",319,Rarity.RARE,mage.cards.g.GoblinLyre.class));
  cards.add(new SetCardInfo(""String_Node_Str"",188,Rarity.UNCOMMON,mage.cards.g.GoblinMutant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",191,Rarity.UNCOMMON,mage.cards.g.GoblinSnowman.class));
  cards.add(new SetCardInfo(""String_Node_Str"",247,Rarity.COMMON,mage.cards.g.GorillaPack.class));
  cards.add(new SetCardInfo(""String_Node_Str"",129,Rarity.RARE,mage.cards.g.Gravebind.class));
  cards.add(new SetCardInfo(""String_Node_Str"",28,Rarity.UNCOMMON,mage.cards.g.GreenScarab.class));
  cards.add(new SetCardInfo(""String_Node_Str"",29,Rarity.UNCOMMON,mage.cards.h.HallowedGround.class));
  cards.add(new SetCardInfo(""String_Node_Str"",354,Rarity.RARE,mage.cards.h.HallsOfMist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",30,Rarity.COMMON,mage.cards.h.Heal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",130,Rarity.RARE,mage.cards.h.Hecatomb.class));
  cards.add(new SetCardInfo(""String_Node_Str"",320,Rarity.UNCOMMON,mage.cards.h.HematiteTalisman.class));
  cards.add(new SetCardInfo(""String_Node_Str"",131,Rarity.COMMON,mage.cards.h.HoarShade.class));
  cards.add(new SetCardInfo(""String_Node_Str"",248,Rarity.RARE,mage.cards.h.HotSprings.class));
  cards.add(new SetCardInfo(""String_Node_Str"",132,Rarity.COMMON,mage.cards.h.HowlFromBeyond.class));
  cards.add(new SetCardInfo(""String_Node_Str"",249,Rarity.UNCOMMON,mage.cards.h.Hurricane.class));
  cards.add(new SetCardInfo(""String_Node_Str"",133,Rarity.UNCOMMON,mage.cards.h.HyalopterousLemure.class));
  cards.add(new SetCardInfo(""String_Node_Str"",72,Rarity.COMMON,mage.cards.h.Hydroblast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",295,Rarity.UNCOMMON,mage.cards.h.HymnOfRebirth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",321,Rarity.RARE,mage.cards.i.IceCauldron.class));
  cards.add(new SetCardInfo(""String_Node_Str"",355,Rarity.UNCOMMON,mage.cards.i.IceFloe.class));
  cards.add(new SetCardInfo(""String_Node_Str"",73,Rarity.UNCOMMON,mage.cards.i.Iceberg.class));
  cards.add(new SetCardInfo(""String_Node_Str"",134,Rarity.UNCOMMON,mage.cards.i.Icequake.class));
  cards.add(new SetCardInfo(""String_Node_Str"",322,Rarity.UNCOMMON,mage.cards.i.IcyManipulator.class));
  cards.add(new SetCardInfo(""String_Node_Str"",74,Rarity.RARE,mage.cards.i.IcyPrison.class));
  cards.add(new SetCardInfo(""String_Node_Str"",75,Rarity.COMMON,mage.cards.i.IllusionaryForces.class));
  cards.add(new SetCardInfo(""String_Node_Str"",78,Rarity.COMMON,mage.cards.i.IllusionaryWall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",79,Rarity.RARE,mage.cards.i.IllusionsOfGrandeur.class));
  cards.add(new SetCardInfo(""String_Node_Str"",193,Rarity.COMMON,mage.cards.i.ImposingVisage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",194,Rarity.COMMON,mage.cards.i.Incinerate.class));
  cards.add(new SetCardInfo(""String_Node_Str"",135,Rarity.RARE,mage.cards.i.InfernalDarkness.class));
  cards.add(new SetCardInfo(""String_Node_Str"",136,Rarity.RARE,mage.cards.i.InfernalDenizen.class));
  cards.add(new SetCardInfo(""String_Node_Str"",323,Rarity.RARE,mage.cards.i.InfiniteHourglass.class));
  cards.add(new SetCardInfo(""String_Node_Str"",80,Rarity.COMMON,mage.cards.i.Infuse.class));
  cards.add(new SetCardInfo(""String_Node_Str"",368,Rarity.LAND,mage.cards.basiclands.Island.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",369,Rarity.LAND,mage.cards.basiclands.Island.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",370,Rarity.LAND,mage.cards.basiclands.Island.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",324,Rarity.RARE,mage.cards.j.JestersCap.class));
  cards.add(new SetCardInfo(""String_Node_Str"",325,Rarity.RARE,mage.cards.j.JestersMask.class));
  cards.add(new SetCardInfo(""String_Node_Str"",326,Rarity.UNCOMMON,mage.cards.j.JeweledAmulet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",250,Rarity.UNCOMMON,mage.cards.j.JohtullWurm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",195,Rarity.RARE,mage.cards.j.Jokulhaups.class));
  cards.add(new SetCardInfo(""String_Node_Str"",251,Rarity.COMMON,mage.cards.j.JuniperOrderDruid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",32,Rarity.UNCOMMON,mage.cards.j.Justice.class));
  cards.add(new SetCardInfo(""String_Node_Str"",356,Rarity.RARE,mage.cards.k.KarplusanForest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",196,Rarity.UNCOMMON,mage.cards.k.KarplusanGiant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",197,Rarity.RARE,mage.cards.k.KarplusanYeti.class));
  cards.add(new SetCardInfo(""String_Node_Str"",33,Rarity.COMMON,mage.cards.k.KelsinkoRanger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",137,Rarity.COMMON,mage.cards.k.KjeldoranDead.class));
  cards.add(new SetCardInfo(""String_Node_Str"",296,Rarity.UNCOMMON,mage.cards.k.KjeldoranFrostbeast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",36,Rarity.RARE,mage.cards.k.KjeldoranKnight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",37,Rarity.RARE,mage.cards.k.KjeldoranPhalanx.class));
  cards.add(new SetCardInfo(""String_Node_Str"",38,Rarity.RARE,mage.cards.k.KjeldoranRoyalGuard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",39,Rarity.UNCOMMON,mage.cards.k.KjeldoranSkycaptain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",40,Rarity.COMMON,mage.cards.k.KjeldoranSkyknight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",41,Rarity.COMMON,mage.cards.k.KjeldoranWarrior.class));
  cards.add(new SetCardInfo(""String_Node_Str"",138,Rarity.UNCOMMON,mage.cards.k.KnightOfStromgald.class));
  cards.add(new SetCardInfo(""String_Node_Str"",27,Rarity.UNCOMMON,mage.cards.k.KrovikanElementalist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",140,Rarity.COMMON,mage.cards.k.KrovikanFetish.class));
  cards.add(new SetCardInfo(""String_Node_Str"",139,Rarity.COMMON,mage.cards.k.KrovikanSorcerer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",357,Rarity.RARE,mage.cards.l.LandCap.class));
  cards.add(new SetCardInfo(""String_Node_Str"",327,Rarity.UNCOMMON,mage.cards.l.LapisLazuliTalisman.class));
  cards.add(new SetCardInfo(""String_Node_Str"",358,Rarity.RARE,mage.cards.l.LavaTubes.class));
  cards.add(new SetCardInfo(""String_Node_Str"",142,Rarity.COMMON,mage.cards.l.LegionsOfLimDul.class));
  cards.add(new SetCardInfo(""String_Node_Str"",143,Rarity.UNCOMMON,mage.cards.l.LeshracsRite.class));
  cards.add(new SetCardInfo(""String_Node_Str"",144,Rarity.UNCOMMON,mage.cards.l.LeshracsSigil.class));
  cards.add(new SetCardInfo(""String_Node_Str"",252,Rarity.RARE,mage.cards.l.Lhurgoyf.class));
  cards.add(new SetCardInfo(""String_Node_Str"",42,Rarity.RARE,mage.cards.l.LightningBlow.class));
  cards.add(new SetCardInfo(""String_Node_Str"",146,Rarity.UNCOMMON,mage.cards.l.LimDulsHex.class));
  cards.add(new SetCardInfo(""String_Node_Str"",253,Rarity.UNCOMMON,mage.cards.l.Lure.class));
  cards.add(new SetCardInfo(""String_Node_Str"",82,Rarity.RARE,mage.cards.m.MagusOfTheUnseen.class));
  cards.add(new SetCardInfo(""String_Node_Str"",328,Rarity.UNCOMMON,mage.cards.m.MalachiteTalisman.class));
  cards.add(new SetCardInfo(""String_Node_Str"",204,Rarity.RARE,mage.cards.m.MartonStromgald.class));
  cards.add(new SetCardInfo(""String_Node_Str"",199,Rarity.UNCOMMON,mage.cards.m.Melee.class));
  cards.add(new SetCardInfo(""String_Node_Str"",200,Rarity.UNCOMMON,mage.cards.m.Melting.class));
  cards.add(new SetCardInfo(""String_Node_Str"",297,Rarity.RARE,mage.cards.m.MeriekeRiBerit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",83,Rarity.RARE,mage.cards.m.MesmericTrance.class));
  cards.add(new SetCardInfo(""String_Node_Str"",201,Rarity.COMMON,mage.cards.m.MeteorShower.class));
  cards.add(new SetCardInfo(""String_Node_Str"",147,Rarity.COMMON,mage.cards.m.MindRavel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",148,Rarity.UNCOMMON,mage.cards.m.MindWarp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",150,Rarity.RARE,mage.cards.m.MinionOfLeshrac.class));
  cards.add(new SetCardInfo(""String_Node_Str"",151,Rarity.RARE,mage.cards.m.MinionOfTeveshSzat.class));
  cards.add(new SetCardInfo(""String_Node_Str"",152,Rarity.UNCOMMON,mage.cards.m.MoleWorms.class));
  cards.add(new SetCardInfo(""String_Node_Str"",298,Rarity.RARE,mage.cards.m.Monsoon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",153,Rarity.COMMON,mage.cards.m.MoorFiend.class));
  cards.add(new SetCardInfo(""String_Node_Str"",202,Rarity.COMMON,mage.cards.m.MountainGoat.class));
  cards.add(new SetCardInfo(""String_Node_Str"",299,Rarity.RARE,mage.cards.m.MountainTitan.class));
  cards.add(new SetCardInfo(""String_Node_Str"",376,Rarity.LAND,mage.cards.basiclands.Mountain.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",377,Rarity.LAND,mage.cards.basiclands.Mountain.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",378,Rarity.LAND,mage.cards.basiclands.Mountain.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",203,Rarity.RARE,mage.cards.m.Mudslide.class));
  cards.add(new SetCardInfo(""String_Node_Str"",86,Rarity.RARE,mage.cards.m.MysticMight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",87,Rarity.COMMON,mage.cards.m.MysticRemora.class));
  cards.add(new SetCardInfo(""String_Node_Str"",329,Rarity.UNCOMMON,mage.cards.n.NacreTalisman.class));
  cards.add(new SetCardInfo(""String_Node_Str"",330,Rarity.RARE,mage.cards.n.NakedSingularity.class));
  cards.add(new SetCardInfo(""String_Node_Str"",255,Rarity.UNCOMMON,mage.cards.n.NaturesLore.class));
  cards.add(new SetCardInfo(""String_Node_Str"",154,Rarity.RARE,mage.cards.n.Necropotence.class));
  cards.add(new SetCardInfo(""String_Node_Str"",155,Rarity.COMMON,mage.cards.n.Norritt.class));
  cards.add(new SetCardInfo(""String_Node_Str"",331,Rarity.UNCOMMON,mage.cards.o.OnyxTalisman.class));
  cards.add(new SetCardInfo(""String_Node_Str"",205,Rarity.UNCOMMON,mage.cards.o.OrcishCannoneers.class));
  cards.add(new SetCardInfo(""String_Node_Str"",208,Rarity.UNCOMMON,mage.cards.o.OrcishHealer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",209,Rarity.RARE,mage.cards.o.OrcishLibrarian.class));
  cards.add(new SetCardInfo(""String_Node_Str"",210,Rarity.COMMON,mage.cards.o.OrcishLumberjack.class));
  cards.add(new SetCardInfo(""String_Node_Str"",211,Rarity.RARE,mage.cards.o.OrcishSquatters.class));
  cards.add(new SetCardInfo(""String_Node_Str"",45,Rarity.RARE,mage.cards.o.OrderOfTheSacredTorch.class));
  cards.add(new SetCardInfo(""String_Node_Str"",46,Rarity.UNCOMMON,mage.cards.o.OrderOfTheWhiteShield.class));
  cards.add(new SetCardInfo(""String_Node_Str"",256,Rarity.RARE,mage.cards.p.PaleBears.class));
  cards.add(new SetCardInfo(""String_Node_Str"",212,Rarity.COMMON,mage.cards.p.Panic.class));
  cards.add(new SetCardInfo(""String_Node_Str"",332,Rarity.RARE,mage.cards.p.PentagramOfTheAges.class));
  cards.add(new SetCardInfo(""String_Node_Str"",157,Rarity.COMMON,mage.cards.p.PestilenceRats.class));
  cards.add(new SetCardInfo(""String_Node_Str"",333,Rarity.UNCOMMON,mage.cards.p.PitTrap.class));
  cards.add(new SetCardInfo(""String_Node_Str"",364,Rarity.LAND,mage.cards.basiclands.Plains.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",365,Rarity.LAND,mage.cards.basiclands.Plains.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",366,Rarity.LAND,mage.cards.basiclands.Plains.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",89,Rarity.RARE,mage.cards.p.PolarKraken.class));
  cards.add(new SetCardInfo(""String_Node_Str"",90,Rarity.COMMON,mage.cards.p.Portent.class));
  cards.add(new SetCardInfo(""String_Node_Str"",91,Rarity.COMMON,mage.cards.p.PowerSink.class));
  cards.add(new SetCardInfo(""String_Node_Str"",158,Rarity.RARE,mage.cards.p.Pox.class));
  cards.add(new SetCardInfo(""String_Node_Str"",47,Rarity.COMMON,mage.cards.p.PrismaticWard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",257,Rarity.RARE,mage.cards.p.PygmyAllosaurus.class));
  cards.add(new SetCardInfo(""String_Node_Str"",258,Rarity.COMMON,mage.cards.p.Pyknite.class));
  cards.add(new SetCardInfo(""String_Node_Str"",213,Rarity.COMMON,mage.cards.p.Pyroblast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",214,Rarity.UNCOMMON,mage.cards.p.Pyroclasm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",48,Rarity.COMMON,mage.cards.r.Rally.class));
  cards.add(new SetCardInfo(""String_Node_Str"",92,Rarity.COMMON,mage.cards.r.RayOfCommand.class));
  cards.add(new SetCardInfo(""String_Node_Str"",93,Rarity.COMMON,mage.cards.r.RayOfErasure.class));
  cards.add(new SetCardInfo(""String_Node_Str"",94,Rarity.RARE,mage.cards.r.RealityTwist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",300,Rarity.RARE,mage.cards.r.Reclamation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",49,Rarity.UNCOMMON,mage.cards.r.RedScarab.class));
  cards.add(new SetCardInfo(""String_Node_Str"",259,Rarity.COMMON,mage.cards.r.Regeneration.class));
  cards.add(new SetCardInfo(""String_Node_Str"",260,Rarity.COMMON,mage.cards.r.RimeDryad.class));
  cards.add(new SetCardInfo(""String_Node_Str"",261,Rarity.RARE,mage.cards.r.RitualOfSubdual.class));
  cards.add(new SetCardInfo(""String_Node_Str"",359,Rarity.RARE,mage.cards.r.RiverDelta.class));
  cards.add(new SetCardInfo(""String_Node_Str"",334,Rarity.RARE,mage.cards.r.RunedArch.class));
  cards.add(new SetCardInfo(""String_Node_Str"",215,Rarity.COMMON,mage.cards.s.SabretoothTiger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",262,Rarity.COMMON,mage.cards.s.ScaledWurm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",95,Rarity.UNCOMMON,mage.cards.s.SeaSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",159,Rarity.COMMON,mage.cards.s.Seizures.class));
  cards.add(new SetCardInfo(""String_Node_Str"",263,Rarity.COMMON,mage.cards.s.ShamblingStrider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",216,Rarity.COMMON,mage.cards.s.Shatter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",52,Rarity.COMMON,mage.cards.s.ShieldBearer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",335,Rarity.UNCOMMON,mage.cards.s.ShieldOfTheAges.class));
  cards.add(new SetCardInfo(""String_Node_Str"",96,Rarity.RARE,mage.cards.s.Shyft.class));
  cards.add(new SetCardInfo(""String_Node_Str"",97,Rarity.RARE,mage.cards.s.SibilantSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",98,Rarity.UNCOMMON,mage.cards.s.SilverErne.class));
  cards.add(new SetCardInfo(""String_Node_Str"",301,Rarity.RARE,mage.cards.s.SkeletonShip.class));
  cards.add(new SetCardInfo(""String_Node_Str"",336,Rarity.UNCOMMON,mage.cards.s.SkullCatapult.class));
  cards.add(new SetCardInfo(""String_Node_Str"",337,Rarity.RARE,mage.cards.s.SnowFortress.class));
  cards.add(new SetCardInfo(""String_Node_Str"",53,Rarity.UNCOMMON,mage.cards.s.SnowHound.class));
  cards.add(new SetCardInfo(""String_Node_Str"",383,Rarity.LAND,mage.cards.s.SnowCoveredForest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",371,Rarity.LAND,mage.cards.s.SnowCoveredIsland.class));
  cards.add(new SetCardInfo(""String_Node_Str"",379,Rarity.LAND,mage.cards.s.SnowCoveredMountain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",367,Rarity.LAND,mage.cards.s.SnowCoveredPlains.class));
  cards.add(new SetCardInfo(""String_Node_Str"",372,Rarity.LAND,mage.cards.s.SnowCoveredSwamp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",338,Rarity.RARE,mage.cards.s.SoldeviGolem.class));
  cards.add(new SetCardInfo(""String_Node_Str"",102,Rarity.UNCOMMON,mage.cards.s.SoldeviMachinist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",339,Rarity.UNCOMMON,mage.cards.s.SoldeviSimulacrum.class));
  cards.add(new SetCardInfo(""String_Node_Str"",160,Rarity.COMMON,mage.cards.s.SongsOfTheDamned.class));
  cards.add(new SetCardInfo(""String_Node_Str"",103,Rarity.UNCOMMON,mage.cards.s.SoulBarrier.class));
  cards.add(new SetCardInfo(""String_Node_Str"",161,Rarity.COMMON,mage.cards.s.SoulBurn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",162,Rarity.COMMON,mage.cards.s.SoulKiss.class));
  cards.add(new SetCardInfo(""String_Node_Str"",163,Rarity.RARE,mage.cards.s.SpoilsOfEvil.class));
  cards.add(new SetCardInfo(""String_Node_Str"",340,Rarity.RARE,mage.cards.s.StaffOfTheAges.class));
  cards.add(new SetCardInfo(""String_Node_Str"",265,Rarity.RARE,mage.cards.s.Stampede.class));
  cards.add(new SetCardInfo(""String_Node_Str"",217,Rarity.COMMON,mage.cards.s.StoneRain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",218,Rarity.UNCOMMON,mage.cards.s.StoneSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",219,Rarity.COMMON,mage.cards.s.Stonehands.class));
  cards.add(new SetCardInfo(""String_Node_Str"",303,Rarity.RARE,mage.cards.s.StormSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",304,Rarity.RARE,mage.cards.s.Stormbind.class));
  cards.add(new SetCardInfo(""String_Node_Str"",166,Rarity.RARE,mage.cards.s.StromgaldCabal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",266,Rarity.RARE,mage.cards.s.StuntedGrowth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",360,Rarity.RARE,mage.cards.s.SulfurousSprings.class));
  cards.add(new SetCardInfo(""String_Node_Str"",341,Rarity.UNCOMMON,mage.cards.s.Sunstone.class));
  cards.add(new SetCardInfo(""String_Node_Str"",373,Rarity.LAND,mage.cards.basiclands.Swamp.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",374,Rarity.LAND,mage.cards.basiclands.Swamp.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",375,Rarity.LAND,mage.cards.basiclands.Swamp.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",54,Rarity.UNCOMMON,mage.cards.s.SwordsToPlowshares.class));
  cards.add(new SetCardInfo(""String_Node_Str"",267,Rarity.COMMON,mage.cards.t.Tarpan.class));
  cards.add(new SetCardInfo(""String_Node_Str"",268,Rarity.UNCOMMON,mage.cards.t.Thermokarst.class));
  cards.add(new SetCardInfo(""String_Node_Str"",269,Rarity.UNCOMMON,mage.cards.t.Thoughtleech.class));
  cards.add(new SetCardInfo(""String_Node_Str"",104,Rarity.UNCOMMON,mage.cards.t.ThunderWall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",361,Rarity.RARE,mage.cards.t.TimberlineRidge.class));
  cards.add(new SetCardInfo(""String_Node_Str"",342,Rarity.RARE,mage.cards.t.TimeBomb.class));
  cards.add(new SetCardInfo(""String_Node_Str"",270,Rarity.COMMON,mage.cards.t.TinderWall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",220,Rarity.COMMON,mage.cards.t.TorGiant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",221,Rarity.RARE,mage.cards.t.TotalWar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",167,Rarity.COMMON,mage.cards.t.TouchOfDeath.class));
  cards.add(new SetCardInfo(""String_Node_Str"",272,Rarity.RARE,mage.cards.t.Trailblazer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",362,Rarity.RARE,mage.cards.u.UndergroundRiver.class));
  cards.add(new SetCardInfo(""String_Node_Str"",105,Rarity.UNCOMMON,mage.cards.u.Updraft.class));
  cards.add(new SetCardInfo(""String_Node_Str"",343,Rarity.UNCOMMON,mage.cards.u.UrzasBauble.class));
  cards.add(new SetCardInfo(""String_Node_Str"",363,Rarity.RARE,mage.cards.v.Veldt.class));
  cards.add(new SetCardInfo(""String_Node_Str"",273,Rarity.UNCOMMON,mage.cards.v.VenomousBreath.class));
  cards.add(new SetCardInfo(""String_Node_Str"",222,Rarity.UNCOMMON,mage.cards.v.Vertigo.class));
  cards.add(new SetCardInfo(""String_Node_Str"",344,Rarity.RARE,mage.cards.v.VexingArcanix.class));
  cards.add(new SetCardInfo(""String_Node_Str"",345,Rarity.RARE,mage.cards.v.VibratingSphere.class));
  cards.add(new SetCardInfo(""String_Node_Str"",346,Rarity.UNCOMMON,mage.cards.w.WalkingWall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",223,Rarity.UNCOMMON,mage.cards.w.WallOfLava.class));
  cards.add(new SetCardInfo(""String_Node_Str"",274,Rarity.UNCOMMON,mage.cards.w.WallOfPineNeedles.class));
  cards.add(new SetCardInfo(""String_Node_Str"",347,Rarity.UNCOMMON,mage.cards.w.WallOfShields.class));
  cards.add(new SetCardInfo(""String_Node_Str"",348,Rarity.UNCOMMON,mage.cards.w.WarChariot.class));
  cards.add(new SetCardInfo(""String_Node_Str"",55,Rarity.COMMON,mage.cards.w.Warning.class));
  cards.add(new SetCardInfo(""String_Node_Str"",349,Rarity.UNCOMMON,mage.cards.w.WhaleboneGlider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",56,Rarity.UNCOMMON,mage.cards.w.WhiteScarab.class));
  cards.add(new SetCardInfo(""String_Node_Str"",275,Rarity.UNCOMMON,mage.cards.w.Whiteout.class));
  cards.add(new SetCardInfo(""String_Node_Str"",277,Rarity.COMMON,mage.cards.w.WildGrowth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",106,Rarity.UNCOMMON,mage.cards.w.WindSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",305,Rarity.UNCOMMON,mage.cards.w.WingsOfAesthir.class));
  cards.add(new SetCardInfo(""String_Node_Str"",168,Rarity.UNCOMMON,mage.cards.w.WitheringWisps.class));
  cards.add(new SetCardInfo(""String_Node_Str"",278,Rarity.COMMON,mage.cards.w.WoollyMammoths.class));
  cards.add(new SetCardInfo(""String_Node_Str"",279,Rarity.COMMON,mage.cards.w.WoollySpider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",224,Rarity.UNCOMMON,mage.cards.w.WordOfBlasting.class));
  cards.add(new SetCardInfo(""String_Node_Str"",108,Rarity.COMMON,mage.cards.w.WordOfUndoing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",109,Rarity.RARE,mage.cards.w.WrathOfMaritLage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",280,Rarity.UNCOMMON,mage.cards.y.YavimayaGnats.class));
  cards.add(new SetCardInfo(""String_Node_Str"",110,Rarity.RARE,mage.cards.z.ZursWeirding.class));
  cards.add(new SetCardInfo(""String_Node_Str"",111,Rarity.COMMON,mage.cards.z.ZuranEnchanter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",350,Rarity.UNCOMMON,mage.cards.z.ZuranOrb.class));
  cards.add(new SetCardInfo(""String_Node_Str"",112,Rarity.COMMON,mage.cards.z.ZuranSpellcaster.class));
}",0.9999545075441656
157631,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    checkToFirePossibleEvents(getMana(game,source),game,source);
    controller.getManaPool().addMana(getMana(game,source),game,source);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Mana mana=getMana(game,source);
    checkToFirePossibleEvents(mana,game,source);
    controller.getManaPool().addMana(mana,game,source);
    return true;
  }
  return false;
}",0.8707692307692307
157632,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Card card=game.getCard(source.getSourceId());
    if (card != null) {
      ContinuousEffect effect=new EntersBattlefieldEffect(new AddCountersSourceEffect(CounterType.LUCK.createInstance()),""String_Node_Str"");
      effect.setDuration(Duration.OneUse);
      game.addEffect(effect,source);
      if (controller.moveCards(card,Zone.BATTLEFIELD,source,game)) {
        Permanent permanent=game.getPermanent(card.getId());
        if (permanent != null) {
          Cost cost=new ExileFromHandCost(new TargetCardInHand());
          if (cost.canPay(source,source.getSourceId(),source.getControllerId(),game)) {
            cost.pay(source,game,source.getSourceId(),source.getControllerId(),true,null);
          }
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  boolean result=false;
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Card card=game.getCard(source.getSourceId());
    if (card != null) {
      ContinuousEffect effect=new EntersBattlefieldEffect(new AddCountersSourceEffect(CounterType.LUCK.createInstance()),""String_Node_Str"");
      effect.setDuration(Duration.OneUse);
      game.addEffect(effect,source);
      if (controller.moveCards(card,Zone.BATTLEFIELD,source,game)) {
        Permanent permanent=game.getPermanent(card.getId());
        if (permanent != null) {
          Cost cost=new ExileFromHandCost(new TargetCardInHand());
          if (cost.canPay(source,source.getSourceId(),source.getControllerId(),game)) {
            result=cost.pay(source,game,source.getSourceId(),source.getControllerId(),true,null);
          }
        }
      }
    }
  }
  return result;
}",0.9566148901981788
157633,"@Test public void test_DaxosGotBoostWithLoseFlyAndGotItAgain(){
  addCard(Zone.HAND,playerA,daxosCard,1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",4);
  addCard(Zone.HAND,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",3);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,daxosCard);
  castSpell(1,PhaseStep.POSTCOMBAT_MAIN,playerA,""String_Node_Str"");
  setStopAt(1,PhaseStep.END_TURN);
  execute();
  assertHandCount(playerA,daxosCard,0);
  assertPermanentCount(playerA,daxosCard,1);
  assertHandCount(playerA,""String_Node_Str"",0);
  assertPermanentCount(playerA,""String_Node_Str"",1);
  assertPowerToughness(playerA,daxosCard,5,5);
  assertType(daxosCard,CardType.CREATURE,SubType.DEMON);
  assertAbility(playerA,daxosCard,FlyingAbility.getInstance(),true);
  assertAbility(playerA,daxosCard,HasteAbility.getInstance(),true);
}","@Test public void test_DaxosGotBoostWithLoseFlyAndGotItAgain(){
  addCard(Zone.HAND,playerA,daxosCard,1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.HAND,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",6);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,daxosCard);
  castSpell(1,PhaseStep.POSTCOMBAT_MAIN,playerA,""String_Node_Str"");
  setStopAt(1,PhaseStep.END_TURN);
  execute();
  assertHandCount(playerA,daxosCard,0);
  assertPermanentCount(playerA,daxosCard,1);
  assertHandCount(playerA,""String_Node_Str"",0);
  assertPermanentCount(playerA,""String_Node_Str"",1);
  assertPowerToughness(playerA,daxosCard,5,5);
  assertType(daxosCard,CardType.CREATURE,SubType.DEMON);
  assertAbility(playerA,daxosCard,FlyingAbility.getInstance(),true);
  assertAbility(playerA,daxosCard,HasteAbility.getInstance(),true);
}",0.997709049255441
157634,"@Test public void nagaVitalist_GiftOfParadiseCanAnyColor(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",3);
  addCard(Zone.HAND,playerA,giftParadise);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  activateManaAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  activateManaAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  activateManaAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,giftParadise,""String_Node_Str"");
  setStopAt(1,PhaseStep.PRECOMBAT_MAIN);
  execute();
  Assert.assertTrue(""String_Node_Str"",manaOptionsContain(playerA.getManaAvailable(currentGame),""String_Node_Str""));
}","@Test public void nagaVitalist_GiftOfParadiseCanAnyColor(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",3);
  addCard(Zone.HAND,playerA,giftParadise);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  activateManaAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  activateManaAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  activateManaAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,giftParadise,""String_Node_Str"");
  setStopAt(1,PhaseStep.PRECOMBAT_MAIN);
  execute();
  ManaOptions manaOptions=playerA.getAvailableManaTest(currentGame);
  assertDuplicatedManaOptions(manaOptions);
  Assert.assertEquals(""String_Node_Str"",5,manaOptions.size());
  assertManaOptions(""String_Node_Str"",manaOptions);
  assertManaOptions(""String_Node_Str"",manaOptions);
  assertManaOptions(""String_Node_Str"",manaOptions);
  assertManaOptions(""String_Node_Str"",manaOptions);
  assertManaOptions(""String_Node_Str"",manaOptions);
}",0.7396061269146609
157635,"/** 
 * Vorinclex glitches with Gemstone Cavern
 */
@Ignore @Test public void testGemstoneCavern(){
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",1);
  addCard(Zone.HAND,playerB,""String_Node_Str"",1);
  addCard(Zone.HAND,playerB,""String_Node_Str"",2);
  activateManaAbility(2,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"");
  setChoice(playerB,""String_Node_Str"");
  castSpell(2,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"");
  setStopAt(2,PhaseStep.BEGIN_COMBAT);
  execute();
  assertPermanentCount(playerB,""String_Node_Str"",1);
  assertCounterCount(""String_Node_Str"",CounterType.LUCK,1);
  assertPermanentCount(playerB,""String_Node_Str"",1);
  assertExileCount(""String_Node_Str"",1);
  assertTapped(""String_Node_Str"",true);
}","/** 
 * Vorinclex glitches with Gemstone Cavern
 */
@Test public void testGemstoneCavern(){
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",1);
  addCard(Zone.HAND,playerB,""String_Node_Str"",1);
  addCard(Zone.HAND,playerB,""String_Node_Str"",2);
  activateManaAbility(2,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"");
  setChoice(playerB,""String_Node_Str"");
  castSpell(2,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"");
  setStopAt(2,PhaseStep.BEGIN_COMBAT);
  execute();
  assertPermanentCount(playerB,""String_Node_Str"",1);
  assertCounterCount(""String_Node_Str"",CounterType.LUCK,1);
  assertPermanentCount(playerB,""String_Node_Str"",1);
  assertExileCount(""String_Node_Str"",1);
  assertTapped(""String_Node_Str"",true);
}",0.994572591587517
157636,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  Mana mana=getMana(game,source);
  controller.getManaPool().addMana(mana,game,source);
  if (produceMana(true,game,source).getAny() > 0) {
    checkToFirePossibleEvents(mana,game,source);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  Mana mana=getMana(game,source);
  if (produceMana(true,game,source).getAny() > 0) {
    checkToFirePossibleEvents(mana,game,source);
  }
  controller.getManaPool().addMana(mana,game,source);
  return true;
}",0.8575197889182058
157637,"public AddManaOfAnyColorEffect(final AddManaOfAnyColorEffect effect){
  super(effect);
  this.amount=effect.amount;
}","public AddManaOfAnyColorEffect(final AddManaOfAnyColorEffect effect){
  super(effect);
  this.amount=effect.amount;
  this.netMana.addAll(effect.netMana);
}",0.8571428571428571
157638,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    String mes=String.format(""String_Node_Str"",this.amount);
    ChoiceColor choice=new ChoiceColor(true,mes,game.getObject(source.getSourceId()));
    if (controller.choose(outcome,choice,game)) {
      if (choice.getColor() == null) {
        return false;
      }
      Mana createdMana=choice.getMana(amount);
      if (createdMana != null) {
        checkToFirePossibleEvents(createdMana,game,source);
        controller.getManaPool().addMana(createdMana,game,source);
      }
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    checkToFirePossibleEvents(getMana(game,source),game,source);
    controller.getManaPool().addMana(getMana(game,source),game,source);
    return true;
  }
  return false;
}",0.4604604604604604
157639,"@Override public List<Mana> getNetMana(Game game){
  List<Mana> newNetMana=new ArrayList<>();
  newNetMana.add(conditionalManaEffect.getMana(game,this));
  return newNetMana;
}","@Override public List<Mana> getNetMana(Game game){
  List<Mana> newNetMana=new ArrayList<>();
  newNetMana.addAll(conditionalManaEffect.getNetMana(game,this));
  return newNetMana;
}",0.9832402234636872
157640,"public void addMana(Mana manaToAdd,Game game,Ability source,boolean emptyOnTurnsEnd){
  Mana mana=manaToAdd.copy();
  if (!game.replaceEvent(new ManaEvent(EventType.ADD_MANA,source.getId(),source.getSourceId(),playerId,mana))) {
    if (mana instanceof ConditionalMana) {
      ManaPoolItem item=new ManaPoolItem((ConditionalMana)mana,source.getSourceObject(game),((ConditionalMana)mana).getManaProducerOriginalId() != null ? ((ConditionalMana)mana).getManaProducerOriginalId() : source.getOriginalId());
      if (emptyOnTurnsEnd) {
        item.setDuration(Duration.EndOfTurn);
      }
      this.manaItems.add(item);
    }
 else {
      ManaPoolItem item=new ManaPoolItem(mana.getRed(),mana.getGreen(),mana.getBlue(),mana.getWhite(),mana.getBlack(),mana.getGeneric() + mana.getColorless(),source.getSourceObject(game),source.getOriginalId(),mana.getFlag());
      if (emptyOnTurnsEnd) {
        item.setDuration(Duration.EndOfTurn);
      }
      this.manaItems.add(item);
    }
    ManaEvent manaEvent=new ManaEvent(EventType.MANA_ADDED,source.getId(),source.getSourceId(),playerId,mana);
    manaEvent.setData(mana.toString());
    game.fireEvent(manaEvent);
  }
}","public void addMana(Mana manaToAdd,Game game,Ability source,boolean emptyOnTurnsEnd){
  if (manaToAdd != null) {
    Mana mana=manaToAdd.copy();
    if (!game.replaceEvent(new ManaEvent(EventType.ADD_MANA,source.getId(),source.getSourceId(),playerId,mana))) {
      if (mana instanceof ConditionalMana) {
        ManaPoolItem item=new ManaPoolItem((ConditionalMana)mana,source.getSourceObject(game),((ConditionalMana)mana).getManaProducerOriginalId() != null ? ((ConditionalMana)mana).getManaProducerOriginalId() : source.getOriginalId());
        if (emptyOnTurnsEnd) {
          item.setDuration(Duration.EndOfTurn);
        }
        this.manaItems.add(item);
      }
 else {
        ManaPoolItem item=new ManaPoolItem(mana.getRed(),mana.getGreen(),mana.getBlue(),mana.getWhite(),mana.getBlack(),mana.getGeneric() + mana.getColorless(),source.getSourceObject(game),source.getOriginalId(),mana.getFlag());
        if (emptyOnTurnsEnd) {
          item.setDuration(Duration.EndOfTurn);
        }
        this.manaItems.add(item);
      }
      ManaEvent manaEvent=new ManaEvent(EventType.MANA_ADDED,source.getId(),source.getSourceId(),playerId,mana);
      manaEvent.setData(mana.toString());
      game.fireEvent(manaEvent);
    }
  }
}",0.971333610303282
157641,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Player targetPlayer=game.getPlayer(source.getFirstTarget());
  MageObject sourceObject=game.getObject(source.getSourceId());
  Card card=null;
  if (controller != null && targetPlayer != null && sourceObject != null) {
    TargetCard targetCard=new TargetCard(Zone.HAND,new FilterCard());
    if (controller.choose(Outcome.Discard,targetPlayer.getHand(),targetCard,game)) {
      card=game.getCard(targetCard.getFirstTarget());
    }
    controller.controlPlayersTurn(game,targetPlayer.getId());
    while (controller != null && controller.canRespond()) {
      if (controller.chooseUse(Outcome.Benefit,""String_Node_Str"" + sourceObject.getLogName() + ""String_Node_Str""+ (card != null ? ""String_Node_Str"" + card.getLogName() : ""String_Node_Str"")+ '?',source,game)) {
        break;
      }
    }
    if (card != null) {
      RestrictionEffect effect=new WordOfCommandCantActivateEffect();
      effect.setTargetPointer(new FixedTarget(targetPlayer.getId()));
      game.addEffect(effect,source);
      ManaPool manaPool=targetPlayer.getManaPool();
      manaPool.setForcedToPay(true);
      int bookmark=game.bookmarkState();
      if ((card.isLand() && (!targetPlayer.canPlayLand() || !game.getActivePlayerId().equals(targetPlayer.getId()))) || !targetPlayer.playCard(card,game,false,true,new MageObjectReference(source.getSourceObject(game),game))) {
        game.informPlayers(targetPlayer.getLogName() + ""String_Node_Str"" + card.getLogName());
      }
      manaPool.setForcedToPay(false);
      manaPool=targetPlayer.getManaPool();
      manaPool.setForcedToPay(false);
      game.removeBookmark(bookmark);
      targetPlayer.resetStoredBookmark(game);
      for (      RestrictionEffect eff : game.getContinuousEffects().getRestrictionEffects()) {
        if (eff instanceof WordOfCommandCantActivateEffect) {
          eff.discard();
        }
      }
      game.getContinuousEffects().removeInactiveEffects(game);
      Spell spell=game.getSpell(card.getId());
      if (spell != null) {
        spell.setCommandedBy(controller.getId());
      }
    }
    Spell wordOfCommand=game.getSpell(sourceObject.getId());
    if (wordOfCommand != null) {
      wordOfCommand.setCommandedBy(controller.getId());
    }
 else {
      controller.resetOtherTurnsControlled();
      targetPlayer.setGameUnderYourControl(true);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Player targetPlayer=game.getPlayer(source.getFirstTarget());
  MageObject sourceObject=game.getObject(source.getSourceId());
  Card card=null;
  if (controller != null && targetPlayer != null && sourceObject != null) {
    TargetCard targetCard=new TargetCard(Zone.HAND,new FilterCard());
    if (controller.choose(Outcome.Discard,targetPlayer.getHand(),targetCard,game)) {
      card=game.getCard(targetCard.getFirstTarget());
    }
    controller.controlPlayersTurn(game,targetPlayer.getId());
    while (controller != null && controller.canRespond()) {
      if (controller.chooseUse(Outcome.Benefit,""String_Node_Str"" + sourceObject.getLogName() + ""String_Node_Str""+ (card != null ? ""String_Node_Str"" + card.getLogName() : ""String_Node_Str"")+ '?',source,game)) {
        break;
      }
    }
    if (card != null) {
      RestrictionEffect effect=new WordOfCommandCantActivateEffect();
      effect.setTargetPointer(new FixedTarget(targetPlayer.getId()));
      game.addEffect(effect,source);
      ManaPool manaPool=targetPlayer.getManaPool();
      manaPool.setForcedToPay(true);
      manaPool.storeMana();
      int bookmark=game.bookmarkState();
      if ((card.isLand() && (!targetPlayer.canPlayLand() || !game.getActivePlayerId().equals(targetPlayer.getId()))) || !targetPlayer.playCard(card,game,false,true,new MageObjectReference(source.getSourceObject(game),game))) {
        game.informPlayers(targetPlayer.getLogName() + ""String_Node_Str"" + card.getLogName());
      }
      manaPool.setForcedToPay(false);
      manaPool=targetPlayer.getManaPool();
      manaPool.setForcedToPay(false);
      game.removeBookmark(bookmark);
      targetPlayer.resetStoredBookmark(game);
      for (      RestrictionEffect eff : game.getContinuousEffects().getRestrictionEffects()) {
        if (eff instanceof WordOfCommandCantActivateEffect) {
          eff.discard();
        }
      }
      game.getContinuousEffects().removeInactiveEffects(game);
      Spell spell=game.getSpell(card.getId());
      if (spell != null) {
        spell.setCommandedBy(controller.getId());
      }
    }
    Spell wordOfCommand=game.getSpell(source.getSourceId());
    if (wordOfCommand != null) {
      wordOfCommand.setCommandedBy(controller.getId());
    }
 else {
      controller.resetOtherTurnsControlled();
      targetPlayer.setGameUnderYourControl(true);
    }
    return true;
  }
  return false;
}",0.9904
157642,"private void handleForcedToPayOnlyForCurrentPayment(Game game,ManaPool pool,ManaCosts referenceCosts){
  if (pool.isForcedToPay()) {
    if (referenceCosts != null && this.getPayment().equals(referenceCosts.getPayment())) {
      UUID playerId=pool.getPlayerId();
      Player player=game.getPlayer(playerId);
      if (player != null) {
        game.undo(playerId);
        this.clearPaid();
        game.bookmarkState();
      }
    }
  }
}","private void handleForcedToPayOnlyForCurrentPayment(Game game,ManaPool pool,ManaCosts referenceCosts){
  if (pool.isForcedToPay()) {
    if (referenceCosts != null && this.getPayment().equals(referenceCosts.getPayment())) {
      UUID playerId=pool.getPlayerId();
      Player player=game.getPlayer(playerId);
      if (player != null) {
        game.undo(playerId);
        this.clearPaid();
        player.getManaPool().restoreMana(pool.getPoolBookmark());
        game.bookmarkState();
      }
    }
  }
}",0.9305263157894736
157643,"@Override public void assignPayment(Game game,Ability ability,ManaPool pool,Cost costToPay){
  if (!pool.isAutoPayment() && pool.getUnlockedManaType() == null) {
    return;
  }
  ManaCosts referenceCosts=null;
  if (pool.isForcedToPay()) {
    referenceCosts=this.copy();
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof ColorlessManaCost) {
      cost.assignPayment(game,ability,pool,costToPay);
      if (pool.isEmpty()) {
        return;
      }
    }
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof ColoredManaCost) {
      cost.assignPayment(game,ability,pool,costToPay);
      if (pool.isEmpty()) {
        return;
      }
    }
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof HybridManaCost) {
      cost.assignPayment(game,ability,pool,costToPay);
      if (pool.isEmpty()) {
        return;
      }
    }
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof MonoHybridManaCost) {
      if (((cost.containsColor(ColoredManaSymbol.W)) && (pool.getWhite() > 0 || pool.ConditionalManaHasManaType(ManaType.WHITE))) || ((cost.containsColor(ColoredManaSymbol.B)) && (pool.getBlack() > 0 || pool.ConditionalManaHasManaType(ManaType.BLACK))) || ((cost.containsColor(ColoredManaSymbol.R)) && (pool.getRed() > 0 || pool.ConditionalManaHasManaType(ManaType.RED)))|| ((cost.containsColor(ColoredManaSymbol.G)) && (pool.getGreen() > 0 || pool.ConditionalManaHasManaType(ManaType.GREEN)))|| ((cost.containsColor(ColoredManaSymbol.U)) && (pool.getBlue() > 0) || pool.ConditionalManaHasManaType(ManaType.BLUE))) {
        cost.assignPayment(game,ability,pool,costToPay);
        if (pool.isEmpty() && pool.getConditionalMana().isEmpty()) {
          return;
        }
      }
    }
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof MonoHybridManaCost) {
      cost.assignPayment(game,ability,pool,costToPay);
      if (pool.isEmpty()) {
        return;
      }
    }
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof SnowManaCost) {
      cost.assignPayment(game,ability,pool,costToPay);
      if (pool.isEmpty()) {
        return;
      }
    }
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof GenericManaCost) {
      cost.assignPayment(game,ability,pool,costToPay);
      if (pool.isEmpty()) {
        return;
      }
    }
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof VariableManaCost) {
      cost.assignPayment(game,ability,pool,costToPay);
    }
  }
  pool.lockManaType();
  handleForcedToPayOnlyForCurrentPayment(game,pool,referenceCosts);
}","@Override public void assignPayment(Game game,Ability ability,ManaPool pool,Cost costToPay){
  boolean wasUnlockedManaType=(pool.getUnlockedManaType() != null);
  if (!pool.isAutoPayment() && !wasUnlockedManaType) {
    return;
  }
  ManaCosts referenceCosts=null;
  if (pool.isForcedToPay()) {
    referenceCosts=this.copy();
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof ColorlessManaCost) {
      cost.assignPayment(game,ability,pool,costToPay);
      if (pool.isEmpty()) {
        return;
      }
    }
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof ColoredManaCost) {
      cost.assignPayment(game,ability,pool,costToPay);
      if (pool.isEmpty()) {
        return;
      }
    }
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof HybridManaCost) {
      cost.assignPayment(game,ability,pool,costToPay);
      if (pool.isEmpty()) {
        return;
      }
    }
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof MonoHybridManaCost) {
      if (((cost.containsColor(ColoredManaSymbol.W)) && (pool.getWhite() > 0 || pool.ConditionalManaHasManaType(ManaType.WHITE))) || ((cost.containsColor(ColoredManaSymbol.B)) && (pool.getBlack() > 0 || pool.ConditionalManaHasManaType(ManaType.BLACK))) || ((cost.containsColor(ColoredManaSymbol.R)) && (pool.getRed() > 0 || pool.ConditionalManaHasManaType(ManaType.RED)))|| ((cost.containsColor(ColoredManaSymbol.G)) && (pool.getGreen() > 0 || pool.ConditionalManaHasManaType(ManaType.GREEN)))|| ((cost.containsColor(ColoredManaSymbol.U)) && (pool.getBlue() > 0) || pool.ConditionalManaHasManaType(ManaType.BLUE))) {
        cost.assignPayment(game,ability,pool,costToPay);
        if (pool.isEmpty() && pool.getConditionalMana().isEmpty()) {
          return;
        }
      }
    }
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof MonoHybridManaCost) {
      cost.assignPayment(game,ability,pool,costToPay);
      if (pool.isEmpty()) {
        return;
      }
    }
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof SnowManaCost) {
      cost.assignPayment(game,ability,pool,costToPay);
      if (pool.isEmpty()) {
        return;
      }
    }
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof GenericManaCost) {
      cost.assignPayment(game,ability,pool,costToPay);
      if (pool.isEmpty()) {
        return;
      }
    }
  }
  for (  ManaCost cost : this) {
    if (!cost.isPaid() && cost instanceof VariableManaCost) {
      cost.assignPayment(game,ability,pool,costToPay);
    }
  }
  pool.lockManaType();
  if (!wasUnlockedManaType) {
    handleForcedToPayOnlyForCurrentPayment(game,pool,referenceCosts);
  }
}",0.976897689768977
157644,void resetControlAfterSpellResolve(Spell spell);,void resetControlAfterSpellResolve(UUID topId);,0.8
157645,"protected void resolve(){
  StackObject top=null;
  try {
    top=state.getStack().peek();
    Spell topSpell=getSpell(top.getId());
    if (topSpell != null) {
      top.resolve(this);
      resetControlAfterSpellResolve(topSpell);
    }
 else {
      top.resolve(this);
    }
  }
  finally {
    if (top != null) {
      state.getStack().remove(top,this);
      rememberLKI(top.getSourceId(),Zone.STACK,top);
      checkInfiniteLoop(top.getSourceId());
      if (!getTurn().isEndTurnRequested()) {
        while (state.hasSimultaneousEvents()) {
          state.handleSimultaneousEvent(this);
        }
      }
    }
  }
}","protected void resolve(){
  StackObject top=null;
  try {
    top=state.getStack().peek();
    top.resolve(this);
    resetControlAfterSpellResolve(top.getId());
  }
  finally {
    if (top != null) {
      state.getStack().remove(top,this);
      rememberLKI(top.getSourceId(),Zone.STACK,top);
      checkInfiniteLoop(top.getSourceId());
      if (!getTurn().isEndTurnRequested()) {
        while (state.hasSimultaneousEvents()) {
          state.handleSimultaneousEvent(this);
        }
      }
    }
  }
}",0.8462897526501767
157646,"@Override public void resetControlAfterSpellResolve(Spell spell){
  if (spell.getCommandedBy() != null) {
    UUID commandedBy=spell.getCommandedBy();
    UUID spellControllerId=null;
    if (commandedBy.equals(spell.getControllerId())) {
      spellControllerId=spell.getSpellAbility().getFirstTarget();
    }
 else {
      spellControllerId=spell.getControllerId();
    }
    if (commandedBy != null && spellControllerId != null) {
      Player turnController=getPlayer(commandedBy);
      if (turnController != null) {
        Player targetPlayer=getPlayer(spellControllerId);
        if (targetPlayer != null) {
          informPlayers(turnController.getLogName() + ""String_Node_Str"" + targetPlayer.getLogName());
          turnController.resetOtherTurnsControlled();
          targetPlayer.setGameUnderYourControl(true);
        }
      }
    }
  }
}","@Override public void resetControlAfterSpellResolve(UUID topId){
  Spell spell=getSpellOrLKIStack(topId);
  if (spell != null) {
    if (spell.getCommandedBy() != null) {
      UUID commandedBy=spell.getCommandedBy();
      UUID spellControllerId=null;
      if (commandedBy.equals(spell.getControllerId())) {
        spellControllerId=spell.getSpellAbility().getFirstTarget();
      }
 else {
        spellControllerId=spell.getControllerId();
      }
      if (commandedBy != null && spellControllerId != null) {
        Player turnController=getPlayer(commandedBy);
        if (turnController != null) {
          Player targetPlayer=getPlayer(spellControllerId);
          if (targetPlayer != null) {
            informPlayers(turnController.getLogName() + ""String_Node_Str"" + targetPlayer.getLogName());
            turnController.resetOtherTurnsControlled();
            targetPlayer.setGameUnderYourControl(true);
          }
        }
      }
    }
  }
}",0.825536598789213
157647,"public void resolve(Game game){
  StackObject top=null;
  try {
    top=this.peek();
    Spell topSpell=getSpell(top.getId());
    if (topSpell != null) {
      top.resolve(game);
      game.resetControlAfterSpellResolve(topSpell);
    }
 else {
      top.resolve(game);
    }
  }
  finally {
    if (top != null) {
      if (contains(top)) {
        logger.warn(""String_Node_Str"" + top.getName());
        this.remove(top,game);
      }
    }
  }
}","public void resolve(Game game){
  StackObject top=null;
  try {
    top=this.peek();
    top.resolve(game);
    game.resetControlAfterSpellResolve(top.getId());
  }
  finally {
    if (top != null) {
      if (contains(top)) {
        logger.warn(""String_Node_Str"" + top.getName());
        this.remove(top,game);
      }
    }
  }
}",0.6572890025575447
157648,"public ManaPool(final ManaPool pool){
  this.playerId=pool.playerId;
  for (  ManaPoolItem item : pool.manaItems) {
    manaItems.add(item.copy());
  }
  this.autoPayment=pool.autoPayment;
  this.autoPaymentRestricted=pool.autoPaymentRestricted;
  this.unlockedManaType=pool.unlockedManaType;
  this.forcedToPay=pool.forcedToPay;
  this.doNotEmptyManaTypes.addAll(pool.doNotEmptyManaTypes);
}","public ManaPool(final ManaPool pool){
  this.playerId=pool.playerId;
  for (  ManaPoolItem item : pool.manaItems) {
    manaItems.add(item.copy());
  }
  this.autoPayment=pool.autoPayment;
  this.autoPaymentRestricted=pool.autoPaymentRestricted;
  this.unlockedManaType=pool.unlockedManaType;
  this.forcedToPay=pool.forcedToPay;
  for (  ManaPoolItem item : pool.poolBookmark) {
    poolBookmark.add(item.copy());
  }
  this.doNotEmptyManaTypes.addAll(pool.doNotEmptyManaTypes);
}",0.8980526918671249
157649,"/** 
 * Use the previous addBlockingGroup instead (solveBanding should always be true  outside this method)
 * @param blockerId
 * @param attackerId
 * @param playerId
 * @param game
 * @param solveBanding check whether also add creatures banded with attackerId
 */
public void addBlockingGroup(UUID blockerId,UUID attackerId,UUID playerId,Game game,boolean solveBanding){
  Permanent blocker=game.getPermanent(blockerId);
  if (blockerId != null && blocker != null && blocker.getBlocking() > 1) {
    if (!blockingGroupsContains(blockerId)) {
      CombatGroup newGroup=new CombatGroup(playerId,false,playerId);
      newGroup.blockers.add(blockerId);
      for (      CombatGroup group : groups) {
        if (group.getBlockers().contains(blockerId)) {
          for (          UUID attacker : group.attackers) {
            newGroup.attackers.add(attacker);
          }
        }
      }
      blockingGroups.put(blockerId,newGroup);
    }
 else {
      blockingGroups.get(blockerId).attackers.add(attackerId);
    }
  }
  if (solveBanding) {
    Permanent attacker=game.getPermanent(attackerId);
    if (attacker != null) {
      for (      UUID bandedId : attacker.getBandedCards()) {
        if (!bandedId.equals(attackerId)) {
          if (blockingGroups.get(blockerId) == null || !blockingGroups.get(blockerId).attackers.contains(bandedId)) {
            Permanent banded=game.getPermanent(bandedId);
            CombatGroup bandedGroup=findGroup(bandedId);
            if (banded != null && bandedGroup != null) {
              bandedGroup.addBlockerToGroup(blockerId,playerId,game);
              addBlockingGroup(blockerId,bandedId,playerId,game,false);
              blocker.setBlocking(blocker.getBlocking() - 1);
            }
          }
        }
      }
    }
  }
}","/** 
 * Use the previous addBlockingGroup instead (solveBanding should always be true outside this method)
 * @param blockerId
 * @param attackerId
 * @param playerId
 * @param game
 * @param solveBanding check whether also add creatures banded withattackerId
 */
public void addBlockingGroup(UUID blockerId,UUID attackerId,UUID playerId,Game game,boolean solveBanding){
  Permanent blocker=game.getPermanent(blockerId);
  if (blockerId != null && blocker != null && blocker.getBlocking() > 1) {
    if (!blockingGroupsContains(blockerId)) {
      CombatGroup newGroup=new CombatGroup(playerId,false,playerId);
      newGroup.blockers.add(blockerId);
      for (      CombatGroup group : groups) {
        if (group.getBlockers().contains(blockerId)) {
          for (          UUID attacker : group.attackers) {
            newGroup.attackers.add(attacker);
          }
        }
      }
      blockingGroups.put(blockerId,newGroup);
    }
 else {
      blockingGroups.get(blockerId).attackers.add(attackerId);
    }
  }
  if (solveBanding) {
    Permanent attacker=game.getPermanent(attackerId);
    if (attacker != null) {
      for (      UUID bandedId : attacker.getBandedCards()) {
        if (!bandedId.equals(attackerId)) {
          if (blockingGroups.get(blockerId) == null || !blockingGroups.get(blockerId).attackers.contains(bandedId)) {
            Permanent banded=game.getPermanent(bandedId);
            CombatGroup bandedGroup=findGroup(bandedId);
            if (banded != null && bandedGroup != null) {
              bandedGroup.addBlockerToGroup(blockerId,playerId,game);
              addBlockingGroup(blockerId,bandedId,playerId,game,false);
              blocker.setBlocking(blocker.getBlocking() - 1);
            }
          }
        }
      }
    }
  }
}",0.999438832772166
157650,"protected void checkAttackRequirements(Player player,Game game){
  for (  Permanent creature : player.getAvailableAttackers(game)) {
    boolean mustAttack=false;
    Set<UUID> defendersForcedToAttack=new HashSet<>();
    for (    Map.Entry<RequirementEffect,Set<Ability>> entry : game.getContinuousEffects().getApplicableRequirementEffects(creature,false,game).entrySet()) {
      RequirementEffect effect=entry.getKey();
      if (effect.mustAttack(game)) {
        mustAttack=true;
        for (        Ability ability : entry.getValue()) {
          UUID defenderId=effect.mustAttackDefender(ability,game);
          if (defenderId != null) {
            if (defenders.contains(defenderId)) {
              defendersForcedToAttack.add(defenderId);
            }
          }
          break;
        }
      }
    }
    if (mustAttack) {
      HashSet<UUID> defendersCostlessAttackable=new HashSet<>();
      defendersCostlessAttackable.addAll(defenders);
      for (      UUID defenderId : defenders) {
        if (game.getContinuousEffects().checkIfThereArePayCostToAttackBlockEffects(GameEvent.getEvent(GameEvent.EventType.DECLARE_ATTACKER,defenderId,creature.getId(),creature.getControllerId()),game)) {
          defendersCostlessAttackable.remove(defenderId);
          defendersForcedToAttack.remove(defenderId);
        }
      }
      if (!defendersCostlessAttackable.isEmpty()) {
        creaturesForcedToAttack.put(creature.getId(),defendersForcedToAttack);
        if (defendersForcedToAttack.isEmpty()) {
          if (defenders.size() == 1) {
            player.declareAttacker(creature.getId(),defenders.iterator().next(),game,false);
          }
 else {
            TargetDefender target=new TargetDefender(defenders,creature.getId());
            target.setRequired(true);
            target.setTargetName(""String_Node_Str"" + creature.getLogName() + ""String_Node_Str"");
            if (player.chooseTarget(Outcome.Damage,target,null,game)) {
              player.declareAttacker(creature.getId(),target.getFirstTarget(),game,false);
            }
          }
        }
 else {
          if (defenders.size() == 1) {
            player.declareAttacker(creature.getId(),defendersForcedToAttack.iterator().next(),game,false);
          }
 else {
            TargetDefender target=new TargetDefender(defendersCostlessAttackable,creature.getId());
            target.setRequired(true);
            if (player.chooseTarget(Outcome.Damage,target,null,game)) {
              player.declareAttacker(creature.getId(),target.getFirstTarget(),game,false);
            }
          }
        }
      }
    }
  }
}","protected void checkAttackRequirements(Player player,Game game){
  for (  Permanent creature : player.getAvailableAttackers(game)) {
    boolean mustAttack=false;
    Set<UUID> defendersForcedToAttack=new HashSet<>();
    for (    Map.Entry<RequirementEffect,Set<Ability>> entry : game.getContinuousEffects().getApplicableRequirementEffects(creature,false,game).entrySet()) {
      RequirementEffect effect=entry.getKey();
      if (effect.mustAttack(game)) {
        mustAttack=true;
        for (        Ability ability : entry.getValue()) {
          UUID defenderId=effect.mustAttackDefender(ability,game);
          if (defenderId != null) {
            if (defenders.contains(defenderId)) {
              defendersForcedToAttack.add(defenderId);
            }
          }
          break;
        }
      }
    }
    if (mustAttack) {
      HashSet<UUID> defendersCostlessAttackable=new HashSet<>();
      defendersCostlessAttackable.addAll(defenders);
      for (      UUID defenderId : defenders) {
        if (game.getContinuousEffects().checkIfThereArePayCostToAttackBlockEffects(GameEvent.getEvent(GameEvent.EventType.DECLARE_ATTACKER,defenderId,creature.getId(),creature.getControllerId()),game)) {
          defendersCostlessAttackable.remove(defenderId);
          defendersForcedToAttack.remove(defenderId);
        }
      }
      if (!defendersCostlessAttackable.isEmpty()) {
        creaturesForcedToAttack.put(creature.getId(),defendersForcedToAttack);
        if (defendersForcedToAttack.isEmpty()) {
          if (defenders.size() == 1) {
            player.declareAttacker(creature.getId(),defenders.iterator().next(),game,false);
          }
 else {
            TargetDefender target=new TargetDefender(defenders,creature.getId());
            target.setRequired(true);
            target.setTargetName(""String_Node_Str"" + creature.getLogName() + ""String_Node_Str"");
            if (player.chooseTarget(Outcome.Damage,target,null,game)) {
              player.declareAttacker(creature.getId(),target.getFirstTarget(),game,false);
            }
          }
        }
 else {
          if (defendersForcedToAttack.size() == 1) {
            player.declareAttacker(creature.getId(),defendersForcedToAttack.iterator().next(),game,false);
          }
 else {
            TargetDefender target=new TargetDefender(defendersForcedToAttack,creature.getId());
            target.setRequired(true);
            if (player.chooseTarget(Outcome.Damage,target,null,game)) {
              player.declareAttacker(creature.getId(),target.getFirstTarget(),game,false);
            }
          }
        }
      }
    }
  }
}",0.991234756097561
157651,"/** 
 * Manual player action for undoing one declared blocker  (used for multi-blocker creatures)
 * @param blockerId
 * @param groupToUnblock
 * @param game
 */
public void removeBlockerGromGroup(UUID blockerId,CombatGroup groupToUnblock,Game game){
  Permanent creature=game.getPermanent(blockerId);
  if (creature != null) {
    List<CombatGroup> groupsToCheck=new ArrayList<>();
    for (    CombatGroup group : groups) {
      if (group.equals(groupToUnblock) && group.blockers.contains(blockerId)) {
        groupsToCheck.add(group);
        for (        UUID attackerId : group.getAttackers()) {
          Permanent attacker=game.getPermanent(attackerId);
          if (attacker != null) {
            for (            UUID bandedId : attacker.getBandedCards()) {
              if (!bandedId.equals(attackerId)) {
                CombatGroup bandedGroup=findGroup(bandedId);
                if (bandedGroup != null) {
                  groupsToCheck.add(bandedGroup);
                }
              }
            }
          }
        }
      }
    }
    for (    CombatGroup group : groupsToCheck) {
      group.blockers.remove(blockerId);
      group.blockerOrder.remove(blockerId);
      if (group.blockers.isEmpty()) {
        group.blocked=false;
      }
      if (creature.getBlocking() > 0) {
        if (group.equals(groupToUnblock)) {
          creature.setBlocking(creature.getBlocking() - 1);
        }
      }
 else {
        throw new UnsupportedOperationException(""String_Node_Str"");
      }
      boolean canRemove=false;
      for (      CombatGroup blockGroup : getBlockingGroups()) {
        if (blockGroup.blockers.contains(blockerId)) {
          for (          UUID attackerId : group.getAttackers()) {
            blockGroup.attackers.remove(attackerId);
            blockGroup.attackerOrder.remove(attackerId);
          }
          if (creature.getBlocking() == 0) {
            blockGroup.blockers.remove(blockerId);
            blockGroup.attackerOrder.clear();
          }
        }
        if (blockGroup.blockers.isEmpty()) {
          canRemove=true;
        }
      }
      if (canRemove) {
        blockingGroups.remove(blockerId);
      }
    }
  }
}","/** 
 * Manual player action for undoing one declared blocker (used for multi-blocker creatures)
 * @param blockerId
 * @param groupToUnblock
 * @param game
 */
public void removeBlockerGromGroup(UUID blockerId,CombatGroup groupToUnblock,Game game){
  Permanent creature=game.getPermanent(blockerId);
  if (creature != null) {
    List<CombatGroup> groupsToCheck=new ArrayList<>();
    for (    CombatGroup group : groups) {
      if (group.equals(groupToUnblock) && group.blockers.contains(blockerId)) {
        groupsToCheck.add(group);
        for (        UUID attackerId : group.getAttackers()) {
          Permanent attacker=game.getPermanent(attackerId);
          if (attacker != null) {
            for (            UUID bandedId : attacker.getBandedCards()) {
              if (!bandedId.equals(attackerId)) {
                CombatGroup bandedGroup=findGroup(bandedId);
                if (bandedGroup != null) {
                  groupsToCheck.add(bandedGroup);
                }
              }
            }
          }
        }
      }
    }
    for (    CombatGroup group : groupsToCheck) {
      group.blockers.remove(blockerId);
      group.blockerOrder.remove(blockerId);
      if (group.blockers.isEmpty()) {
        group.blocked=false;
      }
      if (creature.getBlocking() > 0) {
        if (group.equals(groupToUnblock)) {
          creature.setBlocking(creature.getBlocking() - 1);
        }
      }
 else {
        throw new UnsupportedOperationException(""String_Node_Str"");
      }
      boolean canRemove=false;
      for (      CombatGroup blockGroup : getBlockingGroups()) {
        if (blockGroup.blockers.contains(blockerId)) {
          for (          UUID attackerId : group.getAttackers()) {
            blockGroup.attackers.remove(attackerId);
            blockGroup.attackerOrder.remove(attackerId);
          }
          if (creature.getBlocking() == 0) {
            blockGroup.blockers.remove(blockerId);
            blockGroup.attackerOrder.clear();
          }
        }
        if (blockGroup.blockers.isEmpty()) {
          canRemove=true;
        }
      }
      if (canRemove) {
        blockingGroups.remove(blockerId);
      }
    }
  }
}",0.9997717416115042
157652,"/** 
 * Manual player action for undoing all declared blockers  (used for single-blocker creatures and multi-blockers exceeding blocking limit)
 * @param blockerId
 * @param game
 */
public void removeBlocker(UUID blockerId,Game game){
  for (  CombatGroup group : groups) {
    if (group.blockers.contains(blockerId)) {
      group.blockers.remove(blockerId);
      group.blockerOrder.remove(blockerId);
      if (group.blockers.isEmpty()) {
        group.blocked=false;
      }
    }
  }
  boolean canRemove=false;
  for (  CombatGroup group : getBlockingGroups()) {
    if (group.blockers.contains(blockerId)) {
      group.blockers.remove(blockerId);
      group.attackerOrder.clear();
    }
    if (group.blockers.isEmpty()) {
      canRemove=true;
    }
  }
  if (canRemove) {
    blockingGroups.remove(blockerId);
  }
  Permanent creature=game.getPermanent(blockerId);
  if (creature != null) {
    creature.setBlocking(0);
  }
}","/** 
 * Manual player action for undoing all declared blockers (used for single-blocker creatures and multi-blockers exceeding blocking limit)
 * @param blockerId
 * @param game
 */
public void removeBlocker(UUID blockerId,Game game){
  for (  CombatGroup group : groups) {
    if (group.blockers.contains(blockerId)) {
      group.blockers.remove(blockerId);
      group.blockerOrder.remove(blockerId);
      if (group.blockers.isEmpty()) {
        group.blocked=false;
      }
    }
  }
  boolean canRemove=false;
  for (  CombatGroup group : getBlockingGroups()) {
    if (group.blockers.contains(blockerId)) {
      group.blockers.remove(blockerId);
      group.attackerOrder.clear();
    }
    if (group.blockers.isEmpty()) {
      canRemove=true;
    }
  }
  if (canRemove) {
    blockingGroups.remove(blockerId);
  }
  Permanent creature=game.getPermanent(blockerId);
  if (creature != null) {
    creature.setBlocking(0);
  }
}",0.9994655264564404
157653,"@Override public Mana produceMana(boolean netMana,Game game,Ability source){
  if (netMana) {
    return null;
  }
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    int manaCostExiled=0;
    for (    Cost cost : source.getCosts()) {
      if (cost.isPaid() && cost instanceof ExileTargetCost) {
        for (        Card card : ((ExileTargetCost)cost).getPermanents()) {
          manaCostExiled+=card.getConvertedManaCost();
        }
      }
    }
    ChoiceColor choice=new ChoiceColor();
    if (!controller.choose(Outcome.PutManaInPool,choice,game)) {
      return null;
    }
    Mana chosen=choice.getMana(manaCostExiled + 1);
    return new FoodChainManaBuilder().setMana(chosen,source,game).build();
  }
  return null;
}","@Override public Mana produceMana(boolean netMana,Game game,Ability source){
  if (netMana) {
    return null;
  }
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    int manaCostExiled=0;
    for (    Cost cost : source.getCosts()) {
      if (cost.isPaid() && cost instanceof ExileTargetCost) {
        for (        Card card : ((ExileTargetCost)cost).getPermanents()) {
          manaCostExiled+=card.getConvertedManaCost();
        }
      }
    }
    ChoiceColor choice=new ChoiceColor();
    if (!controller.choose(Outcome.PutManaInPool,choice,game)) {
      return null;
    }
    Mana chosen=choice.getMana(manaCostExiled + 1);
    return manaBuilder.setMana(chosen,source,game).build();
  }
  return null;
}",0.9627694317439582
157654,"/** 
 * Used to check the possible mana production to determine which spells and/or abilities can be used. (player.getPlayable()).
 * @param game
 * @return
 */
@Override public List<Mana> getNetMana(Game game){
  if (netMana.isEmpty()) {
    for (    Effect effect : getEffects()) {
      if (effect instanceof ManaEffect) {
        netMana.addAll(((ManaEffect)effect).getNetMana(game,this));
      }
    }
  }
  ArrayList<Mana> netManaCopy=new ArrayList<>();
  for (  Mana mana : netMana) {
    netManaCopy.add(mana.copy());
  }
  return netManaCopy;
}","/** 
 * Used to check the possible mana production to determine which spells and/or abilities can be used. (player.getPlayable()).
 * @param game
 * @return
 */
@Override public List<Mana> getNetMana(Game game){
  if (netMana.isEmpty()) {
    ArrayList<Mana> dynamicNetMana=new ArrayList<>();
    for (    Effect effect : getEffects()) {
      if (effect instanceof ManaEffect) {
        dynamicNetMana.addAll(((ManaEffect)effect).getNetMana(game,this));
      }
    }
    return dynamicNetMana;
  }
  ArrayList<Mana> netManaCopy=new ArrayList<>();
  for (  Mana mana : netMana) {
    netManaCopy.add(mana.copy());
  }
  return netManaCopy;
}",0.5434782608695652
157655,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getTargetId().equals(source.getSourceId())) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getFromZone() == Zone.BATTLEFIELD && zEvent.getToZone() != Zone.EXILED) {
      return source.getSourceObjectZoneChangeCounter() + 1 == game.getState().getZoneChangeCounter(source.getSourceId());
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getTargetId().equals(source.getSourceId())) {
    ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
    if (zEvent.getFromZone() == Zone.BATTLEFIELD && zEvent.getToZone() != Zone.EXILED) {
      return source.getSourceObjectZoneChangeCounter() == game.getState().getZoneChangeCounter(source.getSourceId());
    }
  }
  return false;
}",0.995249406175772
157656,"@Override public void addEffect(ContinuousEffect continuousEffect,Ability source){
  Ability newAbility=source.copy();
  ContinuousEffect newEffect=continuousEffect.copy();
  newEffect.newId();
  newEffect.init(newAbility,this);
  state.addEffect(newEffect,newAbility);
}","@Override public void addEffect(ContinuousEffect continuousEffect,Ability source){
  Ability newAbility=source.copy();
  newAbility.setSourceObject(null,this);
  ContinuousEffect newEffect=continuousEffect.copy();
  newEffect.newId();
  newEffect.init(newAbility,this);
  state.addEffect(newEffect,newAbility);
}",0.9296740994854202
157657,"/** 
 * Returns an iterator over all listeners for the specified classes. the listener classes are in the specified order. for every class, listeners are in the reverse order of registering. A listener contained multiple times (for a single or multiple classes) is only returned the first time it occurs.
 * @param < T >
 * @param listenerClass
 * @return
 */
public <T extends EventListener>Iterator<T> getIterator(Class<? extends T>... listenerClass){
  return getIterable(listenerClass).iterator();
}","/** 
 * Returns an iterator over all listeners for the specified classes. the listener classes are in the specified order. for every class, listeners are in the reverse order of registering. A listener contained multiple times (for a single or multiple classes) is only returned the first time it occurs.
 * @param < T >
 * @param listenerClass
 * @return
 */
public <T extends EventListener>Iterator<T> getIterator(Class<T>... listenerClass){
  return getIterable(listenerClass).iterator();
}",0.9899598393574296
157658,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (controller != null && sourceObject != null) {
    Map<UUID,Cards> cardsToDiscard=new HashMap<>();
    Map<UUID,Cards> cardsToReveal=new HashMap<>();
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        Cards cards=new CardsImpl();
        Target target=new TargetDiscard(0,1,new FilterCard(),playerId);
        player.chooseTarget(outcome,target,source,game);
        cards.addAll(target.getTargets());
        cardsToDiscard.put(playerId,cards);
      }
    }
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        Cards cardsPlayer=cardsToDiscard.get(playerId);
        if (cardsPlayer != null) {
          for (          UUID cardId : cardsPlayer) {
            Card card=game.getCard(cardId);
            if (card != null) {
              player.discard(card,source,game);
            }
          }
        }
      }
    }
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        Cards cardsPlayer=cardsToDiscard.get(playerId);
        if (cardsPlayer != null && !cardsPlayer.isEmpty()) {
          TargetCardInLibrary target=new TargetCardInLibrary(0,1,StaticFilters.FILTER_BASIC_LAND_CARD);
          if (player.searchLibrary(target,game)) {
            if (!target.getTargets().isEmpty()) {
              Cards cards=new CardsImpl(target.getTargets());
              cards.addAll(target.getTargets());
              cardsToReveal.put(playerId,cards);
            }
          }
        }
      }
    }
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        Cards cardsPlayer=cardsToReveal.get(playerId);
        if (cardsPlayer != null) {
          for (          UUID cardId : cardsPlayer) {
            Cards cards=new CardsImpl(game.getCard(cardId));
            Card card=game.getCard(cardId);
            player.revealCards(sourceObject.getIdName() + ""String_Node_Str"" + player.getName()+ ')',cards,game);
            player.moveCards(card,Zone.HAND,source,game);
            player.shuffleLibrary(source,game);
          }
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (controller != null && sourceObject != null) {
    Map<UUID,Cards> cardsToDiscard=new HashMap<>();
    Map<UUID,Cards> cardsToReveal=new HashMap<>();
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        Cards cards=new CardsImpl();
        Target target=new TargetDiscard(0,1,new FilterCard(),playerId);
        player.chooseTarget(outcome,target,source,game);
        cards.addAll(target.getTargets());
        cardsToDiscard.put(playerId,cards);
      }
    }
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        Cards cardsPlayer=cardsToDiscard.get(playerId);
        if (cardsPlayer != null) {
          for (          UUID cardId : cardsPlayer) {
            Card card=game.getCard(cardId);
            if (card != null) {
              player.discard(card,source,game);
            }
          }
        }
      }
    }
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        Cards cardsPlayer=cardsToDiscard.get(playerId);
        if (cardsPlayer != null && !cardsPlayer.isEmpty()) {
          TargetCardInLibrary target=new TargetCardInLibrary(0,1,StaticFilters.FILTER_CARD_BASIC_LAND);
          if (player.searchLibrary(target,game)) {
            if (!target.getTargets().isEmpty()) {
              Cards cards=new CardsImpl(target.getTargets());
              cards.addAll(target.getTargets());
              cardsToReveal.put(playerId,cards);
            }
          }
        }
      }
    }
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        Cards cardsPlayer=cardsToReveal.get(playerId);
        if (cardsPlayer != null) {
          for (          UUID cardId : cardsPlayer) {
            Cards cards=new CardsImpl(game.getCard(cardId));
            Card card=game.getCard(cardId);
            player.revealCards(sourceObject.getIdName() + ""String_Node_Str"" + player.getName()+ ')',cards,game);
            player.moveCards(card,Zone.HAND,source,game);
            player.shuffleLibrary(source,game);
          }
        }
      }
    }
    return true;
  }
  return false;
}",0.998113919275745
157659,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  FilterLandPermanent filter=new FilterLandPermanent();
  filter.add(new ControllerPredicate(TargetController.YOU));
  int amount=new PermanentsOnBattlefieldCount(filter).calculate(game,source,this);
  TargetCardInLibrary target=new TargetCardInLibrary(0,amount,StaticFilters.FILTER_BASIC_LAND_CARD);
  if (controller.searchLibrary(target,game)) {
    controller.moveCards(new CardsImpl(target.getTargets()).getCards(game),Zone.BATTLEFIELD,source,game,true,false,false,null);
  }
  controller.shuffleLibrary(source,game);
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  FilterLandPermanent filter=new FilterLandPermanent();
  filter.add(new ControllerPredicate(TargetController.YOU));
  int amount=new PermanentsOnBattlefieldCount(filter).calculate(game,source,this);
  TargetCardInLibrary target=new TargetCardInLibrary(0,amount,StaticFilters.FILTER_CARD_BASIC_LAND);
  if (controller.searchLibrary(target,game)) {
    controller.moveCards(new CardsImpl(target.getTargets()).getCards(game),Zone.BATTLEFIELD,source,game,true,false,false,null);
  }
  controller.shuffleLibrary(source,game);
  return true;
}",0.9929378531073446
157660,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (sourceObject != null && controller != null) {
    TargetCardInLibrary target=new TargetCardInLibrary(StaticFilters.FILTER_BASIC_LAND_CARD);
    if (controller.searchLibrary(target,game)) {
      Card card=controller.getLibrary().getCard(target.getFirstTarget(),game);
      if (card != null) {
        Cards cards=new CardsImpl(card);
        if (MorbidCondition.instance.apply(game,source) && controller.chooseUse(Outcome.PutLandInPlay,""String_Node_Str"",source,game)) {
          controller.moveCards(card,Zone.BATTLEFIELD,source,game);
        }
 else {
          controller.moveCards(card,Zone.HAND,source,game);
        }
        controller.revealCards(sourceObject.getIdName(),cards,game);
      }
    }
    controller.shuffleLibrary(source,game);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (sourceObject != null && controller != null) {
    TargetCardInLibrary target=new TargetCardInLibrary(StaticFilters.FILTER_CARD_BASIC_LAND);
    if (controller.searchLibrary(target,game)) {
      Card card=controller.getLibrary().getCard(target.getFirstTarget(),game);
      if (card != null) {
        Cards cards=new CardsImpl(card);
        if (MorbidCondition.instance.apply(game,source) && controller.chooseUse(Outcome.PutLandInPlay,""String_Node_Str"",source,game)) {
          controller.moveCards(card,Zone.BATTLEFIELD,source,game);
        }
 else {
          controller.moveCards(card,Zone.HAND,source,game);
        }
        controller.revealCards(sourceObject.getIdName(),cards,game);
      }
    }
    controller.shuffleLibrary(source,game);
    return true;
  }
  return false;
}",0.9948612538540595
157661,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    int xSum=0;
    xSum+=playerPaysXGenericMana(controller,source,game);
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      if (!Objects.equals(playerId,controller.getId())) {
        Player player=game.getPlayer(playerId);
        if (player != null) {
          xSum+=playerPaysXGenericMana(player,source,game);
        }
      }
    }
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        TargetCardInLibrary target=new TargetCardInLibrary(0,xSum,StaticFilters.FILTER_BASIC_LAND_CARD);
        if (player.searchLibrary(target,game)) {
          player.moveCards(new CardsImpl(target.getTargets()).getCards(game),Zone.BATTLEFIELD,source,game,true,false,true,null);
          player.shuffleLibrary(source,game);
        }
      }
    }
    controller.resetStoredBookmark(game);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    int xSum=0;
    xSum+=playerPaysXGenericMana(controller,source,game);
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      if (!Objects.equals(playerId,controller.getId())) {
        Player player=game.getPlayer(playerId);
        if (player != null) {
          xSum+=playerPaysXGenericMana(player,source,game);
        }
      }
    }
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        TargetCardInLibrary target=new TargetCardInLibrary(0,xSum,StaticFilters.FILTER_CARD_BASIC_LAND);
        if (player.searchLibrary(target,game)) {
          player.moveCards(new CardsImpl(target.getTargets()).getCards(game),Zone.BATTLEFIELD,source,game,true,false,true,null);
          player.shuffleLibrary(source,game);
        }
      }
    }
    controller.resetStoredBookmark(game);
    return true;
  }
  return false;
}",0.995579133510168
157662,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller == null || sourceObject == null) {
    return false;
  }
  TargetCardInLibrary target=new TargetCardInLibrary(0,2,StaticFilters.FILTER_BASIC_LAND_CARD);
  if (controller.searchLibrary(target,game)) {
    if (!target.getTargets().isEmpty()) {
      Cards revealed=new CardsImpl(target.getTargets());
      controller.revealCards(sourceObject.getIdName(),revealed,game);
      if (target.getTargets().size() == 2) {
        TargetCard target2=new TargetCard(Zone.LIBRARY,filter);
        controller.choose(Outcome.Benefit,revealed,target2,game);
        Card card=revealed.get(target2.getFirstTarget(),game);
        if (card != null) {
          controller.moveCards(card,Zone.BATTLEFIELD,source,game,true,false,false,null);
          revealed.remove(card);
        }
        card=revealed.getCards(game).iterator().next();
        if (card != null) {
          controller.moveCards(card,Zone.HAND,source,game);
        }
      }
 else       if (target.getTargets().size() == 1) {
        Card card=revealed.getCards(game).iterator().next();
        if (card != null) {
          controller.moveCards(card,Zone.BATTLEFIELD,source,game,true,false,false,null);
        }
      }
    }
  }
  controller.shuffleLibrary(source,game);
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller == null || sourceObject == null) {
    return false;
  }
  TargetCardInLibrary target=new TargetCardInLibrary(0,2,StaticFilters.FILTER_CARD_BASIC_LAND);
  if (controller.searchLibrary(target,game)) {
    if (!target.getTargets().isEmpty()) {
      Cards revealed=new CardsImpl(target.getTargets());
      controller.revealCards(sourceObject.getIdName(),revealed,game);
      if (target.getTargets().size() == 2) {
        TargetCard target2=new TargetCard(Zone.LIBRARY,filter);
        controller.choose(Outcome.Benefit,revealed,target2,game);
        Card card=revealed.get(target2.getFirstTarget(),game);
        if (card != null) {
          controller.moveCards(card,Zone.BATTLEFIELD,source,game,true,false,false,null);
          revealed.remove(card);
        }
        card=revealed.getCards(game).iterator().next();
        if (card != null) {
          controller.moveCards(card,Zone.HAND,source,game);
        }
      }
 else       if (target.getTargets().size() == 1) {
        Card card=revealed.getCards(game).iterator().next();
        if (card != null) {
          controller.moveCards(card,Zone.BATTLEFIELD,source,game,true,false,false,null);
        }
      }
    }
  }
  controller.shuffleLibrary(source,game);
  return true;
}",0.9965397923875432
157663,"@Override public boolean apply(Game game,Ability source){
  Permanent thisCreature=game.getPermanent(source.getId());
  FilterCreatureCard filter=new FilterCreatureCard(""String_Node_Str"");
  filter.add(new AbilityPredicate(MorphAbility.class));
  Effect effect=new PutCardFromHandOntoBattlefieldEffect(new FilterCreatureCard(filter));
  if (effect.apply(game,source)) {
    if (thisCreature != null) {
      effect=new ReturnToHandTargetEffect();
      effect.setTargetPointer(new FixedTarget(thisCreature.getId()));
      effect.apply(game,source);
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent thisCreature=game.getPermanent(source.getId());
  FilterCreatureCard filter=new FilterCreatureCard(""String_Node_Str"");
  filter.add(new AbilityPredicate(MorphAbility.class));
  Effect effect=new PutCardFromHandOntoBattlefieldEffect(filter);
  if (effect.apply(game,source)) {
    if (thisCreature != null) {
      effect=new ReturnToHandTargetEffect();
      effect.setTargetPointer(new FixedTarget(thisCreature.getId()));
      effect.apply(game,source);
      return true;
    }
  }
  return false;
}",0.9691780821917808
157664,"@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.BEGIN_COMBAT_STEP_PRE) {
    this.oozeBlocksOrBlocked.clear();
  }
  if (event.getType() == GameEvent.EventType.BLOCKER_DECLARED) {
    Permanent attacker=game.getPermanent(event.getTargetId());
    Permanent blocker=game.getPermanent(event.getSourceId());
    if (attacker != null && attacker.getName().equals(""String_Node_Str"")) {
      if (blocker != null && hasAttachedEquipment(game,blocker)) {
        MageObjectReference oozeMor=new MageObjectReference(attacker,game);
        HashSet<MageObjectReference> relatedCreatures=oozeBlocksOrBlocked.getOrDefault(oozeMor,new HashSet<>());
        relatedCreatures.add(new MageObjectReference(event.getSourceId(),game));
        oozeBlocksOrBlocked.put(oozeMor,relatedCreatures);
      }
    }
    if (blocker != null && blocker.getName().equals(""String_Node_Str"")) {
      if (attacker != null && hasAttachedEquipment(game,attacker)) {
        MageObjectReference oozeMor=new MageObjectReference(blocker,game);
        HashSet<MageObjectReference> relatedCreatures=oozeBlocksOrBlocked.getOrDefault(oozeMor,new HashSet<>());
        relatedCreatures.add(new MageObjectReference(event.getTargetId(),game));
        oozeBlocksOrBlocked.put(oozeMor,relatedCreatures);
      }
    }
  }
  if (game.getTurn().getPhaseType().equals(TurnPhase.COMBAT)) {
    if (event.getType() == GameEvent.EventType.ZONE_CHANGE) {
      if (((ZoneChangeEvent)event).getFromZone().equals(Zone.BATTLEFIELD)) {
        for (        Map.Entry<MageObjectReference,HashSet<MageObjectReference>> entry : oozeBlocksOrBlocked.entrySet()) {
          for (          MageObjectReference mor : entry.getValue()) {
            if (mor.refersTo(((ZoneChangeEvent)event).getTarget(),game)) {
              for (              UUID attachmentId : ((ZoneChangeEvent)event).getTarget().getAttachments()) {
                Permanent attachment=game.getPermanent(attachmentId);
                if (attachment != null && attachment.hasSubtype(SubType.EQUIPMENT,game)) {
                  HashSet<MageObjectReference> toDestroy=oozeEquipmentsToDestroy.getOrDefault(entry.getKey(),new HashSet<>());
                  toDestroy.add(new MageObjectReference(attachment,game));
                  oozeEquipmentsToDestroy.put(entry.getKey(),toDestroy);
                }
              }
            }
          }
        }
      }
    }
  }
}","@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.BEGIN_COMBAT_STEP_PRE) {
    this.oozeBlocksOrBlocked.clear();
  }
  if (event.getType() == GameEvent.EventType.BLOCKER_DECLARED) {
    Permanent attacker=game.getPermanent(event.getTargetId());
    Permanent blocker=game.getPermanent(event.getSourceId());
    if (attacker != null && attacker.getName().equals(""String_Node_Str"")) {
      if (blocker != null && hasAttachedEquipment(game,blocker)) {
        MageObjectReference oozeMor=new MageObjectReference(attacker,game);
        HashSet<MageObjectReference> relatedCreatures=oozeBlocksOrBlocked.getOrDefault(oozeMor,new HashSet<>());
        relatedCreatures.add(new MageObjectReference(event.getSourceId(),game));
        oozeBlocksOrBlocked.put(oozeMor,relatedCreatures);
      }
    }
    if (blocker != null && blocker.getName().equals(""String_Node_Str"")) {
      if (attacker != null && hasAttachedEquipment(game,attacker)) {
        MageObjectReference oozeMor=new MageObjectReference(blocker,game);
        HashSet<MageObjectReference> relatedCreatures=oozeBlocksOrBlocked.getOrDefault(oozeMor,new HashSet<>());
        relatedCreatures.add(new MageObjectReference(event.getTargetId(),game));
        oozeBlocksOrBlocked.put(oozeMor,relatedCreatures);
      }
    }
  }
  if (event.getType() == GameEvent.EventType.ZONE_CHANGE) {
    if (((ZoneChangeEvent)event).getFromZone().equals(Zone.BATTLEFIELD)) {
      if (game.getTurn() != null && TurnPhase.COMBAT.equals(game.getTurn().getPhaseType())) {
        for (        Map.Entry<MageObjectReference,HashSet<MageObjectReference>> entry : oozeBlocksOrBlocked.entrySet()) {
          for (          MageObjectReference mor : entry.getValue()) {
            if (mor.refersTo(((ZoneChangeEvent)event).getTarget(),game)) {
              for (              UUID attachmentId : ((ZoneChangeEvent)event).getTarget().getAttachments()) {
                Permanent attachment=game.getPermanent(attachmentId);
                if (attachment != null && attachment.hasSubtype(SubType.EQUIPMENT,game)) {
                  HashSet<MageObjectReference> toDestroy=oozeEquipmentsToDestroy.getOrDefault(entry.getKey(),new HashSet<>());
                  toDestroy.add(new MageObjectReference(attachment,game));
                  oozeEquipmentsToDestroy.put(entry.getKey(),toDestroy);
                }
              }
            }
          }
        }
      }
    }
  }
}",0.9669792091316756
157665,"public MuldrothaTheGravetideWatcher(final MuldrothaTheGravetideWatcher watcher){
  super(watcher);
  playerPlayedPermanentTypes.putAll(watcher.playerPlayedPermanentTypes);
}","public MuldrothaTheGravetideWatcher(final MuldrothaTheGravetideWatcher watcher){
  super(watcher);
  sourcePlayedPermanentTypes.putAll(watcher.sourcePlayedPermanentTypes);
}",0.9421965317919077
157666,"@Override public boolean applies(UUID objectId,Ability source,UUID affectedControllerId,Game game){
  if (source.getControllerId().equals(affectedControllerId) && source.getControllerId().equals(game.getOwnerId(objectId)) && affectedControllerId.equals(game.getActivePlayerId())&& Zone.GRAVEYARD.equals(game.getState().getZone(objectId))) {
    MuldrothaTheGravetideWatcher watcher=(MuldrothaTheGravetideWatcher)game.getState().getWatchers().get(MuldrothaTheGravetideWatcher.class.getSimpleName());
    MageObject mageObject=game.getObject(objectId);
    if (mageObject != null && watcher != null) {
      for (      CardType cardType : mageObject.getCardType()) {
        if (cardType.isPermanentType()) {
          if (!watcher.permanentTypePlayedFromGraveyard(affectedControllerId,cardType)) {
            return true;
          }
        }
      }
    }
  }
  return false;
}","@Override public boolean applies(UUID objectId,Ability source,UUID affectedControllerId,Game game){
  if (source.getControllerId().equals(affectedControllerId) && source.getControllerId().equals(game.getOwnerId(objectId)) && affectedControllerId.equals(game.getActivePlayerId())&& Zone.GRAVEYARD.equals(game.getState().getZone(objectId))) {
    MuldrothaTheGravetideWatcher watcher=(MuldrothaTheGravetideWatcher)game.getState().getWatchers().get(MuldrothaTheGravetideWatcher.class.getSimpleName());
    MageObject mageObject=game.getObject(objectId);
    if (mageObject != null && watcher != null) {
      for (      CardType cardType : mageObject.getCardType()) {
        if (cardType.isPermanentType()) {
          MageObjectReference mor=new MageObjectReference(source.getSourceObject(game),game);
          if (!watcher.permanentTypePlayedFromGraveyard(mor,cardType)) {
            return true;
          }
        }
      }
    }
  }
  return false;
}",0.9362397820163488
157667,"@Override public void reset(){
  playerPlayedPermanentTypes.clear();
  super.reset();
}","@Override public void reset(){
  sourcePlayedPermanentTypes.clear();
  super.reset();
}",0.942528735632184
157668,"public boolean permanentTypePlayedFromGraveyard(UUID playerId,CardType cardType){
  Set<CardType> permanentTypes=playerPlayedPermanentTypes.get(playerId);
  if (permanentTypes != null) {
    return permanentTypes.contains(cardType);
  }
  return false;
}","public boolean permanentTypePlayedFromGraveyard(MageObjectReference sourceMor,CardType cardType){
  Set<CardType> permanentTypes=sourcePlayedPermanentTypes.get(sourceMor);
  if (permanentTypes != null) {
    return permanentTypes.contains(cardType);
  }
  return false;
}",0.8647619047619047
157669,"private void addPermanentTypes(GameEvent event,Card mageObject,Game game){
  if (mageObject != null) {
    UUID playerId=null;
    if (mageObject instanceof Spell) {
      playerId=((Spell)mageObject).getControllerId();
    }
 else     if (mageObject instanceof Permanent) {
      playerId=((Permanent)mageObject).getControllerId();
    }
    if (playerId != null) {
      Set<CardType> permanentTypes=playerPlayedPermanentTypes.get(playerId);
      if (permanentTypes == null) {
        permanentTypes=EnumSet.noneOf(CardType.class);
        playerPlayedPermanentTypes.put(playerId,permanentTypes);
      }
      Set<CardType> typesNotCast=EnumSet.noneOf(CardType.class);
      for (      CardType cardType : mageObject.getCardType()) {
        if (cardType.isPermanentType()) {
          if (!permanentTypes.contains(cardType)) {
            typesNotCast.add(cardType);
          }
        }
      }
      if (typesNotCast.size() <= 1) {
        permanentTypes.addAll(typesNotCast);
      }
 else {
        Player player=game.getPlayer(playerId);
        if (player != null) {
          Choice typeChoice=new ChoiceImpl(true);
          typeChoice.setMessage(""String_Node_Str"");
          for (          CardType cardType : typesNotCast) {
            typeChoice.getChoices().add(cardType.toString());
          }
          if (player.choose(Outcome.Detriment,typeChoice,game)) {
            String typeName=typeChoice.getChoice();
            CardType chosenType=null;
            for (            CardType cardType : CardType.values()) {
              if (cardType.toString().equals(typeName)) {
                chosenType=cardType;
                break;
              }
            }
            if (chosenType != null) {
              permanentTypes.add(chosenType);
            }
          }
        }
      }
    }
  }
}","private void addPermanentTypes(GameEvent event,Card mageObject,Game game){
  if (mageObject != null && event.getAdditionalReference() != null) {
    UUID playerId=null;
    if (mageObject instanceof Spell) {
      playerId=((Spell)mageObject).getControllerId();
    }
 else     if (mageObject instanceof Permanent) {
      playerId=((Permanent)mageObject).getControllerId();
    }
    if (playerId != null) {
      Set<CardType> permanentTypes=sourcePlayedPermanentTypes.get(event.getAdditionalReference());
      if (permanentTypes == null) {
        permanentTypes=EnumSet.noneOf(CardType.class);
        sourcePlayedPermanentTypes.put(event.getAdditionalReference(),permanentTypes);
      }
      Set<CardType> typesNotCast=EnumSet.noneOf(CardType.class);
      for (      CardType cardType : mageObject.getCardType()) {
        if (cardType.isPermanentType()) {
          if (!permanentTypes.contains(cardType)) {
            typesNotCast.add(cardType);
          }
        }
      }
      if (typesNotCast.size() <= 1) {
        permanentTypes.addAll(typesNotCast);
      }
 else {
        Player player=game.getPlayer(playerId);
        if (player != null) {
          Choice typeChoice=new ChoiceImpl(true);
          typeChoice.setMessage(""String_Node_Str"");
          for (          CardType cardType : typesNotCast) {
            typeChoice.getChoices().add(cardType.toString());
          }
          if (player.choose(Outcome.Detriment,typeChoice,game)) {
            String typeName=typeChoice.getChoice();
            CardType chosenType=null;
            for (            CardType cardType : CardType.values()) {
              if (cardType.toString().equals(typeName)) {
                chosenType=cardType;
                break;
              }
            }
            if (chosenType != null) {
              permanentTypes.add(chosenType);
            }
          }
        }
      }
    }
  }
}",0.9620726495726496
157670,"@Override public int compare(CardView a,CardView b){
  Comparable aCom=null;
  Comparable bCom=null;
switch (column) {
case 0:
    aCom=1;
  bCom=1;
break;
case 1:
aCom=a.getName();
bCom=b.getName();
if (aCom.equals(bCom) && a.getExpansionSetCode().equals(b.getExpansionSetCode())) {
aCom=a.getCardNumber();
bCom=b.getCardNumber();
}
break;
case 2:
aCom=a.getConvertedManaCost();
bCom=b.getConvertedManaCost();
break;
case 3:
aCom=a.getColorText();
bCom=a.getColorText();
break;
case 4:
aCom=a.getTypeText();
bCom=b.getTypeText();
break;
case 5:
aCom=(float)-1;
bCom=(float)-1;
if (a.isCreature()) {
aCom=new Float(a.getPower() + '.' + (a.getToughness().startsWith(""String_Node_Str"") ? ""String_Node_Str"" : a.getToughness()));
}
if (b.isCreature()) {
bCom=new Float(b.getPower() + '.' + (b.getToughness().startsWith(""String_Node_Str"") ? ""String_Node_Str"" : b.getToughness()));
}
break;
case 6:
aCom=a.getRarity().toString();
bCom=b.getRarity().toString();
break;
case 7:
aCom=a.getExpansionSetCode();
bCom=b.getExpansionSetCode();
break;
case 8:
aCom=Integer.parseInt(a.getCardNumber().replaceAll(""String_Node_Str"",""String_Node_Str""));
bCom=Integer.parseInt(b.getCardNumber().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
default :
break;
}
if (ascending) {
return aCom.compareTo(bCom);
}
 else {
return bCom.compareTo(aCom);
}
}","@Override public int compare(CardView a,CardView b){
  Comparable aCom=null;
  Comparable bCom=null;
switch (column) {
case 0:
    aCom=1;
  bCom=1;
break;
case 1:
aCom=a.getName();
bCom=b.getName();
if (aCom.equals(bCom) && a.getExpansionSetCode().equals(b.getExpansionSetCode())) {
aCom=a.getCardNumber();
bCom=b.getCardNumber();
}
break;
case 2:
aCom=a.getConvertedManaCost();
bCom=b.getConvertedManaCost();
break;
case 3:
aCom=a.getColorText();
bCom=b.getColorText();
break;
case 4:
aCom=a.getTypeText();
bCom=b.getTypeText();
break;
case 5:
aCom=(float)-1;
bCom=(float)-1;
if (a.isCreature()) {
aCom=new Float(a.getPower() + '.' + (a.getToughness().startsWith(""String_Node_Str"") ? ""String_Node_Str"" : a.getToughness()));
}
if (b.isCreature()) {
bCom=new Float(b.getPower() + '.' + (b.getToughness().startsWith(""String_Node_Str"") ? ""String_Node_Str"" : b.getToughness()));
}
break;
case 6:
aCom=a.getRarity().toString();
bCom=b.getRarity().toString();
break;
case 7:
aCom=a.getExpansionSetCode();
bCom=b.getExpansionSetCode();
break;
case 8:
aCom=Integer.parseInt(a.getCardNumber().replaceAll(""String_Node_Str"",""String_Node_Str""));
bCom=Integer.parseInt(b.getCardNumber().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
default :
break;
}
if (ascending) {
return aCom.compareTo(bCom);
}
 else {
return bCom.compareTo(aCom);
}
}",0.9992531740104555
157671,"/** 
 * Creates new form TableWaitingDialog
 */
public TableWaitingDialog(){
  tableWaitModel=new TableWaitModel();
  initComponents();
  int prefWidth=Integer.parseInt(PreferencesDialog.getCachedValue(PreferencesDialog.KEY_TABLE_WAITING_WIDTH,""String_Node_Str""));
  int prefHeight=Integer.parseInt(PreferencesDialog.getCachedValue(PreferencesDialog.KEY_TABLE_WAITING_HEIGHT,""String_Node_Str""));
  if (prefWidth > 40 && prefHeight > 40) {
    this.setSize(prefWidth,prefHeight);
  }
  setGUISize();
  chatPanel.useExtendedView(ChatPanelBasic.VIEW_MODE.NONE);
  jTableSeats.createDefaultColumnsFromModel();
  TableUtil.setColumnWidthAndOrder(jTableSeats,DEFAULT_COLUMNS_WIDTH,KEY_TABLE_WAITING_COLUMNS_WIDTH,KEY_TABLE_WAITING_COLUMNS_ORDER);
  jTableSeats.setDefaultRenderer(Icon.class,new CountryCellRenderer());
  MageFrame.getUI().addButton(MageComponents.TABLE_WAITING_START_BUTTON,btnStart);
}","/** 
 * Creates new form TableWaitingDialog
 */
public TableWaitingDialog(){
  tableWaitModel=new TableWaitModel();
  initComponents();
  int prefWidth=Integer.parseInt(PreferencesDialog.getCachedValue(PreferencesDialog.KEY_TABLE_WAITING_WIDTH,""String_Node_Str""));
  int prefHeight=Integer.parseInt(PreferencesDialog.getCachedValue(PreferencesDialog.KEY_TABLE_WAITING_HEIGHT,""String_Node_Str""));
  if (prefWidth > 40 && prefHeight > 40) {
    this.setSize(prefWidth,prefHeight);
  }
  setGUISize();
  jTableSeats.createDefaultColumnsFromModel();
  jTableSeats.setAutoCreateColumnsFromModel(false);
  jTableSeats.setDefaultRenderer(Icon.class,new CountryCellRenderer());
  TableUtil.setColumnWidthAndOrder(jTableSeats,DEFAULT_COLUMNS_WIDTH,KEY_TABLE_WAITING_COLUMNS_WIDTH,KEY_TABLE_WAITING_COLUMNS_ORDER);
  chatPanel.useExtendedView(ChatPanelBasic.VIEW_MODE.NONE);
  MageFrame.getUI().addButton(MageComponents.TABLE_WAITING_START_BUTTON,btnStart);
}",0.8364030335861322
157672,"public void showDialog(UUID roomId,UUID tableId,boolean isTournament){
  this.roomId=roomId;
  this.tableId=tableId;
  this.isTournament=isTournament;
  updateTask=new UpdateSeatsTask(SessionHandler.getSession(),roomId,tableId,this);
  if (SessionHandler.isTableOwner(roomId,tableId)) {
    this.btnStart.setVisible(true);
    this.btnMoveDown.setVisible(true);
    this.btnMoveUp.setVisible(true);
  }
 else {
    this.btnStart.setVisible(false);
    this.btnMoveDown.setVisible(false);
    this.btnMoveUp.setVisible(false);
  }
  Optional<UUID> chatId=SessionHandler.getTableChatId(tableId);
  if (chatId.isPresent()) {
    this.chatPanel.connect(chatId.get());
    updateTask.execute();
    this.setModal(false);
    this.setLocation(100,100);
    this.setVisible(true);
  }
 else {
    closeDialog();
  }
}","public void showDialog(UUID roomId,UUID tableId,boolean isTournament){
  Rectangle currentBounds=MageFrame.getDesktop().getBounds();
  Optional<UUID> chatId=SessionHandler.getTableChatId(tableId);
  String tournamentChatDivider=PreferencesDialog.getCachedValue(KEY_TABLES_DIVIDER_LOCATION_4,null);
  updateTask=new UpdateSeatsTask(SessionHandler.getSession(),roomId,tableId,this);
  this.roomId=roomId;
  this.tableId=tableId;
  this.isTournament=isTournament;
  if (SessionHandler.isTableOwner(roomId,tableId)) {
    this.btnStart.setVisible(true);
    this.btnMoveDown.setVisible(true);
    this.btnMoveUp.setVisible(true);
  }
 else {
    this.btnStart.setVisible(false);
    this.btnMoveDown.setVisible(false);
    this.btnMoveUp.setVisible(false);
  }
  if (chatId.isPresent()) {
    this.chatPanel.connect(chatId.get());
    updateTask.execute();
    this.setModal(false);
    this.setLocation(100,100);
    this.setVisible(true);
    GuiDisplayUtil.restoreDividerLocations(currentBounds,tournamentChatDivider,jSplitPane1);
  }
 else {
    closeDialog();
  }
}",0.3795309168443497
157673,"public void closeDialog(){
  if (updateTask != null) {
    updateTask.cancel(true);
  }
  this.chatPanel.disconnect();
  MageFrame.getUI().removeButton(MageComponents.TABLE_WAITING_START_BUTTON);
  this.removeDialog();
  TableUtil.saveColumnWidthAndOrderToPrefs(jTableSeats,KEY_TABLE_WAITING_COLUMNS_WIDTH,KEY_TABLE_WAITING_COLUMNS_ORDER);
}","public void closeDialog(){
  if (updateTask != null) {
    updateTask.cancel(true);
  }
  this.chatPanel.disconnect();
  MageFrame.getUI().removeButton(MageComponents.TABLE_WAITING_START_BUTTON);
  this.removeDialog();
  TableUtil.saveColumnWidthAndOrderToPrefs(jTableSeats,KEY_TABLE_WAITING_COLUMNS_WIDTH,KEY_TABLE_WAITING_COLUMNS_ORDER);
  GuiDisplayUtil.saveCurrentBoundsToPrefs();
  GuiDisplayUtil.saveDividerLocationToPrefs(KEY_TABLES_DIVIDER_LOCATION_4,this.jSplitPane1.getDividerLocation());
}",0.8109393579072532
157674,"public void showTables(UUID roomId){
  this.roomId=roomId;
  UUID chatRoomId=null;
  if (SessionHandler.getSession() != null) {
    btnQuickStart.setVisible(SessionHandler.isTestMode());
    gameChooser.init();
    chatRoomId=SessionHandler.getRoomChatId(roomId).orElse(null);
  }
  if (newTableDialog == null) {
    newTableDialog=new NewTableDialog();
    MageFrame.getDesktop().add(newTableDialog,JLayeredPane.MODAL_LAYER);
  }
  if (newTournamentDialog == null) {
    newTournamentDialog=new NewTournamentDialog();
    MageFrame.getDesktop().add(newTournamentDialog,JLayeredPane.MODAL_LAYER);
  }
  if (joinTableDialog == null) {
    joinTableDialog=new JoinTableDialog();
    MageFrame.getDesktop().add(joinTableDialog,JLayeredPane.MODAL_LAYER);
  }
  if (chatRoomId != null) {
    this.chatPanelMain.getUserChatPanel().connect(chatRoomId);
    startTasks();
    this.setVisible(true);
    this.repaint();
  }
 else {
    hideTables();
  }
  reloadMessages();
  MageFrame.getUI().addButton(MageComponents.NEW_GAME_BUTTON,btnNewTable);
  Executors.newSingleThreadScheduledExecutor().schedule(() -> restoreDividerLocations(),300,TimeUnit.MILLISECONDS);
}","public void showTables(UUID roomId){
  this.roomId=roomId;
  UUID chatRoomId=null;
  if (SessionHandler.getSession() != null) {
    btnQuickStart.setVisible(SessionHandler.isTestMode());
    gameChooser.init();
    chatRoomId=SessionHandler.getRoomChatId(roomId).orElse(null);
  }
  if (newTableDialog == null) {
    newTableDialog=new NewTableDialog();
    MageFrame.getDesktop().add(newTableDialog,JLayeredPane.MODAL_LAYER);
  }
  if (newTournamentDialog == null) {
    newTournamentDialog=new NewTournamentDialog();
    MageFrame.getDesktop().add(newTournamentDialog,JLayeredPane.MODAL_LAYER);
  }
  if (joinTableDialog == null) {
    joinTableDialog=new JoinTableDialog();
    MageFrame.getDesktop().add(joinTableDialog,JLayeredPane.MODAL_LAYER);
  }
  if (chatRoomId != null) {
    this.chatPanelMain.getUserChatPanel().connect(chatRoomId);
    startTasks();
    this.setVisible(true);
    this.repaint();
  }
 else {
    hideTables();
  }
  reloadMessages();
  MageFrame.getUI().addButton(MageComponents.NEW_GAME_BUTTON,btnNewTable);
  Executors.newSingleThreadScheduledExecutor().schedule(() -> restoreDividers(),300,TimeUnit.MILLISECONDS);
}",0.9965307892454468
157675,"private void saveDividerLocations(){
  Rectangle rec=MageFrame.getDesktop().getBounds();
  String sb=Double.toString(rec.getWidth()) + 'x' + Double.toString(rec.getHeight());
  PreferencesDialog.saveValue(PreferencesDialog.KEY_MAGE_PANEL_LAST_SIZE,sb);
  PreferencesDialog.saveValue(PreferencesDialog.KEY_TABLES_DIVIDER_LOCATION_1,Integer.toString(this.jSplitPane1.getDividerLocation()));
  PreferencesDialog.saveValue(PreferencesDialog.KEY_TABLES_DIVIDER_LOCATION_2,Integer.toString(this.jSplitPaneTables.getDividerLocation()));
  PreferencesDialog.saveValue(PreferencesDialog.KEY_TABLES_DIVIDER_LOCATION_3,Integer.toString(chatPanelMain.getSplitDividerLocation()));
}","private void saveDividerLocations(){
  GuiDisplayUtil.saveCurrentBoundsToPrefs();
  GuiDisplayUtil.saveDividerLocationToPrefs(KEY_TABLES_DIVIDER_LOCATION_1,this.jSplitPane1.getDividerLocation());
  GuiDisplayUtil.saveDividerLocationToPrefs(KEY_TABLES_DIVIDER_LOCATION_2,this.jSplitPaneTables.getDividerLocation());
  GuiDisplayUtil.saveDividerLocationToPrefs(KEY_TABLES_DIVIDER_LOCATION_3,chatPanelMain.getSplitDividerLocation());
}",0.2016348773841962
157676,"/** 
 * Creates new form TablesPanel
 */
public TablesPanel(){
  tableModel=new TableTableModel();
  matchesModel=new MatchesTableModel();
  gameChooser=new GameChooser();
  initComponents();
  timeFormater.setLocale(Locale.ENGLISH);
  JustNow jn=timeFormater.getUnit(JustNow.class);
  jn.setMaxQuantity(1000L * 30L);
  tableTables.createDefaultColumnsFromModel();
  activeTablesSorter=new MageTableRowSorter(tableModel);
  tableTables.setRowSorter(activeTablesSorter);
  tableTables.getColumnModel().getColumn(TableTableModel.COLUMN_CREATED).setCellRenderer(timeAgoCellRenderer);
  ArrayList list=new ArrayList();
  list.add(new RowSorter.SortKey(TableTableModel.COLUMN_CREATED,SortOrder.DESCENDING));
  activeTablesSorter.setSortKeys(list);
  TableUtil.setColumnWidthAndOrder(tableTables,DEFAULT_COLUMNS_WIDTH,PreferencesDialog.KEY_TABLES_COLUMNS_WIDTH,PreferencesDialog.KEY_TABLES_COLUMNS_ORDER);
  completedTablesSorter=new MageTableRowSorter(matchesModel);
  tableCompleted.setRowSorter(completedTablesSorter);
  tableCompleted.getColumnModel().getColumn(MatchesTableModel.COLUMN_DURATION).setCellRenderer(durationCellRenderer);
  tableCompleted.getColumnModel().getColumn(MatchesTableModel.COLUMN_START).setCellRenderer(datetimeCellRenderer);
  tableCompleted.getColumnModel().getColumn(MatchesTableModel.COLUMN_END).setCellRenderer(datetimeCellRenderer);
  ArrayList list2=new ArrayList();
  list2.add(new RowSorter.SortKey(MatchesTableModel.COLUMN_END,SortOrder.DESCENDING));
  completedTablesSorter.setSortKeys(list2);
  chatPanelMain.getUserChatPanel().useExtendedView(ChatPanelBasic.VIEW_MODE.NONE);
  chatPanelMain.getUserChatPanel().setBorder(null);
  chatPanelMain.getUserChatPanel().setChatType(ChatPanelBasic.ChatType.TABLES);
  filterButtons=new JToggleButton[]{btnStateWaiting,btnStateActive,btnStateFinished,btnTypeMatch,btnTypeTourneyConstructed,btnTypeTourneyLimited,btnFormatBlock,btnFormatStandard,btnFormatModern,btnFormatLegacy,btnFormatVintage,btnFormatCommander,btnFormatTinyLeader,btnFormatLimited,btnFormatOther,btnSkillBeginner,btnSkillCasual,btnSkillSerious,btnRated,btnUnrated,btnOpen,btnPassword};
  JComponent[] components=new JComponent[]{chatPanelMain,jSplitPane1,jScrollPaneTablesActive,jScrollPaneTablesFinished,jPanelTop,jPanelTables};
  for (  JComponent component : components) {
    component.setOpaque(false);
  }
  jScrollPaneTablesActive.getViewport().setBackground(new Color(255,255,255,50));
  jScrollPaneTablesFinished.getViewport().setBackground(new Color(255,255,255,50));
  restoreSettings();
  setGUISize();
  Action openTableAction;
  openTableAction=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      int modelRow=Integer.valueOf(e.getActionCommand());
      UUID tableId=(UUID)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN + 3);
      UUID gameId=(UUID)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN + 2);
      String action=(String)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN);
      String deckType=(String)tableModel.getValueAt(modelRow,TableTableModel.COLUMN_DECK_TYPE);
      boolean isTournament=(Boolean)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN + 1);
      String owner=(String)tableModel.getValueAt(modelRow,TableTableModel.COLUMN_OWNER);
      String pwdColumn=(String)tableModel.getValueAt(modelRow,TableTableModel.COLUMN_PASSWORD);
switch (action) {
case ""String_Node_Str"":
        if (owner.equals(SessionHandler.getUserName()) || owner.startsWith(SessionHandler.getUserName() + ',')) {
          try {
            JDesktopPane desktopPane=(JDesktopPane)MageFrame.getUI().getComponent(MageComponents.DESKTOP_PANE);
            JInternalFrame[] windows=desktopPane.getAllFramesInLayer(javax.swing.JLayeredPane.DEFAULT_LAYER);
            for (            JInternalFrame frame : windows) {
              if (frame.getTitle().equals(""String_Node_Str"")) {
                frame.toFront();
                frame.setVisible(true);
                try {
                  frame.setSelected(true);
                }
 catch (                PropertyVetoException ve) {
                  LOGGER.error(ve);
                }
              }
            }
          }
 catch (          InterruptedException ex) {
            LOGGER.error(ex);
          }
          return;
        }
      if (isTournament) {
        LOGGER.info(""String_Node_Str"" + tableId);
        if (deckType.startsWith(""String_Node_Str"")) {
          if (TableTableModel.PASSWORD_VALUE_YES.equals(pwdColumn)) {
            joinTableDialog.showDialog(roomId,tableId,true,deckType.startsWith(""String_Node_Str""));
          }
 else {
            SessionHandler.joinTournamentTable(roomId,tableId,SessionHandler.getUserName(),PlayerType.HUMAN,1,null,""String_Node_Str"");
          }
        }
 else {
          joinTableDialog.showDialog(roomId,tableId,true,deckType.startsWith(""String_Node_Str""));
        }
      }
 else {
        LOGGER.info(""String_Node_Str"" + tableId);
        joinTableDialog.showDialog(roomId,tableId,false,false);
      }
    break;
case ""String_Node_Str"":
  UserRequestMessage message=new UserRequestMessage(""String_Node_Str"",""String_Node_Str"");
message.setButton1(""String_Node_Str"",null);
message.setButton2(""String_Node_Str"",PlayerAction.CLIENT_REMOVE_TABLE);
MageFrame.getInstance().showUserRequestDialog(message);
break;
case ""String_Node_Str"":
if (isTournament) {
LOGGER.info(""String_Node_Str"" + tableId);
SessionHandler.watchTable(roomId,tableId);
}
break;
case ""String_Node_Str"":
if (!isTournament) {
LOGGER.info(""String_Node_Str"" + tableId);
SessionHandler.watchTable(roomId,tableId);
}
break;
case ""String_Node_Str"":
LOGGER.info(""String_Node_Str"" + gameId);
SessionHandler.replayGame(gameId);
break;
}
}
}
;
Action closedTableAction;
closedTableAction=new AbstractAction(){
@Override public void actionPerformed(ActionEvent e){
int modelRow=Integer.valueOf(e.getActionCommand());
String action=(String)matchesModel.getValueAt(modelRow,MatchesTableModel.COLUMN_ACTION);
switch (action) {
case ""String_Node_Str"":
java.util.List<UUID> gameList=matchesModel.getListofGames(modelRow);
if (gameList != null && !gameList.isEmpty()) {
if (gameList.size() == 1) {
SessionHandler.replayGame(gameList.get(0));
}
 else {
gameChooser.show(gameList,MageFrame.getDesktop().getMousePosition());
}
}
break;
case ""String_Node_Str"":
if (matchesModel.isTournament(modelRow)) {
LOGGER.info(""String_Node_Str"" + matchesModel.getTableId(modelRow));
SessionHandler.watchTable(roomId,matchesModel.getTableId(modelRow));
}
break;
}
}
}
;
actionButton1=new ButtonColumn(tableTables,openTableAction,tableTables.convertColumnIndexToView(TableTableModel.ACTION_COLUMN));
actionButton2=new ButtonColumn(tableCompleted,closedTableAction,tableCompleted.convertColumnIndexToView(MatchesTableModel.COLUMN_ACTION));
}","/** 
 * Creates new form TablesPanel
 */
public TablesPanel(){
  tableModel=new TableTableModel();
  matchesModel=new MatchesTableModel();
  gameChooser=new GameChooser();
  initComponents();
  timeFormater.setLocale(Locale.ENGLISH);
  JustNow jn=timeFormater.getUnit(JustNow.class);
  jn.setMaxQuantity(1000L * 30L);
  tableTables.createDefaultColumnsFromModel();
  activeTablesSorter=new MageTableRowSorter(tableModel);
  tableTables.setRowSorter(activeTablesSorter);
  tableTables.getColumnModel().getColumn(TableTableModel.COLUMN_CREATED).setCellRenderer(timeAgoCellRenderer);
  ArrayList list=new ArrayList();
  list.add(new RowSorter.SortKey(TableTableModel.COLUMN_CREATED,SortOrder.DESCENDING));
  activeTablesSorter.setSortKeys(list);
  TableUtil.setColumnWidthAndOrder(tableTables,DEFAULT_COLUMNS_WIDTH,KEY_TABLES_COLUMNS_WIDTH,KEY_TABLES_COLUMNS_ORDER);
  completedTablesSorter=new MageTableRowSorter(matchesModel);
  tableCompleted.setRowSorter(completedTablesSorter);
  tableCompleted.getColumnModel().getColumn(MatchesTableModel.COLUMN_DURATION).setCellRenderer(durationCellRenderer);
  tableCompleted.getColumnModel().getColumn(MatchesTableModel.COLUMN_START).setCellRenderer(datetimeCellRenderer);
  tableCompleted.getColumnModel().getColumn(MatchesTableModel.COLUMN_END).setCellRenderer(datetimeCellRenderer);
  ArrayList list2=new ArrayList();
  list2.add(new RowSorter.SortKey(MatchesTableModel.COLUMN_END,SortOrder.DESCENDING));
  completedTablesSorter.setSortKeys(list2);
  chatPanelMain.getUserChatPanel().useExtendedView(ChatPanelBasic.VIEW_MODE.NONE);
  chatPanelMain.getUserChatPanel().setBorder(null);
  chatPanelMain.getUserChatPanel().setChatType(ChatPanelBasic.ChatType.TABLES);
  filterButtons=new JToggleButton[]{btnStateWaiting,btnStateActive,btnStateFinished,btnTypeMatch,btnTypeTourneyConstructed,btnTypeTourneyLimited,btnFormatBlock,btnFormatStandard,btnFormatModern,btnFormatLegacy,btnFormatVintage,btnFormatCommander,btnFormatTinyLeader,btnFormatLimited,btnFormatOther,btnSkillBeginner,btnSkillCasual,btnSkillSerious,btnRated,btnUnrated,btnOpen,btnPassword};
  JComponent[] components=new JComponent[]{chatPanelMain,jSplitPane1,jScrollPaneTablesActive,jScrollPaneTablesFinished,jPanelTop,jPanelTables};
  for (  JComponent component : components) {
    component.setOpaque(false);
  }
  jScrollPaneTablesActive.getViewport().setBackground(new Color(255,255,255,50));
  jScrollPaneTablesFinished.getViewport().setBackground(new Color(255,255,255,50));
  restoreFilters();
  setGUISize();
  Action openTableAction;
  openTableAction=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      int modelRow=Integer.valueOf(e.getActionCommand());
      UUID tableId=(UUID)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN + 3);
      UUID gameId=(UUID)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN + 2);
      String action=(String)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN);
      String deckType=(String)tableModel.getValueAt(modelRow,TableTableModel.COLUMN_DECK_TYPE);
      boolean isTournament=(Boolean)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN + 1);
      String owner=(String)tableModel.getValueAt(modelRow,TableTableModel.COLUMN_OWNER);
      String pwdColumn=(String)tableModel.getValueAt(modelRow,TableTableModel.COLUMN_PASSWORD);
switch (action) {
case ""String_Node_Str"":
        if (owner.equals(SessionHandler.getUserName()) || owner.startsWith(SessionHandler.getUserName() + ',')) {
          try {
            JDesktopPane desktopPane=(JDesktopPane)MageFrame.getUI().getComponent(MageComponents.DESKTOP_PANE);
            JInternalFrame[] windows=desktopPane.getAllFramesInLayer(javax.swing.JLayeredPane.DEFAULT_LAYER);
            for (            JInternalFrame frame : windows) {
              if (frame.getTitle().equals(""String_Node_Str"")) {
                frame.toFront();
                frame.setVisible(true);
                try {
                  frame.setSelected(true);
                }
 catch (                PropertyVetoException ve) {
                  LOGGER.error(ve);
                }
              }
            }
          }
 catch (          InterruptedException ex) {
            LOGGER.error(ex);
          }
          return;
        }
      if (isTournament) {
        LOGGER.info(""String_Node_Str"" + tableId);
        if (deckType.startsWith(""String_Node_Str"")) {
          if (TableTableModel.PASSWORD_VALUE_YES.equals(pwdColumn)) {
            joinTableDialog.showDialog(roomId,tableId,true,deckType.startsWith(""String_Node_Str""));
          }
 else {
            SessionHandler.joinTournamentTable(roomId,tableId,SessionHandler.getUserName(),PlayerType.HUMAN,1,null,""String_Node_Str"");
          }
        }
 else {
          joinTableDialog.showDialog(roomId,tableId,true,deckType.startsWith(""String_Node_Str""));
        }
      }
 else {
        LOGGER.info(""String_Node_Str"" + tableId);
        joinTableDialog.showDialog(roomId,tableId,false,false);
      }
    break;
case ""String_Node_Str"":
  UserRequestMessage message=new UserRequestMessage(""String_Node_Str"",""String_Node_Str"");
message.setButton1(""String_Node_Str"",null);
message.setButton2(""String_Node_Str"",PlayerAction.CLIENT_REMOVE_TABLE);
MageFrame.getInstance().showUserRequestDialog(message);
break;
case ""String_Node_Str"":
if (isTournament) {
LOGGER.info(""String_Node_Str"" + tableId);
SessionHandler.watchTable(roomId,tableId);
}
break;
case ""String_Node_Str"":
if (!isTournament) {
LOGGER.info(""String_Node_Str"" + tableId);
SessionHandler.watchTable(roomId,tableId);
}
break;
case ""String_Node_Str"":
LOGGER.info(""String_Node_Str"" + gameId);
SessionHandler.replayGame(gameId);
break;
}
}
}
;
Action closedTableAction;
closedTableAction=new AbstractAction(){
@Override public void actionPerformed(ActionEvent e){
int modelRow=Integer.valueOf(e.getActionCommand());
String action=(String)matchesModel.getValueAt(modelRow,MatchesTableModel.COLUMN_ACTION);
switch (action) {
case ""String_Node_Str"":
java.util.List<UUID> gameList=matchesModel.getListofGames(modelRow);
if (gameList != null && !gameList.isEmpty()) {
if (gameList.size() == 1) {
SessionHandler.replayGame(gameList.get(0));
}
 else {
gameChooser.show(gameList,MageFrame.getDesktop().getMousePosition());
}
}
break;
case ""String_Node_Str"":
if (matchesModel.isTournament(modelRow)) {
LOGGER.info(""String_Node_Str"" + matchesModel.getTableId(modelRow));
SessionHandler.watchTable(roomId,matchesModel.getTableId(modelRow));
}
break;
}
}
}
;
actionButton1=new ButtonColumn(tableTables,openTableAction,tableTables.convertColumnIndexToView(TableTableModel.ACTION_COLUMN));
actionButton2=new ButtonColumn(tableCompleted,closedTableAction,tableCompleted.convertColumnIndexToView(MatchesTableModel.COLUMN_ACTION));
}",0.9964099934061104
157677,"public void cleanUp(){
  saveSettings();
  chatPanelMain.cleanUp();
}","public void cleanUp(){
  saveGuiSettings();
  chatPanelMain.cleanUp();
}",0.9787234042553192
157678,"static public void setColumnWidthAndOrder(JTable table,int[] defaultColumnsWidth,String widthPrefKey,String orderPrefKey){
  table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  int[] widths=getIntArrayFromString(PreferencesDialog.getCachedValue(widthPrefKey,null));
  LOGGER.info(""String_Node_Str"" + Arrays.toString(widths));
  int i=0;
  for (  int width : defaultColumnsWidth) {
    if (widths != null && widths.length > i) {
      width=widths[i];
    }
    if (table.getColumnModel().getColumnCount() >= i) {
      TableColumn column=table.getColumnModel().getColumn(i++);
      column.setWidth(width);
      column.setPreferredWidth(width);
    }
 else {
      break;
    }
  }
  int[] order=getIntArrayFromString(PreferencesDialog.getCachedValue(orderPrefKey,null));
  LOGGER.info(""String_Node_Str"" + Arrays.toString(order));
  if (order != null && order.length == table.getColumnCount()) {
    for (int j=0; j < table.getColumnCount(); j++) {
      table.moveColumn(table.convertColumnIndexToView(order[j]),j);
    }
  }
}","public static void setColumnWidthAndOrder(JTable table,int[] defaultColumnsWidth,String widthPrefKey,String orderPrefKey){
  table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  int[] widths=getIntArrayFromString(PreferencesDialog.getCachedValue(widthPrefKey,null));
  int i=0;
  for (  int width : defaultColumnsWidth) {
    if (widths != null && widths.length > i) {
      width=widths[i];
    }
    if (table.getColumnModel().getColumnCount() >= i) {
      TableColumn column=table.getColumnModel().getColumn(i++);
      column.setWidth(width);
      column.setPreferredWidth(width);
    }
 else {
      break;
    }
  }
  int[] order=getIntArrayFromString(PreferencesDialog.getCachedValue(orderPrefKey,null));
  if (order != null && order.length == table.getColumnCount()) {
    for (int j=0; j < table.getColumnCount(); j++) {
      table.moveColumn(table.convertColumnIndexToView(order[j]),j);
    }
  }
}",0.930304594734125
157679,"static public void saveColumnWidthAndOrderToPrefs(JTable table,String widthPrefKey,String orderPrefKey){
  StringBuilder columnWidthSettings=new StringBuilder();
  StringBuilder columnOrderSettings=new StringBuilder();
  boolean firstValue=true;
  for (int i=0; i < table.getColumnModel().getColumnCount(); i++) {
    TableColumn column=table.getColumnModel().getColumn(table.convertColumnIndexToView(i));
    if (!firstValue) {
      columnWidthSettings.append(',');
      columnOrderSettings.append(',');
    }
 else {
      firstValue=false;
    }
    columnWidthSettings.append(column.getWidth());
    columnOrderSettings.append(table.convertColumnIndexToModel(i));
  }
  PreferencesDialog.saveValue(widthPrefKey,columnWidthSettings.toString());
  PreferencesDialog.saveValue(orderPrefKey,columnOrderSettings.toString());
  LOGGER.info(""String_Node_Str"" + columnWidthSettings.toString());
  LOGGER.info(""String_Node_Str"" + columnOrderSettings.toString());
}","public static void saveColumnWidthAndOrderToPrefs(JTable table,String widthPrefKey,String orderPrefKey){
  StringBuilder columnWidthSettings=new StringBuilder();
  StringBuilder columnOrderSettings=new StringBuilder();
  boolean firstValue=true;
  for (int i=0; i < table.getColumnModel().getColumnCount(); i++) {
    TableColumn column=table.getColumnModel().getColumn(table.convertColumnIndexToView(i));
    if (!firstValue) {
      columnWidthSettings.append(',');
      columnOrderSettings.append(',');
    }
 else {
      firstValue=false;
    }
    columnWidthSettings.append(column.getWidth());
    columnOrderSettings.append(table.convertColumnIndexToModel(i));
  }
  PreferencesDialog.saveValue(widthPrefKey,columnWidthSettings.toString());
  PreferencesDialog.saveValue(orderPrefKey,columnOrderSettings.toString());
}",0.9172259507829976
157680,"public static int[] getIntArrayFromString(String stringData){
  int[] intArray=null;
  if (stringData != null && !stringData.isEmpty()) {
    String[] items=stringData.split(""String_Node_Str"");
    int lengthW=items.length;
    intArray=new int[lengthW];
    for (int i=0; i < lengthW; i++) {
      try {
        intArray[i]=Integer.parseInt(items[i]);
      }
 catch (      NumberFormatException nfe) {
      }
    }
  }
  return intArray;
}","private static int[] getIntArrayFromString(String stringData){
  int[] intArray=null;
  if (stringData != null && !stringData.isEmpty()) {
    String[] items=stringData.split(""String_Node_Str"");
    int lengthW=items.length;
    intArray=new int[lengthW];
    for (int i=0; i < lengthW; i++) {
      try {
        intArray[i]=Integer.parseInt(items[i]);
      }
 catch (      NumberFormatException nfe) {
      }
    }
  }
  return intArray;
}",0.9875706214689266
157681,"@Override public boolean apply(Game game,Ability source){
  UUID controllerId=source.getControllerId();
  Target target=new TargetCreaturePermanent();
  target.setNotTarget(true);
  target.setTargetName(""String_Node_Str"");
  if (!target.canChoose(source.getSourceId(),controllerId,game)) {
    return false;
  }
  Player player=game.getPlayer(controllerId);
  if (player != null) {
    player.chooseTarget(Outcome.Sacrifice,target,source,game);
    Permanent creatureToSacrifice=game.getPermanent(target.getTargets().get(0));
    int amount=creatureToSacrifice.getPower().getValue();
    if (!creatureToSacrifice.sacrifice(creatureToSacrifice.getId(),game)) {
      return false;
    }
    if (amount > 0) {
      Permanent permanent=game.getPermanent(source.getFirstTarget());
      if (permanent != null) {
        permanent.damage(amount,source.getSourceId(),game,false,true);
        return true;
      }
      player=game.getPlayer(source.getFirstTarget());
      if (player != null) {
        player.damage(amount,source.getSourceId(),game,false,true);
        return true;
      }
    }
 else {
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  UUID controllerId=source.getControllerId();
  Target target=new TargetControlledCreaturePermanent();
  target.setNotTarget(true);
  target.setTargetName(""String_Node_Str"");
  if (!target.canChoose(source.getSourceId(),controllerId,game)) {
    return false;
  }
  Player player=game.getPlayer(controllerId);
  if (player != null) {
    player.chooseTarget(Outcome.Sacrifice,target,source,game);
    Permanent creatureToSacrifice=game.getPermanent(target.getTargets().get(0));
    int amount=creatureToSacrifice.getPower().getValue();
    if (!creatureToSacrifice.sacrifice(creatureToSacrifice.getId(),game)) {
      return false;
    }
    if (amount > 0) {
      Permanent permanent=game.getPermanent(source.getFirstTarget());
      if (permanent != null) {
        permanent.damage(amount,source.getSourceId(),game,false,true);
        return true;
      }
      player=game.getPlayer(source.getFirstTarget());
      if (player != null) {
        player.damage(amount,source.getSourceId(),game,false,true);
        return true;
      }
    }
 else {
      return true;
    }
  }
  return false;
}",0.9956634865568084
157682,"private List<Token> getTokens(int page,String set){
  ArrayList<CardDownloadData> allTokens=getTokenCardUrls();
  ArrayList<Token> tokens=new ArrayList<>();
  for (  CardDownloadData token : allTokens) {
    if (token.getSet().equals(set)) {
      try {
        String className=token.getName();
        className=className.replaceAll(""String_Node_Str"",""String_Node_Str"");
        className=""String_Node_Str"" + className + ""String_Node_Str"";
        if (token.getTokenClassName() != null && token.getTokenClassName().length() > 0) {
          if (token.getTokenClassName().toLowerCase(Locale.ENGLISH).matches(""String_Node_Str"")) {
            className=token.getTokenClassName();
            className=""String_Node_Str"" + className;
          }
 else           if (token.getTokenClassName().toLowerCase(Locale.ENGLISH).matches(""String_Node_Str"")) {
            continue;
          }
        }
        Class<?> c=Class.forName(className);
        Constructor<?> cons=c.getConstructor();
        Object newToken=cons.newInstance();
        if (newToken != null && newToken instanceof mage.game.permanent.token.Token) {
          ((Token)newToken).setExpansionSetCodeForImage(set);
          ((Token)newToken).setOriginalExpansionSetCode(set);
          ((Token)newToken).setTokenType(token.getType());
          tokens.add((Token)newToken);
        }
      }
 catch (      ClassNotFoundException|NoSuchMethodException|SecurityException|InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException ex) {
      }
    }
  }
  int start=page * conf.CARDS_PER_PAGE;
  int end=page * conf.CARDS_PER_PAGE + conf.CARDS_PER_PAGE;
  int ttokens=getTotalNumTokens(set);
  int temblems=getTotalNumEmblems(set);
  int tplanes=getTotalNumPlanes(set);
  int numTokensEmblemsPlanes=ttokens + temblems + tplanes;
  if (end > numTokensEmblemsPlanes) {
    end=numTokensEmblemsPlanes;
  }
  if (numTokensEmblemsPlanes > end) {
    pageRight.setVisible(true);
  }
  end=Math.min(end,ttokens);
  if (start < ttokens) {
    return tokens.subList(start,end);
  }
  return null;
}","private List<Token> getTokens(int page,String set){
  ArrayList<CardDownloadData> allTokens=getTokenCardUrls();
  ArrayList<Token> tokens=new ArrayList<>();
  for (  CardDownloadData token : allTokens) {
    if (token.getSet().equals(set)) {
      try {
        String className=token.getName();
        className=className.replaceAll(""String_Node_Str"",""String_Node_Str"");
        className=""String_Node_Str"" + className + ""String_Node_Str"";
        if (token.getTokenClassName() != null && token.getTokenClassName().length() > 0) {
          if (token.getTokenClassName().toLowerCase(Locale.ENGLISH).matches(""String_Node_Str"")) {
            className=token.getTokenClassName();
            className=""String_Node_Str"" + className;
          }
 else           if (token.getTokenClassName().toLowerCase(Locale.ENGLISH).matches(""String_Node_Str"")) {
            continue;
          }
        }
        Class<?> c=Class.forName(className);
        Constructor<?> cons=c.getConstructor();
        Object newToken=cons.newInstance();
        if (newToken != null && newToken instanceof mage.game.permanent.token.Token) {
          ((Token)newToken).setExpansionSetCodeForImage(set);
          ((Token)newToken).setOriginalExpansionSetCode(set);
          ((Token)newToken).setTokenType(token.getType());
          tokens.add((Token)newToken);
        }
      }
 catch (      ClassNotFoundException|NoSuchMethodException|SecurityException|InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException ex) {
      }
    }
  }
  int start=page * conf.CARDS_PER_PAGE;
  int end=page * conf.CARDS_PER_PAGE + conf.CARDS_PER_PAGE;
  int ttokens=tokens.size();
  int temblems=getTotalNumEmblems(set);
  int tplanes=getTotalNumPlanes(set);
  int numTokensEmblemsPlanes=ttokens + temblems + tplanes;
  if (end > numTokensEmblemsPlanes) {
    end=numTokensEmblemsPlanes;
  }
  if (numTokensEmblemsPlanes > end) {
    pageRight.setVisible(true);
  }
  end=Math.min(end,ttokens);
  if (start < ttokens) {
    return tokens.subList(start,end);
  }
  return null;
}",0.9920882282426275
157683,"private void handlePopup(TransferData transferData){
  MageCard mageCard=(MageCard)transferData.component;
  if (!popupTextWindowOpen || mageCard.getOriginal().getId() != bigCard.getCardId()) {
    if (bigCard.getWidth() > 0) {
synchronized (MageActionCallback.class) {
        if (!popupTextWindowOpen || mageCard.getOriginal().getId() != bigCard.getCardId()) {
          if (!popupTextWindowOpen) {
            bigCard.resetCardId();
          }
          popupTextWindowOpen=true;
          Image image=mageCard.getImage();
          displayCardInfo(mageCard,image,bigCard);
        }
      }
    }
 else {
      popupTextWindowOpen=true;
    }
    if (enlargedWindowState != EnlargedWindowState.CLOSED) {
      cancelTimeout();
      displayEnlargedCard(mageCard.getOriginal(),transferData);
    }
  }
}","private void handlePopup(TransferData transferData){
  MageCard mageCard=(MageCard)transferData.component;
  if (!popupTextWindowOpen || !Objects.equals(mageCard.getOriginal().getId(),bigCard.getCardId())) {
    if (bigCard.getWidth() > 0) {
synchronized (MageActionCallback.class) {
        if (!popupTextWindowOpen || !Objects.equals(mageCard.getOriginal().getId(),bigCard.getCardId())) {
          if (!popupTextWindowOpen) {
            bigCard.resetCardId();
          }
          popupTextWindowOpen=true;
          Image image=mageCard.getImage();
          displayCardInfo(mageCard,image,bigCard);
        }
      }
    }
 else {
      popupTextWindowOpen=true;
    }
    if (enlargedWindowState != EnlargedWindowState.CLOSED) {
      cancelTimeout();
      displayEnlargedCard(mageCard.getOriginal(),transferData);
    }
  }
}",0.9732034104750305
157684,"@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final CardDownloadData other=(CardDownloadData)obj;
  if ((this.name == null) ? (other.name != null) : !this.name.equals(other.name)) {
    return false;
  }
  if ((this.set == null) ? (other.set != null) : !this.set.equals(other.set)) {
    return false;
  }
  if (!Objects.equals(this.collectorId,other.collectorId) && (this.collectorId == null || !this.collectorId.equals(other.collectorId))) {
    return false;
  }
  if (this.token != other.token) {
    return false;
  }
  if (this.twoFacedCard != other.twoFacedCard) {
    return false;
  }
  if (this.secondSide != other.secondSide) {
    return false;
  }
  if (this.isType2 != other.isType2) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (!getClass().equals(obj.getClass())) {
    return false;
  }
  final CardDownloadData other=(CardDownloadData)obj;
  if ((this.name == null) ? (other.name != null) : !this.name.equals(other.name)) {
    return false;
  }
  if ((this.set == null) ? (other.set != null) : !this.set.equals(other.set)) {
    return false;
  }
  if (!Objects.equals(this.collectorId,other.collectorId) && (this.collectorId == null || !this.collectorId.equals(other.collectorId))) {
    return false;
  }
  if (this.token != other.token) {
    return false;
  }
  if (this.twoFacedCard != other.twoFacedCard) {
    return false;
  }
  if (this.secondSide != other.secondSide) {
    return false;
  }
  if (this.isType2 != other.isType2) {
    return false;
  }
  return true;
}",0.991715976331361
157685,"private void showProxySettings(){
  if (cbProxyType.getSelectedItem() == Connection.ProxyType.SOCKS) {
    this.pnlProxy.setVisible(true);
    this.pnlProxyAuth.setVisible(false);
    this.pnlProxySettings.setVisible(true);
  }
 else   if (cbProxyType.getSelectedItem() == Connection.ProxyType.HTTP) {
    this.pnlProxy.setVisible(true);
    this.pnlProxyAuth.setVisible(true);
    this.pnlProxySettings.setVisible(true);
  }
 else   if (cbProxyType.getSelectedItem() == Connection.ProxyType.NONE) {
    this.pnlProxy.setVisible(false);
    this.pnlProxyAuth.setVisible(false);
    this.pnlProxySettings.setVisible(false);
  }
  this.pack();
  this.repaint();
}","private void showProxySettings(){
  if (Objects.equals(cbProxyType.getSelectedItem(),ProxyType.SOCKS)) {
    this.pnlProxy.setVisible(true);
    this.pnlProxyAuth.setVisible(false);
    this.pnlProxySettings.setVisible(true);
  }
 else   if (Objects.equals(cbProxyType.getSelectedItem(),ProxyType.HTTP)) {
    this.pnlProxy.setVisible(true);
    this.pnlProxyAuth.setVisible(true);
    this.pnlProxySettings.setVisible(true);
  }
 else   if (Objects.equals(cbProxyType.getSelectedItem(),ProxyType.NONE)) {
    this.pnlProxy.setVisible(false);
    this.pnlProxyAuth.setVisible(false);
    this.pnlProxySettings.setVisible(false);
  }
  this.pack();
  this.repaint();
}",0.927710843373494
157686,"protected int simulatePriority(SimulationNode2 node,Game game,int depth,int alpha,int beta){
  if (ALLOW_INTERRUPT && Thread.interrupted()) {
    Thread.currentThread().interrupt();
    logger.info(""String_Node_Str"");
    return GameStateEvaluator2.evaluate(playerId,game);
  }
  node.setGameValue(game.getState().getValue(true).hashCode());
  SimulatedPlayer2 currentPlayer=(SimulatedPlayer2)game.getPlayer(game.getPlayerList().get());
  SimulationNode2 bestNode=null;
  List<Ability> allActions=currentPlayer.simulatePriority(game);
  optimize(game,allActions);
  if (logger.isInfoEnabled() && !allActions.isEmpty() && depth == maxDepth) {
    logger.info(""String_Node_Str"" + allActions.size() + ""String_Node_Str""+ ' '+ allActions);
  }
  int counter=0;
  int bestValSubNodes=Integer.MIN_VALUE;
  for (  Ability action : allActions) {
    counter++;
    if (ALLOW_INTERRUPT && Thread.interrupted()) {
      Thread.currentThread().interrupt();
      logger.info(""String_Node_Str"" + depth + ""String_Node_Str"");
      break;
    }
    Game sim=game.copy();
    sim.setSimulation(true);
    if (sim.getPlayer(currentPlayer.getId()).activateAbility((ActivatedAbility)action.copy(),sim)) {
      sim.applyEffects();
      if (checkForRepeatedAction(sim,node,action,currentPlayer.getId())) {
        logger.debug(""String_Node_Str"" + depth + ""String_Node_Str""+ action.toString());
        continue;
      }
      if (!sim.checkIfGameIsOver() && (action.isUsesStack() || action instanceof PassAbility)) {
        UUID nextPlayerId=sim.getPlayerList().get();
        do {
          sim.getPlayer(nextPlayerId).pass(game);
          nextPlayerId=sim.getPlayerList().getNext();
        }
 while (nextPlayerId != this.getId());
      }
      SimulationNode2 newNode=new SimulationNode2(node,sim,action,depth,currentPlayer.getId());
      sim.checkStateAndTriggered();
      int val;
      if (action instanceof PassAbility && sim.getStack().isEmpty()) {
        val=GameStateEvaluator2.evaluate(this.getId(),sim);
      }
 else {
        val=addActions(newNode,depth - 1,alpha,beta);
      }
      logger.debug(""String_Node_Str"" + BLANKS.substring(0,2 + (maxDepth - depth) * 3) + '['+ depth+ ""String_Node_Str""+ counter+ ""String_Node_Str""+ val+ ""String_Node_Str""+ action.toString()+ ""String_Node_Str"");
      if (logger.isInfoEnabled() && depth >= maxDepth) {
        StringBuilder sb=new StringBuilder(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(counter).append(""String_Node_Str"").append(val).append(""String_Node_Str"").append(action).append(action.isModal() ? ""String_Node_Str"" + action.getModes().getMode().toString() : ""String_Node_Str"").append(listTargets(game,action.getTargets())).append(')').append(logger.isTraceEnabled() ? ""String_Node_Str"" + newNode.hashCode() : ""String_Node_Str"");
        SimulationNode2 logNode=newNode;
        while (logNode.getChildren() != null && !logNode.getChildren().isEmpty()) {
          logNode=logNode.getChildren().get(0);
          if (logNode.getAbilities() != null && !logNode.getAbilities().isEmpty()) {
            sb.append(""String_Node_Str"").append(logNode.getDepth()).append(']').append(logNode.getAbilities().toString()).append('<').append(logNode.getScore()).append('>');
          }
        }
        logger.info(sb);
      }
      if (currentPlayer.getId().equals(playerId)) {
        if (val > bestValSubNodes) {
          bestValSubNodes=val;
        }
        if (depth == maxDepth && action instanceof PassAbility) {
          val=val - PASSIVITY_PENALTY;
        }
        if (val > alpha || (depth == maxDepth && val == alpha && RandomUtil.nextBoolean())) {
          alpha=val;
          bestNode=newNode;
          bestNode.setScore(val);
          if (!newNode.getChildren().isEmpty()) {
            bestNode.setCombat(newNode.getChildren().get(0).getCombat());
          }
          if (depth == maxDepth) {
            logger.info(""String_Node_Str"" + depth + ""String_Node_Str""+ bestNode.getScore()+ ""String_Node_Str""+ bestNode.getAbilities().toString());
            node.children.clear();
            node.children.add(bestNode);
            node.setScore(bestNode.getScore());
          }
        }
        if (val == GameStateEvaluator2.WIN_GAME_SCORE) {
          logger.debug(""String_Node_Str"");
          break;
        }
      }
 else {
        if (val < beta) {
          beta=val;
          bestNode=newNode;
          bestNode.setScore(val);
          if (!newNode.getChildren().isEmpty()) {
            bestNode.setCombat(newNode.getChildren().get(0).getCombat());
          }
        }
        if (val == GameStateEvaluator2.LOSE_GAME_SCORE) {
          logger.debug(""String_Node_Str"");
          break;
        }
      }
      if (alpha >= beta) {
        break;
      }
      if (SimulationNode2.nodeCount > maxNodes) {
        logger.debug(""String_Node_Str"");
        break;
      }
    }
  }
  if (depth == maxDepth) {
    logger.info(""String_Node_Str"" + depth + ""String_Node_Str""+ SimulationNode2.nodeCount);
  }
  if (bestNode != null) {
    node.children.clear();
    node.children.add(bestNode);
    node.setScore(bestNode.getScore());
    if (logger.isTraceEnabled() && !bestNode.getAbilities().toString().equals(""String_Node_Str"")) {
      logger.trace(new StringBuilder(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(bestNode.getScore()).append(""String_Node_Str"").append(bestNode.getAbilities().toString()).toString());
    }
  }
  if (currentPlayer.getId().equals(playerId)) {
    return bestValSubNodes;
  }
 else {
    return beta;
  }
}","protected int simulatePriority(SimulationNode2 node,Game game,int depth,int alpha,int beta){
  if (ALLOW_INTERRUPT && Thread.interrupted()) {
    Thread.currentThread().interrupt();
    logger.info(""String_Node_Str"");
    return GameStateEvaluator2.evaluate(playerId,game);
  }
  node.setGameValue(game.getState().getValue(true).hashCode());
  SimulatedPlayer2 currentPlayer=(SimulatedPlayer2)game.getPlayer(game.getPlayerList().get());
  SimulationNode2 bestNode=null;
  List<Ability> allActions=currentPlayer.simulatePriority(game);
  optimize(game,allActions);
  if (logger.isInfoEnabled() && !allActions.isEmpty() && depth == maxDepth) {
    logger.info(""String_Node_Str"" + allActions.size() + ""String_Node_Str""+ ' '+ allActions);
  }
  int counter=0;
  int bestValSubNodes=Integer.MIN_VALUE;
  for (  Ability action : allActions) {
    counter++;
    if (ALLOW_INTERRUPT && Thread.interrupted()) {
      Thread.currentThread().interrupt();
      logger.info(""String_Node_Str"" + depth + ""String_Node_Str"");
      break;
    }
    Game sim=game.copy();
    sim.setSimulation(true);
    if (sim.getPlayer(currentPlayer.getId()).activateAbility((ActivatedAbility)action.copy(),sim)) {
      sim.applyEffects();
      if (checkForRepeatedAction(sim,node,action,currentPlayer.getId())) {
        logger.debug(""String_Node_Str"" + depth + ""String_Node_Str""+ action.toString());
        continue;
      }
      if (!sim.checkIfGameIsOver() && (action.isUsesStack() || action instanceof PassAbility)) {
        UUID nextPlayerId=sim.getPlayerList().get();
        do {
          sim.getPlayer(nextPlayerId).pass(game);
          nextPlayerId=sim.getPlayerList().getNext();
        }
 while (!Objects.equals(nextPlayerId,this.getId()));
      }
      SimulationNode2 newNode=new SimulationNode2(node,sim,action,depth,currentPlayer.getId());
      sim.checkStateAndTriggered();
      int val;
      if (action instanceof PassAbility && sim.getStack().isEmpty()) {
        val=GameStateEvaluator2.evaluate(this.getId(),sim);
      }
 else {
        val=addActions(newNode,depth - 1,alpha,beta);
      }
      logger.debug(""String_Node_Str"" + BLANKS.substring(0,2 + (maxDepth - depth) * 3) + '['+ depth+ ""String_Node_Str""+ counter+ ""String_Node_Str""+ val+ ""String_Node_Str""+ action.toString()+ ""String_Node_Str"");
      if (logger.isInfoEnabled() && depth >= maxDepth) {
        StringBuilder sb=new StringBuilder(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(counter).append(""String_Node_Str"").append(val).append(""String_Node_Str"").append(action).append(action.isModal() ? ""String_Node_Str"" + action.getModes().getMode().toString() : ""String_Node_Str"").append(listTargets(game,action.getTargets())).append(')').append(logger.isTraceEnabled() ? ""String_Node_Str"" + newNode.hashCode() : ""String_Node_Str"");
        SimulationNode2 logNode=newNode;
        while (logNode.getChildren() != null && !logNode.getChildren().isEmpty()) {
          logNode=logNode.getChildren().get(0);
          if (logNode.getAbilities() != null && !logNode.getAbilities().isEmpty()) {
            sb.append(""String_Node_Str"").append(logNode.getDepth()).append(']').append(logNode.getAbilities().toString()).append('<').append(logNode.getScore()).append('>');
          }
        }
        logger.info(sb);
      }
      if (currentPlayer.getId().equals(playerId)) {
        if (val > bestValSubNodes) {
          bestValSubNodes=val;
        }
        if (depth == maxDepth && action instanceof PassAbility) {
          val=val - PASSIVITY_PENALTY;
        }
        if (val > alpha || (depth == maxDepth && val == alpha && RandomUtil.nextBoolean())) {
          alpha=val;
          bestNode=newNode;
          bestNode.setScore(val);
          if (!newNode.getChildren().isEmpty()) {
            bestNode.setCombat(newNode.getChildren().get(0).getCombat());
          }
          if (depth == maxDepth) {
            logger.info(""String_Node_Str"" + depth + ""String_Node_Str""+ bestNode.getScore()+ ""String_Node_Str""+ bestNode.getAbilities().toString());
            node.children.clear();
            node.children.add(bestNode);
            node.setScore(bestNode.getScore());
          }
        }
        if (val == GameStateEvaluator2.WIN_GAME_SCORE) {
          logger.debug(""String_Node_Str"");
          break;
        }
      }
 else {
        if (val < beta) {
          beta=val;
          bestNode=newNode;
          bestNode.setScore(val);
          if (!newNode.getChildren().isEmpty()) {
            bestNode.setCombat(newNode.getChildren().get(0).getCombat());
          }
        }
        if (val == GameStateEvaluator2.LOSE_GAME_SCORE) {
          logger.debug(""String_Node_Str"");
          break;
        }
      }
      if (alpha >= beta) {
        break;
      }
      if (SimulationNode2.nodeCount > maxNodes) {
        logger.debug(""String_Node_Str"");
        break;
      }
    }
  }
  if (depth == maxDepth) {
    logger.info(""String_Node_Str"" + depth + ""String_Node_Str""+ SimulationNode2.nodeCount);
  }
  if (bestNode != null) {
    node.children.clear();
    node.children.add(bestNode);
    node.setScore(bestNode.getScore());
    if (logger.isTraceEnabled() && !bestNode.getAbilities().toString().equals(""String_Node_Str"")) {
      logger.trace(new StringBuilder(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(bestNode.getScore()).append(""String_Node_Str"").append(bestNode.getAbilities().toString()).toString());
    }
  }
  if (currentPlayer.getId().equals(playerId)) {
    return bestValSubNodes;
  }
 else {
    return beta;
  }
}",0.9980374665477252
157687,"@Override public boolean priority(Game game){
  passed=false;
  if (!abort) {
    HumanPlayer controllingPlayer=this;
    if (isGameUnderControl()) {
      Player player=game.getPlayer(getTurnControlledBy());
      if (player instanceof HumanPlayer) {
        controllingPlayer=(HumanPlayer)player;
      }
    }
    if (getJustActivatedType() != null && !holdingPriority) {
      if (controllingPlayer.getUserData().isPassPriorityCast() && getJustActivatedType() == AbilityType.SPELL) {
        setJustActivatedType(null);
        pass(game);
        return false;
      }
      if (controllingPlayer.getUserData().isPassPriorityActivation() && getJustActivatedType() == AbilityType.ACTIVATED) {
        setJustActivatedType(null);
        pass(game);
        return false;
      }
    }
    if (isGameUnderControl()) {
      if (passedAllTurns || passedTurnSkipStack) {
        if (passWithManaPoolCheck(game)) {
          return false;
        }
      }
      if (passedUntilEndStepBeforeMyTurn) {
        if (game.getTurn().getStepType() != PhaseStep.END_TURN) {
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
 else {
          PlayerList playerList=game.getState().getPlayerList(playerId);
          if (!playerList.getPrevious().equals(game.getActivePlayerId())) {
            if (passWithManaPoolCheck(game)) {
              return false;
            }
          }
        }
      }
      if (game.getStack().isEmpty()) {
        boolean dontCheckPassStep=false;
        if (passedUntilStackResolved) {
          dontCheckPassStep=true;
        }
        if (passedTurn || passedTurnSkipStack) {
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
        if (passedUntilNextMain) {
          if (game.getTurn().getStepType() == PhaseStep.POSTCOMBAT_MAIN || game.getTurn().getStepType() == PhaseStep.PRECOMBAT_MAIN) {
            if (!skippedAtLeastOnce || (!playerId.equals(game.getActivePlayerId()) && !controllingPlayer.getUserData().getUserSkipPrioritySteps().isStopOnAllMainPhases())) {
              skippedAtLeastOnce=true;
              if (passWithManaPoolCheck(game)) {
                return false;
              }
            }
 else {
              dontCheckPassStep=true;
              passedUntilNextMain=false;
            }
          }
 else {
            skippedAtLeastOnce=true;
            if (passWithManaPoolCheck(game)) {
              return false;
            }
          }
        }
        if (passedUntilEndOfTurn) {
          if (game.getTurn().getStepType() == PhaseStep.END_TURN) {
            if (!skippedAtLeastOnce || (playerId.equals(game.getActivePlayerId()) && !controllingPlayer.getUserData().getUserSkipPrioritySteps().isStopOnAllEndPhases())) {
              skippedAtLeastOnce=true;
              if (passWithManaPoolCheck(game)) {
                return false;
              }
            }
 else {
              dontCheckPassStep=true;
              passedUntilEndOfTurn=false;
            }
          }
 else {
            skippedAtLeastOnce=true;
            if (passWithManaPoolCheck(game)) {
              return false;
            }
          }
        }
        if (!dontCheckPassStep && checkPassStep(game,controllingPlayer)) {
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
      }
 else       if (passedUntilStackResolved) {
        if (dateLastAddedToStack == game.getStack().getDateLastAdded()) {
          dateLastAddedToStack=game.getStack().getDateLastAdded();
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
 else {
          passedUntilStackResolved=false;
        }
      }
    }
    while (canRespond()) {
      updateGameStatePriority(""String_Node_Str"",game);
      holdingPriority=false;
      prepareForResponse(game);
      if (!isExecutingMacro()) {
        game.firePriorityEvent(playerId);
      }
      waitForResponse(game);
      if (game.executingRollback()) {
        return true;
      }
      if (response.getBoolean() != null || response.getInteger() != null) {
        if (passWithManaPoolCheck(game) && !activatingMacro) {
          return false;
        }
 else {
          if (activatingMacro) {
synchronized (actionQueue) {
              actionQueue.notifyAll();
            }
          }
          continue;
        }
      }
      break;
    }
    if (response.getString() != null && response.getString().equals(""String_Node_Str"")) {
      specialAction(game);
    }
 else     if (response.getUUID() != null) {
      boolean result=false;
      MageObject object=game.getObject(response.getUUID());
      if (object != null) {
        Zone zone=game.getState().getZone(object.getId());
        if (zone != null) {
          if (object instanceof Card && ((Card)object).isFaceDown(game) && lookAtFaceDownCard((Card)object,game)) {
            result=true;
          }
 else {
            Player actingPlayer=null;
            if (playerId.equals(game.getPriorityPlayerId())) {
              actingPlayer=this;
            }
 else             if (getPlayersUnderYourControl().contains(game.getPriorityPlayerId())) {
              actingPlayer=game.getPlayer(game.getPriorityPlayerId());
            }
            if (actingPlayer != null) {
              LinkedHashMap<UUID,ActivatedAbility> useableAbilities=actingPlayer.getUseableActivatedAbilities(object,zone,game);
              if (useableAbilities != null && !useableAbilities.isEmpty()) {
                activateAbility(useableAbilities,object,game);
                result=true;
              }
            }
          }
        }
      }
      return result;
    }
 else     if (response.getManaType() != null) {
      return false;
    }
    return true;
  }
  return false;
}","@Override public boolean priority(Game game){
  passed=false;
  if (!abort) {
    HumanPlayer controllingPlayer=this;
    if (isGameUnderControl()) {
      Player player=game.getPlayer(getTurnControlledBy());
      if (player instanceof HumanPlayer) {
        controllingPlayer=(HumanPlayer)player;
      }
    }
    if (getJustActivatedType() != null && !holdingPriority) {
      if (controllingPlayer.getUserData().isPassPriorityCast() && getJustActivatedType() == AbilityType.SPELL) {
        setJustActivatedType(null);
        pass(game);
        return false;
      }
      if (controllingPlayer.getUserData().isPassPriorityActivation() && getJustActivatedType() == AbilityType.ACTIVATED) {
        setJustActivatedType(null);
        pass(game);
        return false;
      }
    }
    if (isGameUnderControl()) {
      if (passedAllTurns || passedTurnSkipStack) {
        if (passWithManaPoolCheck(game)) {
          return false;
        }
      }
      if (passedUntilEndStepBeforeMyTurn) {
        if (game.getTurn().getStepType() != PhaseStep.END_TURN) {
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
 else {
          PlayerList playerList=game.getState().getPlayerList(playerId);
          if (!playerList.getPrevious().equals(game.getActivePlayerId())) {
            if (passWithManaPoolCheck(game)) {
              return false;
            }
          }
        }
      }
      if (game.getStack().isEmpty()) {
        boolean dontCheckPassStep=false;
        if (passedUntilStackResolved) {
          dontCheckPassStep=true;
        }
        if (passedTurn || passedTurnSkipStack) {
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
        if (passedUntilNextMain) {
          if (game.getTurn().getStepType() == PhaseStep.POSTCOMBAT_MAIN || game.getTurn().getStepType() == PhaseStep.PRECOMBAT_MAIN) {
            if (!skippedAtLeastOnce || (!playerId.equals(game.getActivePlayerId()) && !controllingPlayer.getUserData().getUserSkipPrioritySteps().isStopOnAllMainPhases())) {
              skippedAtLeastOnce=true;
              if (passWithManaPoolCheck(game)) {
                return false;
              }
            }
 else {
              dontCheckPassStep=true;
              passedUntilNextMain=false;
            }
          }
 else {
            skippedAtLeastOnce=true;
            if (passWithManaPoolCheck(game)) {
              return false;
            }
          }
        }
        if (passedUntilEndOfTurn) {
          if (game.getTurn().getStepType() == PhaseStep.END_TURN) {
            if (!skippedAtLeastOnce || (playerId.equals(game.getActivePlayerId()) && !controllingPlayer.getUserData().getUserSkipPrioritySteps().isStopOnAllEndPhases())) {
              skippedAtLeastOnce=true;
              if (passWithManaPoolCheck(game)) {
                return false;
              }
            }
 else {
              dontCheckPassStep=true;
              passedUntilEndOfTurn=false;
            }
          }
 else {
            skippedAtLeastOnce=true;
            if (passWithManaPoolCheck(game)) {
              return false;
            }
          }
        }
        if (!dontCheckPassStep && checkPassStep(game,controllingPlayer)) {
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
      }
 else       if (passedUntilStackResolved) {
        if (Objects.equals(dateLastAddedToStack,game.getStack().getDateLastAdded())) {
          dateLastAddedToStack=game.getStack().getDateLastAdded();
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
 else {
          passedUntilStackResolved=false;
        }
      }
    }
    while (canRespond()) {
      updateGameStatePriority(""String_Node_Str"",game);
      holdingPriority=false;
      prepareForResponse(game);
      if (!isExecutingMacro()) {
        game.firePriorityEvent(playerId);
      }
      waitForResponse(game);
      if (game.executingRollback()) {
        return true;
      }
      if (response.getBoolean() != null || response.getInteger() != null) {
        if (passWithManaPoolCheck(game) && !activatingMacro) {
          return false;
        }
 else {
          if (activatingMacro) {
synchronized (actionQueue) {
              actionQueue.notifyAll();
            }
          }
          continue;
        }
      }
      break;
    }
    if (response.getString() != null && response.getString().equals(""String_Node_Str"")) {
      specialAction(game);
    }
 else     if (response.getUUID() != null) {
      boolean result=false;
      MageObject object=game.getObject(response.getUUID());
      if (object != null) {
        Zone zone=game.getState().getZone(object.getId());
        if (zone != null) {
          if (object instanceof Card && ((Card)object).isFaceDown(game) && lookAtFaceDownCard((Card)object,game)) {
            result=true;
          }
 else {
            Player actingPlayer=null;
            if (playerId.equals(game.getPriorityPlayerId())) {
              actingPlayer=this;
            }
 else             if (getPlayersUnderYourControl().contains(game.getPriorityPlayerId())) {
              actingPlayer=game.getPlayer(game.getPriorityPlayerId());
            }
            if (actingPlayer != null) {
              LinkedHashMap<UUID,ActivatedAbility> useableAbilities=actingPlayer.getUseableActivatedAbilities(object,zone,game);
              if (useableAbilities != null && !useableAbilities.isEmpty()) {
                activateAbility(useableAbilities,object,game);
                result=true;
              }
            }
          }
        }
      }
      return result;
    }
 else     if (response.getManaType() != null) {
      return false;
    }
    return true;
  }
  return false;
}",0.9981929265983994
157688,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  Permanent brand=game.getPermanent(source.getSourceId());
  if (brand != null && brand.getAttachedTo() != null) {
    UUID enchantedController=game.getPermanent(brand.getAttachedTo()).getControllerId();
    if (enchantedController == event.getPlayerId() && game.getObject(event.getSourceId()).isCreature()) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  Permanent brand=game.getPermanent(source.getSourceId());
  if (brand != null && brand.getAttachedTo() != null) {
    UUID enchantedController=game.getPermanent(brand.getAttachedTo()).getControllerId();
    if (Objects.equals(enchantedController,event.getPlayerId()) && game.getObject(event.getSourceId()).isCreature()) {
      return true;
    }
  }
  return false;
}",0.976054732041049
157689,"@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<>();
  for (  StackObject stackObject : game.getStack()) {
    if (game.getState().getPlayersInRange(sourceControllerId,game).contains(stackObject.getControllerId()) && stackObject.getControllerId() == sourceControllerId) {
      possibleTargets.add(stackObject.getId());
    }
  }
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(sourceControllerId,game)) {
    if (permanent.getControllerId() == sourceControllerId) {
      possibleTargets.add(permanent.getId());
    }
  }
  for (  Player player : game.getPlayers().values()) {
    if (player == game.getPlayer(sourceControllerId)) {
      for (      Card card : player.getGraveyard().getCards(game)) {
        possibleTargets.add(card.getId());
      }
      for (      Card card : game.getExile().getAllCards(game)) {
        if (card.getOwnerId() == sourceControllerId) {
          possibleTargets.add(card.getId());
        }
      }
    }
  }
  return possibleTargets;
}","@Override public Set<UUID> possibleTargets(UUID sourceControllerId,Game game){
  Set<UUID> possibleTargets=new HashSet<>();
  for (  StackObject stackObject : game.getStack()) {
    if (game.getState().getPlayersInRange(sourceControllerId,game).contains(stackObject.getControllerId()) && Objects.equals(stackObject.getControllerId(),sourceControllerId)) {
      possibleTargets.add(stackObject.getId());
    }
  }
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(sourceControllerId,game)) {
    if (Objects.equals(permanent.getControllerId(),sourceControllerId)) {
      possibleTargets.add(permanent.getId());
    }
  }
  for (  Player player : game.getPlayers().values()) {
    if (Objects.equals(player,game.getPlayer(sourceControllerId))) {
      for (      Card card : player.getGraveyard().getCards(game)) {
        possibleTargets.add(card.getId());
      }
      for (      Card card : game.getExile().getAllCards(game)) {
        if (Objects.equals(card.getOwnerId(),sourceControllerId)) {
          possibleTargets.add(card.getId());
        }
      }
    }
  }
  return possibleTargets;
}",0.8878760255241568
157690,"@Override public boolean canChoose(UUID sourceControllerId,Game game){
  int count=0;
  for (  StackObject stackObject : game.getStack()) {
    if (game.getState().getPlayersInRange(sourceControllerId,game).contains(stackObject.getControllerId()) && stackObject.getControllerId() == sourceControllerId) {
      count++;
      if (count >= this.minNumberOfTargets) {
        return true;
      }
    }
  }
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(sourceControllerId,game)) {
    if (permanent.getControllerId() == sourceControllerId) {
      count++;
      if (count >= this.minNumberOfTargets) {
        return true;
      }
    }
  }
  for (  Player player : game.getPlayers().values()) {
    if (player == game.getPlayer(sourceControllerId)) {
      for (      Card card : player.getGraveyard().getCards(game)) {
        count++;
        if (count >= this.minNumberOfTargets) {
          return true;
        }
      }
      for (      Card card : game.getExile().getAllCards(game)) {
        if (card.getOwnerId() == sourceControllerId) {
          count++;
          if (count >= this.minNumberOfTargets) {
            return true;
          }
        }
      }
    }
  }
  return false;
}","@Override public boolean canChoose(UUID sourceControllerId,Game game){
  int count=0;
  for (  StackObject stackObject : game.getStack()) {
    if (game.getState().getPlayersInRange(sourceControllerId,game).contains(stackObject.getControllerId()) && Objects.equals(stackObject.getControllerId(),sourceControllerId)) {
      count++;
      if (count >= this.minNumberOfTargets) {
        return true;
      }
    }
  }
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(sourceControllerId,game)) {
    if (Objects.equals(permanent.getControllerId(),sourceControllerId)) {
      count++;
      if (count >= this.minNumberOfTargets) {
        return true;
      }
    }
  }
  for (  Player player : game.getPlayers().values()) {
    if (Objects.equals(player,game.getPlayer(sourceControllerId))) {
      for (      Card card : player.getGraveyard().getCards(game)) {
        count++;
        if (count >= this.minNumberOfTargets) {
          return true;
        }
      }
      for (      Card card : game.getExile().getAllCards(game)) {
        if (Objects.equals(card.getOwnerId(),sourceControllerId)) {
          count++;
          if (count >= this.minNumberOfTargets) {
            return true;
          }
        }
      }
    }
  }
  return false;
}",0.9664268585131894
157691,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  Player controller=game.getPlayer(source.getControllerId());
  DamageEvent damageEvent=(DamageEvent)event;
  if (controller != null) {
    if (controller.getId() == damageEvent.getTargetId() && damageEvent.getSourceId().equals(damageSource.getFirstTarget())) {
      this.discard();
      return true;
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  Player controller=game.getPlayer(source.getControllerId());
  DamageEvent damageEvent=(DamageEvent)event;
  if (controller != null) {
    if (controller.getId().equals(damageEvent.getTargetId()) && damageEvent.getSourceId().equals(damageSource.getFirstTarget())) {
      this.discard();
      return true;
    }
  }
  return false;
}",0.9840881272949816
157692,"@Override public boolean apply(Game game,Ability source){
  Player activePlayer=game.getPlayer(game.getActivePlayerId());
  if (activePlayer == null) {
    return false;
  }
  int landCount=game.getBattlefield().getAllActivePermanents(filter,activePlayer.getId(),game).size();
  if (landCount == 0) {
    return false;
  }
  for (  UUID playerId : game.getPlayerList()) {
    if (playerId != activePlayer.getId()) {
      if (game.getBattlefield().getAllActivePermanents(filter,playerId,game).size() >= landCount) {
        return false;
      }
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player activePlayer=game.getPlayer(game.getActivePlayerId());
  if (activePlayer == null) {
    return false;
  }
  int landCount=game.getBattlefield().getAllActivePermanents(filter,activePlayer.getId(),game).size();
  if (landCount == 0) {
    return false;
  }
  for (  UUID playerId : game.getPlayerList()) {
    if (!playerId.equals(activePlayer.getId())) {
      if (game.getBattlefield().getAllActivePermanents(filter,playerId,game).size() >= landCount) {
        return false;
      }
    }
  }
  return true;
}",0.954782608695652
157693,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Set<Player> playersThatSearched=new HashSet<>(1);
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      if (playerId != controller.getId()) {
        Player player=game.getPlayer(playerId);
        if (player != null && player.chooseUse(Outcome.PutCreatureInPlay,""String_Node_Str"",source,game)) {
          TargetCardInLibrary target=new TargetCardInLibrary(new FilterLandCard());
          if (player.searchLibrary(target,game)) {
            Card targetCard=player.getLibrary().getCard(target.getFirstTarget(),game);
            if (targetCard != null) {
              player.moveCards(targetCard,Zone.BATTLEFIELD,source,game);
              playersThatSearched.add(player);
            }
          }
        }
      }
    }
    for (    Player player : playersThatSearched) {
      player.shuffleLibrary(source,game);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Set<Player> playersThatSearched=new HashSet<>(1);
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      if (!playerId.equals(controller.getId())) {
        Player player=game.getPlayer(playerId);
        if (player != null && player.chooseUse(Outcome.PutCreatureInPlay,""String_Node_Str"",source,game)) {
          TargetCardInLibrary target=new TargetCardInLibrary(new FilterLandCard());
          if (player.searchLibrary(target,game)) {
            Card targetCard=player.getLibrary().getCard(target.getFirstTarget(),game);
            if (targetCard != null) {
              player.moveCards(targetCard,Zone.BATTLEFIELD,source,game);
              playersThatSearched.add(player);
            }
          }
        }
      }
    }
    for (    Player player : playersThatSearched) {
      player.shuffleLibrary(source,game);
    }
    return true;
  }
  return false;
}",0.9708372530573848
157694,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent sourcePermanent=game.getPermanentOrLKIBattlefield(source.getSourceId());
  Spell spell=(Spell)game.getStack().getStackObject(targetPointer.getFirst(game,source));
  if (sourcePermanent != null && spell != null && controller != null) {
    Player spellController=game.getPlayer(spell.getControllerId());
    Cost cost=new ManaCostsImpl(spell.getSpellAbility().getManaCosts().getText());
    if (spellController != null) {
      for (      UUID playerId : game.getState().getPlayersInRange(source.getControllerId(),game)) {
        Player player=game.getPlayer(playerId);
        if (player != null && player != spellController) {
          cost.clearPaid();
          if (cost.canPay(source,source.getSourceId(),player.getId(),game) && player.chooseUse(outcome,""String_Node_Str"" + cost.getText() + ""String_Node_Str""+ spell.getIdName()+ '?',source,game)) {
            if (cost.pay(source,game,source.getSourceId(),playerId,false,null)) {
              game.informPlayers(player.getLogName() + ""String_Node_Str"" + cost.getText()+ ""String_Node_Str""+ spell.getIdName()+ '.');
              game.getStack().counter(spell.getId(),source.getSourceId(),game);
              break;
            }
          }
        }
      }
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent sourcePermanent=game.getPermanentOrLKIBattlefield(source.getSourceId());
  Spell spell=(Spell)game.getStack().getStackObject(targetPointer.getFirst(game,source));
  if (sourcePermanent != null && spell != null && controller != null) {
    Player spellController=game.getPlayer(spell.getControllerId());
    Cost cost=new ManaCostsImpl(spell.getSpellAbility().getManaCosts().getText());
    if (spellController != null) {
      for (      UUID playerId : game.getState().getPlayersInRange(source.getControllerId(),game)) {
        Player player=game.getPlayer(playerId);
        if (player != null && !player.equals(spellController)) {
          cost.clearPaid();
          if (cost.canPay(source,source.getSourceId(),player.getId(),game) && player.chooseUse(outcome,""String_Node_Str"" + cost.getText() + ""String_Node_Str""+ spell.getIdName()+ '?',source,game)) {
            if (cost.pay(source,game,source.getSourceId(),playerId,false,null)) {
              game.informPlayers(player.getLogName() + ""String_Node_Str"" + cost.getText()+ ""String_Node_Str""+ spell.getIdName()+ '.');
              game.getStack().counter(spell.getId(),source.getSourceId(),game);
              break;
            }
          }
        }
      }
    }
  }
  return true;
}",0.9912917271407836
157695,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event == null) {
    return false;
  }
  Permanent permanent=game.getPermanentOrLKIBattlefield(event.getTargetId());
  if (permanent == null) {
    return false;
  }
  if (permanent.getControllerId() == this.getControllerId()) {
    return false;
  }
  return true;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event == null) {
    return false;
  }
  Permanent permanent=game.getPermanentOrLKIBattlefield(event.getTargetId());
  if (permanent == null) {
    return false;
  }
  if (permanent.getControllerId().equals(this.getControllerId())) {
    return false;
  }
  return true;
}",0.9809663250366032
157696,"@Override public boolean apply(Game game,Ability source){
  Permanent perm=game.getPermanent(source.getSourceId());
  if (perm == null) {
    return false;
  }
  for (  Card card : game.getExile().getAllCards(game)) {
    if (filter.match(card,game) && card.getOwnerId() == perm.getControllerId()) {
      for (      Ability ability : card.getAbilities()) {
        if (ability instanceof ActivatedAbility) {
          ActivatedAbilityImpl copyAbility=(ActivatedAbilityImpl)ability.copy();
          copyAbility.setMaxActivationsPerTurn(1);
          perm.addAbility(copyAbility,card.getId(),game);
        }
      }
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent perm=game.getPermanent(source.getSourceId());
  if (perm == null) {
    return false;
  }
  for (  Card card : game.getExile().getAllCards(game)) {
    if (filter.match(card,game) && Objects.equals(card.getOwnerId(),perm.getControllerId())) {
      for (      Ability ability : card.getAbilities()) {
        if (ability instanceof ActivatedAbility) {
          ActivatedAbilityImpl copyAbility=(ActivatedAbilityImpl)ability.copy();
          copyAbility.setMaxActivationsPerTurn(1);
          perm.addAbility(copyAbility,card.getId(),game);
        }
      }
    }
  }
  return true;
}",0.4526558891454965
157697,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  Player controller=game.getPlayer(source.getControllerId());
  DamageEvent damageEvent=(DamageEvent)event;
  Permanent targetPermanent=game.getPermanent(source.getFirstTarget());
  if (controller != null && targetPermanent != null) {
    return (damageEvent.isCombatDamage() && controller.getId() == damageEvent.getTargetId() && targetPermanent.getId() == damageEvent.getSourceId());
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  Player controller=game.getPlayer(source.getControllerId());
  DamageEvent damageEvent=(DamageEvent)event;
  Permanent targetPermanent=game.getPermanent(source.getFirstTarget());
  if (controller != null && targetPermanent != null) {
    return (damageEvent.isCombatDamage() && Objects.equals(controller.getId(),damageEvent.getTargetId()) && Objects.equals(targetPermanent.getId(),damageEvent.getSourceId()));
  }
  return false;
}",0.9575757575757576
157698,"@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent source=game.getPermanent(event.getSourceId());
  if (source != null && source.getId() == this.getSourceId()) {
    UUID defenderId=game.getCombat().getDefenderId(event.getSourceId());
    this.getEffects().get(0).setTargetPointer(new FixedTarget(defenderId));
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent source=game.getPermanent(event.getSourceId());
  if (source != null && source.getId().equals(this.getSourceId())) {
    UUID defenderId=game.getCombat().getDefenderId(event.getSourceId());
    this.getEffects().get(0).setTargetPointer(new FixedTarget(defenderId));
    return true;
  }
  return false;
}",0.9828269484808454
157699,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    List<Permanent> left=new ArrayList<>();
    List<Permanent> right=new ArrayList<>();
    for (    UUID defenderId : game.getCombat().getPlayerDefenders(game)) {
      Player defender=game.getPlayer(defenderId);
      if (defender != null) {
        List<Permanent> leftLog=new ArrayList<>();
        List<Permanent> rightLog=new ArrayList<>();
        FilterControlledCreaturePermanent filterBlockers=new FilterControlledCreaturePermanent(""String_Node_Str"");
        filterBlockers.add(Predicates.not(new AbilityPredicate(FlyingAbility.class)));
        Target target=new TargetControlledCreaturePermanent(0,Integer.MAX_VALUE,filterBlockers,true);
        if (target.canChoose(source.getSourceId(),defenderId,game)) {
          if (defender.chooseTarget(Outcome.Neutral,target,source,game)) {
            for (            Permanent permanent : game.getBattlefield().getAllActivePermanents(new FilterCreaturePermanent(),defenderId,game)) {
              if (target.getTargets().contains(permanent.getId())) {
                left.add(permanent);
                leftLog.add(permanent);
              }
 else               if (filterBlockers.match(permanent,source.getSourceId(),defenderId,game)) {
                right.add(permanent);
                rightLog.add(permanent);
              }
            }
          }
          StringBuilder sb=new StringBuilder(""String_Node_Str"").append(defender.getLogName()).append(""String_Node_Str"");
          sb.append(leftLog.stream().map(MageObject::getLogName).collect(Collectors.joining(""String_Node_Str"")));
          game.informPlayers(sb.toString());
          sb=new StringBuilder(""String_Node_Str"").append(defender.getLogName()).append(""String_Node_Str"");
          sb.append(rightLog.stream().map(MageObject::getLogName).collect(Collectors.joining(""String_Node_Str"")));
          game.informPlayers(sb.toString());
        }
      }
    }
    for (    UUID attackers : game.getCombat().getAttackers()) {
      Permanent attacker=game.getPermanent(attackers);
      if (attacker != null && attacker.getControllerId() == controller.getId()) {
        CombatGroup combatGroup=game.getCombat().findGroup(attacker.getId());
        if (combatGroup != null) {
          FilterCreaturePermanent filter=new FilterCreaturePermanent();
          Player defender=game.getPlayer(combatGroup.getDefendingPlayerId());
          if (defender != null) {
            if (left.isEmpty() && right.isEmpty()) {
              filter.add(Predicates.not(new AbilityPredicate(FlyingAbility.class)));
            }
 else {
              List<Permanent> leftLog=left.stream().filter(permanent -> permanent.getControllerId() != null).filter(permanent -> permanent.getControllerId().equals(defender.getId())).collect(Collectors.toList());
              List<Permanent> rightLog=right.stream().filter(permanent -> permanent.getControllerId() != null).filter(permanent -> permanent.getControllerId().equals(defender.getId())).collect(Collectors.toList());
              if (controller.choosePile(outcome,attacker.getName() + ""String_Node_Str"" + defender.getName(),leftLog,rightLog,game)) {
                filter.add(Predicates.not(Predicates.or(new AbilityPredicate(FlyingAbility.class),new PermanentInListPredicate(left))));
                game.informPlayers(attacker.getLogName() + ""String_Node_Str"" + defender.getLogName()+ ""String_Node_Str"");
              }
 else {
                filter.add(Predicates.not(Predicates.or(new AbilityPredicate(FlyingAbility.class),new PermanentInListPredicate(right))));
                game.informPlayers(attacker.getLogName() + ""String_Node_Str"" + defender.getLogName()+ ""String_Node_Str"");
              }
            }
            RestrictionEffect effect=new CantBeBlockedByAllTargetEffect(filter,Duration.EndOfCombat);
            effect.setTargetPointer(new FixedTarget(attacker.getId()));
            game.addEffect(effect,source);
          }
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    List<Permanent> left=new ArrayList<>();
    List<Permanent> right=new ArrayList<>();
    for (    UUID defenderId : game.getCombat().getPlayerDefenders(game)) {
      Player defender=game.getPlayer(defenderId);
      if (defender != null) {
        List<Permanent> leftLog=new ArrayList<>();
        List<Permanent> rightLog=new ArrayList<>();
        FilterControlledCreaturePermanent filterBlockers=new FilterControlledCreaturePermanent(""String_Node_Str"");
        filterBlockers.add(Predicates.not(new AbilityPredicate(FlyingAbility.class)));
        Target target=new TargetControlledCreaturePermanent(0,Integer.MAX_VALUE,filterBlockers,true);
        if (target.canChoose(source.getSourceId(),defenderId,game)) {
          if (defender.chooseTarget(Outcome.Neutral,target,source,game)) {
            for (            Permanent permanent : game.getBattlefield().getAllActivePermanents(new FilterCreaturePermanent(),defenderId,game)) {
              if (target.getTargets().contains(permanent.getId())) {
                left.add(permanent);
                leftLog.add(permanent);
              }
 else               if (filterBlockers.match(permanent,source.getSourceId(),defenderId,game)) {
                right.add(permanent);
                rightLog.add(permanent);
              }
            }
          }
          StringBuilder sb=new StringBuilder(""String_Node_Str"").append(defender.getLogName()).append(""String_Node_Str"");
          sb.append(leftLog.stream().map(MageObject::getLogName).collect(Collectors.joining(""String_Node_Str"")));
          game.informPlayers(sb.toString());
          sb=new StringBuilder(""String_Node_Str"").append(defender.getLogName()).append(""String_Node_Str"");
          sb.append(rightLog.stream().map(MageObject::getLogName).collect(Collectors.joining(""String_Node_Str"")));
          game.informPlayers(sb.toString());
        }
      }
    }
    for (    UUID attackers : game.getCombat().getAttackers()) {
      Permanent attacker=game.getPermanent(attackers);
      if (attacker != null && Objects.equals(attacker.getControllerId(),controller.getId())) {
        CombatGroup combatGroup=game.getCombat().findGroup(attacker.getId());
        if (combatGroup != null) {
          FilterCreaturePermanent filter=new FilterCreaturePermanent();
          Player defender=game.getPlayer(combatGroup.getDefendingPlayerId());
          if (defender != null) {
            if (left.isEmpty() && right.isEmpty()) {
              filter.add(Predicates.not(new AbilityPredicate(FlyingAbility.class)));
            }
 else {
              List<Permanent> leftLog=left.stream().filter(permanent -> permanent.getControllerId() != null).filter(permanent -> permanent.getControllerId().equals(defender.getId())).collect(Collectors.toList());
              List<Permanent> rightLog=right.stream().filter(permanent -> permanent.getControllerId() != null).filter(permanent -> permanent.getControllerId().equals(defender.getId())).collect(Collectors.toList());
              if (controller.choosePile(outcome,attacker.getName() + ""String_Node_Str"" + defender.getName(),leftLog,rightLog,game)) {
                filter.add(Predicates.not(Predicates.or(new AbilityPredicate(FlyingAbility.class),new PermanentInListPredicate(left))));
                game.informPlayers(attacker.getLogName() + ""String_Node_Str"" + defender.getLogName()+ ""String_Node_Str"");
              }
 else {
                filter.add(Predicates.not(Predicates.or(new AbilityPredicate(FlyingAbility.class),new PermanentInListPredicate(right))));
                game.informPlayers(attacker.getLogName() + ""String_Node_Str"" + defender.getLogName()+ ""String_Node_Str"");
              }
            }
            RestrictionEffect effect=new CantBeBlockedByAllTargetEffect(filter,Duration.EndOfCombat);
            effect.setTargetPointer(new FixedTarget(attacker.getId()));
            game.addEffect(effect,source);
          }
        }
      }
    }
    return true;
  }
  return false;
}",0.997459165154265
157700,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    String message;
    if (chooseUseText == null) {
      String effectText=executingEffects.getText(source.getModes().getMode());
      message=""String_Node_Str"" + cost.getText() + ""String_Node_Str""+ effectText.substring(0,effectText.length() - 1)+ ""String_Node_Str"";
    }
 else {
      message=chooseUseText;
    }
    message=CardUtil.replaceSourceName(message,sourceObject.getName());
    boolean result=true;
    boolean doEffect=true;
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null && player != controller && cost.canPay(source,source.getSourceId(),player.getId(),game) && player.chooseUse(Outcome.Detriment,message,source,game)) {
        cost.clearPaid();
        if (cost.pay(source,game,source.getSourceId(),player.getId(),false,null)) {
          if (!game.isSimulation()) {
            game.informPlayers(player.getLogName() + ""String_Node_Str"");
          }
          doEffect=false;
        }
      }
    }
    if (doEffect) {
      for (      Effect effect : executingEffects) {
        effect.setTargetPointer(this.targetPointer);
        if (effect instanceof OneShotEffect) {
          result&=effect.apply(game,source);
        }
 else {
          game.addEffect((ContinuousEffect)effect,source);
        }
      }
    }
    return result;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    String message;
    if (chooseUseText == null) {
      String effectText=executingEffects.getText(source.getModes().getMode());
      message=""String_Node_Str"" + cost.getText() + ""String_Node_Str""+ effectText.substring(0,effectText.length() - 1)+ ""String_Node_Str"";
    }
 else {
      message=chooseUseText;
    }
    message=CardUtil.replaceSourceName(message,sourceObject.getName());
    boolean result=true;
    boolean doEffect=true;
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null && !player.equals(controller) && cost.canPay(source,source.getSourceId(),player.getId(),game) && player.chooseUse(Outcome.Detriment,message,source,game)) {
        cost.clearPaid();
        if (cost.pay(source,game,source.getSourceId(),player.getId(),false,null)) {
          if (!game.isSimulation()) {
            game.informPlayers(player.getLogName() + ""String_Node_Str"");
          }
          doEffect=false;
        }
      }
    }
    if (doEffect) {
      for (      Effect effect : executingEffects) {
        effect.setTargetPointer(this.targetPointer);
        if (effect instanceof OneShotEffect) {
          result&=effect.apply(game,source);
        }
 else {
          game.addEffect((ContinuousEffect)effect,source);
        }
      }
    }
    return result;
  }
  return false;
}",0.9896088019559902
157701,"@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.DECLARE_ATTACKERS_STEP_PRE) {
    Player activePlayer=game.getPlayer(game.getActivePlayerId());
    for (    Permanent permanent : game.getBattlefield().getAllActivePermanents(activePlayer.getId())) {
      if (permanent.isCreature()) {
        for (        UUID defender : game.getCombat().getDefenders()) {
          if (defender != activePlayer.getId()) {
            if (permanent.canAttack(defender,game)) {
              if (!game.getContinuousEffects().checkIfThereArePayCostToAttackBlockEffects(GameEvent.getEvent(GameEvent.EventType.DECLARE_ATTACKER,defender,permanent.getId(),permanent.getControllerId()),game)) {
                this.couldAttackThisTurnCreatures.add(new MageObjectReference(permanent.getId(),game));
                break;
              }
            }
          }
        }
      }
    }
  }
}","@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.DECLARE_ATTACKERS_STEP_PRE) {
    Player activePlayer=game.getPlayer(game.getActivePlayerId());
    for (    Permanent permanent : game.getBattlefield().getAllActivePermanents(activePlayer.getId())) {
      if (permanent.isCreature()) {
        for (        UUID defender : game.getCombat().getDefenders()) {
          if (!defender.equals(activePlayer.getId())) {
            if (permanent.canAttack(defender,game)) {
              if (!game.getContinuousEffects().checkIfThereArePayCostToAttackBlockEffects(GameEvent.getEvent(GameEvent.EventType.DECLARE_ATTACKER,defender,permanent.getId(),permanent.getControllerId()),game)) {
                this.couldAttackThisTurnCreatures.add(new MageObjectReference(permanent.getId(),game));
                break;
              }
            }
          }
        }
      }
    }
  }
}",0.9848812095032398
157702,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  Player controller=game.getPlayer(source.getControllerId());
  DamageEvent damageEvent=(DamageEvent)event;
  Permanent targetPermanent=game.getPermanent(source.getFirstTarget());
  if (controller != null && targetPermanent != null) {
    return targetPermanent.getId() == damageEvent.getTargetId();
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  Player controller=game.getPlayer(source.getControllerId());
  DamageEvent damageEvent=(DamageEvent)event;
  Permanent targetPermanent=game.getPermanent(source.getFirstTarget());
  if (controller != null && targetPermanent != null) {
    return targetPermanent.getId().equals(damageEvent.getTargetId());
  }
  return false;
}",0.983729662077597
157703,"@Override public boolean apply(Game game,Ability source){
  Player targetPlayer=game.getPlayer(targetPointer.getFirst(game,source));
  if (targetPlayer != null && targetPlayer.isInGame()) {
    for (    Permanent permanent : game.getBattlefield().getAllActivePermanents(filter,source.getControllerId(),game)) {
      if (permanent != null && permanent.getId() != source.getSourceId()) {
        permanent.changeControllerId(targetPlayer.getId(),game);
      }
    }
  }
 else {
    discard();
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player targetPlayer=game.getPlayer(targetPointer.getFirst(game,source));
  if (targetPlayer != null && targetPlayer.isInGame()) {
    for (    Permanent permanent : game.getBattlefield().getAllActivePermanents(filter,source.getControllerId(),game)) {
      if (permanent != null && !permanent.getId().equals(source.getSourceId())) {
        permanent.changeControllerId(targetPlayer.getId(),game);
      }
    }
  }
 else {
    discard();
  }
  return true;
}",0.9864341085271318
157704,"@Override public boolean checkTrigger(GameEvent event,Game game){
  StackObject stackObject=game.getStack().getStackObject(event.getSourceId());
  if (stackObject != null) {
    if (game.getOpponents(this.getControllerId()).contains(stackObject.getControllerId())) {
      Permanent permanent=game.getPermanent(getSourceId());
      if (permanent != null) {
        if (permanent.getControllerId() == event.getPlayerId()) {
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  StackObject stackObject=game.getStack().getStackObject(event.getSourceId());
  if (stackObject != null) {
    if (game.getOpponents(this.getControllerId()).contains(stackObject.getControllerId())) {
      Permanent permanent=game.getPermanent(getSourceId());
      if (permanent != null) {
        if (Objects.equals(permanent.getControllerId(),event.getPlayerId())) {
          return true;
        }
      }
    }
  }
  return false;
}",0.978936810431294
157705,"private static void buildLists(){
  underlyingSetCodesPerFormat.put(STANDARD,new ArrayList<>());
  underlyingSetCodesPerFormat.put(EXTENDED,new ArrayList<>());
  underlyingSetCodesPerFormat.put(FRONTIER,new ArrayList<>());
  underlyingSetCodesPerFormat.put(MODERN,new ArrayList<>());
  underlyingSetCodesPerFormat.put(VINTAGE_LEGACY,new ArrayList<>());
  underlyingSetCodesPerFormat.put(CUSTOM,new ArrayList<>());
  final Map<String,ExpansionInfo> expansionInfo=new HashMap<>();
  formats.clear();
  for (  ExpansionInfo set : ExpansionRepository.instance.getAll()) {
    expansionInfo.put(set.getName(),set);
    formats.add(set.getName());
    underlyingSetCodesPerFormat.put(set.getName(),new ArrayList<>());
    underlyingSetCodesPerFormat.get(set.getName()).add(set.getCode());
    if (set.getType() == SetType.CUSTOM_SET) {
      underlyingSetCodesPerFormat.get(CUSTOM).add(set.getCode());
      continue;
    }
    underlyingSetCodesPerFormat.get(VINTAGE_LEGACY).add(set.getCode());
    if (set.getType() == SetType.CORE || set.getType() == SetType.EXPANSION || set.getType() == SetType.SUPPLEMENTAL_STANDARD_LEGAL) {
      if (STANDARD_CARDS.getSetCodes().contains(set.getCode())) {
        underlyingSetCodesPerFormat.get(STANDARD).add(set.getCode());
      }
      if (set.getReleaseDate().after(extendedDate)) {
        underlyingSetCodesPerFormat.get(EXTENDED).add(set.getCode());
      }
      if (set.getReleaseDate().after(frontierDate)) {
        underlyingSetCodesPerFormat.get(FRONTIER).add(set.getCode());
      }
      if (set.getReleaseDate().after(modernDate)) {
        underlyingSetCodesPerFormat.get(MODERN).add(set.getCode());
      }
    }
    if (set.getType() == SetType.EXPANSION && set.getBlockName() != null) {
      String blockDisplayName=getBlockDisplayName(set.getBlockName());
      underlyingSetCodesPerFormat.computeIfAbsent(blockDisplayName,k -> new ArrayList<>());
      underlyingSetCodesPerFormat.get(blockDisplayName).add(set.getCode());
      if (expansionInfo.get(blockDisplayName) == null) {
        expansionInfo.put(blockDisplayName,set);
        formats.add(blockDisplayName);
      }
      if (expansionInfo.get(blockDisplayName).getReleaseDate().after(set.getReleaseDate())) {
        expansionInfo.put(blockDisplayName,set);
      }
    }
    if (set.getType() == SetType.SUPPLEMENTAL && set.getBlockName() != null) {
      expansionInfo.putIfAbsent(set.getBlockName(),set);
      if (expansionInfo.get(set.getBlockName()).getReleaseDate().before(set.getReleaseDate())) {
        expansionInfo.put(set.getBlockName(),set);
      }
    }
  }
  formats.sort((name1,name2) -> {
    ExpansionInfo expansionInfo1=expansionInfo.get(name1);
    ExpansionInfo expansionInfo2=expansionInfo.get(name2);
    if (expansionInfo1.getType().compareTo(expansionInfo2.getType()) == 0) {
      SetType setType=expansionInfo1.getType();
switch (setType) {
case EXPANSION:
        if (expansionInfo1.getBlockName() == null) {
          if (expansionInfo2.getBlockName() == null) {
            return expansionInfo2.getReleaseDate().compareTo(expansionInfo1.getReleaseDate());
          }
          return 1;
        }
      if (expansionInfo2.getBlockName() == null) {
        return -1;
      }
    if (name1.endsWith(""String_Node_Str"") && name2.endsWith(""String_Node_Str"")) {
      return expansionInfo2.getReleaseDate().compareTo(expansionInfo1.getReleaseDate());
    }
  if (name1.endsWith(""String_Node_Str"")) {
    if (expansionInfo1.getBlockName().equals(expansionInfo2.getBlockName())) {
      return -1;
    }
  }
if (name2.endsWith(""String_Node_Str"")) {
  if (expansionInfo1.getBlockName().equals(expansionInfo2.getBlockName())) {
    return 1;
  }
}
return expansionInfo2.getReleaseDate().compareTo(expansionInfo1.getReleaseDate());
case SUPPLEMENTAL:
if (expansionInfo1.getBlockName() == null) {
if (expansionInfo2.getBlockName() == null) {
return expansionInfo2.getReleaseDate().compareTo(expansionInfo1.getReleaseDate());
}
return -1;
}
if (expansionInfo2.getBlockName() == null) {
return 1;
}
if (expansionInfo1.getBlockName().equals(expansionInfo2.getBlockName())) {
if (expansionInfo2.getReleaseDate().compareTo(expansionInfo1.getReleaseDate()) == 0) {
return name1.compareTo(name2);
}
return expansionInfo2.getReleaseDate().compareTo(expansionInfo1.getReleaseDate());
}
if (expansionInfo1.getBlockName().startsWith(""String_Node_Str"")) {
if (expansionInfo1.getBlockName().startsWith(""String_Node_Str"")) {
return 1;
}
return 1;
}
if (expansionInfo2.getBlockName().startsWith(""String_Node_Str"")) {
return -1;
}
ExpansionInfo blockInfo1=expansionInfo.get(expansionInfo1.getBlockName());
ExpansionInfo blockInfo2=expansionInfo.get(expansionInfo2.getBlockName());
return blockInfo2.getReleaseDate().compareTo(blockInfo1.getReleaseDate());
default :
return expansionInfo2.getReleaseDate().compareTo(expansionInfo1.getReleaseDate());
}
}
return expansionInfo1.getType().compareTo(expansionInfo2.getType());
}
);
if (!formats.isEmpty()) {
formats.add(0,CUSTOM);
formats.add(0,VINTAGE_LEGACY);
formats.add(0,MODERN);
formats.add(0,EXTENDED);
formats.add(0,FRONTIER);
formats.add(0,STANDARD);
}
formats.add(0,ALL);
}","private static void buildLists(){
  underlyingSetCodesPerFormat.put(STANDARD,new ArrayList<>());
  underlyingSetCodesPerFormat.put(EXTENDED,new ArrayList<>());
  underlyingSetCodesPerFormat.put(FRONTIER,new ArrayList<>());
  underlyingSetCodesPerFormat.put(MODERN,new ArrayList<>());
  underlyingSetCodesPerFormat.put(VINTAGE_LEGACY,new ArrayList<>());
  underlyingSetCodesPerFormat.put(CUSTOM,new ArrayList<>());
  final Map<String,ExpansionInfo> expansionInfo=new HashMap<>();
  formats.clear();
  for (  ExpansionInfo set : ExpansionRepository.instance.getAll()) {
    expansionInfo.put(set.getName(),set);
    formats.add(set.getName());
    underlyingSetCodesPerFormat.put(set.getName(),new ArrayList<>());
    underlyingSetCodesPerFormat.get(set.getName()).add(set.getCode());
    if (set.getType() == SetType.CUSTOM_SET) {
      underlyingSetCodesPerFormat.get(CUSTOM).add(set.getCode());
      continue;
    }
    underlyingSetCodesPerFormat.get(VINTAGE_LEGACY).add(set.getCode());
    if (set.getType() == SetType.CORE || set.getType() == SetType.EXPANSION || set.getType() == SetType.SUPPLEMENTAL_STANDARD_LEGAL) {
      if (STANDARD_CARDS.getSetCodes().contains(set.getCode())) {
        underlyingSetCodesPerFormat.get(STANDARD).add(set.getCode());
      }
      if (set.getType() != SetType.SUPPLEMENTAL_STANDARD_LEGAL) {
        if (set.getReleaseDate().after(extendedDate) && (set.getType() == SetType.EXPANSION || set.getType() == SetType.CORE)) {
          underlyingSetCodesPerFormat.get(EXTENDED).add(set.getCode());
        }
        if (set.getReleaseDate().after(frontierDate) && (set.getType() == SetType.EXPANSION || set.getType() == SetType.CORE)) {
          underlyingSetCodesPerFormat.get(FRONTIER).add(set.getCode());
        }
        if (set.getReleaseDate().after(modernDate) && (set.getType() == SetType.EXPANSION || set.getType() == SetType.CORE)) {
          underlyingSetCodesPerFormat.get(MODERN).add(set.getCode());
        }
      }
    }
    if (set.getType() == SetType.EXPANSION && set.getBlockName() != null) {
      String blockDisplayName=getBlockDisplayName(set.getBlockName());
      underlyingSetCodesPerFormat.computeIfAbsent(blockDisplayName,k -> new ArrayList<>());
      underlyingSetCodesPerFormat.get(blockDisplayName).add(set.getCode());
      if (expansionInfo.get(blockDisplayName) == null) {
        expansionInfo.put(blockDisplayName,set);
        formats.add(blockDisplayName);
      }
      if (expansionInfo.get(blockDisplayName).getReleaseDate().after(set.getReleaseDate())) {
        expansionInfo.put(blockDisplayName,set);
      }
    }
    if (set.getType() == SetType.SUPPLEMENTAL && set.getBlockName() != null) {
      expansionInfo.putIfAbsent(set.getBlockName(),set);
      if (expansionInfo.get(set.getBlockName()).getReleaseDate().before(set.getReleaseDate())) {
        expansionInfo.put(set.getBlockName(),set);
      }
    }
  }
  formats.sort((name1,name2) -> {
    ExpansionInfo expansionInfo1=expansionInfo.get(name1);
    ExpansionInfo expansionInfo2=expansionInfo.get(name2);
    if (expansionInfo1.getType().compareTo(expansionInfo2.getType()) == 0) {
      SetType setType=expansionInfo1.getType();
switch (setType) {
case EXPANSION:
        if (expansionInfo1.getBlockName() == null) {
          if (expansionInfo2.getBlockName() == null) {
            return expansionInfo2.getReleaseDate().compareTo(expansionInfo1.getReleaseDate());
          }
          return 1;
        }
      if (expansionInfo2.getBlockName() == null) {
        return -1;
      }
    if (name1.endsWith(""String_Node_Str"") && name2.endsWith(""String_Node_Str"")) {
      return expansionInfo2.getReleaseDate().compareTo(expansionInfo1.getReleaseDate());
    }
  if (name1.endsWith(""String_Node_Str"")) {
    if (expansionInfo1.getBlockName().equals(expansionInfo2.getBlockName())) {
      return -1;
    }
  }
if (name2.endsWith(""String_Node_Str"")) {
  if (expansionInfo1.getBlockName().equals(expansionInfo2.getBlockName())) {
    return 1;
  }
}
return expansionInfo2.getReleaseDate().compareTo(expansionInfo1.getReleaseDate());
case SUPPLEMENTAL:
if (expansionInfo1.getBlockName() == null) {
if (expansionInfo2.getBlockName() == null) {
return expansionInfo2.getReleaseDate().compareTo(expansionInfo1.getReleaseDate());
}
return -1;
}
if (expansionInfo2.getBlockName() == null) {
return 1;
}
if (expansionInfo1.getBlockName().equals(expansionInfo2.getBlockName())) {
if (expansionInfo2.getReleaseDate().compareTo(expansionInfo1.getReleaseDate()) == 0) {
return name1.compareTo(name2);
}
return expansionInfo2.getReleaseDate().compareTo(expansionInfo1.getReleaseDate());
}
if (expansionInfo1.getBlockName().startsWith(""String_Node_Str"")) {
if (expansionInfo1.getBlockName().startsWith(""String_Node_Str"")) {
return 1;
}
return 1;
}
if (expansionInfo2.getBlockName().startsWith(""String_Node_Str"")) {
return -1;
}
ExpansionInfo blockInfo1=expansionInfo.get(expansionInfo1.getBlockName());
ExpansionInfo blockInfo2=expansionInfo.get(expansionInfo2.getBlockName());
return blockInfo2.getReleaseDate().compareTo(blockInfo1.getReleaseDate());
default :
return expansionInfo2.getReleaseDate().compareTo(expansionInfo1.getReleaseDate());
}
}
return expansionInfo1.getType().compareTo(expansionInfo2.getType());
}
);
if (!formats.isEmpty()) {
formats.add(0,CUSTOM);
formats.add(0,VINTAGE_LEGACY);
formats.add(0,MODERN);
formats.add(0,EXTENDED);
formats.add(0,FRONTIER);
formats.add(0,STANDARD);
}
formats.add(0,ALL);
}",0.9581018736465492
157706,"@Override public boolean apply(Game game,Ability source){
  ExileZone exileZone=game.getExile().getExileZone(source.getSourceId());
  FilterCard filter=new FilterCard();
  filter.add(new CardTypePredicate(CardType.CREATURE));
  for (  Card enchantedCard : exileZone.getCards(filter,game)) {
    if (enchantedCard == null) {
      continue;
    }
    enchantedCard.putOntoBattlefield(game,Zone.EXILED,source.getSourceId(),enchantedCard.getOwnerId());
    Permanent newPermanent=game.getPermanent(enchantedCard.getId());
    if (newPermanent != null) {
      newPermanent.tap(game);
      for (      Card enchantment : exileZone.getCards(game)) {
        if (filterAura.match(enchantment,game)) {
          boolean canTarget=false;
          for (          Target target : enchantment.getSpellAbility().getTargets()) {
            Filter filter2=target.getFilter();
            if (filter2.match(newPermanent,game)) {
              canTarget=true;
              break;
            }
          }
          if (!canTarget) {
            continue;
          }
          game.getState().setValue(""String_Node_Str"" + enchantment.getId(),newPermanent);
        }
        if (enchantment.putOntoBattlefield(game,Zone.EXILED,source.getSourceId(),enchantment.getOwnerId())) {
          if (filterAura.match(enchantment,game)) {
            newPermanent.addAttachment(enchantment.getId(),game);
          }
        }
      }
      Card oubliette=game.getCard(source.getSourceId());
      if (oubliette == null) {
        return false;
      }
      for (      Counter c : ((Oubliette)oubliette).godHelpMe.values()) {
        if (c != null) {
          newPermanent.getCounters(game).addCounter(c);
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  ExileZone exileZone=game.getExile().getExileZone(CardUtil.getCardExileZoneId(game,source.getSourceId(),true));
  if (exileZone == null) {
    return true;
  }
  Card exiledCreatureCard=exileZone.get((UUID)game.getState().getValue(CardUtil.getCardZoneString(""String_Node_Str"",source.getSourceId(),game,true)),game);
  if (exiledCreatureCard == null) {
    return false;
  }
  controller.moveCards(exiledCreatureCard,Zone.BATTLEFIELD,source,game,true,false,true,null);
  Permanent newPermanent=game.getPermanent(exiledCreatureCard.getId());
  if (newPermanent != null) {
    Counters counters=(Counters)game.getState().getValue(CardUtil.getCardZoneString(""String_Node_Str"",source.getSourceId(),game,true));
    if (counters != null) {
      for (      Counter counter : counters.values()) {
        if (counter != null) {
          newPermanent.getCounters(game).addCounter(counter);
        }
      }
    }
    Set<Card> toBattlefield=new HashSet<>();
    for (    Card enchantment : exileZone.getCards(game)) {
      if (enchantment.getSubtype(game).contains(SubType.AURA)) {
        boolean canTarget=false;
        for (        Target target : enchantment.getSpellAbility().getTargets()) {
          Filter filter2=target.getFilter();
          if (filter2.match(newPermanent,game)) {
            canTarget=true;
            break;
          }
        }
        if (!canTarget) {
          continue;
        }
        game.getState().setValue(""String_Node_Str"" + enchantment.getId(),newPermanent);
        toBattlefield.add(enchantment);
      }
    }
    controller.moveCards(toBattlefield,Zone.BATTLEFIELD,source,game,true,false,true,null);
    for (    Card enchantmentCard : toBattlefield) {
      Permanent permanent=game.getPermanent(enchantmentCard.getId());
      if (permanent != null) {
        newPermanent.addAttachment(permanent.getId(),game);
      }
    }
  }
  return true;
}",0.1064778389719381
157707,"public GameView(GameState state,Game game,UUID createdForPlayerId,UUID watcherUserId){
  Player createdForPlayer=null;
  this.isPlayer=createdForPlayerId != null;
  this.priorityTime=game.getPriorityTime();
  for (  Player player : state.getPlayers().values()) {
    players.add(new PlayerView(player,state,game,createdForPlayerId,watcherUserId));
    if (player.getId().equals(createdForPlayerId)) {
      createdForPlayer=player;
    }
  }
  for (  StackObject stackObject : state.getStack()) {
    if (stackObject instanceof Spell) {
      CardView spellView=new CardView((Spell)stackObject,game,stackObject.getControllerId().equals(createdForPlayerId));
      spellView.paid=((Spell)stackObject).getSpellAbility().getManaCostsToPay().isPaid();
      stack.put(stackObject.getId(),spellView);
    }
 else     if (stackObject instanceof StackAbility) {
      MageObject object=game.getObject(stackObject.getSourceId());
      Card card=game.getCard(stackObject.getSourceId());
      if (card == null && (object instanceof PermanentCard)) {
        card=((PermanentCard)object).getCard();
      }
      if (card != null) {
        if (object != null) {
          if (object instanceof Permanent) {
            boolean controlled=((Permanent)object).getControllerId().equals(createdForPlayerId);
            stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,((Permanent)object).getName(),new CardView(((Permanent)object),game,controlled,false,false)));
          }
 else {
            stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,card.getName(),new CardView(card,game,false,false,false)));
          }
        }
 else {
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,""String_Node_Str"",new CardView(card)));
        }
        if (card.isTransformable()) {
          updateLatestCardView(game,card,stackObject.getId());
        }
        checkPaid(stackObject.getId(),(StackAbility)stackObject);
      }
 else       if (object != null) {
        if (object instanceof PermanentToken) {
          PermanentToken token=(PermanentToken)object;
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,token.getName(),new CardView(token)));
          checkPaid(stackObject.getId(),(StackAbility)stackObject);
        }
 else         if (object instanceof Emblem) {
          CardView cardView=new CardView(new EmblemView((Emblem)object));
          ((StackAbility)stackObject).setName(((Emblem)object).getName());
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,object.getName(),cardView));
          checkPaid(stackObject.getId(),((StackAbility)stackObject));
        }
 else         if (object instanceof Plane) {
          CardView cardView=new CardView(new PlaneView((Plane)object));
          ((StackAbility)stackObject).setName(((Plane)object).getName());
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,object.getName(),cardView));
          checkPaid(stackObject.getId(),((StackAbility)stackObject));
        }
 else         if (object instanceof Designation) {
          Designation designation=(Designation)game.getObject(object.getId());
          if (designation != null) {
            stack.put(stackObject.getId(),new CardView(designation,(StackAbility)stackObject));
          }
 else {
            LOGGER.fatal(""String_Node_Str"" + object.getName() + ' '+ object.toString()+ ' '+ object.getClass().toString());
          }
        }
 else         if (object instanceof StackAbility) {
          StackAbility stackAbility=((StackAbility)object);
          stackAbility.newId();
          stack.put(stackObject.getId(),new CardView(((StackAbility)stackObject)));
          checkPaid(stackObject.getId(),((StackAbility)stackObject));
        }
 else {
          LOGGER.fatal(""String_Node_Str"" + object.getName() + ' '+ object.toString()+ ' '+ object.getClass().toString());
        }
      }
 else {
        LOGGER.debug(""String_Node_Str"" + stackObject.getStackAbility().getRule());
      }
    }
 else {
      LOGGER.fatal(""String_Node_Str"" + stackObject.getName() + ' '+ stackObject.toString()+ ' '+ stackObject.getClass().toString());
    }
  }
  for (  ExileZone exileZone : state.getExile().getExileZones()) {
    exiles.add(new ExileView(exileZone,game));
  }
  for (  String name : state.getRevealed().keySet()) {
    revealed.add(new RevealedView(name,state.getRevealed().get(name),game));
  }
  this.phase=state.getTurn().getPhaseType();
  this.step=state.getTurn().getStepType();
  this.turn=state.getTurnNum();
  this.activePlayerId=state.getActivePlayerId();
  if (state.getActivePlayerId() != null) {
    this.activePlayerName=state.getPlayer(state.getActivePlayerId()).getName();
  }
 else {
    this.activePlayerName=""String_Node_Str"";
  }
  Player priorityPlayer=null;
  if (state.getPriorityPlayerId() != null) {
    priorityPlayer=state.getPlayer(state.getPriorityPlayerId());
    this.priorityPlayerName=priorityPlayer != null ? priorityPlayer.getName() : ""String_Node_Str"";
  }
 else {
    this.priorityPlayerName=""String_Node_Str"";
  }
  for (  CombatGroup combatGroup : state.getCombat().getGroups()) {
    combat.add(new CombatGroupView(combatGroup,game));
  }
  if (isPlayer) {
    if (priorityPlayer != null && createdForPlayer != null && createdForPlayerId != null && createdForPlayer.isGameUnderControl() && (createdForPlayerId.equals(priorityPlayer.getId()) || createdForPlayer.getPlayersUnderYourControl().contains(priorityPlayer.getId()))) {
      this.special=!state.getSpecialActions().getControlledBy(priorityPlayer.getId(),priorityPlayer.isInPayManaMode()).isEmpty();
    }
  }
 else {
    this.special=false;
  }
  CastSpellLastTurnWatcher watcher=(CastSpellLastTurnWatcher)game.getState().getWatchers().get(CastSpellLastTurnWatcher.class.getSimpleName());
  if (watcher != null) {
    spellsCastCurrentTurn=watcher.getAmountOfSpellsAllPlayersCastOnCurrentTurn();
  }
 else {
    spellsCastCurrentTurn=0;
  }
  rollbackTurnsAllowed=game.getOptions().rollbackTurnsAllowed;
}","public GameView(GameState state,Game game,UUID createdForPlayerId,UUID watcherUserId){
  Player createdForPlayer=null;
  this.isPlayer=createdForPlayerId != null;
  this.priorityTime=game.getPriorityTime();
  for (  Player player : state.getPlayers().values()) {
    players.add(new PlayerView(player,state,game,createdForPlayerId,watcherUserId));
    if (player.getId().equals(createdForPlayerId)) {
      createdForPlayer=player;
    }
  }
  for (  StackObject stackObject : state.getStack()) {
    if (stackObject instanceof Spell) {
      CardView spellView=new CardView((Spell)stackObject,game,stackObject.getControllerId().equals(createdForPlayerId));
      spellView.paid=((Spell)stackObject).getSpellAbility().getManaCostsToPay().isPaid();
      stack.put(stackObject.getId(),spellView);
    }
 else     if (stackObject instanceof StackAbility) {
      MageObject object=game.getObject(stackObject.getSourceId());
      Card card=game.getCard(stackObject.getSourceId());
      if (card == null && (object instanceof PermanentCard)) {
        card=((PermanentCard)object).getCard();
      }
      if (card != null) {
        if (object != null) {
          if (object instanceof Permanent) {
            boolean controlled=((Permanent)object).getControllerId().equals(createdForPlayerId);
            stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,((Permanent)object).getName(),new CardView(((Permanent)object),game,controlled,false,false)));
          }
 else {
            stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,card.getName(),new CardView(card,game,false,false,false)));
          }
        }
 else {
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,""String_Node_Str"",new CardView(card)));
        }
        if (card.isTransformable()) {
          updateLatestCardView(game,card,stackObject.getId());
        }
        checkPaid(stackObject.getId(),(StackAbility)stackObject);
      }
 else       if (object != null) {
        if (object instanceof PermanentToken) {
          PermanentToken token=(PermanentToken)object;
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,token.getName(),new CardView(token)));
          checkPaid(stackObject.getId(),(StackAbility)stackObject);
        }
 else         if (object instanceof Emblem) {
          CardView cardView=new CardView(new EmblemView((Emblem)object));
          ((StackAbility)stackObject).setName(((Emblem)object).getName());
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,object.getName(),cardView));
          checkPaid(stackObject.getId(),((StackAbility)stackObject));
        }
 else         if (object instanceof Plane) {
          CardView cardView=new CardView(new PlaneView((Plane)object));
          ((StackAbility)stackObject).setName(((Plane)object).getName());
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,object.getName(),cardView));
          checkPaid(stackObject.getId(),((StackAbility)stackObject));
        }
 else         if (object instanceof Designation) {
          Designation designation=(Designation)game.getObject(object.getId());
          if (designation != null) {
            stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,designation.getName(),new CardView(designation)));
          }
 else {
            LOGGER.fatal(""String_Node_Str"" + object.getName() + ' '+ object.toString()+ ' '+ object.getClass().toString());
          }
        }
 else         if (object instanceof StackAbility) {
          StackAbility stackAbility=((StackAbility)object);
          stackAbility.newId();
          stack.put(stackObject.getId(),new CardView(((StackAbility)stackObject)));
          checkPaid(stackObject.getId(),((StackAbility)stackObject));
        }
 else {
          LOGGER.fatal(""String_Node_Str"" + object.getName() + ' '+ object.toString()+ ' '+ object.getClass().toString());
        }
      }
 else {
        LOGGER.debug(""String_Node_Str"" + stackObject.getStackAbility().getRule());
      }
    }
 else {
      LOGGER.fatal(""String_Node_Str"" + stackObject.getName() + ' '+ stackObject.toString()+ ' '+ stackObject.getClass().toString());
    }
  }
  for (  ExileZone exileZone : state.getExile().getExileZones()) {
    exiles.add(new ExileView(exileZone,game));
  }
  for (  String name : state.getRevealed().keySet()) {
    revealed.add(new RevealedView(name,state.getRevealed().get(name),game));
  }
  this.phase=state.getTurn().getPhaseType();
  this.step=state.getTurn().getStepType();
  this.turn=state.getTurnNum();
  this.activePlayerId=state.getActivePlayerId();
  if (state.getActivePlayerId() != null) {
    this.activePlayerName=state.getPlayer(state.getActivePlayerId()).getName();
  }
 else {
    this.activePlayerName=""String_Node_Str"";
  }
  Player priorityPlayer=null;
  if (state.getPriorityPlayerId() != null) {
    priorityPlayer=state.getPlayer(state.getPriorityPlayerId());
    this.priorityPlayerName=priorityPlayer != null ? priorityPlayer.getName() : ""String_Node_Str"";
  }
 else {
    this.priorityPlayerName=""String_Node_Str"";
  }
  for (  CombatGroup combatGroup : state.getCombat().getGroups()) {
    combat.add(new CombatGroupView(combatGroup,game));
  }
  if (isPlayer) {
    if (priorityPlayer != null && createdForPlayer != null && createdForPlayerId != null && createdForPlayer.isGameUnderControl() && (createdForPlayerId.equals(priorityPlayer.getId()) || createdForPlayer.getPlayersUnderYourControl().contains(priorityPlayer.getId()))) {
      this.special=!state.getSpecialActions().getControlledBy(priorityPlayer.getId(),priorityPlayer.isInPayManaMode()).isEmpty();
    }
  }
 else {
    this.special=false;
  }
  CastSpellLastTurnWatcher watcher=(CastSpellLastTurnWatcher)game.getState().getWatchers().get(CastSpellLastTurnWatcher.class.getSimpleName());
  if (watcher != null) {
    spellsCastCurrentTurn=watcher.getAmountOfSpellsAllPlayersCastOnCurrentTurn();
  }
 else {
    spellsCastCurrentTurn=0;
  }
  rollbackTurnsAllowed=game.getOptions().rollbackTurnsAllowed;
}",0.991822524491944
157708,"@Override public boolean apply(Game game,Ability source){
  StackAbility stackAbility=(StackAbility)game.getStack().getStackObject(targetPointer.getFirst(game,source));
  if (stackAbility != null) {
    Player controller=game.getPlayer(source.getControllerId());
    Permanent sourcePermanent=game.getPermanent(source.getSourceId());
    if (controller != null && sourcePermanent != null) {
      stackAbility.createCopyOnStack(game,source,source.getControllerId(),true);
      game.informPlayers(new StringBuilder(sourcePermanent.getName()).append(""String_Node_Str"").append(controller.getLogName()).append(""String_Node_Str"").toString());
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  StackAbility stackAbility=(StackAbility)game.getStack().getStackObject(targetPointer.getFirst(game,source));
  if (stackAbility != null) {
    Player controller=game.getPlayer(source.getControllerId());
    Permanent sourcePermanent=game.getPermanent(source.getSourceId());
    if (controller != null && sourcePermanent != null) {
      stackAbility.createCopyOnStack(game,source,source.getControllerId(),true);
      game.informPlayers(sourcePermanent.getIdName() + ""String_Node_Str"" + controller.getLogName()+ ""String_Node_Str"");
      return true;
    }
  }
  return false;
}",0.9221466364323508
157709,"/** 
 * I made opponent's Nekusar white with 8.5 tails and when Nekusar was recast he was still white.
 */
@Test @Ignore public void testColorChangeIsReset(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",1);
  addCard(Zone.HAND,playerB,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",2);
  activateAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"",""String_Node_Str"");
  castSpell(1,PhaseStep.BEGIN_COMBAT,playerB,""String_Node_Str"",""String_Node_Str"");
  setStopAt(1,PhaseStep.END_COMBAT);
  execute();
  assertPermanentCount(playerB,""String_Node_Str"",1);
  Permanent nekusar=getPermanent(""String_Node_Str"");
  assertGraveyardCount(playerB,""String_Node_Str"",1);
  Assert.assertFalse(""String_Node_Str"",nekusar.getColor(currentGame).isWhite());
  Assert.assertTrue(""String_Node_Str"",nekusar.getColor(currentGame).isBlue());
  Assert.assertTrue(""String_Node_Str"",nekusar.getColor(currentGame).isBlack());
  Assert.assertTrue(""String_Node_Str"",nekusar.getColor(currentGame).isRed());
}","/** 
 * I made opponent's Nekusar white with 8.5 tails and when Nekusar was recast he was still white.
 */
@Test public void testColorChangeIsReset(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",1);
  addCard(Zone.HAND,playerB,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",2);
  activateAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"",""String_Node_Str"");
  castSpell(1,PhaseStep.BEGIN_COMBAT,playerB,""String_Node_Str"",""String_Node_Str"");
  setStopAt(1,PhaseStep.END_COMBAT);
  execute();
  assertPermanentCount(playerB,""String_Node_Str"",1);
  Permanent nekusar=getPermanent(""String_Node_Str"");
  assertGraveyardCount(playerB,""String_Node_Str"",1);
  Assert.assertFalse(""String_Node_Str"",nekusar.getColor(currentGame).isWhite());
  Assert.assertTrue(""String_Node_Str"",nekusar.getColor(currentGame).isBlue());
  Assert.assertTrue(""String_Node_Str"",nekusar.getColor(currentGame).isBlack());
  Assert.assertTrue(""String_Node_Str"",nekusar.getColor(currentGame).isRed());
}",0.99647577092511
157710,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  if (setColor != null) {
    boolean objectFound=false;
    for (    UUID targetId : targetPointer.getTargets(game,source)) {
      MageObject targetObject=game.getObject(targetId);
      if (targetObject != null) {
        objectFound=true;
        targetObject.getColor(game).setColor(setColor);
      }
    }
    if (!objectFound && this.getDuration() == Duration.Custom) {
      this.discard();
    }
    return true;
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  if (setColor != null) {
    boolean objectFound=false;
    for (    UUID targetId : targetPointer.getTargets(game,source)) {
      MageObject targetObject=game.getObject(targetId);
      if (targetObject != null) {
        if (targetObject instanceof Spell || targetObject instanceof Permanent) {
          objectFound=true;
          targetObject.getColor(game).setColor(setColor);
        }
 else {
          objectFound=false;
        }
      }
    }
    if (!objectFound && this.getDuration() == Duration.Custom) {
      this.discard();
    }
    return true;
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}",0.9040912139503688
157711,"@Override public boolean chooseTargetAmount(Outcome outcome,TargetAmount target,Ability source,Game game){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + outcome.toString() + ':'+ target.toString());
  }
  UUID opponentId=game.getOpponents(playerId).iterator().next();
  if (target.getOriginalTarget() instanceof TargetCreatureOrPlayerAmount) {
    if (outcome == Outcome.Damage && game.getPlayer(opponentId).getLife() <= target.getAmountRemaining()) {
      target.addTarget(opponentId,target.getAmountRemaining(),source,game);
      return true;
    }
    List<Permanent> targets;
    if (outcome.isGood()) {
      targets=threats(playerId,source.getSourceId(),StaticFilters.FILTER_PERMANENT_CREATURE,game,target.getTargets());
    }
 else {
      targets=threats(opponentId,source.getSourceId(),StaticFilters.FILTER_PERMANENT_CREATURE,game,target.getTargets());
    }
    for (    Permanent permanent : targets) {
      if (target.canTarget(getId(),permanent.getId(),source,game)) {
        if (permanent.getToughness().getValue() <= target.getAmountRemaining()) {
          target.addTarget(permanent.getId(),permanent.getToughness().getValue(),source,game);
          return true;
        }
      }
    }
    if (outcome.isGood() && target.canTarget(getId(),getId(),source,game)) {
      target.addTarget(opponentId,target.getAmountRemaining(),source,game);
      return true;
    }
 else     if (target.canTarget(getId(),opponentId,source,game)) {
      target.addTarget(opponentId,target.getAmountRemaining(),source,game);
      return true;
    }
 else     if (target.canTarget(getId(),playerId,source,game)) {
      target.addTarget(opponentId,target.getAmountRemaining(),source,game);
      return true;
    }
    return false;
  }
  if (target.getOriginalTarget() instanceof TargetCreatureOrPlaneswalkerAmount) {
    List<Permanent> targets;
    if (outcome.isGood()) {
      targets=threats(playerId,source.getSourceId(),StaticFilters.FILTER_PERMANENT_CREATURE,game,target.getTargets());
    }
 else {
      targets=threats(opponentId,source.getSourceId(),StaticFilters.FILTER_PERMANENT_CREATURE,game,target.getTargets());
    }
    for (    Permanent permanent : targets) {
      if (target.canTarget(getId(),permanent.getId(),source,game)) {
        if (permanent.getToughness().getValue() <= target.getAmountRemaining()) {
          target.addTarget(permanent.getId(),permanent.getToughness().getValue(),source,game);
          return true;
        }
      }
    }
    if (target.getFilter() instanceof FilterPermanent) {
      targets=threats(null,source.getSourceId(),(FilterPermanent)target.getFilter(),game,target.getTargets());
      Permanent possibleTarget=null;
      for (      Permanent permanent : targets) {
        if (target.canTarget(getId(),permanent.getId(),source,game)) {
          if (permanent.isCreature()) {
            if (permanent.getToughness().getValue() <= target.getAmountRemaining()) {
              target.addTarget(permanent.getId(),permanent.getToughness().getValue(),source,game);
              return true;
            }
 else {
              possibleTarget=permanent;
            }
          }
 else           if (permanent.isPlaneswalker()) {
            int loy=permanent.getCounters(game).getCount(CounterType.LOYALTY);
            if (loy <= target.getAmountRemaining()) {
              target.addTarget(permanent.getId(),loy,source,game);
              return true;
            }
 else {
              possibleTarget=permanent;
            }
          }
        }
      }
      if (possibleTarget != null) {
        target.addTarget(possibleTarget.getId(),target.getAmountRemaining(),source,game);
        return true;
      }
    }
  }
  log.warn(""String_Node_Str"" + target.getClass().getName());
  return false;
}","@Override public boolean chooseTargetAmount(Outcome outcome,TargetAmount target,Ability source,Game game){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + outcome.toString() + ':'+ target.toString());
  }
  UUID opponentId=game.getOpponents(playerId).iterator().next();
  if (target.getOriginalTarget() instanceof TargetCreatureOrPlayerAmount || target.getOriginalTarget() instanceof TargetAnyTargetAmount) {
    if (outcome == Outcome.Damage && game.getPlayer(opponentId).getLife() <= target.getAmountRemaining()) {
      target.addTarget(opponentId,target.getAmountRemaining(),source,game);
      return true;
    }
    List<Permanent> targets;
    if (outcome.isGood()) {
      targets=threats(playerId,source.getSourceId(),StaticFilters.FILTER_PERMANENT_CREATURE,game,target.getTargets());
    }
 else {
      targets=threats(opponentId,source.getSourceId(),StaticFilters.FILTER_PERMANENT_CREATURE,game,target.getTargets());
    }
    for (    Permanent permanent : targets) {
      if (target.canTarget(getId(),permanent.getId(),source,game)) {
        if (permanent.getToughness().getValue() <= target.getAmountRemaining()) {
          target.addTarget(permanent.getId(),permanent.getToughness().getValue(),source,game);
          return true;
        }
      }
    }
    if (outcome.isGood() && target.canTarget(getId(),getId(),source,game)) {
      target.addTarget(opponentId,target.getAmountRemaining(),source,game);
      return true;
    }
 else     if (target.canTarget(getId(),opponentId,source,game)) {
      target.addTarget(opponentId,target.getAmountRemaining(),source,game);
      return true;
    }
 else     if (target.canTarget(getId(),playerId,source,game)) {
      target.addTarget(opponentId,target.getAmountRemaining(),source,game);
      return true;
    }
    return false;
  }
  if (target.getOriginalTarget() instanceof TargetCreatureOrPlaneswalkerAmount) {
    List<Permanent> targets;
    if (outcome.isGood()) {
      targets=threats(playerId,source.getSourceId(),StaticFilters.FILTER_PERMANENT_CREATURE,game,target.getTargets());
    }
 else {
      targets=threats(opponentId,source.getSourceId(),StaticFilters.FILTER_PERMANENT_CREATURE,game,target.getTargets());
    }
    for (    Permanent permanent : targets) {
      if (target.canTarget(getId(),permanent.getId(),source,game)) {
        if (permanent.getToughness().getValue() <= target.getAmountRemaining()) {
          target.addTarget(permanent.getId(),permanent.getToughness().getValue(),source,game);
          return true;
        }
      }
    }
    if (target.getFilter() instanceof FilterPermanent) {
      targets=threats(null,source.getSourceId(),(FilterPermanent)target.getFilter(),game,target.getTargets());
      Permanent possibleTarget=null;
      for (      Permanent permanent : targets) {
        if (target.canTarget(getId(),permanent.getId(),source,game)) {
          if (permanent.isCreature()) {
            if (permanent.getToughness().getValue() <= target.getAmountRemaining()) {
              target.addTarget(permanent.getId(),permanent.getToughness().getValue(),source,game);
              return true;
            }
 else {
              possibleTarget=permanent;
            }
          }
 else           if (permanent.isPlaneswalker()) {
            int loy=permanent.getCounters(game).getCount(CounterType.LOYALTY);
            if (loy <= target.getAmountRemaining()) {
              target.addTarget(permanent.getId(),loy,source,game);
              return true;
            }
 else {
              possibleTarget=permanent;
            }
          }
        }
      }
      if (possibleTarget != null) {
        target.addTarget(possibleTarget.getId(),target.getAmountRemaining(),source,game);
        return true;
      }
    }
  }
  log.warn(""String_Node_Str"" + target.getClass().getName());
  return false;
}",0.9917550058892816
157712,"@Override public boolean moveToExile(UUID exileId,String name,UUID sourceId,Game game,List<UUID> appliedEffects){
  return this.card.moveToExile(exileId,name,sourceId,game,appliedEffects);
}","@Override public boolean moveToExile(UUID exileId,String name,UUID sourceId,Game game,List<UUID> appliedEffects){
  if (this.isCopiedSpell()) {
    game.getStack().remove(this);
    return true;
  }
  return this.card.moveToExile(exileId,name,sourceId,game,appliedEffects);
}",0.7870967741935484
157713,"private Dominaria(){
  super(""String_Node_Str"",""String_Node_Str"",ExpansionSet.buildDate(2018,4,27),SetType.EXPANSION);
  this.blockName=""String_Node_Str"";
  this.hasBoosters=true;
  this.numBoosterLands=1;
  this.numBoosterCommon=10;
  this.numBoosterUncommon=3;
  this.numBoosterRare=1;
  this.ratioBoosterMythic=8;
  this.needsLegends=true;
  cards.add(new SetCardInfo(""String_Node_Str"",40,Rarity.UNCOMMON,mage.cards.a.AcademyDrake.class));
  cards.add(new SetCardInfo(""String_Node_Str"",41,Rarity.COMMON,mage.cards.a.AcademyJourneymage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",2,Rarity.COMMON,mage.cards.a.AdamantWill.class));
  cards.add(new SetCardInfo(""String_Node_Str"",190,Rarity.UNCOMMON,mage.cards.a.AdelizTheCinderWind.class));
  cards.add(new SetCardInfo(""String_Node_Str"",153,Rarity.COMMON,mage.cards.a.AdventurousImpulse.class));
  cards.add(new SetCardInfo(""String_Node_Str"",209,Rarity.COMMON,mage.cards.a.AesthirGlider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",210,Rarity.UNCOMMON,mage.cards.a.AmaranthineWall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",154,Rarity.COMMON,mage.cards.a.AncientAnimus.class));
  cards.add(new SetCardInfo(""String_Node_Str"",155,Rarity.COMMON,mage.cards.a.ArborArmament.class));
  cards.add(new SetCardInfo(""String_Node_Str"",43,Rarity.COMMON,mage.cards.a.ArcaneFlight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",44,Rarity.COMMON,mage.cards.a.ArtificersAssistant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",191,Rarity.UNCOMMON,mage.cards.a.ArvadTheCursed.class));
  cards.add(new SetCardInfo(""String_Node_Str"",192,Rarity.RARE,mage.cards.a.AryelKnightOfWindgrace.class));
  cards.add(new SetCardInfo(""String_Node_Str"",3,Rarity.COMMON,mage.cards.a.AvenSentry.class));
  cards.add(new SetCardInfo(""String_Node_Str"",4,Rarity.UNCOMMON,mage.cards.b.BairdStewardOfArgive.class));
  cards.add(new SetCardInfo(""String_Node_Str"",156,Rarity.COMMON,mage.cards.b.BalothGorger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",45,Rarity.COMMON,mage.cards.b.Befuddle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",5,Rarity.COMMON,mage.cards.b.BenalishHonorGuard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",6,Rarity.RARE,mage.cards.b.BenalishMarshal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",211,Rarity.RARE,mage.cards.b.BlackbladeReforged.class));
  cards.add(new SetCardInfo(""String_Node_Str"",7,Rarity.UNCOMMON,mage.cards.b.BlessedLight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",77,Rarity.COMMON,mage.cards.b.BlessingOfBelzenlok.class));
  cards.add(new SetCardInfo(""String_Node_Str"",46,Rarity.COMMON,mage.cards.b.BlinkOfAnEye.class));
  cards.add(new SetCardInfo(""String_Node_Str"",115,Rarity.COMMON,mage.cards.b.BloodstoneGoblin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",212,Rarity.COMMON,mage.cards.b.BloodtallowCandle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",8,Rarity.UNCOMMON,mage.cards.b.BoardTheWeatherlight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",157,Rarity.COMMON,mage.cards.b.BrokenBond.class));
  cards.add(new SetCardInfo(""String_Node_Str"",78,Rarity.COMMON,mage.cards.c.CabalEvangel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",79,Rarity.COMMON,mage.cards.c.CabalPaladin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",238,Rarity.RARE,mage.cards.c.CabalStronghold.class));
  cards.add(new SetCardInfo(""String_Node_Str"",80,Rarity.COMMON,mage.cards.c.CaligoSkinWitch.class));
  cards.add(new SetCardInfo(""String_Node_Str"",9,Rarity.COMMON,mage.cards.c.CallTheCavalry.class));
  cards.add(new SetCardInfo(""String_Node_Str"",81,Rarity.UNCOMMON,mage.cards.c.CastDown.class));
  cards.add(new SetCardInfo(""String_Node_Str"",82,Rarity.UNCOMMON,mage.cards.c.ChainersTorment.class));
  cards.add(new SetCardInfo(""String_Node_Str"",116,Rarity.UNCOMMON,mage.cards.c.ChampionOfTheFlame.class));
  cards.add(new SetCardInfo(""String_Node_Str"",276,Rarity.RARE,mage.cards.c.ChandrasOutburst.class));
  cards.add(new SetCardInfo(""String_Node_Str"",275,Rarity.MYTHIC,mage.cards.c.ChandraBoldPyromancer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",10,Rarity.COMMON,mage.cards.c.Charge.class));
  cards.add(new SetCardInfo(""String_Node_Str"",239,Rarity.RARE,mage.cards.c.ClifftopRetreat.class));
  cards.add(new SetCardInfo(""String_Node_Str"",47,Rarity.COMMON,mage.cards.c.CloudreaderSphinx.class));
  cards.add(new SetCardInfo(""String_Node_Str"",48,Rarity.COMMON,mage.cards.c.ColdWaterSnapper.class));
  cards.add(new SetCardInfo(""String_Node_Str"",49,Rarity.UNCOMMON,mage.cards.c.CuratorsWard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",158,Rarity.COMMON,mage.cards.c.CorrosiveOoze.class));
  cards.add(new SetCardInfo(""String_Node_Str"",11,Rarity.COMMON,mage.cards.d.DAvenantTrapper.class));
  cards.add(new SetCardInfo(""String_Node_Str"",213,Rarity.UNCOMMON,mage.cards.d.DampingSphere.class));
  cards.add(new SetCardInfo(""String_Node_Str"",12,Rarity.UNCOMMON,mage.cards.d.DanithaCapashenParagon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",193,Rarity.MYTHIC,mage.cards.d.DarigaazReincarnated.class));
  cards.add(new SetCardInfo(""String_Node_Str"",13,Rarity.RARE,mage.cards.d.DaringArchaeologist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",83,Rarity.COMMON,mage.cards.d.DarkBargain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",14,Rarity.UNCOMMON,mage.cards.d.DauntlessBodyguard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",84,Rarity.COMMON,mage.cards.d.DeathbloomThallid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",50,Rarity.COMMON,mage.cards.d.DeepFreeze.class));
  cards.add(new SetCardInfo(""String_Node_Str"",85,Rarity.COMMON,mage.cards.d.DemonicVigor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",86,Rarity.MYTHIC,mage.cards.d.DemonlordBelzenlok.class));
  cards.add(new SetCardInfo(""String_Node_Str"",51,Rarity.UNCOMMON,mage.cards.d.DiligentExcavator.class));
  cards.add(new SetCardInfo(""String_Node_Str"",87,Rarity.COMMON,mage.cards.d.Divest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",52,Rarity.COMMON,mage.cards.d.Divination.class));
  cards.add(new SetCardInfo(""String_Node_Str"",88,Rarity.RARE,mage.cards.d.DreadShade.class));
  cards.add(new SetCardInfo(""String_Node_Str"",89,Rarity.COMMON,mage.cards.d.DrudgeSentinel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",15,Rarity.SPECIAL,mage.cards.d.Dub.class));
  cards.add(new SetCardInfo(""String_Node_Str"",159,Rarity.UNCOMMON,mage.cards.e.ElfhameDruid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",91,Rarity.COMMON,mage.cards.e.Eviscerate.class));
  cards.add(new SetCardInfo(""String_Node_Str"",16,Rarity.RARE,mage.cards.e.EvraHalcyonWitness.class));
  cards.add(new SetCardInfo(""String_Node_Str"",17,Rarity.COMMON,mage.cards.e.ExcavationElephant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",18,Rarity.RARE,mage.cards.f.FallOfTheThran.class));
  cards.add(new SetCardInfo(""String_Node_Str"",92,Rarity.COMMON,mage.cards.f.FeralAbomination.class));
  cards.add(new SetCardInfo(""String_Node_Str"",117,Rarity.COMMON,mage.cards.f.FerventStrike.class));
  cards.add(new SetCardInfo(""String_Node_Str"",118,Rarity.COMMON,mage.cards.f.FieryIntervention.class));
  cards.add(new SetCardInfo(""String_Node_Str"",119,Rarity.UNCOMMON,mage.cards.f.FightWithFire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",93,Rarity.UNCOMMON,mage.cards.f.FinalParting.class));
  cards.add(new SetCardInfo(""String_Node_Str"",120,Rarity.COMMON,mage.cards.f.FireElemental.class));
  cards.add(new SetCardInfo(""String_Node_Str"",121,Rarity.UNCOMMON,mage.cards.f.FirefistAdept.class));
  cards.add(new SetCardInfo(""String_Node_Str"",280,Rarity.RARE,mage.cards.f.FiresongAndSunspeaker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",214,Rarity.RARE,mage.cards.f.ForebearsBlade.class));
  cards.add(new SetCardInfo(""String_Node_Str"",266,Rarity.LAND,mage.cards.basiclands.Forest.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",267,Rarity.LAND,mage.cards.basiclands.Forest.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",268,Rarity.LAND,mage.cards.basiclands.Forest.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",269,Rarity.LAND,mage.cards.basiclands.Forest.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",124,Rarity.COMMON,mage.cards.f.FrenziedRage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",94,Rarity.COMMON,mage.cards.f.FungalInfection.class));
  cards.add(new SetCardInfo(""String_Node_Str"",160,Rarity.UNCOMMON,mage.cards.f.FungalPlots.class));
  cards.add(new SetCardInfo(""String_Node_Str"",161,Rarity.UNCOMMON,mage.cards.g.GaeasBlessing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",162,Rarity.COMMON,mage.cards.g.GaeasProtector.class));
  cards.add(new SetCardInfo(""String_Node_Str"",194,Rarity.UNCOMMON,mage.cards.g.GarnaTheBloodflame.class));
  cards.add(new SetCardInfo(""String_Node_Str"",125,Rarity.COMMON,mage.cards.g.GhituChronicler.class));
  cards.add(new SetCardInfo(""String_Node_Str"",126,Rarity.COMMON,mage.cards.g.GhituJourneymage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",127,Rarity.COMMON,mage.cards.g.GhituLavarunner.class));
  cards.add(new SetCardInfo(""String_Node_Str"",19,Rarity.COMMON,mage.cards.g.GideonsReproach.class));
  cards.add(new SetCardInfo(""String_Node_Str"",163,Rarity.COMMON,mage.cards.g.GiftofGrowth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",215,Rarity.RARE,mage.cards.g.GildedLotus.class));
  cards.add(new SetCardInfo(""String_Node_Str"",128,Rarity.UNCOMMON,mage.cards.g.GoblinBarrage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",129,Rarity.RARE,mage.cards.g.GoblinChainwhirler.class));
  cards.add(new SetCardInfo(""String_Node_Str"",130,Rarity.UNCOMMON,mage.cards.g.GoblinWarchief.class));
  cards.add(new SetCardInfo(""String_Node_Str"",195,Rarity.RARE,mage.cards.g.GrandWarlordRadha.class));
  cards.add(new SetCardInfo(""String_Node_Str"",164,Rarity.COMMON,mage.cards.g.GrowFromTheAshes.class));
  cards.add(new SetCardInfo(""String_Node_Str"",165,Rarity.UNCOMMON,mage.cards.g.GrunnTheLonelyKing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",216,Rarity.COMMON,mage.cards.g.GuardiansOfKoilos.class));
  cards.add(new SetCardInfo(""String_Node_Str"",196,Rarity.UNCOMMON,mage.cards.h.HallarTheFirefletcher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",131,Rarity.RARE,mage.cards.h.HaphazardBombardment.class));
  cards.add(new SetCardInfo(""String_Node_Str"",20,Rarity.COMMON,mage.cards.h.HealingGrace.class));
  cards.add(new SetCardInfo(""String_Node_Str"",217,Rarity.RARE,mage.cards.h.HelmOfTheHost.class));
  cards.add(new SetCardInfo(""String_Node_Str"",240,Rarity.RARE,mage.cards.h.HinterlandHarbor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",21,Rarity.MYTHIC,mage.cards.h.HistoryOfBenalia.class));
  cards.add(new SetCardInfo(""String_Node_Str"",53,Rarity.UNCOMMON,mage.cards.h.HomaridExplorer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",218,Rarity.UNCOMMON,mage.cards.h.HowlingGolem.class));
  cards.add(new SetCardInfo(""String_Node_Str"",219,Rarity.UNCOMMON,mage.cards.i.IcyManipulator.class));
  cards.add(new SetCardInfo(""String_Node_Str"",54,Rarity.UNCOMMON,mage.cards.i.InBolassClutches.class));
  cards.add(new SetCardInfo(""String_Node_Str"",22,Rarity.COMMON,mage.cards.i.InvokeTheDivine.class));
  cards.add(new SetCardInfo(""String_Node_Str"",254,Rarity.LAND,mage.cards.basiclands.Island.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",255,Rarity.LAND,mage.cards.basiclands.Island.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",256,Rarity.LAND,mage.cards.basiclands.Island.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",257,Rarity.LAND,mage.cards.basiclands.Island.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",241,Rarity.RARE,mage.cards.i.IsolatedChapel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",132,Rarity.MYTHIC,mage.cards.j.JayaBallard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",133,Rarity.RARE,mage.cards.j.JayasImmolatingInferno.class));
  cards.add(new SetCardInfo(""String_Node_Str"",197,Rarity.MYTHIC,mage.cards.j.JhoiraWeatherlightCaptain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",220,Rarity.UNCOMMON,mage.cards.j.JhoirasFamiliar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",198,Rarity.RARE,mage.cards.j.JodahArchmageEternal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",95,Rarity.RARE,mage.cards.j.JosuVessLichKnight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",221,Rarity.COMMON,mage.cards.j.JoustingLance.class));
  cards.add(new SetCardInfo(""String_Node_Str"",222,Rarity.UNCOMMON,mage.cards.j.Juggernaut.class));
  cards.add(new SetCardInfo(""String_Node_Str"",166,Rarity.RARE,mage.cards.k.KamahlsDruidicVow.class));
  cards.add(new SetCardInfo(""String_Node_Str"",1,Rarity.MYTHIC,mage.cards.k.KarnScionOfUrza.class));
  cards.add(new SetCardInfo(""String_Node_Str"",55,Rarity.RARE,mage.cards.k.KarnsTemporalSundering.class));
  cards.add(new SetCardInfo(""String_Node_Str"",277,Rarity.UNCOMMON,mage.cards.k.KarplusanHound.class));
  cards.add(new SetCardInfo(""String_Node_Str"",96,Rarity.RARE,mage.cards.k.KazarovSengirPureblood.class));
  cards.add(new SetCardInfo(""String_Node_Str"",134,Rarity.COMMON,mage.cards.k.KeldonOverseer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",135,Rarity.COMMON,mage.cards.k.KeldonRaider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",136,Rarity.COMMON,mage.cards.k.KeldonWarcaller.class));
  cards.add(new SetCardInfo(""String_Node_Str"",23,Rarity.UNCOMMON,mage.cards.k.KnightOfGrace.class));
  cards.add(new SetCardInfo(""String_Node_Str"",97,Rarity.UNCOMMON,mage.cards.k.KnightOfMalice.class));
  cards.add(new SetCardInfo(""String_Node_Str"",24,Rarity.COMMON,mage.cards.k.KnightOfNewBenalia.class));
  cards.add(new SetCardInfo(""String_Node_Str"",167,Rarity.COMMON,mage.cards.k.KrosanDruid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",25,Rarity.UNCOMMON,mage.cards.k.KwendePrideOfFemeref.class));
  cards.add(new SetCardInfo(""String_Node_Str"",98,Rarity.RARE,mage.cards.l.LichsMastery.class));
  cards.add(new SetCardInfo(""String_Node_Str"",99,Rarity.UNCOMMON,mage.cards.l.LingeringPhantom.class));
  cards.add(new SetCardInfo(""String_Node_Str"",168,Rarity.COMMON,mage.cards.l.LlanowarElves.class));
  cards.add(new SetCardInfo(""String_Node_Str"",169,Rarity.COMMON,mage.cards.l.LlanowarEnvoy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",170,Rarity.COMMON,mage.cards.l.LlanowarScout.class));
  cards.add(new SetCardInfo(""String_Node_Str"",26,Rarity.MYTHIC,mage.cards.l.LyraDawnbringer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",171,Rarity.COMMON,mage.cards.m.MammothSpider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",172,Rarity.RARE,mage.cards.m.MarwynTheNurturer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",274,Rarity.COMMON,mage.cards.m.MeanderingRiver.class));
  cards.add(new SetCardInfo(""String_Node_Str"",242,Rarity.UNCOMMON,mage.cards.m.MemorialToFolly.class));
  cards.add(new SetCardInfo(""String_Node_Str"",243,Rarity.UNCOMMON,mage.cards.m.MemorialToGenius.class));
  cards.add(new SetCardInfo(""String_Node_Str"",244,Rarity.UNCOMMON,mage.cards.m.MemorialToGlory.class));
  cards.add(new SetCardInfo(""String_Node_Str"",245,Rarity.UNCOMMON,mage.cards.m.MemorialToUnity.class));
  cards.add(new SetCardInfo(""String_Node_Str"",246,Rarity.UNCOMMON,mage.cards.m.MemorialToWar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",56,Rarity.UNCOMMON,mage.cards.m.MerfolkTrickster.class));
  cards.add(new SetCardInfo(""String_Node_Str"",27,Rarity.COMMON,mage.cards.m.MesaUnicorn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",223,Rarity.RARE,mage.cards.m.MishrasSelfReplicator.class));
  cards.add(new SetCardInfo(""String_Node_Str"",262,Rarity.LAND,mage.cards.basiclands.Mountain.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",263,Rarity.LAND,mage.cards.basiclands.Mountain.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",264,Rarity.LAND,mage.cards.basiclands.Mountain.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",265,Rarity.LAND,mage.cards.basiclands.Mountain.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",199,Rarity.MYTHIC,mage.cards.m.MuldrothaTheGravetide.class));
  cards.add(new SetCardInfo(""String_Node_Str"",174,Rarity.MYTHIC,mage.cards.m.MultaniYavimayasAvatar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",224,Rarity.MYTHIC,mage.cards.m.MoxAmber.class));
  cards.add(new SetCardInfo(""String_Node_Str"",58,Rarity.RARE,mage.cards.n.NabanDeanOfIteration.class));
  cards.add(new SetCardInfo(""String_Node_Str"",59,Rarity.MYTHIC,mage.cards.n.NaruMehaMasterWizard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",175,Rarity.UNCOMMON,mage.cards.n.NaturesSpiral.class));
  cards.add(new SetCardInfo(""String_Node_Str"",225,Rarity.COMMON,mage.cards.n.NavigatorsCompass.class));
  cards.add(new SetCardInfo(""String_Node_Str"",272,Rarity.RARE,mage.cards.n.NiambiFaithfulHealer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",200,Rarity.RARE,mage.cards.o.OathOfTeferi.class));
  cards.add(new SetCardInfo(""String_Node_Str"",28,Rarity.UNCOMMON,mage.cards.o.OnSerrasWings.class));
  cards.add(new SetCardInfo(""String_Node_Str"",60,Rarity.COMMON,mage.cards.o.Opt.class));
  cards.add(new SetCardInfo(""String_Node_Str"",137,Rarity.COMMON,mage.cards.o.OrcishVandal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",226,Rarity.COMMON,mage.cards.p.PardicWanderer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",29,Rarity.COMMON,mage.cards.p.PegasusCourser.class));
  cards.add(new SetCardInfo(""String_Node_Str"",100,Rarity.MYTHIC,mage.cards.p.PhyrexianScriptures.class));
  cards.add(new SetCardInfo(""String_Node_Str"",176,Rarity.COMMON,mage.cards.p.PierceTheSky.class));
  cards.add(new SetCardInfo(""String_Node_Str"",250,Rarity.LAND,mage.cards.basiclands.Plains.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",251,Rarity.LAND,mage.cards.basiclands.Plains.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",252,Rarity.LAND,mage.cards.basiclands.Plains.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",253,Rarity.LAND,mage.cards.basiclands.Plains.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",227,Rarity.COMMON,mage.cards.p.PowerstoneShard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",61,Rarity.RARE,mage.cards.p.PrecognitionField.class));
  cards.add(new SetCardInfo(""String_Node_Str"",201,Rarity.RARE,mage.cards.p.PrimevalsGloriousRebirth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",177,Rarity.COMMON,mage.cards.p.PrimordialWurm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",278,Rarity.COMMON,mage.cards.p.PyromanticPilgrim.class));
  cards.add(new SetCardInfo(""String_Node_Str"",138,Rarity.COMMON,mage.cards.r.RadiatingLightning.class));
  cards.add(new SetCardInfo(""String_Node_Str"",202,Rarity.UNCOMMON,mage.cards.r.RaffCapashenShipsMage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",139,Rarity.COMMON,mage.cards.r.RampagingCyclops.class));
  cards.add(new SetCardInfo(""String_Node_Str"",101,Rarity.COMMON,mage.cards.r.RatColony.class));
  cards.add(new SetCardInfo(""String_Node_Str"",62,Rarity.COMMON,mage.cards.r.RelicRunner.class));
  cards.add(new SetCardInfo(""String_Node_Str"",63,Rarity.COMMON,mage.cards.r.Rescue.class));
  cards.add(new SetCardInfo(""String_Node_Str"",102,Rarity.RARE,mage.cards.r.RiteOfBelzenlok.class));
  cards.add(new SetCardInfo(""String_Node_Str"",203,Rarity.UNCOMMON,mage.cards.r.RonaDiscipleOfGix.class));
  cards.add(new SetCardInfo(""String_Node_Str"",140,Rarity.COMMON,mage.cards.r.RunAmok.class));
  cards.add(new SetCardInfo(""String_Node_Str"",64,Rarity.UNCOMMON,mage.cards.s.SageOfLatNam.class));
  cards.add(new SetCardInfo(""String_Node_Str"",30,Rarity.UNCOMMON,mage.cards.s.SanctumSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",178,Rarity.COMMON,mage.cards.s.SaprolingMigration.class));
  cards.add(new SetCardInfo(""String_Node_Str"",31,Rarity.UNCOMMON,mage.cards.s.SealAway.class));
  cards.add(new SetCardInfo(""String_Node_Str"",141,Rarity.COMMON,mage.cards.s.SeismicShift.class));
  cards.add(new SetCardInfo(""String_Node_Str"",65,Rarity.UNCOMMON,mage.cards.s.SentinelOfThePearlTrident.class));
  cards.add(new SetCardInfo(""String_Node_Str"",32,Rarity.COMMON,mage.cards.s.SergeantAtArms.class));
  cards.add(new SetCardInfo(""String_Node_Str"",33,Rarity.UNCOMMON,mage.cards.s.SerraAngel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",34,Rarity.COMMON,mage.cards.s.SerraDisciple.class));
  cards.add(new SetCardInfo(""String_Node_Str"",103,Rarity.UNCOMMON,mage.cards.s.SettleTheScore.class));
  cards.add(new SetCardInfo(""String_Node_Str"",35,Rarity.RARE,mage.cards.s.ShalaiVoiceOfPlenty.class));
  cards.add(new SetCardInfo(""String_Node_Str"",204,Rarity.UNCOMMON,mage.cards.s.ShannaSisaysLegacy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",228,Rarity.UNCOMMON,mage.cards.s.ShieldOfTheRealm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",142,Rarity.COMMON,mage.cards.s.ShivanFire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",229,Rarity.COMMON,mage.cards.s.ShortSword.class));
  cards.add(new SetCardInfo(""String_Node_Str"",143,Rarity.RARE,mage.cards.s.SiegeGangCommander.class));
  cards.add(new SetCardInfo(""String_Node_Str"",144,Rarity.COMMON,mage.cards.s.SkirkProspector.class));
  cards.add(new SetCardInfo(""String_Node_Str"",230,Rarity.COMMON,mage.cards.s.SkitteringSurveyor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",145,Rarity.UNCOMMON,mage.cards.s.Skizzik.class));
  cards.add(new SetCardInfo(""String_Node_Str"",205,Rarity.UNCOMMON,mage.cards.s.SlimefootTheStowaway.class));
  cards.add(new SetCardInfo(""String_Node_Str"",66,Rarity.UNCOMMON,mage.cards.s.SlinnVodaTheRisingDeep.class));
  cards.add(new SetCardInfo(""String_Node_Str"",179,Rarity.UNCOMMON,mage.cards.s.SongOfFreyalise.class));
  cards.add(new SetCardInfo(""String_Node_Str"",231,Rarity.UNCOMMON,mage.cards.s.SorcerersWand.class));
  cards.add(new SetCardInfo(""String_Node_Str"",104,Rarity.COMMON,mage.cards.s.SoulSalvage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",232,Rarity.COMMON,mage.cards.s.SparringConstruct.class));
  cards.add(new SetCardInfo(""String_Node_Str"",180,Rarity.UNCOMMON,mage.cards.s.SporeSwarm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",181,Rarity.UNCOMMON,mage.cards.s.SporecrownThallid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",146,Rarity.RARE,mage.cards.s.SqueeTheImmortal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",182,Rarity.RARE,mage.cards.s.SteelLeafChampion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",105,Rarity.COMMON,mage.cards.s.StrongholdConfessor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",247,Rarity.RARE,mage.cards.s.SulfurFalls.class));
  cards.add(new SetCardInfo(""String_Node_Str"",258,Rarity.LAND,mage.cards.basiclands.Swamp.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",259,Rarity.LAND,mage.cards.basiclands.Swamp.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",260,Rarity.LAND,mage.cards.basiclands.Swamp.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",261,Rarity.LAND,mage.cards.basiclands.Swamp.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",183,Rarity.RARE,mage.cards.s.SylvanAwakening.class));
  cards.add(new SetCardInfo(""String_Node_Str"",67,Rarity.UNCOMMON,mage.cards.s.Syncopate.class));
  cards.add(new SetCardInfo(""String_Node_Str"",206,Rarity.UNCOMMON,mage.cards.t.TatyovaBenthicDruid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",273,Rarity.UNCOMMON,mage.cards.t.TeferisSentinel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",207,Rarity.MYTHIC,mage.cards.t.TeferiHeroOfDominaria.class));
  cards.add(new SetCardInfo(""String_Node_Str"",270,Rarity.MYTHIC,mage.cards.t.TeferiTimebender.class));
  cards.add(new SetCardInfo(""String_Node_Str"",68,Rarity.RARE,mage.cards.t.TempestDjinn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",271,Rarity.UNCOMMON,mage.cards.t.TemporalMachinations.class));
  cards.add(new SetCardInfo(""String_Node_Str"",184,Rarity.RARE,mage.cards.t.TerritorialAllosaurus.class));
  cards.add(new SetCardInfo(""String_Node_Str"",36,Rarity.RARE,mage.cards.t.TesharAncestorsApostle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",69,Rarity.UNCOMMON,mage.cards.t.TetsukoUmezawaFugitive.class));
  cards.add(new SetCardInfo(""String_Node_Str"",106,Rarity.COMMON,mage.cards.t.ThallidOmnivore.class));
  cards.add(new SetCardInfo(""String_Node_Str"",107,Rarity.UNCOMMON,mage.cards.t.ThallidSoothsayer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",42,Rarity.RARE,mage.cards.t.TheAntiquitiesWar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",90,Rarity.UNCOMMON,mage.cards.t.TheEldestReborn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",122,Rarity.RARE,mage.cards.t.TheFirstEruption.class));
  cards.add(new SetCardInfo(""String_Node_Str"",123,Rarity.UNCOMMON,mage.cards.t.TheFlameOfKeld.class));
  cards.add(new SetCardInfo(""String_Node_Str"",173,Rarity.RARE,mage.cards.t.TheMendingOfDominaria.class));
  cards.add(new SetCardInfo(""String_Node_Str"",57,Rarity.RARE,mage.cards.t.TheMirariConjecture.class));
  cards.add(new SetCardInfo(""String_Node_Str"",185,Rarity.UNCOMMON,mage.cards.t.ThornElemental.class));
  cards.add(new SetCardInfo(""String_Node_Str"",233,Rarity.RARE,mage.cards.t.ThranTemporalGateway.class));
  cards.add(new SetCardInfo(""String_Node_Str"",208,Rarity.UNCOMMON,mage.cards.t.TianaShipsCaretaker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",279,Rarity.COMMON,mage.cards.t.TimberGorge.class));
  cards.add(new SetCardInfo(""String_Node_Str"",70,Rarity.UNCOMMON,mage.cards.t.TimeOfIce.class));
  cards.add(new SetCardInfo(""String_Node_Str"",71,Rarity.COMMON,mage.cards.t.TolarianScholar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",108,Rarity.RARE,mage.cards.t.TorgaarFamineIncarnate.class));
  cards.add(new SetCardInfo(""String_Node_Str"",37,Rarity.COMMON,mage.cards.t.TragicPoet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",234,Rarity.RARE,mage.cards.t.TraxosScourgeOfKroog.class));
  cards.add(new SetCardInfo(""String_Node_Str"",38,Rarity.UNCOMMON,mage.cards.t.TriumphOfGerrard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",147,Rarity.RARE,mage.cards.t.TwoHeadedGiant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",186,Rarity.UNCOMMON,mage.cards.u.UntamedKavu.class));
  cards.add(new SetCardInfo(""String_Node_Str"",72,Rarity.COMMON,mage.cards.u.Unwind.class));
  cards.add(new SetCardInfo(""String_Node_Str"",109,Rarity.UNCOMMON,mage.cards.u.UrgorosTheEmptyOne.class));
  cards.add(new SetCardInfo(""String_Node_Str"",39,Rarity.RARE,mage.cards.u.UrzasRuinousBlast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",235,Rarity.UNCOMMON,mage.cards.u.UrzasTome.class));
  cards.add(new SetCardInfo(""String_Node_Str"",148,Rarity.UNCOMMON,mage.cards.v.ValdukKeeperOfTheFlame.class));
  cards.add(new SetCardInfo(""String_Node_Str"",187,Rarity.RARE,mage.cards.v.VerdantForce.class));
  cards.add(new SetCardInfo(""String_Node_Str"",149,Rarity.MYTHIC,mage.cards.v.VerixBladewing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",110,Rarity.COMMON,mage.cards.v.ViciousOffering.class));
  cards.add(new SetCardInfo(""String_Node_Str"",73,Rarity.COMMON,mage.cards.v.VodalianArcanist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",236,Rarity.COMMON,mage.cards.v.VoltaicServant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",150,Rarity.UNCOMMON,mage.cards.w.WarcryPhoenix.class));
  cards.add(new SetCardInfo(""String_Node_Str"",151,Rarity.COMMON,mage.cards.w.WarlordsFury.class));
  cards.add(new SetCardInfo(""String_Node_Str"",237,Rarity.MYTHIC,mage.cards.w.Weatherlight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",74,Rarity.UNCOMMON,mage.cards.w.WeightOfMemory.class));
  cards.add(new SetCardInfo(""String_Node_Str"",111,Rarity.UNCOMMON,mage.cards.w.WhisperBloodLiturgist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",188,Rarity.UNCOMMON,mage.cards.w.WildOnslaught.class));
  cards.add(new SetCardInfo(""String_Node_Str"",112,Rarity.COMMON,mage.cards.w.WindgraceAcolyte.class));
  cards.add(new SetCardInfo(""String_Node_Str"",152,Rarity.UNCOMMON,mage.cards.w.WizardsLightning.class));
  cards.add(new SetCardInfo(""String_Node_Str"",75,Rarity.UNCOMMON,mage.cards.w.WizardsRetort.class));
  cards.add(new SetCardInfo(""String_Node_Str"",248,Rarity.RARE,mage.cards.w.WoodlandCemetery.class));
  cards.add(new SetCardInfo(""String_Node_Str"",113,Rarity.UNCOMMON,mage.cards.y.YargleGluttonOfUrborg.class));
  cards.add(new SetCardInfo(""String_Node_Str"",189,Rarity.COMMON,mage.cards.y.YavimayaSapherd.class));
  cards.add(new SetCardInfo(""String_Node_Str"",114,Rarity.RARE,mage.cards.y.YawgmothsVileOffering.class));
  cards.add(new SetCardInfo(""String_Node_Str"",76,Rarity.RARE,mage.cards.z.ZahidDjinnOfTheLamp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",249,Rarity.UNCOMMON,mage.cards.z.ZhalfirinVoid.class));
}","private Dominaria(){
  super(""String_Node_Str"",""String_Node_Str"",ExpansionSet.buildDate(2018,4,27),SetType.EXPANSION);
  this.blockName=""String_Node_Str"";
  this.hasBoosters=true;
  this.numBoosterLands=1;
  this.numBoosterCommon=10;
  this.numBoosterUncommon=3;
  this.numBoosterRare=1;
  this.ratioBoosterMythic=8;
  this.needsLegends=true;
  this.maxCardNumberInBooster=269;
  cards.add(new SetCardInfo(""String_Node_Str"",40,Rarity.UNCOMMON,mage.cards.a.AcademyDrake.class));
  cards.add(new SetCardInfo(""String_Node_Str"",41,Rarity.COMMON,mage.cards.a.AcademyJourneymage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",2,Rarity.COMMON,mage.cards.a.AdamantWill.class));
  cards.add(new SetCardInfo(""String_Node_Str"",190,Rarity.UNCOMMON,mage.cards.a.AdelizTheCinderWind.class));
  cards.add(new SetCardInfo(""String_Node_Str"",153,Rarity.COMMON,mage.cards.a.AdventurousImpulse.class));
  cards.add(new SetCardInfo(""String_Node_Str"",209,Rarity.COMMON,mage.cards.a.AesthirGlider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",210,Rarity.UNCOMMON,mage.cards.a.AmaranthineWall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",154,Rarity.COMMON,mage.cards.a.AncientAnimus.class));
  cards.add(new SetCardInfo(""String_Node_Str"",155,Rarity.COMMON,mage.cards.a.ArborArmament.class));
  cards.add(new SetCardInfo(""String_Node_Str"",43,Rarity.COMMON,mage.cards.a.ArcaneFlight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",44,Rarity.COMMON,mage.cards.a.ArtificersAssistant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",191,Rarity.UNCOMMON,mage.cards.a.ArvadTheCursed.class));
  cards.add(new SetCardInfo(""String_Node_Str"",192,Rarity.RARE,mage.cards.a.AryelKnightOfWindgrace.class));
  cards.add(new SetCardInfo(""String_Node_Str"",3,Rarity.COMMON,mage.cards.a.AvenSentry.class));
  cards.add(new SetCardInfo(""String_Node_Str"",4,Rarity.UNCOMMON,mage.cards.b.BairdStewardOfArgive.class));
  cards.add(new SetCardInfo(""String_Node_Str"",156,Rarity.COMMON,mage.cards.b.BalothGorger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",45,Rarity.COMMON,mage.cards.b.Befuddle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",5,Rarity.COMMON,mage.cards.b.BenalishHonorGuard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",6,Rarity.RARE,mage.cards.b.BenalishMarshal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",211,Rarity.RARE,mage.cards.b.BlackbladeReforged.class));
  cards.add(new SetCardInfo(""String_Node_Str"",7,Rarity.UNCOMMON,mage.cards.b.BlessedLight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",77,Rarity.COMMON,mage.cards.b.BlessingOfBelzenlok.class));
  cards.add(new SetCardInfo(""String_Node_Str"",46,Rarity.COMMON,mage.cards.b.BlinkOfAnEye.class));
  cards.add(new SetCardInfo(""String_Node_Str"",115,Rarity.COMMON,mage.cards.b.BloodstoneGoblin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",212,Rarity.COMMON,mage.cards.b.BloodtallowCandle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",8,Rarity.UNCOMMON,mage.cards.b.BoardTheWeatherlight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",157,Rarity.COMMON,mage.cards.b.BrokenBond.class));
  cards.add(new SetCardInfo(""String_Node_Str"",78,Rarity.COMMON,mage.cards.c.CabalEvangel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",79,Rarity.COMMON,mage.cards.c.CabalPaladin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",238,Rarity.RARE,mage.cards.c.CabalStronghold.class));
  cards.add(new SetCardInfo(""String_Node_Str"",80,Rarity.COMMON,mage.cards.c.CaligoSkinWitch.class));
  cards.add(new SetCardInfo(""String_Node_Str"",9,Rarity.COMMON,mage.cards.c.CallTheCavalry.class));
  cards.add(new SetCardInfo(""String_Node_Str"",81,Rarity.UNCOMMON,mage.cards.c.CastDown.class));
  cards.add(new SetCardInfo(""String_Node_Str"",82,Rarity.UNCOMMON,mage.cards.c.ChainersTorment.class));
  cards.add(new SetCardInfo(""String_Node_Str"",116,Rarity.UNCOMMON,mage.cards.c.ChampionOfTheFlame.class));
  cards.add(new SetCardInfo(""String_Node_Str"",276,Rarity.RARE,mage.cards.c.ChandrasOutburst.class));
  cards.add(new SetCardInfo(""String_Node_Str"",275,Rarity.MYTHIC,mage.cards.c.ChandraBoldPyromancer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",10,Rarity.COMMON,mage.cards.c.Charge.class));
  cards.add(new SetCardInfo(""String_Node_Str"",239,Rarity.RARE,mage.cards.c.ClifftopRetreat.class));
  cards.add(new SetCardInfo(""String_Node_Str"",47,Rarity.COMMON,mage.cards.c.CloudreaderSphinx.class));
  cards.add(new SetCardInfo(""String_Node_Str"",48,Rarity.COMMON,mage.cards.c.ColdWaterSnapper.class));
  cards.add(new SetCardInfo(""String_Node_Str"",49,Rarity.UNCOMMON,mage.cards.c.CuratorsWard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",158,Rarity.COMMON,mage.cards.c.CorrosiveOoze.class));
  cards.add(new SetCardInfo(""String_Node_Str"",11,Rarity.COMMON,mage.cards.d.DAvenantTrapper.class));
  cards.add(new SetCardInfo(""String_Node_Str"",213,Rarity.UNCOMMON,mage.cards.d.DampingSphere.class));
  cards.add(new SetCardInfo(""String_Node_Str"",12,Rarity.UNCOMMON,mage.cards.d.DanithaCapashenParagon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",193,Rarity.MYTHIC,mage.cards.d.DarigaazReincarnated.class));
  cards.add(new SetCardInfo(""String_Node_Str"",13,Rarity.RARE,mage.cards.d.DaringArchaeologist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",83,Rarity.COMMON,mage.cards.d.DarkBargain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",14,Rarity.UNCOMMON,mage.cards.d.DauntlessBodyguard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",84,Rarity.COMMON,mage.cards.d.DeathbloomThallid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",50,Rarity.COMMON,mage.cards.d.DeepFreeze.class));
  cards.add(new SetCardInfo(""String_Node_Str"",85,Rarity.COMMON,mage.cards.d.DemonicVigor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",86,Rarity.MYTHIC,mage.cards.d.DemonlordBelzenlok.class));
  cards.add(new SetCardInfo(""String_Node_Str"",51,Rarity.UNCOMMON,mage.cards.d.DiligentExcavator.class));
  cards.add(new SetCardInfo(""String_Node_Str"",87,Rarity.COMMON,mage.cards.d.Divest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",52,Rarity.COMMON,mage.cards.d.Divination.class));
  cards.add(new SetCardInfo(""String_Node_Str"",88,Rarity.RARE,mage.cards.d.DreadShade.class));
  cards.add(new SetCardInfo(""String_Node_Str"",89,Rarity.COMMON,mage.cards.d.DrudgeSentinel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",15,Rarity.SPECIAL,mage.cards.d.Dub.class));
  cards.add(new SetCardInfo(""String_Node_Str"",159,Rarity.UNCOMMON,mage.cards.e.ElfhameDruid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",91,Rarity.COMMON,mage.cards.e.Eviscerate.class));
  cards.add(new SetCardInfo(""String_Node_Str"",16,Rarity.RARE,mage.cards.e.EvraHalcyonWitness.class));
  cards.add(new SetCardInfo(""String_Node_Str"",17,Rarity.COMMON,mage.cards.e.ExcavationElephant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",18,Rarity.RARE,mage.cards.f.FallOfTheThran.class));
  cards.add(new SetCardInfo(""String_Node_Str"",92,Rarity.COMMON,mage.cards.f.FeralAbomination.class));
  cards.add(new SetCardInfo(""String_Node_Str"",117,Rarity.COMMON,mage.cards.f.FerventStrike.class));
  cards.add(new SetCardInfo(""String_Node_Str"",118,Rarity.COMMON,mage.cards.f.FieryIntervention.class));
  cards.add(new SetCardInfo(""String_Node_Str"",119,Rarity.UNCOMMON,mage.cards.f.FightWithFire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",93,Rarity.UNCOMMON,mage.cards.f.FinalParting.class));
  cards.add(new SetCardInfo(""String_Node_Str"",120,Rarity.COMMON,mage.cards.f.FireElemental.class));
  cards.add(new SetCardInfo(""String_Node_Str"",121,Rarity.UNCOMMON,mage.cards.f.FirefistAdept.class));
  cards.add(new SetCardInfo(""String_Node_Str"",280,Rarity.RARE,mage.cards.f.FiresongAndSunspeaker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",214,Rarity.RARE,mage.cards.f.ForebearsBlade.class));
  cards.add(new SetCardInfo(""String_Node_Str"",266,Rarity.LAND,mage.cards.basiclands.Forest.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",267,Rarity.LAND,mage.cards.basiclands.Forest.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",268,Rarity.LAND,mage.cards.basiclands.Forest.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",269,Rarity.LAND,mage.cards.basiclands.Forest.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",124,Rarity.COMMON,mage.cards.f.FrenziedRage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",94,Rarity.COMMON,mage.cards.f.FungalInfection.class));
  cards.add(new SetCardInfo(""String_Node_Str"",160,Rarity.UNCOMMON,mage.cards.f.FungalPlots.class));
  cards.add(new SetCardInfo(""String_Node_Str"",161,Rarity.UNCOMMON,mage.cards.g.GaeasBlessing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",162,Rarity.COMMON,mage.cards.g.GaeasProtector.class));
  cards.add(new SetCardInfo(""String_Node_Str"",194,Rarity.UNCOMMON,mage.cards.g.GarnaTheBloodflame.class));
  cards.add(new SetCardInfo(""String_Node_Str"",125,Rarity.COMMON,mage.cards.g.GhituChronicler.class));
  cards.add(new SetCardInfo(""String_Node_Str"",126,Rarity.COMMON,mage.cards.g.GhituJourneymage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",127,Rarity.COMMON,mage.cards.g.GhituLavarunner.class));
  cards.add(new SetCardInfo(""String_Node_Str"",19,Rarity.COMMON,mage.cards.g.GideonsReproach.class));
  cards.add(new SetCardInfo(""String_Node_Str"",163,Rarity.COMMON,mage.cards.g.GiftofGrowth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",215,Rarity.RARE,mage.cards.g.GildedLotus.class));
  cards.add(new SetCardInfo(""String_Node_Str"",128,Rarity.UNCOMMON,mage.cards.g.GoblinBarrage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",129,Rarity.RARE,mage.cards.g.GoblinChainwhirler.class));
  cards.add(new SetCardInfo(""String_Node_Str"",130,Rarity.UNCOMMON,mage.cards.g.GoblinWarchief.class));
  cards.add(new SetCardInfo(""String_Node_Str"",195,Rarity.RARE,mage.cards.g.GrandWarlordRadha.class));
  cards.add(new SetCardInfo(""String_Node_Str"",164,Rarity.COMMON,mage.cards.g.GrowFromTheAshes.class));
  cards.add(new SetCardInfo(""String_Node_Str"",165,Rarity.UNCOMMON,mage.cards.g.GrunnTheLonelyKing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",216,Rarity.COMMON,mage.cards.g.GuardiansOfKoilos.class));
  cards.add(new SetCardInfo(""String_Node_Str"",196,Rarity.UNCOMMON,mage.cards.h.HallarTheFirefletcher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",131,Rarity.RARE,mage.cards.h.HaphazardBombardment.class));
  cards.add(new SetCardInfo(""String_Node_Str"",20,Rarity.COMMON,mage.cards.h.HealingGrace.class));
  cards.add(new SetCardInfo(""String_Node_Str"",217,Rarity.RARE,mage.cards.h.HelmOfTheHost.class));
  cards.add(new SetCardInfo(""String_Node_Str"",240,Rarity.RARE,mage.cards.h.HinterlandHarbor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",21,Rarity.MYTHIC,mage.cards.h.HistoryOfBenalia.class));
  cards.add(new SetCardInfo(""String_Node_Str"",53,Rarity.UNCOMMON,mage.cards.h.HomaridExplorer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",218,Rarity.UNCOMMON,mage.cards.h.HowlingGolem.class));
  cards.add(new SetCardInfo(""String_Node_Str"",219,Rarity.UNCOMMON,mage.cards.i.IcyManipulator.class));
  cards.add(new SetCardInfo(""String_Node_Str"",54,Rarity.UNCOMMON,mage.cards.i.InBolassClutches.class));
  cards.add(new SetCardInfo(""String_Node_Str"",22,Rarity.COMMON,mage.cards.i.InvokeTheDivine.class));
  cards.add(new SetCardInfo(""String_Node_Str"",254,Rarity.LAND,mage.cards.basiclands.Island.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",255,Rarity.LAND,mage.cards.basiclands.Island.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",256,Rarity.LAND,mage.cards.basiclands.Island.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",257,Rarity.LAND,mage.cards.basiclands.Island.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",241,Rarity.RARE,mage.cards.i.IsolatedChapel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",132,Rarity.MYTHIC,mage.cards.j.JayaBallard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",133,Rarity.RARE,mage.cards.j.JayasImmolatingInferno.class));
  cards.add(new SetCardInfo(""String_Node_Str"",197,Rarity.MYTHIC,mage.cards.j.JhoiraWeatherlightCaptain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",220,Rarity.UNCOMMON,mage.cards.j.JhoirasFamiliar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",198,Rarity.RARE,mage.cards.j.JodahArchmageEternal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",95,Rarity.RARE,mage.cards.j.JosuVessLichKnight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",221,Rarity.COMMON,mage.cards.j.JoustingLance.class));
  cards.add(new SetCardInfo(""String_Node_Str"",222,Rarity.UNCOMMON,mage.cards.j.Juggernaut.class));
  cards.add(new SetCardInfo(""String_Node_Str"",166,Rarity.RARE,mage.cards.k.KamahlsDruidicVow.class));
  cards.add(new SetCardInfo(""String_Node_Str"",1,Rarity.MYTHIC,mage.cards.k.KarnScionOfUrza.class));
  cards.add(new SetCardInfo(""String_Node_Str"",55,Rarity.RARE,mage.cards.k.KarnsTemporalSundering.class));
  cards.add(new SetCardInfo(""String_Node_Str"",277,Rarity.UNCOMMON,mage.cards.k.KarplusanHound.class));
  cards.add(new SetCardInfo(""String_Node_Str"",96,Rarity.RARE,mage.cards.k.KazarovSengirPureblood.class));
  cards.add(new SetCardInfo(""String_Node_Str"",134,Rarity.COMMON,mage.cards.k.KeldonOverseer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",135,Rarity.COMMON,mage.cards.k.KeldonRaider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",136,Rarity.COMMON,mage.cards.k.KeldonWarcaller.class));
  cards.add(new SetCardInfo(""String_Node_Str"",23,Rarity.UNCOMMON,mage.cards.k.KnightOfGrace.class));
  cards.add(new SetCardInfo(""String_Node_Str"",97,Rarity.UNCOMMON,mage.cards.k.KnightOfMalice.class));
  cards.add(new SetCardInfo(""String_Node_Str"",24,Rarity.COMMON,mage.cards.k.KnightOfNewBenalia.class));
  cards.add(new SetCardInfo(""String_Node_Str"",167,Rarity.COMMON,mage.cards.k.KrosanDruid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",25,Rarity.UNCOMMON,mage.cards.k.KwendePrideOfFemeref.class));
  cards.add(new SetCardInfo(""String_Node_Str"",98,Rarity.RARE,mage.cards.l.LichsMastery.class));
  cards.add(new SetCardInfo(""String_Node_Str"",99,Rarity.UNCOMMON,mage.cards.l.LingeringPhantom.class));
  cards.add(new SetCardInfo(""String_Node_Str"",168,Rarity.COMMON,mage.cards.l.LlanowarElves.class));
  cards.add(new SetCardInfo(""String_Node_Str"",169,Rarity.COMMON,mage.cards.l.LlanowarEnvoy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",170,Rarity.COMMON,mage.cards.l.LlanowarScout.class));
  cards.add(new SetCardInfo(""String_Node_Str"",26,Rarity.MYTHIC,mage.cards.l.LyraDawnbringer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",171,Rarity.COMMON,mage.cards.m.MammothSpider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",172,Rarity.RARE,mage.cards.m.MarwynTheNurturer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",274,Rarity.COMMON,mage.cards.m.MeanderingRiver.class));
  cards.add(new SetCardInfo(""String_Node_Str"",242,Rarity.UNCOMMON,mage.cards.m.MemorialToFolly.class));
  cards.add(new SetCardInfo(""String_Node_Str"",243,Rarity.UNCOMMON,mage.cards.m.MemorialToGenius.class));
  cards.add(new SetCardInfo(""String_Node_Str"",244,Rarity.UNCOMMON,mage.cards.m.MemorialToGlory.class));
  cards.add(new SetCardInfo(""String_Node_Str"",245,Rarity.UNCOMMON,mage.cards.m.MemorialToUnity.class));
  cards.add(new SetCardInfo(""String_Node_Str"",246,Rarity.UNCOMMON,mage.cards.m.MemorialToWar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",56,Rarity.UNCOMMON,mage.cards.m.MerfolkTrickster.class));
  cards.add(new SetCardInfo(""String_Node_Str"",27,Rarity.COMMON,mage.cards.m.MesaUnicorn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",223,Rarity.RARE,mage.cards.m.MishrasSelfReplicator.class));
  cards.add(new SetCardInfo(""String_Node_Str"",262,Rarity.LAND,mage.cards.basiclands.Mountain.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",263,Rarity.LAND,mage.cards.basiclands.Mountain.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",264,Rarity.LAND,mage.cards.basiclands.Mountain.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",265,Rarity.LAND,mage.cards.basiclands.Mountain.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",199,Rarity.MYTHIC,mage.cards.m.MuldrothaTheGravetide.class));
  cards.add(new SetCardInfo(""String_Node_Str"",174,Rarity.MYTHIC,mage.cards.m.MultaniYavimayasAvatar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",224,Rarity.MYTHIC,mage.cards.m.MoxAmber.class));
  cards.add(new SetCardInfo(""String_Node_Str"",58,Rarity.RARE,mage.cards.n.NabanDeanOfIteration.class));
  cards.add(new SetCardInfo(""String_Node_Str"",59,Rarity.MYTHIC,mage.cards.n.NaruMehaMasterWizard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",175,Rarity.UNCOMMON,mage.cards.n.NaturesSpiral.class));
  cards.add(new SetCardInfo(""String_Node_Str"",225,Rarity.COMMON,mage.cards.n.NavigatorsCompass.class));
  cards.add(new SetCardInfo(""String_Node_Str"",272,Rarity.RARE,mage.cards.n.NiambiFaithfulHealer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",200,Rarity.RARE,mage.cards.o.OathOfTeferi.class));
  cards.add(new SetCardInfo(""String_Node_Str"",28,Rarity.UNCOMMON,mage.cards.o.OnSerrasWings.class));
  cards.add(new SetCardInfo(""String_Node_Str"",60,Rarity.COMMON,mage.cards.o.Opt.class));
  cards.add(new SetCardInfo(""String_Node_Str"",137,Rarity.COMMON,mage.cards.o.OrcishVandal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",226,Rarity.COMMON,mage.cards.p.PardicWanderer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",29,Rarity.COMMON,mage.cards.p.PegasusCourser.class));
  cards.add(new SetCardInfo(""String_Node_Str"",100,Rarity.MYTHIC,mage.cards.p.PhyrexianScriptures.class));
  cards.add(new SetCardInfo(""String_Node_Str"",176,Rarity.COMMON,mage.cards.p.PierceTheSky.class));
  cards.add(new SetCardInfo(""String_Node_Str"",250,Rarity.LAND,mage.cards.basiclands.Plains.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",251,Rarity.LAND,mage.cards.basiclands.Plains.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",252,Rarity.LAND,mage.cards.basiclands.Plains.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",253,Rarity.LAND,mage.cards.basiclands.Plains.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",227,Rarity.COMMON,mage.cards.p.PowerstoneShard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",61,Rarity.RARE,mage.cards.p.PrecognitionField.class));
  cards.add(new SetCardInfo(""String_Node_Str"",201,Rarity.RARE,mage.cards.p.PrimevalsGloriousRebirth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",177,Rarity.COMMON,mage.cards.p.PrimordialWurm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",278,Rarity.COMMON,mage.cards.p.PyromanticPilgrim.class));
  cards.add(new SetCardInfo(""String_Node_Str"",138,Rarity.COMMON,mage.cards.r.RadiatingLightning.class));
  cards.add(new SetCardInfo(""String_Node_Str"",202,Rarity.UNCOMMON,mage.cards.r.RaffCapashenShipsMage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",139,Rarity.COMMON,mage.cards.r.RampagingCyclops.class));
  cards.add(new SetCardInfo(""String_Node_Str"",101,Rarity.COMMON,mage.cards.r.RatColony.class));
  cards.add(new SetCardInfo(""String_Node_Str"",62,Rarity.COMMON,mage.cards.r.RelicRunner.class));
  cards.add(new SetCardInfo(""String_Node_Str"",63,Rarity.COMMON,mage.cards.r.Rescue.class));
  cards.add(new SetCardInfo(""String_Node_Str"",102,Rarity.RARE,mage.cards.r.RiteOfBelzenlok.class));
  cards.add(new SetCardInfo(""String_Node_Str"",203,Rarity.UNCOMMON,mage.cards.r.RonaDiscipleOfGix.class));
  cards.add(new SetCardInfo(""String_Node_Str"",140,Rarity.COMMON,mage.cards.r.RunAmok.class));
  cards.add(new SetCardInfo(""String_Node_Str"",64,Rarity.UNCOMMON,mage.cards.s.SageOfLatNam.class));
  cards.add(new SetCardInfo(""String_Node_Str"",30,Rarity.UNCOMMON,mage.cards.s.SanctumSpirit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",178,Rarity.COMMON,mage.cards.s.SaprolingMigration.class));
  cards.add(new SetCardInfo(""String_Node_Str"",31,Rarity.UNCOMMON,mage.cards.s.SealAway.class));
  cards.add(new SetCardInfo(""String_Node_Str"",141,Rarity.COMMON,mage.cards.s.SeismicShift.class));
  cards.add(new SetCardInfo(""String_Node_Str"",65,Rarity.UNCOMMON,mage.cards.s.SentinelOfThePearlTrident.class));
  cards.add(new SetCardInfo(""String_Node_Str"",32,Rarity.COMMON,mage.cards.s.SergeantAtArms.class));
  cards.add(new SetCardInfo(""String_Node_Str"",33,Rarity.UNCOMMON,mage.cards.s.SerraAngel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",34,Rarity.COMMON,mage.cards.s.SerraDisciple.class));
  cards.add(new SetCardInfo(""String_Node_Str"",103,Rarity.UNCOMMON,mage.cards.s.SettleTheScore.class));
  cards.add(new SetCardInfo(""String_Node_Str"",35,Rarity.RARE,mage.cards.s.ShalaiVoiceOfPlenty.class));
  cards.add(new SetCardInfo(""String_Node_Str"",204,Rarity.UNCOMMON,mage.cards.s.ShannaSisaysLegacy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",228,Rarity.UNCOMMON,mage.cards.s.ShieldOfTheRealm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",142,Rarity.COMMON,mage.cards.s.ShivanFire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",229,Rarity.COMMON,mage.cards.s.ShortSword.class));
  cards.add(new SetCardInfo(""String_Node_Str"",143,Rarity.RARE,mage.cards.s.SiegeGangCommander.class));
  cards.add(new SetCardInfo(""String_Node_Str"",144,Rarity.COMMON,mage.cards.s.SkirkProspector.class));
  cards.add(new SetCardInfo(""String_Node_Str"",230,Rarity.COMMON,mage.cards.s.SkitteringSurveyor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",145,Rarity.UNCOMMON,mage.cards.s.Skizzik.class));
  cards.add(new SetCardInfo(""String_Node_Str"",205,Rarity.UNCOMMON,mage.cards.s.SlimefootTheStowaway.class));
  cards.add(new SetCardInfo(""String_Node_Str"",66,Rarity.UNCOMMON,mage.cards.s.SlinnVodaTheRisingDeep.class));
  cards.add(new SetCardInfo(""String_Node_Str"",179,Rarity.UNCOMMON,mage.cards.s.SongOfFreyalise.class));
  cards.add(new SetCardInfo(""String_Node_Str"",231,Rarity.UNCOMMON,mage.cards.s.SorcerersWand.class));
  cards.add(new SetCardInfo(""String_Node_Str"",104,Rarity.COMMON,mage.cards.s.SoulSalvage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",232,Rarity.COMMON,mage.cards.s.SparringConstruct.class));
  cards.add(new SetCardInfo(""String_Node_Str"",180,Rarity.UNCOMMON,mage.cards.s.SporeSwarm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",181,Rarity.UNCOMMON,mage.cards.s.SporecrownThallid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",146,Rarity.RARE,mage.cards.s.SqueeTheImmortal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",182,Rarity.RARE,mage.cards.s.SteelLeafChampion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",105,Rarity.COMMON,mage.cards.s.StrongholdConfessor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",247,Rarity.RARE,mage.cards.s.SulfurFalls.class));
  cards.add(new SetCardInfo(""String_Node_Str"",258,Rarity.LAND,mage.cards.basiclands.Swamp.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",259,Rarity.LAND,mage.cards.basiclands.Swamp.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",260,Rarity.LAND,mage.cards.basiclands.Swamp.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",261,Rarity.LAND,mage.cards.basiclands.Swamp.class,NON_FULL_USE_VARIOUS));
  cards.add(new SetCardInfo(""String_Node_Str"",183,Rarity.RARE,mage.cards.s.SylvanAwakening.class));
  cards.add(new SetCardInfo(""String_Node_Str"",67,Rarity.UNCOMMON,mage.cards.s.Syncopate.class));
  cards.add(new SetCardInfo(""String_Node_Str"",206,Rarity.UNCOMMON,mage.cards.t.TatyovaBenthicDruid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",273,Rarity.UNCOMMON,mage.cards.t.TeferisSentinel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",207,Rarity.MYTHIC,mage.cards.t.TeferiHeroOfDominaria.class));
  cards.add(new SetCardInfo(""String_Node_Str"",270,Rarity.MYTHIC,mage.cards.t.TeferiTimebender.class));
  cards.add(new SetCardInfo(""String_Node_Str"",68,Rarity.RARE,mage.cards.t.TempestDjinn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",271,Rarity.UNCOMMON,mage.cards.t.TemporalMachinations.class));
  cards.add(new SetCardInfo(""String_Node_Str"",184,Rarity.RARE,mage.cards.t.TerritorialAllosaurus.class));
  cards.add(new SetCardInfo(""String_Node_Str"",36,Rarity.RARE,mage.cards.t.TesharAncestorsApostle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",69,Rarity.UNCOMMON,mage.cards.t.TetsukoUmezawaFugitive.class));
  cards.add(new SetCardInfo(""String_Node_Str"",106,Rarity.COMMON,mage.cards.t.ThallidOmnivore.class));
  cards.add(new SetCardInfo(""String_Node_Str"",107,Rarity.UNCOMMON,mage.cards.t.ThallidSoothsayer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",42,Rarity.RARE,mage.cards.t.TheAntiquitiesWar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",90,Rarity.UNCOMMON,mage.cards.t.TheEldestReborn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",122,Rarity.RARE,mage.cards.t.TheFirstEruption.class));
  cards.add(new SetCardInfo(""String_Node_Str"",123,Rarity.UNCOMMON,mage.cards.t.TheFlameOfKeld.class));
  cards.add(new SetCardInfo(""String_Node_Str"",173,Rarity.RARE,mage.cards.t.TheMendingOfDominaria.class));
  cards.add(new SetCardInfo(""String_Node_Str"",57,Rarity.RARE,mage.cards.t.TheMirariConjecture.class));
  cards.add(new SetCardInfo(""String_Node_Str"",185,Rarity.UNCOMMON,mage.cards.t.ThornElemental.class));
  cards.add(new SetCardInfo(""String_Node_Str"",233,Rarity.RARE,mage.cards.t.ThranTemporalGateway.class));
  cards.add(new SetCardInfo(""String_Node_Str"",208,Rarity.UNCOMMON,mage.cards.t.TianaShipsCaretaker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",279,Rarity.COMMON,mage.cards.t.TimberGorge.class));
  cards.add(new SetCardInfo(""String_Node_Str"",70,Rarity.UNCOMMON,mage.cards.t.TimeOfIce.class));
  cards.add(new SetCardInfo(""String_Node_Str"",71,Rarity.COMMON,mage.cards.t.TolarianScholar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",108,Rarity.RARE,mage.cards.t.TorgaarFamineIncarnate.class));
  cards.add(new SetCardInfo(""String_Node_Str"",37,Rarity.COMMON,mage.cards.t.TragicPoet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",234,Rarity.RARE,mage.cards.t.TraxosScourgeOfKroog.class));
  cards.add(new SetCardInfo(""String_Node_Str"",38,Rarity.UNCOMMON,mage.cards.t.TriumphOfGerrard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",147,Rarity.RARE,mage.cards.t.TwoHeadedGiant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",186,Rarity.UNCOMMON,mage.cards.u.UntamedKavu.class));
  cards.add(new SetCardInfo(""String_Node_Str"",72,Rarity.COMMON,mage.cards.u.Unwind.class));
  cards.add(new SetCardInfo(""String_Node_Str"",109,Rarity.UNCOMMON,mage.cards.u.UrgorosTheEmptyOne.class));
  cards.add(new SetCardInfo(""String_Node_Str"",39,Rarity.RARE,mage.cards.u.UrzasRuinousBlast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",235,Rarity.UNCOMMON,mage.cards.u.UrzasTome.class));
  cards.add(new SetCardInfo(""String_Node_Str"",148,Rarity.UNCOMMON,mage.cards.v.ValdukKeeperOfTheFlame.class));
  cards.add(new SetCardInfo(""String_Node_Str"",187,Rarity.RARE,mage.cards.v.VerdantForce.class));
  cards.add(new SetCardInfo(""String_Node_Str"",149,Rarity.MYTHIC,mage.cards.v.VerixBladewing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",110,Rarity.COMMON,mage.cards.v.ViciousOffering.class));
  cards.add(new SetCardInfo(""String_Node_Str"",73,Rarity.COMMON,mage.cards.v.VodalianArcanist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",236,Rarity.COMMON,mage.cards.v.VoltaicServant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",150,Rarity.UNCOMMON,mage.cards.w.WarcryPhoenix.class));
  cards.add(new SetCardInfo(""String_Node_Str"",151,Rarity.COMMON,mage.cards.w.WarlordsFury.class));
  cards.add(new SetCardInfo(""String_Node_Str"",237,Rarity.MYTHIC,mage.cards.w.Weatherlight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",74,Rarity.UNCOMMON,mage.cards.w.WeightOfMemory.class));
  cards.add(new SetCardInfo(""String_Node_Str"",111,Rarity.UNCOMMON,mage.cards.w.WhisperBloodLiturgist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",188,Rarity.UNCOMMON,mage.cards.w.WildOnslaught.class));
  cards.add(new SetCardInfo(""String_Node_Str"",112,Rarity.COMMON,mage.cards.w.WindgraceAcolyte.class));
  cards.add(new SetCardInfo(""String_Node_Str"",152,Rarity.UNCOMMON,mage.cards.w.WizardsLightning.class));
  cards.add(new SetCardInfo(""String_Node_Str"",75,Rarity.UNCOMMON,mage.cards.w.WizardsRetort.class));
  cards.add(new SetCardInfo(""String_Node_Str"",248,Rarity.RARE,mage.cards.w.WoodlandCemetery.class));
  cards.add(new SetCardInfo(""String_Node_Str"",113,Rarity.UNCOMMON,mage.cards.y.YargleGluttonOfUrborg.class));
  cards.add(new SetCardInfo(""String_Node_Str"",189,Rarity.COMMON,mage.cards.y.YavimayaSapherd.class));
  cards.add(new SetCardInfo(""String_Node_Str"",114,Rarity.RARE,mage.cards.y.YawgmothsVileOffering.class));
  cards.add(new SetCardInfo(""String_Node_Str"",76,Rarity.RARE,mage.cards.z.ZahidDjinnOfTheLamp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",249,Rarity.UNCOMMON,mage.cards.z.ZhalfirinVoid.class));
}",0.9994021692715006
157714,"public ReturnSourceFromGraveyardToHandEffect(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public ReturnSourceFromGraveyardToHandEffect(final ReturnSourceFromGraveyardToHandEffect effect){
  super(effect);
}",0.5286343612334802
157715,"private void addToken(Token token,BigCard bigCard,UUID gameId,Rectangle rectangle){
  if (cardDimension == null) {
    cardDimension=new Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight);
  }
  PermanentToken newToken=new PermanentToken(token,null,token.getOriginalExpansionSetCode(),null);
  PermanentView theToken=new PermanentView(newToken,null,null,null);
  theToken.setInViewerOnly(true);
  final MageCard cardImg=Plugins.instance.getMagePermanent(theToken,bigCard,cardDimension,gameId,true);
  cardImg.setBounds(rectangle);
  jLayeredPane.add(cardImg,JLayeredPane.DEFAULT_LAYER,10);
  cardImg.update(theToken);
  cardImg.setCardBounds(rectangle.x,rectangle.y,cardDimensions.frameWidth,cardDimensions.frameHeight);
}","private void addToken(Token token,BigCard bigCard,UUID gameId,Rectangle rectangle){
  if (cardDimension == null) {
    cardDimension=new Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight);
  }
  PermanentToken newToken=new PermanentToken(token,null,token.getOriginalExpansionSetCode(),null);
  newToken.removeSummoningSickness();
  PermanentView theToken=new PermanentView(newToken,null,null,null);
  theToken.setInViewerOnly(true);
  final MageCard cardImg=Plugins.instance.getMagePermanent(theToken,bigCard,cardDimension,gameId,true);
  cardImg.setBounds(rectangle);
  jLayeredPane.add(cardImg,JLayeredPane.DEFAULT_LAYER,10);
  cardImg.update(theToken);
  cardImg.setCardBounds(rectangle.x,rectangle.y,cardDimensions.frameWidth,cardDimensions.frameHeight);
}",0.975
157716,"public void updateSize(String size){
switch (size) {
case LAYOUT_3x3:
    this.conf=new _3x3Configuration();
  break;
case LAYOUT_4x4:
this.conf=new _4x4Configuration();
break;
default :
return;
}
currentPage=0;
pageLeft.setVisible(false);
setSize(conf.WIDTH,conf.HEIGHT);
setPreferredSize(new Dimension(conf.WIDTH,conf.HEIGHT));
setMinimumSize(new Dimension(conf.WIDTH,conf.HEIGHT));
addSetTabs();
showCards();
}","public void updateSize(String size){
switch (size) {
case LAYOUT_3x3:
    this.conf=new _3x3Configuration();
  break;
case LAYOUT_4x4:
this.conf=new _4x4Configuration();
break;
default :
return;
}
currentPage=0;
pageLeft.setVisible(false);
setSize(conf.WIDTH,conf.HEIGHT);
setPreferredSize(new Dimension(conf.WIDTH,conf.HEIGHT));
setMinimumSize(new Dimension(conf.WIDTH,conf.HEIGHT));
addSetTabs();
}",0.984009840098401
157717,"@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent permanent=game.getPermanent(event.getTargetId());
  if (permanent != null && permanent.isCreature() && StackObject.class.isInstance(game.getObject(event.getSourceId()))) {
    getEffects().get(0).setTargetPointer(new FixedTarget(event.getTargetId()));
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent permanent=game.getPermanent(event.getTargetId());
  if (permanent != null && permanent.isCreature()) {
    getEffects().get(0).setTargetPointer(new FixedTarget(event.getTargetId()));
    return true;
  }
  return false;
}",0.896551724137931
157718,"public void updateSize(String size){
switch (size) {
case LAYOUT_3x3:
    this.conf=new _3x3Configuration();
  break;
case LAYOUT_4x4:
this.conf=new _4x4Configuration();
break;
default :
return;
}
currentPage=0;
pageLeft.setVisible(false);
setSize(conf.WIDTH,conf.HEIGHT);
setPreferredSize(new Dimension(conf.WIDTH,conf.HEIGHT));
setMinimumSize(new Dimension(conf.WIDTH,conf.HEIGHT));
addSetTabs();
showCards();
}","public void updateSize(String size){
switch (size) {
case LAYOUT_3x3:
    this.conf=new _3x3Configuration();
  break;
case LAYOUT_4x4:
this.conf=new _4x4Configuration();
break;
default :
return;
}
currentPage=0;
pageLeft.setVisible(false);
setSize(conf.WIDTH,conf.HEIGHT);
setPreferredSize(new Dimension(conf.WIDTH,conf.HEIGHT));
setMinimumSize(new Dimension(conf.WIDTH,conf.HEIGHT));
addSetTabs();
showCardsOrTokens();
}",0.9904076738609112
157719,"void drawPie(Graphics2D g,Rectangle area,Slice[] slices){
  double total=0.0D;
  for (int i=0; i < slices.length; i++) {
    total+=slices[i].value;
  }
  double curValue=0.0D;
  int startAngle=0;
  int lastAngle=0;
  for (int i=0; i < slices.length; i++) {
    startAngle=lastAngle;
    int arcAngle=(int)(slices[i].value * 360 / total);
    g.setColor(slices[i].color);
    g.fillArc(area.x,area.y,area.width - 20,area.height - 20,startAngle,arcAngle);
    curValue+=slices[i].value;
    lastAngle+=arcAngle;
  }
}","void drawPie(Graphics2D g,Rectangle area,Slice[] slices){
  double total=0.0D;
  for (int i=0; i < slices.length; i++) {
    total+=slices[i].value;
  }
  if (total == 0.0D) {
    return;
  }
  double curValue=0.0D;
  int startAngle=0;
  int lastAngle=0;
  for (int i=0; i < slices.length; i++) {
    startAngle=lastAngle;
    int arcAngle=(int)(slices[i].value * 360 / total);
    g.setColor(slices[i].color);
    g.fillArc(area.x,area.y,area.width - 20,area.height - 20,startAngle,arcAngle);
    curValue+=slices[i].value;
    lastAngle+=arcAngle;
  }
}",0.9635854341736696
157720,"private void onOK(){
  try {
    File temp=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    BufferedWriter bw=new BufferedWriter(new FileWriter(temp));
    bw.write(txtDeckList.getText());
    bw.close();
    tmpPath=temp.getPath();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  dispose();
}","private void onOK(){
  BufferedWriter bw=null;
  try {
    File temp=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    bw=new BufferedWriter(new FileWriter(temp));
    bw.write(txtDeckList.getText());
    tmpPath=temp.getPath();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    StreamUtils.closeQuietly(bw);
  }
  dispose();
}",0.7894736842105263
157721,"private void findPublicServerActionPerformed(java.awt.event.ActionEvent evt){
  BufferedReader in=null;
  try {
    String serverUrl=PreferencesDialog.getCachedValue(KEY_CONNECTION_URL_SERVER_LIST,""String_Node_Str"");
    if (serverUrl.contains(""String_Node_Str"")) {
      serverUrl=serverUrl.replace(""String_Node_Str"",""String_Node_Str"");
      PreferencesDialog.saveValue(KEY_CONNECTION_URL_SERVER_LIST,serverUrl);
    }
    URL serverListURL=new URL(serverUrl);
    Connection.ProxyType configProxyType=Connection.ProxyType.valueByText(PreferencesDialog.getCachedValue(PreferencesDialog.KEY_PROXY_TYPE,""String_Node_Str""));
    Proxy p=null;
    Proxy.Type type=Proxy.Type.DIRECT;
switch (configProxyType) {
case HTTP:
      type=Proxy.Type.HTTP;
    break;
case SOCKS:
  type=Proxy.Type.SOCKS;
break;
case NONE:
default :
p=Proxy.NO_PROXY;
break;
}
if (p == null || !p.equals(Proxy.NO_PROXY)) {
try {
String address=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_PROXY_ADDRESS,""String_Node_Str"");
Integer port=Integer.parseInt(PreferencesDialog.getCachedValue(PreferencesDialog.KEY_PROXY_PORT,""String_Node_Str""));
p=new Proxy(type,new InetSocketAddress(address,port));
}
 catch (Exception ex) {
throw new RuntimeException(""String_Node_Str"" + ex);
}
}
if (p == null) {
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
return;
}
boolean URLNotFound=false;
try {
in=new BufferedReader(new InputStreamReader(serverListURL.openConnection(p).getInputStream()));
}
 catch (SocketTimeoutException|FileNotFoundException|UnknownHostException ex) {
logger.warn(""String_Node_Str"" + serverListURL.toString());
File f=new File(""String_Node_Str"");
if (f.exists() && !f.isDirectory()) {
logger.info(""String_Node_Str"");
URLNotFound=true;
in=new BufferedReader(new FileReader(""String_Node_Str""));
}
}
List<String> servers=new ArrayList<>();
if (in != null) {
Writer output=null;
if (!URLNotFound) {
File file=new File(""String_Node_Str"");
if (file.exists() && !file.isDirectory()) {
file.delete();
}
output=new BufferedWriter(new FileWriter(file));
}
String inputLine;
while ((inputLine=in.readLine()) != null) {
logger.debug(""String_Node_Str"" + inputLine);
servers.add(inputLine);
if (output != null) {
output.append(inputLine).append('\n');
}
}
if (output != null) {
output.close();
}
in.close();
}
if (servers.isEmpty()) {
JOptionPane.showMessageDialog(null,""String_Node_Str"");
return;
}
String selectedServer=(String)JOptionPane.showInputDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE,null,servers.toArray(),servers.get(0));
if (selectedServer != null) {
String[] params=selectedServer.split(""String_Node_Str"");
if (params.length == 3) {
String serverAddress=params[1];
this.txtServer.setText(serverAddress);
this.txtPort.setText(params[2]);
this.txtUserName.setText(MagePreferences.getUserName(serverAddress));
this.txtPassword.setText(MagePreferences.getPassword(serverAddress));
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"");
}
}
}
 catch (Exception ex) {
logger.error(ex,ex);
}
 finally {
if (in != null) {
try {
in.close();
}
 catch (Exception e) {
}
}
}
}","private void findPublicServerActionPerformed(java.awt.event.ActionEvent evt){
  BufferedReader in=null;
  Writer output=null;
  try {
    String serverUrl=PreferencesDialog.getCachedValue(KEY_CONNECTION_URL_SERVER_LIST,""String_Node_Str"");
    if (serverUrl.contains(""String_Node_Str"")) {
      serverUrl=serverUrl.replace(""String_Node_Str"",""String_Node_Str"");
      PreferencesDialog.saveValue(KEY_CONNECTION_URL_SERVER_LIST,serverUrl);
    }
    URL serverListURL=new URL(serverUrl);
    Connection.ProxyType configProxyType=Connection.ProxyType.valueByText(PreferencesDialog.getCachedValue(PreferencesDialog.KEY_PROXY_TYPE,""String_Node_Str""));
    Proxy p=null;
    Proxy.Type type=Proxy.Type.DIRECT;
switch (configProxyType) {
case HTTP:
      type=Proxy.Type.HTTP;
    break;
case SOCKS:
  type=Proxy.Type.SOCKS;
break;
case NONE:
default :
p=Proxy.NO_PROXY;
break;
}
if (p == null || !p.equals(Proxy.NO_PROXY)) {
try {
String address=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_PROXY_ADDRESS,""String_Node_Str"");
Integer port=Integer.parseInt(PreferencesDialog.getCachedValue(PreferencesDialog.KEY_PROXY_PORT,""String_Node_Str""));
p=new Proxy(type,new InetSocketAddress(address,port));
}
 catch (Exception ex) {
throw new RuntimeException(""String_Node_Str"" + ex);
}
}
if (p == null) {
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
return;
}
boolean URLNotFound=false;
try {
in=new BufferedReader(new InputStreamReader(serverListURL.openConnection(p).getInputStream()));
}
 catch (SocketTimeoutException|FileNotFoundException|UnknownHostException ex) {
logger.warn(""String_Node_Str"" + serverListURL.toString());
File f=new File(""String_Node_Str"");
if (f.exists() && !f.isDirectory()) {
logger.info(""String_Node_Str"");
URLNotFound=true;
in=new BufferedReader(new FileReader(""String_Node_Str""));
}
}
List<String> servers=new ArrayList<>();
if (in != null) {
if (!URLNotFound) {
File file=new File(""String_Node_Str"");
if (file.exists() && !file.isDirectory()) {
file.delete();
}
output=new BufferedWriter(new FileWriter(file));
}
String inputLine;
while ((inputLine=in.readLine()) != null) {
logger.debug(""String_Node_Str"" + inputLine);
servers.add(inputLine);
if (output != null) {
output.append(inputLine).append('\n');
}
}
}
if (servers.isEmpty()) {
JOptionPane.showMessageDialog(null,""String_Node_Str"");
return;
}
String selectedServer=(String)JOptionPane.showInputDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE,null,servers.toArray(),servers.get(0));
if (selectedServer != null) {
String[] params=selectedServer.split(""String_Node_Str"");
if (params.length == 3) {
String serverAddress=params[1];
this.txtServer.setText(serverAddress);
this.txtPort.setText(params[2]);
this.txtUserName.setText(MagePreferences.getUserName(serverAddress));
this.txtPassword.setText(MagePreferences.getPassword(serverAddress));
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"");
}
}
}
 catch (Exception ex) {
logger.error(ex,ex);
}
 finally {
StreamUtils.closeQuietly(in);
StreamUtils.closeQuietly(output);
}
}",0.9653409998402812
157722,"/** 
 * Get the panel where all arrows are being drawn.
 * @return
 */
public JPanel getArrowsManagerPanel(){
  if (arrowsManagerPanel == null) {
synchronized (ArrowBuilder.class) {
      if (arrowsManagerPanel == null) {
        arrowsManagerPanel=new JPanel();
        arrowsManagerPanel.setVisible(true);
        arrowsManagerPanel.setOpaque(false);
        arrowsManagerPanel.setLayout(null);
      }
    }
  }
  return arrowsManagerPanel;
}","/** 
 * Get the panel where all arrows are being drawn.
 * @return
 */
public synchronized JPanel getArrowsManagerPanel(){
  if (arrowsManagerPanel == null) {
    arrowsManagerPanel=new JPanel();
    arrowsManagerPanel.setVisible(true);
    arrowsManagerPanel.setOpaque(false);
    arrowsManagerPanel.setLayout(null);
  }
  return arrowsManagerPanel;
}",0.6348808030112923
157723,"/** 
 * Save object on disk.
 * @param object Object to save.
 * @param name Part of name that will be used to form original filename to save object to.
 */
public static void saveObject(Object object,String name){
  if (saveIncomeData) {
    ObjectOutputStream oos=null;
    try {
      File dir=new File(""String_Node_Str"");
      if (!dir.exists() || dir.exists() && dir.isFile()) {
        boolean bCreated=dir.mkdir();
        if (!bCreated) {
          return;
        }
      }
      String time=now(DATE_PATTERN);
      File f=new File(""String_Node_Str"" + File.separator + name+ '_'+ time+ ""String_Node_Str"");
      if (!f.exists()) {
        f.createNewFile();
      }
      oos=new ObjectOutputStream(new FileOutputStream(f));
      oos.writeObject(object);
      oos.close();
    }
 catch (    FileNotFoundException e) {
      return;
    }
catch (    IOException io) {
      return;
    }
  }
}","/** 
 * Save object on disk.
 * @param object Object to save.
 * @param name Part of name that will be used to form original filename to save object to.
 */
public static void saveObject(Object object,String name){
  if (saveIncomeData) {
    ObjectOutputStream oos=null;
    try {
      File dir=new File(""String_Node_Str"");
      if (!dir.exists() || dir.exists() && dir.isFile()) {
        boolean bCreated=dir.mkdir();
        if (!bCreated) {
          return;
        }
      }
      String time=now(DATE_PATTERN);
      File f=new File(""String_Node_Str"" + File.separator + name+ '_'+ time+ ""String_Node_Str"");
      if (!f.exists()) {
        f.createNewFile();
      }
      oos=new ObjectOutputStream(new FileOutputStream(f));
      oos.writeObject(object);
      oos.close();
    }
 catch (    Exception e) {
    }
 finally {
      StreamUtils.closeQuietly(oos);
    }
  }
}",0.9468977082168808
157724,"public static ImageIcon getImageIcon(String path){
  try {
    InputStream stream;
    stream=UI.class.getResourceAsStream(path);
    if (stream == null && new File(path).exists()) {
      stream=new FileInputStream(path);
    }
    if (stream == null) {
      throw new RuntimeException(""String_Node_Str"" + path);
    }
    byte[] data=new byte[stream.available()];
    stream.read(data);
    return new ImageIcon(data);
  }
 catch (  IOException ex) {
    throw new RuntimeException(""String_Node_Str"" + path);
  }
}","public static ImageIcon getImageIcon(String path){
  InputStream stream=null;
  try {
    stream=UI.class.getResourceAsStream(path);
    if (stream == null && new File(path).exists()) {
      stream=new FileInputStream(path);
    }
    if (stream == null) {
      throw new RuntimeException(""String_Node_Str"" + path);
    }
    byte[] data=new byte[stream.available()];
    stream.read(data);
    return new ImageIcon(data);
  }
 catch (  IOException ex) {
    throw new RuntimeException(""String_Node_Str"" + path);
  }
 finally {
    StreamUtils.closeQuietly(stream);
  }
}",0.9045871559633027
157725,"private void parseData(String sourcePath){
  String sourceData=""String_Node_Str"";
  try {
    sourceData=new String(Files.readAllBytes(Paths.get(sourcePath)));
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ e.getMessage());
  }
  ArrayList<String> allMageSymbols=new ArrayList<>();
  for (int i=0; i < SYMBOLS_LIST.length; i++) {
    allMageSymbols.add(SYMBOLS_LIST[i]);
  }
  for (Integer i=SYMBOLS_NUMBER_START; i <= SYMBOLS_NUMBER_END; i++) {
    allMageSymbols.add(String.valueOf(SYMBOLS_NUMBER_START + i));
  }
  Map<String,String> foundedData=new HashMap<>();
  sourceData=sourceData.replaceAll(""String_Node_Str"",""String_Node_Str"");
  Pattern regex=Pattern.compile(REGEXP_MANA_PATTERN);
  Matcher regexMatcher=regex.matcher(sourceData);
  while (regexMatcher.find()) {
    String symbolCode=regexMatcher.group(1).trim();
    String symbolData=regexMatcher.group(2).trim().replace(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    foundedData.put(symbolCode,symbolData);
  }
  File dir=getSymbolFileNameAsSVG(""String_Node_Str"").getParentFile();
  if (!dir.exists()) {
    dir.mkdirs();
  }
  for (  String needCode : allMageSymbols) {
    String searchCode=needCode.replace(""String_Node_Str"",""String_Node_Str"");
    if (!foundedData.containsKey(searchCode)) {
      LOGGER.warn(""String_Node_Str"" + searchCode);
      continue;
    }
    File destFile=getSymbolFileNameAsSVG(searchCode);
    if (destFile.exists() && (destFile.length() > 0)) {
      continue;
    }
    try {
      String data64=foundedData.get(searchCode);
      Base64.Decoder dec=Base64.getDecoder();
      byte[] fileData=dec.decode(data64);
      FileOutputStream stream=new FileOutputStream(destFile);
      stream.write(fileData);
      stream.close();
      LOGGER.info(""String_Node_Str"" + needCode);
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"" + destFile.getPath() + ""String_Node_Str""+ e.getMessage());
    }
  }
}","private void parseData(String sourcePath){
  String sourceData=""String_Node_Str"";
  try {
    sourceData=new String(Files.readAllBytes(Paths.get(sourcePath)));
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ e.getMessage());
  }
  ArrayList<String> allMageSymbols=new ArrayList<>();
  for (int i=0; i < SYMBOLS_LIST.length; i++) {
    allMageSymbols.add(SYMBOLS_LIST[i]);
  }
  for (Integer i=SYMBOLS_NUMBER_START; i <= SYMBOLS_NUMBER_END; i++) {
    allMageSymbols.add(String.valueOf(SYMBOLS_NUMBER_START + i));
  }
  Map<String,String> foundedData=new HashMap<>();
  sourceData=sourceData.replaceAll(""String_Node_Str"",""String_Node_Str"");
  Pattern regex=Pattern.compile(REGEXP_MANA_PATTERN);
  Matcher regexMatcher=regex.matcher(sourceData);
  while (regexMatcher.find()) {
    String symbolCode=regexMatcher.group(1).trim();
    String symbolData=regexMatcher.group(2).trim().replace(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    foundedData.put(symbolCode,symbolData);
  }
  File dir=getSymbolFileNameAsSVG(""String_Node_Str"").getParentFile();
  if (!dir.exists()) {
    dir.mkdirs();
  }
  for (  String needCode : allMageSymbols) {
    String searchCode=needCode.replace(""String_Node_Str"",""String_Node_Str"");
    if (!foundedData.containsKey(searchCode)) {
      LOGGER.warn(""String_Node_Str"" + searchCode);
      continue;
    }
    File destFile=getSymbolFileNameAsSVG(searchCode);
    if (destFile.exists() && (destFile.length() > 0)) {
      continue;
    }
    FileOutputStream stream=null;
    try {
      String data64=foundedData.get(searchCode);
      Base64.Decoder dec=Base64.getDecoder();
      byte[] fileData=dec.decode(data64);
      stream=new FileOutputStream(destFile);
      stream.write(fileData);
      LOGGER.info(""String_Node_Str"" + needCode);
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"" + destFile.getPath() + ""String_Node_Str""+ e.getMessage());
    }
 finally {
      StreamUtils.closeQuietly(stream);
    }
  }
}",0.9504659146640512
157726,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Set<Card> cardsToExile=controller.getGraveyard().getCards(new FilterInstantOrSorceryCard(),source.getId(),source.getControllerId(),game);
    if (!cardsToExile.isEmpty()) {
      if (controller.moveCards(cardsToExile,Zone.EXILED,source,game)) {
        Cards copiedCards=new CardsImpl();
        for (        Card card : cardsToExile) {
          copiedCards.add(game.copyCard(card,source,source.getControllerId()));
        }
        boolean continueCasting=true;
        while (continueCasting) {
          TargetCard targetCard=new TargetCard(0,1,Zone.EXILED,new FilterCard(""String_Node_Str""));
          targetCard.setNotTarget(true);
          if (controller.choose(outcome,copiedCards,targetCard,game)) {
            Card selectedCard=game.getCard(targetCard.getFirstTarget());
            if (selectedCard != null && selectedCard.getSpellAbility().canChooseTarget(game)) {
              if (controller.cast(selectedCard.getSpellAbility(),game,true)) {
                copiedCards.remove(selectedCard);
              }
            }
          }
          continueCasting=!copiedCards.isEmpty() && controller.chooseUse(outcome,""String_Node_Str"",source,game);
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Set<Card> cardsToExile=controller.getGraveyard().getCards(new FilterInstantOrSorceryCard(),source.getId(),source.getControllerId(),game);
    if (!cardsToExile.isEmpty()) {
      if (controller.moveCards(cardsToExile,Zone.EXILED,source,game)) {
        Cards copiedCards=new CardsImpl();
        for (        Card card : cardsToExile) {
          copiedCards.add(game.copyCard(card,source,source.getControllerId()));
        }
        boolean continueCasting=true;
        while (continueCasting && controller.isInGame()) {
          TargetCard targetCard=new TargetCard(0,1,Zone.EXILED,new FilterCard(""String_Node_Str""));
          targetCard.setNotTarget(true);
          if (controller.choose(outcome,copiedCards,targetCard,game)) {
            Card selectedCard=game.getCard(targetCard.getFirstTarget());
            if (selectedCard != null && selectedCard.getSpellAbility().canChooseTarget(game)) {
              if (controller.cast(selectedCard.getSpellAbility(),game,true)) {
                copiedCards.remove(selectedCard);
              }
            }
          }
          continueCasting=!copiedCards.isEmpty() && controller.chooseUse(outcome,""String_Node_Str"",source,game);
        }
      }
    }
    return true;
  }
  return false;
}",0.9910104279036318
157727,"public MageObjectImpl(final MageObjectImpl object){
  objectId=object.objectId;
  name=object.name;
  manaCost=object.manaCost.copy();
  text=object.text;
  color=object.color.copy();
  frameColor=object.frameColor.copy();
  frameStyle=object.frameStyle;
  power=object.power.copy();
  toughness=object.toughness.copy();
  abilities=object.abilities.copy();
  this.cardType.addAll(object.cardType);
  this.subtype.addAll(object.subtype);
  supertype.addAll(object.supertype);
  this.copy=object.copy;
  textParts=new ArrayList<>();
  textParts.addAll(object.textParts);
}","public MageObjectImpl(final MageObjectImpl object){
  objectId=object.objectId;
  name=object.name;
  manaCost=object.manaCost.copy();
  text=object.text;
  color=object.color.copy();
  frameColor=object.frameColor.copy();
  frameStyle=object.frameStyle;
  power=object.power.copy();
  toughness=object.toughness.copy();
  abilities=object.abilities.copy();
  this.cardType.addAll(object.cardType);
  this.subtype.addAll(object.subtype);
  isAllCreatureTypes=object.isAllCreatureTypes;
  supertype.addAll(object.supertype);
  this.copy=object.copy;
  textParts=new ArrayList<>();
  textParts.addAll(object.textParts);
}",0.9596638655462184
157728,"protected void copyFromCard(final Card card,final Game game){
  this.name=card.getName();
  this.abilities.clear();
  if (this.faceDown) {
    for (    Ability ability : card.getAbilities()) {
      if (ability.getWorksFaceDown()) {
        this.abilities.add(ability.copy());
      }
    }
  }
 else {
    this.abilities=card.getAbilities().copy();
  }
  this.abilities.setControllerId(this.controllerId);
  this.abilities.setSourceId(objectId);
  this.cardType.clear();
  this.cardType.addAll(card.getCardType());
  this.color=card.getColor(null).copy();
  this.frameColor=card.getFrameColor(game).copy();
  this.frameStyle=card.getFrameStyle();
  this.manaCost=card.getManaCost().copy();
  if (card instanceof PermanentCard) {
    this.maxLevelCounters=((PermanentCard)card).maxLevelCounters;
  }
  this.subtype.clear();
  this.subtype.addAll(card.getSubtype(game));
  this.supertype.clear();
  supertype.addAll(card.getSuperType());
  this.expansionSetCode=card.getExpansionSetCode();
  this.rarity=card.getRarity();
  this.cardNumber=card.getCardNumber();
  this.usesVariousArt=card.getUsesVariousArt();
  transformable=card.isTransformable();
  if (transformable) {
    this.nightCard=card.isNightCard();
    if (!this.nightCard) {
      this.secondSideCard=card.getSecondCardFace();
      this.secondSideCardClazz=this.secondSideCard.getClass();
    }
  }
  this.flipCard=card.isFlipCard();
  this.flipCardName=card.getFlipCardName();
}","protected void copyFromCard(final Card card,final Game game){
  this.name=card.getName();
  this.abilities.clear();
  if (this.faceDown) {
    for (    Ability ability : card.getAbilities()) {
      if (ability.getWorksFaceDown()) {
        this.abilities.add(ability.copy());
      }
    }
  }
 else {
    this.abilities=card.getAbilities().copy();
  }
  this.abilities.setControllerId(this.controllerId);
  this.abilities.setSourceId(objectId);
  this.cardType.clear();
  this.cardType.addAll(card.getCardType());
  this.color=card.getColor(null).copy();
  this.frameColor=card.getFrameColor(game).copy();
  this.frameStyle=card.getFrameStyle();
  this.manaCost=card.getManaCost().copy();
  if (card instanceof PermanentCard) {
    this.maxLevelCounters=((PermanentCard)card).maxLevelCounters;
  }
  this.subtype.clear();
  this.subtype.addAll(card.getSubtype(game));
  this.isAllCreatureTypes=card.isAllCreatureTypes();
  this.supertype.clear();
  supertype.addAll(card.getSuperType());
  this.expansionSetCode=card.getExpansionSetCode();
  this.rarity=card.getRarity();
  this.cardNumber=card.getCardNumber();
  this.usesVariousArt=card.getUsesVariousArt();
  transformable=card.isTransformable();
  if (transformable) {
    this.nightCard=card.isNightCard();
    if (!this.nightCard) {
      this.secondSideCard=card.getSecondCardFace();
      this.secondSideCardClazz=this.secondSideCard.getClass();
    }
  }
  this.flipCard=card.isFlipCard();
  this.flipCardName=card.getFlipCardName();
}",0.9819666553249404
157729,"private void copyFromToken(Token token,Game game,boolean reset){
  this.name=token.getName();
  this.abilities.clear();
  if (reset) {
    this.abilities.addAll(token.getAbilities());
  }
 else {
    for (    Ability ability : token.getAbilities()) {
      this.addAbility(ability,game);
    }
  }
  this.abilities.setControllerId(this.controllerId);
  this.manaCost.clear();
  for (  ManaCost cost : token.getManaCost()) {
    this.getManaCost().add(cost.copy());
  }
  this.cardType=token.getCardType();
  this.color=token.getColor(game).copy();
  this.frameColor=token.getFrameColor(game);
  this.frameStyle=token.getFrameStyle();
  this.supertype.clear();
  this.supertype.addAll(token.getSuperType());
  this.subtype.clear();
  this.subtype.addAll(token.getSubtype(game));
  this.tokenDescriptor=token.getTokenDescriptor();
}","private void copyFromToken(Token token,Game game,boolean reset){
  this.name=token.getName();
  this.abilities.clear();
  if (reset) {
    this.abilities.addAll(token.getAbilities());
  }
 else {
    for (    Ability ability : token.getAbilities()) {
      this.addAbility(ability,game);
    }
  }
  this.abilities.setControllerId(this.controllerId);
  this.manaCost.clear();
  for (  ManaCost cost : token.getManaCost()) {
    this.getManaCost().add(cost.copy());
  }
  this.cardType=token.getCardType();
  this.color=token.getColor(game).copy();
  this.frameColor=token.getFrameColor(game);
  this.frameStyle=token.getFrameStyle();
  this.supertype.clear();
  this.supertype.addAll(token.getSuperType());
  this.subtype.clear();
  this.subtype.addAll(token.getSubtype(game));
  this.isAllCreatureTypes=token.isAllCreatureTypes();
  this.tokenDescriptor=token.getTokenDescriptor();
}",0.968494749124854
157730,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Card card=game.getCard(getTargetPointer().getFirst(game,source));
  if (controller != null && card != null) {
    ManaCosts<ManaCost> costRef=card.getSpellAbility().getManaCostsToPay();
    costRef.clear();
    costRef.add(miracleCosts);
    controller.cast(card.getSpellAbility(),game,false);
    costRef.clear();
    for (    ManaCost manaCost : card.getSpellAbility().getManaCosts()) {
      costRef.add(manaCost);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Card card=game.getCard(getTargetPointer().getFirst(game,source));
  if (controller != null && card != null) {
    SpellAbility abilityToCast=card.getSpellAbility().copy();
    ManaCosts<ManaCost> costRef=abilityToCast.getManaCostsToPay();
    costRef.clear();
    costRef.add(miracleCosts);
    controller.cast(abilityToCast,game,false);
    return true;
  }
  return false;
}",0.7079482439926063
157731,"protected int simulatePriority(SimulationNode2 node,Game game,int depth,int alpha,int beta){
  if (ALLOW_INTERRUPT && Thread.interrupted()) {
    Thread.currentThread().interrupt();
    logger.info(""String_Node_Str"");
    return GameStateEvaluator2.evaluate(playerId,game);
  }
  node.setGameValue(game.getState().getValue(true).hashCode());
  SimulatedPlayer2 currentPlayer=(SimulatedPlayer2)game.getPlayer(game.getPlayerList().get());
  SimulationNode2 bestNode=null;
  List<Ability> allActions=currentPlayer.simulatePriority(game);
  optimize(game,allActions);
  if (logger.isInfoEnabled() && !allActions.isEmpty() && depth == maxDepth) {
    logger.info(""String_Node_Str"" + allActions.size() + ""String_Node_Str""+ ' '+ allActions);
  }
  int counter=0;
  int bestValSubNodes=Integer.MIN_VALUE;
  for (  Ability action : allActions) {
    counter++;
    if (ALLOW_INTERRUPT && Thread.interrupted()) {
      Thread.currentThread().interrupt();
      logger.info(""String_Node_Str"" + depth + ""String_Node_Str"");
      break;
    }
    Game sim=game.copy();
    sim.setSimulation(true);
    if (sim.getPlayer(currentPlayer.getId()).activateAbility((ActivatedAbility)action.copy(),sim)) {
      sim.applyEffects();
      if (checkForRepeatedAction(sim,node,action,currentPlayer.getId())) {
        logger.debug(""String_Node_Str"" + depth + ""String_Node_Str""+ action.toString());
        continue;
      }
      if (!sim.checkIfGameIsOver() && (action.isUsesStack() || action instanceof PassAbility)) {
        UUID nextPlayerId=sim.getPlayerList().get();
        do {
          sim.getPlayer(nextPlayerId).pass(game);
          nextPlayerId=sim.getPlayerList().getNext();
        }
 while (nextPlayerId != this.getId());
      }
      SimulationNode2 newNode=new SimulationNode2(node,sim,action,depth,currentPlayer.getId());
      sim.checkStateAndTriggered();
      int val;
      if (action instanceof PassAbility && sim.getStack().isEmpty()) {
        val=GameStateEvaluator2.evaluate(this.getId(),sim);
      }
 else {
        val=addActions(newNode,depth - 1,alpha,beta);
      }
      logger.debug(""String_Node_Str"" + BLANKS.substring(0,2 + (maxDepth - depth) * 3) + '['+ depth+ ""String_Node_Str""+ counter+ ""String_Node_Str""+ val+ ""String_Node_Str""+ action.toString()+ ""String_Node_Str"");
      if (logger.isInfoEnabled() && depth >= maxDepth) {
        StringBuilder sb=new StringBuilder(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(counter).append(""String_Node_Str"").append(val).append(""String_Node_Str"").append(action).append(action.isModal() ? ""String_Node_Str"" + action.getModes().getMode().toString() : ""String_Node_Str"").append(listTargets(game,action.getTargets())).append(')').append(logger.isTraceEnabled() ? ""String_Node_Str"" + newNode.hashCode() : ""String_Node_Str"");
        SimulationNode2 logNode=newNode;
        while (logNode.getChildren() != null && !logNode.getChildren().isEmpty()) {
          logNode=logNode.getChildren().get(0);
          if (logNode.getAbilities() != null && !logNode.getAbilities().isEmpty()) {
            sb.append(""String_Node_Str"").append(logNode.getDepth()).append(']').append(logNode.getAbilities().toString()).append('<').append(logNode.getScore()).append('>');
          }
        }
        logger.info(sb);
      }
      if (currentPlayer.getId().equals(playerId)) {
        if (val > bestValSubNodes) {
          bestValSubNodes=val;
        }
        if (depth == maxDepth && action instanceof PassAbility) {
          val=val - PASSIVITY_PENALTY;
        }
        if (val > alpha || (depth == maxDepth && val == alpha && RandomUtil.nextBoolean())) {
          alpha=val;
          bestNode=newNode;
          bestNode.setScore(val);
          if (!newNode.getChildren().isEmpty()) {
            bestNode.setCombat(newNode.getChildren().get(0).getCombat());
          }
          if (depth == maxDepth) {
            logger.info(""String_Node_Str"" + depth + ""String_Node_Str""+ bestNode.getScore()+ ""String_Node_Str""+ bestNode.getAbilities().toString());
            node.children.clear();
            node.children.add(bestNode);
            node.setScore(bestNode.getScore());
          }
        }
        if (val == GameStateEvaluator2.WIN_GAME_SCORE) {
          logger.debug(""String_Node_Str"");
          break;
        }
      }
 else {
        if (val < beta) {
          beta=val;
          bestNode=newNode;
          bestNode.setScore(val);
          if (!newNode.getChildren().isEmpty()) {
            bestNode.setCombat(newNode.getChildren().get(0).getCombat());
          }
        }
        if (val == GameStateEvaluator2.LOSE_GAME_SCORE) {
          logger.debug(""String_Node_Str"");
          break;
        }
      }
      if (alpha >= beta) {
        break;
      }
      if (SimulationNode2.nodeCount > maxNodes) {
        logger.debug(""String_Node_Str"");
        break;
      }
    }
  }
  if (depth == maxDepth) {
    logger.info(new StringBuilder(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(SimulationNode2.nodeCount));
  }
  if (bestNode != null) {
    node.children.clear();
    node.children.add(bestNode);
    node.setScore(bestNode.getScore());
    if (logger.isTraceEnabled() && !bestNode.getAbilities().toString().equals(""String_Node_Str"")) {
      logger.trace(new StringBuilder(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(bestNode.getScore()).append(""String_Node_Str"").append(bestNode.getAbilities().toString()).toString());
    }
  }
  if (currentPlayer.getId().equals(playerId)) {
    return bestValSubNodes;
  }
 else {
    return beta;
  }
}","protected int simulatePriority(SimulationNode2 node,Game game,int depth,int alpha,int beta){
  if (ALLOW_INTERRUPT && Thread.interrupted()) {
    Thread.currentThread().interrupt();
    logger.info(""String_Node_Str"");
    return GameStateEvaluator2.evaluate(playerId,game);
  }
  node.setGameValue(game.getState().getValue(true).hashCode());
  SimulatedPlayer2 currentPlayer=(SimulatedPlayer2)game.getPlayer(game.getPlayerList().get());
  SimulationNode2 bestNode=null;
  List<Ability> allActions=currentPlayer.simulatePriority(game);
  optimize(game,allActions);
  if (logger.isInfoEnabled() && !allActions.isEmpty() && depth == maxDepth) {
    logger.info(""String_Node_Str"" + allActions.size() + ""String_Node_Str""+ ' '+ allActions);
  }
  int counter=0;
  int bestValSubNodes=Integer.MIN_VALUE;
  for (  Ability action : allActions) {
    counter++;
    if (ALLOW_INTERRUPT && Thread.interrupted()) {
      Thread.currentThread().interrupt();
      logger.info(""String_Node_Str"" + depth + ""String_Node_Str"");
      break;
    }
    Game sim=game.copy();
    sim.setSimulation(true);
    if (sim.getPlayer(currentPlayer.getId()).activateAbility((ActivatedAbility)action.copy(),sim)) {
      sim.applyEffects();
      if (checkForRepeatedAction(sim,node,action,currentPlayer.getId())) {
        logger.debug(""String_Node_Str"" + depth + ""String_Node_Str""+ action.toString());
        continue;
      }
      if (!sim.checkIfGameIsOver() && (action.isUsesStack() || action instanceof PassAbility)) {
        UUID nextPlayerId=sim.getPlayerList().get();
        do {
          sim.getPlayer(nextPlayerId).pass(game);
          nextPlayerId=sim.getPlayerList().getNext();
        }
 while (nextPlayerId != this.getId());
      }
      SimulationNode2 newNode=new SimulationNode2(node,sim,action,depth,currentPlayer.getId());
      sim.checkStateAndTriggered();
      int val;
      if (action instanceof PassAbility && sim.getStack().isEmpty()) {
        val=GameStateEvaluator2.evaluate(this.getId(),sim);
      }
 else {
        val=addActions(newNode,depth - 1,alpha,beta);
      }
      logger.debug(""String_Node_Str"" + BLANKS.substring(0,2 + (maxDepth - depth) * 3) + '['+ depth+ ""String_Node_Str""+ counter+ ""String_Node_Str""+ val+ ""String_Node_Str""+ action.toString()+ ""String_Node_Str"");
      if (logger.isInfoEnabled() && depth >= maxDepth) {
        StringBuilder sb=new StringBuilder(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(counter).append(""String_Node_Str"").append(val).append(""String_Node_Str"").append(action).append(action.isModal() ? ""String_Node_Str"" + action.getModes().getMode().toString() : ""String_Node_Str"").append(listTargets(game,action.getTargets())).append(')').append(logger.isTraceEnabled() ? ""String_Node_Str"" + newNode.hashCode() : ""String_Node_Str"");
        SimulationNode2 logNode=newNode;
        while (logNode.getChildren() != null && !logNode.getChildren().isEmpty()) {
          logNode=logNode.getChildren().get(0);
          if (logNode.getAbilities() != null && !logNode.getAbilities().isEmpty()) {
            sb.append(""String_Node_Str"").append(logNode.getDepth()).append(']').append(logNode.getAbilities().toString()).append('<').append(logNode.getScore()).append('>');
          }
        }
        logger.info(sb);
      }
      if (currentPlayer.getId().equals(playerId)) {
        if (val > bestValSubNodes) {
          bestValSubNodes=val;
        }
        if (depth == maxDepth && action instanceof PassAbility) {
          val=val - PASSIVITY_PENALTY;
        }
        if (val > alpha || (depth == maxDepth && val == alpha && RandomUtil.nextBoolean())) {
          alpha=val;
          bestNode=newNode;
          bestNode.setScore(val);
          if (!newNode.getChildren().isEmpty()) {
            bestNode.setCombat(newNode.getChildren().get(0).getCombat());
          }
          if (depth == maxDepth) {
            logger.info(""String_Node_Str"" + depth + ""String_Node_Str""+ bestNode.getScore()+ ""String_Node_Str""+ bestNode.getAbilities().toString());
            node.children.clear();
            node.children.add(bestNode);
            node.setScore(bestNode.getScore());
          }
        }
        if (val == GameStateEvaluator2.WIN_GAME_SCORE) {
          logger.debug(""String_Node_Str"");
          break;
        }
      }
 else {
        if (val < beta) {
          beta=val;
          bestNode=newNode;
          bestNode.setScore(val);
          if (!newNode.getChildren().isEmpty()) {
            bestNode.setCombat(newNode.getChildren().get(0).getCombat());
          }
        }
        if (val == GameStateEvaluator2.LOSE_GAME_SCORE) {
          logger.debug(""String_Node_Str"");
          break;
        }
      }
      if (alpha >= beta) {
        break;
      }
      if (SimulationNode2.nodeCount > maxNodes) {
        logger.debug(""String_Node_Str"");
        break;
      }
    }
  }
  if (depth == maxDepth) {
    logger.info(""String_Node_Str"" + depth + ""String_Node_Str""+ SimulationNode2.nodeCount);
  }
  if (bestNode != null) {
    node.children.clear();
    node.children.add(bestNode);
    node.setScore(bestNode.getScore());
    if (logger.isTraceEnabled() && !bestNode.getAbilities().toString().equals(""String_Node_Str"")) {
      logger.trace(new StringBuilder(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(bestNode.getScore()).append(""String_Node_Str"").append(bestNode.getAbilities().toString()).toString());
    }
  }
  if (currentPlayer.getId().equals(playerId)) {
    return bestValSubNodes;
  }
 else {
    return beta;
  }
}",0.9882499554922556
157732,"@Override public SpellAbility getSpellAbilityToResolve(Game game){
  Card card=game.getCard(getSourceId());
  if (card != null) {
    if (spellAbilityToResolve == null) {
      SpellAbility spellAbilityCopy=null;
      if (card.isSplitCard()) {
        if (((SplitCard)card).getLeftHalfCard().getName().equals(abilityName)) {
          spellAbilityCopy=((SplitCard)card).getLeftHalfCard().getSpellAbility().copy();
        }
 else         if (((SplitCard)card).getRightHalfCard().getName().equals(abilityName)) {
          spellAbilityCopy=((SplitCard)card).getRightHalfCard().getSpellAbility().copy();
        }
      }
 else {
        spellAbilityCopy=card.getSpellAbility().copy();
      }
      if (spellAbilityCopy == null) {
        return null;
      }
      spellAbilityCopy.setId(this.getId());
      spellAbilityCopy.getManaCosts().clear();
      spellAbilityCopy.getManaCostsToPay().clear();
      spellAbilityCopy.getCosts().addAll(this.getCosts());
      spellAbilityCopy.addCost(this.getManaCosts());
      spellAbilityCopy.setSpellAbilityCastMode(this.getSpellAbilityCastMode());
      spellAbilityToResolve=spellAbilityCopy;
      ContinuousEffect effect=new FlashbackReplacementEffect();
      effect.setTargetPointer(new FixedTarget(getSourceId(),game.getState().getZoneChangeCounter(getSourceId())));
      game.addEffect(effect,this);
    }
  }
  return spellAbilityToResolve;
}","@Override public SpellAbility getSpellAbilityToResolve(Game game){
  Card card=game.getCard(getSourceId());
  if (card != null) {
    if (spellAbilityToResolve == null) {
      SpellAbility spellAbilityCopy=null;
      if (card.isSplitCard()) {
        if (((SplitCard)card).getLeftHalfCard().getName().equals(abilityName)) {
          spellAbilityCopy=((SplitCard)card).getLeftHalfCard().getSpellAbility().copy();
        }
 else         if (((SplitCard)card).getRightHalfCard().getName().equals(abilityName)) {
          spellAbilityCopy=((SplitCard)card).getRightHalfCard().getSpellAbility().copy();
        }
      }
 else {
        spellAbilityCopy=card.getSpellAbility().copy();
      }
      if (spellAbilityCopy == null) {
        return null;
      }
      spellAbilityCopy.setId(this.getId());
      spellAbilityCopy.getManaCosts().clear();
      spellAbilityCopy.getManaCostsToPay().clear();
      spellAbilityCopy.getCosts().addAll(this.getCosts().copy());
      spellAbilityCopy.addCost(this.getManaCosts().copy());
      spellAbilityCopy.setSpellAbilityCastMode(this.getSpellAbilityCastMode());
      spellAbilityToResolve=spellAbilityCopy;
      ContinuousEffect effect=new FlashbackReplacementEffect();
      effect.setTargetPointer(new FixedTarget(getSourceId(),game.getState().getZoneChangeCounter(getSourceId())));
      game.addEffect(effect,this);
    }
  }
  return spellAbilityToResolve;
}",0.995017793594306
157733,"private void checkPaid(UUID uuid,Spell spell){
  for (  Cost cost : spell.getSpellAbility().getManaCostsToPay()) {
    if (!cost.isPaid()) {
      return;
    }
  }
  CardView cardView=stack.get(uuid);
  cardView.paid=true;
}","private void checkPaid(UUID uuid,StackAbility stackAbility){
  for (  Cost cost : stackAbility.getManaCostsToPay()) {
    if (!cost.isPaid()) {
      return;
    }
  }
  CardView cardView=stack.get(uuid);
  cardView.paid=true;
}",0.7726269315673289
157734,"public GameView(GameState state,Game game,UUID createdForPlayerId,UUID watcherUserId){
  Player createdForPlayer=null;
  this.isPlayer=createdForPlayerId != null;
  this.priorityTime=game.getPriorityTime();
  for (  Player player : state.getPlayers().values()) {
    players.add(new PlayerView(player,state,game,createdForPlayerId,watcherUserId));
    if (player.getId().equals(createdForPlayerId)) {
      createdForPlayer=player;
    }
  }
  for (  StackObject stackObject : state.getStack()) {
    if (stackObject instanceof StackAbility) {
      MageObject object=game.getObject(stackObject.getSourceId());
      Card card=game.getCard(stackObject.getSourceId());
      if (card == null && (object instanceof PermanentCard)) {
        card=((PermanentCard)object).getCard();
      }
      if (card != null) {
        if (object != null) {
          if (object instanceof Permanent) {
            boolean controlled=((Permanent)object).getControllerId().equals(createdForPlayerId);
            stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,((Permanent)object).getName(),new CardView(((Permanent)object),game,controlled,false,false)));
          }
 else {
            stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,card.getName(),new CardView(card,game,false,false,false)));
          }
        }
 else {
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,""String_Node_Str"",new CardView(card)));
        }
        if (card.isTransformable()) {
          updateLatestCardView(game,card,stackObject.getId());
        }
        checkPaid(stackObject.getId(),(StackAbility)stackObject);
      }
 else       if (object != null) {
        if (object instanceof PermanentToken) {
          PermanentToken token=(PermanentToken)object;
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,token.getName(),new CardView(token)));
          checkPaid(stackObject.getId(),(StackAbility)stackObject);
        }
 else         if (object instanceof Emblem) {
          CardView cardView=new CardView(new EmblemView((Emblem)object));
          ((StackAbility)stackObject).setName(((Emblem)object).getName());
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,object.getName(),cardView));
          checkPaid(stackObject.getId(),((StackAbility)stackObject));
        }
 else         if (object instanceof Designation) {
          Designation designation=(Designation)game.getObject(object.getId());
          if (designation != null) {
            stack.put(stackObject.getId(),new CardView(designation,(StackAbility)stackObject));
          }
 else {
            LOGGER.fatal(""String_Node_Str"" + object.getName() + ' '+ object.toString()+ ' '+ object.getClass().toString());
          }
        }
 else         if (object instanceof StackAbility) {
          StackAbility stackAbility=((StackAbility)object);
          stackAbility.newId();
          stack.put(stackObject.getId(),new CardView(((StackAbility)stackObject)));
          checkPaid(stackObject.getId(),((StackAbility)stackObject));
        }
 else {
          LOGGER.fatal(""String_Node_Str"" + object.getName() + ' '+ object.toString()+ ' '+ object.getClass().toString());
        }
      }
 else {
        LOGGER.debug(""String_Node_Str"" + stackObject.getStackAbility().getRule());
      }
    }
 else {
      stack.put(stackObject.getId(),new CardView((Spell)stackObject,game,stackObject.getControllerId().equals(createdForPlayerId)));
      checkPaid(stackObject.getId(),(Spell)stackObject);
    }
  }
  for (  ExileZone exileZone : state.getExile().getExileZones()) {
    exiles.add(new ExileView(exileZone,game));
  }
  for (  String name : state.getRevealed().keySet()) {
    revealed.add(new RevealedView(name,state.getRevealed().get(name),game));
  }
  this.phase=state.getTurn().getPhaseType();
  this.step=state.getTurn().getStepType();
  this.turn=state.getTurnNum();
  this.activePlayerId=state.getActivePlayerId();
  if (state.getActivePlayerId() != null) {
    this.activePlayerName=state.getPlayer(state.getActivePlayerId()).getName();
  }
 else {
    this.activePlayerName=""String_Node_Str"";
  }
  Player priorityPlayer=null;
  if (state.getPriorityPlayerId() != null) {
    priorityPlayer=state.getPlayer(state.getPriorityPlayerId());
    this.priorityPlayerName=priorityPlayer != null ? priorityPlayer.getName() : ""String_Node_Str"";
  }
 else {
    this.priorityPlayerName=""String_Node_Str"";
  }
  for (  CombatGroup combatGroup : state.getCombat().getGroups()) {
    combat.add(new CombatGroupView(combatGroup,game));
  }
  if (isPlayer) {
    if (priorityPlayer != null && createdForPlayer != null && createdForPlayerId != null && createdForPlayer.isGameUnderControl() && (createdForPlayerId.equals(priorityPlayer.getId()) || createdForPlayer.getPlayersUnderYourControl().contains(priorityPlayer.getId()))) {
      this.special=!state.getSpecialActions().getControlledBy(priorityPlayer.getId(),priorityPlayer.isInPayManaMode()).isEmpty();
    }
  }
 else {
    this.special=false;
  }
  CastSpellLastTurnWatcher watcher=(CastSpellLastTurnWatcher)game.getState().getWatchers().get(CastSpellLastTurnWatcher.class.getSimpleName());
  if (watcher != null) {
    spellsCastCurrentTurn=watcher.getAmountOfSpellsAllPlayersCastOnCurrentTurn();
  }
 else {
    spellsCastCurrentTurn=0;
  }
  rollbackTurnsAllowed=game.getOptions().rollbackTurnsAllowed;
}","public GameView(GameState state,Game game,UUID createdForPlayerId,UUID watcherUserId){
  Player createdForPlayer=null;
  this.isPlayer=createdForPlayerId != null;
  this.priorityTime=game.getPriorityTime();
  for (  Player player : state.getPlayers().values()) {
    players.add(new PlayerView(player,state,game,createdForPlayerId,watcherUserId));
    if (player.getId().equals(createdForPlayerId)) {
      createdForPlayer=player;
    }
  }
  for (  StackObject stackObject : state.getStack()) {
    if (stackObject instanceof Spell) {
      CardView spellView=new CardView((Spell)stackObject,game,stackObject.getControllerId().equals(createdForPlayerId));
      spellView.paid=((Spell)stackObject).getSpellAbility().getManaCostsToPay().isPaid();
      stack.put(stackObject.getId(),spellView);
    }
 else     if (stackObject instanceof StackAbility) {
      MageObject object=game.getObject(stackObject.getSourceId());
      Card card=game.getCard(stackObject.getSourceId());
      if (card == null && (object instanceof PermanentCard)) {
        card=((PermanentCard)object).getCard();
      }
      if (card != null) {
        if (object != null) {
          if (object instanceof Permanent) {
            boolean controlled=((Permanent)object).getControllerId().equals(createdForPlayerId);
            stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,((Permanent)object).getName(),new CardView(((Permanent)object),game,controlled,false,false)));
          }
 else {
            stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,card.getName(),new CardView(card,game,false,false,false)));
          }
        }
 else {
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,""String_Node_Str"",new CardView(card)));
        }
        if (card.isTransformable()) {
          updateLatestCardView(game,card,stackObject.getId());
        }
        checkPaid(stackObject.getId(),(StackAbility)stackObject);
      }
 else       if (object != null) {
        if (object instanceof PermanentToken) {
          PermanentToken token=(PermanentToken)object;
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,token.getName(),new CardView(token)));
          checkPaid(stackObject.getId(),(StackAbility)stackObject);
        }
 else         if (object instanceof Emblem) {
          CardView cardView=new CardView(new EmblemView((Emblem)object));
          ((StackAbility)stackObject).setName(((Emblem)object).getName());
          stack.put(stackObject.getId(),new StackAbilityView(game,(StackAbility)stackObject,object.getName(),cardView));
          checkPaid(stackObject.getId(),((StackAbility)stackObject));
        }
 else         if (object instanceof Designation) {
          Designation designation=(Designation)game.getObject(object.getId());
          if (designation != null) {
            stack.put(stackObject.getId(),new CardView(designation,(StackAbility)stackObject));
          }
 else {
            LOGGER.fatal(""String_Node_Str"" + object.getName() + ' '+ object.toString()+ ' '+ object.getClass().toString());
          }
        }
 else         if (object instanceof StackAbility) {
          StackAbility stackAbility=((StackAbility)object);
          stackAbility.newId();
          stack.put(stackObject.getId(),new CardView(((StackAbility)stackObject)));
          checkPaid(stackObject.getId(),((StackAbility)stackObject));
        }
 else {
          LOGGER.fatal(""String_Node_Str"" + object.getName() + ' '+ object.toString()+ ' '+ object.getClass().toString());
        }
      }
 else {
        LOGGER.debug(""String_Node_Str"" + stackObject.getStackAbility().getRule());
      }
    }
 else {
      LOGGER.fatal(""String_Node_Str"" + stackObject.getName() + ' '+ stackObject.toString()+ ' '+ stackObject.getClass().toString());
    }
  }
  for (  ExileZone exileZone : state.getExile().getExileZones()) {
    exiles.add(new ExileView(exileZone,game));
  }
  for (  String name : state.getRevealed().keySet()) {
    revealed.add(new RevealedView(name,state.getRevealed().get(name),game));
  }
  this.phase=state.getTurn().getPhaseType();
  this.step=state.getTurn().getStepType();
  this.turn=state.getTurnNum();
  this.activePlayerId=state.getActivePlayerId();
  if (state.getActivePlayerId() != null) {
    this.activePlayerName=state.getPlayer(state.getActivePlayerId()).getName();
  }
 else {
    this.activePlayerName=""String_Node_Str"";
  }
  Player priorityPlayer=null;
  if (state.getPriorityPlayerId() != null) {
    priorityPlayer=state.getPlayer(state.getPriorityPlayerId());
    this.priorityPlayerName=priorityPlayer != null ? priorityPlayer.getName() : ""String_Node_Str"";
  }
 else {
    this.priorityPlayerName=""String_Node_Str"";
  }
  for (  CombatGroup combatGroup : state.getCombat().getGroups()) {
    combat.add(new CombatGroupView(combatGroup,game));
  }
  if (isPlayer) {
    if (priorityPlayer != null && createdForPlayer != null && createdForPlayerId != null && createdForPlayer.isGameUnderControl() && (createdForPlayerId.equals(priorityPlayer.getId()) || createdForPlayer.getPlayersUnderYourControl().contains(priorityPlayer.getId()))) {
      this.special=!state.getSpecialActions().getControlledBy(priorityPlayer.getId(),priorityPlayer.isInPayManaMode()).isEmpty();
    }
  }
 else {
    this.special=false;
  }
  CastSpellLastTurnWatcher watcher=(CastSpellLastTurnWatcher)game.getState().getWatchers().get(CastSpellLastTurnWatcher.class.getSimpleName());
  if (watcher != null) {
    spellsCastCurrentTurn=watcher.getAmountOfSpellsAllPlayersCastOnCurrentTurn();
  }
 else {
    spellsCastCurrentTurn=0;
  }
  rollbackTurnsAllowed=game.getOptions().rollbackTurnsAllowed;
}",0.9456676136363636
157735,"private static MagePane getTopMost(MagePane exclude){
  MagePane topmost=null;
  int best=Integer.MAX_VALUE;
  for (  Component frame : desktopPane.getComponentsInLayer(JLayeredPane.DEFAULT_LAYER)) {
    if (frame.isVisible()) {
      int z=desktopPane.getComponentZOrder(frame);
      if (z < best) {
        if (frame instanceof MagePane && (SessionHandler.isConnected() || !(frame instanceof TablesPane))) {
          best=z;
          if (!frame.equals(exclude)) {
            topmost=(MagePane)frame;
          }
        }
      }
    }
  }
  return topmost;
}","public static MagePane getTopMost(MagePane exclude){
  MagePane topmost=null;
  int best=Integer.MAX_VALUE;
  for (  Component frame : desktopPane.getComponentsInLayer(JLayeredPane.DEFAULT_LAYER)) {
    if (frame.isVisible()) {
      int z=desktopPane.getComponentZOrder(frame);
      if (z < best) {
        if (frame instanceof MagePane && (SessionHandler.isConnected() || !(frame instanceof TablesPane))) {
          best=z;
          if (!frame.equals(exclude)) {
            topmost=(MagePane)frame;
          }
        }
      }
    }
  }
  return topmost;
}",0.9902568644818424
157736,"private void handleOverNewView(TransferData data){
  hideTooltipPopup();
  cancelTimeout();
  Component parentComponent=SwingUtilities.getRoot(data.component);
  Point parentPoint=parentComponent.getLocationOnScreen();
  if (data.locationOnScreen == null) {
    data.locationOnScreen=data.component.getLocationOnScreen();
  }
  ArrowUtil.drawArrowsForTargets(data,parentPoint);
  ArrowUtil.drawArrowsForSource(data,parentPoint);
  ArrowUtil.drawArrowsForPairedCards(data,parentPoint);
  ArrowUtil.drawArrowsForBandedCards(data,parentPoint);
  ArrowUtil.drawArrowsForEnchantPlayers(data,parentPoint);
  tooltipCard=data.card;
  showTooltipPopup(data,parentComponent,parentPoint);
}","private void handleOverNewView(TransferData data){
  MagePane topPane=MageFrame.getTopMost(null);
  if (topPane instanceof GamePane) {
    if (!((GamePane)topPane).getGameId().equals(data.gameId)) {
      return;
    }
  }
 else   if (data.gameId != null) {
    return;
  }
  hideTooltipPopup();
  cancelTimeout();
  Component parentComponent=SwingUtilities.getRoot(data.component);
  Point parentPoint=parentComponent.getLocationOnScreen();
  if (data.locationOnScreen == null) {
    data.locationOnScreen=data.component.getLocationOnScreen();
  }
  ArrowUtil.drawArrowsForTargets(data,parentPoint);
  ArrowUtil.drawArrowsForSource(data,parentPoint);
  ArrowUtil.drawArrowsForPairedCards(data,parentPoint);
  ArrowUtil.drawArrowsForBandedCards(data,parentPoint);
  ArrowUtil.drawArrowsForEnchantPlayers(data,parentPoint);
  tooltipCard=data.card;
  showTooltipPopup(data,parentComponent,parentPoint);
}",0.8591282375236892
157737,"private void checkTrigger(TriggeredAbility ability,GameEvent event,Game game){
  MageObject object=game.getObject(ability.getSourceId());
  if (ability.isInUseableZone(game,object,event)) {
    if (event == null || !game.getContinuousEffects().preventedByRuleModification(event,ability,game,false)) {
      if (object != null) {
        boolean controllerSet=false;
        if (ability.getZone() != Zone.COMMAND && event != null && event.getTargetId() != null && ability.isLeavesTheBattlefieldTrigger() && game.getLKI().get(Zone.BATTLEFIELD) != null && game.getLKI().get(Zone.BATTLEFIELD).containsKey(ability.getSourceId())) {
          Permanent permanent=(Permanent)game.getLastKnownInformation(ability.getSourceId(),Zone.BATTLEFIELD,ability.getSourceObjectZoneChangeCounter() - 1);
          if (permanent != null) {
            if (!ability.getWorksFaceDown() && permanent.isFaceDown(game)) {
              return;
            }
            controllerSet=true;
            ability.setControllerId(permanent.getControllerId());
          }
        }
        if (!controllerSet) {
          if (object instanceof Permanent) {
            ability.setControllerId(((Permanent)object).getControllerId());
          }
 else           if (object instanceof Spell) {
            ability.setControllerId(((Spell)object).getControllerId());
          }
        }
      }
      if (ability.checkTrigger(event,game)) {
        NumberOfTriggersEvent numberOfTriggersEvent=new NumberOfTriggersEvent(ability.getControllerId(),ability.getSourceId(),event);
        if (!game.replaceEvent(numberOfTriggersEvent)) {
          for (int i=0; i < numberOfTriggersEvent.getAmount(); i++) {
            ability.trigger(game,ability.getControllerId());
          }
        }
      }
    }
  }
}","private void checkTrigger(TriggeredAbility ability,GameEvent event,Game game){
  MageObject object=game.getObject(ability.getSourceId());
  if (ability.isInUseableZone(game,object,event)) {
    if (event == null || !game.getContinuousEffects().preventedByRuleModification(event,ability,game,false)) {
      if (object != null) {
        boolean controllerSet=false;
        if (ability.getZone() != Zone.COMMAND && event != null && event.getTargetId() != null && ability.isLeavesTheBattlefieldTrigger() && game.getLKI().get(Zone.BATTLEFIELD) != null && game.getLKI().get(Zone.BATTLEFIELD).containsKey(ability.getSourceId())) {
          Permanent permanent=(Permanent)game.getLastKnownInformation(ability.getSourceId(),Zone.BATTLEFIELD,ability.getSourceObjectZoneChangeCounter() - 1);
          if (permanent != null) {
            if (permanent.isFaceDown(game) && !isGainedAbility(ability,permanent) && !ability.getWorksFaceDown()) {
              return;
            }
            controllerSet=true;
            ability.setControllerId(permanent.getControllerId());
          }
        }
        if (!controllerSet) {
          if (object instanceof Permanent) {
            ability.setControllerId(((Permanent)object).getControllerId());
          }
 else           if (object instanceof Spell) {
            ability.setControllerId(((Spell)object).getControllerId());
          }
        }
      }
      if (ability.checkTrigger(event,game)) {
        NumberOfTriggersEvent numberOfTriggersEvent=new NumberOfTriggersEvent(ability.getControllerId(),ability.getSourceId(),event);
        if (!game.replaceEvent(numberOfTriggersEvent)) {
          for (int i=0; i < numberOfTriggersEvent.getAmount(); i++) {
            ability.trigger(game,ability.getControllerId());
          }
        }
      }
    }
  }
}",0.9768608865347088
157738,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (((DamageEvent)event).isCombatDamage() && event.getSourceId().equals(getSourceId())) {
    Permanent targetPermanet=game.getPermanentOrLKIBattlefield(event.getTargetId());
    if (targetPermanet.hasSubtype(SubType.DINOSAUR,game)) {
      getEffects().get(0).setTargetPointer(new FixedTarget(targetPermanet,game));
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (((DamagedEvent)event).isCombatDamage() && event.getSourceId().equals(getSourceId())) {
    Permanent targetPermanet=game.getPermanentOrLKIBattlefield(event.getTargetId());
    if (targetPermanet.hasSubtype(SubType.DINOSAUR,game)) {
      getEffects().get(0).setTargetPointer(new FixedTarget(targetPermanet,game));
      return true;
    }
  }
  return false;
}",0.9988412514484356
157739,"protected void playManaAbilities(Ability abilityToCast,ManaCost unpaid,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  MageObject object=game.getObject(response.getUUID());
  if (object == null) {
    return;
  }
  Spell spell=game.getStack().getSpell(abilityToCast.getSourceId());
  if (spell != null && !spell.isResolving() && spell.isDoneActivatingManaAbilities()) {
    game.informPlayer(this,""String_Node_Str"");
    return;
  }
  Zone zone=game.getState().getZone(object.getId());
  if (zone != null) {
    LinkedHashMap<UUID,ActivatedManaAbilityImpl> useableAbilities=getUseableManaAbilities(object,zone,game);
    if (useableAbilities != null && !useableAbilities.isEmpty()) {
      useableAbilities=ManaUtil.tryToAutoPay(unpaid,useableAbilities);
      currentlyUnpaidMana=unpaid;
      activateAbility(useableAbilities,object,game);
      currentlyUnpaidMana=null;
    }
  }
}","protected void playManaAbilities(Ability abilityToCast,ManaCost unpaid,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  MageObject object=game.getObject(response.getUUID());
  if (object == null) {
    return;
  }
  if (AbilityType.SPELL.equals(abilityToCast.getAbilityType())) {
    Spell spell=game.getStack().getSpell(abilityToCast.getSourceId());
    if (spell != null && !spell.isResolving() && spell.isDoneActivatingManaAbilities()) {
      game.informPlayer(this,""String_Node_Str"");
      return;
    }
  }
  Zone zone=game.getState().getZone(object.getId());
  if (zone != null) {
    LinkedHashMap<UUID,ActivatedManaAbilityImpl> useableAbilities=getUseableManaAbilities(object,zone,game);
    if (useableAbilities != null && !useableAbilities.isEmpty()) {
      useableAbilities=ManaUtil.tryToAutoPay(unpaid,useableAbilities);
      currentlyUnpaidMana=unpaid;
      activateAbility(useableAbilities,object,game);
      currentlyUnpaidMana=null;
    }
  }
}",0.9501061571125266
157740,"protected int simulatePriority(SimulationNode2 node,Game game,int depth,int alpha,int beta){
  if (ALLOW_INTERRUPT && Thread.interrupted()) {
    Thread.currentThread().interrupt();
    logger.info(""String_Node_Str"");
    return GameStateEvaluator2.evaluate(playerId,game);
  }
  node.setGameValue(game.getState().getValue(true).hashCode());
  SimulatedPlayer2 currentPlayer=(SimulatedPlayer2)game.getPlayer(game.getPlayerList().get());
  SimulationNode2 bestNode=null;
  List<Ability> allActions=currentPlayer.simulatePriority(game);
  optimize(game,allActions);
  if (logger.isInfoEnabled() && !allActions.isEmpty() && depth == maxDepth) {
    logger.info(""String_Node_Str"" + allActions.size() + ""String_Node_Str""+ ' '+ allActions);
  }
  int counter=0;
  int bestValSubNodes=Integer.MIN_VALUE;
  for (  Ability action : allActions) {
    counter++;
    if (ALLOW_INTERRUPT && Thread.interrupted()) {
      Thread.currentThread().interrupt();
      logger.info(""String_Node_Str"" + depth + ""String_Node_Str"");
      break;
    }
    Game sim=game.copy();
    sim.setSimulation(true);
    if (sim.getPlayer(currentPlayer.getId()).activateAbility((ActivatedAbility)action.copy(),sim)) {
      sim.applyEffects();
      if (checkForRepeatedAction(sim,node,action,currentPlayer.getId())) {
        logger.debug(""String_Node_Str"" + depth + ""String_Node_Str""+ action.toString());
        continue;
      }
      if (!sim.checkIfGameIsOver() && action.isUsesStack()) {
        UUID nextPlayerId=sim.getPlayerList().get();
        do {
          sim.getPlayer(nextPlayerId).pass(game);
          nextPlayerId=sim.getPlayerList().getNext();
        }
 while (nextPlayerId != this.getId());
      }
      SimulationNode2 newNode=new SimulationNode2(node,sim,action,depth,currentPlayer.getId());
      sim.checkStateAndTriggered();
      int val;
      if (action instanceof PassAbility) {
        val=GameStateEvaluator2.evaluate(this.getId(),sim);
      }
 else {
        val=addActions(newNode,depth - 1,alpha,beta);
      }
      logger.debug(""String_Node_Str"" + BLANKS.substring(0,2 + (maxDepth - depth) * 3) + '['+ depth+ ""String_Node_Str""+ counter+ ""String_Node_Str""+ val+ ""String_Node_Str""+ action.toString()+ ""String_Node_Str"");
      if (logger.isInfoEnabled() && depth >= maxDepth) {
        StringBuilder sb=new StringBuilder(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(counter).append(""String_Node_Str"").append(val).append(""String_Node_Str"").append(action).append(action.isModal() ? ""String_Node_Str"" + action.getModes().getMode().toString() : ""String_Node_Str"").append(listTargets(game,action.getTargets())).append(')').append(logger.isTraceEnabled() ? ""String_Node_Str"" + newNode.hashCode() : ""String_Node_Str"");
        SimulationNode2 logNode=newNode;
        while (logNode.getChildren() != null && !logNode.getChildren().isEmpty()) {
          logNode=logNode.getChildren().get(0);
          if (logNode.getAbilities() != null && !logNode.getAbilities().isEmpty()) {
            sb.append(""String_Node_Str"").append(logNode.getDepth()).append(']').append(logNode.getAbilities().toString()).append('<').append(logNode.getScore()).append('>');
          }
        }
        logger.info(sb);
      }
      if (currentPlayer.getId().equals(playerId)) {
        if (val > bestValSubNodes) {
          bestValSubNodes=val;
        }
        if (depth == maxDepth && action instanceof PassAbility) {
          val=val - PASSIVITY_PENALTY;
        }
        if (val > alpha || (depth == maxDepth && val == alpha && RandomUtil.nextBoolean())) {
          alpha=val;
          bestNode=newNode;
          bestNode.setScore(val);
          if (!newNode.getChildren().isEmpty()) {
            bestNode.setCombat(newNode.getChildren().get(0).getCombat());
          }
          if (depth == maxDepth) {
            logger.info(""String_Node_Str"" + depth + ""String_Node_Str""+ bestNode.getScore()+ ""String_Node_Str""+ bestNode.getAbilities().toString());
            node.children.clear();
            node.children.add(bestNode);
            node.setScore(bestNode.getScore());
          }
        }
        if (val == GameStateEvaluator2.WIN_GAME_SCORE) {
          logger.debug(""String_Node_Str"");
          break;
        }
      }
 else {
        if (val < beta) {
          beta=val;
          bestNode=newNode;
          bestNode.setScore(val);
          if (!newNode.getChildren().isEmpty()) {
            bestNode.setCombat(newNode.getChildren().get(0).getCombat());
          }
        }
        if (val == GameStateEvaluator2.LOSE_GAME_SCORE) {
          logger.debug(""String_Node_Str"");
          break;
        }
      }
      if (alpha >= beta) {
        break;
      }
      if (SimulationNode2.nodeCount > maxNodes) {
        logger.debug(""String_Node_Str"");
        break;
      }
    }
  }
  if (depth == maxDepth) {
    logger.info(new StringBuilder(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(SimulationNode2.nodeCount));
  }
  if (bestNode != null) {
    node.children.clear();
    node.children.add(bestNode);
    node.setScore(bestNode.getScore());
    if (logger.isTraceEnabled() && !bestNode.getAbilities().toString().equals(""String_Node_Str"")) {
      logger.trace(new StringBuilder(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(bestNode.getScore()).append(""String_Node_Str"").append(bestNode.getAbilities().toString()).toString());
    }
  }
  if (currentPlayer.getId().equals(playerId)) {
    return bestValSubNodes;
  }
 else {
    return beta;
  }
}","protected int simulatePriority(SimulationNode2 node,Game game,int depth,int alpha,int beta){
  if (ALLOW_INTERRUPT && Thread.interrupted()) {
    Thread.currentThread().interrupt();
    logger.info(""String_Node_Str"");
    return GameStateEvaluator2.evaluate(playerId,game);
  }
  node.setGameValue(game.getState().getValue(true).hashCode());
  SimulatedPlayer2 currentPlayer=(SimulatedPlayer2)game.getPlayer(game.getPlayerList().get());
  SimulationNode2 bestNode=null;
  List<Ability> allActions=currentPlayer.simulatePriority(game);
  optimize(game,allActions);
  if (logger.isInfoEnabled() && !allActions.isEmpty() && depth == maxDepth) {
    logger.info(""String_Node_Str"" + allActions.size() + ""String_Node_Str""+ ' '+ allActions);
  }
  int counter=0;
  int bestValSubNodes=Integer.MIN_VALUE;
  for (  Ability action : allActions) {
    counter++;
    if (ALLOW_INTERRUPT && Thread.interrupted()) {
      Thread.currentThread().interrupt();
      logger.info(""String_Node_Str"" + depth + ""String_Node_Str"");
      break;
    }
    Game sim=game.copy();
    sim.setSimulation(true);
    if (sim.getPlayer(currentPlayer.getId()).activateAbility((ActivatedAbility)action.copy(),sim)) {
      sim.applyEffects();
      if (checkForRepeatedAction(sim,node,action,currentPlayer.getId())) {
        logger.debug(""String_Node_Str"" + depth + ""String_Node_Str""+ action.toString());
        continue;
      }
      if (!sim.checkIfGameIsOver() && (action.isUsesStack() || action instanceof PassAbility)) {
        UUID nextPlayerId=sim.getPlayerList().get();
        do {
          sim.getPlayer(nextPlayerId).pass(game);
          nextPlayerId=sim.getPlayerList().getNext();
        }
 while (nextPlayerId != this.getId());
      }
      SimulationNode2 newNode=new SimulationNode2(node,sim,action,depth,currentPlayer.getId());
      sim.checkStateAndTriggered();
      int val;
      if (action instanceof PassAbility && sim.getStack().isEmpty()) {
        val=GameStateEvaluator2.evaluate(this.getId(),sim);
      }
 else {
        val=addActions(newNode,depth - 1,alpha,beta);
      }
      logger.debug(""String_Node_Str"" + BLANKS.substring(0,2 + (maxDepth - depth) * 3) + '['+ depth+ ""String_Node_Str""+ counter+ ""String_Node_Str""+ val+ ""String_Node_Str""+ action.toString()+ ""String_Node_Str"");
      if (logger.isInfoEnabled() && depth >= maxDepth) {
        StringBuilder sb=new StringBuilder(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(counter).append(""String_Node_Str"").append(val).append(""String_Node_Str"").append(action).append(action.isModal() ? ""String_Node_Str"" + action.getModes().getMode().toString() : ""String_Node_Str"").append(listTargets(game,action.getTargets())).append(')').append(logger.isTraceEnabled() ? ""String_Node_Str"" + newNode.hashCode() : ""String_Node_Str"");
        SimulationNode2 logNode=newNode;
        while (logNode.getChildren() != null && !logNode.getChildren().isEmpty()) {
          logNode=logNode.getChildren().get(0);
          if (logNode.getAbilities() != null && !logNode.getAbilities().isEmpty()) {
            sb.append(""String_Node_Str"").append(logNode.getDepth()).append(']').append(logNode.getAbilities().toString()).append('<').append(logNode.getScore()).append('>');
          }
        }
        logger.info(sb);
      }
      if (currentPlayer.getId().equals(playerId)) {
        if (val > bestValSubNodes) {
          bestValSubNodes=val;
        }
        if (depth == maxDepth && action instanceof PassAbility) {
          val=val - PASSIVITY_PENALTY;
        }
        if (val > alpha || (depth == maxDepth && val == alpha && RandomUtil.nextBoolean())) {
          alpha=val;
          bestNode=newNode;
          bestNode.setScore(val);
          if (!newNode.getChildren().isEmpty()) {
            bestNode.setCombat(newNode.getChildren().get(0).getCombat());
          }
          if (depth == maxDepth) {
            logger.info(""String_Node_Str"" + depth + ""String_Node_Str""+ bestNode.getScore()+ ""String_Node_Str""+ bestNode.getAbilities().toString());
            node.children.clear();
            node.children.add(bestNode);
            node.setScore(bestNode.getScore());
          }
        }
        if (val == GameStateEvaluator2.WIN_GAME_SCORE) {
          logger.debug(""String_Node_Str"");
          break;
        }
      }
 else {
        if (val < beta) {
          beta=val;
          bestNode=newNode;
          bestNode.setScore(val);
          if (!newNode.getChildren().isEmpty()) {
            bestNode.setCombat(newNode.getChildren().get(0).getCombat());
          }
        }
        if (val == GameStateEvaluator2.LOSE_GAME_SCORE) {
          logger.debug(""String_Node_Str"");
          break;
        }
      }
      if (alpha >= beta) {
        break;
      }
      if (SimulationNode2.nodeCount > maxNodes) {
        logger.debug(""String_Node_Str"");
        break;
      }
    }
  }
  if (depth == maxDepth) {
    logger.info(new StringBuilder(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(SimulationNode2.nodeCount));
  }
  if (bestNode != null) {
    node.children.clear();
    node.children.add(bestNode);
    node.setScore(bestNode.getScore());
    if (logger.isTraceEnabled() && !bestNode.getAbilities().toString().equals(""String_Node_Str"")) {
      logger.trace(new StringBuilder(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(depth).append(""String_Node_Str"").append(bestNode.getScore()).append(""String_Node_Str"").append(bestNode.getAbilities().toString()).toString());
    }
  }
  if (currentPlayer.getId().equals(playerId)) {
    return bestValSubNodes;
  }
 else {
    return beta;
  }
}",0.9943795164599876
157741,"private boolean priorityPlay(Game game){
  if (lastLoggedTurn != game.getTurnNum()) {
    lastLoggedTurn=game.getTurnNum();
    logger.info(""String_Node_Str"" + game.getTurnNum() + ""String_Node_Str""+ game.getPlayer(game.getActivePlayerId()).getName()+ ""String_Node_Str"");
  }
  logState(game);
  logger.debug(""String_Node_Str"" + (game.getTurn().getStepType() + ""String_Node_Str"").substring(0,25) + ""String_Node_Str""+ game.getPlayer(game.getActivePlayerId()).getName()+ ""String_Node_Str""+ name);
  game.getState().setPriorityPlayerId(playerId);
  game.firePriorityEvent(playerId);
switch (game.getTurn().getStepType()) {
case UPKEEP:
case DRAW:
    pass(game);
  return false;
case PRECOMBAT_MAIN:
if (game.getActivePlayerId().equals(playerId)) {
  printOutState(game);
  if (actions.isEmpty()) {
    logger.info(""String_Node_Str"");
    calculateActions(game);
  }
  act(game);
  return true;
}
 else {
  pass(game);
}
return false;
case BEGIN_COMBAT:
pass(game);
return false;
case DECLARE_ATTACKERS:
if (!game.getActivePlayerId().equals(playerId)) {
printOutState(game);
if (actions.isEmpty()) {
logger.info(""String_Node_Str"");
calculateActions(game);
}
act(game);
return true;
}
 else {
pass(game);
}
return false;
case DECLARE_BLOCKERS:
case FIRST_COMBAT_DAMAGE:
case COMBAT_DAMAGE:
case END_COMBAT:
pass(game);
return false;
case POSTCOMBAT_MAIN:
printOutState(game);
if (actions.isEmpty()) {
calculateActions(game);
}
act(game);
return true;
case END_TURN:
case CLEANUP:
actionCache.clear();
pass(game);
return false;
}
return false;
}","private boolean priorityPlay(Game game){
  if (lastLoggedTurn != game.getTurnNum()) {
    lastLoggedTurn=game.getTurnNum();
    logger.info(""String_Node_Str"" + game.getTurnNum() + ""String_Node_Str""+ game.getPlayer(game.getActivePlayerId()).getName()+ ""String_Node_Str"");
  }
  logState(game);
  logger.debug(""String_Node_Str"" + (game.getTurn().getStepType() + ""String_Node_Str"").substring(0,25) + ""String_Node_Str""+ game.getPlayer(game.getActivePlayerId()).getName()+ ""String_Node_Str""+ name);
  game.getState().setPriorityPlayerId(playerId);
  game.firePriorityEvent(playerId);
switch (game.getTurn().getStepType()) {
case UPKEEP:
case DRAW:
    pass(game);
  return false;
case PRECOMBAT_MAIN:
if (game.getActivePlayerId().equals(playerId)) {
  printOutState(game);
  if (actions.isEmpty()) {
    logger.info(""String_Node_Str"");
    calculateActions(game);
  }
  act(game);
  return true;
}
 else {
  pass(game);
}
return false;
case BEGIN_COMBAT:
pass(game);
return false;
case DECLARE_ATTACKERS:
if (!game.getActivePlayerId().equals(playerId)) {
printOutState(game);
if (actions.isEmpty()) {
logger.info(""String_Node_Str"");
calculateActions(game);
}
act(game);
return true;
}
 else {
pass(game);
}
return false;
case DECLARE_BLOCKERS:
printOutState(game);
if (actions.isEmpty()) {
calculateActions(game);
}
act(game);
return true;
case FIRST_COMBAT_DAMAGE:
case COMBAT_DAMAGE:
case END_COMBAT:
pass(game);
return false;
case POSTCOMBAT_MAIN:
printOutState(game);
if (actions.isEmpty()) {
calculateActions(game);
}
act(game);
return true;
case END_TURN:
case CLEANUP:
actionCache.clear();
pass(game);
return false;
}
return false;
}",0.9697542533081286
157742,"/** 
 * This test fails sometimes, probably because two plains are tapped for the first creature
 */
@Test @Ignore public void testSimpleCast2(){
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",2);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",2);
  setStopAt(1,PhaseStep.BEGIN_COMBAT);
  execute();
  assertPermanentCount(playerA,""String_Node_Str"",2);
}","/** 
 * This test fails sometimes, probably because two plains are tapped for the first creature
 */
@Test public void testSimpleCast2(){
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",2);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",2);
  setStopAt(1,PhaseStep.BEGIN_COMBAT);
  execute();
  assertPermanentCount(playerA,""String_Node_Str"",2);
}",0.9912663755458516
157743,"@Override public int announceXMana(int min,int max,String message,Game game,Ability ability){
  log.debug(""String_Node_Str"");
  int numAvailable=getAvailableManaProducers(game).size() - ability.getManaCosts().convertedManaCost();
  if (numAvailable < 0) {
    numAvailable=0;
  }
  return numAvailable;
}","@Override public int announceXMana(int min,int max,String message,Game game,Ability ability){
  log.debug(""String_Node_Str"");
  int numAvailable=getAvailableManaProducers(game).size() - ability.getManaCosts().convertedManaCost();
  if (numAvailable < 0) {
    numAvailable=0;
  }
  if (numAvailable > max) {
    numAvailable=max;
  }
  return numAvailable;
}",0.8549848942598187
157744,"/** 
 * Creates   {@link Mana} object from {@link ColoredManaSymbol}. Created  {@link Mana} will have a single mana of the passed in{@link ColoredManaSymbol} color.
 * @param color The color to create the {@link Mana} object with.
 */
public Mana(final ColoredManaSymbol color){
  Objects.requireNonNull(color,""String_Node_Str"");
switch (color) {
case G:
    green=1;
  break;
case R:
red=1;
break;
case B:
black=1;
break;
case U:
blue=1;
break;
case W:
white=1;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + color);
}
}","public Mana(final ManaType manaType){
  Objects.requireNonNull(manaType,""String_Node_Str"");
switch (manaType) {
case GREEN:
    green=1;
  break;
case RED:
red=1;
break;
case BLACK:
black=1;
break;
case BLUE:
blue=1;
break;
case WHITE:
white=1;
break;
case COLORLESS:
colorless=1;
break;
case GENERIC:
generic=1;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + manaType);
}
}",0.4761904761904761
157745,"/** 
 * Creates a   {@link Mana} object with the passed in {@code num} of Anymana.  {@code num} can not be a negative value. Negative values will belogged and set to 0.
 * @param num value of Any mana to create.
 * @return a {@link Mana} object with the passed in {@code num} of Anymana.
 */
public static Mana AnyMana(int num){
  return new Mana(0,0,0,0,0,0,notNegative(num,""String_Node_Str""),0);
}","/** 
 * Creates a   {@link Mana} object with the passed in {@code num} of Any mana.{@code num} can not be a negative value. Negative values will be loggedand set to 0.
 * @param num value of Any mana to create.
 * @return a {@link Mana} object with the passed in {@code num} of Any mana.
 */
public static Mana AnyMana(int num){
  return new Mana(0,0,0,0,0,0,notNegative(num,""String_Node_Str""),0);
}",0.9649122807017544
157746,"/** 
 * @param manaType the mana type that should be paid
 * @param ability
 * @param filter
 * @param game
 * @param costToPay complete costs to pay (needed to check conditional mana)
 * @param usedManaToPay the information about what mana was paid
 * @return
 */
public boolean pay(ManaType manaType,Ability ability,Filter filter,Game game,Cost costToPay,Mana usedManaToPay){
  if (!autoPayment && manaType != unlockedManaType) {
    return false;
  }
  if (autoPayment && autoPaymentRestricted && !wasManaAddedBeyondStock()&& manaType != unlockedManaType) {
    return false;
  }
  if (getConditional(manaType,ability,filter,game,costToPay) > 0) {
    removeConditional(manaType,ability,game,costToPay,usedManaToPay);
    lockManaType();
    return true;
  }
  for (  ManaPoolItem mana : manaItems) {
    if (filter != null) {
      if (!filter.match(mana.getSourceObject(),game)) {
        if (!(mana.getSourceObject() instanceof Spell) || ability.getSourceId().equals(mana.getSourceId())) {
          continue;
        }
      }
    }
    if (manaType != unlockedManaType && autoPayment && autoPaymentRestricted && mana.count() == mana.getStock()) {
      continue;
    }
    ManaType usableManaType=game.getContinuousEffects().asThoughMana(manaType,mana,ability.getSourceId(),ability,ability.getControllerId(),game);
    if (usableManaType == null) {
      continue;
    }
    if (mana.get(usableManaType) > 0) {
      GameEvent event=new GameEvent(GameEvent.EventType.MANA_PAID,ability.getId(),mana.getSourceId(),ability.getControllerId(),0,mana.getFlag());
      event.setData(mana.getOriginalId().toString());
      game.fireEvent(event);
      usedManaToPay.increase(mana.getFirstAvailable());
      mana.remove(usableManaType);
      if (mana.count() == 0) {
        manaItems.remove(mana);
      }
      lockManaType();
      return true;
    }
  }
  return false;
}","/** 
 * @param manaType the mana type that should be paid
 * @param ability
 * @param filter
 * @param game
 * @param costToPay complete costs to pay (needed to check conditional mana)
 * @param usedManaToPay the information about what mana was paid
 * @return
 */
public boolean pay(ManaType manaType,Ability ability,Filter filter,Game game,Cost costToPay,Mana usedManaToPay){
  if (!autoPayment && manaType != unlockedManaType) {
    return false;
  }
  ManaType possibleAsThoughtPoolManaType=null;
  if (autoPayment && autoPaymentRestricted && !wasManaAddedBeyondStock()&& manaType != unlockedManaType) {
    if (unlockedManaType != null) {
      ManaPoolItem checkItem=new ManaPoolItem();
      checkItem.add(unlockedManaType,1);
      possibleAsThoughtPoolManaType=game.getContinuousEffects().asThoughMana(manaType,checkItem,ability.getSourceId(),ability,ability.getControllerId(),game);
    }
    if (possibleAsThoughtPoolManaType == null || possibleAsThoughtPoolManaType != unlockedManaType) {
      return false;
    }
  }
  if (getConditional(manaType,ability,filter,game,costToPay) > 0) {
    removeConditional(manaType,ability,game,costToPay,usedManaToPay);
    lockManaType();
    return true;
  }
  for (  ManaPoolItem mana : manaItems) {
    if (filter != null) {
      if (!filter.match(mana.getSourceObject(),game)) {
        if (!(mana.getSourceObject() instanceof Spell) || ability.getSourceId().equals(mana.getSourceId())) {
          continue;
        }
      }
    }
    if (possibleAsThoughtPoolManaType == null && manaType != unlockedManaType && autoPayment && autoPaymentRestricted && mana.count() == mana.getStock()) {
      continue;
    }
    ManaType usableManaType=game.getContinuousEffects().asThoughMana(manaType,mana,ability.getSourceId(),ability,ability.getControllerId(),game);
    if (usableManaType == null) {
      continue;
    }
    if (mana.get(usableManaType) > 0) {
      GameEvent event=new GameEvent(GameEvent.EventType.MANA_PAID,ability.getId(),mana.getSourceId(),ability.getControllerId(),0,mana.getFlag());
      event.setData(mana.getOriginalId().toString());
      game.fireEvent(event);
      usedManaToPay.increase(mana.getFirstAvailable());
      mana.remove(usableManaType);
      if (mana.count() == 0) {
        manaItems.remove(mana);
      }
      lockManaType();
      return true;
    }
  }
  return false;
}",0.7208480565371025
157747,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent thisCreature=game.getPermanentOrLKIBattlefield(source.getId());
  if (controller != null && thisCreature != null) {
    BlockedAttackerWatcher watcher=(BlockedAttackerWatcher)game.getState().getWatchers().get(BlockedAttackerWatcher.class.getSimpleName());
    if (watcher != null) {
      List<Permanent> toDestroy=new ArrayList<>();
      for (      Permanent creature : game.getBattlefield().getActivePermanents(StaticFilters.FILTER_PERMANENT_CREATURE,source.getControllerId(),source.getSourceId(),game)) {
        if (!creature.getId().equals(thisCreature.getId())) {
          if (watcher.creatureHasBlockedAttacker(creature,thisCreature,game)) {
            toDestroy.add(creature);
          }
        }
      }
      for (      Permanent creature : toDestroy) {
        creature.destroy(source.getSourceId(),game,false);
      }
      thisCreature.destroy(source.getSourceId(),game,false);
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent thisCreature=game.getPermanentOrLKIBattlefield(source.getSourceId());
  if (controller != null && thisCreature != null) {
    BlockedAttackerWatcher watcher=(BlockedAttackerWatcher)game.getState().getWatchers().get(BlockedAttackerWatcher.class.getSimpleName());
    if (watcher != null) {
      List<Permanent> toDestroy=new ArrayList<>();
      for (      Permanent creature : game.getBattlefield().getActivePermanents(StaticFilters.FILTER_PERMANENT_CREATURE,source.getControllerId(),source.getSourceId(),game)) {
        if (!creature.getId().equals(thisCreature.getId())) {
          if (watcher.creatureHasBlockedAttacker(creature,thisCreature,game)) {
            toDestroy.add(creature);
          }
        }
      }
      thisCreature.destroy(source.getSourceId(),game,false);
      for (      Permanent creature : toDestroy) {
        creature.destroy(source.getSourceId(),game,false);
      }
      return true;
    }
  }
  return false;
}",0.935064935064935
157748,"@Test public void TestCairnWandererEffect(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  execute();
  List<Ability> abilities=new ArrayList<>();
  abilities.add(FlyingAbility.getInstance());
  abilities.add(FearAbility.getInstance());
  abilities.add(FirstStrikeAbility.getInstance());
  abilities.add(DoubleStrikeAbility.getInstance());
  abilities.add(DeathtouchAbility.getInstance());
  abilities.add(HasteAbility.getInstance());
  abilities.add(LifelinkAbility.getInstance());
  abilities.add(ReachAbility.getInstance());
  abilities.add(ShroudAbility.getInstance());
  abilities.add(TrampleAbility.getInstance());
  abilities.add(VigilanceAbility.getInstance());
  assertAbilities(playerA,""String_Node_Str"",abilities);
  assertAbility(playerA,""String_Node_Str"",new PlainswalkAbility(),true);
  assertAbility(playerA,""String_Node_Str"",new ProtectionAbility(new FilterCard(""String_Node_Str"")),true);
}","@Test public void TestCairnWandererEffect(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerA,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerB,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerB,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerB,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerB,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerB,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerB,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerB,""String_Node_Str"");
  addCard(Zone.GRAVEYARD,playerB,""String_Node_Str"");
  execute();
  List<Ability> abilities=new ArrayList<>();
  abilities.add(FlyingAbility.getInstance());
  abilities.add(FearAbility.getInstance());
  abilities.add(FirstStrikeAbility.getInstance());
  abilities.add(DoubleStrikeAbility.getInstance());
  abilities.add(DeathtouchAbility.getInstance());
  abilities.add(HasteAbility.getInstance());
  abilities.add(LifelinkAbility.getInstance());
  abilities.add(ReachAbility.getInstance());
  abilities.add(ShroudAbility.getInstance());
  abilities.add(TrampleAbility.getInstance());
  abilities.add(VigilanceAbility.getInstance());
  assertAbilities(playerA,""String_Node_Str"",abilities);
  assertAbility(playerA,""String_Node_Str"",new PlainswalkAbility(),true);
  assertAbility(playerA,""String_Node_Str"",new ProtectionAbility(new FilterCard(""String_Node_Str"")),true);
}",0.9950186799501868
157749,"public KaerveksSpite copy(){
  return new KaerveksSpite(this);
}","@Override public KaerveksSpite copy(){
  return new KaerveksSpite(this);
}",0.927536231884058
157750,"@Override public boolean pay(Ability ability,Game game,UUID sourceId,UUID controllerId,boolean noMana,Cost costToPay){
  for (  Permanent permanent : game.getBattlefield().getAllActivePermanents(filter,controllerId,game)) {
    permanents.add(permanent.copy());
    permanent.sacrifice(sourceId,game);
  }
  return true;
}","@Override public boolean pay(Ability ability,Game game,UUID sourceId,UUID controllerId,boolean noMana,Cost costToPay){
  for (  Permanent permanent : game.getBattlefield().getAllActivePermanents(filter,controllerId,game)) {
    if (permanent.sacrifice(sourceId,game)) {
      permanents.add(permanent.copy());
    }
  }
  paid=true;
  return paid;
}",0.8077496274217586
157751,"public SacrificeAllCost(final SacrificeAllCost cost){
  super(cost);
  for (  Permanent permanent : cost.permanents) {
    this.permanents.add(permanent.copy());
  }
  this.filter=cost.filter.copy();
}","public SacrificeAllCost(final SacrificeAllCost cost){
  super(cost);
  this.permanents.addAll(cost.permanents);
  this.filter=cost.filter.copy();
}",0.7931034482758621
157752,"/** 
 * Not sure if it's triggered by just casting Angel's Grace or by casting it from an Isochron Scepter, but when the bug happens neither player is able to play spells or activate abilities anymore for the rest of the game. Maybe something related to Split Second?
 */
@Test public void testAngelsGrace(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",4);
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",4);
  addCard(Zone.HAND,playerB,""String_Node_Str"",2);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",2);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  addTarget(playerA,""String_Node_Str"");
  attack(2,playerB,""String_Node_Str"");
  attack(2,playerB,""String_Node_Str"");
  attack(2,playerB,""String_Node_Str"");
  attack(2,playerB,""String_Node_Str"");
  activateAbility(2,PhaseStep.DECLARE_BLOCKERS,playerA,""String_Node_Str"");
  setChoice(playerA,""String_Node_Str"");
  setChoice(playerA,""String_Node_Str"");
  castSpell(2,PhaseStep.POSTCOMBAT_MAIN,playerB,""String_Node_Str"",playerA);
  castSpell(3,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"",""String_Node_Str"");
  setStopAt(3,PhaseStep.BEGIN_COMBAT);
  execute();
  assertExileCount(""String_Node_Str"",1);
  assertGraveyardCount(playerA,""String_Node_Str"",0);
  assertLife(playerA,1);
  assertLife(playerB,20);
  assertGraveyardCount(playerB,""String_Node_Str"",2);
  assertGraveyardCount(playerB,""String_Node_Str"",1);
  assertPermanentCount(playerB,""String_Node_Str"",3);
  assertPermanentCount(playerA,""String_Node_Str"",1);
}","/** 
 * Not sure if it's triggered by just casting Angel's Grace or by casting it from an Isochron Scepter, but when the bug happens neither player is able to play spells or activate abilities anymore for the rest of the game. Maybe something related to Split Second?
 */
@Test public void testAngelsGrace(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",4);
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",4);
  addCard(Zone.HAND,playerB,""String_Node_Str"",2);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",2);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  addTarget(playerA,""String_Node_Str"");
  attack(2,playerB,""String_Node_Str"");
  attack(2,playerB,""String_Node_Str"");
  attack(2,playerB,""String_Node_Str"");
  attack(2,playerB,""String_Node_Str"");
  activateAbility(2,PhaseStep.DECLARE_BLOCKERS,playerA,""String_Node_Str"");
  setChoice(playerA,""String_Node_Str"");
  setChoice(playerA,""String_Node_Str"");
  castSpell(2,PhaseStep.POSTCOMBAT_MAIN,playerB,""String_Node_Str"",playerA);
  castSpell(3,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"",""String_Node_Str"");
  setStopAt(3,PhaseStep.BEGIN_COMBAT);
  execute();
  assertLife(playerA,1);
  assertLife(playerB,20);
  assertGraveyardCount(playerB,""String_Node_Str"",2);
  assertGraveyardCount(playerB,""String_Node_Str"",1);
  assertPermanentCount(playerB,""String_Node_Str"",3);
  assertPermanentCount(playerA,""String_Node_Str"",1);
  assertExileCount(""String_Node_Str"",1);
  assertGraveyardCount(playerA,""String_Node_Str"",0);
}",0.8371517027863777
157753,"public CardImpl(final CardImpl card){
  super(card);
  ownerId=card.ownerId;
  cardNumber=card.cardNumber;
  expansionSetCode=card.expansionSetCode;
  tokenDescriptor=card.tokenDescriptor;
  rarity=card.rarity;
  transformable=card.transformable;
  if (transformable) {
    secondSideCardClazz=card.secondSideCardClazz;
    nightCard=card.nightCard;
  }
  flipCard=card.flipCard;
  flipCardName=card.flipCardName;
  splitCard=card.splitCard;
  usesVariousArt=card.usesVariousArt;
  this.attachments.addAll(card.attachments);
}","public CardImpl(final CardImpl card){
  super(card);
  ownerId=card.ownerId;
  cardNumber=card.cardNumber;
  expansionSetCode=card.expansionSetCode;
  tokenDescriptor=card.tokenDescriptor;
  rarity=card.rarity;
  transformable=card.transformable;
  if (transformable) {
    secondSideCardClazz=card.secondSideCardClazz;
    nightCard=card.nightCard;
  }
  if (card.spellAbility != null) {
    spellAbility=card.getSpellAbility().copy();
  }
 else {
    spellAbility=null;
  }
  flipCard=card.flipCard;
  flipCardName=card.flipCardName;
  splitCard=card.splitCard;
  usesVariousArt=card.usesVariousArt;
  this.attachments.addAll(card.attachments);
}",0.8960817717206133
157754,"@Override public void assignNewId(){
  this.objectId=UUID.randomUUID();
  this.abilities.newOriginalId();
  this.abilities.setSourceId(objectId);
}","@Override public void assignNewId(){
  this.objectId=UUID.randomUUID();
  this.abilities.newOriginalId();
  this.abilities.setSourceId(objectId);
  if (this.spellAbility != null) {
    this.spellAbility.setSourceId(objectId);
  }
}",0.7777777777777778
157755,"@Override public boolean apply(Game game,Ability source){
  List<Permanent> permanents=game.getBattlefield().getActivePermanents(source.getControllerId(),game);
  Set<String> permanentNames=new HashSet<>();
  FilterCard filter=new FilterCard(""String_Node_Str"");
  for (  Permanent permanent : permanents) {
    permanentNames.add(permanent.getName());
    filter.add(new NamePredicate(permanent.getName()));
  }
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  Cards cards=new CardsImpl();
  Cards cardsFound=new CardsImpl();
  int count=Math.min(player.getLibrary().size(),7);
  for (int i=0; i < count; i++) {
    Card card=player.getLibrary().removeFromTop(game);
    if (card != null) {
      cards.add(card);
      if (permanentNames.contains(card.getName())) {
        cardsFound.add(card);
      }
    }
  }
  player.lookAtCards(""String_Node_Str"",cards,game);
  if (!cardsFound.isEmpty() && player.chooseUse(Outcome.PutCardInPlay,""String_Node_Str"",source,game)) {
    TargetCard target=new TargetCard(Zone.LIBRARY,filter);
    if (player.choose(Outcome.PutCardInPlay,cardsFound,target,game)) {
      Card card=cards.get(target.getFirstTarget(),game);
      if (card != null) {
        cards.remove(card);
        card.putOntoBattlefield(game,Zone.LIBRARY,source.getSourceId(),source.getControllerId());
      }
    }
  }
  player.putCardsOnBottomOfLibrary(cards,game,source,true);
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (controller != null && sourceObject != null) {
    Set<String> permanentNames=new HashSet<>();
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(source.getControllerId(),game)) {
      permanentNames.add(permanent.getName());
    }
    Cards cardsFromTop=new CardsImpl();
    cardsFromTop.addAll(controller.getLibrary().getTopCards(game,7));
    controller.lookAtCards(sourceObject.getIdName(),cardsFromTop,game);
    FilterCard filter=new FilterCard(""String_Node_Str"");
    List<NamePredicate> namePredicates=new ArrayList<>();
    for (    String name : permanentNames) {
      namePredicates.add(new NamePredicate(name));
    }
    if (!namePredicates.isEmpty() && !cardsFromTop.isEmpty()) {
      filter.add(Predicates.or(namePredicates));
      TargetCard target=new TargetCard(Zone.LIBRARY,filter);
      if (cardsFromTop.count(filter,source.getSourceId(),source.getControllerId(),game) > 0 && controller.chooseUse(Outcome.PutCardInPlay,""String_Node_Str"",source,game)) {
        if (controller.choose(Outcome.PutCardInPlay,cardsFromTop,target,game)) {
          Card card=cardsFromTop.get(target.getFirstTarget(),game);
          if (card != null) {
            controller.moveCards(card,Zone.BATTLEFIELD,source,game);
            cardsFromTop.remove(card);
          }
        }
      }
    }
    controller.putCardsOnBottomOfLibrary(cardsFromTop,game,source,true);
    return true;
  }
  return false;
}",0.2987012987012987
157756,"private boolean performConnect(boolean reconnect){
  if (currentConnection == null || !reconnect) {
    String server=MagePreferences.getServerAddress();
    int port=MagePreferences.getServerPort();
    String userName=MagePreferences.getUserName(server);
    String password=MagePreferences.getPassword(server);
    String proxyServer=PREFS.get(""String_Node_Str"",""String_Node_Str"");
    int proxyPort=Integer.parseInt(PREFS.get(""String_Node_Str"",""String_Node_Str""));
    ProxyType proxyType=ProxyType.valueByText(PREFS.get(""String_Node_Str"",""String_Node_Str""));
    String proxyUsername=PREFS.get(""String_Node_Str"",""String_Node_Str"");
    String proxyPassword=PREFS.get(""String_Node_Str"",""String_Node_Str"");
    setCursor(new Cursor(Cursor.WAIT_CURSOR));
    currentConnection=new Connection();
    currentConnection.setUsername(userName);
    currentConnection.setPassword(password);
    currentConnection.setHost(server);
    currentConnection.setPort(port);
    String allMAC=""String_Node_Str"";
    try {
      allMAC=currentConnection.getMAC();
    }
 catch (    SocketException ex) {
    }
    currentConnection.setUserIdStr(System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ MagePreferences.getUserNames()+ ""String_Node_Str""+ allMAC);
    currentConnection.setProxyType(proxyType);
    currentConnection.setProxyHost(proxyServer);
    currentConnection.setProxyPort(proxyPort);
    currentConnection.setProxyUsername(proxyUsername);
    currentConnection.setProxyPassword(proxyPassword);
    setUserPrefsToConnection(currentConnection);
  }
  try {
    LOGGER.debug(""String_Node_Str"" + currentConnection.getProxyType().toString() + ' '+ currentConnection.getProxyHost()+ ' '+ currentConnection.getProxyPort()+ ' '+ currentConnection.getProxyUsername());
    if (MageFrame.connect(currentConnection)) {
      prepareAndShowTablesPane();
      return true;
    }
 else {
      showMessage(""String_Node_Str"");
    }
  }
  finally {
    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
  }
  return false;
}","private boolean performConnect(boolean reconnect){
  if (currentConnection == null || !reconnect) {
    String server=MagePreferences.getServerAddress();
    int port=MagePreferences.getServerPort();
    String userName=MagePreferences.getUserName(server);
    String password=MagePreferences.getPassword(server);
    String proxyServer=PREFS.get(""String_Node_Str"",""String_Node_Str"");
    int proxyPort=Integer.parseInt(PREFS.get(""String_Node_Str"",""String_Node_Str""));
    ProxyType proxyType=ProxyType.valueByText(PREFS.get(""String_Node_Str"",""String_Node_Str""));
    String proxyUsername=PREFS.get(""String_Node_Str"",""String_Node_Str"");
    String proxyPassword=PREFS.get(""String_Node_Str"",""String_Node_Str"");
    setCursor(new Cursor(Cursor.WAIT_CURSOR));
    currentConnection=new Connection();
    currentConnection.setUsername(userName);
    currentConnection.setPassword(password);
    currentConnection.setHost(server);
    currentConnection.setPort(port);
    String allMAC=""String_Node_Str"";
    try {
      allMAC=Connection.getMAC();
    }
 catch (    SocketException ex) {
    }
    currentConnection.setUserIdStr(System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ MagePreferences.getUserNames()+ ""String_Node_Str""+ allMAC);
    currentConnection.setProxyType(proxyType);
    currentConnection.setProxyHost(proxyServer);
    currentConnection.setProxyPort(proxyPort);
    currentConnection.setProxyUsername(proxyUsername);
    currentConnection.setProxyPassword(proxyPassword);
    setUserPrefsToConnection(currentConnection);
  }
  try {
    LOGGER.debug(""String_Node_Str"" + currentConnection.getProxyType().toString() + ' '+ currentConnection.getProxyHost()+ ' '+ currentConnection.getProxyPort()+ ' '+ currentConnection.getProxyUsername());
    if (MageFrame.connect(currentConnection)) {
      prepareAndShowTablesPane();
      return true;
    }
 else {
      showMessage(""String_Node_Str"");
    }
  }
  finally {
    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
  }
  return false;
}",0.9983104030895488
157757,"@Override public synchronized void rollbackTurns(int turnsToRollback){
  if (gameOptions.rollbackTurnsAllowed) {
    int turnToGoTo=getTurnNum() - turnsToRollback;
    if (turnToGoTo < 1 || !gameStatesRollBack.containsKey(turnToGoTo)) {
      informPlayers(GameLog.getPlayerRequestColoredText(""String_Node_Str"" + turnsToRollback + ""String_Node_Str""));
    }
 else {
      GameState restore=gameStatesRollBack.get(turnToGoTo);
      if (restore != null) {
        informPlayers(GameLog.getPlayerRequestColoredText(""String_Node_Str"" + restore.getTurnNum()));
        state.restoreForRollBack(restore);
        playerList.setCurrent(state.getPlayerByOrderId());
        gameStatesRollBack.put(getTurnNum(),state.copy());
        executingRollback=true;
        for (        Player playerObject : getPlayers().values()) {
          if (playerObject.isHuman() && playerObject.isInGame()) {
            playerObject.abort();
            playerObject.resetPlayerPassedActions();
          }
        }
        fireUpdatePlayersEvent();
      }
    }
  }
}","@Override public synchronized void rollbackTurns(int turnsToRollback){
  if (gameOptions.rollbackTurnsAllowed) {
    int turnToGoTo=getTurnNum() - turnsToRollback;
    if (turnToGoTo < 1 || !gameStatesRollBack.containsKey(turnToGoTo)) {
      informPlayers(GameLog.getPlayerRequestColoredText(""String_Node_Str"" + turnsToRollback + ""String_Node_Str""));
    }
 else {
      GameState restore=gameStatesRollBack.get(turnToGoTo);
      if (restore != null) {
        informPlayers(GameLog.getPlayerRequestColoredText(""String_Node_Str"" + restore.getTurnNum()));
        state.restoreForRollBack(restore);
        playerList.setCurrent(state.getPlayerByOrderId());
        gameStatesRollBack.put(getTurnNum(),state.copy());
        executingRollback=true;
        for (        Player playerObject : getPlayers().values()) {
          if (playerObject.isHuman() && playerObject.isInGame()) {
            playerObject.resetStoredBookmark(this);
            playerObject.abort();
            playerObject.resetPlayerPassedActions();
          }
        }
        fireUpdatePlayersEvent();
      }
    }
  }
}",0.9757688723205964
157758,"private boolean handleLibraryCastableCards(Library library,Game game,UUID targetPlayerId){
  boolean alreadyChosenUse=false;
  Map<UUID,String> libraryCastableCardTracker=new HashMap<>();
  searchForCards:   do {
    for (    Card card : library.getCards(game)) {
      for (      Ability ability : card.getAbilities()) {
        if (ability.getClass() == WhileSearchingPlayFromLibraryAbility.class) {
          libraryCastableCardTracker.put(card.getId(),card.getName() + ""String_Node_Str"" + card.getId().toString().substring(0,3)+ ""String_Node_Str"");
        }
      }
    }
    if (!libraryCastableCardTracker.isEmpty()) {
      Player player=game.getPlayer(targetPlayerId);
      if (player != null) {
        if (player.isHuman() && (alreadyChosenUse || player.chooseUse(Outcome.AIDontUseIt,""String_Node_Str"",null,game))) {
          ChoiceImpl chooseCard=new ChoiceImpl();
          chooseCard.setMessage(""String_Node_Str"");
          Set<String> choice=new LinkedHashSet<>();
          for (          Entry<UUID,String> entry : libraryCastableCardTracker.entrySet()) {
            choice.add(new AbstractMap.SimpleEntry<UUID,String>(entry).getValue());
          }
          chooseCard.setChoices(choice);
          while (!choice.isEmpty()) {
            if (player.choose(Outcome.AIDontUseIt,chooseCard,game)) {
              String chosenCard=chooseCard.getChoice();
              for (              Entry<UUID,String> entry : libraryCastableCardTracker.entrySet()) {
                if (chosenCard.equals(entry.getValue())) {
                  Card card=game.getCard(entry.getKey());
                  if (card != null) {
                    player.cast(card.getSpellAbility(),game,false);
                  }
                  chooseCard.clearChoice();
                  libraryCastableCardTracker.clear();
                  alreadyChosenUse=true;
                  continue searchForCards;
                }
              }
              continue;
            }
            break;
          }
          return true;
        }
      }
    }
    break;
  }
 while (alreadyChosenUse);
  return alreadyChosenUse;
}","private boolean handleLibraryCastableCards(Library library,Game game,UUID targetPlayerId){
  boolean alreadyChosenUse=false;
  Map<UUID,String> libraryCastableCardTracker=new HashMap<>();
  searchForCards:   do {
    for (    Card card : library.getCards(game)) {
      for (      Ability ability : card.getAbilities()) {
        if (ability.getClass() == WhileSearchingPlayFromLibraryAbility.class) {
          libraryCastableCardTracker.put(card.getId(),card.getName() + ""String_Node_Str"" + card.getId().toString().substring(0,3)+ ""String_Node_Str"");
        }
      }
    }
    if (!libraryCastableCardTracker.isEmpty()) {
      Player player=game.getPlayer(targetPlayerId);
      if (player != null) {
        if (player.isHuman() && (alreadyChosenUse || player.chooseUse(Outcome.AIDontUseIt,""String_Node_Str"",null,game))) {
          ChoiceImpl chooseCard=new ChoiceImpl();
          chooseCard.setMessage(""String_Node_Str"");
          Set<String> choice=new LinkedHashSet<>();
          for (          Entry<UUID,String> entry : libraryCastableCardTracker.entrySet()) {
            choice.add(new AbstractMap.SimpleEntry<>(entry).getValue());
          }
          chooseCard.setChoices(choice);
          while (!choice.isEmpty()) {
            if (player.choose(Outcome.AIDontUseIt,chooseCard,game)) {
              String chosenCard=chooseCard.getChoice();
              for (              Entry<UUID,String> entry : libraryCastableCardTracker.entrySet()) {
                if (chosenCard.equals(entry.getValue())) {
                  Card card=game.getCard(entry.getKey());
                  if (card != null) {
                    player.cast(card.getSpellAbility(),game,false);
                  }
                  chooseCard.clearChoice();
                  libraryCastableCardTracker.clear();
                  alreadyChosenUse=true;
                  continue searchForCards;
                }
              }
              continue;
            }
            break;
          }
          return true;
        }
      }
    }
    break;
  }
 while (alreadyChosenUse);
  return alreadyChosenUse;
}",0.9974025974025974
157759,"protected void restoreState(int bookmark,String text,Game game){
  game.restoreState(bookmark,text);
  if (storedBookmark >= bookmark) {
    resetStoredBookmark(game);
  }
}","protected void restoreState(int bookmark,String text,Game game){
  if (storedBookmark > -1) {
    game.restoreState(bookmark,text);
    if (storedBookmark >= bookmark) {
      resetStoredBookmark(game);
    }
  }
}",0.8940568475452196
157760,"@Override public boolean searchLibrary(TargetCardInLibrary target,Game game,UUID targetPlayerId){
  Library searchedLibrary=null;
  String searchInfo=null;
  if (targetPlayerId.equals(playerId)) {
    searchInfo=getLogName() + ""String_Node_Str"";
    searchedLibrary=library;
  }
 else {
    Player targetPlayer=game.getPlayer(targetPlayerId);
    if (targetPlayer != null) {
      searchInfo=getLogName() + ""String_Node_Str"" + targetPlayer.getLogName();
      searchedLibrary=targetPlayer.getLibrary();
    }
  }
  if (searchedLibrary == null) {
    return false;
  }
  GameEvent event=GameEvent.getEvent(GameEvent.EventType.SEARCH_LIBRARY,targetPlayerId,playerId,playerId,Integer.MAX_VALUE);
  if (!game.replaceEvent(event)) {
    if (!game.isSimulation()) {
      game.informPlayers(searchInfo);
    }
    TargetCardInLibrary newTarget=target.copy();
    int count;
    int librarySearchLimit=event.getAmount();
    List<Card> cardsFromTop=null;
    do {
      if (librarySearchLimit == Integer.MAX_VALUE) {
        count=searchedLibrary.count(target.getFilter(),game);
      }
 else {
        Player targetPlayer=game.getPlayer(targetPlayerId);
        if (targetPlayer != null) {
          if (cardsFromTop == null) {
            cardsFromTop=new ArrayList<>(targetPlayer.getLibrary().getTopCards(game,librarySearchLimit));
          }
 else {
            cardsFromTop.retainAll(targetPlayer.getLibrary().getCards(game));
          }
        }
        newTarget.setCardLimit(Math.min(librarySearchLimit,cardsFromTop.size()));
        count=Math.min(searchedLibrary.count(target.getFilter(),game),librarySearchLimit);
      }
      if (count < target.getNumberOfTargets()) {
        newTarget.setMinNumberOfTargets(count);
      }
      if (newTarget.choose(Outcome.Neutral,playerId,targetPlayerId,game)) {
        if (targetPlayerId.equals(playerId) && handleLibraryCastableCards(library,game,targetPlayerId)) {
          newTarget.clearChosen();
          continue;
        }
        target.getTargets().clear();
        for (        UUID targetId : newTarget.getTargets()) {
          target.add(targetId,game);
        }
        game.fireEvent(GameEvent.getEvent(GameEvent.EventType.LIBRARY_SEARCHED,targetPlayerId,playerId));
      }
 else       if (targetPlayerId.equals(playerId) && handleLibraryCastableCards(library,game,targetPlayerId)) {
        newTarget.clearChosen();
        continue;
      }
      break;
    }
 while (true);
    return true;
  }
  return false;
}","@Override public boolean searchLibrary(TargetCardInLibrary target,Game game,UUID targetPlayerId){
  Library searchedLibrary=null;
  String searchInfo=null;
  if (targetPlayerId.equals(playerId)) {
    searchInfo=getLogName() + ""String_Node_Str"";
    searchedLibrary=library;
  }
 else {
    Player targetPlayer=game.getPlayer(targetPlayerId);
    if (targetPlayer != null) {
      searchInfo=getLogName() + ""String_Node_Str"" + targetPlayer.getLogName();
      searchedLibrary=targetPlayer.getLibrary();
    }
  }
  if (searchedLibrary == null) {
    return false;
  }
  GameEvent event=GameEvent.getEvent(GameEvent.EventType.SEARCH_LIBRARY,targetPlayerId,playerId,playerId,Integer.MAX_VALUE);
  if (!game.replaceEvent(event)) {
    if (!game.isSimulation()) {
      game.informPlayers(searchInfo);
    }
    TargetCardInLibrary newTarget=target.copy();
    int count;
    int librarySearchLimit=event.getAmount();
    List<Card> cardsFromTop=null;
    do {
      if (librarySearchLimit == Integer.MAX_VALUE) {
        count=searchedLibrary.count(target.getFilter(),game);
      }
 else {
        Player targetPlayer=game.getPlayer(targetPlayerId);
        if (targetPlayer == null) {
          return false;
        }
        if (cardsFromTop == null) {
          cardsFromTop=new ArrayList<>(targetPlayer.getLibrary().getTopCards(game,librarySearchLimit));
        }
 else {
          cardsFromTop.retainAll(targetPlayer.getLibrary().getCards(game));
        }
        newTarget.setCardLimit(Math.min(librarySearchLimit,cardsFromTop.size()));
        count=Math.min(searchedLibrary.count(target.getFilter(),game),librarySearchLimit);
      }
      if (count < target.getNumberOfTargets()) {
        newTarget.setMinNumberOfTargets(count);
      }
      if (newTarget.choose(Outcome.Neutral,playerId,targetPlayerId,game)) {
        if (targetPlayerId.equals(playerId) && handleLibraryCastableCards(library,game,targetPlayerId)) {
          newTarget.clearChosen();
          continue;
        }
        target.getTargets().clear();
        for (        UUID targetId : newTarget.getTargets()) {
          target.add(targetId,game);
        }
        game.fireEvent(GameEvent.getEvent(GameEvent.EventType.LIBRARY_SEARCHED,targetPlayerId,playerId));
      }
 else       if (targetPlayerId.equals(playerId) && handleLibraryCastableCards(library,game,targetPlayerId)) {
        newTarget.clearChosen();
        continue;
      }
      break;
    }
 while (true);
    return true;
  }
  return false;
}",0.9755020080321284
157761,"/** 
 * @param game
 * @param appliedEffects
 * @return the number that the player rolled
 */
@Override public int rollDice(Game game,ArrayList<UUID> appliedEffects,int numSides){
  int result=RandomUtil.nextInt(numSides) + 1;
  if (!game.isSimulation()) {
    game.informPlayers(""String_Node_Str"" + getLogName() + ""String_Node_Str""+ result+ ""String_Node_Str""+ numSides+ ""String_Node_Str"");
  }
  GameEvent event=new GameEvent(GameEvent.EventType.ROLL_DICE,playerId,null,playerId,result,true);
  event.setAppliedEffects(appliedEffects);
  event.setAmount(result);
  event.setData(numSides + ""String_Node_Str"");
  if (!game.replaceEvent(event)) {
    GameEvent ge=new GameEvent(GameEvent.EventType.DICE_ROLLED,playerId,null,playerId,event.getAmount(),event.getFlag());
    ge.setData(numSides + ""String_Node_Str"");
    game.fireEvent(ge);
  }
  return event.getAmount();
}","/** 
 * @param game
 * @param appliedEffects
 * @param numSides Number of sides the dice has
 * @return the number that the player rolled
 */
@Override public int rollDice(Game game,ArrayList<UUID> appliedEffects,int numSides){
  int result=RandomUtil.nextInt(numSides) + 1;
  if (!game.isSimulation()) {
    game.informPlayers(""String_Node_Str"" + getLogName() + ""String_Node_Str""+ result+ ""String_Node_Str""+ numSides+ ""String_Node_Str"");
  }
  GameEvent event=new GameEvent(GameEvent.EventType.ROLL_DICE,playerId,null,playerId,result,true);
  event.setAppliedEffects(appliedEffects);
  event.setAmount(result);
  event.setData(numSides + ""String_Node_Str"");
  if (!game.replaceEvent(event)) {
    GameEvent ge=new GameEvent(GameEvent.EventType.DICE_ROLLED,playerId,null,playerId,event.getAmount(),event.getFlag());
    ge.setData(numSides + ""String_Node_Str"");
    game.fireEvent(ge);
  }
  return event.getAmount();
}",0.9731843575418996
157762,"/** 
 * 116.5. Each time a player would get priority, the game first performs all applicable state-based actions as a single event (see rule 704, “State-Based Actions”), then repeats this process until no state-based actions are performed. Then triggered abilities are put on the stack (see rule 603, “Handling Triggered Abilities”). These steps repeat in order until no further state-based actions are performed and no abilities trigger. Then the player who would have received priority does so.
 * @return
 */
protected boolean checkStateBasedActions(){
  boolean somethingHappened=false;
  for (  Player player : state.getPlayers().values()) {
    if (!player.hasLost() && ((player.getLife() <= 0 && player.canLoseByZeroOrLessLife()) || player.isEmptyDraw() || player.getCounters().getCount(CounterType.POISON) >= 10)) {
      player.lost(this);
    }
  }
  Iterator<Card> copiedCards=this.getState().getCopiedCards().iterator();
  while (copiedCards.hasNext()) {
    Card card=copiedCards.next();
    if (card instanceof SplitCardHalf) {
      continue;
    }
    Zone zone=state.getZone(card.getId());
    if (zone != Zone.BATTLEFIELD && zone != Zone.STACK) {
switch (zone) {
case GRAVEYARD:
        for (        Player player : getPlayers().values()) {
          if (player.getGraveyard().contains(card.getId())) {
            player.getGraveyard().remove(card);
            break;
          }
        }
      break;
case HAND:
    for (    Player player : getPlayers().values()) {
      if (player.getHand().contains(card.getId())) {
        player.getHand().remove(card);
        break;
      }
    }
  break;
case LIBRARY:
for (Player player : getPlayers().values()) {
  if (player.getLibrary().getCard(card.getId(),this) != null) {
    player.getLibrary().remove(card.getId(),this);
    break;
  }
}
break;
case EXILED:
getExile().removeCard(card,this);
break;
}
copiedCards.remove();
}
}
List<Permanent> legendary=new ArrayList<>();
List<Permanent> worldEnchantment=new ArrayList<>();
for (Permanent perm : getBattlefield().getAllActivePermanents()) {
if (perm.isCreature()) {
if (perm.getToughness().getValue() <= 0) {
if (movePermanentToGraveyardWithInfo(perm)) {
somethingHappened=true;
continue;
}
}
 else if (perm.getToughness().getValue() <= perm.getDamage() || perm.isDeathtouched()) {
if (perm.destroy(null,this,false)) {
somethingHappened=true;
continue;
}
}
if (perm.getPairedCard() != null) {
Permanent paired=perm.getPairedCard().getPermanent(this);
if (paired == null || !perm.getControllerId().equals(paired.getControllerId()) || paired.getPairedCard() == null) {
perm.setPairedCard(null);
if (paired != null) {
paired.setPairedCard(null);
}
somethingHappened=true;
}
}
}
 else if (perm.getPairedCard() != null) {
Permanent paired=perm.getPairedCard().getPermanent(this);
perm.setPairedCard(null);
if (paired != null) {
paired.setPairedCard(null);
}
somethingHappened=true;
}
if (perm.isPlaneswalker()) {
if (perm.getCounters(this).getCount(CounterType.LOYALTY) == 0) {
if (movePermanentToGraveyardWithInfo(perm)) {
somethingHappened=true;
continue;
}
}
}
if (perm.isWorld()) {
worldEnchantment.add(perm);
}
if (StaticFilters.FILTER_PERMANENT_AURA.match(perm,this)) {
if (perm.getAttachedTo() == null) {
Card card=this.getCard(perm.getId());
if (card != null && !card.isCreature()) {
if (movePermanentToGraveyardWithInfo(perm)) {
somethingHappened=true;
}
}
}
 else {
SpellAbility spellAbility=perm.getSpellAbility();
if (spellAbility.getTargets().isEmpty()) {
for (Ability ability : perm.getAbilities(this)) {
if ((ability instanceof SpellAbility) && SpellAbilityType.BASE_ALTERNATE == ((SpellAbility)ability).getSpellAbilityType() && !ability.getTargets().isEmpty()) {
spellAbility=(SpellAbility)ability;
break;
}
}
}
if (spellAbility.getTargets().isEmpty()) {
Permanent enchanted=this.getPermanent(perm.getAttachedTo());
logger.error(""String_Node_Str"" + perm.getName() + ""String_Node_Str""+ (enchanted == null ? ""String_Node_Str"" : enchanted.getName()));
}
 else {
Target target=spellAbility.getTargets().get(0);
if (target instanceof TargetPermanent) {
Permanent attachedTo=getPermanent(perm.getAttachedTo());
if (attachedTo == null || !attachedTo.getAttachments().contains(perm.getId())) {
Card card=this.getCard(perm.getId());
if (card != null && card.isCreature()) {
UUID wasAttachedTo=perm.getAttachedTo();
perm.attachTo(null,this);
BestowAbility.becomeCreature(perm,this);
fireEvent(new GameEvent(GameEvent.EventType.UNATTACHED,wasAttachedTo,perm.getId(),perm.getControllerId()));
}
 else if (movePermanentToGraveyardWithInfo(perm)) {
somethingHappened=true;
}
}
 else {
Filter auraFilter=spellAbility.getTargets().get(0).getFilter();
if (auraFilter instanceof FilterControlledCreaturePermanent) {
if (!((FilterControlledCreaturePermanent)auraFilter).match(attachedTo,perm.getId(),perm.getControllerId(),this) || attachedTo.cantBeAttachedBy(perm,this)) {
  if (movePermanentToGraveyardWithInfo(perm)) {
    somethingHappened=true;
  }
}
}
 else if (!auraFilter.match(attachedTo,this) || attachedTo.cantBeAttachedBy(perm,this)) {
Card card=this.getCard(perm.getId());
if (card != null && card.isCreature()) {
  UUID wasAttachedTo=perm.getAttachedTo();
  perm.attachTo(null,this);
  fireEvent(new GameEvent(GameEvent.EventType.UNATTACHED,wasAttachedTo,perm.getId(),perm.getControllerId()));
}
 else if (movePermanentToGraveyardWithInfo(perm)) {
  somethingHappened=true;
}
}
}
}
 else if (target instanceof TargetPlayer) {
Player attachedToPlayer=getPlayer(perm.getAttachedTo());
if (attachedToPlayer == null || attachedToPlayer.hasLost()) {
if (movePermanentToGraveyardWithInfo(perm)) {
somethingHappened=true;
}
}
 else {
Filter auraFilter=spellAbility.getTargets().get(0).getFilter();
if (!auraFilter.match(attachedToPlayer,this) || attachedToPlayer.hasProtectionFrom(perm,this)) {
if (movePermanentToGraveyardWithInfo(perm)) {
  somethingHappened=true;
}
}
}
}
 else if (target instanceof TargetCard) {
Card attachedTo=getCard(perm.getAttachedTo());
if (attachedTo == null || !((TargetCard)spellAbility.getTargets().get(0)).canTarget(perm.getControllerId(),perm.getAttachedTo(),spellAbility,this)) {
if (movePermanentToGraveyardWithInfo(perm)) {
attachedTo.removeAttachment(perm.getId(),this);
somethingHappened=true;
}
}
}
}
}
}
if (this.getState().isLegendaryRuleActive() && StaticFilters.FILTER_PERMANENT_LEGENDARY.match(perm,this)) {
legendary.add(perm);
}
if (StaticFilters.FILTER_PERMANENT_EQUIPMENT.match(perm,this)) {
if (perm.getAttachedTo() != null) {
Permanent attachedTo=getPermanent(perm.getAttachedTo());
if (attachedTo != null) {
for (Ability ability : perm.getAbilities(this)) {
if (ability instanceof AttachableToRestrictedAbility) {
if (!((AttachableToRestrictedAbility)ability).canEquip(attachedTo,null,this)) {
attachedTo=null;
break;
}
}
}
}
if (attachedTo == null || !attachedTo.getAttachments().contains(perm.getId())) {
UUID wasAttachedTo=perm.getAttachedTo();
perm.attachTo(null,this);
fireEvent(new GameEvent(GameEvent.EventType.UNATTACHED,wasAttachedTo,perm.getId(),perm.getControllerId()));
}
 else if (!attachedTo.isCreature() || attachedTo.hasProtectionFrom(perm,this)) {
if (attachedTo.removeAttachment(perm.getId(),this)) {
somethingHappened=true;
}
}
}
}
if (StaticFilters.FILTER_PERMANENT_FORTIFICATION.match(perm,this)) {
if (perm.getAttachedTo() != null) {
Permanent land=getPermanent(perm.getAttachedTo());
if (land == null || !land.getAttachments().contains(perm.getId())) {
perm.attachTo(null,this);
}
 else if (!land.isLand() || land.hasProtectionFrom(perm,this)) {
if (land.removeAttachment(perm.getId(),this)) {
somethingHappened=true;
}
}
}
}
if (!perm.getAttachments().isEmpty()) {
for (UUID attachmentId : perm.getAttachments()) {
Permanent attachment=getPermanent(attachmentId);
if (attachment != null && (attachment.isCreature() || !(attachment.getSubtype(this).contains(SubType.AURA) || attachment.getSubtype(this).contains(SubType.EQUIPMENT) || attachment.getSubtype(this).contains(SubType.FORTIFICATION)))) {
if (perm.removeAttachment(attachment.getId(),this)) {
somethingHappened=true;
break;
}
}
}
}
if (perm.getCounters(this).containsKey(CounterType.P1P1) && perm.getCounters(this).containsKey(CounterType.M1M1)) {
int p1p1=perm.getCounters(this).getCount(CounterType.P1P1);
int m1m1=perm.getCounters(this).getCount(CounterType.M1M1);
int min=Math.min(p1p1,m1m1);
perm.getCounters(this).removeCounter(CounterType.P1P1,min);
perm.getCounters(this).removeCounter(CounterType.M1M1,min);
}
for (Ability ability : perm.getAbilities(this)) {
if (ability instanceof CantHaveMoreThanAmountCountersSourceAbility) {
CantHaveMoreThanAmountCountersSourceAbility counterAbility=(CantHaveMoreThanAmountCountersSourceAbility)ability;
int count=perm.getCounters(this).getCount(counterAbility.getCounterType());
if (count > counterAbility.getAmount()) {
perm.removeCounters(counterAbility.getCounterType().getName(),count - counterAbility.getAmount(),this);
somethingHappened=true;
}
}
}
}
if (legendary.size() > 1) {
for (Permanent legend : legendary) {
FilterPermanent filterLegendName=new FilterPermanent();
filterLegendName.add(new SupertypePredicate(SuperType.LEGENDARY));
filterLegendName.add(new NamePredicate(legend.getName()));
filterLegendName.add(new ControllerIdPredicate(legend.getControllerId()));
if (getBattlefield().contains(filterLegendName,legend.getControllerId(),this,2)) {
if (!replaceEvent(GameEvent.getEvent(GameEvent.EventType.DESTROY_PERMANENT_BY_LEGENDARY_RULE,legend.getId(),legend.getControllerId()))) {
Player controller=this.getPlayer(legend.getControllerId());
if (controller != null) {
Target targetLegendaryToKeep=new TargetPermanent(filterLegendName);
targetLegendaryToKeep.setTargetName(legend.getName() + ""String_Node_Str"");
controller.chooseTarget(Outcome.Benefit,targetLegendaryToKeep,null,this);
for (Permanent dupLegend : getBattlefield().getActivePermanents(filterLegendName,legend.getControllerId(),this)) {
if (!targetLegendaryToKeep.getTargets().contains(dupLegend.getId())) {
movePermanentToGraveyardWithInfo(dupLegend);
}
}
}
return true;
}
}
}
}
if (worldEnchantment.size() > 1) {
int newestCard=-1;
Permanent newestPermanent=null;
for (Permanent permanent : worldEnchantment) {
if (newestCard == -1) {
newestCard=permanent.getCreateOrder();
newestPermanent=permanent;
}
 else if (newestCard < permanent.getCreateOrder()) {
newestCard=permanent.getCreateOrder();
newestPermanent=permanent;
}
 else if (newestCard == permanent.getCreateOrder()) {
newestPermanent=null;
}
}
for (Permanent permanent : worldEnchantment) {
if (!Objects.equals(newestPermanent,permanent)) {
movePermanentToGraveyardWithInfo(permanent);
somethingHappened=true;
}
}
}
return somethingHappened;
}","/** 
 * 116.5. Each time a player would get priority, the game first performs all applicable state-based actions as a single event (see rule 704, “State-Based Actions”), then repeats this process until no state-based actions are performed. Then triggered abilities are put on the stack (see rule 603, “Handling Triggered Abilities”). These steps repeat in order until no further state-based actions are performed and no abilities trigger. Then the player who would have received priority does so.
 * @return
 */
protected boolean checkStateBasedActions(){
  boolean somethingHappened=false;
  for (  Player player : state.getPlayers().values()) {
    if (!player.hasLost() && ((player.getLife() <= 0 && player.canLoseByZeroOrLessLife()) || player.isEmptyDraw() || player.getCounters().getCount(CounterType.POISON) >= 10)) {
      player.lost(this);
    }
  }
  Iterator<Card> copiedCards=this.getState().getCopiedCards().iterator();
  while (copiedCards.hasNext()) {
    Card card=copiedCards.next();
    if (card instanceof SplitCardHalf) {
      continue;
    }
    Zone zone=state.getZone(card.getId());
    if (zone != Zone.BATTLEFIELD && zone != Zone.STACK) {
switch (zone) {
case GRAVEYARD:
        for (        Player player : getPlayers().values()) {
          if (player.getGraveyard().contains(card.getId())) {
            player.getGraveyard().remove(card);
            break;
          }
        }
      break;
case HAND:
    for (    Player player : getPlayers().values()) {
      if (player.getHand().contains(card.getId())) {
        player.getHand().remove(card);
        break;
      }
    }
  break;
case LIBRARY:
for (Player player : getPlayers().values()) {
  if (player.getLibrary().getCard(card.getId(),this) != null) {
    player.getLibrary().remove(card.getId(),this);
    break;
  }
}
break;
case EXILED:
getExile().removeCard(card,this);
break;
}
copiedCards.remove();
}
}
List<Permanent> legendary=new ArrayList<>();
List<Permanent> worldEnchantment=new ArrayList<>();
for (Permanent perm : getBattlefield().getAllActivePermanents()) {
if (perm.isCreature()) {
if (perm.getToughness().getValue() <= 0) {
if (movePermanentToGraveyardWithInfo(perm)) {
somethingHappened=true;
continue;
}
}
 else if (perm.getToughness().getValue() <= perm.getDamage() || perm.isDeathtouched()) {
if (perm.destroy(null,this,false)) {
somethingHappened=true;
continue;
}
}
if (perm.getPairedCard() != null) {
Permanent paired=perm.getPairedCard().getPermanent(this);
if (paired == null || !perm.getControllerId().equals(paired.getControllerId()) || paired.getPairedCard() == null) {
perm.setPairedCard(null);
if (paired != null) {
paired.setPairedCard(null);
}
somethingHappened=true;
}
}
}
 else if (perm.getPairedCard() != null) {
Permanent paired=perm.getPairedCard().getPermanent(this);
perm.setPairedCard(null);
if (paired != null) {
paired.setPairedCard(null);
}
somethingHappened=true;
}
if (perm.isPlaneswalker()) {
if (perm.getCounters(this).getCount(CounterType.LOYALTY) == 0) {
if (movePermanentToGraveyardWithInfo(perm)) {
somethingHappened=true;
continue;
}
}
}
if (perm.isWorld()) {
worldEnchantment.add(perm);
}
if (StaticFilters.FILTER_PERMANENT_AURA.match(perm,this)) {
if (perm.getAttachedTo() == null) {
Card card=this.getCard(perm.getId());
if (card != null && !card.isCreature()) {
if (movePermanentToGraveyardWithInfo(perm)) {
somethingHappened=true;
}
}
}
 else {
SpellAbility spellAbility=perm.getSpellAbility();
if (spellAbility.getTargets().isEmpty()) {
for (Ability ability : perm.getAbilities(this)) {
if ((ability instanceof SpellAbility) && SpellAbilityType.BASE_ALTERNATE == ((SpellAbility)ability).getSpellAbilityType() && !ability.getTargets().isEmpty()) {
spellAbility=(SpellAbility)ability;
break;
}
}
}
if (spellAbility.getTargets().isEmpty()) {
Permanent enchanted=this.getPermanent(perm.getAttachedTo());
logger.error(""String_Node_Str"" + perm.getName() + ""String_Node_Str""+ (enchanted == null ? ""String_Node_Str"" : enchanted.getName()));
}
 else {
Target target=spellAbility.getTargets().get(0);
if (target instanceof TargetPermanent) {
Permanent attachedTo=getPermanent(perm.getAttachedTo());
if (attachedTo == null || !attachedTo.getAttachments().contains(perm.getId())) {
Card card=this.getCard(perm.getId());
if (card != null && card.isCreature()) {
UUID wasAttachedTo=perm.getAttachedTo();
perm.attachTo(null,this);
BestowAbility.becomeCreature(perm,this);
fireEvent(new GameEvent(GameEvent.EventType.UNATTACHED,wasAttachedTo,perm.getId(),perm.getControllerId()));
}
 else if (movePermanentToGraveyardWithInfo(perm)) {
somethingHappened=true;
}
}
 else {
Filter auraFilter=spellAbility.getTargets().get(0).getFilter();
if (auraFilter instanceof FilterControlledCreaturePermanent) {
if (!((FilterControlledCreaturePermanent)auraFilter).match(attachedTo,perm.getId(),perm.getControllerId(),this) || attachedTo.cantBeAttachedBy(perm,this)) {
  if (movePermanentToGraveyardWithInfo(perm)) {
    somethingHappened=true;
  }
}
}
 else if (!auraFilter.match(attachedTo,this) || attachedTo.cantBeAttachedBy(perm,this)) {
Card card=this.getCard(perm.getId());
if (card != null && card.isCreature()) {
  UUID wasAttachedTo=perm.getAttachedTo();
  perm.attachTo(null,this);
  BestowAbility.becomeCreature(perm,this);
  fireEvent(new GameEvent(GameEvent.EventType.UNATTACHED,wasAttachedTo,perm.getId(),perm.getControllerId()));
}
 else if (movePermanentToGraveyardWithInfo(perm)) {
  somethingHappened=true;
}
}
}
}
 else if (target instanceof TargetPlayer) {
Player attachedToPlayer=getPlayer(perm.getAttachedTo());
if (attachedToPlayer == null || attachedToPlayer.hasLost()) {
if (movePermanentToGraveyardWithInfo(perm)) {
somethingHappened=true;
}
}
 else {
Filter auraFilter=spellAbility.getTargets().get(0).getFilter();
if (!auraFilter.match(attachedToPlayer,this) || attachedToPlayer.hasProtectionFrom(perm,this)) {
if (movePermanentToGraveyardWithInfo(perm)) {
  somethingHappened=true;
}
}
}
}
 else if (target instanceof TargetCard) {
Card attachedTo=getCard(perm.getAttachedTo());
if (attachedTo == null || !((TargetCard)spellAbility.getTargets().get(0)).canTarget(perm.getControllerId(),perm.getAttachedTo(),spellAbility,this)) {
if (movePermanentToGraveyardWithInfo(perm)) {
if (attachedTo != null) {
  attachedTo.removeAttachment(perm.getId(),this);
}
somethingHappened=true;
}
}
}
}
}
}
if (this.getState().isLegendaryRuleActive() && StaticFilters.FILTER_PERMANENT_LEGENDARY.match(perm,this)) {
legendary.add(perm);
}
if (StaticFilters.FILTER_PERMANENT_EQUIPMENT.match(perm,this)) {
if (perm.getAttachedTo() != null) {
Permanent attachedTo=getPermanent(perm.getAttachedTo());
if (attachedTo != null) {
for (Ability ability : perm.getAbilities(this)) {
if (ability instanceof AttachableToRestrictedAbility) {
if (!((AttachableToRestrictedAbility)ability).canEquip(attachedTo,null,this)) {
attachedTo=null;
break;
}
}
}
}
if (attachedTo == null || !attachedTo.getAttachments().contains(perm.getId())) {
UUID wasAttachedTo=perm.getAttachedTo();
perm.attachTo(null,this);
fireEvent(new GameEvent(GameEvent.EventType.UNATTACHED,wasAttachedTo,perm.getId(),perm.getControllerId()));
}
 else if (!attachedTo.isCreature() || attachedTo.hasProtectionFrom(perm,this)) {
if (attachedTo.removeAttachment(perm.getId(),this)) {
somethingHappened=true;
}
}
}
}
if (StaticFilters.FILTER_PERMANENT_FORTIFICATION.match(perm,this)) {
if (perm.getAttachedTo() != null) {
Permanent land=getPermanent(perm.getAttachedTo());
if (land == null || !land.getAttachments().contains(perm.getId())) {
perm.attachTo(null,this);
}
 else if (!land.isLand() || land.hasProtectionFrom(perm,this)) {
if (land.removeAttachment(perm.getId(),this)) {
somethingHappened=true;
}
}
}
}
if (!perm.getAttachments().isEmpty()) {
for (UUID attachmentId : perm.getAttachments()) {
Permanent attachment=getPermanent(attachmentId);
if (attachment != null && (attachment.isCreature() || !(attachment.getSubtype(this).contains(SubType.AURA) || attachment.getSubtype(this).contains(SubType.EQUIPMENT) || attachment.getSubtype(this).contains(SubType.FORTIFICATION)))) {
if (perm.removeAttachment(attachment.getId(),this)) {
somethingHappened=true;
break;
}
}
}
}
if (perm.getCounters(this).containsKey(CounterType.P1P1) && perm.getCounters(this).containsKey(CounterType.M1M1)) {
int p1p1=perm.getCounters(this).getCount(CounterType.P1P1);
int m1m1=perm.getCounters(this).getCount(CounterType.M1M1);
int min=Math.min(p1p1,m1m1);
perm.getCounters(this).removeCounter(CounterType.P1P1,min);
perm.getCounters(this).removeCounter(CounterType.M1M1,min);
}
for (Ability ability : perm.getAbilities(this)) {
if (ability instanceof CantHaveMoreThanAmountCountersSourceAbility) {
CantHaveMoreThanAmountCountersSourceAbility counterAbility=(CantHaveMoreThanAmountCountersSourceAbility)ability;
int count=perm.getCounters(this).getCount(counterAbility.getCounterType());
if (count > counterAbility.getAmount()) {
perm.removeCounters(counterAbility.getCounterType().getName(),count - counterAbility.getAmount(),this);
somethingHappened=true;
}
}
}
}
if (legendary.size() > 1) {
for (Permanent legend : legendary) {
FilterPermanent filterLegendName=new FilterPermanent();
filterLegendName.add(new SupertypePredicate(SuperType.LEGENDARY));
filterLegendName.add(new NamePredicate(legend.getName()));
filterLegendName.add(new ControllerIdPredicate(legend.getControllerId()));
if (getBattlefield().contains(filterLegendName,legend.getControllerId(),this,2)) {
if (!replaceEvent(GameEvent.getEvent(GameEvent.EventType.DESTROY_PERMANENT_BY_LEGENDARY_RULE,legend.getId(),legend.getControllerId()))) {
Player controller=this.getPlayer(legend.getControllerId());
if (controller != null) {
Target targetLegendaryToKeep=new TargetPermanent(filterLegendName);
targetLegendaryToKeep.setTargetName(legend.getName() + ""String_Node_Str"");
controller.chooseTarget(Outcome.Benefit,targetLegendaryToKeep,null,this);
for (Permanent dupLegend : getBattlefield().getActivePermanents(filterLegendName,legend.getControllerId(),this)) {
if (!targetLegendaryToKeep.getTargets().contains(dupLegend.getId())) {
movePermanentToGraveyardWithInfo(dupLegend);
}
}
}
return true;
}
}
}
}
if (worldEnchantment.size() > 1) {
int newestCard=-1;
Permanent newestPermanent=null;
for (Permanent permanent : worldEnchantment) {
if (newestCard == -1) {
newestCard=permanent.getCreateOrder();
newestPermanent=permanent;
}
 else if (newestCard < permanent.getCreateOrder()) {
newestCard=permanent.getCreateOrder();
newestPermanent=permanent;
}
 else if (newestCard == permanent.getCreateOrder()) {
newestPermanent=null;
}
}
for (Permanent permanent : worldEnchantment) {
if (!Objects.equals(newestPermanent,permanent)) {
movePermanentToGraveyardWithInfo(permanent);
somethingHappened=true;
}
}
}
return somethingHappened;
}",0.9965972125110708
157763,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject mageObject=game.getObject(source.getSourceId());
  if (controller != null & mageObject != null) {
    SubType subType=ChooseCreatureTypeEffect.getChoosenCreatureType(source.getSourceId(),game);
    if (subType != null) {
      FilterPermanent filter=new FilterCreaturePermanent(""String_Node_Str"");
      filter.add(Predicates.not(new SubtypePredicate(subType)));
      return new DestroyAllEffect(filter).apply(game,source);
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Choice typeChoice=new ChoiceCreatureType(game.getObject(source.getSourceId()));
  if (controller != null && controller.choose(outcome,typeChoice,game)) {
    game.informPlayers(controller.getLogName() + ""String_Node_Str"" + typeChoice.getChoice());
    FilterCreaturePermanent filter=new FilterCreaturePermanent(""String_Node_Str"");
    filter.add(Predicates.not(new SubtypePredicate(SubType.byDescription(typeChoice.getChoice()))));
    return new DestroyAllEffect(filter).apply(game,source);
  }
  return false;
}",0.3327868852459016
157764,"@Override protected void actionWithSelectedCards(Cards cards,Game game,Ability source,String windowName){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null && foundCardsToPick > 0) {
    if (!optional || player.chooseUse(Outcome.DrawCard,getMayText(),source,game)) {
      FilterCard pickFilter=filter.copy();
      pickFilter.setMessage(getPickText());
      TargetCard target=new TargetCard((upTo ? 0 : numberToPick.calculate(game,source,this)),numberToPick.calculate(game,source,this),Zone.LIBRARY,pickFilter);
      if (player.choose(Outcome.DrawCard,cards,target,game)) {
        Cards pickedCards=new CardsImpl(target.getTargets());
        cards.removeAll(pickedCards);
        if (targetPickedCards == Zone.LIBRARY && !putOnTopSelected) {
          player.putCardsOnBottomOfLibrary(pickedCards,game,source,true);
        }
 else {
          player.moveCards(pickedCards.getCards(game),targetPickedCards,source,game);
        }
        if (revealPickedCards) {
          player.revealCards(windowName,pickedCards,game);
        }
      }
    }
  }
}","@Override protected void actionWithSelectedCards(Cards cards,Game game,Ability source,String windowName){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null && foundCardsToPick > 0) {
    if (!optional || player.chooseUse(Outcome.DrawCard,getMayText(),source,game)) {
      FilterCard pickFilter=filter.copy();
      pickFilter.setMessage(getPickText());
      int number=min(cards.size(),numberToPick.calculate(game,source,this));
      TargetCard target=new TargetCard((upTo ? 0 : number),number,Zone.LIBRARY,pickFilter);
      if (player.choose(Outcome.DrawCard,cards,target,game)) {
        Cards pickedCards=new CardsImpl(target.getTargets());
        cards.removeAll(pickedCards);
        if (targetPickedCards == Zone.LIBRARY && !putOnTopSelected) {
          player.putCardsOnBottomOfLibrary(pickedCards,game,source,true);
        }
 else {
          player.moveCards(pickedCards.getCards(game),targetPickedCards,source,game);
        }
        if (revealPickedCards) {
          player.revealCards(windowName,pickedCards,game);
        }
      }
    }
  }
}",0.9334557136301056
157765,"/** 
 * Put the rest of the cards back to defined zone
 * @param source
 * @param player
 * @param cards
 * @param game
 */
protected void putCardsBack(Ability source,Player player,Cards cards,Game game){
switch (targetZoneLookedCards) {
case LIBRARY:
    if (putOnTop) {
      player.putCardsOnTopOfLibrary(cards,game,source,!backInRandomOrder);
    }
  break;
case GRAVEYARD:
player.moveCards(cards,Zone.GRAVEYARD,source,game);
break;
default :
}
}","/** 
 * Put the rest of the cards back to defined zone
 * @param source
 * @param player
 * @param cards
 * @param game
 */
protected void putCardsBack(Ability source,Player player,Cards cards,Game game){
switch (targetZoneLookedCards) {
case LIBRARY:
    if (putOnTop) {
      player.putCardsOnTopOfLibrary(cards,game,source,!backInRandomOrder);
    }
 else {
      player.putCardsOnBottomOfLibrary(cards,game,source,!backInRandomOrder);
    }
  break;
case GRAVEYARD:
player.moveCards(cards,Zone.GRAVEYARD,source,game);
break;
default :
}
}",0.907258064516129
157766,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent sourcePermanent=game.getPermanentOrLKIBattlefield(source.getSourceId());
  if (controller != null && sourcePermanent != null) {
    UUID exileId=CardUtil.getCardExileZoneId(game,source);
    int numberOfCards=0;
    ExileZone exileZone=game.getExile().getExileZone(exileId);
    if (exileZone != null) {
      for (      Card card : exileZone.getCards(game)) {
        numberOfCards++;
        card.moveToZone(Zone.HAND,source.getSourceId(),game,true);
        card.setFaceDown(false,game);
      }
    }
    if (numberOfCards > 0) {
      game.informPlayers(sourcePermanent.getLogName() + ""String_Node_Str"" + controller.getLogName()+ ""String_Node_Str""+ numberOfCards+ ""String_Node_Str""+ (numberOfCards > 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent sourcePermanent=game.getPermanentOrLKIBattlefield(source.getSourceId());
  if (controller != null && sourcePermanent != null) {
    UUID exileId=CardUtil.getCardExileZoneId(game,source.getSourceId(),true);
    int numberOfCards=0;
    ExileZone exileZone=game.getExile().getExileZone(exileId);
    if (exileZone != null) {
      for (      Card card : exileZone.getCards(game)) {
        numberOfCards++;
        card.moveToZone(Zone.HAND,source.getSourceId(),game,true);
        card.setFaceDown(false,game);
      }
    }
    if (numberOfCards > 0) {
      game.informPlayers(sourcePermanent.getLogName() + ""String_Node_Str"" + controller.getLogName()+ ""String_Node_Str""+ numberOfCards+ ""String_Node_Str""+ (numberOfCards > 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    return true;
  }
  return false;
}",0.9900471451021478
157767,"@Override public boolean checkTrigger(GameEvent event,Game game){
  DamagedPlayerEvent damageEvent=(DamagedPlayerEvent)event;
  Permanent p=game.getPermanent(event.getSourceId());
  if (damageEvent.isCombatDamage() && p != null && p.getAttachments().contains(this.getSourceId())) {
    game.getState().setValue(new StringBuilder(""String_Node_Str"").append(getSourceId().toString()).toString(),new Integer(damageEvent.getAmount()));
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  DamagedPlayerEvent damageEvent=(DamagedPlayerEvent)event;
  Permanent damageSource=game.getPermanent(event.getSourceId());
  if (damageEvent.isCombatDamage() && damageSource != null && damageSource.getAttachments().contains(this.getSourceId())) {
    game.getState().setValue(""String_Node_Str"" + getSourceId(),damageEvent.getAmount());
    return true;
  }
  return false;
}",0.884742041712404
157768,"@Override public boolean apply(Game game,Ability source){
  Integer damage=(Integer)game.getState().getValue(new StringBuilder(""String_Node_Str"").append(source.getSourceId().toString()).toString());
  if (damage != null) {
    return (new CreateTokenEffect(new SaprolingToken(),damage.intValue()).apply(game,source));
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Integer damage=(Integer)game.getState().getValue(""String_Node_Str"" + source.getSourceId());
  if (damage != null) {
    return (new CreateTokenEffect(new SaprolingToken(),damage).apply(game,source));
  }
  return false;
}",0.896774193548387
157769,"@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    TargetCardInHand target=new TargetCardInHand(new FilterLandCard());
    Cost cost=new DiscardTargetCost(target);
    if (cost.canPay(source,source.getSourceId(),source.getControllerId(),game) && player.chooseUse(outcome,""String_Node_Str"",source,game) && player.chooseTarget(Outcome.Discard,target,source,game)) {
      player.discard(game.getCard(target.getFirstTarget()),source,game);
      return false;
    }
 else {
      Permanent permanent=game.getPermanent(event.getTargetId());
      if (permanent != null) {
        player.moveCards(permanent,Zone.GRAVEYARD,source,game);
      }
      return true;
    }
  }
  return false;
}","@Override public boolean replaceEvent(GameEvent event,Ability source,Game game){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    TargetCardInHand target=new TargetCardInHand(new FilterLandCard());
    Cost cost=new DiscardTargetCost(target);
    if (cost.canPay(source,source.getSourceId(),source.getControllerId(),game) && player.chooseUse(outcome,""String_Node_Str"",source,game) && player.chooseTarget(Outcome.Discard,target,source,game)) {
      player.discard(game.getCard(target.getFirstTarget()),source,game);
      return false;
    }
 else {
      Permanent permanent=game.getPermanentEntering(event.getTargetId());
      if (permanent != null) {
        player.moveCards(permanent,Zone.GRAVEYARD,source,game);
      }
      return true;
    }
  }
  return false;
}",0.9950372208436724
157770,"@Override public Card getRandom(Game game){
  if (this.isEmpty()) {
    return null;
  }
  UUID[] cards=this.toArray(new UUID[this.size()]);
  return game.getCard(cards[RandomUtil.nextInt(cards.length)]);
}","@Override public Card getRandom(Game game){
  if (this.isEmpty()) {
    return null;
  }
  UUID[] cards=this.toArray(new UUID[this.size()]);
  MageObject object=game.getObject(cards[RandomUtil.nextInt(cards.length)]);
  if (object instanceof Card) {
    return (Card)object;
  }
  return null;
}",0.7465069860279441
157771,"@Override public boolean chooseTarget(Outcome outcome,Cards cards,TargetCard target,Ability source,Game game){
  if (cards.isEmpty()) {
    return !target.isRequired(source);
  }
  Card card=cards.getRandom(game);
  target.addTarget(card.getId(),source,game);
  return true;
}","@Override public boolean chooseTarget(Outcome outcome,Cards cards,TargetCard target,Ability source,Game game){
  if (cards.isEmpty()) {
    return !target.isRequired(source);
  }
  Card card=cards.getRandom(game);
  if (card != null) {
    target.addTarget(card.getId(),source,game);
    return true;
  }
  return false;
}",0.8795986622073578
157772,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  String cardName=(String)game.getState().getValue(source.getSourceId().toString() + NameACardEffect.INFO_KEY);
  if (sourceObject != null && controller != null && cardName != null && !cardName.isEmpty()) {
    if (!controller.getHand().isEmpty()) {
      Cards revealed=new CardsImpl();
      Card card=controller.getHand().getRandom(game);
      revealed.add(card);
      controller.revealCards(sourceObject.getIdName(),revealed,game);
      if (card.getName().equals(cardName)) {
        Permanent creature=game.getPermanent(targetPointer.getFirst(game,source));
        if (creature != null) {
          creature.damage(2,source.getSourceId(),game,false,true);
          return true;
        }
        Player player=game.getPlayer(targetPointer.getFirst(game,source));
        if (player != null) {
          player.damage(2,source.getSourceId(),game,false,true);
          return true;
        }
        return false;
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  String cardName=(String)game.getState().getValue(source.getSourceId().toString() + NameACardEffect.INFO_KEY);
  if (sourceObject != null && controller != null && cardName != null && !cardName.isEmpty()) {
    if (!controller.getHand().isEmpty()) {
      Cards revealed=new CardsImpl();
      Card card=controller.getHand().getRandom(game);
      if (card == null) {
        return false;
      }
      revealed.add(card);
      controller.revealCards(sourceObject.getIdName(),revealed,game);
      if (card.getName().equals(cardName)) {
        Permanent creature=game.getPermanent(targetPointer.getFirst(game,source));
        if (creature != null) {
          creature.damage(2,source.getSourceId(),game,false,true);
          return true;
        }
        Player player=game.getPlayer(targetPointer.getFirst(game,source));
        if (player != null) {
          player.damage(2,source.getSourceId(),game,false,true);
          return true;
        }
        return false;
      }
    }
    return true;
  }
  return false;
}",0.9764111204717776
157773,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  Cards cards=new CardsImpl();
  boolean planeswalkerIncluded=false;
  for (int i=0; i < 7; i++) {
    Card card=player.getLibrary().removeFromTop(game);
    if (card != null) {
      cards.add(card);
      if (filter.match(card,game)) {
        planeswalkerIncluded=true;
      }
    }
  }
  player.lookAtCards(""String_Node_Str"",cards,game);
  if (planeswalkerIncluded) {
    TargetCard target=new TargetCard(0,2,Zone.LIBRARY,filter);
    if (player.choose(Outcome.DrawCard,cards,target,game)) {
      Cards pickedCards=new CardsImpl(target.getTargets());
      cards.removeAll(pickedCards);
      player.moveCards(pickedCards.getCards(game),Zone.BATTLEFIELD,source,game);
    }
  }
  while (!cards.isEmpty()) {
    Card card=cards.getRandom(game);
    if (card != null) {
      cards.remove(card);
      card.moveToZone(Zone.LIBRARY,source.getSourceId(),game,false);
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  Cards cards=new CardsImpl();
  boolean planeswalkerIncluded=false;
  for (int i=0; i < 7; i++) {
    Card card=controller.getLibrary().removeFromTop(game);
    if (card != null) {
      cards.add(card);
      if (filter.match(card,game)) {
        planeswalkerIncluded=true;
      }
    }
  }
  controller.lookAtCards(""String_Node_Str"",cards,game);
  if (planeswalkerIncluded) {
    TargetCard target=new TargetCard(0,2,Zone.LIBRARY,filter);
    if (controller.choose(Outcome.DrawCard,cards,target,game)) {
      Cards pickedCards=new CardsImpl(target.getTargets());
      cards.removeAll(pickedCards);
      controller.moveCards(pickedCards.getCards(game),Zone.BATTLEFIELD,source,game);
    }
  }
  controller.putCardsOnBottomOfLibrary(cards,game,source,false);
  return true;
}",0.799800796812749
157774,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    Permanent targetCreature=game.getPermanent(getTargetPointer().getFirst(game,source));
    if (targetCreature != null) {
      Player controllerOfTargetCreature=game.getPlayer(targetCreature.getControllerId());
      if (controllerOfTargetCreature != null) {
        if (!controllerOfTargetCreature.getHand().isEmpty()) {
          Cards cards=new CardsImpl();
          Card card=controllerOfTargetCreature.getHand().getRandom(game);
          cards.add(card);
          controllerOfTargetCreature.revealCards(sourceObject.getName(),cards,game);
          int damage=card.getConvertedManaCost();
          targetCreature.damage(damage,source.getSourceId(),game,false,true);
          controllerOfTargetCreature.damage(damage,source.getSourceId(),game,false,true);
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    Permanent targetCreature=game.getPermanent(getTargetPointer().getFirst(game,source));
    if (targetCreature != null) {
      Player controllerOfTargetCreature=game.getPlayer(targetCreature.getControllerId());
      if (controllerOfTargetCreature != null) {
        if (!controllerOfTargetCreature.getHand().isEmpty()) {
          Cards cards=new CardsImpl();
          Card card=controllerOfTargetCreature.getHand().getRandom(game);
          if (card != null) {
            cards.add(card);
            controllerOfTargetCreature.revealCards(sourceObject.getName(),cards,game);
            int damage=card.getConvertedManaCost();
            targetCreature.damage(damage,source.getSourceId(),game,false,true);
            controllerOfTargetCreature.damage(damage,source.getSourceId(),game,false,true);
            return true;
          }
        }
      }
    }
  }
  return false;
}",0.935395814376706
157775,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  Cards cards=new CardsImpl();
  int count=source.getManaCostsToPay().getX();
  count=Math.min(player.getLibrary().size(),count);
  boolean legendaryIncluded=false;
  for (int i=0; i < count; i++) {
    Card card=player.getLibrary().removeFromTop(game);
    if (card != null) {
      cards.add(card);
      if (filter.match(card,game)) {
        legendaryIncluded=true;
      }
    }
  }
  player.lookAtCards(""String_Node_Str"",cards,game);
  if (!cards.isEmpty() && legendaryIncluded && player.chooseUse(outcome,""String_Node_Str"",source,game)) {
    if (cards.size() == 1) {
      Card card=cards.getRandom(game);
      cards.remove(card);
      card.moveToZone(Zone.HAND,source.getSourceId(),game,false);
      return true;
    }
 else {
      TargetCard target=new TargetCard(Zone.LIBRARY,filter);
      if (player.choose(outcome,cards,target,game)) {
        Card card=cards.get(target.getFirstTarget(),game);
        if (card != null) {
          cards.remove(card);
          card.moveToZone(Zone.HAND,source.getSourceId(),game,false);
        }
      }
    }
  }
  while (!cards.isEmpty()) {
    Card card=cards.getRandom(game);
    if (card != null) {
      cards.remove(card);
      card.moveToZone(Zone.LIBRARY,source.getSourceId(),game,false);
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (controller == null || sourceObject == null) {
    return false;
  }
  Cards cards=new CardsImpl();
  cards.addAll(controller.getLibrary().getTopCards(game,source.getManaCostsToPay().getX()));
  boolean legendaryIncluded=cards.count(filter,game) > 0;
  controller.lookAtCards(sourceObject.getIdName(),cards,game);
  if (!cards.isEmpty() && legendaryIncluded && controller.chooseUse(outcome,""String_Node_Str"",source,game)) {
    if (cards.size() == 1) {
      controller.moveCards(cards,Zone.HAND,source,game);
      return true;
    }
 else {
      TargetCard target=new TargetCard(Zone.LIBRARY,filter);
      if (controller.choose(outcome,cards,target,game)) {
        Card card=cards.get(target.getFirstTarget(),game);
        if (card != null) {
          cards.remove(card);
          controller.moveCards(card,Zone.HAND,source,game);
        }
      }
    }
  }
  controller.putCardsOnBottomOfLibrary(cards,game,source,false);
  return true;
}",0.3780630105017503
157776,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(targetPointer.getFirst(game,source));
  MageObject sourceObject=source.getSourceObject(game);
  if (controller != null && sourceObject != null) {
    if (!controller.getHand().isEmpty()) {
      Cards revealed=new CardsImpl();
      Card card=controller.getHand().getRandom(game);
      revealed.add(card);
      controller.revealCards(sourceObject.getIdName(),revealed,game);
      controller.damage(card.getConvertedManaCost(),source.getSourceId(),game,false,true);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(targetPointer.getFirst(game,source));
  MageObject sourceObject=source.getSourceObject(game);
  if (controller != null && sourceObject != null) {
    if (!controller.getHand().isEmpty()) {
      Cards revealed=new CardsImpl();
      Card card=controller.getHand().getRandom(game);
      if (card != null) {
        revealed.add(card);
        controller.revealCards(sourceObject.getIdName(),revealed,game);
        controller.damage(card.getConvertedManaCost(),source.getSourceId(),game,false,true);
        return true;
      }
      return false;
    }
    return true;
  }
  return false;
}",0.91711851278079
157777,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && controller.getLibrary().hasCards()) {
    CardsImpl cards=new CardsImpl();
    Library library=controller.getLibrary();
    Card card=null;
    do {
      card=library.removeFromTop(game);
      if (card != null) {
        cards.add(card);
      }
    }
 while (library.hasCards() && card != null && !card.isArtifact());
    if (!cards.isEmpty()) {
      controller.revealCards(sourceObject.getIdName(),cards,game);
    }
    int revealed=cards.size();
    if (card != null && card.isArtifact()) {
      controller.moveCards(card,Zone.BATTLEFIELD,source,game);
      cards.remove(card);
    }
    while (!cards.isEmpty()) {
      card=cards.getRandom(game);
      if (card != null) {
        cards.remove(card);
        controller.moveCardToLibraryWithInfo(card,source.getSourceId(),game,Zone.HAND,false,false);
      }
    }
    controller.damage(revealed,source.getSourceId(),game,false,true);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && controller.getLibrary().hasCards()) {
    CardsImpl cards=new CardsImpl();
    Library library=controller.getLibrary();
    Card card=null;
    do {
      card=library.removeFromTop(game);
      if (card != null) {
        cards.add(card);
      }
    }
 while (library.hasCards() && card != null && !card.isArtifact());
    if (!cards.isEmpty()) {
      controller.revealCards(sourceObject.getIdName(),cards,game);
    }
    int revealed=cards.size();
    if (card != null && card.isArtifact()) {
      controller.moveCards(card,Zone.BATTLEFIELD,source,game);
      cards.remove(card);
    }
    controller.putCardsOnBottomOfLibrary(cards,game,source,false);
    controller.damage(revealed,source.getSourceId(),game,false,true);
    return true;
  }
  return false;
}",0.7723424270931326
157778,"@Override public boolean apply(Game game,Ability source){
  Player you=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  String cardName=(String)game.getState().getValue(source.getSourceId().toString() + NameACardEffect.INFO_KEY);
  if (sourceObject != null && you != null && cardName != null && !cardName.isEmpty()) {
    if (!you.getHand().isEmpty()) {
      Cards revealed=new CardsImpl();
      Card card=you.getHand().getRandom(game);
      revealed.add(card);
      you.revealCards(sourceObject.getName(),revealed,game);
      if (card.getName().equals(cardName)) {
        Permanent creature=game.getPermanent(targetPointer.getFirst(game,source));
        if (creature != null) {
          creature.damage(2,source.getSourceId(),game,false,true);
          return true;
        }
        Player player=game.getPlayer(targetPointer.getFirst(game,source));
        if (player != null) {
          player.damage(2,source.getSourceId(),game,false,true);
          return true;
        }
        return false;
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player you=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  String cardName=(String)game.getState().getValue(source.getSourceId().toString() + NameACardEffect.INFO_KEY);
  if (sourceObject != null && you != null && cardName != null && !cardName.isEmpty()) {
    if (!you.getHand().isEmpty()) {
      Cards revealed=new CardsImpl();
      Card card=you.getHand().getRandom(game);
      if (card == null) {
        return false;
      }
      revealed.add(card);
      you.revealCards(sourceObject.getName(),revealed,game);
      if (card.getName().equals(cardName)) {
        Permanent creature=game.getPermanent(targetPointer.getFirst(game,source));
        if (creature != null) {
          creature.damage(2,source.getSourceId(),game,false,true);
          return true;
        }
        Player player=game.getPlayer(targetPointer.getFirst(game,source));
        if (player != null) {
          player.damage(2,source.getSourceId(),game,false,true);
          return true;
        }
        return false;
      }
    }
    return true;
  }
  return false;
}",0.9756521739130436
157779,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    Cards cards=player.getGraveyard();
    for (int i=0; i < 2 && !cards.isEmpty(); i++) {
      Card card=cards.getRandom(game);
      if (card != null) {
        card.moveToZone(Zone.HAND,source.getSourceId(),game,true);
        cards.remove(card);
        game.informPlayers(card.getName() + ""String_Node_Str"" + player.getLogName());
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    Cards cards=player.getGraveyard();
    for (int i=0; i < 2 && !cards.isEmpty(); i++) {
      Card card=cards.getRandom(game);
      if (card != null) {
        card.moveToZone(Zone.HAND,source.getSourceId(),game,true);
        cards.remove(card);
        game.informPlayers(card.getName() + ""String_Node_Str"" + player.getLogName());
      }
 else {
        return false;
      }
    }
    return true;
  }
  return false;
}",0.937956204379562
157780,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (controller != null && sourceObject != null) {
    Cards topLib=new CardsImpl();
    topLib.addAll(controller.getLibrary().getTopCards(game,10));
    controller.revealCards(sourceObject.getIdName(),topLib,game);
    Cards chosenCards=new CardsImpl();
    if (game.getOpponents(controller.getId()).size() >= topLib.getCards(StaticFilters.FILTER_CARD_NON_LAND,game).size()) {
      chosenCards.addAll(topLib.getCards(StaticFilters.FILTER_CARD_NON_LAND,game));
      topLib.removeAll(chosenCards);
    }
 else     if (!topLib.getCards(StaticFilters.FILTER_CARD_NON_LAND,game).isEmpty()) {
      for (      UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
        if (controller.hasOpponent(playerId,game)) {
          Player opponent=game.getPlayer(playerId);
          if (opponent != null && !topLib.getCards(StaticFilters.FILTER_CARD_NON_LAND,game).isEmpty()) {
            TargetCard target=new TargetCard(Zone.LIBRARY,StaticFilters.FILTER_CARD_NON_LAND);
            if (opponent.choose(Outcome.Detriment,topLib,target,game)) {
              Card card=game.getCard(target.getFirstTarget());
              if (card != null) {
                topLib.remove(card);
                chosenCards.add(card);
              }
            }
          }
        }
      }
    }
    controller.moveCards(chosenCards,Zone.HAND,source,game);
    while (!topLib.isEmpty() && controller.isInGame()) {
      Card card=topLib.getRandom(game);
      if (card != null) {
        topLib.remove(card);
        controller.moveCardToLibraryWithInfo(card,source.getSourceId(),game,Zone.LIBRARY,false,false);
      }
 else {
        return false;
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (controller != null && sourceObject != null) {
    Cards topLib=new CardsImpl();
    topLib.addAll(controller.getLibrary().getTopCards(game,10));
    controller.revealCards(sourceObject.getIdName(),topLib,game);
    Cards chosenCards=new CardsImpl();
    if (game.getOpponents(controller.getId()).size() >= topLib.getCards(StaticFilters.FILTER_CARD_NON_LAND,game).size()) {
      chosenCards.addAll(topLib.getCards(StaticFilters.FILTER_CARD_NON_LAND,game));
      topLib.removeAll(chosenCards);
    }
 else     if (!topLib.getCards(StaticFilters.FILTER_CARD_NON_LAND,game).isEmpty()) {
      for (      UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
        if (controller.hasOpponent(playerId,game)) {
          Player opponent=game.getPlayer(playerId);
          if (opponent != null && !topLib.getCards(StaticFilters.FILTER_CARD_NON_LAND,game).isEmpty()) {
            TargetCard target=new TargetCard(Zone.LIBRARY,StaticFilters.FILTER_CARD_NON_LAND);
            if (opponent.choose(Outcome.Detriment,topLib,target,game)) {
              Card card=game.getCard(target.getFirstTarget());
              if (card != null) {
                topLib.remove(card);
                chosenCards.add(card);
              }
            }
          }
        }
      }
    }
    controller.moveCards(chosenCards,Zone.HAND,source,game);
    controller.putCardsOnBottomOfLibrary(topLib,game,source,false);
    return true;
  }
  return false;
}",0.8824695553667516
157781,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    ManaCosts cost=new ManaCostsImpl(""String_Node_Str"");
    if (controller.chooseUse(Outcome.Damage,""String_Node_Str"" + cost.getText() + ""String_Node_Str"",source,game)) {
      int costX=controller.announceXMana(0,Integer.MAX_VALUE,""String_Node_Str"",game,source);
      cost.add(new GenericManaCost(costX));
      if (cost.pay(source,game,source.getSourceId(),source.getControllerId(),false,null)) {
        controller.gainLife(costX,game);
        controller.drawCards(costX,game);
        return true;
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    ManaCosts cost=new ManaCostsImpl(""String_Node_Str"");
    if (controller.chooseUse(Outcome.Damage,""String_Node_Str"" + cost.getText() + ""String_Node_Str"",source,game)) {
      int costX=controller.announceXMana(0,Integer.MAX_VALUE,""String_Node_Str"",game,source);
      cost.add(new GenericManaCost(costX));
      if (cost.pay(source,game,source.getSourceId(),source.getControllerId(),false,null)) {
        controller.resetStoredBookmark(game);
        controller.gainLife(costX,game);
        controller.drawCards(costX,game);
        return true;
      }
    }
  }
  return false;
}",0.9676511954992968
157782,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    ManaCosts cost=new ManaCostsImpl(""String_Node_Str"");
    if (controller.chooseUse(outcome,""String_Node_Str"" + cost.getText() + ""String_Node_Str"",source,game)) {
      int costX=controller.announceXMana(0,Integer.MAX_VALUE,""String_Node_Str"",game,source);
      cost.add(new GenericManaCost(costX));
      if (cost.pay(source,game,source.getSourceId(),source.getControllerId(),false,null)) {
        game.undo(id);
        CreateTokenEffect effect=new CreateTokenEffect(new TilonallisSummonerElementalToken(),costX,true,true);
        effect.apply(game,source);
        Effect exileEffect=new ExileTargetEffect(null,""String_Node_Str"",Zone.BATTLEFIELD).setText(""String_Node_Str"");
        exileEffect.setTargetPointer(new FixedTargets(new CardsImpl(effect.getLastAddedTokenIds()),game));
        game.addDelayedTriggeredAbility(new AtTheBeginOfNextEndStepDelayedTriggeredAbility(Zone.ALL,exileEffect,TargetController.ANY,new InvertCondition(CitysBlessingCondition.instance)),source);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    ManaCosts cost=new ManaCostsImpl(""String_Node_Str"");
    if (controller.chooseUse(outcome,""String_Node_Str"" + cost.getText() + ""String_Node_Str"",source,game)) {
      int costX=controller.announceXMana(0,Integer.MAX_VALUE,""String_Node_Str"",game,source);
      cost.add(new GenericManaCost(costX));
      if (cost.pay(source,game,source.getSourceId(),source.getControllerId(),false,null)) {
        controller.resetStoredBookmark(game);
        CreateTokenEffect effect=new CreateTokenEffect(new TilonallisSummonerElementalToken(),costX,true,true);
        effect.apply(game,source);
        Effect exileEffect=new ExileTargetEffect(null,""String_Node_Str"",Zone.BATTLEFIELD).setText(""String_Node_Str"");
        exileEffect.setTargetPointer(new FixedTargets(new CardsImpl(effect.getLastAddedTokenIds()),game));
        game.addDelayedTriggeredAbility(new AtTheBeginOfNextEndStepDelayedTriggeredAbility(Zone.ALL,exileEffect,TargetController.ANY,new InvertCondition(CitysBlessingCondition.instance)),source);
      }
    }
    return true;
  }
  return false;
}",0.9803593815294608
157783,"public void fireCallback(final ClientCallback call){
  try {
    call.setMessageId(messageId++);
    callbackHandler.handleCallbackOneway(new Callback(call));
  }
 catch (  HandleCallbackException ex) {
    UserManager.instance.getUser(userId).ifPresent(user -> {
      user.setUserState(User.UserState.Disconnected);
      logger.warn(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ userId+ ""String_Node_Str""+ getBasicCause(ex).toString());
      logger.trace(""String_Node_Str"",ex);
      SessionManager.instance.disconnect(sessionId,LostConnection);
    }
);
  }
}","public void fireCallback(final ClientCallback call){
  if (error) {
    return;
  }
  try {
    call.setMessageId(messageId++);
    callbackHandler.handleCallbackOneway(new Callback(call));
  }
 catch (  HandleCallbackException ex) {
    error=true;
    UserManager.instance.getUser(userId).ifPresent(user -> {
      user.setUserState(User.UserState.Disconnected);
      logger.warn(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ userId+ ""String_Node_Str""+ getBasicCause(ex).toString());
      logger.trace(""String_Node_Str"",ex);
      SessionManager.instance.disconnect(sessionId,LostConnection);
    }
);
  }
}",0.9606694560669456
157784,"private void reconnect(){
  logger.trace(userName + ""String_Node_Str"");
  for (  Entry<UUID,Table> entry : tables.entrySet()) {
    ccJoinedTable(entry.getValue().getRoomId(),entry.getValue().getId(),entry.getValue().isTournament());
  }
  for (  Entry<UUID,UUID> entry : userTournaments.entrySet()) {
    TournamentController tournamentController=TournamentManager.instance.getTournamentController(entry.getValue());
    if (tournamentController != null) {
      ccTournamentStarted(entry.getValue(),entry.getKey());
      tournamentController.rejoin(entry.getKey());
    }
  }
  for (  Entry<UUID,GameSessionPlayer> entry : gameSessions.entrySet()) {
    ccGameStarted(entry.getValue().getGameId(),entry.getKey());
    entry.getValue().init();
    GameManager.instance.sendPlayerString(entry.getValue().getGameId(),userId,""String_Node_Str"");
  }
  for (  Entry<UUID,DraftSession> entry : draftSessions.entrySet()) {
    ccDraftStarted(entry.getValue().getDraftId(),entry.getKey());
    entry.getValue().init();
    entry.getValue().update();
  }
  for (  Entry<UUID,TournamentSession> entry : constructing.entrySet()) {
    entry.getValue().construct(0);
  }
  for (  Entry<UUID,Deck> entry : sideboarding.entrySet()) {
    Optional<TableController> controller=TableManager.instance.getController(entry.getKey());
    if (controller.isPresent()) {
      ccSideboard(entry.getValue(),entry.getKey(),controller.get().getRemainingTime(),controller.get().getOptions().isLimited());
    }
 else {
      logger.debug(getName() + ""String_Node_Str"" + entry.getKey());
    }
  }
  ServerMessagesUtil.instance.incReconnects();
  logger.trace(userName + ""String_Node_Str"");
}","private void reconnect(){
  logger.trace(userName + ""String_Node_Str"");
  for (  Entry<UUID,Table> entry : tables.entrySet()) {
    ccJoinedTable(entry.getValue().getRoomId(),entry.getValue().getId(),entry.getValue().isTournament());
  }
  for (Iterator<Entry<UUID,UUID>> iterator=userTournaments.entrySet().iterator(); iterator.hasNext(); ) {
    Entry<UUID,UUID> next=iterator.next();
    TournamentController tournamentController=TournamentManager.instance.getTournamentController(next.getValue());
    if (tournamentController != null) {
      ccTournamentStarted(next.getValue(),next.getKey());
      tournamentController.rejoin(next.getKey());
    }
 else {
      iterator.remove();
    }
  }
  for (  Entry<UUID,GameSessionPlayer> entry : gameSessions.entrySet()) {
    ccGameStarted(entry.getValue().getGameId(),entry.getKey());
    entry.getValue().init();
    GameManager.instance.sendPlayerString(entry.getValue().getGameId(),userId,""String_Node_Str"");
  }
  for (  Entry<UUID,DraftSession> entry : draftSessions.entrySet()) {
    ccDraftStarted(entry.getValue().getDraftId(),entry.getKey());
    entry.getValue().init();
    entry.getValue().update();
  }
  for (  Entry<UUID,TournamentSession> entry : constructing.entrySet()) {
    entry.getValue().construct(0);
  }
  for (  Entry<UUID,Deck> entry : sideboarding.entrySet()) {
    Optional<TableController> controller=TableManager.instance.getController(entry.getKey());
    if (controller.isPresent()) {
      ccSideboard(entry.getValue(),entry.getKey(),controller.get().getRemainingTime(),controller.get().getOptions().isLimited());
    }
 else {
      logger.debug(getName() + ""String_Node_Str"" + entry.getKey());
    }
  }
  ServerMessagesUtil.instance.incReconnects();
  logger.trace(userName + ""String_Node_Str"");
}",0.947276940903824
157785,"@Override public boolean checkTrigger(GameEvent event,Game game){
  int attackerCount=0;
  if (game.getCombat().getAttackingPlayerId().equals(getControllerId())) {
    for (    UUID attacker : game.getCombat().getAttackers()) {
      if (filter.match(game.getPermanent(attacker),game)) {
        attackerCount++;
      }
    }
    return attackerCount >= 2;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  int attackerCount=0;
  if (game.getCombat() != null) {
    if (getControllerId().equals(game.getCombat().getAttackingPlayerId())) {
      for (      UUID attacker : game.getCombat().getAttackers()) {
        if (filter.match(game.getPermanent(attacker),game)) {
          attackerCount++;
        }
      }
      return attackerCount >= 2;
    }
  }
  return false;
}",0.8525798525798526
157786,"@Override public boolean apply(Game game,Ability source){
  Permanent sourcePermanent=game.getPermanent(source.getSourceId());
  if (sourcePermanent != null) {
    int zcc=game.getState().getZoneChangeCounter(sourcePermanent.getId());
    if (zcc == source.getSourceObjectZoneChangeCounter() || zcc == source.getSourceObjectZoneChangeCounter() + 1) {
      Permanent permanent=game.getPermanent(getTargetPointer().getFirst(game,source));
      if (permanent != null) {
        return permanent.addAttachment(source.getSourceId(),game);
      }
 else {
        Player player=game.getPlayer(getTargetPointer().getFirst(game,source));
        if (player != null) {
          return player.addAttachment(source.getSourceId(),game);
        }
        if (source.getTargets().get(0) instanceof TargetCard) {
          Card card=game.getCard(getTargetPointer().getFirst(game,source));
          if (card != null) {
            return card.addAttachment(source.getSourceId(),game);
          }
        }
      }
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent sourcePermanent=game.getPermanent(source.getSourceId());
  if (sourcePermanent != null) {
    int zcc=game.getState().getZoneChangeCounter(sourcePermanent.getId());
    if (zcc == source.getSourceObjectZoneChangeCounter() || zcc == source.getSourceObjectZoneChangeCounter() + 1) {
      Permanent permanent=game.getPermanent(getTargetPointer().getFirst(game,source));
      if (permanent != null) {
        return permanent.addAttachment(source.getSourceId(),game);
      }
 else {
        Player player=game.getPlayer(getTargetPointer().getFirst(game,source));
        if (player != null) {
          return player.addAttachment(source.getSourceId(),game);
        }
        if (!source.getTargets().isEmpty() && source.getTargets().get(0) instanceof TargetCard) {
          Card card=game.getCard(getTargetPointer().getFirst(game,source));
          if (card != null) {
            return card.addAttachment(source.getSourceId(),game);
          }
        }
      }
    }
  }
  return false;
}",0.9837786259541984
157787,"protected String createGameStartMessage(){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  for (  MatchPlayer mp : this.getPlayers()) {
    sb.append(""String_Node_Str"").append(mp.getPlayer().getLogName());
    sb.append(""String_Node_Str"").append(mp.getWins()).append(mp.getWins() == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
    if (mp.hasQuit()) {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(mp.getDeck().getDeckHashCode()).append(""String_Node_Str"");
  }
  if (getDraws() > 0) {
    sb.append(""String_Node_Str"").append(getDraws()).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(this.getOptions().isRated() ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(this.getWinsNeeded()).append(this.getWinsNeeded() == 1 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb.toString();
}","protected String createGameStartMessage(){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  for (  MatchPlayer mp : this.getPlayers()) {
    sb.append(""String_Node_Str"").append(mp.getPlayer().getLogName());
    sb.append(""String_Node_Str"").append(mp.getWins()).append(mp.getWins() == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
    if (mp.hasQuit()) {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    if (mp.getDeck() != null) {
      sb.append(""String_Node_Str"").append(mp.getDeck().getDeckHashCode()).append(""String_Node_Str"");
    }
  }
  if (getDraws() > 0) {
    sb.append(""String_Node_Str"").append(getDraws()).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(this.getOptions().isRated() ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(this.getWinsNeeded()).append(this.getWinsNeeded() == 1 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.9811498586239396
157788,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private int doDamage(int damage,UUID sourceId,Game game,boolean combatDamage,boolean preventable,List<UUID> appliedEffects){
  if (damage > 0) {
    if (canDamage(game.getObject(sourceId),game)) {
      GameEvent event=new DamagePlayerEvent(playerId,sourceId,playerId,damage,preventable,combatDamage);
      event.setAppliedEffects(appliedEffects);
      if (!game.replaceEvent(event)) {
        int actualDamage=event.getAmount();
        if (actualDamage > 0) {
          UUID sourceControllerId=null;
          Abilities sourceAbilities=null;
          MageObject source=game.getPermanentOrLKIBattlefield(sourceId);
          if (source == null) {
            StackObject stackObject=game.getStack().getStackObject(sourceId);
            if (stackObject != null) {
              source=stackObject.getStackAbility().getSourceObject(game);
            }
 else {
              source=game.getObject(sourceId);
            }
            if (source instanceof Spell) {
              sourceAbilities=((Spell)source).getAbilities(game);
              sourceControllerId=((Spell)source).getControllerId();
            }
 else             if (source instanceof Card) {
              sourceAbilities=((Card)source).getAbilities(game);
              sourceControllerId=((Card)source).getOwnerId();
            }
 else             if (source instanceof CommandObject) {
              sourceControllerId=((CommandObject)source).getControllerId();
              sourceAbilities=((CommandObject)source).getAbilities();
            }
          }
 else {
            sourceAbilities=((Permanent)source).getAbilities(game);
            sourceControllerId=((Permanent)source).getControllerId();
          }
          if (sourceAbilities != null && sourceAbilities.containsKey(InfectAbility.getInstance().getId())) {
            addCounters(CounterType.POISON.createInstance(actualDamage),game);
          }
 else {
            GameEvent damageToLifeLossEvent=new GameEvent(EventType.DAMAGE_CAUSES_LIFE_LOSS,playerId,sourceId,playerId,actualDamage,combatDamage);
            if (!game.replaceEvent(damageToLifeLossEvent)) {
              this.loseLife(damageToLifeLossEvent.getAmount(),game,combatDamage);
            }
          }
          if (sourceAbilities != null && sourceAbilities.containsKey(LifelinkAbility.getInstance().getId())) {
            Player player=game.getPlayer(sourceControllerId);
            player.gainLife(actualDamage,game);
          }
          if (sourceAbilities.containsKey(SquirrellinkAbility.getInstance().getId())) {
            Player player=game.getPlayer(sourceControllerId);
            new SquirrelToken().putOntoBattlefield(actualDamage,game,sourceId,player.getId());
          }
          game.fireEvent(new DamagedPlayerEvent(playerId,sourceId,playerId,actualDamage,combatDamage));
          return actualDamage;
        }
      }
    }
 else {
      MageObject sourceObject=game.getObject(sourceId);
      game.informPlayers(damage + ""String_Node_Str"" + (sourceObject == null ? ""String_Node_Str"" : ""String_Node_Str"" + sourceObject.getLogName())+ ""String_Node_Str""+ getLogName()+ (damage > 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
  }
  return 0;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private int doDamage(int damage,UUID sourceId,Game game,boolean combatDamage,boolean preventable,List<UUID> appliedEffects){
  if (damage > 0) {
    if (canDamage(game.getObject(sourceId),game)) {
      GameEvent event=new DamagePlayerEvent(playerId,sourceId,playerId,damage,preventable,combatDamage);
      event.setAppliedEffects(appliedEffects);
      if (!game.replaceEvent(event)) {
        int actualDamage=event.getAmount();
        if (actualDamage > 0) {
          UUID sourceControllerId=null;
          Abilities sourceAbilities=null;
          MageObject source=game.getPermanentOrLKIBattlefield(sourceId);
          if (source == null) {
            StackObject stackObject=game.getStack().getStackObject(sourceId);
            if (stackObject != null) {
              source=stackObject.getStackAbility().getSourceObject(game);
            }
 else {
              source=game.getObject(sourceId);
            }
            if (source instanceof Spell) {
              sourceAbilities=((Spell)source).getAbilities(game);
              sourceControllerId=((Spell)source).getControllerId();
            }
 else             if (source instanceof Card) {
              sourceAbilities=((Card)source).getAbilities(game);
              sourceControllerId=((Card)source).getOwnerId();
            }
 else             if (source instanceof CommandObject) {
              sourceControllerId=((CommandObject)source).getControllerId();
              sourceAbilities=((CommandObject)source).getAbilities();
            }
          }
 else {
            sourceAbilities=((Permanent)source).getAbilities(game);
            sourceControllerId=((Permanent)source).getControllerId();
          }
          if (sourceAbilities != null && sourceAbilities.containsKey(InfectAbility.getInstance().getId())) {
            addCounters(CounterType.POISON.createInstance(actualDamage),game);
          }
 else {
            GameEvent damageToLifeLossEvent=new GameEvent(EventType.DAMAGE_CAUSES_LIFE_LOSS,playerId,sourceId,playerId,actualDamage,combatDamage);
            if (!game.replaceEvent(damageToLifeLossEvent)) {
              this.loseLife(damageToLifeLossEvent.getAmount(),game,combatDamage);
            }
          }
          if (sourceAbilities != null && sourceAbilities.containsKey(LifelinkAbility.getInstance().getId())) {
            Player player=game.getPlayer(sourceControllerId);
            player.gainLife(actualDamage,game);
          }
          if (sourceAbilities != null && sourceAbilities.containsKey(SquirrellinkAbility.getInstance().getId())) {
            Player player=game.getPlayer(sourceControllerId);
            new SquirrelToken().putOntoBattlefield(actualDamage,game,sourceId,player.getId());
          }
          game.fireEvent(new DamagedPlayerEvent(playerId,sourceId,playerId,actualDamage,combatDamage));
          return actualDamage;
        }
      }
    }
 else {
      MageObject sourceObject=game.getObject(sourceId);
      game.informPlayers(damage + ""String_Node_Str"" + (sourceObject == null ? ""String_Node_Str"" : ""String_Node_Str"" + sourceObject.getLogName())+ ""String_Node_Str""+ getLogName()+ (damage > 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
  }
  return 0;
}",0.995878491833308
157789,"@Override public boolean putCardsOnBottomOfLibrary(Cards cardsToLibrary,Game game,Ability source,boolean anyOrder){
  if (!cardsToLibrary.isEmpty()) {
    Cards cards=new CardsImpl(cardsToLibrary);
    if (!anyOrder) {
      while (!cards.isEmpty()) {
        UUID cardId=cards.getRandom(game).getId();
        cards.remove(cardId);
        moveObjectToLibrary(cardId,source == null ? null : source.getSourceId(),game,false,false);
      }
    }
 else {
      TargetCard target=new TargetCard(Zone.ALL,new FilterCard(""String_Node_Str""));
      target.setRequired(true);
      while (cards.size() > 1) {
        this.choose(Outcome.Neutral,cards,target,game);
        if (!canRespond()) {
          return false;
        }
        UUID targetObjectId=target.getFirstTarget();
        cards.remove(targetObjectId);
        moveObjectToLibrary(targetObjectId,source == null ? null : source.getSourceId(),game,false,false);
        target.clearChosen();
      }
      if (cards.size() == 1) {
        moveObjectToLibrary(cards.iterator().next(),source == null ? null : source.getSourceId(),game,false,false);
      }
    }
  }
  return true;
}","@Override public boolean putCardsOnBottomOfLibrary(Cards cardsToLibrary,Game game,Ability source,boolean anyOrder){
  if (!cardsToLibrary.isEmpty()) {
    Cards cards=new CardsImpl(cardsToLibrary);
    if (!anyOrder) {
      while (!cards.isEmpty()) {
        Card card=cards.getRandom(game);
        if (card != null) {
          cards.remove(card);
          moveObjectToLibrary(card.getId(),source == null ? null : source.getSourceId(),game,false,false);
        }
      }
    }
 else {
      TargetCard target=new TargetCard(Zone.ALL,new FilterCard(""String_Node_Str""));
      target.setRequired(true);
      while (cards.size() > 1) {
        this.choose(Outcome.Neutral,cards,target,game);
        if (!canRespond()) {
          return false;
        }
        UUID targetObjectId=target.getFirstTarget();
        cards.remove(targetObjectId);
        moveObjectToLibrary(targetObjectId,source == null ? null : source.getSourceId(),game,false,false);
        target.clearChosen();
      }
      if (cards.size() == 1) {
        moveObjectToLibrary(cards.iterator().next(),source == null ? null : source.getSourceId(),game,false,false);
      }
    }
  }
  return true;
}",0.5782195332757131
157790,"protected void initGame(Game game) throws GameException {
  addGame();
  shufflePlayers();
  for (  MatchPlayer matchPlayer : this.players) {
    if (!matchPlayer.hasQuit()) {
      matchPlayer.getPlayer().init(game);
      game.loadCards(matchPlayer.getDeck().getCards(),matchPlayer.getPlayer().getId());
      game.loadCards(matchPlayer.getDeck().getSideboard(),matchPlayer.getPlayer().getId());
      game.addPlayer(matchPlayer.getPlayer(),matchPlayer.getDeck());
      if (games.isEmpty()) {
        matchPlayer.getPlayer().setPriorityTimeLeft(options.getPriorityTime());
      }
 else {
        if (matchPlayer.getPriorityTimeLeft() > 0) {
          matchPlayer.getPlayer().setPriorityTimeLeft(matchPlayer.getPriorityTimeLeft());
        }
      }
    }
  }
  game.setPriorityTime(options.getPriorityTime());
}","protected void initGame(Game game) throws GameException {
  addGame();
  shufflePlayers();
  for (  MatchPlayer matchPlayer : this.players) {
    if (!matchPlayer.hasQuit() && matchPlayer.getDeck() != null) {
      matchPlayer.getPlayer().init(game);
      game.loadCards(matchPlayer.getDeck().getCards(),matchPlayer.getPlayer().getId());
      game.loadCards(matchPlayer.getDeck().getSideboard(),matchPlayer.getPlayer().getId());
      game.addPlayer(matchPlayer.getPlayer(),matchPlayer.getDeck());
      if (games.isEmpty()) {
        matchPlayer.getPlayer().setPriorityTimeLeft(options.getPriorityTime());
      }
 else {
        if (matchPlayer.getPriorityTimeLeft() > 0) {
          matchPlayer.getPlayer().setPriorityTimeLeft(matchPlayer.getPriorityTimeLeft());
        }
      }
    }
 else {
      if (matchPlayer.getDeck() == null) {
        logger.error(""String_Node_Str"" + this.getId() + ""String_Node_Str""+ matchPlayer.getName()+ ""String_Node_Str"");
      }
    }
  }
  game.setPriorityTime(options.getPriorityTime());
}",0.8829902491874323
157791,"protected void specialAction(Game game){
  LinkedHashMap<UUID,SpecialAction> specialActions=game.getState().getSpecialActions().getControlledBy(playerId,false);
  if (!specialActions.isEmpty()) {
    updateGameStatePriority(""String_Node_Str"",game);
    if (!isExecutingMacro()) {
      game.fireGetChoiceEvent(playerId,name,null,new ArrayList<>(specialActions.values()));
    }
    waitForResponse(game);
    if (response.getUUID() != null) {
      if (specialActions.containsKey(response.getUUID())) {
        activateAbility(specialActions.get(response.getUUID()),game);
      }
    }
  }
}","protected void specialAction(Game game){
  LinkedHashMap<UUID,SpecialAction> specialActions=game.getState().getSpecialActions().getControlledBy(playerId,false);
  if (!specialActions.isEmpty()) {
    updateGameStatePriority(""String_Node_Str"",game);
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireGetChoiceEvent(playerId,name,null,new ArrayList<>(specialActions.values()));
    }
    waitForResponse(game);
    if (response.getUUID() != null) {
      if (specialActions.containsKey(response.getUUID())) {
        activateAbility(specialActions.get(response.getUUID()),game);
      }
    }
  }
}",0.9752883031301482
157792,"@Override public int announceXCost(int min,int max,String message,Game game,Ability ability,VariableCost variableCost){
  int xValue=0;
  updateGameStatePriority(""String_Node_Str"",game);
  do {
    if (!isExecutingMacro()) {
      game.fireGetAmountEvent(playerId,message,min,max);
    }
    waitForResponse(game);
  }
 while (response.getInteger() == null && !abort);
  if (response != null && response.getInteger() != null) {
    xValue=response.getInteger();
  }
  return xValue;
}","@Override public int announceXCost(int min,int max,String message,Game game,Ability ability,VariableCost variableCost){
  int xValue=0;
  updateGameStatePriority(""String_Node_Str"",game);
  do {
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireGetAmountEvent(playerId,message,min,max);
    }
    waitForResponse(game);
  }
 while (response.getInteger() == null && !abort);
  if (response != null && response.getInteger() != null) {
    xValue=response.getInteger();
  }
  return xValue;
}",0.969939879759519
157793,"@Override public void setResponseBoolean(Boolean responseBoolean){
synchronized (response) {
    response.setBoolean(responseBoolean);
    response.notifyAll();
    logger.debug(""String_Node_Str"" + getId());
  }
}","@Override public void setResponseBoolean(Boolean responseBoolean){
  waitResponseOpen();
synchronized (response) {
    response.setBoolean(responseBoolean);
    response.notifyAll();
    logger.info(""String_Node_Str"" + getId());
  }
}",0.930648769574944
157794,"/** 
 * Gets the amount of mana the player want to spent for a x spell
 * @param min
 * @param max
 * @param message
 * @param game
 * @param ability
 * @return
 */
@Override public int announceXMana(int min,int max,String message,Game game,Ability ability){
  int xValue=0;
  updateGameStatePriority(""String_Node_Str"",game);
  do {
    if (!isExecutingMacro()) {
      game.fireGetAmountEvent(playerId,message,min,max);
    }
    waitForResponse(game);
  }
 while (response.getInteger() == null && !abort);
  if (response != null && response.getInteger() != null) {
    xValue=response.getInteger();
  }
  return xValue;
}","/** 
 * Gets the amount of mana the player want to spent for a x spell
 * @param min
 * @param max
 * @param message
 * @param game
 * @param ability
 * @return
 */
@Override public int announceXMana(int min,int max,String message,Game game,Ability ability){
  int xValue=0;
  updateGameStatePriority(""String_Node_Str"",game);
  do {
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireGetAmountEvent(playerId,message,min,max);
    }
    waitForResponse(game);
  }
 while (response.getInteger() == null && !abort);
  if (response != null && response.getInteger() != null) {
    xValue=response.getInteger();
  }
  return xValue;
}",0.9764890282131662
157795,"@Override public void selectAttackers(Game game,UUID attackingPlayerId){
  updateGameStatePriority(""String_Node_Str"",game);
  FilterCreatureForCombat filter=filterCreatureForCombat.copy();
  filter.add(new ControllerIdPredicate(attackingPlayerId));
  while (!abort) {
    if (passedAllTurns || passedUntilEndStepBeforeMyTurn || (!getControllingPlayersUserData(game).getUserSkipPrioritySteps().isStopOnDeclareAttackersDuringSkipAction() && (passedTurn || passedTurnSkipStack || passedUntilEndOfTurn|| passedUntilNextMain))) {
      if (checkIfAttackersValid(game)) {
        return;
      }
    }
    Map<String,Serializable> options=new HashMap<>();
    List<UUID> possibleAttackers=new ArrayList<>();
    for (    Permanent possibleAttacker : game.getBattlefield().getActivePermanents(filter,attackingPlayerId,game)) {
      if (possibleAttacker.canAttack(null,game)) {
        possibleAttackers.add(possibleAttacker.getId());
      }
    }
    options.put(Constants.Option.POSSIBLE_ATTACKERS,(Serializable)possibleAttackers);
    if (!possibleAttackers.isEmpty()) {
      options.put(Constants.Option.SPECIAL_BUTTON,(Serializable)""String_Node_Str"");
    }
    if (!isExecutingMacro()) {
      game.fireSelectEvent(playerId,""String_Node_Str"",options);
    }
    waitForResponse(game);
    if (response.getString() != null && response.getString().equals(""String_Node_Str"")) {
      setStoredBookmark(game.bookmarkState());
      UUID attackedDefender=null;
      if (game.getCombat().getDefenders().size() > 1) {
        attackedDefender=selectDefenderForAllAttack(game.getCombat().getDefenders(),game);
      }
 else       if (game.getCombat().getDefenders().size() == 1) {
        attackedDefender=game.getCombat().getDefenders().iterator().next();
      }
      for (      Permanent attacker : game.getBattlefield().getAllActivePermanents(filterCreatureForCombat,getId(),game)) {
        if (game.getContinuousEffects().checkIfThereArePayCostToAttackBlockEffects(GameEvent.getEvent(GameEvent.EventType.DECLARE_ATTACKER,attackedDefender,attacker.getId(),attacker.getControllerId()),game)) {
          continue;
        }
        if (game.getCombat().getCreaturesForcedToAttack().containsKey(attacker.getId())) {
          Set<UUID> possibleDefenders=game.getCombat().getCreaturesForcedToAttack().get(attacker.getId());
          if (!possibleDefenders.isEmpty() && !possibleDefenders.contains(attackedDefender)) {
            declareAttacker(attacker.getId(),possibleDefenders.iterator().next(),game,false);
            continue;
          }
        }
        declareAttacker(attacker.getId(),attackedDefender,game,false);
      }
    }
 else     if (response.getInteger() != null) {
      if (checkIfAttackersValid(game)) {
        return;
      }
    }
 else     if (response.getBoolean() != null) {
      if (checkIfAttackersValid(game)) {
        return;
      }
    }
 else     if (response.getUUID() != null) {
      Permanent attacker=game.getPermanent(response.getUUID());
      if (attacker != null) {
        if (filterCreatureForCombat.match(attacker,null,playerId,game)) {
          selectDefender(game.getCombat().getDefenders(),attacker.getId(),game);
        }
 else         if (filterAttack.match(attacker,null,playerId,game) && game.getStack().isEmpty()) {
          removeAttackerIfPossible(game,attacker);
        }
      }
    }
  }
}","@Override public void selectAttackers(Game game,UUID attackingPlayerId){
  updateGameStatePriority(""String_Node_Str"",game);
  FilterCreatureForCombat filter=filterCreatureForCombat.copy();
  filter.add(new ControllerIdPredicate(attackingPlayerId));
  while (!abort) {
    if (passedAllTurns || passedUntilEndStepBeforeMyTurn || (!getControllingPlayersUserData(game).getUserSkipPrioritySteps().isStopOnDeclareAttackersDuringSkipAction() && (passedTurn || passedTurnSkipStack || passedUntilEndOfTurn|| passedUntilNextMain))) {
      if (checkIfAttackersValid(game)) {
        return;
      }
    }
    Map<String,Serializable> options=new HashMap<>();
    List<UUID> possibleAttackers=new ArrayList<>();
    for (    Permanent possibleAttacker : game.getBattlefield().getActivePermanents(filter,attackingPlayerId,game)) {
      if (possibleAttacker.canAttack(null,game)) {
        possibleAttackers.add(possibleAttacker.getId());
      }
    }
    options.put(Constants.Option.POSSIBLE_ATTACKERS,(Serializable)possibleAttackers);
    if (!possibleAttackers.isEmpty()) {
      options.put(Constants.Option.SPECIAL_BUTTON,(Serializable)""String_Node_Str"");
    }
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireSelectEvent(playerId,""String_Node_Str"",options);
    }
    waitForResponse(game);
    if (response.getString() != null && response.getString().equals(""String_Node_Str"")) {
      setStoredBookmark(game.bookmarkState());
      UUID attackedDefender=null;
      if (game.getCombat().getDefenders().size() > 1) {
        attackedDefender=selectDefenderForAllAttack(game.getCombat().getDefenders(),game);
      }
 else       if (game.getCombat().getDefenders().size() == 1) {
        attackedDefender=game.getCombat().getDefenders().iterator().next();
      }
      for (      Permanent attacker : game.getBattlefield().getAllActivePermanents(filterCreatureForCombat,getId(),game)) {
        if (game.getContinuousEffects().checkIfThereArePayCostToAttackBlockEffects(GameEvent.getEvent(GameEvent.EventType.DECLARE_ATTACKER,attackedDefender,attacker.getId(),attacker.getControllerId()),game)) {
          continue;
        }
        if (game.getCombat().getCreaturesForcedToAttack().containsKey(attacker.getId())) {
          Set<UUID> possibleDefenders=game.getCombat().getCreaturesForcedToAttack().get(attacker.getId());
          if (!possibleDefenders.isEmpty() && !possibleDefenders.contains(attackedDefender)) {
            declareAttacker(attacker.getId(),possibleDefenders.iterator().next(),game,false);
            continue;
          }
        }
        declareAttacker(attacker.getId(),attackedDefender,game,false);
      }
    }
 else     if (response.getInteger() != null) {
      if (checkIfAttackersValid(game)) {
        return;
      }
    }
 else     if (response.getBoolean() != null) {
      if (checkIfAttackersValid(game)) {
        return;
      }
    }
 else     if (response.getUUID() != null) {
      Permanent attacker=game.getPermanent(response.getUUID());
      if (attacker != null) {
        if (filterCreatureForCombat.match(attacker,null,playerId,game)) {
          selectDefender(game.getCombat().getDefenders(),attacker.getId(),game);
        }
 else         if (filterAttack.match(attacker,null,playerId,game) && game.getStack().isEmpty()) {
          removeAttackerIfPossible(game,attacker);
        }
      }
    }
  }
}",0.995550281815485
157796,"@Override public boolean chooseTargetAmount(Outcome outcome,TargetAmount target,Ability source,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  while (!abort) {
    if (!isExecutingMacro()) {
      game.fireSelectTargetEvent(playerId,new MessageToClient(target.getMessage() + ""String_Node_Str"" + target.getAmountRemaining(),getRelatedObjectName(source,game)),target.possibleTargets(source == null ? null : source.getSourceId(),playerId,game),target.isRequired(source),getOptions(target,null));
    }
    waitForResponse(game);
    if (response.getUUID() != null) {
      if (target.canTarget(response.getUUID(),source,game)) {
        UUID targetId=response.getUUID();
        int amountSelected=getAmount(1,target.getAmountRemaining(),""String_Node_Str"",game);
        target.addTarget(targetId,amountSelected,source,game);
        return true;
      }
    }
 else     if (!target.isRequired(source)) {
      return false;
    }
  }
  return false;
}","@Override public boolean chooseTargetAmount(Outcome outcome,TargetAmount target,Ability source,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  while (!abort) {
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireSelectTargetEvent(playerId,new MessageToClient(target.getMessage() + ""String_Node_Str"" + target.getAmountRemaining(),getRelatedObjectName(source,game)),target.possibleTargets(source == null ? null : source.getSourceId(),playerId,game),target.isRequired(source),getOptions(target,null));
    }
    waitForResponse(game);
    if (response.getUUID() != null) {
      if (target.canTarget(response.getUUID(),source,game)) {
        UUID targetId=response.getUUID();
        int amountSelected=getAmount(1,target.getAmountRemaining(),""String_Node_Str"",game);
        target.addTarget(targetId,amountSelected,source,game);
        return true;
      }
    }
 else     if (!target.isRequired(source)) {
      return false;
    }
  }
  return false;
}",0.9847094801223242
157797,"/** 
 * Gets the number of times the user wants to repeat their macro
 * @param game
 * @return
 */
public int announceRepetitions(Game game){
  int xValue=0;
  updateGameStatePriority(""String_Node_Str"",game);
  do {
    game.fireGetAmountEvent(playerId,""String_Node_Str"",0,999);
    waitForResponse(game);
  }
 while (response.getInteger() == null && !abort);
  if (response != null && response.getInteger() != null) {
    xValue=response.getInteger();
  }
  return xValue;
}","/** 
 * Gets the number of times the user wants to repeat their macro
 * @param game
 * @return
 */
public int announceRepetitions(Game game){
  int xValue=0;
  updateGameStatePriority(""String_Node_Str"",game);
  do {
    prepareForResponse(game);
    game.fireGetAmountEvent(playerId,""String_Node_Str"",0,999);
    waitForResponse(game);
  }
 while (response.getInteger() == null && !abort);
  if (response != null && response.getInteger() != null) {
    xValue=response.getInteger();
  }
  return xValue;
}",0.9694501018329938
157798,"@Override public int getAmount(int min,int max,String message,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  do {
    if (!isExecutingMacro()) {
      game.fireGetAmountEvent(playerId,message,min,max);
    }
    waitForResponse(game);
  }
 while (response.getInteger() == null && !abort);
  if (response != null && response.getInteger() != null) {
    return response.getInteger();
  }
 else {
    return 0;
  }
}","@Override public int getAmount(int min,int max,String message,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  do {
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireGetAmountEvent(playerId,message,min,max);
    }
    waitForResponse(game);
  }
 while (response.getInteger() == null && !abort);
  if (response != null && response.getInteger() != null) {
    return response.getInteger();
  }
 else {
    return 0;
  }
}",0.9663677130044844
157799,"protected void selectCombatGroup(UUID defenderId,UUID blockerId,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  TargetAttackingCreature target=new TargetAttackingCreature();
  if (!isExecutingMacro()) {
    game.fireSelectTargetEvent(playerId,new MessageToClient(""String_Node_Str"",getRelatedObjectName(blockerId,game)),target.possibleTargets(null,playerId,game),false,getOptions(target,null));
  }
  waitForResponse(game);
  if (response.getBoolean() != null) {
  }
 else   if (response.getUUID() != null) {
    CombatGroup group=game.getCombat().findGroup(response.getUUID());
    if (group != null) {
      if (!group.getBlockers().contains(blockerId)) {
        declareBlocker(defenderId,blockerId,response.getUUID(),game);
      }
 else {
        game.getCombat().removeBlockerGromGroup(blockerId,group,game);
      }
    }
  }
}","protected void selectCombatGroup(UUID defenderId,UUID blockerId,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  TargetAttackingCreature target=new TargetAttackingCreature();
  prepareForResponse(game);
  if (!isExecutingMacro()) {
    game.fireSelectTargetEvent(playerId,new MessageToClient(""String_Node_Str"",getRelatedObjectName(blockerId,game)),target.possibleTargets(null,playerId,game),false,getOptions(target,null));
  }
  waitForResponse(game);
  if (response.getBoolean() != null) {
  }
 else   if (response.getUUID() != null) {
    CombatGroup group=game.getCombat().findGroup(response.getUUID());
    if (group != null) {
      if (!group.getBlockers().contains(blockerId)) {
        declareBlocker(defenderId,blockerId,response.getUUID(),game);
      }
 else {
        game.getCombat().removeBlockerGromGroup(blockerId,group,game);
      }
    }
  }
}",0.9837962962962964
157800,"@Override public boolean chooseMulligan(Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  int nextHandSize=game.mulliganDownTo(playerId);
  do {
    String message=""String_Node_Str"" + (getHand().size() > nextHandSize ? ""String_Node_Str"" : ""String_Node_Str"") + nextHandSize+ (nextHandSize == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
    Map<String,Serializable> options=new HashMap<>();
    options.put(""String_Node_Str"",""String_Node_Str"");
    options.put(""String_Node_Str"",""String_Node_Str"");
    if (!isExecutingMacro()) {
      game.fireAskPlayerEvent(playerId,new MessageToClient(message),null,options);
    }
    waitForResponse(game);
  }
 while (response.getBoolean() == null && !abort);
  if (!abort) {
    return response.getBoolean();
  }
  return false;
}","@Override public boolean chooseMulligan(Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  int nextHandSize=game.mulliganDownTo(playerId);
  do {
    String message=""String_Node_Str"" + (getHand().size() > nextHandSize ? ""String_Node_Str"" : ""String_Node_Str"") + nextHandSize+ (nextHandSize == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
    Map<String,Serializable> options=new HashMap<>();
    options.put(""String_Node_Str"",""String_Node_Str"");
    options.put(""String_Node_Str"",""String_Node_Str"");
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireAskPlayerEvent(playerId,new MessageToClient(message),null,options);
    }
    waitForResponse(game);
  }
 while (response.getBoolean() == null && !abort);
  if (!abort) {
    return response.getBoolean();
  }
  return false;
}",0.981226533166458
157801,"@Override public boolean priority(Game game){
  passed=false;
  if (!abort) {
    HumanPlayer controllingPlayer=this;
    if (isGameUnderControl()) {
      Player player=game.getPlayer(getTurnControlledBy());
      if (player instanceof HumanPlayer) {
        controllingPlayer=(HumanPlayer)player;
      }
    }
    if (getJustActivatedType() != null && !holdingPriority) {
      if (controllingPlayer.getUserData().isPassPriorityCast() && getJustActivatedType() == AbilityType.SPELL) {
        setJustActivatedType(null);
        pass(game);
        return false;
      }
      if (controllingPlayer.getUserData().isPassPriorityActivation() && getJustActivatedType() == AbilityType.ACTIVATED) {
        setJustActivatedType(null);
        pass(game);
        return false;
      }
    }
    if (isGameUnderControl()) {
      if (passedAllTurns || passedTurnSkipStack) {
        if (passWithManaPoolCheck(game)) {
          return false;
        }
      }
      if (passedUntilEndStepBeforeMyTurn) {
        if (game.getTurn().getStepType() != PhaseStep.END_TURN) {
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
 else {
          PlayerList playerList=game.getState().getPlayerList(playerId);
          if (!playerList.getPrevious().equals(game.getActivePlayerId())) {
            if (passWithManaPoolCheck(game)) {
              return false;
            }
          }
        }
      }
      if (game.getStack().isEmpty()) {
        passedUntilStackResolved=false;
        boolean dontCheckPassStep=false;
        if (passedTurn || passedTurnSkipStack) {
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
        if (passedUntilNextMain) {
          if (game.getTurn().getStepType() == PhaseStep.POSTCOMBAT_MAIN || game.getTurn().getStepType() == PhaseStep.PRECOMBAT_MAIN) {
            if (!skippedAtLeastOnce || (!playerId.equals(game.getActivePlayerId()) && !controllingPlayer.getUserData().getUserSkipPrioritySteps().isStopOnAllMainPhases())) {
              skippedAtLeastOnce=true;
              if (passWithManaPoolCheck(game)) {
                return false;
              }
            }
 else {
              dontCheckPassStep=true;
              passedUntilNextMain=false;
            }
          }
 else {
            skippedAtLeastOnce=true;
            if (passWithManaPoolCheck(game)) {
              return false;
            }
          }
        }
        if (passedUntilEndOfTurn) {
          if (game.getTurn().getStepType() == PhaseStep.END_TURN) {
            if (!skippedAtLeastOnce || (playerId.equals(game.getActivePlayerId()) && !controllingPlayer.getUserData().getUserSkipPrioritySteps().isStopOnAllEndPhases())) {
              skippedAtLeastOnce=true;
              if (passWithManaPoolCheck(game)) {
                return false;
              }
            }
 else {
              dontCheckPassStep=true;
              passedUntilEndOfTurn=false;
            }
          }
 else {
            skippedAtLeastOnce=true;
            if (passWithManaPoolCheck(game)) {
              return false;
            }
          }
        }
        if (!dontCheckPassStep && checkPassStep(game,controllingPlayer)) {
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
      }
 else       if (passedUntilStackResolved) {
        if (dateLastAddedToStack == game.getStack().getDateLastAdded()) {
          dateLastAddedToStack=game.getStack().getDateLastAdded();
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
 else {
          passedUntilStackResolved=false;
        }
      }
    }
    while (canRespond()) {
      updateGameStatePriority(""String_Node_Str"",game);
      holdingPriority=false;
      if (!isExecutingMacro()) {
        game.firePriorityEvent(playerId);
      }
      waitForResponse(game);
      if (game.executingRollback()) {
        return true;
      }
      if (response.getBoolean() != null || response.getInteger() != null) {
        if (passWithManaPoolCheck(game) && !activatingMacro) {
          return false;
        }
 else {
          if (activatingMacro) {
synchronized (actionQueue) {
              actionQueue.notifyAll();
            }
          }
          continue;
        }
      }
      break;
    }
    if (response.getString() != null && response.getString().equals(""String_Node_Str"")) {
      specialAction(game);
    }
 else     if (response.getUUID() != null) {
      boolean result=false;
      MageObject object=game.getObject(response.getUUID());
      if (object != null) {
        Zone zone=game.getState().getZone(object.getId());
        if (zone != null) {
          if (object instanceof Card && ((Card)object).isFaceDown(game) && lookAtFaceDownCard((Card)object,game)) {
            result=true;
          }
 else {
            Player actingPlayer=null;
            if (playerId.equals(game.getPriorityPlayerId())) {
              actingPlayer=this;
            }
 else             if (getPlayersUnderYourControl().contains(game.getPriorityPlayerId())) {
              actingPlayer=game.getPlayer(game.getPriorityPlayerId());
            }
            if (actingPlayer != null) {
              LinkedHashMap<UUID,ActivatedAbility> useableAbilities=actingPlayer.getUseableActivatedAbilities(object,zone,game);
              if (useableAbilities != null && !useableAbilities.isEmpty()) {
                activateAbility(useableAbilities,object,game);
                result=true;
              }
            }
          }
        }
      }
      return result;
    }
 else     if (response.getManaType() != null) {
      return false;
    }
    return true;
  }
  return false;
}","@Override public boolean priority(Game game){
  passed=false;
  if (!abort) {
    HumanPlayer controllingPlayer=this;
    if (isGameUnderControl()) {
      Player player=game.getPlayer(getTurnControlledBy());
      if (player instanceof HumanPlayer) {
        controllingPlayer=(HumanPlayer)player;
      }
    }
    if (getJustActivatedType() != null && !holdingPriority) {
      if (controllingPlayer.getUserData().isPassPriorityCast() && getJustActivatedType() == AbilityType.SPELL) {
        setJustActivatedType(null);
        pass(game);
        return false;
      }
      if (controllingPlayer.getUserData().isPassPriorityActivation() && getJustActivatedType() == AbilityType.ACTIVATED) {
        setJustActivatedType(null);
        pass(game);
        return false;
      }
    }
    if (isGameUnderControl()) {
      if (passedAllTurns || passedTurnSkipStack) {
        if (passWithManaPoolCheck(game)) {
          return false;
        }
      }
      if (passedUntilEndStepBeforeMyTurn) {
        if (game.getTurn().getStepType() != PhaseStep.END_TURN) {
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
 else {
          PlayerList playerList=game.getState().getPlayerList(playerId);
          if (!playerList.getPrevious().equals(game.getActivePlayerId())) {
            if (passWithManaPoolCheck(game)) {
              return false;
            }
          }
        }
      }
      if (game.getStack().isEmpty()) {
        passedUntilStackResolved=false;
        boolean dontCheckPassStep=false;
        if (passedTurn || passedTurnSkipStack) {
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
        if (passedUntilNextMain) {
          if (game.getTurn().getStepType() == PhaseStep.POSTCOMBAT_MAIN || game.getTurn().getStepType() == PhaseStep.PRECOMBAT_MAIN) {
            if (!skippedAtLeastOnce || (!playerId.equals(game.getActivePlayerId()) && !controllingPlayer.getUserData().getUserSkipPrioritySteps().isStopOnAllMainPhases())) {
              skippedAtLeastOnce=true;
              if (passWithManaPoolCheck(game)) {
                return false;
              }
            }
 else {
              dontCheckPassStep=true;
              passedUntilNextMain=false;
            }
          }
 else {
            skippedAtLeastOnce=true;
            if (passWithManaPoolCheck(game)) {
              return false;
            }
          }
        }
        if (passedUntilEndOfTurn) {
          if (game.getTurn().getStepType() == PhaseStep.END_TURN) {
            if (!skippedAtLeastOnce || (playerId.equals(game.getActivePlayerId()) && !controllingPlayer.getUserData().getUserSkipPrioritySteps().isStopOnAllEndPhases())) {
              skippedAtLeastOnce=true;
              if (passWithManaPoolCheck(game)) {
                return false;
              }
            }
 else {
              dontCheckPassStep=true;
              passedUntilEndOfTurn=false;
            }
          }
 else {
            skippedAtLeastOnce=true;
            if (passWithManaPoolCheck(game)) {
              return false;
            }
          }
        }
        if (!dontCheckPassStep && checkPassStep(game,controllingPlayer)) {
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
      }
 else       if (passedUntilStackResolved) {
        if (dateLastAddedToStack == game.getStack().getDateLastAdded()) {
          dateLastAddedToStack=game.getStack().getDateLastAdded();
          if (passWithManaPoolCheck(game)) {
            return false;
          }
        }
 else {
          passedUntilStackResolved=false;
        }
      }
    }
    while (canRespond()) {
      updateGameStatePriority(""String_Node_Str"",game);
      holdingPriority=false;
      prepareForResponse(game);
      if (!isExecutingMacro()) {
        game.firePriorityEvent(playerId);
      }
      waitForResponse(game);
      if (game.executingRollback()) {
        return true;
      }
      if (response.getBoolean() != null || response.getInteger() != null) {
        if (passWithManaPoolCheck(game) && !activatingMacro) {
          return false;
        }
 else {
          if (activatingMacro) {
synchronized (actionQueue) {
              actionQueue.notifyAll();
            }
          }
          continue;
        }
      }
      break;
    }
    if (response.getString() != null && response.getString().equals(""String_Node_Str"")) {
      specialAction(game);
    }
 else     if (response.getUUID() != null) {
      boolean result=false;
      MageObject object=game.getObject(response.getUUID());
      if (object != null) {
        Zone zone=game.getState().getZone(object.getId());
        if (zone != null) {
          if (object instanceof Card && ((Card)object).isFaceDown(game) && lookAtFaceDownCard((Card)object,game)) {
            result=true;
          }
 else {
            Player actingPlayer=null;
            if (playerId.equals(game.getPriorityPlayerId())) {
              actingPlayer=this;
            }
 else             if (getPlayersUnderYourControl().contains(game.getPriorityPlayerId())) {
              actingPlayer=game.getPlayer(game.getPriorityPlayerId());
            }
            if (actingPlayer != null) {
              LinkedHashMap<UUID,ActivatedAbility> useableAbilities=actingPlayer.getUseableActivatedAbilities(object,zone,game);
              if (useableAbilities != null && !useableAbilities.isEmpty()) {
                activateAbility(useableAbilities,object,game);
                result=true;
              }
            }
          }
        }
      }
      return result;
    }
 else     if (response.getManaType() != null) {
      return false;
    }
    return true;
  }
  return false;
}",0.9972144846796658
157802,"protected boolean pullResponseFromQueue(Game game){
  if (actionQueue.isEmpty() && actionIterations > 0 && !actionQueueSaved.isEmpty()) {
    actionQueue=new LinkedList(actionQueueSaved);
    actionIterations--;
  }
  PlayerResponse action=actionQueue.poll();
  if (action != null) {
    if (action.getString() != null && action.getString().equals(""String_Node_Str"")) {
      action=actionQueue.poll();
      if (action == null) {
        return false;
      }
      sendPlayerAction(PlayerAction.PASS_PRIORITY_UNTIL_STACK_RESOLVED,game,null);
    }
synchronized (response) {
      response.copy(action);
      response.notifyAll();
      macroTriggeredSelectionFlag=false;
      return true;
    }
  }
  return false;
}","protected boolean pullResponseFromQueue(Game game){
  if (actionQueue.isEmpty() && actionIterations > 0 && !actionQueueSaved.isEmpty()) {
    actionQueue=new LinkedList(actionQueueSaved);
    actionIterations--;
  }
  PlayerResponse action=actionQueue.poll();
  if (action != null) {
    if (action.getString() != null && action.getString().equals(""String_Node_Str"")) {
      action=actionQueue.poll();
      if (action == null) {
        return false;
      }
      sendPlayerAction(PlayerAction.PASS_PRIORITY_UNTIL_STACK_RESOLVED,game,null);
    }
    waitResponseOpen();
synchronized (response) {
      response.copy(action);
      response.notifyAll();
      macroTriggeredSelectionFlag=false;
      return true;
    }
  }
  return false;
}",0.9836065573770492
157803,"@Override public void abort(){
  abort=true;
synchronized (response) {
    response.notifyAll();
    logger.debug(""String_Node_Str"" + getId());
  }
}","@Override public void abort(){
  abort=true;
  waitResponseOpen();
synchronized (response) {
    response.notifyAll();
    logger.debug(""String_Node_Str"" + getId());
  }
}",0.93125
157804,"@Override public TriggeredAbility chooseTriggeredAbility(List<TriggeredAbility> abilities,Game game){
  String autoOrderRuleText=null;
  boolean autoOrderUse=getControllingPlayersUserData(game).isAutoOrderTrigger();
  while (!abort) {
    List<TriggeredAbility> abilitiesWithNoOrderSet=new ArrayList<>();
    TriggeredAbility abilityOrderLast=null;
    for (    TriggeredAbility ability : abilities) {
      if (triggerAutoOrderAbilityFirst.contains(ability.getOriginalId())) {
        return ability;
      }
      MageObject object=game.getObject(ability.getSourceId());
      String rule=ability.getRule(object != null ? object.getName() : null);
      if (triggerAutoOrderNameFirst.contains(rule)) {
        return ability;
      }
      if (triggerAutoOrderAbilityLast.contains(ability.getOriginalId())) {
        abilityOrderLast=ability;
        continue;
      }
      if (triggerAutoOrderNameLast.contains(rule)) {
        abilityOrderLast=ability;
        continue;
      }
      if (autoOrderUse) {
        if (autoOrderRuleText == null) {
          autoOrderRuleText=rule;
        }
 else         if (!rule.equals(autoOrderRuleText)) {
          autoOrderUse=false;
        }
      }
      abilitiesWithNoOrderSet.add(ability);
    }
    if (abilitiesWithNoOrderSet.isEmpty()) {
      return abilityOrderLast;
    }
    if (abilitiesWithNoOrderSet.size() == 1 || autoOrderUse) {
      return abilitiesWithNoOrderSet.iterator().next();
    }
    macroTriggeredSelectionFlag=true;
    updateGameStatePriority(""String_Node_Str"",game);
    if (!isExecutingMacro()) {
      game.fireSelectTargetTriggeredAbilityEvent(playerId,""String_Node_Str"",abilitiesWithNoOrderSet);
    }
    waitForResponse(game);
    if (response.getUUID() != null) {
      for (      TriggeredAbility ability : abilitiesWithNoOrderSet) {
        if (ability.getId().equals(response.getUUID()) || (!macroTriggeredSelectionFlag && ability.getSourceId().equals(response.getUUID()))) {
          if (recordingMacro) {
            PlayerResponse tResponse=new PlayerResponse();
            tResponse.setUUID(ability.getSourceId());
            actionQueueSaved.add(tResponse);
            logger.debug(""String_Node_Str"" + tResponse);
          }
          macroTriggeredSelectionFlag=false;
          return ability;
        }
      }
    }
  }
  macroTriggeredSelectionFlag=false;
  return null;
}","@Override public TriggeredAbility chooseTriggeredAbility(List<TriggeredAbility> abilities,Game game){
  String autoOrderRuleText=null;
  boolean autoOrderUse=getControllingPlayersUserData(game).isAutoOrderTrigger();
  while (!abort) {
    List<TriggeredAbility> abilitiesWithNoOrderSet=new ArrayList<>();
    TriggeredAbility abilityOrderLast=null;
    for (    TriggeredAbility ability : abilities) {
      if (triggerAutoOrderAbilityFirst.contains(ability.getOriginalId())) {
        return ability;
      }
      MageObject object=game.getObject(ability.getSourceId());
      String rule=ability.getRule(object != null ? object.getName() : null);
      if (triggerAutoOrderNameFirst.contains(rule)) {
        return ability;
      }
      if (triggerAutoOrderAbilityLast.contains(ability.getOriginalId())) {
        abilityOrderLast=ability;
        continue;
      }
      if (triggerAutoOrderNameLast.contains(rule)) {
        abilityOrderLast=ability;
        continue;
      }
      if (autoOrderUse) {
        if (autoOrderRuleText == null) {
          autoOrderRuleText=rule;
        }
 else         if (!rule.equals(autoOrderRuleText)) {
          autoOrderUse=false;
        }
      }
      abilitiesWithNoOrderSet.add(ability);
    }
    if (abilitiesWithNoOrderSet.isEmpty()) {
      return abilityOrderLast;
    }
    if (abilitiesWithNoOrderSet.size() == 1 || autoOrderUse) {
      return abilitiesWithNoOrderSet.iterator().next();
    }
    macroTriggeredSelectionFlag=true;
    updateGameStatePriority(""String_Node_Str"",game);
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireSelectTargetTriggeredAbilityEvent(playerId,""String_Node_Str"",abilitiesWithNoOrderSet);
    }
    waitForResponse(game);
    if (response.getUUID() != null) {
      for (      TriggeredAbility ability : abilitiesWithNoOrderSet) {
        if (ability.getId().equals(response.getUUID()) || (!macroTriggeredSelectionFlag && ability.getSourceId().equals(response.getUUID()))) {
          if (recordingMacro) {
            PlayerResponse tResponse=new PlayerResponse();
            tResponse.setUUID(ability.getSourceId());
            actionQueueSaved.add(tResponse);
            logger.debug(""String_Node_Str"" + tResponse);
          }
          macroTriggeredSelectionFlag=false;
          return ability;
        }
      }
    }
  }
  macroTriggeredSelectionFlag=false;
  return null;
}",0.9937212222687316
157805,"@Override public Mode chooseMode(Modes modes,Ability source,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  if (modes.size() > 1) {
    MageObject obj=game.getObject(source.getSourceId());
    Map<UUID,String> modeMap=new LinkedHashMap<>();
    AvailableModes:     for (    Mode mode : modes.getAvailableModes(source,game)) {
      int timesSelected=0;
      for (      UUID selectedModeId : modes.getSelectedModes()) {
        Mode selectedMode=modes.get(selectedModeId);
        if (mode.getId().equals(selectedMode.getId())) {
          if (modes.isEachModeMoreThanOnce()) {
            timesSelected++;
          }
 else {
            continue AvailableModes;
          }
        }
      }
      if (mode.getTargets().canChoose(source.getSourceId(),source.getControllerId(),game)) {
        String modeText=mode.getEffects().getText(mode);
        if (obj != null) {
          modeText=modeText.replace(""String_Node_Str"",obj.getName()).replace(""String_Node_Str"",obj.getName());
        }
        if (modes.isEachModeMoreThanOnce()) {
          if (timesSelected > 0) {
            modeText=""String_Node_Str"" + timesSelected + ""String_Node_Str""+ modeText;
          }
        }
        modeMap.put(mode.getId(),modeText);
      }
    }
    if (!modeMap.isEmpty()) {
      boolean done=false;
      while (!done) {
        if (!isExecutingMacro()) {
          game.fireGetModeEvent(playerId,""String_Node_Str"",modeMap);
        }
        waitForResponse(game);
        if (response.getUUID() != null) {
          for (          Mode mode : modes.getAvailableModes(source,game)) {
            if (mode.getId().equals(response.getUUID())) {
              return mode;
            }
          }
        }
        if (source.getAbilityType() != AbilityType.TRIGGERED) {
          done=true;
        }
        if (!canRespond()) {
          return null;
        }
      }
    }
    return null;
  }
  return modes.getMode();
}","@Override public Mode chooseMode(Modes modes,Ability source,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  if (modes.size() > 1) {
    MageObject obj=game.getObject(source.getSourceId());
    Map<UUID,String> modeMap=new LinkedHashMap<>();
    AvailableModes:     for (    Mode mode : modes.getAvailableModes(source,game)) {
      int timesSelected=0;
      for (      UUID selectedModeId : modes.getSelectedModes()) {
        Mode selectedMode=modes.get(selectedModeId);
        if (mode.getId().equals(selectedMode.getId())) {
          if (modes.isEachModeMoreThanOnce()) {
            timesSelected++;
          }
 else {
            continue AvailableModes;
          }
        }
      }
      if (mode.getTargets().canChoose(source.getSourceId(),source.getControllerId(),game)) {
        String modeText=mode.getEffects().getText(mode);
        if (obj != null) {
          modeText=modeText.replace(""String_Node_Str"",obj.getName()).replace(""String_Node_Str"",obj.getName());
        }
        if (modes.isEachModeMoreThanOnce()) {
          if (timesSelected > 0) {
            modeText=""String_Node_Str"" + timesSelected + ""String_Node_Str""+ modeText;
          }
        }
        modeMap.put(mode.getId(),modeText);
      }
    }
    if (!modeMap.isEmpty()) {
      boolean done=false;
      while (!done) {
        prepareForResponse(game);
        if (!isExecutingMacro()) {
          game.fireGetModeEvent(playerId,""String_Node_Str"",modeMap);
        }
        waitForResponse(game);
        if (response.getUUID() != null) {
          for (          Mode mode : modes.getAvailableModes(source,game)) {
            if (mode.getId().equals(response.getUUID())) {
              return mode;
            }
          }
        }
        if (source.getAbilityType() != AbilityType.TRIGGERED) {
          done=true;
        }
        if (!canRespond()) {
          return null;
        }
      }
    }
    return null;
  }
  return modes.getMode();
}",0.9913087934560328
157806,"@Override public boolean chooseUse(Outcome outcome,String message,String secondMessage,String trueText,String falseText,Ability source,Game game){
  MessageToClient messageToClient=new MessageToClient(message,secondMessage);
  Map<String,Serializable> options=new HashMap<>(2);
  if (trueText != null) {
    options.put(""String_Node_Str"",trueText);
  }
  if (falseText != null) {
    options.put(""String_Node_Str"",falseText);
  }
  if (source != null) {
    Boolean answer=requestAutoAnswerId.get(source.getOriginalId() + ""String_Node_Str"" + message);
    if (answer != null) {
      return answer;
    }
 else {
      answer=requestAutoAnswerText.get(message);
      if (answer != null) {
        return answer;
      }
    }
  }
  updateGameStatePriority(""String_Node_Str"",game);
  do {
    if (messageToClient.getSecondMessage() == null) {
      messageToClient.setSecondMessage(getRelatedObjectName(source,game));
    }
    if (!isExecutingMacro()) {
      game.fireAskPlayerEvent(playerId,messageToClient,source,options);
    }
    waitForResponse(game);
  }
 while (response.getBoolean() == null && !abort);
  if (!abort) {
    return response.getBoolean();
  }
  return false;
}","@Override public boolean chooseUse(Outcome outcome,String message,String secondMessage,String trueText,String falseText,Ability source,Game game){
  MessageToClient messageToClient=new MessageToClient(message,secondMessage);
  Map<String,Serializable> options=new HashMap<>(2);
  if (trueText != null) {
    options.put(""String_Node_Str"",trueText);
  }
  if (falseText != null) {
    options.put(""String_Node_Str"",falseText);
  }
  if (source != null) {
    Boolean answer=requestAutoAnswerId.get(source.getOriginalId() + ""String_Node_Str"" + message);
    if (answer != null) {
      return answer;
    }
 else {
      answer=requestAutoAnswerText.get(message);
      if (answer != null) {
        return answer;
      }
    }
  }
  updateGameStatePriority(""String_Node_Str"",game);
  do {
    if (messageToClient.getSecondMessage() == null) {
      messageToClient.setSecondMessage(getRelatedObjectName(source,game));
    }
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireAskPlayerEvent(playerId,messageToClient,source,options);
    }
    waitForResponse(game);
  }
 while (response.getBoolean() == null && !abort);
  if (!abort) {
    return response.getBoolean();
  }
  return false;
}",0.9875
157807,"protected void waitForResponse(Game game){
  if (isExecutingMacro()) {
    pullResponseFromQueue(game);
    return;
  }
  response.clear();
  logger.debug(""String_Node_Str"" + getId());
  game.resumeTimer(getTurnControlledBy());
  boolean loop=true;
  while (loop) {
    loop=false;
synchronized (response) {
      try {
        response.wait();
      }
 catch (      InterruptedException ex) {
        logger.error(""String_Node_Str"" + getName() + ""String_Node_Str""+ game.getId(),ex);
      }
 finally {
        game.pauseTimer(getTurnControlledBy());
      }
    }
    if (response.getResponseConcedeCheck()) {
      ((GameImpl)game).checkConcede();
      if (game.hasEnded()) {
        return;
      }
      response.clear();
      if (isInGame()) {
        loop=true;
      }
    }
  }
  if (recordingMacro && !macroTriggeredSelectionFlag) {
    actionQueueSaved.add(new PlayerResponse(response));
  }
}","protected void waitForResponse(Game game){
  if (isExecutingMacro()) {
    pullResponseFromQueue(game);
    return;
  }
  response.clear();
  game.resumeTimer(getTurnControlledBy());
  responseOpenedForAnswer=true;
  boolean loop=true;
  while (loop) {
    loop=false;
synchronized (response) {
      try {
        response.wait();
      }
 catch (      InterruptedException ex) {
        logger.error(""String_Node_Str"" + getName() + ""String_Node_Str""+ game.getId(),ex);
      }
 finally {
        responseOpenedForAnswer=false;
        game.pauseTimer(getTurnControlledBy());
      }
    }
    if (response.getResponseConcedeCheck()) {
      ((GameImpl)game).checkConcede();
      if (game.hasEnded()) {
        return;
      }
      response.clear();
      if (isInGame()) {
        loop=true;
      }
    }
  }
  if (recordingMacro && !macroTriggeredSelectionFlag) {
    actionQueueSaved.add(new PlayerResponse(response));
  }
}",0.6056644880174292
157808,"protected boolean playManaHandling(Ability abilityToCast,ManaCost unpaid,String promptText,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  Map<String,Serializable> options=new HashMap<>();
  if (!isExecutingMacro()) {
    game.firePlayManaEvent(playerId,""String_Node_Str"" + promptText,options);
  }
  waitForResponse(game);
  if (!this.canRespond()) {
    return false;
  }
  if (response.getBoolean() != null) {
    return false;
  }
 else   if (response.getUUID() != null) {
    playManaAbilities(abilityToCast,unpaid,game);
  }
 else   if (response.getString() != null && response.getString().equals(""String_Node_Str"")) {
    if (unpaid instanceof ManaCostsImpl) {
      specialManaAction(unpaid,game);
    }
  }
 else   if (response.getManaType() != null) {
    if (response.getResponseManaTypePlayerId().equals(this.getId())) {
      this.getManaPool().unlockManaType(response.getManaType());
    }
  }
  return true;
}","protected boolean playManaHandling(Ability abilityToCast,ManaCost unpaid,String promptText,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  Map<String,Serializable> options=new HashMap<>();
  prepareForResponse(game);
  if (!isExecutingMacro()) {
    game.firePlayManaEvent(playerId,""String_Node_Str"" + promptText,options);
  }
  waitForResponse(game);
  if (!this.canRespond()) {
    return false;
  }
  if (response.getBoolean() != null) {
    return false;
  }
 else   if (response.getUUID() != null) {
    playManaAbilities(abilityToCast,unpaid,game);
  }
 else   if (response.getString() != null && response.getString().equals(""String_Node_Str"")) {
    if (unpaid instanceof ManaCostsImpl) {
      specialManaAction(unpaid,game);
    }
  }
 else   if (response.getManaType() != null) {
    if (response.getResponseManaTypePlayerId().equals(this.getId())) {
      this.getManaPool().unlockManaType(response.getManaType());
    }
  }
  return true;
}",0.9853403141361256
157809,"@Override public void setResponseInteger(Integer responseInteger){
synchronized (response) {
    response.setInteger(responseInteger);
    response.notifyAll();
    logger.debug(""String_Node_Str"" + getId());
  }
}","@Override public void setResponseInteger(Integer responseInteger){
  waitResponseOpen();
synchronized (response) {
    response.setInteger(responseInteger);
    response.notifyAll();
    logger.debug(""String_Node_Str"" + getId());
  }
}",0.9508928571428572
157810,"@Override public void setResponseManaType(UUID manaTypePlayerId,ManaType manaType){
synchronized (response) {
    response.setManaType(manaType);
    response.setResponseManaTypePlayerId(manaTypePlayerId);
    response.notifyAll();
    logger.debug(""String_Node_Str"" + getId());
  }
}","@Override public void setResponseManaType(UUID manaTypePlayerId,ManaType manaType){
  waitResponseOpen();
synchronized (response) {
    response.setManaType(manaType);
    response.setResponseManaTypePlayerId(manaTypePlayerId);
    response.notifyAll();
    logger.debug(""String_Node_Str"" + getId());
  }
}",0.9627118644067796
157811,"@Override public boolean choose(Outcome outcome,Cards cards,TargetCard target,Game game){
  if (cards == null) {
    return false;
  }
  updateGameStatePriority(""String_Node_Str"",game);
  while (!abort) {
    boolean required=target.isRequired();
    int count=cards.count(target.getFilter(),game);
    if (count == 0) {
      required=false;
    }
    if (target.getTargets().size() >= target.getNumberOfTargets()) {
      required=false;
    }
    Map<String,Serializable> options=getOptions(target,null);
    List<UUID> chosen=target.getTargets();
    options.put(""String_Node_Str"",(Serializable)chosen);
    List<UUID> choosable=new ArrayList<>();
    for (    UUID cardId : cards) {
      if (target.canTarget(cardId,cards,game)) {
        choosable.add(cardId);
      }
    }
    if (!choosable.isEmpty()) {
      options.put(""String_Node_Str"",(Serializable)choosable);
    }
    if (!isExecutingMacro()) {
      game.fireSelectTargetEvent(playerId,new MessageToClient(target.getMessage()),cards,required,options);
    }
    waitForResponse(game);
    if (response.getUUID() != null) {
      if (target.canTarget(response.getUUID(),cards,game)) {
        if (target.getTargets().contains(response.getUUID())) {
          target.remove(response.getUUID());
        }
 else {
          target.add(response.getUUID(),game);
          if (target.doneChosing()) {
            return true;
          }
        }
      }
    }
 else {
      if (target.getTargets().size() >= target.getNumberOfTargets()) {
        return true;
      }
      if (!required) {
        return false;
      }
    }
  }
  return false;
}","@Override public boolean choose(Outcome outcome,Cards cards,TargetCard target,Game game){
  if (cards == null) {
    return false;
  }
  updateGameStatePriority(""String_Node_Str"",game);
  while (!abort) {
    boolean required=target.isRequired();
    int count=cards.count(target.getFilter(),game);
    if (count == 0) {
      required=false;
    }
    if (target.getTargets().size() >= target.getNumberOfTargets()) {
      required=false;
    }
    Map<String,Serializable> options=getOptions(target,null);
    List<UUID> chosen=target.getTargets();
    options.put(""String_Node_Str"",(Serializable)chosen);
    List<UUID> choosable=new ArrayList<>();
    for (    UUID cardId : cards) {
      if (target.canTarget(cardId,cards,game)) {
        choosable.add(cardId);
      }
    }
    if (!choosable.isEmpty()) {
      options.put(""String_Node_Str"",(Serializable)choosable);
    }
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireSelectTargetEvent(playerId,new MessageToClient(target.getMessage()),cards,required,options);
    }
    waitForResponse(game);
    if (response.getUUID() != null) {
      if (target.canTarget(response.getUUID(),cards,game)) {
        if (target.getTargets().contains(response.getUUID())) {
          target.remove(response.getUUID());
        }
 else {
          target.add(response.getUUID(),game);
          if (target.doneChosing()) {
            return true;
          }
        }
      }
    }
 else {
      if (target.getTargets().size() >= target.getNumberOfTargets()) {
        return true;
      }
      if (!required) {
        return false;
      }
    }
  }
  return false;
}",0.990791896869245
157812,"@Override public void skip(){
synchronized (response) {
    response.setInteger(0);
    response.notifyAll();
    logger.debug(""String_Node_Str"" + getId());
  }
}","@Override public void skip(){
  waitResponseOpen();
synchronized (response) {
    response.setInteger(0);
    response.notifyAll();
    logger.debug(""String_Node_Str"" + getId());
  }
}",0.9364161849710982
157813,"protected void activateAbility(LinkedHashMap<UUID,? extends ActivatedAbility> abilities,MageObject object,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  if (abilities.size() == 1 && suppressAbilityPicker(abilities.values().iterator().next(),game)) {
    ActivatedAbility ability=abilities.values().iterator().next();
    if (!ability.getTargets().isEmpty() || !(ability.getCosts().size() == 1 && ability.getCosts().get(0) instanceof SacrificeSourceCost) || !(ability.getCosts().size() == 2 && ability.getCosts().get(0) instanceof TapSourceCost && ability.getCosts().get(0) instanceof SacrificeSourceCost)) {
      activateAbility(ability,game);
      return;
    }
  }
  if (userData.isUseFirstManaAbility() && object instanceof Permanent && object.isLand()) {
    ActivatedAbility ability=abilities.values().iterator().next();
    if (ability instanceof ActivatedManaAbilityImpl) {
      activateAbility(ability,game);
      return;
    }
  }
  if (!isExecutingMacro()) {
    game.fireGetChoiceEvent(playerId,name,object,new ArrayList<>(abilities.values()));
  }
  waitForResponse(game);
  if (response.getUUID() != null && isInGame()) {
    if (abilities.containsKey(response.getUUID())) {
      activateAbility(abilities.get(response.getUUID()),game);
    }
  }
}","protected void activateAbility(LinkedHashMap<UUID,? extends ActivatedAbility> abilities,MageObject object,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  if (abilities.size() == 1 && suppressAbilityPicker(abilities.values().iterator().next(),game)) {
    ActivatedAbility ability=abilities.values().iterator().next();
    if (!ability.getTargets().isEmpty() || !(ability.getCosts().size() == 1 && ability.getCosts().get(0) instanceof SacrificeSourceCost) || !(ability.getCosts().size() == 2 && ability.getCosts().get(0) instanceof TapSourceCost && ability.getCosts().get(0) instanceof SacrificeSourceCost)) {
      activateAbility(ability,game);
      return;
    }
  }
  if (userData.isUseFirstManaAbility() && object instanceof Permanent && object.isLand()) {
    ActivatedAbility ability=abilities.values().iterator().next();
    if (ability instanceof ActivatedManaAbilityImpl) {
      activateAbility(ability,game);
      return;
    }
  }
  prepareForResponse(game);
  if (!isExecutingMacro()) {
    game.fireGetChoiceEvent(playerId,name,object,new ArrayList<>(abilities.values()));
  }
  waitForResponse(game);
  if (response.getUUID() != null && isInGame()) {
    if (abilities.containsKey(response.getUUID())) {
      activateAbility(abilities.get(response.getUUID()),game);
    }
  }
}",0.9892141756548536
157814,"@Override public UUID chooseAttackerOrder(List<Permanent> attackers,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  while (!abort) {
    if (!isExecutingMacro()) {
      game.fireSelectTargetEvent(playerId,""String_Node_Str"",attackers,true);
    }
    waitForResponse(game);
    if (response.getUUID() != null) {
      for (      Permanent perm : attackers) {
        if (perm.getId().equals(response.getUUID())) {
          return perm.getId();
        }
      }
    }
  }
  return null;
}","@Override public UUID chooseAttackerOrder(List<Permanent> attackers,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  while (!abort) {
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireSelectTargetEvent(playerId,""String_Node_Str"",attackers,true);
    }
    waitForResponse(game);
    if (response.getUUID() != null) {
      for (      Permanent perm : attackers) {
        if (perm.getId().equals(response.getUUID())) {
          return perm.getId();
        }
      }
    }
  }
  return null;
}",0.9712092130518234
157815,"@Override public void setResponseString(String responseString){
synchronized (response) {
    response.setString(responseString);
    response.notifyAll();
    logger.debug(""String_Node_Str"" + getId());
  }
}","@Override public void setResponseString(String responseString){
  waitResponseOpen();
synchronized (response) {
    response.setString(responseString);
    response.notifyAll();
    logger.debug(""String_Node_Str"" + getId());
  }
}",0.9497716894977168
157816,"protected void specialManaAction(ManaCost unpaid,Game game){
  LinkedHashMap<UUID,SpecialAction> specialActions=game.getState().getSpecialActions().getControlledBy(playerId,true);
  if (!specialActions.isEmpty()) {
    updateGameStatePriority(""String_Node_Str"",game);
    if (!isExecutingMacro()) {
      game.fireGetChoiceEvent(playerId,name,null,new ArrayList<>(specialActions.values()));
    }
    waitForResponse(game);
    if (response.getUUID() != null) {
      if (specialActions.containsKey(response.getUUID())) {
        SpecialAction specialAction=specialActions.get(response.getUUID());
        if (specialAction != null) {
          specialAction.setUnpaidMana(unpaid);
          activateAbility(specialActions.get(response.getUUID()),game);
        }
      }
    }
  }
}","protected void specialManaAction(ManaCost unpaid,Game game){
  LinkedHashMap<UUID,SpecialAction> specialActions=game.getState().getSpecialActions().getControlledBy(playerId,true);
  if (!specialActions.isEmpty()) {
    updateGameStatePriority(""String_Node_Str"",game);
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireGetChoiceEvent(playerId,name,null,new ArrayList<>(specialActions.values()));
    }
    waitForResponse(game);
    if (response.getUUID() != null) {
      if (specialActions.containsKey(response.getUUID())) {
        SpecialAction specialAction=specialActions.get(response.getUUID());
        if (specialAction != null) {
          specialAction.setUnpaidMana(unpaid);
          activateAbility(specialActions.get(response.getUUID()),game);
        }
      }
    }
  }
}",0.981203007518797
157817,"@Override public UUID chooseBlockerOrder(List<Permanent> blockers,CombatGroup combatGroup,List<UUID> blockerOrder,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  while (!abort) {
    if (!isExecutingMacro()) {
      game.fireSelectTargetEvent(playerId,""String_Node_Str"",blockers,true);
    }
    waitForResponse(game);
    if (response.getUUID() != null) {
      for (      Permanent perm : blockers) {
        if (perm.getId().equals(response.getUUID())) {
          return perm.getId();
        }
      }
    }
  }
  return null;
}","@Override public UUID chooseBlockerOrder(List<Permanent> blockers,CombatGroup combatGroup,List<UUID> blockerOrder,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  while (!abort) {
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireSelectTargetEvent(playerId,""String_Node_Str"",blockers,true);
    }
    waitForResponse(game);
    if (response.getUUID() != null) {
      for (      Permanent perm : blockers) {
        if (perm.getId().equals(response.getUUID())) {
          return perm.getId();
        }
      }
    }
  }
  return null;
}",0.9734513274336284
157818,"@Override public void selectBlockers(Game game,UUID defendingPlayerId){
  updateGameStatePriority(""String_Node_Str"",game);
  FilterCreatureForCombatBlock filter=filterCreatureForCombatBlock.copy();
  filter.add(new ControllerIdPredicate(defendingPlayerId));
  if (game.getBattlefield().count(filter,null,playerId,game) == 0 && !getControllingPlayersUserData(game).getUserSkipPrioritySteps().isStopOnDeclareBlockerIfNoneAvailable()) {
    return;
  }
  while (!abort) {
    if (!isExecutingMacro()) {
      game.fireSelectEvent(playerId,""String_Node_Str"");
    }
    waitForResponse(game);
    if (response.getBoolean() != null) {
      return;
    }
 else     if (response.getInteger() != null) {
      return;
    }
 else     if (response.getUUID() != null) {
      Permanent blocker=game.getPermanent(response.getUUID());
      if (blocker != null) {
        boolean removeBlocker=false;
        if (filter.match(blocker,null,playerId,game)) {
          selectCombatGroup(defendingPlayerId,blocker.getId(),game);
        }
 else         if (filterBlock.match(blocker,null,playerId,game) && game.getStack().isEmpty()) {
          removeBlocker=true;
        }
        if (removeBlocker) {
          game.getCombat().removeBlocker(blocker.getId(),game);
        }
      }
    }
  }
}","@Override public void selectBlockers(Game game,UUID defendingPlayerId){
  updateGameStatePriority(""String_Node_Str"",game);
  FilterCreatureForCombatBlock filter=filterCreatureForCombatBlock.copy();
  filter.add(new ControllerIdPredicate(defendingPlayerId));
  if (game.getBattlefield().count(filter,null,playerId,game) == 0 && !getControllingPlayersUserData(game).getUserSkipPrioritySteps().isStopOnDeclareBlockerIfNoneAvailable()) {
    return;
  }
  while (!abort) {
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireSelectEvent(playerId,""String_Node_Str"");
    }
    waitForResponse(game);
    if (response.getBoolean() != null) {
      return;
    }
 else     if (response.getInteger() != null) {
      return;
    }
 else     if (response.getUUID() != null) {
      Permanent blocker=game.getPermanent(response.getUUID());
      if (blocker != null) {
        boolean removeBlocker=false;
        if (filter.match(blocker,null,playerId,game)) {
          selectCombatGroup(defendingPlayerId,blocker.getId(),game);
        }
 else         if (filterBlock.match(blocker,null,playerId,game) && game.getStack().isEmpty()) {
          removeBlocker=true;
        }
        if (removeBlocker) {
          game.getCombat().removeBlocker(blocker.getId(),game);
        }
      }
    }
  }
}",0.9884437596302004
157819,"@Override public boolean choosePile(Outcome outcome,String message,List<? extends Card> pile1,List<? extends Card> pile2,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  do {
    if (!isExecutingMacro()) {
      game.fireChoosePileEvent(playerId,message,pile1,pile2);
    }
    waitForResponse(game);
  }
 while (response.getBoolean() == null && !abort);
  if (!abort) {
    return response.getBoolean();
  }
  return false;
}","@Override public boolean choosePile(Outcome outcome,String message,List<? extends Card> pile1,List<? extends Card> pile2,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  do {
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireChoosePileEvent(playerId,message,pile1,pile2);
    }
    waitForResponse(game);
  }
 while (response.getBoolean() == null && !abort);
  if (!abort) {
    return response.getBoolean();
  }
  return false;
}",0.9671772428884028
157820,"@Override public void signalPlayerConcede(){
synchronized (response) {
    response.setResponseConcedeCheck();
    response.notifyAll();
    logger.debug(""String_Node_Str"" + getId());
  }
}","@Override public void signalPlayerConcede(){
  waitResponseOpen();
synchronized (response) {
    response.setResponseConcedeCheck();
    response.notifyAll();
    logger.debug(""String_Node_Str"" + getId());
  }
}",0.945
157821,"@Override public boolean chooseTarget(Outcome outcome,Cards cards,TargetCard target,Ability source,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  while (!abort) {
    boolean required;
    if (target.isRequiredExplicitlySet()) {
      required=target.isRequired();
    }
 else {
      required=target.isRequired(source);
    }
    if (cards == null) {
      required=false;
    }
 else {
      int count=cards.count(target.getFilter(),game);
      if (count == 0) {
        required=false;
      }
    }
    if (target.getTargets().size() >= target.getNumberOfTargets()) {
      required=false;
    }
    Map<String,Serializable> options=getOptions(target,null);
    List<UUID> chosen=target.getTargets();
    options.put(""String_Node_Str"",(Serializable)chosen);
    List<UUID> choosable=new ArrayList<>();
    for (    UUID cardId : cards) {
      if (target.canTarget(cardId,cards,game)) {
        choosable.add(cardId);
      }
    }
    if (!choosable.isEmpty()) {
      options.put(""String_Node_Str"",(Serializable)choosable);
    }
    if (!isExecutingMacro()) {
      game.fireSelectTargetEvent(playerId,new MessageToClient(target.getMessage(),getRelatedObjectName(source,game)),cards,required,options);
    }
    waitForResponse(game);
    if (response.getUUID() != null) {
      if (target.getTargets().contains(response.getUUID())) {
        target.remove(response.getUUID());
      }
 else       if (target.canTarget(response.getUUID(),cards,game)) {
        target.addTarget(response.getUUID(),source,game);
        if (target.doneChosing()) {
          return true;
        }
      }
    }
 else {
      if (target.getTargets().size() >= target.getNumberOfTargets()) {
        return true;
      }
      if (!required) {
        return false;
      }
    }
  }
  return false;
}","@Override public boolean chooseTarget(Outcome outcome,Cards cards,TargetCard target,Ability source,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  while (!abort) {
    boolean required;
    if (target.isRequiredExplicitlySet()) {
      required=target.isRequired();
    }
 else {
      required=target.isRequired(source);
    }
    if (cards == null) {
      required=false;
    }
 else {
      int count=cards.count(target.getFilter(),game);
      if (count == 0) {
        required=false;
      }
    }
    if (target.getTargets().size() >= target.getNumberOfTargets()) {
      required=false;
    }
    Map<String,Serializable> options=getOptions(target,null);
    List<UUID> chosen=target.getTargets();
    options.put(""String_Node_Str"",(Serializable)chosen);
    List<UUID> choosable=new ArrayList<>();
    for (    UUID cardId : cards) {
      if (target.canTarget(cardId,cards,game)) {
        choosable.add(cardId);
      }
    }
    if (!choosable.isEmpty()) {
      options.put(""String_Node_Str"",(Serializable)choosable);
    }
    if (!isExecutingMacro()) {
      game.fireSelectTargetEvent(playerId,new MessageToClient(target.getMessage(),getRelatedObjectName(source,game)),cards,required,options);
    }
    prepareForResponse(game);
    waitForResponse(game);
    if (response.getUUID() != null) {
      if (target.getTargets().contains(response.getUUID())) {
        target.remove(response.getUUID());
      }
 else       if (target.canTarget(response.getUUID(),cards,game)) {
        target.addTarget(response.getUUID(),source,game);
        if (target.doneChosing()) {
          return true;
        }
      }
    }
 else {
      if (target.getTargets().size() >= target.getNumberOfTargets()) {
        return true;
      }
      if (!required) {
        return false;
      }
    }
  }
  return false;
}",0.9917718047174986
157822,"@Override public int chooseReplacementEffect(Map<String,String> rEffects,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  if (rEffects.size() <= 1) {
    return 0;
  }
  if (!autoSelectReplacementEffects.isEmpty()) {
    for (    String autoKey : autoSelectReplacementEffects) {
      int count=0;
      for (      String effectKey : rEffects.keySet()) {
        if (effectKey.equals(autoKey)) {
          return count;
        }
        count++;
      }
    }
  }
  replacementEffectChoice.getChoices().clear();
  replacementEffectChoice.setKeyChoices(rEffects);
  while (!abort) {
    if (!isExecutingMacro()) {
      game.fireChooseChoiceEvent(playerId,replacementEffectChoice);
    }
    updateGameStatePriority(""String_Node_Str"",game);
    waitForResponse(game);
    logger.debug(""String_Node_Str"" + response.getString());
    if (response.getString() != null) {
      if (response.getString().startsWith(""String_Node_Str"")) {
        autoSelectReplacementEffects.add(response.getString().substring(1));
        replacementEffectChoice.setChoiceByKey(response.getString().substring(1));
      }
 else {
        replacementEffectChoice.setChoiceByKey(response.getString());
      }
      if (replacementEffectChoice.getChoiceKey() != null) {
        int index=0;
        for (        String key : rEffects.keySet()) {
          if (replacementEffectChoice.getChoiceKey().equals(key)) {
            return index;
          }
          index++;
        }
      }
    }
  }
  return 0;
}","@Override public int chooseReplacementEffect(Map<String,String> rEffects,Game game){
  updateGameStatePriority(""String_Node_Str"",game);
  if (rEffects.size() <= 1) {
    return 0;
  }
  if (!autoSelectReplacementEffects.isEmpty()) {
    for (    String autoKey : autoSelectReplacementEffects) {
      int count=0;
      for (      String effectKey : rEffects.keySet()) {
        if (effectKey.equals(autoKey)) {
          return count;
        }
        count++;
      }
    }
  }
  replacementEffectChoice.getChoices().clear();
  replacementEffectChoice.setKeyChoices(rEffects);
  while (!abort) {
    updateGameStatePriority(""String_Node_Str"",game);
    prepareForResponse(game);
    if (!isExecutingMacro()) {
      game.fireChooseChoiceEvent(playerId,replacementEffectChoice);
    }
    waitForResponse(game);
    logger.debug(""String_Node_Str"" + response.getString());
    if (response.getString() != null) {
      if (response.getString().startsWith(""String_Node_Str"")) {
        autoSelectReplacementEffects.add(response.getString().substring(1));
        replacementEffectChoice.setChoiceByKey(response.getString().substring(1));
      }
 else {
        replacementEffectChoice.setChoiceByKey(response.getString());
      }
      if (replacementEffectChoice.getChoiceKey() != null) {
        int index=0;
        for (        String key : rEffects.keySet()) {
          if (replacementEffectChoice.getChoiceKey().equals(key)) {
            return index;
          }
          index++;
        }
      }
    }
  }
  return 0;
}",0.95523370638578
157823,"@Override public void setResponseUUID(UUID responseUUID){
synchronized (response) {
    response.setUUID(responseUUID);
    response.notifyAll();
    logger.debug(""String_Node_Str"" + getId());
  }
}","@Override public void setResponseUUID(UUID responseUUID){
  waitResponseOpen();
synchronized (response) {
    response.setUUID(responseUUID);
    response.notifyAll();
    logger.debug(""String_Node_Str"" + getId());
  }
}",0.9473684210526316
157824,"@Override public SpellAbility chooseSpellAbilityForCast(SpellAbility ability,Game game,boolean noMana){
switch (ability.getSpellAbilityType()) {
case SPLIT:
case SPLIT_FUSED:
case SPLIT_AFTERMATH:
    MageObject object=game.getObject(ability.getSourceId());
  if (object != null) {
    LinkedHashMap<UUID,ActivatedAbility> useableAbilities=getSpellAbilities(object,game.getState().getZone(object.getId()),game);
    if (useableAbilities != null && useableAbilities.size() == 1) {
      return (SpellAbility)useableAbilities.values().iterator().next();
    }
 else     if (useableAbilities != null && !useableAbilities.isEmpty()) {
      if (!isExecutingMacro()) {
        game.fireGetChoiceEvent(playerId,name,object,new ArrayList<>(useableAbilities.values()));
      }
      waitForResponse(game);
      if (response.getUUID() != null) {
        if (useableAbilities.containsKey(response.getUUID())) {
          return (SpellAbility)useableAbilities.get(response.getUUID());
        }
      }
    }
  }
return null;
default :
return ability;
}
}","@Override public SpellAbility chooseSpellAbilityForCast(SpellAbility ability,Game game,boolean noMana){
switch (ability.getSpellAbilityType()) {
case SPLIT:
case SPLIT_FUSED:
case SPLIT_AFTERMATH:
    MageObject object=game.getObject(ability.getSourceId());
  if (object != null) {
    LinkedHashMap<UUID,ActivatedAbility> useableAbilities=getSpellAbilities(object,game.getState().getZone(object.getId()),game);
    if (useableAbilities != null && useableAbilities.size() == 1) {
      return (SpellAbility)useableAbilities.values().iterator().next();
    }
 else     if (useableAbilities != null && !useableAbilities.isEmpty()) {
      prepareForResponse(game);
      if (!isExecutingMacro()) {
        game.fireGetChoiceEvent(playerId,name,object,new ArrayList<>(useableAbilities.values()));
      }
      waitForResponse(game);
      if (response.getUUID() != null) {
        if (useableAbilities.containsKey(response.getUUID())) {
          return (SpellAbility)useableAbilities.get(response.getUUID());
        }
      }
    }
  }
return null;
default :
return ability;
}
}",0.9849340866290018
157825,"public boolean isMatchTableStillValid(){
  if (!table.isTournament()) {
    if (!(table.getState() == TableState.WAITING || table.getState() == TableState.STARTING || table.getState() == TableState.READY_TO_START)) {
      if (match == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ']');
      }
 else       if (match.isDoneSideboarding() && match.getGame() == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ']');
      }
    }
    int validHumanPlayers=0;
    int aiPlayers=0;
    int humanPlayers=0;
    for (    Map.Entry<UUID,UUID> userPlayerEntry : userPlayerMap.entrySet()) {
      MatchPlayer matchPlayer=match.getPlayer(userPlayerEntry.getValue());
      if (matchPlayer == null) {
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"" + match.getId());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
        logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
        continue;
      }
      if (matchPlayer.getPlayer().isHuman()) {
        humanPlayers++;
        if ((table.getState() == TableState.WAITING || table.getState() == TableState.STARTING || table.getState() == TableState.READY_TO_START) || !match.isDoneSideboarding() || (!matchPlayer.hasQuit() && match.getGame() != null && matchPlayer.getPlayer().isInGame())) {
          Optional<User> user=UserManager.instance.getUser(userPlayerEntry.getKey());
          if (!user.isPresent()) {
            logger.debug(""String_Node_Str"" + matchPlayer.getName());
            logger.debug(""String_Node_Str"" + match.getId());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getKey());
            logger.debug(""String_Node_Str"" + userPlayerEntry.getValue());
            return false;
          }
          validHumanPlayers++;
        }
      }
 else {
        aiPlayers++;
      }
    }
    return validHumanPlayers >= 2 || validHumanPlayers == humanPlayers || aiPlayers > 1;
  }
  return true;
}","public boolean isMatchTableStillValid(){
  if (!table.isTournament()) {
    if (!(table.getState() == TableState.WAITING || table.getState() == TableState.STARTING || table.getState() == TableState.READY_TO_START)) {
      if (match == null) {
        logger.warn(""String_Node_Str"");
        logger.warn(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ']');
      }
 else       if (match.isDoneSideboarding() && match.getGame() == null) {
        logger.warn(""String_Node_Str"");
        logger.warn(""String_Node_Str"" + match.getId() + ""String_Node_Str""+ match.getName()+ ']');
      }
    }
    int validHumanPlayers=0;
    int aiPlayers=0;
    int humanPlayers=0;
    for (    Map.Entry<UUID,UUID> userPlayerEntry : userPlayerMap.entrySet()) {
      MatchPlayer matchPlayer=match.getPlayer(userPlayerEntry.getValue());
      if (matchPlayer == null) {
        logger.warn(""String_Node_Str"");
        logger.warn(""String_Node_Str"" + match.getId());
        logger.warn(""String_Node_Str"" + userPlayerEntry.getKey());
        logger.warn(""String_Node_Str"" + userPlayerEntry.getValue());
        continue;
      }
      if (matchPlayer.getPlayer().isHuman()) {
        humanPlayers++;
        if ((table.getState() == TableState.WAITING || table.getState() == TableState.STARTING || table.getState() == TableState.READY_TO_START) || !match.isDoneSideboarding() || (!matchPlayer.hasQuit() && match.getGame() != null && matchPlayer.getPlayer().isInGame())) {
          Optional<User> user=UserManager.instance.getUser(userPlayerEntry.getKey());
          if (!user.isPresent()) {
            logger.warn(""String_Node_Str"" + matchPlayer.getName());
            logger.warn(""String_Node_Str"" + match.getId());
            logger.warn(""String_Node_Str"" + userPlayerEntry.getKey());
            logger.warn(""String_Node_Str"" + userPlayerEntry.getValue());
            return false;
          }
          validHumanPlayers++;
        }
      }
 else {
        aiPlayers++;
      }
    }
    return validHumanPlayers >= 2 || validHumanPlayers == humanPlayers || aiPlayers > 1;
  }
  return true;
}",0.9744801512287334
157826,"@Override public boolean checkTrigger(GameEvent event,Game game){
  return game.getPermanent(this.getSourceId()).getAttachedTo().equals(event.getPlayerId());
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent sourceObject=game.getPermanentOrLKIBattlefield(this.getSourceId());
  return sourceObject != null && sourceObject.getAttachedTo().equals(event.getPlayerId());
}",0.72544080604534
157827,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (controller != null && sourceObject != null) {
    Set<Card> toExile=new HashSet<>();
    for (    UUID permanentId : targetPointer.getTargets(game,source)) {
      Permanent target=game.getPermanent(permanentId);
      if (target != null) {
        toExile.add(target);
      }
    }
    controller.moveCards(toExile,Zone.EXILED,source,game);
    game.applyEffects();
    Set<Card> toBattlefield=new HashSet<>();
    for (    Card card : toExile) {
      Zone currentZone=game.getState().getZone(card.getId());
      if (Zone.BATTLEFIELD != currentZone && currentZone.isPublicZone()) {
        toBattlefield.add(game.getCard(card.getId()));
      }
    }
    controller.moveCards(toBattlefield,Zone.BATTLEFIELD,source,game);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (controller != null && sourceObject != null) {
    Set<Card> toExile=new HashSet<>();
    for (    UUID permanentId : targetPointer.getTargets(game,source)) {
      Permanent target=game.getPermanent(permanentId);
      if (target != null) {
        toExile.add(target);
      }
    }
    controller.moveCards(toExile,Zone.EXILED,source,game);
    game.applyEffects();
    Set<Card> toBattlefield=new HashSet<>();
    for (    Card card : toExile) {
      Zone currentZone=game.getState().getZone(card.getId());
      if (Zone.BATTLEFIELD != currentZone && currentZone.isPublicZone()) {
        toBattlefield.add(card);
      }
    }
    controller.moveCards(toBattlefield,Zone.BATTLEFIELD,source,game);
    return true;
  }
  return false;
}",0.9839400428265525
157828,"@Override public boolean apply(Game game,Ability source,Ability abilityToModify){
  Player controller=game.getPlayer(abilityToModify.getControllerId());
  if (controller != null) {
    Mana mana=abilityToModify.getManaCostsToPay().getMana();
    int reduceMax=mana.getGeneric();
    if (reduceMax > 0 && mana.count() == mana.getGeneric()) {
      reduceMax--;
    }
    if (reduceMax > 2) {
      reduceMax=2;
    }
    if (reduceMax > 0) {
      ChoiceImpl choice=new ChoiceImpl(true);
      Set<String> set=new LinkedHashSet<>();
      for (int i=0; i <= reduceMax; i++) {
        set.add(String.valueOf(i));
      }
      choice.setChoices(set);
      choice.setMessage(""String_Node_Str"");
      if (controller.choose(Outcome.Benefit,choice,game)) {
        int reduce=Integer.parseInt(choice.getChoice());
        CardUtil.reduceCost(abilityToModify,reduce);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source,Ability abilityToModify){
  Player controller=game.getPlayer(abilityToModify.getControllerId());
  if (controller != null) {
    Mana mana=abilityToModify.getManaCostsToPay().getMana();
    int reduceMax=mana.getGeneric();
    if (reduceMax > 0 && mana.count() == mana.getGeneric()) {
      reduceMax--;
    }
    if (reduceMax > 2) {
      reduceMax=2;
    }
    if (reduceMax > 0) {
      ChoiceImpl choice=new ChoiceImpl(true);
      Set<String> set=new LinkedHashSet<>();
      for (int i=0; i <= reduceMax; i++) {
        set.add(String.valueOf(i));
      }
      choice.setChoices(set);
      choice.setMessage(""String_Node_Str"");
      while (!choice.isChosen()) {
        controller.choose(Outcome.Benefit,choice,game);
        if (!controller.isInGame()) {
          return false;
        }
      }
      int reduce=Integer.parseInt(choice.getChoice());
      CardUtil.reduceCost(abilityToModify,reduce);
    }
    return true;
  }
  return false;
}",0.9040953862104716
157829,"@Override public void restoreState(int bookmark,String context){
  if (!simulation && !this.hasEnded()) {
    if (bookmark != 0) {
      if (!savedStates.contains(bookmark - 1)) {
        throw new UnsupportedOperationException(""String_Node_Str"" + (bookmark - 1) + ""String_Node_Str""+ context);
      }
      int stateNum=savedStates.get(bookmark - 1);
      removeBookmark(bookmark);
      GameState restore=gameStates.rollback(stateNum);
      if (restore != null) {
        state.restore(restore);
        playerList.setCurrent(state.getPlayerByOrderId());
      }
    }
  }
}","@Override public void restoreState(int bookmark,String context){
  if (!simulation && !this.hasEnded()) {
    if (bookmark != 0) {
      if (!savedStates.contains(bookmark - 1)) {
        logger.error(""String_Node_Str"" + (bookmark - 1) + ""String_Node_Str""+ context);
        logger.info(""String_Node_Str"" + savedStates.toString());
      }
 else {
        int stateNum=savedStates.get(bookmark - 1);
        removeBookmark(bookmark);
        GameState restore=gameStates.rollback(stateNum);
        if (restore != null) {
          state.restore(restore);
          playerList.setCurrent(state.getPlayerByOrderId());
        }
      }
    }
  }
}",0.880718954248366
157830,"@Override public void playPriority(UUID activePlayerId,boolean resuming){
  int errorContinueCounter=0;
  infiniteLoopCounter=0;
  int bookmark=0;
  clearAllBookmarks();
  try {
    applyEffects();
    while (!isPaused() && !checkIfGameIsOver() && !this.getTurn().isEndTurnRequested()) {
      if (!resuming) {
        state.getPlayers().resetPassed();
        state.getPlayerList().setCurrent(activePlayerId);
      }
 else {
        state.getPlayerList().setCurrent(this.getPriorityPlayerId());
      }
      fireUpdatePlayersEvent();
      Player player;
      while (!isPaused() && !checkIfGameIsOver()) {
        try {
          if (bookmark == 0) {
            bookmark=bookmarkState();
          }
          player=getPlayer(state.getPlayerList().get());
          state.setPriorityPlayerId(player.getId());
          while (!player.isPassed() && player.canRespond() && !isPaused()&& !checkIfGameIsOver()) {
            if (!resuming) {
              checkStateAndTriggered();
              applyEffects();
              if (state.getStack().isEmpty()) {
                resetLKI();
              }
              saveState(false);
              if (isPaused() || checkIfGameIsOver()) {
                return;
              }
              if (player.priority(this)) {
                if (executingRollback()) {
                  return;
                }
                getState().handleSimultaneousEvent(this);
                applyEffects();
              }
              if (isPaused()) {
                return;
              }
            }
            resuming=false;
          }
          resetShortLivingLKI();
          resuming=false;
          if (isPaused() || checkIfGameIsOver()) {
            return;
          }
          if (allPassed()) {
            if (!state.getStack().isEmpty()) {
              resolve();
              checkConcede();
              applyEffects();
              state.getPlayers().resetPassed();
              fireUpdatePlayersEvent();
              resetShortLivingLKI();
              break;
            }
 else {
              resetLKI();
              return;
            }
          }
        }
 catch (        Exception ex) {
          logger.fatal(""String_Node_Str"" + getId(),ex);
          if ((ex instanceof NullPointerException) && errorContinueCounter == 1 && ex.getStackTrace() != null) {
            logger.fatal(ex.getStackTrace());
          }
          this.fireErrorEvent(""String_Node_Str"",ex);
          restoreState(bookmark,""String_Node_Str"");
          bookmark=0;
          Player activePlayer=this.getPlayer(getActivePlayerId());
          if (errorContinueCounter > 15) {
            throw new MageException(""String_Node_Str"");
          }
          if (activePlayer != null && !activePlayer.isTestMode()) {
            errorContinueCounter++;
            continue;
          }
 else {
            throw new MageException(""String_Node_Str"");
          }
        }
        state.getPlayerList().getNext();
      }
    }
  }
 catch (  Exception ex) {
    logger.fatal(""String_Node_Str"",ex);
    this.fireErrorEvent(""String_Node_Str"",ex);
    this.end();
  }
 finally {
    resetLKI();
    clearAllBookmarks();
  }
}","@Override public void playPriority(UUID activePlayerId,boolean resuming){
  int errorContinueCounter=0;
  infiniteLoopCounter=0;
  int bookmark=0;
  clearAllBookmarks();
  try {
    applyEffects();
    while (!isPaused() && !checkIfGameIsOver() && !this.getTurn().isEndTurnRequested()) {
      if (!resuming) {
        state.getPlayers().resetPassed();
        state.getPlayerList().setCurrent(activePlayerId);
      }
 else {
        state.getPlayerList().setCurrent(this.getPriorityPlayerId());
      }
      fireUpdatePlayersEvent();
      Player player;
      while (!isPaused() && !checkIfGameIsOver()) {
        try {
          if (bookmark == 0) {
            bookmark=bookmarkState();
          }
          player=getPlayer(state.getPlayerList().get());
          state.setPriorityPlayerId(player.getId());
          while (!player.isPassed() && player.canRespond() && !isPaused()&& !checkIfGameIsOver()) {
            if (!resuming) {
              checkStateAndTriggered();
              applyEffects();
              if (state.getStack().isEmpty()) {
                resetLKI();
              }
              saveState(false);
              if (isPaused() || checkIfGameIsOver()) {
                return;
              }
              if (player.priority(this)) {
                if (executingRollback()) {
                  return;
                }
                getState().handleSimultaneousEvent(this);
                applyEffects();
              }
              if (isPaused()) {
                return;
              }
            }
            resuming=false;
          }
          resetShortLivingLKI();
          resuming=false;
          if (isPaused() || checkIfGameIsOver()) {
            return;
          }
          if (allPassed()) {
            if (!state.getStack().isEmpty()) {
              resolve();
              checkConcede();
              applyEffects();
              state.getPlayers().resetPassed();
              fireUpdatePlayersEvent();
              resetShortLivingLKI();
              break;
            }
 else {
              resetLKI();
              return;
            }
          }
        }
 catch (        Exception ex) {
          logger.fatal(""String_Node_Str"" + getId(),ex);
          if ((ex instanceof NullPointerException) && errorContinueCounter == 1 && ex.getStackTrace() != null) {
            logger.fatal(ex.getStackTrace());
          }
          this.fireErrorEvent(""String_Node_Str"",ex);
          restoreState(bookmark,""String_Node_Str"" + ex.getMessage());
          bookmark=0;
          Player activePlayer=this.getPlayer(getActivePlayerId());
          if (errorContinueCounter > 15) {
            throw new MageException(""String_Node_Str"");
          }
          if (activePlayer != null && !activePlayer.isTestMode()) {
            errorContinueCounter++;
            continue;
          }
 else {
            throw new MageException(""String_Node_Str"");
          }
        }
        state.getPlayerList().getNext();
      }
    }
  }
 catch (  Exception ex) {
    logger.fatal(""String_Node_Str"",ex);
    this.fireErrorEvent(""String_Node_Str"",ex);
    this.end();
  }
 finally {
    resetLKI();
    clearAllBookmarks();
  }
}",0.9971839799749688
157831,"private void multiBlockerDamage(Player player,boolean first,Game game){
  Permanent attacker=game.getPermanent(attackers.get(0));
  if (attacker == null) {
    return;
  }
  boolean oldRuleDamage=(player.getId() == defendingPlayerId);
  int damage=getDamageValueFromPermanent(attacker,game);
  if (canDamage(attacker,first)) {
    Map<UUID,Integer> blockerPower=new HashMap<>();
    for (    UUID blockerId : blockerOrder) {
      Permanent blocker=game.getPermanent(blockerId);
      if (canDamage(blocker,first)) {
        if (blocker.getBlocking() == 1) {
          blockerPower.put(blockerId,getDamageValueFromPermanent(blocker,game));
        }
      }
    }
    Map<UUID,Integer> assigned=new HashMap<>();
    if (blocked) {
      boolean excessDamageToDefender=true;
      for (      UUID blockerId : blockerOrder) {
        Permanent blocker=game.getPermanent(blockerId);
        if (blocker != null) {
          int lethalDamage;
          if (attacker.getAbilities().containsKey(DeathtouchAbility.getInstance().getId())) {
            lethalDamage=1;
          }
 else {
            lethalDamage=Math.max(blocker.getToughness().getValue() - blocker.getDamage(),0);
          }
          if (lethalDamage >= damage) {
            if (!oldRuleDamage) {
              assigned.put(blockerId,damage);
              damage=0;
              break;
            }
 else             if (damage == 0) {
              break;
            }
          }
          int damageAssigned=0;
          if (!oldRuleDamage) {
            damageAssigned=player.getAmount(lethalDamage,damage,""String_Node_Str"" + blocker.getName(),game);
          }
 else {
            damageAssigned=player.getAmount(0,damage,""String_Node_Str"" + blocker.getName(),game);
            if (damageAssigned < lethalDamage) {
              excessDamageToDefender=false;
            }
          }
          assigned.put(blockerId,damageAssigned);
          damage-=damageAssigned;
        }
      }
      if (damage > 0 && hasTrample(attacker) && excessDamageToDefender) {
        defenderDamage(attacker,damage,game);
      }
 else       if (!blockerOrder.isEmpty()) {
        assigned.put(blockerOrder.get(0),assigned.get(blockerOrder.get(0)) + damage);
      }
    }
    for (    UUID blockerId : blockerOrder) {
      Integer power=blockerPower.get(blockerId);
      if (power != null) {
        Permanent blocker=game.getPermanent(blockerId);
        if (!assignsDefendingPlayerAndOrDefendingCreaturesDividedDamage(blocker,blocker.getControllerId(),first,game,false)) {
          attacker.markDamage(power,blockerId,game,true,true);
        }
      }
    }
    for (    Map.Entry<UUID,Integer> entry : assigned.entrySet()) {
      Permanent blocker=game.getPermanent(entry.getKey());
      blocker.markDamage(entry.getValue(),attacker.getId(),game,true,true);
    }
  }
 else {
    for (    UUID blockerId : blockerOrder) {
      Permanent blocker=game.getPermanent(blockerId);
      if (canDamage(blocker,first)) {
        if (!assignsDefendingPlayerAndOrDefendingCreaturesDividedDamage(blocker,blocker.getControllerId(),first,game,false)) {
          attacker.markDamage(getDamageValueFromPermanent(blocker,game),blocker.getId(),game,true,true);
        }
      }
    }
  }
}","private void multiBlockerDamage(Player player,boolean first,Game game){
  Permanent attacker=game.getPermanent(attackers.get(0));
  if (attacker == null) {
    return;
  }
  boolean oldRuleDamage=(player.getId() == defendingPlayerId);
  int damage=getDamageValueFromPermanent(attacker,game);
  if (canDamage(attacker,first)) {
    Map<UUID,Integer> blockerPower=new HashMap<>();
    for (    UUID blockerId : blockerOrder) {
      Permanent blocker=game.getPermanent(blockerId);
      if (canDamage(blocker,first)) {
        if (blocker.getBlocking() == 1) {
          blockerPower.put(blockerId,getDamageValueFromPermanent(blocker,game));
        }
      }
    }
    Map<UUID,Integer> assigned=new HashMap<>();
    if (blocked) {
      boolean excessDamageToDefender=true;
      for (      UUID blockerId : new ArrayList<>(blockerOrder)) {
        Permanent blocker=game.getPermanent(blockerId);
        if (blocker != null) {
          int lethalDamage;
          if (attacker.getAbilities().containsKey(DeathtouchAbility.getInstance().getId())) {
            lethalDamage=1;
          }
 else {
            lethalDamage=Math.max(blocker.getToughness().getValue() - blocker.getDamage(),0);
          }
          if (lethalDamage >= damage) {
            if (!oldRuleDamage) {
              assigned.put(blockerId,damage);
              damage=0;
              break;
            }
 else             if (damage == 0) {
              break;
            }
          }
          int damageAssigned=0;
          if (!oldRuleDamage) {
            damageAssigned=player.getAmount(lethalDamage,damage,""String_Node_Str"" + blocker.getName(),game);
          }
 else {
            damageAssigned=player.getAmount(0,damage,""String_Node_Str"" + blocker.getName(),game);
            if (damageAssigned < lethalDamage) {
              excessDamageToDefender=false;
            }
          }
          assigned.put(blockerId,damageAssigned);
          damage-=damageAssigned;
        }
      }
      if (damage > 0 && hasTrample(attacker) && excessDamageToDefender) {
        defenderDamage(attacker,damage,game);
      }
 else       if (!blockerOrder.isEmpty()) {
        assigned.put(blockerOrder.get(0),assigned.get(blockerOrder.get(0)) + damage);
      }
    }
    for (    UUID blockerId : blockerOrder) {
      Integer power=blockerPower.get(blockerId);
      if (power != null) {
        Permanent blocker=game.getPermanent(blockerId);
        if (!assignsDefendingPlayerAndOrDefendingCreaturesDividedDamage(blocker,blocker.getControllerId(),first,game,false)) {
          attacker.markDamage(power,blockerId,game,true,true);
        }
      }
    }
    for (    Map.Entry<UUID,Integer> entry : assigned.entrySet()) {
      Permanent blocker=game.getPermanent(entry.getKey());
      blocker.markDamage(entry.getValue(),attacker.getId(),game,true,true);
    }
  }
 else {
    for (    UUID blockerId : blockerOrder) {
      Permanent blocker=game.getPermanent(blockerId);
      if (canDamage(blocker,first)) {
        if (!assignsDefendingPlayerAndOrDefendingCreaturesDividedDamage(blocker,blocker.getControllerId(),first,game,false)) {
          attacker.markDamage(getDamageValueFromPermanent(blocker,game),blocker.getId(),game,true,true);
        }
      }
    }
  }
}",0.9973874289226986
157832,"@Override public void attachTo(UUID attachToObjectId,Game game){
  if (this.attachedTo != null && !Objects.equals(this.attachedTo,attachToObjectId)) {
    Permanent attachedToUntilNowObject=game.getPermanent(this.attachedTo);
    if (attachedToUntilNowObject != null) {
      attachedToUntilNowObject.removeAttachment(this.objectId,game);
    }
 else {
      Card attachedToUntilNowCard=game.getCard(this.attachedTo);
      if (attachedToUntilNowCard != null) {
        attachedToUntilNowCard.removeAttachment(this.objectId,game);
      }
    }
  }
  this.attachedTo=attachToObjectId;
  this.attachedToZoneChangeCounter=game.getState().getZoneChangeCounter(attachToObjectId);
  for (  Ability ability : this.getAbilities()) {
    for (Iterator<Effect> ite=ability.getEffects(game,EffectType.CONTINUOUS).iterator(); ite.hasNext(); ) {
      ContinuousEffect effect=(ContinuousEffect)ite.next();
      game.getContinuousEffects().setOrder(effect);
      for (      ContinuousEffect conEffect : game.getContinuousEffects().getLayeredEffects(game)) {
        if (conEffect.getId().equals(effect.getId())) {
          game.getContinuousEffects().setOrder(conEffect);
        }
      }
    }
  }
  if (getSpellAbility() == null) {
    logger.info(""String_Node_Str"" + getName());
    return;
  }
  if (!getSpellAbility().getTargets().isEmpty() && (getSpellAbility().getTargets().get(0) instanceof TargetCard)) {
    Card attachedToCard=game.getCard(this.getAttachedTo());
    if (attachedToCard != null) {
      this.addInfo(""String_Node_Str"",CardUtil.addToolTipMarkTags(""String_Node_Str"" + attachedToCard.getIdName()),game);
    }
  }
}","@Override public void attachTo(UUID attachToObjectId,Game game){
  if (this.attachedTo != null && !Objects.equals(this.attachedTo,attachToObjectId)) {
    Permanent attachedToUntilNowObject=game.getPermanent(this.attachedTo);
    if (attachedToUntilNowObject != null) {
      attachedToUntilNowObject.removeAttachment(this.objectId,game);
    }
 else {
      Card attachedToUntilNowCard=game.getCard(this.attachedTo);
      if (attachedToUntilNowCard != null) {
        attachedToUntilNowCard.removeAttachment(this.objectId,game);
      }
    }
  }
  this.attachedTo=attachToObjectId;
  this.attachedToZoneChangeCounter=game.getState().getZoneChangeCounter(attachToObjectId);
  for (  Ability ability : this.getAbilities()) {
    for (Iterator<Effect> ite=ability.getEffects(game,EffectType.CONTINUOUS).iterator(); ite.hasNext(); ) {
      ContinuousEffect effect=(ContinuousEffect)ite.next();
      game.getContinuousEffects().setOrder(effect);
      for (      ContinuousEffect conEffect : game.getContinuousEffects().getLayeredEffects(game)) {
        if (conEffect.getId().equals(effect.getId())) {
          game.getContinuousEffects().setOrder(conEffect);
        }
      }
    }
  }
  if (getSpellAbility() == null) {
    return;
  }
  if (!getSpellAbility().getTargets().isEmpty() && (getSpellAbility().getTargets().get(0) instanceof TargetCard)) {
    Card attachedToCard=game.getCard(this.getAttachedTo());
    if (attachedToCard != null) {
      this.addInfo(""String_Node_Str"",CardUtil.addToolTipMarkTags(""String_Node_Str"" + attachedToCard.getIdName()),game);
    }
  }
}",0.8019925280199253
157833,"public Player getNext(Game game){
  Player player;
  UUID start=this.get();
  while (true) {
    player=game.getPlayer(super.getNext());
    if (!player.hasLeft() && !player.hasLost()) {
      break;
    }
    if (!player.hasReachedNextTurnAfterLeaving()) {
      player.setReachedNextTurnAfterLeaving(true);
    }
    if (player.getId().equals(start)) {
      return null;
    }
  }
  return player;
}","public Player getNext(Game game){
  UUID start=this.get();
  if (start == null) {
    return null;
  }
  Player player;
  while (true) {
    player=game.getPlayer(super.getNext());
    if (!player.hasLeft() && !player.hasLost()) {
      break;
    }
    if (!player.hasReachedNextTurnAfterLeaving()) {
      player.setReachedNextTurnAfterLeaving(true);
    }
    if (player.getId().equals(start)) {
      return null;
    }
  }
  return player;
}",0.9080188679245284
157834,"@Before public void reset() throws GameException, FileNotFoundException {
  if (currentGame != null) {
    logger.debug(""String_Node_Str"");
    currentGame=null;
    System.gc();
  }
  currentGame=createNewGameAndPlayers();
  activePlayer=playerA;
  stopOnTurn=2;
  stopAtStep=PhaseStep.UNTAP;
  for (  Player player : currentGame.getPlayers().values()) {
    TestPlayer testPlayer=(TestPlayer)player;
    getCommands(testPlayer).clear();
    getLibraryCards(testPlayer).clear();
    getHandCards(testPlayer).clear();
    getBattlefieldCards(testPlayer).clear();
    getGraveCards(testPlayer).clear();
    ((TestPlayer)player).setInitialTurns(0);
  }
  gameOptions=new GameOptions();
}","@Before public void reset() throws GameException, FileNotFoundException {
  if (currentGame != null) {
    logger.debug(""String_Node_Str"");
    currentGame=null;
  }
  currentGame=createNewGameAndPlayers();
  activePlayer=playerA;
  stopOnTurn=2;
  stopAtStep=PhaseStep.UNTAP;
  for (  Player player : currentGame.getPlayers().values()) {
    TestPlayer testPlayer=(TestPlayer)player;
    getCommands(testPlayer).clear();
    getLibraryCards(testPlayer).clear();
    getHandCards(testPlayer).clear();
    getBattlefieldCards(testPlayer).clear();
    getGraveCards(testPlayer).clear();
    ((TestPlayer)player).setInitialTurns(0);
  }
  gameOptions=new GameOptions();
}",0.9874353288987436
157835,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Map<UUID,UUID> playerCreature=new HashMap<>(2);
    Choice choice=new ChoiceLeftOrRight();
    controller.choose(Outcome.Neutral,choice,game);
    boolean left=choice.getChoice().equals(""String_Node_Str"");
    PlayerList playerList=game.getState().getPlayerList().copy();
    while (!playerList.get().equals(source.getControllerId()) && controller.canRespond()) {
      playerList.getNext();
    }
    Player currentPlayer=game.getPlayer(playerList.get());
    Player nextPlayer;
    UUID firstNextPlayer=null;
    while (!getNextPlayerInDirection(left,playerList,game).equals(firstNextPlayer) && controller.canRespond()) {
      nextPlayer=game.getPlayer(playerList.get());
      if (nextPlayer == null) {
        return false;
      }
      if (firstNextPlayer == null) {
        firstNextPlayer=nextPlayer.getId();
      }
      if (!nextPlayer.canRespond()) {
        continue;
      }
      if (currentPlayer != null && game.getState().getPlayersInRange(controller.getId(),game).contains(currentPlayer.getId())) {
        FilterCreaturePermanent filter=new FilterCreaturePermanent(new StringBuilder(""String_Node_Str"").append(nextPlayer.getLogName()).toString());
        filter.add(new ControllerIdPredicate(nextPlayer.getId()));
        Target target=new TargetCreaturePermanent(filter);
        target.setNotTarget(true);
        if (target.canChoose(source.getSourceId(),currentPlayer.getId(),game)) {
          if (currentPlayer.chooseTarget(outcome,target,source,game)) {
            playerCreature.put(currentPlayer.getId(),target.getFirstTarget());
          }
        }
      }
      currentPlayer=nextPlayer;
    }
    for (    Map.Entry<UUID,UUID> entry : playerCreature.entrySet()) {
      Player player=game.getPlayer(entry.getKey());
      if (player != null) {
        Permanent creature=game.getPermanent(entry.getValue());
        if (creature != null) {
          ContinuousEffect effect=new GainControlTargetEffect(Duration.EndOfGame,player.getId());
          effect.setTargetPointer(new FixedTarget(creature.getId()));
          game.addEffect(effect,source);
          game.informPlayers(new StringBuilder(player.getLogName()).append(""String_Node_Str"").append(creature.getName()).toString());
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Map<UUID,UUID> playerCreature=new HashMap<>(2);
    Choice choice=new ChoiceLeftOrRight();
    controller.choose(Outcome.Neutral,choice,game);
    boolean left=choice == null || choice.getChoice().equals(""String_Node_Str"");
    PlayerList playerList=game.getState().getPlayerList().copy();
    while (!playerList.get().equals(source.getControllerId()) && controller.canRespond()) {
      playerList.getNext();
    }
    Player currentPlayer=game.getPlayer(playerList.get());
    Player nextPlayer;
    UUID firstNextPlayer=null;
    while (!getNextPlayerInDirection(left,playerList,game).equals(firstNextPlayer) && controller.canRespond()) {
      nextPlayer=game.getPlayer(playerList.get());
      if (nextPlayer == null) {
        return false;
      }
      if (firstNextPlayer == null) {
        firstNextPlayer=nextPlayer.getId();
      }
      if (!nextPlayer.canRespond()) {
        continue;
      }
      if (currentPlayer != null && game.getState().getPlayersInRange(controller.getId(),game).contains(currentPlayer.getId())) {
        FilterCreaturePermanent filter=new FilterCreaturePermanent(new StringBuilder(""String_Node_Str"").append(nextPlayer.getLogName()).toString());
        filter.add(new ControllerIdPredicate(nextPlayer.getId()));
        Target target=new TargetCreaturePermanent(filter);
        target.setNotTarget(true);
        if (target.canChoose(source.getSourceId(),currentPlayer.getId(),game)) {
          if (currentPlayer.chooseTarget(outcome,target,source,game)) {
            playerCreature.put(currentPlayer.getId(),target.getFirstTarget());
          }
        }
      }
      currentPlayer=nextPlayer;
    }
    for (    Map.Entry<UUID,UUID> entry : playerCreature.entrySet()) {
      Player player=game.getPlayer(entry.getKey());
      if (player != null) {
        Permanent creature=game.getPermanent(entry.getValue());
        if (creature != null) {
          ContinuousEffect effect=new GainControlTargetEffect(Duration.EndOfGame,player.getId());
          effect.setTargetPointer(new FixedTarget(creature.getId()));
          game.addEffect(effect,source);
          game.informPlayers(new StringBuilder(player.getLogName()).append(""String_Node_Str"").append(creature.getName()).toString());
        }
      }
    }
    return true;
  }
  return false;
}",0.9963144963144964
157836,"public OathswornVampirePlayEffect(final OathswornVampirePlayEffect effect){
  super(effect);
}","public OathswornVampirePlayEffect(final OathswornVampirePlayEffect effect){
  super(effect);
  this.condition=effect.condition;
}",0.8430493273542601
157837,"/** 
 * Creates new form MageFrame
 */
public MageFrame(){
  setWindowTitle();
  EDTExceptionHandler.registerExceptionHandler();
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      exitApp();
    }
  }
);
  Toolkit.getDefaultToolkit().addAWTEventListener(event -> handleEvent(event),AWTEvent.KEY_EVENT_MASK | AWTEvent.MOUSE_EVENT_MASK);
  TConfig config=TConfig.current();
  config.setArchiveDetector(new TArchiveDetector(""String_Node_Str""));
  config.setAccessPreference(FsAccessOption.STORE,true);
  try {
    UIManager.put(""String_Node_Str"",new Color(0,0,0,0));
    UIManager.setLookAndFeel(""String_Node_Str"");
{
      Object value=UIManager.get(""String_Node_Str"");
      if (value instanceof InputMap) {
        InputMap map=(InputMap)value;
        for (int vk=KeyEvent.VK_F2; vk <= KeyEvent.VK_F12; ++vk) {
          map.remove(KeyStroke.getKeyStroke(vk,0));
        }
      }
    }
    GUISizeHelper.calculateGUISizes();
  }
 catch (  Exception ex) {
    LOGGER.fatal(null,ex);
  }
  ManaSymbols.loadImages();
  Plugins.instance.loadPlugins();
  initComponents();
  desktopPane.setDesktopManager(new MageDesktopManager());
  setSize(1024,768);
  SettingsManager.instance.setScreenWidthAndHeight(1024,768);
  DialogManager.updateParams(768,1024,false);
  this.setExtendedState(JFrame.MAXIMIZED_BOTH);
  SessionHandler.startSession(this);
  callbackClient=new CallbackClientImpl(this);
  connectDialog=new ConnectDialog();
  desktopPane.add(connectDialog,JLayeredPane.POPUP_LAYER);
  errorDialog=new ErrorDialog();
  errorDialog.setLocation(100,100);
  desktopPane.add(errorDialog,JLayeredPane.POPUP_LAYER);
  UI.addComponent(MageComponents.DESKTOP_PANE,desktopPane);
  PING_TASK_EXECUTOR.scheduleAtFixedRate(() -> SessionHandler.ping(),60,60,TimeUnit.SECONDS);
  updateMemUsageTask=new UpdateMemUsageTask(jMemUsageLabel);
  tablesPane=new TablesPane();
  desktopPane.add(tablesPane,javax.swing.JLayeredPane.DEFAULT_LAYER);
  addTooltipContainer();
  setBackground();
  addMageLabel();
  setAppIcon();
  MageTray.instance.install();
  desktopPane.add(ArrowBuilder.getBuilder().getArrowsManagerPanel(),JLayeredPane.DRAG_LAYER);
  desktopPane.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      int width=((JComponent)e.getSource()).getWidth();
      int height=((JComponent)e.getSource()).getHeight();
      SettingsManager.instance.setScreenWidthAndHeight(width,height);
      if (!liteMode && !grayMode) {
        backgroundPane.setSize(width,height);
      }
      updateCurrentFrameSize();
      ArrowBuilder.getBuilder().setSize(width,height);
      if (title != null) {
        title.setBounds((int)(width - titleRectangle.getWidth()) / 2,(int)(height - titleRectangle.getHeight()) / 2,titleRectangle.width,titleRectangle.height);
      }
    }
  }
);
  balloonTip=new BalloonTip(desktopPane,""String_Node_Str"",new EdgedBalloonStyle(Color.WHITE,Color.BLUE),false);
  balloonTip.setPositioner(new LeftAbovePositioner(0,0));
  balloonTip.setVisible(false);
  mageToolbar.add(createSwitchPanelsButton(),0);
  mageToolbar.add(new javax.swing.JToolBar.Separator(),1);
  if (Plugins.instance.isCounterPluginLoaded()) {
    int i=Plugins.instance.getGamesPlayed();
    JLabel label=new JLabel(""String_Node_Str"" + String.valueOf(i));
    desktopPane.add(label,JLayeredPane.DEFAULT_LAYER + 1);
    label.setVisible(true);
    label.setForeground(Color.white);
    label.setBounds(0,0,180,30);
  }
  setGUISize();
  SwingUtilities.invokeLater(() -> {
    disableButtons();
    if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_CARD_IMAGES_CHECK,""String_Node_Str"").equals(""String_Node_Str"")) {
      checkForNewImages();
    }
    updateMemUsageTask.execute();
    LOGGER.info(""String_Node_Str"" + ((System.currentTimeMillis() - startTime) / 1000 + ""String_Node_Str""));
    if (autoConnect()) {
      enableButtons();
    }
 else {
      connectDialog.showDialog();
    }
    setWindowTitle();
  }
);
  if (SystemUtil.isMacOSX()) {
    SystemUtil.enableMacOSFullScreenMode(this);
    if (fullscreenMode) {
      SystemUtil.toggleMacOSFullScreenMode(this);
    }
  }
}","/** 
 * Creates new form MageFrame
 */
public MageFrame(){
  setWindowTitle();
  EDTExceptionHandler.registerExceptionHandler();
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      exitApp();
    }
  }
);
  Toolkit.getDefaultToolkit().addAWTEventListener(event -> handleEvent(event),AWTEvent.KEY_EVENT_MASK | AWTEvent.MOUSE_EVENT_MASK);
  TConfig config=TConfig.current();
  config.setArchiveDetector(new TArchiveDetector(""String_Node_Str""));
  config.setAccessPreference(FsAccessOption.STORE,true);
  try {
    UIManager.put(""String_Node_Str"",new Color(0,0,0,0));
    UIManager.setLookAndFeel(""String_Node_Str"");
{
      Object value=UIManager.get(""String_Node_Str"");
      if (value instanceof InputMap) {
        InputMap map=(InputMap)value;
        for (int vk=KeyEvent.VK_F2; vk <= KeyEvent.VK_F12; ++vk) {
          map.remove(KeyStroke.getKeyStroke(vk,0));
        }
      }
    }
    GUISizeHelper.calculateGUISizes();
  }
 catch (  Exception ex) {
    LOGGER.fatal(null,ex);
  }
  ManaSymbols.loadImages();
  Plugins.instance.loadPlugins();
  initComponents();
  desktopPane.setDesktopManager(new MageDesktopManager());
  setSize(1024,768);
  SettingsManager.instance.setScreenWidthAndHeight(1024,768);
  DialogManager.updateParams(768,1024,false);
  this.setExtendedState(JFrame.MAXIMIZED_BOTH);
  SessionHandler.startSession(this);
  callbackClient=new CallbackClientImpl(this);
  connectDialog=new ConnectDialog();
  desktopPane.add(connectDialog,JLayeredPane.MODAL_LAYER);
  errorDialog=new ErrorDialog();
  errorDialog.setLocation(100,100);
  desktopPane.add(errorDialog,JLayeredPane.MODAL_LAYER);
  UI.addComponent(MageComponents.DESKTOP_PANE,desktopPane);
  PING_TASK_EXECUTOR.scheduleAtFixedRate(() -> SessionHandler.ping(),60,60,TimeUnit.SECONDS);
  updateMemUsageTask=new UpdateMemUsageTask(jMemUsageLabel);
  tablesPane=new TablesPane();
  desktopPane.add(tablesPane,javax.swing.JLayeredPane.DEFAULT_LAYER);
  addTooltipContainer();
  setBackground();
  addMageLabel();
  setAppIcon();
  MageTray.instance.install();
  desktopPane.add(ArrowBuilder.getBuilder().getArrowsManagerPanel(),JLayeredPane.DRAG_LAYER);
  desktopPane.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      int width=((JComponent)e.getSource()).getWidth();
      int height=((JComponent)e.getSource()).getHeight();
      SettingsManager.instance.setScreenWidthAndHeight(width,height);
      if (!liteMode && !grayMode) {
        backgroundPane.setSize(width,height);
      }
      updateCurrentFrameSize();
      ArrowBuilder.getBuilder().setSize(width,height);
      if (title != null) {
        title.setBounds((int)(width - titleRectangle.getWidth()) / 2,(int)(height - titleRectangle.getHeight()) / 2,titleRectangle.width,titleRectangle.height);
      }
    }
  }
);
  balloonTip=new BalloonTip(desktopPane,""String_Node_Str"",new EdgedBalloonStyle(Color.WHITE,Color.BLUE),false);
  balloonTip.setPositioner(new LeftAbovePositioner(0,0));
  balloonTip.setVisible(false);
  mageToolbar.add(createSwitchPanelsButton(),0);
  mageToolbar.add(new javax.swing.JToolBar.Separator(),1);
  if (Plugins.instance.isCounterPluginLoaded()) {
    int i=Plugins.instance.getGamesPlayed();
    JLabel label=new JLabel(""String_Node_Str"" + String.valueOf(i));
    desktopPane.add(label,JLayeredPane.DEFAULT_LAYER + 1);
    label.setVisible(true);
    label.setForeground(Color.white);
    label.setBounds(0,0,180,30);
  }
  setGUISize();
  SwingUtilities.invokeLater(() -> {
    disableButtons();
    if (PreferencesDialog.getCachedValue(PreferencesDialog.KEY_CARD_IMAGES_CHECK,""String_Node_Str"").equals(""String_Node_Str"")) {
      checkForNewImages();
    }
    updateMemUsageTask.execute();
    LOGGER.info(""String_Node_Str"" + ((System.currentTimeMillis() - startTime) / 1000 + ""String_Node_Str""));
    if (autoConnect()) {
      enableButtons();
    }
 else {
      connectDialog.showDialog();
    }
    setWindowTitle();
  }
);
  if (SystemUtil.isMacOSX()) {
    SystemUtil.enableMacOSFullScreenMode(this);
    if (fullscreenMode) {
      SystemUtil.toggleMacOSFullScreenMode(this);
    }
  }
}",0.9980920581922252
157838,"public void showUserRequestDialog(final UserRequestMessage userRequestMessage){
  final UserRequestDialog userRequestDialog=new UserRequestDialog();
  userRequestDialog.setLocation(100,100);
  desktopPane.add(userRequestDialog,JLayeredPane.POPUP_LAYER);
  if (SwingUtilities.isEventDispatchThread()) {
    userRequestDialog.showDialog(userRequestMessage);
  }
 else {
    SwingUtilities.invokeLater(() -> userRequestDialog.showDialog(userRequestMessage));
  }
}","public void showUserRequestDialog(final UserRequestMessage userRequestMessage){
  final UserRequestDialog userRequestDialog=new UserRequestDialog();
  userRequestDialog.setLocation(100,100);
  desktopPane.add(userRequestDialog,JLayeredPane.MODAL_LAYER);
  if (SwingUtilities.isEventDispatchThread()) {
    userRequestDialog.showDialog(userRequestMessage);
  }
 else {
    SwingUtilities.invokeLater(() -> userRequestDialog.showDialog(userRequestMessage));
  }
}",0.9913232104121475
157839,"public void btnAboutActionPerformed(java.awt.event.ActionEvent evt){
  JInternalFrame[] windows=desktopPane.getAllFramesInLayer(JLayeredPane.POPUP_LAYER);
  for (  JInternalFrame window : windows) {
    if (window instanceof AboutDialog) {
      return;
    }
  }
  AboutDialog aboutDialog=new AboutDialog();
  desktopPane.add(aboutDialog,JLayeredPane.POPUP_LAYER);
  aboutDialog.showDialog(VERSION);
}","public void btnAboutActionPerformed(java.awt.event.ActionEvent evt){
  JInternalFrame[] windows=desktopPane.getAllFramesInLayer(JLayeredPane.MODAL_LAYER);
  for (  JInternalFrame window : windows) {
    if (window instanceof AboutDialog) {
      return;
    }
  }
  AboutDialog aboutDialog=new AboutDialog();
  desktopPane.add(aboutDialog,JLayeredPane.MODAL_LAYER);
  aboutDialog.showDialog(VERSION);
}",0.9800995024875622
157840,"public void showDialog(Deck deck,DeckEditorMode mode){
  this.deck=deck;
  SortedSet<String> landSetNames=new TreeSet<>();
  if (mode != DeckEditorMode.FREE_BUILDING) {
    for (    String setCode : deck.getExpansionSetCodes()) {
      ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
      if (expansionInfo != null && expansionInfo.hasBasicLands()) {
        this.landSetCodes.add(expansionInfo.getCode());
        landSetNames.add(expansionInfo.getName());
      }
    }
    if (this.landSetCodes.isEmpty()) {
      for (      String setCode : deck.getExpansionSetCodes()) {
        ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
        if (expansionInfo != null) {
          List<ExpansionInfo> blockSets=ExpansionRepository.instance.getSetsFromBlock(expansionInfo.getBlockName());
          for (          ExpansionInfo blockSet : blockSets) {
            if (blockSet.hasBasicLands()) {
              this.landSetCodes.add(blockSet.getCode());
              landSetNames.add(blockSet.getName());
            }
          }
        }
      }
    }
  }
  if (this.landSetCodes.isEmpty()) {
    List<ExpansionInfo> basicLandSets=ExpansionRepository.instance.getSetsWithBasicLandsByReleaseDate();
    for (    ExpansionInfo expansionInfo : basicLandSets) {
      landSetNames.add(expansionInfo.getName());
    }
  }
  if (landSetNames.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (landSetNames.size() > 1) {
    landSetNames.add(""String_Node_Str"");
  }
  cbLandSet.setModel(new DefaultComboBoxModel(landSetNames.toArray()));
  MageFrame.getDesktop().add(this,JLayeredPane.PALETTE_LAYER);
  this.setVisible(true);
}","public void showDialog(Deck deck,DeckEditorMode mode){
  this.deck=deck;
  SortedSet<String> landSetNames=new TreeSet<>();
  if (mode != DeckEditorMode.FREE_BUILDING) {
    for (    String setCode : deck.getExpansionSetCodes()) {
      ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
      if (expansionInfo != null && expansionInfo.hasBasicLands()) {
        this.landSetCodes.add(expansionInfo.getCode());
        landSetNames.add(expansionInfo.getName());
      }
    }
    if (this.landSetCodes.isEmpty()) {
      for (      String setCode : deck.getExpansionSetCodes()) {
        ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
        if (expansionInfo != null) {
          List<ExpansionInfo> blockSets=ExpansionRepository.instance.getSetsFromBlock(expansionInfo.getBlockName());
          for (          ExpansionInfo blockSet : blockSets) {
            if (blockSet.hasBasicLands()) {
              this.landSetCodes.add(blockSet.getCode());
              landSetNames.add(blockSet.getName());
            }
          }
        }
      }
    }
  }
  if (this.landSetCodes.isEmpty()) {
    List<ExpansionInfo> basicLandSets=ExpansionRepository.instance.getSetsWithBasicLandsByReleaseDate();
    for (    ExpansionInfo expansionInfo : basicLandSets) {
      landSetNames.add(expansionInfo.getName());
    }
  }
  if (landSetNames.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (landSetNames.size() > 1) {
    landSetNames.add(""String_Node_Str"");
  }
  cbLandSet.setModel(new DefaultComboBoxModel(landSetNames.toArray()));
  if (this.isModal()) {
    MageFrame.getDesktop().add(this,JLayeredPane.MODAL_LAYER);
  }
 else {
    MageFrame.getDesktop().add(this,JLayeredPane.PALETTE_LAYER);
  }
  this.setVisible(true);
}",0.9674865705400056
157841,"/** 
 * Creates new form ConnectDialog
 */
public ConnectDialog(){
  initComponents();
  this.txtServer.addActionListener(connectAction);
  this.txtPort.addActionListener(connectAction);
  this.txtUserName.addActionListener(connectAction);
  this.txtPassword.addActionListener(connectAction);
  registerUserDialog=new RegisterUserDialog(this);
  MageFrame.getDesktop().add(registerUserDialog,JLayeredPane.POPUP_LAYER);
  resetPasswordDialog=new ResetPasswordDialog(this);
  MageFrame.getDesktop().add(resetPasswordDialog,JLayeredPane.POPUP_LAYER);
}","/** 
 * Creates new form ConnectDialog
 */
public ConnectDialog(){
  initComponents();
  this.txtServer.addActionListener(connectAction);
  this.txtPort.addActionListener(connectAction);
  this.txtUserName.addActionListener(connectAction);
  this.txtPassword.addActionListener(connectAction);
  registerUserDialog=new RegisterUserDialog(this);
  MageFrame.getDesktop().add(registerUserDialog,JLayeredPane.MODAL_LAYER);
  resetPasswordDialog=new ResetPasswordDialog(this);
  MageFrame.getDesktop().add(resetPasswordDialog,JLayeredPane.MODAL_LAYER);
}",0.9854280510018216
157842,"@Override public void show(){
  super.show();
  this.toFront();
  if (modal) {
    this.setClosable(false);
  }
  if (this.modal) {
    startModal();
  }
}","@Override public void show(){
  super.show();
  if (modal) {
    this.setClosable(false);
  }
  this.toFront();
  if (modal) {
    startModal();
  }
}",0.8721311475409836
157843,"public void showDialog(Choice choice,UUID objectId,MageDialogState mageDialogState,String startSelectionValue){
  this.choice=choice;
  setLabelText(this.labelMessage,choice.getMessage());
  setLabelText(this.labelSubMessage,choice.getSubMessage());
  btCancel.setEnabled(!choice.isRequired());
  this.allItems.clear();
  if (choice.isKeyChoice()) {
    for (    Map.Entry<String,String> entry : choice.getKeyChoices().entrySet()) {
      this.allItems.add(new KeyValueItem(entry.getKey(),entry.getValue()));
    }
  }
 else {
    for (    String value : choice.getChoices()) {
      this.allItems.add(new KeyValueItem(value,value));
    }
  }
  if (choice.isSortEnabled()) {
    Collections.sort(this.allItems,new Comparator<KeyValueItem>(){
      @Override public int compare(      KeyValueItem o1,      KeyValueItem o2){
        Integer n1=choice.getSortData().get(o1.Key);
        Integer n2=choice.getSortData().get(o2.Key);
        return n1.compareTo(n2);
      }
    }
);
  }
  if (choice.isSearchEnabled()) {
    panelSearch.setVisible(true);
    this.editSearch.setText(choice.getSearchText());
  }
 else {
    panelSearch.setVisible(false);
    this.editSearch.setText(""String_Node_Str"");
  }
  editSearch.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void insertUpdate(    DocumentEvent e){
      choice.setSearchText(editSearch.getText());
      loadData();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      choice.setSearchText(editSearch.getText());
      loadData();
    }
    @Override public void changedUpdate(    DocumentEvent e){
      choice.setSearchText(editSearch.getText());
      loadData();
    }
  }
);
  editSearch.addKeyListener(new KeyListener(){
    @Override public void keyTyped(    KeyEvent e){
    }
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_UP) {
        doPrevSelect();
      }
 else       if (e.getKeyCode() == KeyEvent.VK_DOWN) {
        doNextSelect();
      }
    }
    @Override public void keyReleased(    KeyEvent e){
    }
  }
);
  listChoices.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        doChoose();
      }
    }
  }
);
  if (!choice.isRequired()) {
    String cancelName=""String_Node_Str"";
    InputMap inputMap=getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),cancelName);
    ActionMap actionMap=getRootPane().getActionMap();
    actionMap.put(cancelName,new AbstractAction(){
      public void actionPerformed(      ActionEvent e){
        doCancel();
      }
    }
);
  }
  MageFrame.getDesktop().add(this,JLayeredPane.PALETTE_LAYER);
  if (mageDialogState != null) {
    mageDialogState.setStateToDialog(this);
  }
 else {
    Point centered=SettingsManager.instance.getComponentPosition(getWidth(),getHeight());
    this.setLocation(centered.x,centered.y);
    GuiDisplayUtil.keepComponentInsideScreen(centered.x,centered.y,this);
  }
  loadData();
  if ((startSelectionValue != null)) {
    int selectIndex=-1;
    for (int i=0; i < this.listChoices.getModel().getSize(); i++) {
      KeyValueItem listItem=(KeyValueItem)this.listChoices.getModel().getElementAt(i);
      if (listItem.Key.equals(startSelectionValue)) {
        selectIndex=i;
        break;
      }
    }
    if (selectIndex >= 0) {
      this.listChoices.setSelectedIndex(selectIndex);
      this.listChoices.ensureIndexIsVisible(selectIndex);
    }
  }
  this.setVisible(true);
}","public void showDialog(Choice choice,UUID objectId,MageDialogState mageDialogState,String startSelectionValue){
  this.choice=choice;
  setLabelText(this.labelMessage,choice.getMessage());
  setLabelText(this.labelSubMessage,choice.getSubMessage());
  btCancel.setEnabled(!choice.isRequired());
  this.allItems.clear();
  if (choice.isKeyChoice()) {
    for (    Map.Entry<String,String> entry : choice.getKeyChoices().entrySet()) {
      this.allItems.add(new KeyValueItem(entry.getKey(),entry.getValue()));
    }
  }
 else {
    for (    String value : choice.getChoices()) {
      this.allItems.add(new KeyValueItem(value,value));
    }
  }
  if (choice.isSortEnabled()) {
    Collections.sort(this.allItems,new Comparator<KeyValueItem>(){
      @Override public int compare(      KeyValueItem o1,      KeyValueItem o2){
        Integer n1=choice.getSortData().get(o1.Key);
        Integer n2=choice.getSortData().get(o2.Key);
        return n1.compareTo(n2);
      }
    }
);
  }
  if (choice.isSearchEnabled()) {
    panelSearch.setVisible(true);
    this.editSearch.setText(choice.getSearchText());
  }
 else {
    panelSearch.setVisible(false);
    this.editSearch.setText(""String_Node_Str"");
  }
  editSearch.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void insertUpdate(    DocumentEvent e){
      choice.setSearchText(editSearch.getText());
      loadData();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      choice.setSearchText(editSearch.getText());
      loadData();
    }
    @Override public void changedUpdate(    DocumentEvent e){
      choice.setSearchText(editSearch.getText());
      loadData();
    }
  }
);
  editSearch.addKeyListener(new KeyListener(){
    @Override public void keyTyped(    KeyEvent e){
    }
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_UP) {
        doPrevSelect();
      }
 else       if (e.getKeyCode() == KeyEvent.VK_DOWN) {
        doNextSelect();
      }
    }
    @Override public void keyReleased(    KeyEvent e){
    }
  }
);
  listChoices.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        doChoose();
      }
    }
  }
);
  if (!choice.isRequired()) {
    String cancelName=""String_Node_Str"";
    InputMap inputMap=getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),cancelName);
    ActionMap actionMap=getRootPane().getActionMap();
    actionMap.put(cancelName,new AbstractAction(){
      public void actionPerformed(      ActionEvent e){
        doCancel();
      }
    }
);
  }
  if (this.isModal()) {
    MageFrame.getDesktop().add(this,JLayeredPane.MODAL_LAYER);
  }
 else {
    MageFrame.getDesktop().add(this,JLayeredPane.PALETTE_LAYER);
  }
  if (mageDialogState != null) {
    mageDialogState.setStateToDialog(this);
  }
 else {
    Point centered=SettingsManager.instance.getComponentPosition(getWidth(),getHeight());
    this.setLocation(centered.x,centered.y);
    GuiDisplayUtil.keepComponentInsideScreen(centered.x,centered.y,this);
  }
  loadData();
  if ((startSelectionValue != null)) {
    int selectIndex=-1;
    for (int i=0; i < this.listChoices.getModel().getSize(); i++) {
      KeyValueItem listItem=(KeyValueItem)this.listChoices.getModel().getElementAt(i);
      if (listItem.Key.equals(startSelectionValue)) {
        selectIndex=i;
        break;
      }
    }
    if (selectIndex >= 0) {
      this.listChoices.setSelectedIndex(selectIndex);
      this.listChoices.ensureIndexIsVisible(selectIndex);
    }
  }
  this.setVisible(true);
}",0.9856026326614562
157844,"public void showDialog(int min,int max,String message){
  this.spnAmount.setModel(new SpinnerNumberModel(min,min,max,1));
  this.lblMessage.setText(message);
  this.btnOk.setVisible(true);
  this.btnCancel.setVisible(false);
  this.pack();
  Point centered=SettingsManager.instance.getComponentPosition(getWidth(),getHeight());
  this.setLocation(centered.x,centered.y);
  GuiDisplayUtil.keepComponentInsideScreen(centered.x,centered.y,this);
  this.setVisible(true);
}","public void showDialog(int min,int max,String message){
  this.spnAmount.setModel(new SpinnerNumberModel(min,min,max,1));
  this.lblMessage.setText(message);
  this.btnOk.setVisible(true);
  this.btnCancel.setVisible(false);
  this.pack();
  if (this.isModal()) {
    MageFrame.getDesktop().add(this,JLayeredPane.MODAL_LAYER);
  }
 else {
    MageFrame.getDesktop().add(this,JLayeredPane.PALETTE_LAYER);
  }
  Point centered=SettingsManager.instance.getComponentPosition(getWidth(),getHeight());
  this.setLocation(centered.x,centered.y);
  GuiDisplayUtil.keepComponentInsideScreen(centered.x,centered.y,this);
  this.setVisible(true);
}",0.8481012658227848
157845,"public void loadCards(String name,CardsView pile1,CardsView pile2,BigCard bigCard,UUID gameId){
  this.title=name;
  this.pile1.loadCardsNarrow(pile1,bigCard,gameId);
  this.pile2.loadCardsNarrow(pile2,bigCard,gameId);
  if (getParent() != MageFrame.getDesktop()) {
    MageFrame.getDesktop().add(this,JLayeredPane.MODAL_LAYER);
  }
  pack();
  Point centered=SettingsManager.instance.getComponentPosition(getWidth(),getHeight());
  this.setLocation(centered.x,centered.y);
  GuiDisplayUtil.keepComponentInsideScreen(centered.x,centered.y,this);
  this.revalidate();
  this.repaint();
  this.setModal(true);
  this.setVisible(true);
}","public void loadCards(String name,CardsView pile1,CardsView pile2,BigCard bigCard,UUID gameId){
  this.title=name;
  this.pile1.loadCardsNarrow(pile1,bigCard,gameId);
  this.pile2.loadCardsNarrow(pile2,bigCard,gameId);
  if (getParent() != MageFrame.getDesktop()) {
    MageFrame.getDesktop().add(this,JLayeredPane.MODAL_LAYER);
  }
  pack();
  Point centered=SettingsManager.instance.getComponentPosition(getWidth(),getHeight());
  this.setLocation(centered.x,centered.y);
  GuiDisplayUtil.keepComponentInsideScreen(centered.x,centered.y,this);
  this.revalidate();
  this.repaint();
  this.setModal(true);
  if (this.isModal()) {
    MageFrame.getDesktop().add(this,JLayeredPane.MODAL_LAYER);
  }
 else {
    MageFrame.getDesktop().add(this,JLayeredPane.PALETTE_LAYER);
  }
  this.setVisible(true);
}",0.883008356545961
157846,"public void loadCards(String name,CardsView showCards,BigCard bigCard,UUID gameId,boolean modal,Map<String,Serializable> options,JPopupMenu popupMenu,Listener<Event> eventListener){
  this.title=name;
  this.setTitelBarToolTip(name);
  cardArea.clearCardEventListeners();
  cardArea.loadCards(showCards,bigCard,gameId);
  if (options != null) {
    if (options.containsKey(""String_Node_Str"")) {
      java.util.List<UUID> chosenCards=(java.util.List<UUID>)options.get(""String_Node_Str"");
      cardArea.selectCards(chosenCards);
    }
    if (options.containsKey(""String_Node_Str"")) {
      java.util.List<UUID> choosableCards=(java.util.List<UUID>)options.get(""String_Node_Str"");
      cardArea.markCards(choosableCards);
    }
    if (options.containsKey(""String_Node_Str"") && options.get(""String_Node_Str"") == QueryType.PICK_ABILITY) {
      cardArea.setPopupMenu(popupMenu);
    }
  }
  if (popupMenu != null) {
    this.cardArea.setPopupMenu(popupMenu);
  }
  if (eventListener != null) {
    this.cardArea.addCardEventListener(eventListener);
  }
  if (getParent() != MageFrame.getDesktop()) {
    MageFrame.getDesktop().add(this,JLayeredPane.DEFAULT_LAYER);
  }
  pack();
  this.revalidate();
  this.repaint();
  this.setModal(modal);
  SwingUtilities.invokeLater(() -> {
    if (!positioned) {
      int width=ShowCardsDialog.this.getWidth();
      int height=ShowCardsDialog.this.getHeight();
      if (width > 0 && height > 0) {
        Point centered=SettingsManager.instance.getComponentPosition(width,height);
        ShowCardsDialog.this.setLocation(centered.x,centered.y);
        positioned=true;
        GuiDisplayUtil.keepComponentInsideScreen(centered.x,centered.y,ShowCardsDialog.this);
      }
    }
    ShowCardsDialog.this.setVisible(true);
  }
);
}","public void loadCards(String name,CardsView showCards,BigCard bigCard,UUID gameId,boolean modal,Map<String,Serializable> options,JPopupMenu popupMenu,Listener<Event> eventListener){
  this.title=name;
  this.setTitelBarToolTip(name);
  cardArea.clearCardEventListeners();
  cardArea.loadCards(showCards,bigCard,gameId);
  if (options != null) {
    if (options.containsKey(""String_Node_Str"")) {
      java.util.List<UUID> chosenCards=(java.util.List<UUID>)options.get(""String_Node_Str"");
      cardArea.selectCards(chosenCards);
    }
    if (options.containsKey(""String_Node_Str"")) {
      java.util.List<UUID> choosableCards=(java.util.List<UUID>)options.get(""String_Node_Str"");
      cardArea.markCards(choosableCards);
    }
    if (options.containsKey(""String_Node_Str"") && options.get(""String_Node_Str"") == QueryType.PICK_ABILITY) {
      cardArea.setPopupMenu(popupMenu);
    }
  }
  if (popupMenu != null) {
    this.cardArea.setPopupMenu(popupMenu);
  }
  if (eventListener != null) {
    this.cardArea.addCardEventListener(eventListener);
  }
  pack();
  this.revalidate();
  this.repaint();
  this.setModal(modal);
  if (this.isModal()) {
    MageFrame.getDesktop().add(this,JLayeredPane.MODAL_LAYER);
  }
 else {
    MageFrame.getDesktop().add(this,JLayeredPane.PALETTE_LAYER);
  }
  SwingUtilities.invokeLater(() -> {
    if (!positioned) {
      int width=ShowCardsDialog.this.getWidth();
      int height=ShowCardsDialog.this.getHeight();
      if (width > 0 && height > 0) {
        Point centered=SettingsManager.instance.getComponentPosition(width,height);
        ShowCardsDialog.this.setLocation(centered.x,centered.y);
        positioned=true;
        GuiDisplayUtil.keepComponentInsideScreen(centered.x,centered.y,ShowCardsDialog.this);
      }
    }
    ShowCardsDialog.this.setVisible(true);
  }
);
}",0.9254727474972192
157847,"public void buildQuery(QueryBuilder qb) throws SQLException {
  Where where=qb.where();
  where.eq(""String_Node_Str"",false);
  where.eq(""String_Node_Str"",false);
  int clausesCount=2;
  if (name != null) {
    where.like(""String_Node_Str"",new SelectArg('%' + name + '%'));
    clausesCount++;
  }
  if (rules != null) {
    where.like(""String_Node_Str"",new SelectArg('%' + rules + '%'));
    clausesCount++;
  }
  if (doubleFaced != null) {
    where.eq(""String_Node_Str"",doubleFaced);
    clausesCount++;
  }
  for (  Rarity rarity : rarities) {
    where.eq(""String_Node_Str"",rarity);
  }
  if (!rarities.isEmpty()) {
    where.or(rarities.size());
    clausesCount++;
  }
  for (  String setCode : setCodes) {
    where.eq(""String_Node_Str"",setCode);
  }
  if (!setCodes.isEmpty()) {
    where.or(setCodes.size());
    clausesCount++;
  }
  if (types.size() != 7) {
    for (    CardType type : types) {
      where.like(""String_Node_Str"",new SelectArg('%' + type.name() + '%'));
    }
    if (!types.isEmpty()) {
      where.or(types.size());
      clausesCount++;
    }
  }
  for (  CardType type : notTypes) {
    where.not().like(""String_Node_Str"",new SelectArg('%' + type.name() + '%'));
    clausesCount++;
  }
  for (  String superType : supertypes) {
    where.like(""String_Node_Str"",new SelectArg('%' + superType + '%'));
    clausesCount++;
  }
  for (  String subType : notSupertypes) {
    where.not().like(""String_Node_Str"",new SelectArg('%' + subType + '%'));
    clausesCount++;
  }
  for (  String subType : subtypes) {
    where.like(""String_Node_Str"",new SelectArg('%' + subType + '%'));
    clausesCount++;
  }
  if (convertedManaCost != null) {
    where.eq(""String_Node_Str"",convertedManaCost);
    clausesCount++;
  }
  if (!black || !blue || !green|| !red|| !white|| !colorless) {
    int colorClauses=0;
    if (black) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (blue) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (green) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (red) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (white) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (colorless) {
      where.eq(""String_Node_Str"",false).eq(""String_Node_Str"",false).eq(""String_Node_Str"",false).eq(""String_Node_Str"",false).eq(""String_Node_Str"",false);
      where.and(5);
      colorClauses++;
    }
    if (colorClauses > 0) {
      where.or(colorClauses);
      clausesCount++;
    }
  }
  if (minCardNumber != Integer.MIN_VALUE) {
    where.ge(""String_Node_Str"",minCardNumber);
    clausesCount++;
  }
  if (maxCardNumber != Integer.MAX_VALUE) {
    where.le(""String_Node_Str"",maxCardNumber);
    clausesCount++;
  }
  if (clausesCount > 0) {
    where.and(clausesCount);
  }
 else {
    where.eq(""String_Node_Str"",new SelectArg(0));
  }
  if (start != null) {
    qb.offset(start);
  }
  if (count != null) {
    qb.limit(count);
  }
  if (sortBy != null) {
    qb.orderBy(sortBy,true);
  }
}","public void buildQuery(QueryBuilder qb) throws SQLException {
  Where where=qb.where();
  where.eq(""String_Node_Str"",false);
  where.eq(""String_Node_Str"",false);
  int clausesCount=2;
  if (name != null) {
    where.like(""String_Node_Str"",new SelectArg('%' + name + '%'));
    clausesCount++;
  }
  if (nameExact != null) {
    where.like(""String_Node_Str"",new SelectArg(nameExact));
    clausesCount++;
  }
  if (rules != null) {
    where.like(""String_Node_Str"",new SelectArg('%' + rules + '%'));
    clausesCount++;
  }
  if (doubleFaced != null) {
    where.eq(""String_Node_Str"",doubleFaced);
    clausesCount++;
  }
  for (  Rarity rarity : rarities) {
    where.eq(""String_Node_Str"",rarity);
  }
  if (!rarities.isEmpty()) {
    where.or(rarities.size());
    clausesCount++;
  }
  for (  String setCode : setCodes) {
    where.eq(""String_Node_Str"",setCode);
  }
  if (!setCodes.isEmpty()) {
    where.or(setCodes.size());
    clausesCount++;
  }
  if (types.size() != 7) {
    for (    CardType type : types) {
      where.like(""String_Node_Str"",new SelectArg('%' + type.name() + '%'));
    }
    if (!types.isEmpty()) {
      where.or(types.size());
      clausesCount++;
    }
  }
  for (  CardType type : notTypes) {
    where.not().like(""String_Node_Str"",new SelectArg('%' + type.name() + '%'));
    clausesCount++;
  }
  for (  String superType : supertypes) {
    where.like(""String_Node_Str"",new SelectArg('%' + superType + '%'));
    clausesCount++;
  }
  for (  String subType : notSupertypes) {
    where.not().like(""String_Node_Str"",new SelectArg('%' + subType + '%'));
    clausesCount++;
  }
  for (  String subType : subtypes) {
    where.like(""String_Node_Str"",new SelectArg('%' + subType + '%'));
    clausesCount++;
  }
  if (convertedManaCost != null) {
    where.eq(""String_Node_Str"",convertedManaCost);
    clausesCount++;
  }
  if (!black || !blue || !green|| !red|| !white|| !colorless) {
    int colorClauses=0;
    if (black) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (blue) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (green) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (red) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (white) {
      where.eq(""String_Node_Str"",true);
      colorClauses++;
    }
    if (colorless) {
      where.eq(""String_Node_Str"",false).eq(""String_Node_Str"",false).eq(""String_Node_Str"",false).eq(""String_Node_Str"",false).eq(""String_Node_Str"",false);
      where.and(5);
      colorClauses++;
    }
    if (colorClauses > 0) {
      where.or(colorClauses);
      clausesCount++;
    }
  }
  if (minCardNumber != Integer.MIN_VALUE) {
    where.ge(""String_Node_Str"",minCardNumber);
    clausesCount++;
  }
  if (maxCardNumber != Integer.MAX_VALUE) {
    where.le(""String_Node_Str"",maxCardNumber);
    clausesCount++;
  }
  if (clausesCount > 0) {
    where.and(clausesCount);
  }
 else {
    where.eq(""String_Node_Str"",new SelectArg(0));
  }
  if (start != null) {
    qb.offset(start);
  }
  if (count != null) {
    qb.limit(count);
  }
  if (sortBy != null) {
    qb.orderBy(sortBy,true);
  }
}",0.9822485207100592
157848,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  if (player.getLibrary().hasCards()) {
    Card card=player.getLibrary().getFromTop(game);
    Cards cards=new CardsImpl();
    cards.add(card);
    player.revealCards(""String_Node_Str"",cards,game);
    if (card != null) {
      if (filter.match(card,game) && player.chooseUse(outcome,new StringBuilder(""String_Node_Str"").append(card.getName()).append(""String_Node_Str"").toString(),source,game)) {
        card.putOntoBattlefield(game,Zone.LIBRARY,source.getSourceId(),source.getControllerId());
        Permanent permanent=game.getPermanent(card.getId());
        if (permanent != null) {
          permanent.addCounters(new Counter(""String_Node_Str""),source,game);
          ContinuousEffect effect=new AddCardTypeTargetEffect(CardType.ENCHANTMENT,Duration.Custom);
          effect.setTargetPointer(new FixedTarget(permanent.getId()));
          game.addEffect(effect,source);
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  if (player.getLibrary().hasCards()) {
    Card card=player.getLibrary().getFromTop(game);
    Cards cards=new CardsImpl();
    cards.add(card);
    player.revealCards(""String_Node_Str"",cards,game);
    if (card != null) {
      if (filter.match(card,game) && player.chooseUse(outcome,new StringBuilder(""String_Node_Str"").append(card.getName()).append(""String_Node_Str"").toString(),source,game)) {
        card.putOntoBattlefield(game,Zone.LIBRARY,source.getSourceId(),source.getControllerId());
        Permanent permanent=game.getPermanent(card.getId());
        if (permanent != null) {
          permanent.addCounters(new Counter(""String_Node_Str""),source,game);
          ContinuousEffect effect=new AddCardTypeTargetEffect(Duration.Custom,CardType.ENCHANTMENT);
          effect.setTargetPointer(new FixedTarget(permanent.getId()));
          game.addEffect(effect,source);
        }
      }
    }
    return true;
  }
  return false;
}",0.9855203619909504
157849,"@Override public boolean apply(Game game,Ability source){
  Permanent sourcePermanent=game.getPermanent(source.getSourceId());
  Permanent copyFromPermanent=game.getPermanent(getTargetPointer().getFirst(game,source));
  if (sourcePermanent != null && copyFromPermanent != null) {
    game.copyPermanent(Duration.EndOfTurn,copyFromPermanent,sourcePermanent.getId(),source,new EmptyApplyToPermanent());
    if (!copyFromPermanent.isArtifact()) {
      ContinuousEffect effect=new AddCardTypeTargetEffect(CardType.ARTIFACT,Duration.EndOfTurn);
      effect.setTargetPointer(new FixedTarget(sourcePermanent,game));
      game.addEffect(effect,source);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent sourcePermanent=game.getPermanent(source.getSourceId());
  Permanent copyFromPermanent=game.getPermanent(getTargetPointer().getFirst(game,source));
  if (sourcePermanent != null && copyFromPermanent != null) {
    game.copyPermanent(Duration.EndOfTurn,copyFromPermanent,sourcePermanent.getId(),source,new EmptyApplyToPermanent());
    if (!copyFromPermanent.isArtifact()) {
      ContinuousEffect effect=new AddCardTypeTargetEffect(Duration.EndOfTurn,CardType.ARTIFACT);
      effect.setTargetPointer(new FixedTarget(sourcePermanent,game));
      game.addEffect(effect,source);
    }
    return true;
  }
  return false;
}",0.846820809248555
157850,"@Override public boolean apply(Game game,Ability source){
  DynamicValue value=new PermanentsOnBattlefieldCount(filter);
  int count=value.calculate(game,source,this) * 2;
  Player player=game.getPlayer(source.getFirstTarget());
  if (player != null) {
    player.loseLife(count,game,false);
  }
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    controller.gainLife(count,game);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  int count=new PermanentsOnBattlefieldCount(StaticFilters.FILTER_CONTROLLED_PERMANENT_ARTIFACT).calculate(game,source,this) * 2;
  if (count > 0) {
    Player targetPlayer=game.getPlayer(getTargetPointer().getFirst(game,source));
    if (targetPlayer != null) {
      targetPlayer.loseLife(count,game,false);
    }
    Player controller=game.getPlayer(source.getControllerId());
    if (controller != null) {
      controller.gainLife(count,game);
    }
  }
  return true;
}",0.7622950819672131
157851,"@Override public void init(Ability source,Game game){
  this.amount=dynamicAmount.calculate(game,source,this);
}","@Override public void init(Ability source,Game game){
  amountToRedirect=dynamicAmount.calculate(game,source,this);
}",0.9344978165938864
157852,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (!this.used && super.applies(event,source,game)) {
    MageObject sourceObject=game.getObject(event.getSourceId());
    MageObject chosenSourceObject=game.getObject(source.getFirstTarget());
    if (sourceObject == null) {
      game.informPlayers(""String_Node_Str"");
      return false;
    }
    if (sourceObject.getId() != chosenSourceObject.getId()) {
      return false;
    }
    Permanent permanent=game.getPermanent(event.getTargetId());
    if (permanent != null && permanent.isCreature()) {
      if (permanent.getControllerId().equals(source.getControllerId())) {
        return true;
      }
    }
    Player player=game.getPlayer(event.getTargetId());
    if (player != null) {
      if (player.getId().equals(source.getControllerId())) {
        return true;
      }
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (!this.used && event.getFlag()) {
    MageObject sourceObject=game.getObject(event.getSourceId());
    MageObject chosenSourceObject=game.getObject(source.getFirstTarget());
    if (sourceObject == null) {
      game.informPlayers(""String_Node_Str"");
      return false;
    }
    if (sourceObject.getId() != chosenSourceObject.getId()) {
      return false;
    }
    Permanent permanent=game.getPermanent(event.getTargetId());
    if (permanent != null && permanent.isCreature()) {
      if (permanent.getControllerId().equals(source.getControllerId())) {
        redirectTarget=source.getTargets().get(1);
        return true;
      }
    }
    Player player=game.getPlayer(event.getTargetId());
    if (player != null) {
      if (player.getId().equals(source.getControllerId())) {
        redirectTarget=source.getTargets().get(1);
        return true;
      }
    }
  }
  return false;
}",0.9264626945786366
157853,"@Override public ShiningShoalPreventDamageTargetEffect copy(){
  return new ShiningShoalPreventDamageTargetEffect(this);
}","@Override public ShiningShoalRedirectDamageTargetEffect copy(){
  return new ShiningShoalRedirectDamageTargetEffect(this);
}",0.926829268292683
157854,"/** 
 * Vorinclex, Voice of Hunger is not mana doubling River of Tears.
 */
@Test @Ignore public void testVorinclexVoiceofHungerRiverOfTearsManaMultiplier(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  activateManaAbility(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  setStopAt(1,PhaseStep.PRECOMBAT_MAIN);
  execute();
  assertManaPool(playerA,ManaType.BLUE,2);
}","/** 
 * Vorinclex, Voice of Hunger is not mana doubling River of Tears.
 */
@Test public void testVorinclexVoiceofHungerRiverOfTearsManaMultiplier(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.HAND,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  playLand(1,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  activateManaAbility(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"");
  setStopAt(3,PhaseStep.BEGIN_COMBAT);
  execute();
  assertManaPool(playerA,ManaType.BLUE,2);
}",0.7757805108798487
157855,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  if (condition.apply(game,source)) {
    effect.setTargetPointer(this.targetPointer);
  }
 else   if (otherwiseEffect != null) {
    otherwiseEffect.setTargetPointer(this.targetPointer);
  }
  Mana mana=getMana(game,source);
  if (mana != null && mana.getAny() > 0) {
    int amount=mana.getAny();
    ChoiceColor choice=new ChoiceColor(true);
    Mana createdMana=null;
    if (controller.choose(outcome,choice,game)) {
      if (choice.getColor() == null) {
        return false;
      }
      createdMana=choice.getMana(amount);
    }
    mana=createdMana;
  }
  if (mana != null) {
    checkToFirePossibleEvents(mana,game,source);
    controller.getManaPool().addMana(mana,game,source);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  if (condition.apply(game,source)) {
    effect.setTargetPointer(this.targetPointer);
  }
 else   if (otherwiseEffect != null) {
    otherwiseEffect.setTargetPointer(this.targetPointer);
  }
  Mana mana=getMana(game,source);
  if (mana == null) {
    return false;
  }
  if (mana.getAny() > 0) {
    int amount=mana.getAny();
    ChoiceColor choice=new ChoiceColor(true);
    Mana createdMana=null;
    if (controller.choose(outcome,choice,game)) {
      if (choice.getColor() == null) {
        return false;
      }
      createdMana=choice.getMana(amount);
    }
    if (createdMana == null) {
      return false;
    }
    mana=createdMana;
    checkToFirePossibleEvents(mana,game,source);
  }
  controller.getManaPool().addMana(mana,game,source);
  return true;
}",0.9093904448105437
157856,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    Cards topCards=new CardsImpl();
    topCards.addAll(controller.getLibrary().getTopCards(game,3));
    if (!topCards.isEmpty()) {
      controller.lookAtCards(sourceObject.getIdName(),topCards,game);
      int number=topCards.count(new FilterInstantOrSorceryCard(),source.getSourceId(),source.getControllerId(),game);
      if (number > 0) {
        if (controller.chooseUse(outcome,""String_Node_Str"",source,game)) {
          Card card;
          if (number == 1) {
            card=topCards.getCards(new FilterInstantOrSorceryCard(),source.getSourceId(),source.getControllerId(),game).iterator().next();
          }
 else {
            Target target=new TargetCard(Zone.LIBRARY,new FilterInstantOrSorceryCard());
            controller.chooseTarget(outcome,target,source,game);
            card=topCards.get(target.getFirstTarget(),game);
          }
          if (card != null) {
            controller.moveCards(card,Zone.HAND,source,game);
            controller.revealCards(sourceObject.getIdName(),new CardsImpl(card),game);
            topCards.remove(card);
          }
        }
      }
      controller.putCardsOnBottomOfLibrary(topCards,game,source,true);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    Cards topCards=new CardsImpl();
    topCards.addAll(controller.getLibrary().getTopCards(game,3));
    if (!topCards.isEmpty()) {
      controller.lookAtCards(sourceObject.getIdName(),topCards,game);
      int number=topCards.count(new FilterInstantOrSorceryCard(),source.getSourceId(),source.getControllerId(),game);
      if (number > 0) {
        if (controller.chooseUse(outcome,""String_Node_Str"",source,game)) {
          Card card;
          if (number == 1) {
            card=topCards.getCards(new FilterInstantOrSorceryCard(),source.getSourceId(),source.getControllerId(),game).iterator().next();
          }
 else {
            TargetCard target=new TargetCard(Zone.LIBRARY,new FilterInstantOrSorceryCard());
            controller.chooseTarget(outcome,topCards,target,source,game);
            card=topCards.get(target.getFirstTarget(),game);
          }
          if (card != null) {
            controller.moveCards(card,Zone.HAND,source,game);
            controller.revealCards(sourceObject.getIdName(),new CardsImpl(card),game);
            topCards.remove(card);
          }
        }
      }
      controller.putCardsOnBottomOfLibrary(topCards,game,source,true);
    }
    return true;
  }
  return false;
}",0.995540308747856
157857,"@Override public boolean askToActivateAlternativeCosts(Ability ability,Game game){
  if (ability.getAbilityType() == AbilityType.SPELL) {
    Player player=game.getPlayer(controllerId);
    Spell spell=game.getStack().getSpell(ability.getId());
    if (player != null && spell != null) {
      this.resetMorph();
      spell.setFaceDown(true,game);
      if (alternateCosts.canPay(ability,sourceId,controllerId,game)) {
        if (player.chooseUse(Outcome.Benefit,""String_Node_Str"" + getCosts().getText() + ""String_Node_Str"",ability,game)) {
          activateMorph(game);
          ability.getManaCostsToPay().clear();
          ability.getCosts().clear();
          for (Iterator it=this.alternateCosts.iterator(); it.hasNext(); ) {
            Cost cost=(Cost)it.next();
            if (cost instanceof ManaCost) {
              ability.getManaCostsToPay().add((ManaCost)cost.copy());
            }
 else {
              ability.getCosts().add(cost.copy());
            }
          }
          ObjectColor spellColor=spell.getColor(game);
          spellColor.setBlack(false);
          spellColor.setRed(false);
          spellColor.setGreen(false);
          spellColor.setWhite(false);
          spellColor.setBlue(false);
        }
 else {
          spell.setFaceDown(false,game);
        }
      }
    }
  }
  if (ability.getAbilityType() == AbilityType.PLAY_LAND) {
    Player player=game.getPlayer(controllerId);
    if (player != null) {
      this.resetMorph();
      if (alternateCosts.canPay(ability,sourceId,controllerId,game)) {
        if (player.chooseUse(Outcome.Benefit,""String_Node_Str"" + getCosts().getText() + ""String_Node_Str"",ability,game)) {
          activateMorph(game);
          ability.getManaCostsToPay().clear();
          ability.getCosts().clear();
          for (Iterator it=this.alternateCosts.iterator(); it.hasNext(); ) {
            Cost cost=(Cost)it.next();
            if (cost instanceof ManaCost) {
              ability.getManaCostsToPay().add((ManaCost)cost.copy());
            }
 else {
              ability.getCosts().add(cost.copy());
            }
          }
        }
      }
    }
  }
  return isActivated(ability,game);
}","@Override public boolean askToActivateAlternativeCosts(Ability ability,Game game){
  if (ability.getAbilityType() == AbilityType.SPELL) {
    Player player=game.getPlayer(controllerId);
    Spell spell=game.getStack().getSpell(ability.getId());
    if (player != null && spell != null) {
      this.resetMorph();
      spell.setFaceDown(true,game);
      if (alternateCosts.canPay(ability,sourceId,controllerId,game)) {
        if (player.chooseUse(Outcome.Benefit,""String_Node_Str"" + getCosts().getText() + ""String_Node_Str"",ability,game)) {
          activateMorph(game);
          ability.getManaCostsToPay().clear();
          ability.getCosts().clear();
          for (Iterator it=this.alternateCosts.iterator(); it.hasNext(); ) {
            Cost cost=(Cost)it.next();
            if (cost instanceof ManaCost) {
              ability.getManaCostsToPay().add((ManaCost)cost.copy());
            }
 else {
              ability.getCosts().add(cost.copy());
            }
          }
          ObjectColor spellColor=spell.getColor(game);
          spellColor.setBlack(false);
          spellColor.setRed(false);
          spellColor.setGreen(false);
          spellColor.setWhite(false);
          spellColor.setBlue(false);
          spell.getSubtype(game).clear();
        }
 else {
          spell.setFaceDown(false,game);
        }
      }
    }
  }
  if (ability.getAbilityType() == AbilityType.PLAY_LAND) {
    Player player=game.getPlayer(controllerId);
    if (player != null) {
      this.resetMorph();
      if (alternateCosts.canPay(ability,sourceId,controllerId,game)) {
        if (player.chooseUse(Outcome.Benefit,""String_Node_Str"" + getCosts().getText() + ""String_Node_Str"",ability,game)) {
          activateMorph(game);
          ability.getManaCostsToPay().clear();
          ability.getCosts().clear();
          for (Iterator it=this.alternateCosts.iterator(); it.hasNext(); ) {
            Cost cost=(Cost)it.next();
            if (cost instanceof ManaCost) {
              ability.getManaCostsToPay().add((ManaCost)cost.copy());
            }
 else {
              ability.getCosts().add(cost.copy());
            }
          }
        }
      }
    }
  }
  return isActivated(ability,game);
}",0.9904545454545456
157858,"@Override public boolean apply(Game game,Ability source){
  game.informPlayers(""String_Node_Str"");
  for (  UUID playerId : game.getState().getPlayersInRange(source.getControllerId(),game)) {
    Player player=game.getPlayer(playerId);
    if (player != null) {
      TargetControlledCreaturePermanent target=new TargetControlledCreaturePermanent();
      List<Permanent> liste=game.getBattlefield().getActivePermanents(new FilterControlledCreaturePermanent(),playerId,game);
      if (!liste.isEmpty()) {
        player.choose(Outcome.ReturnToHand,target,source.getSourceId(),game);
        Permanent permanent=game.getPermanent(target.getFirstTarget());
        if (permanent != null) {
          permanent.moveToZone(Zone.HAND,source.getSourceId(),game,false);
        }
      }
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  game.informPlayers(""String_Node_Str"");
  for (  UUID playerId : game.getState().getPlayersInRange(source.getControllerId(),game)) {
    Player player=game.getPlayer(playerId);
    if (player != null) {
      FilterControlledCreaturePermanent filter=new FilterControlledCreaturePermanent();
      TargetControlledCreaturePermanent target=new TargetControlledCreaturePermanent(1,1,filter,true);
      List<Permanent> liste=game.getBattlefield().getActivePermanents(filter,playerId,game);
      if (!liste.isEmpty()) {
        player.choose(Outcome.ReturnToHand,target,source.getSourceId(),game);
        Permanent permanent=game.getPermanent(target.getFirstTarget());
        if (permanent != null) {
          permanent.moveToZone(Zone.HAND,source.getSourceId(),game,false);
        }
      }
    }
  }
  return true;
}",0.9122182680901542
157859,"@Override public boolean apply(Game game,Ability source){
  for (  UUID targetId : getTargetPointer().getTargets(game,source)) {
    ContinuousEffect effect=new GainControlTargetEffect(Duration.EndOfGame);
    effect.setTargetPointer(new FixedTarget(targetId));
    game.addEffect(effect,source);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  for (  Target target : source.getTargets()) {
    if (target.getFirstTarget() != null) {
      ContinuousEffect effect=new GainControlTargetEffect(Duration.EndOfGame);
      effect.setTargetPointer(new FixedTarget(target.getFirstTarget()));
      game.addEffect(effect,source);
    }
  }
  return true;
}",0.3083700440528634
157860,"@Override public void adjustTargets(Ability ability,Game game){
  if (ability instanceof SpellAbility) {
    ability.getTargets().clear();
    ability.addTarget(new BlatantThieveryTarget(game.getOpponents(ability.getControllerId()).size()));
  }
}","@Override public void adjustTargets(Ability ability,Game game){
  if (ability instanceof SpellAbility) {
    ability.getTargets().clear();
    for (    UUID opponentId : game.getOpponents(ability.getControllerId())) {
      Player opponent=game.getPlayer(opponentId);
      if (opponent != null) {
        FilterPermanent filter=new FilterPermanent(""String_Node_Str"" + opponent.getName());
        filter.add(new ControllerIdPredicate(opponentId));
        TargetPermanent targetPermanent=new TargetPermanent(filter);
        ability.addTarget(targetPermanent);
      }
    }
  }
}",0.4082125603864734
157861,"@Override public BlatantThieveryTarget copy(){
  return new BlatantThieveryTarget(this);
}","@Override public BlatantThieveryEffect copy(){
  return new BlatantThieveryEffect(this);
}",0.9111111111111112
157862,"@Override public void adjustTargets(Ability ability,Game game){
  if (ability instanceof SpellAbility) {
    for (    UUID opponentId : game.getOpponents(ability.getControllerId())) {
      Player opponent=game.getPlayer(opponentId);
      if (opponent != null) {
        ability.getTargets().clear();
        FilterCreaturePermanent filter=new FilterCreaturePermanent(""String_Node_Str"" + opponent.getName());
        filter.add(new ControllerIdPredicate(opponentId));
        TargetCreaturePermanent target=new TargetCreaturePermanent(0,1,filter,false);
        ability.addTarget(target);
      }
    }
  }
}","@Override public void adjustTargets(Ability ability,Game game){
  if (ability instanceof SpellAbility) {
    ability.getTargets().clear();
    for (    UUID opponentId : game.getOpponents(ability.getControllerId())) {
      Player opponent=game.getPlayer(opponentId);
      if (opponent != null) {
        FilterCreaturePermanent filter=new FilterCreaturePermanent(""String_Node_Str"" + opponent.getName());
        filter.add(new ControllerIdPredicate(opponentId));
        TargetCreaturePermanent target=new TargetCreaturePermanent(0,1,filter,false);
        ability.addTarget(target);
      }
    }
  }
}",0.940691927512356
157863,"/** 
 * Returns an opponent by random
 * @param abilityControllerId
 * @param game
 * @return
 */
private UUID getRandomOpponent(UUID abilityControllerId,Game game){
  UUID randomOpponentId=null;
  Set<UUID> opponents=game.getOpponents(abilityControllerId);
  if (opponents.size() > 1) {
    int rand=RandomUtil.nextInt(opponents.size());
    int count=0;
    for (    UUID currentId : opponents) {
      if (count == rand) {
        randomOpponentId=currentId;
        break;
      }
    }
  }
  return randomOpponentId;
}","/** 
 * Returns an opponent by random
 * @param abilityControllerId
 * @param game
 * @return
 */
private UUID getRandomOpponent(UUID abilityControllerId,Game game){
  UUID randomOpponentId=null;
  Set<UUID> opponents=game.getOpponents(abilityControllerId);
  if (opponents.size() > 1) {
    int rand=RandomUtil.nextInt(opponents.size());
    int count=0;
    for (    UUID currentId : opponents) {
      if (count == rand) {
        randomOpponentId=currentId;
        break;
      }
    }
  }
 else   if (opponents.size() == 1) {
    randomOpponentId=game.getOpponents(abilityControllerId).iterator().next();
  }
  return randomOpponentId;
}",0.8816466552315609
157864,"/** 
 * Returns an opponent by random
 * @param abilityControllerId
 * @param game
 * @return
 */
private UUID getRandomOpponent(UUID abilityControllerId,Game game){
  UUID randomOpponentId=game.getOpponents(abilityControllerId).iterator().next();
  Set<UUID> opponents=game.getOpponents(abilityControllerId);
  if (opponents.size() > 1) {
    int rand=RandomUtil.nextInt(opponents.size());
    int count=0;
    for (    UUID currentId : opponents) {
      if (count == rand) {
        randomOpponentId=currentId;
        break;
      }
    }
  }
  return randomOpponentId;
}","/** 
 * Returns an opponent by random
 * @param abilityControllerId
 * @param game
 * @return
 */
private UUID getRandomOpponent(UUID abilityControllerId,Game game){
  UUID randomOpponentId=null;
  Set<UUID> opponents=game.getOpponents(abilityControllerId);
  if (opponents.size() > 1) {
    int rand=RandomUtil.nextInt(opponents.size());
    int count=0;
    for (    UUID currentId : opponents) {
      if (count == rand) {
        randomOpponentId=currentId;
        break;
      }
    }
  }
  return randomOpponentId;
}",0.482695810564663
157865,"@Override public Iterator<DownloadJob> iterator(){
  Calendar c=Calendar.getInstance();
  c.setTime(new Date());
  c.add(Calendar.DATE,DAYS_BEFORE_RELEASE_TO_DOWNLOAD);
  Date compareDate=c.getTime();
  ArrayList<DownloadJob> jobs=new ArrayList<>();
  boolean canDownload;
  setsToDonwload.clear();
  for (  String symbol : symbolsBasic) {
    ExpansionSet exp=Sets.findSet(symbol);
    canDownload=false;
    if (exp != null && exp.getReleaseDate().before(compareDate)) {
      canDownload=true;
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
    }
    CheckSearchResult(symbol,exp,canDownload,true,true,true,false);
  }
  for (  String symbol : symbolsBasicWithMyth) {
    ExpansionSet exp=Sets.findSet(symbol);
    canDownload=false;
    if (exp != null && exp.getReleaseDate().before(compareDate)) {
      canDownload=true;
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
    }
    CheckSearchResult(symbol,exp,canDownload,true,true,true,true);
  }
  for (  String symbol : symbolsOnlyMyth) {
    ExpansionSet exp=Sets.findSet(symbol);
    canDownload=false;
    if (exp != null && exp.getReleaseDate().before(compareDate)) {
      canDownload=true;
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
    }
    CheckSearchResult(symbol,exp,canDownload,false,false,false,true);
  }
  for (  String symbol : symbolsOnlySpecial) {
    ExpansionSet exp=Sets.findSet(symbol);
    canDownload=false;
    if (exp != null && exp.getReleaseDate().before(compareDate)) {
      canDownload=true;
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
    }
    CheckSearchResult(symbol,exp,canDownload,false,false,false,true);
  }
  AnalyseSearchResult();
  return jobs.iterator();
}","@Override public Iterator<DownloadJob> iterator(){
  Calendar c=Calendar.getInstance();
  c.setTime(new Date());
  c.add(Calendar.DATE,DAYS_BEFORE_RELEASE_TO_DOWNLOAD);
  Date compareDate=c.getTime();
  ArrayList<DownloadJob> jobs=new ArrayList<>();
  boolean canDownload;
  setsToDownload.clear();
  for (  String symbol : symbolsBasic) {
    ExpansionSet exp=Sets.findSet(symbol);
    canDownload=false;
    if (exp != null && exp.getReleaseDate().before(compareDate)) {
      canDownload=true;
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
    }
    CheckSearchResult(symbol,exp,canDownload,true,true,true,false);
  }
  for (  String symbol : symbolsBasicWithMyth) {
    ExpansionSet exp=Sets.findSet(symbol);
    canDownload=false;
    if (exp != null && exp.getReleaseDate().before(compareDate)) {
      canDownload=true;
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
    }
    CheckSearchResult(symbol,exp,canDownload,true,true,true,true);
  }
  for (  String symbol : symbolsOnlyMyth) {
    ExpansionSet exp=Sets.findSet(symbol);
    canDownload=false;
    if (exp != null && exp.getReleaseDate().before(compareDate)) {
      canDownload=true;
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
    }
    CheckSearchResult(symbol,exp,canDownload,false,false,false,true);
  }
  for (  String symbol : symbolsOnlySpecial) {
    ExpansionSet exp=Sets.findSet(symbol);
    canDownload=false;
    if (exp != null && exp.getReleaseDate().before(compareDate)) {
      canDownload=true;
      jobs.add(generateDownloadJob(symbol,""String_Node_Str"",""String_Node_Str""));
    }
    CheckSearchResult(symbol,exp,canDownload,false,false,false,true);
  }
  AnalyseSearchResult();
  return jobs.iterator();
}",0.999092558983666
157866,"private void AnalyseSearchResult(){
  Date startedDate=new Date();
  for (  ExpansionSet set : Sets.getInstance().values()) {
    if (codesToIgnoreCheck.get(set.getCode()) != null) {
      continue;
    }
    CheckResult res=setsToDonwload.get(set.getCode());
    if (res == null) {
      logger.warn(String.format(""String_Node_Str"",set.getCode(),set.getName()));
      continue;
    }
    if (logger.isDebugEnabled()) {
      if ((set.getCardsByRarity(Rarity.COMMON).size() > 0) && !res.haveCommon) {
        logger.error(String.format(""String_Node_Str"",set.getCode(),set.getName()));
      }
      if ((set.getCardsByRarity(Rarity.UNCOMMON).size() > 0) && !res.haveUncommon) {
        logger.error(String.format(""String_Node_Str"",set.getCode(),set.getName()));
      }
      if ((set.getCardsByRarity(Rarity.RARE).size() > 0) && !res.haveRare) {
        logger.error(String.format(""String_Node_Str"",set.getCode(),set.getName()));
      }
      if ((set.getCardsByRarity(Rarity.MYTHIC).size() > 0) && !res.haveMyth) {
        logger.error(String.format(""String_Node_Str"",set.getCode(),set.getName()));
      }
    }
  }
  Date endedDate=new Date();
  long secs=(endedDate.getTime() - startedDate.getTime()) / 1000;
  logger.debug(String.format(""String_Node_Str"",secs));
}","private void AnalyseSearchResult(){
  Date startedDate=new Date();
  for (  ExpansionSet set : Sets.getInstance().values()) {
    if (codesToIgnoreCheck.get(set.getCode()) != null) {
      continue;
    }
    CheckResult res=setsToDownload.get(set.getCode());
    if (res == null) {
      logger.warn(String.format(""String_Node_Str"",set.getCode(),set.getName()));
      continue;
    }
    if (logger.isDebugEnabled()) {
      if ((set.getCardsByRarity(Rarity.COMMON).size() > 0) && !res.haveCommon) {
        logger.error(String.format(""String_Node_Str"",set.getCode(),set.getName()));
      }
      if ((set.getCardsByRarity(Rarity.UNCOMMON).size() > 0) && !res.haveUncommon) {
        logger.error(String.format(""String_Node_Str"",set.getCode(),set.getName()));
      }
      if ((set.getCardsByRarity(Rarity.RARE).size() > 0) && !res.haveRare) {
        logger.error(String.format(""String_Node_Str"",set.getCode(),set.getName()));
      }
      if ((set.getCardsByRarity(Rarity.MYTHIC).size() > 0) && !res.haveMyth) {
        logger.error(String.format(""String_Node_Str"",set.getCode(),set.getName()));
      }
    }
  }
  Date endedDate=new Date();
  long secs=(endedDate.getTime() - startedDate.getTime()) / 1000;
  logger.debug(String.format(""String_Node_Str"",secs));
}",0.9992138364779874
157867,"private void CheckSearchResult(String searchCode,ExpansionSet foundedExp,boolean canDownloadTask,boolean haveCommon,boolean haveUncommon,boolean haveRare,boolean haveMyth){
  CheckResult res=setsToDonwload.get(searchCode);
  if (res != null) {
    logger.error(String.format(""String_Node_Str"",searchCode));
  }
 else {
    res=new CheckResult(searchCode,foundedExp,haveCommon,haveUncommon,haveRare,haveMyth);
    setsToDonwload.put(searchCode,res);
  }
  if (foundedExp == null) {
    logger.error(String.format(""String_Node_Str"",searchCode));
    return;
  }
  if (!canDownloadTask) {
    Calendar c=Calendar.getInstance();
    c.setTime(foundedExp.getReleaseDate());
    c.add(Calendar.DATE,-1 * DAYS_BEFORE_RELEASE_TO_DOWNLOAD);
    logger.warn(String.format(""String_Node_Str"",searchCode,foundedExp.getName(),c.getTime()));
  }
}","private void CheckSearchResult(String searchCode,ExpansionSet foundedExp,boolean canDownloadTask,boolean haveCommon,boolean haveUncommon,boolean haveRare,boolean haveMyth){
  CheckResult res=setsToDownload.get(searchCode);
  if (res != null) {
    logger.error(String.format(""String_Node_Str"",searchCode));
  }
 else {
    res=new CheckResult(searchCode,foundedExp,haveCommon,haveUncommon,haveRare,haveMyth);
    setsToDownload.put(searchCode,res);
  }
  if (foundedExp == null) {
    logger.error(String.format(""String_Node_Str"",searchCode));
    return;
  }
  if (!canDownloadTask) {
    Calendar c=Calendar.getInstance();
    c.setTime(foundedExp.getReleaseDate());
    c.add(Calendar.DATE,-1 * DAYS_BEFORE_RELEASE_TO_DOWNLOAD);
    logger.warn(String.format(""String_Node_Str"",searchCode,foundedExp.getName(),c.getTime()));
  }
}",0.997596153846154
157868,"public static String generateImagePath(CardDownloadData card){
  String useDefault=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_CARD_IMAGES_USE_DEFAULT,""String_Node_Str"");
  String imagesPath=Objects.equals(useDefault,""String_Node_Str"") ? null : PreferencesDialog.getCachedValue(PreferencesDialog.KEY_CARD_IMAGES_PATH,null);
  String imageDir=getImageDir(card,imagesPath);
  String imageName;
  String type=card.getType() != 0 ? ' ' + Integer.toString(card.getType()) : ""String_Node_Str"";
  String name=card.getFileName().isEmpty() ? card.getName().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") : card.getFileName();
  if (card.getUsesVariousArt()) {
    imageName=name + '.' + card.getCollectorId()+ ""String_Node_Str"";
  }
 else {
    imageName=name + type + ""String_Node_Str"";
  }
  if (new TFile(imageDir).exists() && !new TFile(imageDir + TFile.separator + imageName).exists()) {
    for (    String fileName : new TFile(imageDir).list()) {
      if (fileName.toLowerCase().equals(imageName.toLowerCase())) {
        imageName=fileName;
        break;
      }
    }
  }
  return imageDir + TFile.separator + imageName;
}","public static String generateImagePath(CardDownloadData card){
  String useDefault=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_CARD_IMAGES_USE_DEFAULT,""String_Node_Str"");
  String imagesPath=Objects.equals(useDefault,""String_Node_Str"") ? null : PreferencesDialog.getCachedValue(PreferencesDialog.KEY_CARD_IMAGES_PATH,null);
  String imageDir=getImageDir(card,imagesPath);
  String imageName;
  String type=card.getType() != 0 ? ' ' + Integer.toString(card.getType()) : ""String_Node_Str"";
  String name=card.getFileName().isEmpty() ? card.getName().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") : card.getFileName();
  if (card.getUsesVariousArt()) {
    imageName=name + '.' + card.getCollectorId()+ ""String_Node_Str"";
  }
 else {
    imageName=name + type + ""String_Node_Str"";
  }
  if (new TFile(imageDir).exists() && !new TFile(imageDir + TFile.separator + imageName).exists()) {
    for (    String fileName : new TFile(imageDir).list()) {
      if (fileName.toLowerCase().equals(imageName.toLowerCase())) {
        imageName=fileName;
        break;
      }
    }
  }
  return imageDir + TFile.separator + imageName;
}",0.9812578092461476
157869,"protected void calculatePreCombatActions(Game game){
  if (!getNextAction(game)) {
    currentScore=GameStateEvaluator2.evaluate(playerId,game);
    Game sim=createSimulation(game);
    SimulationNode2.resetCount();
    root=new SimulationNode2(null,sim,maxDepth,playerId);
    addActionsTimed();
    logger.trace(""String_Node_Str"" + root.children.size());
    if (!root.children.isEmpty()) {
      root=root.children.get(0);
      boolean doThis=true;
      if (root.abilities.size() == 1) {
        for (        Ability ability : root.abilities) {
          if (ability.getManaCosts().convertedManaCost() == 0 && ability.getCosts().isEmpty()) {
            if (actionCache.contains(ability.getRule() + '_' + ability.getSourceId())) {
              doThis=false;
            }
          }
        }
      }
      if (doThis) {
        actions=new LinkedList<>(root.abilities);
        combat=root.combat;
        for (        Ability ability : actions) {
          actionCache.add(ability.getRule() + '_' + ability.getSourceId());
        }
      }
    }
 else {
      logger.info('[' + game.getPlayer(playerId).getName() + ""String_Node_Str"");
    }
  }
 else {
    logger.debug(""String_Node_Str"");
  }
}","protected void calculatePreCombatActions(Game game){
  if (!getNextAction(game)) {
    currentScore=GameStateEvaluator2.evaluate(playerId,game);
    Game sim=createSimulation(game);
    SimulationNode2.resetCount();
    root=new SimulationNode2(null,sim,maxDepth,playerId);
    addActionsTimed();
    if (root.children != null && !root.children.isEmpty()) {
      logger.trace(""String_Node_Str"" + root.children.size());
      root=root.children.get(0);
      boolean doThis=true;
      if (root.abilities.size() == 1) {
        for (        Ability ability : root.abilities) {
          if (ability.getManaCosts().convertedManaCost() == 0 && ability.getCosts().isEmpty()) {
            if (actionCache.contains(ability.getRule() + '_' + ability.getSourceId())) {
              doThis=false;
            }
          }
        }
      }
      if (doThis) {
        actions=new LinkedList<>(root.abilities);
        combat=root.combat;
        for (        Ability ability : actions) {
          actionCache.add(ability.getRule() + '_' + ability.getSourceId());
        }
      }
    }
 else {
      logger.info('[' + game.getPlayer(playerId).getName() + ""String_Node_Str"");
    }
  }
 else {
    logger.debug(""String_Node_Str"");
  }
}",0.9593762823143208
157870,"protected void waitForResponse(Game game){
  if (isExecutingMacro()) {
    pullResponseFromQueue(game);
    return;
  }
  response.clear();
  logger.debug(""String_Node_Str"" + getId());
  game.resumeTimer(getTurnControlledBy());
  boolean loop=true;
  while (loop) {
    loop=false;
synchronized (response) {
      try {
        response.wait();
      }
 catch (      InterruptedException ex) {
        logger.error(""String_Node_Str"" + getName() + ""String_Node_Str""+ game.getId(),ex);
      }
 finally {
        game.pauseTimer(getTurnControlledBy());
      }
    }
    if (response.getResponseConcedeCheck()) {
      ((GameImpl)game).checkConcede();
      if (game.hasEnded()) {
        return;
      }
      response.clear();
      loop=true;
    }
  }
  if (recordingMacro && !macroTriggeredSelectionFlag) {
    actionQueueSaved.add(new PlayerResponse(response));
  }
}","protected void waitForResponse(Game game){
  if (isExecutingMacro()) {
    pullResponseFromQueue(game);
    return;
  }
  response.clear();
  logger.debug(""String_Node_Str"" + getId());
  game.resumeTimer(getTurnControlledBy());
  boolean loop=true;
  while (loop) {
    loop=false;
synchronized (response) {
      try {
        response.wait();
      }
 catch (      InterruptedException ex) {
        logger.error(""String_Node_Str"" + getName() + ""String_Node_Str""+ game.getId(),ex);
      }
 finally {
        game.pauseTimer(getTurnControlledBy());
      }
    }
    if (response.getResponseConcedeCheck()) {
      ((GameImpl)game).checkConcede();
      if (game.hasEnded()) {
        return;
      }
      response.clear();
      if (isInGame()) {
        loop=true;
      }
    }
  }
  if (recordingMacro && !macroTriggeredSelectionFlag) {
    actionQueueSaved.add(new PlayerResponse(response));
  }
}",0.980855855855856
157871,"@Override public void setConcedingPlayer(UUID playerId){
  Player player=getPlayer(state.getPriorityPlayerId());
  if (player != null) {
    if (!player.hasLeft() && player.isHuman()) {
      if (!concedingPlayers.contains(playerId)) {
        logger.debug(""String_Node_Str"" + playerId + ""String_Node_Str""+ getId());
        concedingPlayers.add(playerId);
        player.signalPlayerConcede();
      }
    }
 else {
      concedingPlayers.add(playerId);
      checkConcede();
    }
  }
 else {
    checkConcede();
    checkIfGameIsOver();
  }
}","@Override public void setConcedingPlayer(UUID playerId){
  Player player=null;
  if (state.getChoosingPlayerId() != null) {
    player=getPlayer(state.getChoosingPlayerId());
  }
 else   if (state.getPriorityPlayerId() != null) {
    player=getPlayer(state.getPriorityPlayerId());
  }
  if (player != null) {
    if (!player.hasLeft() && player.isHuman()) {
      if (!concedingPlayers.contains(playerId)) {
        logger.debug(""String_Node_Str"" + playerId + ""String_Node_Str""+ getId());
        concedingPlayers.add(playerId);
        player.signalPlayerConcede();
      }
    }
 else {
      concedingPlayers.add(playerId);
      checkConcede();
    }
  }
 else {
    checkConcede();
    checkIfGameIsOver();
  }
}",0.8019017432646592
157872,"private int drawSingleRule(Graphics2D g,AttributedString text,TextboxRule rule,int x,int y,int w,int h,boolean doDraw){
  int inset=0;
  if (rule != null && rule.type == TextboxRuleType.LOYALTY) {
    inset=cardWidth / 12;
  }
  int availWidth=w - inset;
  FontRenderContext frc=g.getFontRenderContext();
  AttributedCharacterIterator textIter=text.getIterator();
  LineBreakMeasurer measure=new LineBreakMeasurer(textIter,frc);
  float yPos=y;
  float remain=h;
  AttributedCharacterIterator newLineCheck=text.getIterator();
  while (measure.getPosition() < textIter.getEndIndex()) {
    newLineCheck.setIndex(measure.getPosition());
    char ch;
    while ((ch=newLineCheck.next()) != CharacterIterator.DONE) {
      if (ch == '\n') {
        break;
      }
    }
    TextLayout layout=measure.nextLayout(availWidth,newLineCheck.getIndex(),false);
    float ascent=layout.getAscent();
    yPos+=ascent;
    remain-=ascent;
    if (remain < 0) {
      break;
    }
    if (doDraw) {
      g.setColor(Color.black);
      layout.draw(g,x + inset,yPos);
    }
    yPos+=layout.getDescent() + layout.getLeading() - 2;
  }
  int advance=((int)Math.ceil(yPos)) - y;
  if (rule != null && rule.type == TextboxRuleType.LOYALTY) {
    TextboxLoyaltyRule loyaltyRule=(TextboxLoyaltyRule)rule;
    Polygon symbol;
    int symbolWidth=(x + inset) - borderWidth - 4;
    int symbolHeight=(int)(0.7f * symbolWidth);
    if (symbolHeight > advance) {
      advance=symbolHeight;
    }
    int symbolX=x - borderWidth;
    int symbolY=y + (advance - symbolHeight) / 2;
    if (doDraw) {
      if (loyaltyRule.loyaltyChange < 0 || loyaltyRule.loyaltyChange == TextboxLoyaltyRule.MINUS_X) {
        symbol=new Polygon(new int[]{symbolX,symbolX + symbolWidth,symbolX + symbolWidth,symbolX + symbolWidth / 2,symbolX},new int[]{symbolY,symbolY,symbolY + symbolHeight - 3,symbolY + symbolHeight + 3,symbolY + symbolHeight - 3},5);
      }
 else       if (loyaltyRule.loyaltyChange > 0) {
        symbol=new Polygon(new int[]{symbolX,symbolX + symbolWidth / 2,symbolX + symbolWidth,symbolX + symbolWidth,symbolX},new int[]{symbolY + 3,symbolY - 3,symbolY + 3,symbolY + symbolHeight,symbolY + symbolHeight},5);
      }
 else {
        symbol=new Polygon(new int[]{symbolX,symbolX + symbolWidth,symbolX + symbolWidth,symbolX},new int[]{symbolY,symbolY,symbolY + symbolHeight,symbolY + symbolHeight},4);
      }
      g.setColor(new Color(0,0,0,128));
      g.fillRect(x + 2,y + advance + 1,w - 2,1);
      g.setColor(Color.black);
      g.fillPolygon(symbol);
      g.setColor(new Color(200,200,200));
      g.setStroke(new BasicStroke(2));
      g.drawPolygon(symbol);
      g.setStroke(new BasicStroke(1));
      g.setColor(Color.white);
      g.setFont(boxTextFont);
      String loyaltyString=loyaltyRule.getChangeString();
      int textWidth=g.getFontMetrics().stringWidth(loyaltyString);
      g.drawString(loyaltyString,symbolX + (symbolWidth - textWidth) / 2,symbolY + symbolHeight - (symbolHeight - boxTextHeight) / 2);
      advance+=3;
      loyaltyAbilityColorToggle=!loyaltyAbilityColorToggle;
    }
  }
  return advance;
}","private int drawSingleRule(Graphics2D g,AttributedString text,TextboxRule rule,int x,int y,int w,int h,boolean doDraw){
  int inset=0;
  if (rule != null && rule.type == TextboxRuleType.LOYALTY) {
    inset=cardWidth / 12;
  }
  int availWidth=w - inset;
  if (availWidth < 0) {
    return 0;
  }
  FontRenderContext frc=g.getFontRenderContext();
  AttributedCharacterIterator textIter=text.getIterator();
  LineBreakMeasurer measure=new LineBreakMeasurer(textIter,frc);
  float yPos=y;
  float remain=h;
  AttributedCharacterIterator newLineCheck=text.getIterator();
  while (measure.getPosition() < textIter.getEndIndex()) {
    newLineCheck.setIndex(measure.getPosition());
    char ch;
    while ((ch=newLineCheck.next()) != CharacterIterator.DONE) {
      if (ch == '\n') {
        break;
      }
    }
    TextLayout layout=measure.nextLayout(availWidth,newLineCheck.getIndex(),false);
    float ascent=layout.getAscent();
    yPos+=ascent;
    remain-=ascent;
    if (remain < 0) {
      break;
    }
    if (doDraw) {
      g.setColor(Color.black);
      layout.draw(g,x + inset,yPos);
    }
    yPos+=layout.getDescent() + layout.getLeading() - 2;
  }
  int advance=((int)Math.ceil(yPos)) - y;
  if (rule != null && rule.type == TextboxRuleType.LOYALTY) {
    TextboxLoyaltyRule loyaltyRule=(TextboxLoyaltyRule)rule;
    Polygon symbol;
    int symbolWidth=(x + inset) - borderWidth - 4;
    int symbolHeight=(int)(0.7f * symbolWidth);
    if (symbolHeight > advance) {
      advance=symbolHeight;
    }
    int symbolX=x - borderWidth;
    int symbolY=y + (advance - symbolHeight) / 2;
    if (doDraw) {
      if (loyaltyRule.loyaltyChange < 0 || loyaltyRule.loyaltyChange == TextboxLoyaltyRule.MINUS_X) {
        symbol=new Polygon(new int[]{symbolX,symbolX + symbolWidth,symbolX + symbolWidth,symbolX + symbolWidth / 2,symbolX},new int[]{symbolY,symbolY,symbolY + symbolHeight - 3,symbolY + symbolHeight + 3,symbolY + symbolHeight - 3},5);
      }
 else       if (loyaltyRule.loyaltyChange > 0) {
        symbol=new Polygon(new int[]{symbolX,symbolX + symbolWidth / 2,symbolX + symbolWidth,symbolX + symbolWidth,symbolX},new int[]{symbolY + 3,symbolY - 3,symbolY + 3,symbolY + symbolHeight,symbolY + symbolHeight},5);
      }
 else {
        symbol=new Polygon(new int[]{symbolX,symbolX + symbolWidth,symbolX + symbolWidth,symbolX},new int[]{symbolY,symbolY,symbolY + symbolHeight,symbolY + symbolHeight},4);
      }
      g.setColor(new Color(0,0,0,128));
      g.fillRect(x + 2,y + advance + 1,w - 2,1);
      g.setColor(Color.black);
      g.fillPolygon(symbol);
      g.setColor(new Color(200,200,200));
      g.setStroke(new BasicStroke(2));
      g.drawPolygon(symbol);
      g.setStroke(new BasicStroke(1));
      g.setColor(Color.white);
      g.setFont(boxTextFont);
      String loyaltyString=loyaltyRule.getChangeString();
      int textWidth=g.getFontMetrics().stringWidth(loyaltyString);
      g.drawString(loyaltyString,symbolX + (symbolWidth - textWidth) / 2,symbolY + symbolHeight - (symbolHeight - boxTextHeight) / 2);
      advance+=3;
      loyaltyAbilityColorToggle=!loyaltyAbilityColorToggle;
    }
  }
  return advance;
}",0.9932992980216976
157873,"@Override public boolean canActivate(UUID playerId,Game game){
  if (playerId == caster) {
    return super.canActivate(playerId,game);
  }
  return false;
}","@Override public boolean canActivate(UUID playerId,Game game){
  if (playerId == caster) {
    Permanent permanent=game.getBattlefield().getPermanent(this.getSourceId());
    if (permanent != null) {
      if (filter.match(permanent,permanent.getId(),permanent.getControllerId(),game)) {
        return super.canActivate(playerId,game);
      }
    }
  }
  return false;
}",0.5671077504725898
157874,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getTargetId().equals(getTargetPointer().getFirst(game,source))) {
    if (event.getTargetId() != null && source.getSourceId() != null) {
      TargetCreatureOrPlayer target=new TargetCreatureOrPlayer();
      target.add(source.getSourceId(),game);
      redirectTarget=target;
      return true;
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  Permanent permanent=game.getBattlefield().getPermanent(source.getSourceId());
  if (permanent != null) {
    if (filter.match(permanent,permanent.getId(),permanent.getControllerId(),game)) {
      if (event.getTargetId().equals(getTargetPointer().getFirst(game,source))) {
        if (event.getTargetId() != null) {
          TargetCreatureOrPlayer target=new TargetCreatureOrPlayer();
          target.add(source.getSourceId(),game);
          redirectTarget=target;
          return true;
        }
      }
    }
  }
  return false;
}",0.5834146341463414
157875,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (sourceObject.equals(new MageObjectReference(event.getSourceId(),game))) {
    redirectTarget=new TargetPermanent();
    redirectTarget.add(source.getSourceId(),game);
    return event.getTargetId().equals(getTargetPointer().getFirst(game,source));
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  Permanent permanent=game.getBattlefield().getPermanent(source.getSourceId());
  if (permanent != null) {
    if (filter.match(permanent,permanent.getId(),permanent.getControllerId(),game)) {
      if (sourceObject.equals(new MageObjectReference(event.getSourceId(),game))) {
        redirectTarget=new TargetPermanent();
        redirectTarget.add(source.getSourceId(),game);
        return event.getTargetId().equals(getTargetPointer().getFirst(game,source));
      }
    }
  }
  return false;
}",0.7589189189189189
157876,"@Override public void setConcedingPlayer(UUID playerId){
  Player player=getPlayer(state.getPriorityPlayerId());
  if (player != null) {
    if (!player.hasLeft() && player.isHuman()) {
      if (!concedingPlayers.contains(playerId)) {
        logger.debug(""String_Node_Str"" + playerId + ""String_Node_Str""+ getId());
        concedingPlayers.add(playerId);
        player.signalPlayerConcede();
      }
    }
 else {
      checkConcede();
    }
  }
 else {
    checkConcede();
    checkIfGameIsOver();
  }
}","@Override public void setConcedingPlayer(UUID playerId){
  Player player=getPlayer(state.getPriorityPlayerId());
  if (player != null) {
    if (!player.hasLeft() && player.isHuman()) {
      if (!concedingPlayers.contains(playerId)) {
        logger.debug(""String_Node_Str"" + playerId + ""String_Node_Str""+ getId());
        concedingPlayers.add(playerId);
        player.signalPlayerConcede();
      }
    }
 else {
      concedingPlayers.add(playerId);
      checkConcede();
    }
  }
 else {
    checkConcede();
    checkIfGameIsOver();
  }
}",0.9638783269961976
157877,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  if (event.getTargetId().equals(getTargetPointer().getFirst(game,source))) {
    TargetPermanent target=new TargetPermanent();
    target.add(source.getSourceId(),game);
    redirectTarget=target;
    return true;
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  Permanent permanent=game.getBattlefield().getPermanent(source.getSourceId());
  if (permanent != null) {
    if (filter.match(permanent,permanent.getId(),permanent.getControllerId(),game)) {
      if (event.getTargetId().equals(getTargetPointer().getFirst(game,source))) {
        if (event.getTargetId() != null) {
          TargetPermanent target=new TargetPermanent();
          target.add(source.getSourceId(),game);
          redirectTarget=target;
          return true;
        }
      }
    }
  }
  return false;
}",0.6820175438596491
157878,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  ChooseBlockersRedundancyWatcher watcher=(ChooseBlockersRedundancyWatcher)game.getState().getWatchers().get(ChooseBlockersRedundancyWatcher.class.getSimpleName());
  watcher.decrement();
  if (watcher.copyCountApply > 0) {
    game.informPlayers(source.getSourceObject(game).getIdName() + ""String_Node_Str"");
    return false;
  }
  watcher.copyCount--;
  watcher.copyCountApply=watcher.copyCount;
  Player blockController=game.getPlayer(source.getControllerId());
  if (blockController != null) {
    game.getCombat().selectBlockers(blockController,game);
    return true;
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  ChooseBlockersRedundancyWatcher watcher=(ChooseBlockersRedundancyWatcher)game.getState().getWatchers().get(ChooseBlockersRedundancyWatcher.class.getSimpleName());
  watcher.decrement();
  watcher.copyCount--;
  if (watcher.copyCountApply > 0) {
    game.informPlayers(source.getSourceObject(game).getIdName() + ""String_Node_Str"");
    this.discard();
    return false;
  }
  watcher.copyCountApply=watcher.copyCount;
  Player blockController=game.getPlayer(source.getControllerId());
  if (blockController != null) {
    game.getCombat().selectBlockers(blockController,game);
    return true;
  }
  this.discard();
  return false;
}",0.9392185238784372
157879,"@Override public boolean apply(MageObject input,Game game){
  boolean isFaceDown=false;
  Abilities<Ability> abilities;
  if (input instanceof Card) {
    abilities=((Card)input).getAbilities(game);
    isFaceDown=((Card)input).isFaceDown(game);
  }
 else {
    abilities=input.getAbilities();
  }
  if (isFaceDown) {
    for (    Ability ability : abilities) {
      if (!ability.getSourceId().equals(input.getId())) {
        if (ability.getClass().equals(JohanVigilanceAbility.class)) {
          return false;
        }
      }
    }
    return true;
  }
  for (  Ability ability : abilities) {
    if (!Objects.equals(ability.getClass(),SpellAbility.class)) {
      if (!ability.getClass().equals(JohanVigilanceAbility.class)) {
        return false;
      }
    }
  }
  return true;
}","@Override public boolean apply(MageObject input,Game game){
  boolean isFaceDown=false;
  Abilities<Ability> abilities;
  if (input instanceof Card) {
    abilities=((Card)input).getAbilities(game);
    isFaceDown=((Card)input).isFaceDown(game);
  }
 else {
    abilities=input.getAbilities();
  }
  if (isFaceDown) {
    for (    Ability ability : abilities) {
      if (!ability.getSourceId().equals(input.getId()) && !ability.getClass().equals(JohanVigilanceAbility.class)) {
        return false;
      }
    }
    return true;
  }
  for (  Ability ability : abilities) {
    if (!Objects.equals(ability.getClass(),SpellAbility.class) && !ability.getClass().equals(JohanVigilanceAbility.class)) {
      return false;
    }
  }
  return true;
}",0.7664281067013663
157880,"@Override public boolean applies(Permanent permanent,Ability source,Game game){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    return permanent.getPower().getValue() > controller.getHand().size();
  }
  return false;
}","@Override public boolean applies(Permanent permanent,Ability source,Game game){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  return controller.getInRange().contains(permanent.getControllerId()) && permanent.getPower().getValue() > controller.getHand().size();
}",0.8201680672268907
157881,"@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent permanent=game.getPermanent(event.getSourceId());
  if (permanent == null) {
    permanent=(Permanent)game.getLastKnownInformation(event.getSourceId(),Zone.BATTLEFIELD);
  }
  if (permanent != null && permanent.isLand() && !permanent.getControllerId().equals(game.getActivePlayerId())) {
    getEffects().get(0).setTargetPointer(new FixedTarget(permanent.getId()));
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent permanent=game.getPermanentOrLKIBattlefield(event.getSourceId());
  if (permanent == null) {
    return false;
  }
  Player player=game.getPlayer(controllerId);
  if (player == null) {
    return false;
  }
  if (permanent.isLand() && player.getInRange().contains(permanent.getControllerId()) && !permanent.getControllerId().equals(game.getActivePlayerId())) {
    getEffects().get(0).setTargetPointer(new FixedTarget(permanent.getId()));
    return true;
  }
  return false;
}",0.682738669238187
157882,"@Override public boolean hasOpponent(UUID playerToCheckId,Game game){
  return !this.getId().equals(playerToCheckId) && game.isOpponent(this,playerToCheckId);
}","@Override public boolean hasOpponent(UUID playerToCheckId,Game game){
  return !this.getId().equals(playerToCheckId) && game.isOpponent(this,playerToCheckId) && getInRange().contains(playerToCheckId);
}",0.8839779005524862
157883,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  return event.getPlayerId().equals(source.getControllerId());
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  Player blockController=game.getPlayer(source.getControllerId());
  if (blockController != null) {
    return true;
  }
  return false;
}",0.5932203389830508
157884,"@Override public boolean apply(Card input,Game game){
  if (text.isEmpty()) {
    return true;
  }
  if (inNames && input.getName().toLowerCase().contains(text.toLowerCase())) {
    return true;
  }
  String[] tokens=text.toLowerCase().split(""String_Node_Str"");
  boolean found=false;
  for (  String token : tokens) {
    if (!token.isEmpty()) {
      if (inRules) {
        if (input.isSplitCard()) {
          found=((SplitCard)input).getLeftHalfCard().getRules(game).stream().anyMatch(rule -> rule.toLowerCase().contains(token.toLowerCase()));
          found|=((SplitCard)input).getRightHalfCard().getRules(game).stream().anyMatch(rule -> rule.toLowerCase().contains(token.toLowerCase()));
        }
 else {
          found=input.getRules(game).stream().anyMatch(rule -> rule.toLowerCase().contains(token.toLowerCase()));
        }
      }
      if (inTypes) {
        found|=input.getSubtype(game).stream().anyMatch(s -> s.toString().equalsIgnoreCase(token));
        found|=input.getSuperType().stream().anyMatch(s -> s.toString().equalsIgnoreCase(token));
      }
    }
    if (found) {
      break;
    }
  }
  return found;
}","@Override public boolean apply(Card input,Game game){
  if (text.isEmpty()) {
    return true;
  }
  if (inNames && input.getName().toLowerCase().contains(text.toLowerCase())) {
    return true;
  }
  String[] tokens=text.toLowerCase().split(""String_Node_Str"");
  for (  String token : tokens) {
    boolean found=false;
    if (!token.isEmpty()) {
      if (inRules) {
        if (input.isSplitCard()) {
          for (          String rule : ((SplitCard)input).getLeftHalfCard().getRules(game)) {
            if (rule.toLowerCase().contains(token)) {
              found=true;
              break;
            }
          }
          for (          String rule : ((SplitCard)input).getRightHalfCard().getRules(game)) {
            if (rule.toLowerCase().contains(token)) {
              found=true;
              break;
            }
          }
        }
        for (        String rule : input.getRules(game)) {
          if (rule.toLowerCase().contains(token)) {
            found=true;
            break;
          }
        }
      }
      if (inTypes) {
        for (        SubType subType : input.getSubtype(game)) {
          if (subType.toString().equalsIgnoreCase(token)) {
            found=true;
            break;
          }
        }
        for (        SuperType superType : input.getSuperType()) {
          if (superType.toString().equalsIgnoreCase(token)) {
            found=true;
            break;
          }
        }
      }
    }
    if (!found) {
      return false;
    }
  }
  return true;
}",0.4526315789473684
157885,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (controller != null && sourceObject != null) {
    Cards topCards=new CardsImpl();
    topCards.addAll(controller.getLibrary().getTopCards(game,10));
    controller.lookAtCards(sourceObject.getIdName(),topCards,game);
    TargetCard targetCreatures=new TargetCard(0,2,Zone.LIBRARY,new FilterCreatureCard());
    controller.choose(outcome,topCards,targetCreatures,game);
    Cards exiledCards=new CardsImpl(targetCreatures.getTargets());
    if (!exiledCards.isEmpty()) {
      controller.moveCards(exiledCards,Zone.EXILED,source,game);
      controller.shuffleLibrary(source,game);
      Player opponent=game.getPlayer(getTargetPointer().getFirst(game,source));
      if (opponent != null) {
        TargetCard targetOpponentCreature=new TargetCard(0,1,Zone.EXILED,new FilterCreatureCard());
        if (opponent.choose(outcome,exiledCards,targetOpponentCreature,game)) {
          Card card=game.getCard(targetOpponentCreature.getFirstTarget());
          if (card != null) {
            opponent.moveCards(card,Zone.BATTLEFIELD,source,game);
            exiledCards.remove(card);
          }
        }
        if (!exiledCards.isEmpty()) {
          controller.moveCards(exiledCards,Zone.BATTLEFIELD,source,game);
        }
      }
    }
 else {
      controller.shuffleLibrary(source,game);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  if (cards != null && player != null) {
    return player.moveCards(cards,Zone.BATTLEFIELD,source,game);
  }
  return false;
}",0.2077464788732394
157886,"@Override public DubiousChallengeEffect copy(){
  return new DubiousChallengeEffect(this);
}","@Override public DubiousChallengeMoveToBattlefieldEffect copy(){
  return new DubiousChallengeMoveToBattlefieldEffect(this);
}",0.8440366972477065
157887,"@Override public boolean apply(ObjectSourcePlayer<Player> input,Game game){
  Player targetPlayer=input.getObject();
  if (targetPlayer == null) {
    return false;
  }
  HopeOfGhirapurCombatDamageWatcher watcher=(HopeOfGhirapurCombatDamageWatcher)game.getState().getWatchers().get(HopeOfGhirapurCombatDamageWatcher.class.getSimpleName());
  if (watcher != null) {
    return watcher.playerGotCombatDamage(input.getSourceId(),input.getObject().getId());
  }
  return false;
}","@Override public boolean apply(ObjectSourcePlayer<Player> input,Game game){
  Player targetPlayer=input.getObject();
  if (targetPlayer == null) {
    return false;
  }
  HopeOfGhirapurCombatDamageWatcher watcher=(HopeOfGhirapurCombatDamageWatcher)game.getState().getWatchers().get(HopeOfGhirapurCombatDamageWatcher.class.getSimpleName());
  if (watcher != null) {
    return watcher.playerGotCombatDamage(input.getSourceId(),input.getObject().getId(),game);
  }
  return false;
}",0.9947643979057592
157888,"@Override public void watch(GameEvent event,Game game){
  if (event.getType() == EventType.DAMAGED_PLAYER && ((DamagedPlayerEvent)event).isCombatDamage()) {
    UUID damagerId=event.getSourceId();
    Set<UUID> players;
    if (combatDamagedPlayers.containsKey(damagerId)) {
      players=combatDamagedPlayers.get(damagerId);
    }
 else {
      players=new HashSet<>();
      combatDamagedPlayers.put(damagerId,players);
    }
    players.add(event.getTargetId());
  }
}","@Override public void watch(GameEvent event,Game game){
  if (event.getType() == EventType.DAMAGED_PLAYER && ((DamagedPlayerEvent)event).isCombatDamage()) {
    MageObjectReference damager=new MageObjectReference(event.getSourceId(),game);
    Set<UUID> players;
    if (combatDamagedPlayers.containsKey(damager)) {
      players=combatDamagedPlayers.get(damager);
    }
 else {
      players=new HashSet<>();
      combatDamagedPlayers.put(damager,players);
    }
    players.add(event.getTargetId());
  }
}",0.7824310520939735
157889,"/** 
 * Checks if the current object has damaged the player during the current turn.
 * @param objectId
 * @param playerId
 * @return
 */
public boolean playerGotCombatDamage(UUID objectId,UUID playerId){
  if (combatDamagedPlayers.containsKey(objectId)) {
    return combatDamagedPlayers.get(objectId).contains(playerId);
  }
  return false;
}","/** 
 * Checks if the current object has damaged the player during the current turn.
 * @param objectId
 * @param playerId
 * @return
 */
public boolean playerGotCombatDamage(UUID objectId,UUID playerId,Game game){
  StackObject stackObject=game.getState().getStack().getStackObject(objectId);
  MageObjectReference mor;
  if (stackObject != null && stackObject instanceof StackAbility) {
    mor=new MageObjectReference(objectId,((StackAbility)stackObject).getSourceObjectZoneChangeCounter(),game);
  }
 else {
    mor=new MageObjectReference(objectId,game);
  }
  if (combatDamagedPlayers.containsKey(mor)) {
    return combatDamagedPlayers.get(mor).contains(playerId);
  }
  return false;
}",0.6325940212150434
157890,"public HopeOfGhirapurCombatDamageWatcher(final HopeOfGhirapurCombatDamageWatcher watcher){
  super(watcher);
  for (  UUID damagerId : watcher.combatDamagedPlayers.keySet()) {
    Set<UUID> players=new HashSet<>();
    players.addAll(watcher.combatDamagedPlayers.get(damagerId));
    this.combatDamagedPlayers.put(damagerId,players);
  }
}","public HopeOfGhirapurCombatDamageWatcher(final HopeOfGhirapurCombatDamageWatcher watcher){
  super(watcher);
  for (  MageObjectReference damager : watcher.combatDamagedPlayers.keySet()) {
    Set<UUID> players=new HashSet<>();
    players.addAll(watcher.combatDamagedPlayers.get(damager));
    this.combatDamagedPlayers.put(damager,players);
  }
}",0.9344978165938864
157891,"@Override public String getInfoMessage(Ability source,GameEvent event,Game game){
  MageObject mageObject=game.getObject(source.getSourceId());
  if (mageObject != null) {
    return ""String_Node_Str"" + mageObject.getLogName() + ')';
  }
  return null;
}","@Override public String getInfoMessage(Ability source,GameEvent event,Game game){
  MageObject mageObject=source.getSourceObject(game);
  if (mageObject != null) {
    return ""String_Node_Str"" + mageObject.getLogName() + ')';
  }
  return null;
}",0.896
157892,"@Test public void testWhenHopeOfGhirapurWasRemovedAndReturnedBack(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",1);
  addCard(Zone.HAND,playerB,""String_Node_Str"");
  attack(1,playerA,""String_Node_Str"");
  castSpell(1,PhaseStep.END_COMBAT,playerA,""String_Node_Str"",""String_Node_Str"");
  activateAbility(1,PhaseStep.POSTCOMBAT_MAIN,playerA,""String_Node_Str"",playerB);
  castSpell(2,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"",playerA);
  setStopAt(2,PhaseStep.BEGIN_COMBAT);
  execute();
  assertLife(playerA,18);
  assertLife(playerB,19);
  assertPermanentCount(playerA,""String_Node_Str"",1);
}","@Test public void testWhenHopeOfGhirapurWasRemovedAndReturnedBack(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.HAND,playerA,""String_Node_Str"");
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",1);
  addCard(Zone.HAND,playerB,""String_Node_Str"");
  attack(1,playerA,""String_Node_Str"");
  castSpell(1,PhaseStep.POSTCOMBAT_MAIN,playerA,""String_Node_Str"",""String_Node_Str"");
  activateAbility(1,PhaseStep.END_TURN,playerA,""String_Node_Str"",playerB);
  castSpell(2,PhaseStep.PRECOMBAT_MAIN,playerB,""String_Node_Str"",playerA);
  setStopAt(2,PhaseStep.BEGIN_COMBAT);
  execute();
  assertLife(playerA,18);
  assertLife(playerB,19);
  assertPermanentCount(playerA,""String_Node_Str"",1);
}",0.8333333333333334
157893,"@Override public int getSourceObjectZoneChangeCounter(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public int getSourceObjectZoneChangeCounter(){
  return ability.getSourceObjectZoneChangeCounter();
}",0.6406926406926406
157894,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getPlayerId().equals(this.getControllerId())) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    if (spell != null && spell.getFromZone() == Zone.HAND) {
      if (spell.getCard() != null) {
        for (        Effect effect : getEffects()) {
          effect.setTargetPointer(new FixedTarget(spell.getId(),spell.getZoneChangeCounter(game)));
        }
        return true;
      }
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getPlayerId().equals(this.getControllerId())) {
    Spell spell=game.getStack().getSpell(event.getTargetId());
    if (spell != null && spell.getFromZone() == Zone.HAND) {
      if (spell.getCard() != null) {
        for (        Effect effect : getEffects()) {
          effect.setTargetPointer(new FixedTarget(spell.getId()));
        }
        return true;
      }
    }
  }
  return false;
}",0.9662921348314608
157895,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller == null || sourceObject == null) {
    return false;
  }
  Cards cards=new CardsImpl();
  int xValue=game.getLastKnownInformation(this.getTargetPointer().getFirst(game,source),Zone.STACK).getConvertedManaCost();
  cards.addAll(controller.getLibrary().getTopCards(game,xValue));
  if (!cards.isEmpty()) {
    controller.revealCards(sourceObject.getIdName(),cards,game);
    FilterCard filter=new FilterNonlandCard(""String_Node_Str"" + xValue + ""String_Node_Str"");
    filter.add(new ConvertedManaCostPredicate(ComparisonType.FEWER_THAN,xValue + 1));
    TargetCard target=new TargetCard(1,Zone.LIBRARY,filter);
    if (controller.chooseTarget(Outcome.PlayForFree,cards,target,source,game)) {
      Card card=cards.get(target.getFirstTarget(),game);
      if (card != null) {
        if (controller.chooseUse(outcome,""String_Node_Str"" + card.getName(),source,game)) {
          controller.cast(card.getSpellAbility(),game,true);
          cards.remove(card);
        }
      }
    }
  }
  while (!cards.isEmpty()) {
    Card card=cards.getRandom(game);
    if (card != null) {
      cards.remove(card);
      card.moveToZone(Zone.LIBRARY,source.getSourceId(),game,false);
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller == null || sourceObject == null) {
    return false;
  }
  Spell spell=game.getStack().getSpell(this.getTargetPointer().getFirst(game,source));
  int xValue=0;
  if (spell == null) {
    spell=(Spell)game.getLastKnownInformation(this.getTargetPointer().getFirst(game,source),Zone.STACK);
  }
  if (spell == null) {
    return false;
  }
  xValue=spell.getConvertedManaCost();
  Cards cards=new CardsImpl();
  cards.addAll(controller.getLibrary().getTopCards(game,xValue));
  if (!cards.isEmpty()) {
    controller.revealCards(sourceObject.getIdName(),cards,game);
    FilterCard filter=new FilterNonlandCard(""String_Node_Str"" + xValue + ""String_Node_Str"");
    filter.add(new ConvertedManaCostPredicate(ComparisonType.FEWER_THAN,xValue + 1));
    TargetCard target=new TargetCard(1,Zone.LIBRARY,filter);
    if (controller.chooseTarget(Outcome.PlayForFree,cards,target,source,game)) {
      Card card=cards.get(target.getFirstTarget(),game);
      if (card != null) {
        if (controller.chooseUse(outcome,""String_Node_Str"" + card.getLogName() + ""String_Node_Str"",source,game)) {
          controller.cast(card.getSpellAbility(),game,true);
          cards.remove(card);
        }
      }
    }
  }
  while (!cards.isEmpty()) {
    Card card=cards.getRandom(game);
    if (card != null) {
      cards.remove(card);
      card.moveToZone(Zone.LIBRARY,source.getSourceId(),game,false);
    }
  }
  return true;
}",0.9102990033222592
157896,"private Ixalan(){
  super(""String_Node_Str"",""String_Node_Str"",ExpansionSet.buildDate(2017,9,29),SetType.EXPANSION);
  this.blockName=""String_Node_Str"";
  this.hasBoosters=true;
  this.hasBasicLands=true;
  this.numBoosterLands=1;
  this.numBoosterCommon=11;
  this.numBoosterUncommon=3;
  this.numBoosterRare=1;
  this.ratioBoosterMythic=8;
  cards.add(new SetCardInfo(""String_Node_Str"",22,Rarity.RARE,mage.cards.a.AdantoTheFirstFort.class));
  cards.add(new SetCardInfo(""String_Node_Str"",1,Rarity.UNCOMMON,mage.cards.a.AdantoVanguard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",217,Rarity.MYTHIC,mage.cards.a.AdmiralBeckettBrass.class));
  cards.add(new SetCardInfo(""String_Node_Str"",45,Rarity.UNCOMMON,mage.cards.a.AirElemental.class));
  cards.add(new SetCardInfo(""String_Node_Str"",132,Rarity.RARE,mage.cards.a.AngrathsMarauders.class));
  cards.add(new SetCardInfo(""String_Node_Str"",46,Rarity.RARE,mage.cards.a.ArcaneAdaptation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",90,Rarity.RARE,mage.cards.a.ArguelsBloodFast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",2,Rarity.RARE,mage.cards.a.AshesOfTheAbhorrent.class));
  cards.add(new SetCardInfo(""String_Node_Str"",3,Rarity.MYTHIC,mage.cards.a.AxisOfMortality.class));
  cards.add(new SetCardInfo(""String_Node_Str"",74,Rarity.RARE,mage.cards.a.AzcantaTheSunkenRuin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",218,Rarity.UNCOMMON,mage.cards.b.BelligerentBrontodon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",4,Rarity.UNCOMMON,mage.cards.b.BellowingAegisaur.class));
  cards.add(new SetCardInfo(""String_Node_Str"",5,Rarity.RARE,mage.cards.b.BishopOfRebirth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",91,Rarity.UNCOMMON,mage.cards.b.BishopOfTheBloodstained.class));
  cards.add(new SetCardInfo(""String_Node_Str"",93,Rarity.RARE,mage.cards.b.BloodcrazedPaladin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",94,Rarity.MYTHIC,mage.cards.b.BoneyardParley.class));
  cards.add(new SetCardInfo(""String_Node_Str"",134,Rarity.COMMON,mage.cards.b.BrazenBuccaneers.class));
  cards.add(new SetCardInfo(""String_Node_Str"",135,Rarity.RARE,mage.cards.b.BurningSunsAvatar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",219,Rarity.UNCOMMON,mage.cards.c.CallToTheFeast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",47,Rarity.COMMON,mage.cards.c.Cancel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",136,Rarity.RARE,mage.cards.c.CaptainLanneryStorm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",137,Rarity.RARE,mage.cards.c.CaptivatingCrew.class));
  cards.add(new SetCardInfo(""String_Node_Str"",179,Rarity.MYTHIC,mage.cards.c.CarnageTyrant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",281,Rarity.COMMON,mage.cards.c.CastawaysDespair.class));
  cards.add(new SetCardInfo(""String_Node_Str"",138,Rarity.UNCOMMON,mage.cards.c.ChargingMonstrosaur.class));
  cards.add(new SetCardInfo(""String_Node_Str"",48,Rarity.UNCOMMON,mage.cards.c.ChartACourse.class));
  cards.add(new SetCardInfo(""String_Node_Str"",233,Rarity.COMMON,mage.cards.c.CobbledWings.class));
  cards.add(new SetCardInfo(""String_Node_Str"",181,Rarity.COMMON,mage.cards.c.CommuneWithDinosaurs.class));
  cards.add(new SetCardInfo(""String_Node_Str"",234,Rarity.RARE,mage.cards.c.ConquerorsFoothold.class));
  cards.add(new SetCardInfo(""String_Node_Str"",234,Rarity.RARE,mage.cards.c.ConquerorsGalleon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",49,Rarity.RARE,mage.cards.d.DaringSaboteur.class));
  cards.add(new SetCardInfo(""String_Node_Str"",220,Rarity.UNCOMMON,mage.cards.d.DeadeyePlunderers.class));
  cards.add(new SetCardInfo(""String_Node_Str"",50,Rarity.UNCOMMON,mage.cards.d.DeadeyeQuartermaster.class));
  cards.add(new SetCardInfo(""String_Node_Str"",98,Rarity.COMMON,mage.cards.d.DeadeyeTormentor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",99,Rarity.RARE,mage.cards.d.DeadeyeTracker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",184,Rarity.RARE,mage.cards.d.DeathgorgeScavenger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",100,Rarity.UNCOMMON,mage.cards.d.DeathlessAncient.class));
  cards.add(new SetCardInfo(""String_Node_Str"",185,Rarity.RARE,mage.cards.d.DeeprootChampion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",51,Rarity.UNCOMMON,mage.cards.d.DeeprootWaters.class));
  cards.add(new SetCardInfo(""String_Node_Str"",139,Rarity.COMMON,mage.cards.d.Demolish.class));
  cards.add(new SetCardInfo(""String_Node_Str"",8,Rarity.COMMON,mage.cards.d.Demystify.class));
  cards.add(new SetCardInfo(""String_Node_Str"",101,Rarity.COMMON,mage.cards.d.DesperateCastaways.class));
  cards.add(new SetCardInfo(""String_Node_Str"",140,Rarity.UNCOMMON,mage.cards.d.DinosaurStampede.class));
  cards.add(new SetCardInfo(""String_Node_Str"",221,Rarity.UNCOMMON,mage.cards.d.DireFleetCaptain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",102,Rarity.COMMON,mage.cards.d.DireFleetHoarder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",104,Rarity.MYTHIC,mage.cards.d.DireFleetRavager.class));
  cards.add(new SetCardInfo(""String_Node_Str"",235,Rarity.RARE,mage.cards.d.DowsingDagger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",252,Rarity.RARE,mage.cards.d.DragonskullSummit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",54,Rarity.RARE,mage.cards.d.DreamcallerSiren.class));
  cards.add(new SetCardInfo(""String_Node_Str"",187,Rarity.UNCOMMON,mage.cards.d.DroverOfTheMighty.class));
  cards.add(new SetCardInfo(""String_Node_Str"",253,Rarity.RARE,mage.cards.d.DrownedCatacomb.class));
  cards.add(new SetCardInfo(""String_Node_Str"",141,Rarity.COMMON,mage.cards.d.DualShot.class));
  cards.add(new SetCardInfo(""String_Node_Str"",105,Rarity.COMMON,mage.cards.d.Duress.class));
  cards.add(new SetCardInfo(""String_Node_Str"",9,Rarity.UNCOMMON,mage.cards.d.DuskborneSkymarcher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",236,Rarity.UNCOMMON,mage.cards.d.DuskLegionDreadnought.class));
  cards.add(new SetCardInfo(""String_Node_Str"",10,Rarity.UNCOMMON,mage.cards.e.EmissaryOfSunrise.class));
  cards.add(new SetCardInfo(""String_Node_Str"",189,Rarity.RARE,mage.cards.e.EmperorsVanguard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",55,Rarity.RARE,mage.cards.e.EntrancingMelody.class));
  cards.add(new SetCardInfo(""String_Node_Str"",106,Rarity.RARE,mage.cards.f.FathomFleetCaptain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",56,Rarity.UNCOMMON,mage.cards.f.FavorableWinds.class));
  cards.add(new SetCardInfo(""String_Node_Str"",238,Rarity.RARE,mage.cards.f.FellFlagship.class));
  cards.add(new SetCardInfo(""String_Node_Str"",254,Rarity.UNCOMMON,mage.cards.f.FieldOfRuin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",276,Rarity.LAND,mage.cards.basiclands.Forest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",277,Rarity.LAND,mage.cards.basiclands.Forest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",278,Rarity.LAND,mage.cards.basiclands.Forest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",279,Rarity.LAND,mage.cards.basiclands.Forest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",222,Rarity.MYTHIC,mage.cards.g.GishathSunsAvatar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",255,Rarity.RARE,mage.cards.g.GlacialFortress.class));
  cards.add(new SetCardInfo(""String_Node_Str"",13,Rarity.RARE,mage.cards.g.GoringCeratops.class));
  cards.add(new SetCardInfo(""String_Node_Str"",282,Rarity.RARE,mage.cards.g.GraspingCurrent.class));
  cards.add(new SetCardInfo(""String_Node_Str"",190,Rarity.COMMON,mage.cards.g.GrazingWhiptail.class));
  cards.add(new SetCardInfo(""String_Node_Str"",191,Rarity.RARE,mage.cards.g.GrowingRitesOfItlimoc.class));
  cards.add(new SetCardInfo(""String_Node_Str"",58,Rarity.COMMON,mage.cards.h.HeadwaterSentries.class));
  cards.add(new SetCardInfo(""String_Node_Str"",59,Rarity.RARE,mage.cards.h.HeraldOfSecretStreams.class));
  cards.add(new SetCardInfo(""String_Node_Str"",148,Rarity.COMMON,mage.cards.h.Hijack.class));
  cards.add(new SetCardInfo(""String_Node_Str"",223,Rarity.RARE,mage.cards.h.HostageTaker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",285,Rarity.MYTHIC,mage.cards.h.HuatliDinosaurKnight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",286,Rarity.COMMON,mage.cards.h.HuatlisSnubhorn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",287,Rarity.UNCOMMON,mage.cards.h.HuatlisSpurring.class));
  cards.add(new SetCardInfo(""String_Node_Str"",224,Rarity.MYTHIC,mage.cards.h.HuatliWarriorPoet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",15,Rarity.UNCOMMON,mage.cards.i.ImperialLancer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",264,Rarity.LAND,mage.cards.basiclands.Island.class));
  cards.add(new SetCardInfo(""String_Node_Str"",265,Rarity.LAND,mage.cards.basiclands.Island.class));
  cards.add(new SetCardInfo(""String_Node_Str"",266,Rarity.LAND,mage.cards.basiclands.Island.class));
  cards.add(new SetCardInfo(""String_Node_Str"",267,Rarity.LAND,mage.cards.basiclands.Island.class));
  cards.add(new SetCardInfo(""String_Node_Str"",191,Rarity.RARE,mage.cards.i.ItlimocCradleOfTheSun.class));
  cards.add(new SetCardInfo(""String_Node_Str"",17,Rarity.UNCOMMON,mage.cards.i.IxalansBinding.class));
  cards.add(new SetCardInfo(""String_Node_Str"",60,Rarity.MYTHIC,mage.cards.j.JaceCunningCastaway.class));
  cards.add(new SetCardInfo(""String_Node_Str"",283,Rarity.UNCOMMON,mage.cards.j.JacesSentinel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",18,Rarity.COMMON,mage.cards.k.KinjallisCaller.class));
  cards.add(new SetCardInfo(""String_Node_Str"",19,Rarity.RARE,mage.cards.k.KinjallisSunwing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",110,Rarity.UNCOMMON,mage.cards.k.KitesailFreebooter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",61,Rarity.RARE,mage.cards.k.KopalaWardenOfWaves.class));
  cards.add(new SetCardInfo(""String_Node_Str"",196,Rarity.UNCOMMON,mage.cards.k.KumenasSpeaker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",20,Rarity.COMMON,mage.cards.l.LegionConquistador.class));
  cards.add(new SetCardInfo(""String_Node_Str"",22,Rarity.RARE,mage.cards.l.LegionsLanding.class));
  cards.add(new SetCardInfo(""String_Node_Str"",149,Rarity.UNCOMMON,mage.cards.l.LightningStrike.class));
  cards.add(new SetCardInfo(""String_Node_Str"",62,Rarity.UNCOMMON,mage.cards.l.LookoutsDispersal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",235,Rarity.RARE,mage.cards.l.LostVale.class));
  cards.add(new SetCardInfo(""String_Node_Str"",111,Rarity.UNCOMMON,mage.cards.l.LurkingChupacabra.class));
  cards.add(new SetCardInfo(""String_Node_Str"",151,Rarity.UNCOMMON,mage.cards.m.MakeshiftMunitions.class));
  cards.add(new SetCardInfo(""String_Node_Str"",225,Rarity.UNCOMMON,mage.cards.m.MaraudingLooter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",113,Rarity.COMMON,mage.cards.m.MarkOfTheVampire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",24,Rarity.RARE,mage.cards.m.MavrenFeinDuskApostle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",197,Rarity.UNCOMMON,mage.cards.m.MerfolkBranchwalker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",272,Rarity.LAND,mage.cards.basiclands.Mountain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",273,Rarity.LAND,mage.cards.basiclands.Mountain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",274,Rarity.LAND,mage.cards.basiclands.Mountain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",275,Rarity.LAND,mage.cards.basiclands.Mountain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",65,Rarity.COMMON,mage.cards.o.Opt.class));
  cards.add(new SetCardInfo(""String_Node_Str"",153,Rarity.UNCOMMON,mage.cards.o.OtepecHuntmaster.class));
  cards.add(new SetCardInfo(""String_Node_Str"",66,Rarity.MYTHIC,mage.cards.o.OverflowingInsight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",67,Rarity.UNCOMMON,mage.cards.p.PerilousVoyage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",241,Rarity.UNCOMMON,mage.cards.p.PillarOfOrigins.class));
  cards.add(new SetCardInfo(""String_Node_Str"",242,Rarity.COMMON,mage.cards.p.PiratesCutlass.class));
  cards.add(new SetCardInfo(""String_Node_Str"",260,Rarity.LAND,mage.cards.basiclands.Plains.class));
  cards.add(new SetCardInfo(""String_Node_Str"",261,Rarity.LAND,mage.cards.basiclands.Plains.class));
  cards.add(new SetCardInfo(""String_Node_Str"",262,Rarity.LAND,mage.cards.basiclands.Plains.class));
  cards.add(new SetCardInfo(""String_Node_Str"",263,Rarity.LAND,mage.cards.basiclands.Plains.class));
  cards.add(new SetCardInfo(""String_Node_Str"",27,Rarity.RARE,mage.cards.p.PriestOfTheWakeningSun.class));
  cards.add(new SetCardInfo(""String_Node_Str"",243,Rarity.RARE,mage.cards.p.PrimalAmulet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",243,Rarity.RARE,mage.cards.p.PrimalWellspring.class));
  cards.add(new SetCardInfo(""String_Node_Str"",69,Rarity.COMMON,mage.cards.p.ProsperousPirates.class));
  cards.add(new SetCardInfo(""String_Node_Str"",115,Rarity.COMMON,mage.cards.q.QueensBaySoldier.class));
  cards.add(new SetCardInfo(""String_Node_Str"",226,Rarity.UNCOMMON,mage.cards.r.RagingSwordtooth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",116,Rarity.UNCOMMON,mage.cards.r.RaidersWake.class));
  cards.add(new SetCardInfo(""String_Node_Str"",154,Rarity.RARE,mage.cards.r.RampagingFerocidon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",201,Rarity.UNCOMMON,mage.cards.r.RangingRaptors.class));
  cards.add(new SetCardInfo(""String_Node_Str"",155,Rarity.UNCOMMON,mage.cards.r.RaptorHatchling.class));
  cards.add(new SetCardInfo(""String_Node_Str"",202,Rarity.COMMON,mage.cards.r.RavenousDaggertooth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",227,Rarity.RARE,mage.cards.r.RegisaurAlpha.class));
  cards.add(new SetCardInfo(""String_Node_Str"",156,Rarity.RARE,mage.cards.r.RepeatingBarrage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",117,Rarity.RARE,mage.cards.r.RevelInRiches.class));
  cards.add(new SetCardInfo(""String_Node_Str"",157,Rarity.UNCOMMON,mage.cards.r.RiggingRunner.class));
  cards.add(new SetCardInfo(""String_Node_Str"",158,Rarity.COMMON,mage.cards.r.Rile.class));
  cards.add(new SetCardInfo(""String_Node_Str"",203,Rarity.RARE,mage.cards.r.RipjawRaptor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",70,Rarity.UNCOMMON,mage.cards.r.RiverSneak.class));
  cards.add(new SetCardInfo(""String_Node_Str"",71,Rarity.RARE,mage.cards.r.RiversRebuke.class));
  cards.add(new SetCardInfo(""String_Node_Str"",256,Rarity.RARE,mage.cards.r.RootboundCrag.class));
  cards.add(new SetCardInfo(""String_Node_Str"",159,Rarity.MYTHIC,mage.cards.r.RowdyCrew.class));
  cards.add(new SetCardInfo(""String_Node_Str"",118,Rarity.RARE,mage.cards.r.RuinRaider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",160,Rarity.COMMON,mage.cards.r.RummagingGoblin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",119,Rarity.UNCOMMON,mage.cards.r.RuthlessKnave.class));
  cards.add(new SetCardInfo(""String_Node_Str"",120,Rarity.RARE,mage.cards.s.SanctumSeeker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",33,Rarity.RARE,mage.cards.s.SanguineSacrament.class));
  cards.add(new SetCardInfo(""String_Node_Str"",205,Rarity.UNCOMMON,mage.cards.s.SavageStomp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",74,Rarity.RARE,mage.cards.s.SearchForAzcanta.class));
  cards.add(new SetCardInfo(""String_Node_Str"",245,Rarity.UNCOMMON,mage.cards.s.SentinelTotem.class));
  cards.add(new SetCardInfo(""String_Node_Str"",34,Rarity.RARE,mage.cards.s.SettleTheWreckage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",246,Rarity.RARE,mage.cards.s.ShadowedCaravel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",228,Rarity.UNCOMMON,mage.cards.s.ShapersOfNature.class));
  cards.add(new SetCardInfo(""String_Node_Str"",206,Rarity.RARE,mage.cards.s.ShapersSanctuary.class));
  cards.add(new SetCardInfo(""String_Node_Str"",79,Rarity.UNCOMMON,mage.cards.s.SirenStormtamer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",122,Rarity.COMMON,mage.cards.s.SkitteringHeartstopper.class));
  cards.add(new SetCardInfo(""String_Node_Str"",123,Rarity.COMMON,mage.cards.s.Skulduggery.class));
  cards.add(new SetCardInfo(""String_Node_Str"",229,Rarity.UNCOMMON,mage.cards.s.SkyTerror.class));
  cards.add(new SetCardInfo(""String_Node_Str"",247,Rarity.UNCOMMON,mage.cards.s.SleekSchooner.class));
  cards.add(new SetCardInfo(""String_Node_Str"",208,Rarity.UNCOMMON,mage.cards.s.SnappingSailback.class));
  cards.add(new SetCardInfo(""String_Node_Str"",248,Rarity.RARE,mage.cards.s.SorcerousSpyglass.class));
  cards.add(new SetCardInfo(""String_Node_Str"",81,Rarity.COMMON,mage.cards.s.SpellPierce.class));
  cards.add(new SetCardInfo(""String_Node_Str"",82,Rarity.RARE,mage.cards.s.SpellSwindle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",249,Rarity.RARE,mage.cards.s.SpiresOfOrazca.class));
  cards.add(new SetCardInfo(""String_Node_Str"",173,Rarity.RARE,mage.cards.s.SpitfireBastion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",161,Rarity.MYTHIC,mage.cards.s.StarOfExtinction.class));
  cards.add(new SetCardInfo(""String_Node_Str"",289,Rarity.COMMON,mage.cards.s.StoneQuarry.class));
  cards.add(new SetCardInfo(""String_Node_Str"",83,Rarity.UNCOMMON,mage.cards.s.StormFleetAerialist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",162,Rarity.UNCOMMON,mage.cards.s.StormFleetArsonist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",84,Rarity.UNCOMMON,mage.cards.s.StormFleetSpy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",165,Rarity.RARE,mage.cards.s.SunbirdsInvocation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",257,Rarity.RARE,mage.cards.s.SunpetalGrove.class));
  cards.add(new SetCardInfo(""String_Node_Str"",166,Rarity.COMMON,mage.cards.s.SureStrike.class));
  cards.add(new SetCardInfo(""String_Node_Str"",268,Rarity.LAND,mage.cards.basiclands.Swamp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",269,Rarity.LAND,mage.cards.basiclands.Swamp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",270,Rarity.LAND,mage.cards.basiclands.Swamp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",271,Rarity.LAND,mage.cards.basiclands.Swamp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",90,Rarity.RARE,mage.cards.t.TempleOfAclazotz.class));
  cards.add(new SetCardInfo(""String_Node_Str"",249,Rarity.RARE,mage.cards.t.ThaumaticCompass.class));
  cards.add(new SetCardInfo(""String_Node_Str"",210,Rarity.UNCOMMON,mage.cards.t.ThunderingSpineback.class));
  cards.add(new SetCardInfo(""String_Node_Str"",169,Rarity.COMMON,mage.cards.t.TilonallisKnight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",170,Rarity.RARE,mage.cards.t.TilonallisSkinshifter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",211,Rarity.COMMON,mage.cards.t.TishanasWayfinder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",230,Rarity.MYTHIC,mage.cards.t.TishanaVoiceOfThunder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",42,Rarity.RARE,mage.cards.t.TocatliHonorGuard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",250,Rarity.RARE,mage.cards.t.TreasureCove.class));
  cards.add(new SetCardInfo(""String_Node_Str"",250,Rarity.RARE,mage.cards.t.TreasureMap.class));
  cards.add(new SetCardInfo(""String_Node_Str"",258,Rarity.UNCOMMON,mage.cards.u.UnclaimedTerritory.class));
  cards.add(new SetCardInfo(""String_Node_Str"",172,Rarity.COMMON,mage.cards.u.UnfriendlyFire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",259,Rarity.COMMON,mage.cards.u.UnknownShores.class));
  cards.add(new SetCardInfo(""String_Node_Str"",173,Rarity.RARE,mage.cards.v.VancesBlastingCannons.class));
  cards.add(new SetCardInfo(""String_Node_Str"",251,Rarity.RARE,mage.cards.v.VanquishersBanner.class));
  cards.add(new SetCardInfo(""String_Node_Str"",213,Rarity.RARE,mage.cards.v.VerdantSunsAvatar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",128,Rarity.UNCOMMON,mage.cards.v.ViciousConquistador.class));
  cards.add(new SetCardInfo(""String_Node_Str"",214,Rarity.UNCOMMON,mage.cards.v.VineshaperMystic.class));
  cards.add(new SetCardInfo(""String_Node_Str"",231,Rarity.MYTHIC,mage.cards.v.VonaButcherOfMagan.class));
  cards.add(new SetCardInfo(""String_Node_Str"",232,Rarity.MYTHIC,mage.cards.v.VraskaRelicSeeker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",129,Rarity.RARE,mage.cards.v.VraskasContempt.class));
  cards.add(new SetCardInfo(""String_Node_Str"",44,Rarity.MYTHIC,mage.cards.w.WakeningSunsAvatar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",215,Rarity.RARE,mage.cards.w.WakerOfTheWilds.class));
  cards.add(new SetCardInfo(""String_Node_Str"",130,Rarity.UNCOMMON,mage.cards.w.WalkThePlank.class));
  cards.add(new SetCardInfo(""String_Node_Str"",131,Rarity.UNCOMMON,mage.cards.w.WantedScoundrels.class));
  cards.add(new SetCardInfo(""String_Node_Str"",216,Rarity.UNCOMMON,mage.cards.w.WildgrowthWalker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",174,Rarity.UNCOMMON,mage.cards.w.WilyGoblin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",284,Rarity.COMMON,mage.cards.w.WoodlandStream.class));
}","private Ixalan(){
  super(""String_Node_Str"",""String_Node_Str"",ExpansionSet.buildDate(2017,9,29),SetType.EXPANSION);
  this.blockName=""String_Node_Str"";
  this.hasBoosters=true;
  this.hasBasicLands=true;
  this.numBoosterLands=1;
  this.numBoosterCommon=11;
  this.numBoosterUncommon=3;
  this.numBoosterRare=1;
  this.ratioBoosterMythic=8;
  cards.add(new SetCardInfo(""String_Node_Str"",22,Rarity.RARE,mage.cards.a.AdantoTheFirstFort.class));
  cards.add(new SetCardInfo(""String_Node_Str"",1,Rarity.UNCOMMON,mage.cards.a.AdantoVanguard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",217,Rarity.MYTHIC,mage.cards.a.AdmiralBeckettBrass.class));
  cards.add(new SetCardInfo(""String_Node_Str"",45,Rarity.UNCOMMON,mage.cards.a.AirElemental.class));
  cards.add(new SetCardInfo(""String_Node_Str"",132,Rarity.RARE,mage.cards.a.AngrathsMarauders.class));
  cards.add(new SetCardInfo(""String_Node_Str"",46,Rarity.RARE,mage.cards.a.ArcaneAdaptation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",90,Rarity.RARE,mage.cards.a.ArguelsBloodFast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",2,Rarity.RARE,mage.cards.a.AshesOfTheAbhorrent.class));
  cards.add(new SetCardInfo(""String_Node_Str"",3,Rarity.MYTHIC,mage.cards.a.AxisOfMortality.class));
  cards.add(new SetCardInfo(""String_Node_Str"",74,Rarity.RARE,mage.cards.a.AzcantaTheSunkenRuin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",218,Rarity.UNCOMMON,mage.cards.b.BelligerentBrontodon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",4,Rarity.UNCOMMON,mage.cards.b.BellowingAegisaur.class));
  cards.add(new SetCardInfo(""String_Node_Str"",5,Rarity.RARE,mage.cards.b.BishopOfRebirth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",91,Rarity.UNCOMMON,mage.cards.b.BishopOfTheBloodstained.class));
  cards.add(new SetCardInfo(""String_Node_Str"",93,Rarity.RARE,mage.cards.b.BloodcrazedPaladin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",94,Rarity.MYTHIC,mage.cards.b.BoneyardParley.class));
  cards.add(new SetCardInfo(""String_Node_Str"",134,Rarity.COMMON,mage.cards.b.BrazenBuccaneers.class));
  cards.add(new SetCardInfo(""String_Node_Str"",135,Rarity.RARE,mage.cards.b.BurningSunsAvatar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",219,Rarity.UNCOMMON,mage.cards.c.CallToTheFeast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",47,Rarity.COMMON,mage.cards.c.Cancel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",136,Rarity.RARE,mage.cards.c.CaptainLanneryStorm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",137,Rarity.RARE,mage.cards.c.CaptivatingCrew.class));
  cards.add(new SetCardInfo(""String_Node_Str"",179,Rarity.MYTHIC,mage.cards.c.CarnageTyrant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",281,Rarity.COMMON,mage.cards.c.CastawaysDespair.class));
  cards.add(new SetCardInfo(""String_Node_Str"",138,Rarity.UNCOMMON,mage.cards.c.ChargingMonstrosaur.class));
  cards.add(new SetCardInfo(""String_Node_Str"",48,Rarity.UNCOMMON,mage.cards.c.ChartACourse.class));
  cards.add(new SetCardInfo(""String_Node_Str"",233,Rarity.COMMON,mage.cards.c.CobbledWings.class));
  cards.add(new SetCardInfo(""String_Node_Str"",181,Rarity.COMMON,mage.cards.c.CommuneWithDinosaurs.class));
  cards.add(new SetCardInfo(""String_Node_Str"",234,Rarity.RARE,mage.cards.c.ConquerorsFoothold.class));
  cards.add(new SetCardInfo(""String_Node_Str"",234,Rarity.RARE,mage.cards.c.ConquerorsGalleon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",49,Rarity.RARE,mage.cards.d.DaringSaboteur.class));
  cards.add(new SetCardInfo(""String_Node_Str"",220,Rarity.UNCOMMON,mage.cards.d.DeadeyePlunderers.class));
  cards.add(new SetCardInfo(""String_Node_Str"",50,Rarity.UNCOMMON,mage.cards.d.DeadeyeQuartermaster.class));
  cards.add(new SetCardInfo(""String_Node_Str"",98,Rarity.COMMON,mage.cards.d.DeadeyeTormentor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",99,Rarity.RARE,mage.cards.d.DeadeyeTracker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",184,Rarity.RARE,mage.cards.d.DeathgorgeScavenger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",100,Rarity.UNCOMMON,mage.cards.d.DeathlessAncient.class));
  cards.add(new SetCardInfo(""String_Node_Str"",185,Rarity.RARE,mage.cards.d.DeeprootChampion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",51,Rarity.UNCOMMON,mage.cards.d.DeeprootWaters.class));
  cards.add(new SetCardInfo(""String_Node_Str"",139,Rarity.COMMON,mage.cards.d.Demolish.class));
  cards.add(new SetCardInfo(""String_Node_Str"",8,Rarity.COMMON,mage.cards.d.Demystify.class));
  cards.add(new SetCardInfo(""String_Node_Str"",101,Rarity.COMMON,mage.cards.d.DesperateCastaways.class));
  cards.add(new SetCardInfo(""String_Node_Str"",140,Rarity.UNCOMMON,mage.cards.d.DinosaurStampede.class));
  cards.add(new SetCardInfo(""String_Node_Str"",221,Rarity.UNCOMMON,mage.cards.d.DireFleetCaptain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",102,Rarity.COMMON,mage.cards.d.DireFleetHoarder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",104,Rarity.MYTHIC,mage.cards.d.DireFleetRavager.class));
  cards.add(new SetCardInfo(""String_Node_Str"",235,Rarity.RARE,mage.cards.d.DowsingDagger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",252,Rarity.RARE,mage.cards.d.DragonskullSummit.class));
  cards.add(new SetCardInfo(""String_Node_Str"",54,Rarity.RARE,mage.cards.d.DreamcallerSiren.class));
  cards.add(new SetCardInfo(""String_Node_Str"",187,Rarity.UNCOMMON,mage.cards.d.DroverOfTheMighty.class));
  cards.add(new SetCardInfo(""String_Node_Str"",253,Rarity.RARE,mage.cards.d.DrownedCatacomb.class));
  cards.add(new SetCardInfo(""String_Node_Str"",141,Rarity.COMMON,mage.cards.d.DualShot.class));
  cards.add(new SetCardInfo(""String_Node_Str"",105,Rarity.COMMON,mage.cards.d.Duress.class));
  cards.add(new SetCardInfo(""String_Node_Str"",9,Rarity.UNCOMMON,mage.cards.d.DuskborneSkymarcher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",236,Rarity.UNCOMMON,mage.cards.d.DuskLegionDreadnought.class));
  cards.add(new SetCardInfo(""String_Node_Str"",10,Rarity.UNCOMMON,mage.cards.e.EmissaryOfSunrise.class));
  cards.add(new SetCardInfo(""String_Node_Str"",189,Rarity.RARE,mage.cards.e.EmperorsVanguard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",55,Rarity.RARE,mage.cards.e.EntrancingMelody.class));
  cards.add(new SetCardInfo(""String_Node_Str"",106,Rarity.RARE,mage.cards.f.FathomFleetCaptain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",56,Rarity.UNCOMMON,mage.cards.f.FavorableWinds.class));
  cards.add(new SetCardInfo(""String_Node_Str"",238,Rarity.RARE,mage.cards.f.FellFlagship.class));
  cards.add(new SetCardInfo(""String_Node_Str"",254,Rarity.UNCOMMON,mage.cards.f.FieldOfRuin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",276,Rarity.LAND,mage.cards.basiclands.Forest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",277,Rarity.LAND,mage.cards.basiclands.Forest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",278,Rarity.LAND,mage.cards.basiclands.Forest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",279,Rarity.LAND,mage.cards.basiclands.Forest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",222,Rarity.MYTHIC,mage.cards.g.GishathSunsAvatar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",255,Rarity.RARE,mage.cards.g.GlacialFortress.class));
  cards.add(new SetCardInfo(""String_Node_Str"",13,Rarity.RARE,mage.cards.g.GoringCeratops.class));
  cards.add(new SetCardInfo(""String_Node_Str"",282,Rarity.RARE,mage.cards.g.GraspingCurrent.class));
  cards.add(new SetCardInfo(""String_Node_Str"",190,Rarity.COMMON,mage.cards.g.GrazingWhiptail.class));
  cards.add(new SetCardInfo(""String_Node_Str"",191,Rarity.RARE,mage.cards.g.GrowingRitesOfItlimoc.class));
  cards.add(new SetCardInfo(""String_Node_Str"",58,Rarity.COMMON,mage.cards.h.HeadwaterSentries.class));
  cards.add(new SetCardInfo(""String_Node_Str"",59,Rarity.RARE,mage.cards.h.HeraldOfSecretStreams.class));
  cards.add(new SetCardInfo(""String_Node_Str"",148,Rarity.COMMON,mage.cards.h.Hijack.class));
  cards.add(new SetCardInfo(""String_Node_Str"",223,Rarity.RARE,mage.cards.h.HostageTaker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",285,Rarity.MYTHIC,mage.cards.h.HuatliDinosaurKnight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",286,Rarity.COMMON,mage.cards.h.HuatlisSnubhorn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",287,Rarity.UNCOMMON,mage.cards.h.HuatlisSpurring.class));
  cards.add(new SetCardInfo(""String_Node_Str"",224,Rarity.MYTHIC,mage.cards.h.HuatliWarriorPoet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",15,Rarity.UNCOMMON,mage.cards.i.ImperialLancer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",264,Rarity.LAND,mage.cards.basiclands.Island.class));
  cards.add(new SetCardInfo(""String_Node_Str"",265,Rarity.LAND,mage.cards.basiclands.Island.class));
  cards.add(new SetCardInfo(""String_Node_Str"",266,Rarity.LAND,mage.cards.basiclands.Island.class));
  cards.add(new SetCardInfo(""String_Node_Str"",267,Rarity.LAND,mage.cards.basiclands.Island.class));
  cards.add(new SetCardInfo(""String_Node_Str"",191,Rarity.RARE,mage.cards.i.ItlimocCradleOfTheSun.class));
  cards.add(new SetCardInfo(""String_Node_Str"",17,Rarity.UNCOMMON,mage.cards.i.IxalansBinding.class));
  cards.add(new SetCardInfo(""String_Node_Str"",60,Rarity.MYTHIC,mage.cards.j.JaceCunningCastaway.class));
  cards.add(new SetCardInfo(""String_Node_Str"",280,Rarity.MYTHIC,mage.cards.j.JaceIngeniousMindMage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",283,Rarity.UNCOMMON,mage.cards.j.JacesSentinel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",18,Rarity.COMMON,mage.cards.k.KinjallisCaller.class));
  cards.add(new SetCardInfo(""String_Node_Str"",19,Rarity.RARE,mage.cards.k.KinjallisSunwing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",110,Rarity.UNCOMMON,mage.cards.k.KitesailFreebooter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",61,Rarity.RARE,mage.cards.k.KopalaWardenOfWaves.class));
  cards.add(new SetCardInfo(""String_Node_Str"",196,Rarity.UNCOMMON,mage.cards.k.KumenasSpeaker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",20,Rarity.COMMON,mage.cards.l.LegionConquistador.class));
  cards.add(new SetCardInfo(""String_Node_Str"",22,Rarity.RARE,mage.cards.l.LegionsLanding.class));
  cards.add(new SetCardInfo(""String_Node_Str"",150,Rarity.UNCOMMON,mage.cards.l.LightningRigCrew.class));
  cards.add(new SetCardInfo(""String_Node_Str"",149,Rarity.UNCOMMON,mage.cards.l.LightningStrike.class));
  cards.add(new SetCardInfo(""String_Node_Str"",62,Rarity.UNCOMMON,mage.cards.l.LookoutsDispersal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",235,Rarity.RARE,mage.cards.l.LostVale.class));
  cards.add(new SetCardInfo(""String_Node_Str"",111,Rarity.UNCOMMON,mage.cards.l.LurkingChupacabra.class));
  cards.add(new SetCardInfo(""String_Node_Str"",151,Rarity.UNCOMMON,mage.cards.m.MakeshiftMunitions.class));
  cards.add(new SetCardInfo(""String_Node_Str"",225,Rarity.UNCOMMON,mage.cards.m.MaraudingLooter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",113,Rarity.COMMON,mage.cards.m.MarkOfTheVampire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",24,Rarity.RARE,mage.cards.m.MavrenFeinDuskApostle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",197,Rarity.UNCOMMON,mage.cards.m.MerfolkBranchwalker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",272,Rarity.LAND,mage.cards.basiclands.Mountain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",273,Rarity.LAND,mage.cards.basiclands.Mountain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",274,Rarity.LAND,mage.cards.basiclands.Mountain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",275,Rarity.LAND,mage.cards.basiclands.Mountain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",199,Rarity.RARE,mage.cards.o.OldGrowthDryads.class));
  cards.add(new SetCardInfo(""String_Node_Str"",65,Rarity.COMMON,mage.cards.o.Opt.class));
  cards.add(new SetCardInfo(""String_Node_Str"",153,Rarity.UNCOMMON,mage.cards.o.OtepecHuntmaster.class));
  cards.add(new SetCardInfo(""String_Node_Str"",66,Rarity.MYTHIC,mage.cards.o.OverflowingInsight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",67,Rarity.UNCOMMON,mage.cards.p.PerilousVoyage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",241,Rarity.UNCOMMON,mage.cards.p.PillarOfOrigins.class));
  cards.add(new SetCardInfo(""String_Node_Str"",242,Rarity.COMMON,mage.cards.p.PiratesCutlass.class));
  cards.add(new SetCardInfo(""String_Node_Str"",260,Rarity.LAND,mage.cards.basiclands.Plains.class));
  cards.add(new SetCardInfo(""String_Node_Str"",261,Rarity.LAND,mage.cards.basiclands.Plains.class));
  cards.add(new SetCardInfo(""String_Node_Str"",262,Rarity.LAND,mage.cards.basiclands.Plains.class));
  cards.add(new SetCardInfo(""String_Node_Str"",263,Rarity.LAND,mage.cards.basiclands.Plains.class));
  cards.add(new SetCardInfo(""String_Node_Str"",27,Rarity.RARE,mage.cards.p.PriestOfTheWakeningSun.class));
  cards.add(new SetCardInfo(""String_Node_Str"",243,Rarity.RARE,mage.cards.p.PrimalAmulet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",243,Rarity.RARE,mage.cards.p.PrimalWellspring.class));
  cards.add(new SetCardInfo(""String_Node_Str"",69,Rarity.COMMON,mage.cards.p.ProsperousPirates.class));
  cards.add(new SetCardInfo(""String_Node_Str"",115,Rarity.COMMON,mage.cards.q.QueensBaySoldier.class));
  cards.add(new SetCardInfo(""String_Node_Str"",226,Rarity.UNCOMMON,mage.cards.r.RagingSwordtooth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",116,Rarity.UNCOMMON,mage.cards.r.RaidersWake.class));
  cards.add(new SetCardInfo(""String_Node_Str"",154,Rarity.RARE,mage.cards.r.RampagingFerocidon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",201,Rarity.UNCOMMON,mage.cards.r.RangingRaptors.class));
  cards.add(new SetCardInfo(""String_Node_Str"",155,Rarity.UNCOMMON,mage.cards.r.RaptorHatchling.class));
  cards.add(new SetCardInfo(""String_Node_Str"",202,Rarity.COMMON,mage.cards.r.RavenousDaggertooth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",227,Rarity.RARE,mage.cards.r.RegisaurAlpha.class));
  cards.add(new SetCardInfo(""String_Node_Str"",156,Rarity.RARE,mage.cards.r.RepeatingBarrage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",117,Rarity.RARE,mage.cards.r.RevelInRiches.class));
  cards.add(new SetCardInfo(""String_Node_Str"",157,Rarity.UNCOMMON,mage.cards.r.RiggingRunner.class));
  cards.add(new SetCardInfo(""String_Node_Str"",158,Rarity.COMMON,mage.cards.r.Rile.class));
  cards.add(new SetCardInfo(""String_Node_Str"",203,Rarity.RARE,mage.cards.r.RipjawRaptor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",70,Rarity.UNCOMMON,mage.cards.r.RiverSneak.class));
  cards.add(new SetCardInfo(""String_Node_Str"",71,Rarity.RARE,mage.cards.r.RiversRebuke.class));
  cards.add(new SetCardInfo(""String_Node_Str"",256,Rarity.RARE,mage.cards.r.RootboundCrag.class));
  cards.add(new SetCardInfo(""String_Node_Str"",159,Rarity.MYTHIC,mage.cards.r.RowdyCrew.class));
  cards.add(new SetCardInfo(""String_Node_Str"",118,Rarity.RARE,mage.cards.r.RuinRaider.class));
  cards.add(new SetCardInfo(""String_Node_Str"",160,Rarity.COMMON,mage.cards.r.RummagingGoblin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",119,Rarity.UNCOMMON,mage.cards.r.RuthlessKnave.class));
  cards.add(new SetCardInfo(""String_Node_Str"",120,Rarity.RARE,mage.cards.s.SanctumSeeker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",33,Rarity.RARE,mage.cards.s.SanguineSacrament.class));
  cards.add(new SetCardInfo(""String_Node_Str"",205,Rarity.UNCOMMON,mage.cards.s.SavageStomp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",74,Rarity.RARE,mage.cards.s.SearchForAzcanta.class));
  cards.add(new SetCardInfo(""String_Node_Str"",245,Rarity.UNCOMMON,mage.cards.s.SentinelTotem.class));
  cards.add(new SetCardInfo(""String_Node_Str"",34,Rarity.RARE,mage.cards.s.SettleTheWreckage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",246,Rarity.RARE,mage.cards.s.ShadowedCaravel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",228,Rarity.UNCOMMON,mage.cards.s.ShapersOfNature.class));
  cards.add(new SetCardInfo(""String_Node_Str"",206,Rarity.RARE,mage.cards.s.ShapersSanctuary.class));
  cards.add(new SetCardInfo(""String_Node_Str"",79,Rarity.UNCOMMON,mage.cards.s.SirenStormtamer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",122,Rarity.COMMON,mage.cards.s.SkitteringHeartstopper.class));
  cards.add(new SetCardInfo(""String_Node_Str"",123,Rarity.COMMON,mage.cards.s.Skulduggery.class));
  cards.add(new SetCardInfo(""String_Node_Str"",229,Rarity.UNCOMMON,mage.cards.s.SkyTerror.class));
  cards.add(new SetCardInfo(""String_Node_Str"",247,Rarity.UNCOMMON,mage.cards.s.SleekSchooner.class));
  cards.add(new SetCardInfo(""String_Node_Str"",208,Rarity.UNCOMMON,mage.cards.s.SnappingSailback.class));
  cards.add(new SetCardInfo(""String_Node_Str"",248,Rarity.RARE,mage.cards.s.SorcerousSpyglass.class));
  cards.add(new SetCardInfo(""String_Node_Str"",81,Rarity.COMMON,mage.cards.s.SpellPierce.class));
  cards.add(new SetCardInfo(""String_Node_Str"",82,Rarity.RARE,mage.cards.s.SpellSwindle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",249,Rarity.RARE,mage.cards.s.SpiresOfOrazca.class));
  cards.add(new SetCardInfo(""String_Node_Str"",173,Rarity.RARE,mage.cards.s.SpitfireBastion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",161,Rarity.MYTHIC,mage.cards.s.StarOfExtinction.class));
  cards.add(new SetCardInfo(""String_Node_Str"",289,Rarity.COMMON,mage.cards.s.StoneQuarry.class));
  cards.add(new SetCardInfo(""String_Node_Str"",83,Rarity.UNCOMMON,mage.cards.s.StormFleetAerialist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",162,Rarity.UNCOMMON,mage.cards.s.StormFleetArsonist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",84,Rarity.UNCOMMON,mage.cards.s.StormFleetSpy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",165,Rarity.RARE,mage.cards.s.SunbirdsInvocation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",288,Rarity.RARE,mage.cards.s.SunBlessedMount.class));
  cards.add(new SetCardInfo(""String_Node_Str"",164,Rarity.COMMON,mage.cards.s.SunCrownedHunters.class));
  cards.add(new SetCardInfo(""String_Node_Str"",257,Rarity.RARE,mage.cards.s.SunpetalGrove.class));
  cards.add(new SetCardInfo(""String_Node_Str"",166,Rarity.COMMON,mage.cards.s.SureStrike.class));
  cards.add(new SetCardInfo(""String_Node_Str"",268,Rarity.LAND,mage.cards.basiclands.Swamp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",269,Rarity.LAND,mage.cards.basiclands.Swamp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",270,Rarity.LAND,mage.cards.basiclands.Swamp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",271,Rarity.LAND,mage.cards.basiclands.Swamp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",126,Rarity.RARE,mage.cards.s.SwordPointDiplomacy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",90,Rarity.RARE,mage.cards.t.TempleOfAclazotz.class));
  cards.add(new SetCardInfo(""String_Node_Str"",249,Rarity.RARE,mage.cards.t.ThaumaticCompass.class));
  cards.add(new SetCardInfo(""String_Node_Str"",210,Rarity.UNCOMMON,mage.cards.t.ThunderingSpineback.class));
  cards.add(new SetCardInfo(""String_Node_Str"",169,Rarity.COMMON,mage.cards.t.TilonallisKnight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",170,Rarity.RARE,mage.cards.t.TilonallisSkinshifter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",211,Rarity.COMMON,mage.cards.t.TishanasWayfinder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",230,Rarity.MYTHIC,mage.cards.t.TishanaVoiceOfThunder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",42,Rarity.RARE,mage.cards.t.TocatliHonorGuard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",250,Rarity.RARE,mage.cards.t.TreasureCove.class));
  cards.add(new SetCardInfo(""String_Node_Str"",250,Rarity.RARE,mage.cards.t.TreasureMap.class));
  cards.add(new SetCardInfo(""String_Node_Str"",258,Rarity.UNCOMMON,mage.cards.u.UnclaimedTerritory.class));
  cards.add(new SetCardInfo(""String_Node_Str"",172,Rarity.COMMON,mage.cards.u.UnfriendlyFire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",259,Rarity.COMMON,mage.cards.u.UnknownShores.class));
  cards.add(new SetCardInfo(""String_Node_Str"",173,Rarity.RARE,mage.cards.v.VancesBlastingCannons.class));
  cards.add(new SetCardInfo(""String_Node_Str"",251,Rarity.RARE,mage.cards.v.VanquishersBanner.class));
  cards.add(new SetCardInfo(""String_Node_Str"",213,Rarity.RARE,mage.cards.v.VerdantSunsAvatar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",128,Rarity.UNCOMMON,mage.cards.v.ViciousConquistador.class));
  cards.add(new SetCardInfo(""String_Node_Str"",214,Rarity.UNCOMMON,mage.cards.v.VineshaperMystic.class));
  cards.add(new SetCardInfo(""String_Node_Str"",231,Rarity.MYTHIC,mage.cards.v.VonaButcherOfMagan.class));
  cards.add(new SetCardInfo(""String_Node_Str"",232,Rarity.MYTHIC,mage.cards.v.VraskaRelicSeeker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",129,Rarity.RARE,mage.cards.v.VraskasContempt.class));
  cards.add(new SetCardInfo(""String_Node_Str"",44,Rarity.MYTHIC,mage.cards.w.WakeningSunsAvatar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",215,Rarity.RARE,mage.cards.w.WakerOfTheWilds.class));
  cards.add(new SetCardInfo(""String_Node_Str"",130,Rarity.UNCOMMON,mage.cards.w.WalkThePlank.class));
  cards.add(new SetCardInfo(""String_Node_Str"",131,Rarity.UNCOMMON,mage.cards.w.WantedScoundrels.class));
  cards.add(new SetCardInfo(""String_Node_Str"",216,Rarity.UNCOMMON,mage.cards.w.WildgrowthWalker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",174,Rarity.UNCOMMON,mage.cards.w.WilyGoblin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",284,Rarity.COMMON,mage.cards.w.WoodlandStream.class));
}",0.9854139753376394
157897,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility) {
    Card sourceCard=game.getCard(abilityToModify.getSourceId());
    if (sourceCard != null && abilityToModify.getControllerId().equals(source.getControllerId()) && (sourceCard.isCreature())) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility) {
    if (abilityToModify.getControllerId().equals(source.getControllerId())) {
      Spell spell=(Spell)game.getStack().getStackObject(abilityToModify.getId());
      if (spell != null) {
        return spell.isCreature();
      }
 else {
        Card sourceCard=game.getCard(abilityToModify.getSourceId());
        return sourceCard != null && sourceCard.isCreature();
      }
    }
  }
  return false;
}",0.5278884462151394
157898,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility) {
    Card sourceCard=game.getCard(abilityToModify.getSourceId());
    if (sourceCard != null && abilityToModify.getControllerId().equals(source.getControllerId()) && (sourceCard.isCreature())) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify instanceof SpellAbility || abilityToModify instanceof FlashbackAbility) {
    if (abilityToModify.getControllerId().equals(source.getControllerId())) {
      Spell spell=(Spell)game.getStack().getStackObject(abilityToModify.getId());
      if (spell != null) {
        return spell.isCreature();
      }
 else {
        Card sourceCard=game.getCard(abilityToModify.getSourceId());
        return sourceCard != null && sourceCard.isCreature();
      }
    }
  }
  return false;
}",0.5278884462151394
157899,"@Override public void init(Ability source,Game game){
  super.init(source,game);
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Choice choice=new ChoiceLandType();
    controller.choose(outcome,choice,game);
    targetLandType=choice.getChoice();
    choice=new ChoiceBasicLandType();
    controller.choose(outcome,choice,game);
    targetBasicLandType=choice.getChoice();
  }
 else {
    this.discard();
  }
  FilterPermanent filter=new FilterLandPermanent();
  filter.add(new SubtypePredicate(SubType.byDescription(targetLandType)));
  if (this.affectedObjectsSet) {
    for (    Permanent permanent : game.getBattlefield().getAllActivePermanents(filter,game)) {
      affectedObjectList.add(new MageObjectReference(permanent,game));
    }
  }
}","@Override public void init(Ability source,Game game){
  super.init(source,game);
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Choice choice=new ChoiceLandType();
    controller.choose(outcome,choice,game);
    targetLandType=choice.getChoice();
    choice=new ChoiceBasicLandType();
    controller.choose(outcome,choice,game);
    targetBasicLandType=choice.getChoice();
    if (targetLandType == null || targetBasicLandType == null) {
      this.discard();
      return;
    }
  }
 else {
    this.discard();
    return;
  }
  FilterPermanent filter=new FilterLandPermanent();
  filter.add(new SubtypePredicate(SubType.byDescription(targetLandType)));
  if (this.affectedObjectsSet) {
    for (    Permanent permanent : game.getBattlefield().getAllActivePermanents(filter,game)) {
      affectedObjectList.add(new MageObjectReference(permanent,game));
    }
  }
}",0.9302870533099004
157900,"public VisionCharmEffect(final VisionCharmEffect effect){
  super(effect);
}","public VisionCharmEffect(final VisionCharmEffect effect){
  super(effect);
  targetLandType=effect.targetLandType;
  targetBasicLandType=effect.targetBasicLandType;
}",0.628099173553719
157901,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(targetPointer.getFirst(game,source));
  if (permanent == null) {
    permanent=(Permanent)game.getLastKnownInformation(targetPointer.getFirst(game,source),Zone.BATTLEFIELD);
  }
  if (permanent != null) {
    MyrToken token=new MyrToken();
    token.putOntoBattlefield(1,game,source.getSourceId(),permanent.getControllerId());
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanentOrLKIBattlefield(targetPointer.getFirst(game,source));
  if (permanent != null) {
    MyrToken token=new MyrToken();
    token.putOntoBattlefield(1,game,source.getSourceId(),permanent.getControllerId());
  }
  return true;
}",0.7963446475195822
157902,"@Override public boolean checkTrigger(GameEvent event,Game game){
  ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
  if (zEvent.getFromZone() == Zone.BATTLEFIELD && zEvent.getToZone() == Zone.GRAVEYARD) {
    if (filter.match(zEvent.getTarget(),this.getSourceId(),this.getControllerId(),game)) {
      if (onlyToControllerGraveyard && !this.getControllerId().equals(game.getOwnerId(zEvent.getTargetId()))) {
        return false;
      }
      if (setTargetPointer) {
        for (        Effect effect : this.getEffects()) {
          effect.setTargetPointer(new FixedTarget(event.getTargetId()));
        }
      }
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
  if (zEvent.getFromZone() == Zone.BATTLEFIELD && zEvent.getToZone() == Zone.GRAVEYARD) {
    if (filter.match(zEvent.getTarget(),this.getSourceId(),this.getControllerId(),game)) {
      if (onlyToControllerGraveyard && !this.getControllerId().equals(game.getOwnerId(zEvent.getTargetId()))) {
        return false;
      }
      if (setTargetPointer) {
        for (        Effect effect : this.getEffects()) {
          effect.setTargetPointer(new FixedTarget(event.getTargetId(),game.getObject(event.getTargetId()).getZoneChangeCounter(game)));
        }
      }
      return true;
    }
  }
  return false;
}",0.9546436285097192
157903,"@Override public SpellAbility chooseSpellAbilityForCast(SpellAbility ability,Game game,boolean noMana){
switch (ability.getSpellAbilityType()) {
case SPLIT:
case SPLIT_FUSED:
case SPLIT_AFTERMATH:
    MageObject object=game.getObject(ability.getSourceId());
  if (object != null) {
    LinkedHashMap<UUID,ActivatedAbility> useableAbilities=getSpellAbilities(object,game.getState().getZone(object.getId()),game);
    if (useableAbilities != null && !useableAbilities.isEmpty()) {
      game.fireGetChoiceEvent(playerId,name,object,new ArrayList<>(useableAbilities.values()));
      return (SpellAbility)useableAbilities.values().iterator().next();
    }
  }
return null;
default :
return ability;
}
}","@Override public SpellAbility chooseSpellAbilityForCast(SpellAbility ability,Game game,boolean noMana){
switch (ability.getSpellAbilityType()) {
case SPLIT:
case SPLIT_FUSED:
case SPLIT_AFTERMATH:
    MageObject object=game.getObject(ability.getSourceId());
  if (object != null) {
    LinkedHashMap<UUID,ActivatedAbility> useableAbilities=getSpellAbilities(object,game.getState().getZone(object.getId()),game);
    if (useableAbilities != null && !useableAbilities.isEmpty()) {
      return (SpellAbility)useableAbilities.values().iterator().next();
    }
  }
return null;
default :
return ability;
}
}",0.7542242703533026
157904,"@Override public boolean canChooseTarget(Game game){
  int found=0;
  for (  Mode mode : getModes().values()) {
    if (mode.getTargets().canChoose(sourceId,controllerId,game)) {
      found++;
      if (getModes().isEachModeMoreThanOnce()) {
        return true;
      }
      if (found >= getModes().getMinModes()) {
        return true;
      }
    }
  }
  return false;
}","@Override public boolean canChooseTarget(Game game){
  if (this instanceof SpellAbility) {
    if (SpellAbilityType.SPLIT_FUSED.equals(((SpellAbility)this).getSpellAbilityType())) {
      Card card=game.getCard(getSourceId());
      if (card != null) {
        return canChooseTargetAbility(((SplitCard)card).getLeftHalfCard().getSpellAbility(),game,getControllerId()) && canChooseTargetAbility(((SplitCard)card).getRightHalfCard().getSpellAbility(),game,getControllerId());
      }
      return false;
    }
  }
  return canChooseTargetAbility(this,game,getControllerId());
}",0.1703470031545741
157905,"@Override public boolean cast(Game game,Zone fromZone,SpellAbility ability,UUID controllerId){
switch (ability.getSpellAbilityType()) {
case SPLIT_LEFT:
    return this.getLeftHalfCard().cast(game,fromZone,ability,controllerId);
case SPLIT_RIGHT:
  return this.getRightHalfCard().cast(game,fromZone,ability,controllerId);
default :
return super.cast(game,fromZone,ability,controllerId);
}
}","@Override public boolean cast(Game game,Zone fromZone,SpellAbility ability,UUID controllerId){
switch (ability.getSpellAbilityType()) {
case SPLIT_LEFT:
    return this.getLeftHalfCard().cast(game,fromZone,ability,controllerId);
case SPLIT_RIGHT:
  return this.getRightHalfCard().cast(game,fromZone,ability,controllerId);
default :
this.getLeftHalfCard().getSpellAbility().setControllerId(controllerId);
this.getRightHalfCard().getSpellAbility().setControllerId(controllerId);
return super.cast(game,fromZone,ability,controllerId);
}
}",0.8432432432432433
157906,"protected LinkedHashMap<UUID,ActivatedAbility> getSpellAbilities(MageObject object,Zone zone,Game game){
  LinkedHashMap<UUID,ActivatedAbility> useable=new LinkedHashMap<>();
  for (  Ability ability : object.getAbilities()) {
    if (ability instanceof SpellAbility) {
      if (((SpellAbility)ability).getSpellAbilityType() == SpellAbilityType.SPLIT_FUSED) {
        if (zone == Zone.HAND) {
          useable.clear();
          useable.put(ability.getId(),(SpellAbility)ability);
          return useable;
        }
 else {
          continue;
        }
      }
      if (((SpellAbility)ability).getSpellAbilityType() == SpellAbilityType.SPLIT || ((SpellAbility)ability).getSpellAbilityType() == SpellAbilityType.SPLIT_AFTERMATH) {
        continue;
      }
      useable.put(ability.getId(),(SpellAbility)ability);
    }
  }
  return useable;
}","protected LinkedHashMap<UUID,ActivatedAbility> getSpellAbilities(MageObject object,Zone zone,Game game){
  LinkedHashMap<UUID,ActivatedAbility> useable=new LinkedHashMap<>();
  for (  Ability ability : object.getAbilities()) {
    if (ability instanceof SpellAbility) {
switch (((SpellAbility)ability).getSpellAbilityType()) {
case SPLIT_FUSED:
        if (zone == Zone.HAND) {
          if (((SpellAbility)ability).canChooseTarget(game)) {
            useable.put(ability.getId(),(SpellAbility)ability);
          }
        }
case SPLIT:
      if (((SplitCard)object).getLeftHalfCard().getSpellAbility().canChooseTarget(game)) {
        useable.put(((SplitCard)object).getLeftHalfCard().getSpellAbility().getId(),((SplitCard)object).getLeftHalfCard().getSpellAbility());
      }
    if (((SplitCard)object).getRightHalfCard().getSpellAbility().canChooseTarget(game)) {
      useable.put(((SplitCard)object).getRightHalfCard().getSpellAbility().getId(),((SplitCard)object).getRightHalfCard().getSpellAbility());
    }
  return useable;
case SPLIT_AFTERMATH:
if (zone == Zone.GRAVEYARD) {
  if (((SplitCard)object).getRightHalfCard().getSpellAbility().canChooseTarget(game)) {
    useable.put(((SplitCard)object).getRightHalfCard().getSpellAbility().getId(),((SplitCard)object).getRightHalfCard().getSpellAbility());
  }
}
 else {
  if (((SplitCard)object).getLeftHalfCard().getSpellAbility().canChooseTarget(game)) {
    useable.put(((SplitCard)object).getLeftHalfCard().getSpellAbility().getId(),((SplitCard)object).getLeftHalfCard().getSpellAbility());
  }
}
return useable;
default :
useable.put(ability.getId(),(SpellAbility)ability);
}
}
}
return useable;
}",0.3721115537848605
157907,"@Override public boolean cast(SpellAbility ability,Game game,boolean noMana){
  if (game == null || ability == null) {
    return false;
  }
  if (ability.getSpellAbilityType() != SpellAbilityType.BASE) {
    ability=chooseSpellAbilityForCast(ability,game,noMana);
  }
  if (ability.getSourceId() == null) {
    logger.error(""String_Node_Str"" + game.getTurnNum() + ""String_Node_Str""+ ability.getRule());
    return false;
  }
  Card card=game.getCard(ability.getSourceId());
  if (card != null) {
    if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.CAST_SPELL,ability.getId(),ability.getSourceId(),playerId),ability)) {
      int bookmark=game.bookmarkState();
      Zone fromZone=game.getState().getZone(card.getMainCard().getId());
      card.cast(game,fromZone,ability,playerId);
      Spell spell=game.getStack().getSpell(ability.getId());
      if (spell == null) {
        logger.error(""String_Node_Str"" + ability.getRule());
        return false;
      }
      if (ability.getSourceId().equals(getCastSourceIdWithAlternateMana())) {
        Ability spellAbility=spell.getSpellAbility();
        ManaCosts alternateCosts=getCastSourceIdManaCosts();
        Costs<Cost> costs=getCastSourceIdCosts();
        if (alternateCosts == null) {
          noMana=true;
        }
 else {
          spellAbility.getManaCosts().clear();
          spellAbility.getManaCostsToPay().clear();
          spellAbility.getManaCosts().add(alternateCosts.copy());
          spellAbility.getManaCostsToPay().add(alternateCosts.copy());
        }
        spellAbility.getCosts().clear();
        if (costs != null) {
          spellAbility.getCosts().addAll(costs);
        }
      }
      setCastSourceIdWithAlternateMana(null,null,null);
      GameEvent event=GameEvent.getEvent(GameEvent.EventType.CAST_SPELL,spell.getSpellAbility().getId(),spell.getSpellAbility().getSourceId(),playerId);
      game.fireEvent(event);
      if (spell.activate(game,noMana)) {
        event=GameEvent.getEvent(GameEvent.EventType.SPELL_CAST,spell.getSpellAbility().getId(),spell.getSpellAbility().getSourceId(),playerId);
        event.setZone(fromZone);
        game.fireEvent(event);
        if (!game.isSimulation()) {
          game.informPlayers(getLogName() + spell.getActivatedMessage(game));
        }
        game.removeBookmark(bookmark);
        resetStoredBookmark(game);
        return true;
      }
      restoreState(bookmark,ability.getRule(),game);
    }
  }
  return false;
}","@Override public boolean cast(SpellAbility ability,Game game,boolean noMana){
  if (game == null || ability == null) {
    return false;
  }
  ability.setControllerId(getId());
  if (ability.getSpellAbilityType() != SpellAbilityType.BASE) {
    ability=chooseSpellAbilityForCast(ability,game,noMana);
  }
  if (ability.getSourceId() == null) {
    logger.error(""String_Node_Str"" + game.getTurnNum() + ""String_Node_Str""+ ability.getRule());
    return false;
  }
  Card card=game.getCard(ability.getSourceId());
  if (card != null) {
    if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.CAST_SPELL,ability.getId(),ability.getSourceId(),playerId),ability)) {
      int bookmark=game.bookmarkState();
      Zone fromZone=game.getState().getZone(card.getMainCard().getId());
      card.cast(game,fromZone,ability,playerId);
      Spell spell=game.getStack().getSpell(ability.getId());
      if (spell == null) {
        logger.error(""String_Node_Str"" + ability.getRule());
        return false;
      }
      if (ability.getSourceId().equals(getCastSourceIdWithAlternateMana())) {
        Ability spellAbility=spell.getSpellAbility();
        ManaCosts alternateCosts=getCastSourceIdManaCosts();
        Costs<Cost> costs=getCastSourceIdCosts();
        if (alternateCosts == null) {
          noMana=true;
        }
 else {
          spellAbility.getManaCosts().clear();
          spellAbility.getManaCostsToPay().clear();
          spellAbility.getManaCosts().add(alternateCosts.copy());
          spellAbility.getManaCostsToPay().add(alternateCosts.copy());
        }
        spellAbility.getCosts().clear();
        if (costs != null) {
          spellAbility.getCosts().addAll(costs);
        }
      }
      setCastSourceIdWithAlternateMana(null,null,null);
      GameEvent event=GameEvent.getEvent(GameEvent.EventType.CAST_SPELL,spell.getSpellAbility().getId(),spell.getSpellAbility().getSourceId(),playerId);
      game.fireEvent(event);
      if (spell.activate(game,noMana)) {
        event=GameEvent.getEvent(GameEvent.EventType.SPELL_CAST,spell.getSpellAbility().getId(),spell.getSpellAbility().getSourceId(),playerId);
        event.setZone(fromZone);
        game.fireEvent(event);
        if (!game.isSimulation()) {
          game.informPlayers(getLogName() + spell.getActivatedMessage(game));
        }
        game.removeBookmark(bookmark);
        resetStoredBookmark(game);
        return true;
      }
      restoreState(bookmark,ability.getRule(),game);
    }
  }
  return false;
}",0.9927826784282278
157908,"@Override public boolean apply(Game game,Ability source){
  UUID exileId=source.getSourceId();
  ExileZone exile=game.getExile().getExileZone(exileId);
  if (exile != null) {
    exile=exile.copy();
    for (    UUID cardId : exile) {
      Card card=game.getCard(cardId);
      card.putOntoBattlefield(game,Zone.EXILED,source.getSourceId(),card.getOwnerId());
    }
    game.getExile().getExileZone(exileId).clear();
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (sourceObject != null && controller != null) {
    Permanent permanentLeftBattlefield=(Permanent)getValue(""String_Node_Str"");
    if (permanentLeftBattlefield == null) {
      Logger.getLogger(ReturnFromExileForSourceEffect.class).error(""String_Node_Str"" + sourceObject.getName());
      return false;
    }
    ExileZone exile=game.getExile().getExileZone(CardUtil.getExileZoneId(game,source.getSourceId(),permanentLeftBattlefield.getZoneChangeCounter(game)));
    if (exile != null) {
      controller.moveCards(exile.getCards(game),Zone.BATTLEFIELD,source,game,false,false,true,null);
    }
    return true;
  }
  return false;
}",0.2899921197793538
157909,"@Override public boolean apply(Game game,Ability source){
  Permanent targetCreature=game.getPermanent(source.getFirstTarget());
  if (targetCreature != null) {
    int toughness=targetCreature.getToughness().getBaseValue();
    game.addEffect(new SetPowerToughnessTargetEffect(0,toughness,Duration.EndOfTurn),source);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent targetCreature=game.getPermanent(source.getFirstTarget());
  if (targetCreature != null) {
    int toughness=targetCreature.getToughness().getBaseValueModified();
    game.addEffect(new SetPowerToughnessTargetEffect(0,toughness,Duration.EndOfTurn),source);
    return true;
  }
  return false;
}",0.9889196675900276
157910,"public QuicksilverFountain(final QuicksilverFountain card){
  super(card);
}","public QuicksilverFountain(final QuicksilverFountain card){
  super(card);
  this.originalId=card.originalId;
}",0.8128342245989305
157911,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    int amount=game.getBattlefield().countAll(dragonFilter,controller.getId(),game);
    if (amount > 0) {
      Permanent targetCreature=((FixedTarget)getTargetPointer()).getTargetedPermanentOrLKIBattlefield(game);
      if (targetCreature != null) {
        targetCreature.damage(amount,getTargetPointer().getFirst(game,source),game,false,true);
      }
 else {
        Player player=game.getPlayer(source.getTargets().getFirstTarget());
        if (player != null) {
          player.damage(amount,getTargetPointer().getFirst(game,source),game,false,true);
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Permanent damageSource=(Permanent)getValue(""String_Node_Str"");
    int amount=game.getBattlefield().countAll(dragonFilter,controller.getId(),game);
    if (amount > 0) {
      Permanent targetCreature=game.getPermanent(getTargetPointer().getFirst(game,source));
      if (targetCreature != null) {
        targetCreature.damage(amount,damageSource.getId(),game,false,true);
      }
 else {
        Player player=game.getPlayer(source.getTargets().getFirstTarget());
        if (player != null) {
          player.damage(amount,damageSource.getId(),game,false,true);
        }
      }
    }
    return true;
  }
  return false;
}",0.7858064516129032
157912,"@Override public boolean checkTrigger(GameEvent event,Game game){
  UUID targetId=event.getTargetId();
  Permanent permanent=game.getPermanent(targetId);
  if (permanent != null && filter.match(permanent,getSourceId(),getControllerId(),game)) {
    if (setTargetPointer != SetTargetPointer.NONE) {
      for (      Effect effect : this.getEffects()) {
switch (setTargetPointer) {
case PERMANENT:
          effect.setTargetPointer(new FixedTarget(permanent,game));
        break;
case PLAYER:
      effect.setTargetPointer(new FixedTarget(permanent.getControllerId()));
    break;
}
}
}
return true;
}
return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  UUID targetId=event.getTargetId();
  Permanent permanent=game.getPermanent(targetId);
  if (permanent != null && filter.match(permanent,getSourceId(),getControllerId(),game)) {
    for (    Effect effect : this.getEffects()) {
      effect.setValue(""String_Node_Str"",permanent);
    }
    if (setTargetPointer != SetTargetPointer.NONE) {
      for (      Effect effect : this.getEffects()) {
switch (setTargetPointer) {
case PERMANENT:
          effect.setTargetPointer(new FixedTarget(permanent,game));
        break;
case PLAYER:
      effect.setTargetPointer(new FixedTarget(permanent.getControllerId()));
    break;
}
}
}
return true;
}
return false;
}",0.9194029850746268
157913,"@Override public boolean apply(Game game,Ability source){
  Effect effect=new ReturnToHandSourceEffect(false,true);
  effect.setText(""String_Node_Str"");
  DelayedTriggeredAbility delayedAbility=new AtTheBeginOfNextEndStepDelayedTriggeredAbility(effect);
  game.addDelayedTriggeredAbility(delayedAbility,source);
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Effect effect=new ReturnToHandTargetEffect();
  effect.setText(""String_Node_Str"");
  effect.setTargetPointer(new FixedTarget(source.getSourceId(),source.getSourceObjectZoneChangeCounter()));
  DelayedTriggeredAbility delayedAbility=new AtTheBeginOfNextEndStepDelayedTriggeredAbility(effect);
  game.addDelayedTriggeredAbility(delayedAbility,source);
  return true;
}",0.8275862068965517
157914,"@Override public boolean apply(Game game,Ability source){
  Effect effect=new ReturnToHandSourceEffect(false,true);
  effect.setText(""String_Node_Str"");
  DelayedTriggeredAbility delayedAbility=new AtTheBeginOfNextEndStepDelayedTriggeredAbility(effect);
  game.addDelayedTriggeredAbility(delayedAbility,source);
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Effect effect=new ReturnToHandTargetEffect();
  effect.setText(""String_Node_Str"");
  effect.setTargetPointer(new FixedTarget(source.getSourceId(),source.getSourceObjectZoneChangeCounter()));
  DelayedTriggeredAbility delayedAbility=new AtTheBeginOfNextEndStepDelayedTriggeredAbility(effect);
  game.addDelayedTriggeredAbility(delayedAbility,source);
  return true;
}",0.8275862068965517
157915,"@Override public boolean apply(Game game,Ability source){
  Effect effect=new ReturnToHandSourceEffect(false,true);
  effect.setText(""String_Node_Str"");
  DelayedTriggeredAbility delayedAbility=new AtTheBeginOfNextEndStepDelayedTriggeredAbility(effect);
  game.addDelayedTriggeredAbility(delayedAbility,source);
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Effect effect=new ReturnToHandTargetEffect();
  effect.setText(""String_Node_Str"");
  effect.setTargetPointer(new FixedTarget(source.getSourceId(),source.getSourceObjectZoneChangeCounter()));
  DelayedTriggeredAbility delayedAbility=new AtTheBeginOfNextEndStepDelayedTriggeredAbility(effect);
  game.addDelayedTriggeredAbility(delayedAbility,source);
  return true;
}",0.8275862068965517
157916,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (((ZoneChangeEvent)event).isDiesEvent()) {
    Card card=game.getCard(event.getTargetId());
    Player controller=game.getPlayer(getControllerId());
    if (controller != null && card != null && card.isArtifact() && controller.hasOpponent(card.getOwnerId(),game)) {
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (((ZoneChangeEvent)event).isDiesEvent()) {
    Card card=game.getPermanentOrLKIBattlefield(event.getTargetId());
    Player controller=game.getPlayer(getControllerId());
    if (controller != null && card != null && card.isArtifact() && controller.hasOpponent(card.getOwnerId(),game)) {
      return true;
    }
  }
  return false;
}",0.96569250317662
157917,"@Override public boolean isInUseableZone(Game game,MageObject source,GameEvent event){
  if (event.getTargetId().equals(getSourceId()) && event.getSourceId().equals(getSourceId())) {
    if (!this.hasSourceObjectAbility(game,source,event)) {
      return false;
    }
    return true;
  }
  return super.isInUseableZone(game,source,event);
}","@Override public boolean isInUseableZone(Game game,MageObject source,GameEvent event){
  if (event.getTargetId().equals(getSourceId()) && event.getSourceId().equals(getSourceId())) {
    if (!this.hasSourceObjectAbility(game,source,event)) {
      return false;
    }
    this.setControllerId(event.getPlayerId());
    return true;
  }
  return super.isInUseableZone(game,source,event);
}",0.9053497942386832
157918,"@Override public void init(Ability source,Game game){
  super.init(source,game);
  if (affectedObjectsSet) {
    Permanent equipment=game.getPermanentOrLKIBattlefield(source.getSourceId());
    if (equipment != null && equipment.getAttachedTo() != null) {
      this.setTargetPointer(new FixedTarget(equipment.getAttachedTo(),game.getState().getZoneChangeCounter(equipment.getAttachedTo())));
    }
  }
}","@Override public void init(Ability source,Game game){
  super.init(source,game);
  if (lockedIn) {
    power=new StaticValue(power.calculate(game,source,this));
    toughness=new StaticValue(toughness.calculate(game,source,this));
  }
  if (affectedObjectsSet) {
    Permanent equipment=game.getPermanentOrLKIBattlefield(source.getSourceId());
    if (equipment != null && equipment.getAttachedTo() != null) {
      this.setTargetPointer(new FixedTarget(equipment.getAttachedTo(),game.getState().getZoneChangeCounter(equipment.getAttachedTo())));
    }
  }
}",0.83991683991684
157919,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    int amount=game.getBattlefield().countAll(dragonFilter,controller.getId(),game);
    if (amount > 0) {
      Permanent targetCreature=game.getPermanent(source.getTargets().getFirstTarget());
      if (targetCreature != null) {
        targetCreature.damage(amount,getTargetPointer().getFirst(game,source),game,false,true);
      }
 else {
        Player player=game.getPlayer(source.getTargets().getFirstTarget());
        if (player != null) {
          player.damage(amount,getTargetPointer().getFirst(game,source),game,false,true);
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    int amount=game.getBattlefield().countAll(dragonFilter,controller.getId(),game);
    if (amount > 0) {
      Permanent targetCreature=((FixedTarget)getTargetPointer()).getTargetedPermanentOrLKIBattlefield(game);
      if (targetCreature != null) {
        targetCreature.damage(amount,getTargetPointer().getFirst(game,source),game,false,true);
      }
 else {
        Player player=game.getPlayer(source.getTargets().getFirstTarget());
        if (player != null) {
          player.damage(amount,getTargetPointer().getFirst(game,source),game,false,true);
        }
      }
    }
    return true;
  }
  return false;
}",0.9321922317314022
157920,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanentOrLKIBattlefield(getTargetPointer().getFirst(game,source));
  if (permanent != null) {
    PutTokenOntoBattlefieldCopyTargetEffect effect=new PutTokenOntoBattlefieldCopyTargetEffect(null,null,true);
    effect.setTargetPointer(getTargetPointer());
    if (effect.apply(game,source)) {
      for (      Permanent tokenPermanent : effect.getAddedPermanent()) {
        ExileTargetEffect exileEffect=new ExileTargetEffect();
        exileEffect.setTargetPointer(new FixedTarget(tokenPermanent,game));
        DelayedTriggeredAbility delayedAbility=new AtTheBeginOfNextEndStepDelayedTriggeredAbility(exileEffect);
        game.addDelayedTriggeredAbility(delayedAbility,source);
      }
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=((FixedTarget)getTargetPointer()).getTargetedPermanentOrLKIBattlefield(game);
  if (permanent != null) {
    PutTokenOntoBattlefieldCopyTargetEffect effect=new PutTokenOntoBattlefieldCopyTargetEffect(null,null,true);
    effect.setTargetPointer(getTargetPointer());
    if (effect.apply(game,source)) {
      for (      Permanent tokenPermanent : effect.getAddedPermanent()) {
        ExileTargetEffect exileEffect=new ExileTargetEffect();
        exileEffect.setTargetPointer(new FixedTarget(tokenPermanent,game));
        DelayedTriggeredAbility delayedAbility=new AtTheBeginOfNextEndStepDelayedTriggeredAbility(exileEffect);
        game.addDelayedTriggeredAbility(delayedAbility,source);
      }
      return true;
    }
  }
  return false;
}",0.2241066020593579
157921,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanentOrLKIBattlefield(getTargetPointer().getFirst(game,source));
  if (permanent != null) {
    PutTokenOntoBattlefieldCopyTargetEffect effect=new PutTokenOntoBattlefieldCopyTargetEffect(null,null,true);
    effect.setTargetPointer(getTargetPointer());
    if (effect.apply(game,source)) {
      for (      Permanent tokenPermanent : effect.getAddedPermanent()) {
        ExileTargetEffect exileEffect=new ExileTargetEffect();
        exileEffect.setTargetPointer(new FixedTarget(tokenPermanent,game));
        DelayedTriggeredAbility delayedAbility=new AtTheBeginOfNextEndStepDelayedTriggeredAbility(exileEffect);
        game.addDelayedTriggeredAbility(delayedAbility,source);
      }
      return true;
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=((FixedTarget)getTargetPointer()).getTargetedPermanentOrLKIBattlefield(game);
  if (permanent != null) {
    PutTokenOntoBattlefieldCopyTargetEffect effect=new PutTokenOntoBattlefieldCopyTargetEffect(null,null,true);
    effect.setTargetPointer(getTargetPointer());
    if (effect.apply(game,source)) {
      for (      Permanent tokenPermanent : effect.getAddedPermanent()) {
        ExileTargetEffect exileEffect=new ExileTargetEffect();
        exileEffect.setTargetPointer(new FixedTarget(tokenPermanent,game));
        DelayedTriggeredAbility delayedAbility=new AtTheBeginOfNextEndStepDelayedTriggeredAbility(exileEffect);
        game.addDelayedTriggeredAbility(delayedAbility,source);
      }
      return true;
    }
  }
  return false;
}",0.2241066020593579
157922,"public int calculate(Game game,UUID controllerId){
  PlayerLostLifeWatcher watcher=(PlayerLostLifeWatcher)game.getState().getWatchers().get(PlayerLostLifeWatcher.class.getSimpleName());
  if (watcher != null) {
    int amountLifeLost=0;
    for (    UUID opponentId : game.getOpponents(controllerId)) {
      amountLifeLost+=watcher.getLiveLost(opponentId);
    }
    return amountLifeLost;
  }
  return 0;
}","public int calculate(Game game,UUID controllerId){
  PlayerLostLifeWatcher watcher=(PlayerLostLifeWatcher)game.getState().getWatchers().get(PlayerLostLifeWatcher.class.getSimpleName());
  if (watcher != null) {
    return watcher.getAllOppLifeLost(controllerId);
  }
  return 0;
}",0.6366279069767442
157923,"@Override public boolean checkTrigger(GameEvent event,Game game){
  ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
  if (zEvent.getFromZone() == Zone.BATTLEFIELD && zEvent.getToZone() == Zone.GRAVEYARD) {
    if (zEvent.getTarget() != null && zEvent.getTarget().getOwnerId().equals(this.getControllerId()) && zEvent.getTarget().isCreature() && !zEvent.getTarget().getId().equals(this.getSourceId())) {
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
  for (  Zone z : Zone.values()) {
    if (game.getShortLivingLKI(sourceId,z) && !z.equals(Zone.GRAVEYARD)) {
      return false;
    }
  }
  if (zEvent.getFromZone() == Zone.BATTLEFIELD && zEvent.getToZone() == Zone.GRAVEYARD) {
    if (zEvent.getTarget() != null && zEvent.getTarget().getOwnerId().equals(this.getControllerId()) && zEvent.getTarget().isCreature() && !zEvent.getTarget().getId().equals(this.getSourceId())) {
      return true;
    }
  }
  return false;
}",0.7374517374517374
157924,"@Override public boolean checkIfMatchEnds(){
  int activePlayers=0;
  MatchPlayer matchWinner=null;
  for (  MatchPlayer matchPlayer : players) {
    if (!matchPlayer.hasQuit()) {
      if (matchPlayer.getDeck() == null) {
        logger.error(""String_Node_Str"" + this.getId() + ""String_Node_Str""+ matchPlayer.getName());
        matchPlayer.setQuit(true);
      }
 else {
        activePlayers++;
        matchWinner=matchPlayer;
      }
    }
    if (matchPlayer.getWins() >= options.getWinsNeeded()) {
      matchPlayer.setMatchWinner(true);
      endTime=new Date();
      return true;
    }
  }
  if (activePlayers < 2) {
    if (matchWinner != null) {
      matchWinner.setMatchWinner(true);
    }
    endTime=new Date();
    return true;
  }
  return false;
}","@Override public boolean checkIfMatchEnds(){
  int activePlayers=0;
  MatchPlayer matchWinner=null;
  for (  MatchPlayer matchPlayer : players) {
    if (!matchPlayer.hasQuit()) {
      activePlayers++;
      matchWinner=matchPlayer;
    }
    if (matchPlayer.getWins() >= options.getWinsNeeded()) {
      matchPlayer.setMatchWinner(true);
      endTime=new Date();
      return true;
    }
  }
  if (activePlayers < 2) {
    if (matchWinner != null) {
      matchWinner.setMatchWinner(true);
    }
    endTime=new Date();
    return true;
  }
  return false;
}",0.7370007535795027
157925,"@Override public CurseOfDisturbanceTriggeredAbility copy(){
  return new CurseOfDisturbanceTriggeredAbility(this);
}","@Override public CurseOfDisturbanceEffect copy(){
  return new CurseOfDisturbanceEffect(this);
}",0.8301886792452831
157926,"@Override public CurseOfOpulenceTriggeredAbility copy(){
  return new CurseOfOpulenceTriggeredAbility(this);
}","@Override public CurseOfOpulenceEffect copy(){
  return new CurseOfOpulenceEffect(this);
}",0.82
157927,"@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.DAMAGED_PLAYER) {
    DamagedPlayerEvent damageEvent=(DamagedPlayerEvent)event;
    UUID damagedPlayerId=game.getCombat().getDefenderId(sourceId);
    UUID you=this.getControllerId();
    Permanent p=game.getPermanent(event.getSourceId());
    if (damageEvent.isCombatDamage() && p != null) {
      PlayersAttackedLastTurnWatcher watcher=(PlayersAttackedLastTurnWatcher)game.getState().getWatchers().get(PlayersAttackedLastTurnWatcher.class.getSimpleName());
      if (watcher != null && watcher.attackedLastTurn(damagedPlayerId,you)) {
        FilterNonlandPermanent filter=new FilterNonlandPermanent(""String_Node_Str"");
        filter.add(new ControllerIdPredicate(damagedPlayerId));
        this.getTargets().clear();
        TargetPermanent target=new TargetPermanent(filter);
        this.addTarget(target);
        return true;
      }
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  if (event.getType() == EventType.DAMAGED_PLAYER) {
    DamagedPlayerEvent damageEvent=(DamagedPlayerEvent)event;
    UUID damagedPlayerId=game.getCombat().getDefenderId(sourceId);
    UUID you=this.getControllerId();
    Permanent p=game.getPermanent(event.getSourceId());
    if (damageEvent.isCombatDamage() && p != null && p.getId().equals(this.getSourceId())) {
      PlayersAttackedLastTurnWatcher watcher=(PlayersAttackedLastTurnWatcher)game.getState().getWatchers().get(PlayersAttackedLastTurnWatcher.class.getSimpleName());
      if (watcher != null && watcher.attackedLastTurn(damagedPlayerId,you)) {
        FilterNonlandPermanent filter=new FilterNonlandPermanent(""String_Node_Str"");
        filter.add(new ControllerIdPredicate(damagedPlayerId));
        this.getTargets().clear();
        TargetPermanent target=new TargetPermanent(filter);
        this.addTarget(target);
        return true;
      }
    }
  }
  return false;
}",0.9797979797979798
157928,"@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanentOrLKIBattlefield(this.getSourceId());
  UUID controller=this.getControllerId();
  if (enchantment != null && enchantment.getAttachedTo() != null && game.getCombat().getPlayerDefenders(game).contains(enchantment.getAttachedTo())) {
    if (!game.getCombat().getAttackerId().equals(controller)) {
      for (      Effect effect : this.getEffects()) {
        effect.setTargetPointer(new FixedTarget(game.getCombat().getAttackerId()));
      }
    }
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanentOrLKIBattlefield(this.getSourceId());
  if (enchantment != null && enchantment.getAttachedTo() != null && game.getCombat().getPlayerDefenders(game).contains(enchantment.getAttachedTo())) {
    for (    CombatGroup group : game.getCombat().getBlockingGroups()) {
      if (group.getDefenderId().equals(enchantment.getAttachedTo())) {
        this.getEffects().setTargetPointer(new FixedTarget(enchantment.getAttachedTo()));
        return true;
      }
    }
  }
  return false;
}",0.6808149405772496
157929,"public Set<UUID> getDefenders(){
  return defenders;
}","/** 
 * Get all possible defender (players and plainwalkers) That does not mean neccessarly mean that they are really attacked
 * @return
 */
public Set<UUID> getDefenders(){
  return defenders;
}",0.432
157930,"public void sendUserReplay(PlayerAction playerAction,UserRequestMessage userRequestMessage){
switch (playerAction) {
case CLIENT_DOWNLOAD_SYMBOLS:
    Plugins.instance.downloadSymbols();
  break;
case CLIENT_DOWNLOAD_CARD_IMAGES:
DownloadPictures.startDownload(null,missingCards);
break;
case CLIENT_DISCONNECT:
if (SessionHandler.isConnected()) {
endTables();
SessionHandler.disconnect(false);
}
tablesPane.clearChat();
showMessage(""String_Node_Str"");
setWindowTitle();
break;
case CLIENT_QUIT_TOURNAMENT:
SessionHandler.quitTournament(userRequestMessage.getTournamentId());
break;
case CLIENT_QUIT_DRAFT_TOURNAMENT:
SessionHandler.quitDraft(userRequestMessage.getTournamentId());
MageFrame.removeDraft(userRequestMessage.getTournamentId());
break;
case CLIENT_CONCEDE_GAME:
SessionHandler.sendPlayerAction(PlayerAction.CONCEDE,userRequestMessage.getGameId(),null);
break;
case CLIENT_CONCEDE_MATCH:
SessionHandler.quitMatch(userRequestMessage.getGameId());
break;
case CLIENT_STOP_WATCHING:
SessionHandler.stopWatching(userRequestMessage.getGameId());
GamePanel gamePanel=getGame(userRequestMessage.getGameId());
if (gamePanel != null) {
gamePanel.removeGame();
}
removeGame(userRequestMessage.getGameId());
break;
case CLIENT_EXIT:
if (SessionHandler.isConnected()) {
endTables();
SessionHandler.disconnect(false);
}
CardRepository.instance.closeDB();
tablesPane.cleanUp();
Plugins.instance.shutdown();
dispose();
System.exit(0);
break;
case CLIENT_REMOVE_TABLE:
SessionHandler.removeTable(userRequestMessage.getRoomId(),userRequestMessage.getTableId());
break;
case CLIENT_RECONNECT:
if (performConnect(true)) {
enableButtons();
}
break;
case CLIENT_REPLAY_ACTION:
SessionHandler.stopReplay(userRequestMessage.getGameId());
break;
default :
if (SessionHandler.getSession() != null && playerAction != null) {
SessionHandler.sendPlayerAction(playerAction,userRequestMessage.getGameId(),userRequestMessage.getRelatedUserId());
}
}
}","public void sendUserReplay(PlayerAction playerAction,UserRequestMessage userRequestMessage){
switch (playerAction) {
case CLIENT_DOWNLOAD_SYMBOLS:
    Plugins.instance.downloadSymbols();
  break;
case CLIENT_DOWNLOAD_CARD_IMAGES:
DownloadPictures.startDownload(null,missingCards);
break;
case CLIENT_DISCONNECT:
if (SessionHandler.isConnected()) {
SessionHandler.disconnect(false);
}
tablesPane.clearChat();
showMessage(""String_Node_Str"");
setWindowTitle();
break;
case CLIENT_QUIT_TOURNAMENT:
SessionHandler.quitTournament(userRequestMessage.getTournamentId());
break;
case CLIENT_QUIT_DRAFT_TOURNAMENT:
SessionHandler.quitDraft(userRequestMessage.getTournamentId());
MageFrame.removeDraft(userRequestMessage.getTournamentId());
break;
case CLIENT_CONCEDE_GAME:
SessionHandler.sendPlayerAction(PlayerAction.CONCEDE,userRequestMessage.getGameId(),null);
break;
case CLIENT_CONCEDE_MATCH:
SessionHandler.quitMatch(userRequestMessage.getGameId());
break;
case CLIENT_STOP_WATCHING:
SessionHandler.stopWatching(userRequestMessage.getGameId());
GamePanel gamePanel=getGame(userRequestMessage.getGameId());
if (gamePanel != null) {
gamePanel.removeGame();
}
removeGame(userRequestMessage.getGameId());
break;
case CLIENT_EXIT:
if (SessionHandler.isConnected()) {
SessionHandler.disconnect(false);
}
CardRepository.instance.closeDB();
tablesPane.cleanUp();
Plugins.instance.shutdown();
dispose();
System.exit(0);
break;
case CLIENT_REMOVE_TABLE:
SessionHandler.removeTable(userRequestMessage.getRoomId(),userRequestMessage.getTableId());
break;
case CLIENT_RECONNECT:
if (performConnect(true)) {
enableButtons();
}
break;
case CLIENT_REPLAY_ACTION:
SessionHandler.stopReplay(userRequestMessage.getGameId());
break;
default :
if (SessionHandler.getSession() != null && playerAction != null) {
SessionHandler.sendPlayerAction(playerAction,userRequestMessage.getGameId(),userRequestMessage.getRelatedUserId());
}
}
}",0.9932291666666668
157931,"@Override protected Void doInBackground() throws Exception {
  while (!isCancelled()) {
    SessionHandler.getTable(roomId,tableId).ifPresent(this::publish);
    TimeUnit.SECONDS.sleep(1);
  }
  return null;
}","@Override protected Void doInBackground() throws Exception {
  while (!isCancelled()) {
    Optional<TableView> tableView=SessionHandler.getTable(roomId,tableId);
    if (tableView.isPresent()) {
      tableView.ifPresent(this::publish);
    }
 else {
      dialog.closeDialog();
    }
    TimeUnit.SECONDS.sleep(1);
  }
  return null;
}",0.7655677655677655
157932,"public static CombatInfo blockWithGoodTrade(Game game,List<Permanent> attackers,List<Permanent> blockers){
  UUID attackerId=game.getCombat().getAttackerId();
  UUID defenderId=game.getCombat().getDefenders().iterator().next();
  if (attackerId == null || defenderId == null) {
    log.warn(""String_Node_Str"" + attackerId + ' '+ defenderId);
    return new CombatInfo();
  }
  CombatInfo combatInfo=new CombatInfo();
  for (  Permanent attacker : attackers) {
    List<Permanent> possibleBlockers=getPossibleBlockers(game,attacker,blockers);
    List<Permanent> survivedBlockers=getBlockersThatWillSurvive(game,attackerId,defenderId,attacker,possibleBlockers);
    if (!survivedBlockers.isEmpty()) {
      Permanent blocker=getWorstCreature(survivedBlockers);
      combatInfo.addPair(attacker,blocker);
      blockers.remove(blocker);
    }
    if (blockers.isEmpty()) {
      break;
    }
  }
  return combatInfo;
}","public static CombatInfo blockWithGoodTrade(Game game,List<Permanent> attackers,List<Permanent> blockers){
  UUID attackerId=game.getCombat().getAttackingPlayerId();
  UUID defenderId=game.getCombat().getDefenders().iterator().next();
  if (attackerId == null || defenderId == null) {
    log.warn(""String_Node_Str"" + attackerId + ' '+ defenderId);
    return new CombatInfo();
  }
  CombatInfo combatInfo=new CombatInfo();
  for (  Permanent attacker : attackers) {
    List<Permanent> possibleBlockers=getPossibleBlockers(game,attacker,blockers);
    List<Permanent> survivedBlockers=getBlockersThatWillSurvive(game,attackerId,defenderId,attacker,possibleBlockers);
    if (!survivedBlockers.isEmpty()) {
      Permanent blocker=getWorstCreature(survivedBlockers);
      combatInfo.addPair(attacker,blocker);
      blockers.remove(blocker);
    }
    if (blockers.isEmpty()) {
      break;
    }
  }
  return combatInfo;
}",0.9961977186311788
157933,"public static CombatInfo blockWithGoodTrade2(Game game,List<Permanent> attackers,List<Permanent> blockers){
  UUID attackerId=game.getCombat().getAttackerId();
  UUID defenderId=game.getCombat().getDefenders().iterator().next();
  if (attackerId == null || defenderId == null) {
    log.warn(""String_Node_Str"" + attackerId + ' '+ defenderId);
    return new CombatInfo();
  }
  CombatInfo combatInfo=new CombatInfo();
  for (  Permanent attacker : attackers) {
    List<Permanent> possibleBlockers=getPossibleBlockers(game,attacker,blockers);
    List<Permanent> survivedBlockers=getBlockersThatWillSurvive2(game,attackerId,defenderId,attacker,possibleBlockers);
    if (!survivedBlockers.isEmpty()) {
      Permanent blocker=getWorstCreature(survivedBlockers);
      combatInfo.addPair(attacker,blocker);
      blockers.remove(blocker);
    }
    if (blockers.isEmpty()) {
      break;
    }
  }
  return combatInfo;
}","public static CombatInfo blockWithGoodTrade2(Game game,List<Permanent> attackers,List<Permanent> blockers){
  UUID attackerId=game.getCombat().getAttackingPlayerId();
  UUID defenderId=game.getCombat().getDefenders().iterator().next();
  if (attackerId == null || defenderId == null) {
    log.warn(""String_Node_Str"" + attackerId + ' '+ defenderId);
    return new CombatInfo();
  }
  CombatInfo combatInfo=new CombatInfo();
  for (  Permanent attacker : attackers) {
    List<Permanent> possibleBlockers=getPossibleBlockers(game,attacker,blockers);
    List<Permanent> survivedBlockers=getBlockersThatWillSurvive2(game,attackerId,defenderId,attacker,possibleBlockers);
    if (!survivedBlockers.isEmpty()) {
      Permanent blocker=getWorstCreature(survivedBlockers);
      combatInfo.addPair(attacker,blocker);
      blockers.remove(blocker);
    }
    if (blockers.isEmpty()) {
      break;
    }
  }
  return combatInfo;
}",0.9962059620596206
157934,"@Override public boolean checkTrigger(GameEvent event,Game game){
  return game.getCombat().getAttackers().size() >= 2 && game.getCombat().getAttackerId().equals(getControllerId());
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  return game.getCombat().getAttackers().size() >= 2 && game.getCombat().getAttackingPlayerId().equals(getControllerId());
}",0.9812332439678284
157935,"@Override public void adjustTargets(Ability ability,Game game){
  if (this.getAbilities().contains(ability) && ability.getRule().startsWith(""String_Node_Str"")) {
    FilterCreaturePermanent filter=new FilterCreaturePermanent(""String_Node_Str"");
    filter.add(new ControllerIdPredicate(game.getCombat().getAttackerId()));
    ability.getTargets().clear();
    ability.addTarget(new TargetCreaturePermanent(filter));
  }
}","@Override public void adjustTargets(Ability ability,Game game){
  if (this.getAbilities().contains(ability) && ability.getRule().startsWith(""String_Node_Str"")) {
    FilterCreaturePermanent filter=new FilterCreaturePermanent(""String_Node_Str"");
    filter.add(new ControllerIdPredicate(game.getCombat().getAttackingPlayerId()));
    ability.getTargets().clear();
    ability.addTarget(new TargetCreaturePermanent(filter));
  }
}",0.9917550058892816
157936,"@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanentOrLKIBattlefield(this.getSourceId());
  UUID controller=this.getControllerId();
  if (enchantment != null && enchantment.getAttachedTo() != null && game.getCombat().getPlayerDefenders(game).contains(enchantment.getAttachedTo())) {
    if (!game.getCombat().getAttackerId().equals(controller)) {
      for (      Effect effect : this.getEffects()) {
        effect.setTargetPointer(new FixedTarget(game.getCombat().getAttackerId()));
      }
    }
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanentOrLKIBattlefield(getSourceId());
  Player controller=game.getPlayer(getControllerId());
  if (controller != null && enchantment != null && enchantment.getAttachedTo() != null && game.getCombat().getPlayerDefenders(game).contains(enchantment.getAttachedTo())) {
    for (    CombatGroup group : game.getCombat().getBlockingGroups()) {
      if (group.getDefenderId().equals(enchantment.getAttachedTo())) {
        if (controller.hasOpponent(game.getCombat().getAttackingPlayerId(),game)) {
          Effect effect=new UntapAllNonlandsTargetEffect();
          effect.setTargetPointer(new FixedTarget(game.getCombat().getAttackingPlayerId()));
          this.addEffect(effect);
        }
        return true;
      }
    }
  }
  return false;
}",0.4358084663428175
157937,"@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanent(this.getSourceId());
  if (enchantment != null && enchantment.getAttachedTo() != null && game.getCombat().getPlayerDefenders(game).contains(enchantment.getAttachedTo())) {
    for (    Effect effect : this.getEffects()) {
      effect.setTargetPointer(new FixedTarget(game.getCombat().getAttackerId()));
    }
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanent(this.getSourceId());
  if (enchantment != null && enchantment.getAttachedTo() != null && game.getCombat().getPlayerDefenders(game).contains(enchantment.getAttachedTo())) {
    for (    Effect effect : this.getEffects()) {
      effect.setTargetPointer(new FixedTarget(game.getCombat().getAttackingPlayerId()));
    }
    return true;
  }
  return false;
}",0.9923830250272034
157938,"@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanentOrLKIBattlefield(this.getSourceId());
  UUID controller=this.getControllerId();
  if (enchantment != null && enchantment.getAttachedTo() != null && game.getCombat().getPlayerDefenders(game).contains(enchantment.getAttachedTo())) {
    if (!game.getCombat().getAttackerId().equals(controller)) {
      for (      Effect effect : this.getEffects()) {
        effect.setTargetPointer(new FixedTarget(game.getCombat().getAttackerId()));
      }
    }
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanentOrLKIBattlefield(getSourceId());
  Player controller=game.getPlayer(getControllerId());
  if (controller != null && enchantment != null && enchantment.getAttachedTo() != null && game.getCombat().getPlayerDefenders(game).contains(enchantment.getAttachedTo())) {
    for (    CombatGroup group : game.getCombat().getBlockingGroups()) {
      if (group.getDefenderId().equals(enchantment.getAttachedTo())) {
        if (controller.hasOpponent(game.getCombat().getAttackingPlayerId(),game)) {
          Effect effect=new CreateTokenTargetEffect(new ZombieToken());
          effect.setTargetPointer(new FixedTarget(game.getCombat().getAttackingPlayerId()));
          this.addEffect(effect);
        }
        return true;
      }
    }
  }
  return false;
}",0.4225739848589126
157939,"@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanent(this.getSourceId());
  if (enchantment != null && enchantment.getAttachedTo() != null && game.getCombat().getPlayerDefenders(game).contains(enchantment.getAttachedTo())) {
    TargetPermanent target=new TargetPermanent();
    target.setTargetController(game.getCombat().getAttackerId());
    addTarget(target);
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanent(this.getSourceId());
  if (enchantment != null && enchantment.getAttachedTo() != null && game.getCombat().getPlayerDefenders(game).contains(enchantment.getAttachedTo())) {
    TargetPermanent target=new TargetPermanent();
    target.setTargetController(game.getCombat().getAttackingPlayerId());
    addTarget(target);
    return true;
  }
  return false;
}",0.992399565689468
157940,"@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanentOrLKIBattlefield(this.getSourceId());
  if (enchantment != null && enchantment.getAttachedTo() != null && game.getCombat().getPlayerDefenders(game).contains(enchantment.getAttachedTo())) {
    for (    CombatGroup group : game.getCombat().getBlockingGroups()) {
      if (group.getDefenderId().equals(enchantment.getAttachedTo())) {
        this.getEffects().setTargetPointer(new FixedTarget(enchantment.getAttachedTo()));
        return true;
      }
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanentOrLKIBattlefield(getSourceId());
  Player controller=game.getPlayer(getControllerId());
  if (controller != null && enchantment != null && enchantment.getAttachedTo() != null && game.getCombat().getPlayerDefenders(game).contains(enchantment.getAttachedTo())) {
    for (    CombatGroup group : game.getCombat().getBlockingGroups()) {
      if (group.getDefenderId().equals(enchantment.getAttachedTo())) {
        if (controller.hasOpponent(game.getCombat().getAttackingPlayerId(),game)) {
          Effect effect=new CreateTokenTargetEffect(new GoldToken());
          effect.setTargetPointer(new FixedTarget(game.getCombat().getAttackingPlayerId()));
          this.addEffect(effect);
        }
        return true;
      }
    }
  }
  return false;
}",0.6643598615916955
157941,"@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanent(this.getSourceId());
  if (enchantment != null && enchantment.getAttachedTo() != null && game.getCombat().getPlayerDefenders(game).contains(enchantment.getAttachedTo())) {
    for (    Effect effect : this.getEffects()) {
      effect.setTargetPointer(new FixedTarget(game.getCombat().getAttackerId()));
    }
    return true;
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanent(this.getSourceId());
  if (enchantment != null && enchantment.getAttachedTo() != null && game.getCombat().getPlayerDefenders(game).contains(enchantment.getAttachedTo())) {
    for (    Effect effect : this.getEffects()) {
      effect.setTargetPointer(new FixedTarget(game.getCombat().getAttackingPlayerId()));
    }
    return true;
  }
  return false;
}",0.9923830250272034
157942,"@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getFirstTarget());
  if (permanent == null) {
    return false;
  }
  permanent.moveToExile(null,null,source.getSourceId(),game);
  UUID controllerId=permanent.getControllerId();
  for (  UUID opponentId : game.getOpponents(controllerId)) {
    PutTokenOntoBattlefieldCopyTargetEffect effect=new PutTokenOntoBattlefieldCopyTargetEffect(opponentId,null,true);
    effect.setTargetPointer(new FixedTarget(permanent,game));
    effect.apply(game,source);
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Permanent permanent=game.getPermanent(source.getFirstTarget());
  if (permanent == null) {
    return false;
  }
  permanent.moveToExile(null,null,source.getSourceId(),game);
  UUID controllerId=permanent.getControllerId();
  for (  UUID opponentId : game.getOpponents(controllerId)) {
    PutTokenOntoBattlefieldCopyTargetEffect effect=new PutTokenOntoBattlefieldCopyTargetEffect(opponentId,null,false);
    effect.setTargetPointer(new FixedTarget(permanent,game));
    effect.apply(game,source);
  }
  return true;
}",0.993939393939394
157943,"@Override public NemesisOfMortals copy(){
  return new NemesisOfMortals(this);
}","@Override public NemesisOfMortalsCostReducingEffect copy(){
  return new NemesisOfMortalsCostReducingEffect(this);
}",0.8163265306122449
157944,"private Commander2017(){
  super(""String_Node_Str"",""String_Node_Str"",ExpansionSet.buildDate(2017,8,25),SetType.SUPPLEMENTAL);
  this.blockName=""String_Node_Str"";
  cards.add(new SetCardInfo(""String_Node_Str"",2,Rarity.RARE,mage.cards.b.BalanWanderingKnight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",22,Rarity.RARE,mage.cards.b.BloodswornSteward.class));
  cards.add(new SetCardInfo(""String_Node_Str"",30,Rarity.UNCOMMON,mage.cards.c.CurseOfBounty.class));
  cards.add(new SetCardInfo(""String_Node_Str"",16,Rarity.UNCOMMON,mage.cards.c.CurseOfDisturbance.class));
  cards.add(new SetCardInfo(""String_Node_Str"",24,Rarity.UNCOMMON,mage.cards.c.CurseOfOpulence.class));
  cards.add(new SetCardInfo(""String_Node_Str"",9,Rarity.UNCOMMON,mage.cards.c.CurseOfVerbosity.class));
  cards.add(new SetCardInfo(""String_Node_Str"",3,Rarity.UNCOMMON,mage.cards.c.CurseOfVitality.class));
  cards.add(new SetCardInfo(""String_Node_Str"",53,Rarity.UNCOMMON,mage.cards.h.HeraldsHorn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",31,Rarity.RARE,mage.cards.h.HungryLynx.class));
  cards.add(new SetCardInfo(""String_Node_Str"",23,Rarity.RARE,mage.cards.c.CrimsonHonorGuard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",37,Rarity.RARE,mage.cards.f.FracturedIdentity.class));
  cards.add(new SetCardInfo(""String_Node_Str"",44,Rarity.MYTHIC,mage.cards.n.NazahnReveredBladesmith.class));
  cards.add(new SetCardInfo(""String_Node_Str"",45,Rarity.MYTHIC,mage.cards.o.OKagachiVengefulKami.class));
  cards.add(new SetCardInfo(""String_Node_Str"",20,Rarity.RARE,mage.cards.p.PatronOfTheVein.class));
  cards.add(new SetCardInfo(""String_Node_Str"",33,Rarity.RARE,mage.cards.q.QasaliSlingers.class));
  cards.add(new SetCardInfo(""String_Node_Str"",55,Rarity.MYTHIC,mage.cards.r.RamosDragonEngine.class));
  cards.add(new SetCardInfo(""String_Node_Str"",6,Rarity.RARE,mage.cards.s.ScalelordReckoner.class));
  cards.add(new SetCardInfo(""String_Node_Str"",46,Rarity.MYTHIC,mage.cards.t.TaigamOjutaiMaster.class));
  cards.add(new SetCardInfo(""String_Node_Str"",47,Rarity.RARE,mage.cards.t.TaigamSidisisHand.class));
  cards.add(new SetCardInfo(""String_Node_Str"",8,Rarity.RARE,mage.cards.t.TeferisProtection.class));
  cards.add(new SetCardInfo(""String_Node_Str"",34,Rarity.RARE,mage.cards.t.TraverseTheOutlands.class));
  cards.add(new SetCardInfo(""String_Node_Str"",49,Rarity.MYTHIC,mage.cards.w.WasitoraNekoruQueen.class));
  cards.add(new SetCardInfo(""String_Node_Str"",18,Rarity.RARE,mage.cards.w.WasitoraNekoruQueen.class));
}","private Commander2017(){
  super(""String_Node_Str"",""String_Node_Str"",ExpansionSet.buildDate(2017,8,25),SetType.SUPPLEMENTAL);
  this.blockName=""String_Node_Str"";
  cards.add(new SetCardInfo(""String_Node_Str"",2,Rarity.RARE,mage.cards.b.BalanWanderingKnight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",22,Rarity.RARE,mage.cards.b.BloodswornSteward.class));
  cards.add(new SetCardInfo(""String_Node_Str"",23,Rarity.RARE,mage.cards.c.CrimsonHonorGuard.class));
  cards.add(new SetCardInfo(""String_Node_Str"",30,Rarity.UNCOMMON,mage.cards.c.CurseOfBounty.class));
  cards.add(new SetCardInfo(""String_Node_Str"",16,Rarity.UNCOMMON,mage.cards.c.CurseOfDisturbance.class));
  cards.add(new SetCardInfo(""String_Node_Str"",24,Rarity.UNCOMMON,mage.cards.c.CurseOfOpulence.class));
  cards.add(new SetCardInfo(""String_Node_Str"",9,Rarity.UNCOMMON,mage.cards.c.CurseOfVerbosity.class));
  cards.add(new SetCardInfo(""String_Node_Str"",3,Rarity.UNCOMMON,mage.cards.c.CurseOfVitality.class));
  cards.add(new SetCardInfo(""String_Node_Str"",53,Rarity.UNCOMMON,mage.cards.h.HeraldsHorn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",31,Rarity.RARE,mage.cards.h.HungryLynx.class));
  cards.add(new SetCardInfo(""String_Node_Str"",37,Rarity.RARE,mage.cards.f.FracturedIdentity.class));
  cards.add(new SetCardInfo(""String_Node_Str"",18,Rarity.RARE,mage.cards.k.KindredDominance.class));
  cards.add(new SetCardInfo(""String_Node_Str"",44,Rarity.MYTHIC,mage.cards.n.NazahnReveredBladesmith.class));
  cards.add(new SetCardInfo(""String_Node_Str"",45,Rarity.MYTHIC,mage.cards.o.OKagachiVengefulKami.class));
  cards.add(new SetCardInfo(""String_Node_Str"",20,Rarity.RARE,mage.cards.p.PatronOfTheVein.class));
  cards.add(new SetCardInfo(""String_Node_Str"",33,Rarity.RARE,mage.cards.q.QasaliSlingers.class));
  cards.add(new SetCardInfo(""String_Node_Str"",55,Rarity.MYTHIC,mage.cards.r.RamosDragonEngine.class));
  cards.add(new SetCardInfo(""String_Node_Str"",6,Rarity.RARE,mage.cards.s.ScalelordReckoner.class));
  cards.add(new SetCardInfo(""String_Node_Str"",46,Rarity.MYTHIC,mage.cards.t.TaigamOjutaiMaster.class));
  cards.add(new SetCardInfo(""String_Node_Str"",47,Rarity.RARE,mage.cards.t.TaigamSidisisHand.class));
  cards.add(new SetCardInfo(""String_Node_Str"",8,Rarity.RARE,mage.cards.t.TeferisProtection.class));
  cards.add(new SetCardInfo(""String_Node_Str"",34,Rarity.RARE,mage.cards.t.TraverseTheOutlands.class));
  cards.add(new SetCardInfo(""String_Node_Str"",49,Rarity.MYTHIC,mage.cards.w.WasitoraNekoruQueen.class));
}",0.9435467783762218
157945,"@Override public boolean apply(Game game,Ability source){
  Permanent creature=game.getPermanent(targetPointer.getFirst(game,source));
  if (creature != null) {
    ObjectColor color=creature.getColor(game);
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(FILTER,source.getControllerId(),game)) {
      if (permanent.getColor(game).shares(color) && !Objects.equals(permanent,creature)) {
        permanent.destroy(source.getSourceId(),game,true);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent creature=game.getPermanentOrLKIBattlefield(targetPointer.getFirst(game,source));
  if (creature != null) {
    ObjectColor color=creature.getColor(game);
    for (    Permanent permanent : game.getBattlefield().getActivePermanents(FILTER,source.getControllerId(),game)) {
      if (permanent.getColor(game).shares(color) && !Objects.equals(permanent,creature)) {
        permanent.destroy(source.getSourceId(),game,true);
      }
    }
    return true;
  }
  return false;
}",0.9850746268656716
157946,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent sourcePermanent=game.getPermanent(source.getSourceId());
  if (controller != null && sourcePermanent != null) {
    String message=""String_Node_Str"";
    message=CardUtil.replaceSourceName(message,sourcePermanent.getLogName());
    message=Character.toUpperCase(message.charAt(0)) + message.substring(1);
    if (cost.canPay(source,source.getSourceId(),source.getControllerId(),game) && controller.chooseUse(Outcome.Benefit,message,source,game)) {
      cost.clearPaid();
      if (cost.pay(source,game,source.getSourceId(),source.getControllerId(),false,null)) {
        return true;
      }
    }
    if (source.getSourceObjectZoneChangeCounter() == game.getState().getZoneChangeCounter(source.getSourceId()) && game.getState().getZone(source.getSourceId()) == Zone.BATTLEFIELD) {
      ContinuousEffect effect=new GiveControlEffect();
      effect.setTargetPointer(new FixedTarget(source.getFirstTarget()));
      game.addEffect(effect,source);
      game.informPlayers(game.getPlayer(source.getFirstTarget()).getLogName() + ""String_Node_Str"" + sourcePermanent.getIdName());
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Permanent sourcePermanent=game.getPermanentOrLKIBattlefield(source.getSourceId());
  if (controller != null && sourcePermanent != null) {
    String message=""String_Node_Str"";
    message=CardUtil.replaceSourceName(message,sourcePermanent.getLogName());
    message=Character.toUpperCase(message.charAt(0)) + message.substring(1);
    if (cost.canPay(source,source.getSourceId(),source.getControllerId(),game) && controller.chooseUse(Outcome.Benefit,message,source,game)) {
      cost.clearPaid();
      if (cost.pay(source,game,source.getSourceId(),source.getControllerId(),false,null)) {
        return true;
      }
    }
    if (source.getSourceObjectZoneChangeCounter() == game.getState().getZoneChangeCounter(source.getSourceId()) && game.getState().getZone(source.getSourceId()) == Zone.BATTLEFIELD) {
      ContinuousEffect effect=new GiveControlEffect();
      effect.setTargetPointer(new FixedTarget(source.getFirstTarget()));
      game.addEffect(effect,source);
      game.informPlayers(game.getPlayer(source.getFirstTarget()).getLogName() + ""String_Node_Str"" + sourcePermanent.getIdName());
    }
    return true;
  }
  return false;
}",0.993660855784469
157947,"@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  for (  UUID playerId : game.getOpponents(source.getControllerId())) {
    Player opponent=game.getPlayer(playerId);
    if (opponent != null && opponent.getHand().isEmpty()) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(Ability abilityToModify,Ability source,Game game){
  if (abilityToModify.getSourceId().equals(source.getSourceId())) {
    for (    UUID playerId : game.getOpponents(source.getControllerId())) {
      Player opponent=game.getPlayer(playerId);
      if (opponent != null && opponent.getHand().isEmpty()) {
        return true;
      }
    }
  }
  return false;
}",0.8632478632478633
157948,"@Test public void testJelevaCastingSavageBeatingFromExile(){
  String jeleva=""String_Node_Str"";
  String savageBeating=""String_Node_Str"";
  skipInitShuffling();
  addCard(Zone.LIBRARY,playerA,savageBeating);
  addCard(Zone.HAND,playerA,jeleva);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",3);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",3);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",3);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,jeleva);
  attack(3,playerA,jeleva);
  setChoice(playerA,""String_Node_Str"");
  setChoice(playerA,savageBeating);
  setChoice(playerA,""String_Node_Str"");
  setModeChoice(playerA,""String_Node_Str"");
  setStopAt(3,PhaseStep.END_COMBAT);
  execute();
  assertTapped(jeleva,true);
  assertLife(playerB,18);
  assertAbility(playerA,jeleva,DoubleStrikeAbility.getInstance(),true);
  assertGraveyardCount(playerA,savageBeating,1);
}","@Test public void testJelevaCastingSavageBeatingFromExile(){
  String jeleva=""String_Node_Str"";
  String savageBeating=""String_Node_Str"";
  skipInitShuffling();
  addCard(Zone.LIBRARY,playerA,savageBeating,2);
  addCard(Zone.HAND,playerA,jeleva);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",3);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",3);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",3);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,jeleva);
  attack(3,playerA,jeleva);
  setChoice(playerA,""String_Node_Str"");
  setChoice(playerA,savageBeating);
  setChoice(playerA,""String_Node_Str"");
  setModeChoice(playerA,""String_Node_Str"");
  setStopAt(3,PhaseStep.END_COMBAT);
  execute();
  assertGraveyardCount(playerA,savageBeating,1);
  assertTapped(jeleva,true);
  assertLife(playerB,18);
  assertAbility(playerA,jeleva,DoubleStrikeAbility.getInstance(),true);
}",0.9436936936936936
157949,"@Test public void testTokenCreatedOnlyIfTargetDies(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",3);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",1);
  activateAbility(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"",""String_Node_Str"");
  setStopAt(3,PhaseStep.BEGIN_COMBAT);
  execute();
  assertPermanentCount(playerA,5);
  assertPermanentCount(playerB,0);
}","@Test public void testTokenCreatedOnlyIfTargetDies(){
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",3);
  addCard(Zone.BATTLEFIELD,playerA,""String_Node_Str"",1);
  addCard(Zone.BATTLEFIELD,playerB,""String_Node_Str"",1);
  activateAbility(3,PhaseStep.PRECOMBAT_MAIN,playerA,""String_Node_Str"",""String_Node_Str"");
  setStopAt(3,PhaseStep.BEGIN_COMBAT);
  execute();
  assertPermanentCount(playerA,5);
  assertPermanentCount(playerA,""String_Node_Str"",0);
  assertPermanentCount(playerB,0);
}",0.9473684210526316
157950,"@Override public boolean destroy(UUID sourceId,Game game,boolean noRegen){
  if (abilities.containsKey(IndestructibleAbility.getInstance().getId())) {
    return false;
  }
  if (!game.replaceEvent(GameEvent.getEvent(EventType.DESTROY_PERMANENT,objectId,sourceId,controllerId,noRegen ? 1 : 0))) {
    if (moveToZone(Zone.GRAVEYARD,sourceId,game,false)) {
      if (!game.isSimulation()) {
        String logName;
        Card card=game.getCard(this.getId());
        if (card != null) {
          logName=card.getLogName();
        }
 else {
          logName=this.getLogName();
        }
        if (this.isCreature()) {
          game.informPlayers(logName + ""String_Node_Str"");
        }
 else {
          game.informPlayers(logName + ""String_Node_Str"");
        }
      }
      game.fireEvent(GameEvent.getEvent(EventType.DESTROYED_PERMANENT,objectId,sourceId,controllerId));
    }
    return true;
  }
  return false;
}","@Override public boolean destroy(UUID sourceId,Game game,boolean noRegen){
  if (abilities.containsKey(IndestructibleAbility.getInstance().getId())) {
    return false;
  }
  if (!game.replaceEvent(GameEvent.getEvent(EventType.DESTROY_PERMANENT,objectId,sourceId,controllerId,noRegen ? 1 : 0))) {
    if (moveToZone(Zone.GRAVEYARD,sourceId,game,false)) {
      if (!game.isSimulation()) {
        String logName;
        Card card=game.getCard(this.getId());
        if (card != null) {
          logName=card.getLogName();
        }
 else {
          logName=this.getLogName();
        }
        if (this.isCreature()) {
          game.informPlayers(logName + ""String_Node_Str"");
        }
 else {
          game.informPlayers(logName + ""String_Node_Str"");
        }
      }
      game.fireEvent(GameEvent.getEvent(EventType.DESTROYED_PERMANENT,objectId,sourceId,controllerId));
      return true;
    }
  }
  return false;
}",0.9643243243243244
157951,"@Override public boolean isInUseableZone(Game game,MageObject source,GameEvent event){
  Permanent before=((ZoneChangeEvent)event).getTarget();
  if (before == null) {
    return false;
  }
  if (!(before instanceof PermanentToken) && !this.hasSourceObjectAbility(game,before,event)) {
    return false;
  }
  if (before.getZoneChangeCounter(game) + 1 == game.getState().getZoneChangeCounter(source.getId())) {
    Zone after=game.getState().getZone(sourceId);
    return after != null && Zone.GRAVEYARD.match(after);
  }
 else {
    return true;
  }
}","@Override public boolean isInUseableZone(Game game,MageObject source,GameEvent event){
  Permanent before=((ZoneChangeEvent)event).getTarget();
  if (before == null) {
    return false;
  }
  if (!(before instanceof PermanentToken) && !this.hasSourceObjectAbility(game,before,event)) {
    return false;
  }
  if (before.getZoneChangeCounter(game) + 1 == game.getState().getZoneChangeCounter(sourceId)) {
    Zone after=game.getState().getZone(sourceId);
    return after != null && Zone.GRAVEYARD.match(after);
  }
 else {
    return true;
  }
}",0.994535519125683
157952,"@Override protected void setRuntimeData(Ability source,Game game){
  String s=(String)game.getState().getValue(source.getSourceId() + ""String_Node_Str"");
  subtype=SubType.byDescription(s);
}","@Override protected void setRuntimeData(Ability source,Game game){
  String s=(String)game.getState().getValue(source.getSourceId() + ""String_Node_Str"");
  if (subtype != null) {
    subtype=SubType.byDescription(s);
  }
 else {
    discard();
  }
}",0.8363636363636363
157953,Set<DependencyType> getDependencyTypes();,EnumSet<DependencyType> getDependencyTypes();,0.9534883720930232
157954,"/** 
 * We create a timer that will run every 250 ms individually for a player decreasing his internal game counter. Later on this counter is used to get time left to play the whole match. <p> What we also do here is passing Action to PriorityTimer that is the action that will be executed once game timer is over.
 * @param playerId
 * @param count
 * @return
 */
private PriorityTimer createPlayerTimer(UUID playerId,int count){
  final UUID initPlayerId=playerId;
  long delayMs=250L;
  Action executeOnNoTimeLeft=() -> {
    game.timerTimeout(initPlayerId);
    logger.debug(""String_Node_Str"" + initPlayerId + ""String_Node_Str"");
  }
;
  PriorityTimer timer=new PriorityTimer(count,delayMs,executeOnNoTimeLeft);
  timers.put(playerId,timer);
  timer.init(game.getId());
  return timer;
}","/** 
 * We create a timer that will run every 250 ms individually for a player decreasing his internal game counter. Later on this counter is used to get time left to play the whole match. <p> What we also do here is passing Action to PriorityTimer that is the action that will be executed once game timer is over.
 * @param playerId
 * @param count
 * @return
 */
private PriorityTimer createPlayerTimer(UUID playerId,int count){
  final UUID initPlayerId=playerId;
  long delayMs=250L;
  Action executeOnNoTimeLeft=() -> {
    game.timerTimeout(initPlayerId);
    logger.debug(""String_Node_Str"" + initPlayerId + ""String_Node_Str"");
  }
;
  PriorityTimer timer=new PriorityTimer(count,delayMs,executeOnNoTimeLeft);
  timer.init(game.getId());
  timers.put(playerId,timer);
  return timer;
}",0.9620733249051832
157955,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    UUID creatureId=(UUID)this.getValue(""String_Node_Str"");
    Permanent creature=game.getPermanentOrLKIBattlefield(creatureId);
    if (creature != null) {
      Player opponent=game.getPlayer(source.getFirstTarget());
      boolean paid=false;
      if (opponent != null) {
        Cost cost=new PayLifeCost(3);
        if (cost.canPay(source,source.getSourceId(),opponent.getId(),game) && opponent.chooseUse(outcome,new StringBuilder(""String_Node_Str"").append(creature.getLogName()).append(""String_Node_Str"").append(controller.getLogName()).append(""String_Node_Str"").toString(),source,game)) {
          if (cost.pay(source,game,source.getSourceId(),opponent.getId(),false,null)) {
            paid=true;
          }
        }
      }
      if (opponent == null || !paid) {
        if (game.getState().getZone(creature.getId()) == Zone.GRAVEYARD) {
          controller.moveCards(game.getCard(creatureId),Zone.HAND,source,game);
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    UUID creatureId=(UUID)this.getValue(""String_Node_Str"");
    Card creature=game.getCard(creatureId);
    if (creature != null) {
      Player opponent=game.getPlayer(source.getFirstTarget());
      boolean paid=false;
      if (opponent != null) {
        Cost cost=new PayLifeCost(3);
        if (cost.canPay(source,source.getSourceId(),opponent.getId(),game) && opponent.chooseUse(outcome,new StringBuilder(""String_Node_Str"").append(creature.getLogName()).append(""String_Node_Str"").append(controller.getLogName()).append(""String_Node_Str"").toString(),source,game)) {
          if (cost.pay(source,game,source.getSourceId(),opponent.getId(),false,null)) {
            paid=true;
          }
        }
      }
      if (opponent == null || !paid) {
        if (game.getState().getZone(creature.getId()) == Zone.GRAVEYARD) {
          controller.moveCards(creature,Zone.HAND,source,game);
        }
      }
    }
    return true;
  }
  return false;
}",0.9518716577540108
157956,"@Override public boolean checkTrigger(GameEvent event,Game game){
  ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
  if (zEvent.getFromZone() == Zone.BATTLEFIELD && zEvent.getToZone() == Zone.GRAVEYARD) {
    Permanent permanent=(Permanent)game.getLastKnownInformation(event.getTargetId(),Zone.BATTLEFIELD);
    if (permanent != null && filter.match(permanent,sourceId,controllerId,game)) {
      for (      Effect effect : this.getEffects()) {
        effect.setValue(""String_Node_Str"",event.getTargetId());
      }
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  ZoneChangeEvent zEvent=(ZoneChangeEvent)event;
  if (zEvent.getFromZone() == Zone.BATTLEFIELD && zEvent.getToZone() == Zone.GRAVEYARD) {
    if (zEvent.getTarget() != null && filter.match(zEvent.getTarget(),sourceId,controllerId,game)) {
      for (      Effect effect : this.getEffects()) {
        effect.setValue(""String_Node_Str"",event.getTargetId());
      }
      return true;
    }
  }
  return false;
}",0.8414985590778098
157957,"@Override public boolean applies(Permanent permanent,Ability source,Game game){
  Permanent equipment=game.getPermanent(source.getSourceId());
  if (equipment != null && equipment.getAttachedTo() != null) {
    Permanent equipped=game.getPermanent(equipment.getAttachedTo());
    if (permanent.getId().equals(equipped.getId())) {
      return true;
    }
  }
  return false;
}","@Override public boolean applies(Permanent permanent,Ability source,Game game){
  Permanent equipment=game.getPermanent(source.getSourceId());
  if (equipment != null && equipment.getAttachedTo() != null) {
    Permanent equipped=game.getPermanent(equipment.getAttachedTo());
    if (equipped != null && permanent.getId().equals(equipped.getId())) {
      return true;
    }
  }
  return false;
}",0.9740932642487048
157958,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (controller != null && sourceObject != null && controller.getLibrary().hasCards()) {
    Library library=controller.getLibrary();
    Card card=library.removeFromTop(game);
    if (card != null) {
      boolean exiledCardWasCast=false;
      controller.moveCardToExileWithInfo(card,source.getSourceId(),sourceObject.getIdName(),source.getSourceId(),game,Zone.LIBRARY,true);
      if (!card.getManaCost().isEmpty()) {
        if (controller.chooseUse(Outcome.Benefit,""String_Node_Str"",source,game) && !card.isLand()) {
          exiledCardWasCast=controller.cast(card.getSpellAbility(),game,false);
        }
      }
      if (!exiledCardWasCast) {
        new DamagePlayersEffect(Outcome.Damage,new StaticValue(2),TargetController.OPPONENT).apply(game,source);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (controller != null && sourceObject != null && controller.getLibrary().hasCards()) {
    Library library=controller.getLibrary();
    Card card=library.getFromTop(game);
    if (card != null) {
      boolean exiledCardWasCast=false;
      controller.moveCardToExileWithInfo(card,source.getSourceId(),sourceObject.getIdName(),source.getSourceId(),game,Zone.LIBRARY,true);
      if (!card.getManaCost().isEmpty()) {
        if (controller.chooseUse(Outcome.Benefit,""String_Node_Str"",source,game) && !card.isLand()) {
          exiledCardWasCast=controller.cast(card.getSpellAbility(),game,false);
        }
      }
      if (!exiledCardWasCast) {
        new DamagePlayersEffect(Outcome.Damage,new StaticValue(2),TargetController.OPPONENT).apply(game,source);
      }
    }
    return true;
  }
  return false;
}",0.9954659949622168
157959,"protected boolean controlsAbility(UUID playerId,Game game){
  if (this.controllerId != null && this.controllerId.equals(playerId)) {
    return true;
  }
 else {
    Card card=(Card)game.getObject(this.sourceId);
    if (card != null && game.getState().getZone(this.sourceId) != Zone.BATTLEFIELD) {
      return card.getOwnerId().equals(playerId);
    }
  }
  return false;
}","protected boolean controlsAbility(UUID playerId,Game game){
  if (this.controllerId != null && this.controllerId.equals(playerId)) {
    return true;
  }
 else {
    MageObject mageObject=game.getObject(this.sourceId);
    if (mageObject instanceof Emblem) {
      return ((Emblem)mageObject).getControllerId().equals(playerId);
    }
 else {
      if (game.getState().getZone(this.sourceId) != Zone.BATTLEFIELD) {
        return ((Card)mageObject).getOwnerId().equals(playerId);
      }
    }
  }
  return false;
}",0.6898876404494382
157960,"@Override public String getText(Mode mode){
  if (staticText != null && !staticText.isEmpty()) {
    return staticText;
  }
  return ""String_Node_Str"" + (mode.getTargets().get(0) != null ? mode.getTargets().get(0).getTargetName() : ""String_Node_Str"");
}","@Override public String getText(Mode mode){
  if (staticText != null && !staticText.isEmpty()) {
    return staticText;
  }
  return ""String_Node_Str"" + (!mode.getTargets().isEmpty() ? mode.getTargets().get(0).getTargetName() : ""String_Node_Str"");
}",0.8685258964143426
157961,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  if (setColor != null) {
    MageObject sourceObject=game.getObject(source.getSourceId());
    if (sourceObject != null) {
      sourceObject.getColor(game).setColor(setColor);
    }
 else {
      this.discard();
    }
    return true;
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  if (setColor != null) {
    MageObject sourceObject=game.getObject(source.getSourceId());
    if (sourceObject != null) {
      sourceObject.getColor(game).setColor(setColor);
    }
 else {
      this.discard();
    }
    return true;
  }
  return false;
}",0.9017467248908296
157962,"private void multiBlockerDamage(boolean first,Game game){
  Permanent attacker=game.getPermanent(attackers.get(0));
  if (attacker == null) {
    return;
  }
  Player player=game.getPlayer(attacker.getControllerId());
  int damage=getDamageValueFromPermanent(attacker,game);
  if (canDamage(attacker,first)) {
    Map<UUID,Integer> blockerPower=new HashMap<>();
    for (    UUID blockerId : blockerOrder) {
      Permanent blocker=game.getPermanent(blockerId);
      if (canDamage(blocker,first)) {
        if (blocker.getBlocking() == 1) {
          blockerPower.put(blockerId,getDamageValueFromPermanent(blocker,game));
        }
      }
    }
    Map<UUID,Integer> assigned=new HashMap<>();
    if (blocked) {
      for (      UUID blockerId : blockerOrder) {
        Permanent blocker=game.getPermanent(blockerId);
        int lethalDamage;
        if (attacker.getAbilities().containsKey(DeathtouchAbility.getInstance().getId())) {
          lethalDamage=1;
        }
 else {
          lethalDamage=blocker.getToughness().getValue() - blocker.getDamage();
        }
        if (lethalDamage >= damage) {
          assigned.put(blockerId,damage);
          damage=0;
          break;
        }
        int damageAssigned=player.getAmount(lethalDamage,damage,""String_Node_Str"" + blocker.getName(),game);
        assigned.put(blockerId,damageAssigned);
        damage-=damageAssigned;
      }
      if (damage > 0 && hasTrample(attacker)) {
        defenderDamage(attacker,damage,game);
      }
 else       if (!blockerOrder.isEmpty()) {
        assigned.put(blockerOrder.get(0),assigned.get(blockerOrder.get(0)) + damage);
      }
    }
    for (    UUID blockerId : blockerOrder) {
      Integer power=blockerPower.get(blockerId);
      if (power != null) {
        attacker.markDamage(power,blockerId,game,true,true);
      }
    }
    for (    Map.Entry<UUID,Integer> entry : assigned.entrySet()) {
      Permanent blocker=game.getPermanent(entry.getKey());
      blocker.markDamage(entry.getValue(),attacker.getId(),game,true,true);
    }
  }
 else {
    for (    UUID blockerId : blockerOrder) {
      Permanent blocker=game.getPermanent(blockerId);
      if (canDamage(blocker,first)) {
        attacker.markDamage(getDamageValueFromPermanent(blocker,game),blocker.getId(),game,true,true);
      }
    }
  }
}","private void multiBlockerDamage(boolean first,Game game){
  Permanent attacker=game.getPermanent(attackers.get(0));
  if (attacker == null) {
    return;
  }
  Player player=game.getPlayer(attacker.getControllerId());
  int damage=getDamageValueFromPermanent(attacker,game);
  if (canDamage(attacker,first)) {
    Map<UUID,Integer> blockerPower=new HashMap<>();
    for (    UUID blockerId : blockerOrder) {
      Permanent blocker=game.getPermanent(blockerId);
      if (canDamage(blocker,first)) {
        if (blocker.getBlocking() == 1) {
          blockerPower.put(blockerId,getDamageValueFromPermanent(blocker,game));
        }
      }
    }
    Map<UUID,Integer> assigned=new HashMap<>();
    if (blocked) {
      for (      UUID blockerId : blockerOrder) {
        Permanent blocker=game.getPermanent(blockerId);
        if (blocker != null) {
          int lethalDamage;
          if (attacker.getAbilities().containsKey(DeathtouchAbility.getInstance().getId())) {
            lethalDamage=1;
          }
 else {
            lethalDamage=blocker.getToughness().getValue() - blocker.getDamage();
          }
          if (lethalDamage >= damage) {
            assigned.put(blockerId,damage);
            damage=0;
            break;
          }
          int damageAssigned=player.getAmount(lethalDamage,damage,""String_Node_Str"" + blocker.getName(),game);
          assigned.put(blockerId,damageAssigned);
          damage-=damageAssigned;
        }
      }
      if (damage > 0 && hasTrample(attacker)) {
        defenderDamage(attacker,damage,game);
      }
 else       if (!blockerOrder.isEmpty()) {
        assigned.put(blockerOrder.get(0),assigned.get(blockerOrder.get(0)) + damage);
      }
    }
    for (    UUID blockerId : blockerOrder) {
      Integer power=blockerPower.get(blockerId);
      if (power != null) {
        attacker.markDamage(power,blockerId,game,true,true);
      }
    }
    for (    Map.Entry<UUID,Integer> entry : assigned.entrySet()) {
      Permanent blocker=game.getPermanent(entry.getKey());
      blocker.markDamage(entry.getValue(),attacker.getId(),game,true,true);
    }
  }
 else {
    for (    UUID blockerId : blockerOrder) {
      Permanent blocker=game.getPermanent(blockerId);
      if (canDamage(blocker,first)) {
        attacker.markDamage(getDamageValueFromPermanent(blocker,game),blocker.getId(),game,true,true);
      }
    }
  }
}",0.982366687911621
157963,"public DownloadPictures(List<CardDownloadData> cards){
  this.cards=cards;
  bar=new JProgressBar(this);
  JPanel p0=new JPanel();
  p0.setLayout(new BoxLayout(p0,BoxLayout.Y_AXIS));
  p0.add(Box.createVerticalStrut(5));
  jLabel1=new JLabel();
  jLabel1.setText(""String_Node_Str"");
  jLabel1.setAlignmentX(Component.LEFT_ALIGNMENT);
  p0.add(jLabel1);
  p0.add(Box.createVerticalStrut(5));
  ComboBoxModel jComboBox1Model=new DefaultComboBoxModel(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  jComboBox1=new JComboBox();
  cardImageSource=MagicCardsImageSource.instance;
  jComboBox1.setModel(jComboBox1Model);
  jComboBox1.setAlignmentX(Component.LEFT_ALIGNMENT);
  jComboBox1.addActionListener(e -> {
    JComboBox cb=(JComboBox)e.getSource();
switch (cb.getSelectedIndex()) {
case 0:
      cardImageSource=MagicCardsImageSource.instance;
    break;
case 1:
  cardImageSource=WizardCardsImageSource.instance;
break;
case 2:
cardImageSource=MythicspoilerComSource.instance;
break;
case 3:
cardImageSource=TokensMtgImageSource.instance;
break;
case 4:
cardImageSource=MtgOnlTokensImageSource.instance;
break;
case 5:
cardImageSource=AltMtgOnlTokensImageSource.instance;
break;
case 6:
cardImageSource=GrabbagImageSource.instance;
break;
case 7:
cardImageSource=MagidexImageSource.instance;
break;
case 8:
cardImageSource=ScryfallImageSource.instance;
break;
}
updateCardsToDownload();
}
);
p0.add(jComboBox1);
p0.add(Box.createVerticalStrut(5));
startDownloadButton=new JButton(""String_Node_Str"");
startDownloadButton.addActionListener(e -> {
new Thread(DownloadPictures.this).start();
startDownloadButton.setEnabled(false);
checkBox.setEnabled(false);
}
);
p0.add(Box.createVerticalStrut(5));
p0.add(bar);
bar.setStringPainted(true);
int count=cards.size();
float mb=(count * cardImageSource.getAverageSize()) / 1024;
bar.setString(String.format(cardIndex == cards.size() ? ""String_Node_Str"" : ""String_Node_Str"",0,cards.size(),mb));
Dimension d=bar.getPreferredSize();
d.width=300;
bar.setPreferredSize(d);
p0.add(Box.createVerticalStrut(5));
checkBox=new JCheckBox(""String_Node_Str"");
p0.add(checkBox);
p0.add(Box.createVerticalStrut(5));
checkBox.addActionListener(e -> updateCardsToDownload());
Object[] options={startDownloadButton,closeButton=new JButton(""String_Node_Str"")};
dlg=new JOptionPane(p0,JOptionPane.PLAIN_MESSAGE,JOptionPane.DEFAULT_OPTION,null,options,options[1]);
}","public DownloadPictures(List<CardDownloadData> cards){
  this.cards=cards;
  bar=new JProgressBar(this);
  JPanel p0=new JPanel();
  p0.setLayout(new BoxLayout(p0,BoxLayout.Y_AXIS));
  p0.add(Box.createVerticalStrut(5));
  jLabel1=new JLabel();
  jLabel1.setText(""String_Node_Str"");
  jLabel1.setAlignmentX(Component.LEFT_ALIGNMENT);
  p0.add(jLabel1);
  p0.add(Box.createVerticalStrut(5));
  ComboBoxModel jComboBox1Model=new DefaultComboBoxModel(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  jComboBox1=new JComboBox();
  cardImageSource=MagicCardsImageSource.instance;
  jComboBox1.setModel(jComboBox1Model);
  jComboBox1.setAlignmentX(Component.LEFT_ALIGNMENT);
  jComboBox1.addActionListener(e -> {
    JComboBox cb=(JComboBox)e.getSource();
switch (cb.getSelectedIndex() + 1) {
case 0:
      cardImageSource=MagicCardsImageSource.instance;
    break;
case 1:
  cardImageSource=WizardCardsImageSource.instance;
break;
case 2:
cardImageSource=MythicspoilerComSource.instance;
break;
case 3:
cardImageSource=TokensMtgImageSource.instance;
break;
case 4:
cardImageSource=MtgOnlTokensImageSource.instance;
break;
case 5:
cardImageSource=AltMtgOnlTokensImageSource.instance;
break;
case 6:
cardImageSource=GrabbagImageSource.instance;
break;
case 7:
cardImageSource=MagidexImageSource.instance;
break;
case 8:
cardImageSource=ScryfallImageSource.instance;
break;
}
updateCardsToDownload();
}
);
p0.add(jComboBox1);
p0.add(Box.createVerticalStrut(5));
startDownloadButton=new JButton(""String_Node_Str"");
startDownloadButton.addActionListener(e -> {
new Thread(DownloadPictures.this).start();
startDownloadButton.setEnabled(false);
checkBox.setEnabled(false);
}
);
p0.add(Box.createVerticalStrut(5));
p0.add(bar);
bar.setStringPainted(true);
int count=cards.size();
float mb=(count * cardImageSource.getAverageSize()) / 1024;
bar.setString(String.format(cardIndex == cards.size() ? ""String_Node_Str"" : ""String_Node_Str"",0,cards.size(),mb));
Dimension d=bar.getPreferredSize();
d.width=300;
bar.setPreferredSize(d);
p0.add(Box.createVerticalStrut(5));
checkBox=new JCheckBox(""String_Node_Str"");
p0.add(checkBox);
p0.add(Box.createVerticalStrut(5));
checkBox.addActionListener(e -> updateCardsToDownload());
Object[] options={startDownloadButton,closeButton=new JButton(""String_Node_Str"")};
dlg=new JOptionPane(p0,JOptionPane.PLAIN_MESSAGE,JOptionPane.DEFAULT_OPTION,null,options,options[1]);
}",0.9992012779552716
157964,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    ExileZone exileZone=game.getExile().getExileZone(CardUtil.getCardExileZoneId(game,source.getSourceId(),true));
    if (exileZone != null) {
      controller.moveCards(exileZone,Zone.HAND,source,game);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    ExileZone exileZone=game.getExile().getExileZone(CardUtil.getExileZoneId(game,source.getSourceId(),0));
    if (exileZone != null) {
      controller.moveCards(exileZone,Zone.HAND,source,game);
    }
    return true;
  }
  return false;
}",0.98856416772554
157965,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(targetPointer.getFirst(game,source));
  if (player == null) {
    return false;
  }
  FilterControlledCreaturePermanent filter=new FilterControlledCreaturePermanent();
  int realCount=game.getBattlefield().countAll(filter,player.getId(),game);
  if (realCount > 0) {
    Target target=new TargetControlledPermanent(1,1,filter,true);
    while (player.canRespond() && !target.isChosen() && target.canChoose(player.getId(),game)) {
      player.chooseTarget(Outcome.Sacrifice,target,source,game);
    }
    Permanent permanent=game.getPermanent(target.getFirstTarget());
    if (permanent != null) {
      int gainLife=permanent.getToughness().getValue();
      permanent.sacrifice(source.getSourceId(),game);
      player.gainLife(gainLife,game);
    }
 else {
      return false;
    }
  }
  return true;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(targetPointer.getFirst(game,source));
  if (player == null) {
    return false;
  }
  FilterControlledCreaturePermanent filter=new FilterControlledCreaturePermanent();
  int realCount=game.getBattlefield().countAll(filter,player.getId(),game);
  if (realCount > 0) {
    Target target=new TargetControlledPermanent(1,1,filter,true);
    while (player.canRespond() && !target.isChosen() && target.canChoose(player.getId(),game)) {
      player.chooseTarget(Outcome.Sacrifice,target,source,game);
    }
    Permanent permanent=game.getPermanent(target.getFirstTarget());
    if (permanent != null) {
      int gainLife=permanent.getToughness().getValue();
      permanent.sacrifice(source.getSourceId(),game);
      game.applyEffects();
      player.gainLife(gainLife,game);
    }
 else {
      return false;
    }
  }
  return true;
}",0.9851403412217942
157966,"public AnyColorLandsProduceManaEffect(final AnyColorLandsProduceManaEffect effect){
  super(effect);
  this.filter=effect.filter.copy();
}","public AnyColorLandsProduceManaEffect(final AnyColorLandsProduceManaEffect effect){
  super(effect);
  this.filter=effect.filter.copy();
  this.onlyColors=effect.onlyColors;
}",0.8817891373801917
157967,"@Override public boolean apply(Game game,Ability source){
  Mana types=getManaTypes(game,source);
  Choice choice=new ChoiceColor(true);
  choice.getChoices().clear();
  choice.setMessage(""String_Node_Str"");
  if (types.getBlack() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getRed() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getBlue() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getGreen() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getWhite() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getAny() > 0) {
    choice.getChoices().add(""String_Node_Str"");
    choice.getChoices().add(""String_Node_Str"");
    choice.getChoices().add(""String_Node_Str"");
    choice.getChoices().add(""String_Node_Str"");
    choice.getChoices().add(""String_Node_Str"");
  }
  if (!choice.getChoices().isEmpty()) {
    Player player=game.getPlayer(source.getControllerId());
    if (choice.getChoices().size() == 1) {
      choice.setChoice(choice.getChoices().iterator().next());
    }
 else {
      player.choose(outcome,choice,game);
    }
    if (choice.getChoice() != null) {
      Mana mana=new Mana();
switch (choice.getChoice()) {
case ""String_Node_Str"":
        mana.setBlack(1);
      break;
case ""String_Node_Str"":
    mana.setBlue(1);
  break;
case ""String_Node_Str"":
mana.setRed(1);
break;
case ""String_Node_Str"":
mana.setGreen(1);
break;
case ""String_Node_Str"":
mana.setWhite(1);
break;
}
checkToFirePossibleEvents(mana,game,source);
player.getManaPool().addMana(mana,game,source);
}
}
return true;
}","@Override public boolean apply(Game game,Ability source){
  Mana types=getManaTypes(game,source);
  Choice choice=new ChoiceColor(true);
  choice.getChoices().clear();
  choice.setMessage(""String_Node_Str"");
  if (types.getBlack() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getRed() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getBlue() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getGreen() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getWhite() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (!onlyColors && types.getColorless() > 0) {
    choice.getChoices().add(""String_Node_Str"");
  }
  if (types.getAny() > 0) {
    choice.getChoices().add(""String_Node_Str"");
    choice.getChoices().add(""String_Node_Str"");
    choice.getChoices().add(""String_Node_Str"");
    choice.getChoices().add(""String_Node_Str"");
    choice.getChoices().add(""String_Node_Str"");
    if (!onlyColors) {
      choice.getChoices().add(""String_Node_Str"");
    }
  }
  if (!choice.getChoices().isEmpty()) {
    Player player=game.getPlayer(source.getControllerId());
    if (choice.getChoices().size() == 1) {
      choice.setChoice(choice.getChoices().iterator().next());
    }
 else {
      player.choose(outcome,choice,game);
    }
    if (choice.getChoice() != null) {
      Mana mana=new Mana();
switch (choice.getChoice()) {
case ""String_Node_Str"":
        mana.setBlack(1);
      break;
case ""String_Node_Str"":
    mana.setBlue(1);
  break;
case ""String_Node_Str"":
mana.setRed(1);
break;
case ""String_Node_Str"":
mana.setGreen(1);
break;
case ""String_Node_Str"":
mana.setWhite(1);
break;
case ""String_Node_Str"":
mana.setColorless(1);
break;
}
checkToFirePossibleEvents(mana,game,source);
player.getManaPool().addMana(mana,game,source);
}
}
return true;
}",0.933142037302726
157968,"@Override public boolean isInactive(Ability source,Game game){
  if (super.isInactive(source,game)) {
    return true;
  }
  if (durationPhaseStep != null && durationPhaseStep == game.getPhase().getStep().getType()) {
    if (!sameStep && game.getActivePlayerId().equals(durationPlayerId) || game.getPlayer(durationPlayerId).hasReachedNextTurnAfterLeaving()) {
      return true;
    }
  }
 else {
    sameStep=false;
  }
  return false;
}","@Override public boolean isInactive(Ability source,Game game){
  if (game.getPhase().getStep().getType() == PhaseStep.UPKEEP) {
    if (game.getActivePlayerId().equals(source.getControllerId())) {
      return true;
    }
  }
  return false;
}",0.4222873900293255
157969,"@Override public NagaVitalistEffect copy(){
  return new NagaVitalistEffect(this);
}","@Override public NagaVitalist copy(){
  return new NagaVitalist(this);
}",0.9230769230769232
157970,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(targetPointer.getFirst(game,source));
  if (player != null && !player.getHand().isEmpty()) {
    Card card=player.getHand().getRandom(game);
    Cards cards=new CardsImpl();
    cards.add(card);
    player.revealCards(""String_Node_Str"",cards,game);
    if (card.isLand()) {
      card.putOntoBattlefield(game,Zone.HAND,source.getSourceId(),player.getId());
    }
 else {
      player.cast(card.getSpellAbility(),game,true);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(targetPointer.getFirst(game,source));
  MageObject sourceObject=source.getSourceObject(game);
  if (player != null && sourceObject != null) {
    Card card=player.getHand().getRandom(game);
    if (card != null) {
      Cards cards=new CardsImpl();
      cards.add(card);
      player.revealCards(sourceObject.getIdName() + ""String_Node_Str"" + game.getTurnNum(),cards,game);
      if (card.isLand()) {
        player.moveCards(card,Zone.BATTLEFIELD,source,game);
      }
 else       if (card.getSpellAbility() != null && card.getSpellAbility().getTargets().canChoose(player.getId(),game)) {
        player.cast(card.getSpellAbility(),game,true);
      }
 else {
        game.informPlayers(GameLog.getColoredObjectName(card) + ""String_Node_Str"" + player.getLogName());
      }
    }
    return true;
  }
  return false;
}",0.451568894952251
157971,"@Override public boolean leaveChat(UUID chatId){
  try {
    if (isConnected()) {
      server.leaveChat(chatId,sessionId);
      return true;
    }
  }
 catch (  MageException ex) {
    handleMageException(ex);
  }
catch (  Throwable t) {
    handleThrowable(t);
  }
  return false;
}","@Override public boolean leaveChat(UUID chatId){
  try {
    if (isConnected() && chatId != null) {
      server.leaveChat(chatId,sessionId);
    }
    return true;
  }
 catch (  MageException ex) {
    handleMageException(ex);
  }
catch (  Throwable t) {
    handleThrowable(t);
  }
  return false;
}",0.9044368600682594
157972,"@Override public boolean applies(UUID sourceId,Ability source,UUID affectedControllerId,Game game){
  UUID targetId=getTargetPointer().getFirst(game,source);
  Player player=game.getPlayer(affectedControllerId);
  if (targetId != null && sourceId != null && targetId.equals(sourceId) && player != null) {
    if (affectedControllerId.equals(source.getControllerId())) {
      Card card=game.getCard(sourceId);
      if (card != null && game.getState().getZone(sourceId) == Zone.EXILED) {
        player.setCastSourceIdWithAlternateMana(sourceId,null,card.getSpellAbility().getCosts());
        return true;
      }
    }
  }
  return false;
}","@Override public boolean applies(UUID objectId,Ability source,UUID affectedControllerId,Game game){
  if (objectId != null && objectId.equals(getTargetPointer().getFirst(game,source))) {
    if (affectedControllerId.equals(source.getControllerId())) {
      Card card=game.getCard(objectId);
      if (card != null && game.getState().getZone(objectId) == Zone.EXILED) {
        if (!card.isLand() && card.getSpellAbility().getCosts() != null) {
          Player player=game.getPlayer(affectedControllerId);
          if (player != null) {
            player.setCastSourceIdWithAlternateMana(objectId,null,card.getSpellAbility().getCosts());
          }
        }
        return true;
      }
    }
  }
  return false;
}",0.46730345334313
157973,"@Override public boolean apply(Game game,Ability source,Ability abilityToModify){
  Player controller=game.getPlayer(abilityToModify.getControllerId());
  if (controller != null) {
    if ((abilityToModify instanceof ActivatedAbility && ((ActivatedAbility)abilityToModify).isCheckPlayableMode()) || controller.chooseUse(Outcome.PlayForFree,""String_Node_Str"",source,game)) {
      abilityToModify.getCosts().clear();
      abilityToModify.getManaCostsToPay().clear();
      abilityToModify.getCosts().add(new DiscardSourceCost());
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source,Ability abilityToModify){
  Player controller=game.getPlayer(abilityToModify.getControllerId());
  if (controller != null) {
    if ((abilityToModify instanceof ActivatedAbility && ((ActivatedAbility)abilityToModify).isCheckPlayableMode()) || controller.chooseUse(Outcome.PlayForFree,""String_Node_Str"",source,game)) {
      abilityToModify.getCosts().clear();
      abilityToModify.getManaCostsToPay().clear();
      abilityToModify.getCosts().add(new CyclingDiscardCost());
    }
    return true;
  }
  return false;
}",0.988685813751088
157974,"@Override public CyclingDiscardCost copy(){
  return new CyclingDiscardCost(this);
}","@Override public CyclingAbility copy(){
  return new CyclingAbility(this);
}",0.825
157975,"public LandfallWatcher(final LandfallWatcher watcher){
  super(watcher);
  playerPlayedLand.addAll(watcher.playerPlayedLand);
}","public LandfallWatcher(final LandfallWatcher watcher){
  super(watcher);
  playerPlayedLand.addAll(watcher.playerPlayedLand);
  landPlayed.addAll(watcher.landPlayed);
}",0.8610169491525423
157976,"@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD) {
    Permanent permanent=game.getPermanentOrLKIBattlefield(event.getTargetId());
    if (permanent != null && permanent.isLand() && !playerPlayedLand.contains(event.getPlayerId())) {
      playerPlayedLand.add(event.getPlayerId());
    }
  }
}","@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.LAND_PLAYED) {
    Permanent permanent=game.getPermanentOrLKIBattlefield(event.getTargetId());
    if (permanent != null && permanent.isLand() && !playerPlayedLand.contains(event.getPlayerId())) {
      playerPlayedLand.add(event.getPlayerId());
      landPlayed.add(event.getTargetId());
    }
  }
}",0.9064935064935064
157977,"@Override public void reset(){
  playerPlayedLand.clear();
  super.reset();
}","@Override public void reset(){
  playerPlayedLand.clear();
  landPlayed.clear();
  super.reset();
}",0.875
157978,"public LandfallWatcher(final LandfallWatcher watcher){
  super(watcher);
  playerPlayedLand.addAll(watcher.playerPlayedLand);
  landPlayed.addAll(watcher.landPlayed);
}","public LandfallWatcher(final LandfallWatcher watcher){
  super(watcher);
  playerPlayedLand.addAll(watcher.playerPlayedLand);
  landEnteredBattlefield.addAll(watcher.landEnteredBattlefield);
}",0.9
157979,"@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.LAND_PLAYED) {
    Permanent permanent=game.getPermanentOrLKIBattlefield(event.getTargetId());
    if (permanent != null && permanent.isLand() && !playerPlayedLand.contains(event.getPlayerId())) {
      playerPlayedLand.add(event.getPlayerId());
      landPlayed.add(event.getTargetId());
    }
  }
}","@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD) {
    Permanent permanent=game.getPermanentOrLKIBattlefield(event.getTargetId());
    if (permanent != null && permanent.isLand() && !playerPlayedLand.contains(event.getPlayerId())) {
      playerPlayedLand.add(event.getPlayerId());
      landEnteredBattlefield.add(event.getTargetId());
    }
  }
}",0.9381818181818182
157980,"@Override public void reset(){
  playerPlayedLand.clear();
  landPlayed.clear();
  super.reset();
}","@Override public void reset(){
  playerPlayedLand.clear();
  landEnteredBattlefield.clear();
  super.reset();
}",0.9142857142857144
157981,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  Permanent permanent=game.getPermanent(event.getTargetId());
  if (permanent == null) {
    permanent=game.getPermanentEntering(event.getTargetId());
  }
  return permanent != null && permanent.getControllerId().equals(source.getControllerId());
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  Permanent permanent=game.getPermanent(event.getTargetId());
  if (permanent == null) {
    permanent=game.getPermanentEntering(event.getTargetId());
    landPlayed=(permanent != null && permanent.isLand());
  }
  return permanent != null && permanent.getControllerId().equals(source.getControllerId()) && !landPlayed;
}",0.8987517337031901
157982,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    if (allPlayers) {
      for (      UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
        Player player=game.getPlayer(playerId);
        if (player != null) {
          player.setTopCardRevealed(true);
        }
      }
    }
 else {
      controller.setTopCardRevealed(true);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    if (allPlayers) {
      for (      UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
        Player player=game.getPlayer(playerId);
        if (player != null && !isCastFromPlayersLibrary(game,playerId)) {
          player.setTopCardRevealed(true);
        }
      }
    }
 else     if (!isCastFromPlayersLibrary(game,controller.getId())) {
      controller.setTopCardRevealed(true);
    }
    return true;
  }
  return false;
}",0.9066427289048474
157983,"public boolean activate(Game game,boolean noMana){
  if (!spellAbilities.get(0).activate(game,noMana)) {
    return false;
  }
  if (spellAbilities.size() > 1) {
    boolean ignoreAbility=true;
    boolean payNoMana=noMana;
    for (    SpellAbility spellAbility : spellAbilities) {
      if (ignoreAbility) {
        ignoreAbility=false;
      }
 else {
        payNoMana|=spellAbility.getSpellAbilityType() == SpellAbilityType.SPLICE;
        if (!spellAbility.activate(game,payNoMana)) {
          return false;
        }
      }
    }
  }
  setDoneActivatingManaAbilities(false);
  return true;
}","public boolean activate(Game game,boolean noMana){
  setDoneActivatingManaAbilities(false);
  if (!spellAbilities.get(0).activate(game,noMana)) {
    return false;
  }
  if (spellAbilities.size() > 1) {
    boolean ignoreAbility=true;
    boolean payNoMana=noMana;
    for (    SpellAbility spellAbility : spellAbilities) {
      if (ignoreAbility) {
        ignoreAbility=false;
      }
 else {
        payNoMana|=spellAbility.getSpellAbilityType() == SpellAbilityType.SPLICE;
        if (!spellAbility.activate(game,payNoMana)) {
          return false;
        }
      }
    }
  }
  setDoneActivatingManaAbilities(true);
  return true;
}",0.9387096774193548
157984,"@Override public boolean applies(GameEvent event,Ability source,Game game){
  cardWasCycledThisTurn=false;
  cardHasCycling=false;
  if (((ZoneChangeEvent)event).getToZone() == Zone.GRAVEYARD) {
    Player controller=game.getPlayer(source.getControllerId());
    AbandonedSarcophagusWatcher watcher=(AbandonedSarcophagusWatcher)game.getState().getWatchers().get(AbandonedSarcophagusWatcher.class.getSimpleName());
    Card card=game.getCard(event.getTargetId());
    if (card != null && watcher != null) {
      for (      Ability ability : card.getAbilities()) {
        if (ability instanceof CyclingAbility) {
          cardHasCycling=true;
        }
      }
      Cards cards=watcher.getCardsCycledThisTurn(controller.getId());
      for (      Card c : cards.getCards(game)) {
        if (c == card) {
          cardWasCycledThisTurn=true;
          watcher.getCardsCycledThisTurn(controller.getId()).remove(card);
        }
      }
      return (!cardWasCycledThisTurn && cardHasCycling);
    }
  }
  return false;
}","@Override public boolean applies(GameEvent event,Ability source,Game game){
  cardWasCycledThisTurn=false;
  cardHasCycling=false;
  if (((ZoneChangeEvent)event).getToZone() == Zone.GRAVEYARD && !game.isSimulation()) {
    Player controller=game.getPlayer(source.getControllerId());
    AbandonedSarcophagusWatcher watcher=(AbandonedSarcophagusWatcher)game.getState().getWatchers().get(AbandonedSarcophagusWatcher.class.getSimpleName());
    Card card=game.getCard(event.getTargetId());
    if (card != null && watcher != null && card.getOwnerId() == controller.getId()) {
      for (      Ability ability : card.getAbilities()) {
        if (ability instanceof CyclingAbility) {
          cardHasCycling=true;
        }
      }
      Cards cards=watcher.getCardsCycledThisTurn(controller.getId());
      for (      Card c : cards.getCards(game)) {
        if (c == card) {
          cardWasCycledThisTurn=true;
          watcher.getCardsCycledThisTurn(controller.getId()).remove(card);
        }
      }
      return (!cardWasCycledThisTurn && cardHasCycling);
    }
  }
  return false;
}",0.9682614874467076
157985,"@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.CYCLE_CARD) {
    Card card=game.getCard(event.getSourceId());
    if (card != null) {
      Cards c=getCardsCycledThisTurn(event.getPlayerId());
      c.add(card);
      cycledCardsThisTurn.put(event.getPlayerId(),c);
    }
  }
}","@Override public void watch(GameEvent event,Game game){
  if (event.getType() == GameEvent.EventType.CYCLE_CARD && !game.isSimulation()) {
    Card card=game.getCard(event.getSourceId());
    Player controller=game.getPlayer(event.getPlayerId());
    if (card != null && controller != null && card.getOwnerId() == controller.getId()) {
      Cards c=getCardsCycledThisTurn(event.getPlayerId());
      c.add(card);
      cycledCardsThisTurn.put(event.getPlayerId(),c);
    }
  }
}",0.817283950617284
157986,"@Override public boolean canActivate(UUID playerId,Game game){
  if (!controlsAbility(playerId,game)) {
    return false;
  }
  return costs.canPay(this,sourceId,controllerId,game);
}","@Override public boolean canActivate(UUID playerId,Game game){
  if (!controlsAbility(playerId,game)) {
    return false;
  }
  if (timing == TimingRule.SORCERY && !game.canPlaySorcery(playerId) && !game.getContinuousEffects().asThough(sourceId,AsThoughEffectType.ACTIVATE_AS_INSTANT,this,controllerId,game)) {
    return false;
  }
  return costs.canPay(this,sourceId,controllerId,game);
}",0.4746945898778359
157987,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  Card chosenCard=game.getCard(getTargetPointer().getFirst(game,source));
  if (chosenCard != null && sourceObject != null && controller != null) {
    Player owner=game.getPlayer(chosenCard.getOwnerId());
    if (owner == null) {
      return false;
    }
    FilterCard filterNamedCard=new FilterCard();
    filterNamedCard.add(new NamePredicate(chosenCard.getName()));
    for (    Card checkCard : owner.getGraveyard().getCards(game)) {
      if (checkCard.getName().equals(chosenCard.getName())) {
        controller.moveCardToExileWithInfo(checkCard,null,""String_Node_Str"",source.getSourceId(),game,Zone.GRAVEYARD,true);
      }
    }
    filterNamedCard.setMessage(""String_Node_Str"" + chosenCard.getLogName() + ""String_Node_Str""+ owner.getLogName());
    TargetCardInHand targetCardInHand=new TargetCardInHand(0,Integer.MAX_VALUE,filterNamedCard);
    if (controller.choose(Outcome.Exile,owner.getHand(),targetCardInHand,game)) {
      List<UUID> targets=targetCardInHand.getTargets();
      for (      UUID targetId : targets) {
        Card targetCard=owner.getHand().get(targetId,game);
        if (targetCard != null) {
          controller.moveCardToExileWithInfo(targetCard,null,""String_Node_Str"",source.getSourceId(),game,Zone.HAND,true);
        }
      }
    }
    filterNamedCard.setMessage(""String_Node_Str"" + chosenCard.getName() + ""String_Node_Str""+ owner.getName());
    TargetCardInLibrary targetCardInLibrary=new TargetCardInLibrary(0,Integer.MAX_VALUE,filterNamedCard);
    if (controller.searchLibrary(targetCardInLibrary,game,owner.getId())) {
      List<UUID> targets=targetCardInLibrary.getTargets();
      for (      UUID targetId : targets) {
        Card targetCard=owner.getLibrary().getCard(targetId,game);
        if (targetCard != null) {
          controller.moveCardToExileWithInfo(targetCard,null,""String_Node_Str"",source.getSourceId(),game,Zone.LIBRARY,true);
        }
      }
    }
    owner.shuffleLibrary(source,game);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  Card chosenCard=game.getCard(getTargetPointer().getFirst(game,source));
  if (chosenCard != null && sourceObject != null && controller != null) {
    Player owner=game.getPlayer(chosenCard.getOwnerId());
    if (owner == null) {
      return false;
    }
    FilterCard filterNamedCard=new FilterCard();
    String nameToSearch=chosenCard.isSplitCard() ? ((SplitCard)chosenCard).getLeftHalfCard().getName() : chosenCard.getName();
    filterNamedCard.add(new NamePredicate(nameToSearch));
    for (    Card checkCard : owner.getGraveyard().getCards(game)) {
      if (checkCard.getName().equals(chosenCard.getName())) {
        controller.moveCardToExileWithInfo(checkCard,null,""String_Node_Str"",source.getSourceId(),game,Zone.GRAVEYARD,true);
      }
    }
    filterNamedCard.setMessage(""String_Node_Str"" + chosenCard.getLogName() + ""String_Node_Str""+ owner.getLogName());
    TargetCardInHand targetCardInHand=new TargetCardInHand(0,Integer.MAX_VALUE,filterNamedCard);
    if (controller.choose(Outcome.Exile,owner.getHand(),targetCardInHand,game)) {
      List<UUID> targets=targetCardInHand.getTargets();
      for (      UUID targetId : targets) {
        Card targetCard=owner.getHand().get(targetId,game);
        if (targetCard != null) {
          controller.moveCardToExileWithInfo(targetCard,null,""String_Node_Str"",source.getSourceId(),game,Zone.HAND,true);
        }
      }
    }
    filterNamedCard.setMessage(""String_Node_Str"" + chosenCard.getName() + ""String_Node_Str""+ owner.getName());
    TargetCardInLibrary targetCardInLibrary=new TargetCardInLibrary(0,Integer.MAX_VALUE,filterNamedCard);
    if (controller.searchLibrary(targetCardInLibrary,game,owner.getId())) {
      List<UUID> targets=targetCardInLibrary.getTargets();
      for (      UUID targetId : targets) {
        Card targetCard=owner.getLibrary().getCard(targetId,game);
        if (targetCard != null) {
          controller.moveCardToExileWithInfo(targetCard,null,""String_Node_Str"",source.getSourceId(),game,Zone.LIBRARY,true);
        }
      }
    }
    owner.shuffleLibrary(source,game);
    return true;
  }
  return false;
}",0.9627813683975932
157988,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  Player targetPlayer=game.getPlayer(source.getFirstTarget());
  if (targetPlayer != null) {
    for (    Card card : targetPlayer.getGraveyard().getCards(game)) {
      if (!filter.match(card,game)) {
        card.moveToExile(null,""String_Node_Str"",source.getSourceId(),game);
        FilterCard filterCard=new FilterCard(""String_Node_Str"" + card.getName());
        filterCard.add(new NamePredicate(card.getName()));
        int count=targetPlayer.getLibrary().count(filterCard,game);
        TargetCardInLibrary target=new TargetCardInLibrary(count,count,filterCard);
        player.searchLibrary(target,game,targetPlayer.getId());
        List<UUID> targets=target.getTargets();
        for (        UUID cardId : targets) {
          Card libraryCard=game.getCard(cardId);
          if (libraryCard != null) {
            libraryCard.moveToExile(null,""String_Node_Str"",source.getSourceId(),game);
          }
        }
      }
    }
    targetPlayer.shuffleLibrary(source,game);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  Player targetPlayer=game.getPlayer(source.getFirstTarget());
  if (targetPlayer != null) {
    for (    Card card : targetPlayer.getGraveyard().getCards(game)) {
      if (!filter.match(card,game)) {
        card.moveToExile(null,""String_Node_Str"",source.getSourceId(),game);
        FilterCard filterCard=new FilterCard(""String_Node_Str"" + card.getName());
        String nameToSearch=card.isSplitCard() ? ((SplitCard)card).getLeftHalfCard().getName() : card.getName();
        filterCard.add(new NamePredicate(nameToSearch));
        int count=targetPlayer.getLibrary().count(filterCard,game);
        TargetCardInLibrary target=new TargetCardInLibrary(count,count,filterCard);
        player.searchLibrary(target,game,targetPlayer.getId());
        List<UUID> targets=target.getTargets();
        for (        UUID cardId : targets) {
          Card libraryCard=game.getCard(cardId);
          if (libraryCard != null) {
            libraryCard.moveToExile(null,""String_Node_Str"",source.getSourceId(),game);
          }
        }
      }
    }
    targetPlayer.shuffleLibrary(source,game);
    return true;
  }
  return false;
}",0.941767909509845
157989,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    if (!controller.getHand().isEmpty()) {
      Card cardToReveal=null;
      if (controller.getHand().size() > 1) {
        Target target=new TargetCardInHand(new FilterCard());
        target.setNotTarget(true);
        if (controller.chooseTarget(outcome,target,source,game)) {
          cardToReveal=game.getCard(target.getFirstTarget());
        }
      }
 else {
        cardToReveal=controller.getHand().getRandom(game);
      }
      FilterCard filterCard;
      if (cardToReveal != null) {
        controller.revealCards(""String_Node_Str"" + sourceObject.getName(),new CardsImpl(cardToReveal),game);
        filterCard=new FilterCard(""String_Node_Str"" + cardToReveal.getName());
        filterCard.add(new NamePredicate(cardToReveal.getName()));
      }
 else {
        filterCard=new FilterCard();
      }
      return new SearchLibraryPutInHandEffect(new TargetCardInLibrary(filterCard),true,true).apply(game,source);
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    if (!controller.getHand().isEmpty()) {
      Card cardToReveal=null;
      if (controller.getHand().size() > 1) {
        Target target=new TargetCardInHand(new FilterCard());
        target.setNotTarget(true);
        if (controller.chooseTarget(outcome,target,source,game)) {
          cardToReveal=game.getCard(target.getFirstTarget());
        }
      }
 else {
        cardToReveal=controller.getHand().getRandom(game);
      }
      FilterCard filterCard;
      if (cardToReveal != null) {
        controller.revealCards(""String_Node_Str"" + sourceObject.getName(),new CardsImpl(cardToReveal),game);
        String nameToSearch=cardToReveal.isSplitCard() ? ((SplitCard)cardToReveal).getLeftHalfCard().getName() : cardToReveal.getName();
        filterCard=new FilterCard(""String_Node_Str"" + nameToSearch);
        filterCard.add(new NamePredicate(nameToSearch));
      }
 else {
        filterCard=new FilterCard();
      }
      return new SearchLibraryPutInHandEffect(new TargetCardInLibrary(filterCard),true,true).apply(game,source);
    }
    return true;
  }
  return false;
}",0.8954635108481263
157990,"@Override public boolean apply(Game game,Ability source){
  Player targetPlayer=game.getPlayer(source.getFirstTarget());
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (targetPlayer != null && sourceObject != null && controller != null) {
    targetPlayer.revealCards(sourceObject.getIdName(),targetPlayer.getHand(),game);
    TargetCard target=new TargetCard(Zone.HAND,filter);
    target.setNotTarget(true);
    Card chosenCard=null;
    if (controller.chooseTarget(Outcome.Benefit,targetPlayer.getHand(),target,source,game)) {
      chosenCard=game.getCard(target.getFirstTarget());
    }
    FilterCard filterNamedCards=new FilterCard();
    if (chosenCard != null) {
      filterNamedCards.add(new NamePredicate(chosenCard.getName()));
      filterNamedCards.setMessage(""String_Node_Str"" + chosenCard.getName());
    }
 else {
      filterNamedCards.add(new NamePredicate(""String_Node_Str""));
    }
    Cards cardsToExile=new CardsImpl();
    if (chosenCard != null) {
      for (      Card checkCard : targetPlayer.getGraveyard().getCards(game)) {
        if (checkCard.getName().equals(chosenCard.getName())) {
          cardsToExile.add(checkCard);
        }
      }
      TargetCard targetCardsHand=new TargetCard(0,Integer.MAX_VALUE,Zone.HAND,filterNamedCards);
      controller.chooseTarget(outcome,targetPlayer.getHand(),targetCardsHand,source,game);
      for (      UUID cardId : targetCardsHand.getTargets()) {
        Card card=game.getCard(cardId);
        if (card != null) {
          cardsToExile.add(card);
        }
      }
    }
    if (chosenCard != null || controller.chooseUse(outcome,""String_Node_Str"",source,game)) {
      TargetCardInLibrary targetCardsLibrary=new TargetCardInLibrary(0,Integer.MAX_VALUE,filterNamedCards);
      controller.searchLibrary(targetCardsLibrary,game,targetPlayer.getId());
      for (      UUID cardId : targetCardsLibrary.getTargets()) {
        Card card=game.getCard(cardId);
        if (card != null) {
          cardsToExile.add(card);
        }
      }
    }
    if (!cardsToExile.isEmpty()) {
      controller.moveCards(cardsToExile,Zone.EXILED,source,game);
    }
    targetPlayer.shuffleLibrary(source,game);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player targetPlayer=game.getPlayer(source.getFirstTarget());
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (targetPlayer != null && sourceObject != null && controller != null) {
    targetPlayer.revealCards(sourceObject.getIdName(),targetPlayer.getHand(),game);
    TargetCard target=new TargetCard(Zone.HAND,filter);
    target.setNotTarget(true);
    Card chosenCard=null;
    if (controller.chooseTarget(Outcome.Benefit,targetPlayer.getHand(),target,source,game)) {
      chosenCard=game.getCard(target.getFirstTarget());
    }
    FilterCard filterNamedCards=new FilterCard();
    String nameToSearch=""String_Node_Str"";
    if (chosenCard != null) {
      nameToSearch=chosenCard.isSplitCard() ? ((SplitCard)chosenCard).getLeftHalfCard().getName() : chosenCard.getName();
      filterNamedCards.setMessage(""String_Node_Str"" + chosenCard.getName());
    }
    filterNamedCards.add(new NamePredicate(nameToSearch));
    Cards cardsToExile=new CardsImpl();
    if (chosenCard != null) {
      for (      Card checkCard : targetPlayer.getGraveyard().getCards(game)) {
        if (checkCard.getName().equals(chosenCard.getName())) {
          cardsToExile.add(checkCard);
        }
      }
      TargetCard targetCardsHand=new TargetCard(0,Integer.MAX_VALUE,Zone.HAND,filterNamedCards);
      controller.chooseTarget(outcome,targetPlayer.getHand(),targetCardsHand,source,game);
      for (      UUID cardId : targetCardsHand.getTargets()) {
        Card card=game.getCard(cardId);
        if (card != null) {
          cardsToExile.add(card);
        }
      }
    }
    if (chosenCard != null || controller.chooseUse(outcome,""String_Node_Str"",source,game)) {
      TargetCardInLibrary targetCardsLibrary=new TargetCardInLibrary(0,Integer.MAX_VALUE,filterNamedCards);
      controller.searchLibrary(targetCardsLibrary,game,targetPlayer.getId());
      for (      UUID cardId : targetCardsLibrary.getTargets()) {
        Card card=game.getCard(cardId);
        if (card != null) {
          cardsToExile.add(card);
        }
      }
    }
    if (!cardsToExile.isEmpty()) {
      controller.moveCards(cardsToExile,Zone.EXILED,source,game);
    }
    targetPlayer.shuffleLibrary(source,game);
    return true;
  }
  return false;
}",0.9471205309355598
157991,"@Override public boolean apply(Game game,Ability source){
  Player targetPlayer=game.getPlayer(source.getFirstTarget());
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (targetPlayer != null && sourceObject != null && controller != null) {
    targetPlayer.revealCards(sourceObject.getName(),targetPlayer.getHand(),game);
    Cards exiledCards=new CardsImpl();
    int xCost=Math.min(source.getManaCostsToPay().getX(),targetPlayer.getHand().size());
    TargetCardInHand target=new TargetCardInHand(0,xCost,filterNonLands);
    target.setNotTarget(true);
    controller.choose(Outcome.Benefit,targetPlayer.getHand(),target,game);
    for (    UUID cardId : target.getTargets()) {
      Card chosenCard=game.getCard(cardId);
      if (chosenCard != null) {
        controller.moveCardToExileWithInfo(chosenCard,null,""String_Node_Str"",source.getSourceId(),game,Zone.HAND,true);
        exiledCards.add(chosenCard);
      }
    }
    if (!exiledCards.isEmpty()) {
      ArrayList<NamePredicate> names=new ArrayList<>();
      FilterCard filterNamedCards=new FilterCard();
      for (      Card card : exiledCards.getCards(game)) {
        if (exiledCards.size() == 1) {
          filterNamedCards.add(new NamePredicate(card.getName()));
        }
 else {
          names.add(new NamePredicate(card.getName()));
        }
      }
      if (exiledCards.size() > 1) {
        filterNamedCards.add(Predicates.or(names));
      }
      TargetCardInGraveyard targetCardsGraveyard=new TargetCardInGraveyard(0,Integer.MAX_VALUE,filterNamedCards);
      controller.chooseTarget(outcome,targetPlayer.getGraveyard(),targetCardsGraveyard,source,game);
      for (      UUID cardId : targetCardsGraveyard.getTargets()) {
        Card card=game.getCard(cardId);
        if (card != null) {
          controller.moveCardToExileWithInfo(card,null,""String_Node_Str"",source.getSourceId(),game,Zone.GRAVEYARD,true);
        }
      }
      TargetCardInHand targetCardsHand=new TargetCardInHand(0,Integer.MAX_VALUE,filterNamedCards);
      controller.chooseTarget(outcome,targetPlayer.getGraveyard(),targetCardsHand,source,game);
      for (      UUID cardId : targetCardsHand.getTargets()) {
        Card card=game.getCard(cardId);
        if (card != null) {
          controller.moveCardToExileWithInfo(card,null,""String_Node_Str"",source.getSourceId(),game,Zone.HAND,true);
        }
      }
      TargetCardInLibrary targetCardsLibrary=new TargetCardInLibrary(0,Integer.MAX_VALUE,filterNamedCards);
      controller.searchLibrary(targetCardsLibrary,game,targetPlayer.getId());
      for (      UUID cardId : targetCardsLibrary.getTargets()) {
        Card card=game.getCard(cardId);
        if (card != null) {
          controller.moveCardToExileWithInfo(card,null,""String_Node_Str"",source.getSourceId(),game,Zone.LIBRARY,true);
        }
      }
    }
    targetPlayer.shuffleLibrary(source,game);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player targetPlayer=game.getPlayer(source.getFirstTarget());
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (targetPlayer != null && sourceObject != null && controller != null) {
    targetPlayer.revealCards(sourceObject.getName(),targetPlayer.getHand(),game);
    Cards exiledCards=new CardsImpl();
    int xCost=Math.min(source.getManaCostsToPay().getX(),targetPlayer.getHand().size());
    TargetCardInHand target=new TargetCardInHand(0,xCost,filterNonLands);
    target.setNotTarget(true);
    controller.choose(Outcome.Benefit,targetPlayer.getHand(),target,game);
    for (    UUID cardId : target.getTargets()) {
      Card chosenCard=game.getCard(cardId);
      if (chosenCard != null) {
        controller.moveCardToExileWithInfo(chosenCard,null,""String_Node_Str"",source.getSourceId(),game,Zone.HAND,true);
        exiledCards.add(chosenCard);
      }
    }
    if (!exiledCards.isEmpty()) {
      ArrayList<NamePredicate> names=new ArrayList<>();
      FilterCard filterNamedCards=new FilterCard();
      for (      Card card : exiledCards.getCards(game)) {
        if (exiledCards.size() == 1) {
          filterNamedCards.add(new NamePredicate(card.isSplitCard() ? ((SplitCard)card).getLeftHalfCard().getName() : card.getName()));
        }
 else {
          names.add(new NamePredicate(card.isSplitCard() ? ((SplitCard)card).getLeftHalfCard().getName() : card.getName()));
        }
      }
      if (exiledCards.size() > 1) {
        filterNamedCards.add(Predicates.or(names));
      }
      TargetCardInGraveyard targetCardsGraveyard=new TargetCardInGraveyard(0,Integer.MAX_VALUE,filterNamedCards);
      controller.chooseTarget(outcome,targetPlayer.getGraveyard(),targetCardsGraveyard,source,game);
      for (      UUID cardId : targetCardsGraveyard.getTargets()) {
        Card card=game.getCard(cardId);
        if (card != null) {
          controller.moveCardToExileWithInfo(card,null,""String_Node_Str"",source.getSourceId(),game,Zone.GRAVEYARD,true);
        }
      }
      TargetCardInHand targetCardsHand=new TargetCardInHand(0,Integer.MAX_VALUE,filterNamedCards);
      controller.chooseTarget(outcome,targetPlayer.getGraveyard(),targetCardsHand,source,game);
      for (      UUID cardId : targetCardsHand.getTargets()) {
        Card card=game.getCard(cardId);
        if (card != null) {
          controller.moveCardToExileWithInfo(card,null,""String_Node_Str"",source.getSourceId(),game,Zone.HAND,true);
        }
      }
      TargetCardInLibrary targetCardsLibrary=new TargetCardInLibrary(0,Integer.MAX_VALUE,filterNamedCards);
      controller.searchLibrary(targetCardsLibrary,game,targetPlayer.getId());
      for (      UUID cardId : targetCardsLibrary.getTargets()) {
        Card card=game.getCard(cardId);
        if (card != null) {
          controller.moveCardToExileWithInfo(card,null,""String_Node_Str"",source.getSourceId(),game,Zone.LIBRARY,true);
        }
      }
    }
    targetPlayer.shuffleLibrary(source,game);
    return true;
  }
  return false;
}",0.977531748616086
157992,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Set<Permanent> choosenPermanent=new HashSet<>();
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        FilterArtifactPermanent filterArtifactPermanent=new FilterArtifactPermanent(""String_Node_Str"" + player.getName());
        filterArtifactPermanent.add(new ControllerIdPredicate(playerId));
        Target target1=new TargetArtifactPermanent(1,1,filterArtifactPermanent,true);
        FilterCreaturePermanent filterCreaturePermanent=new FilterCreaturePermanent(""String_Node_Str"" + player.getName());
        filterCreaturePermanent.add(new ControllerIdPredicate(playerId));
        Target target2=new TargetPermanent(1,1,filterCreaturePermanent,true);
        FilterEnchantmentPermanent filterEnchantmentPermanent=new FilterEnchantmentPermanent(""String_Node_Str"" + player.getName());
        filterEnchantmentPermanent.add(new ControllerIdPredicate(playerId));
        Target target3=new TargetPermanent(1,1,filterEnchantmentPermanent,true);
        FilterPlaneswalkerPermanent filterPlaneswalkerPermanent=new FilterPlaneswalkerPermanent(""String_Node_Str"" + player.getName());
        filterPlaneswalkerPermanent.add(new ControllerIdPredicate(playerId));
        Target target4=new TargetPermanent(1,1,filterPlaneswalkerPermanent,true);
        if (target1.canChoose(controller.getId(),game)) {
          controller.chooseTarget(Outcome.Benefit,target1,source,game);
          Permanent artifact=game.getPermanent(target1.getFirstTarget());
          if (artifact != null) {
            choosenPermanent.add(artifact);
          }
          target1.clearChosen();
        }
        if (target2.canChoose(player.getId(),game)) {
          controller.chooseTarget(Outcome.Benefit,target2,source,game);
          Permanent creature=game.getPermanent(target2.getFirstTarget());
          if (creature != null) {
            choosenPermanent.add(creature);
          }
          target2.clearChosen();
        }
        if (target3.canChoose(player.getId(),game)) {
          controller.chooseTarget(Outcome.Benefit,target3,source,game);
          Permanent enchantment=game.getPermanent(target3.getFirstTarget());
          if (enchantment != null) {
            choosenPermanent.add(enchantment);
          }
          target3.clearChosen();
        }
        if (target4.canChoose(player.getId(),game)) {
          controller.chooseTarget(Outcome.Benefit,target4,source,game);
          Permanent planeswalker=game.getPermanent(target4.getFirstTarget());
          if (planeswalker != null) {
            choosenPermanent.add(planeswalker);
          }
          target4.clearChosen();
        }
      }
    }
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        for (        Permanent permanent : game.getBattlefield().getAllActivePermanents(new FilterNonlandPermanent(),game)) {
          if (!choosenPermanent.contains(permanent)) {
            permanent.sacrifice(playerId,game);
          }
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Set<Permanent> choosenPermanent=new HashSet<>();
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        FilterArtifactPermanent filterArtifactPermanent=new FilterArtifactPermanent(""String_Node_Str"" + player.getName());
        filterArtifactPermanent.add(new ControllerIdPredicate(playerId));
        Target target1=new TargetArtifactPermanent(1,1,filterArtifactPermanent,true);
        FilterCreaturePermanent filterCreaturePermanent=new FilterCreaturePermanent(""String_Node_Str"" + player.getName());
        filterCreaturePermanent.add(new ControllerIdPredicate(playerId));
        Target target2=new TargetPermanent(1,1,filterCreaturePermanent,true);
        FilterEnchantmentPermanent filterEnchantmentPermanent=new FilterEnchantmentPermanent(""String_Node_Str"" + player.getName());
        filterEnchantmentPermanent.add(new ControllerIdPredicate(playerId));
        Target target3=new TargetPermanent(1,1,filterEnchantmentPermanent,true);
        FilterPlaneswalkerPermanent filterPlaneswalkerPermanent=new FilterPlaneswalkerPermanent(""String_Node_Str"" + player.getName());
        filterPlaneswalkerPermanent.add(new ControllerIdPredicate(playerId));
        Target target4=new TargetPermanent(1,1,filterPlaneswalkerPermanent,true);
        if (target1.canChoose(source.getSourceId(),controller.getId(),game)) {
          controller.chooseTarget(Outcome.Benefit,target1,source,game);
          Permanent artifact=game.getPermanent(target1.getFirstTarget());
          if (artifact != null) {
            choosenPermanent.add(artifact);
          }
          target1.clearChosen();
        }
        if (target2.canChoose(source.getSourceId(),controller.getId(),game)) {
          controller.chooseTarget(Outcome.Benefit,target2,source,game);
          Permanent creature=game.getPermanent(target2.getFirstTarget());
          if (creature != null) {
            choosenPermanent.add(creature);
          }
          target2.clearChosen();
        }
        if (target3.canChoose(source.getSourceId(),controller.getId(),game)) {
          controller.chooseTarget(Outcome.Benefit,target3,source,game);
          Permanent enchantment=game.getPermanent(target3.getFirstTarget());
          if (enchantment != null) {
            choosenPermanent.add(enchantment);
          }
          target3.clearChosen();
        }
        if (target4.canChoose(source.getSourceId(),controller.getId(),game)) {
          controller.chooseTarget(Outcome.Benefit,target4,source,game);
          Permanent planeswalker=game.getPermanent(target4.getFirstTarget());
          if (planeswalker != null) {
            choosenPermanent.add(planeswalker);
          }
          target4.clearChosen();
        }
      }
    }
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        for (        Permanent permanent : game.getBattlefield().getAllActivePermanents(new FilterNonlandPermanent(),game)) {
          if (!choosenPermanent.contains(permanent)) {
            permanent.sacrifice(playerId,game);
          }
        }
      }
    }
    return true;
  }
  return false;
}",0.9823321554770318
157993,"@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanent(this.sourceId);
  if (enchantment != null && enchantment.getAttachedTo() != null) {
    Player player=game.getPlayer(enchantment.getAttachedTo());
    if (player != null && game.getActivePlayerId().equals(player.getId())) {
      this.getEffects().get(0).setTargetPointer(new FixedTarget(player.getId()));
      return true;
    }
  }
  return false;
}","@Override public boolean checkTrigger(GameEvent event,Game game){
  Permanent enchantment=game.getPermanent(this.getSourceId());
  if (enchantment != null && enchantment.getAttachedTo() != null) {
    if (game.getActivePlayerId().equals(enchantment.getAttachedTo())) {
      return true;
    }
  }
  return false;
}",0.6270967741935484
157994,"@Override public boolean apply(Game game,Ability source){
  Player enchantedPlayer=game.getPlayer(getTargetPointer().getFirst(game,source));
  if (enchantedPlayer != null) {
    int permanents=game.getBattlefield().countAll(StaticFilters.FILTER_PERMANENT_NON_LAND,enchantedPlayer.getId(),game);
    if (permanents > 0 && enchantedPlayer.chooseUse(outcome,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",source,game)) {
      Target target=new TargetPermanent(StaticFilters.FILTER_CONTROLLED_PERMANENT_NON_LAND);
      if (enchantedPlayer.choose(outcome,target,source.getSourceId(),game)) {
        Permanent permanent=game.getPermanent(target.getFirstTarget());
        if (permanent != null) {
          permanent.sacrifice(source.getSourceId(),game);
          return true;
        }
      }
    }
    if (!enchantedPlayer.getHand().isEmpty() && enchantedPlayer.chooseUse(outcome,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",source,game)) {
      enchantedPlayer.discardOne(false,source,game);
      return true;
    }
    enchantedPlayer.loseLife(3,game,false);
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Permanent enchantment=game.getPermanent(source.getSourceId());
  if (enchantment == null || enchantment.getAttachedTo() == null) {
    return false;
  }
  Player enchantedPlayer=game.getPlayer(enchantment.getAttachedTo());
  if (enchantedPlayer != null) {
    int permanents=game.getBattlefield().countAll(StaticFilters.FILTER_PERMANENT_NON_LAND,enchantedPlayer.getId(),game);
    if (permanents > 0 && enchantedPlayer.chooseUse(outcome,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",source,game)) {
      Target target=new TargetPermanent(StaticFilters.FILTER_CONTROLLED_PERMANENT_NON_LAND);
      if (enchantedPlayer.choose(outcome,target,source.getSourceId(),game)) {
        Permanent permanent=game.getPermanent(target.getFirstTarget());
        if (permanent != null) {
          permanent.sacrifice(source.getSourceId(),game);
          return true;
        }
      }
    }
    if (!enchantedPlayer.getHand().isEmpty() && enchantedPlayer.chooseUse(outcome,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",source,game)) {
      enchantedPlayer.discardOne(false,source,game);
      return true;
    }
    enchantedPlayer.loseLife(3,game,false);
    return true;
  }
  return false;
}",0.8889795918367347
157995,"private ShardsOfAlara(){
  super(""String_Node_Str"",""String_Node_Str"",ExpansionSet.buildDate(2008,8,27),SetType.EXPANSION);
  this.blockName=""String_Node_Str"";
  this.hasBoosters=true;
  this.numBoosterLands=1;
  this.numBoosterCommon=10;
  this.numBoosterUncommon=3;
  this.numBoosterRare=1;
  this.ratioBoosterMythic=8;
  cards.add(new SetCardInfo(""String_Node_Str"",63,Rarity.RARE,mage.cards.a.AdNauseam.class));
  cards.add(new SetCardInfo(""String_Node_Str"",153,Rarity.COMMON,mage.cards.a.AgonyWarp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",154,Rarity.MYTHIC,mage.cards.a.AjaniVengeant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",1,Rarity.COMMON,mage.cards.a.AkrasanSquire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",123,Rarity.UNCOMMON,mage.cards.a.AlgaeGharial.class));
  cards.add(new SetCardInfo(""String_Node_Str"",3,Rarity.UNCOMMON,mage.cards.a.AngelicBenediction.class));
  cards.add(new SetCardInfo(""String_Node_Str"",2,Rarity.UNCOMMON,mage.cards.a.AngelsHerald.class));
  cards.add(new SetCardInfo(""String_Node_Str"",4,Rarity.COMMON,mage.cards.a.Angelsong.class));
  cards.add(new SetCardInfo(""String_Node_Str"",220,Rarity.UNCOMMON,mage.cards.a.ArcaneSanctum.class));
  cards.add(new SetCardInfo(""String_Node_Str"",64,Rarity.RARE,mage.cards.a.ArchdemonOfUnx.class));
  cards.add(new SetCardInfo(""String_Node_Str"",65,Rarity.COMMON,mage.cards.b.BanewaspAffliction.class));
  cards.add(new SetCardInfo(""String_Node_Str"",5,Rarity.UNCOMMON,mage.cards.b.BantBattlemage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",155,Rarity.UNCOMMON,mage.cards.b.BantCharm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",221,Rarity.COMMON,mage.cards.b.BantPanorama.class));
  cards.add(new SetCardInfo(""String_Node_Str"",6,Rarity.RARE,mage.cards.b.BattlegraceAngel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",124,Rarity.UNCOMMON,mage.cards.b.BehemothsHerald.class));
  cards.add(new SetCardInfo(""String_Node_Str"",156,Rarity.COMMON,mage.cards.b.Blightning.class));
  cards.add(new SetCardInfo(""String_Node_Str"",66,Rarity.COMMON,mage.cards.b.BlisterBeetle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",157,Rarity.UNCOMMON,mage.cards.b.BloodCultist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",93,Rarity.COMMON,mage.cards.b.BloodpyreElemental.class));
  cards.add(new SetCardInfo(""String_Node_Str"",94,Rarity.COMMON,mage.cards.b.BloodthornTaunter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",67,Rarity.COMMON,mage.cards.b.BoneSplinters.class));
  cards.add(new SetCardInfo(""String_Node_Str"",158,Rarity.COMMON,mage.cards.b.BranchingBolt.class));
  cards.add(new SetCardInfo(""String_Node_Str"",159,Rarity.RARE,mage.cards.b.BrilliantUltimatum.class));
  cards.add(new SetCardInfo(""String_Node_Str"",160,Rarity.RARE,mage.cards.b.BroodmateDragon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",161,Rarity.UNCOMMON,mage.cards.b.BullCerodon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",95,Rarity.RARE,mage.cards.c.CalderaHellion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",32,Rarity.COMMON,mage.cards.c.CallToHeel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",33,Rarity.COMMON,mage.cards.c.Cancel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",162,Rarity.COMMON,mage.cards.c.CarrionThrash.class));
  cards.add(new SetCardInfo(""String_Node_Str"",34,Rarity.COMMON,mage.cards.c.CatharticAdept.class));
  cards.add(new SetCardInfo(""String_Node_Str"",125,Rarity.COMMON,mage.cards.c.CavernThoctar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",163,Rarity.RARE,mage.cards.c.ClarionUltimatum.class));
  cards.add(new SetCardInfo(""String_Node_Str"",35,Rarity.COMMON,mage.cards.c.CloudheathDrake.class));
  cards.add(new SetCardInfo(""String_Node_Str"",36,Rarity.COMMON,mage.cards.c.ComaVeil.class));
  cards.add(new SetCardInfo(""String_Node_Str"",68,Rarity.UNCOMMON,mage.cards.c.CorpseConnoisseur.class));
  cards.add(new SetCardInfo(""String_Node_Str"",37,Rarity.COMMON,mage.cards.c.CouriersCapsule.class));
  cards.add(new SetCardInfo(""String_Node_Str"",126,Rarity.COMMON,mage.cards.c.CourtArchers.class));
  cards.add(new SetCardInfo(""String_Node_Str"",38,Rarity.RARE,mage.cards.c.CovenantOfMinds.class));
  cards.add(new SetCardInfo(""String_Node_Str"",7,Rarity.RARE,mage.cards.c.CradleOfVitality.class));
  cards.add(new SetCardInfo(""String_Node_Str"",96,Rarity.RARE,mage.cards.c.CrucibleOfFire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",164,Rarity.RARE,mage.cards.c.CruelUltimatum.class));
  cards.add(new SetCardInfo(""String_Node_Str"",222,Rarity.UNCOMMON,mage.cards.c.CrumblingNecropolis.class));
  cards.add(new SetCardInfo(""String_Node_Str"",69,Rarity.RARE,mage.cards.c.CunningLethemancer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",127,Rarity.COMMON,mage.cards.c.CylianElf.class));
  cards.add(new SetCardInfo(""String_Node_Str"",39,Rarity.UNCOMMON,mage.cards.d.DawnrayArcher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",70,Rarity.RARE,mage.cards.d.DeathBaron.class));
  cards.add(new SetCardInfo(""String_Node_Str"",71,Rarity.COMMON,mage.cards.d.Deathgreeter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",165,Rarity.COMMON,mage.cards.d.DeftDuelist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",72,Rarity.UNCOMMON,mage.cards.d.DemonsHerald.class));
  cards.add(new SetCardInfo(""String_Node_Str"",8,Rarity.COMMON,mage.cards.d.DispellersCapsule.class));
  cards.add(new SetCardInfo(""String_Node_Str"",97,Rarity.COMMON,mage.cards.d.DragonFodder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",98,Rarity.UNCOMMON,mage.cards.d.DragonsHerald.class));
  cards.add(new SetCardInfo(""String_Node_Str"",73,Rarity.COMMON,mage.cards.d.DregReaver.class));
  cards.add(new SetCardInfo(""String_Node_Str"",74,Rarity.COMMON,mage.cards.d.DregscapeZombie.class));
  cards.add(new SetCardInfo(""String_Node_Str"",128,Rarity.COMMON,mage.cards.d.DruidOfTheAnima.class));
  cards.add(new SetCardInfo(""String_Node_Str"",129,Rarity.UNCOMMON,mage.cards.d.Drumhunter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",9,Rarity.MYTHIC,mage.cards.e.ElspethKnightErrant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",130,Rarity.COMMON,mage.cards.e.ElvishVisionary.class));
  cards.add(new SetCardInfo(""String_Node_Str"",166,Rarity.MYTHIC,mage.cards.e.EmpyrialArchangel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",40,Rarity.UNCOMMON,mage.cards.e.EsperBattlemage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",167,Rarity.UNCOMMON,mage.cards.e.EsperCharm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",223,Rarity.COMMON,mage.cards.e.EsperPanorama.class));
  cards.add(new SetCardInfo(""String_Node_Str"",41,Rarity.UNCOMMON,mage.cards.e.EtheriumAstrolabe.class));
  cards.add(new SetCardInfo(""String_Node_Str"",42,Rarity.COMMON,mage.cards.e.EtheriumSculptor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",10,Rarity.RARE,mage.cards.e.EtherswornCanonist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",11,Rarity.COMMON,mage.cards.e.Excommunicate.class));
  cards.add(new SetCardInfo(""String_Node_Str"",75,Rarity.COMMON,mage.cards.e.ExecutionersCapsule.class));
  cards.add(new SetCardInfo(""String_Node_Str"",99,Rarity.UNCOMMON,mage.cards.e.ExuberantFirestoker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",43,Rarity.UNCOMMON,mage.cards.f.Fatestitcher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",131,Rarity.RARE,mage.cards.f.FeralHydra.class));
  cards.add(new SetCardInfo(""String_Node_Str"",44,Rarity.UNCOMMON,mage.cards.f.FiligreeSages.class));
  cards.add(new SetCardInfo(""String_Node_Str"",168,Rarity.UNCOMMON,mage.cards.f.FireFieldOgre.class));
  cards.add(new SetCardInfo(""String_Node_Str"",100,Rarity.RARE,mage.cards.f.FlameblastDragon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",76,Rarity.UNCOMMON,mage.cards.f.FleshbagMarauder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",246,Rarity.LAND,mage.cards.basiclands.Forest.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",247,Rarity.LAND,mage.cards.basiclands.Forest.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",248,Rarity.LAND,mage.cards.basiclands.Forest.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",249,Rarity.LAND,mage.cards.basiclands.Forest.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",45,Rarity.RARE,mage.cards.g.GatherSpecimens.class));
  cards.add(new SetCardInfo(""String_Node_Str"",132,Rarity.COMMON,mage.cards.g.GiftOfTheGargantuan.class));
  cards.add(new SetCardInfo(""String_Node_Str"",77,Rarity.COMMON,mage.cards.g.GlazeFiend.class));
  cards.add(new SetCardInfo(""String_Node_Str"",101,Rarity.RARE,mage.cards.g.GoblinAssault.class));
  cards.add(new SetCardInfo(""String_Node_Str"",169,Rarity.COMMON,mage.cards.g.GoblinDeathraiders.class));
  cards.add(new SetCardInfo(""String_Node_Str"",102,Rarity.COMMON,mage.cards.g.GoblinMountaineer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",170,Rarity.MYTHIC,mage.cards.g.Godsire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",133,Rarity.COMMON,mage.cards.g.Godtoucher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",78,Rarity.UNCOMMON,mage.cards.g.GrixisBattlemage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",171,Rarity.UNCOMMON,mage.cards.g.GrixisCharm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",224,Rarity.COMMON,mage.cards.g.GrixisPanorama.class));
  cards.add(new SetCardInfo(""String_Node_Str"",12,Rarity.COMMON,mage.cards.g.GuardiansOfAkrasa.class));
  cards.add(new SetCardInfo(""String_Node_Str"",13,Rarity.COMMON,mage.cards.g.GustriderExuberant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",172,Rarity.MYTHIC,mage.cards.h.HellkiteOverlord.class));
  cards.add(new SetCardInfo(""String_Node_Str"",103,Rarity.RARE,mage.cards.h.HellsThunder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",173,Rarity.COMMON,mage.cards.h.HinderingLight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",104,Rarity.COMMON,mage.cards.h.HissingIguanar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",79,Rarity.RARE,mage.cards.i.ImmortalCoil.class));
  cards.add(new SetCardInfo(""String_Node_Str"",105,Rarity.COMMON,mage.cards.i.IncurableOgre.class));
  cards.add(new SetCardInfo(""String_Node_Str"",80,Rarity.UNCOMMON,mage.cards.i.Infest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",14,Rarity.RARE,mage.cards.i.InvincibleHymn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",234,Rarity.LAND,mage.cards.basiclands.Island.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",235,Rarity.LAND,mage.cards.basiclands.Island.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",236,Rarity.LAND,mage.cards.basiclands.Island.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",237,Rarity.LAND,mage.cards.basiclands.Island.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",174,Rarity.UNCOMMON,mage.cards.j.JhessianInfiltrator.class));
  cards.add(new SetCardInfo(""String_Node_Str"",46,Rarity.COMMON,mage.cards.j.JhessianLookout.class));
  cards.add(new SetCardInfo(""String_Node_Str"",106,Rarity.UNCOMMON,mage.cards.j.JundBattlemage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",175,Rarity.UNCOMMON,mage.cards.j.JundCharm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",225,Rarity.COMMON,mage.cards.j.JundPanorama.class));
  cards.add(new SetCardInfo(""String_Node_Str"",226,Rarity.UNCOMMON,mage.cards.j.JungleShrine.class));
  cards.add(new SetCardInfo(""String_Node_Str"",134,Rarity.COMMON,mage.cards.j.JungleWeaver.class));
  cards.add(new SetCardInfo(""String_Node_Str"",47,Rarity.COMMON,mage.cards.k.KathariScreecher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",176,Rarity.COMMON,mage.cards.k.KederektCreeper.class));
  cards.add(new SetCardInfo(""String_Node_Str"",48,Rarity.RARE,mage.cards.k.KederektLeviathan.class));
  cards.add(new SetCardInfo(""String_Node_Str"",135,Rarity.RARE,mage.cards.k.KeeperOfProgenitus.class));
  cards.add(new SetCardInfo(""String_Node_Str"",177,Rarity.UNCOMMON,mage.cards.k.KissOfTheAmesha.class));
  cards.add(new SetCardInfo(""String_Node_Str"",17,Rarity.RARE,mage.cards.k.KnightCaptainOfEos.class));
  cards.add(new SetCardInfo(""String_Node_Str"",15,Rarity.COMMON,mage.cards.k.KnightOfTheSkywardEye.class));
  cards.add(new SetCardInfo(""String_Node_Str"",16,Rarity.RARE,mage.cards.k.KnightOfTheWhiteOrchid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",178,Rarity.MYTHIC,mage.cards.k.KreshTheBloodbraided.class));
  cards.add(new SetCardInfo(""String_Node_Str"",210,Rarity.MYTHIC,mage.cards.l.LichsMirror.class));
  cards.add(new SetCardInfo(""String_Node_Str"",107,Rarity.COMMON,mage.cards.l.LightningTalons.class));
  cards.add(new SetCardInfo(""String_Node_Str"",136,Rarity.COMMON,mage.cards.l.LushGrowth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",108,Rarity.COMMON,mage.cards.m.MagmaSpray.class));
  cards.add(new SetCardInfo(""String_Node_Str"",138,Rarity.RARE,mage.cards.m.Manaplasm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",18,Rarity.COMMON,mage.cards.m.MarbleChalice.class));
  cards.add(new SetCardInfo(""String_Node_Str"",49,Rarity.RARE,mage.cards.m.MasterOfEtherium.class));
  cards.add(new SetCardInfo(""String_Node_Str"",179,Rarity.MYTHIC,mage.cards.m.MayaelTheAnima.class));
  cards.add(new SetCardInfo(""String_Node_Str"",50,Rarity.RARE,mage.cards.m.MemoryErosion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",19,Rarity.UNCOMMON,mage.cards.m.Metallurgeon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",137,Rarity.UNCOMMON,mage.cards.m.MightyEmergence.class));
  cards.add(new SetCardInfo(""String_Node_Str"",51,Rarity.RARE,mage.cards.m.MindlockOrb.class));
  cards.add(new SetCardInfo(""String_Node_Str"",211,Rarity.RARE,mage.cards.m.MinionReflector.class));
  cards.add(new SetCardInfo(""String_Node_Str"",139,Rarity.COMMON,mage.cards.m.Mosstodon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",242,Rarity.LAND,mage.cards.basiclands.Mountain.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",243,Rarity.LAND,mage.cards.basiclands.Mountain.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",244,Rarity.LAND,mage.cards.basiclands.Mountain.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",245,Rarity.LAND,mage.cards.basiclands.Mountain.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",140,Rarity.RARE,mage.cards.m.Mycoloth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",141,Rarity.COMMON,mage.cards.n.Naturalize.class));
  cards.add(new SetCardInfo(""String_Node_Str"",142,Rarity.UNCOMMON,mage.cards.n.NayaBattlemage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",180,Rarity.UNCOMMON,mage.cards.n.NayaCharm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",227,Rarity.COMMON,mage.cards.n.NayaPanorama.class));
  cards.add(new SetCardInfo(""String_Node_Str"",181,Rarity.UNCOMMON,mage.cards.n.Necrogenesis.class));
  cards.add(new SetCardInfo(""String_Node_Str"",212,Rarity.COMMON,mage.cards.o.ObeliskOfBant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",213,Rarity.COMMON,mage.cards.o.ObeliskOfEsper.class));
  cards.add(new SetCardInfo(""String_Node_Str"",214,Rarity.COMMON,mage.cards.o.ObeliskOfGrixis.class));
  cards.add(new SetCardInfo(""String_Node_Str"",215,Rarity.COMMON,mage.cards.o.ObeliskOfJund.class));
  cards.add(new SetCardInfo(""String_Node_Str"",216,Rarity.COMMON,mage.cards.o.ObeliskOfNaya.class));
  cards.add(new SetCardInfo(""String_Node_Str"",20,Rarity.COMMON,mage.cards.o.OblivionRing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",81,Rarity.COMMON,mage.cards.o.OnyxGoblet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",143,Rarity.RARE,mage.cards.o.OozeGarden.class));
  cards.add(new SetCardInfo(""String_Node_Str"",52,Rarity.COMMON,mage.cards.o.OutriderOfJhess.class));
  cards.add(new SetCardInfo(""String_Node_Str"",230,Rarity.LAND,mage.cards.basiclands.Plains.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",231,Rarity.LAND,mage.cards.basiclands.Plains.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",232,Rarity.LAND,mage.cards.basiclands.Plains.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",233,Rarity.LAND,mage.cards.basiclands.Plains.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",109,Rarity.RARE,mage.cards.p.PredatorDragon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",182,Rarity.MYTHIC,mage.cards.p.PrinceOfThralls.class));
  cards.add(new SetCardInfo(""String_Node_Str"",53,Rarity.UNCOMMON,mage.cards.p.ProtomatterPowder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",183,Rarity.RARE,mage.cards.p.PunishIgnorance.class));
  cards.add(new SetCardInfo(""String_Node_Str"",82,Rarity.UNCOMMON,mage.cards.p.PuppetConjurer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",184,Rarity.UNCOMMON,mage.cards.q.QasaliAmbusher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",217,Rarity.RARE,mage.cards.q.QuietusSpike.class));
  cards.add(new SetCardInfo(""String_Node_Str"",185,Rarity.MYTHIC,mage.cards.r.RafiqOfTheMany.class));
  cards.add(new SetCardInfo(""String_Node_Str"",186,Rarity.COMMON,mage.cards.r.RakeclawGargantuan.class));
  cards.add(new SetCardInfo(""String_Node_Str"",21,Rarity.RARE,mage.cards.r.RangerOfEos.class));
  cards.add(new SetCardInfo(""String_Node_Str"",187,Rarity.RARE,mage.cards.r.RealmRazer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",218,Rarity.COMMON,mage.cards.r.RelicOfProgenitus.class));
  cards.add(new SetCardInfo(""String_Node_Str"",144,Rarity.COMMON,mage.cards.r.ResoundingRoar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",83,Rarity.COMMON,mage.cards.r.ResoundingScream.class));
  cards.add(new SetCardInfo(""String_Node_Str"",22,Rarity.COMMON,mage.cards.r.ResoundingSilence.class));
  cards.add(new SetCardInfo(""String_Node_Str"",110,Rarity.COMMON,mage.cards.r.ResoundingThunder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",54,Rarity.COMMON,mage.cards.r.ResoundingWave.class));
  cards.add(new SetCardInfo(""String_Node_Str"",145,Rarity.UNCOMMON,mage.cards.r.RhoxCharger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",188,Rarity.UNCOMMON,mage.cards.r.RhoxWarMonk.class));
  cards.add(new SetCardInfo(""String_Node_Str"",111,Rarity.COMMON,mage.cards.r.RidgeRannet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",189,Rarity.COMMON,mage.cards.r.RipClanCrasher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",23,Rarity.UNCOMMON,mage.cards.r.RockcasterPlatoon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",112,Rarity.UNCOMMON,mage.cards.r.RockslideElemental.class));
  cards.add(new SetCardInfo(""String_Node_Str"",146,Rarity.RARE,mage.cards.s.SacellumGodspeaker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",84,Rarity.RARE,mage.cards.s.SalvageTitan.class));
  cards.add(new SetCardInfo(""String_Node_Str"",24,Rarity.COMMON,mage.cards.s.SanctumGargoyle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",190,Rarity.UNCOMMON,mage.cards.s.SangriteSurge.class));
  cards.add(new SetCardInfo(""String_Node_Str"",191,Rarity.MYTHIC,mage.cards.s.SarkhanVol.class));
  cards.add(new SetCardInfo(""String_Node_Str"",147,Rarity.COMMON,mage.cards.s.SavageHunger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",228,Rarity.UNCOMMON,mage.cards.s.SavageLands.class));
  cards.add(new SetCardInfo(""String_Node_Str"",85,Rarity.UNCOMMON,mage.cards.s.ScavengerDrake.class));
  cards.add(new SetCardInfo(""String_Node_Str"",113,Rarity.UNCOMMON,mage.cards.s.ScourgeDevil.class));
  cards.add(new SetCardInfo(""String_Node_Str"",25,Rarity.RARE,mage.cards.s.Scourglass.class));
  cards.add(new SetCardInfo(""String_Node_Str"",229,Rarity.UNCOMMON,mage.cards.s.SeasideCitadel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",192,Rarity.RARE,mage.cards.s.SedraxisSpecter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",193,Rarity.MYTHIC,mage.cards.s.SedrisTheTraitorKing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",86,Rarity.COMMON,mage.cards.s.Shadowfeed.class));
  cards.add(new SetCardInfo(""String_Node_Str"",55,Rarity.RARE,mage.cards.s.ShardingSphinx.class));
  cards.add(new SetCardInfo(""String_Node_Str"",194,Rarity.MYTHIC,mage.cards.s.SharuumTheHegemon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",87,Rarity.COMMON,mage.cards.s.ShoreSnapper.class));
  cards.add(new SetCardInfo(""String_Node_Str"",26,Rarity.COMMON,mage.cards.s.SightedCasteSorcerer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",195,Rarity.COMMON,mage.cards.s.SigilBlessing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",27,Rarity.UNCOMMON,mage.cards.s.SigiledPaladin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",219,Rarity.RARE,mage.cards.s.SigilOfDistinction.class));
  cards.add(new SetCardInfo(""String_Node_Str"",88,Rarity.COMMON,mage.cards.s.SkeletalKathari.class));
  cards.add(new SetCardInfo(""String_Node_Str"",114,Rarity.UNCOMMON,mage.cards.s.Skeletonize.class));
  cards.add(new SetCardInfo(""String_Node_Str"",56,Rarity.RARE,mage.cards.s.SkillBorrower.class));
  cards.add(new SetCardInfo(""String_Node_Str"",148,Rarity.RARE,mage.cards.s.Skullmulcher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",115,Rarity.COMMON,mage.cards.s.SoulsFire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",28,Rarity.COMMON,mage.cards.s.SoulsGrace.class));
  cards.add(new SetCardInfo(""String_Node_Str"",149,Rarity.COMMON,mage.cards.s.SoulsMight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",150,Rarity.RARE,mage.cards.s.SpearbreakerBehemoth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",57,Rarity.COMMON,mage.cards.s.SpellSnip.class));
  cards.add(new SetCardInfo(""String_Node_Str"",58,Rarity.UNCOMMON,mage.cards.s.SphinxsHerald.class));
  cards.add(new SetCardInfo(""String_Node_Str"",196,Rarity.MYTHIC,mage.cards.s.SphinxSovereign.class));
  cards.add(new SetCardInfo(""String_Node_Str"",197,Rarity.UNCOMMON,mage.cards.s.SproutingThrinax.class));
  cards.add(new SetCardInfo(""String_Node_Str"",59,Rarity.COMMON,mage.cards.s.SteelcladSerpent.class));
  cards.add(new SetCardInfo(""String_Node_Str"",198,Rarity.COMMON,mage.cards.s.StewardOfValeron.class));
  cards.add(new SetCardInfo(""String_Node_Str"",199,Rarity.RARE,mage.cards.s.StoicAngel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",29,Rarity.UNCOMMON,mage.cards.s.SunseedNurturer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",238,Rarity.LAND,mage.cards.basiclands.Swamp.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",239,Rarity.LAND,mage.cards.basiclands.Swamp.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",240,Rarity.LAND,mage.cards.basiclands.Swamp.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",241,Rarity.LAND,mage.cards.basiclands.Swamp.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",200,Rarity.UNCOMMON,mage.cards.s.Swerve.class));
  cards.add(new SetCardInfo(""String_Node_Str"",89,Rarity.RARE,mage.cards.t.TarFiend.class));
  cards.add(new SetCardInfo(""String_Node_Str"",60,Rarity.MYTHIC,mage.cards.t.TezzeretTheSeeker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",116,Rarity.COMMON,mage.cards.t.ThornThrashViashino.class));
  cards.add(new SetCardInfo(""String_Node_Str"",201,Rarity.UNCOMMON,mage.cards.t.ThoughtcutterAgent.class));
  cards.add(new SetCardInfo(""String_Node_Str"",117,Rarity.UNCOMMON,mage.cards.t.ThunderThrashElder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",202,Rarity.UNCOMMON,mage.cards.t.TidehollowSculler.class));
  cards.add(new SetCardInfo(""String_Node_Str"",203,Rarity.COMMON,mage.cards.t.TidehollowStrix.class));
  cards.add(new SetCardInfo(""String_Node_Str"",204,Rarity.RARE,mage.cards.t.TitanicUltimatum.class));
  cards.add(new SetCardInfo(""String_Node_Str"",151,Rarity.UNCOMMON,mage.cards.t.TopanAscetic.class));
  cards.add(new SetCardInfo(""String_Node_Str"",61,Rarity.COMMON,mage.cards.t.TortoiseFormation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",205,Rarity.UNCOMMON,mage.cards.t.TowerGargoyle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",90,Rarity.COMMON,mage.cards.u.UndeadLeotau.class));
  cards.add(new SetCardInfo(""String_Node_Str"",62,Rarity.COMMON,mage.cards.v.VectisSilencers.class));
  cards.add(new SetCardInfo(""String_Node_Str"",91,Rarity.RARE,mage.cards.v.VeinDrinker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",118,Rarity.COMMON,mage.cards.v.ViashinoSkeleton.class));
  cards.add(new SetCardInfo(""String_Node_Str"",119,Rarity.RARE,mage.cards.v.ViciousShadows.class));
  cards.add(new SetCardInfo(""String_Node_Str"",206,Rarity.RARE,mage.cards.v.ViolentUltimatum.class));
  cards.add(new SetCardInfo(""String_Node_Str"",92,Rarity.COMMON,mage.cards.v.VisceraDragger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",120,Rarity.COMMON,mage.cards.v.VithianStinger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",121,Rarity.COMMON,mage.cards.v.VolcanicSubmersion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",207,Rarity.COMMON,mage.cards.w.WaveskimmerAven.class));
  cards.add(new SetCardInfo(""String_Node_Str"",30,Rarity.COMMON,mage.cards.w.WelkinGuide.class));
  cards.add(new SetCardInfo(""String_Node_Str"",122,Rarity.RARE,mage.cards.w.WhereAncientsTread.class));
  cards.add(new SetCardInfo(""String_Node_Str"",152,Rarity.COMMON,mage.cards.w.WildNacatl.class));
  cards.add(new SetCardInfo(""String_Node_Str"",208,Rarity.COMMON,mage.cards.w.WindwrightMage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",209,Rarity.UNCOMMON,mage.cards.w.WoollyThoctar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",31,Rarity.COMMON,mage.cards.y.YokedPlowbeast.class));
}","private ShardsOfAlara(){
  super(""String_Node_Str"",""String_Node_Str"",ExpansionSet.buildDate(2008,10,3),SetType.EXPANSION);
  this.blockName=""String_Node_Str"";
  this.hasBoosters=true;
  this.numBoosterLands=1;
  this.numBoosterCommon=10;
  this.numBoosterUncommon=3;
  this.numBoosterRare=1;
  this.ratioBoosterMythic=8;
  cards.add(new SetCardInfo(""String_Node_Str"",63,Rarity.RARE,mage.cards.a.AdNauseam.class));
  cards.add(new SetCardInfo(""String_Node_Str"",153,Rarity.COMMON,mage.cards.a.AgonyWarp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",154,Rarity.MYTHIC,mage.cards.a.AjaniVengeant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",1,Rarity.COMMON,mage.cards.a.AkrasanSquire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",123,Rarity.UNCOMMON,mage.cards.a.AlgaeGharial.class));
  cards.add(new SetCardInfo(""String_Node_Str"",3,Rarity.UNCOMMON,mage.cards.a.AngelicBenediction.class));
  cards.add(new SetCardInfo(""String_Node_Str"",2,Rarity.UNCOMMON,mage.cards.a.AngelsHerald.class));
  cards.add(new SetCardInfo(""String_Node_Str"",4,Rarity.COMMON,mage.cards.a.Angelsong.class));
  cards.add(new SetCardInfo(""String_Node_Str"",220,Rarity.UNCOMMON,mage.cards.a.ArcaneSanctum.class));
  cards.add(new SetCardInfo(""String_Node_Str"",64,Rarity.RARE,mage.cards.a.ArchdemonOfUnx.class));
  cards.add(new SetCardInfo(""String_Node_Str"",65,Rarity.COMMON,mage.cards.b.BanewaspAffliction.class));
  cards.add(new SetCardInfo(""String_Node_Str"",5,Rarity.UNCOMMON,mage.cards.b.BantBattlemage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",155,Rarity.UNCOMMON,mage.cards.b.BantCharm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",221,Rarity.COMMON,mage.cards.b.BantPanorama.class));
  cards.add(new SetCardInfo(""String_Node_Str"",6,Rarity.RARE,mage.cards.b.BattlegraceAngel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",124,Rarity.UNCOMMON,mage.cards.b.BehemothsHerald.class));
  cards.add(new SetCardInfo(""String_Node_Str"",156,Rarity.COMMON,mage.cards.b.Blightning.class));
  cards.add(new SetCardInfo(""String_Node_Str"",66,Rarity.COMMON,mage.cards.b.BlisterBeetle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",157,Rarity.UNCOMMON,mage.cards.b.BloodCultist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",93,Rarity.COMMON,mage.cards.b.BloodpyreElemental.class));
  cards.add(new SetCardInfo(""String_Node_Str"",94,Rarity.COMMON,mage.cards.b.BloodthornTaunter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",67,Rarity.COMMON,mage.cards.b.BoneSplinters.class));
  cards.add(new SetCardInfo(""String_Node_Str"",158,Rarity.COMMON,mage.cards.b.BranchingBolt.class));
  cards.add(new SetCardInfo(""String_Node_Str"",159,Rarity.RARE,mage.cards.b.BrilliantUltimatum.class));
  cards.add(new SetCardInfo(""String_Node_Str"",160,Rarity.RARE,mage.cards.b.BroodmateDragon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",161,Rarity.UNCOMMON,mage.cards.b.BullCerodon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",95,Rarity.RARE,mage.cards.c.CalderaHellion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",32,Rarity.COMMON,mage.cards.c.CallToHeel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",33,Rarity.COMMON,mage.cards.c.Cancel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",162,Rarity.COMMON,mage.cards.c.CarrionThrash.class));
  cards.add(new SetCardInfo(""String_Node_Str"",34,Rarity.COMMON,mage.cards.c.CatharticAdept.class));
  cards.add(new SetCardInfo(""String_Node_Str"",125,Rarity.COMMON,mage.cards.c.CavernThoctar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",163,Rarity.RARE,mage.cards.c.ClarionUltimatum.class));
  cards.add(new SetCardInfo(""String_Node_Str"",35,Rarity.COMMON,mage.cards.c.CloudheathDrake.class));
  cards.add(new SetCardInfo(""String_Node_Str"",36,Rarity.COMMON,mage.cards.c.ComaVeil.class));
  cards.add(new SetCardInfo(""String_Node_Str"",68,Rarity.UNCOMMON,mage.cards.c.CorpseConnoisseur.class));
  cards.add(new SetCardInfo(""String_Node_Str"",37,Rarity.COMMON,mage.cards.c.CouriersCapsule.class));
  cards.add(new SetCardInfo(""String_Node_Str"",126,Rarity.COMMON,mage.cards.c.CourtArchers.class));
  cards.add(new SetCardInfo(""String_Node_Str"",38,Rarity.RARE,mage.cards.c.CovenantOfMinds.class));
  cards.add(new SetCardInfo(""String_Node_Str"",7,Rarity.RARE,mage.cards.c.CradleOfVitality.class));
  cards.add(new SetCardInfo(""String_Node_Str"",96,Rarity.RARE,mage.cards.c.CrucibleOfFire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",164,Rarity.RARE,mage.cards.c.CruelUltimatum.class));
  cards.add(new SetCardInfo(""String_Node_Str"",222,Rarity.UNCOMMON,mage.cards.c.CrumblingNecropolis.class));
  cards.add(new SetCardInfo(""String_Node_Str"",69,Rarity.RARE,mage.cards.c.CunningLethemancer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",127,Rarity.COMMON,mage.cards.c.CylianElf.class));
  cards.add(new SetCardInfo(""String_Node_Str"",39,Rarity.UNCOMMON,mage.cards.d.DawnrayArcher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",70,Rarity.RARE,mage.cards.d.DeathBaron.class));
  cards.add(new SetCardInfo(""String_Node_Str"",71,Rarity.COMMON,mage.cards.d.Deathgreeter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",165,Rarity.COMMON,mage.cards.d.DeftDuelist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",72,Rarity.UNCOMMON,mage.cards.d.DemonsHerald.class));
  cards.add(new SetCardInfo(""String_Node_Str"",8,Rarity.COMMON,mage.cards.d.DispellersCapsule.class));
  cards.add(new SetCardInfo(""String_Node_Str"",97,Rarity.COMMON,mage.cards.d.DragonFodder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",98,Rarity.UNCOMMON,mage.cards.d.DragonsHerald.class));
  cards.add(new SetCardInfo(""String_Node_Str"",73,Rarity.COMMON,mage.cards.d.DregReaver.class));
  cards.add(new SetCardInfo(""String_Node_Str"",74,Rarity.COMMON,mage.cards.d.DregscapeZombie.class));
  cards.add(new SetCardInfo(""String_Node_Str"",128,Rarity.COMMON,mage.cards.d.DruidOfTheAnima.class));
  cards.add(new SetCardInfo(""String_Node_Str"",129,Rarity.UNCOMMON,mage.cards.d.Drumhunter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",9,Rarity.MYTHIC,mage.cards.e.ElspethKnightErrant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",130,Rarity.COMMON,mage.cards.e.ElvishVisionary.class));
  cards.add(new SetCardInfo(""String_Node_Str"",166,Rarity.MYTHIC,mage.cards.e.EmpyrialArchangel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",40,Rarity.UNCOMMON,mage.cards.e.EsperBattlemage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",167,Rarity.UNCOMMON,mage.cards.e.EsperCharm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",223,Rarity.COMMON,mage.cards.e.EsperPanorama.class));
  cards.add(new SetCardInfo(""String_Node_Str"",41,Rarity.UNCOMMON,mage.cards.e.EtheriumAstrolabe.class));
  cards.add(new SetCardInfo(""String_Node_Str"",42,Rarity.COMMON,mage.cards.e.EtheriumSculptor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",10,Rarity.RARE,mage.cards.e.EtherswornCanonist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",11,Rarity.COMMON,mage.cards.e.Excommunicate.class));
  cards.add(new SetCardInfo(""String_Node_Str"",75,Rarity.COMMON,mage.cards.e.ExecutionersCapsule.class));
  cards.add(new SetCardInfo(""String_Node_Str"",99,Rarity.UNCOMMON,mage.cards.e.ExuberantFirestoker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",43,Rarity.UNCOMMON,mage.cards.f.Fatestitcher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",131,Rarity.RARE,mage.cards.f.FeralHydra.class));
  cards.add(new SetCardInfo(""String_Node_Str"",44,Rarity.UNCOMMON,mage.cards.f.FiligreeSages.class));
  cards.add(new SetCardInfo(""String_Node_Str"",168,Rarity.UNCOMMON,mage.cards.f.FireFieldOgre.class));
  cards.add(new SetCardInfo(""String_Node_Str"",100,Rarity.RARE,mage.cards.f.FlameblastDragon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",76,Rarity.UNCOMMON,mage.cards.f.FleshbagMarauder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",246,Rarity.LAND,mage.cards.basiclands.Forest.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",247,Rarity.LAND,mage.cards.basiclands.Forest.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",248,Rarity.LAND,mage.cards.basiclands.Forest.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",249,Rarity.LAND,mage.cards.basiclands.Forest.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",45,Rarity.RARE,mage.cards.g.GatherSpecimens.class));
  cards.add(new SetCardInfo(""String_Node_Str"",132,Rarity.COMMON,mage.cards.g.GiftOfTheGargantuan.class));
  cards.add(new SetCardInfo(""String_Node_Str"",77,Rarity.COMMON,mage.cards.g.GlazeFiend.class));
  cards.add(new SetCardInfo(""String_Node_Str"",101,Rarity.RARE,mage.cards.g.GoblinAssault.class));
  cards.add(new SetCardInfo(""String_Node_Str"",169,Rarity.COMMON,mage.cards.g.GoblinDeathraiders.class));
  cards.add(new SetCardInfo(""String_Node_Str"",102,Rarity.COMMON,mage.cards.g.GoblinMountaineer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",170,Rarity.MYTHIC,mage.cards.g.Godsire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",133,Rarity.COMMON,mage.cards.g.Godtoucher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",78,Rarity.UNCOMMON,mage.cards.g.GrixisBattlemage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",171,Rarity.UNCOMMON,mage.cards.g.GrixisCharm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",224,Rarity.COMMON,mage.cards.g.GrixisPanorama.class));
  cards.add(new SetCardInfo(""String_Node_Str"",12,Rarity.COMMON,mage.cards.g.GuardiansOfAkrasa.class));
  cards.add(new SetCardInfo(""String_Node_Str"",13,Rarity.COMMON,mage.cards.g.GustriderExuberant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",172,Rarity.MYTHIC,mage.cards.h.HellkiteOverlord.class));
  cards.add(new SetCardInfo(""String_Node_Str"",103,Rarity.RARE,mage.cards.h.HellsThunder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",173,Rarity.COMMON,mage.cards.h.HinderingLight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",104,Rarity.COMMON,mage.cards.h.HissingIguanar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",79,Rarity.RARE,mage.cards.i.ImmortalCoil.class));
  cards.add(new SetCardInfo(""String_Node_Str"",105,Rarity.COMMON,mage.cards.i.IncurableOgre.class));
  cards.add(new SetCardInfo(""String_Node_Str"",80,Rarity.UNCOMMON,mage.cards.i.Infest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",14,Rarity.RARE,mage.cards.i.InvincibleHymn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",234,Rarity.LAND,mage.cards.basiclands.Island.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",235,Rarity.LAND,mage.cards.basiclands.Island.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",236,Rarity.LAND,mage.cards.basiclands.Island.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",237,Rarity.LAND,mage.cards.basiclands.Island.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",174,Rarity.UNCOMMON,mage.cards.j.JhessianInfiltrator.class));
  cards.add(new SetCardInfo(""String_Node_Str"",46,Rarity.COMMON,mage.cards.j.JhessianLookout.class));
  cards.add(new SetCardInfo(""String_Node_Str"",106,Rarity.UNCOMMON,mage.cards.j.JundBattlemage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",175,Rarity.UNCOMMON,mage.cards.j.JundCharm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",225,Rarity.COMMON,mage.cards.j.JundPanorama.class));
  cards.add(new SetCardInfo(""String_Node_Str"",226,Rarity.UNCOMMON,mage.cards.j.JungleShrine.class));
  cards.add(new SetCardInfo(""String_Node_Str"",134,Rarity.COMMON,mage.cards.j.JungleWeaver.class));
  cards.add(new SetCardInfo(""String_Node_Str"",47,Rarity.COMMON,mage.cards.k.KathariScreecher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",176,Rarity.COMMON,mage.cards.k.KederektCreeper.class));
  cards.add(new SetCardInfo(""String_Node_Str"",48,Rarity.RARE,mage.cards.k.KederektLeviathan.class));
  cards.add(new SetCardInfo(""String_Node_Str"",135,Rarity.RARE,mage.cards.k.KeeperOfProgenitus.class));
  cards.add(new SetCardInfo(""String_Node_Str"",177,Rarity.UNCOMMON,mage.cards.k.KissOfTheAmesha.class));
  cards.add(new SetCardInfo(""String_Node_Str"",17,Rarity.RARE,mage.cards.k.KnightCaptainOfEos.class));
  cards.add(new SetCardInfo(""String_Node_Str"",15,Rarity.COMMON,mage.cards.k.KnightOfTheSkywardEye.class));
  cards.add(new SetCardInfo(""String_Node_Str"",16,Rarity.RARE,mage.cards.k.KnightOfTheWhiteOrchid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",178,Rarity.MYTHIC,mage.cards.k.KreshTheBloodbraided.class));
  cards.add(new SetCardInfo(""String_Node_Str"",210,Rarity.MYTHIC,mage.cards.l.LichsMirror.class));
  cards.add(new SetCardInfo(""String_Node_Str"",107,Rarity.COMMON,mage.cards.l.LightningTalons.class));
  cards.add(new SetCardInfo(""String_Node_Str"",136,Rarity.COMMON,mage.cards.l.LushGrowth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",108,Rarity.COMMON,mage.cards.m.MagmaSpray.class));
  cards.add(new SetCardInfo(""String_Node_Str"",138,Rarity.RARE,mage.cards.m.Manaplasm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",18,Rarity.COMMON,mage.cards.m.MarbleChalice.class));
  cards.add(new SetCardInfo(""String_Node_Str"",49,Rarity.RARE,mage.cards.m.MasterOfEtherium.class));
  cards.add(new SetCardInfo(""String_Node_Str"",179,Rarity.MYTHIC,mage.cards.m.MayaelTheAnima.class));
  cards.add(new SetCardInfo(""String_Node_Str"",50,Rarity.RARE,mage.cards.m.MemoryErosion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",19,Rarity.UNCOMMON,mage.cards.m.Metallurgeon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",137,Rarity.UNCOMMON,mage.cards.m.MightyEmergence.class));
  cards.add(new SetCardInfo(""String_Node_Str"",51,Rarity.RARE,mage.cards.m.MindlockOrb.class));
  cards.add(new SetCardInfo(""String_Node_Str"",211,Rarity.RARE,mage.cards.m.MinionReflector.class));
  cards.add(new SetCardInfo(""String_Node_Str"",139,Rarity.COMMON,mage.cards.m.Mosstodon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",242,Rarity.LAND,mage.cards.basiclands.Mountain.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",243,Rarity.LAND,mage.cards.basiclands.Mountain.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",244,Rarity.LAND,mage.cards.basiclands.Mountain.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",245,Rarity.LAND,mage.cards.basiclands.Mountain.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",140,Rarity.RARE,mage.cards.m.Mycoloth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",141,Rarity.COMMON,mage.cards.n.Naturalize.class));
  cards.add(new SetCardInfo(""String_Node_Str"",142,Rarity.UNCOMMON,mage.cards.n.NayaBattlemage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",180,Rarity.UNCOMMON,mage.cards.n.NayaCharm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",227,Rarity.COMMON,mage.cards.n.NayaPanorama.class));
  cards.add(new SetCardInfo(""String_Node_Str"",181,Rarity.UNCOMMON,mage.cards.n.Necrogenesis.class));
  cards.add(new SetCardInfo(""String_Node_Str"",212,Rarity.COMMON,mage.cards.o.ObeliskOfBant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",213,Rarity.COMMON,mage.cards.o.ObeliskOfEsper.class));
  cards.add(new SetCardInfo(""String_Node_Str"",214,Rarity.COMMON,mage.cards.o.ObeliskOfGrixis.class));
  cards.add(new SetCardInfo(""String_Node_Str"",215,Rarity.COMMON,mage.cards.o.ObeliskOfJund.class));
  cards.add(new SetCardInfo(""String_Node_Str"",216,Rarity.COMMON,mage.cards.o.ObeliskOfNaya.class));
  cards.add(new SetCardInfo(""String_Node_Str"",20,Rarity.COMMON,mage.cards.o.OblivionRing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",81,Rarity.COMMON,mage.cards.o.OnyxGoblet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",143,Rarity.RARE,mage.cards.o.OozeGarden.class));
  cards.add(new SetCardInfo(""String_Node_Str"",52,Rarity.COMMON,mage.cards.o.OutriderOfJhess.class));
  cards.add(new SetCardInfo(""String_Node_Str"",230,Rarity.LAND,mage.cards.basiclands.Plains.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",231,Rarity.LAND,mage.cards.basiclands.Plains.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",232,Rarity.LAND,mage.cards.basiclands.Plains.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",233,Rarity.LAND,mage.cards.basiclands.Plains.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",109,Rarity.RARE,mage.cards.p.PredatorDragon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",182,Rarity.MYTHIC,mage.cards.p.PrinceOfThralls.class));
  cards.add(new SetCardInfo(""String_Node_Str"",53,Rarity.UNCOMMON,mage.cards.p.ProtomatterPowder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",183,Rarity.RARE,mage.cards.p.PunishIgnorance.class));
  cards.add(new SetCardInfo(""String_Node_Str"",82,Rarity.UNCOMMON,mage.cards.p.PuppetConjurer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",184,Rarity.UNCOMMON,mage.cards.q.QasaliAmbusher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",217,Rarity.RARE,mage.cards.q.QuietusSpike.class));
  cards.add(new SetCardInfo(""String_Node_Str"",185,Rarity.MYTHIC,mage.cards.r.RafiqOfTheMany.class));
  cards.add(new SetCardInfo(""String_Node_Str"",186,Rarity.COMMON,mage.cards.r.RakeclawGargantuan.class));
  cards.add(new SetCardInfo(""String_Node_Str"",21,Rarity.RARE,mage.cards.r.RangerOfEos.class));
  cards.add(new SetCardInfo(""String_Node_Str"",187,Rarity.RARE,mage.cards.r.RealmRazer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",218,Rarity.COMMON,mage.cards.r.RelicOfProgenitus.class));
  cards.add(new SetCardInfo(""String_Node_Str"",144,Rarity.COMMON,mage.cards.r.ResoundingRoar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",83,Rarity.COMMON,mage.cards.r.ResoundingScream.class));
  cards.add(new SetCardInfo(""String_Node_Str"",22,Rarity.COMMON,mage.cards.r.ResoundingSilence.class));
  cards.add(new SetCardInfo(""String_Node_Str"",110,Rarity.COMMON,mage.cards.r.ResoundingThunder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",54,Rarity.COMMON,mage.cards.r.ResoundingWave.class));
  cards.add(new SetCardInfo(""String_Node_Str"",145,Rarity.UNCOMMON,mage.cards.r.RhoxCharger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",188,Rarity.UNCOMMON,mage.cards.r.RhoxWarMonk.class));
  cards.add(new SetCardInfo(""String_Node_Str"",111,Rarity.COMMON,mage.cards.r.RidgeRannet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",189,Rarity.COMMON,mage.cards.r.RipClanCrasher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",23,Rarity.UNCOMMON,mage.cards.r.RockcasterPlatoon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",112,Rarity.UNCOMMON,mage.cards.r.RockslideElemental.class));
  cards.add(new SetCardInfo(""String_Node_Str"",146,Rarity.RARE,mage.cards.s.SacellumGodspeaker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",84,Rarity.RARE,mage.cards.s.SalvageTitan.class));
  cards.add(new SetCardInfo(""String_Node_Str"",24,Rarity.COMMON,mage.cards.s.SanctumGargoyle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",190,Rarity.UNCOMMON,mage.cards.s.SangriteSurge.class));
  cards.add(new SetCardInfo(""String_Node_Str"",191,Rarity.MYTHIC,mage.cards.s.SarkhanVol.class));
  cards.add(new SetCardInfo(""String_Node_Str"",147,Rarity.COMMON,mage.cards.s.SavageHunger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",228,Rarity.UNCOMMON,mage.cards.s.SavageLands.class));
  cards.add(new SetCardInfo(""String_Node_Str"",85,Rarity.UNCOMMON,mage.cards.s.ScavengerDrake.class));
  cards.add(new SetCardInfo(""String_Node_Str"",113,Rarity.UNCOMMON,mage.cards.s.ScourgeDevil.class));
  cards.add(new SetCardInfo(""String_Node_Str"",25,Rarity.RARE,mage.cards.s.Scourglass.class));
  cards.add(new SetCardInfo(""String_Node_Str"",229,Rarity.UNCOMMON,mage.cards.s.SeasideCitadel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",192,Rarity.RARE,mage.cards.s.SedraxisSpecter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",193,Rarity.MYTHIC,mage.cards.s.SedrisTheTraitorKing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",86,Rarity.COMMON,mage.cards.s.Shadowfeed.class));
  cards.add(new SetCardInfo(""String_Node_Str"",55,Rarity.RARE,mage.cards.s.ShardingSphinx.class));
  cards.add(new SetCardInfo(""String_Node_Str"",194,Rarity.MYTHIC,mage.cards.s.SharuumTheHegemon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",87,Rarity.COMMON,mage.cards.s.ShoreSnapper.class));
  cards.add(new SetCardInfo(""String_Node_Str"",26,Rarity.COMMON,mage.cards.s.SightedCasteSorcerer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",195,Rarity.COMMON,mage.cards.s.SigilBlessing.class));
  cards.add(new SetCardInfo(""String_Node_Str"",27,Rarity.UNCOMMON,mage.cards.s.SigiledPaladin.class));
  cards.add(new SetCardInfo(""String_Node_Str"",219,Rarity.RARE,mage.cards.s.SigilOfDistinction.class));
  cards.add(new SetCardInfo(""String_Node_Str"",88,Rarity.COMMON,mage.cards.s.SkeletalKathari.class));
  cards.add(new SetCardInfo(""String_Node_Str"",114,Rarity.UNCOMMON,mage.cards.s.Skeletonize.class));
  cards.add(new SetCardInfo(""String_Node_Str"",56,Rarity.RARE,mage.cards.s.SkillBorrower.class));
  cards.add(new SetCardInfo(""String_Node_Str"",148,Rarity.RARE,mage.cards.s.Skullmulcher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",115,Rarity.COMMON,mage.cards.s.SoulsFire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",28,Rarity.COMMON,mage.cards.s.SoulsGrace.class));
  cards.add(new SetCardInfo(""String_Node_Str"",149,Rarity.COMMON,mage.cards.s.SoulsMight.class));
  cards.add(new SetCardInfo(""String_Node_Str"",150,Rarity.RARE,mage.cards.s.SpearbreakerBehemoth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",57,Rarity.COMMON,mage.cards.s.SpellSnip.class));
  cards.add(new SetCardInfo(""String_Node_Str"",58,Rarity.UNCOMMON,mage.cards.s.SphinxsHerald.class));
  cards.add(new SetCardInfo(""String_Node_Str"",196,Rarity.MYTHIC,mage.cards.s.SphinxSovereign.class));
  cards.add(new SetCardInfo(""String_Node_Str"",197,Rarity.UNCOMMON,mage.cards.s.SproutingThrinax.class));
  cards.add(new SetCardInfo(""String_Node_Str"",59,Rarity.COMMON,mage.cards.s.SteelcladSerpent.class));
  cards.add(new SetCardInfo(""String_Node_Str"",198,Rarity.COMMON,mage.cards.s.StewardOfValeron.class));
  cards.add(new SetCardInfo(""String_Node_Str"",199,Rarity.RARE,mage.cards.s.StoicAngel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",29,Rarity.UNCOMMON,mage.cards.s.SunseedNurturer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",238,Rarity.LAND,mage.cards.basiclands.Swamp.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",239,Rarity.LAND,mage.cards.basiclands.Swamp.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",240,Rarity.LAND,mage.cards.basiclands.Swamp.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",241,Rarity.LAND,mage.cards.basiclands.Swamp.class,new CardGraphicInfo(null,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",200,Rarity.UNCOMMON,mage.cards.s.Swerve.class));
  cards.add(new SetCardInfo(""String_Node_Str"",89,Rarity.RARE,mage.cards.t.TarFiend.class));
  cards.add(new SetCardInfo(""String_Node_Str"",60,Rarity.MYTHIC,mage.cards.t.TezzeretTheSeeker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",116,Rarity.COMMON,mage.cards.t.ThornThrashViashino.class));
  cards.add(new SetCardInfo(""String_Node_Str"",201,Rarity.UNCOMMON,mage.cards.t.ThoughtcutterAgent.class));
  cards.add(new SetCardInfo(""String_Node_Str"",117,Rarity.UNCOMMON,mage.cards.t.ThunderThrashElder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",202,Rarity.UNCOMMON,mage.cards.t.TidehollowSculler.class));
  cards.add(new SetCardInfo(""String_Node_Str"",203,Rarity.COMMON,mage.cards.t.TidehollowStrix.class));
  cards.add(new SetCardInfo(""String_Node_Str"",204,Rarity.RARE,mage.cards.t.TitanicUltimatum.class));
  cards.add(new SetCardInfo(""String_Node_Str"",151,Rarity.UNCOMMON,mage.cards.t.TopanAscetic.class));
  cards.add(new SetCardInfo(""String_Node_Str"",61,Rarity.COMMON,mage.cards.t.TortoiseFormation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",205,Rarity.UNCOMMON,mage.cards.t.TowerGargoyle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",90,Rarity.COMMON,mage.cards.u.UndeadLeotau.class));
  cards.add(new SetCardInfo(""String_Node_Str"",62,Rarity.COMMON,mage.cards.v.VectisSilencers.class));
  cards.add(new SetCardInfo(""String_Node_Str"",91,Rarity.RARE,mage.cards.v.VeinDrinker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",118,Rarity.COMMON,mage.cards.v.ViashinoSkeleton.class));
  cards.add(new SetCardInfo(""String_Node_Str"",119,Rarity.RARE,mage.cards.v.ViciousShadows.class));
  cards.add(new SetCardInfo(""String_Node_Str"",206,Rarity.RARE,mage.cards.v.ViolentUltimatum.class));
  cards.add(new SetCardInfo(""String_Node_Str"",92,Rarity.COMMON,mage.cards.v.VisceraDragger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",120,Rarity.COMMON,mage.cards.v.VithianStinger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",121,Rarity.COMMON,mage.cards.v.VolcanicSubmersion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",207,Rarity.COMMON,mage.cards.w.WaveskimmerAven.class));
  cards.add(new SetCardInfo(""String_Node_Str"",30,Rarity.COMMON,mage.cards.w.WelkinGuide.class));
  cards.add(new SetCardInfo(""String_Node_Str"",122,Rarity.RARE,mage.cards.w.WhereAncientsTread.class));
  cards.add(new SetCardInfo(""String_Node_Str"",152,Rarity.COMMON,mage.cards.w.WildNacatl.class));
  cards.add(new SetCardInfo(""String_Node_Str"",208,Rarity.COMMON,mage.cards.w.WindwrightMage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",209,Rarity.UNCOMMON,mage.cards.w.WoollyThoctar.class));
  cards.add(new SetCardInfo(""String_Node_Str"",31,Rarity.COMMON,mage.cards.y.YokedPlowbeast.class));
}",0.9998457385268028
157996,"private HourOfDevastation(){
  super(""String_Node_Str"",""String_Node_Str"",ExpansionSet.buildDate(2017,7,14),SetType.EXPANSION);
  this.blockName=""String_Node_Str"";
  this.parentSet=Amonkhet.getInstance();
  this.hasBasicLands=true;
  this.hasBoosters=true;
  this.numBoosterLands=1;
  this.numBoosterCommon=10;
  this.numBoosterUncommon=3;
  this.numBoosterRare=1;
  this.ratioBoosterMythic=8;
  this.ratioBoosterSpecialLand=144;
  cards.add(new SetCardInfo(""String_Node_Str"",83,Rarity.UNCOMMON,mage.cards.a.Abrade.class));
  cards.add(new SetCardInfo(""String_Node_Str"",56,Rarity.UNCOMMON,mage.cards.a.AccursedHorde.class));
  cards.add(new SetCardInfo(""String_Node_Str"",1,Rarity.COMMON,mage.cards.a.ActOfHeroism.class));
  cards.add(new SetCardInfo(""String_Node_Str"",2,Rarity.RARE,mage.cards.a.AdornedPouncer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",3,Rarity.RARE,mage.cards.a.AngelOfCondemnation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",4,Rarity.UNCOMMON,mage.cards.a.AngelOfTheGodPharaoh.class));
  cards.add(new SetCardInfo(""String_Node_Str"",30,Rarity.COMMON,mage.cards.a.AvenReedstalker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",5,Rarity.COMMON,mage.cards.a.AvenOfEnduringHope.class));
  cards.add(new SetCardInfo(""String_Node_Str"",152,Rarity.UNCOMMON,mage.cards.a.AppealAuthority.class));
  cards.add(new SetCardInfo(""String_Node_Str"",30,Rarity.COMMON,mage.cards.a.AvenReedstalker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",201,Rarity.UNCOMMON,mage.cards.a.AvidReclaimer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",111,Rarity.COMMON,mage.cards.b.BeneathTheSands.class));
  cards.add(new SetCardInfo(""String_Node_Str"",112,Rarity.COMMON,mage.cards.b.BitterbowSharpshooters.class));
  cards.add(new SetCardInfo(""String_Node_Str"",84,Rarity.COMMON,mage.cards.b.BlurOfBlades.class));
  cards.add(new SetCardInfo(""String_Node_Str"",60,Rarity.RARE,mage.cards.b.BontusLastReckoning.class));
  cards.add(new SetCardInfo(""String_Node_Str"",202,Rarity.COMMON,mage.cards.b.BrambleweftBehemoth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",85,Rarity.UNCOMMON,mage.cards.b.BurningFistMinotaur.class));
  cards.add(new SetCardInfo(""String_Node_Str"",61,Rarity.COMMON,mage.cards.c.CarrionScreecher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",31,Rarity.RARE,mage.cards.c.ChampionOfWits.class));
  cards.add(new SetCardInfo(""String_Node_Str"",86,Rarity.UNCOMMON,mage.cards.c.ChandrasDefeat.class));
  cards.add(new SetCardInfo(""String_Node_Str"",87,Rarity.RARE,mage.cards.c.ChaosMaw.class));
  cards.add(new SetCardInfo(""String_Node_Str"",209,Rarity.COMMON,mage.cards.c.CinderBarrens.class));
  cards.add(new SetCardInfo(""String_Node_Str"",150,Rarity.UNCOMMON,mage.cards.c.ClaimFame.class));
  cards.add(new SetCardInfo(""String_Node_Str"",32,Rarity.COMMON,mage.cards.c.CountervailingWinds.class));
  cards.add(new SetCardInfo(""String_Node_Str"",88,Rarity.COMMON,mage.cards.c.CrashThrough.class));
  cards.add(new SetCardInfo(""String_Node_Str"",149,Rarity.UNCOMMON,mage.cards.c.ConsignOblivion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",32,Rarity.COMMON,mage.cards.c.CountervailingWinds.class));
  cards.add(new SetCardInfo(""String_Node_Str"",159,Rarity.UNCOMMON,mage.cards.c.CrookOfCondemnation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",33,Rarity.COMMON,mage.cards.c.CunningSurvivor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",7,Rarity.COMMON,mage.cards.d.DauntlessAven.class));
  cards.add(new SetCardInfo(""String_Node_Str"",89,Rarity.COMMON,mage.cards.d.DefiantKhenra.class));
  cards.add(new SetCardInfo(""String_Node_Str"",170,Rarity.COMMON,mage.cards.d.DesertOfTheFervent.class));
  cards.add(new SetCardInfo(""String_Node_Str"",171,Rarity.COMMON,mage.cards.d.DesertOfTheGlorified.class));
  cards.add(new SetCardInfo(""String_Node_Str"",172,Rarity.COMMON,mage.cards.d.DesertOfTheIndomitable.class));
  cards.add(new SetCardInfo(""String_Node_Str"",173,Rarity.COMMON,mage.cards.d.DesertOfTheMindful.class));
  cards.add(new SetCardInfo(""String_Node_Str"",174,Rarity.COMMON,mage.cards.d.DesertOfTheTrue.class));
  cards.add(new SetCardInfo(""String_Node_Str"",8,Rarity.UNCOMMON,mage.cards.d.DesertsHold.class));
  cards.add(new SetCardInfo(""String_Node_Str"",113,Rarity.UNCOMMON,mage.cards.d.DevoteeOfStrength.class));
  cards.add(new SetCardInfo(""String_Node_Str"",9,Rarity.COMMON,mage.cards.d.DisposalMummy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",11,Rarity.COMMON,mage.cards.d.DjerusRenunciation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",10,Rarity.RARE,mage.cards.d.DjeruWithEyesOpen.class));
  cards.add(new SetCardInfo(""String_Node_Str"",62,Rarity.UNCOMMON,mage.cards.d.Doomfall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",63,Rarity.RARE,mage.cards.d.Dreamstealer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",175,Rarity.UNCOMMON,mage.cards.d.DunesOfTheDead.class));
  cards.add(new SetCardInfo(""String_Node_Str"",157,Rarity.RARE,mage.cards.d.DrivenDespair.class));
  cards.add(new SetCardInfo(""String_Node_Str"",12,Rarity.COMMON,mage.cards.d.DutifulServants.class));
  cards.add(new SetCardInfo(""String_Node_Str"",90,Rarity.RARE,mage.cards.e.EarthshakerKhenra.class));
  cards.add(new SetCardInfo(""String_Node_Str"",34,Rarity.UNCOMMON,mage.cards.e.EternalOfHarshTruths.class));
  cards.add(new SetCardInfo(""String_Node_Str"",148,Rarity.UNCOMMON,mage.cards.f.FarmMarket.class));
  cards.add(new SetCardInfo(""String_Node_Str"",115,Rarity.COMMON,mage.cards.f.FeralProwler.class));
  cards.add(new SetCardInfo(""String_Node_Str"",91,Rarity.UNCOMMON,mage.cards.f.FerventPaincaster.class));
  cards.add(new SetCardInfo(""String_Node_Str"",189,Rarity.LAND,mage.cards.basiclands.Forest.class,new CardGraphicInfo(FrameStyle.BFZ_FULL_ART_BASIC,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",35,Rarity.UNCOMMON,mage.cards.f.FrayingSanity.class));
  cards.add(new SetCardInfo(""String_Node_Str"",13,Rarity.UNCOMMON,mage.cards.g.GideonsDefeat.class));
  cards.add(new SetCardInfo(""String_Node_Str"",94,Rarity.COMMON,mage.cards.g.GildedCerodon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",155,Rarity.RARE,mage.cards.g.GrindDust.class));
  cards.add(new SetCardInfo(""String_Node_Str"",118,Rarity.COMMON,mage.cards.h.HarrierNaga.class));
  cards.add(new SetCardInfo(""String_Node_Str"",65,Rarity.RARE,mage.cards.h.HourOfGlory.class));
  cards.add(new SetCardInfo(""String_Node_Str"",15,Rarity.RARE,mage.cards.h.HourOfRevelation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",99,Rarity.UNCOMMON,mage.cards.i.InfernoJet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",186,Rarity.LAND,mage.cards.basiclands.Island.class,new CardGraphicInfo(FrameStyle.BFZ_FULL_ART_BASIC,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",66,Rarity.COMMON,mage.cards.k.KhenraEternal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",100,Rarity.COMMON,mage.cards.k.KhenraScrapper.class));
  cards.add(new SetCardInfo(""String_Node_Str"",101,Rarity.COMMON,mage.cards.k.KindledFury.class));
  cards.add(new SetCardInfo(""String_Node_Str"",121,Rarity.COMMON,mage.cards.l.LifeGoesOn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",153,Rarity.RARE,mage.cards.l.LeaveChance.class));
  cards.add(new SetCardInfo(""String_Node_Str"",68,Rarity.UNCOMMON,mage.cards.l.LilianasDefeat.class));
  cards.add(new SetCardInfo(""String_Node_Str"",69,Rarity.COMMON,mage.cards.l.LurchingRotbeast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",164,Rarity.COMMON,mage.cards.m.Manalith.class));
  cards.add(new SetCardInfo(""String_Node_Str"",70,Rarity.COMMON,mage.cards.m.MaraudingBoneslasher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",72,Rarity.COMMON,mage.cards.m.MoaningWall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",188,Rarity.LAND,mage.cards.basiclands.Mountain.class,new CardGraphicInfo(FrameStyle.BFZ_FULL_ART_BASIC,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",140,Rarity.MYTHIC,mage.cards.n.NicolBolasGodPharaoh.class));
  cards.add(new SetCardInfo(""String_Node_Str"",205,Rarity.MYTHIC,mage.cards.n.NicolBolasTheDeceiver.class));
  cards.add(new SetCardInfo(""String_Node_Str"",200,Rarity.MYTHIC,mage.cards.n.NissaGenesisMage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",124,Rarity.COMMON,mage.cards.o.OasisRitualist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",17,Rarity.COMMON,mage.cards.o.OketrasAvenger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",18,Rarity.RARE,mage.cards.o.OketrasLastMercy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",105,Rarity.COMMON,mage.cards.o.OpenFire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",19,Rarity.MYTHIC,mage.cards.o.OverwhelmingSplendor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",125,Rarity.UNCOMMON,mage.cards.o.Overcome.class));
  cards.add(new SetCardInfo(""String_Node_Str"",185,Rarity.LAND,mage.cards.basiclands.Plains.class,new CardGraphicInfo(FrameStyle.BFZ_FULL_ART_BASIC,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",126,Rarity.RARE,mage.cards.p.PrideSovereign.class));
  cards.add(new SetCardInfo(""String_Node_Str"",42,Rarity.COMMON,mage.cards.p.ProvenCombatant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",127,Rarity.UNCOMMON,mage.cards.q.QuarryBeetle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",128,Rarity.COMMON,mage.cards.r.RampagingHippo.class));
  cards.add(new SetCardInfo(""String_Node_Str"",129,Rarity.RARE,mage.cards.r.RamunapExcavator.class));
  cards.add(new SetCardInfo(""String_Node_Str"",130,Rarity.RARE,mage.cards.r.RamunapHydra.class));
  cards.add(new SetCardInfo(""String_Node_Str"",73,Rarity.MYTHIC,mage.cards.r.RazakethTheFoulblooded.class));
  cards.add(new SetCardInfo(""String_Node_Str"",74,Rarity.UNCOMMON,mage.cards.r.RazakethsRite.class));
  cards.add(new SetCardInfo(""String_Node_Str"",154,Rarity.RARE,mage.cards.r.ReasonBelieve.class));
  cards.add(new SetCardInfo(""String_Node_Str"",156,Rarity.RARE,mage.cards.r.RefuseCooperate.class));
  cards.add(new SetCardInfo(""String_Node_Str"",131,Rarity.RARE,mage.cards.r.ResilientKhenra.class));
  cards.add(new SetCardInfo(""String_Node_Str"",142,Rarity.UNCOMMON,mage.cards.r.ResoluteSurvivors.class));
  cards.add(new SetCardInfo(""String_Node_Str"",132,Rarity.RARE,mage.cards.r.RhonassLastStand.class));
  cards.add(new SetCardInfo(""String_Node_Str"",133,Rarity.COMMON,mage.cards.r.RhonassStalwart.class));
  cards.add(new SetCardInfo(""String_Node_Str"",43,Rarity.UNCOMMON,mage.cards.r.Riddleform.class));
  cards.add(new SetCardInfo(""String_Node_Str"",143,Rarity.UNCOMMON,mage.cards.r.RiverHoopoe.class));
  cards.add(new SetCardInfo(""String_Node_Str"",75,Rarity.COMMON,mage.cards.r.RuinRat.class));
  cards.add(new SetCardInfo(""String_Node_Str"",144,Rarity.MYTHIC,mage.cards.s.SamutTheTested.class));
  cards.add(new SetCardInfo(""String_Node_Str"",107,Rarity.UNCOMMON,mage.cards.s.SandStrangler.class));
  cards.add(new SetCardInfo(""String_Node_Str"",20,Rarity.COMMON,mage.cards.s.Sandblast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",21,Rarity.UNCOMMON,mage.cards.s.SavingGrace.class));
  cards.add(new SetCardInfo(""String_Node_Str"",182,Rarity.RARE,mage.cards.s.ScavengerGrounds.class));
  cards.add(new SetCardInfo(""String_Node_Str"",44,Rarity.COMMON,mage.cards.s.SeerOfTheLastTomorrow.class));
  cards.add(new SetCardInfo(""String_Node_Str"",183,Rarity.UNCOMMON,mage.cards.s.ShefetDunes.class));
  cards.add(new SetCardInfo(""String_Node_Str"",76,Rarity.COMMON,mage.cards.s.ScroungerOfSouls.class));
  cards.add(new SetCardInfo(""String_Node_Str"",134,Rarity.COMMON,mage.cards.s.SidewinderNaga.class));
  cards.add(new SetCardInfo(""String_Node_Str"",135,Rarity.UNCOMMON,mage.cards.s.SifterWurm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",45,Rarity.UNCOMMON,mage.cards.s.SinuousStriker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",22,Rarity.RARE,mage.cards.s.Solemnity.class));
  cards.add(new SetCardInfo(""String_Node_Str"",23,Rarity.COMMON,mage.cards.s.SolitaryCamel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",46,Rarity.COMMON,mage.cards.s.SpellweaverEternal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",24,Rarity.COMMON,mage.cards.s.SteadfastSentinel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",25,Rarity.UNCOMMON,mage.cards.s.StewardOfSolidarity.class));
  cards.add(new SetCardInfo(""String_Node_Str"",47,Rarity.COMMON,mage.cards.s.StrategicPlanning.class));
  cards.add(new SetCardInfo(""String_Node_Str"",48,Rarity.COMMON,mage.cards.s.StripedRiverwinder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",151,Rarity.UNCOMMON,mage.cards.s.StruggleSurvive.class));
  cards.add(new SetCardInfo(""String_Node_Str"",26,Rarity.UNCOMMON,mage.cards.s.SunscourgeChampion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",166,Rarity.UNCOMMON,mage.cards.s.SunsetPyramid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",49,Rarity.UNCOMMON,mage.cards.s.SupremeWill.class));
  cards.add(new SetCardInfo(""String_Node_Str"",184,Rarity.COMMON,mage.cards.s.SurvivorsEncampment.class));
  cards.add(new SetCardInfo(""String_Node_Str"",187,Rarity.LAND,mage.cards.basiclands.Swamp.class,new CardGraphicInfo(FrameStyle.BFZ_FULL_ART_BASIC,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",50,Rarity.RARE,mage.cards.s.SwarmIntelligence.class));
  cards.add(new SetCardInfo(""String_Node_Str"",136,Rarity.UNCOMMON,mage.cards.t.TenaciousHunter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",139,Rarity.MYTHIC,mage.cards.t.TheLocustGod.class));
  cards.add(new SetCardInfo(""String_Node_Str"",145,Rarity.MYTHIC,mage.cards.t.TheScarabGod.class));
  cards.add(new SetCardInfo(""String_Node_Str"",146,Rarity.MYTHIC,mage.cards.t.TheScorpionGod.class));
  cards.add(new SetCardInfo(""String_Node_Str"",108,Rarity.COMMON,mage.cards.t.ThornedMoloch.class));
  cards.add(new SetCardInfo(""String_Node_Str"",77,Rarity.RARE,mage.cards.t.TormentOfHailfire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",78,Rarity.UNCOMMON,mage.cards.t.TormentOfScarabs.class));
  cards.add(new SetCardInfo(""String_Node_Str"",79,Rarity.COMMON,mage.cards.t.TormentOfVenom.class));
  cards.add(new SetCardInfo(""String_Node_Str"",51,Rarity.COMMON,mage.cards.t.TragicLesson.class));
  cards.add(new SetCardInfo(""String_Node_Str"",167,Rarity.COMMON,mage.cards.t.TravelersAmulet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",137,Rarity.MYTHIC,mage.cards.u.UncageTheMenagerie.class));
  cards.add(new SetCardInfo(""String_Node_Str"",27,Rarity.UNCOMMON,mage.cards.u.UnconventionalTactics.class));
  cards.add(new SetCardInfo(""String_Node_Str"",52,Rarity.MYTHIC,mage.cards.u.UneshCriosphinxSovereign.class));
  cards.add(new SetCardInfo(""String_Node_Str"",53,Rarity.COMMON,mage.cards.u.UnquenchableThirst.class));
  cards.add(new SetCardInfo(""String_Node_Str"",147,Rarity.UNCOMMON,mage.cards.u.UnravelingMummy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",54,Rarity.COMMON,mage.cards.u.Unsummon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",80,Rarity.UNCOMMON,mage.cards.v.VileManifestation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",208,Rarity.RARE,mage.cards.v.VisageOfBolas.class));
  cards.add(new SetCardInfo(""String_Node_Str"",55,Rarity.UNCOMMON,mage.cards.v.VizierOfTheAnointed.class));
  cards.add(new SetCardInfo(""String_Node_Str"",28,Rarity.UNCOMMON,mage.cards.v.VizierOfTheTrue.class));
  cards.add(new SetCardInfo(""String_Node_Str"",168,Rarity.COMMON,mage.cards.w.WallOfForgottenPharaohs.class));
  cards.add(new SetCardInfo(""String_Node_Str"",206,Rarity.UNCOMMON,mage.cards.w.WaspOfTheBitterEnd.class));
  cards.add(new SetCardInfo(""String_Node_Str"",109,Rarity.RARE,mage.cards.w.WildfireEternal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",81,Rarity.COMMON,mage.cards.w.WithoutWeakness.class));
  cards.add(new SetCardInfo(""String_Node_Str"",204,Rarity.COMMON,mage.cards.w.WoodlandStream.class));
  cards.add(new SetCardInfo(""String_Node_Str"",82,Rarity.COMMON,mage.cards.w.WretchedCamel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",207,Rarity.COMMON,mage.cards.z.ZealotOfTheGodPharaoh.class));
}","private HourOfDevastation(){
  super(""String_Node_Str"",""String_Node_Str"",ExpansionSet.buildDate(2017,7,14),SetType.EXPANSION);
  this.blockName=""String_Node_Str"";
  this.parentSet=Amonkhet.getInstance();
  this.hasBasicLands=true;
  this.hasBoosters=true;
  this.numBoosterLands=1;
  this.numBoosterCommon=10;
  this.numBoosterUncommon=3;
  this.numBoosterRare=1;
  this.ratioBoosterMythic=8;
  this.ratioBoosterSpecialLand=144;
  cards.add(new SetCardInfo(""String_Node_Str"",83,Rarity.UNCOMMON,mage.cards.a.Abrade.class));
  cards.add(new SetCardInfo(""String_Node_Str"",56,Rarity.UNCOMMON,mage.cards.a.AccursedHorde.class));
  cards.add(new SetCardInfo(""String_Node_Str"",1,Rarity.COMMON,mage.cards.a.ActOfHeroism.class));
  cards.add(new SetCardInfo(""String_Node_Str"",2,Rarity.RARE,mage.cards.a.AdornedPouncer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",3,Rarity.RARE,mage.cards.a.AngelOfCondemnation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",4,Rarity.UNCOMMON,mage.cards.a.AngelOfTheGodPharaoh.class));
  cards.add(new SetCardInfo(""String_Node_Str"",30,Rarity.COMMON,mage.cards.a.AvenReedstalker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",5,Rarity.COMMON,mage.cards.a.AvenOfEnduringHope.class));
  cards.add(new SetCardInfo(""String_Node_Str"",152,Rarity.UNCOMMON,mage.cards.a.AppealAuthority.class));
  cards.add(new SetCardInfo(""String_Node_Str"",30,Rarity.COMMON,mage.cards.a.AvenReedstalker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",201,Rarity.UNCOMMON,mage.cards.a.AvidReclaimer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",111,Rarity.COMMON,mage.cards.b.BeneathTheSands.class));
  cards.add(new SetCardInfo(""String_Node_Str"",112,Rarity.COMMON,mage.cards.b.BitterbowSharpshooters.class));
  cards.add(new SetCardInfo(""String_Node_Str"",84,Rarity.COMMON,mage.cards.b.BlurOfBlades.class));
  cards.add(new SetCardInfo(""String_Node_Str"",60,Rarity.RARE,mage.cards.b.BontusLastReckoning.class));
  cards.add(new SetCardInfo(""String_Node_Str"",202,Rarity.COMMON,mage.cards.b.BrambleweftBehemoth.class));
  cards.add(new SetCardInfo(""String_Node_Str"",85,Rarity.UNCOMMON,mage.cards.b.BurningFistMinotaur.class));
  cards.add(new SetCardInfo(""String_Node_Str"",61,Rarity.COMMON,mage.cards.c.CarrionScreecher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",31,Rarity.RARE,mage.cards.c.ChampionOfWits.class));
  cards.add(new SetCardInfo(""String_Node_Str"",86,Rarity.UNCOMMON,mage.cards.c.ChandrasDefeat.class));
  cards.add(new SetCardInfo(""String_Node_Str"",87,Rarity.RARE,mage.cards.c.ChaosMaw.class));
  cards.add(new SetCardInfo(""String_Node_Str"",209,Rarity.COMMON,mage.cards.c.CinderBarrens.class));
  cards.add(new SetCardInfo(""String_Node_Str"",150,Rarity.UNCOMMON,mage.cards.c.ClaimFame.class));
  cards.add(new SetCardInfo(""String_Node_Str"",149,Rarity.UNCOMMON,mage.cards.c.ConsignOblivion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",32,Rarity.COMMON,mage.cards.c.CountervailingWinds.class));
  cards.add(new SetCardInfo(""String_Node_Str"",88,Rarity.COMMON,mage.cards.c.CrashThrough.class));
  cards.add(new SetCardInfo(""String_Node_Str"",6,Rarity.MYTHIC,mage.cards.c.CrestedSunmare.class));
  cards.add(new SetCardInfo(""String_Node_Str"",159,Rarity.UNCOMMON,mage.cards.c.CrookOfCondemnation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",33,Rarity.COMMON,mage.cards.c.CunningSurvivor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",7,Rarity.COMMON,mage.cards.d.DauntlessAven.class));
  cards.add(new SetCardInfo(""String_Node_Str"",89,Rarity.COMMON,mage.cards.d.DefiantKhenra.class));
  cards.add(new SetCardInfo(""String_Node_Str"",170,Rarity.COMMON,mage.cards.d.DesertOfTheFervent.class));
  cards.add(new SetCardInfo(""String_Node_Str"",171,Rarity.COMMON,mage.cards.d.DesertOfTheGlorified.class));
  cards.add(new SetCardInfo(""String_Node_Str"",172,Rarity.COMMON,mage.cards.d.DesertOfTheIndomitable.class));
  cards.add(new SetCardInfo(""String_Node_Str"",173,Rarity.COMMON,mage.cards.d.DesertOfTheMindful.class));
  cards.add(new SetCardInfo(""String_Node_Str"",174,Rarity.COMMON,mage.cards.d.DesertOfTheTrue.class));
  cards.add(new SetCardInfo(""String_Node_Str"",8,Rarity.UNCOMMON,mage.cards.d.DesertsHold.class));
  cards.add(new SetCardInfo(""String_Node_Str"",113,Rarity.UNCOMMON,mage.cards.d.DevoteeOfStrength.class));
  cards.add(new SetCardInfo(""String_Node_Str"",9,Rarity.COMMON,mage.cards.d.DisposalMummy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",11,Rarity.COMMON,mage.cards.d.DjerusRenunciation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",10,Rarity.RARE,mage.cards.d.DjeruWithEyesOpen.class));
  cards.add(new SetCardInfo(""String_Node_Str"",62,Rarity.UNCOMMON,mage.cards.d.Doomfall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",63,Rarity.RARE,mage.cards.d.Dreamstealer.class));
  cards.add(new SetCardInfo(""String_Node_Str"",175,Rarity.UNCOMMON,mage.cards.d.DunesOfTheDead.class));
  cards.add(new SetCardInfo(""String_Node_Str"",157,Rarity.RARE,mage.cards.d.DrivenDespair.class));
  cards.add(new SetCardInfo(""String_Node_Str"",12,Rarity.COMMON,mage.cards.d.DutifulServants.class));
  cards.add(new SetCardInfo(""String_Node_Str"",90,Rarity.RARE,mage.cards.e.EarthshakerKhenra.class));
  cards.add(new SetCardInfo(""String_Node_Str"",34,Rarity.UNCOMMON,mage.cards.e.EternalOfHarshTruths.class));
  cards.add(new SetCardInfo(""String_Node_Str"",148,Rarity.UNCOMMON,mage.cards.f.FarmMarket.class));
  cards.add(new SetCardInfo(""String_Node_Str"",115,Rarity.COMMON,mage.cards.f.FeralProwler.class));
  cards.add(new SetCardInfo(""String_Node_Str"",91,Rarity.UNCOMMON,mage.cards.f.FerventPaincaster.class));
  cards.add(new SetCardInfo(""String_Node_Str"",189,Rarity.LAND,mage.cards.basiclands.Forest.class,new CardGraphicInfo(FrameStyle.BFZ_FULL_ART_BASIC,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",198,Rarity.LAND,mage.cards.basiclands.Forest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",199,Rarity.LAND,mage.cards.basiclands.Forest.class));
  cards.add(new SetCardInfo(""String_Node_Str"",35,Rarity.UNCOMMON,mage.cards.f.FrayingSanity.class));
  cards.add(new SetCardInfo(""String_Node_Str"",13,Rarity.UNCOMMON,mage.cards.g.GideonsDefeat.class));
  cards.add(new SetCardInfo(""String_Node_Str"",94,Rarity.COMMON,mage.cards.g.GildedCerodon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",14,Rarity.COMMON,mage.cards.g.GodPharaohsFaithful.class));
  cards.add(new SetCardInfo(""String_Node_Str"",155,Rarity.RARE,mage.cards.g.GrindDust.class));
  cards.add(new SetCardInfo(""String_Node_Str"",118,Rarity.COMMON,mage.cards.h.HarrierNaga.class));
  cards.add(new SetCardInfo(""String_Node_Str"",36,Rarity.RARE,mage.cards.h.HourOfEternity.class));
  cards.add(new SetCardInfo(""String_Node_Str"",65,Rarity.RARE,mage.cards.h.HourOfGlory.class));
  cards.add(new SetCardInfo(""String_Node_Str"",15,Rarity.RARE,mage.cards.h.HourOfRevelation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",99,Rarity.UNCOMMON,mage.cards.i.InfernoJet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",186,Rarity.LAND,mage.cards.basiclands.Island.class,new CardGraphicInfo(FrameStyle.BFZ_FULL_ART_BASIC,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",192,Rarity.LAND,mage.cards.basiclands.Island.class));
  cards.add(new SetCardInfo(""String_Node_Str"",193,Rarity.LAND,mage.cards.basiclands.Island.class));
  cards.add(new SetCardInfo(""String_Node_Str"",66,Rarity.COMMON,mage.cards.k.KhenraEternal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",100,Rarity.COMMON,mage.cards.k.KhenraScrapper.class));
  cards.add(new SetCardInfo(""String_Node_Str"",101,Rarity.COMMON,mage.cards.k.KindledFury.class));
  cards.add(new SetCardInfo(""String_Node_Str"",121,Rarity.COMMON,mage.cards.l.LifeGoesOn.class));
  cards.add(new SetCardInfo(""String_Node_Str"",153,Rarity.RARE,mage.cards.l.LeaveChance.class));
  cards.add(new SetCardInfo(""String_Node_Str"",68,Rarity.UNCOMMON,mage.cards.l.LilianasDefeat.class));
  cards.add(new SetCardInfo(""String_Node_Str"",69,Rarity.COMMON,mage.cards.l.LurchingRotbeast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",164,Rarity.COMMON,mage.cards.m.Manalith.class));
  cards.add(new SetCardInfo(""String_Node_Str"",70,Rarity.COMMON,mage.cards.m.MaraudingBoneslasher.class));
  cards.add(new SetCardInfo(""String_Node_Str"",72,Rarity.COMMON,mage.cards.m.MoaningWall.class));
  cards.add(new SetCardInfo(""String_Node_Str"",188,Rarity.LAND,mage.cards.basiclands.Mountain.class,new CardGraphicInfo(FrameStyle.BFZ_FULL_ART_BASIC,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",196,Rarity.LAND,mage.cards.basiclands.Mountain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",197,Rarity.LAND,mage.cards.basiclands.Mountain.class));
  cards.add(new SetCardInfo(""String_Node_Str"",16,Rarity.COMMON,mage.cards.m.MummyParamount.class));
  cards.add(new SetCardInfo(""String_Node_Str"",140,Rarity.MYTHIC,mage.cards.n.NicolBolasGodPharaoh.class));
  cards.add(new SetCardInfo(""String_Node_Str"",205,Rarity.MYTHIC,mage.cards.n.NicolBolasTheDeceiver.class));
  cards.add(new SetCardInfo(""String_Node_Str"",200,Rarity.MYTHIC,mage.cards.n.NissaGenesisMage.class));
  cards.add(new SetCardInfo(""String_Node_Str"",124,Rarity.COMMON,mage.cards.o.OasisRitualist.class));
  cards.add(new SetCardInfo(""String_Node_Str"",17,Rarity.COMMON,mage.cards.o.OketrasAvenger.class));
  cards.add(new SetCardInfo(""String_Node_Str"",18,Rarity.RARE,mage.cards.o.OketrasLastMercy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",105,Rarity.COMMON,mage.cards.o.OpenFire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",19,Rarity.MYTHIC,mage.cards.o.OverwhelmingSplendor.class));
  cards.add(new SetCardInfo(""String_Node_Str"",125,Rarity.UNCOMMON,mage.cards.o.Overcome.class));
  cards.add(new SetCardInfo(""String_Node_Str"",185,Rarity.LAND,mage.cards.basiclands.Plains.class,new CardGraphicInfo(FrameStyle.BFZ_FULL_ART_BASIC,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",190,Rarity.LAND,mage.cards.basiclands.Plains.class));
  cards.add(new SetCardInfo(""String_Node_Str"",191,Rarity.LAND,mage.cards.basiclands.Plains.class));
  cards.add(new SetCardInfo(""String_Node_Str"",126,Rarity.RARE,mage.cards.p.PrideSovereign.class));
  cards.add(new SetCardInfo(""String_Node_Str"",42,Rarity.COMMON,mage.cards.p.ProvenCombatant.class));
  cards.add(new SetCardInfo(""String_Node_Str"",127,Rarity.UNCOMMON,mage.cards.q.QuarryBeetle.class));
  cards.add(new SetCardInfo(""String_Node_Str"",128,Rarity.COMMON,mage.cards.r.RampagingHippo.class));
  cards.add(new SetCardInfo(""String_Node_Str"",129,Rarity.RARE,mage.cards.r.RamunapExcavator.class));
  cards.add(new SetCardInfo(""String_Node_Str"",130,Rarity.RARE,mage.cards.r.RamunapHydra.class));
  cards.add(new SetCardInfo(""String_Node_Str"",73,Rarity.MYTHIC,mage.cards.r.RazakethTheFoulblooded.class));
  cards.add(new SetCardInfo(""String_Node_Str"",74,Rarity.UNCOMMON,mage.cards.r.RazakethsRite.class));
  cards.add(new SetCardInfo(""String_Node_Str"",154,Rarity.RARE,mage.cards.r.ReasonBelieve.class));
  cards.add(new SetCardInfo(""String_Node_Str"",156,Rarity.RARE,mage.cards.r.RefuseCooperate.class));
  cards.add(new SetCardInfo(""String_Node_Str"",131,Rarity.RARE,mage.cards.r.ResilientKhenra.class));
  cards.add(new SetCardInfo(""String_Node_Str"",142,Rarity.UNCOMMON,mage.cards.r.ResoluteSurvivors.class));
  cards.add(new SetCardInfo(""String_Node_Str"",132,Rarity.RARE,mage.cards.r.RhonassLastStand.class));
  cards.add(new SetCardInfo(""String_Node_Str"",133,Rarity.COMMON,mage.cards.r.RhonassStalwart.class));
  cards.add(new SetCardInfo(""String_Node_Str"",43,Rarity.UNCOMMON,mage.cards.r.Riddleform.class));
  cards.add(new SetCardInfo(""String_Node_Str"",143,Rarity.UNCOMMON,mage.cards.r.RiverHoopoe.class));
  cards.add(new SetCardInfo(""String_Node_Str"",75,Rarity.COMMON,mage.cards.r.RuinRat.class));
  cards.add(new SetCardInfo(""String_Node_Str"",144,Rarity.MYTHIC,mage.cards.s.SamutTheTested.class));
  cards.add(new SetCardInfo(""String_Node_Str"",107,Rarity.UNCOMMON,mage.cards.s.SandStrangler.class));
  cards.add(new SetCardInfo(""String_Node_Str"",20,Rarity.COMMON,mage.cards.s.Sandblast.class));
  cards.add(new SetCardInfo(""String_Node_Str"",21,Rarity.UNCOMMON,mage.cards.s.SavingGrace.class));
  cards.add(new SetCardInfo(""String_Node_Str"",182,Rarity.RARE,mage.cards.s.ScavengerGrounds.class));
  cards.add(new SetCardInfo(""String_Node_Str"",44,Rarity.COMMON,mage.cards.s.SeerOfTheLastTomorrow.class));
  cards.add(new SetCardInfo(""String_Node_Str"",183,Rarity.UNCOMMON,mage.cards.s.ShefetDunes.class));
  cards.add(new SetCardInfo(""String_Node_Str"",76,Rarity.COMMON,mage.cards.s.ScroungerOfSouls.class));
  cards.add(new SetCardInfo(""String_Node_Str"",134,Rarity.COMMON,mage.cards.s.SidewinderNaga.class));
  cards.add(new SetCardInfo(""String_Node_Str"",135,Rarity.UNCOMMON,mage.cards.s.SifterWurm.class));
  cards.add(new SetCardInfo(""String_Node_Str"",45,Rarity.UNCOMMON,mage.cards.s.SinuousStriker.class));
  cards.add(new SetCardInfo(""String_Node_Str"",22,Rarity.RARE,mage.cards.s.Solemnity.class));
  cards.add(new SetCardInfo(""String_Node_Str"",23,Rarity.COMMON,mage.cards.s.SolitaryCamel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",46,Rarity.COMMON,mage.cards.s.SpellweaverEternal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",24,Rarity.COMMON,mage.cards.s.SteadfastSentinel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",25,Rarity.UNCOMMON,mage.cards.s.StewardOfSolidarity.class));
  cards.add(new SetCardInfo(""String_Node_Str"",47,Rarity.COMMON,mage.cards.s.StrategicPlanning.class));
  cards.add(new SetCardInfo(""String_Node_Str"",48,Rarity.COMMON,mage.cards.s.StripedRiverwinder.class));
  cards.add(new SetCardInfo(""String_Node_Str"",151,Rarity.UNCOMMON,mage.cards.s.StruggleSurvive.class));
  cards.add(new SetCardInfo(""String_Node_Str"",26,Rarity.UNCOMMON,mage.cards.s.SunscourgeChampion.class));
  cards.add(new SetCardInfo(""String_Node_Str"",166,Rarity.UNCOMMON,mage.cards.s.SunsetPyramid.class));
  cards.add(new SetCardInfo(""String_Node_Str"",49,Rarity.UNCOMMON,mage.cards.s.SupremeWill.class));
  cards.add(new SetCardInfo(""String_Node_Str"",184,Rarity.COMMON,mage.cards.s.SurvivorsEncampment.class));
  cards.add(new SetCardInfo(""String_Node_Str"",187,Rarity.LAND,mage.cards.basiclands.Swamp.class,new CardGraphicInfo(FrameStyle.BFZ_FULL_ART_BASIC,true)));
  cards.add(new SetCardInfo(""String_Node_Str"",194,Rarity.LAND,mage.cards.basiclands.Swamp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",195,Rarity.LAND,mage.cards.basiclands.Swamp.class));
  cards.add(new SetCardInfo(""String_Node_Str"",50,Rarity.RARE,mage.cards.s.SwarmIntelligence.class));
  cards.add(new SetCardInfo(""String_Node_Str"",136,Rarity.UNCOMMON,mage.cards.t.TenaciousHunter.class));
  cards.add(new SetCardInfo(""String_Node_Str"",139,Rarity.MYTHIC,mage.cards.t.TheLocustGod.class));
  cards.add(new SetCardInfo(""String_Node_Str"",145,Rarity.MYTHIC,mage.cards.t.TheScarabGod.class));
  cards.add(new SetCardInfo(""String_Node_Str"",146,Rarity.MYTHIC,mage.cards.t.TheScorpionGod.class));
  cards.add(new SetCardInfo(""String_Node_Str"",108,Rarity.COMMON,mage.cards.t.ThornedMoloch.class));
  cards.add(new SetCardInfo(""String_Node_Str"",77,Rarity.RARE,mage.cards.t.TormentOfHailfire.class));
  cards.add(new SetCardInfo(""String_Node_Str"",78,Rarity.UNCOMMON,mage.cards.t.TormentOfScarabs.class));
  cards.add(new SetCardInfo(""String_Node_Str"",79,Rarity.COMMON,mage.cards.t.TormentOfVenom.class));
  cards.add(new SetCardInfo(""String_Node_Str"",51,Rarity.COMMON,mage.cards.t.TragicLesson.class));
  cards.add(new SetCardInfo(""String_Node_Str"",167,Rarity.COMMON,mage.cards.t.TravelersAmulet.class));
  cards.add(new SetCardInfo(""String_Node_Str"",137,Rarity.MYTHIC,mage.cards.u.UncageTheMenagerie.class));
  cards.add(new SetCardInfo(""String_Node_Str"",27,Rarity.UNCOMMON,mage.cards.u.UnconventionalTactics.class));
  cards.add(new SetCardInfo(""String_Node_Str"",52,Rarity.MYTHIC,mage.cards.u.UneshCriosphinxSovereign.class));
  cards.add(new SetCardInfo(""String_Node_Str"",53,Rarity.COMMON,mage.cards.u.UnquenchableThirst.class));
  cards.add(new SetCardInfo(""String_Node_Str"",147,Rarity.UNCOMMON,mage.cards.u.UnravelingMummy.class));
  cards.add(new SetCardInfo(""String_Node_Str"",54,Rarity.COMMON,mage.cards.u.Unsummon.class));
  cards.add(new SetCardInfo(""String_Node_Str"",80,Rarity.UNCOMMON,mage.cards.v.VileManifestation.class));
  cards.add(new SetCardInfo(""String_Node_Str"",208,Rarity.RARE,mage.cards.v.VisageOfBolas.class));
  cards.add(new SetCardInfo(""String_Node_Str"",55,Rarity.UNCOMMON,mage.cards.v.VizierOfTheAnointed.class));
  cards.add(new SetCardInfo(""String_Node_Str"",28,Rarity.UNCOMMON,mage.cards.v.VizierOfTheTrue.class));
  cards.add(new SetCardInfo(""String_Node_Str"",168,Rarity.COMMON,mage.cards.w.WallOfForgottenPharaohs.class));
  cards.add(new SetCardInfo(""String_Node_Str"",206,Rarity.UNCOMMON,mage.cards.w.WaspOfTheBitterEnd.class));
  cards.add(new SetCardInfo(""String_Node_Str"",109,Rarity.RARE,mage.cards.w.WildfireEternal.class));
  cards.add(new SetCardInfo(""String_Node_Str"",81,Rarity.COMMON,mage.cards.w.WithoutWeakness.class));
  cards.add(new SetCardInfo(""String_Node_Str"",204,Rarity.COMMON,mage.cards.w.WoodlandStream.class));
  cards.add(new SetCardInfo(""String_Node_Str"",82,Rarity.COMMON,mage.cards.w.WretchedCamel.class));
  cards.add(new SetCardInfo(""String_Node_Str"",207,Rarity.COMMON,mage.cards.z.ZealotOfTheGodPharaoh.class));
}",0.9519551060828856
157997,"@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    Target target=new TargetPermanent(filter);
    if (target.canChoose(source.getControllerId(),game)) {
      player.choose(Outcome.Copy,target,source.getSourceId(),game);
      Permanent tokenToCopy=game.getPermanent(target.getFirstTarget());
      if (tokenToCopy != null) {
        if (!game.isSimulation()) {
          game.informPlayers(""String_Node_Str"" + tokenToCopy.getLogName());
        }
        Effect effect=new PutTokenOntoBattlefieldCopyTargetEffect();
        effect.setTargetPointer(new FixedTarget(target.getFirstTarget()));
        return effect.apply(game,source);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player player=game.getPlayer(source.getControllerId());
  if (player != null) {
    Target target=new TargetPermanent(filter);
    target.setNotTarget(true);
    if (target.canChoose(source.getControllerId(),game)) {
      player.choose(Outcome.Copy,target,source.getSourceId(),game);
      Permanent tokenToCopy=game.getPermanent(target.getFirstTarget());
      if (tokenToCopy != null) {
        if (!game.isSimulation()) {
          game.informPlayers(""String_Node_Str"" + tokenToCopy.getLogName());
        }
        Effect effect=new PutTokenOntoBattlefieldCopyTargetEffect();
        effect.setTargetPointer(new FixedTarget(target.getFirstTarget()));
        return effect.apply(game,source);
      }
    }
    return true;
  }
  return false;
}",0.9804908747640024
157998,"@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Card aura=game.getCard(source.getFirstTarget());
  if (controller == null || aura == null) {
    return false;
  }
  FilterControlledCreaturePermanent FILTER=new FilterControlledCreaturePermanent(""String_Node_Str"");
  TargetControlledPermanent target=new TargetControlledPermanent(FILTER);
  target.setNotTarget(true);
  if (target.canChoose(source.getControllerId(),game) && controller.choose(Outcome.PutCardInPlay,target,source.getSourceId(),game)) {
    Permanent permanent=game.getPermanent(target.getFirstTarget());
    if (permanent != null && !permanent.cantBeAttachedBy(aura,game)) {
      game.getState().setValue(""String_Node_Str"" + aura.getId(),permanent);
      controller.moveCards(aura,Zone.BATTLEFIELD,source,game);
      return permanent.addAttachment(aura.getId(),game);
    }
  }
  return false;
}","@Override public boolean apply(Game game,Ability source){
  Player controller=game.getPlayer(source.getControllerId());
  Card aura=game.getCard(source.getFirstTarget());
  if (controller == null || aura == null) {
    return false;
  }
  FilterControlledCreaturePermanent FILTER=new FilterControlledCreaturePermanent(""String_Node_Str"");
  TargetControlledPermanent target=new TargetControlledPermanent(FILTER);
  target.setNotTarget(true);
  if (controller.choose(Outcome.PutCardInPlay,target,source.getSourceId(),game)) {
    Permanent permanent=game.getPermanent(target.getFirstTarget());
    if (permanent != null && !permanent.cantBeAttachedBy(aura,game)) {
      game.getState().setValue(""String_Node_Str"" + aura.getId(),permanent);
      aura.putOntoBattlefield(game,Zone.GRAVEYARD,source.getSourceId(),controller.getId());
      return permanent.addAttachment(aura.getId(),game);
    }
  }
  return false;
}",0.7365010799136069
157999,"@Override public void setRuleAtTheTop(boolean ruleAtTheTop){
  this.ability.setRuleAtTheTop(ruleAtTheTop);
}","@Override public Ability setRuleAtTheTop(boolean ruleAtTheTop){
  this.ability.setRuleAtTheTop(ruleAtTheTop);
  return this;
}",0.8974358974358975
158000,"public String toString(){
  return new StringBuilder(responseString).append(',').append(responseUUID).append(',').append(responseBoolean).append(',').append(responseInteger).append(',').append(responseManaType).append(',').append(responseManaTypePlayerId).toString();
}","public String toString(){
  return new StringBuilder((responseString == null) ? ""String_Node_Str"" : responseString).append(',').append(responseUUID).append(',').append(responseBoolean).append(',').append(responseInteger).append(',').append(responseManaType).append(',').append(responseManaTypePlayerId).toString();
}",0.9196581196581196
