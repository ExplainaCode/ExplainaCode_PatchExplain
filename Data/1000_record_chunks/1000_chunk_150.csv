record_number,buggy_code,fixed_code,code_similarity
149001,"public void run(){
  if (this.server != null) {
    ISelection selection=server.getViewer().getSelection();
    xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
  }
  if (xobject.getType() != TreeObject.JOB)   return;
  try {
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
    xobject.getParent().removeChild(xobject);
    String filename=xobject.getDisplayName();
    String jobname=filename.substring(0,filename.lastIndexOf(""String_Node_Str""));
    String version=filename.substring(filename.lastIndexOf(""String_Node_Str"") + 1);
    JobInfo info=new JobInfo(jobname,version);
    port.deleteMDMJob(new WSDELMDMJob(jobname,version));
    String endpointaddress=xobject.getEndpointAddress();
    String uploadURL=new URL(endpointaddress).getProtocol() + ""String_Node_Str"" + new URL(endpointaddress).getHost()+ ""String_Node_Str""+ new URL(endpointaddress).getPort()+ ""String_Node_Str""+ filename;
    String remoteFile=Util.uploadFileToAppServer(uploadURL,null,filename,""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}","public void run(){
  if (this.server != null) {
    ISelection selection=server.getViewer().getSelection();
    xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
  }
  if (xobject.getType() != TreeObject.JOB)   return;
  try {
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
    xobject.getParent().removeChild(xobject);
    String filename=xobject.getDisplayName();
    String jobname=filename.substring(0,filename.lastIndexOf(""String_Node_Str""));
    String version=filename.substring(filename.lastIndexOf(""String_Node_Str"") + 1);
    port.deleteMDMJob(new WSDELMDMJob(jobname,version));
    String endpointaddress=xobject.getEndpointAddress();
    String uploadURL=new URL(endpointaddress).getProtocol() + ""String_Node_Str"" + new URL(endpointaddress).getHost()+ ""String_Node_Str""+ new URL(endpointaddress).getPort()+ ""String_Node_Str""+ filename;
    String remoteFile=Util.uploadFileToAppServer(uploadURL,filename,""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}",0.954867256637168
149002,"/** 
 * get the JobInfo:jobName and version
 * @param fileName
 * @return
 */
public JobInfo getJobInfo(String fileName){
  JobInfo jobInfo=new JobInfo(""String_Node_Str"",""String_Node_Str"");
  try {
    ZipInputStream in=new ZipInputStream(new FileInputStream(fileName));
    ZipEntry z=null;
    String name=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") == -1 ? 0 : fileName.lastIndexOf(""String_Node_Str"") + 1);
    try {
      String jobName=""String_Node_Str"";
      while ((z=in.getNextEntry()) != null) {
        String dirName=z.getName();
        if (dirName.matches(""String_Node_Str"")) {
          jobName=dirName.substring(dirName.lastIndexOf(""String_Node_Str"") + 1,dirName.lastIndexOf(""String_Node_Str""));
          jobInfo.setJobname(jobName.substring(0,jobName.lastIndexOf(""String_Node_Str"")));
          jobInfo.setJobversion(jobName.substring(jobName.lastIndexOf(""String_Node_Str"") + 1));
          return jobInfo;
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
 finally {
      try {
        in.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  return jobInfo;
}","/** 
 * get the JobInfo:jobName and version
 * @param fileName
 * @return
 */
public JobInfo getJobInfo(String fileName){
  JobInfo jobInfo=new JobInfo(""String_Node_Str"",""String_Node_Str"");
  try {
    ZipInputStream in=new ZipInputStream(new FileInputStream(fileName));
    ZipEntry z=null;
    try {
      String jobName=""String_Node_Str"";
      String jobVersion=""String_Node_Str"";
      while ((z=in.getNextEntry()) != null) {
        String dirName=z.getName();
        if (dirName.matches(""String_Node_Str"")) {
          jobName=new File(dirName).getName();
          jobName=jobName.substring(0,jobName.lastIndexOf(""String_Node_Str""));
        }
        if (dirName.matches(""String_Node_Str"")) {
          jobName=new File(dirName).getParentFile().getName();
          Pattern p=Pattern.compile(""String_Node_Str"");
          Matcher m=p.matcher(jobName);
          int index=m.groupCount();
          jobVersion=m.group(index);
          jobVersion=jobVersion.replaceAll(""String_Node_Str"",""String_Node_Str"");
        }
      }
      jobInfo.setJobname(jobName);
      jobInfo.setJobversion(jobVersion);
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
 finally {
      in.close();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return jobInfo;
}",0.3656422379826635
149003,"public void run(){
  if (this.server != null) {
    ISelection selection=server.getViewer().getSelection();
    xobject=(TreeParent)((IStructuredSelection)selection).getFirstElement();
  }
  if (xobject.getType() != TreeObject.JOB_REGISTRY)   return;
  try {
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
    FileDialog fileDialog=new FileDialog(server.getSite().getShell(),SWT.OPEN);
    fileDialog.setFilterExtensions(new String[]{""String_Node_Str""});
    String name=fileDialog.open();
    if (name != null) {
      JobInfo info=getJobInfo(name);
      String endpointaddress=xobject.getEndpointAddress();
      String uploadURL=new URL(endpointaddress).getProtocol() + ""String_Node_Str"" + new URL(endpointaddress).getHost()+ ""String_Node_Str""+ new URL(endpointaddress).getPort()+ ""String_Node_Str"";
      String remoteFile=Util.uploadFileToAppServer(uploadURL,info,name,""String_Node_Str"",""String_Node_Str"");
      port.putMDMJob(new WSPUTMDMJob(info.getJobname(),info.getJobversion()));
      TreeObject obj=new TreeObject(info.getJobname() + ""String_Node_Str"" + info.getJobversion(),xobject.getServerRoot(),TreeObject.JOB,info,null);
      xobject.addChild(obj);
      LocalTreeObjectRepository.getInstance().mergeNewTreeObject(obj);
      XObjectEditor editpart=(XObjectEditor)server.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(obj,obj.getDisplayName()),""String_Node_Str"");
      if (editpart.getSelectedPage() instanceof AMainPageV2) {
        ((AMainPageV2)editpart.getSelectedPage()).markDirty();
      }
      if (editpart.getSelectedPage() instanceof AMainPage)       ((AMainPage)editpart.getSelectedPage()).markDirty();
    }
  }
 catch (  Exception e) {
  }
}","public void run(){
  if (this.server != null) {
    ISelection selection=server.getViewer().getSelection();
    xobject=(TreeParent)((IStructuredSelection)selection).getFirstElement();
  }
  if (xobject.getType() != TreeObject.JOB_REGISTRY)   return;
  try {
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
    FileDialog fileDialog=new FileDialog(server.getSite().getShell(),SWT.OPEN);
    fileDialog.setFilterExtensions(new String[]{""String_Node_Str""});
    String name=fileDialog.open();
    if (name != null) {
      JobInfo info=getJobInfo(name);
      WSMDMJobArray array=port.getMDMJob(new WSMDMNULL());
      if (checkExist(array,info)) {
        MessageDialog.openWarning(this.server.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return;
      }
      String fileName=info.getJobname() + ""String_Node_Str"" + info.getJobversion()+ ""String_Node_Str"";
      String endpointaddress=xobject.getEndpointAddress();
      String uploadURL=new URL(endpointaddress).getProtocol() + ""String_Node_Str"" + new URL(endpointaddress).getHost()+ ""String_Node_Str""+ new URL(endpointaddress).getPort()+ ""String_Node_Str""+ fileName;
      String remoteFile=Util.uploadFileToAppServer(uploadURL,name,""String_Node_Str"",""String_Node_Str"");
      port.putMDMJob(new WSPUTMDMJob(info.getJobname(),info.getJobversion()));
      TreeObject obj=new TreeObject(info.getJobname() + ""String_Node_Str"" + info.getJobversion(),xobject.getServerRoot(),TreeObject.JOB,info,null);
      xobject.addChild(obj);
      LocalTreeObjectRepository.getInstance().mergeNewTreeObject(obj);
      XObjectEditor editpart=(XObjectEditor)server.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(obj,obj.getDisplayName()),""String_Node_Str"");
      if (editpart.getSelectedPage() instanceof AMainPageV2) {
        ((AMainPageV2)editpart.getSelectedPage()).markDirty();
      }
      if (editpart.getSelectedPage() instanceof AMainPage)       ((AMainPage)editpart.getSelectedPage()).markDirty();
    }
  }
 catch (  Exception e) {
  }
}",0.9131538852209244
149004,"public void run(){
  if (this.server != null) {
    ISelection selection=server.getViewer().getSelection();
    xobject=(TreeParent)((IStructuredSelection)selection).getFirstElement();
  }
  if (xobject.getType() != TreeObject.WORKFLOW)   return;
  try {
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
    FileDialog fileDialog=new FileDialog(server.getSite().getShell(),SWT.OPEN);
    fileDialog.setFilterExtensions(new String[]{""String_Node_Str""});
    String name=fileDialog.open();
    if (name != null) {
      String endpointaddress=xobject.getEndpointAddress();
      String uploadURL=new URL(endpointaddress).getProtocol() + ""String_Node_Str"" + new URL(endpointaddress).getHost()+ ""String_Node_Str""+ new URL(endpointaddress).getPort()+ ""String_Node_Str"";
      String remoteFile=Util.uploadFileToAppServer(uploadURL,null,name,""String_Node_Str"",""String_Node_Str"");
      WSWorkflowProcessDefinitionUUID uuid=port.workflowDeploy(new WSWorkflowDeploy(remoteFile));
      TreeObject obj=new TreeObject(uuid.getProcessName() + ""String_Node_Str"" + uuid.getProcessVersion(),xobject.getServerRoot(),TreeObject.WORKFLOW_PROCESS,uuid,null);
      xobject.addChild(obj);
      BrowseViewAction action=new BrowseViewAction(server);
      action.setObject(obj);
      action.run();
      new ServerRefreshAction(server,xobject.getServerRoot()).run();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(){
  if (this.server != null) {
    ISelection selection=server.getViewer().getSelection();
    xobject=(TreeParent)((IStructuredSelection)selection).getFirstElement();
  }
  if (xobject.getType() != TreeObject.WORKFLOW)   return;
  try {
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
    FileDialog fileDialog=new FileDialog(server.getSite().getShell(),SWT.OPEN);
    fileDialog.setFilterExtensions(new String[]{""String_Node_Str""});
    String name=fileDialog.open();
    if (name != null) {
      String endpointaddress=xobject.getEndpointAddress();
      String uploadURL=new URL(endpointaddress).getProtocol() + ""String_Node_Str"" + new URL(endpointaddress).getHost()+ ""String_Node_Str""+ new URL(endpointaddress).getPort()+ ""String_Node_Str"";
      String remoteFile=Util.uploadFileToAppServer(uploadURL,name,""String_Node_Str"",""String_Node_Str"");
      WSWorkflowProcessDefinitionUUID uuid=port.workflowDeploy(new WSWorkflowDeploy(remoteFile));
      TreeObject obj=new TreeObject(uuid.getProcessName() + ""String_Node_Str"" + uuid.getProcessVersion(),xobject.getServerRoot(),TreeObject.WORKFLOW_PROCESS,uuid,null);
      xobject.addChild(obj);
      BrowseViewAction action=new BrowseViewAction(server);
      action.setObject(obj);
      action.run();
      new ServerRefreshAction(server,xobject.getServerRoot()).run();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9983349983349984
149005,"public void checkServiceStatus(){
  try {
    String result=""String_Node_Str"";
    String URLPath=""String_Node_Str"" + this.jobName + ""String_Node_Str""+ this.jobName.substring(0,this.jobName.lastIndexOf(""String_Node_Str""));
    HttpClient client=new HttpClient();
    HttpMethod method=new GetMethod(URLPath);
    client.executeMethod(method);
    if (method.getStatusLine().toString().indexOf(""String_Node_Str"") != -1)     statusLabel.setText(""String_Node_Str"");
 else     statusLabel.setText(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void checkServiceStatus(){
  try {
    String URLPath=""String_Node_Str"" + getXObject().getEndpointHost() + ""String_Node_Str""+ getXObject().getEndpointPort()+ ""String_Node_Str""+ this.jobName+ ""String_Node_Str""+ this.jobName.substring(0,this.jobName.lastIndexOf(""String_Node_Str""));
    HttpClient client=new HttpClient();
    HttpMethod method=new GetMethod(URLPath);
    client.executeMethod(method);
    if (method.getStatusLine().toString().indexOf(""String_Node_Str"") != -1)     statusLabel.setText(""String_Node_Str"");
 else     statusLabel.setText(""String_Node_Str"");
    method.releaseConnection();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.8761002031144212
149006,"/** 
 * FILE UPLOAD Multi-Part Form Post
 */
public static String uploadFileToAppServer(String URL,JobInfo info,String localFilename,String username,String password) throws XtentisException {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  HttpClient client=new HttpClient();
  MultipartPostMethod mppost=new MultipartPostMethod(URL);
  String response=null;
  try {
    client.setConnectionTimeout(60000);
    client.getState().setAuthenticationPreemptive(true);
    client.getState().setCredentials(null,null,new UsernamePasswordCredentials(username,password));
    if (info != null)     mppost.addParameter(info.getJobname() + ""String_Node_Str"" + info.getJobversion()+ ""String_Node_Str"",new File(localFilename));
    client.executeMethod(mppost);
    if (mppost.getStatusCode() != HttpStatus.SC_OK) {
      throw new XtentisException(""String_Node_Str"" + mppost.getStatusCode() + ""String_Node_Str""+ mppost.getStatusText());
    }
    response=mppost.getResponseBodyAsString();
    mppost.releaseConnection();
    return response;
  }
 catch (  Exception e) {
    mppost.releaseConnection();
    e.printStackTrace();
    throw new XtentisException(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}","/** 
 * FILE UPLOAD Multi-Part Form Post
 */
public static String uploadFileToAppServer(String URL,String localFilename,String username,String password) throws XtentisException {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  HttpClient client=new HttpClient();
  MultipartPostMethod mppost=new MultipartPostMethod(URL);
  String response=null;
  String fileName=localFilename;
  try {
    client.setConnectionTimeout(60000);
    client.getState().setAuthenticationPreemptive(true);
    client.getState().setCredentials(null,null,new UsernamePasswordCredentials(username,password));
    if (URL.indexOf(""String_Node_Str"") == -1) {
      if (URL.indexOf(""String_Node_Str"") != -1) {
        fileName=URL.substring(URL.indexOf(""String_Node_Str"") + 1);
      }
      mppost.addParameter(fileName,new File(localFilename));
    }
    client.executeMethod(mppost);
    if (mppost.getStatusCode() != HttpStatus.SC_OK) {
      throw new XtentisException(""String_Node_Str"" + mppost.getStatusCode() + ""String_Node_Str""+ mppost.getStatusText());
    }
    response=mppost.getResponseBodyAsString();
    mppost.releaseConnection();
    return response;
  }
 catch (  Exception e) {
    mppost.releaseConnection();
    e.printStackTrace();
    throw new XtentisException(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.8871624121346652
149007,"protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSUniverse ws=(WSUniverse)(getXObject().getWsObject());
    ws.setName(universe.getName());
    ws.setDefaultItemsRevisionID(universe.getDefaultReversionID());
    ws.setDescription(universe.getDescription());
    List<WSUniverseXtentisObjectsRevisionIDs> xtentisObjectsRevisionIDs=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      String name=line.key;
      if (EXtentisObjects.Transformer.getDisplayName().equals(name)) {
        name=EXtentisObjects.Transformer.getName();
      }
      xtentisObjectsRevisionIDs.add(new WSUniverseXtentisObjectsRevisionIDs(name,line.value));
    }
    ws.setXtentisObjectsRevisionIDs(xtentisObjectsRevisionIDs.toArray(new WSUniverseXtentisObjectsRevisionIDs[xtentisObjectsRevisionIDs.size()]));
    List<WSUniverseItemsRevisionIDs> itemIds=new ArrayList<WSUniverseItemsRevisionIDs>();
    for (    Line line : universe.getItemsList()) {
      itemIds.add(new WSUniverseItemsRevisionIDs(line.keyValues.get(0).value,line.keyValues.get(1).value));
    }
    ws.setItemsRevisionIDs(itemIds.toArray(new WSUniverseItemsRevisionIDs[itemIds.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSUniverse ws=(WSUniverse)(getXObject().getWsObject());
    ws.setName(universe.getName());
    ws.setDefaultItemsRevisionID(universe.getDefaultReversionID());
    ws.setDescription(universe.getDescription());
    List<WSUniverseXtentisObjectsRevisionIDs> xtentisObjectsRevisionIDs=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      String name=line.key;
      if (EXtentisObjects.Transformer.getDisplayName().equals(name)) {
        name=EXtentisObjects.Transformer.getName();
      }
      xtentisObjectsRevisionIDs.add(new WSUniverseXtentisObjectsRevisionIDs(name,line.value));
    }
    ws.setXtentisObjectsRevisionIDs(xtentisObjectsRevisionIDs.toArray(new WSUniverseXtentisObjectsRevisionIDs[xtentisObjectsRevisionIDs.size()]));
    List<WSUniverseItemsRevisionIDs> itemIds=new ArrayList<WSUniverseItemsRevisionIDs>();
    java.util.List<Line> lines=(java.util.List<Line>)itemsViewer.getViewer().getInput();
    for (    Line line : lines) {
      itemIds.add(new WSUniverseItemsRevisionIDs(line.keyValues.get(0).value,line.keyValues.get(1).value));
    }
    ws.setItemsRevisionIDs(itemIds.toArray(new WSUniverseItemsRevisionIDs[itemIds.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9608564737370358
149008,"@Override protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    if (universe == null)     universe=new Universe(""String_Node_Str"");
    this.toolkit=toolkit;
    Label descriptionLabel=toolkit.createLabel(charComposite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    descriptionText=toolkit.createText(charComposite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    ((GridData)descriptionText.getLayoutData()).minimumHeight=30;
    descriptionText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        universe.setDescription(descriptionText.getText());
        markDirtyWithoutCommit();
      }
    }
);
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite itemsGroup=this.getNewSectionComposite(""String_Node_Str"");
    itemsGroup.setLayout(new GridLayout(2,false));
    defaultReversionIDText=new LabelText(toolkit,itemsGroup,""String_Node_Str"");
    defaultReversionIDText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        universe.setDefaultReversionID(defaultReversionIDText.getText().getText().trim());
        markDirtyWithoutCommit();
      }
    }
);
    TisTableViewer itemsViewer=new TisTableViewer(Arrays.asList(columns),toolkit,itemsGroup);
    itemsViewer.create();
    itemsViewer.setMainPage(this);
    instancesViewer=itemsViewer.getViewer();
    instancesViewer.setInput(universe.getItemsList());
    itemsViewer.getMainComposite().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,2));
    Composite objecstGroup=this.getNewSectionComposite(""String_Node_Str"");
    objecstGroup.setLayout(new GridLayout(1,true));
    Composite objectsComposite=toolkit.createComposite(objecstGroup,SWT.BORDER);
    objectsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectsComposite.setLayout(new GridLayout(1,false));
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      WSUniverse wsUniverse=(WSUniverse)(getXObject().getWsObject());
      wsUniverse.getXtentisObjectsRevisionIDs();
      String value=""String_Node_Str"";
      for (      WSUniverseXtentisObjectsRevisionIDs xtentisObjects : wsUniverse.getXtentisObjectsRevisionIDs()) {
        String name=xtentisObjects.getXtentisObjectName();
        if (EXtentisObjects.Transformer.getName().equals(name)) {
          name=EXtentisObjects.Transformer.getDisplayName();
        }
        if (name.equals(line.key)) {
          value=xtentisObjects.getRevisionID();
          break;
        }
      }
      createLabelCombo(objectsComposite,line.key,value);
    }
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    if (universe == null)     universe=new Universe(""String_Node_Str"");
    this.toolkit=toolkit;
    Label descriptionLabel=toolkit.createLabel(charComposite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    descriptionText=toolkit.createText(charComposite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    ((GridData)descriptionText.getLayoutData()).minimumHeight=30;
    descriptionText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        universe.setDescription(descriptionText.getText());
        markDirtyWithoutCommit();
      }
    }
);
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite itemsGroup=this.getNewSectionComposite(""String_Node_Str"");
    itemsGroup.setLayout(new GridLayout(2,false));
    defaultReversionIDText=new LabelText(toolkit,itemsGroup,""String_Node_Str"");
    defaultReversionIDText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        universe.setDefaultReversionID(defaultReversionIDText.getText().getText().trim());
        markDirtyWithoutCommit();
      }
    }
);
    itemsViewer=new TisTableViewer(Arrays.asList(columns),toolkit,itemsGroup);
    itemsViewer.create();
    itemsViewer.setMainPage(this);
    instancesViewer=itemsViewer.getViewer();
    instancesViewer.setInput(universe.getItemsList());
    itemsViewer.getMainComposite().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,2));
    Composite objecstGroup=this.getNewSectionComposite(""String_Node_Str"");
    objecstGroup.setLayout(new GridLayout(1,true));
    Composite objectsComposite=toolkit.createComposite(objecstGroup,SWT.BORDER);
    objectsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectsComposite.setLayout(new GridLayout(1,false));
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      WSUniverse wsUniverse=(WSUniverse)(getXObject().getWsObject());
      wsUniverse.getXtentisObjectsRevisionIDs();
      String value=""String_Node_Str"";
      for (      WSUniverseXtentisObjectsRevisionIDs xtentisObjects : wsUniverse.getXtentisObjectsRevisionIDs()) {
        String name=xtentisObjects.getXtentisObjectName();
        if (EXtentisObjects.Transformer.getName().equals(name)) {
          name=EXtentisObjects.Transformer.getDisplayName();
        }
        if (name.equals(line.key)) {
          value=xtentisObjects.getRevisionID();
          break;
        }
      }
      createLabelCombo(objectsComposite,line.key,value);
    }
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9975763451284536
149009,"public void parse(){
  if (zipBtn.getSelection()) {
    zipfile=zip.getText().getText();
    importFolder=System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
    try {
      ZipToFile.unZipFile(zipfile,importFolder);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (folderBtn.getSelection()) {
    importFolder=folder.getText().getText();
  }
  try {
    FileReader reader=new FileReader(importFolder + ""String_Node_Str"");
    List<TreeObject> list=new ArrayList<TreeObject>();
    Exports exports=(Exports)Unmarshaller.unmarshal(Exports.class,reader);
    TreeParent reserverRoot=new TreeParent(serverRoot.getDisplayName(),null,TreeObject._SERVER_,serverRoot.getWsKey(),serverRoot.getWsObject());
    reserverRoot.setUser(serverRoot.getUser());
    serverRoot=reserverRoot;
    TreeParent clusters=new TreeParent(EXtentisObjects.DataCluster.getDisplayName(),reserverRoot,TreeObject.DATA_CLUSTER,null,null);
    TreeParent models=new TreeParent(EXtentisObjects.DataMODEL.getDisplayName(),reserverRoot,TreeObject.DATA_MODEL,null,null);
    TreeParent menus=new TreeParent(EXtentisObjects.Menu.getDisplayName(),reserverRoot,TreeObject.MENU,null,null);
    TreeParent roles=new TreeParent(EXtentisObjects.Role.getDisplayName(),reserverRoot,TreeObject.ROLE,null,null);
    TreeParent routingrules=new TreeParent(EXtentisObjects.RoutingRule.getDisplayName(),reserverRoot,TreeObject.ROUTING_RULE,null,null);
    TreeParent storeprocedures=new TreeParent(EXtentisObjects.StoredProcedure.getDisplayName(),reserverRoot,TreeObject.STORED_PROCEDURE,null,null);
    TreeParent syncplans=new TreeParent(EXtentisObjects.SynchronizationPlan.getDisplayName(),reserverRoot,TreeObject.SYNCHRONIZATIONPLAN,null,null);
    TreeParent transformers=new TreeParent(EXtentisObjects.Transformer.getDisplayName(),reserverRoot,TreeObject.TRANSFORMER,null,null);
    TreeParent universes=new TreeParent(EXtentisObjects.Universe.getDisplayName(),reserverRoot,TreeObject.UNIVERSE,null,null);
    TreeParent views=new TreeParent(EXtentisObjects.View.getDisplayName(),reserverRoot,TreeObject.VIEW,null,null);
    reserverRoot.addChild(clusters);
    reserverRoot.addChild(models);
    reserverRoot.addChild(menus);
    reserverRoot.addChild(roles);
    reserverRoot.addChild(routingrules);
    reserverRoot.addChild(storeprocedures);
    reserverRoot.addChild(syncplans);
    reserverRoot.addChild(transformers);
    reserverRoot.addChild(universes);
    reserverRoot.addChild(views);
    for (    TreeObject obj : exports.getItems()) {
      obj.setServerRoot(reserverRoot);
switch (obj.getType()) {
case TreeObject.DATA_CLUSTER:
        clusters.addChild(obj);
      break;
case TreeObject.DATA_MODEL:
    models.addChild(obj);
  break;
case TreeObject.MENU:
menus.addChild(obj);
break;
case TreeObject.ROLE:
roles.addChild(obj);
break;
case TreeObject.ROUTING_RULE:
routingrules.addChild(obj);
break;
case TreeObject.STORED_PROCEDURE:
storeprocedures.addChild(obj);
break;
case TreeObject.SYNCHRONIZATIONPLAN:
syncplans.addChild(obj);
break;
case TreeObject.TRANSFORMER:
transformers.addChild(obj);
break;
case TreeObject.UNIVERSE:
universes.addChild(obj);
break;
case TreeObject.VIEW:
views.addChild(obj);
break;
}
}
treeViewer.setRoot(reserverRoot);
treeViewer.getViewer().setInput(view.getSite());
treeViewer.setCheckItems(Arrays.asList(exports.getItems()));
GridData gd=(GridData)treeViewer.getViewer().getControl().getLayoutData();
gd.heightHint=300;
treeViewer.getViewer().getControl().getParent().layout(true);
treeViewer.getViewer().getControl().getShell().layout(true);
}
 catch (Exception e) {
}
}","public void parse(){
  if (zipBtn.getSelection()) {
    zipfile=zip.getText().getText();
    importFolder=System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
    try {
      ZipToFile.unZipFile(zipfile,importFolder);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (folderBtn.getSelection()) {
    importFolder=folder.getText().getText();
  }
  try {
    FileReader reader=new FileReader(importFolder + ""String_Node_Str"");
    List<TreeObject> list=new ArrayList<TreeObject>();
    Exports exports=(Exports)Unmarshaller.unmarshal(Exports.class,reader);
    TreeParent reserverRoot=new TreeParent(serverRoot.getDisplayName(),null,TreeObject._SERVER_,serverRoot.getWsKey(),serverRoot.getWsObject());
    reserverRoot.setUser(serverRoot.getUser());
    TreeParent clusters=new TreeParent(EXtentisObjects.DataCluster.getDisplayName(),reserverRoot,TreeObject.DATA_CLUSTER,null,null);
    TreeParent models=new TreeParent(EXtentisObjects.DataMODEL.getDisplayName(),reserverRoot,TreeObject.DATA_MODEL,null,null);
    TreeParent menus=new TreeParent(EXtentisObjects.Menu.getDisplayName(),reserverRoot,TreeObject.MENU,null,null);
    TreeParent roles=new TreeParent(EXtentisObjects.Role.getDisplayName(),reserverRoot,TreeObject.ROLE,null,null);
    TreeParent routingrules=new TreeParent(EXtentisObjects.RoutingRule.getDisplayName(),reserverRoot,TreeObject.ROUTING_RULE,null,null);
    TreeParent storeprocedures=new TreeParent(EXtentisObjects.StoredProcedure.getDisplayName(),reserverRoot,TreeObject.STORED_PROCEDURE,null,null);
    TreeParent syncplans=new TreeParent(EXtentisObjects.SynchronizationPlan.getDisplayName(),reserverRoot,TreeObject.SYNCHRONIZATIONPLAN,null,null);
    TreeParent transformers=new TreeParent(EXtentisObjects.Transformer.getDisplayName(),reserverRoot,TreeObject.TRANSFORMER,null,null);
    TreeParent universes=new TreeParent(EXtentisObjects.Universe.getDisplayName(),reserverRoot,TreeObject.UNIVERSE,null,null);
    TreeParent views=new TreeParent(EXtentisObjects.View.getDisplayName(),reserverRoot,TreeObject.VIEW,null,null);
    reserverRoot.addChild(clusters);
    reserverRoot.addChild(models);
    reserverRoot.addChild(menus);
    reserverRoot.addChild(roles);
    reserverRoot.addChild(routingrules);
    reserverRoot.addChild(storeprocedures);
    reserverRoot.addChild(syncplans);
    reserverRoot.addChild(transformers);
    reserverRoot.addChild(universes);
    reserverRoot.addChild(views);
    for (    TreeObject obj : exports.getItems()) {
      obj.setServerRoot(reserverRoot);
switch (obj.getType()) {
case TreeObject.DATA_CLUSTER:
        clusters.addChild(obj);
      break;
case TreeObject.DATA_MODEL:
    models.addChild(obj);
  break;
case TreeObject.MENU:
menus.addChild(obj);
break;
case TreeObject.ROLE:
roles.addChild(obj);
break;
case TreeObject.ROUTING_RULE:
routingrules.addChild(obj);
break;
case TreeObject.STORED_PROCEDURE:
storeprocedures.addChild(obj);
break;
case TreeObject.SYNCHRONIZATIONPLAN:
syncplans.addChild(obj);
break;
case TreeObject.TRANSFORMER:
transformers.addChild(obj);
break;
case TreeObject.UNIVERSE:
universes.addChild(obj);
break;
case TreeObject.VIEW:
views.addChild(obj);
break;
}
}
treeViewer.setRoot(reserverRoot);
treeViewer.getViewer().setInput(view.getSite());
treeViewer.setCheckItems(Arrays.asList(exports.getItems()));
GridData gd=(GridData)treeViewer.getViewer().getControl().getLayoutData();
gd.heightHint=300;
treeViewer.getViewer().getControl().getParent().layout(true);
treeViewer.getViewer().getControl().getShell().layout(true);
}
 catch (Exception e) {
}
}",0.9959694232105628
149010,"@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(1,false));
    Composite separator=toolkit.createCompositeSeparator(composite);
    separator.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    ((GridData)separator.getLayoutData()).heightHint=2;
    ccrollComposite=new ScrolledComposite(composite,SWT.H_SCROLL | SWT.V_SCROLL);
    ccrollComposite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    processCom=new Group(ccrollComposite,0);
    processCom.setText(""String_Node_Str"");
    processCom.setBackground(processCom.getShell().getDisplay().getSystemColor(SWT.COLOR_WHITE));
    processCom.setLayout(new GridLayout(1,false));
    GridData gd=new GridData(SWT.FILL,SWT.CENTER,true,true,1,1);
    gd.heightHint=150;
    processCom.setLayoutData(gd);
    ccrollComposite.setContent(processCom);
    ccrollComposite.setExpandHorizontal(true);
    ccrollComposite.setExpandVertical(true);
    ccrollComposite.setMinSize(400,4 * 31);
    plist=new ProcessList(toolkit,processCom,ccrollComposite,viewer);
    xobject=getXObject();
    port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
    WSWorkflowProcessDefinitionUUID uuid=(WSWorkflowProcessDefinitionUUID)xobject.getWsKey();
    WSProcessInstanceArray array=port.workflowGetProcessInstances(new WSWorkflowGetProcessInstances(uuid));
    if (array != null && array.getInstance() != null) {
      for (      final WSProcessInstance instance : array.getInstance()) {
        final ProcessWidget pw=plist.add(instance.getName());
        pw.setPort(port);
        pw.getStatusLabel().setText(instance.getState());
      }
    }
    Label label1=toolkit.createLabel(composite,""String_Node_Str"");
    label1.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    String[] columns={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    createTable(composite,columns);
    plist.setViewer(viewer);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(1,false));
    Composite separator=toolkit.createCompositeSeparator(composite);
    separator.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    ((GridData)separator.getLayoutData()).heightHint=2;
    ccrollComposite=new ScrolledComposite(composite,SWT.H_SCROLL | SWT.V_SCROLL);
    ccrollComposite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    processCom=new Group(ccrollComposite,0);
    processCom.setText(""String_Node_Str"");
    processCom.setBackground(processCom.getShell().getDisplay().getSystemColor(SWT.COLOR_WHITE));
    processCom.setLayout(new GridLayout(1,false));
    GridData gd=new GridData(SWT.FILL,SWT.CENTER,true,true,1,1);
    gd.heightHint=150;
    processCom.setLayoutData(gd);
    ccrollComposite.setContent(processCom);
    ccrollComposite.setExpandHorizontal(true);
    ccrollComposite.setExpandVertical(true);
    ccrollComposite.setMinSize(400,4 * 31);
    xobject=getXObject();
    port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
    plist=new ProcessList(port,toolkit,processCom,ccrollComposite,viewer);
    WSWorkflowProcessDefinitionUUID uuid=(WSWorkflowProcessDefinitionUUID)xobject.getWsKey();
    WSProcessInstanceArray array=port.workflowGetProcessInstances(new WSWorkflowGetProcessInstances(uuid));
    if (array != null && array.getInstance() != null) {
      for (      final WSProcessInstance instance : array.getInstance()) {
        final ProcessWidget pw=plist.add(instance.getName());
        pw.setPort(port);
        pw.getStatusLabel().setText(instance.getState());
      }
    }
    Label label1=toolkit.createLabel(composite,""String_Node_Str"");
    label1.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    String[] columns={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    createTable(composite,columns);
    plist.setViewer(viewer);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9677849366807376
149011,"public void run(){
  if (this.server != null) {
    ISelection selection=server.getViewer().getSelection();
    xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
  }
  if (xobject.getType() != TreeObject.JOB)   return;
  try {
    WSTransformerV2 transformer=new WSTransformerV2();
    try {
      WSTransformerProcessStep[] steps=new WSTransformerProcessStep[3];
      WSTransformerVariablesMapping[] input=new WSTransformerVariablesMapping[1];
      input[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
      WSTransformerVariablesMapping[] output=new WSTransformerVariablesMapping[1];
      output[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
      steps[0]=new WSTransformerProcessStep(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",input,output,false);
      input=new WSTransformerVariablesMapping[1];
      input[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
      output=new WSTransformerVariablesMapping[1];
      output[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
      String parameter=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
      steps[1]=new WSTransformerProcessStep(""String_Node_Str"",""String_Node_Str"",parameter,input,output,false);
      input=new WSTransformerVariablesMapping[1];
      input[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
      output=new WSTransformerVariablesMapping[1];
      output[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
      String server=""String_Node_Str"" + xobject.getEndpointHost() + ""String_Node_Str""+ xobject.getEndpointPort();
      JobInfo info=(JobInfo)xobject.getWsKey();
      String jobname=info.getJobname();
      ;
      String jobversion=info.getJobversion();
      parameter=""String_Node_Str"" + ""String_Node_Str"" + server + ""String_Node_Str""+ jobname+ ""String_Node_Str""+ jobversion+ ""String_Node_Str""+ jobname+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      steps[2]=new WSTransformerProcessStep(""String_Node_Str"",""String_Node_Str"",parameter,input,output,false);
      transformer.setName(""String_Node_Str"" + jobname + ""String_Node_Str"");
      transformer.setDescription(""String_Node_Str"" + jobname + ""String_Node_Str"");
      transformer.setProcessSteps(steps);
      Util.getPort(xobject).putTransformerV2(new WSPutTransformerV2(transformer));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 catch (  Exception e) {
  }
}","public void run(){
  if (this.server != null) {
    ISelection selection=server.getViewer().getSelection();
    xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
  }
  if (xobject.getType() != TreeObject.JOB)   return;
  try {
    WSTransformerV2 transformer=new WSTransformerV2();
    try {
      WSTransformerProcessStep[] steps=new WSTransformerProcessStep[3];
      WSTransformerVariablesMapping[] input=new WSTransformerVariablesMapping[1];
      input[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
      WSTransformerVariablesMapping[] output=new WSTransformerVariablesMapping[1];
      output[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
      steps[0]=new WSTransformerProcessStep(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",input,output,false);
      input=new WSTransformerVariablesMapping[1];
      input[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
      output=new WSTransformerVariablesMapping[1];
      output[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
      String parameter=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
      steps[1]=new WSTransformerProcessStep(""String_Node_Str"",""String_Node_Str"",parameter,input,output,false);
      input=new WSTransformerVariablesMapping[1];
      input[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
      output=new WSTransformerVariablesMapping[1];
      output[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
      String server=""String_Node_Str"" + xobject.getEndpointHost() + ""String_Node_Str""+ xobject.getEndpointPort();
      JobInfo info=new JobInfo(""String_Node_Str"",""String_Node_Str"");
      if (xobject.getWsKey() instanceof WSViewPK) {
        String jobName=((WSViewPK)xobject.getWsKey()).getPk();
        if (jobName.matches(""String_Node_Str"")) {
          Pattern p=Pattern.compile(""String_Node_Str"");
          Matcher m=p.matcher(jobName);
          if (m.matches()) {
            info.setJobversion(m.group(m.groupCount()));
            info.setJobname(m.group(m.groupCount() - 1));
          }
        }
      }
 else       info=(JobInfo)xobject.getWsKey();
      String jobname=info.getJobname();
      String jobversion=info.getJobversion();
      parameter=""String_Node_Str"" + ""String_Node_Str"" + server + ""String_Node_Str""+ jobname+ ""String_Node_Str""+ jobversion+ ""String_Node_Str""+ jobname+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      steps[2]=new WSTransformerProcessStep(""String_Node_Str"",""String_Node_Str"",parameter,input,output,false);
      transformer.setName(""String_Node_Str"" + jobname + ""String_Node_Str"");
      transformer.setDescription(""String_Node_Str"" + jobname + ""String_Node_Str"");
      transformer.setProcessSteps(steps);
      Util.getPort(xobject).putTransformerV2(new WSPutTransformerV2(transformer));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 catch (  Exception e) {
  }
 finally {
    server.forceAllSiteToRefresh();
  }
}",0.9004882976932144
149012,"@Override protected void okPressed(){
  name=text.getText();
  deactiveAllCellEditors();
  getValidationRules();
  super.okPressed();
}","@Override protected void okPressed(){
  name=text.getText();
  XpathSelectDialog.setContext(null);
  deactiveAllCellEditors();
  getValidationRules();
  super.okPressed();
}",0.8766233766233766
149013,"public IStatus doAction(){
  try {
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure(xSDCom);
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    String conceptName=null;
    if (xSDCom instanceof XSDAnnotation) {
      conceptName=xSDCom.getContainer().getElement().getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
    }
    if (xSDCom instanceof XSDElementDeclaration) {
      conceptName=xSDCom.getElement().getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
      InputDialog input=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
      input.open();
      if (input.getReturnCode() == InputDialog.OK) {
        String pattern=""String_Node_Str"" + input.getValue() + ""String_Node_Str"";
        struc.addSchematron(pattern);
        page.refresh();
        page.getTreeViewer().expandToLevel(xSDCom,2);
        page.markDirty();
        return Status.OK_STATUS;
      }
    }
    if (!(selection.getFirstElement() instanceof Element)) {
      return Status.CANCEL_STATUS;
    }
    Element e=(Element)selection.getFirstElement();
    if (!""String_Node_Str"".equals(e.getAttribute(""String_Node_Str"")))     return Status.CANCEL_STATUS;
    dlg=new ValidationRuleDialog(page.getSite().getShell(),""String_Node_Str"",e.getFirstChild().getTextContent(),page,conceptName);
    dlg.setBlockOnOpen(true);
    dlg.create();
    int ret=dlg.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    e.getFirstChild().setTextContent(dlg.getPattern());
    e.getFirstChild().setUserData(""String_Node_Str"",dlg.getName(),null);
    page.refresh();
    page.getTreeViewer().expandToLevel(xSDCom,2);
    page.markDirty();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    String conceptName=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
      conceptName=xSDCom.getContainer().getElement().getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
      Element e=(Element)selection.getFirstElement();
      if (!""String_Node_Str"".equals(e.getAttribute(""String_Node_Str"")))       return Status.CANCEL_STATUS;
      dlg=new ValidationRuleDialog(page.getSite().getShell(),""String_Node_Str"",e.getFirstChild().getTextContent(),page,conceptName);
      dlg.setBlockOnOpen(true);
      dlg.create();
      int ret=dlg.open();
      if (ret == Window.CANCEL) {
        return Status.CANCEL_STATUS;
      }
      e.getFirstChild().setTextContent(dlg.getPattern());
      e.getFirstChild().setUserData(""String_Node_Str"",dlg.getName(),null);
    }
 else {
      xSDCom=(XSDComponent)selection.getFirstElement();
      XSDAnnotationsStructure struc=new XSDAnnotationsStructure(xSDCom);
      if (struc.getAnnotation() == null) {
        throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
      }
      if (xSDCom instanceof XSDElementDeclaration) {
        conceptName=xSDCom.getElement().getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
      }
      if (xSDCom instanceof XSDAnnotation || xSDCom instanceof XSDElementDeclaration) {
        InputDialog input=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
        input.open();
        if (input.getReturnCode() == InputDialog.OK) {
          String pattern=""String_Node_Str"" + input.getValue() + ""String_Node_Str"";
          struc.addSchematron(pattern);
          page.refresh();
          page.getTreeViewer().expandToLevel(xSDCom,2);
          page.markDirty();
          return Status.OK_STATUS;
        }
        return Status.CANCEL_STATUS;
      }
    }
    page.refresh();
    page.getTreeViewer().expandToLevel(xSDCom,2);
    page.markDirty();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.4430041936713687
149014,"private String getValidationRules(){
  TableItem[] items=viewer.getViewer().getTable().getItems();
  StringBuffer sb=new StringBuffer();
  if (items.length > 0) {
    sb=sb.append(""String_Node_Str"" + ""String_Node_Str"" + text.getText() + ""String_Node_Str"");
    for (    TableItem item : items) {
      Line line=(Line)item.getData();
      sb=sb.append(""String_Node_Str"");
      String type=line.keyValues.get(0).value;
      String context=line.keyValues.get(1).value;
      String express=line.keyValues.get(2).value;
      String msg=line.keyValues.get(3).value;
      if (conceptName != null) {
        if (context.equals(conceptName)) {
          context=context.replaceAll(conceptName,""String_Node_Str"");
        }
 else {
          context=context.replaceAll(conceptName + ""String_Node_Str"",""String_Node_Str"");
        }
      }
      sb=sb.append(context).append(""String_Node_Str"");
      sb=sb.append(""String_Node_Str"" + type.toLowerCase() + ""String_Node_Str""+ express+ ""String_Node_Str"");
      sb=sb.append(msg);
      sb=sb.append(""String_Node_Str"" + type.toLowerCase() + ""String_Node_Str"");
      sb=sb.append(""String_Node_Str"");
    }
    sb=sb.append(""String_Node_Str"");
  }
  return pattern=sb.toString();
}","private String getValidationRules(){
  TableItem[] items=viewer.getViewer().getTable().getItems();
  StringBuffer sb=new StringBuffer();
  if (items.length > 0) {
    sb=sb.append(""String_Node_Str"" + ""String_Node_Str"" + text.getText() + ""String_Node_Str"");
    for (    TableItem item : items) {
      Line line=(Line)item.getData();
      sb=sb.append(""String_Node_Str"");
      String type=line.keyValues.get(0).value;
      String context=line.keyValues.get(1).value;
      String express=line.keyValues.get(2).value;
      express=express.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String msg=line.keyValues.get(3).value;
      if (conceptName != null) {
        if (context.equals(conceptName)) {
          context=context.replaceAll(conceptName,""String_Node_Str"");
        }
 else {
          context=context.replaceAll(conceptName + ""String_Node_Str"",""String_Node_Str"");
        }
      }
      sb=sb.append(context).append(""String_Node_Str"");
      sb=sb.append(""String_Node_Str"" + type.toLowerCase() + ""String_Node_Str""+ express+ ""String_Node_Str"");
      sb=sb.append(msg);
      sb=sb.append(""String_Node_Str"" + type.toLowerCase() + ""String_Node_Str"");
      sb=sb.append(""String_Node_Str"");
    }
    sb=sb.append(""String_Node_Str"");
  }
  return pattern=sb.toString();
}",0.9717918156535558
149015,"@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setLayout(new GridLayout(2,false));
  Label label=new Label(composite,SWT.NONE);
  label.setText(""String_Node_Str"");
  label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  text=new Text(composite,SWT.BORDER);
  text.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  columns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ComplexTableViewerColumn.COMBO_STYLE,IConstants.SCHEMATRON_TYPES,0),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ComplexTableViewerColumn.XPATH_STYLE,new String[]{},0),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ComplexTableViewerColumn.VALIDATIONRULE_STYLE,new String[]{},0),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ComplexTableViewerColumn.MULTIMESSAGE_STYLE,new String[]{},0)};
  columns[0].setColumnWidth(70);
  columns[1].setColumnWidth(130);
  columns[2].setColumnWidth(300);
  columns[3].setColumnWidth(300);
  viewer=new TisTableViewer(Arrays.asList(columns),new WidgetFactory(),composite);
  viewer.setMainPage(page);
  viewer.setConceptName(conceptName);
  viewer.setContext(true);
  viewer.create();
  viewer.getViewer().setInput(parseRules());
  viewer.setHeight(110);
  viewer.setWidth(800);
  viewer.getMainComposite().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,3));
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setLayout(new GridLayout(2,false));
  Label label=new Label(composite,SWT.NONE);
  label.setText(""String_Node_Str"");
  label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  text=new Text(composite,SWT.BORDER);
  text.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  columns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ComplexTableViewerColumn.COMBO_STYLE,IConstants.SCHEMATRON_TYPES,0),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ComplexTableViewerColumn.XPATH_STYLE,new String[]{},0),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ComplexTableViewerColumn.VALIDATIONRULE_STYLE,new String[]{},0),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ComplexTableViewerColumn.MULTIMESSAGE_STYLE,new String[]{},0)};
  columns[0].setColumnWidth(70);
  columns[1].setColumnWidth(130);
  columns[2].setColumnWidth(300);
  columns[3].setColumnWidth(300);
  viewer=new TisTableViewer(Arrays.asList(columns),new WidgetFactory(),composite);
  viewer.setMainPage(page);
  viewer.setConceptName(conceptName);
  viewer.setContext(false);
  viewer.create();
  viewer.getViewer().setInput(parseRules());
  viewer.setHeight(110);
  viewer.setWidth(800);
  viewer.getMainComposite().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,3));
  return composite;
}",0.997986770204199
149016,"private void setAnnotationActions(IMenuManager manager){
  manager.add(setAnnotationLabelAction);
  manager.add(setAnnotationDescriptionsAction);
  manager.add(setAnnotationForeignKeyAction);
  manager.add(setAnnotationForeignKeyInfoAction);
  manager.add(setAnnotationWriteAction);
  manager.add(setAnnotationHiddenAction);
  manager.add(setAnnotationSchematronAction);
  manager.add(setAnnotationSourceSystemAction);
  manager.add(setAnnotationTargetSystemsAction);
  manager.add(deleteValidationRule);
}","private void setAnnotationActions(IMenuManager manager){
  manager.add(setAnnotationLabelAction);
  manager.add(setAnnotationDescriptionsAction);
  manager.add(setAnnotationForeignKeyAction);
  manager.add(setAnnotationForeignKeyInfoAction);
  manager.add(setAnnotationWriteAction);
  manager.add(setAnnotationHiddenAction);
  manager.add(setAnnotationSourceSystemAction);
  manager.add(setAnnotationTargetSystemsAction);
  manager.add(deleteValidationRule);
}",0.9523809523809524
149017,"protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(new XSDNewConceptAction(this));
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    boolean isMulti=false;
    if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() > 1)     isMulti=true;
    XSDPasteConceptAction pasteConceptAction=new XSDPasteConceptAction(this,isMulti);
    if (pasteConceptAction.checkInPasteType()) {
      manager.add(new Separator());
      manager.add(pasteConceptAction);
    }
    return;
  }
  Object[] selectedObjs=selection.toArray();
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration && selectedObjs.length == 1) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=Util.checkConcept(decl);
    if (decl.getTargetNamespace() == null && !Util.IsAImporedElement(decl,xsdSchema)) {
      if (isConcept) {
        manager.add(editConceptAction);
        manager.add(deleteConceptAction);
        manager.add(newBrowseItemAction);
      }
 else {
        manager.add(editElementAction);
        manager.add(deleteElementAction);
      }
      XSDCopyConceptAction copyConceptAction=new XSDCopyConceptAction(this,false);
      if (copyConceptAction.checkInCopyType(selectedObjs)) {
        manager.add(new Separator());
        manager.add(copyConceptAction);
      }
      boolean isMulti=false;
      if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() > 1)       isMulti=true;
      XSDPasteConceptAction pasteConceptAction=new XSDPasteConceptAction(this,isMulti);
      if (pasteConceptAction.checkInPasteType())       manager.add(pasteConceptAction);
      manager.add(new Separator());
      manager.add(new XSDNewConceptAction(this));
      manager.add(newElementAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      if (((XSDElementDeclaration)obj).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
        manager.add(setFacetMsgAction);
      }
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
    }
 else {
      if (isConcept) {
        manager.add(newBrowseItemAction);
      }
      manager.add(new XSDNewConceptAction(this));
      manager.add(newElementAction);
    }
    if (decl.getTargetNamespace() == null && !Util.IsAImporedElement(decl,xsdSchema) && !Util.IsAImporedElement(decl.getTypeDefinition(),xsdSchema))     setAnnotationActions2(manager);
  }
  if (obj instanceof XSDModelGroup && !Util.IsAImporedElement((XSDModelGroup)obj,xsdSchema)) {
    manager.add(changeSubElementGroupAction);
  }
  if (obj instanceof XSDParticle && selectedObjs.length == 1) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      if (term instanceof XSDElementDeclaration) {
        if (!Util.IsAImporedElement((XSDElementDeclaration)term,xsdSchema) || term.getContainer() instanceof XSDSchema) {
          manager.add(editParticleAction);
          manager.add(newParticleFromParticleAction);
          if (term instanceof XSDModelGroup) {
            manager.add(newParticleFromTypeAction);
            manager.add(newGroupFromTypeAction);
          }
          manager.add(deleteParticleAction);
          manager.add(new Separator());
          manager.add(changeToComplexTypeAction);
          manager.add(changeToSimpleTypeAction);
          manager.add(new Separator());
          if (term instanceof XSDElementDeclaration) {
            XSDTypeDefinition type=((XSDElementDeclaration)term).getTypeDefinition();
            if (!Util.IsAImporedElement(type,xsdSchema))             setAnnotationActions(manager);
            if (((XSDElementDeclaration)term).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
              manager.add(setFacetMsgAction);
            }
            manager.add(new Separator());
            manager.add(getXPathAction);
          }
        }
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition && selectedObjs.length == 1 && ((XSDComplexTypeDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDParticle)obj,xsdSchema)) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition && selectedObjs.length == 1 && ((XSDIdentityConstraintDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDIdentityConstraintDefinition)obj,xsdSchema)) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition && selectedObjs.length == 1 && ((XSDXPathDefinition)obj).getSchema().getTargetNamespace() == null && !Util.IsAImporedElement((XSDXPathDefinition)obj,xsdSchema)) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition && selectedObjs.length == 1 && ((XSDSimpleTypeDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDSimpleTypeDefinition)obj,xsdSchema)) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation && selectedObjs.length == 1) {
    if (((XSDAnnotation)obj).getSchema().getTargetNamespace() == null && !Util.IsAImporedElement((XSDAnnotation)obj,xsdSchema))     setAnnotationActions(manager);
 else     if (!Util.IsAImporedElement((XSDAnnotation)obj,xsdSchema)) {
      setAnnotationActions(manager);
    }
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInDeletableType(selectedObjs)) {
    deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.outPutDeleteActions() != null) {
    manager.add(deleteConceptWrapAction.outPutDeleteActions());
    if (deleteConceptWrapAction.checkOutAllConcept(selectedObjs))     manager.add(newBrowseItemAction);
    XSDCopyConceptAction copyConceptAction=new XSDCopyConceptAction(this,true);
    if (copyConceptAction.checkInCopyType(selectedObjs)) {
      manager.add(new Separator());
      manager.add(copyConceptAction);
    }
    boolean isMulti=false;
    if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() > 1)     isMulti=true;
    XSDPasteConceptAction pasteConceptAction=new XSDPasteConceptAction(this,isMulti);
    if (pasteConceptAction.checkInPasteType())     manager.add(pasteConceptAction);
  }
  if (selectedObjs.length > 1 && setAnnotationWrapWriteAction.checkInWriteType(selectedObjs)) {
    manager.add(new Separator());
    manager.add(setAnnotationWrapWriteAction);
    manager.add(setAnnotationWrapHiddenAction);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(new XSDNewConceptAction(this));
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    boolean isMulti=false;
    if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() > 1)     isMulti=true;
    XSDPasteConceptAction pasteConceptAction=new XSDPasteConceptAction(this,isMulti);
    if (pasteConceptAction.checkInPasteType()) {
      manager.add(new Separator());
      manager.add(pasteConceptAction);
    }
    return;
  }
  Object[] selectedObjs=selection.toArray();
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration && selectedObjs.length == 1) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=Util.checkConcept(decl);
    if (decl.getTargetNamespace() == null && !Util.IsAImporedElement(decl,xsdSchema)) {
      if (isConcept) {
        manager.add(editConceptAction);
        manager.add(deleteConceptAction);
        manager.add(newBrowseItemAction);
      }
 else {
        manager.add(editElementAction);
        manager.add(deleteElementAction);
      }
      XSDCopyConceptAction copyConceptAction=new XSDCopyConceptAction(this,false);
      if (copyConceptAction.checkInCopyType(selectedObjs)) {
        manager.add(new Separator());
        manager.add(copyConceptAction);
      }
      boolean isMulti=false;
      if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() > 1)       isMulti=true;
      XSDPasteConceptAction pasteConceptAction=new XSDPasteConceptAction(this,isMulti);
      if (pasteConceptAction.checkInPasteType())       manager.add(pasteConceptAction);
      manager.add(new Separator());
      manager.add(new XSDNewConceptAction(this));
      manager.add(newElementAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      if (((XSDElementDeclaration)obj).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
        manager.add(setFacetMsgAction);
      }
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
    }
 else {
      if (isConcept) {
        manager.add(newBrowseItemAction);
      }
      manager.add(new XSDNewConceptAction(this));
      manager.add(newElementAction);
    }
    if (decl.getTargetNamespace() == null && !Util.IsAImporedElement(decl,xsdSchema) && !Util.IsAImporedElement(decl.getTypeDefinition(),xsdSchema))     setAnnotationActions2(manager);
  }
  if (obj instanceof XSDModelGroup && !Util.IsAImporedElement((XSDModelGroup)obj,xsdSchema)) {
    manager.add(changeSubElementGroupAction);
  }
  if (obj instanceof XSDParticle && selectedObjs.length == 1) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      if (term instanceof XSDElementDeclaration) {
        if (!Util.IsAImporedElement((XSDElementDeclaration)term,xsdSchema) || term.getContainer() instanceof XSDSchema) {
          manager.add(editParticleAction);
          manager.add(newParticleFromParticleAction);
          if (term instanceof XSDModelGroup) {
            manager.add(newParticleFromTypeAction);
            manager.add(newGroupFromTypeAction);
          }
          manager.add(deleteParticleAction);
          manager.add(new Separator());
          manager.add(changeToComplexTypeAction);
          manager.add(changeToSimpleTypeAction);
          manager.add(new Separator());
          if (term instanceof XSDElementDeclaration) {
            XSDTypeDefinition type=((XSDElementDeclaration)term).getTypeDefinition();
            if (!Util.IsAImporedElement(type,xsdSchema)) {
              setAnnotationActions(manager);
            }
            if (((XSDElementDeclaration)term).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
              manager.add(setFacetMsgAction);
            }
            manager.add(new Separator());
            manager.add(getXPathAction);
          }
        }
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition && selectedObjs.length == 1 && ((XSDComplexTypeDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDParticle)obj,xsdSchema)) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition && selectedObjs.length == 1 && ((XSDIdentityConstraintDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDIdentityConstraintDefinition)obj,xsdSchema)) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition && selectedObjs.length == 1 && ((XSDXPathDefinition)obj).getSchema().getTargetNamespace() == null && !Util.IsAImporedElement((XSDXPathDefinition)obj,xsdSchema)) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition && selectedObjs.length == 1 && ((XSDSimpleTypeDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDSimpleTypeDefinition)obj,xsdSchema)) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation && selectedObjs.length == 1) {
    if (((XSDAnnotation)obj).getSchema().getTargetNamespace() == null && !Util.IsAImporedElement((XSDAnnotation)obj,xsdSchema)) {
      setAnnotationActions(manager);
      manager.add(setAnnotationSchematronAction);
    }
 else     if (!Util.IsAImporedElement((XSDAnnotation)obj,xsdSchema)) {
      setAnnotationActions(manager);
      manager.add(setAnnotationSchematronAction);
    }
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInDeletableType(selectedObjs)) {
    deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.outPutDeleteActions() != null) {
    manager.add(deleteConceptWrapAction.outPutDeleteActions());
    if (deleteConceptWrapAction.checkOutAllConcept(selectedObjs))     manager.add(newBrowseItemAction);
    XSDCopyConceptAction copyConceptAction=new XSDCopyConceptAction(this,true);
    if (copyConceptAction.checkInCopyType(selectedObjs)) {
      manager.add(new Separator());
      manager.add(copyConceptAction);
    }
    boolean isMulti=false;
    if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() > 1)     isMulti=true;
    XSDPasteConceptAction pasteConceptAction=new XSDPasteConceptAction(this,isMulti);
    if (pasteConceptAction.checkInPasteType())     manager.add(pasteConceptAction);
  }
  if (selectedObjs.length > 1 && setAnnotationWrapWriteAction.checkInWriteType(selectedObjs)) {
    manager.add(new Separator());
    manager.add(setAnnotationWrapWriteAction);
    manager.add(setAnnotationWrapHiddenAction);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.9819168173598554
149018,"@Override public void widgetSelected(SelectionEvent e){
  dlg=new ValidationRuleExcpressDialog(composite.getShell(),""String_Node_Str"",text.getText(),conceptName);
  dlg.setBlockOnOpen(true);
  dlg.create();
  int ret=dlg.open();
  if (ret == Window.OK) {
    text.setText(dlg.getExpression().replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
}","@Override public void widgetSelected(SelectionEvent e){
  dlg=new ValidationRuleExcpressDialog(composite.getShell(),""String_Node_Str"",text.getText(),conceptName);
  dlg.setBlockOnOpen(true);
  dlg.create();
  int ret=dlg.open();
  if (ret == Window.OK) {
    text.setText(dlg.getExpression());
  }
}",0.9256965944272446
149019,"private void create(){
  composite=toolkit.createComposite(parent,SWT.NO_FOCUS);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.marginLeft=0;
  layout.marginTop=0;
  layout.marginHeight=0;
  layout.marginBottom=0;
  composite.setLayout(layout);
  text=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT);
  text.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  button=toolkit.createButton(composite,""String_Node_Str"",SWT.PUSH);
  button.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      dlg=new ValidationRuleExcpressDialog(composite.getShell(),""String_Node_Str"",text.getText(),conceptName);
      dlg.setBlockOnOpen(true);
      dlg.create();
      int ret=dlg.open();
      if (ret == Window.OK) {
        text.setText(dlg.getExpression().replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
    }
  }
);
  button.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  button.setToolTipText(""String_Node_Str"");
}","private void create(){
  composite=toolkit.createComposite(parent,SWT.NO_FOCUS);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.marginLeft=0;
  layout.marginTop=0;
  layout.marginHeight=0;
  layout.marginBottom=0;
  composite.setLayout(layout);
  text=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT);
  text.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  button=toolkit.createButton(composite,""String_Node_Str"",SWT.PUSH);
  button.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      dlg=new ValidationRuleExcpressDialog(composite.getShell(),""String_Node_Str"",text.getText(),conceptName);
      dlg.setBlockOnOpen(true);
      dlg.create();
      int ret=dlg.open();
      if (ret == Window.OK) {
        text.setText(dlg.getExpression());
      }
    }
  }
);
  button.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  button.setToolTipText(""String_Node_Str"");
}",0.9800166527893422
149020,"private List<Line> parseRules(){
  List<Line> lines=new ArrayList<Line>();
  String context=""String_Node_Str"";
  String type=""String_Node_Str"";
  String express=""String_Node_Str"";
  String msg=""String_Node_Str"";
  Element e=null;
  try {
    e=Util.parse(pattern).getDocumentElement();
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
  if (e.getAttributes().getNamedItem(""String_Node_Str"") != null)   name=e.getAttributes().getNamedItem(""String_Node_Str"").getTextContent();
  text.setText(""String_Node_Str"".equals(name) ? ""String_Node_Str"" : name);
  NodeList rulelist=e.getElementsByTagName(""String_Node_Str"");
  for (int i=0; i < rulelist.getLength(); i++) {
    Node r=rulelist.item(i);
    context=r.getAttributes().getNamedItem(""String_Node_Str"").getTextContent();
    type=r.getChildNodes().item(0).getNodeName();
    express=r.getChildNodes().item(0).getAttributes().getNamedItem(""String_Node_Str"").getTextContent();
    msg=r.getChildNodes().item(0).getTextContent();
    Line l=new Line(columns,new String[]{type,context,express,msg});
    lines.add(l);
  }
  return lines;
}","private List<Line> parseRules(){
  List<Line> lines=new ArrayList<Line>();
  pattern=pattern.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String context=""String_Node_Str"";
  String type=""String_Node_Str"";
  String express=""String_Node_Str"";
  String msg=""String_Node_Str"";
  Element e=null;
  try {
    e=Util.parse(pattern).getDocumentElement();
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
  if (e.getAttributes().getNamedItem(""String_Node_Str"") != null)   name=e.getAttributes().getNamedItem(""String_Node_Str"").getTextContent();
  text.setText(""String_Node_Str"".equals(name) ? ""String_Node_Str"" : name);
  NodeList rulelist=e.getElementsByTagName(""String_Node_Str"");
  for (int i=0; i < rulelist.getLength(); i++) {
    Node r=rulelist.item(i);
    context=r.getAttributes().getNamedItem(""String_Node_Str"").getTextContent();
    for (int j=0; j < r.getChildNodes().getLength(); j++) {
      if (r.getChildNodes().item(j).getNodeType() == Node.ELEMENT_NODE) {
        type=r.getChildNodes().item(j).getNodeName();
        express=r.getChildNodes().item(j).getAttributes().getNamedItem(""String_Node_Str"").getTextContent();
        msg=r.getChildNodes().item(j).getTextContent();
        break;
      }
    }
    Line l=new Line(columns,new String[]{type,context,express,msg});
    lines.add(l);
  }
  return lines;
}",0.8660640920295809
149021,"@Override public boolean performFinish(){
  WSTransformerV2 transformer=new WSTransformerV2();
  try {
    WSTransformerProcessStep[] steps=new WSTransformerProcessStep[2];
    WSTransformerVariablesMapping[] input=new WSTransformerVariablesMapping[1];
    input[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
    WSTransformerVariablesMapping[] output=new WSTransformerVariablesMapping[1];
    output[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
    steps[0]=new WSTransformerProcessStep(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",input,output,false);
    input=new WSTransformerVariablesMapping[1];
    input[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
    output=new WSTransformerVariablesMapping[1];
    output[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
    String parameter=""String_Node_Str"";
    WSString config=Util.getPort(xobject).getServiceConfiguration(new WSServiceGetConfiguration(""String_Node_Str"",""String_Node_Str""));
    String configuration=config.getValue() == null ? ""String_Node_Str"" : config.getValue();
    if (configuration.length() > 0) {
      Element e=Util.parse(configuration).getDocumentElement();
      String initialContextFactory=Util.getFirstTextNode(e,""String_Node_Str"");
      String providerURL=Util.getFirstTextNode(e,""String_Node_Str"");
      String apiType=Util.getFirstTextNode(e,""String_Node_Str"");
      configuration=""String_Node_Str"" + initialContextFactory + ""String_Node_Str"";
      configuration=configuration + ""String_Node_Str"" + providerURL+ ""String_Node_Str"";
      configuration=configuration + ""String_Node_Str"" + apiType+ ""String_Node_Str"";
    }
    parameter=parameter + configuration + ""String_Node_Str"";
    WSWorkflowProcessDefinitionUUID uuid=(WSWorkflowProcessDefinitionUUID)xobject.getWsKey();
    String process=""String_Node_Str"" + uuid.getProcessName() + ""String_Node_Str"";
    process=process + ""String_Node_Str"" + uuid.getProcessVersion()+ ""String_Node_Str"";
    parameter=parameter + process + variableext.getText();
    parameter=parameter + ""String_Node_Str"";
    steps[1]=new WSTransformerProcessStep(""String_Node_Str"",""String_Node_Str"",parameter,input,output,false);
    transformer.setName(""String_Node_Str"" + uuid.getProcessName() + ""String_Node_Str"");
    transformer.setDescription(""String_Node_Str"" + uuid.getProcessName() + ""String_Node_Str"");
    transformer.setProcessSteps(steps);
    Util.getPort(xobject).putTransformerV2(new WSPutTransformerV2(transformer));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  new ServerRefreshAction(view,xobject.getServerRoot()).run();
  return true;
}","@Override public boolean performFinish(){
  WSTransformerV2 transformer=new WSTransformerV2();
  try {
    WSTransformerProcessStep[] steps=new WSTransformerProcessStep[2];
    WSTransformerVariablesMapping[] input=new WSTransformerVariablesMapping[1];
    input[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
    WSTransformerVariablesMapping[] output=new WSTransformerVariablesMapping[1];
    output[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
    steps[0]=new WSTransformerProcessStep(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",input,output,false);
    input=new WSTransformerVariablesMapping[1];
    input[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
    output=new WSTransformerVariablesMapping[1];
    output[0]=new WSTransformerVariablesMapping(""String_Node_Str"",""String_Node_Str"",null);
    String parameter=""String_Node_Str"";
    WSWorkflowProcessDefinitionUUID uuid=(WSWorkflowProcessDefinitionUUID)xobject.getWsKey();
    String process=""String_Node_Str"" + uuid.getProcessName() + ""String_Node_Str"";
    process=process + ""String_Node_Str"" + uuid.getProcessVersion()+ ""String_Node_Str"";
    parameter=parameter + process + variableext.getText();
    parameter=parameter + ""String_Node_Str"";
    steps[1]=new WSTransformerProcessStep(""String_Node_Str"",""String_Node_Str"",parameter,input,output,false);
    transformer.setName(""String_Node_Str"" + uuid.getProcessName() + ""String_Node_Str"");
    transformer.setDescription(""String_Node_Str"" + uuid.getProcessName() + ""String_Node_Str"");
    transformer.setProcessSteps(steps);
    Util.getPort(xobject).putTransformerV2(new WSPutTransformerV2(transformer));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  new ServerRefreshAction(view,xobject.getServerRoot()).run();
  return true;
}",0.8153056861906798
149022,"protected void fillContextMenu(IMenuManager manager){
  TreeObject xobject=(TreeObject)((IStructuredSelection)viewer.getSelection()).getFirstElement();
  boolean hasVersioning=false;
  try {
    XtentisPort port=Util.getPort(xobject);
    if (port == null)     return;
    WSVersioningInfo info=port.versioningGetInfo(new WSVersioningGetInfo(null));
    hasVersioning=info.isEnabled();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (xobject == null) {
    manager.add(loginAction);
  }
 else {
switch (xobject.getType()) {
case TreeObject._SERVER_:
      manager.add(loginAction);
    manager.add(logoutAction);
  manager.add(serverRefreshAction);
manager.add(importAction);
manager.add(exportAction);
manager.add(versionUniverseAction);
if (!WorkbenchClipboard.getWorkbenchClipboard().isEmpty()) manager.add(pasteAction);
break;
case TreeObject._ACTION_:
manager.add((Action)xobject.getWsObject());
break;
case TreeObject.SUBSCRIPTION_ENGINE:
manager.add(browseViewAction);
break;
case TreeObject.CUSTOM_TYPE:
case TreeObject.CUSTOM_TYPES_RESOURCE:
manager.add(uploadCustomTypeAction);
break;
case TreeObject.SERVICE_CONFIGURATION:
case TreeObject.RESOURCES:
case TreeObject.DATA_MODEL_RESOURCE:
case TreeObject.DATA_MODEL_TYPES_RESOURCE:
case TreeObject.PICTURES_RESOURCE:
break;
case TreeObject.DATA_CLUSTER:
if (xobject.isXObject()) {
manager.add(browseViewAction);
}
case TreeObject.WORKFLOW:
manager.add(workflowAction);
break;
case TreeObject.WORKFLOW_PROCESS:
manager.add(deleteWorkflowProcessAction);
manager.add(defaultworkflowTransformeraction);
break;
case TreeObject.JOB:
manager.add(deleteJobAction);
manager.add(defaultjobtransformeraction);
break;
case TreeObject.JOB_REGISTRY:
manager.add(importjobaction);
break;
case TreeObject.ROLE:
case TreeObject.VIEW:
default :
if (xobject.getType() != TreeObject.CATEGORY_FOLDER) {
manager.add(exportAction);
manager.add(importAction);
}
int type=LocalTreeObjectRepository.getInstance().receiveUnCertainTreeObjectType(xobject);
if (!LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) && type != TreeObject.ROLE) {
if (xobject.getType() != TreeObject.RESOURCES && xobject.getType() != TreeObject.DATA_MODEL_RESOURCE && xobject.getType() != TreeObject.DATA_MODEL_TYPES_RESOURCE && xobject.getType() != TreeObject.CUSTOM_TYPES_RESOURCE && xobject.getType() != TreeObject.PICTURES_RESOURCE) manager.add(newXObjectAction);
}
 else if (type == TreeObject.ROLE && (xobject.getType() == TreeObject.CATEGORY_FOLDER || xobject instanceof TreeParent)) {
manager.add(newUserActon);
}
if (Util.hasUniverse(xobject)) manager.add(browseRevisionAction);
if (Util.hasTags(xobject)) manager.add(versionAction);
if (xobject.isXObject() && !XSystemObjects.isExist(xobject.getType(),xobject.getDisplayName())) {
manager.add(editXObjectAction);
manager.add(deleteXObjectAction);
manager.add(copyAction);
}
 else if (LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) == false) {
manager.add(newCategoryAction);
}
if (!WorkbenchClipboard.getWorkbenchClipboard().isEmpty()) {
TreeObject remoteObj=(TreeObject)((IStructuredSelection)viewer.getSelection()).getFirstElement();
((PasteXObjectAction)pasteAction).setXtentisPort(remoteObj);
((PasteXObjectAction)pasteAction).setParent(remoteObj instanceof TreeParent ? (TreeParent)remoteObj : remoteObj.getParent());
manager.add(pasteAction);
}
}
}
manager.add(new Separator());
drillDownAdapter.addNavigationActions(manager);
manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  TreeObject xobject=(TreeObject)((IStructuredSelection)viewer.getSelection()).getFirstElement();
  boolean hasVersioning=false;
  try {
    XtentisPort port=Util.getPort(xobject);
    if (port == null)     return;
    WSVersioningInfo info=port.versioningGetInfo(new WSVersioningGetInfo(null));
    hasVersioning=info.isEnabled();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (xobject == null) {
    manager.add(loginAction);
  }
 else {
switch (xobject.getType()) {
case TreeObject._SERVER_:
      manager.add(loginAction);
    manager.add(logoutAction);
  manager.add(serverRefreshAction);
manager.add(importAction);
manager.add(exportAction);
manager.add(versionUniverseAction);
if (!WorkbenchClipboard.getWorkbenchClipboard().isEmpty()) manager.add(pasteAction);
break;
case TreeObject.WORKFLOW:
manager.add(workflowAction);
break;
case TreeObject.WORKFLOW_PROCESS:
manager.add(deleteWorkflowProcessAction);
manager.add(defaultworkflowTransformeraction);
break;
case TreeObject.JOB:
manager.add(deleteJobAction);
manager.add(defaultjobtransformeraction);
break;
case TreeObject.JOB_REGISTRY:
manager.add(importjobaction);
break;
case TreeObject._ACTION_:
manager.add((Action)xobject.getWsObject());
break;
case TreeObject.SUBSCRIPTION_ENGINE:
manager.add(browseViewAction);
break;
case TreeObject.CUSTOM_TYPE:
case TreeObject.CUSTOM_TYPES_RESOURCE:
manager.add(uploadCustomTypeAction);
break;
case TreeObject.SERVICE_CONFIGURATION:
case TreeObject.RESOURCES:
case TreeObject.DATA_MODEL_RESOURCE:
case TreeObject.DATA_MODEL_TYPES_RESOURCE:
case TreeObject.PICTURES_RESOURCE:
break;
case TreeObject.DATA_CLUSTER:
if (xobject.isXObject()) {
manager.add(browseViewAction);
}
case TreeObject.ROLE:
case TreeObject.VIEW:
default :
if (xobject.getType() != TreeObject.CATEGORY_FOLDER) {
manager.add(exportAction);
manager.add(importAction);
}
int type=LocalTreeObjectRepository.getInstance().receiveUnCertainTreeObjectType(xobject);
if (!LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) && type != TreeObject.ROLE) {
if (xobject.getType() != TreeObject.RESOURCES && xobject.getType() != TreeObject.DATA_MODEL_RESOURCE && xobject.getType() != TreeObject.DATA_MODEL_TYPES_RESOURCE && xobject.getType() != TreeObject.CUSTOM_TYPES_RESOURCE && xobject.getType() != TreeObject.PICTURES_RESOURCE) manager.add(newXObjectAction);
}
 else if (type == TreeObject.ROLE && (xobject.getType() == TreeObject.CATEGORY_FOLDER || xobject instanceof TreeParent)) {
manager.add(newUserActon);
}
if (Util.hasUniverse(xobject)) manager.add(browseRevisionAction);
if (Util.hasTags(xobject)) manager.add(versionAction);
if (xobject.isXObject() && !XSystemObjects.isExist(xobject.getType(),xobject.getDisplayName())) {
manager.add(editXObjectAction);
manager.add(deleteXObjectAction);
manager.add(copyAction);
}
 else if (LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) == false) {
manager.add(newCategoryAction);
}
if (!WorkbenchClipboard.getWorkbenchClipboard().isEmpty()) {
TreeObject remoteObj=(TreeObject)((IStructuredSelection)viewer.getSelection()).getFirstElement();
((PasteXObjectAction)pasteAction).setXtentisPort(remoteObj);
((PasteXObjectAction)pasteAction).setParent(remoteObj instanceof TreeParent ? (TreeParent)remoteObj : remoteObj.getParent());
manager.add(pasteAction);
}
}
}
manager.add(new Separator());
drillDownAdapter.addNavigationActions(manager);
manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.8980982117513483
149023,"public void addAnnotationForXSDElementDeclaration(XSDElementDeclaration fromElem,XSDElementDeclaration toElem){
  if (fromElem.getAnnotation() != null) {
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure(toElem);
    addAnnotion(struc,fromElem.getAnnotation());
  }
  if (fromElem.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeContent fromcomplexType=((XSDComplexTypeDefinition)fromElem.getTypeDefinition()).getContent();
    if (toElem.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
      XSDComplexTypeContent tocomplexType=((XSDComplexTypeDefinition)toElem.getTypeDefinition()).getContent();
      if (fromcomplexType instanceof XSDParticle) {
        XSDParticle fromxsdParticle=(XSDParticle)fromcomplexType;
        XSDParticle toxsdParticle=(XSDParticle)tocomplexType;
        if (((XSDParticle)fromxsdParticle).getTerm() instanceof XSDModelGroup) {
          XSDModelGroup frommodelGroup=((XSDModelGroup)fromxsdParticle.getTerm());
          XSDModelGroup tomodelGroup=((XSDModelGroup)toxsdParticle.getTerm());
          EList fromlist=frommodelGroup.getContents();
          EList tolist=tomodelGroup.getContents();
          Iterator toIt=tolist.iterator();
          for (          XSDParticle fromel : (XSDParticle[])fromlist.toArray(new XSDParticle[fromlist.size()])) {
            XSDParticle toel=(XSDParticle)toIt.next();
            XSDTerm totm=toel.getTerm();
            XSDTerm fromtm=fromel.getTerm();
            if (fromtm instanceof XSDElementDeclaration) {
              XSDAnnotation fromannotation=((XSDElementDeclaration)fromtm).getAnnotation();
              if (fromannotation != null) {
                XSDAnnotationsStructure struc=new XSDAnnotationsStructure(totm);
                if (((XSDElementDeclaration)totm).getType() != null) {
                  addAnnotion(struc,fromannotation);
                }
 else {
                  MessageDialog.openInformation(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + fromElem.getName() + ""String_Node_Str"");
                  return;
                }
              }
              if (((XSDElementDeclaration)totm).getType() != null && this.typeList.containsKey(((XSDElementDeclaration)totm).getType().getName()))               this.copyTypeSet.add(this.typeList.get(((XSDElementDeclaration)totm).getType().getName()));
              addAnnotationForXSDElementDeclaration((XSDElementDeclaration)fromtm,(XSDElementDeclaration)totm);
            }
          }
        }
      }
    }
  }
}","public void addAnnotationForXSDElementDeclaration(XSDElementDeclaration fromElem,XSDElementDeclaration toElem){
  if (fromElem.getAnnotation() != null) {
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure(toElem);
    addAnnotion(struc,fromElem.getAnnotation());
  }
  if (fromElem.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeContent fromcomplexType=((XSDComplexTypeDefinition)fromElem.getTypeDefinition()).getContent();
    if (this.typeList.containsKey(toElem.getTypeDefinition().getName()))     this.copyTypeSet.add(this.typeList.get(toElem.getTypeDefinition().getName()));
    if (toElem.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
      XSDComplexTypeContent tocomplexType=((XSDComplexTypeDefinition)toElem.getTypeDefinition()).getContent();
      if (fromcomplexType instanceof XSDParticle) {
        XSDParticle fromxsdParticle=(XSDParticle)fromcomplexType;
        XSDParticle toxsdParticle=(XSDParticle)tocomplexType;
        if (((XSDParticle)fromxsdParticle).getTerm() instanceof XSDModelGroup) {
          XSDModelGroup frommodelGroup=((XSDModelGroup)fromxsdParticle.getTerm());
          XSDModelGroup tomodelGroup=((XSDModelGroup)toxsdParticle.getTerm());
          EList fromlist=frommodelGroup.getContents();
          EList tolist=tomodelGroup.getContents();
          Iterator toIt=tolist.iterator();
          for (          XSDParticle fromel : (XSDParticle[])fromlist.toArray(new XSDParticle[fromlist.size()])) {
            XSDParticle toel=(XSDParticle)toIt.next();
            XSDTerm totm=toel.getTerm();
            XSDTerm fromtm=fromel.getTerm();
            if (fromtm instanceof XSDElementDeclaration) {
              XSDAnnotation fromannotation=((XSDElementDeclaration)fromtm).getAnnotation();
              if (fromannotation != null) {
                XSDAnnotationsStructure struc=new XSDAnnotationsStructure(totm);
                if (((XSDElementDeclaration)totm).getType() != null) {
                  addAnnotion(struc,fromannotation);
                }
 else {
                  MessageDialog.openInformation(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + fromElem.getName() + ""String_Node_Str"");
                  return;
                }
              }
              if (((XSDElementDeclaration)totm).getType() != null && this.typeList.containsKey(((XSDElementDeclaration)totm).getType().getName()))               this.copyTypeSet.add(this.typeList.get(((XSDElementDeclaration)totm).getType().getName()));
              addAnnotationForXSDElementDeclaration((XSDElementDeclaration)fromtm,(XSDElementDeclaration)totm);
            }
          }
        }
      }
    }
  }
}",0.9701720841300192
149024,"protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(new XSDNewConceptAction(this));
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    if (pasteConceptAction.checkInPasteType())     manager.add(pasteConceptAction);
    return;
  }
  Object[] selectedObjs=selection.toArray();
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration && selectedObjs.length == 1) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=Util.checkConcept(decl);
    if (decl.getTargetNamespace() == null && !Util.IsAImporedElement(decl,xsdSchema)) {
      if (isConcept) {
        manager.add(editConceptAction);
        manager.add(deleteConceptAction);
        manager.add(newBrowseItemAction);
      }
 else {
        manager.add(editElementAction);
        manager.add(deleteElementAction);
      }
      manager.add(new Separator());
      manager.add(new XSDNewConceptAction(this));
      manager.add(newElementAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      if (((XSDElementDeclaration)obj).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
        manager.add(setFacetMsgAction);
      }
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
    }
 else {
      if (isConcept) {
        manager.add(newBrowseItemAction);
      }
      manager.add(new XSDNewConceptAction(this));
      manager.add(newElementAction);
    }
    if (decl.getTargetNamespace() == null && !Util.IsAImporedElement(decl,xsdSchema) && !Util.IsAImporedElement(decl.getTypeDefinition(),xsdSchema))     setAnnotationActions2(manager);
  }
  if (obj instanceof XSDModelGroup && !Util.IsAImporedElement((XSDModelGroup)obj,xsdSchema)) {
    manager.add(changeSubElementGroupAction);
  }
  if (obj instanceof XSDParticle && selectedObjs.length == 1) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      if (term instanceof XSDElementDeclaration) {
        if (!Util.IsAImporedElement((XSDParticle)obj,xsdSchema)) {
          manager.add(editParticleAction);
          manager.add(newParticleFromParticleAction);
          if (term instanceof XSDModelGroup) {
            manager.add(newParticleFromTypeAction);
            manager.add(newGroupFromTypeAction);
          }
          manager.add(deleteParticleAction);
          manager.add(new Separator());
          manager.add(changeToComplexTypeAction);
          manager.add(changeToSimpleTypeAction);
          manager.add(new Separator());
          if (term instanceof XSDElementDeclaration) {
            XSDTypeDefinition type=((XSDElementDeclaration)term).getTypeDefinition();
            if (!Util.IsAImporedElement(type,xsdSchema))             setAnnotationActions(manager);
            if (((XSDElementDeclaration)term).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
              manager.add(setFacetMsgAction);
            }
            manager.add(new Separator());
            manager.add(getXPathAction);
          }
        }
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition && selectedObjs.length == 1 && ((XSDComplexTypeDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDParticle)obj,xsdSchema)) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition && selectedObjs.length == 1 && ((XSDIdentityConstraintDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDIdentityConstraintDefinition)obj,xsdSchema)) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition && selectedObjs.length == 1 && ((XSDXPathDefinition)obj).getSchema().getTargetNamespace() == null && !Util.IsAImporedElement((XSDXPathDefinition)obj,xsdSchema)) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition && selectedObjs.length == 1 && ((XSDSimpleTypeDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDSimpleTypeDefinition)obj,xsdSchema)) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation && selectedObjs.length == 1 && ((XSDAnnotation)obj).getSchema().getTargetNamespace() == null) {
    if (!Util.IsAImporedElement((XSDAnnotation)obj,xsdSchema)) {
      setAnnotationActions(manager);
    }
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInDeletableType(selectedObjs)) {
    deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.outPutDeleteActions() != null) {
    manager.add(deleteConceptWrapAction.outPutDeleteActions());
    if (deleteConceptWrapAction.checkOutAllConcept(selectedObjs))     manager.add(newBrowseItemAction);
  }
  if (copyConceptAction.checkInCopyType(selectedObjs)) {
    manager.add(copyConceptAction);
  }
  if (pasteConceptAction.checkInPasteType())   manager.add(pasteConceptAction);
  if (selectedObjs.length > 1 && setAnnotationWrapWriteAction.checkInWriteType(selectedObjs)) {
    manager.add(new Separator());
    manager.add(setAnnotationWrapWriteAction);
    manager.add(setAnnotationWrapHiddenAction);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(new XSDNewConceptAction(this));
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    if (pasteConceptAction.checkInPasteType()) {
      manager.add(new Separator());
      manager.add(pasteConceptAction);
    }
    return;
  }
  Object[] selectedObjs=selection.toArray();
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration && selectedObjs.length == 1) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=Util.checkConcept(decl);
    if (decl.getTargetNamespace() == null && !Util.IsAImporedElement(decl,xsdSchema)) {
      if (isConcept) {
        manager.add(editConceptAction);
        manager.add(deleteConceptAction);
        manager.add(newBrowseItemAction);
      }
 else {
        manager.add(editElementAction);
        manager.add(deleteElementAction);
      }
      if (copyConceptAction.checkInCopyType(selectedObjs)) {
        manager.add(new Separator());
        manager.add(copyConceptAction);
      }
      if (pasteConceptAction.checkInPasteType())       manager.add(pasteConceptAction);
      manager.add(new Separator());
      manager.add(new XSDNewConceptAction(this));
      manager.add(newElementAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      if (((XSDElementDeclaration)obj).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
        manager.add(setFacetMsgAction);
      }
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
    }
 else {
      if (isConcept) {
        manager.add(newBrowseItemAction);
      }
      manager.add(new XSDNewConceptAction(this));
      manager.add(newElementAction);
    }
    if (decl.getTargetNamespace() == null && !Util.IsAImporedElement(decl,xsdSchema) && !Util.IsAImporedElement(decl.getTypeDefinition(),xsdSchema))     setAnnotationActions2(manager);
  }
  if (obj instanceof XSDModelGroup && !Util.IsAImporedElement((XSDModelGroup)obj,xsdSchema)) {
    manager.add(changeSubElementGroupAction);
  }
  if (obj instanceof XSDParticle && selectedObjs.length == 1) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      if (term instanceof XSDElementDeclaration) {
        if (!Util.IsAImporedElement((XSDParticle)obj,xsdSchema)) {
          manager.add(editParticleAction);
          manager.add(newParticleFromParticleAction);
          if (term instanceof XSDModelGroup) {
            manager.add(newParticleFromTypeAction);
            manager.add(newGroupFromTypeAction);
          }
          manager.add(deleteParticleAction);
          manager.add(new Separator());
          manager.add(changeToComplexTypeAction);
          manager.add(changeToSimpleTypeAction);
          manager.add(new Separator());
          if (term instanceof XSDElementDeclaration) {
            XSDTypeDefinition type=((XSDElementDeclaration)term).getTypeDefinition();
            if (!Util.IsAImporedElement(type,xsdSchema))             setAnnotationActions(manager);
            if (((XSDElementDeclaration)term).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
              manager.add(setFacetMsgAction);
            }
            manager.add(new Separator());
            manager.add(getXPathAction);
          }
        }
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition && selectedObjs.length == 1 && ((XSDComplexTypeDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDParticle)obj,xsdSchema)) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition && selectedObjs.length == 1 && ((XSDIdentityConstraintDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDIdentityConstraintDefinition)obj,xsdSchema)) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition && selectedObjs.length == 1 && ((XSDXPathDefinition)obj).getSchema().getTargetNamespace() == null && !Util.IsAImporedElement((XSDXPathDefinition)obj,xsdSchema)) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition && selectedObjs.length == 1 && ((XSDSimpleTypeDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDSimpleTypeDefinition)obj,xsdSchema)) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation && selectedObjs.length == 1 && ((XSDAnnotation)obj).getSchema().getTargetNamespace() == null) {
    if (!Util.IsAImporedElement((XSDAnnotation)obj,xsdSchema)) {
      setAnnotationActions(manager);
    }
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInDeletableType(selectedObjs)) {
    deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.outPutDeleteActions() != null) {
    manager.add(deleteConceptWrapAction.outPutDeleteActions());
    if (deleteConceptWrapAction.checkOutAllConcept(selectedObjs))     manager.add(newBrowseItemAction);
    if (copyConceptAction.checkInCopyType(selectedObjs)) {
      manager.add(new Separator());
      manager.add(copyConceptAction);
    }
    if (pasteConceptAction.checkInPasteType())     manager.add(pasteConceptAction);
  }
  if (selectedObjs.length > 1 && setAnnotationWrapWriteAction.checkInWriteType(selectedObjs)) {
    manager.add(new Separator());
    manager.add(setAnnotationWrapWriteAction);
    manager.add(setAnnotationWrapHiddenAction);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.9747732642329092
149025,"public boolean checkInCopyType(Object[] selectedObjs){
  for (  Object obj : selectedObjs) {
    if (obj instanceof XSDElementDeclaration)     continue;
 else     return false;
  }
  return true;
}","public static boolean checkInCopyType(Object[] selectedObjs){
  for (  Object obj : selectedObjs) {
    if (obj instanceof XSDElementDeclaration)     continue;
 else     return false;
  }
  return true;
}",0.9825436408977556
149026,"public XSDCopyConceptAction(DataModelMainPage page){
  super();
  this.page=page;
  setImageDescriptor(ImageCache.getImage(EImage.COPY.getPath()));
  setText(""String_Node_Str"");
  setToolTipText(""String_Node_Str"");
}","public XSDCopyConceptAction(DataModelMainPage page,boolean multi){
  super();
  if (multi)   displayName=""String_Node_Str"";
  this.page=page;
  setImageDescriptor(ImageCache.getImage(EImage.COPY.getPath()));
  setText(displayName);
  setToolTipText(displayName);
}",0.7583333333333333
149027,"public boolean checkInPasteType(){
  if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() <= 0)   return false;
  return true;
}","public boolean checkInPasteType(){
  if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() <= 0)   return false;
  conceptList=WorkbenchClipboard.getWorkbenchClipboard().getConcepts();
  int t=0;
  for (  XSDElementDeclaration ele : conceptList) {
    if (conceptList.get(t).getSchema() != null) {
      List<String> concepts=Util.getConcepts(conceptList.get(t).getSchema());
      if (concepts.contains(ele.getName()))       return true;
    }
    t++;
  }
  return false;
}",0.4113924050632911
149028,"public XSDPasteConceptAction(DataModelMainPage page){
  super(page);
  this.page=page;
  setImageDescriptor(ImageCache.getImage(EImage.PASTE.getPath()));
  setText(""String_Node_Str"");
  setToolTipText(""String_Node_Str"");
}","public XSDPasteConceptAction(DataModelMainPage page,boolean multi){
  super(page);
  this.page=page;
  if (multi)   displayName=""String_Node_Str"";
  setImageDescriptor(ImageCache.getImage(EImage.PASTE.getPath()));
  setText(displayName);
  setToolTipText(""String_Node_Str"");
}",0.8232931726907631
149029,"public IStatus doAction(){
  try {
    conceptList=WorkbenchClipboard.getWorkbenchClipboard().getConcepts();
    XSDFactory factory=XSDFactory.eINSTANCE;
    if (!conceptList.isEmpty()) {
      typeList=Util.getTypeDefinition(conceptList.get(0).getSchema());
      for (Iterator it=conceptList.iterator(); it.hasNext(); ) {
        Object concept=it.next();
        if (concept instanceof XSDElementDeclaration) {
          XSDElementDeclaration new_copy_concept=factory.createXSDElementDeclaration();
          ;
          XSDElementDeclaration copy_concept=(XSDElementDeclaration)concept;
          new_copy_concept=(XSDElementDeclaration)copy_concept.cloneConcreteComponent(true,false);
          InputDialog id=new InputDialog(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + copy_concept.getName(),new IInputValidator(){
            public String isValid(            String newText){
              if ((newText == null) || ""String_Node_Str"".equals(newText))               return ""String_Node_Str"";
              EList list=schema.getElementDeclarations();
              for (Iterator iter=list.iterator(); iter.hasNext(); ) {
                XSDElementDeclaration d=(XSDElementDeclaration)iter.next();
                if (d.getName().equals(newText))                 return ""String_Node_Str"";
              }
              return null;
            }
          }
);
          id.setBlockOnOpen(true);
          int ret=id.open();
          if (ret == Window.CANCEL) {
            return Status.CANCEL_STATUS;
          }
          new_copy_concept.setName(id.getValue());
          for (int i=0; i < new_copy_concept.getIdentityConstraintDefinitions().size(); i++) {
            String name=new_copy_concept.getIdentityConstraintDefinitions().get(i).getName().replaceAll(copy_concept.getName(),new_copy_concept.getName());
            new_copy_concept.getIdentityConstraintDefinitions().get(i).setName(name);
          }
          new_copy_concept.updateElement();
          schema.getContents().add(new_copy_concept);
          addAnnotationForXSDElementDeclaration(copy_concept,new_copy_concept);
        }
      }
      HashMap<String,XSDTypeDefinition> typeDef=Util.getTypeDefinition(schema);
      for (      XSDTypeDefinition type : copyTypeSet) {
        if (typeDef.containsKey(type.getName()))         continue;
        XSDTypeDefinition typedefinitionClone=null;
        if (type instanceof XSDComplexTypeDefinition) {
          typedefinitionClone=factory.createXSDComplexTypeDefinition();
          typedefinitionClone=(XSDComplexTypeDefinition)type.cloneConcreteComponent(true,false);
          schema.getContents().add((XSDComplexTypeDefinition)typedefinitionClone);
          addAnnotationForComplexType((XSDComplexTypeDefinition)type,(XSDComplexTypeDefinition)typedefinitionClone);
        }
 else         if (type instanceof XSDSimpleTypeDefinition) {
          schema.getContents().add((XSDSimpleTypeDefinition)type.cloneConcreteComponent(true,false));
        }
      }
      schema.getElement();
      WSDataModel wsObject=(WSDataModel)(page.getXObject().getWsObject());
      wsObject.getXsdSchema();
      page.markDirty();
      page.refresh();
      getOperationHistory();
      WorkbenchClipboard.getWorkbenchClipboard().conceptsReset();
      typeList.clear();
      return Status.OK_STATUS;
    }
    return Status.CANCEL_STATUS;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    conceptList=WorkbenchClipboard.getWorkbenchClipboard().getConcepts();
    XSDFactory factory=XSDFactory.eINSTANCE;
    if (!conceptList.isEmpty()) {
      List<String> concepts=new ArrayList<String>();
      int index=0;
      for (Iterator it=conceptList.iterator(); it.hasNext(); ) {
        if (conceptList.get(index).getSchema() != null) {
          concepts=Util.getConcepts(conceptList.get(index).getSchema());
          typeList=Util.getTypeDefinition(conceptList.get(index).getSchema());
        }
        index++;
        Object concept=it.next();
        if (concept instanceof XSDElementDeclaration) {
          if (concepts.contains(((XSDElementDeclaration)concept).getName())) {
            XSDElementDeclaration copy_concept=(XSDElementDeclaration)concept;
            XSDElementDeclaration new_copy_concept=factory.createXSDElementDeclaration();
            ;
            new_copy_concept=(XSDElementDeclaration)copy_concept.cloneConcreteComponent(true,false);
            InputDialog id=new InputDialog(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + copy_concept.getName(),new IInputValidator(){
              public String isValid(              String newText){
                if ((newText == null) || ""String_Node_Str"".equals(newText))                 return ""String_Node_Str"";
                EList list=schema.getElementDeclarations();
                for (Iterator iter=list.iterator(); iter.hasNext(); ) {
                  XSDElementDeclaration d=(XSDElementDeclaration)iter.next();
                  if (d.getName().equals(newText))                   return ""String_Node_Str"";
                }
                return null;
              }
            }
);
            id.setBlockOnOpen(true);
            int ret=id.open();
            if (ret == Window.CANCEL) {
              return Status.CANCEL_STATUS;
            }
            new_copy_concept.setName(id.getValue());
            for (int i=0; i < new_copy_concept.getIdentityConstraintDefinitions().size(); i++) {
              String name=new_copy_concept.getIdentityConstraintDefinitions().get(i).getName().replaceAll(copy_concept.getName(),new_copy_concept.getName());
              new_copy_concept.getIdentityConstraintDefinitions().get(i).setName(name);
            }
            new_copy_concept.updateElement();
            schema.getContents().add(new_copy_concept);
            addAnnotationForXSDElementDeclaration(copy_concept,new_copy_concept);
          }
        }
      }
      HashMap<String,XSDTypeDefinition> typeDef=Util.getTypeDefinition(schema);
      for (      XSDTypeDefinition type : copyTypeSet) {
        if (typeDef.containsKey(type.getName()))         continue;
        XSDTypeDefinition typedefinitionClone=null;
        if (type instanceof XSDComplexTypeDefinition) {
          typedefinitionClone=factory.createXSDComplexTypeDefinition();
          typedefinitionClone=(XSDComplexTypeDefinition)type.cloneConcreteComponent(true,false);
          schema.getContents().add((XSDComplexTypeDefinition)typedefinitionClone);
          addAnnotationForComplexType((XSDComplexTypeDefinition)type,(XSDComplexTypeDefinition)typedefinitionClone);
        }
 else         if (type instanceof XSDSimpleTypeDefinition) {
          schema.getContents().add((XSDSimpleTypeDefinition)type.cloneConcreteComponent(true,false));
        }
      }
      schema.getElement();
      page.markDirty();
      page.refresh();
      getOperationHistory();
      WorkbenchClipboard.getWorkbenchClipboard().conceptsReset();
      typeList.clear();
      return Status.OK_STATUS;
    }
    return Status.CANCEL_STATUS;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
  return Status.OK_STATUS;
}",0.88865124983291
149030,"protected void createActions(){
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.newBrowseItemAction=new XSDNewBrowseItemViewAction(this);
  this.deleteConceptWrapAction=new XSDDeleteConceptWrapAction(this);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this,false);
  this.changeSubElementGroupAction=new XSDChangeToComplexTypeAction(this,true);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this,dataModelName);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this,dataModelName);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationWrapWriteAction=new XSDSetAnnotationWrapWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this,dataModelName);
  this.setAnnotationWrapHiddenAction=new XSDSetAnnotationWrapHiddenAction(this,dataModelName);
  this.copyConceptAction=new XSDCopyConceptAction(this);
  this.pasteConceptAction=new XSDPasteConceptAction(this);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this,dataModelName);
  this.setAnnotationSchematronAction=new XSDSetAnnotationSchematronAction(this,dataModelName);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
  this.deleteTypeDefinition=new XSDDeleteTypeDefinition(this);
  this.newComplexTypeAction=new XSDNewComplexTypeDefinition(this);
  this.newSimpleTypeAction=new XSDNewSimpleTypeDefinition(this);
  this.editComplexTypeAction=new XSDEditComplexTypeAction(this);
  this.setFacetMsgAction=new XSDSetFacetMessageAction(this);
  deleteConceptWrapAction.regisDelAction(XSDElementDeclarationImpl.class,deleteConceptAction);
  deleteConceptWrapAction.regisDelAction(XSDParticleImpl.class,deleteParticleAction);
  deleteConceptWrapAction.regisDelAction(XSDIdentityConstraintDefinitionImpl.class,deleteIdentityConstraintAction);
  deleteConceptWrapAction.regisDelAction(XSDXPathDefinitionImpl.class,deleteXPathAction);
  deleteConceptWrapAction.regisDelAction(null,deleteElementAction);
  deleteConceptWrapAction.regisDelAction(XSDComplexTypeDefinitionImpl.class,deleteTypeDefinition);
  deleteConceptWrapAction.regisDelAction(XSDSimpleTypeDefinitionImpl.class,deleteTypeDefinition);
}","protected void createActions(){
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.newBrowseItemAction=new XSDNewBrowseItemViewAction(this);
  this.deleteConceptWrapAction=new XSDDeleteConceptWrapAction(this);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this,false);
  this.changeSubElementGroupAction=new XSDChangeToComplexTypeAction(this,true);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this,dataModelName);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this,dataModelName);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationWrapWriteAction=new XSDSetAnnotationWrapWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this,dataModelName);
  this.setAnnotationWrapHiddenAction=new XSDSetAnnotationWrapHiddenAction(this,dataModelName);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this,dataModelName);
  this.setAnnotationSchematronAction=new XSDSetAnnotationSchematronAction(this,dataModelName);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
  this.deleteTypeDefinition=new XSDDeleteTypeDefinition(this);
  this.newComplexTypeAction=new XSDNewComplexTypeDefinition(this);
  this.newSimpleTypeAction=new XSDNewSimpleTypeDefinition(this);
  this.editComplexTypeAction=new XSDEditComplexTypeAction(this);
  this.setFacetMsgAction=new XSDSetFacetMessageAction(this);
  deleteConceptWrapAction.regisDelAction(XSDElementDeclarationImpl.class,deleteConceptAction);
  deleteConceptWrapAction.regisDelAction(XSDParticleImpl.class,deleteParticleAction);
  deleteConceptWrapAction.regisDelAction(XSDIdentityConstraintDefinitionImpl.class,deleteIdentityConstraintAction);
  deleteConceptWrapAction.regisDelAction(XSDXPathDefinitionImpl.class,deleteXPathAction);
  deleteConceptWrapAction.regisDelAction(null,deleteElementAction);
  deleteConceptWrapAction.regisDelAction(XSDComplexTypeDefinitionImpl.class,deleteTypeDefinition);
  deleteConceptWrapAction.regisDelAction(XSDSimpleTypeDefinitionImpl.class,deleteTypeDefinition);
}",0.9843454790823212
149031,"protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(new XSDNewConceptAction(this));
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    if (pasteConceptAction.checkInPasteType()) {
      manager.add(new Separator());
      manager.add(pasteConceptAction);
    }
    return;
  }
  Object[] selectedObjs=selection.toArray();
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration && selectedObjs.length == 1) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=Util.checkConcept(decl);
    if (decl.getTargetNamespace() == null && !Util.IsAImporedElement(decl,xsdSchema)) {
      if (isConcept) {
        manager.add(editConceptAction);
        manager.add(deleteConceptAction);
        manager.add(newBrowseItemAction);
      }
 else {
        manager.add(editElementAction);
        manager.add(deleteElementAction);
      }
      if (copyConceptAction.checkInCopyType(selectedObjs)) {
        manager.add(new Separator());
        manager.add(copyConceptAction);
      }
      if (pasteConceptAction.checkInPasteType())       manager.add(pasteConceptAction);
      manager.add(new Separator());
      manager.add(new XSDNewConceptAction(this));
      manager.add(newElementAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      if (((XSDElementDeclaration)obj).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
        manager.add(setFacetMsgAction);
      }
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
    }
 else {
      if (isConcept) {
        manager.add(newBrowseItemAction);
      }
      manager.add(new XSDNewConceptAction(this));
      manager.add(newElementAction);
    }
    if (decl.getTargetNamespace() == null && !Util.IsAImporedElement(decl,xsdSchema) && !Util.IsAImporedElement(decl.getTypeDefinition(),xsdSchema))     setAnnotationActions2(manager);
  }
  if (obj instanceof XSDModelGroup && !Util.IsAImporedElement((XSDModelGroup)obj,xsdSchema)) {
    manager.add(changeSubElementGroupAction);
  }
  if (obj instanceof XSDParticle && selectedObjs.length == 1) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      if (term instanceof XSDElementDeclaration) {
        if (!Util.IsAImporedElement((XSDParticle)obj,xsdSchema)) {
          manager.add(editParticleAction);
          manager.add(newParticleFromParticleAction);
          if (term instanceof XSDModelGroup) {
            manager.add(newParticleFromTypeAction);
            manager.add(newGroupFromTypeAction);
          }
          manager.add(deleteParticleAction);
          manager.add(new Separator());
          manager.add(changeToComplexTypeAction);
          manager.add(changeToSimpleTypeAction);
          manager.add(new Separator());
          if (term instanceof XSDElementDeclaration) {
            XSDTypeDefinition type=((XSDElementDeclaration)term).getTypeDefinition();
            if (!Util.IsAImporedElement(type,xsdSchema))             setAnnotationActions(manager);
            if (((XSDElementDeclaration)term).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
              manager.add(setFacetMsgAction);
            }
            manager.add(new Separator());
            manager.add(getXPathAction);
          }
        }
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition && selectedObjs.length == 1 && ((XSDComplexTypeDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDParticle)obj,xsdSchema)) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition && selectedObjs.length == 1 && ((XSDIdentityConstraintDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDIdentityConstraintDefinition)obj,xsdSchema)) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition && selectedObjs.length == 1 && ((XSDXPathDefinition)obj).getSchema().getTargetNamespace() == null && !Util.IsAImporedElement((XSDXPathDefinition)obj,xsdSchema)) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition && selectedObjs.length == 1 && ((XSDSimpleTypeDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDSimpleTypeDefinition)obj,xsdSchema)) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation && selectedObjs.length == 1 && ((XSDAnnotation)obj).getSchema().getTargetNamespace() == null) {
    if (!Util.IsAImporedElement((XSDAnnotation)obj,xsdSchema)) {
      setAnnotationActions(manager);
    }
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInDeletableType(selectedObjs)) {
    deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.outPutDeleteActions() != null) {
    manager.add(deleteConceptWrapAction.outPutDeleteActions());
    if (deleteConceptWrapAction.checkOutAllConcept(selectedObjs))     manager.add(newBrowseItemAction);
    if (copyConceptAction.checkInCopyType(selectedObjs)) {
      manager.add(new Separator());
      manager.add(copyConceptAction);
    }
    if (pasteConceptAction.checkInPasteType())     manager.add(pasteConceptAction);
  }
  if (selectedObjs.length > 1 && setAnnotationWrapWriteAction.checkInWriteType(selectedObjs)) {
    manager.add(new Separator());
    manager.add(setAnnotationWrapWriteAction);
    manager.add(setAnnotationWrapHiddenAction);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(new XSDNewConceptAction(this));
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    boolean isMulti=false;
    if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() > 1)     isMulti=true;
    XSDPasteConceptAction pasteConceptAction=new XSDPasteConceptAction(this,isMulti);
    if (pasteConceptAction.checkInPasteType()) {
      manager.add(new Separator());
      manager.add(pasteConceptAction);
    }
    return;
  }
  Object[] selectedObjs=selection.toArray();
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration && selectedObjs.length == 1) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=Util.checkConcept(decl);
    if (decl.getTargetNamespace() == null && !Util.IsAImporedElement(decl,xsdSchema)) {
      if (isConcept) {
        manager.add(editConceptAction);
        manager.add(deleteConceptAction);
        manager.add(newBrowseItemAction);
      }
 else {
        manager.add(editElementAction);
        manager.add(deleteElementAction);
      }
      XSDCopyConceptAction copyConceptAction=new XSDCopyConceptAction(this,false);
      if (copyConceptAction.checkInCopyType(selectedObjs)) {
        manager.add(new Separator());
        manager.add(copyConceptAction);
      }
      boolean isMulti=false;
      if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() > 1)       isMulti=true;
      XSDPasteConceptAction pasteConceptAction=new XSDPasteConceptAction(this,isMulti);
      if (pasteConceptAction.checkInPasteType())       manager.add(pasteConceptAction);
      manager.add(new Separator());
      manager.add(new XSDNewConceptAction(this));
      manager.add(newElementAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      if (((XSDElementDeclaration)obj).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
        manager.add(setFacetMsgAction);
      }
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
    }
 else {
      if (isConcept) {
        manager.add(newBrowseItemAction);
      }
      manager.add(new XSDNewConceptAction(this));
      manager.add(newElementAction);
    }
    if (decl.getTargetNamespace() == null && !Util.IsAImporedElement(decl,xsdSchema) && !Util.IsAImporedElement(decl.getTypeDefinition(),xsdSchema))     setAnnotationActions2(manager);
  }
  if (obj instanceof XSDModelGroup && !Util.IsAImporedElement((XSDModelGroup)obj,xsdSchema)) {
    manager.add(changeSubElementGroupAction);
  }
  if (obj instanceof XSDParticle && selectedObjs.length == 1) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard) && term.getSchema().getTargetNamespace() == null) {
      if (term instanceof XSDElementDeclaration) {
        if (!Util.IsAImporedElement((XSDElementDeclaration)term,xsdSchema)) {
          manager.add(editParticleAction);
          manager.add(newParticleFromParticleAction);
          if (term instanceof XSDModelGroup) {
            manager.add(newParticleFromTypeAction);
            manager.add(newGroupFromTypeAction);
          }
          manager.add(deleteParticleAction);
          manager.add(new Separator());
          manager.add(changeToComplexTypeAction);
          manager.add(changeToSimpleTypeAction);
          manager.add(new Separator());
          if (term instanceof XSDElementDeclaration) {
            XSDTypeDefinition type=((XSDElementDeclaration)term).getTypeDefinition();
            if (!Util.IsAImporedElement(type,xsdSchema))             setAnnotationActions(manager);
            if (((XSDElementDeclaration)term).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
              manager.add(setFacetMsgAction);
            }
            manager.add(new Separator());
            manager.add(getXPathAction);
          }
        }
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition && selectedObjs.length == 1 && ((XSDComplexTypeDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDParticle)obj,xsdSchema)) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition && selectedObjs.length == 1 && ((XSDIdentityConstraintDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDIdentityConstraintDefinition)obj,xsdSchema)) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition && selectedObjs.length == 1 && ((XSDXPathDefinition)obj).getSchema().getTargetNamespace() == null && !Util.IsAImporedElement((XSDXPathDefinition)obj,xsdSchema)) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition && selectedObjs.length == 1 && ((XSDSimpleTypeDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDSimpleTypeDefinition)obj,xsdSchema)) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation && selectedObjs.length == 1 && ((XSDAnnotation)obj).getSchema().getTargetNamespace() == null) {
    setAnnotationActions(manager);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInDeletableType(selectedObjs)) {
    deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.outPutDeleteActions() != null) {
    manager.add(deleteConceptWrapAction.outPutDeleteActions());
    if (deleteConceptWrapAction.checkOutAllConcept(selectedObjs))     manager.add(newBrowseItemAction);
    XSDCopyConceptAction copyConceptAction=new XSDCopyConceptAction(this,true);
    if (copyConceptAction.checkInCopyType(selectedObjs)) {
      manager.add(new Separator());
      manager.add(copyConceptAction);
    }
    boolean isMulti=false;
    if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() > 1)     isMulti=true;
    XSDPasteConceptAction pasteConceptAction=new XSDPasteConceptAction(this,isMulti);
    if (pasteConceptAction.checkInPasteType())     manager.add(pasteConceptAction);
  }
  if (selectedObjs.length > 1 && setAnnotationWrapWriteAction.checkInWriteType(selectedObjs)) {
    manager.add(new Separator());
    manager.add(setAnnotationWrapWriteAction);
    manager.add(setAnnotationWrapHiddenAction);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.9288826423049896
149032,"public SelectImportedModulesDialog(Shell parentShell,XSDSchema schema,TreeObject treeObj,String title){
  super(parentShell);
  this.shell=parentShell;
  this.treeObject=treeObj;
  this.title=title;
  this.xsdSchema=schema;
}","public SelectImportedModulesDialog(Shell parentShell,XSDSchema schema,TreeObject treeObj,String title){
  super(parentShell);
  this.shell=parentShell;
  this.treeObject=treeObj;
  this.title=title;
  this.xsdSchema=schema;
  String endpointIpAddress=treeObject.getEndpointIpAddress();
  if (endpointIpAddress != null && endpointIpAddress.length() > 0) {
    LOCAL_MDM_URL=endpointIpAddress + ""String_Node_Str"";
  }
}",0.7009345794392523
149033,"public IStatus doAction(){
  try {
    ((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXSDSchemaAsString();
    XSDElementDeclaration decl=xsdElem;
    if (decl == null) {
      ISelection selection=page.getTreeViewer().getSelection();
      decl=(XSDElementDeclaration)((IStructuredSelection)selection).getFirstElement();
    }
    Set<String> list=new HashSet<String>();
    Util.getForeingKeyInSchema(list,schema);
    if (list.contains(decl.getName())) {
      MessageDialog.openWarning(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + decl.getName() + ""String_Node_Str"");
      return Status.CANCEL_STATUS;
    }
    ArrayList<Object> objList=new ArrayList<Object>();
    IStructuredContentProvider provider=(IStructuredContentProvider)page.getTreeViewer().getContentProvider();
    Object[] objs=Util.getAllObject(page.getSite(),objList,provider);
    Util.deleteReference(decl,objs);
    XSDTypeDefinition current=decl.getTypeDefinition();
    schema.getContents().remove(decl);
    schema.update();
    xsdElem=null;
    page.refresh();
    page.markDirty();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    ((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXSDSchemaAsString();
    XSDElementDeclaration decl=xsdElem;
    if (decl == null) {
      ISelection selection=page.getTreeViewer().getSelection();
      decl=(XSDElementDeclaration)((IStructuredSelection)selection).getFirstElement();
    }
    page.getXObject().getParent();
    Set<String> list=new HashSet<String>();
    Util.getForeingKeyInDataModel(list,page.getXObject().getParent());
    if (list.contains(decl.getName())) {
      MessageDialog.openWarning(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + decl.getName() + ""String_Node_Str"");
      return Status.CANCEL_STATUS;
    }
    ArrayList<Object> objList=new ArrayList<Object>();
    IStructuredContentProvider provider=(IStructuredContentProvider)page.getTreeViewer().getContentProvider();
    Object[] objs=Util.getAllObject(page.getSite(),objList,provider);
    Util.deleteReference(decl,objs);
    XSDTypeDefinition current=decl.getTypeDefinition();
    schema.getContents().remove(decl);
    schema.update();
    xsdElem=null;
    page.refresh();
    page.markDirty();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.9690346083788708
149034,"public static void getforeignKeyOfElement(Set<String> list,XSDElementDeclaration element){
  if (element.getAnnotation() != null) {
    getForeignKeyofParcle(list,element.getAnnotation());
  }
  if (element.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeContent fromcomplexType=((XSDComplexTypeDefinition)element.getTypeDefinition()).getContent();
    if (fromcomplexType instanceof XSDParticle) {
      XSDParticle particle=(XSDParticle)fromcomplexType;
      if (((XSDParticle)particle).getTerm() instanceof XSDModelGroup) {
        XSDModelGroup modelGroup=((XSDModelGroup)particle.getTerm());
        EList fromlist=modelGroup.getContents();
        for (        XSDParticle el : (XSDParticle[])fromlist.toArray(new XSDParticle[fromlist.size()])) {
          XSDTerm term=el.getTerm();
          if (term instanceof XSDElementDeclaration) {
            XSDAnnotation annotation=((XSDElementDeclaration)term).getAnnotation();
            if (annotation != null) {
              getForeignKeyofParcle(list,annotation);
            }
            getforeignKeyOfElement(list,(XSDElementDeclaration)term);
          }
        }
      }
    }
  }
}","/** 
 * set the list with  foreign concept name of in the element
 * @author ymli
 * @param list
 * @param element
 */
public static void getforeignKeyOfElement(Set<String> list,XSDElementDeclaration element){
  if (element.getAnnotation() != null) {
    getForeignKeyofParcle(list,element.getAnnotation());
  }
  if (element.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeContent fromcomplexType=((XSDComplexTypeDefinition)element.getTypeDefinition()).getContent();
    if (fromcomplexType instanceof XSDParticle) {
      XSDParticle particle=(XSDParticle)fromcomplexType;
      if (((XSDParticle)particle).getTerm() instanceof XSDModelGroup) {
        XSDModelGroup modelGroup=((XSDModelGroup)particle.getTerm());
        EList fromlist=modelGroup.getContents();
        for (        XSDParticle el : (XSDParticle[])fromlist.toArray(new XSDParticle[fromlist.size()])) {
          XSDTerm term=el.getTerm();
          if (term instanceof XSDElementDeclaration) {
            XSDAnnotation annotation=((XSDElementDeclaration)term).getAnnotation();
            if (annotation != null) {
              getForeignKeyofParcle(list,annotation);
            }
            getforeignKeyOfElement(list,(XSDElementDeclaration)term);
          }
        }
      }
    }
  }
}",0.9518413597733713
149035,"public static Set<String> getForeingKeyInSchema(Set<String> list,XSDSchema schema){
  EList<XSDSchemaContent> contents=schema.getContents();
  for (  XSDSchemaContent content : contents) {
    if (content instanceof XSDElementDeclaration)     getforeignKeyOfElement(list,(XSDElementDeclaration)content);
  }
  return list;
}","/** 
 * set the list with foreign concept names in the schema
 * @author ymli
 * @param list
 * @param schema
 * @return
 */
public static Set<String> getForeingKeyInSchema(Set<String> list,XSDSchema schema){
  EList<XSDSchemaContent> contents=schema.getContents();
  for (  XSDSchemaContent content : contents) {
    if (content instanceof XSDElementDeclaration)     getforeignKeyOfElement(list,(XSDElementDeclaration)content);
  }
  return list;
}",0.8382923673997412
149036,"public void onMessage(Message msg){
  if (msg instanceof TextMessage) {
    try {
      TextMessage tm=(TextMessage)msg;
      Logger.getLogger(this.getClass()).info(""String_Node_Str"" + tm.getText());
      AutoCommitToSvnMsg msg1=AutoCommitToSvnMsg.unmarshal(tm.getText());
      Util.getVersioningSystemCtrlLocal().commitItem(new VersioningSystemPOJOPK(msg1.getVersionSystemPk()),msg1.getItemPk(),msg1.getComment());
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
}","public void onMessage(Message msg){
  TextMessage tm=null;
  if (msg instanceof TextMessage) {
    try {
      tm=(TextMessage)msg;
      Logger.getLogger(this.getClass()).info(""String_Node_Str"" + tm.getText());
      AutoCommitToSvnMsg msg1=AutoCommitToSvnMsg.unmarshal(tm.getText());
      Util.getVersioningSystemCtrlLocal().commitItem(new VersioningSystemPOJOPK(msg1.getVersionSystemPk()),msg1.getItemPk(),msg1.getComment());
    }
 catch (    Throwable t) {
      Logger.getLogger(this.getClass()).info(""String_Node_Str"");
      try {
        Util.getXmlServerCtrlLocal().putDocumentFromString(tm.getText(),tm.getJMSMessageID(),AutoCommitToSvnSendBean.FailedAutoCommitSvnMessage,null);
      }
 catch (      Exception e) {
      }
    }
  }
}",0.7469684721099434
149037,"/** 
 * Print a simple type definition for the document.
 * @param xsdSimpleTypeDefinition a simple type definition in the schema for schema.
 */
public String getSimpleTypeDefinition(XSDSimpleTypeDefinition xsdSimpleTypeDefinition){
  String s=""String_Node_Str"";
  if (xsdSimpleTypeDefinition == null) {
  }
 else   if (xsdSimpleTypeDefinition.getEffectiveEnumerationFacet() != null) {
    List value=xsdSimpleTypeDefinition.getEffectiveEnumerationFacet().getValue();
    if (value.size() > 1) {
      s+=""String_Node_Str"";
    }
    for (Iterator enumerators=value.iterator(); enumerators.hasNext(); ) {
      String enumerator=enumerators.next().toString();
      s+=enumerator;
      if (enumerators.hasNext()) {
        s+=""String_Node_Str"";
      }
    }
    if (value.size() > 1) {
      s+=""String_Node_Str"";
    }
  }
 else   if (xsdSimpleTypeDefinition.getElement() != null && xsdSimpleTypeDefinition.getElement().hasAttribute(XSDConstants.ID_ATTRIBUTE)) {
    s+=xsdSimpleTypeDefinition.getName();
  }
 else   if ((XSDVariety.UNION_LITERAL == xsdSimpleTypeDefinition.getVariety()) | (XSDVariety.LIST_LITERAL == xsdSimpleTypeDefinition.getVariety())) {
    s+=""String_Node_Str"";
    for (Iterator members=xsdSimpleTypeDefinition.getMemberTypeDefinitions().iterator(); members.hasNext(); ) {
      XSDSimpleTypeDefinition memberTypeDefinition=(XSDSimpleTypeDefinition)members.next();
      s+=getSimpleTypeDefinition(memberTypeDefinition);
      if (members.hasNext()) {
        s+=""String_Node_Str"";
      }
    }
    s+=""String_Node_Str"";
  }
 else   if ((XSDVariety.UNION_LITERAL == xsdSimpleTypeDefinition.getVariety()) | (XSDVariety.LIST_LITERAL == xsdSimpleTypeDefinition.getVariety())) {
    s+=""String_Node_Str"";
    s+=getSimpleTypeDefinition(xsdSimpleTypeDefinition.getItemTypeDefinition());
  }
 else   if (xsdSimpleTypeDefinition.getName() != null) {
    s+=xsdSimpleTypeDefinition.getName();
  }
 else   if (xsdSimpleTypeDefinition.getEffectivePatternFacet() != null) {
    s+=""String_Node_Str"";
  }
 else {
    s+=""String_Node_Str"";
  }
  String tail=xsdSimpleTypeDefinition.getTargetNamespace() == null ? ""String_Node_Str"" : ""String_Node_Str"" + xsdSimpleTypeDefinition.getTargetNamespace();
  return s + tail;
}","/** 
 * Print a simple type definition for the document.
 * @param xsdSimpleTypeDefinition a simple type definition in the schema for schema.
 */
public String getSimpleTypeDefinition(XSDSimpleTypeDefinition xsdSimpleTypeDefinition){
  String s=""String_Node_Str"";
  if (xsdSimpleTypeDefinition == null) {
  }
 else   if (xsdSimpleTypeDefinition.getEffectiveEnumerationFacet() != null) {
    s+=xsdSimpleTypeDefinition.getName();
  }
 else   if (xsdSimpleTypeDefinition.getElement() != null && xsdSimpleTypeDefinition.getElement().hasAttribute(XSDConstants.ID_ATTRIBUTE)) {
    s+=xsdSimpleTypeDefinition.getName();
  }
 else   if ((XSDVariety.UNION_LITERAL == xsdSimpleTypeDefinition.getVariety()) | (XSDVariety.LIST_LITERAL == xsdSimpleTypeDefinition.getVariety())) {
    s+=""String_Node_Str"";
    for (Iterator members=xsdSimpleTypeDefinition.getMemberTypeDefinitions().iterator(); members.hasNext(); ) {
      XSDSimpleTypeDefinition memberTypeDefinition=(XSDSimpleTypeDefinition)members.next();
      s+=getSimpleTypeDefinition(memberTypeDefinition);
      if (members.hasNext()) {
        s+=""String_Node_Str"";
      }
    }
    s+=""String_Node_Str"";
  }
 else   if ((XSDVariety.UNION_LITERAL == xsdSimpleTypeDefinition.getVariety()) | (XSDVariety.LIST_LITERAL == xsdSimpleTypeDefinition.getVariety())) {
    s+=""String_Node_Str"";
    s+=getSimpleTypeDefinition(xsdSimpleTypeDefinition.getItemTypeDefinition());
  }
 else   if (xsdSimpleTypeDefinition.getName() != null) {
    s+=xsdSimpleTypeDefinition.getName();
  }
 else   if (xsdSimpleTypeDefinition.getEffectivePatternFacet() != null) {
    s+=""String_Node_Str"";
  }
 else {
    s+=""String_Node_Str"";
  }
  String tail=xsdSimpleTypeDefinition.getTargetNamespace() == null ? ""String_Node_Str"" : ""String_Node_Str"" + xsdSimpleTypeDefinition.getTargetNamespace();
  return s + tail;
}",0.887144259077527
149038,"/** 
 * Print a simple type definition for the document.
 * @param xsdSimpleTypeDefinition a simple type definition in the schema for schema.
 */
public String getSimpleTypeDefinition(XSDSimpleTypeDefinition xsdSimpleTypeDefinition){
  String s=""String_Node_Str"";
  if (xsdSimpleTypeDefinition == null) {
  }
 else   if (xsdSimpleTypeDefinition.getEffectiveEnumerationFacet() != null) {
    List value=xsdSimpleTypeDefinition.getEffectiveEnumerationFacet().getValue();
    if (value.size() > 1) {
      s+=""String_Node_Str"";
    }
    for (Iterator enumerators=value.iterator(); enumerators.hasNext(); ) {
      String enumerator=enumerators.next().toString();
      s+=enumerator;
      if (enumerators.hasNext()) {
        s+=""String_Node_Str"";
      }
    }
    if (value.size() > 1) {
      s+=""String_Node_Str"";
    }
  }
 else   if (xsdSimpleTypeDefinition.getElement() != null && xsdSimpleTypeDefinition.getElement().hasAttribute(XSDConstants.ID_ATTRIBUTE)) {
    s+=xsdSimpleTypeDefinition.getName();
  }
 else   if ((XSDVariety.UNION_LITERAL == xsdSimpleTypeDefinition.getVariety()) | (XSDVariety.LIST_LITERAL == xsdSimpleTypeDefinition.getVariety())) {
    s+=""String_Node_Str"";
    for (Iterator members=xsdSimpleTypeDefinition.getMemberTypeDefinitions().iterator(); members.hasNext(); ) {
      XSDSimpleTypeDefinition memberTypeDefinition=(XSDSimpleTypeDefinition)members.next();
      s+=getSimpleTypeDefinition(memberTypeDefinition);
      if (members.hasNext()) {
        s+=""String_Node_Str"";
      }
    }
    s+=""String_Node_Str"";
  }
 else   if ((XSDVariety.UNION_LITERAL == xsdSimpleTypeDefinition.getVariety()) | (XSDVariety.LIST_LITERAL == xsdSimpleTypeDefinition.getVariety())) {
    s+=""String_Node_Str"";
    s+=getSimpleTypeDefinition(xsdSimpleTypeDefinition.getItemTypeDefinition());
  }
 else   if (xsdSimpleTypeDefinition.getName() != null) {
    s+=xsdSimpleTypeDefinition.getName();
  }
 else   if (xsdSimpleTypeDefinition.getEffectivePatternFacet() != null) {
    s+=""String_Node_Str"";
  }
 else {
    s+=""String_Node_Str"";
  }
  String tail=xsdSimpleTypeDefinition.getTargetNamespace() == null ? ""String_Node_Str"" : xsdSimpleTypeDefinition.getTargetNamespace();
  if (tail.equals(XSDConstants.SCHEMA_FOR_SCHEMA_URI_2001) || tail.equals(XSDConstants.SCHEMA_FOR_SCHEMA_URI_1999))   tail=""String_Node_Str"";
  return s + tail;
}","/** 
 * Print a simple type definition for the document.
 * @param xsdSimpleTypeDefinition a simple type definition in the schema for schema.
 */
public String getSimpleTypeDefinition(XSDSimpleTypeDefinition xsdSimpleTypeDefinition){
  String s=""String_Node_Str"";
  if (xsdSimpleTypeDefinition == null) {
  }
 else   if (xsdSimpleTypeDefinition.getEffectiveEnumerationFacet() != null) {
    s+=xsdSimpleTypeDefinition.getName();
  }
 else   if (xsdSimpleTypeDefinition.getElement() != null && xsdSimpleTypeDefinition.getElement().hasAttribute(XSDConstants.ID_ATTRIBUTE)) {
    s+=xsdSimpleTypeDefinition.getName();
  }
 else   if ((XSDVariety.UNION_LITERAL == xsdSimpleTypeDefinition.getVariety()) | (XSDVariety.LIST_LITERAL == xsdSimpleTypeDefinition.getVariety())) {
    s+=""String_Node_Str"";
    for (Iterator members=xsdSimpleTypeDefinition.getMemberTypeDefinitions().iterator(); members.hasNext(); ) {
      XSDSimpleTypeDefinition memberTypeDefinition=(XSDSimpleTypeDefinition)members.next();
      s+=getSimpleTypeDefinition(memberTypeDefinition);
      if (members.hasNext()) {
        s+=""String_Node_Str"";
      }
    }
    s+=""String_Node_Str"";
  }
 else   if ((XSDVariety.UNION_LITERAL == xsdSimpleTypeDefinition.getVariety()) | (XSDVariety.LIST_LITERAL == xsdSimpleTypeDefinition.getVariety())) {
    s+=""String_Node_Str"";
    s+=getSimpleTypeDefinition(xsdSimpleTypeDefinition.getItemTypeDefinition());
  }
 else   if (xsdSimpleTypeDefinition.getName() != null) {
    s+=xsdSimpleTypeDefinition.getName();
  }
 else   if (xsdSimpleTypeDefinition.getEffectivePatternFacet() != null) {
    s+=""String_Node_Str"";
  }
 else {
    s+=""String_Node_Str"";
  }
  String tail=xsdSimpleTypeDefinition.getTargetNamespace() == null ? ""String_Node_Str"" : xsdSimpleTypeDefinition.getTargetNamespace();
  if (tail.equals(XSDConstants.SCHEMA_FOR_SCHEMA_URI_2001) || tail.equals(XSDConstants.SCHEMA_FOR_SCHEMA_URI_1999))   tail=""String_Node_Str"";
  return s + tail;
}",0.8935185185185185
149039,"protected void pageChange(int newPageIndex){
  AFormPage page=(AFormPage)formPages.get(0);
  boolean isdirty=page.isDirty();
  super.pageChange(newPageIndex);
  if (xmlEditor != null)   xmlEditor.refresh();
  if (xmlEditor.isDirty())   page.refreshPage();
  linkDirty(page,isdirty);
}","protected void pageChange(int newPageIndex){
  AFormPage page=(AFormPage)formPages.get(0);
  boolean isdirty=page.isDirty();
  super.pageChange(newPageIndex);
  if (xmlEditor != null)   xmlEditor.refresh();
  if (xmlEditor.isDirty() || xmlEditor.isModified())   page.refreshPage();
  linkDirty(page,isdirty);
}",0.9562289562289562
149040,"@Override public void doSave(IProgressMonitor progressMonitor){
  WSDataModel wsObject=(WSDataModel)(xobject.getWsObject());
  IDocument doc=((XMLEditorInput)this.getEditorInput()).getDocument();
  String schema=doc.get();
  schema=schema.replaceAll(""String_Node_Str"",""String_Node_Str"");
  schema=schema.replaceAll(""String_Node_Str"",""String_Node_Str"");
  wsObject.setXsdSchema(schema);
  SaveXObjectAction action=new SaveXObjectAction(editor);
  action.run();
  state=action.getState();
  super.doSave(progressMonitor);
}","@Override public void doSave(IProgressMonitor progressMonitor){
  WSDataModel wsObject=(WSDataModel)(xobject.getWsObject());
  IDocument doc=((XMLEditorInput)this.getEditorInput()).getDocument();
  String schema=doc.get();
  schema=schema.replaceAll(""String_Node_Str"",""String_Node_Str"");
  schema=schema.replaceAll(""String_Node_Str"",""String_Node_Str"");
  wsObject.setXsdSchema(schema);
  setModified(true);
  SaveXObjectAction action=new SaveXObjectAction(editor);
  action.run();
  state=action.getState();
  super.doSave(progressMonitor);
}",0.980244590780809
149041,"private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      StringBuffer desc=new StringBuffer();
      if (decl.getAnnotation() != null)       labels=new XSDAnnotationsStructure(decl.getAnnotation()).getLabels();
      if (labels == null || labels.size() == 0)       labels.put(""String_Node_Str"",decl.getName());
      for (      String lan : labels.keySet()) {
        desc.append(""String_Node_Str"" + lan.toUpperCase() + ""String_Node_Str""+ labels.get(lan)+ ""String_Node_Str"");
      }
      view.setDescription(desc.toString());
      wrap.setWsView(view);
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      WSDeleteView delView=new WSDeleteView();
      delView.setWsViewPK(viewPk);
      WSGetView getView=new WSGetView();
      getView.setWsViewPK(viewPk);
      try {
        port.getView(getView);
        port.deleteView(delView);
      }
 catch (      RemoteException ex) {
      }
      port.putView(wrap);
    }
  }
}","private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      StringBuffer desc=new StringBuffer();
      LinkedHashMap<String,String> labels=new LinkedHashMap<String,String>();
      if (decl.getAnnotation() != null)       labels=new XSDAnnotationsStructure(decl.getAnnotation()).getLabels();
      if (labels.size() == 0)       labels.put(""String_Node_Str"",decl.getName());
      for (      String lan : labels.keySet()) {
        desc.append(""String_Node_Str"" + lan.toUpperCase() + ""String_Node_Str""+ labels.get(lan)+ ""String_Node_Str"");
      }
      view.setDescription(desc.toString());
      wrap.setWsView(view);
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      WSDeleteView delView=new WSDeleteView();
      delView.setWsViewPK(viewPk);
      WSGetView getView=new WSGetView();
      getView.setWsViewPK(viewPk);
      try {
        port.getView(getView);
        port.deleteView(delView);
      }
 catch (      RemoteException ex) {
      }
      port.putView(wrap);
    }
  }
}",0.97467018469657
149042,"private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      StringBuffer desc=new StringBuffer();
      labels=new XSDAnnotationsStructure(decl.getAnnotation()).getLabels();
      if (labels.size() == 0)       labels.put(""String_Node_Str"",decl.getName());
      for (      String lan : labels.keySet()) {
        desc.append(""String_Node_Str"" + lan.toUpperCase() + ""String_Node_Str""+ labels.get(lan)+ ""String_Node_Str"");
      }
      view.setDescription(desc.toString());
      wrap.setWsView(view);
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      WSDeleteView delView=new WSDeleteView();
      delView.setWsViewPK(viewPk);
      WSGetView getView=new WSGetView();
      getView.setWsViewPK(viewPk);
      try {
        port.getView(getView);
        port.deleteView(delView);
      }
 catch (      RemoteException ex) {
      }
      port.putView(wrap);
    }
  }
}","private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      StringBuffer desc=new StringBuffer();
      if (decl.getAnnotation() != null)       labels=new XSDAnnotationsStructure(decl.getAnnotation()).getLabels();
      if (labels == null || labels.size() == 0)       labels.put(""String_Node_Str"",decl.getName());
      for (      String lan : labels.keySet()) {
        desc.append(""String_Node_Str"" + lan.toUpperCase() + ""String_Node_Str""+ labels.get(lan)+ ""String_Node_Str"");
      }
      view.setDescription(desc.toString());
      wrap.setWsView(view);
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      WSDeleteView delView=new WSDeleteView();
      delView.setWsViewPK(viewPk);
      WSGetView getView=new WSGetView();
      getView.setWsViewPK(viewPk);
      try {
        port.getView(getView);
        port.deleteView(delView);
      }
 catch (      RemoteException ex) {
      }
      port.putView(wrap);
    }
  }
}",0.9842047930283224
149043,"@Override protected void doSetValue(Object value){
  xpath.setText(value.toString());
}","@Override protected void doSetValue(Object value){
  xpath.setText(value.toString().trim());
}",0.9613259668508288
149044,"public void keyReleased(KeyEvent e){
  if (e.character == SWT.CR) {
    xpath.setText(xpath.getText());
    deactive();
  }
}","public void keyReleased(KeyEvent e){
  if (e.character == SWT.CR) {
    xpath.setText(xpath.getText().trim());
    deactive();
  }
}",0.9727626459143968
149045,"@Override protected Control createControl(Composite parent){
  xpath=new XpathWidget(parent,mainPage,false);
  ((GridData)xpath.getComposite().getChildren()[0].getLayoutData()).heightHint=15;
  ((GridData)xpath.getComposite().getChildren()[1].getLayoutData()).heightHint=15;
  if (parent instanceof Table) {
    ((Table)parent).addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
      public void mouseUp(      MouseEvent e){
        if (!isMouseInControl(e)) {
          deactive();
        }
      }
    }
);
    xpath.getTextWidget().addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if (e.character == SWT.CR) {
          xpath.setText(xpath.getText());
          deactive();
        }
      }
    }
);
  }
  return xpath.getComposite();
}","@Override protected Control createControl(Composite parent){
  xpath=new XpathWidget(parent,mainPage,false);
  ((GridData)xpath.getComposite().getChildren()[0].getLayoutData()).heightHint=15;
  ((GridData)xpath.getComposite().getChildren()[1].getLayoutData()).heightHint=15;
  if (parent instanceof Table) {
    ((Table)parent).addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
      public void mouseUp(      MouseEvent e){
        if (!isMouseInControl(e)) {
          deactive();
        }
      }
    }
);
    xpath.getTextWidget().addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if (e.character == SWT.CR) {
          xpath.setText(xpath.getText().trim());
          deactive();
        }
      }
    }
);
  }
  return xpath.getComposite();
}",0.9963215974776668
149046,"public void setOutFocus(){
  descriptionText.setFocus();
  descriptionText.setText(descriptionText.getText());
  int start=descriptionText.getText().length();
  int end=descriptionText.getSelection().y;
  descriptionText.setSelection(start);
}","public void setOutFocus(){
  descriptionText.setFocus();
  descriptionText.setText(descriptionText.getText().trim());
  int start=descriptionText.getText().length();
  descriptionText.setSelection(start);
}",0.8106904231625836
149047,"@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
  try {
    XtentisPort port=Util.getPort(null,null,Util._FORCE_RMI_);
    if (!port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK(Configuration.datacluster))).is_true()) {
      port.putDataCluster(new WSPutDataCluster(new WSDataCluster(Configuration.datacluster,""String_Node_Str"",""String_Node_Str"")));
    }
    if (!port.existsDataModel(new WSExistsDataModel(new WSDataModelPK(Configuration.datamodel))).is_true()) {
      port.putDataModel(new WSPutDataModel(new WSDataModel(Configuration.datamodel,""String_Node_Str"",""String_Node_Str"")));
    }
  }
 catch (  Exception e) {
    String err=""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new ServletException(err);
  }
}","@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
}",0.1934846989141165
149048,"public XSDChangeToComplexTypeAction(DataModelMainPage page,XSDElementDeclaration dec,String name,boolean choice,boolean all){
  this(page);
  declNew=dec;
  showDlg=false;
  typeName=name;
  isChoice=choice;
  isAll=all;
}","public XSDChangeToComplexTypeAction(DataModelMainPage page,XSDElementDeclaration dec,String name,boolean choice,boolean all){
  this(page,false);
  declNew=dec;
  showDlg=false;
  typeName=name;
  isChoice=choice;
  isAll=all;
}",0.9866666666666668
149049,"public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    isConcept=false;
    if (selection.getFirstElement() instanceof XSDElementDeclaration || declNew != null) {
      decl=(XSDElementDeclaration)selection.getFirstElement();
      if (declNew != null) {
        decl=declNew;
      }
      EList l=decl.getIdentityConstraintDefinitions();
      for (Iterator iter=l.iterator(); iter.hasNext(); ) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
          isConcept=true;
          break;
        }
      }
    }
 else {
      if (selection.getFirstElement() != null) {
        decl=(XSDElementDeclaration)((XSDParticle)selection.getFirstElement()).getTerm();
      }
    }
    if (showDlg) {
      dialog=new ComplexTypeInputDialog(this,page.getSite().getShell(),Util.getComplexTypes(decl.getSchema()));
      dialog.setBlockOnOpen(true);
      int ret=dialog.open();
      if (ret == Dialog.CANCEL) {
        return Status.CANCEL_STATUS;
      }
    }
    if (!showDlg && !validateType()) {
      return Status.CANCEL_STATUS;
    }
    XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
    boolean anonymous=(typeName == null) || (""String_Node_Str"".equals(typeName));
    boolean alreadyExists=false;
    XSDComplexTypeDefinition complexType=null;
    XSDParticle subParticle=null;
    XSDParticle groupParticle=null;
    XSDElementDeclaration subElement=null;
    if (!anonymous) {
      EList list=schema.getTypeDefinitions();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        XSDTypeDefinition td=(XSDTypeDefinition)iter.next();
        if ((td.getName().equals(typeName) && (td instanceof XSDComplexTypeDefinition))) {
          alreadyExists=true;
          complexType=(XSDComplexTypeDefinition)td;
          break;
        }
      }
    }
    if (!alreadyExists) {
      subElement=factory.createXSDElementDeclaration();
      subElement.setName(""String_Node_Str"");
      subElement.setTypeDefinition(schema.resolveSimpleTypeDefinition(schema.getSchemaForSchemaNamespace(),""String_Node_Str""));
      subParticle=factory.createXSDParticle();
      subParticle.setMinOccurs(1);
      subParticle.setMaxOccurs(1);
      subParticle.setContent(subElement);
      subParticle.updateElement();
      XSDModelGroup group=factory.createXSDModelGroup();
      if (isChoice)       group.setCompositor(XSDCompositor.CHOICE_LITERAL);
 else       if (isAll)       group.setCompositor(XSDCompositor.ALL_LITERAL);
 else       group.setCompositor(XSDCompositor.SEQUENCE_LITERAL);
      group.getContents().add(0,subParticle);
      group.updateElement();
      complexType=factory.createXSDComplexTypeDefinition();
      if (!anonymous) {
        complexType.setName(typeName);
        schema.getContents().add(complexType);
      }
      complexType.updateElement();
      groupParticle=factory.createXSDParticle();
      groupParticle.setMinOccurs(1);
      groupParticle.setMaxOccurs(1);
      groupParticle.setContent(group);
      groupParticle.updateElement();
      complexType.setContent(groupParticle);
      complexType.updateElement();
    }
    if (anonymous)     decl.setAnonymousTypeDefinition(complexType);
 else {
      decl.setTypeDefinition(complexType);
    }
    if (isConcept) {
      ArrayList keys=new ArrayList();
      EList list=decl.getIdentityConstraintDefinitions();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         keys.add(icd);
      }
      decl.getIdentityConstraintDefinitions().removeAll(keys);
      XSDElementDeclaration firstDecl=null;
      if (complexType.getContent() instanceof XSDParticle) {
        if (((XSDParticle)complexType.getContent()).getTerm() instanceof XSDModelGroup) {
          XSDModelGroup group=(XSDModelGroup)((XSDParticle)complexType.getContent()).getTerm();
          EList gpl=group.getContents();
          for (Iterator iter=gpl.iterator(); iter.hasNext(); ) {
            XSDParticle part=(XSDParticle)iter.next();
            if (part.getTerm() instanceof XSDElementDeclaration) {
              firstDecl=(XSDElementDeclaration)part.getTerm();
              break;
            }
          }
        }
      }
      if (firstDecl != null) {
        XSDIdentityConstraintDefinition uniqueKey=factory.createXSDIdentityConstraintDefinition();
        uniqueKey.setIdentityConstraintCategory(XSDIdentityConstraintCategory.UNIQUE_LITERAL);
        uniqueKey.setName(decl.getName());
        XSDXPathDefinition selector=factory.createXSDXPathDefinition();
        selector.setVariety(XSDXPathVariety.SELECTOR_LITERAL);
        selector.setValue(""String_Node_Str"");
        uniqueKey.setSelector(selector);
        XSDXPathDefinition field=factory.createXSDXPathDefinition();
        field.setVariety(XSDXPathVariety.FIELD_LITERAL);
        field.setValue(firstDecl.getAliasName());
        uniqueKey.getFields().add(field);
        decl.getIdentityConstraintDefinitions().add(uniqueKey);
      }
    }
    decl.updateElement();
    page.refresh();
    declNew=null;
    page.markDirty();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    isConcept=false;
    if (selection.getFirstElement() instanceof XSDModelGroup) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDElementDeclaration)         decl=(XSDElementDeclaration)tPath.getSegment(i);
 else         if (tPath.getSegment(i) instanceof XSDParticle)         decl=(XSDElementDeclaration)((XSDParticle)tPath.getSegment(i)).getTerm();
      }
    }
 else     if (selection.getFirstElement() instanceof XSDElementDeclaration || declNew != null) {
      decl=(XSDElementDeclaration)selection.getFirstElement();
      if (declNew != null) {
        decl=declNew;
      }
      EList l=decl.getIdentityConstraintDefinitions();
      for (Iterator iter=l.iterator(); iter.hasNext(); ) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
          isConcept=true;
          break;
        }
      }
    }
 else {
      if (selection.getFirstElement() != null) {
        decl=(XSDElementDeclaration)((XSDParticle)selection.getFirstElement()).getTerm();
      }
    }
    if (showDlg) {
      dialog=new ComplexTypeInputDialog(this,page.getSite().getShell(),Util.getComplexTypes(decl.getSchema()),isXSDModelGroup);
      dialog.setBlockOnOpen(true);
      int ret=dialog.open();
      if (ret == Dialog.CANCEL) {
        return Status.CANCEL_STATUS;
      }
    }
    if (!showDlg && !validateType()) {
      return Status.CANCEL_STATUS;
    }
    XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
    boolean anonymous=(typeName == null) || (""String_Node_Str"".equals(typeName));
    boolean alreadyExists=false;
    XSDComplexTypeDefinition complexType=null;
    XSDParticle subParticle=null;
    XSDParticle groupParticle=null;
    XSDElementDeclaration subElement=null;
    if (!anonymous) {
      EList list=schema.getTypeDefinitions();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        XSDTypeDefinition td=(XSDTypeDefinition)iter.next();
        if ((td.getName().equals(typeName) && (td instanceof XSDComplexTypeDefinition))) {
          alreadyExists=true;
          complexType=(XSDComplexTypeDefinition)td;
          break;
        }
      }
    }
    if (!alreadyExists) {
      subElement=factory.createXSDElementDeclaration();
      subElement.setName(""String_Node_Str"");
      subElement.setTypeDefinition(schema.resolveSimpleTypeDefinition(schema.getSchemaForSchemaNamespace(),""String_Node_Str""));
      subParticle=factory.createXSDParticle();
      subParticle.setMinOccurs(1);
      subParticle.setMaxOccurs(1);
      subParticle.setContent(subElement);
      subParticle.updateElement();
      XSDModelGroup group=factory.createXSDModelGroup();
      if (isChoice)       group.setCompositor(XSDCompositor.CHOICE_LITERAL);
 else       if (isAll)       group.setCompositor(XSDCompositor.ALL_LITERAL);
 else       group.setCompositor(XSDCompositor.SEQUENCE_LITERAL);
      group.getContents().add(0,subParticle);
      group.updateElement();
      complexType=factory.createXSDComplexTypeDefinition();
      if (!anonymous) {
        complexType.setName(typeName);
        schema.getContents().add(complexType);
      }
      complexType.updateElement();
      groupParticle=factory.createXSDParticle();
      groupParticle.setMinOccurs(1);
      groupParticle.setMaxOccurs(1);
      groupParticle.setContent(group);
      groupParticle.updateElement();
      complexType.setContent(groupParticle);
      complexType.updateElement();
    }
    if (anonymous)     decl.setAnonymousTypeDefinition(complexType);
 else {
      decl.setTypeDefinition(complexType);
    }
    if (isConcept) {
      ArrayList keys=new ArrayList();
      EList list=decl.getIdentityConstraintDefinitions();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         keys.add(icd);
      }
      decl.getIdentityConstraintDefinitions().removeAll(keys);
      XSDElementDeclaration firstDecl=null;
      if (complexType.getContent() instanceof XSDParticle) {
        if (((XSDParticle)complexType.getContent()).getTerm() instanceof XSDModelGroup) {
          XSDModelGroup group=(XSDModelGroup)((XSDParticle)complexType.getContent()).getTerm();
          EList gpl=group.getContents();
          for (Iterator iter=gpl.iterator(); iter.hasNext(); ) {
            XSDParticle part=(XSDParticle)iter.next();
            if (part.getTerm() instanceof XSDElementDeclaration) {
              firstDecl=(XSDElementDeclaration)part.getTerm();
              break;
            }
          }
        }
      }
      if (firstDecl != null) {
        XSDIdentityConstraintDefinition uniqueKey=factory.createXSDIdentityConstraintDefinition();
        uniqueKey.setIdentityConstraintCategory(XSDIdentityConstraintCategory.UNIQUE_LITERAL);
        uniqueKey.setName(decl.getName());
        XSDXPathDefinition selector=factory.createXSDXPathDefinition();
        selector.setVariety(XSDXPathVariety.SELECTOR_LITERAL);
        selector.setValue(""String_Node_Str"");
        uniqueKey.setSelector(selector);
        XSDXPathDefinition field=factory.createXSDXPathDefinition();
        field.setVariety(XSDXPathVariety.FIELD_LITERAL);
        field.setValue(firstDecl.getAliasName());
        uniqueKey.getFields().add(field);
        decl.getIdentityConstraintDefinitions().add(uniqueKey);
      }
    }
    decl.updateElement();
    page.refresh();
    declNew=null;
    page.markDirty();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.9587436332767404
149050,"public void run(){
  IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
  declList.clear();
  List list=selection.toList();
  for (  Object obj : list) {
    if (obj instanceof XSDElementDeclaration) {
      XSDElementDeclaration declaration=(XSDElementDeclaration)obj;
      if (Util.getParent(obj) == obj)       declList.add(declaration);
    }
  }
  AddBrowseItemsWizard wizard=new AddBrowseItemsWizard(page,declList,new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement()).getLabels());
  WizardDialog dialog=new WizardDialog(page.getSite().getShell(),wizard);
  dialog.open();
}","public void run(){
  IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
  declList.clear();
  List list=selection.toList();
  for (  Object obj : list) {
    if (obj instanceof XSDElementDeclaration) {
      XSDElementDeclaration declaration=(XSDElementDeclaration)obj;
      if (Util.getParent(obj) == obj)       declList.add(declaration);
    }
  }
  AddBrowseItemsWizard wizard=new AddBrowseItemsWizard(page,declList);
  WizardDialog dialog=new WizardDialog(page.getSite().getShell(),wizard);
  dialog.open();
}",0.7855340622371741
149051,"public IStatus doAction(){
  List<XSDComplexTypeDefinition> empty=new ArrayList<XSDComplexTypeDefinition>();
  dialog=new ComplexTypeInputDialog(this,page.getSite().getShell(),empty);
  dialog.setBlockOnOpen(true);
  int ret=dialog.open();
  if (ret == Dialog.CANCEL) {
    return Status.CANCEL_STATUS;
  }
  XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
  XSDModelGroup group=factory.createXSDModelGroup();
  XSDParticle subParticle=null;
  XSDElementDeclaration subElement=null;
  subElement=factory.createXSDElementDeclaration();
  subElement.setName(""String_Node_Str"");
  subElement.setTypeDefinition(schema.resolveSimpleTypeDefinition(schema.getSchemaForSchemaNamespace(),""String_Node_Str""));
  subParticle=factory.createXSDParticle();
  subParticle.setMinOccurs(1);
  subParticle.setMaxOccurs(1);
  subParticle.setContent(subElement);
  subParticle.updateElement();
  if (isChoice)   group.setCompositor(XSDCompositor.CHOICE_LITERAL);
 else   if (isAll)   group.setCompositor(XSDCompositor.ALL_LITERAL);
 else   group.setCompositor(XSDCompositor.SEQUENCE_LITERAL);
  group.getContents().add(0,subParticle);
  group.updateElement();
  XSDComplexTypeDefinition complexType=factory.createXSDComplexTypeDefinition();
  complexType.setName(typeName);
  schema.getContents().add(complexType);
  complexType.updateElement();
  XSDParticle groupParticle=factory.createXSDParticle();
  groupParticle.setMinOccurs(1);
  groupParticle.setMaxOccurs(1);
  groupParticle.setContent(group);
  groupParticle.updateElement();
  complexType.setContent(groupParticle);
  complexType.updateElement();
  page.refresh();
  page.markDirty();
  return Status.OK_STATUS;
}","public IStatus doAction(){
  List<XSDComplexTypeDefinition> empty=new ArrayList<XSDComplexTypeDefinition>();
  dialog=new ComplexTypeInputDialog(this,page.getSite().getShell(),empty,false);
  dialog.setBlockOnOpen(true);
  int ret=dialog.open();
  if (ret == Dialog.CANCEL) {
    return Status.CANCEL_STATUS;
  }
  XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
  XSDModelGroup group=factory.createXSDModelGroup();
  XSDParticle subParticle=null;
  XSDElementDeclaration subElement=null;
  subElement=factory.createXSDElementDeclaration();
  subElement.setName(""String_Node_Str"");
  subElement.setTypeDefinition(schema.resolveSimpleTypeDefinition(schema.getSchemaForSchemaNamespace(),""String_Node_Str""));
  subParticle=factory.createXSDParticle();
  subParticle.setMinOccurs(1);
  subParticle.setMaxOccurs(1);
  subParticle.setContent(subElement);
  subParticle.updateElement();
  if (isChoice)   group.setCompositor(XSDCompositor.CHOICE_LITERAL);
 else   if (isAll)   group.setCompositor(XSDCompositor.ALL_LITERAL);
 else   group.setCompositor(XSDCompositor.SEQUENCE_LITERAL);
  group.getContents().add(0,subParticle);
  group.updateElement();
  XSDComplexTypeDefinition complexType=factory.createXSDComplexTypeDefinition();
  complexType.setName(typeName);
  schema.getContents().add(complexType);
  complexType.updateElement();
  XSDParticle groupParticle=factory.createXSDParticle();
  groupParticle.setMinOccurs(1);
  groupParticle.setMaxOccurs(1);
  groupParticle.setContent(group);
  groupParticle.updateElement();
  complexType.setContent(groupParticle);
  complexType.updateElement();
  page.refresh();
  page.markDirty();
  return Status.OK_STATUS;
}",0.9982025164769324
149052,"public IStatus doAction(){
  try {
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof XSDAnnotation)     xSDCom=(XSDAnnotation)selection.getFirstElement();
 else {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure(xSDCom);
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    sxid=new SimpleXpathInputDialog(page,""String_Node_Str"",""String_Node_Str"",struc.getForeignKey(),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        sxid.close();
      }
    }
,dataModelName);
    sxid.setBlockOnOpen(true);
    int ret=sxid.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setForeignKey(""String_Node_Str"".equals(sxid.getXpath()) ? null : sxid.getXpath().replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    XSDAnnotationsStructure struc=null;
    if (xSDCom != null)     struc=new XSDAnnotationsStructure(xSDCom);
    if (struc == null || struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    sxid=new SimpleXpathInputDialog(page,""String_Node_Str"",""String_Node_Str"",struc.getForeignKey(),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        sxid.close();
      }
    }
,dataModelName);
    sxid.setBlockOnOpen(true);
    int ret=sxid.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setForeignKey(""String_Node_Str"".equals(sxid.getXpath()) ? null : sxid.getXpath().replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.9451650943396226
149053,"private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      StringBuffer desc=new StringBuffer();
      for (      String lan : labels.keySet()) {
        desc.append(""String_Node_Str"" + lan.toUpperCase() + ""String_Node_Str""+ labels.get(lan)+ ""String_Node_Str"");
      }
      view.setDescription(desc.toString());
      wrap.setWsView(view);
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      WSDeleteView delView=new WSDeleteView();
      delView.setWsViewPK(viewPk);
      WSGetView getView=new WSGetView();
      getView.setWsViewPK(viewPk);
      try {
        port.getView(getView);
        port.deleteView(delView);
      }
 catch (      RemoteException ex) {
      }
      port.putView(wrap);
    }
  }
}","private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      StringBuffer desc=new StringBuffer();
      labels=new XSDAnnotationsStructure(decl.getAnnotation()).getLabels();
      if (labels.size() == 0)       labels.put(""String_Node_Str"",decl.getName());
      for (      String lan : labels.keySet()) {
        desc.append(""String_Node_Str"" + lan.toUpperCase() + ""String_Node_Str""+ labels.get(lan)+ ""String_Node_Str"");
      }
      view.setDescription(desc.toString());
      wrap.setWsView(view);
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      WSDeleteView delView=new WSDeleteView();
      delView.setWsViewPK(viewPk);
      WSGetView getView=new WSGetView();
      getView.setWsViewPK(viewPk);
      try {
        port.getView(getView);
        port.deleteView(delView);
      }
 catch (      RemoteException ex) {
      }
      port.putView(wrap);
    }
  }
}",0.9542824074074074
149054,"public AddBrowseItemsWizard(AMainPageV2 launchPage,List<XSDElementDeclaration> list,LinkedHashMap<String,String> labels){
  super();
  setWindowTitle(""String_Node_Str"");
  page=launchPage;
  declList=list;
  this.labels=labels;
  for (  XSDElementDeclaration dl : declList) {
    browseItemToRoles.put(BROWSE_ITEMS + dl.getName(),new ArrayList<Line>());
  }
}","public AddBrowseItemsWizard(AMainPageV2 launchPage,List<XSDElementDeclaration> list){
  super();
  setWindowTitle(""String_Node_Str"");
  page=launchPage;
  declList=list;
  for (  XSDElementDeclaration dl : declList) {
    browseItemToRoles.put(BROWSE_ITEMS + dl.getName(),new ArrayList<Line>());
  }
}",0.912121212121212
149055,"protected Control createDialogArea(Composite parent){
  final Composite composite=(Composite)super.createDialogArea(parent);
  if (caller instanceof XSDNewComplexTypeDefinition) {
    parent.getShell().setText(""String_Node_Str"");
    conceptPanel=new ConceptComposite(composite,false,types,true);
  }
 else {
    parent.getShell().setText(""String_Node_Str"");
    conceptPanel=new ConceptComposite(composite,false,types,false);
  }
  return conceptPanel.getComposite();
}","protected Control createDialogArea(Composite parent){
  final Composite composite=(Composite)super.createDialogArea(parent);
  if (caller instanceof XSDNewComplexTypeDefinition) {
    parent.getShell().setText(""String_Node_Str"");
    conceptPanel=new ConceptComposite(composite,false,types,true);
  }
 else {
    if (isXSDModelGroup)     parent.getShell().setText(""String_Node_Str"");
 else     parent.getShell().setText(""String_Node_Str"");
    conceptPanel=new ConceptComposite(composite,false,types,false);
  }
  return conceptPanel.getComposite();
}",0.920666013712047
149056,"/** 
 * @param parentShell
 */
public ComplexTypeInputDialog(SelectionListener caller,Shell parentShell,List<XSDComplexTypeDefinition> types){
  super(parentShell);
  this.caller=caller;
  this.types=types;
}","/** 
 * @param parentShell
 * @param isXSDModelGroup 
 */
public ComplexTypeInputDialog(SelectionListener caller,Shell parentShell,List<XSDComplexTypeDefinition> types,boolean isXSDModelGroup){
  super(parentShell);
  this.caller=caller;
  this.types=types;
  this.isXSDModelGroup=isXSDModelGroup;
}",0.8205128205128205
149057,"/** 
 * We need to override the method so that the schema object is serialized into xsd an stored in the wsObject via the commit method We also need to marDirty both Pages The super.markDirty() method will trigger the appropriate events to the registered listeners
 */
@Override public void markDirty(){
  super.markDirty();
  XMLEditor xmleditor=((XObjectEditor)getEditor()).getXmlEditor();
  if (xmleditor != null && xmleditor.isDirty())   xmleditor.markDirty();
}","/** 
 * We need to override the method so that the schema object is serialized into xsd an stored in the wsObject via the commit method We also need to marDirty both Pages The super.markDirty() method will trigger the appropriate events to the registered listeners
 */
@Override public void markDirty(){
  super.markDirty();
  XMLEditor xmleditor=((XObjectEditor)getEditor()).getXmlEditor();
  if (xmleditor != null && getEditor().isDirty())   xmleditor.markDirty();
}",0.9486081370449678
149058,"protected void createActions(){
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.newBrowseItemAction=new XSDNewBrowseItemViewAction(this);
  this.deleteConceptWrapAction=new XSDDeleteConceptWrapAction(this);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this,dataModelName);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this,dataModelName);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this,dataModelName);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this,dataModelName);
  this.setAnnotationSchematronAction=new XSDSetAnnotationSchematronAction(this,dataModelName);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
  this.deleteTypeDefinition=new XSDDeleteTypeDefinition(this);
  this.newComplexTypeAction=new XSDNewComplexTypeDefinition(this);
  this.newSimpleTypeAction=new XSDNewSimpleTypeDefinition(this);
  this.editComplexTypeAction=new XSDEditComplexTypeAction(this);
  this.setFacetMsgAction=new XSDSetFacetMessageAction(this);
  deleteConceptWrapAction.regisDelAction(XSDElementDeclarationImpl.class,deleteConceptAction);
  deleteConceptWrapAction.regisDelAction(XSDParticleImpl.class,deleteParticleAction);
  deleteConceptWrapAction.regisDelAction(XSDIdentityConstraintDefinitionImpl.class,deleteIdentityConstraintAction);
  deleteConceptWrapAction.regisDelAction(XSDXPathDefinitionImpl.class,deleteXPathAction);
  deleteConceptWrapAction.regisDelAction(null,deleteElementAction);
  deleteConceptWrapAction.regisDelAction(XSDComplexTypeDefinitionImpl.class,deleteTypeDefinition);
  deleteConceptWrapAction.regisDelAction(XSDSimpleTypeDefinitionImpl.class,deleteTypeDefinition);
}","protected void createActions(){
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.newBrowseItemAction=new XSDNewBrowseItemViewAction(this);
  this.deleteConceptWrapAction=new XSDDeleteConceptWrapAction(this);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this,false);
  this.changeSubElementGroupAction=new XSDChangeToComplexTypeAction(this,true);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this,dataModelName);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this,dataModelName);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this,dataModelName);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this,dataModelName);
  this.setAnnotationSchematronAction=new XSDSetAnnotationSchematronAction(this,dataModelName);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
  this.deleteTypeDefinition=new XSDDeleteTypeDefinition(this);
  this.newComplexTypeAction=new XSDNewComplexTypeDefinition(this);
  this.newSimpleTypeAction=new XSDNewSimpleTypeDefinition(this);
  this.editComplexTypeAction=new XSDEditComplexTypeAction(this);
  this.setFacetMsgAction=new XSDSetFacetMessageAction(this);
  deleteConceptWrapAction.regisDelAction(XSDElementDeclarationImpl.class,deleteConceptAction);
  deleteConceptWrapAction.regisDelAction(XSDParticleImpl.class,deleteParticleAction);
  deleteConceptWrapAction.regisDelAction(XSDIdentityConstraintDefinitionImpl.class,deleteIdentityConstraintAction);
  deleteConceptWrapAction.regisDelAction(XSDXPathDefinitionImpl.class,deleteXPathAction);
  deleteConceptWrapAction.regisDelAction(null,deleteElementAction);
  deleteConceptWrapAction.regisDelAction(XSDComplexTypeDefinitionImpl.class,deleteTypeDefinition);
  deleteConceptWrapAction.regisDelAction(XSDSimpleTypeDefinitionImpl.class,deleteTypeDefinition);
}",0.1921282798833819
149059,"protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(new XSDNewConceptAction(this));
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object[] selectedObjs=selection.toArray();
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration && selectedObjs.length == 1) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=Util.checkConcept(decl);
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptAction);
      manager.add(newBrowseItemAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(new XSDNewConceptAction(this));
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    if (((XSDElementDeclaration)obj).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
      manager.add(setFacetMsgAction);
    }
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions2(manager);
  }
  if (obj instanceof XSDParticle && selectedObjs.length == 1) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        if (((XSDElementDeclaration)term).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
          manager.add(setFacetMsgAction);
        }
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition && selectedObjs.length == 1) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition && selectedObjs.length == 1) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition && selectedObjs.length == 1) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition && selectedObjs.length == 1) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation && selectedObjs.length == 1) {
    setAnnotationActions(manager);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInDeletableType(selectedObjs)) {
    deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.outPutDeleteActions() != null) {
    manager.add(deleteConceptWrapAction.outPutDeleteActions());
    if (deleteConceptWrapAction.checkOutAllConcept(selectedObjs))     manager.add(newBrowseItemAction);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(new XSDNewConceptAction(this));
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object[] selectedObjs=selection.toArray();
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration && selectedObjs.length == 1) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=Util.checkConcept(decl);
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptAction);
      manager.add(newBrowseItemAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(new XSDNewConceptAction(this));
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    if (((XSDElementDeclaration)obj).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
      manager.add(setFacetMsgAction);
    }
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions2(manager);
  }
  if (obj instanceof XSDModelGroup) {
    manager.add(changeSubElementGroupAction);
  }
  if (obj instanceof XSDParticle && selectedObjs.length == 1) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        if (((XSDElementDeclaration)term).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
          manager.add(setFacetMsgAction);
        }
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition && selectedObjs.length == 1) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition && selectedObjs.length == 1) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition && selectedObjs.length == 1) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition && selectedObjs.length == 1) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation && selectedObjs.length == 1) {
    setAnnotationActions(manager);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInDeletableType(selectedObjs)) {
    deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.outPutDeleteActions() != null) {
    manager.add(deleteConceptWrapAction.outPutDeleteActions());
    if (deleteConceptWrapAction.checkOutAllConcept(selectedObjs))     manager.add(newBrowseItemAction);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.989840683444932
149060,"private int getElementType(Object decl){
  if (Util.getParent(decl) == decl) {
    if (Util.checkConcept((XSDElementDeclaration)decl)) {
      return 0;
    }
    return 1;
  }
  if (decl instanceof XSDComplexTypeDefinition)   return 2;
  if (decl instanceof XSDIdentityConstraintDefinition)   return 3;
  if (decl instanceof XSDXPathDefinition)   return 4;
  if (decl instanceof XSDSimpleTypeDefinition)   return 5;
  if (decl instanceof XSDAnnotation)   return 6;
  if (decl instanceof XSDParticle)   return 7;
  if (decl instanceof XSDWhiteSpaceFacet)   return 201;
  if (decl instanceof XSDLengthFacet)   return 202;
  if (decl instanceof XSDMinLengthFacet)   return 203;
  if (decl instanceof XSDMaxLengthFacet)   return 204;
  if (decl instanceof XSDTotalDigitsFacet)   return 205;
  if (decl instanceof XSDFractionDigitsFacet)   return 206;
  if (decl instanceof XSDMaxInclusiveFacet)   return 207;
  if (decl instanceof XSDMaxExclusiveFacet)   return 208;
  if (decl instanceof XSDMinInclusiveFacet)   return 209;
  if (decl instanceof XSDMinExclusiveFacet)   return 210;
  if (decl instanceof XSDPatternFacet)   return 211;
  if (decl instanceof XSDEnumerationFacet)   return 212;
  if (decl instanceof Element) {
    Element e=(Element)decl;
    if (e.getLocalName().equals(""String_Node_Str"")) {
    }
    String source=e.getAttribute(""String_Node_Str"");
    if (source != null) {
      if (source.startsWith(""String_Node_Str"")) {
        return 101;
      }
 else       if (source.equals(""String_Node_Str"")) {
        return 102;
      }
 else       if (source.equals(""String_Node_Str"")) {
        return 103;
      }
 else       if (source.equals(""String_Node_Str"")) {
        return 104;
      }
 else       if (source.equals(""String_Node_Str"")) {
        return 105;
      }
 else       if (source.startsWith(""String_Node_Str"")) {
        return 106;
      }
 else       if (source.equals(""String_Node_Str"")) {
        return 107;
      }
 else       if (source.equals(""String_Node_Str"")) {
        return 108;
      }
 else       if (source.equals(""String_Node_Str"")) {
        return 109;
      }
 else       if (source.startsWith(""String_Node_Str"")) {
        return 110;
      }
    }
  }
  return -1;
}","private int getElementType(Object decl){
  if (Util.getParent(decl) == decl) {
    if (Util.checkConcept((XSDElementDeclaration)decl)) {
      return 0;
    }
    return 1;
  }
  if (decl instanceof XSDComplexTypeDefinition)   return 2;
  if (decl instanceof XSDIdentityConstraintDefinition)   return 3;
  if (decl instanceof XSDXPathDefinition)   return 4;
  if (decl instanceof XSDSimpleTypeDefinition)   return 5;
  if (decl instanceof XSDAnnotation)   return 6;
  if (decl instanceof XSDParticle)   return 7;
  if (decl instanceof XSDModelGroup)   return 8;
  if (decl instanceof XSDWhiteSpaceFacet)   return 201;
  if (decl instanceof XSDLengthFacet)   return 202;
  if (decl instanceof XSDMinLengthFacet)   return 203;
  if (decl instanceof XSDMaxLengthFacet)   return 204;
  if (decl instanceof XSDTotalDigitsFacet)   return 205;
  if (decl instanceof XSDFractionDigitsFacet)   return 206;
  if (decl instanceof XSDMaxInclusiveFacet)   return 207;
  if (decl instanceof XSDMaxExclusiveFacet)   return 208;
  if (decl instanceof XSDMinInclusiveFacet)   return 209;
  if (decl instanceof XSDMinExclusiveFacet)   return 210;
  if (decl instanceof XSDPatternFacet)   return 211;
  if (decl instanceof XSDEnumerationFacet)   return 212;
  if (decl instanceof Element) {
    Element e=(Element)decl;
    if (e.getLocalName().equals(""String_Node_Str"")) {
    }
    String source=e.getAttribute(""String_Node_Str"");
    if (source != null) {
      if (source.startsWith(""String_Node_Str"")) {
        return 101;
      }
 else       if (source.equals(""String_Node_Str"")) {
        return 102;
      }
 else       if (source.equals(""String_Node_Str"")) {
        return 103;
      }
 else       if (source.equals(""String_Node_Str"")) {
        return 104;
      }
 else       if (source.equals(""String_Node_Str"")) {
        return 105;
      }
 else       if (source.startsWith(""String_Node_Str"")) {
        return 106;
      }
 else       if (source.equals(""String_Node_Str"")) {
        return 107;
      }
 else       if (source.equals(""String_Node_Str"")) {
        return 108;
      }
 else       if (source.equals(""String_Node_Str"")) {
        return 109;
      }
 else       if (source.startsWith(""String_Node_Str"")) {
        return 110;
      }
    }
  }
  return -1;
}",0.989089289690492
149061,"public void doubleClick(DoubleClickEvent event){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  int elem=getElementType(selection.getFirstElement());
switch (elem) {
case 0:
    editConceptAction.run();
  break;
case 1:
editElementAction.run();
break;
case 2:
newComplexTypeAction.run();
break;
case 3:
editIdentityConstraintAction.run();
break;
case 4:
editXPathAction.run();
break;
case 5:
changeBaseTypeAction.run();
break;
case 6:
setAnnotationDescriptionsAction.run();
break;
case 7:
editParticleAction.run();
break;
case 201:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 202:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 203:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 204:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 205:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 206:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 207:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 208:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 209:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 210:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 211:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 212:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 101:
setAnnotationLabelAction.run();
break;
case 102:
setAnnotationForeignKeyAction.run();
break;
case 103:
setAnnotationForeignKeyInfoAction.run();
break;
case 104:
setAnnotationSourceSystemAction.run();
break;
case 105:
setAnnotationTargetSystemsAction.run();
break;
case 106:
setAnnotationDescriptionsAction.run();
break;
case 107:
setAnnotationWriteAction.run();
break;
case 108:
setAnnotationHiddenAction.run();
break;
case 109:
setAnnotationSchematronAction.run();
break;
case 110:
setFacetMsgAction.run();
break;
case -1:
if (drillDownAdapter.canGoInto() == true) drillDownAdapter.goInto();
}
}","public void doubleClick(DoubleClickEvent event){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  int elem=getElementType(selection.getFirstElement());
switch (elem) {
case 0:
    editConceptAction.run();
  break;
case 1:
editElementAction.run();
break;
case 2:
newComplexTypeAction.run();
break;
case 3:
editIdentityConstraintAction.run();
break;
case 4:
editXPathAction.run();
break;
case 5:
changeBaseTypeAction.run();
break;
case 6:
setAnnotationDescriptionsAction.run();
break;
case 7:
editParticleAction.run();
break;
case 8:
changeSubElementGroupAction.run();
break;
case 201:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 202:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 203:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 204:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 205:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 206:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 207:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 208:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 209:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 210:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 211:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 212:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 101:
setAnnotationLabelAction.run();
break;
case 102:
setAnnotationForeignKeyAction.run();
break;
case 103:
setAnnotationForeignKeyInfoAction.run();
break;
case 104:
setAnnotationSourceSystemAction.run();
break;
case 105:
setAnnotationTargetSystemsAction.run();
break;
case 106:
setAnnotationDescriptionsAction.run();
break;
case 107:
setAnnotationWriteAction.run();
break;
case 108:
setAnnotationHiddenAction.run();
break;
case 109:
setAnnotationSchematronAction.run();
break;
case 110:
setFacetMsgAction.run();
break;
case -1:
if (drillDownAdapter.canGoInto() == true) drillDownAdapter.goInto();
}
}",0.9868972746331236
149062,"private void hookDoubleClickAction(){
  viewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
      int elem=getElementType(selection.getFirstElement());
switch (elem) {
case 0:
        editConceptAction.run();
      break;
case 1:
    editElementAction.run();
  break;
case 2:
newComplexTypeAction.run();
break;
case 3:
editIdentityConstraintAction.run();
break;
case 4:
editXPathAction.run();
break;
case 5:
changeBaseTypeAction.run();
break;
case 6:
setAnnotationDescriptionsAction.run();
break;
case 7:
editParticleAction.run();
break;
case 201:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 202:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 203:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 204:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 205:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 206:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 207:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 208:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 209:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 210:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 211:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 212:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 101:
setAnnotationLabelAction.run();
break;
case 102:
setAnnotationForeignKeyAction.run();
break;
case 103:
setAnnotationForeignKeyInfoAction.run();
break;
case 104:
setAnnotationSourceSystemAction.run();
break;
case 105:
setAnnotationTargetSystemsAction.run();
break;
case 106:
setAnnotationDescriptionsAction.run();
break;
case 107:
setAnnotationWriteAction.run();
break;
case 108:
setAnnotationHiddenAction.run();
break;
case 109:
setAnnotationSchematronAction.run();
break;
case 110:
setFacetMsgAction.run();
break;
case -1:
if (drillDownAdapter.canGoInto() == true) drillDownAdapter.goInto();
}
}
}
);
}","private void hookDoubleClickAction(){
  viewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
      int elem=getElementType(selection.getFirstElement());
switch (elem) {
case 0:
        editConceptAction.run();
      break;
case 1:
    editElementAction.run();
  break;
case 2:
newComplexTypeAction.run();
break;
case 3:
editIdentityConstraintAction.run();
break;
case 4:
editXPathAction.run();
break;
case 5:
changeBaseTypeAction.run();
break;
case 6:
setAnnotationDescriptionsAction.run();
break;
case 7:
editParticleAction.run();
break;
case 8:
changeSubElementGroupAction.run();
break;
case 201:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 202:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 203:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 204:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 205:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 206:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 207:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 208:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 209:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 210:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 211:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 212:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 101:
setAnnotationLabelAction.run();
break;
case 102:
setAnnotationForeignKeyAction.run();
break;
case 103:
setAnnotationForeignKeyInfoAction.run();
break;
case 104:
setAnnotationSourceSystemAction.run();
break;
case 105:
setAnnotationTargetSystemsAction.run();
break;
case 106:
setAnnotationDescriptionsAction.run();
break;
case 107:
setAnnotationWriteAction.run();
break;
case 108:
setAnnotationHiddenAction.run();
break;
case 109:
setAnnotationSchematronAction.run();
break;
case 110:
setFacetMsgAction.run();
break;
case -1:
if (drillDownAdapter.canGoInto() == true) drillDownAdapter.goInto();
}
}
}
);
}",0.9877630934899656
149063,"protected void pageChange(int newPageIndex){
  AFormPage page=(AFormPage)formPages.get(0);
  boolean isdirty=page.isDirty();
  super.pageChange(newPageIndex);
  if (xmlEditor != null) {
    xmlEditor.refresh();
    if (xmlEditor.isDirty() || xmlEditor.isModified())     page.refreshPage();
  }
  linkDirty(page,isdirty);
}","protected void pageChange(int newPageIndex){
  AFormPage page=(AFormPage)formPages.get(0);
  boolean isdirty=page.isDirty();
  super.pageChange(newPageIndex);
  if (xmlEditor != null) {
    xmlEditor.refresh();
    if (xmlEditor.isDirty() || xmlEditor.isModified()) {
      page.refreshPage();
      xmlEditor.setModified(false);
    }
  }
  linkDirty(page,isdirty);
}",0.9333333333333332
149064,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  if (this.parent == null) {
    this.parent=(TreeParent)ServerView.show().getRoot().getChildren()[0];
  }
  final TreeParent tree=this.parent.findServerFolder(TreeObject.DATA_MODEL);
  List<String> systemDataModelValues=Util.getChildren(this.parent.getServerRoot(),TreeObject.DATA_MODEL);
  dataModelCombo.setItems(systemDataModelValues.toArray(new String[systemDataModelValues.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree);
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=systemDataModelValues.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  if (this.parent == null) {
    this.parent=(TreeParent)ServerView.show().getRoot().getChildren()[0];
  }
  final TreeParent tree=this.parent.findServerFolder(TreeObject.DATA_MODEL);
  List<String> systemDataModelValues=Util.getChildren(this.parent.getServerRoot(),TreeObject.DATA_MODEL);
  dataModelCombo.setItems(systemDataModelValues.toArray(new String[systemDataModelValues.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree);
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=systemDataModelValues.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}",0.9995670995670995
149065,"public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    isConcept=false;
    if (selection.getFirstElement() instanceof XSDModelGroup) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDElementDeclaration)         decl=(XSDElementDeclaration)tPath.getSegment(i);
 else         if (tPath.getSegment(i) instanceof XSDParticle)         decl=(XSDElementDeclaration)((XSDParticle)tPath.getSegment(i)).getTerm();
      }
    }
 else     if (selection.getFirstElement() instanceof XSDElementDeclaration || declNew != null) {
      decl=(XSDElementDeclaration)selection.getFirstElement();
      if (declNew != null) {
        decl=declNew;
      }
      EList l=decl.getIdentityConstraintDefinitions();
      for (Iterator iter=l.iterator(); iter.hasNext(); ) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
          isConcept=true;
          break;
        }
      }
    }
 else {
      if (selection.getFirstElement() != null) {
        decl=(XSDElementDeclaration)((XSDParticle)selection.getFirstElement()).getTerm();
      }
    }
    if (showDlg) {
      dialog=new ComplexTypeInputDialog(this,page.getSite().getShell(),Util.getComplexTypes(decl.getSchema()),isXSDModelGroup);
      dialog.setBlockOnOpen(true);
      int ret=dialog.open();
      if (ret == Dialog.CANCEL) {
        return Status.CANCEL_STATUS;
      }
    }
    if (!showDlg && !validateType()) {
      return Status.CANCEL_STATUS;
    }
    XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
    boolean anonymous=(typeName == null) || (""String_Node_Str"".equals(typeName));
    boolean alreadyExists=false;
    XSDComplexTypeDefinition complexType=null;
    XSDParticle subParticle=null;
    XSDParticle groupParticle=null;
    XSDElementDeclaration subElement=null;
    if (!anonymous) {
      EList list=schema.getTypeDefinitions();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        XSDTypeDefinition td=(XSDTypeDefinition)iter.next();
        if ((td.getName().equals(typeName) && (td instanceof XSDComplexTypeDefinition))) {
          alreadyExists=true;
          complexType=(XSDComplexTypeDefinition)td;
          break;
        }
      }
    }
    if (!alreadyExists) {
      subElement=factory.createXSDElementDeclaration();
      subElement.setName(""String_Node_Str"");
      subElement.setTypeDefinition(schema.resolveSimpleTypeDefinition(schema.getSchemaForSchemaNamespace(),""String_Node_Str""));
      subParticle=factory.createXSDParticle();
      subParticle.setMinOccurs(1);
      subParticle.setMaxOccurs(1);
      subParticle.setContent(subElement);
      subParticle.updateElement();
      XSDModelGroup group=factory.createXSDModelGroup();
      if (isChoice)       group.setCompositor(XSDCompositor.CHOICE_LITERAL);
 else       if (isAll)       group.setCompositor(XSDCompositor.ALL_LITERAL);
 else       group.setCompositor(XSDCompositor.SEQUENCE_LITERAL);
      group.getContents().add(0,subParticle);
      group.updateElement();
      complexType=factory.createXSDComplexTypeDefinition();
      if (!anonymous) {
        complexType.setName(typeName);
        schema.getContents().add(complexType);
      }
      complexType.updateElement();
      groupParticle=factory.createXSDParticle();
      groupParticle.setMinOccurs(1);
      groupParticle.setMaxOccurs(1);
      groupParticle.setContent(group);
      groupParticle.updateElement();
      complexType.setContent(groupParticle);
      complexType.updateElement();
    }
    if (anonymous)     decl.setAnonymousTypeDefinition(complexType);
 else {
      decl.setTypeDefinition(complexType);
    }
    if (isConcept) {
      ArrayList keys=new ArrayList();
      EList list=decl.getIdentityConstraintDefinitions();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         keys.add(icd);
      }
      decl.getIdentityConstraintDefinitions().removeAll(keys);
      XSDElementDeclaration firstDecl=null;
      if (complexType.getContent() instanceof XSDParticle) {
        if (((XSDParticle)complexType.getContent()).getTerm() instanceof XSDModelGroup) {
          XSDModelGroup group=(XSDModelGroup)((XSDParticle)complexType.getContent()).getTerm();
          EList gpl=group.getContents();
          for (Iterator iter=gpl.iterator(); iter.hasNext(); ) {
            XSDParticle part=(XSDParticle)iter.next();
            if (part.getTerm() instanceof XSDElementDeclaration) {
              firstDecl=(XSDElementDeclaration)part.getTerm();
              break;
            }
          }
        }
      }
      if (firstDecl != null) {
        XSDIdentityConstraintDefinition uniqueKey=factory.createXSDIdentityConstraintDefinition();
        uniqueKey.setIdentityConstraintCategory(XSDIdentityConstraintCategory.UNIQUE_LITERAL);
        uniqueKey.setName(decl.getName());
        XSDXPathDefinition selector=factory.createXSDXPathDefinition();
        selector.setVariety(XSDXPathVariety.SELECTOR_LITERAL);
        selector.setValue(""String_Node_Str"");
        uniqueKey.setSelector(selector);
        XSDXPathDefinition field=factory.createXSDXPathDefinition();
        field.setVariety(XSDXPathVariety.FIELD_LITERAL);
        field.setValue(firstDecl.getAliasName());
        uniqueKey.getFields().add(field);
        decl.getIdentityConstraintDefinitions().add(uniqueKey);
      }
    }
    decl.updateElement();
    page.refresh();
    declNew=null;
    page.markDirty();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    isConcept=false;
    if (selection.getFirstElement() instanceof XSDModelGroup) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDElementDeclaration)         decl=(XSDElementDeclaration)tPath.getSegment(i);
 else         if (tPath.getSegment(i) instanceof XSDParticle)         decl=(XSDElementDeclaration)((XSDParticle)tPath.getSegment(i)).getTerm();
      }
      checkConcept();
    }
 else     if (selection.getFirstElement() instanceof XSDElementDeclaration || declNew != null) {
      decl=(XSDElementDeclaration)selection.getFirstElement();
      if (declNew != null) {
        decl=declNew;
      }
      checkConcept();
    }
 else {
      if (selection.getFirstElement() != null) {
        decl=(XSDElementDeclaration)((XSDParticle)selection.getFirstElement()).getTerm();
      }
    }
    if (showDlg) {
      dialog=new ComplexTypeInputDialog(this,page.getSite().getShell(),Util.getComplexTypes(decl.getSchema()),isXSDModelGroup);
      dialog.setBlockOnOpen(true);
      int ret=dialog.open();
      if (ret == Dialog.CANCEL) {
        return Status.CANCEL_STATUS;
      }
    }
    if (!showDlg && !validateType()) {
      return Status.CANCEL_STATUS;
    }
    XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
    boolean anonymous=(typeName == null) || (""String_Node_Str"".equals(typeName));
    boolean alreadyExists=false;
    XSDComplexTypeDefinition complexType=null;
    XSDParticle subParticle=null;
    XSDParticle groupParticle=null;
    XSDElementDeclaration subElement=null;
    if (!anonymous) {
      EList list=schema.getTypeDefinitions();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        XSDTypeDefinition td=(XSDTypeDefinition)iter.next();
        if ((td.getName().equals(typeName) && (td instanceof XSDComplexTypeDefinition))) {
          alreadyExists=true;
          complexType=(XSDComplexTypeDefinition)td;
          break;
        }
      }
    }
    if (!alreadyExists) {
      subElement=factory.createXSDElementDeclaration();
      subElement.setName(""String_Node_Str"");
      subElement.setTypeDefinition(schema.resolveSimpleTypeDefinition(schema.getSchemaForSchemaNamespace(),""String_Node_Str""));
      subParticle=factory.createXSDParticle();
      subParticle.setMinOccurs(1);
      subParticle.setMaxOccurs(1);
      subParticle.setContent(subElement);
      subParticle.updateElement();
      XSDModelGroup group=factory.createXSDModelGroup();
      if (isChoice)       group.setCompositor(XSDCompositor.CHOICE_LITERAL);
 else       if (isAll)       group.setCompositor(XSDCompositor.ALL_LITERAL);
 else       group.setCompositor(XSDCompositor.SEQUENCE_LITERAL);
      group.getContents().add(0,subParticle);
      group.updateElement();
      complexType=factory.createXSDComplexTypeDefinition();
      if (!anonymous) {
        complexType.setName(typeName);
        schema.getContents().add(complexType);
      }
      complexType.updateElement();
      groupParticle=factory.createXSDParticle();
      groupParticle.setMinOccurs(1);
      groupParticle.setMaxOccurs(1);
      groupParticle.setContent(group);
      groupParticle.updateElement();
      complexType.setContent(groupParticle);
      complexType.updateElement();
    }
    if (anonymous)     decl.setAnonymousTypeDefinition(complexType);
 else {
      decl.setTypeDefinition(complexType);
    }
    if (isConcept) {
      ArrayList keys=new ArrayList();
      EList list=decl.getIdentityConstraintDefinitions();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         keys.add(icd);
      }
      decl.getIdentityConstraintDefinitions().removeAll(keys);
      XSDElementDeclaration firstDecl=null;
      if (complexType.getContent() instanceof XSDParticle) {
        if (((XSDParticle)complexType.getContent()).getTerm() instanceof XSDModelGroup) {
          XSDModelGroup group=(XSDModelGroup)((XSDParticle)complexType.getContent()).getTerm();
          EList gpl=group.getContents();
          for (Iterator iter=gpl.iterator(); iter.hasNext(); ) {
            XSDParticle part=(XSDParticle)iter.next();
            if (part.getTerm() instanceof XSDElementDeclaration) {
              firstDecl=(XSDElementDeclaration)part.getTerm();
              break;
            }
          }
        }
      }
      if (firstDecl != null) {
        XSDIdentityConstraintDefinition uniqueKey=factory.createXSDIdentityConstraintDefinition();
        uniqueKey.setIdentityConstraintCategory(XSDIdentityConstraintCategory.UNIQUE_LITERAL);
        uniqueKey.setName(decl.getName());
        XSDXPathDefinition selector=factory.createXSDXPathDefinition();
        selector.setVariety(XSDXPathVariety.SELECTOR_LITERAL);
        selector.setValue(""String_Node_Str"");
        uniqueKey.setSelector(selector);
        XSDXPathDefinition field=factory.createXSDXPathDefinition();
        field.setVariety(XSDXPathVariety.FIELD_LITERAL);
        field.setValue(firstDecl.getAliasName());
        uniqueKey.getFields().add(field);
        decl.getIdentityConstraintDefinitions().add(uniqueKey);
      }
    }
    decl.updateElement();
    page.refresh();
    declNew=null;
    page.markDirty();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.9670881835692152
149066,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  if (this.parent == null) {
    this.parent=(TreeParent)ServerView.show().getRoot().getChildren()[0];
  }
  final TreeParent tree=this.parent.findServerFolder(TreeObject.DATA_MODEL);
  List<String> systemDataModelValues=Util.getChildren(this.parent.getServerRoot(),TreeObject.DATA_MODEL);
  dataModelCombo.setItems(systemDataModelValues.toArray(new String[systemDataModelValues.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree);
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=systemDataModelValues.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  if (this.parent == null) {
    this.parent=(TreeParent)ServerView.show().getRoot().getChildren()[0];
  }
  final TreeParent tree=this.parent.findServerFolder(TreeObject.DATA_MODEL);
  List<String> systemDataModelValues=Util.getChildren(this.parent.getServerRoot(),TreeObject.DATA_MODEL);
  dataModelCombo.setItems(systemDataModelValues.toArray(new String[systemDataModelValues.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree);
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=systemDataModelValues.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=400;
  return composite;
}",0.9995670995670995
149067,"private void changeDomTree(final TreeParent pObject){
  String modelDisplay=dataModelCombo.getText();
  this.dataModelName=modelDisplay;
  xobject=pObject.findObject(TreeObject.DATA_MODEL,modelDisplay);
  XtentisPort port=null;
  try {
    port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
  }
 catch (  MalformedURLException e3) {
    e3.printStackTrace();
  }
catch (  XtentisException e3) {
    e3.printStackTrace();
  }
  WSDataModel wsDataModel=null;
  try {
    wsDataModel=port.getDataModel(new WSGetDataModel((WSDataModelPK)xobject.getWsKey()));
  }
 catch (  RemoteException e2) {
    e2.printStackTrace();
  }
  try {
    XSDSchema xsdSchema=getXSDSchema(wsDataModel.getXsdSchema());
    provideViwerContent(xsdSchema);
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
}","private void changeDomTree(final TreeParent pObject){
  String modelDisplay=dataModelCombo.getText();
  this.dataModelName=modelDisplay;
  XtentisPort port=null;
  try {
    port=Util.getPort(pObject);
  }
 catch (  XtentisException e3) {
    e3.printStackTrace();
  }
catch (  Exception e3) {
    e3.printStackTrace();
  }
  WSDataModel wsDataModel=null;
  try {
    wsDataModel=port.getDataModel(new WSGetDataModel(new WSDataModelPK(dataModelName)));
  }
 catch (  RemoteException e2) {
    e2.printStackTrace();
  }
  try {
    XSDSchema xsdSchema=getXSDSchema(wsDataModel.getXsdSchema());
    provideViwerContent(xsdSchema);
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
}",0.7794212218649518
149068,"protected void createActions(){
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.newBrowseItemAction=new XSDNewBrowseItemViewAction(this);
  this.deleteConceptWrapAction=new XSDDeleteConceptWrapAction(this);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this,false);
  this.changeSubElementGroupAction=new XSDChangeToComplexTypeAction(this,true);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this,dataModelName);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this,dataModelName);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this,dataModelName);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this,dataModelName);
  this.setAnnotationSchematronAction=new XSDSetAnnotationSchematronAction(this,dataModelName);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
  this.deleteTypeDefinition=new XSDDeleteTypeDefinition(this);
  this.newComplexTypeAction=new XSDNewComplexTypeDefinition(this);
  this.newSimpleTypeAction=new XSDNewSimpleTypeDefinition(this);
  this.editComplexTypeAction=new XSDEditComplexTypeAction(this);
  this.setFacetMsgAction=new XSDSetFacetMessageAction(this);
  deleteConceptWrapAction.regisDelAction(XSDElementDeclarationImpl.class,deleteConceptAction);
  deleteConceptWrapAction.regisDelAction(XSDParticleImpl.class,deleteParticleAction);
  deleteConceptWrapAction.regisDelAction(XSDIdentityConstraintDefinitionImpl.class,deleteIdentityConstraintAction);
  deleteConceptWrapAction.regisDelAction(XSDXPathDefinitionImpl.class,deleteXPathAction);
  deleteConceptWrapAction.regisDelAction(null,deleteElementAction);
  deleteConceptWrapAction.regisDelAction(XSDComplexTypeDefinitionImpl.class,deleteTypeDefinition);
  deleteConceptWrapAction.regisDelAction(XSDSimpleTypeDefinitionImpl.class,deleteTypeDefinition);
}","protected void createActions(){
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.newBrowseItemAction=new XSDNewBrowseItemViewAction(this);
  this.deleteConceptWrapAction=new XSDDeleteConceptWrapAction(this);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this,false);
  this.changeSubElementGroupAction=new XSDChangeToComplexTypeAction(this,true);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this,dataModelName);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this,dataModelName);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationWrapWriteAction=new XSDSetAnnotationWrapWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this,dataModelName);
  this.setAnnotationWrapHiddenAction=new XSDSetAnnotationWrapHiddenAction(this,dataModelName);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this,dataModelName);
  this.setAnnotationSchematronAction=new XSDSetAnnotationSchematronAction(this,dataModelName);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
  this.deleteTypeDefinition=new XSDDeleteTypeDefinition(this);
  this.newComplexTypeAction=new XSDNewComplexTypeDefinition(this);
  this.newSimpleTypeAction=new XSDNewSimpleTypeDefinition(this);
  this.editComplexTypeAction=new XSDEditComplexTypeAction(this);
  this.setFacetMsgAction=new XSDSetFacetMessageAction(this);
  deleteConceptWrapAction.regisDelAction(XSDElementDeclarationImpl.class,deleteConceptAction);
  deleteConceptWrapAction.regisDelAction(XSDParticleImpl.class,deleteParticleAction);
  deleteConceptWrapAction.regisDelAction(XSDIdentityConstraintDefinitionImpl.class,deleteIdentityConstraintAction);
  deleteConceptWrapAction.regisDelAction(XSDXPathDefinitionImpl.class,deleteXPathAction);
  deleteConceptWrapAction.regisDelAction(null,deleteElementAction);
  deleteConceptWrapAction.regisDelAction(XSDComplexTypeDefinitionImpl.class,deleteTypeDefinition);
  deleteConceptWrapAction.regisDelAction(XSDSimpleTypeDefinitionImpl.class,deleteTypeDefinition);
}",0.9755617977528088
149069,"protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(new XSDNewConceptAction(this));
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object[] selectedObjs=selection.toArray();
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration && selectedObjs.length == 1) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=Util.checkConcept(decl);
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptAction);
      manager.add(newBrowseItemAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(new XSDNewConceptAction(this));
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    if (((XSDElementDeclaration)obj).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
      manager.add(setFacetMsgAction);
    }
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions2(manager);
  }
  if (obj instanceof XSDModelGroup) {
    manager.add(changeSubElementGroupAction);
  }
  if (obj instanceof XSDParticle && selectedObjs.length == 1) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        if (((XSDElementDeclaration)term).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
          manager.add(setFacetMsgAction);
        }
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition && selectedObjs.length == 1) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition && selectedObjs.length == 1) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition && selectedObjs.length == 1) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition && selectedObjs.length == 1) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation && selectedObjs.length == 1) {
    setAnnotationActions(manager);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInDeletableType(selectedObjs)) {
    deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.outPutDeleteActions() != null) {
    manager.add(deleteConceptWrapAction.outPutDeleteActions());
    if (deleteConceptWrapAction.checkOutAllConcept(selectedObjs))     manager.add(newBrowseItemAction);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(new XSDNewConceptAction(this));
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object[] selectedObjs=selection.toArray();
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration && selectedObjs.length == 1) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=Util.checkConcept(decl);
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptAction);
      manager.add(newBrowseItemAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(new XSDNewConceptAction(this));
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    if (((XSDElementDeclaration)obj).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
      manager.add(setFacetMsgAction);
    }
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions2(manager);
  }
  if (obj instanceof XSDModelGroup) {
    manager.add(changeSubElementGroupAction);
  }
  if (obj instanceof XSDParticle && selectedObjs.length == 1) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        if (((XSDElementDeclaration)term).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
          manager.add(setFacetMsgAction);
        }
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition && selectedObjs.length == 1) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition && selectedObjs.length == 1) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition && selectedObjs.length == 1) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition && selectedObjs.length == 1) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation && selectedObjs.length == 1) {
    setAnnotationActions(manager);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInDeletableType(selectedObjs)) {
    deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.outPutDeleteActions() != null) {
    manager.add(deleteConceptWrapAction.outPutDeleteActions());
    if (deleteConceptWrapAction.checkOutAllConcept(selectedObjs))     manager.add(newBrowseItemAction);
  }
  if (selectedObjs.length > 1 && setAnnotationWrapWriteAction.checkInWriteType(selectedObjs)) {
    manager.add(new Separator());
    manager.add(setAnnotationWrapWriteAction);
    manager.add(setAnnotationWrapHiddenAction);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.9744960463303264
149070,"public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)selection.getFirstElement();
    if (schema.getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace()))     return Status.CANCEL_STATUS;
    ArrayList customTypes=new ArrayList();
    for (Iterator iter=schema.getTypeDefinitions().iterator(); iter.hasNext(); ) {
      XSDTypeDefinition type=(XSDTypeDefinition)iter.next();
      if (type instanceof XSDSimpleTypeDefinition)       customTypes.add(type.getName());
    }
    ArrayList builtInTypes=new ArrayList();
    for (Iterator iter=schema.getSchemaForSchema().getTypeDefinitions().iterator(); iter.hasNext(); ) {
      XSDTypeDefinition type=(XSDTypeDefinition)iter.next();
      if (type instanceof XSDSimpleTypeDefinition)       builtInTypes.add(type.getName());
    }
    dialog=new SimpleTypeInputDialog(this,page.getSite().getShell(),""String_Node_Str"",customTypes,builtInTypes);
    dialog.setBlockOnOpen(true);
    int ret=dialog.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    XSDTypeDefinition current=typedef.getBaseTypeDefinition();
    if (builtIn) {
      typedef.setBaseTypeDefinition(schema.resolveSimpleTypeDefinition(schema.getSchemaForSchemaNamespace(),typeName));
    }
 else {
      XSDSimpleTypeDefinition std=schema.resolveSimpleTypeDefinition(typeName);
      if (!schema.getTypeDefinitions().contains(std)) {
        std.setBaseTypeDefinition(schema.resolveSimpleTypeDefinition(schema.getSchemaForSchemaNamespace(),""String_Node_Str""));
        schema.getContents().add(std);
      }
      typedef.setBaseTypeDefinition(std);
    }
    typedef.getFacetContents().removeAll(typedef.getFacetContents());
    typedef.updateElement();
    if (builtIn) {
      EList<XSDConstrainingFacet> constrainFacts=typedef.getBaseTypeDefinition().getFacetContents();
      for (      XSDConstrainingFacet fact : constrainFacts) {
        if (fact instanceof XSDPatternFacet) {
          XSDPatternFacet newFact=XSDSchemaBuildingTools.getXSDFactory().createXSDPatternFacet();
          newFact.setLexicalValue(((XSDPatternFacet)fact).getLexicalValue());
          typedef.getFacetContents().add(newFact);
        }
      }
      typedef.updateElement();
    }
    page.refresh();
    page.markDirty();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)selection.getFirstElement();
    ArrayList customTypes=new ArrayList();
    for (Iterator iter=schema.getTypeDefinitions().iterator(); iter.hasNext(); ) {
      XSDTypeDefinition type=(XSDTypeDefinition)iter.next();
      if (type instanceof XSDSimpleTypeDefinition)       customTypes.add(type.getName());
    }
    ArrayList builtInTypes=new ArrayList();
    for (Iterator iter=schema.getSchemaForSchema().getTypeDefinitions().iterator(); iter.hasNext(); ) {
      XSDTypeDefinition type=(XSDTypeDefinition)iter.next();
      if (type instanceof XSDSimpleTypeDefinition)       builtInTypes.add(type.getName());
    }
    dialog=new SimpleTypeInputDialog(this,page.getSite().getShell(),""String_Node_Str"",customTypes,builtInTypes);
    dialog.setBlockOnOpen(true);
    int ret=dialog.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    XSDTypeDefinition current=typedef.getBaseTypeDefinition();
    if (builtIn) {
      typedef.setBaseTypeDefinition(schema.resolveSimpleTypeDefinition(schema.getSchemaForSchemaNamespace(),typeName));
    }
 else {
      XSDSimpleTypeDefinition std=schema.resolveSimpleTypeDefinition(typeName);
      if (!schema.getTypeDefinitions().contains(std)) {
        std.setBaseTypeDefinition(schema.resolveSimpleTypeDefinition(schema.getSchemaForSchemaNamespace(),""String_Node_Str""));
        schema.getContents().add(std);
      }
      typedef.setBaseTypeDefinition(std);
    }
    typedef.getFacetContents().removeAll(typedef.getFacetContents());
    typedef.updateElement();
    if (builtIn) {
      EList<XSDConstrainingFacet> constrainFacts=typedef.getBaseTypeDefinition().getFacetContents();
      for (      XSDConstrainingFacet fact : constrainFacts) {
        if (fact instanceof XSDPatternFacet) {
          XSDPatternFacet newFact=XSDSchemaBuildingTools.getXSDFactory().createXSDPatternFacet();
          newFact.setLexicalValue(((XSDPatternFacet)fact).getLexicalValue());
          typedef.getFacetContents().add(newFact);
        }
      }
      typedef.updateElement();
    }
    page.refresh();
    page.markDirty();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.1568322981366459
149071,"public IStatus doAction(){
  try {
    ISelection selection=page.getTreeViewer().getSelection();
    std=(XSDSimpleTypeDefinition)((IStructuredSelection)selection).getFirstElement();
    if (facetName.equals(""String_Node_Str"")) {
      editPattern();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editEnumeration();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editLength();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editMinLength();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editMaxLength();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editTotalDigits();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editFractionDigits();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editMaxInclusive();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editMaxExclusive();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editMinInclusive();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editMinExclusive();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editWhiteSpace();
    }
 else {
      MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + facetName);
      return Status.CANCEL_STATUS;
    }
    std.updateElement();
    page.refresh();
    page.markDirty();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof XSDSimpleTypeDefinition)     std=(XSDSimpleTypeDefinition)selection.getFirstElement();
 else {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDSimpleTypeDefinition)         std=(XSDSimpleTypeDefinition)(tPath.getSegment(i));
      }
    }
    if (facetName.equals(""String_Node_Str"")) {
      editPattern();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editEnumeration();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editLength();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editMinLength();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editMaxLength();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editTotalDigits();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editFractionDigits();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editMaxInclusive();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editMaxExclusive();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editMinInclusive();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editMinExclusive();
    }
 else     if (facetName.equals(""String_Node_Str"")) {
      editWhiteSpace();
    }
 else {
      MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + facetName);
      return Status.CANCEL_STATUS;
    }
    std.updateElement();
    page.refresh();
    page.markDirty();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.8759923350670682
149072,"public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    AnnotationLanguageLabelsDialog dlg=new AnnotationLanguageLabelsDialog(struc.getDescriptions(),new AnnotationLabelDialogSelectionListener(page),page.getEditorSite().getShell(),""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    dlg.open();
    if (dlg.getReturnCode() == Window.OK) {
      struc.removeAllDescriptions();
      LinkedHashMap<String,String> descriptions=dlg.getDescriptionsMap();
      Set<String> isoCodes=descriptions.keySet();
      for (Iterator iter=isoCodes.iterator(); iter.hasNext(); ) {
        String isoCode=(String)iter.next();
        struc.setDescription(isoCode,descriptions.get(isoCode));
      }
    }
 else {
      return Status.CANCEL_STATUS;
    }
    if (struc.hasChanged()) {
      page.markDirty();
      page.refresh();
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure(xSDCom);
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    AnnotationLanguageLabelsDialog dlg=new AnnotationLanguageLabelsDialog(struc.getDescriptions(),new AnnotationLabelDialogSelectionListener(page),page.getEditorSite().getShell(),""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    dlg.open();
    if (dlg.getReturnCode() == Window.OK) {
      struc.removeAllDescriptions();
      LinkedHashMap<String,String> descriptions=dlg.getDescriptionsMap();
      Set<String> isoCodes=descriptions.keySet();
      for (Iterator iter=isoCodes.iterator(); iter.hasNext(); ) {
        String isoCode=(String)iter.next();
        struc.setDescription(isoCode,descriptions.get(isoCode));
      }
    }
 else {
      return Status.CANCEL_STATUS;
    }
    if (struc.hasChanged()) {
      page.markDirty();
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.8228395061728395
149073,"public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    sxid=new SimpleXpathInputDialog(page,""String_Node_Str"",""String_Node_Str"",struc.getForeignKey(),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        sxid.close();
      }
    }
,dataModelName);
    sxid.setBlockOnOpen(true);
    int ret=sxid.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setForeignKey(""String_Node_Str"".equals(sxid.getXpath()) ? null : sxid.getXpath().replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof XSDAnnotation)     xSDCom=(XSDAnnotation)selection.getFirstElement();
 else {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure(xSDCom);
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    sxid=new SimpleXpathInputDialog(page,""String_Node_Str"",""String_Node_Str"",struc.getForeignKey(),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        sxid.close();
      }
    }
,dataModelName);
    sxid.setBlockOnOpen(true);
    int ret=sxid.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setForeignKey(""String_Node_Str"".equals(sxid.getXpath()) ? null : sxid.getXpath().replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.8021143045920053
149074,"public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getForeignKeyInfos().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType,dataModelName);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setForeignKeyInfos(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure(xSDCom);
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getForeignKeyInfos().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType,dataModelName);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setForeignKeyInfos(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.8244473342002601
149075,"public IStatus doAction(){
  try {
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getHiddenAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationHidden_ActionType,dataModelName);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setAccessRole(dlg.getXPaths(),dlg.getRecursive(),(IStructuredContentProvider)page.getTreeViewer().getContentProvider(),""String_Node_Str"");
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure(xSDCom);
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getHiddenAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationHidden_ActionType,dataModelName);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setAccessRole(dlg.getXPaths(),dlg.getRecursive(),(IStructuredContentProvider)page.getTreeViewer().getContentProvider(),""String_Node_Str"");
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.8447276940903824
149076,"public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    AnnotationLanguageLabelsDialog dlg=new AnnotationLanguageLabelsDialog(struc.getLabels(),new AnnotationLabelDialogSelectionListener(page),page.getEditorSite().getShell(),""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    dlg.open();
    if (dlg.getReturnCode() == Window.OK) {
      struc.removeAllLabels();
      LinkedHashMap<String,String> descriptions=dlg.getDescriptionsMap();
      Set<String> isoCodes=descriptions.keySet();
      for (Iterator iter=isoCodes.iterator(); iter.hasNext(); ) {
        String isoCode=(String)iter.next();
        struc.setLabel(isoCode,descriptions.get(isoCode));
      }
    }
 else {
      return Status.CANCEL_STATUS;
    }
    if (struc.hasChanged()) {
      page.markDirty();
      page.refresh();
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure(xSDCom);
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    AnnotationLanguageLabelsDialog dlg=new AnnotationLanguageLabelsDialog(struc.getLabels(),new AnnotationLabelDialogSelectionListener(page),page.getEditorSite().getShell(),""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    dlg.open();
    if (dlg.getReturnCode() == Window.OK) {
      struc.removeAllLabels();
      LinkedHashMap<String,String> descriptions=dlg.getDescriptionsMap();
      Set<String> isoCodes=descriptions.keySet();
      for (Iterator iter=isoCodes.iterator(); iter.hasNext(); ) {
        String isoCode=(String)iter.next();
        struc.setLabel(isoCode,descriptions.get(isoCode));
      }
    }
 else {
      return Status.CANCEL_STATUS;
    }
    if (struc.hasChanged()) {
      page.markDirty();
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.8339575530586767
149077,"public IStatus doAction(){
  try {
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getSchematrons().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationSchematron_ActionType,dataModelName);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setSchematrons(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure(xSDCom);
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getSchematrons().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationSchematron_ActionType,dataModelName);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setSchematrons(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.8346699568167798
149078,"public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    InputDialog id=new InputDialog(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",struc.getSourceSystem(),new IInputValidator(){
      public String isValid(      String newText){
        return null;
      }
    }
);
    id.setBlockOnOpen(true);
    int ret=id.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setSourceSystem(""String_Node_Str"".equals(id.getValue()) ? null : id.getValue());
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure(xSDCom);
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    InputDialog id=new InputDialog(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",struc.getSourceSystem(),new IInputValidator(){
      public String isValid(      String newText){
        return null;
      }
    }
);
    id.setBlockOnOpen(true);
    int ret=id.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setSourceSystem(""String_Node_Str"".equals(id.getValue()) ? null : id.getValue());
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.8059377262853005
149079,"@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
  try {
    Util.getAjaxSubject();
  }
 catch (  Exception e1) {
    return;
  }
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
  try {
    if (!Util.getPort().existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK(Configuration.datacluster))).is_true()) {
      Util.getPort().putDataCluster(new WSPutDataCluster(new WSDataCluster(Configuration.datacluster,""String_Node_Str"",""String_Node_Str"")));
    }
    if (!Util.getPort().existsDataModel(new WSExistsDataModel(new WSDataModelPK(Configuration.datamodel))).is_true()) {
      Util.getPort().putDataModel(new WSPutDataModel(new WSDataModel(Configuration.datamodel,""String_Node_Str"",""String_Node_Str"")));
    }
  }
 catch (  Exception e) {
    String err=""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new ServletException(err);
  }
}","@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
  try {
    XtentisPort port=Util.getPort(null,null,Util._FORCE_RMI_);
    if (!port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK(Configuration.datacluster))).is_true()) {
      port.putDataCluster(new WSPutDataCluster(new WSDataCluster(Configuration.datacluster,""String_Node_Str"",""String_Node_Str"")));
    }
    if (!port.existsDataModel(new WSExistsDataModel(new WSDataModelPK(Configuration.datamodel))).is_true()) {
      port.putDataModel(new WSPutDataModel(new WSDataModel(Configuration.datamodel,""String_Node_Str"",""String_Node_Str"")));
    }
  }
 catch (  Exception e) {
    String err=""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new ServletException(err);
  }
}",0.2139830508474576
149080,"public WSRoutingOrderV2(java.lang.String name,com.amalto.workbench.webservices.WSRoutingOrderV2Status status,long timeCreated,long timeScheduled,long timeLastRunStarted,long timeLastRunCompleted,com.amalto.workbench.webservices.WSItemPK wsItemPK,java.lang.String serviceJNDI,java.lang.String serviceParameters,java.lang.String message){
  this.name=name;
  this.status=status;
  this.timeCreated=timeCreated;
  this.timeScheduled=timeScheduled;
  this.timeLastRunStarted=timeLastRunStarted;
  this.timeLastRunCompleted=timeLastRunCompleted;
  this.wsItemPK=wsItemPK;
  this.serviceJNDI=serviceJNDI;
  this.serviceParameters=serviceParameters;
  this.message=message;
}","public WSRoutingOrderV2(java.lang.String name,com.amalto.workbench.webservices.WSRoutingOrderV2Status status,long timeCreated,long timeScheduled,long timeLastRunStarted,long timeLastRunCompleted,com.amalto.workbench.webservices.WSItemPK wsItemPK,java.lang.String serviceJNDI,java.lang.String serviceParameters,java.lang.String message,java.lang.String bindingUniverseName){
  this.name=name;
  this.status=status;
  this.timeCreated=timeCreated;
  this.timeScheduled=timeScheduled;
  this.timeLastRunStarted=timeLastRunStarted;
  this.timeLastRunCompleted=timeLastRunCompleted;
  this.wsItemPK=wsItemPK;
  this.serviceJNDI=serviceJNDI;
  this.serviceParameters=serviceParameters;
  this.message=message;
  this.bindingUniverseName=bindingUniverseName;
}",0.94018296973962
149081,"public void doSerialize(Object obj,XMLWriter writer,SOAPSerializationContext context) throws Exception {
  com.amalto.workbench.webservices.WSRoutingOrderV2 instance=(com.amalto.workbench.webservices.WSRoutingOrderV2)obj;
  if (instance.getName() == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getName(),ns1_name_QNAME,null,writer,context);
  if (instance.getStatus() == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns2myns2_WSRoutingOrderV2Status__WSRoutingOrderV2Status_LiteralSerializer.serialize(instance.getStatus(),ns1_status_QNAME,null,writer,context);
  if (new Long(instance.getTimeCreated()) == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns3_myns3__long__long_Long_Serializer.serialize(new Long(instance.getTimeCreated()),ns1_timeCreated_QNAME,null,writer,context);
  if (new Long(instance.getTimeScheduled()) == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns3_myns3__long__long_Long_Serializer.serialize(new Long(instance.getTimeScheduled()),ns1_timeScheduled_QNAME,null,writer,context);
  if (new Long(instance.getTimeLastRunStarted()) == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns3_myns3__long__long_Long_Serializer.serialize(new Long(instance.getTimeLastRunStarted()),ns1_timeLastRunStarted_QNAME,null,writer,context);
  if (new Long(instance.getTimeLastRunCompleted()) == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns3_myns3__long__long_Long_Serializer.serialize(new Long(instance.getTimeLastRunCompleted()),ns1_timeLastRunCompleted_QNAME,null,writer,context);
  if (instance.getWsItemPK() == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns2_myWSItemPK_LiteralSerializer.serialize(instance.getWsItemPK(),ns1_wsItemPK_QNAME,null,writer,context);
  if (instance.getServiceJNDI() == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getServiceJNDI(),ns1_serviceJNDI_QNAME,null,writer,context);
  ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getServiceParameters(),ns1_serviceParameters_QNAME,null,writer,context);
  if (instance.getMessage() != null) {
    ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getMessage(),ns1_message_QNAME,null,writer,context);
  }
}","public void doSerialize(Object obj,XMLWriter writer,SOAPSerializationContext context) throws Exception {
  com.amalto.workbench.webservices.WSRoutingOrderV2 instance=(com.amalto.workbench.webservices.WSRoutingOrderV2)obj;
  if (instance.getName() == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getName(),ns1_name_QNAME,null,writer,context);
  if (instance.getStatus() == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns2myns2_WSRoutingOrderV2Status__WSRoutingOrderV2Status_LiteralSerializer.serialize(instance.getStatus(),ns1_status_QNAME,null,writer,context);
  if (new Long(instance.getTimeCreated()) == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns3_myns3__long__long_Long_Serializer.serialize(new Long(instance.getTimeCreated()),ns1_timeCreated_QNAME,null,writer,context);
  if (new Long(instance.getTimeScheduled()) == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns3_myns3__long__long_Long_Serializer.serialize(new Long(instance.getTimeScheduled()),ns1_timeScheduled_QNAME,null,writer,context);
  if (new Long(instance.getTimeLastRunStarted()) == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns3_myns3__long__long_Long_Serializer.serialize(new Long(instance.getTimeLastRunStarted()),ns1_timeLastRunStarted_QNAME,null,writer,context);
  if (new Long(instance.getTimeLastRunCompleted()) == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns3_myns3__long__long_Long_Serializer.serialize(new Long(instance.getTimeLastRunCompleted()),ns1_timeLastRunCompleted_QNAME,null,writer,context);
  if (instance.getWsItemPK() == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns2_myWSItemPK_LiteralSerializer.serialize(instance.getWsItemPK(),ns1_wsItemPK_QNAME,null,writer,context);
  if (instance.getServiceJNDI() == null) {
    throw new SerializationException(""String_Node_Str"");
  }
  ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getServiceJNDI(),ns1_serviceJNDI_QNAME,null,writer,context);
  ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getServiceParameters(),ns1_serviceParameters_QNAME,null,writer,context);
  if (instance.getMessage() != null) {
    ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getMessage(),ns1_message_QNAME,null,writer,context);
  }
  if (instance.getBindingUniverseName() != null) {
    ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getBindingUniverseName(),ns1_bindingUniverseName_QNAME,null,writer,context);
  }
}",0.9598145285935084
149082,"public Object doDeserialize(XMLReader reader,SOAPDeserializationContext context) throws Exception {
  com.amalto.workbench.webservices.WSRoutingOrderV2 instance=new com.amalto.workbench.webservices.WSRoutingOrderV2();
  Object member=null;
  QName elementName;
  List values;
  Object value;
  reader.nextElementContent();
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_name_QNAME)) {
      member=ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_name_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setName((java.lang.String)member);
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_name_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_status_QNAME)) {
      member=ns2myns2_WSRoutingOrderV2Status__WSRoutingOrderV2Status_LiteralSerializer.deserialize(ns1_status_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setStatus((com.amalto.workbench.webservices.WSRoutingOrderV2Status)member);
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_status_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_timeCreated_QNAME)) {
      member=ns3_myns3__long__long_Long_Serializer.deserialize(ns1_timeCreated_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setTimeCreated(((Long)member).longValue());
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_timeCreated_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_timeScheduled_QNAME)) {
      member=ns3_myns3__long__long_Long_Serializer.deserialize(ns1_timeScheduled_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setTimeScheduled(((Long)member).longValue());
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_timeScheduled_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_timeLastRunStarted_QNAME)) {
      member=ns3_myns3__long__long_Long_Serializer.deserialize(ns1_timeLastRunStarted_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setTimeLastRunStarted(((Long)member).longValue());
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_timeLastRunStarted_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_timeLastRunCompleted_QNAME)) {
      member=ns3_myns3__long__long_Long_Serializer.deserialize(ns1_timeLastRunCompleted_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setTimeLastRunCompleted(((Long)member).longValue());
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_timeLastRunCompleted_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_wsItemPK_QNAME)) {
      member=ns2_myWSItemPK_LiteralSerializer.deserialize(ns1_wsItemPK_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setWsItemPK((com.amalto.workbench.webservices.WSItemPK)member);
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_wsItemPK_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_serviceJNDI_QNAME)) {
      member=ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_serviceJNDI_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setServiceJNDI((java.lang.String)member);
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_serviceJNDI_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_serviceParameters_QNAME)) {
      member=ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_serviceParameters_QNAME,reader,context);
      instance.setServiceParameters((java.lang.String)member);
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_serviceParameters_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_message_QNAME)) {
      member=ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_message_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setMessage((java.lang.String)member);
      reader.nextElementContent();
    }
  }
  XMLReaderUtil.verifyReaderState(reader,XMLReader.END);
  return (Object)instance;
}","public Object doDeserialize(XMLReader reader,SOAPDeserializationContext context) throws Exception {
  com.amalto.workbench.webservices.WSRoutingOrderV2 instance=new com.amalto.workbench.webservices.WSRoutingOrderV2();
  Object member=null;
  QName elementName;
  List values;
  Object value;
  reader.nextElementContent();
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_name_QNAME)) {
      member=ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_name_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setName((java.lang.String)member);
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_name_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_status_QNAME)) {
      member=ns2myns2_WSRoutingOrderV2Status__WSRoutingOrderV2Status_LiteralSerializer.deserialize(ns1_status_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setStatus((com.amalto.workbench.webservices.WSRoutingOrderV2Status)member);
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_status_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_timeCreated_QNAME)) {
      member=ns3_myns3__long__long_Long_Serializer.deserialize(ns1_timeCreated_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setTimeCreated(((Long)member).longValue());
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_timeCreated_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_timeScheduled_QNAME)) {
      member=ns3_myns3__long__long_Long_Serializer.deserialize(ns1_timeScheduled_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setTimeScheduled(((Long)member).longValue());
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_timeScheduled_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_timeLastRunStarted_QNAME)) {
      member=ns3_myns3__long__long_Long_Serializer.deserialize(ns1_timeLastRunStarted_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setTimeLastRunStarted(((Long)member).longValue());
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_timeLastRunStarted_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_timeLastRunCompleted_QNAME)) {
      member=ns3_myns3__long__long_Long_Serializer.deserialize(ns1_timeLastRunCompleted_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setTimeLastRunCompleted(((Long)member).longValue());
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_timeLastRunCompleted_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_wsItemPK_QNAME)) {
      member=ns2_myWSItemPK_LiteralSerializer.deserialize(ns1_wsItemPK_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setWsItemPK((com.amalto.workbench.webservices.WSItemPK)member);
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_wsItemPK_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_serviceJNDI_QNAME)) {
      member=ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_serviceJNDI_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setServiceJNDI((java.lang.String)member);
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_serviceJNDI_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_serviceParameters_QNAME)) {
      member=ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_serviceParameters_QNAME,reader,context);
      instance.setServiceParameters((java.lang.String)member);
      reader.nextElementContent();
    }
 else {
      throw new DeserializationException(""String_Node_Str"",new Object[]{ns1_serviceParameters_QNAME,reader.getName()});
    }
  }
 else {
    throw new DeserializationException(""String_Node_Str"",reader.getName().toString());
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_message_QNAME)) {
      member=ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_message_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setMessage((java.lang.String)member);
      reader.nextElementContent();
    }
  }
  elementName=reader.getName();
  if (reader.getState() == XMLReader.START) {
    if (elementName.equals(ns1_bindingUniverseName_QNAME)) {
      member=ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_bindingUniverseName_QNAME,reader,context);
      if (member == null) {
        throw new DeserializationException(""String_Node_Str"");
      }
      instance.setBindingUniverseName((java.lang.String)member);
      reader.nextElementContent();
    }
  }
  XMLReaderUtil.verifyReaderState(reader,XMLReader.END);
  return (Object)instance;
}",0.9667627011453868
149083,"/** 
 * Model Listener
 */
public void handleEvent(int type,TreeObject parent,TreeObject child){
  TreeObject xobject=(TreeObject)((XObjectEditorInput)this.getEditorInput()).getModel();
switch (type) {
case IXObjectModelListener.DELETE:
    if (xobject.equals(child))     this.close(false);
  break;
case IXObjectModelListener.SAVE:
if (saveInProgress) this.editorDirtyStateChanged();
 else break;
case IXObjectModelListener.UPDATE:
if (xobject.equals(child)) {
AFormPage activePage=((AFormPage)getActivePageInstance());
if (activePage == null) {
  int editPos=pages.indexOf(xmlEditor);
  if (editPos >= 1) {
    activePage=(AFormPage)pages.get(editPos - 1);
  }
  xmlEditor.refresh();
}
activePage.refreshPage();
}
default :
}
}","/** 
 * Model Listener
 */
public void handleEvent(int type,TreeObject parent,TreeObject child){
  TreeObject xobject=(TreeObject)((XObjectEditorInput)this.getEditorInput()).getModel();
switch (type) {
case IXObjectModelListener.DELETE:
    if (xobject.equals(child))     this.close(false);
  break;
case IXObjectModelListener.SAVE:
if (saveInProgress) this.editorDirtyStateChanged();
 else break;
case IXObjectModelListener.UPDATE:
if (xobject.equals(child)) {
AFormPage activePage=((AFormPage)getActivePageInstance());
if (activePage == null) {
  int editPos=pages.indexOf(xmlEditor);
  if (editPos >= 1) {
    activePage=(AFormPage)pages.get(editPos - 1);
  }
  xmlEditor.refresh();
}
}
default :
}
}",0.9818435754189944
149084,"private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      StringBuffer desc=new StringBuffer();
      for (      String lan : labels.keySet()) {
        desc.append(""String_Node_Str"" + lan.toUpperCase() + ""String_Node_Str""+ decl.getName()+ ""String_Node_Str"");
      }
      view.setDescription(desc.toString());
      wrap.setWsView(view);
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      WSDeleteView delView=new WSDeleteView();
      delView.setWsViewPK(viewPk);
      WSGetView getView=new WSGetView();
      getView.setWsViewPK(viewPk);
      try {
        port.getView(getView);
        port.deleteView(delView);
      }
 catch (      RemoteException ex) {
      }
      port.putView(wrap);
    }
  }
}","private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      StringBuffer desc=new StringBuffer();
      for (      String lan : labels.keySet()) {
        desc.append(""String_Node_Str"" + lan.toUpperCase() + ""String_Node_Str""+ labels.get(lan)+ ""String_Node_Str"");
      }
      view.setDescription(desc.toString());
      wrap.setWsView(view);
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      WSDeleteView delView=new WSDeleteView();
      delView.setWsViewPK(viewPk);
      WSGetView getView=new WSGetView();
      getView.setWsViewPK(viewPk);
      try {
        port.getView(getView);
        port.deleteView(delView);
      }
 catch (      RemoteException ex) {
      }
      port.putView(wrap);
    }
  }
}",0.991810737033667
149085,"private void createSchemaTreeComp(Composite parent){
  Composite schemaSash=new Composite(parent,SWT.NONE);
  schemaSash.setLayout(new GridLayout());
  schemaSash.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  schemaSash.setBackground(sash.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  Label title=new Label(schemaSash,SWT.VERTICAL);
  title.setText(""String_Node_Str"");
  title.setBackground(sash.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  title.setFont(FontUtils.getBoldFont(title.getFont()));
  Color blue=new Color(schemaSash.getDisplay(),0,0,255);
  title.setForeground(blue);
  title.setBackground(sash.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  Label des=new Label(schemaSash,SWT.VERTICAL);
  des.setText(""String_Node_Str"");
  des.setBackground(sash.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  viewer=new TreeViewer(schemaSash,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  drillDownAdapter=new DrillDownAdapter(viewer);
  provider=new XSDTreeContentProvider(this.getSite(),xsdSchema);
  viewer.setContentProvider(provider);
  viewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent e){
      sel=(StructuredSelection)e.getSelection();
    }
  }
);
  viewer.getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      isSchemaSelected=true;
    }
  }
);
  viewer.setLabelProvider(new XSDTreeLabelProvider());
  viewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDFacet)       return 100;
      if (element instanceof XSDIdentityConstraintDefinition) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)element;
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         return 300;
 else         if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.KEY_LITERAL))         return 301;
 else         return 302;
      }
      return 200;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  viewer.setInput(this.getSite());
  viewer.getTree().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
      if ((e.stateMask == 0) && (e.keyCode == SWT.DEL)) {
        if (deleteConceptWrapAction.checkInDeletableType(selection.toArray())) {
          deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
          deleteConceptWrapAction.run();
        }
 else {
          MessageDialog.openWarning(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
}","private void createSchemaTreeComp(Composite parent){
  Composite schemaSash=new Composite(parent,SWT.NONE);
  schemaSash.setLayout(new GridLayout());
  schemaSash.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  schemaSash.setBackground(sash.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  Label title=new Label(schemaSash,SWT.VERTICAL);
  title.setText(""String_Node_Str"" + modelName);
  title.setBackground(sash.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  title.setFont(FontUtils.getBoldFont(title.getFont()));
  Color blue=new Color(schemaSash.getDisplay(),0,0,255);
  title.setForeground(blue);
  title.setBackground(sash.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  Label des=new Label(schemaSash,SWT.VERTICAL);
  des.setText(""String_Node_Str"" + modelName + ""String_Node_Str"");
  des.setBackground(sash.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  viewer=new TreeViewer(schemaSash,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  drillDownAdapter=new DrillDownAdapter(viewer);
  provider=new XSDTreeContentProvider(this.getSite(),xsdSchema);
  viewer.setContentProvider(provider);
  viewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent e){
      sel=(StructuredSelection)e.getSelection();
    }
  }
);
  viewer.getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      isSchemaSelected=true;
    }
  }
);
  viewer.setLabelProvider(new XSDTreeLabelProvider());
  viewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDFacet)       return 100;
      if (element instanceof XSDIdentityConstraintDefinition) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)element;
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         return 300;
 else         if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.KEY_LITERAL))         return 301;
 else         return 302;
      }
      return 200;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  viewer.setInput(this.getSite());
  viewer.getTree().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
      if ((e.stateMask == 0) && (e.keyCode == SWT.DEL)) {
        if (deleteConceptWrapAction.checkInDeletableType(selection.toArray())) {
          deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
          deleteConceptWrapAction.run();
        }
 else {
          MessageDialog.openWarning(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
}",0.9927007299270072
149086,"public DataModelMainPage(FormEditor editor){
  super(editor,DataModelMainPage.class.getName(),""String_Node_Str"" + ((XObjectEditorInput)editor.getEditorInput()).getName() + Util.getRevision((TreeObject)((XObjectEditorInput)editor.getEditorInput()).getModel()));
  this.dataModelName=((XObjectEditorInput)editor.getEditorInput()).getName();
  this.editor=(XObjectEditor)editor;
}","public DataModelMainPage(FormEditor editor){
  super(editor,DataModelMainPage.class.getName(),""String_Node_Str"" + ((XObjectEditorInput)editor.getEditorInput()).getName() + Util.getRevision((TreeObject)((XObjectEditorInput)editor.getEditorInput()).getModel()));
  modelName=((XObjectEditorInput)editor.getEditorInput()).getName();
  this.dataModelName=((XObjectEditorInput)editor.getEditorInput()).getName();
  this.editor=(XObjectEditor)editor;
}",0.9161603888213852
149087,"@Override public void widgetSelected(final SelectionEvent e){
  if (moveButton.getText().equals(""String_Node_Str"")) {
    sash.setWeights(new int[]{28,1,0});
    moveButton.setText(""String_Node_Str"");
    moveButton.setToolTipText(""String_Node_Str"");
  }
 else   if (moveButton.getText().equals(""String_Node_Str"")) {
    sash.setWeights(new int[]{14,1,14});
    moveButton.setText(""String_Node_Str"");
    moveButton.setToolTipText(""String_Node_Str"");
  }
}","@Override public void widgetSelected(SelectionEvent e){
  FileDialog fd=new FileDialog(getSite().getShell(),SWT.SAVE);
  fd.setFilterExtensions(new String[]{""String_Node_Str""});
  fd.setText(""String_Node_Str"");
  String filename=fd.open();
  if (filename == null)   return;
  inferXsdFromDataModule(filename);
}",0.2998696219035202
149088,"private void createTypeTreeComp(Composite parent){
  Composite TypeSash=new Composite(parent,SWT.NONE);
  TypeSash.setLayout(new GridLayout());
  TypeSash.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  TypeSash.setBackground(sash.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  Label title=new Label(TypeSash,SWT.VERTICAL);
  title.setText(""String_Node_Str"");
  title.setFont(FontUtils.getBoldFont(title.getFont()));
  Color blue=new Color(TypeSash.getDisplay(),0,0,255);
  title.setForeground(blue);
  title.setBackground(sash.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  Label des=new Label(TypeSash,SWT.VERTICAL);
  des.setText(""String_Node_Str"");
  des.setBackground(sash.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  typesViewer=new TreeViewer(TypeSash,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  typesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  typesDrillDownAdapter=new DrillDownAdapter(viewer);
  typesProvider=new TypesContentProvider(this.getSite(),xsdSchema);
  typesViewer.setContentProvider(typesProvider);
  typesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent e){
    }
  }
);
  typesViewer.getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      isSchemaSelected=false;
    }
  }
);
  typesViewer.setLabelProvider(new TypesLabelProvider());
  typesViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDFacet)       return 100;
      if (element instanceof XSDSimpleTypeDefinition) {
        return 102;
      }
 else       if (element instanceof XSDComplexTypeDefinition) {
        return 101;
      }
      return 200;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  typesViewer.setInput(this.getSite());
  typesViewer.getTree().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      IStructuredSelection selection=((IStructuredSelection)typesViewer.getSelection());
      if ((e.stateMask == 0) && (e.keyCode == SWT.DEL)) {
        deleteConceptWrapAction.regisExtraClassToDel(XSDComplexTypeDefinitionImpl.class);
        if (deleteConceptWrapAction.checkInDeletableType(selection.toArray())) {
          deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
          deleteConceptWrapAction.run();
        }
 else {
          deleteConceptWrapAction.clearExtraClassToDel();
          deleteConceptWrapAction.regisExtraClassToDel(XSDSimpleTypeDefinitionImpl.class);
          if (deleteConceptWrapAction.checkInDeletableType(selection.toArray())) {
            deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
            deleteConceptWrapAction.run();
          }
 else {
            MessageDialog.openWarning(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          }
        }
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
}","private void createTypeTreeComp(Composite parent){
  Composite TypeSash=new Composite(parent,SWT.NONE);
  TypeSash.setLayout(new GridLayout());
  TypeSash.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  TypeSash.setBackground(sash.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  Label title=new Label(TypeSash,SWT.VERTICAL);
  title.setText(""String_Node_Str"");
  title.setFont(FontUtils.getBoldFont(title.getFont()));
  Color blue=new Color(TypeSash.getDisplay(),0,0,255);
  title.setForeground(blue);
  title.setBackground(sash.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  Label des=new Label(TypeSash,SWT.VERTICAL);
  des.setText(""String_Node_Str"" + modelName);
  des.setBackground(sash.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  typesViewer=new TreeViewer(TypeSash,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  typesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  typesDrillDownAdapter=new DrillDownAdapter(viewer);
  typesProvider=new TypesContentProvider(this.getSite(),xsdSchema);
  typesViewer.setContentProvider(typesProvider);
  typesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent e){
    }
  }
);
  typesViewer.getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      isSchemaSelected=false;
    }
  }
);
  typesViewer.setLabelProvider(new TypesLabelProvider());
  typesViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDFacet)       return 100;
      if (element instanceof XSDSimpleTypeDefinition) {
        return 102;
      }
 else       if (element instanceof XSDComplexTypeDefinition) {
        return 101;
      }
      return 200;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  typesViewer.setInput(this.getSite());
  typesViewer.getTree().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      IStructuredSelection selection=((IStructuredSelection)typesViewer.getSelection());
      if ((e.stateMask == 0) && (e.keyCode == SWT.DEL)) {
        deleteConceptWrapAction.regisExtraClassToDel(XSDComplexTypeDefinitionImpl.class);
        if (deleteConceptWrapAction.checkInDeletableType(selection.toArray())) {
          deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
          deleteConceptWrapAction.run();
        }
 else {
          deleteConceptWrapAction.clearExtraClassToDel();
          deleteConceptWrapAction.regisExtraClassToDel(XSDSimpleTypeDefinitionImpl.class);
          if (deleteConceptWrapAction.checkInDeletableType(selection.toArray())) {
            deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
            deleteConceptWrapAction.run();
          }
 else {
            MessageDialog.openWarning(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          }
        }
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
}",0.9980909958638244
149089,"/** 
 * checkup the  configuration
 * @throws XtentisException
 * @ejb.interface-method view-type = ""local""
 * @ejb.facade-method
 */
public boolean checkConfigure(String conf) throws com.amalto.core.util.XtentisException {
  try {
    Document doc=Util.parse(conf);
    Util.validate(doc.getDocumentElement(),getConfigurationSchema());
    start();
    configuration=(SvnConfiguration)Unmarshaller.unmarshal(SvnConfiguration.class,new InputSource(new StringReader(conf)));
    new SvnHandler(configuration).list(""String_Node_Str"",null);
  }
 catch (  Exception e) {
    String err=""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new XtentisException(err);
  }
  return true;
}","/** 
 * checkup the  configuration
 * @throws XtentisException
 * @ejb.interface-method view-type = ""local""
 * @ejb.facade-method
 */
public boolean checkConfigure(String conf) throws com.amalto.core.util.XtentisException {
  try {
    Document doc=Util.parse(conf);
    Util.validate(doc.getDocumentElement(),getConfigurationSchema());
    configuration=(SvnConfiguration)Unmarshaller.unmarshal(SvnConfiguration.class,new InputSource(new StringReader(conf)));
    start();
    new SvnHandler(configuration).list(""String_Node_Str"",null);
  }
 catch (  Exception e) {
    String err=""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new XtentisException(err);
  }
  return true;
}",0.9836888331242158
149090,"protected void createActions(){
  this.newConceptAction=new XSDNewConceptAction(this);
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.newBrowseItemAction=new XSDNewBrowseItemViewAction(this);
  this.deleteConceptWrapAction=new XSDDeleteConceptWrapAction(this);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this,dataModelName);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this,dataModelName);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this,dataModelName);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this,dataModelName);
  this.setAnnotationSchematronAction=new XSDSetAnnotationSchematronAction(this,dataModelName);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
  this.deleteTypeDefinition=new XSDDeleteTypeDefinition(this);
  this.newComplexTypeAction=new XSDNewComplexTypeDefinition(this);
  this.newSimpleTypeAction=new XSDNewSimpleTypeDefinition(this);
  this.editComplexTypeAction=new XSDEditComplexTypeAction(this);
  this.setFacetMsgAction=new XSDSetFacetMessageAction(this);
  deleteConceptWrapAction.regisDelAction(XSDElementDeclarationImpl.class,deleteConceptAction);
  deleteConceptWrapAction.regisDelAction(XSDParticleImpl.class,deleteParticleAction);
  deleteConceptWrapAction.regisDelAction(XSDIdentityConstraintDefinitionImpl.class,deleteIdentityConstraintAction);
  deleteConceptWrapAction.regisDelAction(XSDXPathDefinitionImpl.class,deleteXPathAction);
  deleteConceptWrapAction.regisDelAction(null,deleteElementAction);
  deleteConceptWrapAction.regisDelAction(XSDComplexTypeDefinitionImpl.class,deleteTypeDefinition);
  deleteConceptWrapAction.regisDelAction(XSDSimpleTypeDefinitionImpl.class,deleteTypeDefinition);
}","protected void createActions(){
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.newBrowseItemAction=new XSDNewBrowseItemViewAction(this);
  this.deleteConceptWrapAction=new XSDDeleteConceptWrapAction(this);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this,dataModelName);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this,dataModelName);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this,dataModelName);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this,dataModelName);
  this.setAnnotationSchematronAction=new XSDSetAnnotationSchematronAction(this,dataModelName);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
  this.deleteTypeDefinition=new XSDDeleteTypeDefinition(this);
  this.newComplexTypeAction=new XSDNewComplexTypeDefinition(this);
  this.newSimpleTypeAction=new XSDNewSimpleTypeDefinition(this);
  this.editComplexTypeAction=new XSDEditComplexTypeAction(this);
  this.setFacetMsgAction=new XSDSetFacetMessageAction(this);
  deleteConceptWrapAction.regisDelAction(XSDElementDeclarationImpl.class,deleteConceptAction);
  deleteConceptWrapAction.regisDelAction(XSDParticleImpl.class,deleteParticleAction);
  deleteConceptWrapAction.regisDelAction(XSDIdentityConstraintDefinitionImpl.class,deleteIdentityConstraintAction);
  deleteConceptWrapAction.regisDelAction(XSDXPathDefinitionImpl.class,deleteXPathAction);
  deleteConceptWrapAction.regisDelAction(null,deleteElementAction);
  deleteConceptWrapAction.regisDelAction(XSDComplexTypeDefinitionImpl.class,deleteTypeDefinition);
  deleteConceptWrapAction.regisDelAction(XSDSimpleTypeDefinitionImpl.class,deleteTypeDefinition);
}",0.9919461121686924
149091,"public void doubleClick(DoubleClickEvent event){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  int elem=isTopElement(selection.getFirstElement());
  if (elem == 0) {
    editConceptAction.run();
  }
 else   if (elem == 1) {
    editElementAction.run();
  }
}","public void doubleClick(DoubleClickEvent event){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  int elem=getElementType(selection.getFirstElement());
switch (elem) {
case 0:
    editConceptAction.run();
  break;
case 1:
editElementAction.run();
break;
case 2:
newComplexTypeAction.run();
break;
case 3:
editIdentityConstraintAction.run();
break;
case 4:
editXPathAction.run();
break;
case 5:
changeBaseTypeAction.run();
break;
case 6:
setAnnotationDescriptionsAction.run();
break;
case 7:
editParticleAction.run();
break;
case -1:
if (drillDownAdapter.canGoInto() == true) drillDownAdapter.goInto();
}
}",0.3476394849785407
149092,"private void hookDoubleClickAction(){
  viewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
      int elem=isTopElement(selection.getFirstElement());
      if (elem == 0) {
        editConceptAction.run();
      }
 else       if (elem == 1) {
        editElementAction.run();
      }
    }
  }
);
}","private void hookDoubleClickAction(){
  viewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
      int elem=getElementType(selection.getFirstElement());
switch (elem) {
case 0:
        editConceptAction.run();
      break;
case 1:
    editElementAction.run();
  break;
case 2:
newComplexTypeAction.run();
break;
case 3:
editIdentityConstraintAction.run();
break;
case 4:
editXPathAction.run();
break;
case 5:
changeBaseTypeAction.run();
break;
case 6:
setAnnotationDescriptionsAction.run();
break;
case 7:
editParticleAction.run();
break;
case -1:
if (drillDownAdapter.canGoInto() == true) drillDownAdapter.goInto();
}
}
}
);
}",0.4597701149425287
149093,"public void mouseUp(MouseEvent e){
  Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
  if (specification == null) {
    specification=role.new Specification();
    role.getSpecifications().put(objectTypesCombo.getText(),specification);
  }
  instancesComposite.setVisible(!isAdminButton.getSelection());
  specification.setAdmin(isAdminButton.getSelection());
  if (!isAdminButton.getSelection()) {
    instancesViewer.setInput(specification.getInstances());
    instancesViewer.setSelection(null);
  }
  paramsContainerComposite.setVisible(false);
  markDirty();
}","public void mouseUp(MouseEvent e){
  Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
  if (specification == null) {
    specification=role.new Specification();
    role.getSpecifications().put(objectTypesCombo.getText(),specification);
  }
  instancesComposite.setVisible(!isAdminButton.getSelection());
  specification.setAdmin(isAdminButton.getSelection());
  if (!isAdminButton.getSelection()) {
    inputList=specification.getInstances();
    instancesViewer.setInput(inputList);
    instancesViewer.setSelection(null);
  }
  paramsContainerComposite.setVisible(false);
  markDirty();
}",0.934730056406124
149094,"private void refreshViewParameters(String instanceName){
  paramsLabel.setText(""String_Node_Str"" + instanceName);
  HashSet<String> parameters=role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).getParameters();
  java.util.List<Line> lines=new ArrayList<Line>();
  for (Iterator iter=parameters.iterator(); iter.hasNext(); ) {
    String marshalledWC=(String)iter.next();
    Line line=new Line(conditionsColumns,Util.convertRoleWhereCondition(RoleWhereCondition.parse(marshalledWC)));
    lines.add(line);
  }
  conditionViewer.getViewer().setInput(lines);
}","private void refreshViewParameters(String instanceName){
  paramsLabel.setText(""String_Node_Str"" + instanceName);
  HashSet<String> parameters=role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).getParameters();
  java.util.List<Line> lines=new ArrayList<Line>();
  for (Iterator iter=parameters.iterator(); iter.hasNext(); ) {
    String marshalledWC=(String)iter.next();
    if (marshalledWC != null) {
      Line line=new Line(conditionsColumns,Util.convertRoleWhereCondition(RoleWhereCondition.parse(marshalledWC)));
      lines.add(line);
    }
  }
  conditionViewer.getViewer().setInput(lines);
}",0.938610662358643
149095,"protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH);
    addInstanceButton.setImage(ImageCache.getCreatedImage(EImage.ADD_OBJ.getPath()));
    addInstanceButton.setToolTipText(""String_Node_Str"");
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          RoleMenuParameters menuParameters=new RoleMenuParameters();
          menuParameters.setParentID(""String_Node_Str"");
          menuParameters.setPosition(1);
          String instanceName=instanceNameCombo.getText();
          specification.getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
        }
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION | SWT.MULTI);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.NULL);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
wrap.Wrap(this,instancesViewer);
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}","protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          inputList=specification.getInstances();
          instancesViewer.setInput(inputList);
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          inputList=specification.getInstances();
          instancesViewer.setInput(inputList);
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH);
    addInstanceButton.setImage(ImageCache.getCreatedImage(EImage.ADD_OBJ.getPath()));
    addInstanceButton.setToolTipText(""String_Node_Str"");
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          RoleMenuParameters menuParameters=new RoleMenuParameters();
          menuParameters.setParentID(""String_Node_Str"");
          menuParameters.setPosition(1);
          String instanceName=instanceNameCombo.getText();
          specification.getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
        }
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION | SWT.MULTI);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    TableColumn nameCol=new TableColumn(table,SWT.LEFT);
    nameCol.setText(INSTANCE_NAME);
    nameCol.addSelectionListener(new SelectionAdapter(){
      boolean sortType=true;
      public void widgetSelected(      SelectionEvent e){
        sortType=!sortType;
        instancesViewer.setSorter(sortType ? new InstanceSorter(InstanceSorter.NAME) : new InstanceSorter(-InstanceSorter.NAME));
      }
    }
);
    TableColumn accessCol=new TableColumn(table,SWT.LEFT);
    accessCol.setText(INSTANCE_ACCESS);
    accessCol.addSelectionListener(new SelectionAdapter(){
      boolean sortType=true;
      public void widgetSelected(      SelectionEvent e){
        sortType=!sortType;
        instancesViewer.setSorter(sortType ? new InstanceSorter(InstanceSorter.ACCESS) : new InstanceSorter(-InstanceSorter.ACCESS));
      }
    }
);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.NULL);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
wrap.Wrap(this,instancesViewer);
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}",0.9594069252328
149096,"public SashForm createSash(Composite parent){
  sash=new SashForm(parent,SWT.HORIZONTAL | SWT.SMOOTH);
  sash.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)sash.getLayoutData()).heightHint=1000;
  GridLayout layout=new GridLayout();
  sash.setLayout(layout);
  sash.setBackground(sash.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  createSchemaTree(sash);
  createButton();
  createTypeTree(sash);
  sash.setWeights(new int[]{28,1,0});
  return sash;
}","public SashForm createSash(Composite parent){
  sash=new SashForm(parent,SWT.HORIZONTAL);
  sash.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)sash.getLayoutData()).heightHint=1000;
  GridLayout layout=new GridLayout();
  sash.setLayout(layout);
  createSchemaTreeComp(sash);
  createTypeTreeComp(sash);
  sash.setWeights(new int[]{50,50});
  return sash;
}",0.7756041426927502
149097,"protected void createCharacteristicsContent(FormToolkit toolkit,Composite mainComposite){
  try {
    this.toolkit=toolkit;
    WSDataModel wsObject=(WSDataModel)(getXObject().getWsObject());
    Label descriptionLabel=toolkit.createLabel(mainComposite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    descriptionText=toolkit.createText(mainComposite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    descriptionText.setText(wsObject.getDescription() == null ? ""String_Node_Str"" : wsObject.getDescription());
    ((GridData)descriptionText.getLayoutData()).minimumHeight=30;
    descriptionText.addModifyListener(this);
    Composite btnCmp=toolkit.createComposite(mainComposite);
    btnCmp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    GridLayout gLayout=new GridLayout();
    gLayout.numColumns=8;
    gLayout.horizontalSpacing=20;
    btnCmp.setLayout(gLayout);
    importXSDBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    importXSDBtn.setImage(ImageCache.getCreatedImage(EImage.IMPORT.getPath()));
    importXSDBtn.setToolTipText(""String_Node_Str"");
    exportBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    exportBtn.setImage(ImageCache.getCreatedImage(EImage.EXPORT.getPath()));
    exportBtn.setToolTipText(""String_Node_Str"");
    filterBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    filterBtn.setImage(ImageCache.getCreatedImage(EImage.FILTER_PS.getPath()));
    filterBtn.setToolTipText(""String_Node_Str"");
    expandBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    expandBtn.setImage(ImageCache.getCreatedImage(EImage.FLDR_OBJ.getPath()));
    expandBtn.setToolTipText(""String_Node_Str"");
    expandBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        Iterator it=sel.iterator();
        while (it.hasNext()) {
          Object obj=it.next();
          viewer.expandToLevel(obj,3);
        }
      }
    }
);
    foldBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    foldBtn.setImage(ImageCache.getCreatedImage(EImage.COMPRESSED_FOLDER_OBJ.getPath()));
    foldBtn.setToolTipText(""String_Node_Str"");
    foldBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        Iterator it=sel.iterator();
        while (it.hasNext()) {
          Object obj=it.next();
          viewer.collapseToLevel(obj,3);
        }
      }
    }
);
    expandSelBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    expandSelBtn.setImage(ImageCache.getCreatedImage(EImage.ACTIVITY_CATEGORY.getPath()));
    expandSelBtn.setToolTipText(""String_Node_Str"");
    expandSelBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        openXSDParticle();
      }
    }
);
    sortUPBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    sortUPBtn.setImage(ImageCache.getCreatedImage(EImage.PREV_NAV.getPath()));
    sortUPBtn.setToolTipText(""String_Node_Str"");
    sortUPBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        stepUp();
        viewer.refresh();
      }
    }
);
    sortDownBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    sortDownBtn.setImage(ImageCache.getCreatedImage(EImage.NEXT_NAV.getPath()));
    sortDownBtn.setToolTipText(""String_Node_Str"");
    sortDownBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        stepDown();
        viewer.refresh();
      }
    }
);
    importXSDBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    exportBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    filterBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    expandBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    foldBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    expandSelBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    sortUPBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    sortDownBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    filterBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        if (dataModelFilterDialog == null) {
          dataModelFilter=new DataModelFilter(""String_Node_Str"",false,false,false,true);
          dataModelFilterDialog=new DataModelFilterDialog(getSite().getShell(),getXObject(),dataModelFilter);
        }
        if (dataModelFilterDialog.open() == Dialog.OK) {
          ((XSDTreeContentProvider)viewer.getContentProvider()).setFilter(dataModelFilter);
          viewer.setInput(getSite());
        }
      }
    }
);
    importXSDBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        FileDialog fd=new FileDialog(getSite().getShell(),SWT.OPEN);
        fd.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
        fd.setText(""String_Node_Str"");
        String filename=fd.open();
        if (filename == null)         return;
        xsdSchema=null;
        inferXsdFromXml(filename);
      }
      private void inferXsdFromXml(      String xmlFile){
        int infer=0;
        String xsd=""String_Node_Str"";
        try {
          String inputType=xmlFile.substring(xmlFile.lastIndexOf(""String_Node_Str""));
          if (inputType.equals(""String_Node_Str"")) {
            xsd=Util.getXML(xmlFile);
          }
 else {
            XSDDriver d=new XSDDriver();
            infer=d.doMain(new String[]{xmlFile,""String_Node_Str""});
            if (infer == 0) {
              xsd=d.outputXSD();
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          infer=2;
        }
 finally {
          if (infer == 0 && !xsd.equals(""String_Node_Str"")) {
            WSDataModel wsObj=(WSDataModel)(getXObject().getWsObject());
            wsObj.setXsdSchema(xsd);
            validateSchema(xsd);
            refreshData();
            markDirty();
          }
 else           if (infer != 0) {
            MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          }
        }
      }
      void validateSchema(      String xsd){
        try {
          boolean elem=false;
          XSDSchema schema=getXSDSchema(xsd);
          NodeList nodeList=schema.getDocument().getDocumentElement().getChildNodes();
          for (int idx=0; idx < nodeList.getLength(); idx++) {
            Node node=nodeList.item(idx);
            if (node instanceof Element && node.getLocalName().indexOf(""String_Node_Str"") >= 0) {
              elem=true;
              break;
            }
          }
          if (!elem) {
            MessageDialog.openWarning(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    exportBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        FileDialog fd=new FileDialog(getSite().getShell(),SWT.SAVE);
        fd.setFilterExtensions(new String[]{""String_Node_Str""});
        fd.setText(""String_Node_Str"");
        String filename=fd.open();
        if (filename == null)         return;
        inferXsdFromDataModule(filename);
      }
      private void inferXsdFromDataModule(      String xmlFile){
        WSDataModel wsObject=(WSDataModel)(getXObject().getWsObject());
        XSDDriver d=new XSDDriver();
        if (d.outputXSD(wsObject.getXsdSchema(),xmlFile) != null) {
          MessageDialog.openInformation(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        }
 else {
          MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
);
    Label xsdLabel=toolkit.createLabel(mainComposite,""String_Node_Str"",SWT.NULL);
    xsdLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,2,1));
    xsdSchema=getXSDSchema(wsObject.getXsdSchema());
    createSash(mainComposite);
    hookContextMenu();
    hookDoubleClickAction();
    hookTypesContextMenu();
    XMLEditor xmleditor=((XObjectEditor)getEditor()).getXmlEditor();
    if (xmleditor != null && xmleditor.isDirty())     xmleditor.markDirty();
    initializeOperationHistory();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","protected void createCharacteristicsContent(FormToolkit toolkit,Composite mainComposite){
  try {
    this.toolkit=toolkit;
    WSDataModel wsObject=(WSDataModel)(getXObject().getWsObject());
    Label descriptionLabel=toolkit.createLabel(mainComposite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    descriptionText=toolkit.createText(mainComposite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    descriptionText.setText(wsObject.getDescription() == null ? ""String_Node_Str"" : wsObject.getDescription());
    ((GridData)descriptionText.getLayoutData()).minimumHeight=30;
    descriptionText.addModifyListener(this);
    Composite btnCmp=toolkit.createComposite(mainComposite);
    btnCmp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    GridLayout gLayout=new GridLayout();
    gLayout.numColumns=8;
    gLayout.horizontalSpacing=20;
    btnCmp.setLayout(gLayout);
    importXSDBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    importXSDBtn.setImage(ImageCache.getCreatedImage(EImage.IMPORT.getPath()));
    importXSDBtn.setToolTipText(""String_Node_Str"");
    exportBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    exportBtn.setImage(ImageCache.getCreatedImage(EImage.EXPORT.getPath()));
    exportBtn.setToolTipText(""String_Node_Str"");
    filterBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    filterBtn.setImage(ImageCache.getCreatedImage(EImage.FILTER_PS.getPath()));
    filterBtn.setToolTipText(""String_Node_Str"");
    expandBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    expandBtn.setImage(ImageCache.getCreatedImage(EImage.FLDR_OBJ.getPath()));
    expandBtn.setToolTipText(""String_Node_Str"");
    expandBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        Iterator it=sel.iterator();
        while (it.hasNext()) {
          Object obj=it.next();
          viewer.expandToLevel(obj,3);
        }
      }
    }
);
    foldBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    foldBtn.setImage(ImageCache.getCreatedImage(EImage.COMPRESSED_FOLDER_OBJ.getPath()));
    foldBtn.setToolTipText(""String_Node_Str"");
    foldBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        Iterator it=sel.iterator();
        while (it.hasNext()) {
          Object obj=it.next();
          viewer.collapseToLevel(obj,3);
        }
      }
    }
);
    expandSelBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    expandSelBtn.setImage(ImageCache.getCreatedImage(EImage.ACTIVITY_CATEGORY.getPath()));
    expandSelBtn.setToolTipText(""String_Node_Str"");
    expandSelBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        openXSDParticle();
      }
    }
);
    sortUPBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    sortUPBtn.setImage(ImageCache.getCreatedImage(EImage.PREV_NAV.getPath()));
    sortUPBtn.setToolTipText(""String_Node_Str"");
    sortUPBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        stepUp();
        viewer.refresh();
      }
    }
);
    sortDownBtn=toolkit.createButton(btnCmp,""String_Node_Str"",SWT.PUSH);
    sortDownBtn.setImage(ImageCache.getCreatedImage(EImage.NEXT_NAV.getPath()));
    sortDownBtn.setToolTipText(""String_Node_Str"");
    sortDownBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        stepDown();
        viewer.refresh();
      }
    }
);
    importXSDBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    exportBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    filterBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    expandBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    foldBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    expandSelBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    sortUPBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    sortDownBtn.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
    filterBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        if (dataModelFilterDialog == null) {
          dataModelFilter=new DataModelFilter(""String_Node_Str"",false,false,false,true);
          dataModelFilterDialog=new DataModelFilterDialog(getSite().getShell(),getXObject(),dataModelFilter);
        }
        if (dataModelFilterDialog.open() == Dialog.OK) {
          ((XSDTreeContentProvider)viewer.getContentProvider()).setFilter(dataModelFilter);
          viewer.setInput(getSite());
        }
      }
    }
);
    importXSDBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        FileDialog fd=new FileDialog(getSite().getShell(),SWT.OPEN);
        fd.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
        fd.setText(""String_Node_Str"");
        String filename=fd.open();
        if (filename == null)         return;
        xsdSchema=null;
        inferXsdFromXml(filename);
      }
      private void inferXsdFromXml(      String xmlFile){
        int infer=0;
        String xsd=""String_Node_Str"";
        try {
          String inputType=xmlFile.substring(xmlFile.lastIndexOf(""String_Node_Str""));
          if (inputType.equals(""String_Node_Str"")) {
            xsd=Util.getXML(xmlFile);
          }
 else {
            XSDDriver d=new XSDDriver();
            infer=d.doMain(new String[]{xmlFile,""String_Node_Str""});
            if (infer == 0) {
              xsd=d.outputXSD();
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          infer=2;
        }
 finally {
          if (infer == 0 && !xsd.equals(""String_Node_Str"")) {
            WSDataModel wsObj=(WSDataModel)(getXObject().getWsObject());
            wsObj.setXsdSchema(xsd);
            validateSchema(xsd);
            refreshData();
            markDirty();
          }
 else           if (infer != 0) {
            MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          }
        }
      }
      void validateSchema(      String xsd){
        try {
          boolean elem=false;
          XSDSchema schema=getXSDSchema(xsd);
          NodeList nodeList=schema.getDocument().getDocumentElement().getChildNodes();
          for (int idx=0; idx < nodeList.getLength(); idx++) {
            Node node=nodeList.item(idx);
            if (node instanceof Element && node.getLocalName().indexOf(""String_Node_Str"") >= 0) {
              elem=true;
              break;
            }
          }
          if (!elem) {
            MessageDialog.openWarning(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    exportBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        FileDialog fd=new FileDialog(getSite().getShell(),SWT.SAVE);
        fd.setFilterExtensions(new String[]{""String_Node_Str""});
        fd.setText(""String_Node_Str"");
        String filename=fd.open();
        if (filename == null)         return;
        inferXsdFromDataModule(filename);
      }
      private void inferXsdFromDataModule(      String xmlFile){
        WSDataModel wsObject=(WSDataModel)(getXObject().getWsObject());
        XSDDriver d=new XSDDriver();
        if (d.outputXSD(wsObject.getXsdSchema(),xmlFile) != null) {
          MessageDialog.openInformation(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        }
 else {
          MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
);
    xsdSchema=getXSDSchema(wsObject.getXsdSchema());
    createSash(mainComposite);
    hookContextMenu();
    hookDoubleClickAction();
    hookTypesContextMenu();
    XMLEditor xmleditor=((XObjectEditor)getEditor()).getXmlEditor();
    if (xmleditor != null && xmleditor.isDirty())     xmleditor.markDirty();
    initializeOperationHistory();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9908564814814816
149098,"public void run(){
  IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
  declList.clear();
  List list=selection.toList();
  for (  Object obj : list) {
    if (obj instanceof XSDElementDeclaration) {
      if (Util.getParent(obj) == obj)       declList.add((XSDElementDeclaration)obj);
    }
  }
  AddBrowseItemsWizard wizard=new AddBrowseItemsWizard(page,declList);
  WizardDialog dialog=new WizardDialog(page.getSite().getShell(),wizard);
  dialog.open();
}","public void run(){
  IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
  declList.clear();
  List list=selection.toList();
  for (  Object obj : list) {
    if (obj instanceof XSDElementDeclaration) {
      XSDElementDeclaration declaration=(XSDElementDeclaration)obj;
      if (Util.getParent(obj) == obj)       declList.add(declaration);
    }
  }
  AddBrowseItemsWizard wizard=new AddBrowseItemsWizard(page,declList,new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement()).getLabels());
  WizardDialog dialog=new WizardDialog(page.getSite().getShell(),wizard);
  dialog.open();
}",0.5440140845070423
149099,"private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      view.setDescription(""String_Node_Str"" + decl.getName() + ""String_Node_Str""+ decl.getName()+ ""String_Node_Str"");
      wrap.setWsView(view);
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      WSDeleteView delView=new WSDeleteView();
      delView.setWsViewPK(viewPk);
      WSGetView getView=new WSGetView();
      getView.setWsViewPK(viewPk);
      try {
        port.getView(getView);
        port.deleteView(delView);
      }
 catch (      RemoteException ex) {
      }
      port.putView(wrap);
    }
  }
}","private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      StringBuffer desc=new StringBuffer();
      for (      String lan : labels.keySet()) {
        desc.append(""String_Node_Str"" + lan.toUpperCase() + ""String_Node_Str""+ decl.getName()+ ""String_Node_Str"");
      }
      view.setDescription(desc.toString());
      wrap.setWsView(view);
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      WSDeleteView delView=new WSDeleteView();
      delView.setWsViewPK(viewPk);
      WSGetView getView=new WSGetView();
      getView.setWsViewPK(viewPk);
      try {
        port.getView(getView);
        port.deleteView(delView);
      }
 catch (      RemoteException ex) {
      }
      port.putView(wrap);
    }
  }
}",0.937856689917565
149100,"public AddBrowseItemsWizard(AMainPageV2 launchPage,List<XSDElementDeclaration> list){
  super();
  setWindowTitle(""String_Node_Str"");
  page=launchPage;
  declList=list;
  for (  XSDElementDeclaration dl : declList) {
    browseItemToRoles.put(BROWSE_ITEMS + dl.getName(),new ArrayList<Line>());
  }
}","public AddBrowseItemsWizard(AMainPageV2 launchPage,List<XSDElementDeclaration> list,LinkedHashMap<String,String> labels){
  super();
  setWindowTitle(""String_Node_Str"");
  page=launchPage;
  declList=list;
  this.labels=labels;
  for (  XSDElementDeclaration dl : declList) {
    browseItemToRoles.put(BROWSE_ITEMS + dl.getName(),new ArrayList<Line>());
  }
}",0.912121212121212
149101,"public void run(){
  try {
    super.run();
    ISelection selection=this.server.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    server.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectBrowserInput(xobject,xobject.getDisplayName()),XObjectRevisionBrowser.ID);
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(server.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    ISelection selection=this.server.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    server.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectBrowserInput(xobject,xobject.getDisplayName()),XObjectRevisionBrowser.ID);
  }
 catch (  Exception e) {
    e.printStackTrace();
    ErrorExceptionDialog.openError(server.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.980355472404116
149102,"public void run(){
  try {
    TreeObject xobject=(TreeObject)((XObjectEditorInput)editor.getEditorInput()).getModel();
    Object newWsObject=xobject.getWsObject();
    if (!xobject.isXObject())     return;
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
      port.putDataModel(new WSPutDataModel((WSDataModel)newWsObject));
    break;
case TreeObject.VIEW:
  port.putView(new WSPutView((WSView)newWsObject));
break;
case TreeObject.DATA_CLUSTER:
port.putDataCluster(new WSPutDataCluster((WSDataCluster)newWsObject));
break;
case TreeObject.STORED_PROCEDURE:
port.putStoredProcedure(new WSPutStoredProcedure((WSStoredProcedure)newWsObject));
break;
case TreeObject.ROLE:
port.putRole(new WSPutRole((WSRole)newWsObject));
break;
case TreeObject.ROUTING_RULE:
port.putRoutingRule(new WSPutRoutingRule((WSRoutingRule)newWsObject));
break;
case TreeObject.TRANSFORMER:
port.putTransformerV2(new WSPutTransformerV2((WSTransformerV2)newWsObject));
break;
case TreeObject.MENU:
port.putMenu(new WSPutMenu((WSMenu)newWsObject));
break;
case TreeObject.UNIVERSE:
port.putUniverse(new WSPutUniverse((WSUniverse)newWsObject));
break;
case TreeObject.SYNCHRONIZATIONPLAN:
port.putSynchronizationPlan(new WSPutSynchronizationPlan((WSSynchronizationPlan)newWsObject));
break;
case TreeObject.SERVICE_CONFIGURATION:
break;
default :
MessageDialog.openError(this.editor.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ xobject.getType());
return;
}
if (xobject.getParent() == null) {
if (xobject.getType() != TreeObject.DOCUMENT) {
TreeParent folder=xobject.findServerFolder(xobject.getType());
folder.addChild(xobject);
}
xobject.fireEvent(IXObjectModelListener.SAVE,xobject.getParent(),xobject);
xobject.getServerRoot().fireEvent(IXObjectModelListener.NEED_REFRESH,null,xobject.getServerRoot());
}
 else {
xobject.fireEvent(IXObjectModelListener.SAVE,xobject.getParent(),xobject);
}
state=0;
}
 catch (Exception e) {
e.printStackTrace();
ErrorExceptionDialog.openError(this.editor.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
state=1;
}
}","public void run(){
  try {
    TreeObject xobject=(TreeObject)((XObjectEditorInput)editor.getEditorInput()).getModel();
    Object newWsObject=xobject.getWsObject();
    if (!xobject.isXObject())     return;
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
      port.putDataModel(new WSPutDataModel((WSDataModel)newWsObject));
    break;
case TreeObject.VIEW:
  port.putView(new WSPutView((WSView)newWsObject));
break;
case TreeObject.DATA_CLUSTER:
port.putDataCluster(new WSPutDataCluster((WSDataCluster)newWsObject));
break;
case TreeObject.STORED_PROCEDURE:
port.putStoredProcedure(new WSPutStoredProcedure((WSStoredProcedure)newWsObject));
break;
case TreeObject.ROLE:
port.putRole(new WSPutRole((WSRole)newWsObject));
break;
case TreeObject.ROUTING_RULE:
port.putRoutingRule(new WSPutRoutingRule((WSRoutingRule)newWsObject));
break;
case TreeObject.TRANSFORMER:
port.putTransformerV2(new WSPutTransformerV2((WSTransformerV2)newWsObject));
break;
case TreeObject.MENU:
port.putMenu(new WSPutMenu((WSMenu)newWsObject));
break;
case TreeObject.UNIVERSE:
port.putUniverse(new WSPutUniverse((WSUniverse)newWsObject));
break;
case TreeObject.SYNCHRONIZATIONPLAN:
port.putSynchronizationPlan(new WSPutSynchronizationPlan((WSSynchronizationPlan)newWsObject));
break;
case TreeObject.SERVICE_CONFIGURATION:
break;
default :
MessageDialog.openError(this.editor.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ xobject.getType());
return;
}
if (xobject.getParent() == null) {
if (xobject.getType() != TreeObject.DOCUMENT) {
TreeParent folder=xobject.findServerFolder(xobject.getType());
folder.addChild(xobject);
}
xobject.fireEvent(IXObjectModelListener.SAVE,xobject.getParent(),xobject);
xobject.getServerRoot().fireEvent(IXObjectModelListener.NEED_REFRESH,null,xobject.getServerRoot());
}
 else {
xobject.fireEvent(IXObjectModelListener.SAVE,xobject.getParent(),xobject);
}
state=0;
}
 catch (Exception e) {
e.printStackTrace();
ErrorExceptionDialog.openError(this.editor.getSite().getShell(),""String_Node_Str"",CommonUtil.getErrMsgFromException(e));
state=1;
}
}",0.975877192982456
149103,"/** 
 * Selection Listener on OK Button
 */
public void widgetSelected(SelectionEvent e){
  int buttonId=((Integer)e.widget.getData()).intValue();
  if (IDialogConstants.OK_ID != buttonId)   return;
  String server=dialog.getServer();
  String username=dialog.getUsernameText();
  String password=dialog.getPasswordText();
  String universe=dialog.getUniverse();
  dialog.close();
  Properties properties=new Properties();
  String f=System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  Collection<String> endpoints;
  Collection<String> universes;
  String endpointsString=server;
  String universeString=universe;
  Authenticator.setDefault(null);
  LocalTreeObjectRepository.getInstance().startUp(view,username);
  LocalTreeObjectRepository.getInstance().switchOnListening();
  try {
    XtentisServerObjectsRetriever retriever=new XtentisServerObjectsRetriever(server,username,password,universe);
    new ProgressMonitorDialog(view.getSite().getShell()).run(true,true,retriever);
    try {
      File dirFile=new File(f);
      boolean bFile=dirFile.exists();
      if (!bFile)       if (dirFile.createNewFile())       properties.load(new FileInputStream(f));
 else       return;
      int index=0;
      endpoints=Arrays.asList(new String[]{Util.default_endpoint_address});
      if (properties.getProperty(""String_Node_Str"") != null)       endpoints=Arrays.asList(properties.getProperty(""String_Node_Str"").split(""String_Node_Str""));
      if (properties.getProperty(""String_Node_Str"") != null)       universes=Arrays.asList(properties.getProperty(""String_Node_Str"").split(""String_Node_Str""));
      for (Iterator<String> iter=endpoints.iterator(); iter.hasNext(); ) {
        String endpoint=iter.next();
        if (!endpoint.equals(server))         endpointsString+=""String_Node_Str"" + endpoint;
        if (++index == 10)         break;
      }
      properties.setProperty(""String_Node_Str"",endpointsString);
      index=0;
      universes=Arrays.asList(new String[]{""String_Node_Str""});
      for (Iterator<String> iter=universes.iterator(); iter.hasNext(); ) {
        universe=iter.next();
        if (!universe.equals(server))         universeString+=""String_Node_Str"" + universe;
        if (++index == 5)         break;
      }
      properties.setProperty(""String_Node_Str"",universeString);
      properties.store(new FileOutputStream(f),null);
    }
 catch (    Exception e1) {
    }
    if (!retriever.isExistUniverse()) {
      return;
    }
    TreeParent serverRoot=retriever.getServerRoot();
    TreeParent invisibleRoot=view.getTreeContentProvider().getInvisibleRoot();
    TreeObject[] serverRoots=invisibleRoot.getChildren();
    boolean found=false;
    for (int i=0; i < serverRoots.length; i++) {
      if (serverRoots[i].getDisplayName().equals(serverRoot.getDisplayName())) {
        if (serverRoots[i].getWsKey().equals(serverRoot.getWsKey())) {
          if (serverRoots[i].getUser().getUniverse().equalsIgnoreCase(serverRoot.getUser().getUniverse())) {
            found=true;
            ((TreeParent)serverRoots[i]).synchronizeWith(serverRoot);
          }
        }
      }
    }
    if (!found)     invisibleRoot.addChild(serverRoot);
    view.getViewer().refresh();
    view.getViewer().expandToLevel(serverRoot,1);
  }
 catch (  InterruptedException ie) {
    return;
  }
catch (  InvocationTargetException ite) {
    ite.printStackTrace();
    MessageDialog.openError(dialog.getShell(),""String_Node_Str"",""String_Node_Str"" + ite.getCause().getLocalizedMessage());
  }
}","/** 
 * Selection Listener on OK Button
 */
public void widgetSelected(SelectionEvent e){
  int buttonId=((Integer)e.widget.getData()).intValue();
  if (IDialogConstants.OK_ID != buttonId)   return;
  String server=dialog.getServer();
  String username=dialog.getUsernameText();
  String password=dialog.getPasswordText();
  String universe=dialog.getUniverse();
  dialog.close();
  Properties properties=new Properties();
  String f=System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  Collection<String> endpoints;
  Collection<String> universes;
  String endpointsString=server;
  String universeString=universe;
  Authenticator.setDefault(null);
  LocalTreeObjectRepository.getInstance().startUp(view,username);
  LocalTreeObjectRepository.getInstance().switchOnListening();
  try {
    XtentisServerObjectsRetriever retriever=new XtentisServerObjectsRetriever(server,username,password,universe);
    new ProgressMonitorDialog(view.getSite().getShell()).run(true,true,retriever);
    try {
      File dirFile=new File(f);
      boolean bFile=dirFile.exists();
      if (!bFile)       if (dirFile.createNewFile())       properties.load(new FileInputStream(f));
 else       return;
      int index=0;
      endpoints=Arrays.asList(new String[]{Util.default_endpoint_address});
      if (properties.getProperty(""String_Node_Str"") != null)       endpoints=Arrays.asList(properties.getProperty(""String_Node_Str"").split(""String_Node_Str""));
      if (properties.getProperty(""String_Node_Str"") != null)       universes=Arrays.asList(properties.getProperty(""String_Node_Str"").split(""String_Node_Str""));
      for (Iterator<String> iter=endpoints.iterator(); iter.hasNext(); ) {
        String endpoint=iter.next();
        if (!endpoint.equals(server))         endpointsString+=""String_Node_Str"" + endpoint;
        if (++index == 10)         break;
      }
      properties.setProperty(""String_Node_Str"",endpointsString);
      index=0;
      universes=Arrays.asList(new String[]{""String_Node_Str""});
      for (Iterator<String> iter=universes.iterator(); iter.hasNext(); ) {
        universe=iter.next();
        if (!universe.equals(server))         universeString+=""String_Node_Str"" + universe;
        if (++index == 5)         break;
      }
      properties.setProperty(""String_Node_Str"",universeString);
      properties.store(new FileOutputStream(f),null);
    }
 catch (    Exception e1) {
    }
    if (!retriever.isExistUniverse()) {
      return;
    }
    TreeParent serverRoot=retriever.getServerRoot();
    TreeParent invisibleRoot=view.getTreeContentProvider().getInvisibleRoot();
    TreeObject[] serverRoots=invisibleRoot.getChildren();
    boolean found=false;
    for (int i=0; i < serverRoots.length; i++) {
      if (serverRoots[i].getDisplayName().equals(serverRoot.getDisplayName())) {
        if (serverRoots[i].getWsKey().equals(serverRoot.getWsKey())) {
          if (serverRoots[i].getUser().getUniverse().equalsIgnoreCase(serverRoot.getUser().getUniverse())) {
            found=true;
            ((TreeParent)serverRoots[i]).synchronizeWith(serverRoot);
          }
        }
      }
    }
    if (!found)     invisibleRoot.addChild(serverRoot);
    view.getViewer().refresh();
    view.getViewer().expandToLevel(serverRoot,1);
  }
 catch (  InterruptedException ie) {
    return;
  }
catch (  InvocationTargetException ite) {
    ite.printStackTrace();
    ErrorExceptionDialog.openError(dialog.getShell(),""String_Node_Str"",CommonUtil.getErrMsgFromException(ite.getCause()));
  }
}",0.9829400056866648
149104,"protected void commit(){
  try {
    WSDataModel wsObject=(WSDataModel)(getXObject().getWsObject());
    wsObject.setDescription(descriptionText.getText() == null ? ""String_Node_Str"" : descriptionText.getText());
    String schema=((XSDTreeContentProvider)viewer.getContentProvider()).getXSDSchemaAsString();
    schema=schema.replaceAll(""String_Node_Str"",""String_Node_Str"");
    schema=schema.replaceAll(""String_Node_Str"",""String_Node_Str"");
    wsObject.setXsdSchema(schema);
    XMLEditor xmleditor=((XObjectEditor)getEditor()).getXmlEditor();
    xmleditor.refresh(getXObject());
  }
 catch (  Exception e) {
    e.printStackTrace();
    ErrorExceptionDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void commit(){
  try {
    WSDataModel wsObject=(WSDataModel)(getXObject().getWsObject());
    wsObject.setDescription(descriptionText.getText() == null ? ""String_Node_Str"" : descriptionText.getText());
    String schema=((XSDTreeContentProvider)viewer.getContentProvider()).getXSDSchemaAsString();
    schema=schema.replaceAll(""String_Node_Str"",""String_Node_Str"");
    schema=schema.replaceAll(""String_Node_Str"",""String_Node_Str"");
    wsObject.setXsdSchema(schema);
    XMLEditor xmleditor=((XObjectEditor)getEditor()).getXmlEditor();
    xmleditor.refresh(getXObject());
  }
 catch (  Exception e) {
    e.printStackTrace();
    ErrorExceptionDialog.openError(this.getSite().getShell(),""String_Node_Str"",CommonUtil.getErrMsgFromException(e));
  }
}",0.9509483322432962
149105,"public synchronized void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"".equals(username) ? 12 : 9);
    XtentisPort port=Util.getPort(new URL(endpointaddress),universe,username,password);
    port.ping(new WSPing(""String_Node_Str""));
    monitor.worked(1);
    String displayName=endpointaddress;
    WSUniverse wUuniverse=null;
    wUuniverse=port.getCurrentUniverse(new WSGetCurrentUniverse());
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    serverRoot=new TreeParent(displayName,null,TreeObject._SERVER_,endpointaddress,(""String_Node_Str"".equals(universe) ? ""String_Node_Str"" : universe + ""String_Node_Str"") + username + ""String_Node_Str""+ (password == null ? ""String_Node_Str"" : password));
    monitor.subTask(""String_Node_Str"");
    UserInfo user=new UserInfo();
    user.setUsername(username);
    user.setPassword(password);
    user.setServerUrl(endpointaddress);
    user.setUniverse(universe);
    user.setWsUuniverse(wUuniverse);
    serverRoot.setUser(user);
    TreeParent models=new TreeParent(EXtentisObjects.DataMODEL.getDisplayName(),serverRoot,TreeObject.DATA_MODEL,null,null);
    WSDataModelPK[] xdmPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str"")).getWsDataModelPKs();
    if (xdmPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < xdmPKs.length; i++) {
        String name=xdmPKs[i].getPk();
        if (!name.startsWith(""String_Node_Str"")) {
          TreeObject obj=new TreeObject(name,serverRoot,TreeObject.DATA_MODEL,xdmPKs[i],null);
          models.addChild(obj);
        }
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    TreeParent dataClusters=new TreeParent(EXtentisObjects.DataCluster.getDisplayName(),serverRoot,TreeObject.DATA_CLUSTER,null,null);
    WSDataClusterPK[] xdcPKs=port.getDataClusterPKs(new WSRegexDataClusterPKs(""String_Node_Str"")).getWsDataClusterPKs();
    if (xdcPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < xdcPKs.length; i++) {
        String name=xdcPKs[i].getPk();
        if (!(""String_Node_Str"".equals(name))) {
          TreeObject obj=new TreeObject(name,serverRoot,TreeObject.DATA_CLUSTER,xdcPKs[i],null);
          dataClusters.addChild(obj);
        }
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    TreeParent views=new TreeParent(EXtentisObjects.View.getDisplayName(),serverRoot,TreeObject.VIEW,null,null);
    WSViewPK[] viewPKs=port.getViewPKs((new WSGetViewPKs(""String_Node_Str""))).getWsViewPK();
    if (viewPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < viewPKs.length; i++) {
        String name=viewPKs[i].getPk();
        TreeObject obj=new TreeObject(name,serverRoot,TreeObject.VIEW,new WSViewPK(name),null);
        views.addChild(obj);
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    TreeParent storedProcedures=new TreeParent(EXtentisObjects.StoredProcedure.getDisplayName(),serverRoot,TreeObject.STORED_PROCEDURE,null,null);
    WSStoredProcedurePK[] spk=port.getStoredProcedurePKs(new WSRegexStoredProcedure(""String_Node_Str"")).getWsStoredProcedurePK();
    if (spk != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < spk.length; i++) {
        String name=spk[i].getPk();
        TreeObject obj=new TreeObject(name,serverRoot,TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK(name),null);
        storedProcedures.addChild(obj);
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    WSRolePK[] rolePKs=null;
    boolean hasRoles=true;
    try {
      rolePKs=port.getRolePKs(new WSGetRolePKs(""String_Node_Str"")).getWsRolePK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasRoles=false;
    }
    TreeParent roles=null;
    if (hasRoles) {
      roles=new TreeParent(EXtentisObjects.Role.getDisplayName(),serverRoot,TreeObject.ROLE,null,null);
      if (rolePKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < rolePKs.length; i++) {
          String name=rolePKs[i].getPk();
          TreeObject obj=new TreeObject(name,serverRoot,TreeObject.ROLE,new WSRolePK(name),null);
          roles.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    WSRoutingRulePK[] routingRulePKs=null;
    boolean hasRoutingRules=true;
    try {
      routingRulePKs=port.getRoutingRulePKs(new WSGetRoutingRulePKs(""String_Node_Str"")).getWsRoutingRulePKs();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasRoutingRules=false;
    }
    TreeParent rules=null;
    if (hasRoutingRules) {
      rules=new TreeParent(EXtentisObjects.RoutingRule.getDisplayName(),serverRoot,TreeObject.ROUTING_RULE,null,null);
      if (routingRulePKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < routingRulePKs.length; i++) {
          String id=routingRulePKs[i].getPk();
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.ROUTING_RULE,new WSRoutingRulePK(id),null);
          rules.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    TreeObject engine=new TreeObject(EXtentisObjects.SubscriptionEngine.getDisplayName(),serverRoot,TreeObject.SUBSCRIPTION_ENGINE,null,null);
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    TreeObject serviceConfiguration=new TreeObject(EXtentisObjects.ServiceConfiguration.getDisplayName(),serverRoot,TreeObject.SERVICE_CONFIGURATION,null,null);
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    WSTransformerV2PK[] transformerPKs=null;
    boolean hasTransformers=true;
    try {
      transformerPKs=port.getTransformerV2PKs(new WSGetTransformerV2PKs(""String_Node_Str"")).getWsTransformerV2PK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasTransformers=false;
    }
    TreeParent transformers=null;
    if (hasTransformers) {
      transformers=new TreeParent(EXtentisObjects.Transformer.getDisplayName(),serverRoot,TreeObject.TRANSFORMER,null,null);
      if (transformerPKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < transformerPKs.length; i++) {
          String id=transformerPKs[i].getPk();
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.TRANSFORMER,new WSTransformerV2PK(id),null);
          transformers.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    WSMenuPK[] menuPKs=null;
    boolean hasMenus=true;
    try {
      menuPKs=port.getMenuPKs(new WSGetMenuPKs(""String_Node_Str"")).getWsMenuPK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasMenus=false;
    }
    TreeParent menus=null;
    if (hasMenus) {
      menus=new TreeParent(EXtentisObjects.Menu.getDisplayName(),serverRoot,TreeObject.MENU,null,null);
      if (menuPKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < menuPKs.length; i++) {
          String id=menuPKs[i].getPk();
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.MENU,new WSMenuPK(id),null);
          menus.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    WSUniversePK[] universePKs=null;
    try {
      universePKs=port.getUniversePKs(new WSGetUniversePKs(""String_Node_Str"")).getWsUniversePK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    TreeParent Universes=null;
    Universes=new TreeParent(EXtentisObjects.Universe.getDisplayName(),serverRoot,TreeObject.UNIVERSE,null,null);
    if (universePKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < universePKs.length; i++) {
        String id=universePKs[i].getPk();
        if (!id.startsWith(""String_Node_Str"")) {
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.UNIVERSE,new WSUniversePK(id),null);
          Universes.addChild(obj);
        }
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    WSSynchronizationPlanPK[] SynchronizationPlanPKs=null;
    try {
      SynchronizationPlanPKs=port.getSynchronizationPlanPKs(new WSGetSynchronizationPlanPKs(""String_Node_Str"")).getWsSynchronizationPlanPK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    TreeParent synchronizationPlans=null;
    synchronizationPlans=new TreeParent(EXtentisObjects.SynchronizationPlan.getDisplayName(),serverRoot,TreeObject.SYNCHRONIZATIONPLAN,null,null);
    if (SynchronizationPlanPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < SynchronizationPlanPKs.length; i++) {
        String id=SynchronizationPlanPKs[i].getPk();
        TreeObject obj=new TreeObject(id,serverRoot,TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK(id),null);
        synchronizationPlans.addChild(obj);
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    serverRoot.addChild(models);
    serverRoot.addChild(dataClusters);
    serverRoot.addChild(views);
    serverRoot.addChild(storedProcedures);
    serverRoot.addChild(engine);
    serverRoot.addChild(Universes);
    serverRoot.addChild(synchronizationPlans);
    serverRoot.addChild(serviceConfiguration);
    if (hasTransformers)     serverRoot.addChild(transformers);
    if (hasRoles)     serverRoot.addChild(roles);
    if (hasRoutingRules)     serverRoot.addChild(rules);
    if (hasMenus)     serverRoot.addChild(menus);
    addRevision(wUuniverse);
    monitor.done();
  }
 catch (  Exception e) {
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    e.printStackTrace();
    throw new InvocationTargetException(new XtentisException(""String_Node_Str"" + e.getLocalizedMessage()));
  }
}","public synchronized void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"".equals(username) ? 12 : 9);
    XtentisPort port=Util.getPort(new URL(endpointaddress),universe,username,password);
    port.ping(new WSPing(""String_Node_Str""));
    monitor.worked(1);
    String displayName=endpointaddress;
    WSUniverse wUuniverse=null;
    wUuniverse=port.getCurrentUniverse(new WSGetCurrentUniverse());
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    serverRoot=new TreeParent(displayName,null,TreeObject._SERVER_,endpointaddress,(""String_Node_Str"".equals(universe) ? ""String_Node_Str"" : universe + ""String_Node_Str"") + username + ""String_Node_Str""+ (password == null ? ""String_Node_Str"" : password));
    monitor.subTask(""String_Node_Str"");
    UserInfo user=new UserInfo();
    user.setUsername(username);
    user.setPassword(password);
    user.setServerUrl(endpointaddress);
    user.setUniverse(universe);
    user.setWsUuniverse(wUuniverse);
    serverRoot.setUser(user);
    TreeParent models=new TreeParent(EXtentisObjects.DataMODEL.getDisplayName(),serverRoot,TreeObject.DATA_MODEL,null,null);
    WSDataModelPK[] xdmPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str"")).getWsDataModelPKs();
    if (xdmPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < xdmPKs.length; i++) {
        String name=xdmPKs[i].getPk();
        if (!name.startsWith(""String_Node_Str"")) {
          TreeObject obj=new TreeObject(name,serverRoot,TreeObject.DATA_MODEL,xdmPKs[i],null);
          models.addChild(obj);
        }
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    TreeParent dataClusters=new TreeParent(EXtentisObjects.DataCluster.getDisplayName(),serverRoot,TreeObject.DATA_CLUSTER,null,null);
    WSDataClusterPK[] xdcPKs=port.getDataClusterPKs(new WSRegexDataClusterPKs(""String_Node_Str"")).getWsDataClusterPKs();
    if (xdcPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < xdcPKs.length; i++) {
        String name=xdcPKs[i].getPk();
        if (!(""String_Node_Str"".equals(name))) {
          TreeObject obj=new TreeObject(name,serverRoot,TreeObject.DATA_CLUSTER,xdcPKs[i],null);
          dataClusters.addChild(obj);
        }
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    TreeParent views=new TreeParent(EXtentisObjects.View.getDisplayName(),serverRoot,TreeObject.VIEW,null,null);
    WSViewPK[] viewPKs=port.getViewPKs((new WSGetViewPKs(""String_Node_Str""))).getWsViewPK();
    if (viewPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < viewPKs.length; i++) {
        String name=viewPKs[i].getPk();
        TreeObject obj=new TreeObject(name,serverRoot,TreeObject.VIEW,new WSViewPK(name),null);
        views.addChild(obj);
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    TreeParent storedProcedures=new TreeParent(EXtentisObjects.StoredProcedure.getDisplayName(),serverRoot,TreeObject.STORED_PROCEDURE,null,null);
    WSStoredProcedurePK[] spk=port.getStoredProcedurePKs(new WSRegexStoredProcedure(""String_Node_Str"")).getWsStoredProcedurePK();
    if (spk != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < spk.length; i++) {
        String name=spk[i].getPk();
        TreeObject obj=new TreeObject(name,serverRoot,TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK(name),null);
        storedProcedures.addChild(obj);
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    WSRolePK[] rolePKs=null;
    boolean hasRoles=true;
    try {
      rolePKs=port.getRolePKs(new WSGetRolePKs(""String_Node_Str"")).getWsRolePK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasRoles=false;
    }
    TreeParent roles=null;
    if (hasRoles) {
      roles=new TreeParent(EXtentisObjects.Role.getDisplayName(),serverRoot,TreeObject.ROLE,null,null);
      if (rolePKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < rolePKs.length; i++) {
          String name=rolePKs[i].getPk();
          TreeObject obj=new TreeObject(name,serverRoot,TreeObject.ROLE,new WSRolePK(name),null);
          roles.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    WSRoutingRulePK[] routingRulePKs=null;
    boolean hasRoutingRules=true;
    try {
      routingRulePKs=port.getRoutingRulePKs(new WSGetRoutingRulePKs(""String_Node_Str"")).getWsRoutingRulePKs();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasRoutingRules=false;
    }
    TreeParent rules=null;
    if (hasRoutingRules) {
      rules=new TreeParent(EXtentisObjects.RoutingRule.getDisplayName(),serverRoot,TreeObject.ROUTING_RULE,null,null);
      if (routingRulePKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < routingRulePKs.length; i++) {
          String id=routingRulePKs[i].getPk();
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.ROUTING_RULE,new WSRoutingRulePK(id),null);
          rules.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    TreeObject engine=new TreeObject(EXtentisObjects.SubscriptionEngine.getDisplayName(),serverRoot,TreeObject.SUBSCRIPTION_ENGINE,null,null);
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    TreeObject serviceConfiguration=new TreeObject(EXtentisObjects.ServiceConfiguration.getDisplayName(),serverRoot,TreeObject.SERVICE_CONFIGURATION,null,null);
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    WSTransformerV2PK[] transformerPKs=null;
    boolean hasTransformers=true;
    try {
      transformerPKs=port.getTransformerV2PKs(new WSGetTransformerV2PKs(""String_Node_Str"")).getWsTransformerV2PK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasTransformers=false;
    }
    TreeParent transformers=null;
    if (hasTransformers) {
      transformers=new TreeParent(EXtentisObjects.Transformer.getDisplayName(),serverRoot,TreeObject.TRANSFORMER,null,null);
      if (transformerPKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < transformerPKs.length; i++) {
          String id=transformerPKs[i].getPk();
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.TRANSFORMER,new WSTransformerV2PK(id),null);
          transformers.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    WSMenuPK[] menuPKs=null;
    boolean hasMenus=true;
    try {
      menuPKs=port.getMenuPKs(new WSGetMenuPKs(""String_Node_Str"")).getWsMenuPK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasMenus=false;
    }
    TreeParent menus=null;
    if (hasMenus) {
      menus=new TreeParent(EXtentisObjects.Menu.getDisplayName(),serverRoot,TreeObject.MENU,null,null);
      if (menuPKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < menuPKs.length; i++) {
          String id=menuPKs[i].getPk();
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.MENU,new WSMenuPK(id),null);
          menus.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    WSUniversePK[] universePKs=null;
    try {
      universePKs=port.getUniversePKs(new WSGetUniversePKs(""String_Node_Str"")).getWsUniversePK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    TreeParent Universes=null;
    Universes=new TreeParent(EXtentisObjects.Universe.getDisplayName(),serverRoot,TreeObject.UNIVERSE,null,null);
    if (universePKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < universePKs.length; i++) {
        String id=universePKs[i].getPk();
        if (!id.startsWith(""String_Node_Str"")) {
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.UNIVERSE,new WSUniversePK(id),null);
          Universes.addChild(obj);
        }
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    WSSynchronizationPlanPK[] SynchronizationPlanPKs=null;
    try {
      SynchronizationPlanPKs=port.getSynchronizationPlanPKs(new WSGetSynchronizationPlanPKs(""String_Node_Str"")).getWsSynchronizationPlanPK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    TreeParent synchronizationPlans=null;
    synchronizationPlans=new TreeParent(EXtentisObjects.SynchronizationPlan.getDisplayName(),serverRoot,TreeObject.SYNCHRONIZATIONPLAN,null,null);
    if (SynchronizationPlanPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < SynchronizationPlanPKs.length; i++) {
        String id=SynchronizationPlanPKs[i].getPk();
        TreeObject obj=new TreeObject(id,serverRoot,TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK(id),null);
        synchronizationPlans.addChild(obj);
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    serverRoot.addChild(models);
    serverRoot.addChild(dataClusters);
    serverRoot.addChild(views);
    serverRoot.addChild(storedProcedures);
    serverRoot.addChild(engine);
    serverRoot.addChild(Universes);
    serverRoot.addChild(synchronizationPlans);
    serverRoot.addChild(serviceConfiguration);
    if (hasTransformers)     serverRoot.addChild(transformers);
    if (hasRoles)     serverRoot.addChild(roles);
    if (hasRoutingRules)     serverRoot.addChild(rules);
    if (hasMenus)     serverRoot.addChild(menus);
    addRevision(wUuniverse);
    monitor.done();
  }
 catch (  Exception e) {
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    e.printStackTrace();
    throw new InvocationTargetException(new XtentisException(e.getLocalizedMessage()));
  }
}",0.9990612091625986
149106,"public CalendarSelectWidget(FormToolkit toolkit,final Composite composite,boolean hasDefaultTime){
  text=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
  text.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  ((GridData)text.getLayoutData()).widthHint=100;
  if (hasDefaultTime) {
    Calendar c=Calendar.getInstance();
    long yesterday=c.getTimeInMillis() - (1000 * 60 * 60* 24);
    c.setTimeInMillis(yesterday);
    text.setText(sdf.format(c.getTime()));
    text.pack();
  }
  btn=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
  btn.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      if (cal == null || cal.getShell().isDisposed())       cal=new CalendarDialog(composite.getShell());
      if (text.getText() != null && text.getText().length() > 0) {
        try {
          Date d=sdf.parse(text.getText());
          cal.setDate(d);
        }
 catch (        ParseException pe) {
        }
      }
      cal.addDateChangedListener(new SWTCalendarListener(){
        public void dateChanged(        SWTCalendarEvent calendarEvent){
          text.setText(sdf.format(calendarEvent.getCalendar().getTime()));
        }
      }
);
      Point sbPoint=btn.getDisplay().map(btn.getParent(),null,btn.getLocation());
      cal.getShell().setLocation(new Point(sbPoint.x,sbPoint.y + btn.getSize().y));
      cal.open();
    }
  }
);
}","public CalendarSelectWidget(FormToolkit toolkit,final Composite composite,boolean hasDefaultTime){
  text=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
  text.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  ((GridData)text.getLayoutData()).widthHint=100;
  if (hasDefaultTime) {
    Calendar c=Calendar.getInstance();
    long yesterday=c.getTimeInMillis() - (1000 * 60 * 60* 24);
    c.setTimeInMillis(yesterday);
    text.pack();
  }
  btn=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
  btn.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      if (cal == null || cal.getShell().isDisposed())       cal=new CalendarDialog(composite.getShell());
      if (text.getText() != null && text.getText().length() > 0) {
        try {
          Date d=sdf.parse(text.getText());
          cal.setDate(d);
        }
 catch (        ParseException pe) {
        }
      }
      cal.addDateChangedListener(new SWTCalendarListener(){
        public void dateChanged(        SWTCalendarEvent calendarEvent){
          text.setText(sdf.format(calendarEvent.getCalendar().getTime()));
        }
      }
);
      Point sbPoint=btn.getDisplay().map(btn.getParent(),null,btn.getLocation());
      cal.getShell().setLocation(new Point(sbPoint.x,sbPoint.y + btn.getSize().y));
      cal.open();
    }
  }
);
}",0.9850330664810304
149107,"private Composite getViewParametersComposite(){
  FormToolkit toolkit=this.getManagedForm().getToolkit();
  Composite composite=toolkit.createComposite(paramsClientComposite,SWT.BORDER);
  composite.setLayout(new GridLayout(2,false));
  conditionsColumns[0].setColumnWidth(200);
  conditionsColumns[1].setColumnWidth(150);
  conditionsColumns[3].setColumnWidth(120);
  conditionViewer=new TisTableViewer(Arrays.asList(conditionsColumns),this.getManagedForm().getToolkit(),composite);
  conditionViewer.setMainPage(this);
  conditionViewer.create();
  conditionViewer.setHeight(110);
  return composite;
}","private Composite getViewParametersComposite(){
  FormToolkit toolkit=this.getManagedForm().getToolkit();
  Composite composite=toolkit.createComposite(paramsClientComposite,SWT.BORDER);
  composite.setLayout(new GridLayout(2,false));
  conditionsColumns[0].setColumnWidth(200);
  conditionsColumns[1].setColumnWidth(150);
  conditionsColumns[3].setColumnWidth(120);
  conditionViewer=new TisTableViewer(Arrays.asList(conditionsColumns),this.getManagedForm().getToolkit(),composite);
  conditionViewer.setMainPage(this);
  conditionViewer.setAddMulti(true);
  conditionViewer.create();
  conditionViewer.setHeight(110);
  return composite;
}",0.970281124497992
149108,"protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    Label descriptionLabel=toolkit.createLabel(charComposite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    descriptionText=toolkit.createText(charComposite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    descriptionText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        markDirty();
      }
    }
);
    Label objectTypeLabel=toolkit.createLabel(charComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    Composite typeComposite=toolkit.createComposite(charComposite);
    typeComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    GridLayout layout=new GridLayout(2,false);
    layout.marginLeft=0;
    layout.marginWidth=0;
    typeComposite.setLayout(layout);
    objectTypeText=toolkit.createText(typeComposite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
    objectTypeText.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING,SWT.CENTER,false,false,1,1));
    ((GridData)objectTypeText.getLayoutData()).widthHint=300;
    objectTypeText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        markDirty();
      }
    }
);
    xpathButton=toolkit.createButton(typeComposite,""String_Node_Str"",SWT.PUSH);
    xpathButton.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog xpathDialog;
        xpathDialog=new XpathSelectDialog(getSite().getShell(),treeParent,""String_Node_Str"",getSite(),false,dataModelName);
        xpathDialog.setBlockOnOpen(true);
        xpathDialog.open();
        if (xpathDialog.getReturnCode() == Window.OK) {
          String xpath=xpathDialog.getXpath();
          int index=xpathDialog.getXpath().indexOf(""String_Node_Str"");
          if (index > 0) {
            xpath=xpathDialog.getXpath().substring(0,index);
          }
          objectTypeText.setText(xpath);
        }
      }
    }
);
    isSynchronousButton=toolkit.createButton(charComposite,""String_Node_Str"",SWT.CHECK);
    isSynchronousButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isSynchronousButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    deactiveButton=toolkit.createButton(charComposite,""String_Node_Str"",SWT.CHECK);
    deactiveButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    deactiveButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    Composite serviceGroup=this.getNewSectionComposite(""String_Node_Str"");
    serviceGroup.setLayout(new GridLayout(2,false));
    Label serviceNameLabel=toolkit.createLabel(serviceGroup,""String_Node_Str"",SWT.NULL);
    serviceNameLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    Composite subPanel=toolkit.createComposite(serviceGroup);
    subPanel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,true,1,1));
    subPanel.setLayout(new GridLayout(2,false));
    serviceNameCombo=new Combo(subPanel,SWT.DROP_DOWN | SWT.SINGLE | SWT.READ_ONLY);
    serviceNameCombo.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,true,1,1));
    ((GridData)serviceNameCombo.getLayoutData()).widthHint=300;
    serviceNameCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        String serviceName=serviceNameCombo.getText();
        String helpPara=""String_Node_Str"";
        if (!""String_Node_Str"".equals(serviceName) && !serviceName.equals(null))         helpPara=EInputTemplate.getXtentisObjexts().get(serviceName).getContent();
 else         helpPara=""String_Node_Str"";
        serviceParametersText.setText(helpPara);
        markDirty();
      }
    }
);
    if (version_greater_than_2_17_0) {
      WSServicesList list=Util.getPort(getXObject()).getServicesList(new WSGetServicesList(""String_Node_Str""));
      WSServicesListItem[] items=list.getItem();
      if (items != null) {
        String[] sortedList=new String[items.length];
        for (int i=0; i < items.length; i++) {
          sortedList[i]=items[i].getJndiName();
        }
        Arrays.sort(sortedList);
        for (int i=0; i < sortedList.length; i++) {
          serviceNameCombo.add(sortedList[i]);
        }
      }
    }
    defultParameterBtn=toolkit.createButton(subPanel,""String_Node_Str"",SWT.PUSH);
    defultParameterBtn.setImage(ImageCache.getCreatedImage(EImage.HELP_CONTENTS.getPath()));
    defultParameterBtn.setToolTipText(""String_Node_Str"");
    defultParameterBtn.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    defultParameterBtn.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (serviceNameCombo.getText().trim().length() == 0)         return;
        String doc=""String_Node_Str"";
        String desc=""String_Node_Str"";
        try {
          XtentisPort port=Util.getPort(getXObject());
          WSServiceGetDocument document=port.getServiceDocument(new WSString(serviceNameCombo.getText().trim()));
          doc=document.getDocument();
          desc=document.getDescription();
        }
 catch (        Exception e1) {
          doc=""String_Node_Str"";
        }
 finally {
          showUpDialog(desc,doc);
        }
      }
      private void showUpDialog(      String desc,      String doc){
        final PluginDetailsDialog dialog=new PluginDetailsDialog(getSite().getShell(),desc,doc,null,""String_Node_Str"");
        dialog.addListener(new Listener(){
          public void handleEvent(          Event event){
            dialog.close();
          }
        }
);
        dialog.create();
        dialog.getShell().setText(serviceNameCombo.getText() + ""String_Node_Str"");
        dialog.setBlockOnOpen(true);
        dialog.open();
      }
    }
);
    Label serviceParametersLabel=toolkit.createLabel(serviceGroup,""String_Node_Str"",SWT.NULL);
    serviceParametersLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,2,1));
    serviceParametersText=toolkit.createText(serviceGroup,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.V_SCROLL| SWT.WRAP);
    serviceParametersText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    ((GridData)serviceParametersText.getLayoutData()).widthHint=200;
    ((GridData)serviceParametersText.getLayoutData()).heightHint=120;
    serviceParametersText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        markDirty();
      }
    }
);
    Composite routingExpressionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    routingExpressionsGroup.setLayout(new GridLayout(1,true));
    conditionsColumns[0].setColumnWidth(200);
    conditionsColumns[1].setColumnWidth(150);
    conditionsColumns[2].setColumnWidth(120);
    conditionsColumns[3].setColumnWidth(120);
    conditionViewer=new TisTableViewer(Arrays.asList(conditionsColumns),toolkit,routingExpressionsGroup);
    conditionViewer.setMainPage(this);
    conditionViewer.create();
    conditionViewer.setHeight(110);
    ConditionWidget conditionWidget=new ConditionWidget(routingExpressionsGroup,toolkit,this);
    conditionText=conditionWidget.getConditionText();
    conditionText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (!refreshing)         markDirty();
      }
    }
);
    wrap.Wrap(this,conditionViewer);
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    Label descriptionLabel=toolkit.createLabel(charComposite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    descriptionText=toolkit.createText(charComposite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    descriptionText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        markDirty();
      }
    }
);
    Label objectTypeLabel=toolkit.createLabel(charComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    Composite typeComposite=toolkit.createComposite(charComposite);
    typeComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    GridLayout layout=new GridLayout(2,false);
    layout.marginLeft=0;
    layout.marginWidth=0;
    typeComposite.setLayout(layout);
    objectTypeText=toolkit.createText(typeComposite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
    objectTypeText.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING,SWT.CENTER,false,false,1,1));
    ((GridData)objectTypeText.getLayoutData()).widthHint=300;
    objectTypeText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        markDirty();
      }
    }
);
    xpathButton=toolkit.createButton(typeComposite,""String_Node_Str"",SWT.PUSH);
    xpathButton.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog xpathDialog;
        xpathDialog=new XpathSelectDialog(getSite().getShell(),treeParent,""String_Node_Str"",getSite(),false,dataModelName);
        xpathDialog.setBlockOnOpen(true);
        xpathDialog.open();
        if (xpathDialog.getReturnCode() == Window.OK) {
          String xpath=xpathDialog.getXpath();
          int index=xpathDialog.getXpath().indexOf(""String_Node_Str"");
          if (index > 0) {
            xpath=xpathDialog.getXpath().substring(0,index);
          }
          objectTypeText.setText(xpath);
        }
      }
    }
);
    isSynchronousButton=toolkit.createButton(charComposite,""String_Node_Str"",SWT.CHECK);
    isSynchronousButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isSynchronousButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    deactiveButton=toolkit.createButton(charComposite,""String_Node_Str"",SWT.CHECK);
    deactiveButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    deactiveButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    Composite serviceGroup=this.getNewSectionComposite(""String_Node_Str"");
    serviceGroup.setLayout(new GridLayout(2,false));
    Label serviceNameLabel=toolkit.createLabel(serviceGroup,""String_Node_Str"",SWT.NULL);
    serviceNameLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    Composite subPanel=toolkit.createComposite(serviceGroup);
    subPanel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,true,1,1));
    subPanel.setLayout(new GridLayout(2,false));
    serviceNameCombo=new Combo(subPanel,SWT.DROP_DOWN | SWT.SINGLE | SWT.READ_ONLY);
    serviceNameCombo.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,true,1,1));
    ((GridData)serviceNameCombo.getLayoutData()).widthHint=300;
    serviceNameCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        String serviceName=serviceNameCombo.getText();
        String helpPara=""String_Node_Str"";
        if (!""String_Node_Str"".equals(serviceName) && !serviceName.equals(null))         helpPara=EInputTemplate.getXtentisObjexts().get(serviceName).getContent();
 else         helpPara=""String_Node_Str"";
        serviceParametersText.setText(helpPara);
        markDirty();
      }
    }
);
    if (version_greater_than_2_17_0) {
      WSServicesList list=Util.getPort(getXObject()).getServicesList(new WSGetServicesList(""String_Node_Str""));
      WSServicesListItem[] items=list.getItem();
      if (items != null) {
        String[] sortedList=new String[items.length];
        for (int i=0; i < items.length; i++) {
          sortedList[i]=items[i].getJndiName();
        }
        Arrays.sort(sortedList);
        for (int i=0; i < sortedList.length; i++) {
          serviceNameCombo.add(sortedList[i]);
        }
      }
    }
    defultParameterBtn=toolkit.createButton(subPanel,""String_Node_Str"",SWT.PUSH);
    defultParameterBtn.setImage(ImageCache.getCreatedImage(EImage.HELP_CONTENTS.getPath()));
    defultParameterBtn.setToolTipText(""String_Node_Str"");
    defultParameterBtn.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    defultParameterBtn.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (serviceNameCombo.getText().trim().length() == 0)         return;
        String doc=""String_Node_Str"";
        String desc=""String_Node_Str"";
        try {
          XtentisPort port=Util.getPort(getXObject());
          WSServiceGetDocument document=port.getServiceDocument(new WSString(serviceNameCombo.getText().trim()));
          doc=document.getDocument();
          desc=document.getDescription();
        }
 catch (        Exception e1) {
          doc=""String_Node_Str"";
        }
 finally {
          showUpDialog(desc,doc);
        }
      }
      private void showUpDialog(      String desc,      String doc){
        final PluginDetailsDialog dialog=new PluginDetailsDialog(getSite().getShell(),desc,doc,null,""String_Node_Str"");
        dialog.addListener(new Listener(){
          public void handleEvent(          Event event){
            dialog.close();
          }
        }
);
        dialog.create();
        dialog.getShell().setText(serviceNameCombo.getText() + ""String_Node_Str"");
        dialog.setBlockOnOpen(true);
        dialog.open();
      }
    }
);
    Label serviceParametersLabel=toolkit.createLabel(serviceGroup,""String_Node_Str"",SWT.NULL);
    serviceParametersLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,2,1));
    serviceParametersText=toolkit.createText(serviceGroup,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.V_SCROLL| SWT.WRAP);
    serviceParametersText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    ((GridData)serviceParametersText.getLayoutData()).widthHint=200;
    ((GridData)serviceParametersText.getLayoutData()).heightHint=120;
    serviceParametersText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        markDirty();
      }
    }
);
    Composite routingExpressionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    routingExpressionsGroup.setLayout(new GridLayout(1,true));
    conditionsColumns[0].setColumnWidth(200);
    conditionsColumns[1].setColumnWidth(150);
    conditionsColumns[2].setColumnWidth(120);
    conditionsColumns[3].setColumnWidth(120);
    conditionViewer=new TisTableViewer(Arrays.asList(conditionsColumns),toolkit,routingExpressionsGroup);
    conditionViewer.setMainPage(this);
    conditionViewer.setAddMulti(true);
    conditionViewer.create();
    conditionViewer.setHeight(110);
    ConditionWidget conditionWidget=new ConditionWidget(routingExpressionsGroup,toolkit,this);
    conditionText=conditionWidget.getConditionText();
    conditionText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (!refreshing)         markDirty();
      }
    }
);
    wrap.Wrap(this,conditionViewer);
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9977904934564614
149109,"protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite viewablehGroup=this.getNewSectionComposite(""String_Node_Str"");
    viewablehGroup.setLayout(new GridLayout(2,false));
    viewableElementColumns[0].setColumnWidth(220);
    viewableViewer=new TisTableViewer(Arrays.asList(viewableElementColumns),toolkit,viewablehGroup);
    viewableViewer.setMainPage(this);
    viewableViewer.create();
    viewableViewer.setHeight(110);
    Composite searchGroup=this.getNewSectionComposite(""String_Node_Str"");
    searchGroup.setLayout(new GridLayout(2,false));
    searchableElementColumns[0].setColumnWidth(220);
    searchableViewer=new TisTableViewer(Arrays.asList(searchableElementColumns),toolkit,searchGroup);
    searchableViewer.setMainPage(this);
    searchableViewer.create();
    searchableViewer.setHeight(110);
    Composite wcGroup=this.getNewSectionComposite(""String_Node_Str"");
    wcGroup.setLayout(new GridLayout(2,false));
    conditionsColumns[0].setColumnWidth(200);
    conditionsColumns[1].setColumnWidth(150);
    conditionsColumns[3].setColumnWidth(120);
    conditionViewer=new TisTableViewer(Arrays.asList(conditionsColumns),toolkit,wcGroup);
    conditionViewer.setMainPage(this);
    conditionViewer.create();
    conditionViewer.setHeight(110);
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite viewablehGroup=this.getNewSectionComposite(""String_Node_Str"");
    viewablehGroup.setLayout(new GridLayout(2,false));
    viewableElementColumns[0].setColumnWidth(220);
    viewableViewer=new TisTableViewer(Arrays.asList(viewableElementColumns),toolkit,viewablehGroup);
    viewableViewer.setMainPage(this);
    viewableViewer.setAddMulti(true);
    viewableViewer.create();
    viewableViewer.setHeight(110);
    Composite searchGroup=this.getNewSectionComposite(""String_Node_Str"");
    searchGroup.setLayout(new GridLayout(2,false));
    searchableElementColumns[0].setColumnWidth(220);
    searchableViewer=new TisTableViewer(Arrays.asList(searchableElementColumns),toolkit,searchGroup);
    searchableViewer.setMainPage(this);
    searchableViewer.setAddMulti(true);
    searchableViewer.create();
    searchableViewer.setHeight(110);
    Composite wcGroup=this.getNewSectionComposite(""String_Node_Str"");
    wcGroup.setLayout(new GridLayout(2,false));
    conditionsColumns[0].setColumnWidth(200);
    conditionsColumns[1].setColumnWidth(150);
    conditionsColumns[3].setColumnWidth(120);
    conditionViewer=new TisTableViewer(Arrays.asList(conditionsColumns),toolkit,wcGroup);
    conditionViewer.setMainPage(this);
    conditionViewer.setAddMulti(true);
    conditionViewer.create();
    conditionViewer.setHeight(110);
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9674185463659148
149110,"@Override protected void createViewer(){
  super.createTable();
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  table.setLayoutData(gd);
  gd.heightHint=80;
  Composite stepUpDownComposite=toolkit.createComposite(mainComposite,SWT.NONE);
  stepUpDownComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  GridLayout layout=new GridLayout(8,false);
  layout.marginTop=0;
  layout.marginBottom=0;
  layout.marginHeight=0;
  stepUpDownComposite.setLayout(layout);
  addButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  addButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  addButton.setToolTipText(""String_Node_Str"");
  addButton.setImage(ImageCache.getCreatedImage(EImage.ADD_OBJ.getPath()));
  addButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      List<Line> list=(List<Line>)getViewer().getInput();
      Line line=new Line(columns.toArray(new ComplexTableViewerColumn[columns.size()]),getInitValues());
      list.add(line);
      viewer.setSelection(null);
      viewer.refresh();
      viewer.getTable().select(viewer.getTable().getItemCount() - 1);
      markDirty();
    }
  }
);
  deleteButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  deleteButton.setToolTipText(""String_Node_Str"");
  deleteButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  deleteButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index >= 0 && index < viewer.getTable().getItemCount()) {
        List<Line> items=(List<Line>)viewer.getInput();
        items.remove(index);
        viewer.refresh();
        int pos=index - 1;
        if (pos >= 0)         viewer.getTable().select(pos);
        markDirty();
      }
    }
  }
);
  deleteButton.setImage(ImageCache.getCreatedImage(EImage.DELETE_OBJ.getPath()));
  upButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  upButton.setToolTipText(""String_Node_Str"");
  upButton.setImage(ImageCache.getCreatedImage(EImage.PREV_NAV.getPath()));
  upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  upButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index > 0 && index < viewer.getTable().getItemCount()) {
        if (mainPage != null) {
          mainPage.setComitting(true);
        }
        List<Line> items=(List<Line>)viewer.getInput();
        Line line=items.get(index);
        items.remove(index);
        items.add(index - 1,line);
        viewer.refresh();
        if (mainPage != null) {
          mainPage.setComitting(false);
        }
        markDirty();
      }
    }
  }
);
  downButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  downButton.setToolTipText(""String_Node_Str"");
  downButton.setImage(ImageCache.getCreatedImage(EImage.NEXT_NAV.getPath()));
  downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  downButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index >= 0 && index < viewer.getTable().getItemCount() - 1) {
        if (mainPage != null) {
          mainPage.setComitting(true);
        }
        List<Line> items=(List<Line>)viewer.getInput();
        Line line=items.get(index);
        items.remove(index);
        items.add(index + 1,line);
        viewer.refresh();
        if (mainPage != null) {
          mainPage.setComitting(false);
        }
        markDirty();
      }
    }
  }
);
  copyButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  copyButton.setToolTipText(""String_Node_Str"");
  copyButton.setImage(ImageCache.getCreatedImage(EImage.COPY.getPath()));
  copyButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  copyButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index >= 0 && index <= viewer.getTable().getItemCount() - 1) {
        List<Line> items=(List<Line>)viewer.getInput();
        Line line=items.get(index);
        copyLine=line.clone();
        pastButton.setEnabled(copyLine != null);
      }
    }
  }
);
  pastButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  pastButton.setToolTipText(""String_Node_Str"");
  pastButton.setImage(ImageCache.getCreatedImage(EImage.PASTE.getPath()));
  pastButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  pastButton.setEnabled(false);
  pastButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      if (copyLine == null)       return;
      if (mainPage != null) {
        mainPage.setComitting(true);
      }
      List<Line> items=(List<Line>)viewer.getInput();
      items.add(copyLine);
      viewer.refresh();
      if (mainPage != null) {
        mainPage.setComitting(false);
      }
      markDirty();
    }
  }
);
  CellEditor[] editors=new CellEditor[columns.size()];
  for (int i=0; i < columns.size(); i++) {
    if (columns.get(i).isText()) {
      editors[i]=new TextCellEditor(table);
    }
 else     if (columns.get(i).isCombo()) {
      editors[i]=new ComboBoxCellEditor(table,((ComplexTableViewerColumn)columns.get(i)).getComboValues(),SWT.READ_ONLY);
    }
 else     if (columns.get(i).isXPATH()) {
      editors[i]=new XpathCellEditor(table);
    }
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    @SuppressWarnings(""String_Node_Str"") public Object[] getElements(    Object inputElement){
      ArrayList<Line> lines=(ArrayList<Line>)inputElement;
      return lines.toArray(new Line[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      Line line=(Line)element;
      if (columnIndex >= 0 && columnIndex < columns.size()) {
        for (        KeyValue keyvalue : line.keyValues) {
          if (keyvalue.key.equals(columns.get(columnIndex).getName())) {
            String val=keyvalue.value;
            if (columns.get(columnIndex).isNillable()) {
              if (columns.get(columnIndex).getNillValue().equals(val))               val=columns.get(columnIndex).getNillDisplay();
            }
            return val;
          }
        }
      }
      return ""String_Node_Str"";
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  ArrayList<String> columnNames=new ArrayList<String>();
  for (  ComplexTableViewerColumn column : columns) {
    columnNames.add(column.getName());
  }
  viewer.setColumnProperties(columnNames.toArray(new String[columnNames.size()]));
  viewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return editable;
    }
    @SuppressWarnings(""String_Node_Str"") public void modify(    Object element,    String property,    Object value){
      if (value instanceof Integer) {
        if (Integer.valueOf(value.toString()) == -1)         return;
      }
      TableItem item=(TableItem)element;
      Line line=(Line)item.getData();
      int columnIndex=Arrays.asList(viewer.getColumnProperties()).indexOf(property);
      if (columnIndex >= 0 && columnIndex < viewer.getColumnProperties().length) {
        if (isAColumnWithCombo(columnIndex)) {
          String[] attrs=columns.get(columnIndex).getComboValues();
          value=attrs[Integer.parseInt(value.toString())];
        }
        KeyValue kv=line.keyValues.get(columnIndex);
        boolean noChange=kv.value.equals(value.toString());
        kv.value=value.toString();
        viewer.refresh();
        if (!noChange) {
          markDirty();
        }
      }
    }
    public Object getValue(    Object element,    String property){
      int columnIndex=Arrays.asList(viewer.getColumnProperties()).indexOf(property);
      Line line=(Line)element;
      if (isAColumnWithCombo(columnIndex)) {
        String value=line.keyValues.get(columnIndex).value;
        String[] attrs=columns.get(columnIndex).getComboValues();
        return Arrays.asList(attrs).indexOf(value);
      }
      for (      KeyValue keyvalue : line.keyValues) {
        if (property.equals(keyvalue.key)) {
          if (keyvalue.value.equals(""String_Node_Str"")) {
            return columns.get(columnIndex).getNillDisplay();
          }
          return keyvalue.value;
        }
      }
      return null;
    }
    private boolean isAColumnWithCombo(    int columnIdx){
      return columns.get(columnIdx).isCombo();
    }
  }
);
  viewer.getTable().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
        Line line=(Line)((IStructuredSelection)viewer.getSelection()).getFirstElement();
        List<Line> items=(List<Line>)viewer.getInput();
        items.remove(line);
        viewer.refresh();
        markDirty();
      }
    }
  }
);
}","@Override protected void createViewer(){
  super.createTable();
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  table.setLayoutData(gd);
  gd.heightHint=80;
  Composite stepUpDownComposite=toolkit.createComposite(mainComposite,SWT.NONE);
  stepUpDownComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  GridLayout layout=new GridLayout(8,false);
  layout.marginTop=0;
  layout.marginBottom=0;
  layout.marginHeight=0;
  stepUpDownComposite.setLayout(layout);
  addButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  addButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  addButton.setToolTipText(""String_Node_Str"");
  addButton.setImage(ImageCache.getCreatedImage(EImage.ADD_OBJ.getPath()));
  addButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      List<Line> list=(List<Line>)getViewer().getInput();
      Line line=new Line(columns.toArray(new ComplexTableViewerColumn[columns.size()]),getInitValues());
      list.add(line);
      viewer.setSelection(null);
      viewer.refresh();
      viewer.getTable().select(viewer.getTable().getItemCount() - 1);
      markDirty();
    }
  }
);
  if (isAddMulti()) {
    Button addAllButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
    addAllButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
    addAllButton.setToolTipText(""String_Node_Str"");
    addAllButton.setImage(ImageCache.getCreatedImage(EImage.ADDMULTI_OBJ.getPath()));
    addAllButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      @SuppressWarnings(""String_Node_Str"") public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (xpathDialog == null) {
          xpathDialog=new XpathSelectDialog(table.getShell(),mainPage.getXObject().getParent(),""String_Node_Str"",mainPage.getSite(),true,null);
        }
        xpathDialog.setBlockOnOpen(true);
        xpathDialog.open();
        if (xpathDialog.getReturnCode() == Window.OK) {
          String[] xpaths=xpathDialog.getXpath().split(""String_Node_Str"");
          for (          String xpath : xpaths) {
            List<Line> list=(List<Line>)getViewer().getInput();
            Line line=new Line(columns.toArray(new ComplexTableViewerColumn[columns.size()]),getLineValues(xpath,0));
            list.add(line);
          }
          viewer.setSelection(null);
          viewer.refresh();
          viewer.getTable().select(viewer.getTable().getItemCount() - 1);
          markDirty();
        }
      }
    }
);
  }
  deleteButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  deleteButton.setToolTipText(""String_Node_Str"");
  deleteButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  deleteButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index >= 0 && index < viewer.getTable().getItemCount()) {
        List<Line> items=(List<Line>)viewer.getInput();
        items.remove(index);
        viewer.refresh();
        int pos=index - 1;
        if (pos >= 0)         viewer.getTable().select(pos);
        markDirty();
      }
    }
  }
);
  deleteButton.setImage(ImageCache.getCreatedImage(EImage.DELETE_OBJ.getPath()));
  Button deleteAllButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  deleteAllButton.setToolTipText(""String_Node_Str"");
  deleteAllButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  deleteAllButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      List<Line> items=(List<Line>)viewer.getInput();
      items.clear();
      viewer.refresh();
      markDirty();
    }
  }
);
  deleteAllButton.setImage(ImageCache.getCreatedImage(EImage.PROGRESS_REMALL.getPath()));
  upButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  upButton.setToolTipText(""String_Node_Str"");
  upButton.setImage(ImageCache.getCreatedImage(EImage.PREV_NAV.getPath()));
  upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  upButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index > 0 && index < viewer.getTable().getItemCount()) {
        if (mainPage != null) {
          mainPage.setComitting(true);
        }
        List<Line> items=(List<Line>)viewer.getInput();
        Line line=items.get(index);
        items.remove(index);
        items.add(index - 1,line);
        viewer.refresh();
        if (mainPage != null) {
          mainPage.setComitting(false);
        }
        markDirty();
      }
    }
  }
);
  downButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  downButton.setToolTipText(""String_Node_Str"");
  downButton.setImage(ImageCache.getCreatedImage(EImage.NEXT_NAV.getPath()));
  downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  downButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index >= 0 && index < viewer.getTable().getItemCount() - 1) {
        if (mainPage != null) {
          mainPage.setComitting(true);
        }
        List<Line> items=(List<Line>)viewer.getInput();
        Line line=items.get(index);
        items.remove(index);
        items.add(index + 1,line);
        viewer.refresh();
        if (mainPage != null) {
          mainPage.setComitting(false);
        }
        markDirty();
      }
    }
  }
);
  copyButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  copyButton.setToolTipText(""String_Node_Str"");
  copyButton.setImage(ImageCache.getCreatedImage(EImage.COPY.getPath()));
  copyButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  copyButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index >= 0 && index <= viewer.getTable().getItemCount() - 1) {
        List<Line> items=(List<Line>)viewer.getInput();
        Line line=items.get(index);
        copyLine=line.clone();
        pastButton.setEnabled(copyLine != null);
      }
    }
  }
);
  pastButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  pastButton.setToolTipText(""String_Node_Str"");
  pastButton.setImage(ImageCache.getCreatedImage(EImage.PASTE.getPath()));
  pastButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  pastButton.setEnabled(false);
  pastButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      if (copyLine == null)       return;
      if (mainPage != null) {
        mainPage.setComitting(true);
      }
      List<Line> items=(List<Line>)viewer.getInput();
      items.add(copyLine);
      viewer.refresh();
      if (mainPage != null) {
        mainPage.setComitting(false);
      }
      markDirty();
    }
  }
);
  CellEditor[] editors=new CellEditor[columns.size()];
  for (int i=0; i < columns.size(); i++) {
    if (columns.get(i).isText()) {
      editors[i]=new TextCellEditor(table);
    }
 else     if (columns.get(i).isCombo()) {
      editors[i]=new ComboBoxCellEditor(table,((ComplexTableViewerColumn)columns.get(i)).getComboValues(),SWT.READ_ONLY);
    }
 else     if (columns.get(i).isXPATH()) {
      editors[i]=new XpathCellEditor(table);
    }
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    @SuppressWarnings(""String_Node_Str"") public Object[] getElements(    Object inputElement){
      ArrayList<Line> lines=(ArrayList<Line>)inputElement;
      return lines.toArray(new Line[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      Line line=(Line)element;
      if (columnIndex >= 0 && columnIndex < columns.size()) {
        for (        KeyValue keyvalue : line.keyValues) {
          if (keyvalue.key.equals(columns.get(columnIndex).getName())) {
            String val=keyvalue.value;
            if (columns.get(columnIndex).isNillable()) {
              if (columns.get(columnIndex).getNillValue().equals(val))               val=columns.get(columnIndex).getNillDisplay();
            }
            return val;
          }
        }
      }
      return ""String_Node_Str"";
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  ArrayList<String> columnNames=new ArrayList<String>();
  for (  ComplexTableViewerColumn column : columns) {
    columnNames.add(column.getName());
  }
  viewer.setColumnProperties(columnNames.toArray(new String[columnNames.size()]));
  viewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return editable;
    }
    @SuppressWarnings(""String_Node_Str"") public void modify(    Object element,    String property,    Object value){
      if (value instanceof Integer) {
        if (Integer.valueOf(value.toString()) == -1)         return;
      }
      TableItem item=(TableItem)element;
      Line line=(Line)item.getData();
      int columnIndex=Arrays.asList(viewer.getColumnProperties()).indexOf(property);
      if (columnIndex >= 0 && columnIndex < viewer.getColumnProperties().length) {
        if (isAColumnWithCombo(columnIndex)) {
          String[] attrs=columns.get(columnIndex).getComboValues();
          value=attrs[Integer.parseInt(value.toString())];
        }
        KeyValue kv=line.keyValues.get(columnIndex);
        boolean noChange=kv.value.equals(value.toString());
        kv.value=value.toString();
        viewer.refresh();
        if (!noChange) {
          markDirty();
        }
      }
    }
    public Object getValue(    Object element,    String property){
      int columnIndex=Arrays.asList(viewer.getColumnProperties()).indexOf(property);
      Line line=(Line)element;
      if (isAColumnWithCombo(columnIndex)) {
        String value=line.keyValues.get(columnIndex).value;
        String[] attrs=columns.get(columnIndex).getComboValues();
        return Arrays.asList(attrs).indexOf(value);
      }
      for (      KeyValue keyvalue : line.keyValues) {
        if (property.equals(keyvalue.key)) {
          if (keyvalue.value.equals(""String_Node_Str"")) {
            return columns.get(columnIndex).getNillDisplay();
          }
          return keyvalue.value;
        }
      }
      return null;
    }
    private boolean isAColumnWithCombo(    int columnIdx){
      return columns.get(columnIdx).isCombo();
    }
  }
);
  viewer.getTable().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
        Line line=(Line)((IStructuredSelection)viewer.getSelection()).getFirstElement();
        List<Line> items=(List<Line>)viewer.getInput();
        items.remove(line);
        viewer.refresh();
        markDirty();
      }
    }
  }
);
}",0.9071836186639812
149111,"public void mouseUp(MouseEvent e){
  deactive();
}","public void mouseUp(MouseEvent e){
  if (!isMouseInControl(e)) {
    deactive();
  }
}",0.7352941176470589
149112,"@Override protected Control createControl(Composite parent){
  xpath=new XpathWidget(parent,mainPage,false);
  ((GridData)xpath.getComposite().getChildren()[0].getLayoutData()).heightHint=15;
  ((GridData)xpath.getComposite().getChildren()[1].getLayoutData()).heightHint=15;
  if (parent instanceof Table) {
    ((Table)parent).addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
      public void mouseUp(      MouseEvent e){
        deactive();
      }
    }
);
  }
  return xpath.getComposite();
}","@Override protected Control createControl(Composite parent){
  xpath=new XpathWidget(parent,mainPage,false);
  ((GridData)xpath.getComposite().getChildren()[0].getLayoutData()).heightHint=15;
  ((GridData)xpath.getComposite().getChildren()[1].getLayoutData()).heightHint=15;
  if (parent instanceof Table) {
    ((Table)parent).addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
      public void mouseUp(      MouseEvent e){
        if (!isMouseInControl(e)) {
          deactive();
        }
      }
    }
);
  }
  return xpath.getComposite();
}",0.9619651347068146
149113,"private void initializeKeyPress(final SourceViewer viewer){
  StyledText styledText=viewer.getTextWidget();
  styledText.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == 'x' && e.stateMask == SWT.CTRL) {
        viewer.doOperation(ITextOperationTarget.CUT);
      }
 else       if (e.keyCode == 'v' && e.stateMask == SWT.CTRL) {
        viewer.doOperation(ITextOperationTarget.PASTE);
      }
    }
  }
);
}","/** 
 * @deprecated
 * @param viewer
 */
private void initializeKeyPress(final SourceViewer viewer){
  StyledText styledText=viewer.getTextWidget();
  styledText.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == 'x' && e.stateMask == SWT.CTRL) {
        viewer.doOperation(ITextOperationTarget.CUT);
      }
 else       if (e.keyCode == 'v' && e.stateMask == SWT.CTRL) {
        viewer.doOperation(ITextOperationTarget.PASTE);
      }
    }
  }
);
}",0.9613572101790764
149114,"public void createPartControl(Composite parent){
  super.createPartControl(parent);
  initializeKeyPress((SourceViewer)getSourceViewer());
}","public void createPartControl(Composite parent){
  super.createPartControl(parent);
}",0.7555555555555555
149115,"public void execute(){
  List<String> list=new ArrayList<String>();
  try {
    DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
    InputStream in=Thread.currentThread().getContextClassLoader().getResourceAsStream(MIGRATION_FILE_NAME);
    Document doc=builder.parse(in);
    NodeList nodelist=doc.getElementsByTagName(""String_Node_Str"");
    Node root=nodelist.item(0);
    Node child=root.getFirstChild();
    for (int id=0; id < root.getChildNodes().getLength(); id++) {
      Node node=root.getChildNodes().item(id);
      if (node instanceof Element)       list.add(node.getNodeName());
    }
  }
 catch (  Exception e) {
    org.apache.log4j.Logger.getLogger(this.getClass()).error(e.getCause());
    return;
  }
  Class[] clses=getDirectoryEntries(list);
  try {
    for (    Class cls : clses) {
      Constructor cons=cls.getConstructor(new Class[]{});
      Object handler=cons.newInstance(new Object[]{});
      Method executeMethod=cls.getMethod(""String_Node_Str"",new Class[]{});
      executeMethod.invoke(handler,new Object[]{});
    }
  }
 catch (  Exception ex) {
    org.apache.log4j.Logger.getLogger(this.getClass()).error(ex.getMessage());
  }
  ItemPOJO.clearCache();
  ObjectPOJO.clearCache();
}","public void execute(){
  if (!isExeuted) {
    List<String> list=new ArrayList<String>();
    try {
      DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
      InputStream in=Thread.currentThread().getContextClassLoader().getResourceAsStream(MIGRATION_FILE_NAME);
      Document doc=builder.parse(in);
      NodeList nodelist=doc.getElementsByTagName(""String_Node_Str"");
      Node root=nodelist.item(0);
      Node child=root.getFirstChild();
      for (int id=0; id < root.getChildNodes().getLength(); id++) {
        Node node=root.getChildNodes().item(id);
        if (node instanceof Element)         list.add(node.getNodeName());
      }
    }
 catch (    Exception e) {
      org.apache.log4j.Logger.getLogger(this.getClass()).error(e.getCause());
      return;
    }
    for (    String clazz : list) {
      try {
        AbstractMigrationTask task=(AbstractMigrationTask)Class.forName(clazz).newInstance();
        task.start();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    ItemPOJO.clearCache();
    ObjectPOJO.clearCache();
  }
  isExeuted=true;
}",0.6870805369127517
149116,"public void run(){
  try {
    super.run();
    if (this.view != null) {
      ISelection selection=view.getViewer().getSelection();
      xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    }
    if (!xobject.isXObject())     return;
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
      WSDataModel wsDataModel=port.getDataModel(new WSGetDataModel((WSDataModelPK)xobject.getWsKey()));
    xobject.setWsObject(wsDataModel);
  break;
case TreeObject.VIEW:
WSView wsView=port.getView(new WSGetView((WSViewPK)xobject.getWsKey()));
xobject.setWsObject(wsView);
break;
case TreeObject.DATA_CLUSTER:
WSDataCluster wsDataCluster=port.getDataCluster(new WSGetDataCluster((WSDataClusterPK)xobject.getWsKey()));
xobject.setWsObject(wsDataCluster);
break;
case TreeObject.STORED_PROCEDURE:
WSStoredProcedure wsStoredProcedure=port.getStoredProcedure(new WSGetStoredProcedure((WSStoredProcedurePK)xobject.getWsKey()));
xobject.setWsObject(wsStoredProcedure);
break;
case TreeObject.ROLE:
WSRole wsRole=port.getRole(new WSGetRole((WSRolePK)xobject.getWsKey()));
xobject.setWsObject(wsRole);
break;
case TreeObject.ROUTING_RULE:
WSRoutingRule wsRoutingRule=port.getRoutingRule(new WSGetRoutingRule((WSRoutingRulePK)xobject.getWsKey()));
xobject.setWsObject(wsRoutingRule);
break;
case TreeObject.TRANSFORMER:
WSTransformerV2 wsTranformer=port.getTransformerV2(new WSGetTransformerV2((WSTransformerV2PK)xobject.getWsKey()));
xobject.setWsObject(wsTranformer);
break;
case TreeObject.MENU:
WSMenu wsMenu=port.getMenu(new WSGetMenu((WSMenuPK)xobject.getWsKey()));
xobject.setWsObject(wsMenu);
break;
case TreeObject.UNIVERSE:
WSUniverse wsUniverse=port.getUniverse(new WSGetUniverse((WSUniversePK)xobject.getWsKey()));
xobject.setWsObject(wsUniverse);
break;
case TreeObject.SYNCHRONIZATIONPLAN:
WSSynchronizationPlan wsSynchronizationPlan=port.getSynchronizationPlan(new WSGetSynchronizationPlan((WSSynchronizationPlanPK)xobject.getWsKey()));
xobject.setWsObject(wsSynchronizationPlan);
break;
default :
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ xobject.getType());
return;
}
if (page == null) this.page=view.getSite().getWorkbenchWindow().getActivePage();
this.page.openEditor(new XObjectEditorInput(xobject,xobject.getDisplayName()),""String_Node_Str"");
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
}
}","public void run(){
  try {
    super.run();
    if (this.view != null) {
      ISelection selection=view.getViewer().getSelection();
      xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    }
    if (!xobject.isXObject())     return;
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
      WSDataModel wsDataModel=port.getDataModel(new WSGetDataModel((WSDataModelPK)xobject.getWsKey()));
    xobject.setWsObject(wsDataModel);
  break;
case TreeObject.VIEW:
WSView wsView=port.getView(new WSGetView((WSViewPK)xobject.getWsKey()));
xobject.setWsObject(wsView);
break;
case TreeObject.DATA_CLUSTER:
WSDataCluster wsDataCluster=port.getDataCluster(new WSGetDataCluster((WSDataClusterPK)xobject.getWsKey()));
xobject.setWsObject(wsDataCluster);
break;
case TreeObject.STORED_PROCEDURE:
WSStoredProcedure wsStoredProcedure=port.getStoredProcedure(new WSGetStoredProcedure((WSStoredProcedurePK)xobject.getWsKey()));
xobject.setWsObject(wsStoredProcedure);
break;
case TreeObject.ROLE:
WSRole wsRole=port.getRole(new WSGetRole((WSRolePK)xobject.getWsKey()));
xobject.setWsObject(wsRole);
break;
case TreeObject.ROUTING_RULE:
WSRoutingRule wsRoutingRule=port.getRoutingRule(new WSGetRoutingRule((WSRoutingRulePK)xobject.getWsKey()));
xobject.setWsObject(wsRoutingRule);
break;
case TreeObject.TRANSFORMER:
WSTransformerV2 wsTranformer=port.getTransformerV2(new WSGetTransformerV2((WSTransformerV2PK)xobject.getWsKey()));
xobject.setWsObject(wsTranformer);
break;
case TreeObject.MENU:
WSMenu wsMenu=port.getMenu(new WSGetMenu((WSMenuPK)xobject.getWsKey()));
xobject.setWsObject(wsMenu);
break;
case TreeObject.UNIVERSE:
WSUniverse wsUniverse=port.getUniverse(new WSGetUniverse((WSUniversePK)xobject.getWsKey()));
xobject.setWsObject(wsUniverse);
break;
case TreeObject.SYNCHRONIZATIONPLAN:
WSSynchronizationPlan wsSynchronizationPlan=port.getSynchronizationPlan(new WSGetSynchronizationPlan((WSSynchronizationPlanPK)xobject.getWsKey()));
xobject.setWsObject(wsSynchronizationPlan);
break;
case TreeObject.SERVICE_CONFIGURATION:
break;
default :
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ xobject.getType());
return;
}
if (page == null) this.page=view.getSite().getWorkbenchWindow().getActivePage();
this.page.openEditor(new XObjectEditorInput(xobject,xobject.getDisplayName()),""String_Node_Str"");
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
}
}",0.9914338919925512
149117,"public void run(){
  try {
    TreeObject xobject=(TreeObject)((XObjectEditorInput)editor.getEditorInput()).getModel();
    Object newWsObject=xobject.getWsObject();
    if (!xobject.isXObject())     return;
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
      port.putDataModel(new WSPutDataModel((WSDataModel)newWsObject));
    break;
case TreeObject.VIEW:
  port.putView(new WSPutView((WSView)newWsObject));
break;
case TreeObject.DATA_CLUSTER:
port.putDataCluster(new WSPutDataCluster((WSDataCluster)newWsObject));
break;
case TreeObject.STORED_PROCEDURE:
port.putStoredProcedure(new WSPutStoredProcedure((WSStoredProcedure)newWsObject));
break;
case TreeObject.ROLE:
port.putRole(new WSPutRole((WSRole)newWsObject));
break;
case TreeObject.ROUTING_RULE:
port.putRoutingRule(new WSPutRoutingRule((WSRoutingRule)newWsObject));
break;
case TreeObject.TRANSFORMER:
port.putTransformerV2(new WSPutTransformerV2((WSTransformerV2)newWsObject));
break;
case TreeObject.MENU:
port.putMenu(new WSPutMenu((WSMenu)newWsObject));
break;
case TreeObject.UNIVERSE:
port.putUniverse(new WSPutUniverse((WSUniverse)newWsObject));
break;
case TreeObject.SYNCHRONIZATIONPLAN:
port.putSynchronizationPlan(new WSPutSynchronizationPlan((WSSynchronizationPlan)newWsObject));
break;
default :
MessageDialog.openError(this.editor.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ xobject.getType());
return;
}
if (xobject.getParent() == null) {
if (xobject.getType() != TreeObject.DOCUMENT) {
TreeParent folder=xobject.findServerFolder(xobject.getType());
folder.addChild(xobject);
}
xobject.fireEvent(IXObjectModelListener.SAVE,xobject.getParent(),xobject);
xobject.getServerRoot().fireEvent(IXObjectModelListener.NEED_REFRESH,null,xobject.getServerRoot());
}
 else {
xobject.fireEvent(IXObjectModelListener.SAVE,xobject.getParent(),xobject);
}
state=0;
}
 catch (Exception e) {
e.printStackTrace();
ErrorExceptionDialog.openError(this.editor.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
state=1;
}
}","public void run(){
  try {
    TreeObject xobject=(TreeObject)((XObjectEditorInput)editor.getEditorInput()).getModel();
    Object newWsObject=xobject.getWsObject();
    if (!xobject.isXObject())     return;
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
      port.putDataModel(new WSPutDataModel((WSDataModel)newWsObject));
    break;
case TreeObject.VIEW:
  port.putView(new WSPutView((WSView)newWsObject));
break;
case TreeObject.DATA_CLUSTER:
port.putDataCluster(new WSPutDataCluster((WSDataCluster)newWsObject));
break;
case TreeObject.STORED_PROCEDURE:
port.putStoredProcedure(new WSPutStoredProcedure((WSStoredProcedure)newWsObject));
break;
case TreeObject.ROLE:
port.putRole(new WSPutRole((WSRole)newWsObject));
break;
case TreeObject.ROUTING_RULE:
port.putRoutingRule(new WSPutRoutingRule((WSRoutingRule)newWsObject));
break;
case TreeObject.TRANSFORMER:
port.putTransformerV2(new WSPutTransformerV2((WSTransformerV2)newWsObject));
break;
case TreeObject.MENU:
port.putMenu(new WSPutMenu((WSMenu)newWsObject));
break;
case TreeObject.UNIVERSE:
port.putUniverse(new WSPutUniverse((WSUniverse)newWsObject));
break;
case TreeObject.SYNCHRONIZATIONPLAN:
port.putSynchronizationPlan(new WSPutSynchronizationPlan((WSSynchronizationPlan)newWsObject));
break;
case TreeObject.SERVICE_CONFIGURATION:
break;
default :
MessageDialog.openError(this.editor.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ xobject.getType());
return;
}
if (xobject.getParent() == null) {
if (xobject.getType() != TreeObject.DOCUMENT) {
TreeParent folder=xobject.findServerFolder(xobject.getType());
folder.addChild(xobject);
}
xobject.fireEvent(IXObjectModelListener.SAVE,xobject.getParent(),xobject);
xobject.getServerRoot().fireEvent(IXObjectModelListener.NEED_REFRESH,null,xobject.getServerRoot());
}
 else {
xobject.fireEvent(IXObjectModelListener.SAVE,xobject.getParent(),xobject);
}
state=0;
}
 catch (Exception e) {
e.printStackTrace();
ErrorExceptionDialog.openError(this.editor.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
state=1;
}
}",0.9899122807017544
149118,"public AMainPageV2(FormEditor editor,String id,String title){
  super(editor,id,title);
}","public AMainPageV2(FormEditor editor,String id,String title){
  super(editor,id,title);
  Version ver;
  try {
    ver=Util.getVersion(getXObject());
    version_greater_than_2_17_0=((ver.getMajor() > 2) || ((ver.getMajor() == 2) && (ver.getMinor() >= 17)));
  }
 catch (  XtentisException e) {
    e.printStackTrace();
  }
}",0.429951690821256
149119,"public RoutingRuleMainPage(FormEditor editor){
  super(editor,RoutingRuleMainPage.class.getName(),""String_Node_Str"" + ((XObjectEditorInput)editor.getEditorInput()).getName() + Util.getRevision((TreeObject)((XObjectEditorInput)editor.getEditorInput()).getModel()));
  try {
    Version ver=Util.getVersion(getXObject());
    version_greater_than_2_17_0=((ver.getMajor() > 2) || ((ver.getMajor() == 2) && (ver.getMinor() >= 17)));
    treeParent=this.getXObject().getParent();
    if (treeParent == null) {
      treeParent=this.getXObject().getServerRoot().findServerFolder(TreeObject.ROUTING_RULE);
    }
  }
 catch (  Exception e) {
  }
}","public RoutingRuleMainPage(FormEditor editor){
  super(editor,RoutingRuleMainPage.class.getName(),""String_Node_Str"" + ((XObjectEditorInput)editor.getEditorInput()).getName() + Util.getRevision((TreeObject)((XObjectEditorInput)editor.getEditorInput()).getModel()));
  treeParent=this.getXObject().getParent();
  if (treeParent == null) {
    treeParent=this.getXObject().getServerRoot().findServerFolder(TreeObject.ROUTING_RULE);
  }
}",0.7381174277726001
149120,"@Override public Image getTitleImage(){
  TreeObject object=(TreeObject)((XObjectEditorInput)this.getEditorInput()).getModel();
  if (object.getType() == TreeObject._SERVER_)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.DATA_CLUSTER)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.DATA_MODEL)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.MENU)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.TRANSFORMER)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.ROLE)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.STORED_PROCEDURE)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.ROUTING_RULE)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.VIEW)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.DOCUMENT)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.SUBSCRIPTION_ENGINE)   return ImageCache.getImage(EImage.SUBSCRIPTION_ENGINE.getPath()).createImage();
 else   if (object.getType() == TreeObject.SYNCHRONIZATIONPLAN)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.UNIVERSE)   return ImageCache.getImage(""String_Node_Str"").createImage();
  return ImageCache.getImage(""String_Node_Str"").createImage();
}","@Override public Image getTitleImage(){
  TreeObject object=(TreeObject)((XObjectEditorInput)this.getEditorInput()).getModel();
  if (object.getType() == TreeObject._SERVER_)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.DATA_CLUSTER)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.DATA_MODEL)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.MENU)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.TRANSFORMER)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.ROLE)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.STORED_PROCEDURE)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.ROUTING_RULE)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.VIEW)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.DOCUMENT)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.SUBSCRIPTION_ENGINE)   return ImageCache.getImage(EImage.SUBSCRIPTION_ENGINE.getPath()).createImage();
 else   if (object.getType() == TreeObject.SYNCHRONIZATIONPLAN)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.UNIVERSE)   return ImageCache.getImage(""String_Node_Str"").createImage();
 else   if (object.getType() == TreeObject.SERVICE_CONFIGURATION)   return ImageCache.getImage(EImage.SERVICE_CONFIGURATION.getPath()).createImage();
  return ImageCache.getImage(""String_Node_Str"").createImage();
}",0.9587685541506322
149121,"protected void addPages(){
  try {
    updateTitle();
    TreeObject xobject=(TreeObject)((XObjectEditorInput)this.getEditorInput()).getModel();
    this.initialXObject=new TreeObject(xobject.getDisplayName(),xobject.getServerRoot(),xobject.getType(),xobject.getWsKey(),xobject.getWsObject(),xobject.getAdditionalInfo());
    if (!xobject.isXObject())     return;
    xobject.addListener(this);
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
      addPage(new DataModelMainPage(this));
    WSDataModel wsObject=(WSDataModel)(xobject.getWsObject());
  Document doc=new Document(wsObject.getXsdSchema());
xmlEditor=new XMLEditor(this,xobject);
addPage(xmlEditor,new XMLEditorInput(doc));
this.setPageText(1,""String_Node_Str"");
break;
case TreeObject.INBOUND_PLUGIN:
break;
case TreeObject.OUTBOUND_PLUGIN:
break;
case TreeObject.VIEW:
addPage(new ViewMainPage(this));
break;
case TreeObject.DATA_CLUSTER:
addPage(new DataClusterMainPage(this));
break;
case TreeObject.STORED_PROCEDURE:
addPage(new StoredProcedureMainPage(this));
break;
case TreeObject.ROLE:
addPage(new RoleMainPage(this));
break;
case TreeObject.ROUTING_RULE:
addPage(new RoutingRuleMainPage(this));
break;
case TreeObject.TRANSFORMER:
addPage(new TransformerMainPage(this));
break;
case TreeObject.MENU:
addPage(new MenuMainPage(this));
break;
case TreeObject.UNIVERSE:
addPage(new UniverseMainPage(this));
break;
case TreeObject.SYNCHRONIZATIONPLAN:
addPage(new SynchronizationMainPage(this));
break;
default :
MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ xobject.getType());
return;
}
}
 catch (PartInitException e) {
MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
}
}","protected void addPages(){
  try {
    updateTitle();
    TreeObject xobject=(TreeObject)((XObjectEditorInput)this.getEditorInput()).getModel();
    this.initialXObject=new TreeObject(xobject.getDisplayName(),xobject.getServerRoot(),xobject.getType(),xobject.getWsKey(),xobject.getWsObject(),xobject.getAdditionalInfo());
    if (!xobject.isXObject())     return;
    xobject.addListener(this);
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
      addPage(new DataModelMainPage(this));
    WSDataModel wsObject=(WSDataModel)(xobject.getWsObject());
  Document doc=new Document(wsObject.getXsdSchema());
xmlEditor=new XMLEditor(this,xobject);
addPage(xmlEditor,new XMLEditorInput(doc));
this.setPageText(1,""String_Node_Str"");
break;
case TreeObject.INBOUND_PLUGIN:
break;
case TreeObject.OUTBOUND_PLUGIN:
break;
case TreeObject.VIEW:
addPage(new ViewMainPage(this));
break;
case TreeObject.DATA_CLUSTER:
addPage(new DataClusterMainPage(this));
break;
case TreeObject.STORED_PROCEDURE:
addPage(new StoredProcedureMainPage(this));
break;
case TreeObject.ROLE:
addPage(new RoleMainPage(this));
break;
case TreeObject.ROUTING_RULE:
addPage(new RoutingRuleMainPage(this));
break;
case TreeObject.TRANSFORMER:
addPage(new TransformerMainPage(this));
break;
case TreeObject.MENU:
addPage(new MenuMainPage(this));
break;
case TreeObject.UNIVERSE:
addPage(new UniverseMainPage(this));
break;
case TreeObject.SYNCHRONIZATIONPLAN:
addPage(new SynchronizationMainPage(this));
break;
case TreeObject.SERVICE_CONFIGURATION:
addPage(new ServiceConfigrationMainPage(this));
break;
default :
MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ xobject.getType());
return;
}
}
 catch (PartInitException e) {
MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
}
}",0.9745119305856832
149122,"public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    sxid=new SimpleXpathInputDialog(page,""String_Node_Str"",""String_Node_Str"",struc.getForeignKey(),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        sxid.close();
      }
    }
,dataModelName);
    sxid.setBlockOnOpen(true);
    int ret=sxid.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setForeignKey(""String_Node_Str"".equals(sxid.getXpath()) ? null : sxid.getXpath());
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    sxid=new SimpleXpathInputDialog(page,""String_Node_Str"",""String_Node_Str"",struc.getForeignKey(),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        sxid.close();
      }
    }
,dataModelName);
    sxid.setBlockOnOpen(true);
    int ret=sxid.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setForeignKey(""String_Node_Str"".equals(sxid.getXpath()) ? null : sxid.getXpath().replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.981981981981982
149123,"private void updateParemeters(){
  if (conditionViewer == null)   return;
  java.util.List<Line> lines=(java.util.List<Line>)conditionViewer.getViewer().getInput();
  java.util.List<RoleWhereCondition> rcList=new ArrayList<RoleWhereCondition>();
  for (  Line item : lines) {
    String[] values=new String[]{item.keyValues.get(0).value,item.keyValues.get(1).value,item.keyValues.get(2).value,item.keyValues.get(3).value};
    RoleWhereCondition rc=Util.convertLineToRC(values);
    rcList.add(rc);
  }
  LinkedHashSet<String> parameters=new LinkedHashSet<String>();
  for (Iterator iter=rcList.iterator(); iter.hasNext(); ) {
    RoleWhereCondition rc=(RoleWhereCondition)iter.next();
    parameters.add(rc.toString());
  }
  String instanceName=((InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement()).getInstanceName();
  role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).setParameters(parameters);
}","private void updateParemeters(){
  if (conditionViewer == null || ((IStructuredSelection)instancesViewer.getSelection()).getFirstElement() == null)   return;
  java.util.List<Line> lines=(java.util.List<Line>)conditionViewer.getViewer().getInput();
  java.util.List<RoleWhereCondition> rcList=new ArrayList<RoleWhereCondition>();
  for (  Line item : lines) {
    String[] values=new String[]{item.keyValues.get(0).value,item.keyValues.get(1).value,item.keyValues.get(2).value,item.keyValues.get(3).value};
    RoleWhereCondition rc=Util.convertLineToRC(values);
    rcList.add(rc);
  }
  LinkedHashSet<String> parameters=new LinkedHashSet<String>();
  for (Iterator iter=rcList.iterator(); iter.hasNext(); ) {
    RoleWhereCondition rc=(RoleWhereCondition)iter.next();
    parameters.add(rc.toString());
  }
  String instanceName=((InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement()).getInstanceName();
  role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).setParameters(parameters);
}",0.9587020648967552
149124,"protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSRole ws=(WSRole)(getXObject().getWsObject());
    ws.setDescription(desAntionComposite.getText());
    ws.setName(role.getName());
    Set<String> objectTypes=role.getSpecifications().keySet();
    ArrayList<WSRoleSpecification> wsSpecifications=new ArrayList<WSRoleSpecification>();
    for (Iterator iter=objectTypes.iterator(); iter.hasNext(); ) {
      String objectType=(String)iter.next();
      Role.Specification specification=role.getSpecifications().get(objectType);
      ArrayList<WSRoleSpecificationInstance> wsInstances=new ArrayList<WSRoleSpecificationInstance>();
      Set<String> instanceIds=specification.getInstances().keySet();
      for (Iterator iterator=instanceIds.iterator(); iterator.hasNext(); ) {
        String id=(String)iterator.next();
        Role.Specification.Instance instance=specification.getInstances().get(id);
        WSRoleSpecificationInstance wsInstance=new WSRoleSpecificationInstance(id,instance.isWritable(),instance.getParameters().toArray(new String[instance.getParameters().size()]));
        wsInstances.add(wsInstance);
      }
      WSRoleSpecification wsSpecification=new WSRoleSpecification(objectType,specification.isAdmin(),wsInstances.toArray(new WSRoleSpecificationInstance[wsInstances.size()]));
      wsSpecifications.add(wsSpecification);
    }
    ws.setSpecification(wsSpecifications.toArray(new WSRoleSpecification[wsSpecifications.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    updateParemeters();
    WSRole ws=(WSRole)(getXObject().getWsObject());
    ws.setDescription(desAntionComposite.getText());
    ws.setName(role.getName());
    Set<String> objectTypes=role.getSpecifications().keySet();
    ArrayList<WSRoleSpecification> wsSpecifications=new ArrayList<WSRoleSpecification>();
    for (Iterator iter=objectTypes.iterator(); iter.hasNext(); ) {
      String objectType=(String)iter.next();
      Role.Specification specification=role.getSpecifications().get(objectType);
      ArrayList<WSRoleSpecificationInstance> wsInstances=new ArrayList<WSRoleSpecificationInstance>();
      Set<String> instanceIds=specification.getInstances().keySet();
      for (Iterator iterator=instanceIds.iterator(); iterator.hasNext(); ) {
        String id=(String)iterator.next();
        Role.Specification.Instance instance=specification.getInstances().get(id);
        WSRoleSpecificationInstance wsInstance=new WSRoleSpecificationInstance(id,instance.isWritable(),instance.getParameters().toArray(new String[instance.getParameters().size()]));
        wsInstances.add(wsInstance);
      }
      WSRoleSpecification wsSpecification=new WSRoleSpecification(objectType,specification.isAdmin(),wsInstances.toArray(new WSRoleSpecificationInstance[wsInstances.size()]));
      wsSpecifications.add(wsSpecification);
    }
    ws.setSpecification(wsSpecifications.toArray(new WSRoleSpecification[wsSpecifications.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9930434782608696
149125,"public Object[] getElements(Object inputElement){
  ArrayList<RoleWhereCondition> wcList=(ArrayList<RoleWhereCondition>)inputElement;
  return wcList.toArray(new RoleWhereCondition[wcList.size()]);
}","public Object[] getElements(Object inputElement){
  HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
  Set<String> names=instances.keySet();
  ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
  for (Iterator iter=names.iterator(); iter.hasNext(); ) {
    String name=(String)iter.next();
    InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
    lines.add(line);
  }
  return lines.toArray(new InstanceLine[lines.size()]);
}",0.2154696132596685
149126,"private void deleteItems(Object view){
  List list=null;
  if (instancesViewer == view) {
    list=((IStructuredSelection)instancesViewer.getSelection()).toList();
  }
 else   if (wcListViewer != null) {
    IStructuredSelection selections=(IStructuredSelection)wcListViewer.getSelection();
    list=Arrays.asList(selections.toArray());
    String instanceName=((InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement()).getInstanceName();
    ArrayList<RoleWhereCondition> wcList=(ArrayList<RoleWhereCondition>)wcListViewer.getInput();
    wcList.removeAll(list);
    LinkedHashSet<String> parameters=new LinkedHashSet<String>();
    for (Iterator iter=wcList.iterator(); iter.hasNext(); ) {
      RoleWhereCondition rwc=(RoleWhereCondition)iter.next();
      parameters.add(rwc.toString());
    }
    role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).setParameters(parameters);
    wcListViewer.refresh();
  }
  for (  Object le : list) {
    Object line=le;
    if (line instanceof InstanceLine) {
      HashMap map=role.getSpecifications().get(objectTypesCombo.getText()).getInstances();
      boolean is=map.containsKey(((InstanceLine)line).getInstanceName());
      map.remove(((InstanceLine)line).getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
    }
    markDirty();
  }
}","private void deleteItems(Object view){
  List list=null;
  if (instancesViewer == view) {
    list=((IStructuredSelection)instancesViewer.getSelection()).toList();
  }
  for (  Object le : list) {
    Object line=le;
    if (line instanceof InstanceLine) {
      HashMap map=role.getSpecifications().get(objectTypesCombo.getText()).getInstances();
      boolean is=map.containsKey(((InstanceLine)line).getInstanceName());
      map.remove(((InstanceLine)line).getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
    }
    markDirty();
  }
}",0.4972431077694235
149127,"public void dispose(){
}","public void dispose(){
  super.dispose();
  windowTarget.dispose();
}",0.5161290322580645
149128,"public void update(Observable o,Object arg){
  if (arg != null && (arg == instancesViewer || arg == wcListViewer)) {
    deleteItems(arg);
  }
}","public void update(Observable o,Object arg){
  if (arg != null && (arg == instancesViewer)) {
    deleteItems(arg);
  }
}",0.9132075471698112
149129,"private Composite getViewParametersComposite(){
  FormToolkit toolkit=this.getManagedForm().getToolkit();
  Composite composite=toolkit.createComposite(paramsClientComposite,SWT.BORDER);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  composite.setLayout(new GridLayout(5,false));
  wcLeftText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
  wcLeftText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  wcOperatorCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  wcOperatorCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  wcOperatorCombo.add(""String_Node_Str"");
  wcOperatorCombo.add(""String_Node_Str"");
  wcOperatorCombo.add(""String_Node_Str"");
  wcOperatorCombo.add(""String_Node_Str"");
  wcOperatorCombo.add(""String_Node_Str"");
  wcOperatorCombo.add(""String_Node_Str"");
  wcOperatorCombo.add(""String_Node_Str"");
  wcOperatorCombo.add(""String_Node_Str"");
  wcOperatorCombo.add(""String_Node_Str"");
  wcOperatorCombo.add(""String_Node_Str"");
  wcOperatorCombo.add(""String_Node_Str"");
  wcOperatorCombo.select(0);
  wcOperatorCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (""String_Node_Str"".equals(wcOperatorCombo.getText())) {
        wcPredicateCombo.setEnabled(true);
      }
 else {
        wcPredicateCombo.select(0);
        wcPredicateCombo.setEnabled(false);
      }
    }
  }
);
  wcRightText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
  wcRightText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  wcRightText.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        addWhereCondition();
      }
    }
  }
);
  wcPredicateCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  wcPredicateCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  wcPredicateCombo.add(""String_Node_Str"");
  wcPredicateCombo.add(""String_Node_Str"");
  wcPredicateCombo.add(""String_Node_Str"");
  wcPredicateCombo.add(""String_Node_Str"");
  wcPredicateCombo.add(""String_Node_Str"");
  wcPredicateCombo.add(""String_Node_Str"");
  Button wcButton=toolkit.createButton(composite,""String_Node_Str"",SWT.PUSH);
  wcButton.setImage(ImageCache.getCreatedImage(EImage.ADD_OBJ.getPath()));
  wcButton.setToolTipText(""String_Node_Str"");
  wcButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  wcButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      addWhereCondition();
    }
  }
);
  wcListViewer=new ListViewer(composite,SWT.BORDER | SWT.MULTI);
  wcListViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,5,1));
  ((GridData)wcListViewer.getControl().getLayoutData()).minimumHeight=100;
  wcListViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<RoleWhereCondition> wcList=(ArrayList<RoleWhereCondition>)inputElement;
      return wcList.toArray(new RoleWhereCondition[wcList.size()]);
    }
  }
);
  wcListViewer.setLabelProvider(new ILabelProvider(){
    public Image getImage(    Object element){
      return null;
    }
    public String getText(    Object element){
      RoleWhereCondition wc=(RoleWhereCondition)element;
      String text=wc.getLeftPath() + ""String_Node_Str"";
      text+=wc.getOperator();
      text+=""String_Node_Str"";
      if (!wc.getOperator().equals(""String_Node_Str""))       text+=""String_Node_Str"";
      text+=wc.getRightValueOrPath();
      if (!wc.getOperator().equals(""String_Node_Str""))       text+=""String_Node_Str"";
      text+=""String_Node_Str"";
      if ((wc.getPredicate() != null) && (!""String_Node_Str"".equals(wc.getPredicate())))       text+=""String_Node_Str"" + wc.getPredicate() + ""String_Node_Str"";
      return text;
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void dispose(){
    }
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void removeListener(    ILabelProviderListener listener){
    }
  }
);
  DragSource wcSource=new DragSource(wcListViewer.getControl(),DND.DROP_MOVE);
  wcSource.setTransfer(new Transfer[]{TextTransfer.getInstance()});
  wcSource.addDragListener(new WCDragSourceListener());
  wrap.Wrap(RoleMainPage.this,wcListViewer);
  return composite;
}","private Composite getViewParametersComposite(){
  FormToolkit toolkit=this.getManagedForm().getToolkit();
  Composite composite=toolkit.createComposite(paramsClientComposite,SWT.BORDER);
  composite.setLayout(new GridLayout(2,false));
  conditionsColumns[0].setColumnWidth(200);
  conditionsColumns[1].setColumnWidth(150);
  conditionsColumns[3].setColumnWidth(120);
  conditionViewer=new TisTableViewer(Arrays.asList(conditionsColumns),this.getManagedForm().getToolkit(),composite);
  conditionViewer.setMainPage(this);
  conditionViewer.create();
  conditionViewer.setHeight(110);
  return composite;
}",0.0913059294288832
149130,"protected void addWhereCondition(){
  markDirty();
  RoleWhereCondition wc=new RoleWhereCondition();
  wc.setLeftPath(wcLeftText.getText());
  wc.setOperator(wcOperatorCombo.getText());
  wc.setRightValueOrPath(wcRightText.getText());
  wc.setPredicate(wcPredicateCombo.getText());
  ArrayList<RoleWhereCondition> wcList=(ArrayList<RoleWhereCondition>)wcListViewer.getInput();
  wcList.add(wc);
  LinkedHashSet<String> parameters=new LinkedHashSet<String>();
  for (Iterator iter=wcList.iterator(); iter.hasNext(); ) {
    RoleWhereCondition wswc=(RoleWhereCondition)iter.next();
    parameters.add(wswc.toString());
  }
  String instanceName=((InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement()).getInstanceName();
  role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).setParameters(parameters);
  wcListViewer.setInput(wcList);
  markDirty();
}","protected void addWhereCondition(){
  markDirty();
  RoleWhereCondition wc=new RoleWhereCondition();
  wc.setLeftPath(wcLeftText.getText());
  wc.setOperator(wcOperatorCombo.getText());
  wc.setRightValueOrPath(wcRightText.getText());
  wc.setPredicate(wcPredicateCombo.getText());
  ArrayList<RoleWhereCondition> wcList=(ArrayList<RoleWhereCondition>)conditionViewer.getViewer().getInput();
  wcList.add(wc);
  LinkedHashSet<String> parameters=new LinkedHashSet<String>();
  for (Iterator iter=wcList.iterator(); iter.hasNext(); ) {
    RoleWhereCondition wswc=(RoleWhereCondition)iter.next();
    parameters.add(wswc.toString());
  }
  String instanceName=((InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement()).getInstanceName();
  role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).setParameters(parameters);
  conditionViewer.getViewer().setInput(wcList);
  markDirty();
}",0.9710920770877944
149131,"private void refreshViewParameters(String instanceName){
  paramsLabel.setText(""String_Node_Str"" + instanceName);
  wcLeftText.setText(""String_Node_Str"");
  wcOperatorCombo.select(0);
  wcRightText.setText(""String_Node_Str"");
  wcPredicateCombo.setEnabled(true);
  wcPredicateCombo.select(0);
  wcListViewer.setInput(new ArrayList<RoleWhereCondition>());
  wcListViewer.refresh();
  HashSet<String> parameters=role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).getParameters();
  ArrayList<RoleWhereCondition> wcList=new ArrayList<RoleWhereCondition>();
  for (Iterator iter=parameters.iterator(); iter.hasNext(); ) {
    String marshalledWC=(String)iter.next();
    wcList.add(RoleWhereCondition.parse(marshalledWC));
  }
  wcListViewer.setInput(wcList);
}","private void refreshViewParameters(String instanceName){
  paramsLabel.setText(""String_Node_Str"" + instanceName);
  HashSet<String> parameters=role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).getParameters();
  java.util.List<Line> lines=new ArrayList<Line>();
  for (Iterator iter=parameters.iterator(); iter.hasNext(); ) {
    String marshalledWC=(String)iter.next();
    Line line=new Line(conditionsColumns,Util.convertRoleWhereCondition(RoleWhereCondition.parse(marshalledWC)));
    lines.add(line);
  }
  conditionViewer.getViewer().setInput(lines);
}",0.6470588235294118
149132,"protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH);
    addInstanceButton.setImage(ImageCache.getCreatedImage(EImage.ADD_OBJ.getPath()));
    addInstanceButton.setToolTipText(""String_Node_Str"");
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          RoleMenuParameters menuParameters=new RoleMenuParameters();
          menuParameters.setParentID(""String_Node_Str"");
          menuParameters.setPosition(1);
          String instanceName=instanceNameCombo.getText();
          specification.getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
        }
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION | SWT.MULTI);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
wrap.Wrap(this,instancesViewer);
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}","protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH);
    addInstanceButton.setImage(ImageCache.getCreatedImage(EImage.ADD_OBJ.getPath()));
    addInstanceButton.setToolTipText(""String_Node_Str"");
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          RoleMenuParameters menuParameters=new RoleMenuParameters();
          menuParameters.setParentID(""String_Node_Str"");
          menuParameters.setPosition(1);
          String instanceName=instanceNameCombo.getText();
          specification.getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
        }
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION | SWT.MULTI);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.NULL);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
wrap.Wrap(this,instancesViewer);
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}",0.9995316159250586
149133,"private void updateParemeters(){
  java.util.List<Line> lines=(java.util.List<Line>)conditionViewer.getViewer().getInput();
  java.util.List<RoleWhereCondition> rcList=new ArrayList<RoleWhereCondition>();
  for (  Line item : lines) {
    String[] values=new String[]{item.keyValues.get(0).value,item.keyValues.get(1).value,item.keyValues.get(2).value,item.keyValues.get(3).value};
    RoleWhereCondition rc=Util.convertLineToRC(values);
    rcList.add(rc);
  }
  LinkedHashSet<String> parameters=new LinkedHashSet<String>();
  for (Iterator iter=rcList.iterator(); iter.hasNext(); ) {
    RoleWhereCondition rc=(RoleWhereCondition)iter.next();
    parameters.add(rc.toString());
  }
  String instanceName=((InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement()).getInstanceName();
  role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).setParameters(parameters);
}","private void updateParemeters(){
  if (conditionViewer == null)   return;
  java.util.List<Line> lines=(java.util.List<Line>)conditionViewer.getViewer().getInput();
  java.util.List<RoleWhereCondition> rcList=new ArrayList<RoleWhereCondition>();
  for (  Line item : lines) {
    String[] values=new String[]{item.keyValues.get(0).value,item.keyValues.get(1).value,item.keyValues.get(2).value,item.keyValues.get(3).value};
    RoleWhereCondition rc=Util.convertLineToRC(values);
    rcList.add(rc);
  }
  LinkedHashSet<String> parameters=new LinkedHashSet<String>();
  for (Iterator iter=rcList.iterator(); iter.hasNext(); ) {
    RoleWhereCondition rc=(RoleWhereCondition)iter.next();
    parameters.add(rc.toString());
  }
  String instanceName=((InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement()).getInstanceName();
  role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).setParameters(parameters);
}",0.9785227867993714
149134,"@Override public IStatus run(IProgressMonitor monitor){
  try {
    File f=new File(filename);
    String dataCluster=f.getParentFile().getName();
    monitor.beginTask(""String_Node_Str"" + dataCluster + ""String_Node_Str"",IProgressMonitor.UNKNOWN);
    Util.importDataCluster(filename,server,monitor);
    if (!""String_Node_Str"".equalsIgnoreCase(dataCluster)) {
      monitor.subTask(""String_Node_Str"" + dataCluster + ""String_Node_Str"");
      WSDataCluster dc=new WSDataCluster((String)dataCluster,""String_Node_Str"",""String_Node_Str"");
      Util.getPort(xobject).putDataCluster(new WSPutDataCluster(dc));
    }
    monitor.done();
    return Status.OK_STATUS;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return Status.CANCEL_STATUS;
  }
 finally {
    monitor.subTask(""String_Node_Str"");
    new ServerRefreshAction(view,xobject.getServerRoot()).run();
  }
}","@Override public IStatus run(IProgressMonitor monitor){
  try {
    File f=new File(filename);
    String dataCluster=f.getParentFile().getName();
    monitor.beginTask(""String_Node_Str"" + dataCluster + ""String_Node_Str"",IProgressMonitor.UNKNOWN);
    Util.importDataCluster(filename,server,monitor);
    if (!""String_Node_Str"".equalsIgnoreCase(dataCluster)) {
      monitor.subTask(""String_Node_Str"" + dataCluster + ""String_Node_Str"");
      WSDataCluster dc=new WSDataCluster((String)dataCluster,""String_Node_Str"",""String_Node_Str"");
      Util.getPort(xobject).putDataCluster(new WSPutDataCluster(dc));
    }
    monitor.done();
    return Status.OK_STATUS;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return Status.CANCEL_STATUS;
  }
 finally {
    monitor.subTask(""String_Node_Str"");
    new UIJob(""String_Node_Str""){
      @Override public IStatus runInUIThread(      IProgressMonitor monitor){
        new ServerRefreshAction(view,xobject.getServerRoot()).run();
        return Status.OK_STATUS;
      }
    }
.schedule();
  }
}",0.9084287200832466
149135,"@Override protected Control createControl(Composite parent){
  xpath=new XpathWidget(parent,mainPage,false);
  ((GridData)xpath.getComposite().getChildren()[0].getLayoutData()).heightHint=15;
  ((GridData)xpath.getComposite().getChildren()[1].getLayoutData()).heightHint=15;
  return xpath.getComposite();
}","@Override protected Control createControl(Composite parent){
  xpath=new XpathWidget(parent,mainPage,false);
  ((GridData)xpath.getComposite().getChildren()[0].getLayoutData()).heightHint=15;
  ((GridData)xpath.getComposite().getChildren()[1].getLayoutData()).heightHint=15;
  if (parent instanceof Table) {
    ((Table)parent).addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
      public void mouseUp(      MouseEvent e){
        deactive();
      }
    }
);
  }
  return xpath.getComposite();
}",0.6717724288840262
149136,"@Override protected void doSetFocus(){
}","@Override protected void doSetFocus(){
  xpath.getTextWidget().setFocus();
}",0.6896551724137931
149137,"public XpathWidget(String buttonName,TreeParent treeParent,FormToolkit toolkit,Composite parent,AMainPageV2 dialog,boolean isButtonLeft,boolean readOnly,String dataModelName){
  this.parent=parent;
  this.treeParent=treeParent;
  if (toolkit == null)   toolkit=new FormToolkit(parent.getDisplay());
  xpathAntionHolder=toolkit.createComposite(parent);
  xpathAntionHolder.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.marginLeft=0;
  layout.marginTop=0;
  layout.marginHeight=0;
  layout.marginBottom=0;
  xpathAntionHolder.setLayout(layout);
  dlgTitle=""String_Node_Str"";
  accommodation=dialog;
  ModifyListener listenr=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionValue != null && !descriptionValue.equals(descriptionText.getText())) {
        accommodation.markDirty();
      }
      descriptionValue=descriptionText.getText();
    }
  }
;
  if (isButtonLeft) {
    annotationButton=toolkit.createButton(xpathAntionHolder,""String_Node_Str"",SWT.PUSH);
    annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
    annotationButton.addSelectionListener(this);
    if (readOnly) {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT| SWT.READ_ONLY);
    }
 else {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT);
    }
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    descriptionText.addModifyListener(listenr);
  }
 else {
    if (readOnly) {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT| SWT.READ_ONLY);
    }
 else {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT);
    }
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    descriptionText.addModifyListener(listenr);
    annotationButton=toolkit.createButton(xpathAntionHolder,buttonName,SWT.PUSH);
    annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
    annotationButton.addSelectionListener(this);
  }
  annotationButton.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  annotationButton.setToolTipText(""String_Node_Str"");
}","public XpathWidget(String buttonName,TreeParent treeParent,FormToolkit toolkit,Composite parent,AMainPageV2 dialog,boolean isButtonLeft,boolean readOnly,String dataModelName){
  this.parent=parent;
  this.treeParent=treeParent;
  if (toolkit == null)   toolkit=new FormToolkit(parent.getDisplay());
  xpathAntionHolder=toolkit.createComposite(parent,SWT.NO_FOCUS);
  xpathAntionHolder.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.marginLeft=0;
  layout.marginTop=0;
  layout.marginHeight=0;
  layout.marginBottom=0;
  xpathAntionHolder.setLayout(layout);
  dlgTitle=""String_Node_Str"";
  accommodation=dialog;
  ModifyListener listenr=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionValue != null && !descriptionValue.equals(descriptionText.getText())) {
        accommodation.markDirty();
      }
      descriptionValue=descriptionText.getText();
    }
  }
;
  if (isButtonLeft) {
    annotationButton=toolkit.createButton(xpathAntionHolder,""String_Node_Str"",SWT.PUSH);
    annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
    annotationButton.addSelectionListener(this);
    if (readOnly) {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT| SWT.READ_ONLY);
    }
 else {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT);
    }
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    descriptionText.addModifyListener(listenr);
  }
 else {
    if (readOnly) {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT| SWT.READ_ONLY);
    }
 else {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT);
    }
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    descriptionText.addModifyListener(listenr);
    annotationButton=toolkit.createButton(xpathAntionHolder,buttonName,SWT.PUSH);
    annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
    annotationButton.addSelectionListener(this);
  }
  annotationButton.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  annotationButton.setToolTipText(""String_Node_Str"");
}",0.9973322388672275
149138,"protected boolean isDone(){
  Boolean res=false;
  try {
    String content=Util.getXmlServerCtrlLocal().getDocumentAsString(null,CLUSTER_MIGRATION,UNIQUE_MIGRATION);
    if (content == null)     return false;
    AbstractMigrationTask cpy=unmarshal(content);
    handlerMap=cpy.getHandlerMap();
    res=handlerMap.get(this.getClass().getName());
    if (res == null)     return false;
  }
 catch (  Exception e) {
    org.apache.log4j.Logger.getLogger(this.getClass()).error(e.getMessage());
    return res;
  }
  return res;
}","protected boolean isDone(){
  Boolean res=false;
  try {
    if (handlerMap == null) {
      String content=Util.getXmlServerCtrlLocal().getDocumentAsString(null,CLUSTER_MIGRATION,UNIQUE_MIGRATION);
      if (content == null)       return false;
      AbstractMigrationTask cpy=unmarshal(content);
      handlerMap=cpy.getHandlerMap();
    }
    res=handlerMap.get(this.getClass().getName());
    if (res == null)     return false;
  }
 catch (  Exception e) {
    org.apache.log4j.Logger.getLogger(this.getClass()).error(e.getMessage());
    return res;
  }
  return res;
}",0.9582577132486388
149139,"@Override protected void okPressed(){
  if (comboDataCluster.getCombo().getText().trim().length() == 0) {
    MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"");
    comboDataCluster.getCombo().setFocus();
    return;
  }
  if (fw.getText().getText().trim().length() == 0) {
    MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"");
    fw.getText().setFocus();
    return;
  }
  String url=xObject.getServerRoot().getEndpointAddress();
  server=null;
  try {
    server=new URL(url).getHost();
  }
 catch (  MalformedURLException e1) {
    e1.printStackTrace();
  }
  dataCluster=comboDataCluster.getCombo().getText();
  dataCluster=xpathMap.get(dataCluster);
  filename=fw.getText().getText();
  Job job=new Job(""String_Node_Str"" + dataCluster + ""String_Node_Str""){
    @Override public IStatus run(    IProgressMonitor monitor){
      try {
        monitor.beginTask(""String_Node_Str"" + dataCluster + ""String_Node_Str"",IProgressMonitor.UNKNOWN);
        Util.exportDataCluster(dataCluster,filename,server,monitor);
        monitor.done();
        return Status.OK_STATUS;
      }
 catch (      Exception e) {
        e.printStackTrace();
        return Status.CANCEL_STATUS;
      }
    }
  }
;
  job.setPriority(Job.INTERACTIVE);
  job.schedule();
  super.okPressed();
}","@Override protected void okPressed(){
  if (comboDataCluster.getCombo().getText().trim().length() == 0) {
    MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"");
    comboDataCluster.getCombo().setFocus();
    return;
  }
  if (fw.getText().getText().trim().length() == 0) {
    MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"");
    fw.getText().setFocus();
    return;
  }
  String url=xObject.getServerRoot().getEndpointAddress();
  server=null;
  try {
    server=new URL(url).getHost();
  }
 catch (  MalformedURLException e1) {
    e1.printStackTrace();
  }
  dataCluster=comboDataCluster.getCombo().getText();
  dataCluster=xpathMap.get(dataCluster);
  filename=fw.getText().getText().trim();
  Job job=new Job(""String_Node_Str"" + dataCluster + ""String_Node_Str""){
    @Override public IStatus run(    IProgressMonitor monitor){
      try {
        monitor.beginTask(""String_Node_Str"" + dataCluster + ""String_Node_Str"",IProgressMonitor.UNKNOWN);
        Util.exportDataCluster(dataCluster,filename,server,monitor);
        monitor.done();
        return Status.OK_STATUS;
      }
 catch (      Exception e) {
        e.printStackTrace();
        return Status.CANCEL_STATUS;
      }
    }
  }
;
  job.setPriority(Job.INTERACTIVE);
  job.schedule();
  super.okPressed();
}",0.9973190348525468
149140,"private void create(){
  GridData gd=new GridData(SWT.LEFT,SWT.TOP,true,true,1,1);
  Label label=factory.createLabel(parent,this.label,SWT.NONE);
  label.setLayoutData(gd);
  text=factory.createText(parent,""String_Node_Str"",SWT.READ_ONLY | SWT.BORDER);
  gd=new GridData(SWT.FILL,SWT.CENTER,true,true,1,1);
  text.setLayoutData(gd);
  text.setText(""String_Node_Str"");
  Button button=factory.createButton(parent,""String_Node_Str"",SWT.PUSH);
  button.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  gd=new GridData(SWT.LEFT,SWT.FILL,false,true,1,1);
  button.setLayoutData(gd);
  button.setToolTipText(""String_Node_Str"");
  button.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      FileDialog fileDialog=new FileDialog(parent.getShell(),SWT.OPEN);
      fileDialog.setFilterExtensions(fileExtents);
      fileDialog.setFileName(filename);
      String name=fileDialog.open();
      if (name != null) {
        text.setText(name);
      }
    }
  }
);
}","private void create(){
  GridData gd=new GridData(SWT.LEFT,SWT.TOP,true,true,1,1);
  Label label=factory.createLabel(parent,this.label,SWT.NONE);
  label.setLayoutData(gd);
  text=factory.createText(parent,""String_Node_Str"",SWT.MULTI | SWT.BORDER);
  gd=new GridData(SWT.FILL,SWT.CENTER,true,true,1,1);
  text.setLayoutData(gd);
  text.setText(""String_Node_Str"");
  Button button=factory.createButton(parent,""String_Node_Str"",SWT.PUSH);
  button.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  gd=new GridData(SWT.LEFT,SWT.FILL,false,true,1,1);
  button.setLayoutData(gd);
  button.setToolTipText(""String_Node_Str"");
  button.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      FileDialog fileDialog=new FileDialog(parent.getShell(),SWT.OPEN);
      fileDialog.setFilterExtensions(fileExtents);
      fileDialog.setFileName(filename);
      String name=fileDialog.open();
      if (name != null) {
        text.setText(name);
      }
    }
  }
);
}",0.9935956084172004
149141,"public synchronized void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"".equals(username) ? 12 : 9);
    XtentisPort port=Util.getPort(new URL(endpointaddress),universe,username,password);
    port.ping(new WSPing(""String_Node_Str""));
    monitor.worked(1);
    String displayName=endpointaddress;
    try {
      WSVersion version=port.getComponentVersion(new WSGetComponentVersion(WSComponent.DataManager,null));
      displayName+=""String_Node_Str"" + version.getMajor() + ""String_Node_Str""+ version.getMinor()+ ""String_Node_Str""+ version.getRevision()+ ""String_Node_Str""+ version.getBuild()+ ""String_Node_Str"";
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    WSUniverse wUuniverse=null;
    wUuniverse=port.getCurrentUniverse(new WSGetCurrentUniverse());
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    serverRoot=new TreeParent(displayName,null,TreeObject._SERVER_,endpointaddress,(""String_Node_Str"".equals(universe) ? ""String_Node_Str"" : universe + ""String_Node_Str"") + username + ""String_Node_Str""+ (password == null ? ""String_Node_Str"" : password));
    monitor.subTask(""String_Node_Str"");
    UserInfo user=new UserInfo();
    user.setUsername(username);
    user.setPassword(password);
    user.setServerUrl(endpointaddress);
    user.setUniverse(universe);
    user.setWsUuniverse(wUuniverse);
    serverRoot.setUser(user);
    TreeParent models=new TreeParent(EXtentisObjects.DataMODEL.getDisplayName(),serverRoot,TreeObject.DATA_MODEL,null,null);
    WSDataModelPK[] xdmPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str"")).getWsDataModelPKs();
    if (xdmPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < xdmPKs.length; i++) {
        String name=xdmPKs[i].getPk();
        if (!name.startsWith(""String_Node_Str"")) {
          TreeObject obj=new TreeObject(name,serverRoot,TreeObject.DATA_MODEL,xdmPKs[i],null);
          models.addChild(obj);
        }
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    TreeParent dataClusters=new TreeParent(EXtentisObjects.DataCluster.getDisplayName(),serverRoot,TreeObject.DATA_CLUSTER,null,null);
    WSDataClusterPK[] xdcPKs=port.getDataClusterPKs(new WSRegexDataClusterPKs(""String_Node_Str"")).getWsDataClusterPKs();
    if (xdcPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < xdcPKs.length; i++) {
        String name=xdcPKs[i].getPk();
        if (!(""String_Node_Str"".equals(name))) {
          TreeObject obj=new TreeObject(name,serverRoot,TreeObject.DATA_CLUSTER,xdcPKs[i],null);
          dataClusters.addChild(obj);
        }
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    TreeParent views=new TreeParent(EXtentisObjects.View.getDisplayName(),serverRoot,TreeObject.VIEW,null,null);
    WSViewPK[] viewPKs=port.getViewPKs((new WSGetViewPKs(""String_Node_Str""))).getWsViewPK();
    if (viewPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < viewPKs.length; i++) {
        String name=viewPKs[i].getPk();
        TreeObject obj=new TreeObject(name,serverRoot,TreeObject.VIEW,new WSViewPK(name),null);
        views.addChild(obj);
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    TreeParent storedProcedures=new TreeParent(EXtentisObjects.StoredProcedure.getDisplayName(),serverRoot,TreeObject.STORED_PROCEDURE,null,null);
    WSStoredProcedurePK[] spk=port.getStoredProcedurePKs(new WSRegexStoredProcedure(""String_Node_Str"")).getWsStoredProcedurePK();
    if (spk != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < spk.length; i++) {
        String name=spk[i].getPk();
        TreeObject obj=new TreeObject(name,serverRoot,TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK(name),null);
        storedProcedures.addChild(obj);
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    WSRolePK[] rolePKs=null;
    boolean hasRoles=true;
    try {
      rolePKs=port.getRolePKs(new WSGetRolePKs(""String_Node_Str"")).getWsRolePK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasRoles=false;
    }
    TreeParent roles=null;
    if (hasRoles) {
      roles=new TreeParent(EXtentisObjects.Role.getDisplayName(),serverRoot,TreeObject.ROLE,null,null);
      if (rolePKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < rolePKs.length; i++) {
          String name=rolePKs[i].getPk();
          TreeObject obj=new TreeObject(name,serverRoot,TreeObject.ROLE,new WSRolePK(name),null);
          roles.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    WSRoutingRulePK[] routingRulePKs=null;
    boolean hasRoutingRules=true;
    try {
      routingRulePKs=port.getRoutingRulePKs(new WSGetRoutingRulePKs(""String_Node_Str"")).getWsRoutingRulePKs();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasRoutingRules=false;
    }
    TreeParent rules=null;
    if (hasRoutingRules) {
      rules=new TreeParent(EXtentisObjects.RoutingRule.getDisplayName(),serverRoot,TreeObject.ROUTING_RULE,null,null);
      if (routingRulePKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < routingRulePKs.length; i++) {
          String id=routingRulePKs[i].getPk();
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.ROUTING_RULE,new WSRoutingRulePK(id),null);
          rules.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    TreeObject engine=new TreeObject(EXtentisObjects.SubscriptionEngine.getDisplayName(),serverRoot,TreeObject.SUBSCRIPTION_ENGINE,null,null);
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    WSTransformerV2PK[] transformerPKs=null;
    boolean hasTransformers=true;
    try {
      transformerPKs=port.getTransformerV2PKs(new WSGetTransformerV2PKs(""String_Node_Str"")).getWsTransformerV2PK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasTransformers=false;
    }
    TreeParent transformers=null;
    if (hasTransformers) {
      transformers=new TreeParent(EXtentisObjects.Transformer.getDisplayName(),serverRoot,TreeObject.TRANSFORMER,null,null);
      if (transformerPKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < transformerPKs.length; i++) {
          String id=transformerPKs[i].getPk();
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.TRANSFORMER,new WSTransformerV2PK(id),null);
          transformers.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    WSMenuPK[] menuPKs=null;
    boolean hasMenus=true;
    try {
      menuPKs=port.getMenuPKs(new WSGetMenuPKs(""String_Node_Str"")).getWsMenuPK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasMenus=false;
    }
    TreeParent menus=null;
    if (hasMenus) {
      menus=new TreeParent(EXtentisObjects.Menu.getDisplayName(),serverRoot,TreeObject.MENU,null,null);
      if (menuPKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < menuPKs.length; i++) {
          String id=menuPKs[i].getPk();
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.MENU,new WSMenuPK(id),null);
          menus.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    WSUniversePK[] universePKs=null;
    try {
      universePKs=port.getUniversePKs(new WSGetUniversePKs(""String_Node_Str"")).getWsUniversePK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    TreeParent Universes=null;
    Universes=new TreeParent(EXtentisObjects.Universe.getDisplayName(),serverRoot,TreeObject.UNIVERSE,null,null);
    if (universePKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < universePKs.length; i++) {
        String id=universePKs[i].getPk();
        if (!id.startsWith(""String_Node_Str"")) {
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.UNIVERSE,new WSUniversePK(id),null);
          Universes.addChild(obj);
        }
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    WSSynchronizationPlanPK[] SynchronizationPlanPKs=null;
    try {
      SynchronizationPlanPKs=port.getSynchronizationPlanPKs(new WSGetSynchronizationPlanPKs(""String_Node_Str"")).getWsSynchronizationPlanPK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    TreeParent synchronizationPlans=null;
    synchronizationPlans=new TreeParent(EXtentisObjects.SynchronizationPlan.getDisplayName(),serverRoot,TreeObject.SYNCHRONIZATIONPLAN,null,null);
    if (SynchronizationPlanPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < SynchronizationPlanPKs.length; i++) {
        String id=SynchronizationPlanPKs[i].getPk();
        TreeObject obj=new TreeObject(id,serverRoot,TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK(id),null);
        synchronizationPlans.addChild(obj);
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    serverRoot.addChild(models);
    serverRoot.addChild(dataClusters);
    serverRoot.addChild(views);
    serverRoot.addChild(storedProcedures);
    serverRoot.addChild(engine);
    serverRoot.addChild(Universes);
    serverRoot.addChild(synchronizationPlans);
    if (hasTransformers)     serverRoot.addChild(transformers);
    if (hasRoles)     serverRoot.addChild(roles);
    if (hasRoutingRules)     serverRoot.addChild(rules);
    if (hasMenus)     serverRoot.addChild(menus);
    addRevision(wUuniverse);
    monitor.done();
  }
 catch (  Exception e) {
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    e.printStackTrace();
    throw new InvocationTargetException(new XtentisException(""String_Node_Str"" + e.getLocalizedMessage()));
  }
}","public synchronized void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"".equals(username) ? 12 : 9);
    XtentisPort port=Util.getPort(new URL(endpointaddress),universe,username,password);
    port.ping(new WSPing(""String_Node_Str""));
    monitor.worked(1);
    String displayName=endpointaddress;
    WSUniverse wUuniverse=null;
    wUuniverse=port.getCurrentUniverse(new WSGetCurrentUniverse());
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    serverRoot=new TreeParent(displayName,null,TreeObject._SERVER_,endpointaddress,(""String_Node_Str"".equals(universe) ? ""String_Node_Str"" : universe + ""String_Node_Str"") + username + ""String_Node_Str""+ (password == null ? ""String_Node_Str"" : password));
    monitor.subTask(""String_Node_Str"");
    UserInfo user=new UserInfo();
    user.setUsername(username);
    user.setPassword(password);
    user.setServerUrl(endpointaddress);
    user.setUniverse(universe);
    user.setWsUuniverse(wUuniverse);
    serverRoot.setUser(user);
    TreeParent models=new TreeParent(EXtentisObjects.DataMODEL.getDisplayName(),serverRoot,TreeObject.DATA_MODEL,null,null);
    WSDataModelPK[] xdmPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str"")).getWsDataModelPKs();
    if (xdmPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < xdmPKs.length; i++) {
        String name=xdmPKs[i].getPk();
        if (!name.startsWith(""String_Node_Str"")) {
          TreeObject obj=new TreeObject(name,serverRoot,TreeObject.DATA_MODEL,xdmPKs[i],null);
          models.addChild(obj);
        }
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    TreeParent dataClusters=new TreeParent(EXtentisObjects.DataCluster.getDisplayName(),serverRoot,TreeObject.DATA_CLUSTER,null,null);
    WSDataClusterPK[] xdcPKs=port.getDataClusterPKs(new WSRegexDataClusterPKs(""String_Node_Str"")).getWsDataClusterPKs();
    if (xdcPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < xdcPKs.length; i++) {
        String name=xdcPKs[i].getPk();
        if (!(""String_Node_Str"".equals(name))) {
          TreeObject obj=new TreeObject(name,serverRoot,TreeObject.DATA_CLUSTER,xdcPKs[i],null);
          dataClusters.addChild(obj);
        }
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    TreeParent views=new TreeParent(EXtentisObjects.View.getDisplayName(),serverRoot,TreeObject.VIEW,null,null);
    WSViewPK[] viewPKs=port.getViewPKs((new WSGetViewPKs(""String_Node_Str""))).getWsViewPK();
    if (viewPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < viewPKs.length; i++) {
        String name=viewPKs[i].getPk();
        TreeObject obj=new TreeObject(name,serverRoot,TreeObject.VIEW,new WSViewPK(name),null);
        views.addChild(obj);
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    TreeParent storedProcedures=new TreeParent(EXtentisObjects.StoredProcedure.getDisplayName(),serverRoot,TreeObject.STORED_PROCEDURE,null,null);
    WSStoredProcedurePK[] spk=port.getStoredProcedurePKs(new WSRegexStoredProcedure(""String_Node_Str"")).getWsStoredProcedurePK();
    if (spk != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < spk.length; i++) {
        String name=spk[i].getPk();
        TreeObject obj=new TreeObject(name,serverRoot,TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK(name),null);
        storedProcedures.addChild(obj);
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    WSRolePK[] rolePKs=null;
    boolean hasRoles=true;
    try {
      rolePKs=port.getRolePKs(new WSGetRolePKs(""String_Node_Str"")).getWsRolePK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasRoles=false;
    }
    TreeParent roles=null;
    if (hasRoles) {
      roles=new TreeParent(EXtentisObjects.Role.getDisplayName(),serverRoot,TreeObject.ROLE,null,null);
      if (rolePKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < rolePKs.length; i++) {
          String name=rolePKs[i].getPk();
          TreeObject obj=new TreeObject(name,serverRoot,TreeObject.ROLE,new WSRolePK(name),null);
          roles.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    WSRoutingRulePK[] routingRulePKs=null;
    boolean hasRoutingRules=true;
    try {
      routingRulePKs=port.getRoutingRulePKs(new WSGetRoutingRulePKs(""String_Node_Str"")).getWsRoutingRulePKs();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasRoutingRules=false;
    }
    TreeParent rules=null;
    if (hasRoutingRules) {
      rules=new TreeParent(EXtentisObjects.RoutingRule.getDisplayName(),serverRoot,TreeObject.ROUTING_RULE,null,null);
      if (routingRulePKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < routingRulePKs.length; i++) {
          String id=routingRulePKs[i].getPk();
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.ROUTING_RULE,new WSRoutingRulePK(id),null);
          rules.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    TreeObject engine=new TreeObject(EXtentisObjects.SubscriptionEngine.getDisplayName(),serverRoot,TreeObject.SUBSCRIPTION_ENGINE,null,null);
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    WSTransformerV2PK[] transformerPKs=null;
    boolean hasTransformers=true;
    try {
      transformerPKs=port.getTransformerV2PKs(new WSGetTransformerV2PKs(""String_Node_Str"")).getWsTransformerV2PK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasTransformers=false;
    }
    TreeParent transformers=null;
    if (hasTransformers) {
      transformers=new TreeParent(EXtentisObjects.Transformer.getDisplayName(),serverRoot,TreeObject.TRANSFORMER,null,null);
      if (transformerPKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < transformerPKs.length; i++) {
          String id=transformerPKs[i].getPk();
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.TRANSFORMER,new WSTransformerV2PK(id),null);
          transformers.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    WSMenuPK[] menuPKs=null;
    boolean hasMenus=true;
    try {
      menuPKs=port.getMenuPKs(new WSGetMenuPKs(""String_Node_Str"")).getWsMenuPK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      hasMenus=false;
    }
    TreeParent menus=null;
    if (hasMenus) {
      menus=new TreeParent(EXtentisObjects.Menu.getDisplayName(),serverRoot,TreeObject.MENU,null,null);
      if (menuPKs != null) {
        monitor.subTask(""String_Node_Str"");
        for (int i=0; i < menuPKs.length; i++) {
          String id=menuPKs[i].getPk();
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.MENU,new WSMenuPK(id),null);
          menus.addChild(obj);
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled())       throw new InterruptedException(""String_Node_Str"");
    }
    WSUniversePK[] universePKs=null;
    try {
      universePKs=port.getUniversePKs(new WSGetUniversePKs(""String_Node_Str"")).getWsUniversePK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    TreeParent Universes=null;
    Universes=new TreeParent(EXtentisObjects.Universe.getDisplayName(),serverRoot,TreeObject.UNIVERSE,null,null);
    if (universePKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < universePKs.length; i++) {
        String id=universePKs[i].getPk();
        if (!id.startsWith(""String_Node_Str"")) {
          TreeObject obj=new TreeObject(id,serverRoot,TreeObject.UNIVERSE,new WSUniversePK(id),null);
          Universes.addChild(obj);
        }
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    WSSynchronizationPlanPK[] SynchronizationPlanPKs=null;
    try {
      SynchronizationPlanPKs=port.getSynchronizationPlanPKs(new WSGetSynchronizationPlanPKs(""String_Node_Str"")).getWsSynchronizationPlanPK();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    TreeParent synchronizationPlans=null;
    synchronizationPlans=new TreeParent(EXtentisObjects.SynchronizationPlan.getDisplayName(),serverRoot,TreeObject.SYNCHRONIZATIONPLAN,null,null);
    if (SynchronizationPlanPKs != null) {
      monitor.subTask(""String_Node_Str"");
      for (int i=0; i < SynchronizationPlanPKs.length; i++) {
        String id=SynchronizationPlanPKs[i].getPk();
        TreeObject obj=new TreeObject(id,serverRoot,TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK(id),null);
        synchronizationPlans.addChild(obj);
      }
    }
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    serverRoot.addChild(models);
    serverRoot.addChild(dataClusters);
    serverRoot.addChild(views);
    serverRoot.addChild(storedProcedures);
    serverRoot.addChild(engine);
    serverRoot.addChild(Universes);
    serverRoot.addChild(synchronizationPlans);
    if (hasTransformers)     serverRoot.addChild(transformers);
    if (hasRoles)     serverRoot.addChild(roles);
    if (hasRoutingRules)     serverRoot.addChild(rules);
    if (hasMenus)     serverRoot.addChild(menus);
    addRevision(wUuniverse);
    monitor.done();
  }
 catch (  Exception e) {
    if (monitor.isCanceled())     throw new InterruptedException(""String_Node_Str"");
    e.printStackTrace();
    throw new InvocationTargetException(new XtentisException(""String_Node_Str"" + e.getLocalizedMessage()));
  }
}",0.981873398500522
149142,"protected void refreshData(){
  try {
    if (conceptCombo.isDisposed())     return;
    XtentisPort port=Util.getPort(getXObject());
    WSDataCluster cluster=null;
    if (getXObject().getWsObject() == null) {
      cluster=port.getDataCluster(new WSGetDataCluster((WSDataClusterPK)getXObject().getWsKey()));
      getXObject().setWsObject(cluster);
    }
 else {
      cluster=(WSDataCluster)getXObject().getWsObject();
    }
    WSUniverse currentUniverse=port.getCurrentUniverse(new WSGetCurrentUniverse());
    String currentUniverseName=currentUniverse.getName();
    if (currentUniverseName != null && currentUniverseName.equals(""String_Node_Str""))     currentUniverseName=""String_Node_Str"";
    WSConceptRevisionMapMapEntry[] wsConceptRevisionMapMapEntries=port.getConceptsInDataClusterWithRevisions(new WSGetConceptsInDataClusterWithRevisions(new WSDataClusterPK(cluster.getName()),new WSUniversePK(currentUniverseName))).getMapEntry();
    String[] concepts=new String[wsConceptRevisionMapMapEntries.length];
    for (int i=0; i < wsConceptRevisionMapMapEntries.length; i++) {
      WSConceptRevisionMapMapEntry entry=wsConceptRevisionMapMapEntries[i];
      String concept=entry.getConcept();
      String revision=entry.getRevision();
      if (revision == null || revision.equals(""String_Node_Str""))       revision=""String_Node_Str"";
      concepts[i]=concept + ""String_Node_Str"" + revision;
    }
    conceptCombo.removeAll();
    conceptCombo.add(""String_Node_Str"");
    for (int i=0; i < concepts.length; i++) {
      conceptCombo.add(concepts[i]);
    }
    conceptCombo.select(0);
    searchText.setFocus();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void refreshData(){
  try {
    if (conceptCombo.isDisposed())     return;
    XtentisPort port=Util.getPort(getXObject());
    WSDataCluster cluster=null;
    if (getXObject().getWsObject() == null) {
      cluster=port.getDataCluster(new WSGetDataCluster((WSDataClusterPK)getXObject().getWsKey()));
      getXObject().setWsObject(cluster);
    }
 else {
      cluster=(WSDataCluster)getXObject().getWsObject();
    }
    WSUniverse currentUniverse=port.getCurrentUniverse(new WSGetCurrentUniverse());
    String currentUniverseName=currentUniverse.getName();
    if (currentUniverseName != null && currentUniverseName.equals(""String_Node_Str""))     currentUniverseName=""String_Node_Str"";
    WSConceptRevisionMapMapEntry[] wsConceptRevisionMapMapEntries=port.getConceptsInDataClusterWithRevisions(new WSGetConceptsInDataClusterWithRevisions(new WSDataClusterPK(cluster.getName()),new WSUniversePK(currentUniverseName))).getMapEntry();
    String[] concepts=new String[wsConceptRevisionMapMapEntries.length];
    for (int i=0; i < wsConceptRevisionMapMapEntries.length; i++) {
      WSConceptRevisionMapMapEntry entry=wsConceptRevisionMapMapEntries[i];
      String concept=entry.getConcept();
      String revision=entry.getRevision();
      if (revision == null || revision.equals(""String_Node_Str""))       revision=""String_Node_Str"";
      concepts[i]=concept + ""String_Node_Str"" + ""String_Node_Str""+ revision+ ""String_Node_Str"";
    }
    conceptCombo.removeAll();
    conceptCombo.add(""String_Node_Str"");
    for (int i=0; i < concepts.length; i++) {
      conceptCombo.add(concepts[i]);
    }
    conceptCombo.select(0);
    searchText.setFocus();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9851892484914976
149143,"@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    FormToolkit toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(9,false));
    Label descriptionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    searchText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
    searchText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    searchText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          ItemsTrashBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    Button bSearch=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER);
    bSearch.setImage(ImageCache.getCreatedImage(EImage.SEARCH.getPath()));
    bSearch.setToolTipText(""String_Node_Str"");
    bSearch.setLayoutData(new GridData(SWT.NONE,SWT.CENTER,false,false,1,1));
    bSearch.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        ItemsTrashBrowserMainPage.this.resultsViewer.setInput(getResults(true));
      }
    }
);
    final Table table=createTable(composite);
    resultsViewer=new TableViewer(table);
    resultsViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,9,1));
    ((GridData)resultsViewer.getControl().getLayoutData()).heightHint=500;
    resultsViewer.setContentProvider(new ArrayContentProvider());
    resultsViewer.setLabelProvider(new ClusterTableLabelProvider());
    resultsViewer.addDoubleClickListener(new IDoubleClickListener(){
      public void doubleClick(      DoubleClickEvent event){
        resultsViewer.setSelection(event.getSelection());
        try {
          new DisplayDroppedItemAction(ItemsTrashBrowserMainPage.this.getSite().getShell(),resultsViewer).run();
        }
 catch (        Exception e) {
          MessageDialog.openError(ItemsTrashBrowserMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage());
        }
      }
    }
);
    hookKeyboard();
    hookContextMenu();
    managedForm.reflow(true);
    searchText.setFocus();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    FormToolkit toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(9,false));
    Label descriptionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    searchText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
    searchText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    searchText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          ItemsTrashBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    Button bSearch=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER);
    bSearch.setImage(ImageCache.getCreatedImage(EImage.SEARCH.getPath()));
    bSearch.setToolTipText(""String_Node_Str"");
    bSearch.setLayoutData(new GridData(SWT.NONE,SWT.CENTER,false,false,1,1));
    bSearch.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        ItemsTrashBrowserMainPage.this.resultsViewer.setInput(getResults(true));
      }
    }
);
    final Table table=createTable(composite);
    resultsViewer=new TableViewer(table);
    resultsViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,9,1));
    ((GridData)resultsViewer.getControl().getLayoutData()).heightHint=500;
    resultsViewer.setContentProvider(new ArrayContentProvider());
    resultsViewer.setLabelProvider(new ClusterTableLabelProvider());
    resultsViewer.addDoubleClickListener(new IDoubleClickListener(){
      public void doubleClick(      DoubleClickEvent event){
        resultsViewer.setSelection(event.getSelection());
        try {
          new DisplayDroppedItemAction(ItemsTrashBrowserMainPage.this.getSite().getShell(),resultsViewer).run();
        }
 catch (        Exception e) {
          MessageDialog.openError(ItemsTrashBrowserMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage());
        }
      }
    }
);
    hookKeyboard();
    hookContextMenu();
    managedForm.reflow(true);
    searchText.setFocus();
    WidgetFactory factory=new WidgetFactory();
    factory.adapt(managedForm.getForm().getBody());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9810308488216132
149144,"private void addChildListener(Composite parent,FocusListener listener){
  if (parent == null) {
    return;
  }
  for (  Control control : parent.getChildren()) {
    if ((control instanceof Combo) || (control instanceof Button)) {
      continue;
    }
 else     if ((control instanceof Text) || (control instanceof StyledText)) {
      control.addFocusListener(listener);
    }
 else {
      if (control instanceof Composite) {
        addChildListener((Composite)control,listener);
      }
    }
  }
}","private void addChildListener(Composite parent,FocusListener listener){
  if (parent == null) {
    return;
  }
  for (  Control control : parent.getChildren()) {
    if ((control instanceof Combo) || (control instanceof Button)) {
      continue;
    }
 else     if ((control instanceof Text) || (control instanceof StyledText)) {
      control.addFocusListener(listener);
      control.addTraverseListener(textTraverseListener);
    }
 else {
      if (control instanceof Composite) {
        addChildListener((Composite)control,listener);
      }
    }
  }
}",0.9464788732394366
149145,"public String getDataModelName(){
  return dataModelName;
}","public static String getDataModelName(){
  return dataModelName;
}",0.944
149146,"protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    Label descriptionLabel=toolkit.createLabel(charComposite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    descriptionText=toolkit.createText(charComposite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    descriptionText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        markDirty();
      }
    }
);
    Label objectTypeLabel=toolkit.createLabel(charComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    Composite typeComposite=toolkit.createComposite(charComposite);
    typeComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    GridLayout layout=new GridLayout(2,false);
    layout.marginLeft=0;
    layout.marginWidth=0;
    typeComposite.setLayout(layout);
    objectTypeText=toolkit.createText(typeComposite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
    objectTypeText.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING,SWT.CENTER,false,false,1,1));
    ((GridData)objectTypeText.getLayoutData()).widthHint=300;
    objectTypeText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        markDirty();
      }
    }
);
    xpathButton=toolkit.createButton(typeComposite,""String_Node_Str"",SWT.PUSH);
    xpathButton.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog xpathDialog;
        xpathDialog=new XpathSelectDialog(getSite().getShell(),treeParent,""String_Node_Str"",getSite(),false,dataModelName);
        xpathDialog.setBlockOnOpen(true);
        xpathDialog.open();
        if (xpathDialog.getReturnCode() == Window.OK) {
          String xpath=xpathDialog.getXpath();
          int index=xpathDialog.getXpath().indexOf(""String_Node_Str"");
          if (index > 0) {
            xpath=xpathDialog.getXpath().substring(0,index);
          }
          objectTypeText.setText(xpath);
        }
      }
    }
);
    isSynchronousButton=toolkit.createButton(charComposite,""String_Node_Str"",SWT.CHECK);
    isSynchronousButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isSynchronousButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    deactiveButton=toolkit.createButton(charComposite,""String_Node_Str"",SWT.CHECK);
    deactiveButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    deactiveButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    Composite serviceGroup=this.getNewSectionComposite(""String_Node_Str"");
    serviceGroup.setLayout(new GridLayout(2,false));
    Label serviceNameLabel=toolkit.createLabel(serviceGroup,""String_Node_Str"",SWT.NULL);
    serviceNameLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    Composite subPanel=toolkit.createComposite(serviceGroup);
    subPanel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,true,1,1));
    subPanel.setLayout(new GridLayout(2,false));
    serviceNameCombo=new Combo(subPanel,SWT.DROP_DOWN | SWT.SINGLE | SWT.READ_ONLY);
    serviceNameCombo.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,true,1,1));
    ((GridData)serviceNameCombo.getLayoutData()).widthHint=300;
    serviceNameCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        String serviceName=serviceNameCombo.getText();
        String helpPara=""String_Node_Str"";
        if (!""String_Node_Str"".equals(serviceName) && !serviceName.equals(null))         helpPara=EInputTemplate.getXtentisObjexts().get(serviceName).getContent();
 else         helpPara=""String_Node_Str"";
        serviceParametersText.setText(helpPara);
        markDirty();
      }
    }
);
    if (version_greater_than_2_17_0) {
      WSServicesList list=Util.getPort(getXObject()).getServicesList(new WSGetServicesList(""String_Node_Str""));
      WSServicesListItem[] items=list.getItem();
      if (items != null) {
        String[] sortedList=new String[items.length];
        for (int i=0; i < items.length; i++) {
          sortedList[i]=items[i].getJndiName();
        }
        Arrays.sort(sortedList);
        for (int i=0; i < sortedList.length; i++) {
          serviceNameCombo.add(sortedList[i]);
        }
      }
    }
    defultParameterBtn=toolkit.createButton(subPanel,""String_Node_Str"",SWT.PUSH);
    defultParameterBtn.setImage(ImageCache.getCreatedImage(EImage.HELP_CONTENTS.getPath()));
    defultParameterBtn.setToolTipText(""String_Node_Str"");
    defultParameterBtn.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    defultParameterBtn.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (serviceNameCombo.getText().trim().length() == 0)         return;
        String doc=""String_Node_Str"";
        String desc=""String_Node_Str"";
        try {
          XtentisPort port=Util.getPort(getXObject());
          WSServiceGetDocument document=port.getServiceDocument(new WSString(serviceNameCombo.getText().trim()));
          doc=document.getDocument();
          desc=document.getDescription();
        }
 catch (        Exception e1) {
          doc=""String_Node_Str"";
        }
 finally {
          showUpDialog(desc,doc);
        }
      }
      private void showUpDialog(      String desc,      String doc){
        final PluginDetailsDialog dialog=new PluginDetailsDialog(getSite().getShell(),desc,doc,null);
        dialog.addListener(new Listener(){
          public void handleEvent(          Event event){
            dialog.close();
          }
        }
);
        dialog.create();
        dialog.getShell().setText(serviceNameCombo.getText() + ""String_Node_Str"");
        dialog.setBlockOnOpen(true);
        dialog.open();
      }
    }
);
    Label serviceParametersLabel=toolkit.createLabel(serviceGroup,""String_Node_Str"",SWT.NULL);
    serviceParametersLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,2,1));
    serviceParametersText=toolkit.createText(serviceGroup,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    serviceParametersText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    ((GridData)serviceParametersText.getLayoutData()).widthHint=200;
    ((GridData)serviceParametersText.getLayoutData()).heightHint=120;
    serviceParametersText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        markDirty();
      }
    }
);
    Composite routingExpressionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    routingExpressionsGroup.setLayout(new GridLayout(1,true));
    conditionsColumns[0].setColumnWidth(200);
    conditionsColumns[1].setColumnWidth(150);
    conditionsColumns[2].setColumnWidth(120);
    conditionsColumns[3].setColumnWidth(120);
    conditionViewer=new TisTableViewer(Arrays.asList(conditionsColumns),toolkit,routingExpressionsGroup);
    conditionViewer.setMainPage(this);
    conditionViewer.create();
    ConditionWidget conditionWidget=new ConditionWidget(routingExpressionsGroup,toolkit,this);
    conditionText=conditionWidget.getConditionText();
    conditionText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (!refreshing)         markDirty();
      }
    }
);
    wrap.Wrap(this,conditionViewer);
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    Label descriptionLabel=toolkit.createLabel(charComposite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    descriptionText=toolkit.createText(charComposite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    descriptionText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        markDirty();
      }
    }
);
    Label objectTypeLabel=toolkit.createLabel(charComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    Composite typeComposite=toolkit.createComposite(charComposite);
    typeComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    GridLayout layout=new GridLayout(2,false);
    layout.marginLeft=0;
    layout.marginWidth=0;
    typeComposite.setLayout(layout);
    objectTypeText=toolkit.createText(typeComposite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
    objectTypeText.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING,SWT.CENTER,false,false,1,1));
    ((GridData)objectTypeText.getLayoutData()).widthHint=300;
    objectTypeText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        markDirty();
      }
    }
);
    xpathButton=toolkit.createButton(typeComposite,""String_Node_Str"",SWT.PUSH);
    xpathButton.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog xpathDialog;
        xpathDialog=new XpathSelectDialog(getSite().getShell(),treeParent,""String_Node_Str"",getSite(),false,dataModelName);
        xpathDialog.setBlockOnOpen(true);
        xpathDialog.open();
        if (xpathDialog.getReturnCode() == Window.OK) {
          String xpath=xpathDialog.getXpath();
          int index=xpathDialog.getXpath().indexOf(""String_Node_Str"");
          if (index > 0) {
            xpath=xpathDialog.getXpath().substring(0,index);
          }
          objectTypeText.setText(xpath);
        }
      }
    }
);
    isSynchronousButton=toolkit.createButton(charComposite,""String_Node_Str"",SWT.CHECK);
    isSynchronousButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isSynchronousButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    deactiveButton=toolkit.createButton(charComposite,""String_Node_Str"",SWT.CHECK);
    deactiveButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    deactiveButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    Composite serviceGroup=this.getNewSectionComposite(""String_Node_Str"");
    serviceGroup.setLayout(new GridLayout(2,false));
    Label serviceNameLabel=toolkit.createLabel(serviceGroup,""String_Node_Str"",SWT.NULL);
    serviceNameLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    Composite subPanel=toolkit.createComposite(serviceGroup);
    subPanel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,true,1,1));
    subPanel.setLayout(new GridLayout(2,false));
    serviceNameCombo=new Combo(subPanel,SWT.DROP_DOWN | SWT.SINGLE | SWT.READ_ONLY);
    serviceNameCombo.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,true,1,1));
    ((GridData)serviceNameCombo.getLayoutData()).widthHint=300;
    serviceNameCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        String serviceName=serviceNameCombo.getText();
        String helpPara=""String_Node_Str"";
        if (!""String_Node_Str"".equals(serviceName) && !serviceName.equals(null))         helpPara=EInputTemplate.getXtentisObjexts().get(serviceName).getContent();
 else         helpPara=""String_Node_Str"";
        serviceParametersText.setText(helpPara);
        markDirty();
      }
    }
);
    if (version_greater_than_2_17_0) {
      WSServicesList list=Util.getPort(getXObject()).getServicesList(new WSGetServicesList(""String_Node_Str""));
      WSServicesListItem[] items=list.getItem();
      if (items != null) {
        String[] sortedList=new String[items.length];
        for (int i=0; i < items.length; i++) {
          sortedList[i]=items[i].getJndiName();
        }
        Arrays.sort(sortedList);
        for (int i=0; i < sortedList.length; i++) {
          serviceNameCombo.add(sortedList[i]);
        }
      }
    }
    defultParameterBtn=toolkit.createButton(subPanel,""String_Node_Str"",SWT.PUSH);
    defultParameterBtn.setImage(ImageCache.getCreatedImage(EImage.HELP_CONTENTS.getPath()));
    defultParameterBtn.setToolTipText(""String_Node_Str"");
    defultParameterBtn.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    defultParameterBtn.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (serviceNameCombo.getText().trim().length() == 0)         return;
        String doc=""String_Node_Str"";
        String desc=""String_Node_Str"";
        try {
          XtentisPort port=Util.getPort(getXObject());
          WSServiceGetDocument document=port.getServiceDocument(new WSString(serviceNameCombo.getText().trim()));
          doc=document.getDocument();
          desc=document.getDescription();
        }
 catch (        Exception e1) {
          doc=""String_Node_Str"";
        }
 finally {
          showUpDialog(desc,doc);
        }
      }
      private void showUpDialog(      String desc,      String doc){
        final PluginDetailsDialog dialog=new PluginDetailsDialog(getSite().getShell(),desc,doc,null);
        dialog.addListener(new Listener(){
          public void handleEvent(          Event event){
            dialog.close();
          }
        }
);
        dialog.create();
        dialog.getShell().setText(serviceNameCombo.getText() + ""String_Node_Str"");
        dialog.setBlockOnOpen(true);
        dialog.open();
      }
    }
);
    Label serviceParametersLabel=toolkit.createLabel(serviceGroup,""String_Node_Str"",SWT.NULL);
    serviceParametersLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,2,1));
    serviceParametersText=toolkit.createText(serviceGroup,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    serviceParametersText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    ((GridData)serviceParametersText.getLayoutData()).widthHint=200;
    ((GridData)serviceParametersText.getLayoutData()).heightHint=120;
    serviceParametersText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        markDirty();
      }
    }
);
    Composite routingExpressionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    routingExpressionsGroup.setLayout(new GridLayout(1,true));
    conditionsColumns[0].setColumnWidth(200);
    conditionsColumns[1].setColumnWidth(150);
    conditionsColumns[2].setColumnWidth(120);
    conditionsColumns[3].setColumnWidth(120);
    conditionViewer=new TisTableViewer(Arrays.asList(conditionsColumns),toolkit,routingExpressionsGroup);
    conditionViewer.setMainPage(this);
    conditionViewer.create();
    conditionViewer.setHeight(110);
    ConditionWidget conditionWidget=new ConditionWidget(routingExpressionsGroup,toolkit,this);
    conditionText=conditionWidget.getConditionText();
    conditionText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (!refreshing)         markDirty();
      }
    }
);
    wrap.Wrap(this,conditionViewer);
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.997945205479452
149147,"public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (this.viewName != null && this.viewName.length() > 0) {
    if (viewName.matches(""String_Node_Str"")) {
      String concept=viewName.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (concept != null && concept.length() > 0 && lastDataModelName != null && lastDataModelName.length() > 0) {
        java.util.List<String> toAddViewableList=new ArrayList<String>();
        WSGetBusinessConceptKey wsGetBusinessConceptKey=new WSGetBusinessConceptKey(new WSDataModelPK(lastDataModelName),concept);
        WSConceptKey wsConceptKey=null;
        try {
          wsConceptKey=Util.getPort(getXObject()).getBusinessConceptKey(wsGetBusinessConceptKey);
        }
 catch (        RemoteException e) {
          e.printStackTrace();
        }
catch (        XtentisException e) {
          e.printStackTrace();
        }
        if (wsConceptKey != null) {
          java.util.List<String> viewableList=new ArrayList<String>();
          java.util.List<Line> vlines=(java.util.List<Line>)viewableViewer.getViewer().getInput();
          for (int j=0; j < vlines.size(); j++) {
            Line item=vlines.get(j);
            viewableList.add(item.keyValues.get(0).value);
          }
          String[] keys=wsConceptKey.getFields();
          for (int i=0; i < keys.length; i++) {
            if (""String_Node_Str"".equals(wsConceptKey.getSelector()))             keys[i]=""String_Node_Str"" + concept + ""String_Node_Str""+ keys[i];
 else             keys[i]=wsConceptKey.getSelector() + keys[i];
          }
          String[] ids=wsConceptKey.getFields();
          for (int i=0; i < ids.length; i++) {
            String id=ids[i];
            if (id.startsWith(""String_Node_Str"")) {
              id=id.substring(1);
            }
 else             if (id.startsWith(""String_Node_Str"")) {
              id=id.substring(2);
            }
            if (!viewableList.contains(id)) {
              toAddViewableList.add(0,id);
            }
          }
        }
        if (toAddViewableList.size() > 0) {
          String msg=""String_Node_Str"";
          for (Iterator iterator=toAddViewableList.iterator(); iterator.hasNext(); ) {
            String toAddItem=(String)iterator.next();
            msg+=(toAddItem + ""String_Node_Str"");
          }
          msg+=""String_Node_Str"";
          MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",msg);
        }
        IRunnableWithProgress autoFixProcess=new AutoFixProgress(toAddViewableList,viewableViewer,this.getSite().getShell());
        try {
          new ProgressMonitorDialog(this.getSite().getShell()).run(false,true,autoFixProcess);
        }
 catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
}","public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (this.viewName != null && this.viewName.length() > 0) {
    if (viewName.matches(""String_Node_Str"")) {
      lastDataModelName=XpathSelectDialog.getDataModelName();
      String concept=viewName.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (concept != null && concept.length() > 0 && lastDataModelName != null && lastDataModelName.length() > 0) {
        java.util.List<String> toAddViewableList=new ArrayList<String>();
        WSGetBusinessConceptKey wsGetBusinessConceptKey=new WSGetBusinessConceptKey(new WSDataModelPK(lastDataModelName),concept);
        WSConceptKey wsConceptKey=null;
        try {
          wsConceptKey=Util.getPort(getXObject()).getBusinessConceptKey(wsGetBusinessConceptKey);
        }
 catch (        RemoteException e) {
          e.printStackTrace();
        }
catch (        XtentisException e) {
          e.printStackTrace();
        }
        if (wsConceptKey != null) {
          java.util.List<String> viewableList=new ArrayList<String>();
          java.util.List<Line> vlines=(java.util.List<Line>)viewableViewer.getViewer().getInput();
          for (int j=0; j < vlines.size(); j++) {
            Line item=vlines.get(j);
            viewableList.add(item.keyValues.get(0).value);
          }
          String[] keys=wsConceptKey.getFields();
          for (int i=0; i < keys.length; i++) {
            if (""String_Node_Str"".equals(wsConceptKey.getSelector()))             keys[i]=""String_Node_Str"" + concept + ""String_Node_Str""+ keys[i];
 else             keys[i]=wsConceptKey.getSelector() + keys[i];
          }
          String[] ids=wsConceptKey.getFields();
          for (int i=0; i < ids.length; i++) {
            String id=ids[i];
            if (id.startsWith(""String_Node_Str"")) {
              id=id.substring(1);
            }
 else             if (id.startsWith(""String_Node_Str"")) {
              id=id.substring(2);
            }
            if (!viewableList.contains(id)) {
              toAddViewableList.add(0,id);
            }
          }
        }
        if (toAddViewableList.size() > 0) {
          String msg=""String_Node_Str"";
          for (Iterator iterator=toAddViewableList.iterator(); iterator.hasNext(); ) {
            String toAddItem=(String)iterator.next();
            msg+=(toAddItem + ""String_Node_Str"");
          }
          msg+=""String_Node_Str"";
          MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",msg);
        }
        IRunnableWithProgress autoFixProcess=new AutoFixProgress(toAddViewableList,viewableViewer,this.getSite().getShell());
        try {
          new ProgressMonitorDialog(this.getSite().getShell()).run(false,true,autoFixProcess);
        }
 catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
}",0.9895763281775388
149148,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(""String_Node_Str"",toAddViewableList.size());
    for (Iterator<String> iter=toAddViewableList.iterator(); iter.hasNext(); ) {
      String[] keyPath=new String[]{iter.next()};
      Line line=new Line(viewableElementColumns,keyPath);
      viewableBEsList.getViewer().add(line);
      commit();
      monitor.worked(1);
    }
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(parentShell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(""String_Node_Str"",toAddViewableList.size());
    for (Iterator<String> iter=toAddViewableList.iterator(); iter.hasNext(); ) {
      String[] keyPath=new String[]{iter.next()};
      Line line=new Line(viewableElementColumns,keyPath);
      java.util.List<Line> vlines=(java.util.List<Line>)viewableViewer.getViewer().getInput();
      vlines.add(line);
      commit();
      monitor.worked(1);
    }
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(parentShell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.925925925925926
149149,"protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite viewablehGroup=this.getNewSectionComposite(""String_Node_Str"");
    viewablehGroup.setLayout(new GridLayout(2,false));
    viewableElementColumns[0].setColumnWidth(200);
    viewableViewer=new TisTableViewer(Arrays.asList(viewableElementColumns),toolkit,viewablehGroup);
    viewableViewer.setMainPage(this);
    viewableViewer.create();
    wrap.Wrap(this,viewableViewer);
    Composite searchGroup=this.getNewSectionComposite(""String_Node_Str"");
    searchGroup.setLayout(new GridLayout(2,false));
    searchableElementColumns[0].setColumnWidth(200);
    searchableViewer=new TisTableViewer(Arrays.asList(searchableElementColumns),toolkit,searchGroup);
    searchableViewer.setMainPage(this);
    searchableViewer.create();
    wrap.Wrap(this,searchableViewer);
    Composite wcGroup=this.getNewSectionComposite(""String_Node_Str"");
    wcGroup.setLayout(new GridLayout(5,false));
    conditionsColumns[0].setColumnWidth(200);
    conditionsColumns[1].setColumnWidth(150);
    conditionsColumns[3].setColumnWidth(120);
    conditionViewer=new TisTableViewer(Arrays.asList(conditionsColumns),toolkit,wcGroup);
    conditionViewer.setMainPage(this);
    conditionViewer.create();
    wrap.Wrap(this,conditionViewer);
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite viewablehGroup=this.getNewSectionComposite(""String_Node_Str"");
    viewablehGroup.setLayout(new GridLayout(2,false));
    viewableElementColumns[0].setColumnWidth(220);
    viewableViewer=new TisTableViewer(Arrays.asList(viewableElementColumns),toolkit,viewablehGroup);
    viewableViewer.setMainPage(this);
    viewableViewer.create();
    viewableViewer.setHeight(110);
    Composite searchGroup=this.getNewSectionComposite(""String_Node_Str"");
    searchGroup.setLayout(new GridLayout(2,false));
    searchableElementColumns[0].setColumnWidth(220);
    searchableViewer=new TisTableViewer(Arrays.asList(searchableElementColumns),toolkit,searchGroup);
    searchableViewer.setMainPage(this);
    searchableViewer.create();
    searchableViewer.setHeight(110);
    Composite wcGroup=this.getNewSectionComposite(""String_Node_Str"");
    wcGroup.setLayout(new GridLayout(2,false));
    conditionsColumns[0].setColumnWidth(200);
    conditionsColumns[1].setColumnWidth(150);
    conditionsColumns[3].setColumnWidth(120);
    conditionViewer=new TisTableViewer(Arrays.asList(conditionsColumns),toolkit,wcGroup);
    conditionViewer.setMainPage(this);
    conditionViewer.create();
    conditionViewer.setHeight(110);
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8610871440897325
149150,"public void createInitialLayout(IPageLayout layout){
  IFolderLayout leftTopLayout=layout.createFolder(""String_Node_Str"",IPageLayout.LEFT,new Float(0.32),IPageLayout.ID_EDITOR_AREA);
  leftTopLayout.addView(ServerView.VIEW_ID);
  layout.setEditorAreaVisible(true);
}","public void createInitialLayout(IPageLayout layout){
  IFolderLayout leftTopLayout=layout.createFolder(""String_Node_Str"",IPageLayout.LEFT,new Float(0.30),IPageLayout.ID_EDITOR_AREA);
  leftTopLayout.addView(ServerView.VIEW_ID);
  layout.setEditorAreaVisible(true);
}",0.9962406015037594
149151,"public void widgetSelected(SelectionEvent e){
  if (accommodation != null) {
    if (dlg == null) {
      dlg=new XpathSelectDialog(accommodation.getSite().getShell(),treeParent,dlgTitle,accommodation.getSite(),isMulti,dataModelName);
    }
  }
 else {
    if (dlg == null) {
      dlg=new XpathSelectDialog(parent.getShell(),treeParent,dlgTitle,site,false,dataModelName);
    }
  }
  dlg.setBlockOnOpen(true);
  dlg.open();
  if (dlg.getReturnCode() == Window.OK) {
    descriptionText.setText(dlg.getXpath());
    dataModelName=dlg.getDataModelName();
    putAppendInfo(""String_Node_Str"",dlg.getDataModelName());
    dlg.close();
  }
}","public void widgetSelected(SelectionEvent e){
  if (accommodation != null) {
    if (dlg == null) {
      dlg=new XpathSelectDialog(accommodation.getSite().getShell(),treeParent,dlgTitle,accommodation.getSite(),isMulti,dataModelName);
    }
  }
 else {
    if (dlg == null) {
      dlg=new XpathSelectDialog(parent.getShell(),treeParent,dlgTitle,site,false,dataModelName);
    }
  }
  dlg.setBlockOnOpen(true);
  dlg.open();
  if (dlg.getReturnCode() == Window.OK) {
    descriptionText.setText(dlg.getXpath());
    dataModelName=dlg.getDataModelName();
    dlg.close();
  }
}",0.9497114591920858
149152,"public XpathWidget(String buttonName,TreeParent treeParent,FormToolkit toolkit,Composite parent,AMainPageV2 dialog,boolean isButtonLeft,boolean readOnly,String dataModelName){
  this.parent=parent;
  this.treeParent=treeParent;
  if (toolkit == null)   toolkit=new FormToolkit(parent.getDisplay());
  xpathAntionHolder=toolkit.createComposite(parent);
  xpathAntionHolder.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  xpathAntionHolder.setLayout(new GridLayout(2,false));
  this.isButtonLeft=isButtonLeft;
  dlgTitle=""String_Node_Str"";
  accommodation=dialog;
  ModifyListener listenr=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionValue != null && !descriptionValue.equals(descriptionText.getText())) {
        accommodation.markDirty();
      }
      descriptionValue=descriptionText.getText();
    }
  }
;
  if (isButtonLeft) {
    annotationButton=toolkit.createButton(xpathAntionHolder,""String_Node_Str"",SWT.PUSH);
    annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
    annotationButton.addSelectionListener(this);
    if (readOnly) {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT| SWT.READ_ONLY);
    }
 else {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT);
    }
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    descriptionText.addModifyListener(listenr);
  }
 else {
    if (readOnly) {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT| SWT.READ_ONLY);
    }
 else {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT);
    }
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    descriptionText.addModifyListener(listenr);
    annotationButton=toolkit.createButton(xpathAntionHolder,buttonName,SWT.PUSH);
    annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
    annotationButton.addSelectionListener(this);
  }
  annotationButton.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  annotationButton.setToolTipText(""String_Node_Str"");
}","public XpathWidget(String buttonName,TreeParent treeParent,FormToolkit toolkit,Composite parent,AMainPageV2 dialog,boolean isButtonLeft,boolean readOnly,String dataModelName){
  this.parent=parent;
  this.treeParent=treeParent;
  if (toolkit == null)   toolkit=new FormToolkit(parent.getDisplay());
  xpathAntionHolder=toolkit.createComposite(parent);
  xpathAntionHolder.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.marginLeft=0;
  layout.marginTop=0;
  layout.marginHeight=0;
  layout.marginBottom=0;
  xpathAntionHolder.setLayout(layout);
  dlgTitle=""String_Node_Str"";
  accommodation=dialog;
  ModifyListener listenr=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionValue != null && !descriptionValue.equals(descriptionText.getText())) {
        accommodation.markDirty();
      }
      descriptionValue=descriptionText.getText();
    }
  }
;
  if (isButtonLeft) {
    annotationButton=toolkit.createButton(xpathAntionHolder,""String_Node_Str"",SWT.PUSH);
    annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
    annotationButton.addSelectionListener(this);
    if (readOnly) {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT| SWT.READ_ONLY);
    }
 else {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT);
    }
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    descriptionText.addModifyListener(listenr);
  }
 else {
    if (readOnly) {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT| SWT.READ_ONLY);
    }
 else {
      descriptionText=toolkit.createText(xpathAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT);
    }
    descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    descriptionText.addModifyListener(listenr);
    annotationButton=toolkit.createButton(xpathAntionHolder,buttonName,SWT.PUSH);
    annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
    annotationButton.addSelectionListener(this);
  }
  annotationButton.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  annotationButton.setToolTipText(""String_Node_Str"");
}",0.9517590056878028
149153,"public void run(){
  try {
    super.run();
    if (this.view != null) {
      ISelection selection=view.getViewer().getSelection();
      xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    }
    if (!xobject.isXObject())     return;
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
      WSDataModel wsDataModel=port.getDataModel(new WSGetDataModel((WSDataModelPK)xobject.getWsKey()));
    xobject.setWsObject(wsDataModel);
  break;
case TreeObject.VIEW:
WSView wsView=port.getView(new WSGetView((WSViewPK)xobject.getWsKey()));
xobject.setWsObject(wsView);
break;
case TreeObject.DATA_CLUSTER:
WSDataCluster wsDataCluster=port.getDataCluster(new WSGetDataCluster((WSDataClusterPK)xobject.getWsKey()));
xobject.setWsObject(wsDataCluster);
break;
case TreeObject.STORED_PROCEDURE:
WSStoredProcedure wsStoredProcedure=port.getStoredProcedure(new WSGetStoredProcedure((WSStoredProcedurePK)xobject.getWsKey()));
xobject.setWsObject(wsStoredProcedure);
break;
case TreeObject.ROLE:
WSRole wsRole=port.getRole(new WSGetRole((WSRolePK)xobject.getWsKey()));
xobject.setWsObject(wsRole);
break;
case TreeObject.ROUTING_RULE:
WSRoutingRule wsRoutingRule=port.getRoutingRule(new WSGetRoutingRule((WSRoutingRulePK)xobject.getWsKey()));
xobject.setWsObject(wsRoutingRule);
break;
case TreeObject.TRANSFORMER:
WSTransformerV2 wsTranformer=port.getTransformerV2(new WSGetTransformerV2((WSTransformerV2PK)xobject.getWsKey()));
xobject.setWsObject(wsTranformer);
break;
case TreeObject.MENU:
WSMenu wsMenu=port.getMenu(new WSGetMenu((WSMenuPK)xobject.getWsKey()));
xobject.setWsObject(wsMenu);
break;
case TreeObject.UNIVERSE:
WSUniverse wsUniverse=port.getUniverse(new WSGetUniverse((WSUniversePK)xobject.getWsKey()));
xobject.setWsObject(wsUniverse);
break;
case TreeObject.SYNCHRONIZATIONPLAN:
WSSynchronizationPlan wsSynchronizationPlan=port.getSynchronizationPlan(new WSGetSynchronizationPlan((WSSynchronizationPlanPK)xobject.getWsKey()));
xobject.setWsObject(wsSynchronizationPlan);
break;
default :
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ xobject.getType());
return;
}
if (page == null) this.page=view.getSite().getWorkbenchWindow().getActivePage();
String universe=""String_Node_Str"";
if (xobject.getType() != TreeObject.DATA_CLUSTER && xobject.getType() != TreeObject.UNIVERSE) {
universe=xobject.getServerRoot().getUniverse();
if (""String_Node_Str"".equals(universe)) universe=""String_Node_Str"";
}
this.page.openEditor(new XObjectEditorInput(xobject,xobject.getDisplayName() + universe),""String_Node_Str"");
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
}
}","public void run(){
  try {
    super.run();
    if (this.view != null) {
      ISelection selection=view.getViewer().getSelection();
      xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    }
    if (!xobject.isXObject())     return;
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
      WSDataModel wsDataModel=port.getDataModel(new WSGetDataModel((WSDataModelPK)xobject.getWsKey()));
    xobject.setWsObject(wsDataModel);
  break;
case TreeObject.VIEW:
WSView wsView=port.getView(new WSGetView((WSViewPK)xobject.getWsKey()));
xobject.setWsObject(wsView);
break;
case TreeObject.DATA_CLUSTER:
WSDataCluster wsDataCluster=port.getDataCluster(new WSGetDataCluster((WSDataClusterPK)xobject.getWsKey()));
xobject.setWsObject(wsDataCluster);
break;
case TreeObject.STORED_PROCEDURE:
WSStoredProcedure wsStoredProcedure=port.getStoredProcedure(new WSGetStoredProcedure((WSStoredProcedurePK)xobject.getWsKey()));
xobject.setWsObject(wsStoredProcedure);
break;
case TreeObject.ROLE:
WSRole wsRole=port.getRole(new WSGetRole((WSRolePK)xobject.getWsKey()));
xobject.setWsObject(wsRole);
break;
case TreeObject.ROUTING_RULE:
WSRoutingRule wsRoutingRule=port.getRoutingRule(new WSGetRoutingRule((WSRoutingRulePK)xobject.getWsKey()));
xobject.setWsObject(wsRoutingRule);
break;
case TreeObject.TRANSFORMER:
WSTransformerV2 wsTranformer=port.getTransformerV2(new WSGetTransformerV2((WSTransformerV2PK)xobject.getWsKey()));
xobject.setWsObject(wsTranformer);
break;
case TreeObject.MENU:
WSMenu wsMenu=port.getMenu(new WSGetMenu((WSMenuPK)xobject.getWsKey()));
xobject.setWsObject(wsMenu);
break;
case TreeObject.UNIVERSE:
WSUniverse wsUniverse=port.getUniverse(new WSGetUniverse((WSUniversePK)xobject.getWsKey()));
xobject.setWsObject(wsUniverse);
break;
case TreeObject.SYNCHRONIZATIONPLAN:
WSSynchronizationPlan wsSynchronizationPlan=port.getSynchronizationPlan(new WSGetSynchronizationPlan((WSSynchronizationPlanPK)xobject.getWsKey()));
xobject.setWsObject(wsSynchronizationPlan);
break;
default :
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ xobject.getType());
return;
}
if (page == null) this.page=view.getSite().getWorkbenchWindow().getActivePage();
this.page.openEditor(new XObjectEditorInput(xobject,xobject.getDisplayName()),""String_Node_Str"");
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
}
}",0.9534383954154728
149154,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
    textControl=new CCombo(composite,SWT.BORDER | SWT.READ_ONLY);
    roles=Util.getChildren(this.xObject.getServerRoot(),TreeObject.ROLE);
    ((CCombo)textControl).setItems(roles.toArray(new String[roles.size()]));
  }
 else {
    if (actionType == AnnotationOrderedListsDialog.AnnotationSchematron_ActionType) {
      textControl=new Text(composite,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL);
    }
 else {
      textControl=new Text(composite,SWT.BORDER | SWT.SINGLE);
    }
  }
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  }
 else {
    if (actionType == AnnotationOrderedListsDialog.AnnotationSchematron_ActionType) {
      textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,7));
    }
 else     textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  }
  ((GridData)textControl.getLayoutData()).minimumWidth=400;
  textControl.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(AnnotationOrderedListsDialog.getControlText(textControl));
        viewer.refresh();
      }
    }
  }
);
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    Button xpathButton=new Button(composite,SWT.PUSH | SWT.CENTER);
    xpathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    xpathButton.setText(""String_Node_Str"");
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog dlg=new XpathSelectDialog(parentPage.getSite().getShell(),xObject.getParent(),""String_Node_Str"",parentPage.getSite(),false,dataModelName);
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          ((Text)textControl).setText(dlg.getXpath());
          dlg.close();
        }
      }
    }
);
  }
  Button addLabelButton=new Button(composite,SWT.PUSH);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setImage(ImageCache.getCreatedImage(EImage.ADD_OBJ.getPath()));
  addLabelButton.setToolTipText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      boolean exist=false;
      for (Iterator it=xPaths.iterator(); it.hasNext(); ) {
        if (((String)it.next()).equals(getControlText(textControl)))         exist=true;
      }
      if (!exist && getControlText(textControl) != null && getControlText(textControl) != ""String_Node_Str"")       xPaths.add(getControlText(textControl));
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(500);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  if (actionType == AnnotationOrderedListsDialog.AnnotationWrite_ActionType || actionType == AnnotationOrderedListsDialog.AnnotationHidden_ActionType) {
    editors[0]=new ComboBoxCellEditor(table,roles.toArray(new String[]{}),SWT.READ_ONLY);
  }
 else {
    editors[0]=new TextCellEditor(table);
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return true;
  }
  public void modify(  Object element,  String property,  Object value){
    TableItem item=(TableItem)element;
    DescriptionLine line=(DescriptionLine)item.getData();
    String orgValue=line.getLabel();
    if (actionType != AnnotationWrite_ActionType && actionType != AnnotationHidden_ActionType) {
      int targetPos=xPaths.indexOf(value.toString());
      if (targetPos < 0) {
        line.setLabel(value.toString());
        xPaths.add(value.toString());
        viewer.update(line,null);
      }
 else       if (targetPos >= 0 && !value.toString().equals(orgValue)) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
      return;
    }
 else {
      String[] attrs=roles.toArray(new String[]{});
      value=attrs[Integer.parseInt(value.toString())];
      int pos=xPaths.indexOf(value.toString());
      if (pos >= 0 && !(orgValue.equals(value))) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
 else       if (pos < 0) {
        line.setLabel(value.toString());
        xPaths.set(xPaths.indexOf(orgValue),value.toString());
        viewer.update(line,null);
      }
    }
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    String value=line.getLabel();
    if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
      String[] attrs=roles.toArray(new String[]{});
      return Arrays.asList(attrs).indexOf(value);
    }
 else {
      return value;
    }
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      if (textControl instanceof CCombo) {
        ((CCombo)textControl).setText(line.getLabel());
      }
      if (textControl instanceof Text) {
        ((Text)textControl).setText(line.getLabel());
      }
    }
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setImage(ImageCache.getCreatedImage(EImage.PREV_NAV.getPath()));
upButton.setToolTipText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setImage(ImageCache.getCreatedImage(EImage.NEXT_NAV.getPath()));
downButton.setToolTipText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setImage(ImageCache.getCreatedImage(EImage.DELETE_OBJ.getPath()));
delButton.setToolTipText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
textControl.setFocus();
if (actionType != AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType && actionType != AnnotationOrderedListsDialog.AnnotationTargetSystems_ActionType && actionType != AnnotationOrderedListsDialog.AnnotationSchematron_ActionType) {
  checkBox=new Button(composite,SWT.CHECK);
  checkBox.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,true,2,1));
  checkBox.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      recursive=checkBox.getSelection();
    }
  }
);
  checkBox.setSelection(recursive);
  checkBox.setText(""String_Node_Str"");
}
return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
    textControl=new CCombo(composite,SWT.BORDER | SWT.READ_ONLY);
    roles=Util.getChildren(this.xObject.getServerRoot(),TreeObject.ROLE);
    ((CCombo)textControl).setItems(roles.toArray(new String[roles.size()]));
  }
 else {
    if (actionType == AnnotationOrderedListsDialog.AnnotationSchematron_ActionType) {
      textControl=new Text(composite,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL);
    }
 else {
      textControl=new Text(composite,SWT.BORDER | SWT.SINGLE);
    }
  }
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  }
 else {
    if (actionType == AnnotationOrderedListsDialog.AnnotationSchematron_ActionType) {
      textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,7));
    }
 else     textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  }
  ((GridData)textControl.getLayoutData()).minimumWidth=400;
  textControl.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(AnnotationOrderedListsDialog.getControlText(textControl));
        viewer.refresh();
      }
    }
  }
);
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    Button xpathButton=new Button(composite,SWT.PUSH | SWT.CENTER);
    xpathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    xpathButton.setText(""String_Node_Str"");
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog dlg=new XpathSelectDialog(parentPage.getSite().getShell(),xObject.getParent(),""String_Node_Str"",parentPage.getSite(),false,dataModelName);
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          ((Text)textControl).setText(dlg.getXpath());
          dlg.close();
        }
      }
    }
);
  }
  Button addLabelButton=new Button(composite,SWT.PUSH);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  addLabelButton.setImage(ImageCache.getCreatedImage(EImage.ADD_OBJ.getPath()));
  addLabelButton.setToolTipText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      boolean exist=false;
      for (Iterator it=xPaths.iterator(); it.hasNext(); ) {
        if (((String)it.next()).equals(getControlText(textControl)))         exist=true;
      }
      if (!exist && getControlText(textControl) != null && getControlText(textControl) != ""String_Node_Str"")       xPaths.add(getControlText(textControl));
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(500);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  if (actionType == AnnotationOrderedListsDialog.AnnotationWrite_ActionType || actionType == AnnotationOrderedListsDialog.AnnotationHidden_ActionType) {
    editors[0]=new ComboBoxCellEditor(table,roles.toArray(new String[]{}),SWT.READ_ONLY);
  }
 else {
    editors[0]=new TextCellEditor(table);
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return true;
  }
  public void modify(  Object element,  String property,  Object value){
    TableItem item=(TableItem)element;
    DescriptionLine line=(DescriptionLine)item.getData();
    String orgValue=line.getLabel();
    if (actionType != AnnotationWrite_ActionType && actionType != AnnotationHidden_ActionType) {
      int targetPos=xPaths.indexOf(value.toString());
      if (targetPos < 0) {
        line.setLabel(value.toString());
        xPaths.add(value.toString());
        viewer.update(line,null);
      }
 else       if (targetPos >= 0 && !value.toString().equals(orgValue)) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
      return;
    }
 else {
      String[] attrs=roles.toArray(new String[]{});
      value=attrs[Integer.parseInt(value.toString())];
      int pos=xPaths.indexOf(value.toString());
      if (pos >= 0 && !(orgValue.equals(value))) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
 else       if (pos < 0) {
        line.setLabel(value.toString());
        xPaths.set(xPaths.indexOf(orgValue),value.toString());
        viewer.update(line,null);
      }
    }
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    String value=line.getLabel();
    if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
      String[] attrs=roles.toArray(new String[]{});
      return Arrays.asList(attrs).indexOf(value);
    }
 else {
      return value;
    }
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      if (textControl instanceof CCombo) {
        ((CCombo)textControl).setText(line.getLabel());
      }
      if (textControl instanceof Text) {
        ((Text)textControl).setText(line.getLabel());
      }
    }
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setImage(ImageCache.getCreatedImage(EImage.PREV_NAV.getPath()));
upButton.setToolTipText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setImage(ImageCache.getCreatedImage(EImage.NEXT_NAV.getPath()));
downButton.setToolTipText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setImage(ImageCache.getCreatedImage(EImage.DELETE_OBJ.getPath()));
delButton.setToolTipText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
textControl.setFocus();
if (actionType != AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType && actionType != AnnotationOrderedListsDialog.AnnotationTargetSystems_ActionType && actionType != AnnotationOrderedListsDialog.AnnotationSchematron_ActionType) {
  checkBox=new Button(composite,SWT.CHECK);
  checkBox.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,true,2,1));
  checkBox.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      recursive=checkBox.getSelection();
    }
  }
);
  checkBox.setSelection(recursive);
  checkBox.setText(""String_Node_Str"");
}
return composite;
}",0.9997160128199928
149155,"@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  stepsList.setSelection(currentPlugin);
  parametersTextViewer.getUndoManager().disconnect();
}","@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (stepsList.getItemCount() > 0 && currentPlugin == -1) {
    refreshStep(0);
  }
 else {
    refreshStep(currentPlugin);
  }
  parametersTextViewer.getUndoManager().disconnect();
}",0.7330316742081447
149156,"protected void removeStep(int index){
  WSTransformerV2 wsTransformer=transformer;
  pluginsCombo.setText(""String_Node_Str"");
  pluginsCombo.select(-1);
  parametersTextViewer.setDocument(new Document(""String_Node_Str""));
  TransformerMainPage.this.comitting=true;
  TransformerMainPage.this.stepsList.remove(index);
  TransformerMainPage.this.stepsList.select(index - 1);
  refreshStep(stepsList.getSelectionIndex());
  TransformerMainPage.this.stepsList.forceFocus();
  ArrayList<WSTransformerProcessStep> list=new ArrayList<WSTransformerProcessStep>(Arrays.asList(wsTransformer.getProcessSteps()));
  list.remove(index);
  currentPlugin=-1;
  wsTransformer.setProcessSteps(list.toArray(new WSTransformerProcessStep[list.size()]));
  TransformerMainPage.this.comitting=false;
  markDirty();
}","protected void removeStep(int index){
  WSTransformerV2 wsTransformer=transformer;
  pluginsCombo.setText(""String_Node_Str"");
  pluginsCombo.select(-1);
  parametersTextViewer.setDocument(new Document(""String_Node_Str""));
  TransformerMainPage.this.comitting=true;
  TransformerMainPage.this.stepsList.remove(index);
  TransformerMainPage.this.stepsList.select(index - 1);
  refreshStep(stepsList.getSelectionIndex());
  TransformerMainPage.this.stepsList.forceFocus();
  ArrayList<WSTransformerProcessStep> list=new ArrayList<WSTransformerProcessStep>(Arrays.asList(wsTransformer.getProcessSteps()));
  list.remove(index);
  currentPlugin=stepsList.getSelectionIndex();
  wsTransformer.setProcessSteps(list.toArray(new WSTransformerProcessStep[list.size()]));
  TransformerMainPage.this.comitting=false;
  markDirty();
}",0.9808049535603716
149157,"protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSTransformerV2 wsTransformer=(WSTransformerV2)(getXObject().getWsObject());
    descriptionText.setText(wsTransformer.getDescription() == null ? ""String_Node_Str"" : wsTransformer.getDescription());
    stepsList.removeAll();
    WSTransformerProcessStep[] specs=wsTransformer.getProcessSteps();
    if (specs != null) {
      for (int i=0; i < specs.length; i++) {
        stepsList.add(specs[i].getDescription());
      }
    }
    stepsList.select(currentPlugin);
    refreshStep(stepsList.getSelectionIndex());
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSTransformerV2 wsTransformer=(WSTransformerV2)(getXObject().getWsObject());
    descriptionText.setText(wsTransformer.getDescription() == null ? ""String_Node_Str"" : wsTransformer.getDescription());
    stepsList.removeAll();
    WSTransformerProcessStep[] specs=wsTransformer.getProcessSteps();
    if (specs != null) {
      for (int i=0; i < specs.length; i++) {
        stepsList.add(specs[i].getDescription());
      }
    }
    stepsList.select(currentPlugin);
    if (stepsList.getItemCount() > 0 && stepsList.getSelectionIndex() == -1) {
      refreshStep(0);
    }
 else {
      refreshStep(stepsList.getSelectionIndex());
    }
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9055963821368004
149158,"public void modifyText(ModifyEvent e){
  if (TransformerMainPage.this.refreshing)   return;
  String jndi=pluginsCombo.getText();
  String description=pluginDescriptions.get(jndi);
  pluginDescription.setText(description == null ? ""String_Node_Str"" : description);
  if (stepsList.getSelectionIndex() == -1)   return;
  if (!jndi.contains(""String_Node_Str""))   jndi=TRANSFORMER_PLUGIN + jndi;
  transformer.getProcessSteps()[stepsList.getSelectionIndex()].setPluginJNDI(jndi);
  TransformerMainPage.this.comitting=false;
  markDirty();
}","public void modifyText(ModifyEvent e){
  if (refreshing)   return;
  TransformerMainPage.this.comitting=true;
  transformer.setDescription(descriptionText.getText());
  TransformerMainPage.this.comitting=false;
  markDirty();
}",0.3821989528795811
149159,"private void createPlugin() throws Exception {
  Composite specsComposite=toolkit.createComposite(mainComposite,SWT.NONE);
  specsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  specsComposite.setLayout(new GridLayout(4,false));
  pluginDescription=toolkit.createText(specsComposite,""String_Node_Str"",SWT.MULTI | SWT.WRAP);
  pluginDescription.setEditable(false);
  pluginDescription.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,4,2));
  ((GridData)pluginDescription.getLayoutData()).heightHint=35;
  Label jndiLabel=toolkit.createLabel(specsComposite,""String_Node_Str"",SWT.NULL);
  jndiLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  pluginsCombo=new CCombo(specsComposite,SWT.DROP_DOWN | SWT.BORDER);
  pluginsCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (TransformerMainPage.this.refreshing)       return;
      String jndi=pluginsCombo.getText();
      String description=pluginDescriptions.get(jndi);
      pluginDescription.setText(description == null ? ""String_Node_Str"" : description);
      if (stepsList.getSelectionIndex() == -1)       return;
      if (!jndi.contains(""String_Node_Str""))       jndi=TRANSFORMER_PLUGIN + jndi;
      transformer.getProcessSteps()[stepsList.getSelectionIndex()].setPluginJNDI(jndi);
      TransformerMainPage.this.comitting=false;
      markDirty();
    }
  }
);
  pluginsCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (pluginsCombo.getText().equals(currentPluginName)) {
        return;
      }
      refreshCombo();
      inputViewer.setInput(new ArrayList<WSTransformerVariablesMapping>());
      outputViewer.setInput(new ArrayList<WSTransformerVariablesMapping>());
      String jndi=pluginsCombo.getText();
      String document=EInputTemplate.getXtentisObjexts().get(jndi).getContent();
      parametersTextViewer.setDocument(new Document(document));
    }
  }
);
  WSTransformerPluginV2SList list=port.getTransformerPluginV2SList(new WSGetTransformerPluginV2SList(""String_Node_Str""));
  WSTransformerPluginV2SListItem[] items=list.getItem();
  if (items != null) {
    for (int i=0; i < items.length; i++) {
      pluginDescriptions.put(items[i].getJndiName(),items[i].getDescription());
    }
    Set<String> jndis=pluginDescriptions.keySet();
    for (Iterator<String> iterator=jndis.iterator(); iterator.hasNext(); ) {
      String jndi=iterator.next();
      pluginsCombo.add(jndi);
      WSTransformerPluginV2Details details=port.getTransformerPluginV2Details(new WSGetTransformerPluginV2Details(jndi.contains(""String_Node_Str"") ? jndi : TRANSFORMER_PLUGIN + jndi,""String_Node_Str""));
      java.util.List<String> input=new ArrayList<String>();
      for (      WSTransformerPluginV2VariableDescriptor v : details.getInputVariableDescriptors()) {
        input.add(v.getVariableName());
      }
      inputVariablesMap.put(jndi,input);
      java.util.List<String> output=new ArrayList<String>();
      for (      WSTransformerPluginV2VariableDescriptor v : details.getOutputVariableDescriptors()) {
        output.add(v.getVariableName());
      }
      outputVariablesMap.put(jndi,output);
    }
  }
  Button detailsButton=toolkit.createButton(specsComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  detailsButton.setImage(ImageCache.getCreatedImage(EImage.HELP_CONTENTS.getPath()));
  detailsButton.setToolTipText(""String_Node_Str"");
  detailsButton.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  detailsButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      try {
        String jndi;
        jndi=pluginsCombo.getText();
        if (jndi.length() == 0)         return;
        WSTransformerPluginV2Details details=port.getTransformerPluginV2Details(new WSGetTransformerPluginV2Details(jndi.contains(""String_Node_Str"") ? jndi : TRANSFORMER_PLUGIN + jndi,""String_Node_Str""));
        final PluginDetailsDialog dialog=new PluginDetailsDialog(getSite().getShell(),details.getDescription(),details.getDocumentation(),details.getParametersSchema());
        dialog.addListener(new Listener(){
          public void handleEvent(          Event event){
            dialog.close();
          }
        }
);
        dialog.setBlockOnOpen(true);
        dialog.open();
      }
 catch (      Exception ex) {
        String jndi;
        jndi=pluginsCombo.getText();
        MessageDialog.openError(getSite().getShell(),""String_Node_Str"" + jndi,""String_Node_Str"" + jndi + ""String_Node_Str"");
        return;
      }
    }
  }
);
}","private void createPlugin() throws Exception {
  Composite specsComposite=toolkit.createComposite(mainComposite,SWT.NONE);
  specsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  specsComposite.setLayout(new GridLayout(4,false));
  pluginDescription=toolkit.createText(specsComposite,""String_Node_Str"",SWT.MULTI | SWT.WRAP);
  pluginDescription.setEditable(false);
  pluginDescription.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,4,2));
  ((GridData)pluginDescription.getLayoutData()).heightHint=35;
  Label jndiLabel=toolkit.createLabel(specsComposite,""String_Node_Str"",SWT.NULL);
  jndiLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  pluginsCombo=new CCombo(specsComposite,SWT.BORDER | SWT.READ_ONLY);
  pluginsCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (pluginsCombo.getText().equals(currentPluginName)) {
        return;
      }
      refreshCombo();
      if (stepsList.getSelectionIndex() >= 0 && stepsList.getSelectionIndex() < transformer.getProcessSteps().length)       transformer.getProcessSteps()[stepsList.getSelectionIndex()].setPluginJNDI(TRANSFORMER_PLUGIN + pluginsCombo.getText());
      inputViewer.setInput(new ArrayList<WSTransformerVariablesMapping>());
      outputViewer.setInput(new ArrayList<WSTransformerVariablesMapping>());
      String jndi=pluginsCombo.getText();
      String document=EInputTemplate.getXtentisObjexts().get(jndi).getContent();
      parametersTextViewer.setDocument(new Document(document));
    }
  }
);
  WSTransformerPluginV2SList list=port.getTransformerPluginV2SList(new WSGetTransformerPluginV2SList(""String_Node_Str""));
  WSTransformerPluginV2SListItem[] items=list.getItem();
  if (items != null) {
    for (int i=0; i < items.length; i++) {
      pluginDescriptions.put(items[i].getJndiName(),items[i].getDescription());
    }
    Set<String> jndis=pluginDescriptions.keySet();
    for (Iterator<String> iterator=jndis.iterator(); iterator.hasNext(); ) {
      String jndi=iterator.next();
      pluginsCombo.add(jndi);
      WSTransformerPluginV2Details details=port.getTransformerPluginV2Details(new WSGetTransformerPluginV2Details(jndi.contains(""String_Node_Str"") ? jndi : TRANSFORMER_PLUGIN + jndi,""String_Node_Str""));
      java.util.List<String> input=new ArrayList<String>();
      for (      WSTransformerPluginV2VariableDescriptor v : details.getInputVariableDescriptors()) {
        input.add(v.getVariableName());
      }
      inputVariablesMap.put(jndi,input);
      java.util.List<String> output=new ArrayList<String>();
      for (      WSTransformerPluginV2VariableDescriptor v : details.getOutputVariableDescriptors()) {
        output.add(v.getVariableName());
      }
      outputVariablesMap.put(jndi,output);
    }
  }
  Button detailsButton=toolkit.createButton(specsComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  detailsButton.setImage(ImageCache.getCreatedImage(EImage.HELP_CONTENTS.getPath()));
  detailsButton.setToolTipText(""String_Node_Str"");
  detailsButton.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  detailsButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      try {
        String jndi;
        jndi=pluginsCombo.getText();
        if (jndi.length() == 0)         return;
        WSTransformerPluginV2Details details=port.getTransformerPluginV2Details(new WSGetTransformerPluginV2Details(jndi.contains(""String_Node_Str"") ? jndi : TRANSFORMER_PLUGIN + jndi,""String_Node_Str""));
        final PluginDetailsDialog dialog=new PluginDetailsDialog(getSite().getShell(),details.getDescription(),details.getDocumentation(),details.getParametersSchema());
        dialog.addListener(new Listener(){
          public void handleEvent(          Event event){
            dialog.close();
          }
        }
);
        dialog.setBlockOnOpen(true);
        dialog.open();
      }
 catch (      Exception ex) {
        String jndi;
        jndi=pluginsCombo.getText();
        MessageDialog.openError(getSite().getShell(),""String_Node_Str"" + jndi,""String_Node_Str"" + jndi + ""String_Node_Str"");
        return;
      }
    }
  }
);
}",0.8720483250961011
149160,"private void updateTitle(){
  IEditorInput input=this.getEditorInput();
  setPartName(input.getName());
  setContentDescription(""String_Node_Str"");
}","private void updateTitle(){
  IEditorInput input=this.getEditorInput();
  TreeObject xobject=(TreeObject)((XObjectEditorInput)this.getEditorInput()).getModel();
  TreeParent parent=xobject.findServerFolder(xobject.getType());
  String revision=""String_Node_Str"";
  if (parent != null) {
    Pattern p=Pattern.compile(""String_Node_Str"");
    Matcher m=p.matcher(parent.getDisplayName());
    while (m.find()) {
      revision=m.group();
      break;
    }
  }
  if (revision.length() > 0)   setPartName(input.getName() + ""String_Node_Str"" + revision);
 else   setPartName(input.getName());
  setContentDescription(""String_Node_Str"");
}",0.3729246487867177
149161,"public boolean saveSyncItem(SynchronizationItem item) throws Exception {
  logger.debug(""String_Node_Str"");
  boolean ret=true;
  try {
    String resolvedXml=item.getNode().serialize();
    item.setStatus(SynchronizationItem.STATUS_RESOLVED);
    logger.debug(""String_Node_Str"" + resolvedXml + ""String_Node_Str""+ item.getStatus());
    item.setResolvedProjection(resolvedXml);
    WSSynchronizationItem wsitem=new WSSynchronizationItem();
    wsitem=item.POJO2WS(item);
    logger.debug(""String_Node_Str"" + wsitem.getStatus().getValue());
    Util.getPort().putSynchronizationItem(new WSPutSynchronizationItem(wsitem));
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    ret=false;
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
 finally {
    return ret;
  }
}","public boolean saveSyncItem(SynchronizationItem item) throws Exception {
  logger.debug(""String_Node_Str"");
  boolean ret=true;
  try {
    String resolvedXml=item.getNode().serialize();
    item.setStatus(SynchronizationItem.STATUS_RESOLVED);
    logger.debug(""String_Node_Str"" + resolvedXml + ""String_Node_Str""+ item.getStatus());
    item.setResolvedProjection(resolvedXml);
    Util.getPort().resolveSynchronizationItem(new WSResolveSynchronizationItem(new WSSynchronizationItemPK(new String[]{""String_Node_Str"",item.getItemPOJOPK().getUniqueID()}),resolvedXml));
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    ret=false;
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
 finally {
    return ret;
  }
}",0.7874306839186691
149162,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  final TreeParent tree=this.parent.findServerFolder(TreeObject.DATA_MODEL);
  List<String> systemDataModelValues=Util.getChildren(this.parent.getServerRoot(),TreeObject.DATA_MODEL);
  dataModelCombo.setItems(systemDataModelValues.toArray(new String[systemDataModelValues.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree);
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=systemDataModelValues.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  if (this.parent == null) {
    this.parent=(TreeParent)ServerView.show().getRoot().getChildren()[0];
  }
  final TreeParent tree=this.parent.findServerFolder(TreeObject.DATA_MODEL);
  List<String> systemDataModelValues=Util.getChildren(this.parent.getServerRoot(),TreeObject.DATA_MODEL);
  dataModelCombo.setItems(systemDataModelValues.toArray(new String[systemDataModelValues.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree);
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=systemDataModelValues.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}",0.9762907157101706
149163,"protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
  request.setCharacterEncoding(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  Configuration config=null;
  try {
    org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"" + request.getSession().getId());
    config=(Configuration)request.getSession().getAttribute(""String_Node_Str"");
    if (config == null) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    }
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
  String start=request.getParameter(""String_Node_Str"");
  String limit=request.getParameter(""String_Node_Str"");
  String sortCol=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String sortDir=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String viewName=request.getParameter(""String_Node_Str"");
  String criteria=request.getParameter(""String_Node_Str"");
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + ""String_Node_Str"" + start + ""String_Node_Str""+ ""String_Node_Str""+ limit+ ""String_Node_Str""+ ""String_Node_Str""+ criteria+ ""String_Node_Str""+ ""String_Node_Str""+ viewName+ ""String_Node_Str""+ ""String_Node_Str""+ sortCol+ ""String_Node_Str""+ ""String_Node_Str""+ sortDir);
  JSONObject json=new JSONObject();
  String[] results;
  ArrayList<String[]> itemsBrowserContent=new ArrayList<String[]>();
  try {
    int max=Integer.parseInt(limit);
    int skip=Integer.parseInt(start);
    View view=new View(viewName);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
    WSWhereItem wi;
    String[] filters=criteria.split(""String_Node_Str"");
    String[] filterXpaths=new String[filters.length];
    String[] filterOperators=new String[filters.length];
    String[] filterValues=new String[filters.length];
    for (int i=0; i < filters.length; i++) {
      if (filters[i].split(""String_Node_Str"").length > 2) {
        filterXpaths[i]=filters[i].split(""String_Node_Str"")[0];
        filterOperators[i]=filters[i].split(""String_Node_Str"")[1];
        filterValues[i]=filters[i].split(""String_Node_Str"")[2];
      }
    }
    for (int i=0; i < filterValues.length; i++) {
      if ((filterValues[i] == null) || (""String_Node_Str"".equals(filterValues[i])) || ""String_Node_Str"".equals(filterValues[i])) {
        continue;
      }
      WSWhereCondition wc=new WSWhereCondition(filterXpaths[i],getOperator(filterOperators[i]),filterValues[i],WSStringPredicate.NONE,false);
      WSWhereItem item=new WSWhereItem(wc,null,null);
      conditions.add(item);
    }
    if (conditions.size() == 0) {
      wi=null;
    }
 else {
      WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
      wi=new WSWhereItem(null,and,null);
    }
    if (""String_Node_Str"".equals(filterXpaths[0])) {
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
    }
 else {
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
    }
    for (int i=0; i < results.length; i++) {
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=openingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=closingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=emptyTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      String[] elements=results[i].split(""String_Node_Str"");
      String[] fields=new String[view.getViewables().length];
      int count=Math.min(elements.length,fields.length);
      for (int j=0; j < count; j++) {
        fields[j]=StringEscapeUtils.unescapeXml(elements[j]);
      }
      itemsBrowserContent.add(fields);
    }
    int totalCount=(Integer)request.getSession().getAttribute(""String_Node_Str"");
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + totalCount);
    int tmp=0;
    for (int i=0; i < view.getViewables().length; i++) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + sortCol + ""String_Node_Str""+ view.getViewables()[i]+ ""String_Node_Str""+ i);
      if (sortCol.equals(""String_Node_Str"" + view.getViewables()[i])) {
        tmp=i;
        break;
      }
    }
    final int column=tmp;
    final String direction=sortDir;
    Comparator sort;
    if (direction.equals(""String_Node_Str"")) {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o1)[column]) - Double.parseDouble(((String[])o2)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o1)[column]).compareTo(((String[])o2)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
 else {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o2)[column]) - Double.parseDouble(((String[])o1)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o2)[column]).compareTo(((String[])o1)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    Collections.sort(itemsBrowserContent,sort);
    if (max > totalCount)     max=totalCount;
    if (max > (totalCount - skip)) {
      max=totalCount - skip;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    json.put(""String_Node_Str"",totalCount);
    ArrayList<JSONObject> rows=new ArrayList<JSONObject>();
    for (int i=skip; i < (max + skip); i++) {
      JSONObject fields=new JSONObject();
      for (int j=0; j < itemsBrowserContent.get(i - skip).length; j++) {
        fields.put(""String_Node_Str"" + view.getViewables()[j],itemsBrowserContent.get(i - skip)[j]);
      }
      rows.add(fields);
    }
    json.put(""String_Node_Str"",rows);
    json.put(""String_Node_Str"",true);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(json);
  }
 catch (  XtentisWebappException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  PrintWriter writer=response.getWriter();
  writer.write(json.toString());
  writer.close();
}","protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
  request.setCharacterEncoding(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  Configuration config=null;
  try {
    org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"" + request.getSession().getId());
    config=(Configuration)request.getSession().getAttribute(""String_Node_Str"");
    if (config == null) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    }
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
  String start=request.getParameter(""String_Node_Str"");
  String limit=request.getParameter(""String_Node_Str"");
  String sortCol=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String sortDir=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String viewName=request.getParameter(""String_Node_Str"");
  String criteria=request.getParameter(""String_Node_Str"");
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + ""String_Node_Str"" + start + ""String_Node_Str""+ ""String_Node_Str""+ limit+ ""String_Node_Str""+ ""String_Node_Str""+ criteria+ ""String_Node_Str""+ ""String_Node_Str""+ viewName+ ""String_Node_Str""+ ""String_Node_Str""+ sortCol+ ""String_Node_Str""+ ""String_Node_Str""+ sortDir);
  JSONObject json=new JSONObject();
  String[] results;
  ArrayList<String[]> itemsBrowserContent=new ArrayList<String[]>();
  try {
    int max=Integer.parseInt(limit);
    int skip=Integer.parseInt(start);
    View view=new View(viewName);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
    WSWhereItem wi;
    String[] filters=criteria.split(""String_Node_Str"");
    String[] filterXpaths=new String[filters.length];
    String[] filterOperators=new String[filters.length];
    String[] filterValues=new String[filters.length];
    for (int i=0; i < filters.length; i++) {
      if (filters[i].split(""String_Node_Str"").length > 2) {
        filterXpaths[i]=filters[i].split(""String_Node_Str"")[0];
        filterOperators[i]=filters[i].split(""String_Node_Str"")[1];
        filterValues[i]=filters[i].split(""String_Node_Str"")[2];
      }
    }
    for (int i=0; i < filterValues.length; i++) {
      if ((filterValues[i] == null) || (""String_Node_Str"".equals(filterValues[i])) || ""String_Node_Str"".equals(filterValues[i])) {
        continue;
      }
      WSWhereCondition wc=new WSWhereCondition(filterXpaths[i],getOperator(filterOperators[i]),filterValues[i],WSStringPredicate.NONE,false);
      WSWhereItem item=new WSWhereItem(wc,null,null);
      conditions.add(item);
    }
    if (conditions.size() == 0) {
      wi=null;
    }
 else {
      WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
      wi=new WSWhereItem(null,and,null);
    }
    if (""String_Node_Str"".equals(filterXpaths[0])) {
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
    }
 else {
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
    }
    for (int i=0; i < results.length; i++) {
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=openingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=closingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=emptyTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      String[] elements=results[i].split(""String_Node_Str"");
      String[] fields=new String[view.getViewables().length];
      int count=Math.min(elements.length,fields.length);
      for (int j=0; j < count; j++) {
        fields[j]=StringEscapeUtils.unescapeXml(elements[j]);
      }
      itemsBrowserContent.add(fields);
    }
    int totalCount=(Integer)request.getSession().getAttribute(""String_Node_Str"");
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + totalCount);
    int tmp=0;
    for (int i=0; i < view.getViewables().length; i++) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + sortCol + ""String_Node_Str""+ view.getViewables()[i]+ ""String_Node_Str""+ i);
      if (sortCol.equals(""String_Node_Str"" + view.getViewables()[i])) {
        tmp=i;
        break;
      }
    }
    final int column=tmp;
    final String direction=sortDir;
    Comparator sort;
    if (direction.equals(""String_Node_Str"")) {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o1)[column]) - Double.parseDouble(((String[])o2)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o1)[column]).compareTo(((String[])o2)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
 else {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o2)[column]) - Double.parseDouble(((String[])o1)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o2)[column]).compareTo(((String[])o1)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    Collections.sort(itemsBrowserContent,sort);
    if (max > totalCount)     max=totalCount;
    if (max > (totalCount - skip)) {
      max=totalCount - skip;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    json.put(""String_Node_Str"",totalCount);
    ArrayList<JSONObject> rows=new ArrayList<JSONObject>();
    for (int i=skip; i < (max + skip); i++) {
      if (i - skip > itemsBrowserContent.size() - 1)       break;
      JSONObject fields=new JSONObject();
      for (int j=0; j < itemsBrowserContent.get(i - skip).length; j++) {
        fields.put(""String_Node_Str"" + view.getViewables()[j],itemsBrowserContent.get(i - skip)[j]);
      }
      rows.add(fields);
    }
    json.put(""String_Node_Str"",rows);
    json.put(""String_Node_Str"",true);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(json);
  }
 catch (  XtentisWebappException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  PrintWriter writer=response.getWriter();
  writer.write(json.toString());
  writer.close();
}",0.9954738718968592
149164,"protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
  request.setCharacterEncoding(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  Configuration config=null;
  try {
    org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"" + request.getSession().getId());
    config=(Configuration)request.getSession().getAttribute(""String_Node_Str"");
    if (config == null) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    }
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
  String start=request.getParameter(""String_Node_Str"");
  String limit=request.getParameter(""String_Node_Str"");
  String sortCol=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String sortDir=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String viewName=request.getParameter(""String_Node_Str"");
  String criteria=request.getParameter(""String_Node_Str"");
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + ""String_Node_Str"" + start + ""String_Node_Str""+ ""String_Node_Str""+ limit+ ""String_Node_Str""+ ""String_Node_Str""+ criteria+ ""String_Node_Str""+ ""String_Node_Str""+ viewName+ ""String_Node_Str""+ ""String_Node_Str""+ sortCol+ ""String_Node_Str""+ ""String_Node_Str""+ sortDir);
  JSONObject json=new JSONObject();
  String[] results;
  ArrayList<String[]> itemsBrowserContent=new ArrayList<String[]>();
  try {
    int max=Integer.parseInt(limit);
    int skip=Integer.parseInt(start);
    View view=new View(viewName);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
    WSWhereItem wi;
    String[] filters=criteria.split(""String_Node_Str"");
    String[] filterXpaths=new String[filters.length];
    String[] filterOperators=new String[filters.length];
    String[] filterValues=new String[filters.length];
    for (int i=0; i < filters.length; i++) {
      if (filters[i].split(""String_Node_Str"").length > 2) {
        filterXpaths[i]=filters[i].split(""String_Node_Str"")[0];
        filterOperators[i]=filters[i].split(""String_Node_Str"")[1];
        filterValues[i]=filters[i].split(""String_Node_Str"")[2];
      }
    }
    for (int i=0; i < filterValues.length; i++) {
      if ((filterValues[i] == null) || (""String_Node_Str"".equals(filterValues[i])) || ""String_Node_Str"".equals(filterValues[i])) {
        continue;
      }
      WSWhereCondition wc=new WSWhereCondition(filterXpaths[i],getOperator(filterOperators[i]),filterValues[i],WSStringPredicate.NONE,false);
      WSWhereItem item=new WSWhereItem(wc,null,null);
      conditions.add(item);
    }
    if (conditions.size() == 0) {
      wi=null;
    }
 else {
      WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
      wi=new WSWhereItem(null,and,null);
    }
    if (""String_Node_Str"".equals(filterXpaths[0])) {
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
    }
 else {
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
    }
    for (int i=0; i < results.length; i++) {
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=openingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=closingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=emptyTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      String[] elements=results[i].split(""String_Node_Str"");
      String[] fields=new String[view.getViewables().length];
      int count=Math.min(elements.length,fields.length);
      for (int j=0; j < count; j++) {
        fields[j]=StringEscapeUtils.unescapeXml(elements[j]);
      }
      itemsBrowserContent.add(fields);
    }
    int totalCount=(Integer)request.getSession().getAttribute(""String_Node_Str"");
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + totalCount);
    int tmp=0;
    for (int i=0; i < view.getViewables().length; i++) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + sortCol + ""String_Node_Str""+ view.getViewables()[i]+ ""String_Node_Str""+ i);
      if (sortCol.equals(""String_Node_Str"" + view.getViewables()[i])) {
        tmp=i;
        break;
      }
    }
    final int column=tmp;
    final String direction=sortDir;
    Comparator sort;
    if (direction.equals(""String_Node_Str"")) {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o1)[column]) - Double.parseDouble(((String[])o2)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o1)[column]).compareTo(((String[])o2)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
 else {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o2)[column]) - Double.parseDouble(((String[])o1)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o2)[column]).compareTo(((String[])o1)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    Collections.sort(itemsBrowserContent,sort);
    if (max > totalCount)     max=totalCount;
    if (max > (totalCount - skip)) {
      max=totalCount - skip;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    json.put(""String_Node_Str"",totalCount);
    ArrayList<JSONObject> rows=new ArrayList<JSONObject>();
    for (int i=skip; i < (max + skip); i++) {
      JSONObject fields=new JSONObject();
      for (int j=0; j < itemsBrowserContent.get(i - skip).length; j++) {
        fields.put(""String_Node_Str"" + view.getViewables()[j],itemsBrowserContent.get(i - skip)[j]);
      }
      rows.add(fields);
    }
    json.put(""String_Node_Str"",rows);
    json.put(""String_Node_Str"",true);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(json);
  }
 catch (  XtentisWebappException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  PrintWriter writer=response.getWriter();
  writer.write(json.toString());
  writer.close();
}","protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
  request.setCharacterEncoding(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  Configuration config=null;
  try {
    org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"" + request.getSession().getId());
    config=(Configuration)request.getSession().getAttribute(""String_Node_Str"");
    if (config == null) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    }
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
  String start=request.getParameter(""String_Node_Str"");
  String limit=request.getParameter(""String_Node_Str"");
  String sortCol=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String sortDir=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String viewName=request.getParameter(""String_Node_Str"");
  String criteria=request.getParameter(""String_Node_Str"");
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + ""String_Node_Str"" + start + ""String_Node_Str""+ ""String_Node_Str""+ limit+ ""String_Node_Str""+ ""String_Node_Str""+ criteria+ ""String_Node_Str""+ ""String_Node_Str""+ viewName+ ""String_Node_Str""+ ""String_Node_Str""+ sortCol+ ""String_Node_Str""+ ""String_Node_Str""+ sortDir);
  JSONObject json=new JSONObject();
  String[] results;
  ArrayList<String[]> itemsBrowserContent=new ArrayList<String[]>();
  try {
    int max=Integer.parseInt(limit);
    int skip=Integer.parseInt(start);
    View view=new View(viewName);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
    WSWhereItem wi;
    String[] filters=criteria.split(""String_Node_Str"");
    String[] filterXpaths=new String[filters.length];
    String[] filterOperators=new String[filters.length];
    String[] filterValues=new String[filters.length];
    for (int i=0; i < filters.length; i++) {
      if (filters[i].split(""String_Node_Str"").length > 2) {
        filterXpaths[i]=filters[i].split(""String_Node_Str"")[0];
        filterOperators[i]=filters[i].split(""String_Node_Str"")[1];
        filterValues[i]=filters[i].split(""String_Node_Str"")[2];
      }
    }
    for (int i=0; i < filterValues.length; i++) {
      if ((filterValues[i] == null) || (""String_Node_Str"".equals(filterValues[i])) || ""String_Node_Str"".equals(filterValues[i])) {
        continue;
      }
      WSWhereCondition wc=new WSWhereCondition(filterXpaths[i],getOperator(filterOperators[i]),filterValues[i],WSStringPredicate.NONE,false);
      WSWhereItem item=new WSWhereItem(wc,null,null);
      conditions.add(item);
    }
    if (conditions.size() == 0) {
      wi=null;
    }
 else {
      WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
      wi=new WSWhereItem(null,and,null);
    }
    if (""String_Node_Str"".equals(filterXpaths[0])) {
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
    }
 else {
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
    }
    for (int i=0; i < results.length; i++) {
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=openingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=closingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=emptyTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      String[] elements=results[i].split(""String_Node_Str"");
      String[] fields=new String[view.getViewables().length];
      int count=Math.min(elements.length,fields.length);
      for (int j=0; j < count; j++) {
        fields[j]=StringEscapeUtils.unescapeXml(elements[j]);
      }
      itemsBrowserContent.add(fields);
    }
    int totalCount=(Integer)request.getSession().getAttribute(""String_Node_Str"");
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + totalCount);
    int tmp=0;
    for (int i=0; i < view.getViewables().length; i++) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + sortCol + ""String_Node_Str""+ view.getViewables()[i]+ ""String_Node_Str""+ i);
      if (sortCol.equals(""String_Node_Str"" + view.getViewables()[i])) {
        tmp=i;
        break;
      }
    }
    final int column=tmp;
    final String direction=sortDir;
    Comparator sort;
    if (direction.equals(""String_Node_Str"")) {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o1)[column]) - Double.parseDouble(((String[])o2)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o1)[column]).compareTo(((String[])o2)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
 else {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o2)[column]) - Double.parseDouble(((String[])o1)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o2)[column]).compareTo(((String[])o1)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    Collections.sort(itemsBrowserContent,sort);
    if (max > totalCount)     max=totalCount;
    if (max > (totalCount - skip)) {
      max=totalCount - skip;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    json.put(""String_Node_Str"",totalCount);
    ArrayList<JSONObject> rows=new ArrayList<JSONObject>();
    for (int i=skip; i < (max + skip); i++) {
      if (i - skip > itemsBrowserContent.size() - 1)       break;
      JSONObject fields=new JSONObject();
      for (int j=0; j < itemsBrowserContent.get(i - skip).length; j++) {
        fields.put(""String_Node_Str"" + view.getViewables()[j],itemsBrowserContent.get(i - skip)[j]);
      }
      rows.add(fields);
    }
    json.put(""String_Node_Str"",rows);
    json.put(""String_Node_Str"",true);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(json);
  }
 catch (  XtentisWebappException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  PrintWriter writer=response.getWriter();
  writer.write(json.toString());
  writer.close();
}",0.9954738718968592
149165,"public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  editors[0]=new TextCellEditor(table);
  browseViewer.setCellEditors(editors);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return true;
    }
    public void modify(    Object element,    String property,    Object value){
      TableItem item=(TableItem)element;
      XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
      if (!(BROWSE_ITEMS + elem.getName()).equals(value.toString())) {
        for (        XSDElementDeclaration theElem : declList) {
          if (theElem == elem)           continue;
          if ((BROWSE_ITEMS + theElem.getName()).equals(value.toString())) {
            MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
            return;
          }
        }
        List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
        browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
        int prex=value.toString().indexOf(BROWSE_ITEMS);
        elem.setName(value.toString().substring(prex + BROWSE_ITEMS.length()));
        browseItemToRoles.put(value.toString(),lines);
        refreshRoleView(BROWSE_ITEMS + elem.getName());
        browseViewer.update(elem,null);
      }
    }
    public Object getValue(    Object element,    String property){
      XSDElementDeclaration elem=(XSDElementDeclaration)element;
      return BROWSE_ITEMS + elem.getName();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(BROWSE_ITEMS + decl.getName());
      UpdateComplexViewButton(true);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getCachedXObjectsNameSet(page.getXObject(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(new ArrayList<Line>());
  UpdateComplexViewButton(false);
  setControl(composite);
}","public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  editors[0]=new TextCellEditor(table);
  browseViewer.setCellEditors(editors);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return true;
    }
    public void modify(    Object element,    String property,    Object value){
      TableItem item=(TableItem)element;
      XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
      if (!(BROWSE_ITEMS + elem.getName()).equals(value.toString())) {
        for (        XSDElementDeclaration theElem : declList) {
          if (theElem == elem)           continue;
          if ((BROWSE_ITEMS + theElem.getName()).equals(value.toString())) {
            MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
            return;
          }
        }
        List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
        browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
        int prex=value.toString().indexOf(BROWSE_ITEMS);
        elem.setName(value.toString().substring(prex + BROWSE_ITEMS.length()));
        browseItemToRoles.put(value.toString(),lines);
        refreshRoleView(BROWSE_ITEMS + elem.getName());
        browseViewer.update(elem,null);
      }
    }
    public Object getValue(    Object element,    String property){
      XSDElementDeclaration elem=(XSDElementDeclaration)element;
      return BROWSE_ITEMS + elem.getName();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(BROWSE_ITEMS + decl.getName());
      UpdateComplexViewButton(true);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getChildren(page.getXObject().getServerRoot(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(new ArrayList<Line>());
  UpdateComplexViewButton(false);
  setControl(composite);
}",0.99376026272578
149166,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
    textControl=new CCombo(composite,SWT.BORDER | SWT.READ_ONLY);
    roles=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.ROLE);
    ((CCombo)textControl).setItems(roles.toArray(new String[roles.size()]));
  }
 else {
    textControl=new Text(composite,SWT.BORDER | SWT.SINGLE);
  }
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  }
 else {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  }
  ((GridData)textControl.getLayoutData()).minimumWidth=400;
  textControl.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(AnnotationOrderedListsDialog.getControlText(textControl));
        viewer.refresh();
      }
    }
  }
);
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    Button xpathButton=new Button(composite,SWT.PUSH | SWT.CENTER);
    xpathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    xpathButton.setText(""String_Node_Str"");
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog dlg=new XpathSelectDialog(parentPage.getSite().getShell(),xObject.getParent(),""String_Node_Str"",parentPage.getSite(),false,dataModelName);
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          ((Text)textControl).setText(dlg.getXpath());
          dlg.close();
        }
      }
    }
);
  }
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      boolean exist=false;
      for (Iterator it=xPaths.iterator(); it.hasNext(); ) {
        if (((String)it.next()).equals(getControlText(textControl)))         exist=true;
      }
      if (!exist && getControlText(textControl) != null && getControlText(textControl) != ""String_Node_Str"")       xPaths.add(getControlText(textControl));
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(500);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  if (actionType == AnnotationOrderedListsDialog.AnnotationWrite_ActionType || actionType == AnnotationOrderedListsDialog.AnnotationHidden_ActionType) {
    editors[0]=new ComboBoxCellEditor(table,roles.toArray(new String[]{}),SWT.READ_ONLY);
  }
 else {
    editors[0]=new TextCellEditor(table);
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return true;
  }
  public void modify(  Object element,  String property,  Object value){
    TableItem item=(TableItem)element;
    DescriptionLine line=(DescriptionLine)item.getData();
    String orgValue=line.getLabel();
    if (actionType != AnnotationWrite_ActionType && actionType != AnnotationHidden_ActionType) {
      int targetPos=xPaths.indexOf(value.toString());
      if (targetPos < 0) {
        line.setLabel(value.toString());
        xPaths.add(value.toString());
        viewer.update(line,null);
      }
 else       if (targetPos >= 0 && !value.toString().equals(orgValue)) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
      return;
    }
 else {
      String[] attrs=roles.toArray(new String[]{});
      value=attrs[Integer.parseInt(value.toString())];
      int pos=xPaths.indexOf(value.toString());
      if (pos >= 0 && !(orgValue.equals(value))) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
 else       if (pos < 0) {
        line.setLabel(value.toString());
        xPaths.set(xPaths.indexOf(orgValue),value.toString());
        viewer.update(line,null);
      }
    }
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    String value=line.getLabel();
    if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
      String[] attrs=roles.toArray(new String[]{});
      return Arrays.asList(attrs).indexOf(value);
    }
 else {
      return value;
    }
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null)     ((Text)textControl).setText(line.getLabel());
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
textControl.setFocus();
if (actionType != AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType && actionType != AnnotationOrderedListsDialog.AnnotationTargetSystems_ActionType) {
  checkBox=new Button(composite,SWT.CHECK);
  checkBox.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,true,2,1));
  checkBox.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      recursive=checkBox.getSelection();
    }
  }
);
  checkBox.setSelection(recursive);
  checkBox.setText(""String_Node_Str"");
}
return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
    textControl=new CCombo(composite,SWT.BORDER | SWT.READ_ONLY);
    roles=Util.getChildren(this.xObject.getServerRoot(),TreeObject.ROLE);
    ((CCombo)textControl).setItems(roles.toArray(new String[roles.size()]));
  }
 else {
    textControl=new Text(composite,SWT.BORDER | SWT.SINGLE);
  }
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  }
 else {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  }
  ((GridData)textControl.getLayoutData()).minimumWidth=400;
  textControl.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(AnnotationOrderedListsDialog.getControlText(textControl));
        viewer.refresh();
      }
    }
  }
);
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    Button xpathButton=new Button(composite,SWT.PUSH | SWT.CENTER);
    xpathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    xpathButton.setText(""String_Node_Str"");
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog dlg=new XpathSelectDialog(parentPage.getSite().getShell(),xObject.getParent(),""String_Node_Str"",parentPage.getSite(),false,dataModelName);
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          ((Text)textControl).setText(dlg.getXpath());
          dlg.close();
        }
      }
    }
);
  }
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      boolean exist=false;
      for (Iterator it=xPaths.iterator(); it.hasNext(); ) {
        if (((String)it.next()).equals(getControlText(textControl)))         exist=true;
      }
      if (!exist && getControlText(textControl) != null && getControlText(textControl) != ""String_Node_Str"")       xPaths.add(getControlText(textControl));
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(500);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  if (actionType == AnnotationOrderedListsDialog.AnnotationWrite_ActionType || actionType == AnnotationOrderedListsDialog.AnnotationHidden_ActionType) {
    editors[0]=new ComboBoxCellEditor(table,roles.toArray(new String[]{}),SWT.READ_ONLY);
  }
 else {
    editors[0]=new TextCellEditor(table);
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return true;
  }
  public void modify(  Object element,  String property,  Object value){
    TableItem item=(TableItem)element;
    DescriptionLine line=(DescriptionLine)item.getData();
    String orgValue=line.getLabel();
    if (actionType != AnnotationWrite_ActionType && actionType != AnnotationHidden_ActionType) {
      int targetPos=xPaths.indexOf(value.toString());
      if (targetPos < 0) {
        line.setLabel(value.toString());
        xPaths.add(value.toString());
        viewer.update(line,null);
      }
 else       if (targetPos >= 0 && !value.toString().equals(orgValue)) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
      return;
    }
 else {
      String[] attrs=roles.toArray(new String[]{});
      value=attrs[Integer.parseInt(value.toString())];
      int pos=xPaths.indexOf(value.toString());
      if (pos >= 0 && !(orgValue.equals(value))) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
 else       if (pos < 0) {
        line.setLabel(value.toString());
        xPaths.set(xPaths.indexOf(orgValue),value.toString());
        viewer.update(line,null);
      }
    }
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    String value=line.getLabel();
    if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
      String[] attrs=roles.toArray(new String[]{});
      return Arrays.asList(attrs).indexOf(value);
    }
 else {
      return value;
    }
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null)     ((Text)textControl).setText(line.getLabel());
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
textControl.setFocus();
if (actionType != AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType && actionType != AnnotationOrderedListsDialog.AnnotationTargetSystems_ActionType) {
  checkBox=new Button(composite,SWT.CHECK);
  checkBox.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,true,2,1));
  checkBox.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      recursive=checkBox.getSelection();
    }
  }
);
  checkBox.setSelection(recursive);
  checkBox.setText(""String_Node_Str"");
}
return composite;
}",0.9982004125883334
149167,"@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboDataCluster=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboDataCluster.getCombo().setEditable(false);
  List<String> dcs=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.DATA_CLUSTER);
  dcs.add(0,""String_Node_Str"");
  comboDataCluster.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  if (xObject != null && xObject.getDisplayName() != null) {
    if (EXtentisObjects.DataCluster.getDisplayName().equalsIgnoreCase(xObject.getDisplayName())) {
      comboDataCluster.getCombo().select(0);
    }
 else {
      comboDataCluster.getCombo().setText(xObject.getDisplayName());
    }
  }
  fw=new FileSelectWidget(composite,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},comboDataCluster.getCombo().getText());
  comboDataCluster.getCombo().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (comboDataCluster.getCombo().getText().length() > 0) {
        fw.getText().setText(comboDataCluster.getCombo().getText());
        fw.setFilename(comboDataCluster.getCombo().getText());
      }
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboDataCluster=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboDataCluster.getCombo().setEditable(false);
  List<String> dcs=Util.getChildren(this.xObject.getServerRoot(),TreeObject.DATA_CLUSTER);
  dcs.add(0,""String_Node_Str"");
  comboDataCluster.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  if (xObject != null && xObject.getDisplayName() != null) {
    if (EXtentisObjects.DataCluster.getDisplayName().equalsIgnoreCase(xObject.getDisplayName())) {
      comboDataCluster.getCombo().select(0);
    }
 else {
      comboDataCluster.getCombo().setText(xObject.getDisplayName());
    }
  }
  fw=new FileSelectWidget(composite,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},comboDataCluster.getCombo().getText());
  comboDataCluster.getCombo().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (comboDataCluster.getCombo().getText().length() > 0) {
        fw.getText().setText(comboDataCluster.getCombo().getText());
        fw.setFilename(comboDataCluster.getCombo().getText());
      }
    }
  }
);
  return composite;
}",0.9867613819825638
149168,"@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboRole=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboRole.getCombo().setEditable(false);
  List<String> roles=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.ROLE);
  comboRole.getCombo().setItems(roles.toArray(new String[roles.size()]));
  if (dataModelFilter.getRole() == null || dataModelFilter.getRole().length() == 0) {
    comboRole.getCombo().select(0);
  }
 else {
    comboRole.getCombo().setText(dataModelFilter.getRole());
  }
  btnAll=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnAll.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnAll.setSelection(dataModelFilter.isAll());
  btnReadOnly=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnReadOnly.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnReadOnly.setSelection(dataModelFilter.isReadOnly());
  btnWrite=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnWrite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnWrite.setSelection(dataModelFilter.isWriteAccess());
  btnHidden=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnHidden.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnHidden.setSelection(dataModelFilter.isHiddenAccess());
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboRole=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboRole.getCombo().setEditable(false);
  List<String> roles=Util.getChildren(this.xObject.getServerRoot(),TreeObject.ROLE);
  comboRole.getCombo().setItems(roles.toArray(new String[roles.size()]));
  if (dataModelFilter.getRole() == null || dataModelFilter.getRole().length() == 0) {
    comboRole.getCombo().select(0);
  }
 else {
    comboRole.getCombo().setText(dataModelFilter.getRole());
  }
  btnAll=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnAll.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnAll.setSelection(dataModelFilter.isAll());
  btnReadOnly=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnReadOnly.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnReadOnly.setSelection(dataModelFilter.isReadOnly());
  btnWrite=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnWrite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnWrite.setSelection(dataModelFilter.isWriteAccess());
  btnHidden=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnHidden.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnHidden.setSelection(dataModelFilter.isHiddenAccess());
  return composite;
}",0.9876543209876544
149169,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  final TreeParent tree=this.parent.findServerFolder(TreeObject.DATA_MODEL);
  TreeObject[] trees=tree.getChildren();
  ArrayList<String> systemDataModelValues=new ArrayList<String>();
  for (int i=0; i < trees.length; i++)   systemDataModelValues.add(((TreeObject)trees[i]).getDisplayName());
  dataModelCombo.setItems(systemDataModelValues.toArray(new String[systemDataModelValues.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree);
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=systemDataModelValues.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  final TreeParent tree=this.parent.findServerFolder(TreeObject.DATA_MODEL);
  List<String> systemDataModelValues=Util.getChildren(this.parent.getServerRoot(),TreeObject.DATA_MODEL);
  dataModelCombo.setItems(systemDataModelValues.toArray(new String[systemDataModelValues.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree);
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=systemDataModelValues.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}",0.9364622537082136
149170,"@Override protected void createFormContent(IManagedForm managedForm){
  managedForm.getForm().setText(this.getTitle());
  FormToolkit toolkit=managedForm.getToolkit();
  Composite composite=managedForm.getForm().getBody();
  composite.setLayout(new GridLayout(2,false));
  final LabelCombo comboRevision=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboRevision.getCombo().setEditable(false);
  final LabelCombo comboUniverse=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboUniverse.getCombo().setEditable(false);
  List<String> dcs=Util.getCachedXObjectsNameSet(getXObject(),TreeObject.UNIVERSE);
  comboUniverse.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  comboUniverse.getCombo().add(IConstants.HEAD,0);
  if (getXObject().getUniverse().trim().length() == 0) {
    comboUniverse.getCombo().setText(IConstants.HEAD);
  }
 else {
    comboUniverse.getCombo().setText(getXObject().getUniverse());
  }
  try {
    XtentisPort port=Util.getPort(new URL(getXObject().getEndpointAddress()),getXObject().getUniverse(),getXObject().getUsername(),getXObject().getPassword());
    Map<String,List<String>> map=Util.getUniverseMap(port);
    String name=getXObject().getDisplayName().replaceAll(""String_Node_Str"",""String_Node_Str"");
    List<String> revisions=map.get(name.trim());
    if (revisions != null)     comboRevision.getCombo().setItems(revisions.toArray(new String[revisions.size()]));
    comboRevision.getCombo().add(IConstants.HEAD,0);
    Matcher m=Pattern.compile(""String_Node_Str"").matcher(getXObject().getDisplayName());
    if (m.matches()) {
      String revision=m.group(2);
      comboRevision.getCombo().setText(revision);
    }
    final Map<String,List<String>> map2=Util.getUniverseMap2(port);
    comboRevision.getCombo().addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        if (comboRevision.getCombo().getText().equals(IConstants.HEAD)) {
          comboUniverse.getCombo().setText(IConstants.HEAD);
          return;
        }
        for (        Entry<String,List<String>> entry : map2.entrySet()) {
          if (entry.getValue().contains(comboRevision.getCombo().getText())) {
            comboUniverse.getCombo().setText(entry.getKey());
            break;
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createFormContent(IManagedForm managedForm){
  managedForm.getForm().setText(this.getTitle());
  FormToolkit toolkit=managedForm.getToolkit();
  Composite composite=managedForm.getForm().getBody();
  composite.setLayout(new GridLayout(2,false));
  final LabelCombo comboRevision=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboRevision.getCombo().setEditable(false);
  final LabelCombo comboUniverse=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboUniverse.getCombo().setEditable(false);
  List<String> dcs=Util.getChildren(getXObject().getServerRoot(),TreeObject.UNIVERSE);
  comboUniverse.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  comboUniverse.getCombo().add(IConstants.HEAD,0);
  if (getXObject().getUniverse().trim().length() == 0) {
    comboUniverse.getCombo().setText(IConstants.HEAD);
  }
 else {
    comboUniverse.getCombo().setText(getXObject().getUniverse());
  }
  try {
    XtentisPort port=Util.getPort(new URL(getXObject().getEndpointAddress()),getXObject().getUniverse(),getXObject().getUsername(),getXObject().getPassword());
    Map<String,List<String>> map=Util.getUniverseMap(port);
    String name=getXObject().getDisplayName().replaceAll(""String_Node_Str"",""String_Node_Str"");
    List<String> revisions=map.get(name.trim());
    if (revisions != null)     comboRevision.getCombo().setItems(revisions.toArray(new String[revisions.size()]));
    comboRevision.getCombo().add(IConstants.HEAD,0);
    Matcher m=Pattern.compile(""String_Node_Str"").matcher(getXObject().getDisplayName());
    if (m.matches()) {
      String revision=m.group(2);
      comboRevision.getCombo().setText(revision);
    }
    final Map<String,List<String>> map2=Util.getUniverseMap2(port);
    comboRevision.getCombo().addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        if (comboRevision.getCombo().getText().equals(IConstants.HEAD)) {
          comboUniverse.getCombo().setText(IConstants.HEAD);
          return;
        }
        for (        Entry<String,List<String>> entry : map2.entrySet()) {
          if (entry.getValue().contains(comboRevision.getCombo().getText())) {
            comboUniverse.getCombo().setText(entry.getKey());
            break;
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.99052228271829
149171,"public TreeObject findObject(int type,String name){
  TreeObject[] allchildren=this.getChildren();
  for (int i=0; i < allchildren.length; i++) {
    if (allchildren[i] instanceof TreeParent) {
      return ((TreeParent)allchildren[i]).findObject(type,name);
    }
    if ((allchildren[i].getType() == type) && (allchildren[i].getDisplayName().equals(name)))     return allchildren[i];
  }
  return null;
}","public TreeObject findObject(int type,String name){
  TreeObject[] allchildren=this.getChildren();
  TreeObject obj=null;
  for (int i=0; i < allchildren.length; i++) {
    if (allchildren[i] instanceof TreeParent) {
      obj=((TreeParent)allchildren[i]).findObject(type,name);
    }
 else     if ((allchildren[i].getType() == type) && (allchildren[i].getDisplayName().equals(name)))     obj=allchildren[i];
  }
  return obj;
}",0.8729016786570744
149172,"public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  editors[0]=new TextCellEditor(table);
  browseViewer.setCellEditors(editors);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return true;
    }
    public void modify(    Object element,    String property,    Object value){
      TableItem item=(TableItem)element;
      XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
      if (!(BROWSE_ITEMS + elem.getName()).equals(value.toString())) {
        for (        XSDElementDeclaration theElem : declList) {
          if (theElem == elem)           continue;
          if ((BROWSE_ITEMS + theElem.getName()).equals(value.toString())) {
            MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
            return;
          }
        }
        List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
        browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
        int prex=value.toString().indexOf(BROWSE_ITEMS);
        elem.setName(value.toString().substring(prex + BROWSE_ITEMS.length()));
        browseItemToRoles.put(value.toString(),lines);
        refreshRoleView(BROWSE_ITEMS + elem.getName());
        browseViewer.update(elem,null);
      }
    }
    public Object getValue(    Object element,    String property){
      XSDElementDeclaration elem=(XSDElementDeclaration)element;
      return BROWSE_ITEMS + elem.getName();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(BROWSE_ITEMS + decl.getName());
      UpdateComplexViewButton(true);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getCachedXObjectsNameSet(page.getXObject(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(new ArrayList<Line>());
  UpdateComplexViewButton(false);
  setControl(composite);
}","public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  editors[0]=new TextCellEditor(table);
  browseViewer.setCellEditors(editors);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return true;
    }
    public void modify(    Object element,    String property,    Object value){
      TableItem item=(TableItem)element;
      XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
      if (!(BROWSE_ITEMS + elem.getName()).equals(value.toString())) {
        for (        XSDElementDeclaration theElem : declList) {
          if (theElem == elem)           continue;
          if ((BROWSE_ITEMS + theElem.getName()).equals(value.toString())) {
            MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
            return;
          }
        }
        List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
        browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
        int prex=value.toString().indexOf(BROWSE_ITEMS);
        elem.setName(value.toString().substring(prex + BROWSE_ITEMS.length()));
        browseItemToRoles.put(value.toString(),lines);
        refreshRoleView(BROWSE_ITEMS + elem.getName());
        browseViewer.update(elem,null);
      }
    }
    public Object getValue(    Object element,    String property){
      XSDElementDeclaration elem=(XSDElementDeclaration)element;
      return BROWSE_ITEMS + elem.getName();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(BROWSE_ITEMS + decl.getName());
      UpdateComplexViewButton(true);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getChildren(page.getXObject().getServerRoot(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(new ArrayList<Line>());
  UpdateComplexViewButton(false);
  setControl(composite);
}",0.99376026272578
149173,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
    textControl=new CCombo(composite,SWT.BORDER | SWT.READ_ONLY);
    roles=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.ROLE);
    ((CCombo)textControl).setItems(roles.toArray(new String[roles.size()]));
  }
 else {
    textControl=new Text(composite,SWT.BORDER | SWT.SINGLE);
  }
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  }
 else {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  }
  ((GridData)textControl.getLayoutData()).minimumWidth=400;
  textControl.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(AnnotationOrderedListsDialog.getControlText(textControl));
        viewer.refresh();
      }
    }
  }
);
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    Button xpathButton=new Button(composite,SWT.PUSH | SWT.CENTER);
    xpathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    xpathButton.setText(""String_Node_Str"");
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog dlg=new XpathSelectDialog(parentPage.getSite().getShell(),xObject.getParent(),""String_Node_Str"",parentPage.getSite(),false,dataModelName);
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          ((Text)textControl).setText(dlg.getXpath());
          dlg.close();
        }
      }
    }
);
  }
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      boolean exist=false;
      for (Iterator it=xPaths.iterator(); it.hasNext(); ) {
        if (((String)it.next()).equals(getControlText(textControl)))         exist=true;
      }
      if (!exist && getControlText(textControl) != null && getControlText(textControl) != ""String_Node_Str"")       xPaths.add(getControlText(textControl));
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(500);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  if (actionType == AnnotationOrderedListsDialog.AnnotationWrite_ActionType || actionType == AnnotationOrderedListsDialog.AnnotationHidden_ActionType) {
    editors[0]=new ComboBoxCellEditor(table,roles.toArray(new String[]{}),SWT.READ_ONLY);
  }
 else {
    editors[0]=new TextCellEditor(table);
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return true;
  }
  public void modify(  Object element,  String property,  Object value){
    TableItem item=(TableItem)element;
    DescriptionLine line=(DescriptionLine)item.getData();
    String orgValue=line.getLabel();
    if (actionType != AnnotationWrite_ActionType && actionType != AnnotationHidden_ActionType) {
      int targetPos=xPaths.indexOf(value.toString());
      if (targetPos < 0) {
        line.setLabel(value.toString());
        xPaths.add(value.toString());
        viewer.update(line,null);
      }
 else       if (targetPos >= 0 && !value.toString().equals(orgValue)) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
      return;
    }
 else {
      String[] attrs=roles.toArray(new String[]{});
      value=attrs[Integer.parseInt(value.toString())];
      int pos=xPaths.indexOf(value.toString());
      if (pos >= 0 && !(orgValue.equals(value))) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
 else       if (pos < 0) {
        line.setLabel(value.toString());
        xPaths.set(xPaths.indexOf(orgValue),value.toString());
        viewer.update(line,null);
      }
    }
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    String value=line.getLabel();
    if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
      String[] attrs=roles.toArray(new String[]{});
      return Arrays.asList(attrs).indexOf(value);
    }
 else {
      return value;
    }
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null)     ((Text)textControl).setText(line.getLabel());
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
textControl.setFocus();
if (actionType != AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType && actionType != AnnotationOrderedListsDialog.AnnotationTargetSystems_ActionType) {
  checkBox=new Button(composite,SWT.CHECK);
  checkBox.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,true,2,1));
  checkBox.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      recursive=checkBox.getSelection();
    }
  }
);
  checkBox.setSelection(recursive);
  checkBox.setText(""String_Node_Str"");
}
return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
    textControl=new CCombo(composite,SWT.BORDER | SWT.READ_ONLY);
    roles=Util.getChildren(this.xObject.getServerRoot(),TreeObject.ROLE);
    ((CCombo)textControl).setItems(roles.toArray(new String[roles.size()]));
  }
 else {
    textControl=new Text(composite,SWT.BORDER | SWT.SINGLE);
  }
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  }
 else {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  }
  ((GridData)textControl.getLayoutData()).minimumWidth=400;
  textControl.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(AnnotationOrderedListsDialog.getControlText(textControl));
        viewer.refresh();
      }
    }
  }
);
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    Button xpathButton=new Button(composite,SWT.PUSH | SWT.CENTER);
    xpathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    xpathButton.setText(""String_Node_Str"");
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog dlg=new XpathSelectDialog(parentPage.getSite().getShell(),xObject.getParent(),""String_Node_Str"",parentPage.getSite(),false,dataModelName);
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          ((Text)textControl).setText(dlg.getXpath());
          dlg.close();
        }
      }
    }
);
  }
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      boolean exist=false;
      for (Iterator it=xPaths.iterator(); it.hasNext(); ) {
        if (((String)it.next()).equals(getControlText(textControl)))         exist=true;
      }
      if (!exist && getControlText(textControl) != null && getControlText(textControl) != ""String_Node_Str"")       xPaths.add(getControlText(textControl));
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(500);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  if (actionType == AnnotationOrderedListsDialog.AnnotationWrite_ActionType || actionType == AnnotationOrderedListsDialog.AnnotationHidden_ActionType) {
    editors[0]=new ComboBoxCellEditor(table,roles.toArray(new String[]{}),SWT.READ_ONLY);
  }
 else {
    editors[0]=new TextCellEditor(table);
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return true;
  }
  public void modify(  Object element,  String property,  Object value){
    TableItem item=(TableItem)element;
    DescriptionLine line=(DescriptionLine)item.getData();
    String orgValue=line.getLabel();
    if (actionType != AnnotationWrite_ActionType && actionType != AnnotationHidden_ActionType) {
      int targetPos=xPaths.indexOf(value.toString());
      if (targetPos < 0) {
        line.setLabel(value.toString());
        xPaths.add(value.toString());
        viewer.update(line,null);
      }
 else       if (targetPos >= 0 && !value.toString().equals(orgValue)) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
      return;
    }
 else {
      String[] attrs=roles.toArray(new String[]{});
      value=attrs[Integer.parseInt(value.toString())];
      int pos=xPaths.indexOf(value.toString());
      if (pos >= 0 && !(orgValue.equals(value))) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
 else       if (pos < 0) {
        line.setLabel(value.toString());
        xPaths.set(xPaths.indexOf(orgValue),value.toString());
        viewer.update(line,null);
      }
    }
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    String value=line.getLabel();
    if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
      String[] attrs=roles.toArray(new String[]{});
      return Arrays.asList(attrs).indexOf(value);
    }
 else {
      return value;
    }
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null)     ((Text)textControl).setText(line.getLabel());
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
textControl.setFocus();
if (actionType != AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType && actionType != AnnotationOrderedListsDialog.AnnotationTargetSystems_ActionType) {
  checkBox=new Button(composite,SWT.CHECK);
  checkBox.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,true,2,1));
  checkBox.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      recursive=checkBox.getSelection();
    }
  }
);
  checkBox.setSelection(recursive);
  checkBox.setText(""String_Node_Str"");
}
return composite;
}",0.9982004125883334
149174,"@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboDataCluster=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboDataCluster.getCombo().setEditable(false);
  List<String> dcs=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.DATA_CLUSTER);
  dcs.add(0,""String_Node_Str"");
  comboDataCluster.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  if (xObject != null && xObject.getDisplayName() != null) {
    if (EXtentisObjects.DataCluster.getDisplayName().equalsIgnoreCase(xObject.getDisplayName())) {
      comboDataCluster.getCombo().select(0);
    }
 else {
      comboDataCluster.getCombo().setText(xObject.getDisplayName());
    }
  }
  fw=new FileSelectWidget(composite,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},comboDataCluster.getCombo().getText());
  comboDataCluster.getCombo().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (comboDataCluster.getCombo().getText().length() > 0) {
        fw.getText().setText(comboDataCluster.getCombo().getText());
        fw.setFilename(comboDataCluster.getCombo().getText());
      }
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboDataCluster=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboDataCluster.getCombo().setEditable(false);
  List<String> dcs=Util.getChildren(this.xObject.getServerRoot(),TreeObject.DATA_CLUSTER);
  dcs.add(0,""String_Node_Str"");
  comboDataCluster.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  if (xObject != null && xObject.getDisplayName() != null) {
    if (EXtentisObjects.DataCluster.getDisplayName().equalsIgnoreCase(xObject.getDisplayName())) {
      comboDataCluster.getCombo().select(0);
    }
 else {
      comboDataCluster.getCombo().setText(xObject.getDisplayName());
    }
  }
  fw=new FileSelectWidget(composite,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},comboDataCluster.getCombo().getText());
  comboDataCluster.getCombo().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (comboDataCluster.getCombo().getText().length() > 0) {
        fw.getText().setText(comboDataCluster.getCombo().getText());
        fw.setFilename(comboDataCluster.getCombo().getText());
      }
    }
  }
);
  return composite;
}",0.9867613819825638
149175,"@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboRole=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboRole.getCombo().setEditable(false);
  List<String> roles=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.ROLE);
  comboRole.getCombo().setItems(roles.toArray(new String[roles.size()]));
  if (dataModelFilter.getRole() == null || dataModelFilter.getRole().length() == 0) {
    comboRole.getCombo().select(0);
  }
 else {
    comboRole.getCombo().setText(dataModelFilter.getRole());
  }
  btnAll=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnAll.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnAll.setSelection(dataModelFilter.isAll());
  btnReadOnly=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnReadOnly.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnReadOnly.setSelection(dataModelFilter.isReadOnly());
  btnWrite=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnWrite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnWrite.setSelection(dataModelFilter.isWriteAccess());
  btnHidden=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnHidden.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnHidden.setSelection(dataModelFilter.isHiddenAccess());
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboRole=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboRole.getCombo().setEditable(false);
  List<String> roles=Util.getChildren(this.xObject.getServerRoot(),TreeObject.ROLE);
  comboRole.getCombo().setItems(roles.toArray(new String[roles.size()]));
  if (dataModelFilter.getRole() == null || dataModelFilter.getRole().length() == 0) {
    comboRole.getCombo().select(0);
  }
 else {
    comboRole.getCombo().setText(dataModelFilter.getRole());
  }
  btnAll=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnAll.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnAll.setSelection(dataModelFilter.isAll());
  btnReadOnly=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnReadOnly.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnReadOnly.setSelection(dataModelFilter.isReadOnly());
  btnWrite=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnWrite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnWrite.setSelection(dataModelFilter.isWriteAccess());
  btnHidden=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnHidden.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnHidden.setSelection(dataModelFilter.isHiddenAccess());
  return composite;
}",0.9876543209876544
149176,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  final TreeParent tree=this.parent.findServerFolder(TreeObject.DATA_MODEL);
  TreeObject[] trees=tree.getChildren();
  ArrayList<String> systemDataModelValues=new ArrayList<String>();
  for (int i=0; i < trees.length; i++)   systemDataModelValues.add(((TreeObject)trees[i]).getDisplayName());
  dataModelCombo.setItems(systemDataModelValues.toArray(new String[systemDataModelValues.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree);
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=systemDataModelValues.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  final TreeParent tree=this.parent.findServerFolder(TreeObject.DATA_MODEL);
  List<String> systemDataModelValues=Util.getChildren(this.parent.getServerRoot(),TreeObject.DATA_MODEL);
  dataModelCombo.setItems(systemDataModelValues.toArray(new String[systemDataModelValues.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree);
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=systemDataModelValues.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}",0.9364622537082136
149177,"@Override protected void createFormContent(IManagedForm managedForm){
  managedForm.getForm().setText(this.getTitle());
  FormToolkit toolkit=managedForm.getToolkit();
  Composite composite=managedForm.getForm().getBody();
  composite.setLayout(new GridLayout(2,false));
  final LabelCombo comboRevision=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboRevision.getCombo().setEditable(false);
  final LabelCombo comboUniverse=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboUniverse.getCombo().setEditable(false);
  List<String> dcs=Util.getCachedXObjectsNameSet(getXObject(),TreeObject.UNIVERSE);
  comboUniverse.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  comboUniverse.getCombo().add(IConstants.HEAD,0);
  if (getXObject().getUniverse().trim().length() == 0) {
    comboUniverse.getCombo().setText(IConstants.HEAD);
  }
 else {
    comboUniverse.getCombo().setText(getXObject().getUniverse());
  }
  try {
    XtentisPort port=Util.getPort(new URL(getXObject().getEndpointAddress()),getXObject().getUniverse(),getXObject().getUsername(),getXObject().getPassword());
    Map<String,List<String>> map=Util.getUniverseMap(port);
    String name=getXObject().getDisplayName().replaceAll(""String_Node_Str"",""String_Node_Str"");
    List<String> revisions=map.get(name.trim());
    if (revisions != null)     comboRevision.getCombo().setItems(revisions.toArray(new String[revisions.size()]));
    comboRevision.getCombo().add(IConstants.HEAD,0);
    Matcher m=Pattern.compile(""String_Node_Str"").matcher(getXObject().getDisplayName());
    if (m.matches()) {
      String revision=m.group(2);
      comboRevision.getCombo().setText(revision);
    }
    final Map<String,List<String>> map2=Util.getUniverseMap2(port);
    comboRevision.getCombo().addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        if (comboRevision.getCombo().getText().equals(IConstants.HEAD)) {
          comboUniverse.getCombo().setText(IConstants.HEAD);
          return;
        }
        for (        Entry<String,List<String>> entry : map2.entrySet()) {
          if (entry.getValue().contains(comboRevision.getCombo().getText())) {
            comboUniverse.getCombo().setText(entry.getKey());
            break;
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createFormContent(IManagedForm managedForm){
  managedForm.getForm().setText(this.getTitle());
  FormToolkit toolkit=managedForm.getToolkit();
  Composite composite=managedForm.getForm().getBody();
  composite.setLayout(new GridLayout(2,false));
  final LabelCombo comboRevision=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboRevision.getCombo().setEditable(false);
  final LabelCombo comboUniverse=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboUniverse.getCombo().setEditable(false);
  List<String> dcs=Util.getChildren(getXObject().getServerRoot(),TreeObject.UNIVERSE);
  comboUniverse.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  comboUniverse.getCombo().add(IConstants.HEAD,0);
  if (getXObject().getUniverse().trim().length() == 0) {
    comboUniverse.getCombo().setText(IConstants.HEAD);
  }
 else {
    comboUniverse.getCombo().setText(getXObject().getUniverse());
  }
  try {
    XtentisPort port=Util.getPort(new URL(getXObject().getEndpointAddress()),getXObject().getUniverse(),getXObject().getUsername(),getXObject().getPassword());
    Map<String,List<String>> map=Util.getUniverseMap(port);
    String name=getXObject().getDisplayName().replaceAll(""String_Node_Str"",""String_Node_Str"");
    List<String> revisions=map.get(name.trim());
    if (revisions != null)     comboRevision.getCombo().setItems(revisions.toArray(new String[revisions.size()]));
    comboRevision.getCombo().add(IConstants.HEAD,0);
    Matcher m=Pattern.compile(""String_Node_Str"").matcher(getXObject().getDisplayName());
    if (m.matches()) {
      String revision=m.group(2);
      comboRevision.getCombo().setText(revision);
    }
    final Map<String,List<String>> map2=Util.getUniverseMap2(port);
    comboRevision.getCombo().addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        if (comboRevision.getCombo().getText().equals(IConstants.HEAD)) {
          comboUniverse.getCombo().setText(IConstants.HEAD);
          return;
        }
        for (        Entry<String,List<String>> entry : map2.entrySet()) {
          if (entry.getValue().contains(comboRevision.getCombo().getText())) {
            comboUniverse.getCombo().setText(entry.getKey());
            break;
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.99052228271829
149178,"public TreeObject findObject(int type,String name){
  TreeObject[] allchildren=this.getChildren();
  for (int i=0; i < allchildren.length; i++) {
    if (allchildren[i] instanceof TreeParent) {
      return ((TreeParent)allchildren[i]).findObject(type,name);
    }
    if ((allchildren[i].getType() == type) && (allchildren[i].getDisplayName().equals(name)))     return allchildren[i];
  }
  return null;
}","public TreeObject findObject(int type,String name){
  TreeObject[] allchildren=this.getChildren();
  TreeObject obj=null;
  for (int i=0; i < allchildren.length; i++) {
    if (allchildren[i] instanceof TreeParent) {
      obj=((TreeParent)allchildren[i]).findObject(type,name);
    }
 else     if ((allchildren[i].getType() == type) && (allchildren[i].getDisplayName().equals(name)))     obj=allchildren[i];
  }
  return obj;
}",0.8729016786570744
149179,"/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Category.getInstance(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      result=(String)Util.getMethod(service,wsServiceAction.getMethodName()).invoke(service,new Object[]{wsServiceAction.getMethodParameters()});
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=com.amalto.core.util.Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      Method method=com.amalto.core.util.Util.getMethod(service,wsServiceAction.getMethodName());
      result=(String)method.invoke(service,wsServiceAction.getMethodParameters());
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  com.amalto.core.util.XtentisException e) {
    e.printStackTrace();
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    e.printStackTrace();
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9071146245059288
149180,"public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=com.amalto.core.util.Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      result=(String)com.amalto.core.util.Util.getMethod(service,wsServiceAction.getMethodName()).invoke(service,new Object[]{wsServiceAction.getMethodParameters()});
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=com.amalto.core.util.Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      Method method=com.amalto.core.util.Util.getMethod(service,wsServiceAction.getMethodName());
      result=(String)method.invoke(service,wsServiceAction.getMethodParameters());
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  com.amalto.core.util.XtentisException e) {
    e.printStackTrace();
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    e.printStackTrace();
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.958217270194986
149181,"/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Category.getInstance(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      result=(String)Util.getMethod(service,wsServiceAction.getMethodName()).invoke(service,new Object[]{wsServiceAction.getMethodParameters()});
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=com.amalto.core.util.Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      Method method=com.amalto.core.util.Util.getMethod(service,wsServiceAction.getMethodName());
      result=(String)method.invoke(service,wsServiceAction.getMethodParameters());
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  com.amalto.core.util.XtentisException e) {
    e.printStackTrace();
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    e.printStackTrace();
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9071146245059288
149182,"public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=com.amalto.core.util.Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      result=(String)com.amalto.core.util.Util.getMethod(service,wsServiceAction.getMethodName()).invoke(service,new Object[]{wsServiceAction.getMethodParameters()});
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=com.amalto.core.util.Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      Method method=com.amalto.core.util.Util.getMethod(service,wsServiceAction.getMethodName());
      result=(String)method.invoke(service,wsServiceAction.getMethodParameters());
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  com.amalto.core.util.XtentisException e) {
    e.printStackTrace();
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    e.printStackTrace();
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.958217270194986
149183,"protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSUniverse ws=(WSUniverse)(getXObject().getWsObject());
    ws.setName(universe.getName());
    ws.setDefaultItemsRevisionID(universe.getDefaultReversionID());
    ws.setDescription(universe.getDescription());
    List<WSUniverseXtentisObjectsRevisionIDs> xtentisObjectsRevisionIDs=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      xtentisObjectsRevisionIDs.add(new WSUniverseXtentisObjectsRevisionIDs(line.key,line.value));
    }
    ws.setXtentisObjectsRevisionIDs(xtentisObjectsRevisionIDs.toArray(new WSUniverseXtentisObjectsRevisionIDs[xtentisObjectsRevisionIDs.size()]));
    List<WSUniverseItemsRevisionIDs> itemIds=new ArrayList<WSUniverseItemsRevisionIDs>();
    for (    Line line : universe.getItemsList()) {
      itemIds.add(new WSUniverseItemsRevisionIDs(line.keyValues.get(0).value,line.keyValues.get(1).value));
    }
    ws.setItemsRevisionIDs(itemIds.toArray(new WSUniverseItemsRevisionIDs[itemIds.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSUniverse ws=(WSUniverse)(getXObject().getWsObject());
    ws.setName(universe.getName());
    ws.setDefaultItemsRevisionID(universe.getDefaultReversionID());
    ws.setDescription(universe.getDescription());
    List<WSUniverseXtentisObjectsRevisionIDs> xtentisObjectsRevisionIDs=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      String name=line.key;
      if (EXtentisObjects.Transformer.getDisplayName().equals(name)) {
        name=EXtentisObjects.Transformer.getName();
      }
      xtentisObjectsRevisionIDs.add(new WSUniverseXtentisObjectsRevisionIDs(name,line.value));
    }
    ws.setXtentisObjectsRevisionIDs(xtentisObjectsRevisionIDs.toArray(new WSUniverseXtentisObjectsRevisionIDs[xtentisObjectsRevisionIDs.size()]));
    List<WSUniverseItemsRevisionIDs> itemIds=new ArrayList<WSUniverseItemsRevisionIDs>();
    for (    Line line : universe.getItemsList()) {
      itemIds.add(new WSUniverseItemsRevisionIDs(line.keyValues.get(0).value,line.keyValues.get(1).value));
    }
    ws.setItemsRevisionIDs(itemIds.toArray(new WSUniverseItemsRevisionIDs[itemIds.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.8729641693811075
149184,"public Universe(String defaultReversionID) throws RemoteException {
  this.defaultReversionID=defaultReversionID;
  for (  String str : getPort().getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
    xtentisObjectsList.add(new KeyValue(str,""String_Node_Str""));
  }
}","public Universe(String defaultReversionID) throws RemoteException {
  this.defaultReversionID=defaultReversionID;
  for (  String str : getPort().getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
    String name=str;
    if (EXtentisObjects.Transformer.getName().equals(name)) {
      name=EXtentisObjects.Transformer.getDisplayName();
    }
    xtentisObjectsList.add(new KeyValue(name,""String_Node_Str""));
  }
}",0.8045977011494253
149185,"protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSUniverse wsUniverse=(WSUniverse)(getXObject().getWsObject());
    universe=new Universe(""String_Node_Str"");
    universe.setName(wsUniverse.getName());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.setDescription(wsUniverse.getDescription() == null ? ""String_Node_Str"" : wsUniverse.getDescription());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.getXtentisObjectsList().clear();
    for (    WSUniverseXtentisObjectsRevisionIDs xtentisObjects : wsUniverse.getXtentisObjectsRevisionIDs()) {
      universe.getXtentisObjectsList().add(new KeyValue(xtentisObjects.getXtentisObjectName(),xtentisObjects.getRevisionID()));
    }
    for (    WSUniverseItemsRevisionIDs item : wsUniverse.getItemsRevisionIDs()) {
      universe.getItemsList().add(new Line(columns,new String[]{item.getConceptPattern(),item.getRevisionID()}));
    }
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    descriptionText.setText(universe.getDescription() == null ? ""String_Node_Str"" : universe.getDescription());
    defaultReversionIDText.getText().setText(universe.getDefaultReversionID() == null ? ""String_Node_Str"" : universe.getDefaultReversionID());
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      LabelText labelText=xtentisObjectsLabelTexts.get(line.key);
      if (labelText != null) {
        labelText.getText().setText(line.value);
      }
    }
    instancesViewer.setInput(universe.getItemsList());
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSUniverse wsUniverse=(WSUniverse)(getXObject().getWsObject());
    universe=new Universe(""String_Node_Str"");
    universe.setName(wsUniverse.getName());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.setDescription(wsUniverse.getDescription() == null ? ""String_Node_Str"" : wsUniverse.getDescription());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.getXtentisObjectsList().clear();
    for (    WSUniverseXtentisObjectsRevisionIDs xtentisObjects : wsUniverse.getXtentisObjectsRevisionIDs()) {
      String name=xtentisObjects.getXtentisObjectName();
      if (EXtentisObjects.Transformer.getName().equals(name)) {
        name=EXtentisObjects.Transformer.getDisplayName();
      }
      universe.getXtentisObjectsList().add(new KeyValue(name,xtentisObjects.getRevisionID()));
    }
    for (    WSUniverseItemsRevisionIDs item : wsUniverse.getItemsRevisionIDs()) {
      universe.getItemsList().add(new Line(columns,new String[]{item.getConceptPattern(),item.getRevisionID()}));
    }
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    descriptionText.setText(universe.getDescription() == null ? ""String_Node_Str"" : universe.getDescription());
    defaultReversionIDText.getText().setText(universe.getDefaultReversionID() == null ? ""String_Node_Str"" : universe.getDefaultReversionID());
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      LabelText labelText=xtentisObjectsLabelTexts.get(line.key);
      if (labelText != null) {
        labelText.getText().setText(line.value);
      }
    }
    instancesViewer.setInput(universe.getItemsList());
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9420693144447256
149186,"protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSUniverse ws=(WSUniverse)(getXObject().getWsObject());
    ws.setName(universe.getName());
    ws.setDefaultItemsRevisionID(universe.getDefaultReversionID());
    ws.setDescription(universe.getDescription());
    List<WSUniverseXtentisObjectsRevisionIDs> xtentisObjectsRevisionIDs=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      xtentisObjectsRevisionIDs.add(new WSUniverseXtentisObjectsRevisionIDs(line.key,line.value));
    }
    ws.setXtentisObjectsRevisionIDs(xtentisObjectsRevisionIDs.toArray(new WSUniverseXtentisObjectsRevisionIDs[xtentisObjectsRevisionIDs.size()]));
    List<WSUniverseItemsRevisionIDs> itemIds=new ArrayList<WSUniverseItemsRevisionIDs>();
    for (    Line line : universe.getItemsList()) {
      itemIds.add(new WSUniverseItemsRevisionIDs(line.keyValues.get(0).value,line.keyValues.get(1).value));
    }
    ws.setItemsRevisionIDs(itemIds.toArray(new WSUniverseItemsRevisionIDs[itemIds.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSUniverse ws=(WSUniverse)(getXObject().getWsObject());
    ws.setName(universe.getName());
    ws.setDefaultItemsRevisionID(universe.getDefaultReversionID());
    ws.setDescription(universe.getDescription());
    List<WSUniverseXtentisObjectsRevisionIDs> xtentisObjectsRevisionIDs=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      String name=line.key;
      if (EXtentisObjects.Transformer.getDisplayName().equals(name)) {
        name=EXtentisObjects.Transformer.getName();
      }
      xtentisObjectsRevisionIDs.add(new WSUniverseXtentisObjectsRevisionIDs(name,line.value));
    }
    ws.setXtentisObjectsRevisionIDs(xtentisObjectsRevisionIDs.toArray(new WSUniverseXtentisObjectsRevisionIDs[xtentisObjectsRevisionIDs.size()]));
    List<WSUniverseItemsRevisionIDs> itemIds=new ArrayList<WSUniverseItemsRevisionIDs>();
    for (    Line line : universe.getItemsList()) {
      itemIds.add(new WSUniverseItemsRevisionIDs(line.keyValues.get(0).value,line.keyValues.get(1).value));
    }
    ws.setItemsRevisionIDs(itemIds.toArray(new WSUniverseItemsRevisionIDs[itemIds.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.8729641693811075
149187,"public Universe(String defaultReversionID) throws RemoteException {
  this.defaultReversionID=defaultReversionID;
  for (  String str : getPort().getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
    xtentisObjectsList.add(new KeyValue(str,""String_Node_Str""));
  }
}","public Universe(String defaultReversionID) throws RemoteException {
  this.defaultReversionID=defaultReversionID;
  for (  String str : getPort().getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
    String name=str;
    if (EXtentisObjects.Transformer.getName().equals(name)) {
      name=EXtentisObjects.Transformer.getDisplayName();
    }
    xtentisObjectsList.add(new KeyValue(name,""String_Node_Str""));
  }
}",0.8045977011494253
149188,"protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSUniverse wsUniverse=(WSUniverse)(getXObject().getWsObject());
    universe=new Universe(""String_Node_Str"");
    universe.setName(wsUniverse.getName());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.setDescription(wsUniverse.getDescription() == null ? ""String_Node_Str"" : wsUniverse.getDescription());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.getXtentisObjectsList().clear();
    for (    WSUniverseXtentisObjectsRevisionIDs xtentisObjects : wsUniverse.getXtentisObjectsRevisionIDs()) {
      universe.getXtentisObjectsList().add(new KeyValue(xtentisObjects.getXtentisObjectName(),xtentisObjects.getRevisionID()));
    }
    for (    WSUniverseItemsRevisionIDs item : wsUniverse.getItemsRevisionIDs()) {
      universe.getItemsList().add(new Line(columns,new String[]{item.getConceptPattern(),item.getRevisionID()}));
    }
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    descriptionText.setText(universe.getDescription() == null ? ""String_Node_Str"" : universe.getDescription());
    defaultReversionIDText.getText().setText(universe.getDefaultReversionID() == null ? ""String_Node_Str"" : universe.getDefaultReversionID());
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      LabelText labelText=xtentisObjectsLabelTexts.get(line.key);
      if (labelText != null) {
        labelText.getText().setText(line.value);
      }
    }
    instancesViewer.setInput(universe.getItemsList());
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSUniverse wsUniverse=(WSUniverse)(getXObject().getWsObject());
    universe=new Universe(""String_Node_Str"");
    universe.setName(wsUniverse.getName());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.setDescription(wsUniverse.getDescription() == null ? ""String_Node_Str"" : wsUniverse.getDescription());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.getXtentisObjectsList().clear();
    for (    WSUniverseXtentisObjectsRevisionIDs xtentisObjects : wsUniverse.getXtentisObjectsRevisionIDs()) {
      String name=xtentisObjects.getXtentisObjectName();
      if (EXtentisObjects.Transformer.getName().equals(name)) {
        name=EXtentisObjects.Transformer.getDisplayName();
      }
      universe.getXtentisObjectsList().add(new KeyValue(name,xtentisObjects.getRevisionID()));
    }
    for (    WSUniverseItemsRevisionIDs item : wsUniverse.getItemsRevisionIDs()) {
      universe.getItemsList().add(new Line(columns,new String[]{item.getConceptPattern(),item.getRevisionID()}));
    }
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    descriptionText.setText(universe.getDescription() == null ? ""String_Node_Str"" : universe.getDescription());
    defaultReversionIDText.getText().setText(universe.getDefaultReversionID() == null ? ""String_Node_Str"" : universe.getDefaultReversionID());
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      LabelText labelText=xtentisObjectsLabelTexts.get(line.key);
      if (labelText != null) {
        labelText.getText().setText(line.value);
      }
    }
    instancesViewer.setInput(universe.getItemsList());
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9420693144447256
149189,"private static void generateUUIDForElement(Document schema,String dataCluster,String concept,Element conceptRoot) throws Exception {
  NodeList uuidLists=getUUIDNodes(schema,concept);
  for (int i=0; i < uuidLists.getLength(); i++) {
    Element element=(Element)uuidLists.item(i);
    String name=Util.getFirstTextNode(element,""String_Node_Str"");
    String type=Util.getFirstTextNode(element,""String_Node_Str"");
    String value=null;
    for (int j=0; j < conceptRoot.getChildNodes().getLength(); j++) {
      Node node=conceptRoot.getChildNodes().item(j);
      if (node.getNodeType() != Node.ELEMENT_NODE)       continue;
      if (node.getChildNodes().getLength() > 1) {
        generateUUIDForElement(schema,dataCluster,node.getNodeName(),(Element)node);
      }
 else {
        if (node.getNodeName().equalsIgnoreCase(name)) {
          if (node.getTextContent() == null || node.getTextContent().length() == 0) {
            if (EUUIDCustomType.AUTO_INCREMENT.getName().equalsIgnoreCase(type)) {
              value=String.valueOf(AutoIncrementGenerator.generateNum(LocalUser.getLocalUser().getUniverse().getName(),dataCluster,concept + ""String_Node_Str"" + name));
            }
            if (EUUIDCustomType.UUID.getName().equalsIgnoreCase(type)) {
              value=String.valueOf(UUID.randomUUID().toString());
            }
            node.setTextContent(value);
          }
          break;
        }
      }
    }
  }
}","private static void generateUUIDForElement(Document schema,String dataCluster,String concept,Element conceptRoot) throws Exception {
  NodeList uuidLists=getUUIDNodes(schema,concept);
  for (int i=0; i < uuidLists.getLength(); i++) {
    Element element=(Element)uuidLists.item(i);
    String name=Util.getFirstTextNode(element,""String_Node_Str"");
    String type=Util.getFirstTextNode(element,""String_Node_Str"");
    String value=null;
    for (int j=0; j < conceptRoot.getChildNodes().getLength(); j++) {
      Node node=conceptRoot.getChildNodes().item(j);
      if (node.getNodeType() != Node.ELEMENT_NODE)       continue;
      if (node.getChildNodes().getLength() > 1) {
        generateUUIDForElement(schema,dataCluster,node.getNodeName(),(Element)node);
      }
 else {
        if (node.getNodeName().equalsIgnoreCase(name)) {
          if (node.getTextContent() == null || node.getTextContent().length() == 0) {
            if (EUUIDCustomType.AUTO_INCREMENT.getName().equalsIgnoreCase(type)) {
              String id=String.valueOf(AutoIncrementGenerator.generateNum(LocalUser.getLocalUser().getUniverse().getName(),dataCluster,concept + ""String_Node_Str"" + name));
              ItemPOJOPK pk=new ItemPOJOPK(new DataClusterPOJOPK(dataCluster),concept,new String[]{id});
              ItemPOJO pojo=ItemPOJO.load(pk);
              while (pojo != null) {
                id=String.valueOf(AutoIncrementGenerator.generateNum(LocalUser.getLocalUser().getUniverse().getName(),dataCluster,concept + ""String_Node_Str"" + name));
                pk=new ItemPOJOPK(new DataClusterPOJOPK(dataCluster),concept,new String[]{id});
                pojo=ItemPOJO.load(pk);
                if (pojo == null) {
                  value=id;
                  break;
                }
              }
              if (pojo == null) {
                value=id;
              }
            }
            if (EUUIDCustomType.UUID.getName().equalsIgnoreCase(type)) {
              value=String.valueOf(UUID.randomUUID().toString());
            }
            node.setTextContent(value);
          }
          break;
        }
      }
    }
  }
}",0.8023516237402015
149190,"@Override protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    if (syncPlan == null)     syncPlan=new SyncronizationPlan();
    this.toolkit=toolkit;
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    descriptionText=new LabelText(charComposite,""String_Node_Str"");
    descriptionText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.description=descriptionText.getText().getText();
        markDirty();
      }
    }
);
    toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText=toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    toolkit.createLabel(charComposite,""String_Node_Str"");
    Composite actionsComposite=toolkit.createComposite(charComposite,SWT.NONE);
    actionsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    actionsComposite.setLayout(new GridLayout(4,false));
    startFullButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startFullButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startFullButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_FULL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    startDifferentialButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startDifferentialButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startDifferentialButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_DIFFERENTIAL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    stopButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    stopButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    stopButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.STOP));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    resetButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    resetButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    resetButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.RESET));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    Composite remoteMDMGroup=this.getNewSectionComposite(""String_Node_Str"");
    remoteMDMGroup.setLayout(new GridLayout(1,true));
    Composite remoteMDMComposite=toolkit.createComposite(remoteMDMGroup,SWT.BORDER);
    remoteMDMComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    remoteMDMComposite.setLayout(new GridLayout(2,false));
    remoteSystemNameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemNameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemName=remoteSystemNameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemURLText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemURL=remoteSystemURLText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemUsernameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemUsername=remoteSystemUsernameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemPasswordText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemPassword=remoteSystemPasswordText.getText().getText();
        markDirty();
      }
    }
);
    Composite TISGroup=this.getNewSectionComposite(""String_Node_Str"");
    TISGroup.setLayout(new GridLayout(1,true));
    Composite TISComposite=toolkit.createComposite(TISGroup,SWT.BORDER);
    TISComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    TISComposite.setLayout(new GridLayout(2,false));
    tisURLText=new LabelText(TISComposite,""String_Node_Str"");
    tisURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisURL=tisURLText.getText().getText();
        markDirty();
      }
    }
);
    tisUsernameText=new LabelText(TISComposite,""String_Node_Str"");
    tisUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisUsername=tisUsernameText.getText().getText();
        markDirty();
      }
    }
);
    tisPasswordText=new LabelText(TISComposite,""String_Node_Str"");
    tisPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisPassword=tisPasswordText.getText().getText();
        markDirty();
      }
    }
);
    tisParametersText=new LabelText(TISComposite,""String_Node_Str"");
    tisParametersText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisParameters=tisParametersText.getText().getText();
        markDirty();
      }
    }
);
    Composite itemsGroup=this.getNewSectionComposite(""String_Node_Str"");
    itemsGroup.setLayout(new GridLayout(1,true));
    Composite itemsComposite=toolkit.createComposite(itemsGroup,SWT.BORDER);
    itemsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    itemsComposite.setLayout(new GridLayout(1,true));
    WSDataClusterPK[] xdcPKs=getPort().getDataClusterPKs(new WSRegexDataClusterPKs(""String_Node_Str"")).getWsDataClusterPKs();
    final List<String> dataClustersStrings=new ArrayList<String>();
    for (int i=0; i < xdcPKs.length; i++) {
      String name=xdcPKs[i].getPk();
      if (name != null && name != ""String_Node_Str"" && !""String_Node_Str"".equals(name)) {
        dataClustersStrings.add(name);
      }
    }
    String[] itemsAlgorithmsStrings=getPort().getSynchronizationPlanItemsAlgorithms(new WSGetSynchronizationPlanItemsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    ComplexTableViewer itemsViewer=new ComplexTableViewer(Arrays.asList(itemsColumns),toolkit,itemsComposite);
    itemsViewer.setMainPage(this);
    ComplexTableViewerColumn complexTableViewerDataClusterColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    complexTableViewerDataClusterColumn.setComboValues(dataClustersStrings.toArray(new String[dataClustersStrings.size()]));
    final ComplexTableViewerColumn complexTableViewerModelConceptColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(itemsAlgorithmsStrings);
    final ComplexTableViewerColumn complexTableViewerRevisionIdColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.create();
    ((CCombo)complexTableViewerDataClusterColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String clusterName=dataClustersStrings.get(selectedIndex);
        try {
          String[] concepts=getPort().getConceptsInDataCluster(new WSGetConceptsInDataCluster(new WSDataClusterPK(clusterName))).getStrings();
          complexTableViewerModelConceptColumn.setComboValues(concepts);
          ((CCombo)complexTableViewerModelConceptColumn.getControl()).setItems(complexTableViewerModelConceptColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    ((CCombo)complexTableViewerModelConceptColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String[] concepts=complexTableViewerModelConceptColumn.getComboValues();
        String selectedConcept=concepts[selectedIndex];
        try {
          List<String> pRevisions=BusinessPortHelper.getPossibleItemsRevisionsInCurrentUniverse(getPort(),selectedConcept);
          complexTableViewerRevisionIdColumn.setComboValues(pRevisions.toArray(new String[pRevisions.size()]));
          ((CCombo)complexTableViewerRevisionIdColumn.getControl()).setItems(complexTableViewerRevisionIdColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    instancesViewer=itemsViewer.getViewer();
    instancesViewer.setInput(syncPlan.getItemsList());
    Composite objecstGroup=this.getNewSectionComposite(""String_Node_Str"",ExpandableComposite.TWISTIE);
    objecstGroup.setLayout(new GridLayout(1,true));
    String[] objectsAlgorithmStrings=getPort().getSynchronizationPlanObjectsAlgorithms(new WSGetSynchronizationPlanObjectsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    Composite objectsComposite=toolkit.createComposite(objecstGroup,SWT.BORDER);
    objectsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectsComposite.setLayout(new GridLayout(1,false));
    String[] xtentisObjects=getPort().getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings();
    Map<String,String> objectsRevisionMap=BusinessPortHelper.getObjectsRevisionMapInCurrentUniverse(getPort());
    for (    String object : xtentisObjects) {
      Composite composite=toolkit.createComposite(objectsComposite,SWT.BORDER);
      composite.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,1,1));
      composite.setLayout(new GridLayout(2,false));
      Label label=toolkit.createLabel(composite,object,SWT.NULL);
      GridData data=new GridData(SWT.FILL,SWT.RIGHT,false,true,1,1);
      data.widthHint=120;
      label.setLayoutData(data);
      label.setFont(FontUtils.getBoldFont(label.getFont()));
      ComplexTableViewerColumn[] xtentisObjectColumns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{},0)};
      ComplexTableViewer objectViewer=new ComplexTableViewer(Arrays.asList(xtentisObjectColumns),toolkit,composite);
      objectViewer.setMainPage(this);
      if (objectsRevisionMap.get(object) != null && objectsRevisionMap.get(object).length() > 0) {
        objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setDefaultValue(objectsRevisionMap.get(object));
      }
      objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(objectsAlgorithmStrings);
      objectViewer.create();
      List<Line> objList=syncPlan.getXtentisObjectsList().get(object);
      if (objList == null) {
        objList=new ArrayList<Line>();
        syncPlan.getXtentisObjectsList().put(object,objList);
      }
      objectViewer.getViewer().setInput(objList);
      ((GridData)objectViewer.getViewer().getTable().getLayoutData()).heightHint=60;
      xtentisViewers.put(object,objectViewer);
    }
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    if (syncPlan == null)     syncPlan=new SyncronizationPlan();
    this.toolkit=toolkit;
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    descriptionText=new LabelText(charComposite,""String_Node_Str"");
    descriptionText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.description=descriptionText.getText().getText();
        markDirty();
      }
    }
);
    toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText=toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    toolkit.createLabel(charComposite,""String_Node_Str"");
    Composite actionsComposite=toolkit.createComposite(charComposite,SWT.NONE);
    actionsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    actionsComposite.setLayout(new GridLayout(4,false));
    startFullButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startFullButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startFullButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        if (remoteSystemURLText.getText().getText() == null || remoteSystemURLText.getText().getText().trim().equals(""String_Node_Str"")) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_FULL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    startDifferentialButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startDifferentialButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startDifferentialButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        if (remoteSystemURLText.getText().getText() == null || remoteSystemURLText.getText().getText().trim().equals(""String_Node_Str"")) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_DIFFERENTIAL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    stopButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    stopButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    stopButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.STOP));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    resetButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    resetButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    resetButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.RESET));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    Composite remoteMDMGroup=this.getNewSectionComposite(""String_Node_Str"");
    remoteMDMGroup.setLayout(new GridLayout(1,true));
    Composite remoteMDMComposite=toolkit.createComposite(remoteMDMGroup,SWT.BORDER);
    remoteMDMComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    remoteMDMComposite.setLayout(new GridLayout(2,false));
    remoteSystemNameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemNameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemName=remoteSystemNameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemURLText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemURL=remoteSystemURLText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemUsernameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemUsername=remoteSystemUsernameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemPasswordText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemPassword=remoteSystemPasswordText.getText().getText();
        markDirty();
      }
    }
);
    Composite TISGroup=this.getNewSectionComposite(""String_Node_Str"");
    TISGroup.setLayout(new GridLayout(1,true));
    Composite TISComposite=toolkit.createComposite(TISGroup,SWT.BORDER);
    TISComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    TISComposite.setLayout(new GridLayout(2,false));
    tisURLText=new LabelText(TISComposite,""String_Node_Str"");
    tisURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisURL=tisURLText.getText().getText();
        markDirty();
      }
    }
);
    tisUsernameText=new LabelText(TISComposite,""String_Node_Str"");
    tisUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisUsername=tisUsernameText.getText().getText();
        markDirty();
      }
    }
);
    tisPasswordText=new LabelText(TISComposite,""String_Node_Str"");
    tisPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisPassword=tisPasswordText.getText().getText();
        markDirty();
      }
    }
);
    tisParametersText=new LabelText(TISComposite,""String_Node_Str"");
    tisParametersText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisParameters=tisParametersText.getText().getText();
        markDirty();
      }
    }
);
    Composite itemsGroup=this.getNewSectionComposite(""String_Node_Str"");
    itemsGroup.setLayout(new GridLayout(1,true));
    Composite itemsComposite=toolkit.createComposite(itemsGroup,SWT.BORDER);
    itemsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    itemsComposite.setLayout(new GridLayout(1,true));
    WSDataClusterPK[] xdcPKs=getPort().getDataClusterPKs(new WSRegexDataClusterPKs(""String_Node_Str"")).getWsDataClusterPKs();
    final List<String> dataClustersStrings=new ArrayList<String>();
    for (int i=0; i < xdcPKs.length; i++) {
      String name=xdcPKs[i].getPk();
      if (name != null && name != ""String_Node_Str"" && !""String_Node_Str"".equals(name)) {
        dataClustersStrings.add(name);
      }
    }
    String[] itemsAlgorithmsStrings=getPort().getSynchronizationPlanItemsAlgorithms(new WSGetSynchronizationPlanItemsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    ComplexTableViewer itemsViewer=new ComplexTableViewer(Arrays.asList(itemsColumns),toolkit,itemsComposite);
    itemsViewer.setMainPage(this);
    ComplexTableViewerColumn complexTableViewerDataClusterColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    complexTableViewerDataClusterColumn.setComboValues(dataClustersStrings.toArray(new String[dataClustersStrings.size()]));
    final ComplexTableViewerColumn complexTableViewerModelConceptColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(itemsAlgorithmsStrings);
    final ComplexTableViewerColumn complexTableViewerRevisionIdColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.create();
    ((CCombo)complexTableViewerDataClusterColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String clusterName=dataClustersStrings.get(selectedIndex);
        try {
          String[] concepts=getPort().getConceptsInDataCluster(new WSGetConceptsInDataCluster(new WSDataClusterPK(clusterName))).getStrings();
          complexTableViewerModelConceptColumn.setComboValues(concepts);
          ((CCombo)complexTableViewerModelConceptColumn.getControl()).setItems(complexTableViewerModelConceptColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    ((CCombo)complexTableViewerModelConceptColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String[] concepts=complexTableViewerModelConceptColumn.getComboValues();
        String selectedConcept=concepts[selectedIndex];
        try {
          List<String> pRevisions=BusinessPortHelper.getPossibleItemsRevisionsInCurrentUniverse(getPort(),selectedConcept);
          complexTableViewerRevisionIdColumn.setComboValues(pRevisions.toArray(new String[pRevisions.size()]));
          ((CCombo)complexTableViewerRevisionIdColumn.getControl()).setItems(complexTableViewerRevisionIdColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    instancesViewer=itemsViewer.getViewer();
    instancesViewer.setInput(syncPlan.getItemsList());
    Composite objecstGroup=this.getNewSectionComposite(""String_Node_Str"",ExpandableComposite.TWISTIE);
    objecstGroup.setLayout(new GridLayout(1,true));
    String[] objectsAlgorithmStrings=getPort().getSynchronizationPlanObjectsAlgorithms(new WSGetSynchronizationPlanObjectsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    Composite objectsComposite=toolkit.createComposite(objecstGroup,SWT.BORDER);
    objectsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectsComposite.setLayout(new GridLayout(1,false));
    String[] xtentisObjects=getPort().getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings();
    Map<String,String> objectsRevisionMap=BusinessPortHelper.getObjectsRevisionMapInCurrentUniverse(getPort());
    for (    String object : xtentisObjects) {
      Composite composite=toolkit.createComposite(objectsComposite,SWT.BORDER);
      composite.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,1,1));
      composite.setLayout(new GridLayout(2,false));
      Label label=toolkit.createLabel(composite,object,SWT.NULL);
      GridData data=new GridData(SWT.FILL,SWT.RIGHT,false,true,1,1);
      data.widthHint=120;
      label.setLayoutData(data);
      label.setFont(FontUtils.getBoldFont(label.getFont()));
      ComplexTableViewerColumn[] xtentisObjectColumns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{},0)};
      ComplexTableViewer objectViewer=new ComplexTableViewer(Arrays.asList(xtentisObjectColumns),toolkit,composite);
      objectViewer.setMainPage(this);
      if (objectsRevisionMap.get(object) != null && objectsRevisionMap.get(object).length() > 0) {
        objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setDefaultValue(objectsRevisionMap.get(object));
      }
      objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(objectsAlgorithmStrings);
      objectViewer.create();
      List<Line> objList=syncPlan.getXtentisObjectsList().get(object);
      if (objList == null) {
        objList=new ArrayList<Line>();
        syncPlan.getXtentisObjectsList().put(object,objList);
      }
      objectViewer.getViewer().setInput(objList);
      ((GridData)objectViewer.getViewer().getTable().getLayoutData()).heightHint=60;
      xtentisViewers.put(object,objectViewer);
    }
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9815110997377008
149191,"@Override protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    if (syncPlan == null)     syncPlan=new SyncronizationPlan();
    this.toolkit=toolkit;
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    descriptionText=new LabelText(charComposite,""String_Node_Str"");
    descriptionText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.description=descriptionText.getText().getText();
        markDirty();
      }
    }
);
    toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText=toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    toolkit.createLabel(charComposite,""String_Node_Str"");
    Composite actionsComposite=toolkit.createComposite(charComposite,SWT.NONE);
    actionsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    actionsComposite.setLayout(new GridLayout(4,false));
    startFullButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startFullButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startFullButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_FULL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    startDifferentialButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startDifferentialButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startDifferentialButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_DIFFERENTIAL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    stopButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    stopButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    stopButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.STOP));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    resetButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    resetButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    resetButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.RESET));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    Composite remoteMDMGroup=this.getNewSectionComposite(""String_Node_Str"");
    remoteMDMGroup.setLayout(new GridLayout(1,true));
    Composite remoteMDMComposite=toolkit.createComposite(remoteMDMGroup,SWT.BORDER);
    remoteMDMComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    remoteMDMComposite.setLayout(new GridLayout(2,false));
    remoteSystemNameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemNameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemName=remoteSystemNameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemURLText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemURL=remoteSystemURLText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemUsernameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemUsername=remoteSystemUsernameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemPasswordText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemPassword=remoteSystemPasswordText.getText().getText();
        markDirty();
      }
    }
);
    Composite TISGroup=this.getNewSectionComposite(""String_Node_Str"");
    TISGroup.setLayout(new GridLayout(1,true));
    Composite TISComposite=toolkit.createComposite(TISGroup,SWT.BORDER);
    TISComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    TISComposite.setLayout(new GridLayout(2,false));
    tisURLText=new LabelText(TISComposite,""String_Node_Str"");
    tisURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisURL=tisURLText.getText().getText();
        markDirty();
      }
    }
);
    tisUsernameText=new LabelText(TISComposite,""String_Node_Str"");
    tisUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisUsername=tisUsernameText.getText().getText();
        markDirty();
      }
    }
);
    tisPasswordText=new LabelText(TISComposite,""String_Node_Str"");
    tisPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisPassword=tisPasswordText.getText().getText();
        markDirty();
      }
    }
);
    tisParametersText=new LabelText(TISComposite,""String_Node_Str"");
    tisParametersText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisParameters=tisParametersText.getText().getText();
        markDirty();
      }
    }
);
    Composite itemsGroup=this.getNewSectionComposite(""String_Node_Str"");
    itemsGroup.setLayout(new GridLayout(1,true));
    Composite itemsComposite=toolkit.createComposite(itemsGroup,SWT.BORDER);
    itemsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    itemsComposite.setLayout(new GridLayout(1,true));
    WSDataClusterPK[] xdcPKs=getPort().getDataClusterPKs(new WSRegexDataClusterPKs(""String_Node_Str"")).getWsDataClusterPKs();
    final List<String> dataClustersStrings=new ArrayList<String>();
    for (int i=0; i < xdcPKs.length; i++) {
      String name=xdcPKs[i].getPk();
      if (name != null && name != ""String_Node_Str"" && !""String_Node_Str"".equals(name)) {
        dataClustersStrings.add(name);
      }
    }
    String[] itemsAlgorithmsStrings=getPort().getSynchronizationPlanItemsAlgorithms(new WSGetSynchronizationPlanItemsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    ComplexTableViewer itemsViewer=new ComplexTableViewer(Arrays.asList(itemsColumns),toolkit,itemsComposite);
    itemsViewer.setMainPage(this);
    ComplexTableViewerColumn complexTableViewerDataClusterColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    complexTableViewerDataClusterColumn.setComboValues(dataClustersStrings.toArray(new String[dataClustersStrings.size()]));
    final ComplexTableViewerColumn complexTableViewerModelConceptColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(itemsAlgorithmsStrings);
    final ComplexTableViewerColumn complexTableViewerRevisionIdColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.create();
    ((CCombo)complexTableViewerDataClusterColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String clusterName=dataClustersStrings.get(selectedIndex);
        try {
          String[] concepts=getPort().getConceptsInDataCluster(new WSGetConceptsInDataCluster(new WSDataClusterPK(clusterName))).getStrings();
          complexTableViewerModelConceptColumn.setComboValues(concepts);
          ((CCombo)complexTableViewerModelConceptColumn.getControl()).setItems(complexTableViewerModelConceptColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    ((CCombo)complexTableViewerModelConceptColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String[] concepts=complexTableViewerModelConceptColumn.getComboValues();
        String selectedConcept=concepts[selectedIndex];
        try {
          List<String> pRevisions=BusinessPortHelper.getPossibleItemsRevisionsInCurrentUniverse(getPort(),selectedConcept);
          complexTableViewerRevisionIdColumn.setComboValues(pRevisions.toArray(new String[pRevisions.size()]));
          ((CCombo)complexTableViewerRevisionIdColumn.getControl()).setItems(complexTableViewerRevisionIdColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    instancesViewer=itemsViewer.getViewer();
    instancesViewer.setInput(syncPlan.getItemsList());
    Composite objecstGroup=this.getNewSectionComposite(""String_Node_Str"",ExpandableComposite.TWISTIE);
    objecstGroup.setLayout(new GridLayout(1,true));
    String[] objectsAlgorithmStrings=getPort().getSynchronizationPlanObjectsAlgorithms(new WSGetSynchronizationPlanObjectsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    Composite objectsComposite=toolkit.createComposite(objecstGroup,SWT.BORDER);
    objectsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectsComposite.setLayout(new GridLayout(1,false));
    String[] xtentisObjects=getPort().getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings();
    Map<String,String> objectsRevisionMap=BusinessPortHelper.getObjectsRevisionMapInCurrentUniverse(getPort());
    for (    String object : xtentisObjects) {
      Composite composite=toolkit.createComposite(objectsComposite,SWT.BORDER);
      composite.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,1,1));
      composite.setLayout(new GridLayout(2,false));
      Label label=toolkit.createLabel(composite,object,SWT.NULL);
      GridData data=new GridData(SWT.FILL,SWT.RIGHT,false,true,1,1);
      data.widthHint=120;
      label.setLayoutData(data);
      label.setFont(FontUtils.getBoldFont(label.getFont()));
      ComplexTableViewerColumn[] xtentisObjectColumns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{},0)};
      ComplexTableViewer objectViewer=new ComplexTableViewer(Arrays.asList(xtentisObjectColumns),toolkit,composite);
      objectViewer.setMainPage(this);
      if (objectsRevisionMap.get(object) != null && objectsRevisionMap.get(object).length() > 0) {
        objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setDefaultValue(objectsRevisionMap.get(object));
      }
      objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(objectsAlgorithmStrings);
      objectViewer.create();
      List<Line> objList=syncPlan.getXtentisObjectsList().get(object);
      if (objList == null) {
        objList=new ArrayList<Line>();
        syncPlan.getXtentisObjectsList().put(object,objList);
      }
      objectViewer.getViewer().setInput(objList);
      ((GridData)objectViewer.getViewer().getTable().getLayoutData()).heightHint=60;
      xtentisViewers.put(object,objectViewer);
    }
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    if (syncPlan == null)     syncPlan=new SyncronizationPlan();
    this.toolkit=toolkit;
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    descriptionText=new LabelText(charComposite,""String_Node_Str"");
    descriptionText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.description=descriptionText.getText().getText();
        markDirty();
      }
    }
);
    toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText=toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    toolkit.createLabel(charComposite,""String_Node_Str"");
    Composite actionsComposite=toolkit.createComposite(charComposite,SWT.NONE);
    actionsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    actionsComposite.setLayout(new GridLayout(4,false));
    startFullButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startFullButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startFullButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        if (remoteSystemURLText.getText().getText() == null || remoteSystemURLText.getText().getText().trim().equals(""String_Node_Str"")) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_FULL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    startDifferentialButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startDifferentialButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startDifferentialButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        if (remoteSystemURLText.getText().getText() == null || remoteSystemURLText.getText().getText().trim().equals(""String_Node_Str"")) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_DIFFERENTIAL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    stopButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    stopButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    stopButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.STOP));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    resetButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    resetButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    resetButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.RESET));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    Composite remoteMDMGroup=this.getNewSectionComposite(""String_Node_Str"");
    remoteMDMGroup.setLayout(new GridLayout(1,true));
    Composite remoteMDMComposite=toolkit.createComposite(remoteMDMGroup,SWT.BORDER);
    remoteMDMComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    remoteMDMComposite.setLayout(new GridLayout(2,false));
    remoteSystemNameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemNameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemName=remoteSystemNameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemURLText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemURL=remoteSystemURLText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemUsernameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemUsername=remoteSystemUsernameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemPasswordText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemPassword=remoteSystemPasswordText.getText().getText();
        markDirty();
      }
    }
);
    Composite TISGroup=this.getNewSectionComposite(""String_Node_Str"");
    TISGroup.setLayout(new GridLayout(1,true));
    Composite TISComposite=toolkit.createComposite(TISGroup,SWT.BORDER);
    TISComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    TISComposite.setLayout(new GridLayout(2,false));
    tisURLText=new LabelText(TISComposite,""String_Node_Str"");
    tisURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisURL=tisURLText.getText().getText();
        markDirty();
      }
    }
);
    tisUsernameText=new LabelText(TISComposite,""String_Node_Str"");
    tisUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisUsername=tisUsernameText.getText().getText();
        markDirty();
      }
    }
);
    tisPasswordText=new LabelText(TISComposite,""String_Node_Str"");
    tisPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisPassword=tisPasswordText.getText().getText();
        markDirty();
      }
    }
);
    tisParametersText=new LabelText(TISComposite,""String_Node_Str"");
    tisParametersText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisParameters=tisParametersText.getText().getText();
        markDirty();
      }
    }
);
    Composite itemsGroup=this.getNewSectionComposite(""String_Node_Str"");
    itemsGroup.setLayout(new GridLayout(1,true));
    Composite itemsComposite=toolkit.createComposite(itemsGroup,SWT.BORDER);
    itemsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    itemsComposite.setLayout(new GridLayout(1,true));
    WSDataClusterPK[] xdcPKs=getPort().getDataClusterPKs(new WSRegexDataClusterPKs(""String_Node_Str"")).getWsDataClusterPKs();
    final List<String> dataClustersStrings=new ArrayList<String>();
    for (int i=0; i < xdcPKs.length; i++) {
      String name=xdcPKs[i].getPk();
      if (name != null && name != ""String_Node_Str"" && !""String_Node_Str"".equals(name)) {
        dataClustersStrings.add(name);
      }
    }
    String[] itemsAlgorithmsStrings=getPort().getSynchronizationPlanItemsAlgorithms(new WSGetSynchronizationPlanItemsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    ComplexTableViewer itemsViewer=new ComplexTableViewer(Arrays.asList(itemsColumns),toolkit,itemsComposite);
    itemsViewer.setMainPage(this);
    ComplexTableViewerColumn complexTableViewerDataClusterColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    complexTableViewerDataClusterColumn.setComboValues(dataClustersStrings.toArray(new String[dataClustersStrings.size()]));
    final ComplexTableViewerColumn complexTableViewerModelConceptColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(itemsAlgorithmsStrings);
    final ComplexTableViewerColumn complexTableViewerRevisionIdColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.create();
    ((CCombo)complexTableViewerDataClusterColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String clusterName=dataClustersStrings.get(selectedIndex);
        try {
          String[] concepts=getPort().getConceptsInDataCluster(new WSGetConceptsInDataCluster(new WSDataClusterPK(clusterName))).getStrings();
          complexTableViewerModelConceptColumn.setComboValues(concepts);
          ((CCombo)complexTableViewerModelConceptColumn.getControl()).setItems(complexTableViewerModelConceptColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    ((CCombo)complexTableViewerModelConceptColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String[] concepts=complexTableViewerModelConceptColumn.getComboValues();
        String selectedConcept=concepts[selectedIndex];
        try {
          List<String> pRevisions=BusinessPortHelper.getPossibleItemsRevisionsInCurrentUniverse(getPort(),selectedConcept);
          complexTableViewerRevisionIdColumn.setComboValues(pRevisions.toArray(new String[pRevisions.size()]));
          ((CCombo)complexTableViewerRevisionIdColumn.getControl()).setItems(complexTableViewerRevisionIdColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    instancesViewer=itemsViewer.getViewer();
    instancesViewer.setInput(syncPlan.getItemsList());
    Composite objecstGroup=this.getNewSectionComposite(""String_Node_Str"",ExpandableComposite.TWISTIE);
    objecstGroup.setLayout(new GridLayout(1,true));
    String[] objectsAlgorithmStrings=getPort().getSynchronizationPlanObjectsAlgorithms(new WSGetSynchronizationPlanObjectsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    Composite objectsComposite=toolkit.createComposite(objecstGroup,SWT.BORDER);
    objectsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectsComposite.setLayout(new GridLayout(1,false));
    String[] xtentisObjects=getPort().getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings();
    Map<String,String> objectsRevisionMap=BusinessPortHelper.getObjectsRevisionMapInCurrentUniverse(getPort());
    for (    String object : xtentisObjects) {
      Composite composite=toolkit.createComposite(objectsComposite,SWT.BORDER);
      composite.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,1,1));
      composite.setLayout(new GridLayout(2,false));
      Label label=toolkit.createLabel(composite,object,SWT.NULL);
      GridData data=new GridData(SWT.FILL,SWT.RIGHT,false,true,1,1);
      data.widthHint=120;
      label.setLayoutData(data);
      label.setFont(FontUtils.getBoldFont(label.getFont()));
      ComplexTableViewerColumn[] xtentisObjectColumns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{},0)};
      ComplexTableViewer objectViewer=new ComplexTableViewer(Arrays.asList(xtentisObjectColumns),toolkit,composite);
      objectViewer.setMainPage(this);
      if (objectsRevisionMap.get(object) != null && objectsRevisionMap.get(object).length() > 0) {
        objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setDefaultValue(objectsRevisionMap.get(object));
      }
      objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(objectsAlgorithmStrings);
      objectViewer.create();
      List<Line> objList=syncPlan.getXtentisObjectsList().get(object);
      if (objList == null) {
        objList=new ArrayList<Line>();
        syncPlan.getXtentisObjectsList().put(object,objList);
      }
      objectViewer.getViewer().setInput(objList);
      ((GridData)objectViewer.getViewer().getTable().getLayoutData()).heightHint=60;
      xtentisViewers.put(object,objectViewer);
    }
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9815110997377008
149192,"private static void generateUUIDForElement(Document schema,String dataCluster,String concept,Element conceptRoot) throws Exception {
  NodeList uuidLists=getUUIDNodes(schema,concept);
  for (int i=0; i < uuidLists.getLength(); i++) {
    Element element=(Element)uuidLists.item(i);
    String name=Util.getFirstTextNode(element,""String_Node_Str"");
    String type=Util.getFirstTextNode(element,""String_Node_Str"");
    String value=null;
    for (int j=0; j < conceptRoot.getChildNodes().getLength(); j++) {
      Node node=conceptRoot.getChildNodes().item(j);
      if (node.getNodeType() != Node.ELEMENT_NODE)       continue;
      if (node.getChildNodes().getLength() > 1) {
        generateUUIDForElement(schema,dataCluster,node.getNodeName(),(Element)node);
      }
 else {
        if (node.getNodeName().equalsIgnoreCase(name)) {
          if (node.getTextContent() == null || node.getTextContent().length() == 0) {
            if (EUUIDCustomType.AUTO_INCREMENT.getName().equalsIgnoreCase(type)) {
              value=String.valueOf(AutoIncrementGenerator.generateNum(LocalUser.getLocalUser().getUniverse().getName(),dataCluster,concept + ""String_Node_Str"" + name));
            }
            if (EUUIDCustomType.UUID.getName().equalsIgnoreCase(type)) {
              value=String.valueOf(UUID.randomUUID().toString());
            }
            node.setTextContent(value);
          }
          break;
        }
      }
    }
  }
}","private static void generateUUIDForElement(Document schema,String dataCluster,String concept,Element conceptRoot) throws Exception {
  NodeList uuidLists=getUUIDNodes(schema,concept);
  for (int i=0; i < uuidLists.getLength(); i++) {
    Element element=(Element)uuidLists.item(i);
    String name=Util.getFirstTextNode(element,""String_Node_Str"");
    String type=Util.getFirstTextNode(element,""String_Node_Str"");
    String value=null;
    for (int j=0; j < conceptRoot.getChildNodes().getLength(); j++) {
      Node node=conceptRoot.getChildNodes().item(j);
      if (node.getNodeType() != Node.ELEMENT_NODE)       continue;
      if (node.getChildNodes().getLength() > 1) {
        generateUUIDForElement(schema,dataCluster,node.getNodeName(),(Element)node);
      }
 else {
        if (node.getNodeName().equalsIgnoreCase(name)) {
          if (node.getTextContent() == null || node.getTextContent().length() == 0) {
            if (EUUIDCustomType.AUTO_INCREMENT.getName().equalsIgnoreCase(type)) {
              String id=String.valueOf(AutoIncrementGenerator.generateNum(LocalUser.getLocalUser().getUniverse().getName(),dataCluster,concept + ""String_Node_Str"" + name));
              ItemPOJOPK pk=new ItemPOJOPK(new DataClusterPOJOPK(dataCluster),concept,new String[]{id});
              ItemPOJO pojo=ItemPOJO.load(pk);
              while (pojo != null) {
                id=String.valueOf(AutoIncrementGenerator.generateNum(LocalUser.getLocalUser().getUniverse().getName(),dataCluster,concept + ""String_Node_Str"" + name));
                pk=new ItemPOJOPK(new DataClusterPOJOPK(dataCluster),concept,new String[]{id});
                pojo=ItemPOJO.load(pk);
                if (pojo == null) {
                  value=id;
                  break;
                }
              }
              if (pojo == null) {
                value=id;
              }
            }
            if (EUUIDCustomType.UUID.getName().equalsIgnoreCase(type)) {
              value=String.valueOf(UUID.randomUUID().toString());
            }
            node.setTextContent(value);
          }
          break;
        }
      }
    }
  }
}",0.8023516237402015
149193,"public void run(){
  IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
  List list=selection.toList();
  for (  Object obj : list) {
    if (obj instanceof XSDElementDeclaration) {
      if (Util.getParent(obj) == obj)       declList.add((XSDElementDeclaration)obj);
    }
  }
  AddBrowseItemsWizard wizard=new AddBrowseItemsWizard(page,list);
  WizardDialog dialog=new WizardDialog(page.getSite().getShell(),wizard);
  dialog.open();
  dialog.setBlockOnOpen(true);
}","public void run(){
  IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
  declList.clear();
  List list=selection.toList();
  for (  Object obj : list) {
    if (obj instanceof XSDElementDeclaration) {
      if (Util.getParent(obj) == obj)       declList.add((XSDElementDeclaration)obj);
    }
  }
  AddBrowseItemsWizard wizard=new AddBrowseItemsWizard(page,declList);
  WizardDialog dialog=new WizardDialog(page.getSite().getShell(),wizard);
  dialog.open();
}",0.9433962264150944
149194,"private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      view.setDescription(""String_Node_Str"" + decl.getName() + ""String_Node_Str"");
      wrap.setWsView(view);
      WSDeleteView delView=new WSDeleteView();
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      delView.setWsViewPK(viewPk);
      port.deleteView(delView);
      port.putView(wrap);
    }
  }
}","private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      view.setDescription(""String_Node_Str"" + decl.getName() + ""String_Node_Str"");
      wrap.setWsView(view);
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      WSDeleteView delView=new WSDeleteView();
      delView.setWsViewPK(viewPk);
      WSGetView getView=new WSGetView();
      getView.setWsViewPK(viewPk);
      try {
        port.getView(getView);
        port.deleteView(delView);
      }
 catch (      RemoteException ex) {
      }
      port.putView(wrap);
    }
  }
}",0.8855182376309136
149195,"public void selectionChanged(SelectionChangedEvent event){
  String name=(String)((IStructuredSelection)event.getSelection()).getFirstElement();
  refreshRoleView(name);
}","public void selectionChanged(SelectionChangedEvent event){
  XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
  refreshRoleView(BROWSE_ITEMS + decl.getName());
  UpdateComplexViewButton(true);
}",0.6976744186046512
149196,"public Object[] getElements(Object inputElement){
  ArrayList<String> values=new ArrayList<String>();
  for (  XSDElementDeclaration decl : declList) {
    String name=decl.getName();
    name=BROWSE_ITEMS + name;
    values.add(name);
  }
  return values.toArray(new String[values.size()]);
}","public Object[] getElements(Object inputElement){
  ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
  return values.toArray(new XSDElementDeclaration[values.size()]);
}",0.5149700598802395
149197,"public String getColumnText(Object element,int columnIndex){
  return element.toString();
}","public String getColumnText(Object element,int columnIndex){
  return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
}",0.7601809954751131
149198,"public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> values=new ArrayList<String>();
      for (      XSDElementDeclaration decl : declList) {
        String name=decl.getName();
        name=BROWSE_ITEMS + name;
        values.add(name);
      }
      return values.toArray(new String[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return element.toString();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return false;
    }
    public void modify(    Object element,    String property,    Object value){
    }
    public Object getValue(    Object element,    String property){
      return element.toString();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      String name=(String)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(name);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getCachedXObjectsNameSet(page.getXObject(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setMainPage(page);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(browseItemToRoles.get(declList.get(0)));
  setControl(composite);
}","public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return false;
    }
    public void modify(    Object element,    String property,    Object value){
    }
    public Object getValue(    Object element,    String property){
      return element.toString();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(BROWSE_ITEMS + decl.getName());
      UpdateComplexViewButton(true);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getCachedXObjectsNameSet(page.getXObject(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setMainPage(page);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(new ArrayList<Line>());
  UpdateComplexViewButton(false);
  setControl(composite);
}",0.5587459712862585
149199,"public void run(){
  IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
  List list=selection.toList();
  for (  Object obj : list) {
    if (obj instanceof XSDElementDeclaration) {
      if (Util.getParent(obj) == obj)       declList.add((XSDElementDeclaration)obj);
    }
  }
  AddBrowseItemsWizard wizard=new AddBrowseItemsWizard(page,list);
  WizardDialog dialog=new WizardDialog(page.getSite().getShell(),wizard);
  dialog.open();
  dialog.setBlockOnOpen(true);
}","public void run(){
  IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
  declList.clear();
  List list=selection.toList();
  for (  Object obj : list) {
    if (obj instanceof XSDElementDeclaration) {
      if (Util.getParent(obj) == obj)       declList.add((XSDElementDeclaration)obj);
    }
  }
  AddBrowseItemsWizard wizard=new AddBrowseItemsWizard(page,declList);
  WizardDialog dialog=new WizardDialog(page.getSite().getShell(),wizard);
  dialog.open();
}",0.9433962264150944
149200,"private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      view.setDescription(""String_Node_Str"" + decl.getName() + ""String_Node_Str"");
      wrap.setWsView(view);
      WSDeleteView delView=new WSDeleteView();
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      delView.setWsViewPK(viewPk);
      port.deleteView(delView);
      port.putView(wrap);
    }
  }
}","private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      view.setDescription(""String_Node_Str"" + decl.getName() + ""String_Node_Str"");
      wrap.setWsView(view);
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      WSDeleteView delView=new WSDeleteView();
      delView.setWsViewPK(viewPk);
      WSGetView getView=new WSGetView();
      getView.setWsViewPK(viewPk);
      try {
        port.getView(getView);
        port.deleteView(delView);
      }
 catch (      RemoteException ex) {
      }
      port.putView(wrap);
    }
  }
}",0.8855182376309136
149201,"public void selectionChanged(SelectionChangedEvent event){
  String name=(String)((IStructuredSelection)event.getSelection()).getFirstElement();
  refreshRoleView(name);
}","public void selectionChanged(SelectionChangedEvent event){
  XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
  refreshRoleView(BROWSE_ITEMS + decl.getName());
  UpdateComplexViewButton(true);
}",0.6976744186046512
149202,"public Object[] getElements(Object inputElement){
  ArrayList<String> values=new ArrayList<String>();
  for (  XSDElementDeclaration decl : declList) {
    String name=decl.getName();
    name=BROWSE_ITEMS + name;
    values.add(name);
  }
  return values.toArray(new String[values.size()]);
}","public Object[] getElements(Object inputElement){
  ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
  return values.toArray(new XSDElementDeclaration[values.size()]);
}",0.5149700598802395
149203,"public String getColumnText(Object element,int columnIndex){
  return element.toString();
}","public String getColumnText(Object element,int columnIndex){
  return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
}",0.7601809954751131
149204,"public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> values=new ArrayList<String>();
      for (      XSDElementDeclaration decl : declList) {
        String name=decl.getName();
        name=BROWSE_ITEMS + name;
        values.add(name);
      }
      return values.toArray(new String[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return element.toString();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return false;
    }
    public void modify(    Object element,    String property,    Object value){
    }
    public Object getValue(    Object element,    String property){
      return element.toString();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      String name=(String)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(name);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getCachedXObjectsNameSet(page.getXObject(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setMainPage(page);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(browseItemToRoles.get(declList.get(0)));
  setControl(composite);
}","public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return false;
    }
    public void modify(    Object element,    String property,    Object value){
    }
    public Object getValue(    Object element,    String property){
      return element.toString();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(BROWSE_ITEMS + decl.getName());
      UpdateComplexViewButton(true);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getCachedXObjectsNameSet(page.getXObject(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setMainPage(page);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(new ArrayList<Line>());
  UpdateComplexViewButton(false);
  setControl(composite);
}",0.5587459712862585
149205,"public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.setBtnShow(false);
  vid.create();
vid.getShell().setSize(new Point(500,220));
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}","public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.setBtnShow(false);
  vid.create();
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}",0.9979881115683584
149206,"protected Control createDialogArea(Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.WRAP);
    label.setText(message);
    label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setVisible(isBtnShow);
  openDLG.setToolTipText(""String_Node_Str"");
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,2,1));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setText(""String_Node_Str"");
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    text.setText(""String_Node_Str"");
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
        openDLG.setVisible(false);
      }
    }
);
    transformeButton.setSelection(true);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(Smart_view);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
        openDLG.setVisible(true);
      }
    }
);
  }
 else {
    if (value != null) {
      text.setText(value);
    }
  }
  applyDialogFont(composite);
  return composite;
}","protected Control createDialogArea(final Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.NONE);
    label.setText(message);
    label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setVisible(isBtnShow);
  openDLG.setToolTipText(""String_Node_Str"");
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,2,1));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setText(""String_Node_Str"");
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    text.setText(""String_Node_Str"");
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
        openDLG.setVisible(false);
        parent.layout(true);
      }
    }
);
    transformeButton.setSelection(true);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(Smart_view);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
        openDLG.setVisible(true);
      }
    }
);
  }
 else {
    if (value != null) {
      text.setText(value);
    }
  }
  applyDialogFont(composite);
  return composite;
}",0.9923907273049016
149207,"/** 
 * give the children of a node
 * @param id the id of the node in yui
 * @param nodeCount the internal count of nodes in yui tree
 * @param language
 * @return an array of TreeNode
 */
public TreeNode[] getChildren(int id,int nodeCount,String language,boolean foreignKey,int docIndex){
  return getChildrenWithMask(id,nodeCount,language,foreignKey,docIndex,false);
}","/** 
 * give the children of a node
 * @param id the id of the node in yui
 * @param nodeCount the internal count of nodes in yui tree
 * @param language
 * @return an array of TreeNode
 */
public TreeNode[] getChildren(int id,int nodeCount,String language,boolean foreignKey,int docIndex){
  return getChildrenWithKeyMask(id,nodeCount,language,foreignKey,docIndex,false);
}",0.995973154362416
149208,"private static String pushUpdateReport(String[] ids,String concept,String operationType) throws Exception {
  org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).trace(""String_Node_Str"" + concept + ""String_Node_Str""+ operationType);
  WebContext ctx=WebContextFactory.get();
  HashMap<String,UpdateReportItem> updatedPath=new HashMap<String,UpdateReportItem>();
  updatedPath=(HashMap<String,UpdateReportItem>)ctx.getSession().getAttribute(""String_Node_Str"");
  if (!""String_Node_Str"".equals(operationType) && updatedPath == null) {
    return ""String_Node_Str"";
  }
  String username=""String_Node_Str"";
  String revisionId=""String_Node_Str"";
  String dataModelPK=""String_Node_Str"";
  String dataClusterPK=""String_Node_Str"";
  try {
    Configuration config=Configuration.getInstance();
    dataModelPK=config.getModel() == null ? ""String_Node_Str"" : config.getModel();
    dataClusterPK=config.getCluster() == null ? ""String_Node_Str"" : config.getCluster();
    username=Util.getLoginUserName();
    String universename=Util.getLoginUniverse();
    if (universename != null && universename.length() > 0)     revisionId=Util.getRevisionIdFromUniverse(universename,concept);
  }
 catch (  Exception e1) {
    e1.printStackTrace();
    throw e1;
  }
  String key=""String_Node_Str"";
  if (ids != null) {
    for (int i=0; i < ids.length; i++) {
      key+=ids[i];
      if (i != ids.length - 1)       key+=""String_Node_Str"";
    }
  }
  String xml2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + username + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(operationType)+ ""String_Node_Str""+ ""String_Node_Str""+ revisionId+ ""String_Node_Str""+ ""String_Node_Str""+ dataClusterPK+ ""String_Node_Str""+ ""String_Node_Str""+ dataModelPK+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(concept)+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(key)+ ""String_Node_Str"";
  if (""String_Node_Str"".equals(operationType)) {
    Collection<UpdateReportItem> list=updatedPath.values();
    for (Iterator<UpdateReportItem> iter=list.iterator(); iter.hasNext(); ) {
      UpdateReportItem item=iter.next();
      xml2+=""String_Node_Str"" + ""String_Node_Str"" + StringEscapeUtils.escapeXml(item.getPath()) + ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getOldValue())+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getNewValue())+ ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
  xml2+=""String_Node_Str"";
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  try {
    WSItemPK itemPK=Util.getPort().putItem(new WSPutItem(new WSDataClusterPK(""String_Node_Str""),xml2,new WSDataModelPK(""String_Node_Str"")));
    org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).debug(""String_Node_Str"" + xml2);
    Util.getPort().routeItemV2(new WSRouteItemV2(itemPK));
    return ""String_Node_Str"";
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
catch (  XtentisWebappException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
}","private static String pushUpdateReport(String[] ids,String concept,String operationType) throws Exception {
  org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).trace(""String_Node_Str"" + concept + ""String_Node_Str""+ operationType);
  WebContext ctx=WebContextFactory.get();
  HashMap<String,UpdateReportItem> updatedPath=new HashMap<String,UpdateReportItem>();
  updatedPath=(HashMap<String,UpdateReportItem>)ctx.getSession().getAttribute(""String_Node_Str"");
  if (!""String_Node_Str"".equals(operationType) && updatedPath == null) {
    return ""String_Node_Str"";
  }
  String username=""String_Node_Str"";
  String revisionId=""String_Node_Str"";
  String dataModelPK=""String_Node_Str"";
  String dataClusterPK=""String_Node_Str"";
  try {
    Configuration config=Configuration.getInstance();
    dataModelPK=config.getModel() == null ? ""String_Node_Str"" : config.getModel();
    dataClusterPK=config.getCluster() == null ? ""String_Node_Str"" : config.getCluster();
    username=Util.getLoginUserName();
    String universename=Util.getLoginUniverse();
    if (universename != null && universename.length() > 0)     revisionId=Util.getRevisionIdFromUniverse(universename,concept);
  }
 catch (  Exception e1) {
    e1.printStackTrace();
    throw e1;
  }
  String key=""String_Node_Str"";
  if (ids != null) {
    for (int i=0; i < ids.length; i++) {
      key+=ids[i];
      if (i != ids.length - 1)       key+=""String_Node_Str"";
    }
  }
  String xml2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + username + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(operationType)+ ""String_Node_Str""+ ""String_Node_Str""+ revisionId+ ""String_Node_Str""+ ""String_Node_Str""+ dataClusterPK+ ""String_Node_Str""+ ""String_Node_Str""+ dataModelPK+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(concept)+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(key)+ ""String_Node_Str"";
  if (""String_Node_Str"".equals(operationType)) {
    Collection<UpdateReportItem> list=updatedPath.values();
    for (Iterator<UpdateReportItem> iter=list.iterator(); iter.hasNext(); ) {
      UpdateReportItem item=iter.next();
      xml2+=""String_Node_Str"" + ""String_Node_Str"" + StringEscapeUtils.escapeXml(item.getPath()) + ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getOldValue())+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getNewValue())+ ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
  xml2+=""String_Node_Str"";
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  try {
    WSItemPK itemPK=Util.getPort().putItem(new WSPutItem(new WSDataClusterPK(""String_Node_Str""),xml2,new WSDataModelPK(""String_Node_Str"")));
    org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).debug(""String_Node_Str"" + xml2);
    return ""String_Node_Str"";
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
catch (  XtentisWebappException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
}",0.9907595927956148
149209,"/** 
 * give the children of a node
 * @param id the id of the node in yui
 * @param nodeCount the internal count of nodes in yui tree
 * @param language
 * @return an array of TreeNode
 */
public TreeNode[] getChildren(int id,int nodeCount,String language,boolean foreignKey,int docIndex){
  return getChildrenWithMask(id,nodeCount,language,foreignKey,docIndex,false);
}","/** 
 * give the children of a node
 * @param id the id of the node in yui
 * @param nodeCount the internal count of nodes in yui tree
 * @param language
 * @return an array of TreeNode
 */
public TreeNode[] getChildren(int id,int nodeCount,String language,boolean foreignKey,int docIndex){
  return getChildrenWithKeyMask(id,nodeCount,language,foreignKey,docIndex,false);
}",0.995973154362416
149210,"private static String pushUpdateReport(String[] ids,String concept,String operationType) throws Exception {
  org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).trace(""String_Node_Str"" + concept + ""String_Node_Str""+ operationType);
  WebContext ctx=WebContextFactory.get();
  HashMap<String,UpdateReportItem> updatedPath=new HashMap<String,UpdateReportItem>();
  updatedPath=(HashMap<String,UpdateReportItem>)ctx.getSession().getAttribute(""String_Node_Str"");
  if (!""String_Node_Str"".equals(operationType) && updatedPath == null) {
    return ""String_Node_Str"";
  }
  String username=""String_Node_Str"";
  String revisionId=""String_Node_Str"";
  String dataModelPK=""String_Node_Str"";
  String dataClusterPK=""String_Node_Str"";
  try {
    Configuration config=Configuration.getInstance();
    dataModelPK=config.getModel() == null ? ""String_Node_Str"" : config.getModel();
    dataClusterPK=config.getCluster() == null ? ""String_Node_Str"" : config.getCluster();
    username=Util.getLoginUserName();
    String universename=Util.getLoginUniverse();
    if (universename != null && universename.length() > 0)     revisionId=Util.getRevisionIdFromUniverse(universename,concept);
  }
 catch (  Exception e1) {
    e1.printStackTrace();
    throw e1;
  }
  String key=""String_Node_Str"";
  if (ids != null) {
    for (int i=0; i < ids.length; i++) {
      key+=ids[i];
      if (i != ids.length - 1)       key+=""String_Node_Str"";
    }
  }
  String xml2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + username + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(operationType)+ ""String_Node_Str""+ ""String_Node_Str""+ revisionId+ ""String_Node_Str""+ ""String_Node_Str""+ dataClusterPK+ ""String_Node_Str""+ ""String_Node_Str""+ dataModelPK+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(concept)+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(key)+ ""String_Node_Str"";
  if (""String_Node_Str"".equals(operationType)) {
    Collection<UpdateReportItem> list=updatedPath.values();
    for (Iterator<UpdateReportItem> iter=list.iterator(); iter.hasNext(); ) {
      UpdateReportItem item=iter.next();
      xml2+=""String_Node_Str"" + ""String_Node_Str"" + StringEscapeUtils.escapeXml(item.getPath()) + ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getOldValue())+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getNewValue())+ ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
  xml2+=""String_Node_Str"";
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  try {
    WSItemPK itemPK=Util.getPort().putItem(new WSPutItem(new WSDataClusterPK(""String_Node_Str""),xml2,new WSDataModelPK(""String_Node_Str"")));
    org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).debug(""String_Node_Str"" + xml2);
    Util.getPort().routeItemV2(new WSRouteItemV2(itemPK));
    return ""String_Node_Str"";
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
catch (  XtentisWebappException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
}","private static String pushUpdateReport(String[] ids,String concept,String operationType) throws Exception {
  org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).trace(""String_Node_Str"" + concept + ""String_Node_Str""+ operationType);
  WebContext ctx=WebContextFactory.get();
  HashMap<String,UpdateReportItem> updatedPath=new HashMap<String,UpdateReportItem>();
  updatedPath=(HashMap<String,UpdateReportItem>)ctx.getSession().getAttribute(""String_Node_Str"");
  if (!""String_Node_Str"".equals(operationType) && updatedPath == null) {
    return ""String_Node_Str"";
  }
  String username=""String_Node_Str"";
  String revisionId=""String_Node_Str"";
  String dataModelPK=""String_Node_Str"";
  String dataClusterPK=""String_Node_Str"";
  try {
    Configuration config=Configuration.getInstance();
    dataModelPK=config.getModel() == null ? ""String_Node_Str"" : config.getModel();
    dataClusterPK=config.getCluster() == null ? ""String_Node_Str"" : config.getCluster();
    username=Util.getLoginUserName();
    String universename=Util.getLoginUniverse();
    if (universename != null && universename.length() > 0)     revisionId=Util.getRevisionIdFromUniverse(universename,concept);
  }
 catch (  Exception e1) {
    e1.printStackTrace();
    throw e1;
  }
  String key=""String_Node_Str"";
  if (ids != null) {
    for (int i=0; i < ids.length; i++) {
      key+=ids[i];
      if (i != ids.length - 1)       key+=""String_Node_Str"";
    }
  }
  String xml2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + username + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(operationType)+ ""String_Node_Str""+ ""String_Node_Str""+ revisionId+ ""String_Node_Str""+ ""String_Node_Str""+ dataClusterPK+ ""String_Node_Str""+ ""String_Node_Str""+ dataModelPK+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(concept)+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(key)+ ""String_Node_Str"";
  if (""String_Node_Str"".equals(operationType)) {
    Collection<UpdateReportItem> list=updatedPath.values();
    for (Iterator<UpdateReportItem> iter=list.iterator(); iter.hasNext(); ) {
      UpdateReportItem item=iter.next();
      xml2+=""String_Node_Str"" + ""String_Node_Str"" + StringEscapeUtils.escapeXml(item.getPath()) + ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getOldValue())+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getNewValue())+ ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
  xml2+=""String_Node_Str"";
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  try {
    WSItemPK itemPK=Util.getPort().putItem(new WSPutItem(new WSDataClusterPK(""String_Node_Str""),xml2,new WSDataModelPK(""String_Node_Str"")));
    org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).debug(""String_Node_Str"" + xml2);
    return ""String_Node_Str"";
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
catch (  XtentisWebappException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
}",0.9907595927956148
149211,"public static void updateReference(Object decl,Object[] objs,String newValue){
  if (!(decl instanceof XSDElementDeclaration)) {
    return;
  }
  for (  Object obj : objs) {
    if (obj instanceof XSDParticle) {
      XSDTerm term=((XSDParticle)obj).getTerm();
      if (term instanceof XSDElementDeclaration) {
        XSDElementDeclaration xsdElem=(XSDElementDeclaration)term;
        if (xsdElem == decl) {
          ((XSDParticle)obj).setTerm((XSDElementDeclaration)decl);
          ((XSDParticle)obj).updateElement();
        }
      }
      XSDElementDeclaration elem=(XSDElementDeclaration)((XSDParticle)obj).getContent();
      if (elem.isElementDeclarationReference()) {
        if (elem.getResolvedElementDeclaration() == decl) {
          elem.setResolvedElementDeclaration((XSDElementDeclaration)decl);
        }
      }
    }
  }
}","public static void updateReference(Object decl,Object[] objs,String newValue){
  if (!(decl instanceof XSDElementDeclaration)) {
    return;
  }
  for (  Object obj : objs) {
    if (obj instanceof XSDParticle) {
      XSDTerm term=((XSDParticle)obj).getTerm();
      if (term instanceof XSDElementDeclaration) {
        XSDElementDeclaration xsdElem=(XSDElementDeclaration)term;
        if (xsdElem == decl) {
          ((XSDParticle)obj).setTerm((XSDElementDeclaration)decl);
          ((XSDParticle)obj).updateElement();
        }
      }
      if (!(((XSDParticle)obj).getContent() instanceof XSDElementDeclaration))       continue;
      XSDElementDeclaration elem=(XSDElementDeclaration)((XSDParticle)obj).getContent();
      if (elem.isElementDeclarationReference()) {
        if (elem.getResolvedElementDeclaration() == decl) {
          elem.setResolvedElementDeclaration((XSDElementDeclaration)decl);
        }
      }
    }
  }
}",0.8235294117647058
149212,"public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.setBtnShow(false);
  vid.create();
vid.getShell().setSize(new Point(500,220));
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}","public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.setBtnShow(false);
  vid.create();
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}",0.9979881115683584
149213,"protected Control createDialogArea(Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.WRAP);
    label.setText(message);
    label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setVisible(isBtnShow);
  openDLG.setToolTipText(""String_Node_Str"");
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,2,1));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setText(""String_Node_Str"");
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    text.setText(""String_Node_Str"");
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
        openDLG.setVisible(false);
      }
    }
);
    transformeButton.setSelection(true);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(Smart_view);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
        openDLG.setVisible(true);
      }
    }
);
  }
 else {
    if (value != null) {
      text.setText(value);
    }
  }
  applyDialogFont(composite);
  return composite;
}","protected Control createDialogArea(final Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.NONE);
    label.setText(message);
    label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setVisible(isBtnShow);
  openDLG.setToolTipText(""String_Node_Str"");
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,2,1));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setText(""String_Node_Str"");
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    text.setText(""String_Node_Str"");
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
        openDLG.setVisible(false);
        parent.layout(true);
      }
    }
);
    transformeButton.setSelection(true);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(Smart_view);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
        openDLG.setVisible(true);
      }
    }
);
  }
 else {
    if (value != null) {
      text.setText(value);
    }
  }
  applyDialogFont(composite);
  return composite;
}",0.9923907273049016
149214,"public static void updateReference(Object decl,Object[] objs,String newValue){
  if (!(decl instanceof XSDElementDeclaration)) {
    return;
  }
  for (  Object obj : objs) {
    if (obj instanceof XSDParticle) {
      XSDTerm term=((XSDParticle)obj).getTerm();
      if (term instanceof XSDElementDeclaration) {
        XSDElementDeclaration xsdElem=(XSDElementDeclaration)term;
        if (xsdElem == decl) {
          ((XSDParticle)obj).setTerm((XSDElementDeclaration)decl);
          ((XSDParticle)obj).updateElement();
        }
      }
      XSDElementDeclaration elem=(XSDElementDeclaration)((XSDParticle)obj).getContent();
      if (elem.isElementDeclarationReference()) {
        if (elem.getResolvedElementDeclaration() == decl) {
          elem.setResolvedElementDeclaration((XSDElementDeclaration)decl);
        }
      }
    }
  }
}","public static void updateReference(Object decl,Object[] objs,String newValue){
  if (!(decl instanceof XSDElementDeclaration)) {
    return;
  }
  for (  Object obj : objs) {
    if (obj instanceof XSDParticle) {
      XSDTerm term=((XSDParticle)obj).getTerm();
      if (term instanceof XSDElementDeclaration) {
        XSDElementDeclaration xsdElem=(XSDElementDeclaration)term;
        if (xsdElem == decl) {
          ((XSDParticle)obj).setTerm((XSDElementDeclaration)decl);
          ((XSDParticle)obj).updateElement();
        }
      }
      if (!(((XSDParticle)obj).getContent() instanceof XSDElementDeclaration))       continue;
      XSDElementDeclaration elem=(XSDElementDeclaration)((XSDParticle)obj).getContent();
      if (elem.isElementDeclarationReference()) {
        if (elem.getResolvedElementDeclaration() == decl) {
          elem.setResolvedElementDeclaration((XSDElementDeclaration)decl);
        }
      }
    }
  }
}",0.8235294117647058
149215,"/** 
 * Check that a rule actually matches a document
 * @param itemPOJO
 * @param exp
 * @return true if it matches
 * @throws XtentisException
 */
private boolean ruleExpressionMatches(ItemPOJO itemPOJO,RoutingRuleExpressionPOJO exp) throws XtentisException {
  String content=null;
  int contentInt, expInt;
  try {
    content=Util.getFirstTextNode(itemPOJO.getProjection(),exp.getXpath());
  }
 catch (  TransformerException e) {
    String err=""String_Node_Str"" + exp.getXpath() + ""String_Node_Str""+ itemPOJO.getItemPOJOPK().getUniqueID()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new XtentisException(err);
  }
switch (exp.getOperator()) {
case RoutingRuleExpressionPOJO.CONTAINS:
    if (content != null)     return (content.indexOf(exp.getValue()) > -1);
  return false;
case RoutingRuleExpressionPOJO.EQUALS:
if (content != null) return (content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt > contentInt);
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt >= contentInt);
return false;
case RoutingRuleExpressionPOJO.IS_NOT_NULL:
return (content != null);
case RoutingRuleExpressionPOJO.IS_NULL:
return (content == null);
case RoutingRuleExpressionPOJO.LOWER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt < contentInt);
return false;
case RoutingRuleExpressionPOJO.LOWER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt <= contentInt);
return false;
case RoutingRuleExpressionPOJO.MATCHES:
if (exp.getValue() == null) return false;
if (content != null) return (content.matches(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.NOT_EQUALS:
if (content != null) return (!content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.STARTSWITH:
if (exp.getValue() == null) return false;
if (content != null) return (content.startsWith(exp.getValue()));
return false;
default :
return false;
}
}","/** 
 * Check that a rule actually matches a document
 * @param itemPOJO
 * @param exp
 * @return true if it matches
 * @throws XtentisException
 */
private boolean ruleExpressionMatches(ItemPOJO itemPOJO,RoutingRuleExpressionPOJO exp) throws XtentisException {
  String content=null;
  int contentInt, expInt;
  String expXpath=exp.getXpath();
  if (!expXpath.startsWith(""String_Node_Str""))   expXpath=""String_Node_Str"" + expXpath;
  try {
    content=Util.getFirstTextNode(itemPOJO.getProjection(),expXpath);
  }
 catch (  TransformerException e) {
    String err=""String_Node_Str"" + exp.getXpath() + ""String_Node_Str""+ itemPOJO.getItemPOJOPK().getUniqueID()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new XtentisException(err);
  }
switch (exp.getOperator()) {
case RoutingRuleExpressionPOJO.CONTAINS:
    if (content != null)     return (content.indexOf(exp.getValue()) > -1);
  return false;
case RoutingRuleExpressionPOJO.EQUALS:
if (content != null) return (content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt > contentInt);
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt >= contentInt);
return false;
case RoutingRuleExpressionPOJO.IS_NOT_NULL:
return (content != null);
case RoutingRuleExpressionPOJO.IS_NULL:
return (content == null);
case RoutingRuleExpressionPOJO.LOWER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt < contentInt);
return false;
case RoutingRuleExpressionPOJO.LOWER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt <= contentInt);
return false;
case RoutingRuleExpressionPOJO.MATCHES:
if (exp.getValue() == null) return false;
if (content != null) return (content.matches(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.NOT_EQUALS:
if (content != null) return (!content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.STARTSWITH:
if (exp.getValue() == null) return false;
if (content != null) return (content.startsWith(exp.getValue()));
return false;
default :
return false;
}
}",0.9770609318996416
149216,"@Override protected Control createDialogArea(Composite parent){
  Group comp=new Group(parent,SWT.NONE);
  comp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  ((GridLayout)parent.getLayout()).marginTop=5;
  ((GridLayout)parent.getLayout()).marginLeft=5;
  ((GridLayout)parent.getLayout()).marginRight=5;
  ((GridLayout)parent.getLayout()).marginBottom=5;
  parent.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setLayout(new GridLayout(1,false));
  comp.setText(""String_Node_Str"" + transformer.getName() + ""String_Node_Str"");
  Set<String> inputVariables=new HashSet<String>();
  for (  WSTransformerProcessStep step : transformer.getProcessSteps()) {
    for (    WSTransformerVariablesMapping mapping : step.getInputMappings()) {
      inputVariables.add(mapping.getPipelineVariable() == null ? TransformerMainPage.DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  ComplexTableViewerColumn[] columns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,inputVariables.toArray(new String[inputVariables.size()]),0),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{""String_Node_Str"",""String_Node_Str""},0),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,null,10)};
  objectViewer=new ComplexTableViewer(Arrays.asList(columns),toolkit,comp);
  objectViewer.create();
  Table table=objectViewer.getViewer().getTable();
  table.getColumns()[2].setWidth(500);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  if (page.getCacheList() != null) {
    objectViewer.getViewer().setInput(page.getCacheList());
  }
 else {
    List<Line> list=new ArrayList<Line>();
    objectViewer.getViewer().setInput(list);
  }
  return comp;
}","@Override protected Control createDialogArea(Composite parent){
  Group comp=new Group(parent,SWT.NONE);
  comp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  ((GridLayout)parent.getLayout()).marginTop=5;
  ((GridLayout)parent.getLayout()).marginLeft=5;
  ((GridLayout)parent.getLayout()).marginRight=5;
  ((GridLayout)parent.getLayout()).marginBottom=5;
  parent.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setLayout(new GridLayout(1,false));
  comp.setText(""String_Node_Str"" + transformer.getName() + ""String_Node_Str"");
  Set<String> inputVariables=new HashSet<String>();
  for (  WSTransformerProcessStep step : transformer.getProcessSteps()) {
    for (    WSTransformerVariablesMapping mapping : step.getInputMappings()) {
      inputVariables.add(mapping.getPipelineVariable() == null ? TransformerMainPage.DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  ComplexTableViewerColumn[] columns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,inputVariables.toArray(new String[inputVariables.size()]),0),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},0),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,null,10)};
  objectViewer=new ComplexTableViewer(Arrays.asList(columns),toolkit,comp);
  objectViewer.create();
  Table table=objectViewer.getViewer().getTable();
  table.getColumns()[2].setWidth(500);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  if (page.getCacheList() != null) {
    objectViewer.getViewer().setInput(page.getCacheList());
  }
 else {
    List<Line> list=new ArrayList<Line>();
    objectViewer.getViewer().setInput(list);
  }
  return comp;
}",0.9955022488755624
149217,"/** 
 * Check that a rule actually matches a document
 * @param itemPOJO
 * @param exp
 * @return true if it matches
 * @throws XtentisException
 */
private boolean ruleExpressionMatches(ItemPOJO itemPOJO,RoutingRuleExpressionPOJO exp) throws XtentisException {
  String content=null;
  int contentInt, expInt;
  try {
    content=Util.getFirstTextNode(itemPOJO.getProjection(),exp.getXpath());
  }
 catch (  TransformerException e) {
    String err=""String_Node_Str"" + exp.getXpath() + ""String_Node_Str""+ itemPOJO.getItemPOJOPK().getUniqueID()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new XtentisException(err);
  }
switch (exp.getOperator()) {
case RoutingRuleExpressionPOJO.CONTAINS:
    if (content != null)     return (content.indexOf(exp.getValue()) > -1);
  return false;
case RoutingRuleExpressionPOJO.EQUALS:
if (content != null) return (content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt > contentInt);
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt >= contentInt);
return false;
case RoutingRuleExpressionPOJO.IS_NOT_NULL:
return (content != null);
case RoutingRuleExpressionPOJO.IS_NULL:
return (content == null);
case RoutingRuleExpressionPOJO.LOWER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt < contentInt);
return false;
case RoutingRuleExpressionPOJO.LOWER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt <= contentInt);
return false;
case RoutingRuleExpressionPOJO.MATCHES:
if (exp.getValue() == null) return false;
if (content != null) return (content.matches(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.NOT_EQUALS:
if (content != null) return (!content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.STARTSWITH:
if (exp.getValue() == null) return false;
if (content != null) return (content.startsWith(exp.getValue()));
return false;
default :
return false;
}
}","/** 
 * Check that a rule actually matches a document
 * @param itemPOJO
 * @param exp
 * @return true if it matches
 * @throws XtentisException
 */
private boolean ruleExpressionMatches(ItemPOJO itemPOJO,RoutingRuleExpressionPOJO exp) throws XtentisException {
  String content=null;
  int contentInt, expInt;
  String expXpath=exp.getXpath();
  if (!expXpath.startsWith(""String_Node_Str""))   expXpath=""String_Node_Str"" + expXpath;
  try {
    content=Util.getFirstTextNode(itemPOJO.getProjection(),expXpath);
  }
 catch (  TransformerException e) {
    String err=""String_Node_Str"" + exp.getXpath() + ""String_Node_Str""+ itemPOJO.getItemPOJOPK().getUniqueID()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new XtentisException(err);
  }
switch (exp.getOperator()) {
case RoutingRuleExpressionPOJO.CONTAINS:
    if (content != null)     return (content.indexOf(exp.getValue()) > -1);
  return false;
case RoutingRuleExpressionPOJO.EQUALS:
if (content != null) return (content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt > contentInt);
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt >= contentInt);
return false;
case RoutingRuleExpressionPOJO.IS_NOT_NULL:
return (content != null);
case RoutingRuleExpressionPOJO.IS_NULL:
return (content == null);
case RoutingRuleExpressionPOJO.LOWER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt < contentInt);
return false;
case RoutingRuleExpressionPOJO.LOWER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt <= contentInt);
return false;
case RoutingRuleExpressionPOJO.MATCHES:
if (exp.getValue() == null) return false;
if (content != null) return (content.matches(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.NOT_EQUALS:
if (content != null) return (!content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.STARTSWITH:
if (exp.getValue() == null) return false;
if (content != null) return (content.startsWith(exp.getValue()));
return false;
default :
return false;
}
}",0.9770609318996416
149218,"@Override protected Control createDialogArea(Composite parent){
  Group comp=new Group(parent,SWT.NONE);
  comp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  ((GridLayout)parent.getLayout()).marginTop=5;
  ((GridLayout)parent.getLayout()).marginLeft=5;
  ((GridLayout)parent.getLayout()).marginRight=5;
  ((GridLayout)parent.getLayout()).marginBottom=5;
  parent.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setLayout(new GridLayout(1,false));
  comp.setText(""String_Node_Str"" + transformer.getName() + ""String_Node_Str"");
  Set<String> inputVariables=new HashSet<String>();
  for (  WSTransformerProcessStep step : transformer.getProcessSteps()) {
    for (    WSTransformerVariablesMapping mapping : step.getInputMappings()) {
      inputVariables.add(mapping.getPipelineVariable() == null ? TransformerMainPage.DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  ComplexTableViewerColumn[] columns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,inputVariables.toArray(new String[inputVariables.size()]),0),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{""String_Node_Str"",""String_Node_Str""},0),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,null,10)};
  objectViewer=new ComplexTableViewer(Arrays.asList(columns),toolkit,comp);
  objectViewer.create();
  Table table=objectViewer.getViewer().getTable();
  table.getColumns()[2].setWidth(500);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  if (page.getCacheList() != null) {
    objectViewer.getViewer().setInput(page.getCacheList());
  }
 else {
    List<Line> list=new ArrayList<Line>();
    objectViewer.getViewer().setInput(list);
  }
  return comp;
}","@Override protected Control createDialogArea(Composite parent){
  Group comp=new Group(parent,SWT.NONE);
  comp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  ((GridLayout)parent.getLayout()).marginTop=5;
  ((GridLayout)parent.getLayout()).marginLeft=5;
  ((GridLayout)parent.getLayout()).marginRight=5;
  ((GridLayout)parent.getLayout()).marginBottom=5;
  parent.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setLayout(new GridLayout(1,false));
  comp.setText(""String_Node_Str"" + transformer.getName() + ""String_Node_Str"");
  Set<String> inputVariables=new HashSet<String>();
  for (  WSTransformerProcessStep step : transformer.getProcessSteps()) {
    for (    WSTransformerVariablesMapping mapping : step.getInputMappings()) {
      inputVariables.add(mapping.getPipelineVariable() == null ? TransformerMainPage.DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  ComplexTableViewerColumn[] columns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,inputVariables.toArray(new String[inputVariables.size()]),0),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},0),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,null,10)};
  objectViewer=new ComplexTableViewer(Arrays.asList(columns),toolkit,comp);
  objectViewer.create();
  Table table=objectViewer.getViewer().getTable();
  table.getColumns()[2].setWidth(500);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  if (page.getCacheList() != null) {
    objectViewer.getViewer().setInput(page.getCacheList());
  }
 else {
    List<Line> list=new ArrayList<Line>();
    objectViewer.getViewer().setInput(list);
  }
  return comp;
}",0.9955022488755624
149219,"private boolean isInclude(XSDAnnotation annotation){
  boolean include=false;
  if (annotation != null) {
    XSDAnnotationsStructure annotion=new XSDAnnotationsStructure(annotation);
    if ((!annotion.getWriteAccesses().values().contains(filter.getRole()) && filter.isReadOnly())) {
      return true;
    }
    if ((annotion.getWriteAccesses().values().contains(filter.getRole()) && filter.isWriteAccess())) {
      return true;
    }
    if ((annotion.getHiddenAccesses().values().contains(filter.getRole()) && filter.isHiddenAccess())) {
      return true;
    }
  }
  return include;
}","private boolean isInclude(XSDAnnotation annotation){
  boolean include=false;
  if (annotation != null) {
    XSDAnnotationsStructure annotion=new XSDAnnotationsStructure(annotation);
    if ((annotion.getWriteAccesses().values().contains(filter.getRole()) && filter.isWriteAccess())) {
      return true;
    }
    if ((annotion.getHiddenAccesses().values().contains(filter.getRole()) && filter.isHiddenAccess())) {
      return true;
    }
  }
 else {
    if ((filter.isReadOnly())) {
      return true;
    }
  }
  return include;
}",0.8472468916518651
149220,"public ListRange getUpdateReportList(int start,int limit,String sort,String dir,String regex) throws Exception {
  ListRange listRange=new ListRange();
  WSDataClusterPK wsDataClusterPK=new WSDataClusterPK(XSystemObjects.DC_UPDATE_PREPORT.getName());
  String conceptName=""String_Node_Str"";
  ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
  if (regex != null && regex.length() > 0) {
    JSONObject criteria=new JSONObject(regex);
    if (!criteria.isNull(""String_Node_Str"")) {
      String concept=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,concept.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String key=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,key.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String source=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,source.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String operationType=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,operationType.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String startDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(startDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.GREATER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String endDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(endDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.LOWER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
  }
  WSWhereItem wi=null;
  if (conditions.size() == 0)   wi=null;
 else {
    WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
    wi=new WSWhereItem(null,and,null);
  }
  String[] results=Util.getPort().getItems(new WSGetItems(wsDataClusterPK,conceptName,wi,-1,0,Integer.MAX_VALUE)).getStrings();
  start=start < results.length ? start : results.length - 1;
  int end=results.length < (start + limit) ? results.length - 1 : (start + limit - 1);
  String[] subResults=end + 1 - start < limit ? new String[end + 1 - start] : new String[limit];
  for (int i=start, j=0; i < end + 1; i++, j++) {
    subResults[j]=results[i];
  }
  DataChangeLog[] data=new DataChangeLog[subResults.length];
  for (int i=0; i < data.length; i++) {
    DataChangeLog item=new DataChangeLog();
    String result=subResults[i];
    if (result != null) {
      Document doc=Util.parse(result);
      String userName=Util.getFirstTextNode(doc,""String_Node_Str"");
      String source=Util.getFirstTextNode(doc,""String_Node_Str"");
      String timeInMillis=Util.getFirstTextNode(doc,""String_Node_Str"");
      String operationType=Util.getFirstTextNode(doc,""String_Node_Str"");
      String revisionID=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataCluster=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataModel=Util.getFirstTextNode(doc,""String_Node_Str"");
      String concept=Util.getFirstTextNode(doc,""String_Node_Str"");
      String key=Util.getFirstTextNode(doc,""String_Node_Str"");
      item.setUserName(userName);
      item.setSource(source);
      item.setTimeInMillis(timeInMillis);
      item.setOperationType(operationType);
      item.setRevisionID(revisionID);
      item.setDataCluster(dataCluster);
      item.setDataModel(dataModel);
      item.setConcept(concept);
      item.setKey(key);
      item.setIds(Util.joinStrings(new String[]{source,timeInMillis},""String_Node_Str""));
    }
    data[i]=item;
  }
  if (data.length <= 0) {
    listRange.setData(new DataChangeLog[0]);
    listRange.setTotalSize(0);
    return listRange;
  }
  listRange.setData(data);
  listRange.setTotalSize(results.length);
  return listRange;
}","public ListRange getUpdateReportList(int start,int limit,String sort,String dir,String regex) throws Exception {
  ListRange listRange=new ListRange();
  WSDataClusterPK wsDataClusterPK=new WSDataClusterPK(XSystemObjects.DC_UPDATE_PREPORT.getName());
  String conceptName=""String_Node_Str"";
  ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
  if (regex != null && regex.length() > 0) {
    JSONObject criteria=new JSONObject(regex);
    if (!criteria.isNull(""String_Node_Str"")) {
      String concept=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,concept.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String key=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,key.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String source=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,source.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String operationType=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,operationType.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String startDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(startDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.GREATER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String endDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(endDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.LOWER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
  }
  WSWhereItem wi=null;
  if (conditions.size() == 0)   wi=null;
 else {
    WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
    wi=new WSWhereItem(null,and,null);
  }
  String[] results=Util.getPort().getItems(new WSGetItems(wsDataClusterPK,conceptName,wi,-1,0,Integer.MAX_VALUE)).getStrings();
  start=start < results.length ? start : results.length - 1;
  if (start < 0)   start=0;
  int end=results.length < (start + limit) ? results.length - 1 : (start + limit - 1);
  String[] subResults=end + 1 - start < limit ? new String[end + 1 - start] : new String[limit];
  for (int i=start, j=0; i < end + 1; i++, j++) {
    subResults[j]=results[i];
  }
  DataChangeLog[] data=new DataChangeLog[subResults.length];
  for (int i=0; i < data.length; i++) {
    DataChangeLog item=new DataChangeLog();
    String result=subResults[i];
    if (result != null) {
      Document doc=Util.parse(result);
      String userName=Util.getFirstTextNode(doc,""String_Node_Str"");
      String source=Util.getFirstTextNode(doc,""String_Node_Str"");
      String timeInMillis=Util.getFirstTextNode(doc,""String_Node_Str"");
      String operationType=Util.getFirstTextNode(doc,""String_Node_Str"");
      String revisionID=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataCluster=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataModel=Util.getFirstTextNode(doc,""String_Node_Str"");
      String concept=Util.getFirstTextNode(doc,""String_Node_Str"");
      String key=Util.getFirstTextNode(doc,""String_Node_Str"");
      item.setUserName(userName);
      item.setSource(source);
      item.setTimeInMillis(timeInMillis);
      item.setOperationType(operationType);
      item.setRevisionID(revisionID);
      item.setDataCluster(dataCluster);
      item.setDataModel(dataModel);
      item.setConcept(concept);
      item.setKey(key);
      item.setIds(Util.joinStrings(new String[]{source,timeInMillis},""String_Node_Str""));
    }
    data[i]=item;
  }
  if (data.length <= 0) {
    listRange.setData(new DataChangeLog[0]);
    listRange.setTotalSize(0);
    return listRange;
  }
  listRange.setData(data);
  listRange.setTotalSize(results.length);
  return listRange;
}",0.997211155378486
149221,"private boolean isInclude(XSDAnnotation annotation){
  boolean include=false;
  if (annotation != null) {
    XSDAnnotationsStructure annotion=new XSDAnnotationsStructure(annotation);
    if ((!annotion.getWriteAccesses().values().contains(filter.getRole()) && filter.isReadOnly())) {
      return true;
    }
    if ((annotion.getWriteAccesses().values().contains(filter.getRole()) && filter.isWriteAccess())) {
      return true;
    }
    if ((annotion.getHiddenAccesses().values().contains(filter.getRole()) && filter.isHiddenAccess())) {
      return true;
    }
  }
  return include;
}","private boolean isInclude(XSDAnnotation annotation){
  boolean include=false;
  if (annotation != null) {
    XSDAnnotationsStructure annotion=new XSDAnnotationsStructure(annotation);
    if ((annotion.getWriteAccesses().values().contains(filter.getRole()) && filter.isWriteAccess())) {
      return true;
    }
    if ((annotion.getHiddenAccesses().values().contains(filter.getRole()) && filter.isHiddenAccess())) {
      return true;
    }
  }
 else {
    if ((filter.isReadOnly())) {
      return true;
    }
  }
  return include;
}",0.8472468916518651
149222,"public ListRange getUpdateReportList(int start,int limit,String sort,String dir,String regex) throws Exception {
  ListRange listRange=new ListRange();
  WSDataClusterPK wsDataClusterPK=new WSDataClusterPK(XSystemObjects.DC_UPDATE_PREPORT.getName());
  String conceptName=""String_Node_Str"";
  ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
  if (regex != null && regex.length() > 0) {
    JSONObject criteria=new JSONObject(regex);
    if (!criteria.isNull(""String_Node_Str"")) {
      String concept=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,concept.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String key=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,key.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String source=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,source.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String operationType=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,operationType.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String startDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(startDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.GREATER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String endDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(endDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.LOWER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
  }
  WSWhereItem wi=null;
  if (conditions.size() == 0)   wi=null;
 else {
    WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
    wi=new WSWhereItem(null,and,null);
  }
  String[] results=Util.getPort().getItems(new WSGetItems(wsDataClusterPK,conceptName,wi,-1,0,Integer.MAX_VALUE)).getStrings();
  start=start < results.length ? start : results.length - 1;
  int end=results.length < (start + limit) ? results.length - 1 : (start + limit - 1);
  String[] subResults=end + 1 - start < limit ? new String[end + 1 - start] : new String[limit];
  for (int i=start, j=0; i < end + 1; i++, j++) {
    subResults[j]=results[i];
  }
  DataChangeLog[] data=new DataChangeLog[subResults.length];
  for (int i=0; i < data.length; i++) {
    DataChangeLog item=new DataChangeLog();
    String result=subResults[i];
    if (result != null) {
      Document doc=Util.parse(result);
      String userName=Util.getFirstTextNode(doc,""String_Node_Str"");
      String source=Util.getFirstTextNode(doc,""String_Node_Str"");
      String timeInMillis=Util.getFirstTextNode(doc,""String_Node_Str"");
      String operationType=Util.getFirstTextNode(doc,""String_Node_Str"");
      String revisionID=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataCluster=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataModel=Util.getFirstTextNode(doc,""String_Node_Str"");
      String concept=Util.getFirstTextNode(doc,""String_Node_Str"");
      String key=Util.getFirstTextNode(doc,""String_Node_Str"");
      item.setUserName(userName);
      item.setSource(source);
      item.setTimeInMillis(timeInMillis);
      item.setOperationType(operationType);
      item.setRevisionID(revisionID);
      item.setDataCluster(dataCluster);
      item.setDataModel(dataModel);
      item.setConcept(concept);
      item.setKey(key);
      item.setIds(Util.joinStrings(new String[]{source,timeInMillis},""String_Node_Str""));
    }
    data[i]=item;
  }
  if (data.length <= 0) {
    listRange.setData(new DataChangeLog[0]);
    listRange.setTotalSize(0);
    return listRange;
  }
  listRange.setData(data);
  listRange.setTotalSize(results.length);
  return listRange;
}","public ListRange getUpdateReportList(int start,int limit,String sort,String dir,String regex) throws Exception {
  ListRange listRange=new ListRange();
  WSDataClusterPK wsDataClusterPK=new WSDataClusterPK(XSystemObjects.DC_UPDATE_PREPORT.getName());
  String conceptName=""String_Node_Str"";
  ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
  if (regex != null && regex.length() > 0) {
    JSONObject criteria=new JSONObject(regex);
    if (!criteria.isNull(""String_Node_Str"")) {
      String concept=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,concept.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String key=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,key.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String source=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,source.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String operationType=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,operationType.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String startDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(startDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.GREATER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String endDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(endDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.LOWER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
  }
  WSWhereItem wi=null;
  if (conditions.size() == 0)   wi=null;
 else {
    WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
    wi=new WSWhereItem(null,and,null);
  }
  String[] results=Util.getPort().getItems(new WSGetItems(wsDataClusterPK,conceptName,wi,-1,0,Integer.MAX_VALUE)).getStrings();
  start=start < results.length ? start : results.length - 1;
  if (start < 0)   start=0;
  int end=results.length < (start + limit) ? results.length - 1 : (start + limit - 1);
  String[] subResults=end + 1 - start < limit ? new String[end + 1 - start] : new String[limit];
  for (int i=start, j=0; i < end + 1; i++, j++) {
    subResults[j]=results[i];
  }
  DataChangeLog[] data=new DataChangeLog[subResults.length];
  for (int i=0; i < data.length; i++) {
    DataChangeLog item=new DataChangeLog();
    String result=subResults[i];
    if (result != null) {
      Document doc=Util.parse(result);
      String userName=Util.getFirstTextNode(doc,""String_Node_Str"");
      String source=Util.getFirstTextNode(doc,""String_Node_Str"");
      String timeInMillis=Util.getFirstTextNode(doc,""String_Node_Str"");
      String operationType=Util.getFirstTextNode(doc,""String_Node_Str"");
      String revisionID=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataCluster=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataModel=Util.getFirstTextNode(doc,""String_Node_Str"");
      String concept=Util.getFirstTextNode(doc,""String_Node_Str"");
      String key=Util.getFirstTextNode(doc,""String_Node_Str"");
      item.setUserName(userName);
      item.setSource(source);
      item.setTimeInMillis(timeInMillis);
      item.setOperationType(operationType);
      item.setRevisionID(revisionID);
      item.setDataCluster(dataCluster);
      item.setDataModel(dataModel);
      item.setConcept(concept);
      item.setKey(key);
      item.setIds(Util.joinStrings(new String[]{source,timeInMillis},""String_Node_Str""));
    }
    data[i]=item;
  }
  if (data.length <= 0) {
    listRange.setData(new DataChangeLog[0]);
    listRange.setTotalSize(0);
    return listRange;
  }
  listRange.setData(data);
  listRange.setTotalSize(results.length);
  return listRange;
}",0.997211155378486
149223,"public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.create();
  vid.getShell().setSize(new Point(500,250));
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}","public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.create();
  vid.getShell().setSize(new Point(500,220));
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}",0.9999085421620632
149224,"public void widgetSelected(SelectionEvent e){
  dlg=new XpathSelectDialog(composite.getShell(),treeParent,""String_Node_Str"",site,false,null);
  dlg.setBlockOnOpen(true);
  dlg.open();
  if (dlg.getReturnCode() == Window.OK) {
    String defalutText;
    if (smartViewSelected || !isTransfor)     defalutText=value;
 else     defalutText=""String_Node_Str"";
    if (dlg.getXpath() != null && dlg.getXpath().length() > 0) {
      int point=dlg.getXpath().indexOf(""String_Node_Str"");
      if (point >= 0)       text.setText(defalutText + dlg.getXpath().substring(0,point));
 else       text.setText(defalutText + dlg.getXpath());
    }
    dlg.close();
  }
}","public void widgetSelected(SelectionEvent e){
  dlg=new XpathSelectDialog(composite.getShell(),treeParent,""String_Node_Str"",site,false,null);
  dlg.setBlockOnOpen(true);
  dlg.open();
  if (dlg.getReturnCode() == Window.OK) {
    if (dlg.getXpath() != null && dlg.getXpath().length() > 0) {
      int point=dlg.getXpath().indexOf(""String_Node_Str"");
      if (point >= 0)       text.setText(Smart_view + dlg.getXpath().substring(0,point));
 else       text.setText(Smart_view + dlg.getXpath());
    }
    dlg.close();
  }
}",0.8539898132427843
149225,"protected Control createDialogArea(Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.WRAP);
    label.setText(message);
    GridData data=new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL | GridData.HORIZONTAL_ALIGN_FILL| GridData.VERTICAL_ALIGN_CENTER);
    data.widthHint=convertHorizontalDLUsToPixels(IDialogConstants.MINIMUM_MESSAGE_AREA_WIDTH);
    label.setLayoutData(data);
    label.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setSize(200,50);
    radioGroup.setText(""String_Node_Str"");
    ((GridLayout)radioGroup.getLayout()).horizontalSpacing=10;
    ((GridLayout)radioGroup.getLayout()).verticalSpacing=5;
    ((GridLayout)radioGroup.getLayout()).marginLeft=10;
    ((GridLayout)radioGroup.getLayout()).marginRight=10;
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
      }
    }
);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.setSelection(true);
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(value);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
      }
    }
);
  }
  applyDialogFont(composite);
  return composite;
}","protected Control createDialogArea(Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.WRAP);
    label.setText(message);
    label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  text.setText(""String_Node_Str"");
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setVisible(false);
  openDLG.setToolTipText(""String_Node_Str"");
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,2,1));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setText(""String_Node_Str"");
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
        openDLG.setVisible(false);
      }
    }
);
    transformeButton.setSelection(true);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(Smart_view);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
        openDLG.setVisible(true);
      }
    }
);
  }
  applyDialogFont(composite);
  return composite;
}",0.7679500520291364
149226,"public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.create();
  vid.getShell().setSize(new Point(500,250));
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}","public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.create();
  vid.getShell().setSize(new Point(500,220));
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}",0.9999085421620632
149227,"public void widgetSelected(SelectionEvent e){
  dlg=new XpathSelectDialog(composite.getShell(),treeParent,""String_Node_Str"",site,false,null);
  dlg.setBlockOnOpen(true);
  dlg.open();
  if (dlg.getReturnCode() == Window.OK) {
    String defalutText;
    if (smartViewSelected || !isTransfor)     defalutText=value;
 else     defalutText=""String_Node_Str"";
    if (dlg.getXpath() != null && dlg.getXpath().length() > 0) {
      int point=dlg.getXpath().indexOf(""String_Node_Str"");
      if (point >= 0)       text.setText(defalutText + dlg.getXpath().substring(0,point));
 else       text.setText(defalutText + dlg.getXpath());
    }
    dlg.close();
  }
}","public void widgetSelected(SelectionEvent e){
  dlg=new XpathSelectDialog(composite.getShell(),treeParent,""String_Node_Str"",site,false,null);
  dlg.setBlockOnOpen(true);
  dlg.open();
  if (dlg.getReturnCode() == Window.OK) {
    if (dlg.getXpath() != null && dlg.getXpath().length() > 0) {
      int point=dlg.getXpath().indexOf(""String_Node_Str"");
      if (point >= 0)       text.setText(Smart_view + dlg.getXpath().substring(0,point));
 else       text.setText(Smart_view + dlg.getXpath());
    }
    dlg.close();
  }
}",0.8539898132427843
149228,"protected Control createDialogArea(Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.WRAP);
    label.setText(message);
    GridData data=new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL | GridData.HORIZONTAL_ALIGN_FILL| GridData.VERTICAL_ALIGN_CENTER);
    data.widthHint=convertHorizontalDLUsToPixels(IDialogConstants.MINIMUM_MESSAGE_AREA_WIDTH);
    label.setLayoutData(data);
    label.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setSize(200,50);
    radioGroup.setText(""String_Node_Str"");
    ((GridLayout)radioGroup.getLayout()).horizontalSpacing=10;
    ((GridLayout)radioGroup.getLayout()).verticalSpacing=5;
    ((GridLayout)radioGroup.getLayout()).marginLeft=10;
    ((GridLayout)radioGroup.getLayout()).marginRight=10;
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
      }
    }
);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.setSelection(true);
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(value);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
      }
    }
);
  }
  applyDialogFont(composite);
  return composite;
}","protected Control createDialogArea(Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.WRAP);
    label.setText(message);
    label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  text.setText(""String_Node_Str"");
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setVisible(false);
  openDLG.setToolTipText(""String_Node_Str"");
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,2,1));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setText(""String_Node_Str"");
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
        openDLG.setVisible(false);
      }
    }
);
    transformeButton.setSelection(true);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(Smart_view);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
        openDLG.setVisible(true);
      }
    }
);
  }
  applyDialogFont(composite);
  return composite;
}",0.7679500520291364
149229,"/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    Element conceptRoot=(Element)root.cloneNode(true);
    Util.generateUUIDForElement(schema,concept,conceptRoot);
    for (int j=0; j < conceptKey.getFields().length; j++) {
      for (int i=0; i < conceptRoot.getChildNodes().getLength(); i++) {
        Node node=conceptRoot.getChildNodes().item(i);
        String name=node.getLocalName();
        if (node.getNodeType() != Node.ELEMENT_NODE)         continue;
        String key=conceptKey.getFields()[j];
        if (name.equals(key) && itemKeyValues[j] == null) {
          itemKeyValues[j]=node.getTextContent();
          break;
        }
      }
    }
    if (itemKeyValues[0] == null) {
      throw (new RemoteException(""String_Node_Str""));
    }
    projection=Util.getXMLStringFromNode(conceptRoot);
    projection=projection.replaceAll(""String_Node_Str"",""String_Node_Str"");
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.6798118668596237
149230,"/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    Element conceptRoot=(Element)root.cloneNode(true);
    Util.generateUUIDForElement(schema,concept,conceptRoot);
    for (int j=0; j < conceptKey.getFields().length; j++) {
      for (int i=0; i < conceptRoot.getChildNodes().getLength(); i++) {
        Node node=conceptRoot.getChildNodes().item(i);
        String name=node.getLocalName();
        if (node.getNodeType() != Node.ELEMENT_NODE)         continue;
        String key=conceptKey.getFields()[j];
        if (name.equals(key) && itemKeyValues[j] == null) {
          itemKeyValues[j]=node.getTextContent();
          break;
        }
      }
    }
    if (itemKeyValues[0] == null) {
      throw (new RemoteException(""String_Node_Str""));
    }
    projection=Util.getXMLStringFromNode(conceptRoot);
    projection=projection.replaceAll(""String_Node_Str"",""String_Node_Str"");
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.640973630831643
149231,"/** 
 * create an ""empty"" item from scratch, set every text node to empty
 * @param viewPK
 * @throws RemoteException
 * @throws Exception
 */
private void createItem(String concept,int docIndex) throws RemoteException, Exception {
  WebContext ctx=WebContextFactory.get();
  Configuration config=Configuration.getInstance();
  String xml1=""String_Node_Str"" + concept + ""String_Node_Str""+ concept+ ""String_Node_Str"";
  Document d=Util.parse(xml1);
  ctx.getSession().setAttribute(""String_Node_Str"" + docIndex,d);
  Map<String,XSElementDecl> map=CommonDWR.getConceptMap(config.getModel());
  XSComplexType xsct=(XSComplexType)(map.get(concept).getType());
  XSParticle[] xsp=xsct.getContentType().asParticle().getTerm().asModelGroup().getChildren();
  for (int j=0; j < xsp.length; j++) {
  }
}","/** 
 * create an ""empty"" item from scratch, set every text node to empty
 * @param viewPK
 * @throws RemoteException
 * @throws Exception
 */
private void createItem(String concept,int docIndex) throws RemoteException, Exception {
  WebContext ctx=WebContextFactory.get();
  Configuration config=Configuration.getInstance();
  String xml1=""String_Node_Str"" + concept + ""String_Node_Str""+ concept+ ""String_Node_Str"";
  Document d=Util.parse(xml1);
  ctx.getSession().setAttribute(""String_Node_Str"" + docIndex,d);
  Map<String,XSElementDecl> map=CommonDWR.getConceptMap(config.getModel());
  XSComplexType xsct=(XSComplexType)(map.get(concept).getType());
  XSParticle[] xsp=xsct.getContentType().asParticle().getTerm().asModelGroup().getChildren();
  for (int j=0; j < xsp.length; j++) {
    setChilden(xsp[j],""String_Node_Str"" + concept,docIndex);
  }
}",0.9629629629629628
149232,"public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    json.put(""String_Node_Str"",results.length);
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      JSONObject row=new JSONObject();
      row.put(""String_Node_Str"",keys);
      row.put(""String_Node_Str"",infos);
      rows.put(row);
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  for (int i=0; i < xpaths.length; i++) {
    String xpath=xpaths[i];
    int pos=xpath.indexOf(""String_Node_Str"");
    String conceptName=xpath.substring(0,pos);
    String left=xpath.substring(pos);
    String filteredConcept=conceptName;
    filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    xpath=filteredConcept + left;
    xpaths[i]=xpath;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpaths[0],new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}","public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      if (!results[i].startsWith(""String_Node_Str"")) {
        results[i]=""String_Node_Str"" + results[i] + ""String_Node_Str"";
      }
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      if (keys.equals(""String_Node_Str"") && (infos.equals(""String_Node_Str"") || infos.equals(""String_Node_Str""))) {
      }
 else {
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
      json.put(""String_Node_Str"",rows.length());
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  for (int i=0; i < xpaths.length; i++) {
    String xpath=xpaths[i];
    int pos=xpath.indexOf(""String_Node_Str"");
    String conceptName=xpath.substring(0,pos);
    String left=xpath.substring(pos);
    String filteredConcept=conceptName;
    filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    xpath=filteredConcept + left;
    xpaths[i]=xpath;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpaths[0],new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}",0.9595733333333332
149233,"public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    json.put(""String_Node_Str"",results.length);
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      JSONObject row=new JSONObject();
      row.put(""String_Node_Str"",keys);
      row.put(""String_Node_Str"",infos);
      rows.put(row);
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  for (int i=0; i < xpaths.length; i++) {
    String xpath=xpaths[i];
    int pos=xpath.indexOf(""String_Node_Str"");
    String conceptName=xpath.substring(0,pos);
    String left=xpath.substring(pos);
    String filteredConcept=conceptName;
    filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    xpath=filteredConcept + left;
    xpaths[i]=xpath;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpaths[0],new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}","public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      if (!results[i].startsWith(""String_Node_Str"")) {
        results[i]=""String_Node_Str"" + results[i] + ""String_Node_Str"";
      }
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      if (keys.equals(""String_Node_Str"") && (infos.equals(""String_Node_Str"") || infos.equals(""String_Node_Str""))) {
      }
 else {
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
      json.put(""String_Node_Str"",rows.length());
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  for (int i=0; i < xpaths.length; i++) {
    String xpath=xpaths[i];
    int pos=xpath.indexOf(""String_Node_Str"");
    String conceptName=xpath.substring(0,pos);
    String left=xpath.substring(pos);
    String filteredConcept=conceptName;
    filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    xpath=filteredConcept + left;
    xpaths[i]=xpath;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpaths[0],new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}",0.9595733333333332
149234,"/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    Element conceptRoot=(Element)root.cloneNode(true);
    Util.generateUUIDForElement(schema,concept,conceptRoot);
    for (int j=0; j < conceptKey.getFields().length; j++) {
      for (int i=0; i < conceptRoot.getChildNodes().getLength(); i++) {
        Node node=conceptRoot.getChildNodes().item(i);
        String name=node.getLocalName();
        if (node.getNodeType() != Node.ELEMENT_NODE)         continue;
        String key=conceptKey.getFields()[j];
        if (name.equals(key) && itemKeyValues[j] == null) {
          itemKeyValues[j]=node.getTextContent();
          break;
        }
      }
    }
    if (itemKeyValues[0] == null) {
      throw (new RemoteException(""String_Node_Str""));
    }
    projection=Util.getXMLStringFromNode(conceptRoot);
    projection=projection.replaceAll(""String_Node_Str"",""String_Node_Str"");
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.6798118668596237
149235,"/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    Element conceptRoot=(Element)root.cloneNode(true);
    Util.generateUUIDForElement(schema,concept,conceptRoot);
    for (int j=0; j < conceptKey.getFields().length; j++) {
      for (int i=0; i < conceptRoot.getChildNodes().getLength(); i++) {
        Node node=conceptRoot.getChildNodes().item(i);
        String name=node.getLocalName();
        if (node.getNodeType() != Node.ELEMENT_NODE)         continue;
        String key=conceptKey.getFields()[j];
        if (name.equals(key) && itemKeyValues[j] == null) {
          itemKeyValues[j]=node.getTextContent();
          break;
        }
      }
    }
    if (itemKeyValues[0] == null) {
      throw (new RemoteException(""String_Node_Str""));
    }
    projection=Util.getXMLStringFromNode(conceptRoot);
    projection=projection.replaceAll(""String_Node_Str"",""String_Node_Str"");
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.640973630831643
149236,"/** 
 * create an ""empty"" item from scratch, set every text node to empty
 * @param viewPK
 * @throws RemoteException
 * @throws Exception
 */
private void createItem(String concept,int docIndex) throws RemoteException, Exception {
  WebContext ctx=WebContextFactory.get();
  Configuration config=Configuration.getInstance();
  String xml1=""String_Node_Str"" + concept + ""String_Node_Str""+ concept+ ""String_Node_Str"";
  Document d=Util.parse(xml1);
  ctx.getSession().setAttribute(""String_Node_Str"" + docIndex,d);
  Map<String,XSElementDecl> map=CommonDWR.getConceptMap(config.getModel());
  XSComplexType xsct=(XSComplexType)(map.get(concept).getType());
  XSParticle[] xsp=xsct.getContentType().asParticle().getTerm().asModelGroup().getChildren();
  for (int j=0; j < xsp.length; j++) {
  }
}","/** 
 * create an ""empty"" item from scratch, set every text node to empty
 * @param viewPK
 * @throws RemoteException
 * @throws Exception
 */
private void createItem(String concept,int docIndex) throws RemoteException, Exception {
  WebContext ctx=WebContextFactory.get();
  Configuration config=Configuration.getInstance();
  String xml1=""String_Node_Str"" + concept + ""String_Node_Str""+ concept+ ""String_Node_Str"";
  Document d=Util.parse(xml1);
  ctx.getSession().setAttribute(""String_Node_Str"" + docIndex,d);
  Map<String,XSElementDecl> map=CommonDWR.getConceptMap(config.getModel());
  XSComplexType xsct=(XSComplexType)(map.get(concept).getType());
  XSParticle[] xsp=xsct.getContentType().asParticle().getTerm().asModelGroup().getChildren();
  for (int j=0; j < xsp.length; j++) {
    setChilden(xsp[j],""String_Node_Str"" + concept,docIndex);
  }
}",0.9629629629629628
149237,"/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9773081586696692
149238,"/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9746859903381644
149239,"/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9773081586696692
149240,"/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9746859903381644
149241,"/** 
 * Selection Listener on OK Button
 */
public void widgetSelected(SelectionEvent e){
  int buttonId=((Integer)e.widget.getData()).intValue();
  if (IDialogConstants.OK_ID != buttonId)   return;
  String server=dialog.getServer();
  String username=dialog.getUsernameText();
  String password=dialog.getPasswordText();
  String universe=dialog.getUniverse();
  dialog.close();
  Authenticator.setDefault(null);
  try {
    XtentisServerObjectsRetriever retriever=new XtentisServerObjectsRetriever(server,username,password,universe);
    new ProgressMonitorDialog(view.getSite().getShell()).run(true,true,retriever);
    if (!retriever.isExistUniverse()) {
      return;
    }
    TreeParent serverRoot=retriever.getServerRoot();
    TreeParent invisibleRoot=view.getTreeContentProvider().getInvisibleRoot();
    TreeObject[] serverRoots=invisibleRoot.getChildren();
    boolean found=false;
    for (int i=0; i < serverRoots.length; i++) {
      if (serverRoots[i].getWsKey().equals(serverRoot.getWsKey())) {
        if (serverRoots[i].getUser().getUniverse().equalsIgnoreCase(serverRoot.getUser().getUniverse())) {
          found=true;
          ((TreeParent)serverRoots[i]).synchronizeWith(serverRoot);
        }
      }
    }
    if (!found)     invisibleRoot.addChild(serverRoot);
    view.getViewer().refresh();
    view.getViewer().expandToLevel(serverRoot,1);
  }
 catch (  InterruptedException ie) {
    return;
  }
catch (  InvocationTargetException ite) {
    ite.printStackTrace();
    MessageDialog.openError(dialog.getShell(),""String_Node_Str"",""String_Node_Str"" + ite.getCause().getLocalizedMessage());
  }
}","/** 
 * Selection Listener on OK Button
 */
public void widgetSelected(SelectionEvent e){
  int buttonId=((Integer)e.widget.getData()).intValue();
  if (IDialogConstants.OK_ID != buttonId)   return;
  String server=dialog.getServer();
  String username=dialog.getUsernameText();
  String password=dialog.getPasswordText();
  String universe=dialog.getUniverse();
  dialog.close();
  Authenticator.setDefault(null);
  try {
    XtentisServerObjectsRetriever retriever=new XtentisServerObjectsRetriever(server,username,password,universe);
    new ProgressMonitorDialog(view.getSite().getShell()).run(true,true,retriever);
    if (!retriever.isExistUniverse()) {
      return;
    }
    TreeParent serverRoot=retriever.getServerRoot();
    TreeParent invisibleRoot=view.getTreeContentProvider().getInvisibleRoot();
    TreeObject[] serverRoots=invisibleRoot.getChildren();
    boolean found=false;
    for (int i=0; i < serverRoots.length; i++) {
      if (serverRoots[i].getDisplayName().equals(serverRoot.getDisplayName())) {
        if (serverRoots[i].getWsKey().equals(serverRoot.getWsKey())) {
          if (serverRoots[i].getUser().getUniverse().equalsIgnoreCase(serverRoot.getUser().getUniverse())) {
            found=true;
            ((TreeParent)serverRoots[i]).synchronizeWith(serverRoot);
          }
        }
      }
    }
    if (!found)     invisibleRoot.addChild(serverRoot);
    view.getViewer().refresh();
    view.getViewer().expandToLevel(serverRoot,1);
  }
 catch (  InterruptedException ie) {
    return;
  }
catch (  InvocationTargetException ite) {
    ite.printStackTrace();
    MessageDialog.openError(dialog.getShell(),""String_Node_Str"",""String_Node_Str"" + ite.getCause().getLocalizedMessage());
  }
}",0.9698777214434836
149242,"/** 
 * Selection Listener on OK Button
 */
public void widgetSelected(SelectionEvent e){
  int buttonId=((Integer)e.widget.getData()).intValue();
  if (IDialogConstants.OK_ID != buttonId)   return;
  String server=dialog.getServer();
  String username=dialog.getUsernameText();
  String password=dialog.getPasswordText();
  String universe=dialog.getUniverse();
  dialog.close();
  Authenticator.setDefault(null);
  try {
    XtentisServerObjectsRetriever retriever=new XtentisServerObjectsRetriever(server,username,password,universe);
    new ProgressMonitorDialog(view.getSite().getShell()).run(true,true,retriever);
    if (!retriever.isExistUniverse()) {
      return;
    }
    TreeParent serverRoot=retriever.getServerRoot();
    TreeParent invisibleRoot=view.getTreeContentProvider().getInvisibleRoot();
    TreeObject[] serverRoots=invisibleRoot.getChildren();
    boolean found=false;
    for (int i=0; i < serverRoots.length; i++) {
      if (serverRoots[i].getWsKey().equals(serverRoot.getWsKey())) {
        if (serverRoots[i].getUser().getUniverse().equalsIgnoreCase(serverRoot.getUser().getUniverse())) {
          found=true;
          ((TreeParent)serverRoots[i]).synchronizeWith(serverRoot);
        }
      }
    }
    if (!found)     invisibleRoot.addChild(serverRoot);
    view.getViewer().refresh();
    view.getViewer().expandToLevel(serverRoot,1);
  }
 catch (  InterruptedException ie) {
    return;
  }
catch (  InvocationTargetException ite) {
    ite.printStackTrace();
    MessageDialog.openError(dialog.getShell(),""String_Node_Str"",""String_Node_Str"" + ite.getCause().getLocalizedMessage());
  }
}","/** 
 * Selection Listener on OK Button
 */
public void widgetSelected(SelectionEvent e){
  int buttonId=((Integer)e.widget.getData()).intValue();
  if (IDialogConstants.OK_ID != buttonId)   return;
  String server=dialog.getServer();
  String username=dialog.getUsernameText();
  String password=dialog.getPasswordText();
  String universe=dialog.getUniverse();
  dialog.close();
  Authenticator.setDefault(null);
  try {
    XtentisServerObjectsRetriever retriever=new XtentisServerObjectsRetriever(server,username,password,universe);
    new ProgressMonitorDialog(view.getSite().getShell()).run(true,true,retriever);
    if (!retriever.isExistUniverse()) {
      return;
    }
    TreeParent serverRoot=retriever.getServerRoot();
    TreeParent invisibleRoot=view.getTreeContentProvider().getInvisibleRoot();
    TreeObject[] serverRoots=invisibleRoot.getChildren();
    boolean found=false;
    for (int i=0; i < serverRoots.length; i++) {
      if (serverRoots[i].getDisplayName().equals(serverRoot.getDisplayName())) {
        if (serverRoots[i].getWsKey().equals(serverRoot.getWsKey())) {
          if (serverRoots[i].getUser().getUniverse().equalsIgnoreCase(serverRoot.getUser().getUniverse())) {
            found=true;
            ((TreeParent)serverRoots[i]).synchronizeWith(serverRoot);
          }
        }
      }
    }
    if (!found)     invisibleRoot.addChild(serverRoot);
    view.getViewer().refresh();
    view.getViewer().expandToLevel(serverRoot,1);
  }
 catch (  InterruptedException ie) {
    return;
  }
catch (  InvocationTargetException ite) {
    ite.printStackTrace();
    MessageDialog.openError(dialog.getShell(),""String_Node_Str"",""String_Node_Str"" + ite.getCause().getLocalizedMessage());
  }
}",0.9698777214434836
149243,"protected void provideViwerContent(XSDSchema xsdSchema){
  drillDownAdapter=new DrillDownAdapter(domViewer);
  domViewer.setLabelProvider(new XSDTreeLabelProvider());
  domViewer.setContentProvider(new XSDTreeContentProvider(site,xsdSchema));
  domViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent e){
      StructuredSelection sel=(StructuredSelection)e.getSelection();
      xpath=getXpath(sel);
      xpathText.setText(xpath);
    }
  }
);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true));
  domViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDFacet)       return 100;
      if (element instanceof XSDIdentityConstraintDefinition) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)element;
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         return 300;
 else         if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.KEY_LITERAL))         return 301;
 else         return 302;
      }
      return 200;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  domViewer.setInput(site);
}","protected void provideViwerContent(XSDSchema xsdSchema){
  drillDownAdapter=new DrillDownAdapter(domViewer);
  domViewer.setLabelProvider(new XSDTreeLabelProvider());
  domViewer.setContentProvider(new XPathTreeContentProvider(site,xsdSchema));
  domViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent e){
      StructuredSelection sel=(StructuredSelection)e.getSelection();
      xpath=getXpath(sel);
      xpathText.setText(xpath);
    }
  }
);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true));
  domViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDFacet)       return 100;
      if (element instanceof XSDIdentityConstraintDefinition) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)element;
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         return 300;
 else         if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.KEY_LITERAL))         return 301;
 else         return 302;
      }
      return 200;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  domViewer.setInput(site);
}",0.997863247863248
149244,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  TreeParent grantTreeParent=this.parent.getParent();
  TreeParent tree=grantTreeParent.findServerFolder(TreeObject.DATA_MODEL);
  TreeObject[] trees=tree.getChildren();
  TreeObject treeobject;
  for (int i=0; i < trees.length; i++) {
    treeobject=trees[i];
    String treeName=treeobject.getDisplayName();
    dataModelCombo.add(treeName);
  }
  final TreeParent pObject=tree;
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      String modelDisplay=dataModelCombo.getText();
      XpathSelectDialog.this.selectedDataModelName=modelDisplay;
      xobject=pObject.findObject(TreeObject.DATA_MODEL,modelDisplay);
      XtentisPort port=null;
      try {
        port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
      }
 catch (      MalformedURLException e3) {
        e3.printStackTrace();
      }
catch (      XtentisException e3) {
        e3.printStackTrace();
      }
      WSDataModel wsDataModel=null;
      try {
        wsDataModel=port.getDataModel(new WSGetDataModel((WSDataModelPK)xobject.getWsKey()));
      }
 catch (      RemoteException e2) {
        e2.printStackTrace();
      }
      try {
        XSDSchema xsdSchema=getXSDSchema(wsDataModel.getXsdSchema());
        provideViwerContent(xsdSchema);
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=300;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  TreeParent grantTreeParent=this.parent.getParent();
  TreeParent tree=grantTreeParent.findServerFolder(TreeObject.DATA_MODEL);
  TreeObject[] trees=tree.getChildren();
  TreeObject treeobject;
  for (int i=0; i < trees.length; i++) {
    treeobject=trees[i];
    String treeName=treeobject.getDisplayName();
    dataModelCombo.add(treeName);
  }
  final TreeParent pObject=tree;
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      String modelDisplay=dataModelCombo.getText();
      XpathSelectDialog.this.selectedDataModelName=modelDisplay;
      xobject=pObject.findObject(TreeObject.DATA_MODEL,modelDisplay);
      XtentisPort port=null;
      try {
        port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
      }
 catch (      MalformedURLException e3) {
        e3.printStackTrace();
      }
catch (      XtentisException e3) {
        e3.printStackTrace();
      }
      WSDataModel wsDataModel=null;
      try {
        wsDataModel=port.getDataModel(new WSGetDataModel((WSDataModelPK)xobject.getWsKey()));
      }
 catch (      RemoteException e2) {
        e2.printStackTrace();
      }
      try {
        XSDSchema xsdSchema=getXSDSchema(wsDataModel.getXsdSchema());
        provideViwerContent(xsdSchema);
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}",0.9996725605762934
149245,"protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptWrapAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptWrapAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions2(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.9933142311365808
149246,"public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    json.put(""String_Node_Str"",results.length);
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      JSONObject row=new JSONObject();
      row.put(""String_Node_Str"",keys);
      row.put(""String_Node_Str"",infos);
      rows.put(row);
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpathForeignKey,new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}","public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    json.put(""String_Node_Str"",results.length);
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      JSONObject row=new JSONObject();
      row.put(""String_Node_Str"",keys);
      row.put(""String_Node_Str"",infos);
      rows.put(row);
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  for (int i=0; i < xpaths.length; i++) {
    String xpath=xpaths[i];
    int pos=xpath.indexOf(""String_Node_Str"");
    String conceptName=xpath.substring(0,pos);
    String left=xpath.substring(pos);
    String filteredConcept=conceptName;
    filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    xpath=filteredConcept + left;
    xpaths[i]=xpath;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpaths[0],new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}",0.9562428407789232
149247,"protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptWrapAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptWrapAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions2(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.9933142311365808
149248,"protected void provideViwerContent(XSDSchema xsdSchema){
  drillDownAdapter=new DrillDownAdapter(domViewer);
  domViewer.setLabelProvider(new XSDTreeLabelProvider());
  domViewer.setContentProvider(new XSDTreeContentProvider(site,xsdSchema));
  domViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent e){
      StructuredSelection sel=(StructuredSelection)e.getSelection();
      xpath=getXpath(sel);
      xpathText.setText(xpath);
    }
  }
);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true));
  domViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDFacet)       return 100;
      if (element instanceof XSDIdentityConstraintDefinition) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)element;
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         return 300;
 else         if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.KEY_LITERAL))         return 301;
 else         return 302;
      }
      return 200;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  domViewer.setInput(site);
}","protected void provideViwerContent(XSDSchema xsdSchema){
  drillDownAdapter=new DrillDownAdapter(domViewer);
  domViewer.setLabelProvider(new XSDTreeLabelProvider());
  domViewer.setContentProvider(new XPathTreeContentProvider(site,xsdSchema));
  domViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent e){
      StructuredSelection sel=(StructuredSelection)e.getSelection();
      xpath=getXpath(sel);
      xpathText.setText(xpath);
    }
  }
);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true));
  domViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDFacet)       return 100;
      if (element instanceof XSDIdentityConstraintDefinition) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)element;
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         return 300;
 else         if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.KEY_LITERAL))         return 301;
 else         return 302;
      }
      return 200;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  domViewer.setInput(site);
}",0.997863247863248
149249,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  TreeParent grantTreeParent=this.parent.getParent();
  TreeParent tree=grantTreeParent.findServerFolder(TreeObject.DATA_MODEL);
  TreeObject[] trees=tree.getChildren();
  TreeObject treeobject;
  for (int i=0; i < trees.length; i++) {
    treeobject=trees[i];
    String treeName=treeobject.getDisplayName();
    dataModelCombo.add(treeName);
  }
  final TreeParent pObject=tree;
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      String modelDisplay=dataModelCombo.getText();
      XpathSelectDialog.this.selectedDataModelName=modelDisplay;
      xobject=pObject.findObject(TreeObject.DATA_MODEL,modelDisplay);
      XtentisPort port=null;
      try {
        port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
      }
 catch (      MalformedURLException e3) {
        e3.printStackTrace();
      }
catch (      XtentisException e3) {
        e3.printStackTrace();
      }
      WSDataModel wsDataModel=null;
      try {
        wsDataModel=port.getDataModel(new WSGetDataModel((WSDataModelPK)xobject.getWsKey()));
      }
 catch (      RemoteException e2) {
        e2.printStackTrace();
      }
      try {
        XSDSchema xsdSchema=getXSDSchema(wsDataModel.getXsdSchema());
        provideViwerContent(xsdSchema);
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=300;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  TreeParent grantTreeParent=this.parent.getParent();
  TreeParent tree=grantTreeParent.findServerFolder(TreeObject.DATA_MODEL);
  TreeObject[] trees=tree.getChildren();
  TreeObject treeobject;
  for (int i=0; i < trees.length; i++) {
    treeobject=trees[i];
    String treeName=treeobject.getDisplayName();
    dataModelCombo.add(treeName);
  }
  final TreeParent pObject=tree;
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      String modelDisplay=dataModelCombo.getText();
      XpathSelectDialog.this.selectedDataModelName=modelDisplay;
      xobject=pObject.findObject(TreeObject.DATA_MODEL,modelDisplay);
      XtentisPort port=null;
      try {
        port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
      }
 catch (      MalformedURLException e3) {
        e3.printStackTrace();
      }
catch (      XtentisException e3) {
        e3.printStackTrace();
      }
      WSDataModel wsDataModel=null;
      try {
        wsDataModel=port.getDataModel(new WSGetDataModel((WSDataModelPK)xobject.getWsKey()));
      }
 catch (      RemoteException e2) {
        e2.printStackTrace();
      }
      try {
        XSDSchema xsdSchema=getXSDSchema(wsDataModel.getXsdSchema());
        provideViwerContent(xsdSchema);
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}",0.9996725605762934
149250,"public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    json.put(""String_Node_Str"",results.length);
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      JSONObject row=new JSONObject();
      row.put(""String_Node_Str"",keys);
      row.put(""String_Node_Str"",infos);
      rows.put(row);
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpathForeignKey,new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}","public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    json.put(""String_Node_Str"",results.length);
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      JSONObject row=new JSONObject();
      row.put(""String_Node_Str"",keys);
      row.put(""String_Node_Str"",infos);
      rows.put(row);
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  for (int i=0; i < xpaths.length; i++) {
    String xpath=xpaths[i];
    int pos=xpath.indexOf(""String_Node_Str"");
    String conceptName=xpath.substring(0,pos);
    String left=xpath.substring(pos);
    String filteredConcept=conceptName;
    filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    xpath=filteredConcept + left;
    xpaths[i]=xpath;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpaths[0],new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}",0.9562428407789232
149251,"public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (this.viewName != null && this.viewName.length() > 0) {
    if (viewName.matches(""String_Node_Str"")) {
      String concept=viewName.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (concept != null && concept.length() > 0 && lastDataModelName != null && lastDataModelName.length() > 0) {
        java.util.List<String> toAddViewableList=new ArrayList<String>();
        WSGetBusinessConceptKey wsGetBusinessConceptKey=new WSGetBusinessConceptKey(new WSDataModelPK(lastDataModelName),concept);
        WSConceptKey wsConceptKey=null;
        try {
          wsConceptKey=Util.getPort(getXObject()).getBusinessConceptKey(wsGetBusinessConceptKey);
        }
 catch (        RemoteException e) {
          e.printStackTrace();
        }
catch (        XtentisException e) {
          e.printStackTrace();
        }
        if (wsConceptKey != null) {
          java.util.List<String> viewableList=new ArrayList<String>();
          for (int i=0; i < viewableBEsList.getItemCount(); i++) {
            viewableList.add(viewableBEsList.getItem(i));
          }
          String[] keys=wsConceptKey.getFields();
          for (int i=0; i < keys.length; i++) {
            if (""String_Node_Str"".equals(wsConceptKey.getSelector()))             keys[i]=""String_Node_Str"" + concept + ""String_Node_Str""+ keys[i];
 else             keys[i]=wsConceptKey.getSelector() + keys[i];
          }
          String[] ids=wsConceptKey.getFields();
          for (int i=0; i < ids.length; i++) {
            if (!viewableList.contains(ids[i])) {
              toAddViewableList.add(ids[i]);
            }
          }
        }
        if (toAddViewableList.size() > 0) {
          String msg=""String_Node_Str"";
          for (Iterator iterator=toAddViewableList.iterator(); iterator.hasNext(); ) {
            String toAddItem=(String)iterator.next();
            msg+=(toAddItem + ""String_Node_Str"");
          }
          msg+=""String_Node_Str"";
          MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",msg);
        }
        IRunnableWithProgress autoFixProcess=new AutoFixProgress(toAddViewableList,viewableBEsList,this.getSite().getShell());
        try {
          new ProgressMonitorDialog(this.getSite().getShell()).run(false,true,autoFixProcess);
        }
 catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
}","public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (this.viewName != null && this.viewName.length() > 0) {
    if (viewName.matches(""String_Node_Str"")) {
      String concept=viewName.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (concept != null && concept.length() > 0 && lastDataModelName != null && lastDataModelName.length() > 0) {
        java.util.List<String> toAddViewableList=new ArrayList<String>();
        WSGetBusinessConceptKey wsGetBusinessConceptKey=new WSGetBusinessConceptKey(new WSDataModelPK(lastDataModelName),concept);
        WSConceptKey wsConceptKey=null;
        try {
          wsConceptKey=Util.getPort(getXObject()).getBusinessConceptKey(wsGetBusinessConceptKey);
        }
 catch (        RemoteException e) {
          e.printStackTrace();
        }
catch (        XtentisException e) {
          e.printStackTrace();
        }
        if (wsConceptKey != null) {
          java.util.List<String> viewableList=new ArrayList<String>();
          for (int i=0; i < viewableBEsList.getItemCount(); i++) {
            viewableList.add(viewableBEsList.getItem(i));
          }
          String[] keys=wsConceptKey.getFields();
          for (int i=0; i < keys.length; i++) {
            if (""String_Node_Str"".equals(wsConceptKey.getSelector()))             keys[i]=""String_Node_Str"" + concept + ""String_Node_Str""+ keys[i];
 else             keys[i]=wsConceptKey.getSelector() + keys[i];
          }
          String[] ids=wsConceptKey.getFields();
          for (int i=0; i < ids.length; i++) {
            String id=ids[i];
            if (id.startsWith(""String_Node_Str"")) {
              id=id.substring(1);
            }
 else             if (id.startsWith(""String_Node_Str"")) {
              id=id.substring(2);
            }
            if (!viewableList.contains(id)) {
              toAddViewableList.add(id);
            }
          }
        }
        if (toAddViewableList.size() > 0) {
          String msg=""String_Node_Str"";
          for (Iterator iterator=toAddViewableList.iterator(); iterator.hasNext(); ) {
            String toAddItem=(String)iterator.next();
            msg+=(toAddItem + ""String_Node_Str"");
          }
          msg+=""String_Node_Str"";
          MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",msg);
        }
        IRunnableWithProgress autoFixProcess=new AutoFixProgress(toAddViewableList,viewableBEsList,this.getSite().getShell());
        try {
          new ProgressMonitorDialog(this.getSite().getShell()).run(false,true,autoFixProcess);
        }
 catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
}",0.9549483013293943
149252,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(""String_Node_Str"",toAddViewableList.size());
    for (Iterator<String> iter=toAddViewableList.iterator(); iter.hasNext(); ) {
      String keyPath=iter.next();
      if (keyPath.startsWith(""String_Node_Str""))       keyPath=keyPath.substring(1);
      viewableBEsList.add(keyPath);
      commit();
      monitor.worked(1);
    }
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(parentShell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(""String_Node_Str"",toAddViewableList.size());
    for (Iterator<String> iter=toAddViewableList.iterator(); iter.hasNext(); ) {
      String keyPath=iter.next();
      viewableBEsList.add(keyPath);
      commit();
      monitor.worked(1);
    }
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(parentShell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9288702928870292
149253,"public Object getAppendInfo(String key){
  return appendInfo.get(key);
}","public Object getAppendInfo(String key){
  if (appendInfo == null)   return null;
  return appendInfo.get(key);
}",0.7783783783783784
149254,"/** 
 * Generates an xml string from a node with or without the xml declaration  (not pretty formatted)
 * @param n the node
 * @return the xml string
 * @throws TransformerException
 */
public static String nodeToString(Node n,boolean omitXMLDeclaration) throws TransformerException {
  StringWriter sw=new StringWriter();
  Transformer transformer=TransformerFactory.newInstance().newTransformer();
  if (omitXMLDeclaration)   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
 else   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.transform(new DOMSource(n),new StreamResult(sw));
  if (sw == null)   return null;
  return sw.toString();
}","/** 
 * Generates an xml string from a node with or without the xml declaration  (not pretty formatted)
 * @param n the node
 * @return the xml string
 * @throws TransformerException
 */
public static String nodeToString(Node n,boolean omitXMLDeclaration) throws TransformerException {
  StringWriter sw=new StringWriter();
  Transformer transformer=TransformerFactory.newInstance().newTransformer();
  if (omitXMLDeclaration)   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
 else   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.transform(new DOMSource(n),new StreamResult(sw));
  if (sw == null)   return null;
  return sw.toString().replaceAll(""String_Node_Str"",""String_Node_Str"");
}",0.9695817490494296
149255,"/** 
 * Generates an xml string from a node with or without the xml declaration  (not pretty formatted)
 * @param n the node
 * @return the xml string
 * @throws TransformerException
 */
public static String nodeToString(Node n,boolean omitXMLDeclaration) throws TransformerException {
  StringWriter sw=new StringWriter();
  Transformer transformer=TransformerFactory.newInstance().newTransformer();
  if (omitXMLDeclaration)   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
 else   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.transform(new DOMSource(n),new StreamResult(sw));
  if (sw == null)   return null;
  return sw.toString();
}","/** 
 * Generates an xml string from a node with or without the xml declaration  (not pretty formatted)
 * @param n the node
 * @return the xml string
 * @throws TransformerException
 */
public static String nodeToString(Node n,boolean omitXMLDeclaration) throws TransformerException {
  StringWriter sw=new StringWriter();
  Transformer transformer=TransformerFactory.newInstance().newTransformer();
  if (omitXMLDeclaration)   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
 else   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.transform(new DOMSource(n),new StreamResult(sw));
  if (sw == null)   return null;
  return sw.toString().replaceAll(""String_Node_Str"",""String_Node_Str"");
}",0.9695817490494296
149256,"public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (this.viewName != null && this.viewName.length() > 0) {
    if (viewName.matches(""String_Node_Str"")) {
      String concept=viewName.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (concept != null && concept.length() > 0 && lastDataModelName != null && lastDataModelName.length() > 0) {
        java.util.List<String> toAddViewableList=new ArrayList<String>();
        WSGetBusinessConceptKey wsGetBusinessConceptKey=new WSGetBusinessConceptKey(new WSDataModelPK(lastDataModelName),concept);
        WSConceptKey wsConceptKey=null;
        try {
          wsConceptKey=Util.getPort(getXObject()).getBusinessConceptKey(wsGetBusinessConceptKey);
        }
 catch (        RemoteException e) {
          e.printStackTrace();
        }
catch (        XtentisException e) {
          e.printStackTrace();
        }
        if (wsConceptKey != null) {
          java.util.List<String> viewableList=new ArrayList<String>();
          for (int i=0; i < viewableBEsList.getItemCount(); i++) {
            viewableList.add(viewableBEsList.getItem(i));
          }
          String[] keys=wsConceptKey.getFields();
          for (int i=0; i < keys.length; i++) {
            if (""String_Node_Str"".equals(wsConceptKey.getSelector()))             keys[i]=""String_Node_Str"" + concept + ""String_Node_Str""+ keys[i];
 else             keys[i]=wsConceptKey.getSelector() + keys[i];
          }
          String[] ids=wsConceptKey.getFields();
          for (int i=0; i < ids.length; i++) {
            if (!viewableList.contains(ids[i])) {
              toAddViewableList.add(ids[i]);
            }
          }
        }
        if (toAddViewableList.size() > 0) {
          String msg=""String_Node_Str"";
          for (Iterator iterator=toAddViewableList.iterator(); iterator.hasNext(); ) {
            String toAddItem=(String)iterator.next();
            msg+=(toAddItem + ""String_Node_Str"");
          }
          msg+=""String_Node_Str"";
          MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",msg);
        }
        IRunnableWithProgress autoFixProcess=new AutoFixProgress(toAddViewableList,viewableBEsList,this.getSite().getShell());
        try {
          new ProgressMonitorDialog(this.getSite().getShell()).run(false,true,autoFixProcess);
        }
 catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
}","public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (this.viewName != null && this.viewName.length() > 0) {
    if (viewName.matches(""String_Node_Str"")) {
      String concept=viewName.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (concept != null && concept.length() > 0 && lastDataModelName != null && lastDataModelName.length() > 0) {
        java.util.List<String> toAddViewableList=new ArrayList<String>();
        WSGetBusinessConceptKey wsGetBusinessConceptKey=new WSGetBusinessConceptKey(new WSDataModelPK(lastDataModelName),concept);
        WSConceptKey wsConceptKey=null;
        try {
          wsConceptKey=Util.getPort(getXObject()).getBusinessConceptKey(wsGetBusinessConceptKey);
        }
 catch (        RemoteException e) {
          e.printStackTrace();
        }
catch (        XtentisException e) {
          e.printStackTrace();
        }
        if (wsConceptKey != null) {
          java.util.List<String> viewableList=new ArrayList<String>();
          for (int i=0; i < viewableBEsList.getItemCount(); i++) {
            viewableList.add(viewableBEsList.getItem(i));
          }
          String[] keys=wsConceptKey.getFields();
          for (int i=0; i < keys.length; i++) {
            if (""String_Node_Str"".equals(wsConceptKey.getSelector()))             keys[i]=""String_Node_Str"" + concept + ""String_Node_Str""+ keys[i];
 else             keys[i]=wsConceptKey.getSelector() + keys[i];
          }
          String[] ids=wsConceptKey.getFields();
          for (int i=0; i < ids.length; i++) {
            String id=ids[i];
            if (id.startsWith(""String_Node_Str"")) {
              id=id.substring(1);
            }
 else             if (id.startsWith(""String_Node_Str"")) {
              id=id.substring(2);
            }
            if (!viewableList.contains(id)) {
              toAddViewableList.add(id);
            }
          }
        }
        if (toAddViewableList.size() > 0) {
          String msg=""String_Node_Str"";
          for (Iterator iterator=toAddViewableList.iterator(); iterator.hasNext(); ) {
            String toAddItem=(String)iterator.next();
            msg+=(toAddItem + ""String_Node_Str"");
          }
          msg+=""String_Node_Str"";
          MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",msg);
        }
        IRunnableWithProgress autoFixProcess=new AutoFixProgress(toAddViewableList,viewableBEsList,this.getSite().getShell());
        try {
          new ProgressMonitorDialog(this.getSite().getShell()).run(false,true,autoFixProcess);
        }
 catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
}",0.9549483013293943
149257,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(""String_Node_Str"",toAddViewableList.size());
    for (Iterator<String> iter=toAddViewableList.iterator(); iter.hasNext(); ) {
      String keyPath=iter.next();
      if (keyPath.startsWith(""String_Node_Str""))       keyPath=keyPath.substring(1);
      viewableBEsList.add(keyPath);
      commit();
      monitor.worked(1);
    }
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(parentShell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(""String_Node_Str"",toAddViewableList.size());
    for (Iterator<String> iter=toAddViewableList.iterator(); iter.hasNext(); ) {
      String keyPath=iter.next();
      viewableBEsList.add(keyPath);
      commit();
      monitor.worked(1);
    }
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(parentShell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9288702928870292
149258,"public Object getAppendInfo(String key){
  return appendInfo.get(key);
}","public Object getAppendInfo(String key){
  if (appendInfo == null)   return null;
  return appendInfo.get(key);
}",0.7783783783783784
149259,"/** 
 * @param droppedItemPOJOPK
 * @return ItemPOJOPK
 * @throws XtentisException recover dropped item
 */
public static ItemPOJOPK recover(DroppedItemPOJOPK droppedItemPOJOPK) throws XtentisException {
  if (droppedItemPOJOPK == null)   return null;
  ItemPOJOPK refItemPOJOPK=droppedItemPOJOPK.getRefItemPOJOPK();
  String actionName=""String_Node_Str"";
  String userName=rolesFilter(refItemPOJOPK,actionName,""String_Node_Str"");
  universeFilter(refItemPOJOPK);
  String sourceItemRevision=droppedItemPOJOPK.getRevisionId();
  XmlServerSLWrapperLocal server=obtainXmlServerSLWrapperLocal();
  try {
    String partPath=droppedItemPOJOPK.getPartPath();
    if (partPath == null || partPath.length() == 0)     return null;
    StringBuffer getXmlDocument=new StringBuffer();
    if (partPath.equals(""String_Node_Str"")) {
      String doc=server.getDocumentAsString(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK(),null);
      getXmlDocument.append(doc);
    }
 else {
      String query=""String_Node_Str"" + droppedItemPOJOPK.getUniquePK() + ""String_Node_Str"";
      ArrayList<String> results=server.runQuery(null,""String_Node_Str"",query,null);
      if (results == null || results.size() == 0)       return null;
      for (int i=0; i < results.size(); i++) {
        getXmlDocument.append(results.get(i));
      }
    }
    if (getXmlDocument.toString() == null || getXmlDocument.toString().length() == 0)     return null;
    String bakDoc=""String_Node_Str"";
    if (partPath.equals(""String_Node_Str"")) {
      bakDoc=getXmlDocument.toString();
    }
 else {
      bakDoc=server.getDocumentAsString(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID(),null);
    }
    if (partPath.equals(""String_Node_Str"")) {
      DroppedItemPOJO droppedItemPOJO=(DroppedItemPOJO)Unmarshaller.unmarshal(DroppedItemPOJO.class,new InputSource(new StringReader(getXmlDocument.toString())));
      server.putDocumentFromString(droppedItemPOJO.getProjection(),refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
 else {
      Document partDom=Util.parse(getXmlDocument.toString());
      String insertText=partDom.getFirstChild().getTextContent();
      Node inserNode=Util.parse(insertText).getFirstChild();
      if (bakDoc == null)       throw new XtentisException(""String_Node_Str"");
      Document targetDom=Util.parse(bakDoc);
      String xPath=""String_Node_Str"" + parserParentPartPath(partPath);
      Node singleParentNode=null;
      NodeList parentNodeList=Util.getNodeList(targetDom,xPath);
      if (parentNodeList.getLength() > 0) {
        singleParentNode=parentNodeList.item(0);
      }
      if (singleParentNode != null) {
        Node importNode=targetDom.importNode(inserNode,true);
        singleParentNode.appendChild(importNode);
      }
      ItemPOJO itemPOJO=ItemPOJO.parse(bakDoc);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null)         Util.validate(targetDom.getDocumentElement(),dataModelPOJO.getSchema());
      }
      server.putDocumentFromString(Util.nodeToString(targetDom),refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
    long res=server.deleteDocument(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK());
    if (res == -1) {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID());
      }
 else {
        server.putDocumentFromString(bakDoc,refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
      }
    }
    return refItemPOJOPK;
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + actionName + ""String_Node_Str""+ droppedItemPOJOPK.getUniquePK()+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(DroppedItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}","/** 
 * @param droppedItemPOJOPK
 * @return ItemPOJOPK
 * @throws XtentisException recover dropped item
 */
public static ItemPOJOPK recover(DroppedItemPOJOPK droppedItemPOJOPK) throws XtentisException {
  if (droppedItemPOJOPK == null)   return null;
  ItemPOJOPK refItemPOJOPK=droppedItemPOJOPK.getRefItemPOJOPK();
  String actionName=""String_Node_Str"";
  String userName=rolesFilter(refItemPOJOPK,actionName,""String_Node_Str"");
  universeFilter(refItemPOJOPK);
  String sourceItemRevision=droppedItemPOJOPK.getRevisionId();
  XmlServerSLWrapperLocal server=obtainXmlServerSLWrapperLocal();
  try {
    String partPath=droppedItemPOJOPK.getPartPath();
    if (partPath == null || partPath.length() == 0)     return null;
    StringBuffer getXmlDocument=new StringBuffer();
    if (partPath.equals(""String_Node_Str"")) {
      String doc=server.getDocumentAsString(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK(),null);
      getXmlDocument.append(doc);
    }
 else {
      String query=""String_Node_Str"" + droppedItemPOJOPK.getUniquePK() + ""String_Node_Str"";
      ArrayList<String> results=server.runQuery(null,""String_Node_Str"",query,null);
      if (results == null || results.size() == 0)       return null;
      for (int i=0; i < results.size(); i++) {
        getXmlDocument.append(results.get(i));
      }
    }
    if (getXmlDocument.toString() == null || getXmlDocument.toString().length() == 0)     return null;
    String bakDoc=""String_Node_Str"";
    if (partPath.equals(""String_Node_Str"")) {
      bakDoc=getXmlDocument.toString();
    }
 else {
      bakDoc=server.getDocumentAsString(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID(),null);
    }
    if (partPath.equals(""String_Node_Str"")) {
      DroppedItemPOJO droppedItemPOJO=(DroppedItemPOJO)Unmarshaller.unmarshal(DroppedItemPOJO.class,new InputSource(new StringReader(getXmlDocument.toString())));
      server.putDocumentFromString(droppedItemPOJO.getProjection(),refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
 else {
      Document partDom=Util.parse(getXmlDocument.toString());
      String insertText=partDom.getFirstChild().getTextContent();
      Node inserNode=Util.parse(insertText).getFirstChild();
      if (bakDoc == null)       throw new XtentisException(""String_Node_Str"");
      Document targetDom=Util.parse(bakDoc);
      String xPath=""String_Node_Str"" + parserParentPartPath(partPath);
      Node singleParentNode=null;
      NodeList parentNodeList=Util.getNodeList(targetDom,xPath);
      if (parentNodeList.getLength() > 0) {
        singleParentNode=parentNodeList.item(0);
      }
      if (singleParentNode != null) {
        Node importNode=targetDom.importNode(inserNode,true);
        singleParentNode.appendChild(importNode);
      }
      String targetDomXml=Util.nodeToString(targetDom);
      ItemPOJO itemPOJO=ItemPOJO.parse(targetDomXml);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null) {
          Element projection=null;
          try {
            projection=itemPOJO.getProjection();
          }
 catch (          Exception e) {
            throw new XtentisException(""String_Node_Str"");
          }
          Util.validate(projection,dataModelPOJO.getSchema());
        }
      }
      server.putDocumentFromString(targetDomXml,refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
    long res=server.deleteDocument(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK());
    if (res == -1) {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID());
      }
 else {
        server.putDocumentFromString(bakDoc,refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
      }
    }
    return refItemPOJOPK;
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + actionName + ""String_Node_Str""+ droppedItemPOJOPK.getUniquePK()+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(DroppedItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}",0.9497431315613134
149260,"/** 
 * @param itemPOJOPK
 * @param partPath
 * @return DroppedItemPOJOPK
 * @throws XtentisException drop an item to items-trash
 */
public static DroppedItemPOJOPK drop(ItemPOJOPK itemPOJOPK,String partPath) throws XtentisException {
  if (itemPOJOPK == null)   return null;
  if (partPath == null || partPath.equals(""String_Node_Str""))   partPath=""String_Node_Str"";
  boolean authorized=false;
  LocalUser user=LocalUser.getLocalUser();
  if (""String_Node_Str"".equals(user.getUsername()) || LocalUser.UNAUTHENTICATED_USER.equals(user.getUsername())) {
    authorized=true;
  }
 else   if (user.userCanWrite(ItemPOJO.class,itemPOJOPK.getUniqueID())) {
    authorized=true;
  }
  if (!authorized) {
    String err=""String_Node_Str"" + ""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ itemPOJOPK.getUniqueID()+ ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ObjectPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String userName=user.getUsername();
  UniversePOJO universe=LocalUser.getLocalUser().getUniverse();
  if (universe == null) {
    String err=""String_Node_Str"" + LocalUser.getLocalUser().getUsername() + ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String revisionID=universe.getConceptRevisionID(itemPOJOPK.getConceptName());
  XmlServerSLWrapperLocal server;
  try {
    server=((XmlServerSLWrapperLocalHome)new InitialContext().lookup(XmlServerSLWrapperLocalHome.JNDI_NAME)).create();
  }
 catch (  Exception e) {
    String err=""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
  try {
    if (ObjectPOJO.load(null,DataClusterPOJO.class,new DataClusterPOJOPK(""String_Node_Str"")) == null) {
      DataClusterPOJO dataCluster=new DataClusterPOJO(""String_Node_Str"",""String_Node_Str"",null);
      ObjectPOJOPK pk=dataCluster.store(null);
      if (pk == null)       throw new XtentisException(""String_Node_Str"");
      boolean exist=false;
      String[] clusters=server.getAllClusters(null);
      if (clusters != null) {
        exist=Arrays.asList(clusters).contains(pk.getUniqueId());
      }
      if (!exist)       server.createCluster(null,pk.getUniqueId());
      org.apache.log4j.Logger.getLogger(ItemPOJO.class).info(""String_Node_Str"");
    }
    String dataClusterName=itemPOJOPK.getDataClusterPOJOPK().getUniqueId();
    String uniqueID=getFilename(itemPOJOPK);
    StringBuffer xmlDocument=new StringBuffer();
    Document sourceDoc=null;
    NodeList toDeleteNodeList=null;
    String xml=server.getDocumentAsString(revisionID,dataClusterName,uniqueID,null);
    if (xml == null)     return null;
    if (partPath.equals(""String_Node_Str"")) {
      xmlDocument.append(xml);
    }
 else {
      String xPath=""String_Node_Str"" + partPath;
      sourceDoc=Util.parse(xml);
      toDeleteNodeList=Util.getNodeList(sourceDoc,xPath);
      if (toDeleteNodeList.getLength() == 0)       throw new XtentisException(""String_Node_Str"");
      for (int i=0; i < toDeleteNodeList.getLength(); i++) {
        Node node=toDeleteNodeList.item(i);
        xmlDocument.append(Util.nodeToString(node));
      }
    }
    if (partPath.equals(""String_Node_Str"")) {
    }
 else {
      if (toDeleteNodeList != null) {
        Node lastParentNode=null;
        Node formatSiblingNode=null;
        for (int i=0; i < toDeleteNodeList.getLength(); i++) {
          Node node=toDeleteNodeList.item(i);
          lastParentNode=node.getParentNode();
          formatSiblingNode=node.getNextSibling();
          if (lastParentNode != null) {
            lastParentNode.removeChild(node);
          }
          if (formatSiblingNode != null && formatSiblingNode.getNodeValue() != null && formatSiblingNode.getNodeValue().matches(""String_Node_Str"")) {
            lastParentNode.removeChild(formatSiblingNode);
          }
        }
      }
      String leftSourceDoc=Util.nodeToString(sourceDoc);
      ItemPOJO itemPOJO=parse(leftSourceDoc);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null)         Util.validate(sourceDoc.getDocumentElement(),dataModelPOJO.getSchema());
      }
    }
    DroppedItemPOJO droppedItemPOJO=new DroppedItemPOJO(revisionID,itemPOJOPK.getDataClusterPOJOPK(),uniqueID,itemPOJOPK.getConceptName(),itemPOJOPK.getIds(),partPath,xmlDocument.toString(),userName,new Long(System.currentTimeMillis()));
    StringWriter sw=new StringWriter();
    Marshaller.marshal(droppedItemPOJO,sw);
    long res=server.putDocumentFromString(sw.toString(),droppedItemPOJO.obtainDroppedItemPK().getUniquePK(),""String_Node_Str"",null);
    if (res == -1)     return null;
    try {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(revisionID,dataClusterName,uniqueID);
      }
 else {
        server.putDocumentFromString(Util.nodeToString(sourceDoc),uniqueID,dataClusterName,revisionID);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      server.deleteDocument(null,""String_Node_Str"",droppedItemPOJO.obtainDroppedItemPK().getUniquePK());
      return null;
    }
    return droppedItemPOJO.obtainDroppedItemPK();
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + itemPOJOPK.getUniqueID() + ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}","/** 
 * @param itemPOJOPK
 * @param partPath
 * @return DroppedItemPOJOPK
 * @throws XtentisException drop an item to items-trash
 */
public static DroppedItemPOJOPK drop(ItemPOJOPK itemPOJOPK,String partPath) throws XtentisException {
  if (itemPOJOPK == null)   return null;
  if (partPath == null || partPath.equals(""String_Node_Str""))   partPath=""String_Node_Str"";
  boolean authorized=false;
  LocalUser user=LocalUser.getLocalUser();
  if (""String_Node_Str"".equals(user.getUsername()) || LocalUser.UNAUTHENTICATED_USER.equals(user.getUsername())) {
    authorized=true;
  }
 else   if (user.userCanWrite(ItemPOJO.class,itemPOJOPK.getUniqueID())) {
    authorized=true;
  }
  if (!authorized) {
    String err=""String_Node_Str"" + ""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ itemPOJOPK.getUniqueID()+ ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ObjectPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String userName=user.getUsername();
  UniversePOJO universe=LocalUser.getLocalUser().getUniverse();
  if (universe == null) {
    String err=""String_Node_Str"" + LocalUser.getLocalUser().getUsername() + ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String revisionID=universe.getConceptRevisionID(itemPOJOPK.getConceptName());
  XmlServerSLWrapperLocal server;
  try {
    server=((XmlServerSLWrapperLocalHome)new InitialContext().lookup(XmlServerSLWrapperLocalHome.JNDI_NAME)).create();
  }
 catch (  Exception e) {
    String err=""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
  try {
    if (ObjectPOJO.load(null,DataClusterPOJO.class,new DataClusterPOJOPK(""String_Node_Str"")) == null) {
      DataClusterPOJO dataCluster=new DataClusterPOJO(""String_Node_Str"",""String_Node_Str"",null);
      ObjectPOJOPK pk=dataCluster.store(null);
      if (pk == null)       throw new XtentisException(""String_Node_Str"");
      boolean exist=false;
      String[] clusters=server.getAllClusters(null);
      if (clusters != null) {
        exist=Arrays.asList(clusters).contains(pk.getUniqueId());
      }
      if (!exist)       server.createCluster(null,pk.getUniqueId());
      org.apache.log4j.Logger.getLogger(ItemPOJO.class).info(""String_Node_Str"");
    }
    String dataClusterName=itemPOJOPK.getDataClusterPOJOPK().getUniqueId();
    String uniqueID=getFilename(itemPOJOPK);
    StringBuffer xmlDocument=new StringBuffer();
    Document sourceDoc=null;
    NodeList toDeleteNodeList=null;
    String xml=server.getDocumentAsString(revisionID,dataClusterName,uniqueID,null);
    if (xml == null)     return null;
    if (partPath.equals(""String_Node_Str"")) {
      xmlDocument.append(xml);
    }
 else {
      String xPath=""String_Node_Str"" + partPath;
      sourceDoc=Util.parse(xml);
      toDeleteNodeList=Util.getNodeList(sourceDoc,xPath);
      if (toDeleteNodeList.getLength() == 0)       throw new XtentisException(""String_Node_Str"");
      for (int i=0; i < toDeleteNodeList.getLength(); i++) {
        Node node=toDeleteNodeList.item(i);
        xmlDocument.append(Util.nodeToString(node));
      }
    }
    if (partPath.equals(""String_Node_Str"")) {
    }
 else {
      if (toDeleteNodeList != null) {
        Node lastParentNode=null;
        Node formatSiblingNode=null;
        for (int i=0; i < toDeleteNodeList.getLength(); i++) {
          Node node=toDeleteNodeList.item(i);
          lastParentNode=node.getParentNode();
          formatSiblingNode=node.getNextSibling();
          if (lastParentNode != null) {
            lastParentNode.removeChild(node);
          }
          if (formatSiblingNode != null && formatSiblingNode.getNodeValue() != null && formatSiblingNode.getNodeValue().matches(""String_Node_Str"")) {
            lastParentNode.removeChild(formatSiblingNode);
          }
        }
      }
      String leftSourceDoc=Util.nodeToString(sourceDoc);
      ItemPOJO itemPOJO=parse(leftSourceDoc);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null) {
          Element projection=null;
          try {
            projection=itemPOJO.getProjection();
          }
 catch (          Exception e) {
            throw new XtentisException(""String_Node_Str"");
          }
          if (projection != null)           Util.validate(itemPOJO.getProjection(),dataModelPOJO.getSchema());
        }
      }
    }
    DroppedItemPOJO droppedItemPOJO=new DroppedItemPOJO(revisionID,itemPOJOPK.getDataClusterPOJOPK(),uniqueID,itemPOJOPK.getConceptName(),itemPOJOPK.getIds(),partPath,xmlDocument.toString(),userName,new Long(System.currentTimeMillis()));
    StringWriter sw=new StringWriter();
    Marshaller.marshal(droppedItemPOJO,sw);
    long res=server.putDocumentFromString(sw.toString(),droppedItemPOJO.obtainDroppedItemPK().getUniquePK(),""String_Node_Str"",null);
    if (res == -1)     return null;
    try {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(revisionID,dataClusterName,uniqueID);
      }
 else {
        server.putDocumentFromString(Util.nodeToString(sourceDoc),uniqueID,dataClusterName,revisionID);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      server.deleteDocument(null,""String_Node_Str"",droppedItemPOJO.obtainDroppedItemPK().getUniquePK());
      return null;
    }
    return droppedItemPOJO.obtainDroppedItemPK();
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + itemPOJOPK.getUniqueID() + ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}",0.9733988478481872
149261,"/** 
 * @param droppedItemPOJOPK
 * @return ItemPOJOPK
 * @throws XtentisException recover dropped item
 */
public static ItemPOJOPK recover(DroppedItemPOJOPK droppedItemPOJOPK) throws XtentisException {
  if (droppedItemPOJOPK == null)   return null;
  ItemPOJOPK refItemPOJOPK=droppedItemPOJOPK.getRefItemPOJOPK();
  String actionName=""String_Node_Str"";
  String userName=rolesFilter(refItemPOJOPK,actionName,""String_Node_Str"");
  universeFilter(refItemPOJOPK);
  String sourceItemRevision=droppedItemPOJOPK.getRevisionId();
  XmlServerSLWrapperLocal server=obtainXmlServerSLWrapperLocal();
  try {
    String partPath=droppedItemPOJOPK.getPartPath();
    if (partPath == null || partPath.length() == 0)     return null;
    StringBuffer getXmlDocument=new StringBuffer();
    if (partPath.equals(""String_Node_Str"")) {
      String doc=server.getDocumentAsString(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK(),null);
      getXmlDocument.append(doc);
    }
 else {
      String query=""String_Node_Str"" + droppedItemPOJOPK.getUniquePK() + ""String_Node_Str"";
      ArrayList<String> results=server.runQuery(null,""String_Node_Str"",query,null);
      if (results == null || results.size() == 0)       return null;
      for (int i=0; i < results.size(); i++) {
        getXmlDocument.append(results.get(i));
      }
    }
    if (getXmlDocument.toString() == null || getXmlDocument.toString().length() == 0)     return null;
    String bakDoc=""String_Node_Str"";
    if (partPath.equals(""String_Node_Str"")) {
      bakDoc=getXmlDocument.toString();
    }
 else {
      bakDoc=server.getDocumentAsString(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID(),null);
    }
    if (partPath.equals(""String_Node_Str"")) {
      DroppedItemPOJO droppedItemPOJO=(DroppedItemPOJO)Unmarshaller.unmarshal(DroppedItemPOJO.class,new InputSource(new StringReader(getXmlDocument.toString())));
      server.putDocumentFromString(droppedItemPOJO.getProjection(),refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
 else {
      Document partDom=Util.parse(getXmlDocument.toString());
      String insertText=partDom.getFirstChild().getTextContent();
      Node inserNode=Util.parse(insertText).getFirstChild();
      if (bakDoc == null)       throw new XtentisException(""String_Node_Str"");
      Document targetDom=Util.parse(bakDoc);
      String xPath=""String_Node_Str"" + parserParentPartPath(partPath);
      Node singleParentNode=null;
      NodeList parentNodeList=Util.getNodeList(targetDom,xPath);
      if (parentNodeList.getLength() > 0) {
        singleParentNode=parentNodeList.item(0);
      }
      if (singleParentNode != null) {
        Node importNode=targetDom.importNode(inserNode,true);
        singleParentNode.appendChild(importNode);
      }
      ItemPOJO itemPOJO=ItemPOJO.parse(bakDoc);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null)         Util.validate(targetDom.getDocumentElement(),dataModelPOJO.getSchema());
      }
      server.putDocumentFromString(Util.nodeToString(targetDom),refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
    long res=server.deleteDocument(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK());
    if (res == -1) {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID());
      }
 else {
        server.putDocumentFromString(bakDoc,refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
      }
    }
    return refItemPOJOPK;
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + actionName + ""String_Node_Str""+ droppedItemPOJOPK.getUniquePK()+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(DroppedItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}","/** 
 * @param droppedItemPOJOPK
 * @return ItemPOJOPK
 * @throws XtentisException recover dropped item
 */
public static ItemPOJOPK recover(DroppedItemPOJOPK droppedItemPOJOPK) throws XtentisException {
  if (droppedItemPOJOPK == null)   return null;
  ItemPOJOPK refItemPOJOPK=droppedItemPOJOPK.getRefItemPOJOPK();
  String actionName=""String_Node_Str"";
  String userName=rolesFilter(refItemPOJOPK,actionName,""String_Node_Str"");
  universeFilter(refItemPOJOPK);
  String sourceItemRevision=droppedItemPOJOPK.getRevisionId();
  XmlServerSLWrapperLocal server=obtainXmlServerSLWrapperLocal();
  try {
    String partPath=droppedItemPOJOPK.getPartPath();
    if (partPath == null || partPath.length() == 0)     return null;
    StringBuffer getXmlDocument=new StringBuffer();
    if (partPath.equals(""String_Node_Str"")) {
      String doc=server.getDocumentAsString(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK(),null);
      getXmlDocument.append(doc);
    }
 else {
      String query=""String_Node_Str"" + droppedItemPOJOPK.getUniquePK() + ""String_Node_Str"";
      ArrayList<String> results=server.runQuery(null,""String_Node_Str"",query,null);
      if (results == null || results.size() == 0)       return null;
      for (int i=0; i < results.size(); i++) {
        getXmlDocument.append(results.get(i));
      }
    }
    if (getXmlDocument.toString() == null || getXmlDocument.toString().length() == 0)     return null;
    String bakDoc=""String_Node_Str"";
    if (partPath.equals(""String_Node_Str"")) {
      bakDoc=getXmlDocument.toString();
    }
 else {
      bakDoc=server.getDocumentAsString(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID(),null);
    }
    if (partPath.equals(""String_Node_Str"")) {
      DroppedItemPOJO droppedItemPOJO=(DroppedItemPOJO)Unmarshaller.unmarshal(DroppedItemPOJO.class,new InputSource(new StringReader(getXmlDocument.toString())));
      server.putDocumentFromString(droppedItemPOJO.getProjection(),refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
 else {
      Document partDom=Util.parse(getXmlDocument.toString());
      String insertText=partDom.getFirstChild().getTextContent();
      Node inserNode=Util.parse(insertText).getFirstChild();
      if (bakDoc == null)       throw new XtentisException(""String_Node_Str"");
      Document targetDom=Util.parse(bakDoc);
      String xPath=""String_Node_Str"" + parserParentPartPath(partPath);
      Node singleParentNode=null;
      NodeList parentNodeList=Util.getNodeList(targetDom,xPath);
      if (parentNodeList.getLength() > 0) {
        singleParentNode=parentNodeList.item(0);
      }
      if (singleParentNode != null) {
        Node importNode=targetDom.importNode(inserNode,true);
        singleParentNode.appendChild(importNode);
      }
      String targetDomXml=Util.nodeToString(targetDom);
      ItemPOJO itemPOJO=ItemPOJO.parse(targetDomXml);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null) {
          Element projection=null;
          try {
            projection=itemPOJO.getProjection();
          }
 catch (          Exception e) {
            throw new XtentisException(""String_Node_Str"");
          }
          Util.validate(projection,dataModelPOJO.getSchema());
        }
      }
      server.putDocumentFromString(targetDomXml,refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
    long res=server.deleteDocument(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK());
    if (res == -1) {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID());
      }
 else {
        server.putDocumentFromString(bakDoc,refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
      }
    }
    return refItemPOJOPK;
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + actionName + ""String_Node_Str""+ droppedItemPOJOPK.getUniquePK()+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(DroppedItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}",0.9497431315613134
149262,"/** 
 * @param itemPOJOPK
 * @param partPath
 * @return DroppedItemPOJOPK
 * @throws XtentisException drop an item to items-trash
 */
public static DroppedItemPOJOPK drop(ItemPOJOPK itemPOJOPK,String partPath) throws XtentisException {
  if (itemPOJOPK == null)   return null;
  if (partPath == null || partPath.equals(""String_Node_Str""))   partPath=""String_Node_Str"";
  boolean authorized=false;
  LocalUser user=LocalUser.getLocalUser();
  if (""String_Node_Str"".equals(user.getUsername()) || LocalUser.UNAUTHENTICATED_USER.equals(user.getUsername())) {
    authorized=true;
  }
 else   if (user.userCanWrite(ItemPOJO.class,itemPOJOPK.getUniqueID())) {
    authorized=true;
  }
  if (!authorized) {
    String err=""String_Node_Str"" + ""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ itemPOJOPK.getUniqueID()+ ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ObjectPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String userName=user.getUsername();
  UniversePOJO universe=LocalUser.getLocalUser().getUniverse();
  if (universe == null) {
    String err=""String_Node_Str"" + LocalUser.getLocalUser().getUsername() + ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String revisionID=universe.getConceptRevisionID(itemPOJOPK.getConceptName());
  XmlServerSLWrapperLocal server;
  try {
    server=((XmlServerSLWrapperLocalHome)new InitialContext().lookup(XmlServerSLWrapperLocalHome.JNDI_NAME)).create();
  }
 catch (  Exception e) {
    String err=""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
  try {
    if (ObjectPOJO.load(null,DataClusterPOJO.class,new DataClusterPOJOPK(""String_Node_Str"")) == null) {
      DataClusterPOJO dataCluster=new DataClusterPOJO(""String_Node_Str"",""String_Node_Str"",null);
      ObjectPOJOPK pk=dataCluster.store(null);
      if (pk == null)       throw new XtentisException(""String_Node_Str"");
      boolean exist=false;
      String[] clusters=server.getAllClusters(null);
      if (clusters != null) {
        exist=Arrays.asList(clusters).contains(pk.getUniqueId());
      }
      if (!exist)       server.createCluster(null,pk.getUniqueId());
      org.apache.log4j.Logger.getLogger(ItemPOJO.class).info(""String_Node_Str"");
    }
    String dataClusterName=itemPOJOPK.getDataClusterPOJOPK().getUniqueId();
    String uniqueID=getFilename(itemPOJOPK);
    StringBuffer xmlDocument=new StringBuffer();
    Document sourceDoc=null;
    NodeList toDeleteNodeList=null;
    String xml=server.getDocumentAsString(revisionID,dataClusterName,uniqueID,null);
    if (xml == null)     return null;
    if (partPath.equals(""String_Node_Str"")) {
      xmlDocument.append(xml);
    }
 else {
      String xPath=""String_Node_Str"" + partPath;
      sourceDoc=Util.parse(xml);
      toDeleteNodeList=Util.getNodeList(sourceDoc,xPath);
      if (toDeleteNodeList.getLength() == 0)       throw new XtentisException(""String_Node_Str"");
      for (int i=0; i < toDeleteNodeList.getLength(); i++) {
        Node node=toDeleteNodeList.item(i);
        xmlDocument.append(Util.nodeToString(node));
      }
    }
    if (partPath.equals(""String_Node_Str"")) {
    }
 else {
      if (toDeleteNodeList != null) {
        Node lastParentNode=null;
        Node formatSiblingNode=null;
        for (int i=0; i < toDeleteNodeList.getLength(); i++) {
          Node node=toDeleteNodeList.item(i);
          lastParentNode=node.getParentNode();
          formatSiblingNode=node.getNextSibling();
          if (lastParentNode != null) {
            lastParentNode.removeChild(node);
          }
          if (formatSiblingNode != null && formatSiblingNode.getNodeValue() != null && formatSiblingNode.getNodeValue().matches(""String_Node_Str"")) {
            lastParentNode.removeChild(formatSiblingNode);
          }
        }
      }
      String leftSourceDoc=Util.nodeToString(sourceDoc);
      ItemPOJO itemPOJO=parse(leftSourceDoc);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null)         Util.validate(sourceDoc.getDocumentElement(),dataModelPOJO.getSchema());
      }
    }
    DroppedItemPOJO droppedItemPOJO=new DroppedItemPOJO(revisionID,itemPOJOPK.getDataClusterPOJOPK(),uniqueID,itemPOJOPK.getConceptName(),itemPOJOPK.getIds(),partPath,xmlDocument.toString(),userName,new Long(System.currentTimeMillis()));
    StringWriter sw=new StringWriter();
    Marshaller.marshal(droppedItemPOJO,sw);
    long res=server.putDocumentFromString(sw.toString(),droppedItemPOJO.obtainDroppedItemPK().getUniquePK(),""String_Node_Str"",null);
    if (res == -1)     return null;
    try {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(revisionID,dataClusterName,uniqueID);
      }
 else {
        server.putDocumentFromString(Util.nodeToString(sourceDoc),uniqueID,dataClusterName,revisionID);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      server.deleteDocument(null,""String_Node_Str"",droppedItemPOJO.obtainDroppedItemPK().getUniquePK());
      return null;
    }
    return droppedItemPOJO.obtainDroppedItemPK();
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + itemPOJOPK.getUniqueID() + ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}","/** 
 * @param itemPOJOPK
 * @param partPath
 * @return DroppedItemPOJOPK
 * @throws XtentisException drop an item to items-trash
 */
public static DroppedItemPOJOPK drop(ItemPOJOPK itemPOJOPK,String partPath) throws XtentisException {
  if (itemPOJOPK == null)   return null;
  if (partPath == null || partPath.equals(""String_Node_Str""))   partPath=""String_Node_Str"";
  boolean authorized=false;
  LocalUser user=LocalUser.getLocalUser();
  if (""String_Node_Str"".equals(user.getUsername()) || LocalUser.UNAUTHENTICATED_USER.equals(user.getUsername())) {
    authorized=true;
  }
 else   if (user.userCanWrite(ItemPOJO.class,itemPOJOPK.getUniqueID())) {
    authorized=true;
  }
  if (!authorized) {
    String err=""String_Node_Str"" + ""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ itemPOJOPK.getUniqueID()+ ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ObjectPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String userName=user.getUsername();
  UniversePOJO universe=LocalUser.getLocalUser().getUniverse();
  if (universe == null) {
    String err=""String_Node_Str"" + LocalUser.getLocalUser().getUsername() + ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String revisionID=universe.getConceptRevisionID(itemPOJOPK.getConceptName());
  XmlServerSLWrapperLocal server;
  try {
    server=((XmlServerSLWrapperLocalHome)new InitialContext().lookup(XmlServerSLWrapperLocalHome.JNDI_NAME)).create();
  }
 catch (  Exception e) {
    String err=""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
  try {
    if (ObjectPOJO.load(null,DataClusterPOJO.class,new DataClusterPOJOPK(""String_Node_Str"")) == null) {
      DataClusterPOJO dataCluster=new DataClusterPOJO(""String_Node_Str"",""String_Node_Str"",null);
      ObjectPOJOPK pk=dataCluster.store(null);
      if (pk == null)       throw new XtentisException(""String_Node_Str"");
      boolean exist=false;
      String[] clusters=server.getAllClusters(null);
      if (clusters != null) {
        exist=Arrays.asList(clusters).contains(pk.getUniqueId());
      }
      if (!exist)       server.createCluster(null,pk.getUniqueId());
      org.apache.log4j.Logger.getLogger(ItemPOJO.class).info(""String_Node_Str"");
    }
    String dataClusterName=itemPOJOPK.getDataClusterPOJOPK().getUniqueId();
    String uniqueID=getFilename(itemPOJOPK);
    StringBuffer xmlDocument=new StringBuffer();
    Document sourceDoc=null;
    NodeList toDeleteNodeList=null;
    String xml=server.getDocumentAsString(revisionID,dataClusterName,uniqueID,null);
    if (xml == null)     return null;
    if (partPath.equals(""String_Node_Str"")) {
      xmlDocument.append(xml);
    }
 else {
      String xPath=""String_Node_Str"" + partPath;
      sourceDoc=Util.parse(xml);
      toDeleteNodeList=Util.getNodeList(sourceDoc,xPath);
      if (toDeleteNodeList.getLength() == 0)       throw new XtentisException(""String_Node_Str"");
      for (int i=0; i < toDeleteNodeList.getLength(); i++) {
        Node node=toDeleteNodeList.item(i);
        xmlDocument.append(Util.nodeToString(node));
      }
    }
    if (partPath.equals(""String_Node_Str"")) {
    }
 else {
      if (toDeleteNodeList != null) {
        Node lastParentNode=null;
        Node formatSiblingNode=null;
        for (int i=0; i < toDeleteNodeList.getLength(); i++) {
          Node node=toDeleteNodeList.item(i);
          lastParentNode=node.getParentNode();
          formatSiblingNode=node.getNextSibling();
          if (lastParentNode != null) {
            lastParentNode.removeChild(node);
          }
          if (formatSiblingNode != null && formatSiblingNode.getNodeValue() != null && formatSiblingNode.getNodeValue().matches(""String_Node_Str"")) {
            lastParentNode.removeChild(formatSiblingNode);
          }
        }
      }
      String leftSourceDoc=Util.nodeToString(sourceDoc);
      ItemPOJO itemPOJO=parse(leftSourceDoc);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null) {
          Element projection=null;
          try {
            projection=itemPOJO.getProjection();
          }
 catch (          Exception e) {
            throw new XtentisException(""String_Node_Str"");
          }
          if (projection != null)           Util.validate(itemPOJO.getProjection(),dataModelPOJO.getSchema());
        }
      }
    }
    DroppedItemPOJO droppedItemPOJO=new DroppedItemPOJO(revisionID,itemPOJOPK.getDataClusterPOJOPK(),uniqueID,itemPOJOPK.getConceptName(),itemPOJOPK.getIds(),partPath,xmlDocument.toString(),userName,new Long(System.currentTimeMillis()));
    StringWriter sw=new StringWriter();
    Marshaller.marshal(droppedItemPOJO,sw);
    long res=server.putDocumentFromString(sw.toString(),droppedItemPOJO.obtainDroppedItemPK().getUniquePK(),""String_Node_Str"",null);
    if (res == -1)     return null;
    try {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(revisionID,dataClusterName,uniqueID);
      }
 else {
        server.putDocumentFromString(Util.nodeToString(sourceDoc),uniqueID,dataClusterName,revisionID);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      server.deleteDocument(null,""String_Node_Str"",droppedItemPOJO.obtainDroppedItemPK().getUniquePK());
      return null;
    }
    return droppedItemPOJO.obtainDroppedItemPK();
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + itemPOJOPK.getUniqueID() + ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}",0.9733988478481872
149263,"/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,concept + ""String_Node_Str"" + conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9930642006046594
149264,"/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,concept + ""String_Node_Str"" + conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9922388059701492
149265,"/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,concept + ""String_Node_Str"" + conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9930642006046594
149266,"/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,concept + ""String_Node_Str"" + conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9922388059701492
149267,"/** 
 * Executes a plugin
 * @param globalContext
 * @param pluginNumber
 * @throws XtentisException
 */
protected void executePlugin(TransformerGlobalContext globalContext,int pluginNumber) throws XtentisException {
  TransformerV2POJO transformerPOJO=globalContext.getTransformerPOJO();
  TransformerProcessStep processStep=transformerPOJO.getProcessSteps().get(pluginNumber);
  TransformerPluginContext pluginContext=globalContext.getTransformerPluginContext(pluginNumber);
  HashMap<Integer,TransformerPluginV2LocalInterface> instantiatedPlugins=globalContext.getInstantiatedPlugins();
  String parameters=processStep.getCompiledParameters();
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ processStep.getPluginJNDI());
  TransformerPluginV2LocalInterface plugin=null;
  if ((plugin=instantiatedPlugins.get(new Integer(pluginNumber))) == null) {
    try {
      plugin=getPlugin(processStep.getPluginJNDI());
      plugin.setGlobalContext(globalContext);
      plugin.init(globalContext.getTransformerPluginContext(pluginNumber),parameters);
    }
 catch (    XtentisException e) {
      throw (e);
    }
    instantiatedPlugins.put(new Integer(pluginNumber),plugin);
  }
  try {
    ArrayList<TransformerPluginVariableDescriptor> descriptors=plugin.getInputVariableDescriptors(""String_Node_Str"");
    for (Iterator<TransformerPluginVariableDescriptor> iter=descriptors.iterator(); iter.hasNext(); ) {
      TransformerPluginVariableDescriptor descriptor=iter.next();
      TypedContent content=getMappedInputVariable(descriptor,processStep,globalContext);
      if (content instanceof TypedContent_Do_Not_Process) {
        String msg=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ descriptor.getVariableName()+ ""String_Node_Str"";
        org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + msg);
        return;
      }
      pluginContext.put(descriptor.getVariableName(),content);
    }
  }
 catch (  XtentisException e) {
    throw (e);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(""String_Node_Str"" + err);
    throw new XtentisException(err);
  }
  try {
    pluginContext.setPluginCallBack(this);
    plugin.execute(pluginContext);
  }
 catch (  XtentisException e) {
    throw (e);
  }
}","/** 
 * Executes a plugin
 * @param globalContext
 * @param pluginNumber
 * @throws XtentisException
 */
protected void executePlugin(TransformerGlobalContext globalContext,int pluginNumber) throws XtentisException {
  TransformerV2POJO transformerPOJO=globalContext.getTransformerPOJO();
  TransformerProcessStep processStep=transformerPOJO.getProcessSteps().get(pluginNumber);
  TransformerPluginContext pluginContext=globalContext.getTransformerPluginContext(pluginNumber);
  HashMap<Integer,TransformerPluginV2LocalInterface> instantiatedPlugins=globalContext.getInstantiatedPlugins();
  String parameters=processStep.getCompiledParameters();
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ processStep.getPluginJNDI());
  TransformerPluginV2LocalInterface plugin=null;
  if ((plugin=instantiatedPlugins.get(new Integer(pluginNumber))) == null) {
    try {
      plugin=getPlugin(processStep.getPluginJNDI());
      plugin.setGlobalContext(globalContext);
      plugin.init(globalContext.getTransformerPluginContext(pluginNumber),parameters);
    }
 catch (    XtentisException e) {
      throw (e);
    }
    instantiatedPlugins.put(new Integer(pluginNumber),plugin);
  }
  try {
    ArrayList<TransformerPluginVariableDescriptor> descriptors=plugin.getInputVariableDescriptors(""String_Node_Str"");
    for (Iterator<TransformerPluginVariableDescriptor> iter=descriptors.iterator(); iter.hasNext(); ) {
      TransformerPluginVariableDescriptor descriptor=iter.next();
      TypedContent content=getMappedInputVariable(descriptor,processStep,globalContext);
      if (content instanceof TypedContent_Do_Not_Process) {
        String msg=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ descriptor.getVariableName()+ ""String_Node_Str"";
        org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + msg);
        return;
      }
      pluginContext.put(descriptor.getVariableName(),content);
    }
  }
 catch (  XtentisException e) {
    throw (e);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(""String_Node_Str"" + err);
    throw new XtentisException(err);
  }
  try {
    pluginContext.setPluginCallBack(this);
    if (!processStep.isDisabled()) {
      plugin.execute(pluginContext);
    }
 else {
      pluginContext.getPluginCallBack().contentIsReady(pluginContext);
    }
  }
 catch (  XtentisException e) {
    throw (e);
  }
}",0.976508854354897
149268,"public void setProcessStep(WSTransformerProcessStep processStep,int index){
  this.processStep=processStep;
  availableVariables.clear();
  for (int i=0; i <= index; i++) {
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getInputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getOutputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  refreshViewers();
  refreshCombo();
}","public void setProcessStep(WSTransformerProcessStep processStep,int index){
  this.processStep=processStep;
  availableVariables.clear();
  for (int i=0; i <= index; i++) {
    if (transformer.getProcessSteps()[i].getDisabled())     continue;
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getInputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getOutputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  refreshViewers();
  refreshCombo();
}",0.9507042253521126
149269,"/** 
 * Executes a plugin
 * @param globalContext
 * @param pluginNumber
 * @throws XtentisException
 */
protected void executePlugin(TransformerGlobalContext globalContext,int pluginNumber) throws XtentisException {
  TransformerV2POJO transformerPOJO=globalContext.getTransformerPOJO();
  TransformerProcessStep processStep=transformerPOJO.getProcessSteps().get(pluginNumber);
  TransformerPluginContext pluginContext=globalContext.getTransformerPluginContext(pluginNumber);
  HashMap<Integer,TransformerPluginV2LocalInterface> instantiatedPlugins=globalContext.getInstantiatedPlugins();
  String parameters=processStep.getCompiledParameters();
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ processStep.getPluginJNDI());
  TransformerPluginV2LocalInterface plugin=null;
  if ((plugin=instantiatedPlugins.get(new Integer(pluginNumber))) == null) {
    try {
      plugin=getPlugin(processStep.getPluginJNDI());
      plugin.setGlobalContext(globalContext);
      plugin.init(globalContext.getTransformerPluginContext(pluginNumber),parameters);
    }
 catch (    XtentisException e) {
      throw (e);
    }
    instantiatedPlugins.put(new Integer(pluginNumber),plugin);
  }
  try {
    ArrayList<TransformerPluginVariableDescriptor> descriptors=plugin.getInputVariableDescriptors(""String_Node_Str"");
    for (Iterator<TransformerPluginVariableDescriptor> iter=descriptors.iterator(); iter.hasNext(); ) {
      TransformerPluginVariableDescriptor descriptor=iter.next();
      TypedContent content=getMappedInputVariable(descriptor,processStep,globalContext);
      if (content instanceof TypedContent_Do_Not_Process) {
        String msg=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ descriptor.getVariableName()+ ""String_Node_Str"";
        org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + msg);
        return;
      }
      pluginContext.put(descriptor.getVariableName(),content);
    }
  }
 catch (  XtentisException e) {
    throw (e);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(""String_Node_Str"" + err);
    throw new XtentisException(err);
  }
  try {
    pluginContext.setPluginCallBack(this);
    plugin.execute(pluginContext);
  }
 catch (  XtentisException e) {
    throw (e);
  }
}","/** 
 * Executes a plugin
 * @param globalContext
 * @param pluginNumber
 * @throws XtentisException
 */
protected void executePlugin(TransformerGlobalContext globalContext,int pluginNumber) throws XtentisException {
  TransformerV2POJO transformerPOJO=globalContext.getTransformerPOJO();
  TransformerProcessStep processStep=transformerPOJO.getProcessSteps().get(pluginNumber);
  TransformerPluginContext pluginContext=globalContext.getTransformerPluginContext(pluginNumber);
  HashMap<Integer,TransformerPluginV2LocalInterface> instantiatedPlugins=globalContext.getInstantiatedPlugins();
  String parameters=processStep.getCompiledParameters();
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ processStep.getPluginJNDI());
  TransformerPluginV2LocalInterface plugin=null;
  if ((plugin=instantiatedPlugins.get(new Integer(pluginNumber))) == null) {
    try {
      plugin=getPlugin(processStep.getPluginJNDI());
      plugin.setGlobalContext(globalContext);
      plugin.init(globalContext.getTransformerPluginContext(pluginNumber),parameters);
    }
 catch (    XtentisException e) {
      throw (e);
    }
    instantiatedPlugins.put(new Integer(pluginNumber),plugin);
  }
  try {
    ArrayList<TransformerPluginVariableDescriptor> descriptors=plugin.getInputVariableDescriptors(""String_Node_Str"");
    for (Iterator<TransformerPluginVariableDescriptor> iter=descriptors.iterator(); iter.hasNext(); ) {
      TransformerPluginVariableDescriptor descriptor=iter.next();
      TypedContent content=getMappedInputVariable(descriptor,processStep,globalContext);
      if (content instanceof TypedContent_Do_Not_Process) {
        String msg=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ descriptor.getVariableName()+ ""String_Node_Str"";
        org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + msg);
        return;
      }
      pluginContext.put(descriptor.getVariableName(),content);
    }
  }
 catch (  XtentisException e) {
    throw (e);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(""String_Node_Str"" + err);
    throw new XtentisException(err);
  }
  try {
    pluginContext.setPluginCallBack(this);
    if (!processStep.isDisabled()) {
      plugin.execute(pluginContext);
    }
 else {
      pluginContext.getPluginCallBack().contentIsReady(pluginContext);
    }
  }
 catch (  XtentisException e) {
    throw (e);
  }
}",0.976508854354897
149270,"public void setProcessStep(WSTransformerProcessStep processStep,int index){
  this.processStep=processStep;
  availableVariables.clear();
  for (int i=0; i <= index; i++) {
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getInputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getOutputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  refreshViewers();
  refreshCombo();
}","public void setProcessStep(WSTransformerProcessStep processStep,int index){
  this.processStep=processStep;
  availableVariables.clear();
  for (int i=0; i <= index; i++) {
    if (transformer.getProcessSteps()[i].getDisabled())     continue;
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getInputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getOutputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  refreshViewers();
  refreshCombo();
}",0.9507042253521126
149271,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getForeignKeyInfos().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setForeignKeyInfos(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getForeignKeyInfos().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setForeignKeyInfos(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9744152046783626
149272,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getHiddenAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setHiddenAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getHiddenAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationHidden_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setHiddenAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9772393538913364
149273,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getTargetSystems().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setTargetSystems(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getTargetSystems().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationTargetSystems_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setTargetSystems(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9746974697469748
149274,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getWriteAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setWriteAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getWriteAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationWrite_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setWriteAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9775652813534388
149275,"/** 
 * @param parentShell
 */
public AnnotationOrderedListsDialog(ArrayList<String> xPaths,SelectionListener caller,Shell parentShell,String title,String columnName){
  super(parentShell);
  setShellStyle(this.getShellStyle() | SWT.RESIZE);
  this.xPaths=xPaths;
  this.caller=caller;
  this.title=title;
  this.columnName=columnName;
}","/** 
 * @param parentShell
 */
public AnnotationOrderedListsDialog(ArrayList<String> xPaths,SelectionListener caller,Shell parentShell,String title,String columnName,AMainPageV2 parentPage,int actionType){
  super(parentShell);
  setShellStyle(this.getShellStyle() | SWT.RESIZE);
  this.xPaths=xPaths;
  this.caller=caller;
  this.title=title;
  this.columnName=columnName;
  this.parentPage=parentPage;
  this.xObject=parentPage.getXObject();
  this.actionType=actionType;
}",0.8300492610837439
149276,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  labelText=new Text(composite,SWT.BORDER | SWT.SINGLE);
  labelText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)labelText.getLayoutData()).minimumWidth=300;
  labelText.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(labelText.getText());
        viewer.refresh();
      }
    }
  }
);
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      xPaths.add(labelText.getText());
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(400);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[2];
  editors[0]=new TextCellEditor(table);
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    if (COLUMN.equals(property)) {
      return line.getLabel();
    }
    return null;
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
labelText.setFocus();
return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  if (actionType == AnnotationOrderedListsDialog.AnnotationWrite_ActionType) {
    textControl=new CCombo(composite,SWT.BORDER);
    List<String> roles=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.ROLE);
    ((CCombo)textControl).setItems(roles.toArray(new String[roles.size()]));
  }
 else {
    textControl=new Text(composite,SWT.BORDER | SWT.SINGLE);
  }
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  }
 else {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  }
  ((GridData)textControl.getLayoutData()).minimumWidth=300;
  textControl.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(AnnotationOrderedListsDialog.getControlText(textControl));
        viewer.refresh();
      }
    }
  }
);
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    Button xpathButton=new Button(composite,SWT.PUSH | SWT.CENTER);
    xpathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    xpathButton.setText(""String_Node_Str"");
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog dlg=new XpathSelectDialog(parentPage.getSite().getShell(),xObject.getParent(),""String_Node_Str"",parentPage.getSite());
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          ((Text)textControl).setText(dlg.getXpath());
          dlg.close();
        }
      }
    }
);
  }
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      xPaths.add(getControlText(textControl));
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(400);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[2];
  editors[0]=new TextCellEditor(table);
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    if (COLUMN.equals(property)) {
      return line.getLabel();
    }
    return null;
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
textControl.setFocus();
return composite;
}",0.8919430084478628
149277,"public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirty();
}","public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  commitChanges();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirtyWithoutCommit();
}",0.9333333333333332
149278,"public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
  commitChanges();
}","public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
}",0.9054726368159204
149279,"protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  AFormPage page=(AFormPage)formPages.get(newPageIndex);
  page.refreshPage();
}","protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  AFormPage page=(AFormPage)formPages.get(newPageIndex);
  page.refreshPage();
  linkDirty(page);
}",0.9436201780415432
149280,"protected Control createDialogArea(Composite parent){
  try {
    parent.getShell().setText(""String_Node_Str"");
    Composite composite=new Composite(parent,SWT.NULL);
    GridLayout layout=new GridLayout();
    layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
    layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
    layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
    layout.horizontalSpacing=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
    composite.setLayout(layout);
    composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    applyDialogFont(composite);
    tabFolder=new TabFolder(composite,SWT.TOP | SWT.H_SCROLL | SWT.V_SCROLL);
    tabFolder.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    tabFolder.setLayout(new GridLayout(1,true));
    ((GridData)tabFolder.getLayoutData()).heightHint=600;
    ((GridData)tabFolder.getLayoutData()).widthHint=600;
    TabItem descriptionTI=new TabItem(tabFolder,SWT.NULL);
    descriptionTI.setText(""String_Node_Str"");
    descriptionTI.setToolTipText(""String_Node_Str"");
    Composite descriptionC=new Composite(tabFolder,SWT.NULL | SWT.H_SCROLL | SWT.V_SCROLL);
    descriptionC.setLayout(new GridLayout(1,true));
    descriptionC.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    Label descValue=new Label(descriptionC,SWT.WRAP);
    descValue.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    descValue.setText(description + ""String_Node_Str"");
    Label documentationLabel=new Label(descriptionC,SWT.LEFT);
    documentationLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    FontData fd=documentationLabel.getFont().getFontData()[0];
    fd.setStyle(SWT.BOLD);
    documentationLabel.setFont(new Font(Display.getDefault(),fd));
    documentationLabel.setText(""String_Node_Str"");
    Text docValue=new Text(descriptionC,SWT.WRAP | SWT.READ_ONLY);
    docValue.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,true,1,1));
    docValue.setBackground(documentationLabel.getBackground());
    docValue.setText(documentation);
    descriptionTI.setControl(descriptionC);
    tabFolder.setSelection(0);
    return composite;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return null;
  }
}","protected Control createDialogArea(Composite parent){
  try {
    parent.getShell().setText(""String_Node_Str"");
    Composite composite=new Composite(parent,SWT.NULL);
    GridLayout layout=new GridLayout();
    layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
    layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
    layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
    layout.horizontalSpacing=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
    composite.setLayout(layout);
    composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    applyDialogFont(composite);
    tabFolder=new TabFolder(composite,SWT.TOP);
    tabFolder.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    tabFolder.setLayout(new GridLayout(1,true));
    ((GridData)tabFolder.getLayoutData()).heightHint=600;
    ((GridData)tabFolder.getLayoutData()).widthHint=600;
    TabItem descriptionTI=new TabItem(tabFolder,SWT.NULL);
    descriptionTI.setText(""String_Node_Str"");
    descriptionTI.setToolTipText(""String_Node_Str"");
    Composite descriptionC=new Composite(tabFolder,SWT.NULL);
    descriptionC.setLayout(new GridLayout(1,true));
    descriptionC.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    Label descValue=new Label(descriptionC,SWT.WRAP);
    descValue.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    descValue.setText(description + ""String_Node_Str"");
    Label documentationLabel=new Label(descriptionC,SWT.LEFT);
    documentationLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    documentationLabel.setFont(FontUtils.getBoldFont(documentationLabel.getFont()));
    documentationLabel.setText(""String_Node_Str"");
    Text docValue=new Text(descriptionC,SWT.WRAP | SWT.READ_ONLY | SWT.V_SCROLL);
    docValue.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    docValue.setBackground(documentationLabel.getBackground());
    docValue.setText(documentation);
    descriptionTI.setControl(descriptionC);
    tabFolder.setSelection(0);
    return composite;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return null;
  }
}",0.9453189726594864
149281,"public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  commitChanges();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirtyWithoutCommit();
}","public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirtyWithoutCommit();
}",0.9614604462474644
149282,"public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
}","public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
  commitChanges();
}",0.9054726368159204
149283,"protected void createActions(){
  this.newConceptAction=new XSDNewConceptAction(this);
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
}","protected void createActions(){
  this.newConceptAction=new XSDNewConceptAction(this);
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.deleteConceptWrapAction=new XSDDeleteConceptWrapAction(this,deleteConceptAction);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
}",0.9800314112631816
149284,"protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptWrapAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.9994574064026044
149285,"public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  commitChanges();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirtyWithoutCommit();
}","public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirtyWithoutCommit();
}",0.9614604462474644
149286,"public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
}","public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
  commitChanges();
}",0.9054726368159204
149287,"protected void createActions(){
  this.newConceptAction=new XSDNewConceptAction(this);
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
}","protected void createActions(){
  this.newConceptAction=new XSDNewConceptAction(this);
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.deleteConceptWrapAction=new XSDDeleteConceptWrapAction(this,deleteConceptAction);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
}",0.9800314112631816
149288,"protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptWrapAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.9994574064026044
149289,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getForeignKeyInfos().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setForeignKeyInfos(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getForeignKeyInfos().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setForeignKeyInfos(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9744152046783626
149290,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getHiddenAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setHiddenAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getHiddenAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationHidden_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setHiddenAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9772393538913364
149291,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getTargetSystems().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setTargetSystems(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getTargetSystems().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationTargetSystems_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setTargetSystems(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9746974697469748
149292,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getWriteAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setWriteAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getWriteAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationWrite_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setWriteAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9775652813534388
149293,"/** 
 * @param parentShell
 */
public AnnotationOrderedListsDialog(ArrayList<String> xPaths,SelectionListener caller,Shell parentShell,String title,String columnName){
  super(parentShell);
  setShellStyle(this.getShellStyle() | SWT.RESIZE);
  this.xPaths=xPaths;
  this.caller=caller;
  this.title=title;
  this.columnName=columnName;
}","/** 
 * @param parentShell
 */
public AnnotationOrderedListsDialog(ArrayList<String> xPaths,SelectionListener caller,Shell parentShell,String title,String columnName,AMainPageV2 parentPage,int actionType){
  super(parentShell);
  setShellStyle(this.getShellStyle() | SWT.RESIZE);
  this.xPaths=xPaths;
  this.caller=caller;
  this.title=title;
  this.columnName=columnName;
  this.parentPage=parentPage;
  this.xObject=parentPage.getXObject();
  this.actionType=actionType;
}",0.8300492610837439
149294,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  labelText=new Text(composite,SWT.BORDER | SWT.SINGLE);
  labelText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)labelText.getLayoutData()).minimumWidth=300;
  labelText.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(labelText.getText());
        viewer.refresh();
      }
    }
  }
);
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      xPaths.add(labelText.getText());
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(400);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[2];
  editors[0]=new TextCellEditor(table);
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    if (COLUMN.equals(property)) {
      return line.getLabel();
    }
    return null;
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
labelText.setFocus();
return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  if (actionType == AnnotationOrderedListsDialog.AnnotationWrite_ActionType) {
    textControl=new CCombo(composite,SWT.BORDER);
    List<String> roles=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.ROLE);
    ((CCombo)textControl).setItems(roles.toArray(new String[roles.size()]));
  }
 else {
    textControl=new Text(composite,SWT.BORDER | SWT.SINGLE);
  }
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  }
 else {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  }
  ((GridData)textControl.getLayoutData()).minimumWidth=300;
  textControl.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(AnnotationOrderedListsDialog.getControlText(textControl));
        viewer.refresh();
      }
    }
  }
);
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    Button xpathButton=new Button(composite,SWT.PUSH | SWT.CENTER);
    xpathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    xpathButton.setText(""String_Node_Str"");
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog dlg=new XpathSelectDialog(parentPage.getSite().getShell(),xObject.getParent(),""String_Node_Str"",parentPage.getSite());
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          ((Text)textControl).setText(dlg.getXpath());
          dlg.close();
        }
      }
    }
);
  }
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      xPaths.add(getControlText(textControl));
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(400);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[2];
  editors[0]=new TextCellEditor(table);
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    if (COLUMN.equals(property)) {
      return line.getLabel();
    }
    return null;
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
textControl.setFocus();
return composite;
}",0.8919430084478628
149295,"public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirty();
}","public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  commitChanges();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirtyWithoutCommit();
}",0.9333333333333332
149296,"public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
  commitChanges();
}","public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
}",0.9054726368159204
149297,"protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  AFormPage page=(AFormPage)formPages.get(newPageIndex);
  page.refreshPage();
}","protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  AFormPage page=(AFormPage)formPages.get(newPageIndex);
  page.refreshPage();
  linkDirty(page);
}",0.9436201780415432
149298,"protected Control createDialogArea(Composite parent){
  try {
    parent.getShell().setText(""String_Node_Str"");
    Composite composite=new Composite(parent,SWT.NULL);
    GridLayout layout=new GridLayout();
    layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
    layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
    layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
    layout.horizontalSpacing=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
    composite.setLayout(layout);
    composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    applyDialogFont(composite);
    tabFolder=new TabFolder(composite,SWT.TOP | SWT.H_SCROLL | SWT.V_SCROLL);
    tabFolder.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    tabFolder.setLayout(new GridLayout(1,true));
    ((GridData)tabFolder.getLayoutData()).heightHint=600;
    ((GridData)tabFolder.getLayoutData()).widthHint=600;
    TabItem descriptionTI=new TabItem(tabFolder,SWT.NULL);
    descriptionTI.setText(""String_Node_Str"");
    descriptionTI.setToolTipText(""String_Node_Str"");
    Composite descriptionC=new Composite(tabFolder,SWT.NULL | SWT.H_SCROLL | SWT.V_SCROLL);
    descriptionC.setLayout(new GridLayout(1,true));
    descriptionC.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    Label descValue=new Label(descriptionC,SWT.WRAP);
    descValue.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    descValue.setText(description + ""String_Node_Str"");
    Label documentationLabel=new Label(descriptionC,SWT.LEFT);
    documentationLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    FontData fd=documentationLabel.getFont().getFontData()[0];
    fd.setStyle(SWT.BOLD);
    documentationLabel.setFont(new Font(Display.getDefault(),fd));
    documentationLabel.setText(""String_Node_Str"");
    Text docValue=new Text(descriptionC,SWT.WRAP | SWT.READ_ONLY);
    docValue.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,true,1,1));
    docValue.setBackground(documentationLabel.getBackground());
    docValue.setText(documentation);
    descriptionTI.setControl(descriptionC);
    tabFolder.setSelection(0);
    return composite;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return null;
  }
}","protected Control createDialogArea(Composite parent){
  try {
    parent.getShell().setText(""String_Node_Str"");
    Composite composite=new Composite(parent,SWT.NULL);
    GridLayout layout=new GridLayout();
    layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
    layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
    layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
    layout.horizontalSpacing=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
    composite.setLayout(layout);
    composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    applyDialogFont(composite);
    tabFolder=new TabFolder(composite,SWT.TOP);
    tabFolder.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    tabFolder.setLayout(new GridLayout(1,true));
    ((GridData)tabFolder.getLayoutData()).heightHint=600;
    ((GridData)tabFolder.getLayoutData()).widthHint=600;
    TabItem descriptionTI=new TabItem(tabFolder,SWT.NULL);
    descriptionTI.setText(""String_Node_Str"");
    descriptionTI.setToolTipText(""String_Node_Str"");
    Composite descriptionC=new Composite(tabFolder,SWT.NULL);
    descriptionC.setLayout(new GridLayout(1,true));
    descriptionC.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    Label descValue=new Label(descriptionC,SWT.WRAP);
    descValue.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    descValue.setText(description + ""String_Node_Str"");
    Label documentationLabel=new Label(descriptionC,SWT.LEFT);
    documentationLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    documentationLabel.setFont(FontUtils.getBoldFont(documentationLabel.getFont()));
    documentationLabel.setText(""String_Node_Str"");
    Text docValue=new Text(descriptionC,SWT.WRAP | SWT.READ_ONLY | SWT.V_SCROLL);
    docValue.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    docValue.setBackground(documentationLabel.getBackground());
    docValue.setText(documentation);
    descriptionTI.setControl(descriptionC);
    tabFolder.setSelection(0);
    return composite;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return null;
  }
}",0.9453189726594864
149299,"private static void addMenuEntries(HashMap<String,Menu> index,WSRoleSpecificationInstance instance) throws XtentisWebappException {
  org.apache.log4j.Logger.getLogger(Menu.class).debug(""String_Node_Str"" + instance.getInstanceName());
  try {
    RoleMenuParameters params=RoleMenuParameters.unmarshalMenuParameters(instance.getParameter()[0]);
    WSMenu wsMenu=Util.getPort().getMenu(new WSGetMenu(new WSMenuPK(instance.getInstanceName())));
    WSMenuEntry[] wsEntries=wsMenu.getMenuEntries();
    if (wsEntries != null) {
      for (int i=0; i < wsEntries.length; i++) {
        index.put(wsEntries[i].getId(),wsMenu2Menu(index,wsEntries[i],null,params.getParentID(),params.getPosition()));
      }
    }
  }
 catch (  Exception e) {
    String err;
    try {
      err=""String_Node_Str"" + instance.getInstanceName() + ""String_Node_Str""+ Util.getAjaxSubject().getUsername()+ ""String_Node_Str""+ (e.getClass().getName().contains(""String_Node_Str"") ? ""String_Node_Str"" : e.getClass().getName() + ""String_Node_Str"")+ e.getLocalizedMessage();
    }
 catch (    Exception ex) {
      err=""String_Node_Str"" + ""String_Node_Str"" + ex.getClass().getName() + ""String_Node_Str""+ ex.getLocalizedMessage();
    }
  }
}","private static void addMenuEntries(HashMap<String,Menu> index,WSRoleSpecificationInstance instance) throws XtentisWebappException {
  org.apache.log4j.Logger.getLogger(Menu.class).debug(""String_Node_Str"" + instance.getInstanceName());
  try {
    WSBoolean menuExist=Util.getPort().existsMenu(new WSExistsMenu(new WSMenuPK(instance.getInstanceName())));
    if (menuExist.is_true()) {
      RoleMenuParameters params=RoleMenuParameters.unmarshalMenuParameters(instance.getParameter()[0]);
      WSMenu wsMenu=Util.getPort().getMenu(new WSGetMenu(new WSMenuPK(instance.getInstanceName())));
      WSMenuEntry[] wsEntries=wsMenu.getMenuEntries();
      if (wsEntries != null) {
        for (int i=0; i < wsEntries.length; i++) {
          index.put(wsEntries[i].getId(),wsMenu2Menu(index,wsEntries[i],null,params.getParentID(),params.getPosition()));
        }
      }
    }
  }
 catch (  XtentisWebappException e) {
    throw (e);
  }
catch (  Exception e) {
    String err;
    try {
      err=""String_Node_Str"" + instance.getInstanceName() + ""String_Node_Str""+ Util.getAjaxSubject().getUsername()+ ""String_Node_Str""+ (e.getClass().getName().contains(""String_Node_Str"") ? ""String_Node_Str"" : e.getClass().getName() + ""String_Node_Str"")+ e.getLocalizedMessage();
    }
 catch (    Exception ex) {
      err=""String_Node_Str"" + ""String_Node_Str"" + ex.getClass().getName() + ""String_Node_Str""+ ex.getLocalizedMessage();
    }
    throw new XtentisWebappException(err);
  }
}",0.9018290406868236
149300,"private static void addMenuEntries(HashMap<String,Menu> index,WSRoleSpecificationInstance instance) throws XtentisWebappException {
  org.apache.log4j.Logger.getLogger(Menu.class).debug(""String_Node_Str"" + instance.getInstanceName());
  try {
    RoleMenuParameters params=RoleMenuParameters.unmarshalMenuParameters(instance.getParameter()[0]);
    WSMenu wsMenu=Util.getPort().getMenu(new WSGetMenu(new WSMenuPK(instance.getInstanceName())));
    WSMenuEntry[] wsEntries=wsMenu.getMenuEntries();
    if (wsEntries != null) {
      for (int i=0; i < wsEntries.length; i++) {
        index.put(wsEntries[i].getId(),wsMenu2Menu(index,wsEntries[i],null,params.getParentID(),params.getPosition()));
      }
    }
  }
 catch (  Exception e) {
    String err;
    try {
      err=""String_Node_Str"" + instance.getInstanceName() + ""String_Node_Str""+ Util.getAjaxSubject().getUsername()+ ""String_Node_Str""+ (e.getClass().getName().contains(""String_Node_Str"") ? ""String_Node_Str"" : e.getClass().getName() + ""String_Node_Str"")+ e.getLocalizedMessage();
    }
 catch (    Exception ex) {
      err=""String_Node_Str"" + ""String_Node_Str"" + ex.getClass().getName() + ""String_Node_Str""+ ex.getLocalizedMessage();
    }
  }
}","private static void addMenuEntries(HashMap<String,Menu> index,WSRoleSpecificationInstance instance) throws XtentisWebappException {
  org.apache.log4j.Logger.getLogger(Menu.class).debug(""String_Node_Str"" + instance.getInstanceName());
  try {
    WSBoolean menuExist=Util.getPort().existsMenu(new WSExistsMenu(new WSMenuPK(instance.getInstanceName())));
    if (menuExist.is_true()) {
      RoleMenuParameters params=RoleMenuParameters.unmarshalMenuParameters(instance.getParameter()[0]);
      WSMenu wsMenu=Util.getPort().getMenu(new WSGetMenu(new WSMenuPK(instance.getInstanceName())));
      WSMenuEntry[] wsEntries=wsMenu.getMenuEntries();
      if (wsEntries != null) {
        for (int i=0; i < wsEntries.length; i++) {
          index.put(wsEntries[i].getId(),wsMenu2Menu(index,wsEntries[i],null,params.getParentID(),params.getPosition()));
        }
      }
    }
  }
 catch (  XtentisWebappException e) {
    throw (e);
  }
catch (  Exception e) {
    String err;
    try {
      err=""String_Node_Str"" + instance.getInstanceName() + ""String_Node_Str""+ Util.getAjaxSubject().getUsername()+ ""String_Node_Str""+ (e.getClass().getName().contains(""String_Node_Str"") ? ""String_Node_Str"" : e.getClass().getName() + ""String_Node_Str"")+ e.getLocalizedMessage();
    }
 catch (    Exception ex) {
      err=""String_Node_Str"" + ""String_Node_Str"" + ex.getClass().getName() + ""String_Node_Str""+ ex.getLocalizedMessage();
    }
    throw new XtentisWebappException(err);
  }
}",0.9018290406868236
149301,"/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSRolePK putRole(WSPutRole wsRole) throws RemoteException {
  try {
    RoleCtrlLocal ctrl=RoleCtrlUtil.getLocalHome().create();
    RolePOJOPK pk=ctrl.putRole(WS2POJO(wsRole.getWsRole()));
    return new WSRolePK(pk.getUniqueId());
  }
 catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}","/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSRolePK putRole(WSPutRole wsRole) throws RemoteException {
  try {
    RoleCtrlLocal ctrl=RoleCtrlUtil.getLocalHome().create();
    RolePOJOPK pk=ctrl.putRole(WS2POJO(wsRole.getWsRole()));
    LocalUser.resetLocalUsers();
    return new WSRolePK(pk.getUniqueId());
  }
 catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9747899159663864
149302,"/** 
 * Refresh the content of the menu parameters
 * @param instanceName
 */
private void refreshMenuParameters(String instanceName){
  paramsLabel.setText(""String_Node_Str"" + instanceName + ""String_Node_Str"");
  LinkedHashSet<String> parameters=role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).getParameters();
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParametersRefreshing=true;
  if ((parameters != null) && (parameters.size() > 0)) {
    try {
      menuParameters=RoleMenuParameters.unmarshalMenuParameters(parameters);
    }
 catch (    Exception e) {
    }
    menuParentIDCombo.select(menuParameters.getPosition());
    menuPositionCombo.select(menuParameters.getPosition());
  }
 else {
    menuParentIDCombo.select(0);
    menuPositionCombo.select(0);
    commitMenuParameters();
  }
  menuParametersRefreshing=false;
}","/** 
 * Refresh the content of the menu parameters
 * @param instanceName
 */
private void refreshMenuParameters(String instanceName){
  paramsLabel.setText(""String_Node_Str"" + instanceName + ""String_Node_Str"");
  LinkedHashSet<String> parameters=role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).getParameters();
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParametersRefreshing=true;
  if ((parameters != null) && (parameters.size() > 0)) {
    try {
      menuParameters=RoleMenuParameters.unmarshalMenuParameters(parameters);
    }
 catch (    Exception e) {
    }
    menuParentIDCombo.select(menuParameters.getPosition());
    menuPositionCombo.select(menuParameters.getPosition() - 1);
  }
 else {
    menuParentIDCombo.select(0);
    menuPositionCombo.select(0);
    commitMenuParameters();
  }
  menuParametersRefreshing=false;
}",0.9977753058954394
149303,"private Composite getMenuParametersComposite(){
  FormToolkit toolkit=this.getManagedForm().getToolkit();
  Composite composite=toolkit.createComposite(paramsClientComposite,SWT.BORDER);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  composite.setLayout(new GridLayout(2,false));
  Label menuParentIDLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuParentIDLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuParentIDCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  GridData gridData=new GridData(SWT.BEGINNING,SWT.FILL,true,true,1,1);
  gridData.widthHint=150;
  menuParentIDCombo.setLayoutData(gridData);
  menuParentIDCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      commitMenuParameters();
    }
  }
);
  Label menuPositionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuPositionLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuPositionCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  menuPositionCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.FILL,false,false,1,1));
  for (int i=1; i <= 20; i++)   menuPositionCombo.add(""String_Node_Str"" + i);
  menuPositionCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      commitMenuParameters();
    }
  }
);
  return composite;
}","private Composite getMenuParametersComposite(){
  FormToolkit toolkit=this.getManagedForm().getToolkit();
  Composite composite=toolkit.createComposite(paramsClientComposite,SWT.BORDER);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  composite.setLayout(new GridLayout(2,false));
  Label menuParentIDLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuParentIDLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuParentIDCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  GridData gridData=new GridData(SWT.BEGINNING,SWT.FILL,true,true,1,1);
  gridData.widthHint=150;
  menuParentIDCombo.setLayoutData(gridData);
  menuParentIDCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      menuPositionCombo.select(0);
      commitMenuParameters();
    }
  }
);
  Label menuPositionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuPositionLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuPositionCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  menuPositionCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.FILL,false,false,1,1));
  for (int i=1; i <= 20; i++)   menuPositionCombo.add(""String_Node_Str"" + i);
  menuPositionCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      commitMenuParameters();
    }
  }
);
  return composite;
}",0.9899280575539569
149304,"/** 
 * Commit the content of the menu parameters
 * @param instanceName
 */
protected void commitMenuParameters(){
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParameters.setParentID(menuParentIDCombo.getText());
  menuParameters.setPosition(menuPositionCombo.getSelectionIndex());
  String instanceName=((InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement()).getInstanceName();
  role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
  markDirty();
}","/** 
 * Commit the content of the menu parameters
 * @param instanceName
 */
protected void commitMenuParameters(){
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParameters.setParentID(menuParentIDCombo.getText());
  menuParameters.setPosition(menuPositionCombo.getSelectionIndex() + 1);
  String instanceName=((InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement()).getInstanceName();
  role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
  markDirty();
}",0.9966722129783694
149305,"protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}","protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          RoleMenuParameters menuParameters=new RoleMenuParameters();
          menuParameters.setParentID(""String_Node_Str"");
          menuParameters.setPosition(1);
          String instanceName=instanceNameCombo.getText();
          specification.getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
        }
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}",0.9808337546536748
149306,"public void keyReleased(KeyEvent e){
  if ((e.stateMask == 0) && (e.character == SWT.CR)) {
    DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
  }
}","public void keyReleased(KeyEvent e){
  if (e.keyCode == SWT.DEL) {
    new DeleteItemsAction(DataClusterBrowserMainPage.this.getSite().getShell(),DataClusterBrowserMainPage.this.resultsViewer).run();
  }
}",0.5638297872340425
149307,"@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    FormToolkit toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(9,false));
    final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Label fromLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    fromLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    fromText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    fromText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)fromText.getLayoutData()).widthHint=100;
    fromText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Calendar c=Calendar.getInstance();
    long yesterday=c.getTimeInMillis() - (1000 * 60 * 60* 24);
    c.setTimeInMillis(yesterday);
    fromText.setText(sdf.format(c.getTime()));
    fromText.pack();
    Button bFrom=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bFrom.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (fromText.getText() != null && fromText.getText().length() > 0) {
          try {
            Date d=sdf.parse(fromText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            fromText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label toLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    toLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    toText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    toText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)toText.getLayoutData()).widthHint=100;
    toText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    toText.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        toText.selectAll();
      }
    }
);
    toText.setText(""String_Node_Str"");
    toText.pack();
    Button bTo=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bTo.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (toText.getText() != null && toText.getText().length() > 0) {
          try {
            Date d=sdf.parse(toText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            toText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label conceptLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    conceptLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    conceptCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    conceptCombo.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)conceptCombo.getLayoutData()).widthHint=180;
    conceptCombo.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Button bSearch=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER);
    bSearch.setLayoutData(new GridData(SWT.NONE,SWT.CENTER,false,false,1,1));
    bSearch.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
      }
    }
);
    Label keyLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    keyLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    keyText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    keyText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,5,1));
    keyText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Label descriptionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    searchText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    searchText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    searchText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    final Table table=createTable(composite);
    resultsViewer=new TableViewer(table);
    resultsViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,9,1));
    ((GridData)resultsViewer.getControl().getLayoutData()).heightHint=500;
    resultsViewer.setContentProvider(new ArrayContentProvider());
    resultsViewer.setLabelProvider(new ClusterTableLabelProvider());
    resultsViewer.addDoubleClickListener(new IDoubleClickListener(){
      public void doubleClick(      DoubleClickEvent event){
        resultsViewer.setSelection(event.getSelection());
        try {
          new EditItemAction(DataClusterBrowserMainPage.this.getSite().getShell(),resultsViewer).run();
        }
 catch (        Exception e) {
          MessageDialog.openError(DataClusterBrowserMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage());
        }
      }
    }
);
    hookContextMenu();
    managedForm.reflow(true);
    searchText.setFocus();
    WidgetFactory factory=new WidgetFactory();
    factory.adapt(managedForm.getForm().getBody());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    FormToolkit toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(9,false));
    final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Label fromLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    fromLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    fromText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    fromText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)fromText.getLayoutData()).widthHint=100;
    fromText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    Calendar c=Calendar.getInstance();
    long yesterday=c.getTimeInMillis() - (1000 * 60 * 60* 24);
    c.setTimeInMillis(yesterday);
    fromText.setText(sdf.format(c.getTime()));
    fromText.pack();
    Button bFrom=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bFrom.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (fromText.getText() != null && fromText.getText().length() > 0) {
          try {
            Date d=sdf.parse(fromText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            fromText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label toLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    toLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    toText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    toText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)toText.getLayoutData()).widthHint=100;
    toText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    toText.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        toText.selectAll();
      }
    }
);
    toText.setText(""String_Node_Str"");
    toText.pack();
    Button bTo=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bTo.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (toText.getText() != null && toText.getText().length() > 0) {
          try {
            Date d=sdf.parse(toText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            toText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label conceptLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    conceptLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    conceptCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    conceptCombo.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)conceptCombo.getLayoutData()).widthHint=180;
    conceptCombo.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    Button bSearch=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER);
    bSearch.setLayoutData(new GridData(SWT.NONE,SWT.CENTER,false,false,1,1));
    bSearch.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
      }
    }
);
    Label keyLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    keyLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    keyText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    keyText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,5,1));
    keyText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    Label descriptionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    searchText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    searchText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    searchText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    final Table table=createTable(composite);
    resultsViewer=new TableViewer(table);
    resultsViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,9,1));
    ((GridData)resultsViewer.getControl().getLayoutData()).heightHint=500;
    resultsViewer.setContentProvider(new ArrayContentProvider());
    resultsViewer.setLabelProvider(new ClusterTableLabelProvider());
    resultsViewer.addDoubleClickListener(new IDoubleClickListener(){
      public void doubleClick(      DoubleClickEvent event){
        resultsViewer.setSelection(event.getSelection());
        try {
          new EditItemAction(DataClusterBrowserMainPage.this.getSite().getShell(),resultsViewer).run();
        }
 catch (        Exception e) {
          MessageDialog.openError(DataClusterBrowserMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage());
        }
      }
    }
);
    hookKeyboard();
    hookContextMenu();
    managedForm.reflow(true);
    searchText.setFocus();
    WidgetFactory factory=new WidgetFactory();
    factory.adapt(managedForm.getForm().getBody());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9970330411328387
149308,"protected LineItem[] getResults(){
  Cursor waitCursor=null;
  try {
    Display display=getEditor().getSite().getPage().getWorkbenchWindow().getWorkbench().getDisplay();
    waitCursor=new Cursor(display,SWT.CURSOR_WAIT);
    this.getSite().getShell().setCursor(waitCursor);
    XtentisPort port=Util.getPort(getXObject());
    long from=-1;
    long to=-1;
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    if (!""String_Node_Str"".equals(fromText.getText())) {
      String dateTimeText=fromText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(fromText.getText());
        from=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    if (!""String_Node_Str"".equals(toText.getText())) {
      String dateTimeText=toText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(toText.getText());
        to=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    String concept=conceptCombo.getText();
    if (""String_Node_Str"".equals(concept) | ""String_Node_Str"".equals(concept))     concept=null;
    if (concept != null) {
      concept=concept.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
    }
    String keys=keyText.getText();
    if (""String_Node_Str"".equals(keys) | ""String_Node_Str"".equals(keys))     keys=null;
    String search=searchText.getText();
    if (""String_Node_Str"".equals(search) | ""String_Node_Str"".equals(search))     search=null;
    WSItemPKsByCriteriaResponseResults[] results=port.getItemPKsByCriteria(new WSGetItemPKsByCriteria((WSDataClusterPK)getXObject().getWsKey(),concept,search,keys,from,to,0,Integer.MAX_VALUE)).getResults();
    if (results == null) {
      MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      return new LineItem[0];
    }
    LineItem[] res=new LineItem[results.length];
    for (int i=0; i < results.length; i++) {
      res[i]=new LineItem(results[i].getDate(),results[i].getWsItemPK().getConceptName(),results[i].getWsItemPK().getIds());
    }
    return res;
  }
 catch (  Exception e) {
    e.printStackTrace();
    if ((e.getLocalizedMessage() != null) && e.getLocalizedMessage().contains(""String_Node_Str""))     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
 else     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",e.getLocalizedMessage());
    return null;
  }
 finally {
    try {
      this.getSite().getShell().setCursor(null);
      waitCursor.dispose();
    }
 catch (    Exception e) {
    }
  }
}","protected LineItem[] getResults(boolean showResultInfo){
  Cursor waitCursor=null;
  try {
    Display display=getEditor().getSite().getPage().getWorkbenchWindow().getWorkbench().getDisplay();
    waitCursor=new Cursor(display,SWT.CURSOR_WAIT);
    this.getSite().getShell().setCursor(waitCursor);
    XtentisPort port=Util.getPort(getXObject());
    long from=-1;
    long to=-1;
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    if (!""String_Node_Str"".equals(fromText.getText())) {
      String dateTimeText=fromText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(fromText.getText());
        from=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    if (!""String_Node_Str"".equals(toText.getText())) {
      String dateTimeText=toText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(toText.getText());
        to=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    String concept=conceptCombo.getText();
    if (""String_Node_Str"".equals(concept) | ""String_Node_Str"".equals(concept))     concept=null;
    if (concept != null) {
      concept=concept.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
    }
    String keys=keyText.getText();
    if (""String_Node_Str"".equals(keys) | ""String_Node_Str"".equals(keys))     keys=null;
    String search=searchText.getText();
    if (""String_Node_Str"".equals(search) | ""String_Node_Str"".equals(search))     search=null;
    WSItemPKsByCriteriaResponseResults[] results=port.getItemPKsByCriteria(new WSGetItemPKsByCriteria((WSDataClusterPK)getXObject().getWsKey(),concept,search,keys,from,to,0,Integer.MAX_VALUE)).getResults();
    if (showResultInfo && (results == null)) {
      MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      return new LineItem[0];
    }
    LineItem[] res=new LineItem[results.length];
    for (int i=0; i < results.length; i++) {
      res[i]=new LineItem(results[i].getDate(),results[i].getWsItemPK().getConceptName(),results[i].getWsItemPK().getIds());
    }
    return res;
  }
 catch (  Exception e) {
    e.printStackTrace();
    if ((e.getLocalizedMessage() != null) && e.getLocalizedMessage().contains(""String_Node_Str""))     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
 else     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",e.getLocalizedMessage());
    return null;
  }
 finally {
    try {
      this.getSite().getShell().setCursor(null);
      waitCursor.dispose();
    }
 catch (    Exception e) {
    }
  }
}",0.9931640625
149309,"/** 
 * Refresh the content of the menu parameters
 * @param instanceName
 */
private void refreshMenuParameters(String instanceName){
  paramsLabel.setText(""String_Node_Str"" + instanceName + ""String_Node_Str"");
  LinkedHashSet<String> parameters=role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).getParameters();
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParametersRefreshing=true;
  if ((parameters != null) && (parameters.size() > 0)) {
    try {
      menuParameters=RoleMenuParameters.unmarshalMenuParameters(parameters);
    }
 catch (    Exception e) {
    }
    menuParentIDCombo.select(menuParameters.getPosition());
    menuPositionCombo.select(menuParameters.getPosition());
  }
 else {
    menuParentIDCombo.select(0);
    menuPositionCombo.select(0);
    commitMenuParameters();
  }
  menuParametersRefreshing=false;
}","/** 
 * Refresh the content of the menu parameters
 * @param instanceName
 */
private void refreshMenuParameters(String instanceName){
  paramsLabel.setText(""String_Node_Str"" + instanceName + ""String_Node_Str"");
  LinkedHashSet<String> parameters=role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).getParameters();
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParametersRefreshing=true;
  if ((parameters != null) && (parameters.size() > 0)) {
    try {
      menuParameters=RoleMenuParameters.unmarshalMenuParameters(parameters);
    }
 catch (    Exception e) {
    }
    menuParentIDCombo.select(menuParameters.getPosition());
    menuPositionCombo.select(menuParameters.getPosition() - 1);
  }
 else {
    menuParentIDCombo.select(0);
    menuPositionCombo.select(0);
    commitMenuParameters();
  }
  menuParametersRefreshing=false;
}",0.9977753058954394
149310,"private Composite getMenuParametersComposite(){
  FormToolkit toolkit=this.getManagedForm().getToolkit();
  Composite composite=toolkit.createComposite(paramsClientComposite,SWT.BORDER);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  composite.setLayout(new GridLayout(2,false));
  Label menuParentIDLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuParentIDLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuParentIDCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  GridData gridData=new GridData(SWT.BEGINNING,SWT.FILL,true,true,1,1);
  gridData.widthHint=150;
  menuParentIDCombo.setLayoutData(gridData);
  menuParentIDCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      commitMenuParameters();
    }
  }
);
  Label menuPositionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuPositionLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuPositionCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  menuPositionCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.FILL,false,false,1,1));
  for (int i=1; i <= 20; i++)   menuPositionCombo.add(""String_Node_Str"" + i);
  menuPositionCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      commitMenuParameters();
    }
  }
);
  return composite;
}","private Composite getMenuParametersComposite(){
  FormToolkit toolkit=this.getManagedForm().getToolkit();
  Composite composite=toolkit.createComposite(paramsClientComposite,SWT.BORDER);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  composite.setLayout(new GridLayout(2,false));
  Label menuParentIDLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuParentIDLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuParentIDCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  GridData gridData=new GridData(SWT.BEGINNING,SWT.FILL,true,true,1,1);
  gridData.widthHint=150;
  menuParentIDCombo.setLayoutData(gridData);
  menuParentIDCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      menuPositionCombo.select(0);
      commitMenuParameters();
    }
  }
);
  Label menuPositionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuPositionLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuPositionCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  menuPositionCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.FILL,false,false,1,1));
  for (int i=1; i <= 20; i++)   menuPositionCombo.add(""String_Node_Str"" + i);
  menuPositionCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      commitMenuParameters();
    }
  }
);
  return composite;
}",0.9899280575539569
149311,"/** 
 * Commit the content of the menu parameters
 * @param instanceName
 */
protected void commitMenuParameters(){
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParameters.setParentID(menuParentIDCombo.getText());
  menuParameters.setPosition(menuPositionCombo.getSelectionIndex());
  String instanceName=((InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement()).getInstanceName();
  role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
  markDirty();
}","/** 
 * Commit the content of the menu parameters
 * @param instanceName
 */
protected void commitMenuParameters(){
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParameters.setParentID(menuParentIDCombo.getText());
  menuParameters.setPosition(menuPositionCombo.getSelectionIndex() + 1);
  String instanceName=((InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement()).getInstanceName();
  role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
  markDirty();
}",0.9966722129783694
149312,"protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}","protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          RoleMenuParameters menuParameters=new RoleMenuParameters();
          menuParameters.setParentID(""String_Node_Str"");
          menuParameters.setPosition(1);
          String instanceName=instanceNameCombo.getText();
          specification.getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
        }
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}",0.9808337546536748
149313,"/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSRolePK putRole(WSPutRole wsRole) throws RemoteException {
  try {
    RoleCtrlLocal ctrl=RoleCtrlUtil.getLocalHome().create();
    RolePOJOPK pk=ctrl.putRole(WS2POJO(wsRole.getWsRole()));
    return new WSRolePK(pk.getUniqueId());
  }
 catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}","/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSRolePK putRole(WSPutRole wsRole) throws RemoteException {
  try {
    RoleCtrlLocal ctrl=RoleCtrlUtil.getLocalHome().create();
    RolePOJOPK pk=ctrl.putRole(WS2POJO(wsRole.getWsRole()));
    LocalUser.resetLocalUsers();
    return new WSRolePK(pk.getUniqueId());
  }
 catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9747899159663864
149314,"public void keyReleased(KeyEvent e){
  if ((e.stateMask == 0) && (e.character == SWT.CR)) {
    DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
  }
}","public void keyReleased(KeyEvent e){
  if (e.keyCode == SWT.DEL) {
    new DeleteItemsAction(DataClusterBrowserMainPage.this.getSite().getShell(),DataClusterBrowserMainPage.this.resultsViewer).run();
  }
}",0.5638297872340425
149315,"@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    FormToolkit toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(9,false));
    final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Label fromLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    fromLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    fromText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    fromText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)fromText.getLayoutData()).widthHint=100;
    fromText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Calendar c=Calendar.getInstance();
    long yesterday=c.getTimeInMillis() - (1000 * 60 * 60* 24);
    c.setTimeInMillis(yesterday);
    fromText.setText(sdf.format(c.getTime()));
    fromText.pack();
    Button bFrom=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bFrom.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (fromText.getText() != null && fromText.getText().length() > 0) {
          try {
            Date d=sdf.parse(fromText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            fromText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label toLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    toLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    toText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    toText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)toText.getLayoutData()).widthHint=100;
    toText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    toText.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        toText.selectAll();
      }
    }
);
    toText.setText(""String_Node_Str"");
    toText.pack();
    Button bTo=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bTo.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (toText.getText() != null && toText.getText().length() > 0) {
          try {
            Date d=sdf.parse(toText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            toText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label conceptLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    conceptLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    conceptCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    conceptCombo.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)conceptCombo.getLayoutData()).widthHint=180;
    conceptCombo.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Button bSearch=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER);
    bSearch.setLayoutData(new GridData(SWT.NONE,SWT.CENTER,false,false,1,1));
    bSearch.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
      }
    }
);
    Label keyLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    keyLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    keyText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    keyText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,5,1));
    keyText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Label descriptionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    searchText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    searchText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    searchText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    final Table table=createTable(composite);
    resultsViewer=new TableViewer(table);
    resultsViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,9,1));
    ((GridData)resultsViewer.getControl().getLayoutData()).heightHint=500;
    resultsViewer.setContentProvider(new ArrayContentProvider());
    resultsViewer.setLabelProvider(new ClusterTableLabelProvider());
    resultsViewer.addDoubleClickListener(new IDoubleClickListener(){
      public void doubleClick(      DoubleClickEvent event){
        resultsViewer.setSelection(event.getSelection());
        try {
          new EditItemAction(DataClusterBrowserMainPage.this.getSite().getShell(),resultsViewer).run();
        }
 catch (        Exception e) {
          MessageDialog.openError(DataClusterBrowserMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage());
        }
      }
    }
);
    hookContextMenu();
    managedForm.reflow(true);
    searchText.setFocus();
    WidgetFactory factory=new WidgetFactory();
    factory.adapt(managedForm.getForm().getBody());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    FormToolkit toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(9,false));
    final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Label fromLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    fromLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    fromText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    fromText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)fromText.getLayoutData()).widthHint=100;
    fromText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    Calendar c=Calendar.getInstance();
    long yesterday=c.getTimeInMillis() - (1000 * 60 * 60* 24);
    c.setTimeInMillis(yesterday);
    fromText.setText(sdf.format(c.getTime()));
    fromText.pack();
    Button bFrom=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bFrom.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (fromText.getText() != null && fromText.getText().length() > 0) {
          try {
            Date d=sdf.parse(fromText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            fromText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label toLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    toLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    toText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    toText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)toText.getLayoutData()).widthHint=100;
    toText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    toText.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        toText.selectAll();
      }
    }
);
    toText.setText(""String_Node_Str"");
    toText.pack();
    Button bTo=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bTo.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (toText.getText() != null && toText.getText().length() > 0) {
          try {
            Date d=sdf.parse(toText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            toText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label conceptLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    conceptLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    conceptCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    conceptCombo.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)conceptCombo.getLayoutData()).widthHint=180;
    conceptCombo.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    Button bSearch=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER);
    bSearch.setLayoutData(new GridData(SWT.NONE,SWT.CENTER,false,false,1,1));
    bSearch.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
      }
    }
);
    Label keyLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    keyLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    keyText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    keyText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,5,1));
    keyText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    Label descriptionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    searchText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    searchText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    searchText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    final Table table=createTable(composite);
    resultsViewer=new TableViewer(table);
    resultsViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,9,1));
    ((GridData)resultsViewer.getControl().getLayoutData()).heightHint=500;
    resultsViewer.setContentProvider(new ArrayContentProvider());
    resultsViewer.setLabelProvider(new ClusterTableLabelProvider());
    resultsViewer.addDoubleClickListener(new IDoubleClickListener(){
      public void doubleClick(      DoubleClickEvent event){
        resultsViewer.setSelection(event.getSelection());
        try {
          new EditItemAction(DataClusterBrowserMainPage.this.getSite().getShell(),resultsViewer).run();
        }
 catch (        Exception e) {
          MessageDialog.openError(DataClusterBrowserMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage());
        }
      }
    }
);
    hookKeyboard();
    hookContextMenu();
    managedForm.reflow(true);
    searchText.setFocus();
    WidgetFactory factory=new WidgetFactory();
    factory.adapt(managedForm.getForm().getBody());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9970330411328387
149316,"protected LineItem[] getResults(){
  Cursor waitCursor=null;
  try {
    Display display=getEditor().getSite().getPage().getWorkbenchWindow().getWorkbench().getDisplay();
    waitCursor=new Cursor(display,SWT.CURSOR_WAIT);
    this.getSite().getShell().setCursor(waitCursor);
    XtentisPort port=Util.getPort(getXObject());
    long from=-1;
    long to=-1;
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    if (!""String_Node_Str"".equals(fromText.getText())) {
      String dateTimeText=fromText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(fromText.getText());
        from=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    if (!""String_Node_Str"".equals(toText.getText())) {
      String dateTimeText=toText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(toText.getText());
        to=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    String concept=conceptCombo.getText();
    if (""String_Node_Str"".equals(concept) | ""String_Node_Str"".equals(concept))     concept=null;
    if (concept != null) {
      concept=concept.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
    }
    String keys=keyText.getText();
    if (""String_Node_Str"".equals(keys) | ""String_Node_Str"".equals(keys))     keys=null;
    String search=searchText.getText();
    if (""String_Node_Str"".equals(search) | ""String_Node_Str"".equals(search))     search=null;
    WSItemPKsByCriteriaResponseResults[] results=port.getItemPKsByCriteria(new WSGetItemPKsByCriteria((WSDataClusterPK)getXObject().getWsKey(),concept,search,keys,from,to,0,Integer.MAX_VALUE)).getResults();
    if (results == null) {
      MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      return new LineItem[0];
    }
    LineItem[] res=new LineItem[results.length];
    for (int i=0; i < results.length; i++) {
      res[i]=new LineItem(results[i].getDate(),results[i].getWsItemPK().getConceptName(),results[i].getWsItemPK().getIds());
    }
    return res;
  }
 catch (  Exception e) {
    e.printStackTrace();
    if ((e.getLocalizedMessage() != null) && e.getLocalizedMessage().contains(""String_Node_Str""))     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
 else     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",e.getLocalizedMessage());
    return null;
  }
 finally {
    try {
      this.getSite().getShell().setCursor(null);
      waitCursor.dispose();
    }
 catch (    Exception e) {
    }
  }
}","protected LineItem[] getResults(boolean showResultInfo){
  Cursor waitCursor=null;
  try {
    Display display=getEditor().getSite().getPage().getWorkbenchWindow().getWorkbench().getDisplay();
    waitCursor=new Cursor(display,SWT.CURSOR_WAIT);
    this.getSite().getShell().setCursor(waitCursor);
    XtentisPort port=Util.getPort(getXObject());
    long from=-1;
    long to=-1;
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    if (!""String_Node_Str"".equals(fromText.getText())) {
      String dateTimeText=fromText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(fromText.getText());
        from=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    if (!""String_Node_Str"".equals(toText.getText())) {
      String dateTimeText=toText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(toText.getText());
        to=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    String concept=conceptCombo.getText();
    if (""String_Node_Str"".equals(concept) | ""String_Node_Str"".equals(concept))     concept=null;
    if (concept != null) {
      concept=concept.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
    }
    String keys=keyText.getText();
    if (""String_Node_Str"".equals(keys) | ""String_Node_Str"".equals(keys))     keys=null;
    String search=searchText.getText();
    if (""String_Node_Str"".equals(search) | ""String_Node_Str"".equals(search))     search=null;
    WSItemPKsByCriteriaResponseResults[] results=port.getItemPKsByCriteria(new WSGetItemPKsByCriteria((WSDataClusterPK)getXObject().getWsKey(),concept,search,keys,from,to,0,Integer.MAX_VALUE)).getResults();
    if (showResultInfo && (results == null)) {
      MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      return new LineItem[0];
    }
    LineItem[] res=new LineItem[results.length];
    for (int i=0; i < results.length; i++) {
      res[i]=new LineItem(results[i].getDate(),results[i].getWsItemPK().getConceptName(),results[i].getWsItemPK().getIds());
    }
    return res;
  }
 catch (  Exception e) {
    e.printStackTrace();
    if ((e.getLocalizedMessage() != null) && e.getLocalizedMessage().contains(""String_Node_Str""))     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
 else     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",e.getLocalizedMessage());
    return null;
  }
 finally {
    try {
      this.getSite().getShell().setCursor(null);
      waitCursor.dispose();
    }
 catch (    Exception e) {
    }
  }
}",0.9931640625
149317,"protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSRole ws=(WSRole)(getXObject().getWsObject());
    ws.setName(role.getName());
    ws.setDescription(role.getDescription());
    Set<String> objectTypes=role.getSpecifications().keySet();
    ArrayList<WSRoleSpecification> wsSpecifications=new ArrayList<WSRoleSpecification>();
    for (Iterator iter=objectTypes.iterator(); iter.hasNext(); ) {
      String objectType=(String)iter.next();
      Role.Specification specification=role.getSpecifications().get(objectType);
      ArrayList<WSRoleSpecificationInstance> wsInstances=new ArrayList<WSRoleSpecificationInstance>();
      Set<String> instanceIds=specification.getInstances().keySet();
      for (Iterator iterator=instanceIds.iterator(); iterator.hasNext(); ) {
        String id=(String)iterator.next();
        Role.Specification.Instance instance=specification.getInstances().get(id);
        WSRoleSpecificationInstance wsInstance=new WSRoleSpecificationInstance(id,instance.isWritable(),instance.getParameters().toArray(new String[instance.getParameters().size()]));
        wsInstances.add(wsInstance);
      }
      WSRoleSpecification wsSpecification=new WSRoleSpecification(objectType,specification.isAdmin(),wsInstances.toArray(new WSRoleSpecificationInstance[wsInstances.size()]));
      wsSpecifications.add(wsSpecification);
    }
    ws.setSpecification(wsSpecifications.toArray(new WSRoleSpecification[wsSpecifications.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSRole ws=(WSRole)(getXObject().getWsObject());
    ws.setDescription(desAntionComposite.getText());
    ws.setName(role.getName());
    Set<String> objectTypes=role.getSpecifications().keySet();
    ArrayList<WSRoleSpecification> wsSpecifications=new ArrayList<WSRoleSpecification>();
    for (Iterator iter=objectTypes.iterator(); iter.hasNext(); ) {
      String objectType=(String)iter.next();
      Role.Specification specification=role.getSpecifications().get(objectType);
      ArrayList<WSRoleSpecificationInstance> wsInstances=new ArrayList<WSRoleSpecificationInstance>();
      Set<String> instanceIds=specification.getInstances().keySet();
      for (Iterator iterator=instanceIds.iterator(); iterator.hasNext(); ) {
        String id=(String)iterator.next();
        Role.Specification.Instance instance=specification.getInstances().get(id);
        WSRoleSpecificationInstance wsInstance=new WSRoleSpecificationInstance(id,instance.isWritable(),instance.getParameters().toArray(new String[instance.getParameters().size()]));
        wsInstances.add(wsInstance);
      }
      WSRoleSpecification wsSpecification=new WSRoleSpecification(objectType,specification.isAdmin(),wsInstances.toArray(new WSRoleSpecificationInstance[wsInstances.size()]));
      wsSpecifications.add(wsSpecification);
    }
    ws.setSpecification(wsSpecifications.toArray(new WSRoleSpecification[wsSpecifications.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9710441649605148
149318,"protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSRole wsRole=(WSRole)(getXObject().getWsObject());
    role=new Role();
    role.setName(wsRole.getName());
    role.setDescription(wsRole.getDescription() == null ? ""String_Node_Str"" : wsRole.getDescription());
    HashMap<String,Role.Specification> specifications=new HashMap<String,Role.Specification>();
    if (wsRole.getSpecification() != null) {
      for (int i=0; i < wsRole.getSpecification().length; i++) {
        WSRoleSpecification wsSpecification=wsRole.getSpecification()[i];
        Role.Specification specification=(new Role()).new Specification();
        specification.setAdmin(wsSpecification.isAdmin());
        HashMap<String,Role.Specification.Instance> instances=new HashMap<String,Role.Specification.Instance>();
        if (wsSpecification.getInstance() != null) {
          for (int j=0; j < wsSpecification.getInstance().length; j++) {
            WSRoleSpecificationInstance wsInstance=wsSpecification.getInstance()[j];
            Role.Specification.Instance instance=specification.new Instance();
            instance.setWritable(wsInstance.isWritable());
            instance.setParameters(new LinkedHashSet<String>(Arrays.asList(wsInstance.getParameter())));
            instances.put(wsInstance.getInstanceName(),instance);
          }
        }
        specification.setInstances(instances);
        specifications.put(wsSpecification.getObjectType(),specification);
      }
    }
    role.setSpecifications(specifications);
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    desAntionComposite.setText(role.getDescription() == null ? ""String_Node_Str"" : role.getDescription());
    int selected=(objectTypesCombo.getSelectionIndex() == -1 ? 0 : objectTypesCombo.getSelectionIndex());
    objectTypesCombo.setItems(objects);
    objectTypesCombo.select(selected);
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSRole wsRole=(WSRole)(getXObject().getWsObject());
    desAntionComposite.setText(wsRole.getDescription() == null ? ""String_Node_Str"" : wsRole.getDescription());
    role=new Role();
    role.setName(wsRole.getName());
    role.setDescription(wsRole.getDescription() == null ? ""String_Node_Str"" : wsRole.getDescription());
    HashMap<String,Role.Specification> specifications=new HashMap<String,Role.Specification>();
    if (wsRole.getSpecification() != null) {
      for (int i=0; i < wsRole.getSpecification().length; i++) {
        WSRoleSpecification wsSpecification=wsRole.getSpecification()[i];
        Role.Specification specification=(new Role()).new Specification();
        specification.setAdmin(wsSpecification.isAdmin());
        HashMap<String,Role.Specification.Instance> instances=new HashMap<String,Role.Specification.Instance>();
        if (wsSpecification.getInstance() != null) {
          for (int j=0; j < wsSpecification.getInstance().length; j++) {
            WSRoleSpecificationInstance wsInstance=wsSpecification.getInstance()[j];
            Role.Specification.Instance instance=specification.new Instance();
            instance.setWritable(wsInstance.isWritable());
            instance.setParameters(new LinkedHashSet<String>(Arrays.asList(wsInstance.getParameter())));
            instances.put(wsInstance.getInstanceName(),instance);
          }
        }
        specification.setInstances(instances);
        specifications.put(wsSpecification.getObjectType(),specification);
      }
    }
    role.setSpecifications(specifications);
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    desAntionComposite.setText(role.getDescription() == null ? ""String_Node_Str"" : role.getDescription());
    int selected=(objectTypesCombo.getSelectionIndex() == -1 ? 0 : objectTypesCombo.getSelectionIndex());
    objectTypesCombo.setItems(objects);
    objectTypesCombo.select(selected);
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9754152823920266
149319,"protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}","protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}",0.9968033095148552
149320,"public DescAnnotationComposite(String labelName,String buttonName,FormToolkit toolkit,Composite parent,AMainPageV2 dialog){
  descAntionHolder=toolkit.createComposite(parent);
  descAntionHolder.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,2,1));
  descAntionHolder.setLayout(new GridLayout(3,false));
  Label descriptionLabel=toolkit.createLabel(descAntionHolder,labelName,SWT.NULL);
  descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  annotationButton=toolkit.createButton(descAntionHolder,buttonName,SWT.PUSH);
  annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  annotationButton.addSelectionListener(this);
  descriptionText=toolkit.createText(descAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
  descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  descriptionText.setEnabled(false);
  accommodation=dialog;
}","public DescAnnotationComposite(String labelName,String buttonName,FormToolkit toolkit,Composite parent,AMainPageV2 dialog){
  descAntionHolder=toolkit.createComposite(parent);
  descAntionHolder.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,2,1));
  descAntionHolder.setLayout(new GridLayout(3,false));
  Label descriptionLabel=toolkit.createLabel(descAntionHolder,labelName,SWT.NULL);
  descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  annotationButton=toolkit.createButton(descAntionHolder,buttonName,SWT.PUSH);
  annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  annotationButton.addSelectionListener(this);
  descriptionText=toolkit.createText(descAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
  descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionValue != null && !descriptionValue.equals(descriptionText.getText())) {
        accommodation.markDirty();
      }
      descriptionValue=descriptionText.getText();
      fillDataStore(descriptionText.getText());
    }
  }
);
  accommodation=dialog;
  dlgTitle=""String_Node_Str"";
}",0.8083371091980064
149321,"public void setText(String text){
  dataStore.clear();
  descriptionText.setText(text);
  boolean find=false;
  Matcher match=DESC_PATTERN.matcher(text);
  while (match.find()) {
    find=true;
    String country=match.group(1);
    String desc=match.group(2);
    dataStore.put(country.toLowerCase(),desc.trim());
  }
  if (!find && !text.equals(""String_Node_Str"")) {
    dataStore.put(""String_Node_Str"",text);
  }
}","public void setText(String text){
  descriptionText.setText(text);
  descriptionValue=text;
  fillDataStore(text);
}",0.3377110694183864
149322,"protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSRole ws=(WSRole)(getXObject().getWsObject());
    ws.setName(role.getName());
    ws.setDescription(role.getDescription());
    Set<String> objectTypes=role.getSpecifications().keySet();
    ArrayList<WSRoleSpecification> wsSpecifications=new ArrayList<WSRoleSpecification>();
    for (Iterator iter=objectTypes.iterator(); iter.hasNext(); ) {
      String objectType=(String)iter.next();
      Role.Specification specification=role.getSpecifications().get(objectType);
      ArrayList<WSRoleSpecificationInstance> wsInstances=new ArrayList<WSRoleSpecificationInstance>();
      Set<String> instanceIds=specification.getInstances().keySet();
      for (Iterator iterator=instanceIds.iterator(); iterator.hasNext(); ) {
        String id=(String)iterator.next();
        Role.Specification.Instance instance=specification.getInstances().get(id);
        WSRoleSpecificationInstance wsInstance=new WSRoleSpecificationInstance(id,instance.isWritable(),instance.getParameters().toArray(new String[instance.getParameters().size()]));
        wsInstances.add(wsInstance);
      }
      WSRoleSpecification wsSpecification=new WSRoleSpecification(objectType,specification.isAdmin(),wsInstances.toArray(new WSRoleSpecificationInstance[wsInstances.size()]));
      wsSpecifications.add(wsSpecification);
    }
    ws.setSpecification(wsSpecifications.toArray(new WSRoleSpecification[wsSpecifications.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSRole ws=(WSRole)(getXObject().getWsObject());
    ws.setDescription(desAntionComposite.getText());
    ws.setName(role.getName());
    Set<String> objectTypes=role.getSpecifications().keySet();
    ArrayList<WSRoleSpecification> wsSpecifications=new ArrayList<WSRoleSpecification>();
    for (Iterator iter=objectTypes.iterator(); iter.hasNext(); ) {
      String objectType=(String)iter.next();
      Role.Specification specification=role.getSpecifications().get(objectType);
      ArrayList<WSRoleSpecificationInstance> wsInstances=new ArrayList<WSRoleSpecificationInstance>();
      Set<String> instanceIds=specification.getInstances().keySet();
      for (Iterator iterator=instanceIds.iterator(); iterator.hasNext(); ) {
        String id=(String)iterator.next();
        Role.Specification.Instance instance=specification.getInstances().get(id);
        WSRoleSpecificationInstance wsInstance=new WSRoleSpecificationInstance(id,instance.isWritable(),instance.getParameters().toArray(new String[instance.getParameters().size()]));
        wsInstances.add(wsInstance);
      }
      WSRoleSpecification wsSpecification=new WSRoleSpecification(objectType,specification.isAdmin(),wsInstances.toArray(new WSRoleSpecificationInstance[wsInstances.size()]));
      wsSpecifications.add(wsSpecification);
    }
    ws.setSpecification(wsSpecifications.toArray(new WSRoleSpecification[wsSpecifications.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9710441649605148
149323,"protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSRole wsRole=(WSRole)(getXObject().getWsObject());
    role=new Role();
    role.setName(wsRole.getName());
    role.setDescription(wsRole.getDescription() == null ? ""String_Node_Str"" : wsRole.getDescription());
    HashMap<String,Role.Specification> specifications=new HashMap<String,Role.Specification>();
    if (wsRole.getSpecification() != null) {
      for (int i=0; i < wsRole.getSpecification().length; i++) {
        WSRoleSpecification wsSpecification=wsRole.getSpecification()[i];
        Role.Specification specification=(new Role()).new Specification();
        specification.setAdmin(wsSpecification.isAdmin());
        HashMap<String,Role.Specification.Instance> instances=new HashMap<String,Role.Specification.Instance>();
        if (wsSpecification.getInstance() != null) {
          for (int j=0; j < wsSpecification.getInstance().length; j++) {
            WSRoleSpecificationInstance wsInstance=wsSpecification.getInstance()[j];
            Role.Specification.Instance instance=specification.new Instance();
            instance.setWritable(wsInstance.isWritable());
            instance.setParameters(new LinkedHashSet<String>(Arrays.asList(wsInstance.getParameter())));
            instances.put(wsInstance.getInstanceName(),instance);
          }
        }
        specification.setInstances(instances);
        specifications.put(wsSpecification.getObjectType(),specification);
      }
    }
    role.setSpecifications(specifications);
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    desAntionComposite.setText(role.getDescription() == null ? ""String_Node_Str"" : role.getDescription());
    int selected=(objectTypesCombo.getSelectionIndex() == -1 ? 0 : objectTypesCombo.getSelectionIndex());
    objectTypesCombo.setItems(objects);
    objectTypesCombo.select(selected);
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSRole wsRole=(WSRole)(getXObject().getWsObject());
    desAntionComposite.setText(wsRole.getDescription() == null ? ""String_Node_Str"" : wsRole.getDescription());
    role=new Role();
    role.setName(wsRole.getName());
    role.setDescription(wsRole.getDescription() == null ? ""String_Node_Str"" : wsRole.getDescription());
    HashMap<String,Role.Specification> specifications=new HashMap<String,Role.Specification>();
    if (wsRole.getSpecification() != null) {
      for (int i=0; i < wsRole.getSpecification().length; i++) {
        WSRoleSpecification wsSpecification=wsRole.getSpecification()[i];
        Role.Specification specification=(new Role()).new Specification();
        specification.setAdmin(wsSpecification.isAdmin());
        HashMap<String,Role.Specification.Instance> instances=new HashMap<String,Role.Specification.Instance>();
        if (wsSpecification.getInstance() != null) {
          for (int j=0; j < wsSpecification.getInstance().length; j++) {
            WSRoleSpecificationInstance wsInstance=wsSpecification.getInstance()[j];
            Role.Specification.Instance instance=specification.new Instance();
            instance.setWritable(wsInstance.isWritable());
            instance.setParameters(new LinkedHashSet<String>(Arrays.asList(wsInstance.getParameter())));
            instances.put(wsInstance.getInstanceName(),instance);
          }
        }
        specification.setInstances(instances);
        specifications.put(wsSpecification.getObjectType(),specification);
      }
    }
    role.setSpecifications(specifications);
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    desAntionComposite.setText(role.getDescription() == null ? ""String_Node_Str"" : role.getDescription());
    int selected=(objectTypesCombo.getSelectionIndex() == -1 ? 0 : objectTypesCombo.getSelectionIndex());
    objectTypesCombo.setItems(objects);
    objectTypesCombo.select(selected);
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9754152823920266
149324,"protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}","protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}",0.9968033095148552
149325,"public DescAnnotationComposite(String labelName,String buttonName,FormToolkit toolkit,Composite parent,AMainPageV2 dialog){
  descAntionHolder=toolkit.createComposite(parent);
  descAntionHolder.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,2,1));
  descAntionHolder.setLayout(new GridLayout(3,false));
  Label descriptionLabel=toolkit.createLabel(descAntionHolder,labelName,SWT.NULL);
  descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  annotationButton=toolkit.createButton(descAntionHolder,buttonName,SWT.PUSH);
  annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  annotationButton.addSelectionListener(this);
  descriptionText=toolkit.createText(descAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
  descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  descriptionText.setEnabled(false);
  accommodation=dialog;
}","public DescAnnotationComposite(String labelName,String buttonName,FormToolkit toolkit,Composite parent,AMainPageV2 dialog){
  descAntionHolder=toolkit.createComposite(parent);
  descAntionHolder.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,2,1));
  descAntionHolder.setLayout(new GridLayout(3,false));
  Label descriptionLabel=toolkit.createLabel(descAntionHolder,labelName,SWT.NULL);
  descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  annotationButton=toolkit.createButton(descAntionHolder,buttonName,SWT.PUSH);
  annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  annotationButton.addSelectionListener(this);
  descriptionText=toolkit.createText(descAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
  descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionValue != null && !descriptionValue.equals(descriptionText.getText())) {
        accommodation.markDirty();
      }
      descriptionValue=descriptionText.getText();
      fillDataStore(descriptionText.getText());
    }
  }
);
  accommodation=dialog;
  dlgTitle=""String_Node_Str"";
}",0.8083371091980064
149326,"public void setText(String text){
  dataStore.clear();
  descriptionText.setText(text);
  boolean find=false;
  Matcher match=DESC_PATTERN.matcher(text);
  while (match.find()) {
    find=true;
    String country=match.group(1);
    String desc=match.group(2);
    dataStore.put(country.toLowerCase(),desc.trim());
  }
  if (!find && !text.equals(""String_Node_Str"")) {
    dataStore.put(""String_Node_Str"",text);
  }
}","public void setText(String text){
  descriptionText.setText(text);
  descriptionValue=text;
  fillDataStore(text);
}",0.3377110694183864
149327,"public ListRange getUsers(String regex,String language) throws Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + regex + ""String_Node_Str""+ language);
  try {
    WSWhereItem wi=new WSWhereItem();
    if ((regex == null) || (""String_Node_Str"".equals(regex)) || ""String_Node_Str"".equals(regex)) {
      wi=null;
    }
 else {
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,regex,WSStringPredicate.NONE,true);
      wi.setWhereCondition(wc);
    }
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(dataclusterPK),""String_Node_Str"",wi,0,0,Integer.MAX_VALUE)).getStrings();
    if ((results == null) || (results.length == 0))     return null;
    ArrayList<User> names=new ArrayList<User>();
    for (int i=0; i < results.length; i++) {
      User user=User.parse(results[i]);
      names.add(user);
    }
    ListRange listRange=new ListRange();
    listRange.setData(names.toArray(new User[names.size()]));
    listRange.setTotalSize(names.size());
    return listRange;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public ListRange getUsers(String regex,String language) throws Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + regex + ""String_Node_Str""+ language);
  try {
    WSWhereItem wi=new WSWhereItem();
    if ((regex == null) || (""String_Node_Str"".equals(regex)) || ""String_Node_Str"".equals(regex)) {
      wi=null;
    }
 else {
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,regex,WSStringPredicate.NONE,true);
      wi.setWhereCondition(wc);
    }
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(dataclusterPK),""String_Node_Str"",wi,0,0,Integer.MAX_VALUE)).getStrings();
    ArrayList<User> names=new ArrayList<User>();
    for (int i=0; i < results.length; i++) {
      User user=User.parse(results[i]);
      names.add(user);
    }
    ListRange listRange=new ListRange();
    listRange.setData(names.toArray(new User[names.size()]));
    listRange.setTotalSize(names.size());
    return listRange;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9713097713097714
149328,"public ListRange getUsers(String regex,String language) throws Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + regex + ""String_Node_Str""+ language);
  try {
    WSWhereItem wi=new WSWhereItem();
    if ((regex == null) || (""String_Node_Str"".equals(regex)) || ""String_Node_Str"".equals(regex)) {
      wi=null;
    }
 else {
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,regex,WSStringPredicate.NONE,true);
      wi.setWhereCondition(wc);
    }
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(dataclusterPK),""String_Node_Str"",wi,0,0,Integer.MAX_VALUE)).getStrings();
    if ((results == null) || (results.length == 0))     return null;
    ArrayList<User> names=new ArrayList<User>();
    for (int i=0; i < results.length; i++) {
      User user=User.parse(results[i]);
      names.add(user);
    }
    ListRange listRange=new ListRange();
    listRange.setData(names.toArray(new User[names.size()]));
    listRange.setTotalSize(names.size());
    return listRange;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public ListRange getUsers(String regex,String language) throws Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + regex + ""String_Node_Str""+ language);
  try {
    WSWhereItem wi=new WSWhereItem();
    if ((regex == null) || (""String_Node_Str"".equals(regex)) || ""String_Node_Str"".equals(regex)) {
      wi=null;
    }
 else {
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,regex,WSStringPredicate.NONE,true);
      wi.setWhereCondition(wc);
    }
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(dataclusterPK),""String_Node_Str"",wi,0,0,Integer.MAX_VALUE)).getStrings();
    ArrayList<User> names=new ArrayList<User>();
    for (int i=0; i < results.length; i++) {
      User user=User.parse(results[i]);
      names.add(user);
    }
    ListRange listRange=new ListRange();
    listRange.setData(names.toArray(new User[names.size()]));
    listRange.setTotalSize(names.size());
    return listRange;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9713097713097714
149329,"private void extractIcon(ApkInfo apkInfo,File file,File workingFolder,String output) throws Exception {
  Pattern patn=Pattern.compile(""String_Node_Str"" + FIELD_PATTERN + ""String_Node_Str"");
  Matcher match=patn.matcher(output);
  if (match.find()) {
    apkInfo.addIcon(match.group(1).trim());
  }
  patn=Pattern.compile(""String_Node_Str"" + FIELD_PATTERN + ""String_Node_Str""+ FIELD_PATTERN+ ""String_Node_Str"");
  match=patn.matcher(output);
  while (match.find()) {
    apkInfo.addIcon(match.group(2).trim());
  }
  for (  String icon : apkInfo.getIcons()) {
    UnZip.extractRes(file,icon);
  }
  int maxWidth=0;
  File tempDir=new File(GlobalUtil.getTempWorkingPath());
  for (  File iconFile : tempDir.listFiles()) {
    BufferedImage bimg=ImageIO.read(iconFile);
    int width=bimg.getWidth();
    if (width == Constancts.PREFER_ICON_DIMS) {
      apkInfo.setIcon(iconFile.getPath());
      maxWidth=width;
      break;
    }
    if (width > maxWidth) {
      apkInfo.setIcon(iconFile.getPath());
      maxWidth=width;
    }
  }
  File iconFile=new File(apkInfo.getIcon());
  File targetFile=new File(workingFolder,String.format(""String_Node_Str"",apkInfo.getId()));
  if (maxWidth == Constancts.PREFER_ICON_DIMS) {
    iconFile.renameTo(targetFile);
  }
 else {
    Image newImage=ImageIO.read(iconFile).getScaledInstance(Constancts.PREFER_ICON_DIMS,Constancts.PREFER_ICON_DIMS,Image.SCALE_SMOOTH);
    BufferedImage newIconBufImg=new BufferedImage(Constancts.PREFER_ICON_DIMS,Constancts.PREFER_ICON_DIMS,BufferedImage.TYPE_INT_ARGB);
    newIconBufImg.getGraphics().drawImage(newImage,0,0,null);
    ImageIO.write(newIconBufImg,""String_Node_Str"",new FileOutputStream(targetFile));
  }
  apkInfo.setIcon(targetFile.getPath());
  GlobalUtil.deleteDirectory(tempDir);
}","private void extractIcon(ApkInfo apkInfo,File file,File workingFolder,String output) throws Exception {
  Pattern patn=Pattern.compile(""String_Node_Str"" + FIELD_PATTERN + ""String_Node_Str"");
  Matcher match=patn.matcher(output);
  if (match.find()) {
    apkInfo.addIcon(match.group(1).trim());
  }
  patn=Pattern.compile(""String_Node_Str"" + FIELD_PATTERN + ""String_Node_Str""+ FIELD_PATTERN+ ""String_Node_Str"");
  match=patn.matcher(output);
  while (match.find()) {
    apkInfo.addIcon(match.group(2).trim());
  }
  for (  String icon : apkInfo.getIcons()) {
    UnZip.extractRes(file,icon);
  }
  int maxWidth=0;
  File tempDir=new File(GlobalUtil.getTempWorkingPath());
  for (  File iconFile : tempDir.listFiles()) {
    BufferedImage bimg=ImageIO.read(iconFile);
    int width=bimg.getWidth();
    if (width == Constancts.PREFER_ICON_DIMS) {
      apkInfo.setIcon(iconFile.getPath());
      maxWidth=width;
      break;
    }
    if (width > maxWidth) {
      apkInfo.setIcon(iconFile.getPath());
      maxWidth=width;
    }
  }
  File iconFile=new File(apkInfo.getIcon());
  File targetFile=new File(workingFolder,String.format(""String_Node_Str"",apkInfo.getId()));
  if (maxWidth == Constancts.PREFER_ICON_DIMS) {
    iconFile.renameTo(targetFile);
  }
 else {
    Image newImage=ImageIO.read(iconFile).getScaledInstance(Constancts.PREFER_ICON_DIMS,Constancts.PREFER_ICON_DIMS,Image.SCALE_SMOOTH);
    BufferedImage newIconBufImg=new BufferedImage(Constancts.PREFER_ICON_DIMS,Constancts.PREFER_ICON_DIMS,BufferedImage.TYPE_INT_ARGB);
    newIconBufImg.getGraphics().drawImage(newImage,0,0,null);
    ImageIO.write(newIconBufImg,""String_Node_Str"",new FileOutputStream(targetFile));
  }
  apkInfo.setIcon(targetFile.getPath());
  GlobalUtil.deleteDirectory(tempDir);
  apkInfo.clearIcons();
}",0.9932735426008968
149330,"public void addLabel(String label){
  this.labels.add(label);
  this.label=label;
}","public void addLabel(String label){
  if (this.label == null)   this.label=label;
  this.labels.add(label);
}",0.65625
149331,"@Override protected void export() throws Exception {
  StringBuilder output=new StringBuilder();
  output.append(GlobalUtil.toString(Main.class.getResourceAsStream(Constancts.EXPORT_LICENSE_FILE)));
  output.append(System.lineSeparator()).append(System.lineSeparator());
  buildOutput(txaPattern.getText(),output);
  File outputFile=new File(solution.getWorkingFolder(),solution.generateOutputFileName() + ""String_Node_Str"");
  FileOutputStream fos=new FileOutputStream(outputFile);
  fos.write(output.toString().getBytes(Charset.defaultCharset()));
  fos.close();
  callback.onProcessSuccess(outputFile);
}","@Override protected void export() throws Exception {
  StringBuilder output=new StringBuilder();
  output.append(GlobalUtil.toString(Main.class.getResourceAsStream(Constancts.EXPORT_LICENSE_FILE)));
  output.append(System.lineSeparator()).append(System.lineSeparator());
  buildOutput(txaPattern.getText(),output);
  File outputFile=new File(solution.getWorkingFolder(),solution.generateOutputFileName() + ""String_Node_Str"");
  FileOutputStream fos=new FileOutputStream(outputFile);
  fos.write(output.toString().getBytes(Constancts.DEFAULT_CHARSET));
  fos.close();
  callback.onProcessSuccess(outputFile);
}",0.950657894736842
149332,"protected void export() throws Exception {
  String content=GlobalUtil.toString(Main.class.getResourceAsStream(Constancts.XML_EXPORT_PATTERN_FILE));
  StringBuilder output=new StringBuilder();
  buildOutput(txaPattern.getText(),output);
  output.deleteCharAt(output.length() - 1).deleteCharAt(output.length() - 1);
  content=content.replace(Constancts.XML_EXPORT_CONTENT_REPLACEMENT,output.toString());
  File outputFile=new File(solution.getWorkingFolder(),solution.generateOutputFileName() + ""String_Node_Str"");
  FileOutputStream fos=new FileOutputStream(outputFile);
  fos.write(content.getBytes(Charset.defaultCharset()));
  fos.close();
  callback.onProcessSuccess(outputFile);
}","protected void export() throws Exception {
  String content=GlobalUtil.toString(Main.class.getResourceAsStream(Constancts.XML_EXPORT_PATTERN_FILE));
  StringBuilder output=new StringBuilder();
  buildOutput(txaPattern.getText(),output);
  output.deleteCharAt(output.length() - 1).deleteCharAt(output.length() - 1);
  content=content.replace(Constancts.XML_EXPORT_CONTENT_REPLACEMENT,output.toString());
  File outputFile=new File(solution.getWorkingFolder(),solution.generateOutputFileName() + ""String_Node_Str"");
  FileOutputStream fos=new FileOutputStream(outputFile);
  fos.write(content.getBytes(Constancts.DEFAULT_CHARSET));
  fos.close();
  callback.onProcessSuccess(outputFile);
}",0.956268221574344
149333,"public static String toString(InputStream in) throws IOException {
  return new String(toBytes(in));
}","public static String toString(InputStream in) throws IOException {
  return new String(toBytes(in),Constancts.DEFAULT_CHARSET);
}",0.8831168831168831
149334,"private void registerSubmittedRequestHandler(){
  try {
    Method method=GrantingOfLoanSagaManager.class.getMethod(""String_Node_Str"",new Class[]{Object.class});
    SpringEventHandler eventHandler=new SpringEventHandler(RequestWasSubmitted.class,""String_Node_Str"",method,applicationContext);
    eventPublisher.registerEventHandler(eventHandler);
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
}","private void registerSubmittedRequestHandler(){
  try {
    Method method=SagaManager.class.getMethod(""String_Node_Str"",new Class[]{Object.class});
    SpringEventHandler eventHandler=new SpringEventHandler(RequestWasSubmitted.class,""String_Node_Str"",method,applicationContext);
    eventPublisher.registerEventHandler(eventHandler);
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
}",0.9830917874396136
149335,"private void registerExtendLoanRequestHandler(){
  try {
    Method method=GrantingOfLoanSagaManager.class.getMethod(""String_Node_Str"",new Class[]{Object.class});
    SpringEventHandler eventHandler=new SpringEventHandler(ExtendTheLoanRequest.class,""String_Node_Str"",method,applicationContext);
    eventPublisher.registerEventHandler(eventHandler);
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
}","private void registerExtendLoanRequestHandler(){
  try {
    Method method=SagaManager.class.getMethod(""String_Node_Str"",new Class[]{Object.class});
    SpringEventHandler eventHandler=new SpringEventHandler(ExtendTheLoanRequest.class,""String_Node_Str"",method,applicationContext);
    eventPublisher.registerEventHandler(eventHandler);
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
}",0.9831730769230768
149336,"private void registerForRiskAnalyzedEvent(){
  try {
    Method method=GrantingOfLoanSagaManager.class.getMethod(""String_Node_Str"",new Class[]{Object.class});
    SpringEventHandler eventHandler=new SpringEventHandler(RiskAnalyzedResponse.class,""String_Node_Str"",method,applicationContext);
    eventPublisher.registerEventHandler(eventHandler);
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
}","private void registerForRiskAnalyzedEvent(){
  try {
    Method method=SagaManager.class.getMethod(""String_Node_Str"",new Class[]{Object.class});
    SpringEventHandler eventHandler=new SpringEventHandler(RiskAnalyzedResponse.class,""String_Node_Str"",method,applicationContext);
    eventPublisher.registerEventHandler(eventHandler);
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
}",0.983009708737864
149337,"private void registerForCheckedIpEvent(){
  try {
    Method method=GrantingOfLoanSagaManager.class.getMethod(""String_Node_Str"",new Class[]{Object.class});
    SpringEventHandler eventHandler=new SpringEventHandler(IpCheckedResponse.class,""String_Node_Str"",method,applicationContext);
    eventPublisher.registerEventHandler(eventHandler);
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
}","private void registerForCheckedIpEvent(){
  try {
    Method method=SagaManager.class.getMethod(""String_Node_Str"",new Class[]{Object.class});
    SpringEventHandler eventHandler=new SpringEventHandler(IpCheckedResponse.class,""String_Node_Str"",method,applicationContext);
    eventPublisher.registerEventHandler(eventHandler);
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
}",0.9827586206896552
149338,D createNewSagaData();,public D createNewSagaData(AggregateId id);,0.676923076923077
149339,"@Autowired public void setSagaManager(GrantingOfLoanSagaManager sagaManager){
  this.sagaManager=sagaManager;
}","@Autowired public void setSagaManager(SagaManager sagaManager){
  this.sagaManager=sagaManager;
}",0.9326923076923076
149340,"@PersistenceContext(type=PersistenceContextType.EXTENDED) public void setEntityManager(EntityManager entityManager){
  this.entityManager=entityManager;
}","@PersistenceContext public void setEntityManager(EntityManager entityManager){
  this.entityManager=entityManager;
}",0.8592592592592593
149341,"@Test public void onCompleteEventsTriggered(){
  Client client=new PersonalDataBuilder().withCorrectlyFilledData().build();
  entityManager.persist(client);
  Form form=new FormBuilder().withCorrectlyFilledForm(client).build();
  AggregateId aggregateId=AggregateId.generate();
  RequestWasSubmitted requestWasSubmitted=new RequestWasSubmitted(form,aggregateId);
  CheckIpRequestHandler checkIpEventNotifier=null;
  DoRiskAnalysisRequestHandler riskAnalysisRequestNotifier=null;
  try {
    Method handleCheckIpMethod=CheckIpRequestHandler.class.getMethod(""String_Node_Str"",new Class[]{Object.class});
    Method handleRiskAnalysisMethod=DoRiskAnalysisRequestHandler.class.getMethod(""String_Node_Str"",new Class[]{Object.class});
    SpringEventHandler checkIpEventHandler=new SpringEventHandler(CheckIpRequest.class,checkIpRequestHandlerName,handleCheckIpMethod,applicationContext);
    SpringEventHandler riskAnalysisEventHandler=new SpringEventHandler(DoRiskAnalysisRequest.class,doRiskAnalysisRequestHandlerName,handleRiskAnalysisMethod,applicationContext);
    eventPublisher.registerEventHandler(checkIpEventHandler);
    eventPublisher.registerEventHandler(riskAnalysisEventHandler);
    checkIpEventNotifier=(CheckIpRequestHandler)applicationContext.getBean(checkIpRequestHandlerName);
    riskAnalysisRequestNotifier=(DoRiskAnalysisRequestHandler)applicationContext.getBean(doRiskAnalysisRequestHandlerName);
  }
 catch (  NoSuchMethodException ex) {
    fail(ex.getMessage());
  }
  eventPublisher.publish(requestWasSubmitted);
  Assert.assertTrue(checkIpEventNotifier.isRightEventOccurred());
  Assert.assertTrue(riskAnalysisRequestNotifier.isRightEventOccurred());
}","@Test @Transactional public void onCompleteEventsTriggered(){
  Client client=new PersonalDataBuilder().withCorrectlyFilledData().build();
  entityManager.persist(client);
  Form form=new FormBuilder().withCorrectlyFilledForm(client).build();
  AggregateId aggregateId=AggregateId.generate();
  RequestWasSubmitted requestWasSubmitted=new RequestWasSubmitted(form,aggregateId);
  CheckIpRequestHandler checkIpEventNotifier=null;
  DoRiskAnalysisRequestHandler riskAnalysisRequestNotifier=null;
  try {
    Method handleCheckIpMethod=CheckIpRequestHandler.class.getMethod(""String_Node_Str"",new Class[]{Object.class});
    Method handleRiskAnalysisMethod=DoRiskAnalysisRequestHandler.class.getMethod(""String_Node_Str"",new Class[]{Object.class});
    SpringEventHandler checkIpEventHandler=new SpringEventHandler(CheckIpRequest.class,checkIpRequestHandlerName,handleCheckIpMethod,applicationContext);
    SpringEventHandler riskAnalysisEventHandler=new SpringEventHandler(DoRiskAnalysisRequest.class,doRiskAnalysisRequestHandlerName,handleRiskAnalysisMethod,applicationContext);
    eventPublisher.registerEventHandler(checkIpEventHandler);
    eventPublisher.registerEventHandler(riskAnalysisEventHandler);
    checkIpEventNotifier=(CheckIpRequestHandler)applicationContext.getBean(checkIpRequestHandlerName);
    riskAnalysisRequestNotifier=(DoRiskAnalysisRequestHandler)applicationContext.getBean(doRiskAnalysisRequestHandlerName);
  }
 catch (  NoSuchMethodException ex) {
    fail(ex.getMessage());
  }
  eventPublisher.publish(requestWasSubmitted);
  Assert.assertTrue(checkIpEventNotifier.isRightEventOccurred());
  Assert.assertTrue(riskAnalysisRequestNotifier.isRightEventOccurred());
}",0.9955476402493322
149342,"@Autowired public void setSagaManager(SagaManager sagaManager){
  this.sagaManager=sagaManager;
}","@Autowired public void setSagaManager(SagaManager<GrantingOfLoanSaga,GrantingOfLoanData> sagaManager){
  this.sagaManager=sagaManager;
}",0.8326180257510729
149343,"public void connect() throws IOException {
  if (token != null && username == null) {
    doGet(""String_Node_Str"",true);
    return;
  }
  HttpPost post=new HttpPost(MessageFormat.format(""String_Node_Str"",endpointUrl));
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",getUsername());
  json.put(""String_Node_Str"",getPassword());
  post.setEntity(new StringEntity(json.toString(),ContentType.APPLICATION_JSON));
  HttpResponse response=httpClient.execute(post);
  int status=response.getStatusLine().getStatusCode();
  if (status != HttpStatus.SC_OK) {
    throw new ClientException(MessageFormat.format(""String_Node_Str"",status,this.endpointUrl,getErrorMessage(getResponseBodyAsString(response))),status);
  }
  token=getResponseBodyAsString(response);
}","public void connect() throws IOException {
  if (token != null && username == null) {
    try {
      doGet(""String_Node_Str"",true);
    }
 catch (    IOException excep) {
      LOGGER.severe(""String_Node_Str"" + endpointUrl);
      throw excep;
    }
    return;
  }
  HttpPost post=new HttpPost(MessageFormat.format(""String_Node_Str"",endpointUrl));
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",getUsername());
  json.put(""String_Node_Str"",getPassword());
  post.setEntity(new StringEntity(json.toString(),ContentType.APPLICATION_JSON));
  HttpResponse response=httpClient.execute(post);
  int status=response.getStatusLine().getStatusCode();
  if (status != HttpStatus.SC_OK) {
    throw new ClientException(MessageFormat.format(""String_Node_Str"",status,this.endpointUrl,getErrorMessage(getResponseBodyAsString(response))),status);
  }
  token=getResponseBodyAsString(response);
}",0.9222488038277512
149344,"public SlaveInstanceManager() throws IOException {
  instanceIdToSlaveMap=new HashMap<String,ElasticBoxSlave>();
  cloudToInstancesMap=new HashMap<ElasticBoxCloud,List<JSONObject>>();
  cloudToWorkspaceIDsMap=new HashMap<ElasticBoxCloud,Set<String>>();
  for (  Node node : Jenkins.getInstance().getNodes()) {
    if (node instanceof ElasticBoxSlave) {
      final ElasticBoxSlave slave=(ElasticBoxSlave)node;
      ElasticBoxCloud cloud=slave.getCloud();
      if (cloud != null) {
        Set<String> workspaceIDs=cloudToWorkspaceIDsMap.get(cloud);
        if (workspaceIDs == null) {
          workspaceIDs=new HashSet<String>();
          cloudToWorkspaceIDsMap.put(cloud,workspaceIDs);
        }
        AbstractSlaveConfiguration config=slave.getSlaveConfiguration();
        if (config != null) {
          workspaceIDs.add(config.getWorkspace());
        }
 else {
          LOGGER.warning(""String_Node_Str"" + slave);
        }
      }
      if (slave.getInstanceUrl() != null) {
        String instanceId=slave.getInstanceId();
        instanceIdToSlaveMap.put(instanceId,slave);
      }
 else {
        if (slavesWithoutInstance == null) {
          slavesWithoutInstance=new ArrayList<>();
        }
        slavesWithoutInstance.add(slave);
      }
    }
  }
  if (slavesWithoutInstance != null) {
    ElasticBoxCloud cloud=null;
    String wks=null;
    JSONArray instances=null;
    AbstractSlaveConfiguration config=null;
    for (    ElasticBoxSlave slave : slavesWithoutInstance) {
      config=slave.getSlaveConfiguration();
      if (slave.getCloud() != null && config != null) {
        if (!slave.getCloud().equals(cloud) && !config.getWorkspace().equals(wks)) {
          cloud=slave.getCloud();
          wks=slave.getSlaveConfiguration().getWorkspace();
          instances=slave.getCloud().getClient().getInstances(wks);
        }
        for (        Object instance : instances) {
          JSONObject instanceJson=(JSONObject)instance;
          String label=instanceJson.getJSONArray(""String_Node_Str"").getString(0);
          if (slave.getNodeName().equals(label)) {
            String instanceId=instanceJson.getString(""String_Node_Str"");
            if (slave.getInstanceUrl() == null) {
              String url=slave.getCloud().getClient().getInstanceUrl(instanceId);
              slave.setInstanceUrl(slave.getCloud().getClient().getInstanceUrl(url));
              LOGGER.info(""String_Node_Str"" + url + ""String_Node_Str""+ slave);
            }
            slavesWithoutInstance.remove(slave);
            instanceIdToSlaveMap.put(instanceId,slave);
            break;
          }
        }
      }
    }
  }
  if (LOGGER.isLoggable(Level.FINEST)) {
    StringBuilder sb=new StringBuilder(300);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(instanceIdToSlaveMap);
    sb.append(""String_Node_Str"").append(cloudToWorkspaceIDsMap);
    sb.append(""String_Node_Str"").append(slavesWithoutInstance);
    LOGGER.finest(sb.toString());
  }
}","public SlaveInstanceManager() throws IOException {
  instanceIdToSlaveMap=new HashMap<String,ElasticBoxSlave>();
  cloudToInstancesMap=new HashMap<ElasticBoxCloud,List<JSONObject>>();
  cloudToWorkspaceIDsMap=new HashMap<ElasticBoxCloud,Set<String>>();
  for (  Node node : Jenkins.getInstance().getNodes()) {
    if (node instanceof ElasticBoxSlave) {
      final ElasticBoxSlave slave=(ElasticBoxSlave)node;
      ElasticBoxCloud cloud=slave.getCloud();
      if (cloud != null) {
        Set<String> workspaceIDs=cloudToWorkspaceIDsMap.get(cloud);
        if (workspaceIDs == null) {
          workspaceIDs=new HashSet<String>();
          cloudToWorkspaceIDsMap.put(cloud,workspaceIDs);
        }
        AbstractSlaveConfiguration config=slave.getSlaveConfiguration();
        if (config != null) {
          workspaceIDs.add(config.getWorkspace());
        }
 else {
          LOGGER.warning(""String_Node_Str"" + slave);
        }
      }
      if (slave.getInstanceUrl() != null) {
        String instanceId=slave.getInstanceId();
        instanceIdToSlaveMap.put(instanceId,slave);
      }
 else {
        if (slavesWithoutInstance == null) {
          slavesWithoutInstance=new ArrayList<>();
        }
        slavesWithoutInstance.add(slave);
      }
    }
  }
  if (slavesWithoutInstance != null) {
    ElasticBoxCloud cloud=null;
    String wks=null;
    JSONArray instances=null;
    AbstractSlaveConfiguration config;
    Iterator<ElasticBoxSlave> iterator=slavesWithoutInstance.iterator();
    while (iterator.hasNext()) {
      ElasticBoxSlave slave=iterator.next();
      config=slave.getSlaveConfiguration();
      if (slave.getCloud() != null && config != null) {
        if (!slave.getCloud().equals(cloud) && !config.getWorkspace().equals(wks)) {
          cloud=slave.getCloud();
          wks=slave.getSlaveConfiguration().getWorkspace();
          instances=cloud.getClient().getInstances(wks);
        }
        for (        Object instance : instances) {
          JSONObject instanceJson=(JSONObject)instance;
          String label=instanceJson.getJSONArray(""String_Node_Str"").getString(0);
          if (slave.getNodeName().equals(label)) {
            String instanceId=instanceJson.getString(""String_Node_Str"");
            if (slave.getInstanceUrl() == null) {
              final String url=cloud.getClient().getInstanceUrl(instanceId);
              slave.setInstanceUrl(url);
              LOGGER.info(""String_Node_Str"" + url + ""String_Node_Str""+ slave);
            }
            iterator.remove();
            instanceIdToSlaveMap.put(instanceId,slave);
            break;
          }
        }
      }
    }
  }
  if (LOGGER.isLoggable(Level.FINEST)) {
    StringBuilder sb=new StringBuilder(300);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"").append(instanceIdToSlaveMap);
    sb.append(""String_Node_Str"").append(cloudToWorkspaceIDsMap);
    sb.append(""String_Node_Str"").append(slavesWithoutInstance);
    LOGGER.finest(sb.toString());
  }
}",0.9504752376188094
149345,"private void deployInstance(InstanceCreationRequest request) throws IOException {
  ElasticBoxCloud cloud=request.slave.getCloud();
  Client ebClient=cloud.getClient();
  AbstractSlaveConfiguration slaveConfig=request.slave.getSlaveConfiguration();
  String workspace=slaveConfig.getWorkspace();
  JSONArray variables=getJenkinsVariables(request.slave);
  LOGGER.info(""String_Node_Str"" + ebClient.getBoxPageUrl(request.slave.getBoxVersion()));
  List<String> tags=new ArrayList<>();
  tags.add(request.slave.getNodeName());
  String userTags=slaveConfig.getTags();
  if (StringUtils.isNotEmpty(userTags)) {
    String[] userTagList=StringUtils.split(userTags,""String_Node_Str"");
    tags.addAll(Arrays.asList(userTagList));
  }
  IProgressMonitor monitor=ebClient.deploy(request.slave.getBoxVersion(),request.slave.getProfileId(),null,workspace,tags,variables,null,null,request.slave.getPolicyVariables(),Constants.AUTOMATIC_UPDATES_OFF);
  request.slave.setInstanceUrl(monitor.getResourceUrl());
  request.slave.setInstanceStatusMessage(MessageFormat.format(""String_Node_Str"",request.slave.getInstancePageUrl()));
  request.monitor.setMonitor(monitor);
  request.monitor.setLaunched();
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine(""String_Node_Str"" + request.slave);
  }
  submittedQueue.add(request);
}","private void deployInstance(InstanceCreationRequest request) throws IOException {
  final ElasticBoxSlave slave=request.slave;
  final ElasticBoxCloud cloud=slave.getCloud();
  final Client ebClient=cloud.getClient();
  LOGGER.info(""String_Node_Str"" + ebClient.getBoxPageUrl(slave.getBoxVersion()));
  final AbstractSlaveConfiguration slaveConfig=slave.getSlaveConfiguration();
  final JSONArray variables=getJenkinsVariables(slave);
  final String workspace=slaveConfig.getWorkspace();
  List<String> tags=new ArrayList<>();
  tags.add(slave.getNodeName());
  String userTags=slaveConfig.getTags();
  if (StringUtils.isNotEmpty(userTags)) {
    String[] userTagList=StringUtils.split(userTags,""String_Node_Str"");
    tags.addAll(Arrays.asList(userTagList));
  }
  IProgressMonitor monitor=ebClient.deploy(slave.getBoxVersion(),slave.getProfileId(),null,workspace,tags,variables,null,null,slave.getPolicyVariables(),Constants.AUTOMATIC_UPDATES_OFF);
  slave.setInstanceUrl(monitor.getResourceUrl());
  slave.setInstanceStatusMessage(MessageFormat.format(""String_Node_Str"",slave.getInstancePageUrl()));
  request.monitor.setMonitor(monitor);
  request.monitor.setLaunched();
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine(""String_Node_Str"" + slave);
  }
  submittedQueue.add(request);
}",0.7917146144994246
149346,"private int waitForInstanceToBeReady(String instanceId) throws TaskException, RepositoryException {
  final InstanceRepositoryAPIImpl service=new InstanceRepositoryAPIImpl(client);
  final Instance instance=service.getInstance(instanceId);
  final Instance.State state=instance.getState();
  WaitForInstanceToBeReady updateInstanceWhenIsReady=null;
  if (state == Instance.State.PROCESSING) {
    taskLogger.info(""String_Node_Str"",instanceId);
    updateInstanceWhenIsReady=new WaitForInstanceToBeReady(DELAY,INITIAL_DELAY,TIMEOUT);
    updateInstanceWhenIsReady.execute();
  }
  taskLogger.info(""String_Node_Str"",instanceId);
  return updateInstanceWhenIsReady.getTotalRoundtrips();
}","private int waitForInstanceToBeReady(String instanceId) throws TaskException, RepositoryException {
  final InstanceRepositoryAPIImpl service=new InstanceRepositoryAPIImpl(client);
  final Instance instance=service.getInstance(instanceId);
  final Instance.State state=instance.getState();
  WaitForInstanceToBeReady updateInstanceWhenIsReady=null;
  if (state == Instance.State.PROCESSING) {
    taskLogger.info(""String_Node_Str"",instanceId);
    updateInstanceWhenIsReady=new WaitForInstanceToBeReady(DELAY,INITIAL_DELAY,TIMEOUT);
    updateInstanceWhenIsReady.execute();
    return updateInstanceWhenIsReady.getTotalRoundtrips();
  }
  taskLogger.info(""String_Node_Str"",instanceId);
  return 0;
}",0.9234104046242776
149347,"public ListBoxModel doFillProfileItems(@QueryParameter String cloud,@QueryParameter String workspace,@QueryParameter String box){
  LOGGER.log(Level.FINE,""String_Node_Str"" + cloud + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ box);
  ListBoxModel profiles=new ListBoxModel();
  try {
    if (StringUtils.isEmpty(cloud) || StringUtils.isEmpty(workspace) || StringUtils.isEmpty(box))     return profiles;
    final DeployBoxOrderResult<List<PolicyBox>> result=new DeployBoxOrderServiceImpl(cloud).deploymentOptions(workspace,box);
    final List<PolicyBox> policyBoxList=result.getResult();
    for (    PolicyBox policyBox : policyBoxList) {
      profiles.add(policyBox.getName(),policyBox.getId());
    }
  }
 catch (  ServiceException e) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"" + cloud + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ box+ ""String_Node_Str"");
    e.printStackTrace();
  }
  return profiles;
}","public ListBoxModel doFillProfileItems(@QueryParameter String cloud,@QueryParameter String workspace,@QueryParameter String box){
  LOGGER.log(Level.FINE,""String_Node_Str"" + cloud + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ box);
  ListBoxModel profiles=new ListBoxModel();
  try {
    if (StringUtils.isEmpty(cloud) || StringUtils.isEmpty(workspace) || StringUtils.isEmpty(box))     return profiles;
    final DeployBoxOrderResult<List<PolicyBox>> result=new DeployBoxOrderServiceImpl().deploymentOptions(cloud,workspace,box);
    final List<PolicyBox> policyBoxList=result.getResult();
    for (    PolicyBox policyBox : policyBoxList) {
      profiles.add(policyBox.getName(),policyBox.getId());
    }
  }
 catch (  ServiceException e) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"" + cloud + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ box+ ""String_Node_Str"");
    e.printStackTrace();
  }
  return profiles;
}",0.9940636805180788
149348,"public ListBoxModel doFillProfileItems(@RelativePath(""String_Node_Str"") @QueryParameter String endpointUrl,@RelativePath(""String_Node_Str"") @QueryParameter String token,@QueryParameter String workspace,@QueryParameter String box){
  LOGGER.log(Level.FINE,""String_Node_Str"" + endpointUrl + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ box);
  ListBoxModel profiles=new ListBoxModel();
  try {
    final DeployBoxOrderResult<List<PolicyBox>> result=new DeployBoxOrderServiceImpl(endpointUrl).deploymentOptions(workspace,box);
    final List<PolicyBox> policyBoxList=result.getResult();
    for (    PolicyBox policyBox : policyBoxList) {
      profiles.add(policyBox.getName(),policyBox.getId());
    }
  }
 catch (  ServiceException e) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"" + endpointUrl + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ box+ ""String_Node_Str"",e);
  }
  return profiles;
}","public ListBoxModel doFillProfileItems(@RelativePath(""String_Node_Str"") @QueryParameter String endpointUrl,@RelativePath(""String_Node_Str"") @QueryParameter String token,@QueryParameter String workspace,@QueryParameter String box){
  LOGGER.log(Level.FINE,""String_Node_Str"" + endpointUrl + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ box);
  ListBoxModel profiles=new ListBoxModel();
  try {
    if (StringUtils.isEmpty(endpointUrl) || StringUtils.isEmpty(workspace) || StringUtils.isEmpty(box))     return profiles;
    final DeployBoxOrderResult<List<PolicyBox>> result=new DeployBoxOrderServiceImpl().deploymentOptions(endpointUrl,token,workspace,box);
    final List<PolicyBox> policyBoxList=result.getResult();
    for (    PolicyBox policyBox : policyBoxList) {
      profiles.add(policyBox.getName(),policyBox.getId());
    }
  }
 catch (  ServiceException e) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"" + endpointUrl + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ box+ ""String_Node_Str"",e);
  }
  return profiles;
}",0.91124871001032
149349,"public ListBoxModel doFillProfileItems(@QueryParameter String cloud,@QueryParameter String workspace,@QueryParameter String box){
  logger.log(Level.FINE,""String_Node_Str"" + cloud + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ box);
  ListBoxModel profiles=new ListBoxModel();
  try {
    if (StringUtils.isEmpty(cloud) || StringUtils.isEmpty(workspace) || StringUtils.isEmpty(box))     return profiles;
    final DeployBoxOrderResult<List<PolicyBox>> result=new DeployBoxOrderServiceImpl(cloud).deploymentOptions(workspace,box);
    final List<PolicyBox> policyBoxList=result.getResult();
    for (    PolicyBox policyBox : policyBoxList) {
      profiles.add(policyBox.getName(),policyBox.getId());
    }
  }
 catch (  ServiceException e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + cloud + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ box+ ""String_Node_Str"");
    e.printStackTrace();
  }
  return profiles;
}","public ListBoxModel doFillProfileItems(@QueryParameter String cloud,@QueryParameter String workspace,@QueryParameter String box){
  logger.log(Level.FINE,""String_Node_Str"" + cloud + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ box);
  ListBoxModel profiles=new ListBoxModel();
  try {
    if (StringUtils.isEmpty(cloud) || StringUtils.isEmpty(workspace) || StringUtils.isEmpty(box))     return profiles;
    final DeployBoxOrderResult<List<PolicyBox>> result=new DeployBoxOrderServiceImpl().deploymentOptions(cloud,workspace,box);
    final List<PolicyBox> policyBoxList=result.getResult();
    for (    PolicyBox policyBox : policyBoxList) {
      profiles.add(policyBox.getName(),policyBox.getId());
    }
  }
 catch (  ServiceException e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + cloud + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ box+ ""String_Node_Str"");
    e.printStackTrace();
  }
  return profiles;
}",0.9940636805180788
149350,"public DeployBoxOrderResult<List<PolicyBox>> deploymentOptions(String workspace,String boxToDeploy) throws RepositoryException, ServiceException ;","public DeployBoxOrderResult<List<PolicyBox>> deploymentOptions(String endpoint,String token,String workspace,String boxToDeploy) throws ServiceException ;",0.8333333333333334
149351,"public DeployBoxOrderResult<List<PolicyBox>> deploymentOptions(String workspace,String boxToDeploy) throws ServiceException {
  try {
    final AbstractBox box=boxRepository.getBox(boxToDeploy);
    final List<PolicyBox> policies=new DeploymentDirector(boxRepository).getPolicies(workspace,box);
    return new DeployBoxOrderResult<List<PolicyBox>>(policies);
  }
 catch (  RepositoryException e) {
    e.printStackTrace();
    throw new ServiceException(""String_Node_Str"" + workspace + ""String_Node_Str""+ boxToDeploy);
  }
}","private DeployBoxOrderResult<List<PolicyBox>> deploymentOptions(BoxRepository boxRepository,String workspace,String boxToDeploy) throws ServiceException {
  try {
    final AbstractBox box=boxRepository.getBox(boxToDeploy);
    final List<PolicyBox> policies=new DeploymentDirector(boxRepository).getPolicies(workspace,box);
    return new DeployBoxOrderResult<List<PolicyBox>>(policies);
  }
 catch (  RepositoryException e) {
    e.printStackTrace();
    throw new ServiceException(""String_Node_Str"" + workspace + ""String_Node_Str""+ boxToDeploy);
  }
}",0.963855421686747
149352,"public PullRequestBuildHandler(AbstractProject<?,?> project,boolean newTrigger) throws IOException {
  this.project=project;
  final GithubProjectProperty property=project.getProperty(GithubProjectProperty.class);
  if (property == null || property.getProjectUrl() == null || StringUtils.isBlank(property.getProjectUrl().baseUrl())) {
    throw new IOException(MessageFormat.format(""String_Node_Str"",project.getFullName()));
  }
  String gitHubProjectUrl=property.getProjectUrl().baseUrl().trim();
  GitHubRepositoryName gitHubRepoName=GitHubRepositoryName.create(gitHubProjectUrl);
  if (gitHubRepoName == null) {
    throw new IOException(MessageFormat.format(""String_Node_Str"",gitHubProjectUrl));
  }
  GHRepository repo=gitHubRepoName.resolveOne();
  if (repo == null) {
    throw new IOException(MessageFormat.format(""String_Node_Str"",gitHubRepoName));
  }
  gitHubRepositoryUrl=repo.getUrl();
  if (!gitHubRepositoryUrl.endsWith(""String_Node_Str"")) {
    gitHubRepositoryUrl+='/';
  }
  PullRequestBuildTrigger trigger=project.getTrigger(PullRequestBuildTrigger.class);
  triggerPhrasePattern=Pattern.compile(trigger.getTriggerPhrase(),Pattern.CASE_INSENSITIVE);
  if (StringUtils.isNotBlank(trigger.getWhitelist())) {
    Set<String> entries=new HashSet<String>();
    for (    String entry : trigger.getWhitelist().split(""String_Node_Str"")) {
      if (StringUtils.isNotBlank(entry)) {
        entries.add(entry);
      }
    }
    if (!entries.isEmpty()) {
      whitelist=entries;
    }
  }
  if (newTrigger) {
    configureGit(gitHubRepoName,trigger);
    PullRequestBuildTrigger.DescriptorImpl descriptor=(PullRequestBuildTrigger.DescriptorImpl)Jenkins.getInstance().getDescriptor(PullRequestBuildTrigger.class);
    final String webhookUrl=StringUtils.isBlank(descriptor.getWebHookExternalUrl()) ? descriptor.getWebHookUrl() : descriptor.getWebHookExternalUrl();
    if (webhookUrl == null) {
      LOGGER.warning(MessageFormat.format(""String_Node_Str"",gitHubRepositoryUrl,descriptor.getDisplayName()));
    }
 else {
      LOGGER.info(MessageFormat.format(""String_Node_Str"",webhookUrl,gitHubRepositoryUrl));
      sequentialExecutionQueue.execute(new Runnable(){
        public void run(){
          try {
            createWebHook(webhookUrl);
          }
 catch (          Throwable ex) {
            LOGGER.log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",gitHubRepositoryUrl),ex);
          }
        }
      }
);
    }
  }
}","public PullRequestBuildHandler(AbstractProject<?,?> project,boolean newTrigger) throws IOException {
  this.project=project;
  final GithubProjectProperty property=project.getProperty(GithubProjectProperty.class);
  if (property == null || property.getProjectUrl() == null || StringUtils.isBlank(property.getProjectUrl().baseUrl())) {
    throw new IOException(MessageFormat.format(""String_Node_Str"",project.getFullName()));
  }
  String gitHubProjectUrl=property.getProjectUrl().baseUrl().trim();
  GitHubRepositoryName gitHubRepoName=GitHubRepositoryName.create(gitHubProjectUrl);
  if (gitHubRepoName == null) {
    throw new IOException(MessageFormat.format(""String_Node_Str"",gitHubProjectUrl));
  }
  GHRepository repo=gitHubRepoName.resolveOne();
  if (repo == null) {
    LOGGER.severe(MessageFormat.format(""String_Node_Str"",gitHubRepoName));
    gitHubRepositoryUrl=gitHubProjectUrl;
  }
 else {
    gitHubRepositoryUrl=repo.getUrl();
  }
  if (!gitHubRepositoryUrl.endsWith(""String_Node_Str"")) {
    gitHubRepositoryUrl+='/';
  }
  PullRequestBuildTrigger trigger=project.getTrigger(PullRequestBuildTrigger.class);
  triggerPhrasePattern=Pattern.compile(trigger.getTriggerPhrase(),Pattern.CASE_INSENSITIVE);
  if (StringUtils.isNotBlank(trigger.getWhitelist())) {
    Set<String> entries=new HashSet<String>();
    for (    String entry : trigger.getWhitelist().split(""String_Node_Str"")) {
      if (StringUtils.isNotBlank(entry)) {
        entries.add(entry);
      }
    }
    if (!entries.isEmpty()) {
      whitelist=entries;
    }
  }
  if (newTrigger) {
    configureGit(gitHubRepoName,trigger);
    PullRequestBuildTrigger.DescriptorImpl descriptor=(PullRequestBuildTrigger.DescriptorImpl)Jenkins.getInstance().getDescriptor(PullRequestBuildTrigger.class);
    final String webhookUrl=StringUtils.isBlank(descriptor.getWebHookExternalUrl()) ? descriptor.getWebHookUrl() : descriptor.getWebHookExternalUrl();
    if (webhookUrl == null) {
      LOGGER.warning(MessageFormat.format(""String_Node_Str"",gitHubRepositoryUrl,descriptor.getDisplayName()));
    }
 else {
      LOGGER.info(MessageFormat.format(""String_Node_Str"",webhookUrl,gitHubRepositoryUrl));
      sequentialExecutionQueue.execute(new Runnable(){
        public void run(){
          try {
            createWebHook(webhookUrl);
          }
 catch (          Throwable ex) {
            LOGGER.log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",gitHubRepositoryUrl),ex);
          }
        }
      }
);
    }
  }
}",0.9826192400970089
149353,"static void deleteInstances(List<PullRequestData> pullRequestDataList,GHPullRequest pullRequest){
  Set<PullRequestInstance> prInstances=new HashSet<PullRequestInstance>();
  for (  PullRequestData prData : pullRequestDataList) {
    prInstances.addAll(prData.getInstances());
  }
  List<String> terminatingInstanceURLs=new ArrayList<String>();
  for (  PullRequestInstance instance : prInstances) {
    Client client=ClientCache.getClient(instance.cloud);
    if (client != null) {
      IProgressMonitor monitor=null;
      try {
        LOGGER.info(MessageFormat.format(""String_Node_Str"",client.getInstanceUrl(instance.id),pullRequest.getUrl()));
        monitor=client.terminate(instance.id);
      }
 catch (      ClientException ex) {
        if (ex.getStatusCode() == HttpStatus.SC_CONFLICT) {
          try {
            monitor=client.forceTerminate(instance.id);
          }
 catch (          IOException ex1) {
            LOGGER.log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",instance.id),ex1);
          }
        }
 else         if (ex.getStatusCode() == HttpStatus.SC_NOT_FOUND) {
          LOGGER.info(MessageFormat.format(""String_Node_Str"",client.getInstanceUrl(instance.id)));
        }
 else {
          LOGGER.log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",instance.id),ex);
        }
      }
catch (      IOException ex) {
        LOGGER.log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",instance.id),ex);
      }
      if (monitor != null) {
        Jenkins.getInstance().getExtensionList(ElasticBoxExecutor.Workload.class).get(DeleteInstancesWorkload.class).add(instance);
        terminatingInstanceURLs.add(monitor.getResourceUrl());
      }
    }
  }
  if (!terminatingInstanceURLs.isEmpty()) {
    try {
      pullRequest.comment(MessageFormat.format(""String_Node_Str"",StringUtils.join(terminatingInstanceURLs,""String_Node_Str"")));
    }
 catch (    IOException ex) {
      LOGGER.log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",pullRequest.getUrl(),ex));
    }
  }
}","static void deleteInstances(List<PullRequestData> pullRequestDataList,GHPullRequest pullRequest){
  Set<PullRequestInstance> prInstances=new HashSet<PullRequestInstance>();
  for (  PullRequestData prData : pullRequestDataList) {
    prInstances.addAll(prData.getInstances());
  }
  List<String> terminatingInstanceURLs=new ArrayList<String>();
  for (  PullRequestInstance instance : prInstances) {
    Client client=ClientCache.getClient(instance.cloud);
    if (client != null) {
      boolean instanceExists=true;
      try {
        LOGGER.info(MessageFormat.format(""String_Node_Str"",client.getInstanceUrl(instance.id),pullRequest.getUrl()));
        client.terminate(instance.id);
      }
 catch (      ClientException ex) {
        if (ex.getStatusCode() == HttpStatus.SC_CONFLICT) {
          try {
            client.forceTerminate(instance.id);
          }
 catch (          IOException ex1) {
            LOGGER.log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",instance.id),ex1);
          }
        }
 else         if (ex.getStatusCode() == HttpStatus.SC_NOT_FOUND) {
          LOGGER.info(MessageFormat.format(""String_Node_Str"",client.getInstanceUrl(instance.id)));
          instanceExists=false;
        }
 else {
          LOGGER.log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",instance.id),ex);
        }
      }
catch (      IOException ex) {
        LOGGER.log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",instance.id),ex);
      }
      if (instanceExists) {
        Jenkins.getInstance().getExtensionList(ElasticBoxExecutor.Workload.class).get(DeleteInstancesWorkload.class).add(instance);
        terminatingInstanceURLs.add(client.getInstanceUrl(instance.id));
      }
    }
  }
  if (!terminatingInstanceURLs.isEmpty()) {
    try {
      pullRequest.comment(MessageFormat.format(""String_Node_Str"",StringUtils.join(terminatingInstanceURLs,""String_Node_Str"")));
    }
 catch (    IOException ex) {
      LOGGER.log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",pullRequest.getUrl(),ex));
    }
  }
}",0.9570552147239264
149354,"@Override public void onDeploying(AbstractBuild<?,?> build,String instanceId,ElasticBoxCloud cloud) throws IOException, InterruptedException {
  AbstractBuild<?,?> rootBuild=build;
  for (Cause.UpstreamCause upstreamCause=build.getCause(Cause.UpstreamCause.class); upstreamCause != null; upstreamCause=rootBuild.getCause(Cause.UpstreamCause.class)) {
    Run<?,?> run=upstreamCause.getUpstreamRun();
    if (run == null) {
      break;
    }
    rootBuild=(AbstractBuild<?,?>)run;
  }
  TriggerCause cause=rootBuild.getCause(TriggerCause.class);
  if (cause == null) {
    return;
  }
  ConcurrentHashMap<String,PullRequestData> prDataLookup=getInstance().projectPullRequestDataLookup.get(rootBuild.getProject());
  if (prDataLookup != null) {
    PullRequestData data=prDataLookup.get(cause.getPullRequest().getUrl().toString());
    if (data != null) {
      data.getInstances().add(new PullRequestInstance(instanceId,cloud.name));
      data.save();
    }
  }
}","@Override public void onDeploying(AbstractBuild<?,?> build,String instanceId,ElasticBoxCloud cloud) throws IOException, InterruptedException {
  AbstractBuild<?,?> rootBuild=build;
  for (Cause.UpstreamCause upstreamCause=build.getCause(Cause.UpstreamCause.class); upstreamCause != null; upstreamCause=rootBuild.getCause(Cause.UpstreamCause.class)) {
    Run<?,?> run=upstreamCause.getUpstreamRun();
    if (run == null) {
      break;
    }
    rootBuild=(AbstractBuild<?,?>)run;
  }
  TriggerCause cause=rootBuild.getCause(TriggerCause.class);
  if (cause == null) {
    return;
  }
  ConcurrentHashMap<String,PullRequestData> prDataLookup=getInstance().projectPullRequestDataLookup.get(rootBuild.getProject());
  if (prDataLookup != null) {
    PullRequestData data=prDataLookup.get(cause.getPullRequest().getUrl().toString());
    if (data == null) {
      data=getInstance().addPullRequestData(cause.getPullRequest(),rootBuild.getProject());
    }
    data.getInstances().add(new PullRequestInstance(instanceId,cloud.name));
    data.save();
  }
}",0.9464285714285714
149355,"@Initializer(before=InitMilestone.COMPLETED) public static void setSlaveConfigurationId() throws IOException {
  boolean saveNeeded=false;
  for (  Cloud cloud : Jenkins.getInstance().clouds) {
    if (cloud instanceof ElasticBoxCloud) {
      ElasticBoxCloud ebxCloud=(ElasticBoxCloud)cloud;
      for (      SlaveConfiguration slaveConfig : ebxCloud.getSlaveConfigurations()) {
        if (StringUtils.isBlank(slaveConfig.getId())) {
          slaveConfig.setId(UUID.randomUUID().toString());
          saveNeeded=true;
        }
      }
    }
  }
  if (saveNeeded) {
    Jenkins.getInstance().save();
  }
}","@Initializer(after=InitMilestone.JOB_LOADED) public static void setSlaveConfigurationId() throws IOException {
  LOGGER.finest(""String_Node_Str"");
  boolean saveNeeded=false;
  for (  Cloud cloud : Jenkins.getInstance().clouds) {
    if (cloud instanceof ElasticBoxCloud) {
      ElasticBoxCloud ebxCloud=(ElasticBoxCloud)cloud;
      for (      SlaveConfiguration slaveConfig : ebxCloud.getSlaveConfigurations()) {
        if (StringUtils.isBlank(slaveConfig.getId())) {
          slaveConfig.setId(UUID.randomUUID().toString());
          saveNeeded=true;
        }
      }
    }
  }
  if (saveNeeded) {
    Jenkins.getInstance().save();
  }
}",0.9537480063795852
149356,"@Initializer(before=InitMilestone.COMPLETED) public static void tagSlaveInstances() throws IOException {
  LOGGER.info(""String_Node_Str"");
  new Condition(){
    @Override public boolean satisfied(){
      return Jenkins.getInstance().getNodes() != null;
    }
  }
.waitUntilSatisfied(3000);
  ElasticBoxExecutor.threadPool.submit(new Runnable(){
    public void run(){
      try {
        SlaveInstanceManager manager=new SlaveInstanceManager();
        for (        JSONObject instance : manager.getInstances()) {
          ElasticBoxSlave slave=manager.getSlave(instance.getString(""String_Node_Str""));
          ElasticBoxSlaveHandler.getInstance().tagSlaveInstance(instance,slave);
        }
      }
 catch (      IOException ex) {
        LOGGER.log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
  }
);
}","@Initializer(after=InitMilestone.JOB_LOADED) public static void tagSlaveInstances() throws IOException {
  LOGGER.finest(""String_Node_Str"");
  new Condition(){
    @Override public boolean satisfied(){
      return Jenkins.getInstance().getNodes() != null;
    }
  }
.waitUntilSatisfied(3000);
  ElasticBoxExecutor.threadPool.submit(new Runnable(){
    public void run(){
      try {
        SlaveInstanceManager manager=new SlaveInstanceManager();
        for (        JSONObject instance : manager.getInstances()) {
          ElasticBoxSlave slave=manager.getSlave(instance.getString(""String_Node_Str""));
          ElasticBoxSlaveHandler.getInstance().tagSlaveInstance(instance,slave);
        }
      }
 catch (      IOException ex) {
        LOGGER.log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
  }
);
}",0.9828009828009828
149357,"@Override protected void onLoad(ProjectData projectData){
  PullRequestManager manager=PullRequestManager.getInstance();
  PullRequests pullRequests=projectData.get(PullRequests.class);
  if (pullRequests != null) {
    ConcurrentHashMap<String,PullRequestData> pullRequestDataLookup=new ConcurrentHashMap<String,PullRequestData>();
    for (    PullRequestData pullRequestData : pullRequests.getData()) {
      pullRequestDataLookup.put(pullRequestData.pullRequestUrl.toString(),pullRequestData);
    }
    manager.projectPullRequestDataLookup.put(projectData.getProject(),pullRequestDataLookup);
  }
}","@Override protected void onLoad(ProjectData projectData){
  LOGGER.finest(MessageFormat.format(""String_Node_Str"",projectData.getProject().getName()));
  PullRequestManager manager=PullRequestManager.getInstance();
  PullRequests pullRequests=projectData.get(PullRequests.class);
  if (pullRequests != null) {
    ConcurrentHashMap<String,PullRequestData> pullRequestDataLookup=new ConcurrentHashMap<String,PullRequestData>();
    for (    PullRequestData pullRequestData : pullRequests.getData()) {
      pullRequestDataLookup.put(pullRequestData.pullRequestUrl.toString(),pullRequestData);
    }
    manager.projectPullRequestDataLookup.put(projectData.getProject(),pullRequestDataLookup);
  }
}",0.928406466512702
149358,"@Initializer(before=InitMilestone.COMPLETED) public static void loadAll(){
  List<ProjectDataListener> listeners=Jenkins.getInstance().getExtensionList(ProjectDataListener.class);
  for (  AbstractProject<?,?> job : Jenkins.getInstance().getAllItems(AbstractProject.class)) {
    ProjectData data=null;
    try {
      data=ProjectData.load(job);
    }
 catch (    IOException ex) {
      LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
    }
    if (data != null) {
      projectDataLookup.put(job,data);
      for (      ProjectDataListener listener : listeners) {
        try {
          listener.onLoad(data);
        }
 catch (        Throwable ex) {
          LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
        }
      }
    }
  }
}","@Initializer(after=InitMilestone.JOB_LOADED) public static void loadAll(){
  LOGGER.info(""String_Node_Str"");
  List<ProjectDataListener> listeners=Jenkins.getInstance().getExtensionList(ProjectDataListener.class);
  for (  AbstractProject<?,?> job : Jenkins.getInstance().getAllItems(AbstractProject.class)) {
    ProjectData data=null;
    try {
      data=ProjectData.load(job);
    }
 catch (    IOException ex) {
      LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
    }
    if (data != null) {
      projectDataLookup.put(job,data);
      for (      ProjectDataListener listener : listeners) {
        try {
          listener.onLoad(data);
        }
 catch (        Throwable ex) {
          LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
        }
      }
    }
  }
}",0.9628647214854112
149359,"public void waitForDone(int timeout) throws IProgressMonitor.IncompleteException, IOException, InterruptedException {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout * 60000;
  do {
    if (isDone()) {
      return;
    }
synchronized (this) {
      wait(1000);
    }
    long currentTime=System.currentTimeMillis();
    remainingTime=remainingTime - (currentTime - startTime);
    startTime=currentTime;
  }
 while (timeout == 0 || remainingTime > 0);
  JSONObject resource=getResource();
  if (!isDone(resource)) {
    throw new IProgressMonitor.TimeoutException(MessageFormat.format(""String_Node_Str"",getResourceUrl(),timeout,getState(resource)));
  }
}","public void waitForDone(int timeout) throws IProgressMonitor.IncompleteException, IOException, InterruptedException {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout * 60000;
  do {
    if (isDone()) {
      return;
    }
synchronized (this) {
      wait(1000);
    }
    long currentTime=System.currentTimeMillis();
    remainingTime=remainingTime - (currentTime - startTime);
    startTime=currentTime;
  }
 while (timeout <= 0 || remainingTime > 0);
  JSONObject resource=getResource();
  if (!isDone(resource)) {
    throw new IProgressMonitor.TimeoutException(MessageFormat.format(""String_Node_Str"",getResourceUrl(),timeout,getState(resource)));
  }
}",0.998533724340176
149360,"public ElasticBoxExecutor(){
  super(""String_Node_Str"");
}","public ElasticBoxExecutor(){
  super(ElasticBoxExecutor.class.getName());
}",0.6917293233082706
149361,"@Override public BuildWrapper newInstance(StaplerRequest req,JSONObject formData) throws FormException {
  InstanceCreator instanceCreator=(InstanceCreator)super.newInstance(req,formData);
  ProjectSlaveConfiguration.DescriptorImpl descriptor=(ProjectSlaveConfiguration.DescriptorImpl)instanceCreator.getSlaveConfiguration().getDescriptor();
  FormValidation result=descriptor.doCheckBoxVersion(instanceCreator.getSlaveConfiguration().getBoxVersion(),instanceCreator.getSlaveConfiguration().getCloud(),instanceCreator.getSlaveConfiguration().getBox());
  if (result.kind == FormValidation.Kind.ERROR) {
    throw new FormException(result.getMessage(),""String_Node_Str"");
  }
  return instanceCreator;
}","@Override public BuildWrapper newInstance(StaplerRequest req,JSONObject formData) throws FormException {
  InstanceCreator instanceCreator=(InstanceCreator)super.newInstance(req,formData);
  ProjectSlaveConfiguration.DescriptorImpl descriptor=(ProjectSlaveConfiguration.DescriptorImpl)instanceCreator.getSlaveConfiguration().getDescriptor();
  FormValidation result=descriptor.doCheckBoxVersion(instanceCreator.getSlaveConfiguration().getBoxVersion(),instanceCreator.getSlaveConfiguration().getCloud(),instanceCreator.getSlaveConfiguration().getWorkspace(),instanceCreator.getSlaveConfiguration().getBox());
  if (result.kind == FormValidation.Kind.ERROR) {
    throw new FormException(result.getMessage(),""String_Node_Str"");
  }
  return instanceCreator;
}",0.962302947224126
149362,"private void wait(Callable<Boolean> condition,long timeout) throws Exception {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout;
  while (remainingTime > 0 && condition.call()) {
synchronized (waitLock) {
      try {
        waitLock.wait(remainingTime);
      }
 catch (      InterruptedException ex) {
      }
    }
    long currentTime=System.currentTimeMillis();
    remainingTime=remainingTime - (currentTime - startTime);
    startTime=currentTime;
  }
}","private void wait(Callable<Boolean> condition,long timeout) throws Exception {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout;
  while ((timeout <= 0 || remainingTime > 0) && condition.call()) {
synchronized (waitLock) {
      try {
        waitLock.wait(remainingTime);
      }
 catch (      InterruptedException ex) {
      }
    }
    long currentTime=System.currentTimeMillis();
    remainingTime=remainingTime - (currentTime - startTime);
    startTime=currentTime;
  }
}",0.9817813765182186
149363,"@Override public void waitForDone(int timeout) throws IncompleteException, IOException, InterruptedException {
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  long timeoutMiliseconds=timeout * 60000;
  long remainingTime=timeoutMiliseconds;
  try {
    wait(new Callable<Boolean>(){
      @Override public Boolean call() throws Exception {
        return monitor == null;
      }
    }
,timeoutMiliseconds);
  }
 catch (  Exception ex) {
    LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
  }
  if (monitor == IProgressMonitor.DONE_MONITOR) {
    return;
  }
  remainingTime=remainingTime - stopWatch.getTime();
  if (monitor != null && remainingTime > 0) {
    monitor.waitForDone(Math.round(remainingTime / 60000));
  }
  remainingTime=remainingTime - stopWatch.getTime();
  if (remainingTime > 0) {
    try {
      wait(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          SlaveComputer computer=slave.getComputer();
          return computer != null && computer.isOffline();
        }
      }
,remainingTime);
    }
 catch (    Exception ex) {
      LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
    }
  }
}","@Override public void waitForDone(int timeout) throws IncompleteException, IOException, InterruptedException {
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  long timeoutMiliseconds=timeout * 60000;
  long remainingTime=timeoutMiliseconds;
  try {
    wait(new Callable<Boolean>(){
      @Override public Boolean call() throws Exception {
        return monitor == null;
      }
    }
,timeoutMiliseconds);
  }
 catch (  Exception ex) {
    LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
  }
  if (monitor == IProgressMonitor.DONE_MONITOR) {
    return;
  }
  remainingTime=remainingTime - stopWatch.getTime();
  if (monitor != null && remainingTime > 0) {
    monitor.waitForDone((int)Math.ceil(remainingTime / 60000));
  }
  remainingTime=remainingTime - stopWatch.getTime();
  if (remainingTime > 0) {
    try {
      wait(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          SlaveComputer computer=slave.getComputer();
          return computer != null && computer.isOffline();
        }
      }
,remainingTime);
    }
 catch (    Exception ex) {
      LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
    }
  }
}",0.9939914163090128
149364,"public FormValidation doCheckBoxVersion(@QueryParameter String value,@QueryParameter String cloud,@QueryParameter String box){
  return DescriptorHelper.checkSlaveBox(ClientCache.getClient(cloud),StringUtils.isBlank(value) ? box : value);
}","public FormValidation doCheckBoxVersion(@QueryParameter String value,@QueryParameter String cloud,@QueryParameter String workspace,@QueryParameter String box){
  return checkBoxVersion(value,box,workspace,ClientCache.getClient(cloud));
}",0.649895178197065
149365,"public FormValidation doCheckBoxVersion(@QueryParameter String value,@RelativePath(""String_Node_Str"") @QueryParameter String endpointUrl,@RelativePath(""String_Node_Str"") @QueryParameter String username,@RelativePath(""String_Node_Str"") @QueryParameter String password,@RelativePath(""String_Node_Str"") @QueryParameter String token,@QueryParameter String workspace,@QueryParameter String box){
  Client client=createClient(endpointUrl,username,password,token);
  String boxVersion=StringUtils.isBlank(value) ? box : value;
  if (DescriptorHelper.LATEST_BOX_VERSION.equals(boxVersion)) {
    try {
      boxVersion=client.getLatestBoxVersion(workspace,box);
    }
 catch (    IOException ex) {
      LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
      return FormValidation.error(MessageFormat.format(""String_Node_Str"",box));
    }
  }
  return DescriptorHelper.checkSlaveBox(client,boxVersion);
}","public FormValidation doCheckBoxVersion(@QueryParameter String value,@RelativePath(""String_Node_Str"") @QueryParameter String endpointUrl,@RelativePath(""String_Node_Str"") @QueryParameter String username,@RelativePath(""String_Node_Str"") @QueryParameter String password,@RelativePath(""String_Node_Str"") @QueryParameter String token,@QueryParameter String workspace,@QueryParameter String box){
  Client client=createClient(endpointUrl,username,password,token);
  return checkBoxVersion(value,box,workspace,client);
}",0.6747330960854092
149366,"private void deleteInstances(GHPullRequest pullRequest) throws IOException {
  PullRequestManager pullRequestManager=PullRequestManager.getInstance();
  Collection<PullRequestInstance> prInstances=new ArrayList<PullRequestInstance>();
  Authentication old=SecurityContextHolder.getContext().getAuthentication();
  SecurityContextHolder.getContext().setAuthentication(ACL.SYSTEM);
  try {
    for (    AbstractProject<?,?> aProject : Jenkins.getInstance().getAllItems(AbstractProject.class)) {
      PullRequestData data=pullRequestManager.removePullRequestData(pullRequest.getUrl().toString(),aProject);
      if (data != null) {
        prInstances.addAll(data.getInstances());
      }
    }
  }
  finally {
    SecurityContextHolder.getContext().setAuthentication(old);
  }
  List<String> terminatingInstanceURLs=new ArrayList<String>();
  for (  PullRequestInstance instance : prInstances) {
    Client client=ClientCache.getClient(instance.cloud);
    if (client != null) {
      String instanceId=Client.getResourceId(instance.id);
      IProgressMonitor monitor=null;
      try {
        monitor=client.terminate(instanceId);
      }
 catch (      ClientException ex) {
        if (ex.getStatusCode() == HttpStatus.SC_CONFLICT) {
          try {
            monitor=client.forceTerminate(instanceId);
          }
 catch (          IOException ex1) {
            LOGGER.log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",instance.id),ex1);
          }
        }
      }
catch (      IOException ex) {
        LOGGER.log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",instance.id),ex);
      }
      if (monitor != null) {
        Jenkins.getInstance().getExtensionList(ElasticBoxExecutor.Workload.class).get(DeleteInstancesWorkload.class).add(instance);
        terminatingInstanceURLs.add(monitor.getResourceUrl());
      }
    }
  }
  if (!terminatingInstanceURLs.isEmpty()) {
    try {
      pullRequest.comment(MessageFormat.format(""String_Node_Str"",StringUtils.join(terminatingInstanceURLs,""String_Node_Str"")));
    }
 catch (    IOException ex) {
      LOGGER.log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",pullRequest.getUrl(),ex));
    }
  }
}","private void deleteInstances(GHPullRequest pullRequest) throws IOException {
  PullRequestManager pullRequestManager=PullRequestManager.getInstance();
  List<PullRequestData> pullRequestDataList=new ArrayList<PullRequestData>();
  Authentication old=SecurityContextHolder.getContext().getAuthentication();
  SecurityContextHolder.getContext().setAuthentication(ACL.SYSTEM);
  try {
    for (    AbstractProject<?,?> aProject : Jenkins.getInstance().getAllItems(AbstractProject.class)) {
      PullRequestData data=pullRequestManager.removePullRequestData(pullRequest.getUrl().toString(),aProject);
      if (data != null) {
        pullRequestDataList.add(data);
      }
    }
  }
  finally {
    SecurityContextHolder.getContext().setAuthentication(old);
  }
  PullRequestCleanup.deleteInstances(pullRequestDataList,pullRequest);
}",0.4742268041237113
149367,"public void waitForDone(int timeout) throws IProgressMonitor.IncompleteException, IOException, InterruptedException {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout * 60000;
  do {
    if (isDone()) {
      return;
    }
synchronized (waitLock) {
      waitLock.wait(1000);
    }
    long currentTime=System.currentTimeMillis();
    remainingTime=remainingTime - (currentTime - startTime);
    startTime=currentTime;
  }
 while (timeout == 0 || remainingTime > 0);
  JSONObject resource=getResource();
  if (!isDone(resource)) {
    throw new IProgressMonitor.TimeoutException(MessageFormat.format(""String_Node_Str"",getResourceUrl(),timeout,getState(resource)));
  }
}","public void waitForDone(int timeout) throws IProgressMonitor.IncompleteException, IOException, InterruptedException {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout * 60000;
  do {
    if (isDone()) {
      return;
    }
synchronized (this) {
      wait(1000);
    }
    long currentTime=System.currentTimeMillis();
    remainingTime=remainingTime - (currentTime - startTime);
    startTime=currentTime;
  }
 while (timeout == 0 || remainingTime > 0);
  JSONObject resource=getResource();
  if (!isDone(resource)) {
    throw new IProgressMonitor.TimeoutException(MessageFormat.format(""String_Node_Str"",getResourceUrl(),timeout,getState(resource)));
  }
}",0.9847494553376906
149368,"public void waitForDone(int timeout) throws IProgressMonitor.IncompleteException, IOException, InterruptedException {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout * 60000;
  do {
    if (isDone()) {
      return;
    }
synchronized (waitLock) {
      waitLock.wait(1000);
    }
    long currentTime=System.currentTimeMillis();
    remainingTime=remainingTime - (currentTime - startTime);
    startTime=currentTime;
  }
 while (timeout == 0 || remainingTime > 0);
  JSONObject resource=getResource();
  if (!isDone(resource)) {
    throw new IProgressMonitor.TimeoutException(MessageFormat.format(""String_Node_Str"",getResourceUrl(),timeout,getState(resource)));
  }
}","public void waitForDone(int timeout) throws IProgressMonitor.IncompleteException, IOException, InterruptedException {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout * 60000;
  do {
    if (isDone()) {
      return;
    }
synchronized (this) {
      wait(1000);
    }
    long currentTime=System.currentTimeMillis();
    remainingTime=remainingTime - (currentTime - startTime);
    startTime=currentTime;
  }
 while (timeout == 0 || remainingTime > 0);
  JSONObject resource=getResource();
  if (!isDone(resource)) {
    throw new IProgressMonitor.TimeoutException(MessageFormat.format(""String_Node_Str"",getResourceUrl(),timeout,getState(resource)));
  }
}",0.9847494553376906
149369,"private static void notifyTerminating(AbstractBuild<?,?> build,String instanceId,ElasticBoxCloud cloud) throws InterruptedException {
  for (  BuilderListener listener : Jenkins.getInstance().getExtensionList(BuilderListener.class)) {
    try {
      listener.onDeploying(build,instanceId,cloud);
    }
 catch (    IOException ex) {
      Logger.getLogger(TerminateOperation.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
    }
  }
}","private static void notifyTerminating(AbstractBuild<?,?> build,String instanceId,ElasticBoxCloud cloud) throws InterruptedException {
  for (  BuilderListener listener : Jenkins.getInstance().getExtensionList(BuilderListener.class)) {
    try {
      listener.onTerminating(build,instanceId,cloud);
    }
 catch (    IOException ex) {
      Logger.getLogger(TerminateOperation.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
    }
  }
}",0.9841628959276018
149370,"public String getWebHookUrl(){
  String jenkinsUrl=Jenkins.getInstance().getRootUrl();
  if (jenkinsUrl == null) {
    return null;
  }
  if (!jenkinsUrl.endsWith(""String_Node_Str"")) {
    jenkinsUrl+='/';
  }
  return jenkinsUrl + Jenkins.getInstance().getExtensionList(RootAction.class).get(WebHook.class).getUrlName() + '/';
}","public String getWebHookUrl(){
  String jenkinsUrl=Jenkins.getInstance().getRootUrl();
  if (jenkinsUrl == null) {
    LOGGER.severe(""String_Node_Str"");
    return null;
  }
  if (!jenkinsUrl.endsWith(""String_Node_Str"")) {
    jenkinsUrl+='/';
  }
  return jenkinsUrl + Jenkins.getInstance().getExtensionList(RootAction.class).get(WebHook.class).getUrlName() + '/';
}",0.9454022988505748
149371,"public void save() throws IOException {
  PullRequests pullRequests=projectData.get(PullRequests.class);
  if (pullRequests == null) {
    projectData.add(new PullRequests());
    pullRequests=projectData.get(PullRequests.class);
  }
  List<PullRequestData> dataList=pullRequests.getData();
  if (dataList == null) {
    projectData.add(new PullRequests());
  }
  if (!dataList.contains(this)) {
    dataList.add(this);
  }
  projectData.save();
}","public synchronized void save() throws IOException {
  PullRequests pullRequests=projectData.get(PullRequests.class);
  if (pullRequests == null) {
    projectData.add(new PullRequests());
    pullRequests=projectData.get(PullRequests.class);
  }
  List<PullRequestData> dataList=pullRequests.getData();
  if (dataList == null) {
    projectData.add(new PullRequests());
  }
  if (!dataList.contains(this)) {
    dataList.add(this);
  }
  projectData.save();
}",0.9856670341786108
149372,"private void handlePullRequestEvent(String payload) throws IOException {
  GitHub gitHub=createGitHub(payload);
  if (gitHub == null) {
    return;
  }
  GHEventPayload.PullRequest pullRequest=gitHub.parseEventPayload(new StringReader(payload),GHEventPayload.PullRequest.class);
  if (PullRequestAction.CLOSED.equals(pullRequest.getAction())) {
    deleteInstances(pullRequest);
  }
 else   if (TRIGGER_EVENTS.contains(pullRequest.getAction())) {
    Authentication old=SecurityContextHolder.getContext().getAuthentication();
    SecurityContextHolder.getContext().setAuthentication(ACL.SYSTEM);
    try {
      for (      AbstractProject<?,?> job : Jenkins.getInstance().getAllItems(AbstractProject.class)) {
        PullRequestBuildTrigger trigger=job.getTrigger(PullRequestBuildTrigger.class);
        if (trigger != null && trigger.getBuildHandler() instanceof PullRequestBuildHandler) {
          ((PullRequestBuildHandler)trigger.getBuildHandler()).handle(pullRequest,gitHub);
        }
      }
    }
  finally {
      SecurityContextHolder.getContext().setAuthentication(old);
    }
  }
 else {
    LOGGER.warning(MessageFormat.format(""String_Node_Str"",pullRequest.getAction()));
  }
}","private void handlePullRequestEvent(String payload) throws IOException {
  GitHub gitHub=createGitHub(payload);
  if (gitHub == null) {
    return;
  }
  GHEventPayload.PullRequest pullRequest=gitHub.parseEventPayload(new StringReader(payload),GHEventPayload.PullRequest.class);
  if (SUPPORTED_EVENTS.contains(pullRequest.getAction())) {
    Authentication old=SecurityContextHolder.getContext().getAuthentication();
    SecurityContextHolder.getContext().setAuthentication(ACL.SYSTEM);
    try {
      for (      AbstractProject<?,?> job : Jenkins.getInstance().getAllItems(AbstractProject.class)) {
        PullRequestBuildTrigger trigger=job.getTrigger(PullRequestBuildTrigger.class);
        if (trigger != null && trigger.getBuildHandler() instanceof PullRequestBuildHandler) {
          ((PullRequestBuildHandler)trigger.getBuildHandler()).handle(pullRequest,gitHub);
        }
      }
    }
  finally {
      SecurityContextHolder.getContext().setAuthentication(old);
    }
  }
 else {
    LOGGER.warning(MessageFormat.format(""String_Node_Str"",pullRequest.getAction()));
  }
}",0.9472759226713532
149373,"@Override public BuildWrapper newInstance(StaplerRequest req,JSONObject formData) throws FormException {
  InstanceCreator instanceCreator=(InstanceCreator)super.newInstance(req,formData);
  ProjectSlaveConfiguration.DescriptorImpl descriptor=(ProjectSlaveConfiguration.DescriptorImpl)instanceCreator.getSlaveConfiguration().getDescriptor();
  FormValidation result=descriptor.doCheckBoxVersion(instanceCreator.getSlaveConfiguration().getBoxVersion(),instanceCreator.getSlaveConfiguration().getCloud(),instanceCreator.getSlaveConfiguration().getBox());
  if (result.kind == FormValidation.Kind.ERROR) {
    throw new FormException(result.getMessage(),""String_Node_Str"");
  }
  return instanceCreator;
}","@Override public BuildWrapper newInstance(StaplerRequest req,JSONObject formData) throws FormException {
  InstanceCreator instanceCreator=(InstanceCreator)super.newInstance(req,formData);
  ProjectSlaveConfiguration.DescriptorImpl descriptor=(ProjectSlaveConfiguration.DescriptorImpl)instanceCreator.getSlaveConfiguration().getDescriptor();
  FormValidation result=descriptor.doCheckBoxVersion(instanceCreator.getSlaveConfiguration().getBoxVersion(),instanceCreator.getSlaveConfiguration().getCloud(),instanceCreator.getSlaveConfiguration().getWorkspace(),instanceCreator.getSlaveConfiguration().getBox());
  if (result.kind == FormValidation.Kind.ERROR) {
    throw new FormException(result.getMessage(),""String_Node_Str"");
  }
  return instanceCreator;
}",0.962302947224126
149374,"public FormValidation doCheckBoxVersion(@QueryParameter String value,@QueryParameter String cloud,@QueryParameter String box){
  return DescriptorHelper.checkSlaveBox(ClientCache.getClient(cloud),StringUtils.isBlank(value) ? box : value);
}","public FormValidation doCheckBoxVersion(@QueryParameter String value,@QueryParameter String cloud,@QueryParameter String workspace,@QueryParameter String box){
  return checkBoxVersion(value,box,workspace,ClientCache.getClient(cloud));
}",0.649895178197065
149375,"public FormValidation doCheckBoxVersion(@QueryParameter String value,@RelativePath(""String_Node_Str"") @QueryParameter String endpointUrl,@RelativePath(""String_Node_Str"") @QueryParameter String username,@RelativePath(""String_Node_Str"") @QueryParameter String password,@RelativePath(""String_Node_Str"") @QueryParameter String token,@QueryParameter String workspace,@QueryParameter String box){
  Client client=createClient(endpointUrl,username,password,token);
  String boxVersion=StringUtils.isBlank(value) ? box : value;
  if (DescriptorHelper.LATEST_BOX_VERSION.equals(boxVersion)) {
    try {
      boxVersion=client.getLatestBoxVersion(workspace,box);
    }
 catch (    IOException ex) {
      LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
      return FormValidation.error(MessageFormat.format(""String_Node_Str"",box));
    }
  }
  return DescriptorHelper.checkSlaveBox(client,boxVersion);
}","public FormValidation doCheckBoxVersion(@QueryParameter String value,@RelativePath(""String_Node_Str"") @QueryParameter String endpointUrl,@RelativePath(""String_Node_Str"") @QueryParameter String username,@RelativePath(""String_Node_Str"") @QueryParameter String password,@RelativePath(""String_Node_Str"") @QueryParameter String token,@QueryParameter String workspace,@QueryParameter String box){
  Client client=createClient(endpointUrl,username,password,token);
  return checkBoxVersion(value,box,workspace,client);
}",0.6747330960854092
149376,"@Initializer(after=InitMilestone.COMPLETED) public static void setSlaveConfigurationId() throws IOException {
  boolean saveNeeded=false;
  for (  Cloud cloud : Jenkins.getInstance().clouds) {
    if (cloud instanceof ElasticBoxCloud) {
      ElasticBoxCloud ebxCloud=(ElasticBoxCloud)cloud;
      for (      SlaveConfiguration slaveConfig : ebxCloud.getSlaveConfigurations()) {
        if (StringUtils.isBlank(slaveConfig.getId())) {
          slaveConfig.setId(UUID.randomUUID().toString());
          saveNeeded=true;
        }
      }
    }
  }
  if (saveNeeded) {
    Jenkins.getInstance().save();
  }
}","@Initializer(before=InitMilestone.COMPLETED) public static void setSlaveConfigurationId() throws IOException {
  boolean saveNeeded=false;
  for (  Cloud cloud : Jenkins.getInstance().clouds) {
    if (cloud instanceof ElasticBoxCloud) {
      ElasticBoxCloud ebxCloud=(ElasticBoxCloud)cloud;
      for (      SlaveConfiguration slaveConfig : ebxCloud.getSlaveConfigurations()) {
        if (StringUtils.isBlank(slaveConfig.getId())) {
          slaveConfig.setId(UUID.randomUUID().toString());
          saveNeeded=true;
        }
      }
    }
  }
  if (saveNeeded) {
    Jenkins.getInstance().save();
  }
}",0.990961380443714
149377,"@Initializer(after=InitMilestone.COMPLETED) public static void tagSlaveInstances() throws IOException {
  LOGGER.info(""String_Node_Str"");
  SlaveInstanceManager manager=new SlaveInstanceManager();
  for (  JSONObject instance : manager.getInstances()) {
    ElasticBoxSlave slave=manager.getSlave(instance.getString(""String_Node_Str""));
    ElasticBoxSlaveHandler.getInstance().tagSlaveInstance(instance,slave);
  }
}","@Initializer(before=InitMilestone.COMPLETED) public static void tagSlaveInstances() throws IOException {
  LOGGER.info(""String_Node_Str"");
  new Condition(){
    @Override public boolean satisfied(){
      return Jenkins.getInstance().getNodes() != null;
    }
  }
.waitUntilSatisfied(3000);
  ElasticBoxExecutor.threadPool.submit(new Runnable(){
    public void run(){
      try {
        SlaveInstanceManager manager=new SlaveInstanceManager();
        for (        JSONObject instance : manager.getInstances()) {
          ElasticBoxSlave slave=manager.getSlave(instance.getString(""String_Node_Str""));
          ElasticBoxSlaveHandler.getInstance().tagSlaveInstance(instance,slave);
        }
      }
 catch (      IOException ex) {
        LOGGER.log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
  }
);
}",0.6715447154471544
149378,"private static ProjectData load(AbstractProject<?,?> project) throws IOException {
  XmlFile xmlFile=getXmlFile(project);
  if (xmlFile.exists()) {
    ProjectData projectData=(ProjectData)xmlFile.read();
    if (projectData.data != null) {
      for (      Datum datum : projectData.data) {
        datum.setProjectData(projectData);
      }
    }
    return projectData;
  }
  return null;
}","private static ProjectData load(AbstractProject<?,?> project) throws IOException {
  XmlFile xmlFile=getXmlFile(project);
  if (xmlFile.exists()) {
    ProjectData projectData=(ProjectData)xmlFile.read();
    if (projectData.data != null) {
      for (      Datum datum : projectData.data) {
        datum.setProjectData(projectData);
      }
    }
    projectData.project=project;
    return projectData;
  }
  return null;
}",0.9597069597069596
149379,"@Initializer(after=InitMilestone.COMPLETED) public static void loadAll(){
  List<ProjectDataListener> listeners=Jenkins.getInstance().getExtensionList(ProjectDataListener.class);
  for (  AbstractProject<?,?> job : Jenkins.getInstance().getAllItems(AbstractProject.class)) {
    ProjectData data=null;
    try {
      data=ProjectData.load(job);
    }
 catch (    IOException ex) {
      LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
    }
    if (data != null) {
      projectDataLookup.put(job,data);
      for (      ProjectDataListener listener : listeners) {
        try {
          listener.onLoad(data);
        }
 catch (        Throwable ex) {
          LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
        }
      }
    }
  }
}","@Initializer(before=InitMilestone.COMPLETED) public static void loadAll(){
  List<ProjectDataListener> listeners=Jenkins.getInstance().getExtensionList(ProjectDataListener.class);
  for (  AbstractProject<?,?> job : Jenkins.getInstance().getAllItems(AbstractProject.class)) {
    ProjectData data=null;
    try {
      data=ProjectData.load(job);
    }
 catch (    IOException ex) {
      LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
    }
    if (data != null) {
      projectDataLookup.put(job,data);
      for (      ProjectDataListener listener : listeners) {
        try {
          listener.onLoad(data);
        }
 catch (        Throwable ex) {
          LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
        }
      }
    }
  }
}",0.9938900203665988
149380,"private AbstractBuild waitForNextBuild(long timeoutSeconds){
  final AbstractBuild build=project.getLastBuild();
  TestUtils.waitUntil(new TestUtils.Condition(){
    public boolean satisfied(){
      return build.getNextBuild() != null;
    }
  }
,timeoutSeconds);
  return build.getNextBuild();
}","private AbstractBuild waitForNextBuild(long timeoutSeconds){
  final AbstractBuild build=project.getLastBuild();
  new Condition(){
    public boolean satisfied(){
      return build.getNextBuild() != null;
    }
  }
.waitUntilSatisfied(timeoutSeconds);
  return build.getNextBuild();
}",0.902229845626072
149381,"private void waitForCompletion(long timeoutSeconds){
  final AbstractBuild build=project.getLastBuild();
  TestUtils.waitUntil(new TestUtils.Condition(){
    public boolean satisfied(){
      return !build.isBuilding();
    }
  }
,timeoutSeconds);
}","private void waitForCompletion(long timeoutSeconds){
  final AbstractBuild build=project.getLastBuild();
  new Condition(){
    public boolean satisfied(){
      return !build.isBuilding();
    }
  }
.waitUntilSatisfied(timeoutSeconds);
}",0.5338809034907598
149382,"private void waitForDeletion(final List<JSONObject> instances,long timeoutSeconds){
  TestUtils.waitUntil(new TestUtils.Condition(){
    public boolean satisfied(){
      try {
        Client client=cloud.getClient();
        for (Iterator<JSONObject> iter=instances.iterator(); iter.hasNext(); ) {
          JSONObject instance=iter.next();
          try {
            client.getInstance(instance.getString(""String_Node_Str""));
          }
 catch (          ClientException ex) {
            if (ex.getStatusCode() == HttpStatus.SC_NOT_FOUND) {
              iter.remove();
              objectsToDelete.remove(instance);
            }
 else {
              throw ex;
            }
          }
        }
        return instances.isEmpty();
      }
 catch (      IOException ex) {
        LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
        return false;
      }
    }
  }
,TimeUnit.MINUTES.toSeconds(timeoutSeconds));
}","private void waitForDeletion(final List<JSONObject> instances,long timeoutSeconds){
  new Condition(){
    public boolean satisfied(){
      try {
        Client client=cloud.getClient();
        for (Iterator<JSONObject> iter=instances.iterator(); iter.hasNext(); ) {
          JSONObject instance=iter.next();
          try {
            client.getInstance(instance.getString(""String_Node_Str""));
          }
 catch (          ClientException ex) {
            if (ex.getStatusCode() == HttpStatus.SC_NOT_FOUND) {
              iter.remove();
              objectsToDelete.remove(instance);
            }
 else {
              throw ex;
            }
          }
        }
        return instances.isEmpty();
      }
 catch (      IOException ex) {
        LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
        return false;
      }
    }
  }
.waitUntilSatisfied(TimeUnit.MINUTES.toSeconds(timeoutSeconds));
}",0.9688694702348444
149383,"@Test public void testPullRequestLifecycleManagement() throws Exception {
  Thread.sleep(3000);
  List<GHHook> hooks=gitHubRepo.getHooks();
  GHHook webhook=null;
  for (  GHHook hook : hooks) {
    if (""String_Node_Str"".equals(hook.getName()) && webhookUrl.equals(hook.getConfig().get(""String_Node_Str""))) {
      webhook=hook;
      break;
    }
  }
  Assert.assertNotNull(MessageFormat.format(""String_Node_Str"",webhookUrl,gitHubRepo.getUrl()),webhook);
  pullRequest.open();
  TestUtils.waitUntil(new TestUtils.Condition(){
    public boolean satisfied(){
      return project.getLastBuild() != null;
    }
  }
,60);
  Assert.assertNotNull(MessageFormat.format(""String_Node_Str"",pullRequest.getGHPullRequest().getUrl()),project.getLastBuild());
  waitForCompletion(TimeUnit.MINUTES.toSeconds(15));
  Assert.assertFalse(MessageFormat.format(""String_Node_Str"",pullRequest.getGHPullRequest().getUrl()),project.getLastBuild().isBuilding());
  final List<JSONObject> instances=new ArrayList<JSONObject>();
  instances.addAll(checkBuild(null));
  final String triggerPhrase=""String_Node_Str"";
  pullRequest.comment(triggerPhrase);
  Assert.assertNull(MessageFormat.format(""String_Node_Str"",triggerPhrase),waitForNextBuild(30));
  updateTriggerPhrase(triggerPhrase);
  pullRequest.comment(triggerPhrase);
  Assert.assertNotNull(MessageFormat.format(""String_Node_Str"",pullRequest.getGHPullRequest().getUrl()),waitForNextBuild(60));
  waitForCompletion(TimeUnit.MINUTES.toSeconds(15));
  Assert.assertFalse(MessageFormat.format(""String_Node_Str"",pullRequest.getGHPullRequest().getUrl()),project.getLastBuild().isBuilding());
  instances.addAll(checkBuild(TestUtils.GITHUB_USER));
  pullRequest.close();
  waitForDeletion(instances,TimeUnit.MINUTES.toSeconds(10));
  Assert.assertTrue(""String_Node_Str"",instances.isEmpty());
  pullRequest.comment(triggerPhrase);
  Assert.assertNull(""String_Node_Str"",waitForNextBuild(30));
  updateWhitelist(testTag);
  pullRequest.open();
  Assert.assertNull(""String_Node_Str"",waitForNextBuild(30));
  pullRequest.comment(triggerPhrase);
  Assert.assertNull(""String_Node_Str"",waitForNextBuild(30));
  pullRequest.close();
  pullRequest.reopen();
  Assert.assertNull(""String_Node_Str"",waitForNextBuild(30));
  updateWhitelist(testTag + ',' + TestUtils.GITHUB_USER);
  pullRequest.reopen();
  AbstractBuild build=waitForNextBuild(60);
  Assert.assertNotNull(""String_Node_Str"",build);
  waitForCompletion(TimeUnit.MINUTES.toSeconds(15));
  Assert.assertFalse(MessageFormat.format(""String_Node_Str"",pullRequest.getGHPullRequest().getUrl()),build.isBuilding());
  instances.addAll(checkBuild(null));
  pullRequest.comment(triggerPhrase);
  build=waitForNextBuild(60);
  Assert.assertNotNull(""String_Node_Str"",build);
  waitForCompletion(TimeUnit.MINUTES.toSeconds(15));
  instances.addAll(checkBuild(TestUtils.GITHUB_USER));
  pullRequest.close();
  waitForDeletion(instances,TimeUnit.MINUTES.toSeconds(10));
  Assert.assertTrue(""String_Node_Str"",instances.isEmpty());
}","@Test public void testPullRequestLifecycleManagement() throws Exception {
  Thread.sleep(3000);
  List<GHHook> hooks=gitHubRepo.getHooks();
  GHHook webhook=null;
  for (  GHHook hook : hooks) {
    if (""String_Node_Str"".equals(hook.getName()) && webhookUrl.equals(hook.getConfig().get(""String_Node_Str""))) {
      webhook=hook;
      break;
    }
  }
  Assert.assertNotNull(MessageFormat.format(""String_Node_Str"",webhookUrl,gitHubRepo.getUrl()),webhook);
  pullRequest.open();
  new Condition(){
    public boolean satisfied(){
      return project.getLastBuild() != null;
    }
  }
.waitUntilSatisfied(60);
  Assert.assertNotNull(MessageFormat.format(""String_Node_Str"",pullRequest.getGHPullRequest().getUrl()),project.getLastBuild());
  waitForCompletion(TimeUnit.MINUTES.toSeconds(15));
  Assert.assertFalse(MessageFormat.format(""String_Node_Str"",pullRequest.getGHPullRequest().getUrl()),project.getLastBuild().isBuilding());
  final List<JSONObject> instances=new ArrayList<JSONObject>();
  instances.addAll(checkBuild(null));
  final String triggerPhrase=""String_Node_Str"";
  pullRequest.comment(triggerPhrase);
  Assert.assertNull(MessageFormat.format(""String_Node_Str"",triggerPhrase),waitForNextBuild(30));
  updateTriggerPhrase(triggerPhrase);
  pullRequest.comment(triggerPhrase);
  Assert.assertNotNull(MessageFormat.format(""String_Node_Str"",pullRequest.getGHPullRequest().getUrl()),waitForNextBuild(60));
  waitForCompletion(TimeUnit.MINUTES.toSeconds(15));
  Assert.assertFalse(MessageFormat.format(""String_Node_Str"",pullRequest.getGHPullRequest().getUrl()),project.getLastBuild().isBuilding());
  instances.addAll(checkBuild(TestUtils.GITHUB_USER));
  pullRequest.close();
  waitForDeletion(instances,TimeUnit.MINUTES.toSeconds(10));
  Assert.assertTrue(""String_Node_Str"",instances.isEmpty());
  pullRequest.comment(triggerPhrase);
  Assert.assertNull(""String_Node_Str"",waitForNextBuild(30));
  updateWhitelist(testTag);
  pullRequest.open();
  Assert.assertNull(""String_Node_Str"",waitForNextBuild(30));
  pullRequest.comment(triggerPhrase);
  Assert.assertNull(""String_Node_Str"",waitForNextBuild(30));
  pullRequest.close();
  pullRequest.reopen();
  Assert.assertNull(""String_Node_Str"",waitForNextBuild(30));
  updateWhitelist(testTag + ',' + TestUtils.GITHUB_USER);
  pullRequest.reopen();
  AbstractBuild build=waitForNextBuild(60);
  Assert.assertNotNull(""String_Node_Str"",build);
  waitForCompletion(TimeUnit.MINUTES.toSeconds(15));
  Assert.assertFalse(MessageFormat.format(""String_Node_Str"",pullRequest.getGHPullRequest().getUrl()),build.isBuilding());
  instances.addAll(checkBuild(null));
  pullRequest.comment(triggerPhrase);
  build=waitForNextBuild(60);
  Assert.assertNotNull(""String_Node_Str"",build);
  waitForCompletion(TimeUnit.MINUTES.toSeconds(15));
  instances.addAll(checkBuild(TestUtils.GITHUB_USER));
  pullRequest.close();
  waitForDeletion(instances,TimeUnit.MINUTES.toSeconds(10));
  Assert.assertTrue(""String_Node_Str"",instances.isEmpty());
}",0.9904602510460252
149384,"@After public void tearDown() throws Exception {
  final Client client=cloud.getClient();
  final Map<String,IProgressMonitor> terminatingInstancIdToMonitorMap=new HashMap<String,IProgressMonitor>();
  for (Iterator<JSONObject> iter=objectsToDelete.iterator(); iter.hasNext(); ) {
    JSONObject object=iter.next();
    String uri=object.getString(""String_Node_Str"");
    if (uri != null && uri.startsWith(""String_Node_Str"")) {
      try {
        String instanceId=object.getString(""String_Node_Str"");
        IProgressMonitor monitor=client.forceTerminate(instanceId);
        terminatingInstancIdToMonitorMap.put(instanceId,monitor);
        iter.remove();
      }
 catch (      IOException ex) {
        LOGGER.log(Level.WARNING,ex.getMessage(),ex);
      }
    }
  }
  List<String> instanceIDs=new ArrayList<String>(terminatingInstancIdToMonitorMap.keySet());
  TestUtils.waitUntil(new TestUtils.Condition(){
    public boolean satisfied(){
      JSONArray instances;
      try {
        instances=client.getInstances(new ArrayList<String>(terminatingInstancIdToMonitorMap.keySet()));
      }
 catch (      IOException ex) {
        LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
        return false;
      }
      Set<String> instanceIDs=new HashSet<String>();
      for (      Object instance : instances) {
        JSONObject instanceJson=(JSONObject)instance;
        String instanceId=instanceJson.getString(""String_Node_Str"");
        instanceIDs.add(instanceId);
        IProgressMonitor monitor=terminatingInstancIdToMonitorMap.get(instanceId);
        boolean done=false;
        try {
          done=monitor.isDone(instanceJson);
        }
 catch (        IProgressMonitor.IncompleteException ex) {
          done=true;
        }
catch (        IOException ex) {
          LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
        }
        if (done) {
          terminatingInstancIdToMonitorMap.remove(instanceId);
        }
      }
      Set<String> notFoundInstanceIDs=new HashSet<String>(terminatingInstancIdToMonitorMap.keySet());
      notFoundInstanceIDs.removeAll(instanceIDs);
      terminatingInstancIdToMonitorMap.keySet().removeAll(notFoundInstanceIDs);
      return terminatingInstancIdToMonitorMap.isEmpty();
    }
  }
,180);
  for (  String instanceId : instanceIDs) {
    try {
      client.delete(instanceId);
    }
 catch (    IOException ex) {
      LOGGER.log(Level.WARNING,ex.getMessage(),ex);
    }
  }
  for (int i=objectsToDelete.size() - 1; i > -1; i--) {
    try {
      client.doDelete(objectsToDelete.get(i).getString(""String_Node_Str""));
    }
 catch (    IOException ex) {
      LOGGER.log(Level.WARNING,ex.getMessage(),ex);
    }
  }
}","@After public void tearDown() throws Exception {
  final Client client=cloud.getClient();
  final Map<String,IProgressMonitor> terminatingInstancIdToMonitorMap=new HashMap<String,IProgressMonitor>();
  for (Iterator<JSONObject> iter=objectsToDelete.iterator(); iter.hasNext(); ) {
    JSONObject object=iter.next();
    String uri=object.getString(""String_Node_Str"");
    if (uri != null && uri.startsWith(""String_Node_Str"")) {
      try {
        String instanceId=object.getString(""String_Node_Str"");
        IProgressMonitor monitor=client.forceTerminate(instanceId);
        terminatingInstancIdToMonitorMap.put(instanceId,monitor);
        iter.remove();
      }
 catch (      IOException ex) {
        LOGGER.log(Level.WARNING,ex.getMessage(),ex);
      }
    }
  }
  List<String> instanceIDs=new ArrayList<String>(terminatingInstancIdToMonitorMap.keySet());
  new Condition(){
    public boolean satisfied(){
      JSONArray instances;
      try {
        instances=client.getInstances(new ArrayList<String>(terminatingInstancIdToMonitorMap.keySet()));
      }
 catch (      IOException ex) {
        LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
        return false;
      }
      Set<String> instanceIDs=new HashSet<String>();
      for (      Object instance : instances) {
        JSONObject instanceJson=(JSONObject)instance;
        String instanceId=instanceJson.getString(""String_Node_Str"");
        instanceIDs.add(instanceId);
        IProgressMonitor monitor=terminatingInstancIdToMonitorMap.get(instanceId);
        boolean done=false;
        try {
          done=monitor.isDone(instanceJson);
        }
 catch (        IProgressMonitor.IncompleteException ex) {
          done=true;
        }
catch (        IOException ex) {
          LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
        }
        if (done) {
          terminatingInstancIdToMonitorMap.remove(instanceId);
        }
      }
      Set<String> notFoundInstanceIDs=new HashSet<String>(terminatingInstancIdToMonitorMap.keySet());
      notFoundInstanceIDs.removeAll(instanceIDs);
      terminatingInstancIdToMonitorMap.keySet().removeAll(notFoundInstanceIDs);
      return terminatingInstancIdToMonitorMap.isEmpty();
    }
  }
.waitUntilSatisfied(180);
  for (  String instanceId : instanceIDs) {
    try {
      client.delete(instanceId);
    }
 catch (    IOException ex) {
      LOGGER.log(Level.WARNING,ex.getMessage(),ex);
    }
  }
  for (int i=objectsToDelete.size() - 1; i > -1; i--) {
    try {
      client.doDelete(objectsToDelete.get(i).getString(""String_Node_Str""));
    }
 catch (    IOException ex) {
      LOGGER.log(Level.WARNING,ex.getMessage(),ex);
    }
  }
}",0.98932384341637
149385,"private List<JSONObject> createBoxStack(String scope,String boxId){
  JSONObject box=findBox(boxId);
  if (box == null) {
    return Collections.EMPTY_LIST;
  }
  List<JSONObject> boxStack=new ArrayList<JSONObject>();
  JSONObject stackBox=new JSONObject();
  String icon=null;
  if (box.containsKey(""String_Node_Str"")) {
    icon=box.getString(""String_Node_Str"");
  }
  if (icon == null || icon.isEmpty()) {
    icon=""String_Node_Str"";
  }
 else   if (icon.charAt(0) != '/') {
    icon='/' + icon;
  }
  stackBox.put(""String_Node_Str"",box.getString(""String_Node_Str""));
  stackBox.put(""String_Node_Str"",box.getString(""String_Node_Str""));
  stackBox.put(""String_Node_Str"",client.getEndpointUrl() + icon);
  boxStack.add(stackBox);
  JSONArray stackBoxVariables=new JSONArray();
  JSONArray variables=box.getJSONArray(""String_Node_Str"");
  List<JSONObject> boxVariables=new ArrayList<JSONObject>();
  for (  Object json : variables) {
    JSONObject variable=(JSONObject)json;
    String varScope=(String)variable.get(""String_Node_Str"");
    if (varScope != null && !varScope.isEmpty()) {
      String fullScope=scope.isEmpty() ? varScope : scope + '.' + varScope;
      if (findOverriddenVariable(variable.getString(""String_Node_Str""),scope) == null) {
        JSONObject overriddenVariable=JSONObject.fromObject(variable);
        overriddenVariable.put(""String_Node_Str"",fullScope);
        overriddenVariables.add(variable);
      }
    }
 else     if (variable.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
      boxVariables.add(variable);
    }
 else {
      JSONObject stackBoxVariable=JSONObject.fromObject(variable);
      stackBoxVariable.put(""String_Node_Str"",scope);
      JSONObject overriddenVariable=findOverriddenVariable(stackBoxVariable.getString(""String_Node_Str""),scope);
      if (overriddenVariable != null) {
        stackBoxVariable.put(""String_Node_Str"",overriddenVariable.get(""String_Node_Str""));
      }
      stackBoxVariables.add(stackBoxVariable);
    }
  }
  stackBox.put(""String_Node_Str"",stackBoxVariables);
  for (  JSONObject boxVariable : boxVariables) {
    String variableName=boxVariable.getString(""String_Node_Str"");
    boxStack.addAll(createBoxStack(scope.isEmpty() ? variableName : scope + '.' + variableName,boxVariable.getString(""String_Node_Str"")));
  }
  return boxStack;
}","private List<JSONObject> createBoxStack(String scope,String boxId){
  JSONObject box=findBox(boxId);
  if (box == null) {
    return Collections.EMPTY_LIST;
  }
  List<JSONObject> boxStack=new ArrayList<JSONObject>();
  JSONObject stackBox=new JSONObject();
  String icon=null;
  if (box.containsKey(""String_Node_Str"")) {
    icon=box.getString(""String_Node_Str"");
  }
  if (icon == null || icon.isEmpty()) {
    icon=""String_Node_Str"";
  }
 else   if (icon.charAt(0) != '/') {
    icon='/' + icon;
  }
  stackBox.put(""String_Node_Str"",box.getString(""String_Node_Str""));
  stackBox.put(""String_Node_Str"",box.getString(""String_Node_Str""));
  stackBox.put(""String_Node_Str"",client.getEndpointUrl() + icon);
  boxStack.add(stackBox);
  JSONArray stackBoxVariables=new JSONArray();
  JSONArray variables=box.getJSONArray(""String_Node_Str"");
  List<JSONObject> boxVariables=new ArrayList<JSONObject>();
  for (  Object json : variables) {
    JSONObject variable=(JSONObject)json;
    String varScope=(String)variable.get(""String_Node_Str"");
    if (varScope != null && !varScope.isEmpty()) {
      String fullScope=scope.isEmpty() ? varScope : scope + '.' + varScope;
      if (findOverriddenVariable(variable.getString(""String_Node_Str""),scope) == null) {
        JSONObject overriddenVariable=JSONObject.fromObject(variable);
        overriddenVariable.put(""String_Node_Str"",fullScope);
        overriddenVariables.add(overriddenVariable);
      }
    }
 else     if (variable.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
      boxVariables.add(variable);
    }
 else {
      JSONObject stackBoxVariable=JSONObject.fromObject(variable);
      stackBoxVariable.put(""String_Node_Str"",scope);
      JSONObject overriddenVariable=findOverriddenVariable(stackBoxVariable.getString(""String_Node_Str""),scope);
      if (overriddenVariable != null) {
        stackBoxVariable.put(""String_Node_Str"",overriddenVariable.get(""String_Node_Str""));
      }
      stackBoxVariables.add(stackBoxVariable);
    }
  }
  stackBox.put(""String_Node_Str"",stackBoxVariables);
  for (  JSONObject boxVariable : boxVariables) {
    String variableName=boxVariable.getString(""String_Node_Str"");
    boxStack.addAll(createBoxStack(scope.isEmpty() ? variableName : scope + '.' + variableName,boxVariable.getString(""String_Node_Str"")));
  }
  return boxStack;
}",0.9974326059050064
149386,"public JSONObject updateInstance(JSONObject instance,JSONArray variables) throws IOException {
  if (variables != null && !variables.isEmpty()) {
    JSONArray instanceBoxes=instance.getJSONArray(""String_Node_Str"");
    JSONObject mainBox=instanceBoxes.getJSONObject(0);
    JSONArray boxStack=new BoxStack(mainBox.getString(""String_Node_Str""),instanceBoxes,this).toJSONArray();
    JSONArray boxVariables=new JSONArray();
    for (    Object box : boxStack) {
      boxVariables.addAll(((JSONObject)box).getJSONArray(""String_Node_Str""));
    }
    JSONArray instanceVariables=instance.getJSONArray(""String_Node_Str"");
    List<JSONObject> newVariables=new ArrayList<JSONObject>();
    for (    Object variable : variables) {
      JSONObject variableJson=(JSONObject)variable;
      JSONObject instanceVariable=findVariable(variableJson,instanceVariables);
      if (instanceVariable == null) {
        JSONObject boxVariable=findVariable(variableJson,boxVariables);
        if (boxVariable != null) {
          instanceVariable=JSONObject.fromObject(boxVariable);
          if (instanceVariable.getString(""String_Node_Str"").isEmpty()) {
            instanceVariable.remove(""String_Node_Str"");
          }
          newVariables.add(instanceVariable);
        }
      }
      if (instanceVariable != null) {
        instanceVariable.put(""String_Node_Str"",variableJson.getString(""String_Node_Str""));
      }
    }
    instanceVariables.addAll(newVariables);
    instance.put(""String_Node_Str"",instanceVariables);
  }
  HttpPut put=new HttpPut(getInstanceUrl(instance.getString(""String_Node_Str"")));
  put.setEntity(new StringEntity(instance.toString(),ContentType.APPLICATION_JSON));
  try {
    HttpResponse response=execute(put);
    return JSONObject.fromObject(getResponseBodyAsString(response));
  }
  finally {
    put.reset();
  }
}","public JSONObject updateInstance(JSONObject instance,JSONArray variables,String boxVersion) throws IOException {
  JSONArray variablesWithFullScope=new JSONArray();
  if (variables != null && !variables.isEmpty()) {
    JSONArray instanceBoxes=instance.getJSONArray(""String_Node_Str"");
    JSONObject mainBox=instanceBoxes.getJSONObject(0);
    BoxStack boxStack=new BoxStack(mainBox.getString(""String_Node_Str""),instanceBoxes,this);
    JSONArray stackBoxes=boxStack.toJSONArray();
    JSONObject boxVersionJson=boxStack.findBox(boxVersion);
    if (boxVersionJson == null) {
      throw new IOException(MessageFormat.format(""String_Node_Str"",instance.getString(""String_Node_Str""),boxVersion));
    }
    boxVersion=boxVersionJson.getString(""String_Node_Str"");
    JSONArray boxVariables=null;
    for (    Object box : stackBoxes) {
      JSONObject boxJson=(JSONObject)box;
      if (boxJson.getString(""String_Node_Str"").equals(boxVersion)) {
        boxVariables=boxJson.getJSONArray(""String_Node_Str"");
        break;
      }
    }
    if (boxVariables == null) {
      throw new IOException(MessageFormat.format(""String_Node_Str"",instance.getString(""String_Node_Str""),boxVersion));
    }
    if (!boxVariables.isEmpty()) {
      String boxScope=boxVariables.getJSONObject(0).getString(""String_Node_Str"");
      for (      Object variable : variables) {
        JSONObject variableWithFullScope=JSONObject.fromObject(variable);
        String scope=variableWithFullScope.containsKey(""String_Node_Str"") ? variableWithFullScope.getString(""String_Node_Str"") : StringUtils.EMPTY;
        if (!StringUtils.isBlank(boxScope)) {
          scope=StringUtils.isBlank(scope) ? boxScope : boxScope + '.' + scope;
        }
        variableWithFullScope.put(""String_Node_Str"",scope);
        variablesWithFullScope.add(variableWithFullScope);
      }
    }
 else     if (!variables.isEmpty()) {
      throw new IOException(MessageFormat.format(""String_Node_Str"",boxVersion));
    }
  }
  return updateInstance(instance,variablesWithFullScope);
}",0.2563838019086923
149387,"public String getResourceUrl(){
  return instanceUrl;
}","@Override public String getResourceUrl(){
  return instanceUrl;
}",0.9166666666666666
149388,"private JSONObject doOperation(JSONObject instance,String operation,JSONArray variables) throws IOException {
  String instanceId=instance.getString(""String_Node_Str"");
  String instanceUrl=getInstanceUrl(instanceId);
  if (variables != null && !variables.isEmpty()) {
    instance=updateInstance(instance,variables);
  }
  HttpPut put=new HttpPut(MessageFormat.format(""String_Node_Str"",instanceUrl,operation));
  try {
    execute(put);
    return getInstance(instanceId);
  }
  finally {
    put.reset();
  }
}","private JSONObject doOperation(JSONObject instance,String operation,JSONArray variables) throws IOException {
  String instanceId=instance.getString(""String_Node_Str"");
  String instanceUrl=getInstanceUrl(instanceId);
  if (variables != null && !variables.isEmpty()) {
    updateInstance(instance,variables);
  }
  HttpPut put=new HttpPut(MessageFormat.format(""String_Node_Str"",instanceUrl,operation));
  try {
    execute(put);
    return getInstance(instanceId);
  }
  finally {
    put.reset();
  }
}",0.9911330049261085
149389,"public JSONObject getProfile(String profileId) throws IOException {
  if (StringUtils.isBlank(profileId)) {
    throw new IOException(""String_Node_Str"");
  }
  ;
  return (JSONObject)doGet(MessageFormat.format(""String_Node_Str"",endpointUrl,profileId),false);
}","public JSONObject getProfile(String profileId) throws IOException {
  if (StringUtils.isBlank(profileId)) {
    throw new IOException(""String_Node_Str"");
  }
  return (JSONObject)doGet(MessageFormat.format(""String_Node_Str"",endpointUrl,profileId),false);
}",0.992248062015504
149390,"public boolean isDone(JSONObject instance) throws IncompleteException, IOException {
  String updated=instance.getString(""String_Node_Str"");
  String state=instance.getString(""String_Node_Str"");
  String operation=instance.getString(""String_Node_Str"");
  if (lastModified.equals(updated) || !FINISH_STATES.contains(state)) {
    return false;
  }
  if (state.equals(InstanceState.UNAVAILABLE)) {
    throw new IncompleteException(MessageFormat.format(""String_Node_Str"",instanceUrl));
  }
  if (operations != null && !operations.contains(operation)) {
    throw new IncompleteException(MessageFormat.format(""String_Node_Str"",operation,instanceUrl));
  }
  return true;
}","@Override public boolean isDone(JSONObject instance) throws IncompleteException, IOException {
  String updated=instance.getString(""String_Node_Str"");
  String state=instance.getString(""String_Node_Str"");
  String operation=instance.getString(""String_Node_Str"");
  if (lastModified.equals(updated) || !FINISH_STATES.contains(state)) {
    return false;
  }
  if (state.equals(InstanceState.UNAVAILABLE)) {
    throw new IncompleteException(MessageFormat.format(""String_Node_Str"",getPageUrl(endpointUrl,instance)));
  }
  if (operations != null && !operations.contains(operation)) {
    throw new IncompleteException(MessageFormat.format(""String_Node_Str"",operation,getPageUrl(endpointUrl,instance)));
  }
  return true;
}",0.9424460431654677
149391,"public void waitForDone(int timeout) throws IncompleteException, IOException {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout * 60000;
  do {
    if (isDone()) {
      return;
    }
synchronized (waitLock) {
      try {
        waitLock.wait(1000);
      }
 catch (      InterruptedException ex) {
      }
    }
    long currentTime=System.currentTimeMillis();
    remainingTime=remainingTime - (currentTime - startTime);
    startTime=currentTime;
  }
 while (timeout == 0 || remainingTime > 0);
  JSONObject instance=getInstance();
  if (!isDone(instance)) {
    throw new TimeoutException(MessageFormat.format(""String_Node_Str"",instanceUrl,timeout,instance.getString(""String_Node_Str"")));
  }
}","@Override public void waitForDone(int timeout) throws IncompleteException, IOException {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout * 60000;
  do {
    if (isDone()) {
      return;
    }
synchronized (waitLock) {
      try {
        waitLock.wait(1000);
      }
 catch (      InterruptedException ex) {
      }
    }
    long currentTime=System.currentTimeMillis();
    remainingTime=remainingTime - (currentTime - startTime);
    startTime=currentTime;
  }
 while (timeout == 0 || remainingTime > 0);
  JSONObject instance=getInstance();
  if (!isDone(instance)) {
    throw new TimeoutException(MessageFormat.format(""String_Node_Str"",instanceUrl,timeout,instance.getString(""String_Node_Str"")));
  }
}",0.9931412894375856
149392,"public long getCreationTime(){
  return this.creationTime;
}","@Override public long getCreationTime(){
  return this.creationTime;
}",0.9230769230769232
149393,"public JSONArray getProfiles(String workspaceId,String boxId) throws IOException {
  if (StringUtils.isBlank(workspaceId)) {
    throw new IOException(""String_Node_Str"");
  }
  ;
  JSONArray profiles=(JSONArray)doGet(MessageFormat.format(""String_Node_Str"",endpointUrl,URLEncoder.encode(workspaceId,UTF_8),boxId),true);
  if (!canChange(workspaceId,boxId)) {
    JSONArray versions=getBoxVersions(boxId);
    if (!versions.isEmpty()) {
      Set<String> versionIDs=new HashSet<String>();
      for (      Object version : versions) {
        versionIDs.add(((JSONObject)version).getString(""String_Node_Str""));
      }
      JSONArray allProfiles=(JSONArray)doGet(MessageFormat.format(""String_Node_Str"",endpointUrl,URLEncoder.encode(workspaceId,UTF_8),boxId),true);
      for (      Object json : allProfiles) {
        JSONObject profile=(JSONObject)json;
        if (versionIDs.contains(profile.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""))) {
          profiles.add(profile);
        }
      }
    }
  }
  return profiles;
}","public JSONArray getProfiles(String workspaceId,String boxId) throws IOException {
  if (StringUtils.isBlank(workspaceId)) {
    throw new IOException(""String_Node_Str"");
  }
  JSONArray profiles=(JSONArray)doGet(MessageFormat.format(""String_Node_Str"",endpointUrl,URLEncoder.encode(workspaceId,UTF_8),boxId),true);
  if (!canChange(workspaceId,boxId)) {
    JSONArray versions=getBoxVersions(boxId);
    if (!versions.isEmpty()) {
      Set<String> versionIDs=new HashSet<String>();
      for (      Object version : versions) {
        versionIDs.add(((JSONObject)version).getString(""String_Node_Str""));
      }
      JSONArray allProfiles=(JSONArray)doGet(MessageFormat.format(""String_Node_Str"",endpointUrl,URLEncoder.encode(workspaceId,UTF_8),boxId),true);
      for (      Object json : allProfiles) {
        JSONObject profile=(JSONObject)json;
        if (versionIDs.contains(profile.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""))) {
          profiles.add(profile);
        }
      }
    }
  }
  return profiles;
}",0.9980769230769232
149394,"public Node call() throws Exception {
  slave.setInUse(true);
  Jenkins.getInstance().addNode(slave);
  IProgressMonitor monitor=ElasticBoxSlaveHandler.submit(slave);
  monitor.waitForDone(slave.getLaunchTimeout());
  if (slave.getComputer() != null && slave.getComputer().isOnline()) {
    return slave;
  }
 else {
    throw new Exception(MessageFormat.format(""String_Node_Str"",slave.getDisplayName()));
  }
}","public Node call() throws Exception {
  Jenkins.getInstance().addNode(slave);
  IProgressMonitor monitor=ElasticBoxSlaveHandler.submit(slave);
  monitor.waitForDone(slave.getLaunchTimeout());
  if (slave.getComputer() != null && slave.getComputer().isOnline()) {
    return slave;
  }
 else {
    throw new Exception(MessageFormat.format(""String_Node_Str"",slave.getDisplayName()));
  }
}",0.9699248120300752
149395,"@Override public synchronized Collection<NodeProvisioner.PlannedNode> provision(Label label,int excessWorkload){
  List<JSONObject> activeInstances;
  try {
    activeInstances=ElasticBoxSlaveHandler.getActiveInstances(this);
  }
 catch (  IOException ex) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",ex);
    return Collections.EMPTY_LIST;
  }
  if (activeInstances.size() >= maxInstances) {
    LOGGER.log(Level.WARNING,MessageFormat.format(""String_Node_Str"",label.getName(),getDisplayName()));
    return Collections.EMPTY_LIST;
  }
  List<ElasticBoxSlave> pendingSlaves=getPendingSlaves(label,activeInstances);
  if (!pendingSlaves.isEmpty()) {
    Map<ElasticBoxSlave,Integer> slaveToNumOfAvailableExecutorsMap=new HashMap<ElasticBoxSlave,Integer>(pendingSlaves.size());
    for (    ElasticBoxSlave slave : pendingSlaves) {
      slaveToNumOfAvailableExecutorsMap.put(slave,slave.getNumExecutors());
    }
    for (    Queue.BuildableItem buildableItem : Queue.getInstance().getBuildableItems()) {
      for (Iterator<ElasticBoxSlave> iter=slaveToNumOfAvailableExecutorsMap.keySet().iterator(); iter.hasNext() && !slaveToNumOfAvailableExecutorsMap.isEmpty(); ) {
        ElasticBoxSlave slave=iter.next();
        if (slave.canTake(buildableItem) == null) {
          int numOfAvailabelExecutors=slaveToNumOfAvailableExecutorsMap.get(slave);
          numOfAvailabelExecutors--;
          if (numOfAvailabelExecutors == 0) {
            iter.remove();
            ;
          }
          break;
        }
      }
    }
    ;
    for (    int numOfAvailableExecutors : slaveToNumOfAvailableExecutorsMap.values()) {
      excessWorkload-=numOfAvailableExecutors;
    }
  }
  if (excessWorkload <= 0) {
    LOGGER.log(Level.INFO,MessageFormat.format(""String_Node_Str"",label.getName(),getDisplayName()));
  }
  List<NodeProvisioner.PlannedNode> plannedNodes=new ArrayList<NodeProvisioner.PlannedNode>();
  while (excessWorkload > 0) {
    try {
      ElasticBoxSlave newSlave;
      if (isLabelForReusableSlave(label)) {
        String[] ids=label.getName().substring(ElasticBoxLabelFinder.REUSE_PREFIX.length()).split(""String_Node_Str"");
        String profileId=ids[0];
        String boxVersion=null;
        if (ids.length > 1) {
          boxVersion=ids[1];
        }
        newSlave=new ElasticBoxSlave(profileId,boxVersion,false,this);
      }
 else {
        SlaveConfiguration slaveConfig=findSlaveConfiguration(label,activeInstances);
        if (slaveConfig == null) {
          LOGGER.log(Level.WARNING,MessageFormat.format(""String_Node_Str"",label.getName()));
          break;
        }
        newSlave=new ElasticBoxSlave(slaveConfig,this);
      }
      final ElasticBoxSlave slave=newSlave;
      plannedNodes.add(new NodeProvisioner.PlannedNode(slave.getDisplayName(),new FutureWrapper<Node>(Computer.threadPoolForRemoting.submit(new Callable<Node>(){
        public Node call() throws Exception {
          slave.setInUse(true);
          Jenkins.getInstance().addNode(slave);
          IProgressMonitor monitor=ElasticBoxSlaveHandler.submit(slave);
          monitor.waitForDone(slave.getLaunchTimeout());
          if (slave.getComputer() != null && slave.getComputer().isOnline()) {
            return slave;
          }
 else {
            throw new Exception(MessageFormat.format(""String_Node_Str"",slave.getDisplayName()));
          }
        }
      }
)),1));
      excessWorkload-=slave.getNumExecutors();
    }
 catch (    Descriptor.FormException ex) {
      LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
      break;
    }
catch (    IOException ex) {
      LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
      break;
    }
  }
  return plannedNodes;
}","@Override public synchronized Collection<NodeProvisioner.PlannedNode> provision(Label label,int excessWorkload){
  List<JSONObject> activeInstances;
  try {
    activeInstances=ElasticBoxSlaveHandler.getActiveInstances(this);
  }
 catch (  IOException ex) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",ex);
    return Collections.EMPTY_LIST;
  }
  if (activeInstances.size() >= maxInstances) {
    LOGGER.log(Level.WARNING,MessageFormat.format(""String_Node_Str"",label.getName(),getDisplayName()));
    return Collections.EMPTY_LIST;
  }
  List<ElasticBoxSlave> pendingSlaves=getPendingSlaves(label,activeInstances);
  if (!pendingSlaves.isEmpty()) {
    Map<ElasticBoxSlave,Integer> slaveToNumOfAvailableExecutorsMap=new HashMap<ElasticBoxSlave,Integer>(pendingSlaves.size());
    for (    ElasticBoxSlave slave : pendingSlaves) {
      slaveToNumOfAvailableExecutorsMap.put(slave,slave.getNumExecutors());
    }
    for (    Queue.BuildableItem buildableItem : Queue.getInstance().getBuildableItems()) {
      for (Iterator<ElasticBoxSlave> iter=slaveToNumOfAvailableExecutorsMap.keySet().iterator(); iter.hasNext() && !slaveToNumOfAvailableExecutorsMap.isEmpty(); ) {
        ElasticBoxSlave slave=iter.next();
        if (slave.canTake(buildableItem) == null) {
          int numOfAvailabelExecutors=slaveToNumOfAvailableExecutorsMap.get(slave);
          numOfAvailabelExecutors--;
          if (numOfAvailabelExecutors == 0) {
            iter.remove();
            ;
          }
          break;
        }
      }
    }
    ;
    for (    int numOfAvailableExecutors : slaveToNumOfAvailableExecutorsMap.values()) {
      excessWorkload-=numOfAvailableExecutors;
    }
  }
  if (excessWorkload <= 0) {
    LOGGER.log(Level.INFO,MessageFormat.format(""String_Node_Str"",label.getName(),getDisplayName()));
  }
  List<NodeProvisioner.PlannedNode> plannedNodes=new ArrayList<NodeProvisioner.PlannedNode>();
  while (excessWorkload > 0) {
    try {
      ElasticBoxSlave newSlave;
      if (isLabelForReusableSlave(label)) {
        String[] ids=label.getName().substring(ElasticBoxLabelFinder.REUSE_PREFIX.length()).split(""String_Node_Str"");
        String profileId=ids[0];
        String boxVersion=null;
        if (ids.length > 1) {
          boxVersion=ids[1];
        }
        newSlave=new ElasticBoxSlave(profileId,boxVersion,false,this);
      }
 else {
        SlaveConfiguration slaveConfig=findSlaveConfiguration(label,activeInstances);
        if (slaveConfig == null) {
          LOGGER.log(Level.WARNING,MessageFormat.format(""String_Node_Str"",label.getName()));
          break;
        }
        newSlave=new ElasticBoxSlave(slaveConfig,this);
      }
      final ElasticBoxSlave slave=newSlave;
      plannedNodes.add(new NodeProvisioner.PlannedNode(slave.getDisplayName(),new FutureWrapper<Node>(Computer.threadPoolForRemoting.submit(new Callable<Node>(){
        public Node call() throws Exception {
          Jenkins.getInstance().addNode(slave);
          IProgressMonitor monitor=ElasticBoxSlaveHandler.submit(slave);
          monitor.waitForDone(slave.getLaunchTimeout());
          if (slave.getComputer() != null && slave.getComputer().isOnline()) {
            return slave;
          }
 else {
            throw new Exception(MessageFormat.format(""String_Node_Str"",slave.getDisplayName()));
          }
        }
      }
)),1));
      excessWorkload-=slave.getNumExecutors();
    }
 catch (    Descriptor.FormException ex) {
      LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
      break;
    }
catch (    IOException ex) {
      LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
      break;
    }
  }
  return plannedNodes;
}",0.9956391387298992
149396,"@Override public Future<?> disconnect(OfflineCause cause){
  boolean online=isOnline();
  boolean terminateNow=false;
  if (cause instanceof OfflineCause.SimpleOfflineCause && ((OfflineCause.SimpleOfflineCause)cause).description.toString().equals(Messages._Hudson_NodeBeingRemoved().toString())) {
    try {
      LOGGER.info(MessageFormat.format(""String_Node_Str"",slave.getNodeName(),slave.getInstancePageUrl()));
    }
 catch (    IOException ex) {
      LOGGER.info(MessageFormat.format(""String_Node_Str"",slave.getNodeName(),ex.getMessage()));
    }
    for (    LabelAtom label : ElasticBoxLabelFinder.INSTANCE.findLabels(slave)) {
      for (      NodeProvisioner.PlannedNode plannedNode : label.nodeProvisioner.getPendingLaunches()) {
        if (plannedNode.displayName.equals(slave.getNodeName())) {
          plannedNode.future.cancel(false);
        }
      }
    }
    if (online) {
      terminateOnOffline=true;
    }
 else {
      terminateNow=true;
    }
  }
  Future<?> future=super.disconnect(cause);
  if (terminateNow) {
    terminate();
  }
  return future;
}","@Override public Future<?> disconnect(OfflineCause cause){
  boolean online=isOnline();
  boolean terminateNow=false;
  if (isSlaveRemoved(cause)) {
    try {
      LOGGER.info(MessageFormat.format(""String_Node_Str"",slave.getNodeName(),slave.getInstancePageUrl()));
    }
 catch (    IOException ex) {
      LOGGER.info(MessageFormat.format(""String_Node_Str"",slave.getNodeName(),ex.getMessage()));
    }
    for (    LabelAtom label : ElasticBoxLabelFinder.INSTANCE.findLabels(slave)) {
      for (      NodeProvisioner.PlannedNode plannedNode : label.nodeProvisioner.getPendingLaunches()) {
        if (plannedNode.displayName.equals(slave.getNodeName())) {
          plannedNode.future.cancel(false);
        }
      }
    }
    if (online) {
      terminateOnOffline=true;
    }
 else {
      terminateNow=true;
    }
  }
  Future<?> future=super.disconnect(cause);
  if (terminateNow) {
    terminate();
  }
  return future;
}",0.9148830263812844
149397,"private static void tagSlaveInstance(JSONObject instance,ElasticBoxSlave slave) throws IOException {
  if (instance.getJSONArray(""String_Node_Str"").contains(slave.getNodeName())) {
    return;
  }
  instance.getJSONArray(""String_Node_Str"").add(slave.getNodeName());
  Client client=ClientCache.getClient(slave.getCloud().name);
  client.updateInstance(instance,null);
  LOGGER.fine(MessageFormat.format(""String_Node_Str"",Client.getPageUrl(client.getEndpointUrl(),instance),slave.getNodeName()));
}","private static void tagSlaveInstance(JSONObject instance,ElasticBoxSlave slave) throws IOException {
  if (instance.getJSONArray(""String_Node_Str"").contains(slave.getNodeName())) {
    return;
  }
  instance.getJSONArray(""String_Node_Str"").add(slave.getNodeName());
  Client client=ClientCache.getClient(slave.getCloud().name);
  client.updateInstance(instance);
  LOGGER.fine(MessageFormat.format(""String_Node_Str"",Client.getPageUrl(client.getEndpointUrl(),instance),slave.getNodeName()));
}",0.9949443882709808
149398,"/** 
 * Collects inactive or invalid slaves that can be removed.
 * @param slavesToRemove a list to be filled with inactive or invalid slaves that can be removed
 * @return a list of slaves to remove
 * @throws IOException 
 */
private static List<ElasticBoxSlave> collectSlavesToRemove(SlaveInstanceManager slaveInstanceManager) throws IOException {
  List<ElasticBoxSlave> slavesToRemove=new ArrayList<ElasticBoxSlave>();
  Collection<ElasticBoxSlave> slaves=slaveInstanceManager.getSlaves();
  for (  ElasticBoxSlave slave : slaves) {
    if (!isSlaveInQueue(slave,incomingQueue) && !slave.isInUse()) {
      slavesToRemove.add(slave);
    }
  }
  for (  JSONObject instance : slaveInstanceManager.getInstances()) {
    String state=instance.getString(""String_Node_Str"");
    String instanceId=instance.getString(""String_Node_Str"");
    ElasticBoxSlave slave=slaveInstanceManager.getSlave(instanceId);
    if (Client.InstanceState.DONE.equals(state) && Client.TERMINATE_OPERATIONS.contains(instance.getString(""String_Node_Str""))) {
      addToTerminatedQueue(slave);
    }
 else     if (Client.InstanceState.UNAVAILABLE.equals(state)) {
      Logger.getLogger(ElasticBoxSlaveHandler.class.getName()).log(Level.INFO,MessageFormat.format(""String_Node_Str"",slave.getInstancePageUrl()));
      slavesToRemove.add(slave);
    }
  }
  slavesToRemove.addAll(slaveInstanceManager.getSlavesWithoutInstance());
  return slavesToRemove;
}","/** 
 * Collects inactive or invalid slaves that can be removed.
 * @param slavesToRemove a list to be filled with inactive or invalid slaves that can be removed
 * @return a list of slaves to remove
 * @throws IOException 
 */
private static List<ElasticBoxSlave> collectSlavesToRemove(SlaveInstanceManager slaveInstanceManager) throws IOException {
  List<ElasticBoxSlave> slavesToRemove=new ArrayList<ElasticBoxSlave>();
  Collection<ElasticBoxSlave> slaves=slaveInstanceManager.getSlaves();
  for (  ElasticBoxSlave slave : slaves) {
    if (slave.isDeletable()) {
      slavesToRemove.add(slave);
    }
  }
  for (  JSONObject instance : slaveInstanceManager.getInstances()) {
    String state=instance.getString(""String_Node_Str"");
    String instanceId=instance.getString(""String_Node_Str"");
    ElasticBoxSlave slave=slaveInstanceManager.getSlave(instanceId);
    if (Client.InstanceState.DONE.equals(state) && Client.TERMINATE_OPERATIONS.contains(instance.getString(""String_Node_Str""))) {
      addToTerminatedQueue(slave);
    }
 else     if (Client.InstanceState.UNAVAILABLE.equals(state)) {
      Logger.getLogger(ElasticBoxSlaveHandler.class.getName()).log(Level.INFO,MessageFormat.format(""String_Node_Str"",slave.getInstancePageUrl()));
      slavesToRemove.add(slave);
    }
  }
  slavesToRemove.addAll(slaveInstanceManager.getSlavesWithoutInstance());
  return slavesToRemove;
}",0.975557917109458
149399,"private void processSubmittedQueue(TaskListener listener){
  boolean saveNeeded=false;
  for (Iterator<InstanceCreationRequest> iter=submittedQueue.iterator(); iter.hasNext(); ) {
    InstanceCreationRequest request=iter.next();
    try {
      if (request.monitor.isDone()) {
        tagSlaveInstance(request.slave.getInstance(),request.slave);
        if (request.slave.getComputer() != null && request.slave.getComputer().isOnline()) {
          request.slave.setInstanceStatusMessage(MessageFormat.format(""String_Node_Str"",request.slave.getInstancePageUrl()));
          saveNeeded=true;
          iter.remove();
        }
 else         if ((System.currentTimeMillis() - request.monitor.getCreationTime()) >= TIMEOUT) {
          request.slave.setInUse(false);
          iter.remove();
          log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",request.slave.getNodeName(),TIMEOUT_MINUTES),null,listener);
        }
      }
    }
 catch (    IProgressMonitor.IncompleteException ex) {
      log(Level.SEVERE,ex.getMessage(),ex,listener);
      iter.remove();
    }
catch (    IOException ex) {
      log(Level.SEVERE,ex.getMessage(),ex,listener);
    }
  }
  if (saveNeeded) {
    try {
      Jenkins.getInstance().save();
    }
 catch (    IOException ex) {
      Logger.getLogger(ElasticBoxSlaveHandler.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}","private void processSubmittedQueue(TaskListener listener){
  boolean saveNeeded=false;
  for (Iterator<InstanceCreationRequest> iter=submittedQueue.iterator(); iter.hasNext(); ) {
    InstanceCreationRequest request=iter.next();
    try {
      if (request.monitor.isDone()) {
        tagSlaveInstance(request.slave.getInstance(),request.slave);
        if (request.slave.getComputer() != null && request.slave.getComputer().isOnline()) {
          request.slave.setInstanceStatusMessage(MessageFormat.format(""String_Node_Str"",request.slave.getInstancePageUrl()));
          saveNeeded=true;
          iter.remove();
        }
 else {
          long launchTime=System.currentTimeMillis() - request.monitor.getCreationTime();
          if (launchTime >= TimeUnit.MINUTES.toMillis(request.slave.getLaunchTimeout())) {
            request.slave.setDeletable(true);
            iter.remove();
            log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",request.slave.getNodeName(),TimeUnit.MILLISECONDS.toMinutes(launchTime)),null,listener);
          }
        }
      }
    }
 catch (    IProgressMonitor.IncompleteException ex) {
      log(Level.SEVERE,ex.getMessage(),ex,listener);
      iter.remove();
    }
catch (    IOException ex) {
      log(Level.SEVERE,ex.getMessage(),ex,listener);
    }
  }
  if (saveNeeded) {
    try {
      Jenkins.getInstance().save();
    }
 catch (    IOException ex) {
      Logger.getLogger(ElasticBoxSlaveHandler.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}",0.7782743210725335
149400,"@Override public boolean shouldSchedule(Queue.Task p,List<Action> actions){
  if (p instanceof AbstractProject && p instanceof BuildableItemWithBuildWrappers) {
    AbstractProject project=(AbstractProject)p;
    InstanceCreator instanceCreator=null;
    boolean singleUse=false;
    for (    Object buildWrapper : ((BuildableItemWithBuildWrappers)p).getBuildWrappersList().toMap().values()) {
      if (buildWrapper instanceof InstanceCreator) {
        instanceCreator=(InstanceCreator)buildWrapper;
      }
 else       if (buildWrapper instanceof SingleUseSlaveBuildOption) {
        singleUse=true;
      }
      if (instanceCreator != null && singleUse) {
        break;
      }
    }
    if (instanceCreator != null) {
      for (      Queue.Item item : Queue.getInstance().getItems(p)) {
        boolean shouldScheduleItem=false;
        for (        Queue.QueueAction action : item.getActions(Queue.QueueAction.class)) {
          shouldScheduleItem|=action.shouldSchedule(actions);
        }
        for (        Queue.QueueAction action : Util.filter(actions,Queue.QueueAction.class)) {
          shouldScheduleItem|=action.shouldSchedule(item.getActions());
        }
        if (!shouldScheduleItem) {
          return false;
        }
      }
      LabelAtom label=ElasticBoxLabelFinder.getLabel(instanceCreator.getProfile(),instanceCreator.getBoxVersion(),singleUse);
      if (singleUse) {
        try {
          ElasticBoxSlave slave=new ElasticBoxSlave(instanceCreator.getProfile(),instanceCreator.getBoxVersion(),singleUse,(ElasticBoxCloud)Jenkins.getInstance().getCloud(instanceCreator.getCloud()));
          slave.setInUse(true);
          Jenkins.getInstance().addNode(slave);
          ElasticBoxSlaveHandler.submit(slave);
        }
 catch (        Descriptor.FormException ex) {
          LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
        }
catch (        IOException ex) {
          LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
        }
      }
      try {
        project.setAssignedLabel(label);
      }
 catch (      IOException ex) {
        LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
      }
    }
  }
  return true;
}","@Override public boolean shouldSchedule(Queue.Task p,List<Action> actions){
  if (p instanceof AbstractProject && p instanceof BuildableItemWithBuildWrappers) {
    AbstractProject project=(AbstractProject)p;
    InstanceCreator instanceCreator=null;
    boolean singleUse=false;
    for (    Object buildWrapper : ((BuildableItemWithBuildWrappers)p).getBuildWrappersList().toMap().values()) {
      if (buildWrapper instanceof InstanceCreator) {
        instanceCreator=(InstanceCreator)buildWrapper;
      }
 else       if (buildWrapper instanceof SingleUseSlaveBuildOption) {
        singleUse=true;
      }
      if (instanceCreator != null && singleUse) {
        break;
      }
    }
    if (instanceCreator != null) {
      for (      Queue.Item item : Queue.getInstance().getItems(p)) {
        boolean shouldScheduleItem=false;
        for (        Queue.QueueAction action : item.getActions(Queue.QueueAction.class)) {
          shouldScheduleItem|=action.shouldSchedule(actions);
        }
        for (        Queue.QueueAction action : Util.filter(actions,Queue.QueueAction.class)) {
          shouldScheduleItem|=action.shouldSchedule(item.getActions());
        }
        if (!shouldScheduleItem) {
          return false;
        }
      }
      LabelAtom label=ElasticBoxLabelFinder.getLabel(instanceCreator.getProfile(),instanceCreator.getBoxVersion(),singleUse);
      if (singleUse) {
        try {
          ElasticBoxSlave slave=new ElasticBoxSlave(instanceCreator.getProfile(),instanceCreator.getBoxVersion(),singleUse,(ElasticBoxCloud)Jenkins.getInstance().getCloud(instanceCreator.getCloud()));
          Jenkins.getInstance().addNode(slave);
          ElasticBoxSlaveHandler.submit(slave);
        }
 catch (        Descriptor.FormException ex) {
          LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
        }
catch (        IOException ex) {
          LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
        }
      }
      try {
        project.setAssignedLabel(label);
      }
 catch (      IOException ex) {
        LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
      }
    }
  }
  return true;
}",0.9925233644859812
149401,"@Override public boolean tearDown(AbstractBuild build,BuildListener listener) throws IOException, InterruptedException {
  ebSlave.setInUse(false);
  if (ebSlave.isSingleUse()) {
    ebSlave.getComputer().setAcceptingTasks(false);
  }
  build.getProject().setAssignedLabel(null);
  return true;
}","@Override public boolean tearDown(AbstractBuild build,BuildListener listener) throws IOException, InterruptedException {
  if (ebSlave.isSingleUse()) {
    ebSlave.getComputer().setAcceptingTasks(false);
  }
  build.getProject().setAssignedLabel(null);
  return true;
}",0.5592920353982301
149402,"@Override public Environment setUp(AbstractBuild build,Launcher launcher,BuildListener listener) throws IOException, InterruptedException {
  for (  Node node : build.getProject().getAssignedLabel().getNodes()) {
    if (node instanceof ElasticBoxSlave) {
      ElasticBoxSlave slave=(ElasticBoxSlave)node;
      if (slave.getComputer().getBuilds().contains(build)) {
        ebSlave=slave;
        ebSlave.setInUse(true);
        break;
      }
    }
  }
  return new Environment(){
    @Override public boolean tearDown(    AbstractBuild build,    BuildListener listener) throws IOException, InterruptedException {
      ebSlave.setInUse(false);
      if (ebSlave.isSingleUse()) {
        ebSlave.getComputer().setAcceptingTasks(false);
      }
      build.getProject().setAssignedLabel(null);
      return true;
    }
  }
;
}","@Override public Environment setUp(AbstractBuild build,Launcher launcher,BuildListener listener) throws IOException, InterruptedException {
  for (  Node node : build.getProject().getAssignedLabel().getNodes()) {
    if (node instanceof ElasticBoxSlave) {
      ElasticBoxSlave slave=(ElasticBoxSlave)node;
      if (slave.getComputer().getBuilds().contains(build)) {
        ebSlave=slave;
        break;
      }
    }
  }
  return new Environment(){
    @Override public boolean tearDown(    AbstractBuild build,    BuildListener listener) throws IOException, InterruptedException {
      if (ebSlave.isSingleUse()) {
        ebSlave.getComputer().setAcceptingTasks(false);
      }
      build.getProject().setAssignedLabel(null);
      return true;
    }
  }
;
}",0.8035153797865662
149403,"@Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  TaskLogger logger=new TaskLogger(listener);
  logger.info(""String_Node_Str"");
  ElasticBoxCloud ebCloud=(ElasticBoxCloud)Jenkins.getInstance().getCloud(getCloud());
  if (ebCloud == null) {
    throw new IOException(""String_Node_Str"");
  }
  VariableResolver resolver=new VariableResolver(cloud,workspace,build,listener);
  Client client=ebCloud.createClient();
  if (!alternateAction.equals(ACTION_NONE)) {
    JSONArray instanceArray=DescriptorHelper.getInstancesAsJSONArrayResponse(client,workspace,box).getJsonArray();
    Set<String> tagSet=new HashSet<String>();
    Set<String> resolvedTags=resolver.resolveTags(tags);
    if (resolvedTags.isEmpty()) {
      tagSet.add(resolver.resolve(environment));
    }
 else {
      tagSet.addAll(resolvedTags);
    }
    List<JSONObject> existingInstances=new ArrayList<JSONObject>();
    for (    Object instance : instanceArray) {
      JSONObject json=(JSONObject)instance;
      if (json.getJSONArray(""String_Node_Str"").containsAll(tagSet) && !Client.InstanceState.UNAVAILABLE.equals(json.getString(""String_Node_Str"")) && !Client.TERMINATE_OPERATIONS.contains(json.getString(""String_Node_Str""))) {
        existingInstances.add(json);
      }
    }
    if (!existingInstances.isEmpty()) {
      JSONObject instance=performAlternateAction(existingInstances,ebCloud,client,resolver,logger);
      instanceManager.setInstance(build,instance);
      return true;
    }
  }
  String instanceId=deploy(ebCloud,client,resolver,logger);
  JSONObject instance=client.getInstance(instanceId);
  Set<String> resolvedTags=resolver.resolveTags(tags);
  if (waitForCompletion && !resolvedTags.isEmpty()) {
    JSONArray instanceTags=instance.getJSONArray(""String_Node_Str"");
    int oldSize=instanceTags.size();
    for (    String tag : resolvedTags) {
      if (!instanceTags.contains(tag)) {
        instanceTags.add(tag);
      }
    }
    if (instanceTags.size() > oldSize) {
      instance.put(""String_Node_Str"",instanceTags);
      instance=client.updateInstance(instance,null);
    }
  }
  instanceManager.setInstance(build,instance);
  return true;
}","@Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  TaskLogger logger=new TaskLogger(listener);
  logger.info(""String_Node_Str"");
  ElasticBoxCloud ebCloud=(ElasticBoxCloud)Jenkins.getInstance().getCloud(getCloud());
  if (ebCloud == null) {
    throw new IOException(""String_Node_Str"");
  }
  VariableResolver resolver=new VariableResolver(cloud,workspace,build,listener);
  Client client=ebCloud.createClient();
  if (!alternateAction.equals(ACTION_NONE)) {
    JSONArray instanceArray=DescriptorHelper.getInstancesAsJSONArrayResponse(client,workspace,box).getJsonArray();
    Set<String> tagSet=new HashSet<String>();
    Set<String> resolvedTags=resolver.resolveTags(tags);
    if (resolvedTags.isEmpty()) {
      tagSet.add(resolver.resolve(environment));
    }
 else {
      tagSet.addAll(resolvedTags);
    }
    List<JSONObject> existingInstances=new ArrayList<JSONObject>();
    for (    Object instance : instanceArray) {
      JSONObject json=(JSONObject)instance;
      if (json.getJSONArray(""String_Node_Str"").containsAll(tagSet) && !Client.InstanceState.UNAVAILABLE.equals(json.getString(""String_Node_Str"")) && !Client.TERMINATE_OPERATIONS.contains(json.getString(""String_Node_Str""))) {
        existingInstances.add(json);
      }
    }
    if (!existingInstances.isEmpty()) {
      JSONObject instance=performAlternateAction(existingInstances,ebCloud,client,resolver,logger);
      instanceManager.setInstance(build,instance);
      return true;
    }
  }
  String instanceId=deploy(ebCloud,client,resolver,logger);
  JSONObject instance=client.getInstance(instanceId);
  Set<String> resolvedTags=resolver.resolveTags(tags);
  if (waitForCompletion && !resolvedTags.isEmpty()) {
    JSONArray instanceTags=instance.getJSONArray(""String_Node_Str"");
    int oldSize=instanceTags.size();
    for (    String tag : resolvedTags) {
      if (!instanceTags.contains(tag)) {
        instanceTags.add(tag);
      }
    }
    if (instanceTags.size() > oldSize) {
      instance.put(""String_Node_Str"",instanceTags);
      instance=client.updateInstance(instance);
    }
  }
  instanceManager.setInstance(build,instance);
  return true;
}",0.9658253294616932
149404,"@Override public Future<?> disconnect(OfflineCause cause){
  boolean online=isOnline();
  Future<?> future=super.disconnect(cause);
  if (cause instanceof OfflineCause.SimpleOfflineCause && ((OfflineCause.SimpleOfflineCause)cause).description.toString().equals(Messages._Hudson_NodeBeingRemoved().toString())) {
    for (    LabelAtom label : ElasticBoxLabelFinder.INSTANCE.findLabels(slave)) {
      for (      NodeProvisioner.PlannedNode plannedNode : label.nodeProvisioner.getPendingLaunches()) {
        if (plannedNode.displayName.equals(slave.getNodeName())) {
          plannedNode.future.cancel(false);
        }
      }
    }
    if (online) {
      terminateOnOffline=true;
    }
 else {
      terminate();
    }
  }
  return future;
}","@Override public Future<?> disconnect(OfflineCause cause){
  boolean online=isOnline();
  boolean terminateNow=false;
  if (cause instanceof OfflineCause.SimpleOfflineCause && ((OfflineCause.SimpleOfflineCause)cause).description.toString().equals(Messages._Hudson_NodeBeingRemoved().toString())) {
    for (    LabelAtom label : ElasticBoxLabelFinder.INSTANCE.findLabels(slave)) {
      for (      NodeProvisioner.PlannedNode plannedNode : label.nodeProvisioner.getPendingLaunches()) {
        if (plannedNode.displayName.equals(slave.getNodeName())) {
          plannedNode.future.cancel(false);
        }
      }
    }
    if (online) {
      terminateOnOffline=true;
    }
 else {
      terminateNow=true;
    }
  }
  Future<?> future=super.disconnect(cause);
  if (terminateNow) {
    terminate();
  }
  return future;
}",0.1988527724665392
149405,"BoxStack(String boxId,JSONArray boxes,Client client){
  this.boxId=boxId;
  this.boxes=boxes;
  this.client=client;
  overriddenVariables=new ArrayList<JSONObject>();
}","BoxStack(String boxId,JSONArray boxes,Client client,List<JSONObject> overridenVariables){
  this.boxId=boxId;
  this.boxes=boxes;
  this.client=client;
  this.overriddenVariables=overridenVariables;
}",0.3858695652173913
149406,"public IProgressMonitor poweron(String instanceId) throws IOException {
  String instanceUrl=getInstanceUrl(instanceId);
  HttpPut put=new HttpPut(MessageFormat.format(""String_Node_Str"",instanceUrl));
  try {
    execute(put);
    return new ProgressMonitor(instanceUrl,Collections.singleton(InstanceOperation.POWERON));
  }
  finally {
    put.reset();
  }
}","public IProgressMonitor poweron(String instanceId) throws IOException {
  String instanceUrl=getInstanceUrl(instanceId);
  JSONObject instance=(JSONObject)doGet(instanceUrl,false);
  HttpPut put=new HttpPut(MessageFormat.format(""String_Node_Str"",instanceUrl));
  try {
    execute(put);
    return new ProgressMonitor(instanceUrl,Collections.singleton(InstanceOperation.POWERON),instance.getString(""String_Node_Str""));
  }
  finally {
    put.reset();
  }
}",0.8799019607843137
149407,"public IProgressMonitor reconfigure(String instanceId,JSONArray variables) throws IOException {
  JSONObject instance=getInstance(instanceId);
  JSONArray instanceVariables=instance.getJSONArray(""String_Node_Str"");
  JSONArray boxVariables=instance.getJSONArray(""String_Node_Str"").getJSONObject(0).getJSONArray(""String_Node_Str"");
  List<JSONObject> newVariables=new ArrayList<JSONObject>();
  for (  Object variable : variables) {
    JSONObject variableJson=(JSONObject)variable;
    JSONObject instanceVariable=findVariable(variableJson,instanceVariables);
    if (instanceVariable == null) {
      JSONObject boxVariable=findVariable(variableJson,boxVariables);
      if (boxVariable != null) {
        instanceVariable=JSONObject.fromObject(boxVariable);
        newVariables.add(instanceVariable);
      }
    }
    if (instanceVariable != null) {
      instanceVariable.put(""String_Node_Str"",variableJson.getString(""String_Node_Str""));
    }
  }
  instanceVariables.addAll(newVariables);
  instance.put(""String_Node_Str"",instanceVariables);
  String instanceUrl=getInstanceUrl(instanceId);
  HttpPut put=new HttpPut(instanceUrl);
  put.setEntity(new StringEntity(instance.toString(),ContentType.APPLICATION_JSON));
  try {
    execute(put);
    put.reset();
    put=new HttpPut(MessageFormat.format(""String_Node_Str"",instanceUrl));
    execute(put);
    return new ProgressMonitor(instanceUrl,Collections.singleton(InstanceOperation.RECONFIGURE));
  }
  finally {
    put.reset();
  }
}","public IProgressMonitor reconfigure(String instanceId,JSONArray variables) throws IOException {
  JSONObject instance=getInstance(instanceId);
  JSONArray instanceVariables=instance.getJSONArray(""String_Node_Str"");
  JSONArray boxVariables=instance.getJSONArray(""String_Node_Str"").getJSONObject(0).getJSONArray(""String_Node_Str"");
  List<JSONObject> newVariables=new ArrayList<JSONObject>();
  for (  Object variable : variables) {
    JSONObject variableJson=(JSONObject)variable;
    JSONObject instanceVariable=findVariable(variableJson,instanceVariables);
    if (instanceVariable == null) {
      JSONObject boxVariable=findVariable(variableJson,boxVariables);
      if (boxVariable != null) {
        instanceVariable=JSONObject.fromObject(boxVariable);
        newVariables.add(instanceVariable);
      }
    }
    if (instanceVariable != null) {
      instanceVariable.put(""String_Node_Str"",variableJson.getString(""String_Node_Str""));
    }
  }
  instanceVariables.addAll(newVariables);
  instance.put(""String_Node_Str"",instanceVariables);
  String instanceUrl=getInstanceUrl(instanceId);
  HttpPut put=new HttpPut(instanceUrl);
  put.setEntity(new StringEntity(instance.toString(),ContentType.APPLICATION_JSON));
  try {
    HttpResponse response=execute(put);
    instance=JSONObject.fromObject(getResponseBodyAsString(response));
    put.reset();
    put=new HttpPut(MessageFormat.format(""String_Node_Str"",instanceUrl));
    execute(put);
    return new ProgressMonitor(instanceUrl,Collections.singleton(InstanceOperation.RECONFIGURE),instance.getString(""String_Node_Str""));
  }
  finally {
    put.reset();
  }
}",0.957972409367982
149408,"public IProgressMonitor deploy(String boxVersion,String profileId,String workspaceId,String environment,int instances,JSONArray variables) throws IOException {
  JSONObject profile=(JSONObject)doGet(MessageFormat.format(""String_Node_Str"",profileId),false);
  JSONObject deployRequest=new JSONObject();
  String profileSchema=profile.getString(""String_Node_Str"");
  String schemaVersion=getSchemaVersion(profileSchema);
  if (schemaVersion.compareTo(""String_Node_Str"") > 0) {
    if (boxVersion != null) {
      profile.getJSONObject(""String_Node_Str"").put(""String_Node_Str"",boxVersion);
    }
    JSONObject serviceProfile=profile.getJSONObject(""String_Node_Str"");
    if (serviceProfile.containsKey(""String_Node_Str"")) {
      serviceProfile.put(""String_Node_Str"",instances);
    }
    deployRequest.put(""String_Node_Str"",BASE_ELASTICBOX_SCHEMA + schemaVersion + '/'+ DEPLOYMENT_REQUEST_SCHEMA_NAME);
    for (    Object json : variables) {
      JSONObject variable=(JSONObject)json;
      if (variable.containsKey(""String_Node_Str"") && variable.getString(""String_Node_Str"").isEmpty()) {
        variable.remove(""String_Node_Str"");
      }
    }
    deployRequest.put(""String_Node_Str"",variables);
  }
 else {
    JSONObject mainInstance=(JSONObject)profile.getJSONArray(""String_Node_Str"").get(0);
    JSONArray jsonVars=mainInstance.getJSONArray(""String_Node_Str"");
    for (    Object json : variables) {
      JSONObject variable=(JSONObject)json;
      JSONObject jsonVar=findVariable(variable,jsonVars);
      if (jsonVar == null) {
        jsonVars.add(variable);
      }
 else {
        jsonVar.put(""String_Node_Str"",variable.getString(""String_Node_Str""));
      }
    }
    JSONObject serviceProfile=mainInstance.getJSONObject(""String_Node_Str"");
    if (serviceProfile.containsKey(""String_Node_Str"")) {
      serviceProfile.put(""String_Node_Str"",instances);
    }
    deployRequest.put(""String_Node_Str"",BASE_ELASTICBOX_SCHEMA + schemaVersion + ""String_Node_Str"");
  }
  deployRequest.put(""String_Node_Str"",environment);
  deployRequest.put(""String_Node_Str"",profile);
  deployRequest.put(""String_Node_Str"",workspaceId);
  HttpPost post=new HttpPost(MessageFormat.format(""String_Node_Str"",endpointUrl));
  post.setEntity(new StringEntity(deployRequest.toString(),ContentType.APPLICATION_JSON));
  try {
    HttpResponse response=execute(post);
    JSONObject instance=JSONObject.fromObject(getResponseBodyAsString(response));
    return new ProgressMonitor(endpointUrl + instance.getString(""String_Node_Str""),Collections.singleton(InstanceOperation.DEPLOY));
  }
  finally {
    post.reset();
  }
}","public IProgressMonitor deploy(String boxVersion,String profileId,String workspaceId,String environment,int instances,JSONArray variables) throws IOException {
  JSONObject profile=(JSONObject)doGet(MessageFormat.format(""String_Node_Str"",profileId),false);
  JSONObject deployRequest=new JSONObject();
  String profileSchema=profile.getString(""String_Node_Str"");
  String schemaVersion=getSchemaVersion(profileSchema);
  if (schemaVersion.compareTo(""String_Node_Str"") > 0) {
    if (boxVersion != null) {
      profile.getJSONObject(""String_Node_Str"").put(""String_Node_Str"",boxVersion);
    }
    JSONObject serviceProfile=profile.getJSONObject(""String_Node_Str"");
    if (serviceProfile.containsKey(""String_Node_Str"")) {
      serviceProfile.put(""String_Node_Str"",instances);
    }
    deployRequest.put(""String_Node_Str"",BASE_ELASTICBOX_SCHEMA + schemaVersion + '/'+ DEPLOYMENT_REQUEST_SCHEMA_NAME);
    for (    Object json : variables) {
      JSONObject variable=(JSONObject)json;
      if (variable.containsKey(""String_Node_Str"") && variable.getString(""String_Node_Str"").isEmpty()) {
        variable.remove(""String_Node_Str"");
      }
    }
    deployRequest.put(""String_Node_Str"",variables);
  }
 else {
    JSONObject mainInstance=(JSONObject)profile.getJSONArray(""String_Node_Str"").get(0);
    JSONArray jsonVars=mainInstance.getJSONArray(""String_Node_Str"");
    for (    Object json : variables) {
      JSONObject variable=(JSONObject)json;
      JSONObject jsonVar=findVariable(variable,jsonVars);
      if (jsonVar == null) {
        jsonVars.add(variable);
      }
 else {
        jsonVar.put(""String_Node_Str"",variable.getString(""String_Node_Str""));
      }
    }
    JSONObject serviceProfile=mainInstance.getJSONObject(""String_Node_Str"");
    if (serviceProfile.containsKey(""String_Node_Str"")) {
      serviceProfile.put(""String_Node_Str"",instances);
    }
    deployRequest.put(""String_Node_Str"",BASE_ELASTICBOX_SCHEMA + schemaVersion + ""String_Node_Str"");
  }
  deployRequest.put(""String_Node_Str"",environment);
  deployRequest.put(""String_Node_Str"",profile);
  deployRequest.put(""String_Node_Str"",workspaceId);
  HttpPost post=new HttpPost(MessageFormat.format(""String_Node_Str"",endpointUrl));
  post.setEntity(new StringEntity(deployRequest.toString(),ContentType.APPLICATION_JSON));
  try {
    HttpResponse response=execute(post);
    JSONObject instance=JSONObject.fromObject(getResponseBodyAsString(response));
    return new ProgressMonitor(endpointUrl + instance.getString(""String_Node_Str""),Collections.singleton(InstanceOperation.DEPLOY),instance.getString(""String_Node_Str""));
  }
  finally {
    post.reset();
  }
}",0.9927701674277016
149409,"/** 
 * @param states
 * @param timeout in minutes
 * @return the latest state if it is one of the specified states or the timeout elapsed
 * @throws IOException 
 */
private String waitFor(Set<String> states,int timeout) throws IOException {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout * 60000;
  String state=null;
  do {
    JSONObject instance=(JSONObject)doGet(instanceUrl,false);
    state=instance.getString(""String_Node_Str"");
    if (states.contains(state)) {
      if (operations == null) {
        break;
      }
      String operation=instance.getString(""String_Node_Str"");
      if (TERMINATE_OPERATIONS.contains(operation) || operations.contains(operation)) {
        break;
      }
    }
synchronized (waitLock) {
      try {
        waitLock.wait(1000);
      }
 catch (      InterruptedException ex) {
      }
    }
    long currentTime=System.currentTimeMillis();
    remainingTime=remainingTime - (currentTime - startTime);
    startTime=currentTime;
  }
 while (timeout == 0 || remainingTime > 0);
  return state;
}","/** 
 * @param states
 * @param timeout in minutes
 * @return the latest state if it is one of the specified states or the timeout elapsed
 * @throws IOException 
 */
private String waitFor(Set<String> states,int timeout) throws IOException {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout * 60000;
  String state=null;
  do {
    JSONObject instance=(JSONObject)doGet(instanceUrl,false);
    String updated=instance.getString(""String_Node_Str"");
    state=instance.getString(""String_Node_Str"");
    if (!lastModified.equals(updated) && states.contains(state)) {
      if (operations == null) {
        break;
      }
      String operation=instance.getString(""String_Node_Str"");
      if (TERMINATE_OPERATIONS.contains(operation) || operations.contains(operation)) {
        break;
      }
    }
synchronized (waitLock) {
      try {
        waitLock.wait(1000);
      }
 catch (      InterruptedException ex) {
      }
    }
    long currentTime=System.currentTimeMillis();
    remainingTime=remainingTime - (currentTime - startTime);
    startTime=currentTime;
  }
 while (timeout == 0 || remainingTime > 0);
  return state;
}",0.9545249887438092
149410,"private IProgressMonitor doTerminate(String instanceUrl,String operation) throws IOException {
  HttpDelete delete=new HttpDelete(MessageFormat.format(""String_Node_Str"",instanceUrl,operation));
  try {
    execute(delete);
    return new ProgressMonitor(instanceUrl,TERMINATE_OPERATIONS);
  }
  finally {
    delete.reset();
  }
}","private IProgressMonitor doTerminate(String instanceUrl,String operation) throws IOException {
  JSONObject instance=(JSONObject)doGet(instanceUrl,false);
  HttpDelete delete=new HttpDelete(MessageFormat.format(""String_Node_Str"",instanceUrl,operation));
  try {
    execute(delete);
    return new ProgressMonitor(instanceUrl,TERMINATE_OPERATIONS,instance.getString(""String_Node_Str""));
  }
  finally {
    delete.reset();
  }
}",0.8707124010554089
149411,"private ProgressMonitor(String instanceUrl,Set<String> operations){
  this.instanceUrl=instanceUrl;
  this.operations=operations;
  creationTime=System.currentTimeMillis();
}","private ProgressMonitor(String instanceUrl,Set<String> operations,String lastModified){
  this.instanceUrl=instanceUrl;
  this.operations=operations;
  this.lastModified=lastModified;
  creationTime=System.currentTimeMillis();
}",0.8656716417910447
149412,"public IProgressMonitor reinstall(String instanceId) throws IOException {
  String instanceUrl=getInstanceUrl(instanceId);
  HttpPut put=new HttpPut(MessageFormat.format(""String_Node_Str"",instanceUrl));
  try {
    execute(put);
    return new ProgressMonitor(instanceUrl,Collections.singleton(InstanceOperation.REINSTALL));
  }
  finally {
    put.reset();
  }
}","public IProgressMonitor reinstall(String instanceId) throws IOException {
  String instanceUrl=getInstanceUrl(instanceId);
  JSONObject instance=(JSONObject)doGet(instanceUrl,false);
  HttpPut put=new HttpPut(MessageFormat.format(""String_Node_Str"",instanceUrl));
  try {
    execute(put);
    return new ProgressMonitor(instanceUrl,Collections.singleton(InstanceOperation.REINSTALL),instance.getString(""String_Node_Str""));
  }
  finally {
    put.reset();
  }
}",0.8810679611650486
149413,"public IProgressMonitor shutdown(String instanceId) throws IOException {
  String instanceUrl=getInstanceUrl(instanceId);
  HttpPut put=new HttpPut(MessageFormat.format(""String_Node_Str"",instanceUrl));
  try {
    execute(put);
    return new ProgressMonitor(instanceUrl,SHUTDOWN_OPERATIONS);
  }
  finally {
    put.reset();
  }
}","public IProgressMonitor shutdown(String instanceId) throws IOException {
  String instanceUrl=getInstanceUrl(instanceId);
  JSONObject instance=(JSONObject)doGet(instanceUrl,false);
  HttpPut put=new HttpPut(MessageFormat.format(""String_Node_Str"",instanceUrl));
  try {
    execute(put);
    return new ProgressMonitor(instanceUrl,SHUTDOWN_OPERATIONS,instance.getString(""String_Node_Str""));
  }
  finally {
    put.reset();
  }
}",0.8710526315789474
149414,"private static int collectSlavesToRemove(List<ElasticBoxSlave> slavesToRemove) throws IOException {
  ElasticBoxCloud cloud=ElasticBoxCloud.getInstance();
  Client ebClient=new Client(cloud.getEndpointUrl(),cloud.getUsername(),cloud.getPassword());
  int numOfInstances=0;
  for (  Node node : Jenkins.getInstance().getNodes()) {
    if (node instanceof ElasticBoxSlave && !isSlaveInQueue((ElasticBoxSlave)node,incomingQueue)) {
      final ElasticBoxSlave slave=(ElasticBoxSlave)node;
      if (slave.isSingleUse() && slave.getComputer() != null) {
        boolean remove=true;
        for (        hudson.model.Queue.BuildableItem item : Jenkins.getInstance().getQueue().getBuildableItems(slave.getComputer())) {
          if (!item.getFuture().isCancelled()) {
            remove=false;
            break;
          }
          ;
        }
        if (remove) {
          slavesToRemove.add(slave);
          break;
        }
      }
      if (slave.getInstanceUrl() != null) {
        try {
          JSONObject instance=ebClient.getInstance(slave.getInstanceId());
          String state=instance.getString(""String_Node_Str"");
          if (Client.InstanceState.DONE.equals(state) && Client.TERMINATE_OPERATIONS.contains(instance.getString(""String_Node_Str""))) {
            addToTerminatedQueue(slave);
          }
 else           if (Client.InstanceState.UNAVAILABLE.equals(state) || (slave.canTerminate() && !isSlaveInQueue(slave,submittedQueue))) {
            Logger.getLogger(ElasticBoxSlaveHandler.class.getName()).log(Level.INFO,MessageFormat.format(""String_Node_Str"",slave.getInstanceUrl()));
            slavesToRemove.add(slave);
          }
 else {
            numOfInstances++;
          }
        }
 catch (        ClientException ex) {
          if (ex.getStatusCode() == HttpStatus.SC_NOT_FOUND) {
            slavesToRemove.add(slave);
          }
        }
      }
 else       if (!slave.isInUse()) {
        slavesToRemove.add(slave);
      }
    }
  }
  return numOfInstances;
}","private static int collectSlavesToRemove(List<ElasticBoxSlave> slavesToRemove) throws IOException {
  ElasticBoxCloud cloud=ElasticBoxCloud.getInstance();
  Client ebClient=new Client(cloud.getEndpointUrl(),cloud.getUsername(),cloud.getPassword());
  int numOfInstances=0;
  for (  Node node : Jenkins.getInstance().getNodes()) {
    if (node instanceof ElasticBoxSlave && !isSlaveInQueue((ElasticBoxSlave)node,incomingQueue)) {
      final ElasticBoxSlave slave=(ElasticBoxSlave)node;
      if (slave.isSingleUse() && slave.canTerminate() && slave.getComputer() != null) {
        boolean remove=true;
        for (        hudson.model.Queue.BuildableItem item : Jenkins.getInstance().getQueue().getBuildableItems(slave.getComputer())) {
          if (!item.getFuture().isCancelled()) {
            remove=false;
            break;
          }
          ;
        }
        if (remove) {
          slavesToRemove.add(slave);
          break;
        }
      }
      if (slave.getInstanceUrl() != null) {
        try {
          JSONObject instance=ebClient.getInstance(slave.getInstanceId());
          String state=instance.getString(""String_Node_Str"");
          if (Client.InstanceState.DONE.equals(state) && Client.TERMINATE_OPERATIONS.contains(instance.getString(""String_Node_Str""))) {
            addToTerminatedQueue(slave);
          }
 else           if (Client.InstanceState.UNAVAILABLE.equals(state) || (slave.canTerminate() && !isSlaveInQueue(slave,submittedQueue))) {
            Logger.getLogger(ElasticBoxSlaveHandler.class.getName()).log(Level.INFO,MessageFormat.format(""String_Node_Str"",slave.getInstanceUrl()));
            slavesToRemove.add(slave);
          }
 else {
            numOfInstances++;
          }
        }
 catch (        ClientException ex) {
          if (ex.getStatusCode() == HttpStatus.SC_NOT_FOUND) {
            slavesToRemove.add(slave);
          }
        }
      }
 else       if (!slave.isInUse()) {
        slavesToRemove.add(slave);
      }
    }
  }
  return numOfInstances;
}",0.994044665012407
149415,"public boolean isDone() throws IncompleteException, IOException {
  String state=getState();
  if (state.equals(InstanceState.UNAVAILABLE)) {
    throw new IncompleteException(""String_Node_Str"");
  }
  return state.equals(InstanceState.DONE);
}","public boolean isDone() throws IncompleteException, IOException {
  String state;
  try {
    state=getState();
  }
 catch (  ClientException ex) {
    if (ex.getStatusCode() == HttpStatus.SC_NOT_FOUND) {
      throw new IncompleteException(""String_Node_Str"");
    }
 else {
      throw ex;
    }
  }
  if (state.equals(InstanceState.UNAVAILABLE)) {
    throw new IncompleteException(""String_Node_Str"");
  }
  return state.equals(InstanceState.DONE);
}",0.7011494252873564
149416,"private String getState() throws IOException {
  JSONObject instance=(JSONObject)doGet(instanceUrl,false);
  return instance.getString(""String_Node_Str"");
}","private String getState() throws IOException {
  Client client=new Client(endpointUrl,username,password);
  JSONObject instance=(JSONObject)client.doGet(instanceUrl,false);
  return instance.getString(""String_Node_Str"");
}",0.8253968253968254
149417,"/** 
 * @param states
 * @param timeout in minutes
 * @return the latest state if it is one of the specified states or the timeout elapsed
 * @throws IOException 
 */
private String waitFor(Set<String> states,int timeout) throws IOException {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout * 60000;
  String state=null;
synchronized (waitLock) {
    while (remainingTime > 0 && !states.contains((state=getState()))) {
      try {
        waitLock.wait(1000);
      }
 catch (      InterruptedException ex) {
      }
      long currentTime=System.currentTimeMillis();
      remainingTime=remainingTime - (currentTime - startTime);
      startTime=currentTime;
    }
  }
  return state;
}","/** 
 * @param states
 * @param timeout in minutes
 * @return the latest state if it is one of the specified states or the timeout elapsed
 * @throws IOException 
 */
private String waitFor(Set<String> states,int timeout) throws IOException {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout * 60000;
  String state=null;
  while (remainingTime > 0 && !states.contains((state=getState()))) {
synchronized (waitLock) {
      try {
        waitLock.wait(1000);
      }
 catch (      InterruptedException ex) {
      }
    }
    long currentTime=System.currentTimeMillis();
    remainingTime=remainingTime - (currentTime - startTime);
    startTime=currentTime;
  }
  return state;
}",0.9322990126939352
149418,"@Override public Collection<NodeProvisioner.PlannedNode> provision(Label label,int excessWorkload){
  for (  Node node : Jenkins.getInstance().getNodes()) {
    if (node instanceof ElasticBoxSlave) {
      ElasticBoxSlave slave=(ElasticBoxSlave)node;
      if (ElasticBoxSlaveHandler.isSubmitted(slave)) {
        excessWorkload-=slave.getNumExecutors();
      }
 else       if (label.matches(slave) && slave.getComputer().isOffline() && slave.getInstanceId() != null) {
        try {
          JSONObject instance=slave.getInstance();
          String state=instance.getString(""String_Node_Str"");
          String operation=instance.getString(""String_Node_Str"");
          if (Client.ON_OPERATIONS.contains(operation) && (Client.InstanceState.PROCESSING.equals(state) || Client.InstanceState.DONE.equals(state))) {
            excessWorkload-=slave.getNumExecutors();
          }
        }
 catch (        IOException ex) {
          Logger.getLogger(ElasticBoxCloud.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
        }
      }
    }
  }
  List<NodeProvisioner.PlannedNode> plannedNodes=new ArrayList<NodeProvisioner.PlannedNode>();
  while (excessWorkload > 0) {
    try {
      if (ElasticBoxSlaveHandler.countInstances() >= maxInstances) {
        Logger.getLogger(ElasticBoxCloud.class.getName()).log(Level.WARNING,""String_Node_Str"");
        break;
      }
      String profileId=label.getName().substring(ElasticBoxLabelFinder.REUSE_PREFIX.length());
      final ElasticBoxSlave slave=new ElasticBoxSlave(UUID.randomUUID().toString(),false);
      slave.setProfileId(profileId);
      slave.setCloud(this);
      plannedNodes.add(new NodeProvisioner.PlannedNode(slave.getDisplayName(),Computer.threadPoolForRemoting.submit(new Callable<Node>(){
        public Node call() throws Exception {
          slave.setInUse(true);
          Jenkins.getInstance().addNode(slave);
          IProgressMonitor monitor=ElasticBoxSlaveHandler.submit(slave);
          monitor.waitForDone(ElasticBoxSlaveHandler.TIMEOUT_MINUTES);
          if (slave.getComputer() != null && slave.getComputer().isOnline()) {
            return slave;
          }
 else {
            throw new Exception(MessageFormat.format(""String_Node_Str"",slave.getDisplayName()));
          }
        }
      }
),1));
      excessWorkload-=slave.getNumExecutors();
    }
 catch (    Descriptor.FormException ex) {
      Logger.getLogger(ElasticBoxCloud.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
    }
catch (    IOException ex) {
      Logger.getLogger(ElasticBoxCloud.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
    }
  }
  return plannedNodes;
}","@Override public Collection<NodeProvisioner.PlannedNode> provision(Label label,int excessWorkload){
  for (  Node node : Jenkins.getInstance().getNodes()) {
    if (node instanceof ElasticBoxSlave) {
      ElasticBoxSlave slave=(ElasticBoxSlave)node;
      if (ElasticBoxSlaveHandler.isSubmitted(slave)) {
        excessWorkload-=slave.getNumExecutors();
      }
 else       if (label.matches(slave) && slave.getComputer().isOffline() && slave.getInstanceId() != null) {
        try {
          JSONObject instance=slave.getInstance();
          String state=instance.getString(""String_Node_Str"");
          String operation=instance.getString(""String_Node_Str"");
          if (Client.ON_OPERATIONS.contains(operation) && (Client.InstanceState.PROCESSING.equals(state) || Client.InstanceState.DONE.equals(state))) {
            excessWorkload-=slave.getNumExecutors();
          }
        }
 catch (        IOException ex) {
          Logger.getLogger(ElasticBoxCloud.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
        }
      }
    }
  }
  List<NodeProvisioner.PlannedNode> plannedNodes=new ArrayList<NodeProvisioner.PlannedNode>();
  while (excessWorkload > 0) {
    try {
      if (ElasticBoxSlaveHandler.countInstances() >= maxInstances) {
        Logger.getLogger(ElasticBoxCloud.class.getName()).log(Level.WARNING,""String_Node_Str"");
        break;
      }
      String profileId=label.getName().substring(ElasticBoxLabelFinder.REUSE_PREFIX.length());
      final ElasticBoxSlave slave=new ElasticBoxSlave(profileId,false,this);
      plannedNodes.add(new NodeProvisioner.PlannedNode(slave.getDisplayName(),Computer.threadPoolForRemoting.submit(new Callable<Node>(){
        public Node call() throws Exception {
          slave.setInUse(true);
          Jenkins.getInstance().addNode(slave);
          IProgressMonitor monitor=ElasticBoxSlaveHandler.submit(slave);
          monitor.waitForDone(ElasticBoxSlaveHandler.TIMEOUT_MINUTES);
          if (slave.getComputer() != null && slave.getComputer().isOnline()) {
            return slave;
          }
 else {
            throw new Exception(MessageFormat.format(""String_Node_Str"",slave.getDisplayName()));
          }
        }
      }
),1));
      excessWorkload-=slave.getNumExecutors();
    }
 catch (    Descriptor.FormException ex) {
      Logger.getLogger(ElasticBoxCloud.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
    }
catch (    IOException ex) {
      Logger.getLogger(ElasticBoxCloud.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
    }
  }
  return plannedNodes;
}",0.9813926721657394
149419,"public ElasticBoxSlave(String name,boolean singleUse,String remoteFS,int numExecutors) throws Descriptor.FormException, IOException {
  super(name,""String_Node_Str"",remoteFS,numExecutors,Mode.EXCLUSIVE,""String_Node_Str"",new JNLPLauncher(),RetentionStrategy.INSTANCE);
  this.singleUse=singleUse;
  this.idleStartTime=System.currentTimeMillis();
}","public ElasticBoxSlave(String profileId,boolean singleUse,ElasticBoxCloud cloud) throws Descriptor.FormException, IOException {
  super(UUID.randomUUID().toString(),""String_Node_Str"",getRemoteFS(profileId,cloud),1,Mode.EXCLUSIVE,""String_Node_Str"",new JNLPLauncher(),RetentionStrategy.INSTANCE);
  this.profileId=profileId;
  this.singleUse=singleUse;
  this.idleStartTime=System.currentTimeMillis();
  this.cloud=cloud;
}",0.5788787483702738
149420,"private void wait(Callable<Boolean> condition,long timeout) throws Exception {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout;
synchronized (waitLock) {
    while (remainingTime > 0 && condition.call()) {
      try {
        waitLock.wait(remainingTime);
      }
 catch (      InterruptedException ex) {
      }
      long currentTime=System.currentTimeMillis();
      remainingTime=remainingTime - (currentTime - startTime);
      startTime=currentTime;
    }
  }
}","private void wait(Callable<Boolean> condition,long timeout) throws Exception {
  long startTime=System.currentTimeMillis();
  long remainingTime=timeout;
  while (remainingTime > 0 && condition.call()) {
synchronized (waitLock) {
      try {
        waitLock.wait(remainingTime);
      }
 catch (      InterruptedException ex) {
      }
    }
    long currentTime=System.currentTimeMillis();
    remainingTime=remainingTime - (currentTime - startTime);
    startTime=currentTime;
  }
}",0.9304703476482618
149421,"private void log(Level level,String message,Throwable exception,TaskListener listener){
  listener.getLogger().println(message);
  Logger.getLogger(InstanceCreator.class.getName()).log(level,message,exception);
}","private void log(Level level,String message,Throwable exception,TaskListener listener){
  listener.getLogger().println(message);
  LOGGER.log(level,message,exception);
}",0.8608923884514436
149422,"private int purgeSlaves(TaskListener listener) throws IOException {
  List<ElasticBoxSlave> slavesToRemove=new ArrayList<ElasticBoxSlave>();
  int numOfInstances=collectSlavesToRemove(slavesToRemove);
  for (Iterator<ElasticBoxSlave> iter=terminatedSlaves.iterator(); iter.hasNext(); ) {
    ElasticBoxSlave slave=iter.next();
    try {
      slave.delete();
      iter.remove();
      removeSlave(slave);
    }
 catch (    ClientException ex) {
      if (ex.getStatusCode() != HttpStatus.SC_CONFLICT) {
        log(Level.WARNING,MessageFormat.format(""String_Node_Str"",slave.getDisplayName()),ex,listener);
      }
    }
catch (    IOException ex) {
      log(Level.WARNING,MessageFormat.format(""String_Node_Str"",slave.getDisplayName()),ex,listener);
    }
  }
  for (  ElasticBoxSlave badSlave : slavesToRemove) {
    removeSlave(badSlave);
  }
  return numOfInstances;
}","private int purgeSlaves(TaskListener listener) throws IOException {
  List<ElasticBoxSlave> slavesToRemove=new ArrayList<ElasticBoxSlave>();
  int numOfInstances=collectSlavesToRemove(slavesToRemove);
  for (Iterator<ElasticBoxSlave> iter=terminatedSlaves.iterator(); iter.hasNext(); ) {
    ElasticBoxSlave slave=iter.next();
    try {
      try {
        slave.delete();
      }
 catch (      ClientException ex) {
        if (ex.getStatusCode() == HttpStatus.SC_CONFLICT) {
          continue;
        }
 else         if (ex.getStatusCode() != HttpStatus.SC_NOT_FOUND) {
          throw ex;
        }
      }
      iter.remove();
      removeSlave(slave);
    }
 catch (    IOException ex) {
      log(Level.WARNING,MessageFormat.format(""String_Node_Str"",slave.getDisplayName()),ex,listener);
    }
  }
  for (  ElasticBoxSlave badSlave : slavesToRemove) {
    removeSlave(badSlave);
  }
  return numOfInstances;
}",0.7624371157070989
149423,"public void waitForDone(int timeout) throws IncompleteException, IOException {
  long startTime=System.currentTimeMillis();
  try {
    wait(new Callable<Boolean>(){
      public Boolean call() throws Exception {
        return monitor == null;
      }
    }
,timeout);
  }
 catch (  Exception ex) {
  }
  if (monitor == DONE_MONITOR) {
    return;
  }
  long remainingTime=System.currentTimeMillis() - startTime;
  if (monitor != null && remainingTime > 0) {
    monitor.waitForDone(Math.round(remainingTime / 60000));
  }
  remainingTime=System.currentTimeMillis() - startTime;
  if (remainingTime > 0) {
    try {
      wait(new Callable<Boolean>(){
        public Boolean call() throws Exception {
          return slave.getComputer().isOffline();
        }
      }
,remainingTime);
    }
 catch (    Exception ex) {
    }
  }
}","public void waitForDone(int timeout) throws IncompleteException, IOException {
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  long timeoutMiliseconds=timeout * 60000;
  long remainingTime=timeoutMiliseconds;
  try {
    wait(new Callable<Boolean>(){
      public Boolean call() throws Exception {
        return monitor == null;
      }
    }
,timeoutMiliseconds);
  }
 catch (  Exception ex) {
    LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
  }
  if (monitor == DONE_MONITOR) {
    return;
  }
  remainingTime=remainingTime - stopWatch.getTime();
  if (monitor != null && remainingTime > 0) {
    monitor.waitForDone(Math.round(remainingTime / 60000));
  }
  remainingTime=remainingTime - stopWatch.getTime();
  if (remainingTime > 0) {
    try {
      wait(new Callable<Boolean>(){
        public Boolean call() throws Exception {
          return slave.getComputer().isOffline();
        }
      }
,remainingTime);
    }
 catch (    Exception ex) {
      LOGGER.log(Level.SEVERE,ex.getMessage(),ex);
    }
  }
}",0.7364465915190553
149424,"private void processSubmittedQueue(TaskListener listener){
  boolean saveNeeded=false;
  for (Iterator<InstanceCreationRequest> iter=submittedQueue.iterator(); iter.hasNext(); ) {
    InstanceCreationRequest request=iter.next();
    try {
      if (request.monitor.isDone()) {
        if (request.slave.getComputer().isOnline()) {
          request.slave.setInstanceStatusMessage(MessageFormat.format(""String_Node_Str"",request.slave.getInstancePageUrl()));
          saveNeeded=true;
          iter.remove();
        }
 else         if ((System.currentTimeMillis() - request.monitor.getCreationTime()) >= TIMEOUT) {
          request.slave.setInUse(false);
          iter.remove();
          log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",request.slave.getNodeName(),TIMEOUT_MINUTES),null,listener);
        }
      }
    }
 catch (    IProgressMonitor.IncompleteException ex) {
      log(Level.SEVERE,ex.getMessage(),ex,listener);
    }
catch (    IOException ex) {
      log(Level.SEVERE,ex.getMessage(),ex,listener);
    }
  }
  if (saveNeeded) {
    try {
      Jenkins.getInstance().save();
    }
 catch (    IOException ex) {
      Logger.getLogger(ElasticBoxSlaveHandler.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}","private void processSubmittedQueue(TaskListener listener){
  boolean saveNeeded=false;
  for (Iterator<InstanceCreationRequest> iter=submittedQueue.iterator(); iter.hasNext(); ) {
    InstanceCreationRequest request=iter.next();
    try {
      if (request.monitor.isDone()) {
        if (request.slave.getComputer().isOnline()) {
          request.slave.setInstanceStatusMessage(MessageFormat.format(""String_Node_Str"",request.slave.getInstancePageUrl()));
          saveNeeded=true;
          iter.remove();
        }
 else         if ((System.currentTimeMillis() - request.monitor.getCreationTime()) >= TIMEOUT) {
          request.slave.setInUse(false);
          iter.remove();
          log(Level.SEVERE,MessageFormat.format(""String_Node_Str"",request.slave.getNodeName(),TIMEOUT_MINUTES),null,listener);
        }
      }
    }
 catch (    IProgressMonitor.IncompleteException ex) {
      log(Level.SEVERE,ex.getMessage(),ex,listener);
      iter.remove();
    }
catch (    IOException ex) {
      log(Level.SEVERE,ex.getMessage(),ex,listener);
    }
  }
  if (saveNeeded) {
    try {
      Jenkins.getInstance().save();
    }
 catch (    IOException ex) {
      Logger.getLogger(ElasticBoxSlaveHandler.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}",0.99170288423548
149425,"@Override public boolean shouldSchedule(Queue.Task p,List<Action> actions){
  if (p instanceof AbstractProject && p instanceof Project) {
    AbstractProject project=(AbstractProject)p;
    InstanceCreator instanceCreator=null;
    boolean singleUse=false;
    for (    Object buildWrapper : ((Project)p).getBuildWrappers().values()) {
      if (buildWrapper instanceof InstanceCreator) {
        instanceCreator=(InstanceCreator)buildWrapper;
      }
 else       if (buildWrapper instanceof SingleUseSlaveBuildOption) {
        singleUse=true;
      }
      if (instanceCreator != null && singleUse) {
        break;
      }
    }
    if (instanceCreator != null) {
      Queue.Item queueItem=Queue.getInstance().getItem(p);
      if (queueItem != null && queueItem.getAssignedLabel() != null) {
        return false;
      }
      LabelAtom label=ElasticBoxLabelFinder.getLabel(instanceCreator.getProfile(),singleUse);
      if (singleUse) {
        try {
          ElasticBoxSlave slave=new ElasticBoxSlave(UUID.randomUUID().toString(),singleUse);
          slave.setProfileId(instanceCreator.getProfile());
          slave.setCloud(ElasticBoxCloud.getInstance());
          slave.setInUse(true);
          Jenkins.getInstance().addNode(slave);
          ElasticBoxSlaveHandler.submit(slave);
        }
 catch (        Descriptor.FormException ex) {
          Logger.getLogger(InstanceCreationQueueDecisionHandler.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
        }
catch (        IOException ex) {
          Logger.getLogger(InstanceCreationQueueDecisionHandler.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
        }
      }
      try {
        project.setAssignedLabel(label);
      }
 catch (      IOException ex) {
        Logger.getLogger(InstanceCreationQueueDecisionHandler.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
      }
    }
  }
  return true;
}","@Override public boolean shouldSchedule(Queue.Task p,List<Action> actions){
  if (p instanceof AbstractProject && p instanceof Project) {
    AbstractProject project=(AbstractProject)p;
    InstanceCreator instanceCreator=null;
    boolean singleUse=false;
    for (    Object buildWrapper : ((Project)p).getBuildWrappers().values()) {
      if (buildWrapper instanceof InstanceCreator) {
        instanceCreator=(InstanceCreator)buildWrapper;
      }
 else       if (buildWrapper instanceof SingleUseSlaveBuildOption) {
        singleUse=true;
      }
      if (instanceCreator != null && singleUse) {
        break;
      }
    }
    if (instanceCreator != null) {
      Queue.Item queueItem=Queue.getInstance().getItem(p);
      if (queueItem != null && queueItem.getAssignedLabel() != null) {
        return false;
      }
      LabelAtom label=ElasticBoxLabelFinder.getLabel(instanceCreator.getProfile(),singleUse);
      if (singleUse) {
        try {
          ElasticBoxSlave slave=new ElasticBoxSlave(instanceCreator.getProfile(),singleUse,ElasticBoxCloud.getInstance());
          slave.setInUse(true);
          Jenkins.getInstance().addNode(slave);
          ElasticBoxSlaveHandler.submit(slave);
        }
 catch (        Descriptor.FormException ex) {
          Logger.getLogger(InstanceCreationQueueDecisionHandler.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
        }
catch (        IOException ex) {
          Logger.getLogger(InstanceCreationQueueDecisionHandler.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
        }
      }
      try {
        project.setAssignedLabel(label);
      }
 catch (      IOException ex) {
        Logger.getLogger(InstanceCreationQueueDecisionHandler.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
      }
    }
  }
  return true;
}",0.956545209176788
149426,"@Override protected void doTunnel(HttpServletRequest req,final HttpServletResponse res){
  String destination=res.getHeader(""String_Node_Str"");
  int c=0;
  if (destination == null || (c=destination.indexOf(""String_Node_Str"")) < 0) {
    try {
      res.sendError(HttpServletResponse.SC_BAD_REQUEST);
    }
 catch (    IOException e) {
    }
    return;
  }
  int port=Numbers.parseInt(destination.substring(c + 1));
  String host=destination.substring(0,c);
  Socket socket=null;
  try {
    socket=new Socket(host,port);
    socket.setSoTimeout(DEFAULT_TIMEOUT);
  }
 catch (  IOException e) {
    try {
      res.sendError(HttpServletResponse.SC_BAD_GATEWAY);
    }
 catch (    IOException e1) {
      return;
    }
  }
  final Socket socket_=socket;
  executor.execute(new Runnable(){
    @Override public void run(){
      try {
        onRecvRemote(socket_.getInputStream(),res.getOutputStream());
      }
 catch (      IOException e) {
      }
      closeSocket(socket_);
    }
  }
);
  InputStream in=null;
  try {
    in=req.getInputStream();
    ins.add(in);
    onRecvClient(in,socket.getOutputStream());
  }
 catch (  IOException e) {
  }
 finally {
    if (in != null) {
      ins.remove(in);
    }
  }
  closeSocket(socket);
}","@Override protected void doTunnel(HttpServletRequest req,final HttpServletResponse res){
  String destination=req.getHeader(""String_Node_Str"");
  int c=0;
  if (destination == null || (c=destination.indexOf(""String_Node_Str"")) < 0) {
    try {
      res.sendError(HttpServletResponse.SC_BAD_REQUEST);
    }
 catch (    IOException e) {
    }
    return;
  }
  int port=Numbers.parseInt(destination.substring(c + 1));
  String host=destination.substring(0,c);
  Socket socket=null;
  try {
    socket=new Socket(host,port);
    socket.setSoTimeout(DEFAULT_TIMEOUT);
  }
 catch (  IOException e) {
    try {
      res.sendError(HttpServletResponse.SC_BAD_GATEWAY);
    }
 catch (    IOException e1) {
      return;
    }
  }
  final Socket socket_=socket;
  executor.execute(new Runnable(){
    @Override public void run(){
      try {
        onRecvRemote(socket_.getInputStream(),res.getOutputStream());
      }
 catch (      IOException e) {
      }
      closeSocket(socket_);
    }
  }
);
  InputStream in=null;
  try {
    in=req.getInputStream();
    ins.add(in);
    onRecvClient(in,socket.getOutputStream());
  }
 catch (  IOException e) {
  }
 finally {
    if (in != null) {
      ins.remove(in);
    }
  }
  closeSocket(socket);
}",0.9991935483870968
149427,"public static boolean handleShutdown(Class<?> clazz,String[] args,final AtomicBoolean running){
  if (args != null && args.length > 0 && args[0].equals(""String_Node_Str"")) {
    running.set(false);
    return true;
  }
  SignalHandler handler=new SignalHandler(){
    @Override public void handle(    Signal signal){
    }
  }
;
  String command=System.getProperty(""String_Node_Str"");
  if (command == null || command.isEmpty()) {
    return false;
  }
  if (clazz.getName().equals(command.split(""String_Node_Str"")[0])) {
    Signal.handle(new Signal(""String_Node_Str""),handler);
    Signal.handle(new Signal(""String_Node_Str""),handler);
  }
  return false;
}","public static boolean handleShutdown(Class<?> clazz,String[] args,final AtomicBoolean running){
  if (args != null && args.length > 0 && args[0].equals(""String_Node_Str"")) {
    running.set(false);
    return true;
  }
  SignalHandler handler=new SignalHandler(){
    @Override public void handle(    Signal signal){
      running.set(false);
    }
  }
;
  String command=System.getProperty(""String_Node_Str"");
  if (command == null || command.isEmpty()) {
    return false;
  }
  if (clazz.getName().equals(command.split(""String_Node_Str"")[0])) {
    Signal.handle(new Signal(""String_Node_Str""),handler);
    Signal.handle(new Signal(""String_Node_Str""),handler);
  }
  return false;
}",0.980654761904762
149428,"@Override public void handle(Signal signal){
}","@Override public void handle(Signal signal){
  running.set(false);
}",0.8070175438596491
149429,"private static void connect(final Socket socket){
  try (Socket socket_=sf.createSocket(host,port);InputStream is=new BufferedInputStream(socket_.getInputStream());OutputStream os=socket_.getOutputStream()){
    String header=null;
    if (AUTH == null) {
      header=String.format(NO_AUTH_HEADER,path,host,port,destination);
    }
 else {
      header=String.format(path,host,port,destination,new String(Base64.encodeBase64(AUTH.getBytes())));
    }
    os.write(header.getBytes());
    HashMap<String,String> headers=Headers.generateHeaders(is);
    Headers.checkHeaders(headers);
    Executors.execute(new Runnable(){
      @Override public void run(){
        try {
          onRecvLocal(socket.getInputStream(),os);
        }
 catch (        IOException e) {
        }
      }
    }
);
    if (""String_Node_Str"".equals(headers.get(""String_Node_Str""))) {
      onRecvRemoteChunked(is,os);
    }
 else {
      onRecvRemote(is,os);
    }
  }
 catch (  IOException e) {
  }
}","private static void connect(final Socket socket){
  try (Socket socket_=sf.createSocket(host,port);InputStream is=new BufferedInputStream(socket_.getInputStream());OutputStream os=socket_.getOutputStream()){
    String header=null;
    if (AUTH == null) {
      header=String.format(NO_AUTH_HEADER,path,host,""String_Node_Str"" + port,destination);
    }
 else {
      header=String.format(path,host,""String_Node_Str"" + port,destination,new String(Base64.encodeBase64(AUTH.getBytes())));
    }
    os.write(header.getBytes());
    HashMap<String,String> headers=Headers.generateHeaders(is);
    Headers.checkHeaders(headers);
    Executors.execute(new Runnable(){
      @Override public void run(){
        try {
          onRecvLocal(socket.getInputStream(),os);
        }
 catch (        IOException e) {
        }
      }
    }
);
    if (""String_Node_Str"".equals(headers.get(""String_Node_Str""))) {
      onRecvRemoteChunked(is,socket.getOutputStream());
    }
 else {
      onRecvRemote(is,socket.getOutputStream());
    }
  }
 catch (  IOException e) {
  }
  close(socket);
}",0.9469586374695864
149430,"public static void init(final int measurements,final String[] events,int... options){
  if (defaultEventSet != -1) {
    Measurement.destroyEventSet(defaultEventSet);
  }
  defaultEventSet=Measurement.createEventSet(measurements,events,options);
}","public static void init(final int measurements,final String[] events,int... options){
  if (defaultEventSet != -1) {
    Measurement.destroyEventSet(defaultEventSet);
    defaultEventSet=-1;
  }
  defaultEventSet=Measurement.createEventSet(measurements,events,options);
}",0.9536679536679536
149431,"public void addDataRow(long[] row){
  data.add(row);
}","void addDataRow(long[] row){
  long copy[]=new long[row.length];
  for (int i=0; i < row.length; i++) {
    copy[i]=row[i];
  }
  data.add(copy);
}",0.4477611940298507
149432,"@RequestMapping(method=RequestMethod.POST) public String handleCreateGroup(@Valid @ModelAttribute(MODEL) CreateUserCommand command,BindingResult bindingResult){
  final RedirectBuilder redirect=new RedirectBuilder().setPath(CONTROLLER_PATH);
  try {
    if (!bindingResult.hasErrors()) {
      command.setActive(defaultActive);
      User createdUser=userService.createUser(command.getAsUser());
      redirect.setPath(EditUserController.CONTROLLER_PATH);
      redirect.addParameter(""String_Node_Str"",createdUser.getId());
      return redirect.build();
    }
  }
 catch (  SCIMDataValidationException e) {
    LOG.warn(""String_Node_Str"",e);
  }
catch (  ConflictException e) {
    LOG.warn(""String_Node_Str"",e);
  }
  storeInSession(SESSION_KEY_COMMAND,command);
  storeBindingResultIntoSession(bindingResult,MODEL);
  return redirect.build();
}","@RequestMapping(method=RequestMethod.POST) public String handleCreateGroup(@Valid @ModelAttribute(MODEL) CreateUserCommand command,BindingResult bindingResult){
  final RedirectBuilder redirect=new RedirectBuilder().setPath(CONTROLLER_PATH);
  try {
    if (!bindingResult.hasErrors()) {
      command.setActive(defaultActive);
      User createdUser=userService.createUser(command.getAsUser());
      redirect.setPath(EditUserController.CONTROLLER_PATH);
      redirect.addParameter(""String_Node_Str"",createdUser.getId());
      return redirect.build();
    }
  }
 catch (  SCIMDataValidationException e) {
    LOG.warn(""String_Node_Str"",e);
  }
catch (  ConflictException e) {
    LOG.warn(""String_Node_Str"",e);
  }
  storeInSession(SESSION_KEY_COMMAND,command);
  storeBindingResultIntoSession(bindingResult,MODEL);
  redirect.addParameter(REQUEST_PARAMETER_ERROR,""String_Node_Str"");
  return redirect.build();
}",0.9614074914869466
149433,"@Test public void createUser(){
  User newUser=new User.Builder(""String_Node_Str"").build();
  toTestSpy.createUser(newUser);
  verify(connector,times(1)).createUser(eq(newUser),same(accessToken));
}","@Test public void createUser(){
  User newUser=new User.Builder(""String_Node_Str"").build();
  toTestSpy.createUser(newUser);
  verify(connector,times(1)).createUser(same(newUser),same(accessToken));
}",0.984924623115578
149434,"@RequestMapping(method=RequestMethod.POST) public String handleCreateGroup(@Valid @ModelAttribute(MODEL) CreateGroupCommand command,BindingResult bindingResult){
  final RedirectBuilder redirect=new RedirectBuilder().setPath(CONTROLLER_PATH);
  try {
    if (!bindingResult.hasErrors()) {
      groupService.createGroup(command.getAsGroup());
      redirect.addParameter(""String_Node_Str"",true);
      redirect.setPath(GroupViewController.CONTROLLER_PATH);
      return redirect.build();
    }
  }
 catch (  SCIMDataValidationException e) {
    LOG.warn(""String_Node_Str"",e);
  }
  storeInSession(SESSION_KEY_COMMAND,command);
  storeBindingResultIntoSession(bindingResult,MODEL);
  redirect.addParameter(REQUEST_PARAMETER_ERROR,""String_Node_Str"");
  return redirect.build();
}","@RequestMapping(method=RequestMethod.POST) public String handleCreateGroup(@Valid @ModelAttribute(MODEL) CreateGroupCommand command,BindingResult bindingResult){
  final RedirectBuilder redirect=new RedirectBuilder().setPath(CONTROLLER_PATH);
  try {
    if (!bindingResult.hasErrors()) {
      groupService.createGroup(command.getAsGroup());
      redirect.addParameter(""String_Node_Str"",true);
      redirect.setPath(GroupViewController.CONTROLLER_PATH);
      return redirect.build();
    }
  }
 catch (  SCIMDataValidationException e) {
    LOG.warn(""String_Node_Str"",e);
  }
catch (  ConflictException e) {
    LOG.warn(""String_Node_Str"",e);
  }
  storeInSession(SESSION_KEY_COMMAND,command);
  storeBindingResultIntoSession(bindingResult,MODEL);
  redirect.addParameter(REQUEST_PARAMETER_ERROR,""String_Node_Str"");
  return redirect.build();
}",0.9563076923076924
149435,"/** 
 * Returns a SCIM   {@link UpdateGroup} based on this command.
 * @return the requested {@link UpdateGroup}
 */
public UpdateGroup getAsUpdateGroup(){
  UpdateGroup.Builder builder=new UpdateGroup.Builder();
  builder.updateDisplayName(getDisplayName());
  builder.updateExternalId(getExternalId());
  builder.deleteMembers();
  for (  String member : memberIds) {
    builder.addMember(member);
  }
  return builder.build();
}","/** 
 * Returns a SCIM   {@link UpdateGroup} based on this command.
 * @return the requested {@link UpdateGroup}
 */
public UpdateGroup getAsUpdateGroup(){
  UpdateGroup.Builder builder=new UpdateGroup.Builder();
  builder.updateDisplayName(getDisplayName());
  if (getExternalId() != null && getExternalId().equals(""String_Node_Str"")) {
    builder.deleteExternalId();
  }
 else {
    builder.updateExternalId(getExternalId());
  }
  builder.deleteMembers();
  for (  String member : memberIds) {
    builder.addMember(member);
  }
  return builder.build();
}",0.8387096774193549
149436,"protected void restoreBindingResultFromSession(String modelName,ModelAndView model){
  model.addObject(SPRING_BR_PREFIX + modelName,restoreBindingResultFromSession(modelName));
}","protected Object restoreBindingResultFromSession(String modelName){
  return restoreFromSession(generateKey(modelName));
}",0.6666666666666666
149437,"@RequestMapping(method=RequestMethod.GET,params=REQUEST_PARAMETER_ERROR + ""String_Node_Str"") public ModelAndView handleUserEditFailure(@RequestParam(value=REQUEST_PARAMETER_ID) final String id){
  ModelAndView modelAndView=new ModelAndView(""String_Node_Str"");
  modelAndView.addObject(MODEL,restoreFromSession(SESSION_KEY_COMMAND));
  restoreBindingResultFromSession(MODEL,modelAndView);
  return modelAndView;
}","@RequestMapping(method=RequestMethod.GET,params=REQUEST_PARAMETER_ERROR + ""String_Node_Str"") public ModelAndView handleUserEditFailure(@RequestParam(value=REQUEST_PARAMETER_ID) final String id){
  ModelAndView modelAndView=new ModelAndView(""String_Node_Str"");
  modelAndView.addObject(MODEL,restoreFromSession(SESSION_KEY_COMMAND));
  enrichBindingResultFromSession(MODEL,modelAndView);
  return modelAndView;
}",0.9842041312272176
149438,"/** 
 * Replace a user based on the given   {@link User}.
 * @param id the user ID
 * @param User the  {@link User}
 */
public void replaceUser(String id,User newUser){
  connector.replaceUser(id,newUser,sessionData.getAccesstoken());
  connector.revokeAllAccessTokens(id,sessionData.getAccesstoken());
}","/** 
 * Replace a user based on the given   {@link User} and revoke his access token.
 * @param id the user ID
 * @param User the  {@link User}
 */
public void replaceUser(String id,User newUser){
  connector.replaceUser(id,newUser,sessionData.getAccesstoken());
  connector.revokeAllAccessTokens(id,sessionData.getAccesstoken());
}",0.9559748427672956
149439,"private void configurePagingLinks(PagingLinks pagingList){
  List<String> urls=new ArrayList<String>();
  for (long i=0; i < total; i+=limit) {
    UriBuilder builder=UriBuilder.fromUri(baseUrl).queryParam(offsetParameter,startIndex + i).queryParam(limitParameter,limit);
    for (    String curKey : parameters.keySet()) {
      Object[] value=parameters.get(curKey);
      if (value != null && value.length > 0) {
        builder.queryParam(curKey,value);
      }
    }
    urls.add(builder.toString());
    if (i + startIndex == offset) {
      pagingList.setCurLink(builder.toString());
    }
  }
  if (pagingList.getCurLink() == null) {
    pagingList.setCurLink(urls.get(urls.size() - 1));
  }
  pagingList.setLinks(urls);
}","private void configurePagingLinks(PagingLinks pagingList){
  List<String> urls=new ArrayList<String>();
  for (long i=0; i < total; i+=limit) {
    UriBuilder builder=buildUri(i);
    urls.add(builder.toString());
    if (i + startIndex == offset) {
      pagingList.setCurLink(builder.toString());
    }
  }
  if (urls.isEmpty()) {
    urls.add(buildUri(0).toString());
  }
  if (pagingList.getCurLink() == null) {
    pagingList.setCurLink(urls.get(urls.size() - 1));
  }
  pagingList.setLinks(urls);
}",0.3192868719611021
149440,"@Override protected void doTunnel(HttpServletRequest req,final HttpServletResponse res){
  String destination=res.getHeader(""String_Node_Str"");
  int c=0;
  if (destination == null || (c=destination.indexOf(""String_Node_Str"")) < 0) {
    try {
      res.sendError(HttpServletResponse.SC_BAD_REQUEST);
    }
 catch (    IOException e) {
    }
    return;
  }
  int port=Numbers.parseInt(destination.substring(c + 1));
  String host=destination.substring(0,c);
  Socket socket=null;
  try {
    socket=new Socket(host,port);
    socket.setSoTimeout(DEFAULT_TIMEOUT);
  }
 catch (  IOException e) {
    try {
      res.sendError(HttpServletResponse.SC_BAD_GATEWAY);
    }
 catch (    IOException e1) {
      return;
    }
  }
  final Socket socket_=socket;
  executor.execute(new Runnable(){
    @Override public void run(){
      try {
        onRecvRemote(socket_.getInputStream(),res.getOutputStream());
      }
 catch (      IOException e) {
      }
      closeSocket(socket_);
    }
  }
);
  InputStream in=null;
  try {
    in=req.getInputStream();
    ins.add(in);
    onRecvClient(in,socket.getOutputStream());
  }
 catch (  IOException e) {
  }
 finally {
    if (in != null) {
      ins.remove(in);
    }
  }
  closeSocket(socket);
}","@Override protected void doTunnel(HttpServletRequest req,final HttpServletResponse res){
  String destination=req.getHeader(""String_Node_Str"");
  int c=0;
  if (destination == null || (c=destination.indexOf(""String_Node_Str"")) < 0) {
    try {
      res.sendError(HttpServletResponse.SC_BAD_REQUEST);
    }
 catch (    IOException e) {
    }
    return;
  }
  int port=Numbers.parseInt(destination.substring(c + 1));
  String host=destination.substring(0,c);
  Socket socket=null;
  try {
    socket=new Socket(host,port);
    socket.setSoTimeout(DEFAULT_TIMEOUT);
  }
 catch (  IOException e) {
    try {
      res.sendError(HttpServletResponse.SC_BAD_GATEWAY);
    }
 catch (    IOException e1) {
      return;
    }
  }
  final Socket socket_=socket;
  executor.execute(new Runnable(){
    @Override public void run(){
      try {
        onRecvRemote(socket_.getInputStream(),res.getOutputStream());
      }
 catch (      IOException e) {
      }
      closeSocket(socket_);
    }
  }
);
  InputStream in=null;
  try {
    in=req.getInputStream();
    ins.add(in);
    onRecvClient(in,socket.getOutputStream());
  }
 catch (  IOException e) {
  }
 finally {
    if (in != null) {
      ins.remove(in);
    }
  }
  closeSocket(socket);
}",0.9991935483870968
149441,"public static boolean handleShutdown(Class<?> clazz,String[] args,final AtomicBoolean running){
  if (args != null && args.length > 0 && args[0].equals(""String_Node_Str"")) {
    running.set(false);
    return true;
  }
  SignalHandler handler=new SignalHandler(){
    @Override public void handle(    Signal signal){
    }
  }
;
  String command=System.getProperty(""String_Node_Str"");
  if (command == null || command.isEmpty()) {
    return false;
  }
  if (clazz.getName().equals(command.split(""String_Node_Str"")[0])) {
    Signal.handle(new Signal(""String_Node_Str""),handler);
    Signal.handle(new Signal(""String_Node_Str""),handler);
  }
  return false;
}","public static boolean handleShutdown(Class<?> clazz,String[] args,final AtomicBoolean running){
  if (args != null && args.length > 0 && args[0].equals(""String_Node_Str"")) {
    running.set(false);
    return true;
  }
  SignalHandler handler=new SignalHandler(){
    @Override public void handle(    Signal signal){
      running.set(false);
    }
  }
;
  String command=System.getProperty(""String_Node_Str"");
  if (command == null || command.isEmpty()) {
    return false;
  }
  if (clazz.getName().equals(command.split(""String_Node_Str"")[0])) {
    Signal.handle(new Signal(""String_Node_Str""),handler);
    Signal.handle(new Signal(""String_Node_Str""),handler);
  }
  return false;
}",0.980654761904762
149442,"@Override public void handle(Signal signal){
}","@Override public void handle(Signal signal){
  running.set(false);
}",0.8070175438596491
149443,"private static void connect(final Socket socket){
  try (Socket socket_=sf.createSocket(host,port);InputStream is=new BufferedInputStream(socket_.getInputStream());OutputStream os=socket_.getOutputStream()){
    String header=null;
    if (AUTH == null) {
      header=String.format(NO_AUTH_HEADER,path,host,port,destination);
    }
 else {
      header=String.format(path,host,port,destination,new String(Base64.encodeBase64(AUTH.getBytes())));
    }
    os.write(header.getBytes());
    HashMap<String,String> headers=Headers.generateHeaders(is);
    Headers.checkHeaders(headers);
    Executors.execute(new Runnable(){
      @Override public void run(){
        try {
          onRecvLocal(socket.getInputStream(),os);
        }
 catch (        IOException e) {
        }
      }
    }
);
    if (""String_Node_Str"".equals(headers.get(""String_Node_Str""))) {
      onRecvRemoteChunked(is,os);
    }
 else {
      onRecvRemote(is,os);
    }
  }
 catch (  IOException e) {
  }
}","private static void connect(final Socket socket){
  try (Socket socket_=sf.createSocket(host,port);InputStream is=new BufferedInputStream(socket_.getInputStream());OutputStream os=socket_.getOutputStream()){
    String header=null;
    if (AUTH == null) {
      header=String.format(NO_AUTH_HEADER,path,host,""String_Node_Str"" + port,destination);
    }
 else {
      header=String.format(path,host,""String_Node_Str"" + port,destination,new String(Base64.encodeBase64(AUTH.getBytes())));
    }
    os.write(header.getBytes());
    HashMap<String,String> headers=Headers.generateHeaders(is);
    Headers.checkHeaders(headers);
    Executors.execute(new Runnable(){
      @Override public void run(){
        try {
          onRecvLocal(socket.getInputStream(),os);
        }
 catch (        IOException e) {
        }
      }
    }
);
    if (""String_Node_Str"".equals(headers.get(""String_Node_Str""))) {
      onRecvRemoteChunked(is,socket.getOutputStream());
    }
 else {
      onRecvRemote(is,socket.getOutputStream());
    }
  }
 catch (  IOException e) {
  }
  close(socket);
}",0.9469586374695864
149444,"public static void init(final int measurements,final String[] events,int... options){
  if (defaultEventSet != -1) {
    Measurement.destroyEventSet(defaultEventSet);
  }
  defaultEventSet=Measurement.createEventSet(measurements,events,options);
}","public static void init(final int measurements,final String[] events,int... options){
  if (defaultEventSet != -1) {
    Measurement.destroyEventSet(defaultEventSet);
    defaultEventSet=-1;
  }
  defaultEventSet=Measurement.createEventSet(measurements,events,options);
}",0.9536679536679536
149445,"public void addDataRow(long[] row){
  data.add(row);
}","void addDataRow(long[] row){
  long copy[]=new long[row.length];
  for (int i=0; i < row.length; i++) {
    copy[i]=row[i];
  }
  data.add(copy);
}",0.4477611940298507
149446,"@Override public LabelledItem next(){
  index++;
  return new LabelledItem(testingSet[_class][index - 1],_class);
}","@Override public LabelledItem next(){
  index++;
  return new LabelledItem(trainingSet[_class][index - 1],_class);
}",0.9696969696969696
149447,"@Override public boolean hasNext(){
  return index < testingSet[_class].length;
}","@Override public boolean hasNext(){
  return index < trainingSet[_class].length;
}",0.9570552147239264
149448,"@Override public double validate(double[] inputVector,RestrictedBoltzmannMachine machine){
  double distributiveError=0.0;
  for (int i=0; i < iterations; i++) {
    distributiveError+=machine.calcError(inputVector,inputVector);
  }
  distributiveError/=iterations;
  return distributiveError;
}","@Override public double validate(double[] inputVector,RestrictedBoltzmannMachine machine){
  double distributiveError=0.0;
  double[] values=new double[inputVector.length];
  for (int i=0; i < iterations; i++) {
    machine.calculateNetwork(inputVector);
    double[] tmp=machine.getVisibleNeurons();
    for (int j=0; j < tmp.length; j++) {
      values[j]+=tmp[j];
    }
  }
  for (int i=0; i < values.length; i++) {
    values[i]/=iterations;
  }
  return Utilities.calcError(inputVector,values);
}",0.4648241206030151
149449,"@Override public void trainNetwork(double[] targetValues){
  double[] fullTargetValues=new double[networkChimney.getSizeOfOutputVector() + sizeOfOutputVector];
  System.arraycopy(transformedInput,0,fullTargetValues,0,transformedInput.length);
  System.arraycopy(targetValues,0,fullTargetValues,transformedInput.length,targetValues.length);
  super.trainMachine(fullTargetValues);
}","@Override public void trainNetwork(double[] targetValues){
  double[] fullTargetValues=new double[networkChimney.getSizeOfOutputVector() + sizeOfOutputVector];
  System.arraycopy(transformedInput,0,fullTargetValues,0,transformedInput.length);
  System.arraycopy(targetValues,0,fullTargetValues,transformedInput.length,sizeOfOutputVector);
  super.trainMachine(fullTargetValues);
}",0.8488830486202366
149450,"private void nullOutputPartOfVector(){
  for (int i=this.getSizeOfInputVector() - 1; i >= this.getSizeOfInputVector() - sizeOfOutputVector; i--) {
    visibleNeurons[i]=0.0;
  }
}","private void nullOutputPartOfVector(){
  for (int i=networkChimney.getSizeOfOutputVector(), j=0; i < visibleNeurons.length; i++, j++) {
    visibleNeurons[i]=0.0;
    temporaryOutputValues[j]=0.0;
  }
}",0.4986876640419947
149451,"@Override public boolean onBlockActivated(World par1,int par2,int par3,int par4,EntityPlayer par5,int par6,float par7,float par8,float par9){
  int meta=par1.getBlockMetadata(par2,par3,par4);
  if (par5.isSneaking() && !this.ignoreRightClick[meta]) {
    return false;
  }
  if (this.ItemNoRightClick[meta]) {
    return false;
  }
  if (!par1.isRemote) {
    int guiID=getGuiIDForMeta(meta);
    if (guiID != -1) {
      SpmodMod mod=getModInstance(meta);
      if (mod == null) {
        mod=SpmodAPI.instance;
      }
      par5.openGui(mod,guiID,par1,par2,par3,par4);
      return true;
    }
  }
  return false;
}","@Override public boolean onBlockActivated(World par1,int par2,int par3,int par4,EntityPlayer par5,int par6,float par7,float par8,float par9){
  int meta=par1.getBlockMetadata(par2,par3,par4);
  if (par5.isSneaking() && !this.ignoreRightClick[meta]) {
    return false;
  }
  if (this.ItemNoRightClick[meta]) {
    return false;
  }
  int guiID=getGuiIDForMeta(meta);
  if (guiID != -1) {
    SpmodMod mod=getModInstance(meta);
    if (mod == null) {
      mod=SpmodAPI.instance;
    }
    par5.openGui(mod,guiID,par1,par2,par3,par4);
    return true;
  }
  return false;
}",0.9159663865546218
149452,"@Override public int getRenderType(){
  return requiresRender() ? RenderHelper.getGlobalRenderID() : 0;
}","@Override public int getRenderType(){
  return requiresRender() ? SpmodAPI.core.getRenderID() : 0;
}",0.8585365853658536
149453,"@Override @SideOnly(Side.CLIENT) public GuiInventoryCore getGui(InventoryPlayer par1){
  if (guiClass != null) {
    try {
      return guiClass.getConstructor(InventoryPlayer.class,AdvTile.class).newInstance(par1,this);
    }
 catch (    Exception e) {
    }
  }
  return super.getGui(par1);
}","@Override @SideOnly(Side.CLIENT) public GuiInventoryCore getGui(InventoryPlayer par1){
  if (guiClass != null) {
    try {
      return guiClass.getConstructor(InventoryPlayer.class,AdvTile.class).newInstance(par1,this).setAutoDrawing();
    }
 catch (    Exception e) {
    }
  }
  return super.getGui(par1);
}",0.971900826446281
149454,"public int getCurrentID(){
  if (Item.itemsList[ID + 256] != null) {
    int end=ID + 256;
    throw new IndexOutOfBoundsException(""String_Node_Str"" + end);
  }
  return ID;
}","public int getCurrentID(){
  if (Item.itemsList[ID + 256] != null) {
    int end=ID + 256;
    throw new IndexOutOfBoundsException(""String_Node_Str"" + end + ""String_Node_Str""+ Item.itemsList[ID + 256].getUnlocalizedName());
  }
  return ID;
}",0.8393285371702638
149455,"@ForgeSubscribe public void onDeath(LivingDeathEvent evt){
  EntityLivingBase entity=evt.entityLiving;
  if (entity != null && !entity.worldObj.isRemote) {
    if (entity instanceof EntityMob) {
      EntityMob mob=(EntityMob)entity;
      ArrayList<TileEntity> tiles=WorldReading.getTileWithAABB((int)mob.posX,(int)mob.posY,(int)mob.posZ,mob.worldObj,10,APIBlocks.blockUtils.blockID,1);
      for (      TileEntity tile : tiles) {
        if (tile != null && tile instanceof IExpProvider) {
          IExpProvider pro=(IExpProvider)tile;
          if (pro.absorbDeath()) {
            pro.addExp(mob.experienceValue);
          }
        }
      }
    }
    if (entity instanceof EntityAgeable) {
      EntityAgeable age=(EntityAgeable)entity;
      AnimalChunkLoader.onEntityDeath(age);
      if (gas.isValidEntity(age) && rand.nextInt(3) == 0) {
        IEntityGasInfo gasInfo=gas.getGasInfo(age.getClass());
        int min=gasInfo.getMinProducingGas(age);
        int max=gasInfo.getMaxProducingGas(age);
        if (max > 0 && max <= 10) {
          int newMax=Math.max(min,rand.nextInt(max + 1));
          int x=(int)age.posX;
          int y=(int)age.posY;
          int z=(int)age.posZ;
          if (newMax > 0 && age.worldObj.getBlockId(x,y + 1,z) == 0) {
            age.worldObj.setBlock(x,y + 1,z,APIBlocks.animalGas.blockID,newMax,3);
          }
        }
      }
    }
  }
}","@ForgeSubscribe public void onDeath(LivingDeathEvent evt){
  EntityLivingBase entity=evt.entityLiving;
  if (entity != null && !entity.worldObj.isRemote) {
    if (entity instanceof EntityMob) {
      EntityMob mob=(EntityMob)entity;
      ArrayList<TileEntity> tiles=WorldReading.getTileWithAABB((int)mob.posX,(int)mob.posY,(int)mob.posZ,mob.worldObj,10,APIBlocks.blockUtils.blockID,1);
      for (      TileEntity tile : tiles) {
        if (tile != null && tile instanceof IExpProvider) {
          IExpProvider pro=(IExpProvider)tile;
          if (pro.absorbDeath()) {
            pro.addExp(mob.experienceValue);
          }
        }
      }
    }
    Entity en=evt.source.getSourceOfDamage();
    if (entity instanceof EntityAgeable && en != null && en instanceof EntityPlayer) {
      EntityAgeable age=(EntityAgeable)entity;
      AnimalChunkLoader.onEntityDeath(age);
      if (gas.isValidEntity(age) && rand.nextInt(3) == 0) {
        IEntityGasInfo gasInfo=gas.getGasInfo(age.getClass());
        int min=gasInfo.getMinProducingGas(age);
        int max=gasInfo.getMaxProducingGas(age);
        if (max > 0 && max <= 10) {
          int newMax=Math.max(min,rand.nextInt(max + 1));
          int x=(int)age.posX;
          int y=(int)age.posY;
          int z=(int)age.posZ;
          if (newMax > 0 && age.worldObj.getBlockId(x,y + 1,z) == 0) {
            age.worldObj.setBlock(x,y + 1,z,APIBlocks.animalGas.blockID,newMax,3);
          }
        }
      }
    }
  }
}",0.9686847599164928
149456,"public static void load(PathProxy pp){
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.WoodenCorner,32),""String_Node_Str"",""String_Node_Str"",'Y',""String_Node_Str"",'X',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.WoodenRing,16),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',Item.flint,'X',""String_Node_Str"");
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.CobbleRing,2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.CobbleRing,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.StoneCorner,8),""String_Node_Str"",""String_Node_Str"",'Y',""String_Node_Str"",'X',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.CobbleRing),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.WoodenRing));
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.StoneRing),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.WoodenRing));
  pp.addFurnaceRecipe(ItemGear.getGearFromType(GearType.CobbleRing),ItemGear.getGearFromType(GearType.StoneRing),0.2F);
  pp.addRecipe(ItemGear.getGearFromType(GearType.Wood),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.WoodenRing),'X',ItemGear.getGearFromType(GearType.WoodenCorner)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Stone),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.StoneRing),'X',ItemGear.getGearFromType(GearType.StoneCorner)});
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.Bone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"");
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.Cobblestone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.Wood),'X',""String_Node_Str"");
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.Stone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.Wood),'X',""String_Node_Str"");
  pp.addRecipe(ItemGear.getGearFromType(GearType.Iron),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.ingotIron,'Y',ItemGear.getGearFromType(GearType.Stone)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Gold),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.ingotGold,'Y',ItemGear.getGearFromType(GearType.Iron)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Diamond),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.diamond,'Y',ItemGear.getGearFromType(GearType.Gold)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Redstone),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.redstone,'Y',ItemGear.getGearFromType(GearType.Gold)});
  pp.addFurnaceRecipe(ItemGear.getGearFromType(GearType.Cobblestone),ItemGear.getGearFromType(GearType.Stone),0.35F);
  pp.addRecipe(new ShapedColorCardRecipe(new ItemStack(APIItems.colorCard,8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'V',""String_Node_Str"",'Y',""String_Node_Str"",'C',""String_Node_Str"",'D',""String_Node_Str"",'B',""String_Node_Str""));
  pp.addRecipe(new ColorCardRecipe());
  for (  FluidContainerData data : PathProxy.getDataFromFluid(FluidRegistry.WATER)) {
    pp.addRecipe(new ColorCardCleaning(data.filledContainer));
  }
  pp.addRecipe(new ItemStack(APIBlocks.blockUtils,1,3),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Block.glass,'C',Block.ice,'V',Item.porkRaw,'Y',new ItemStack(Item.dyePowder,1,EnumColor.BLACK.getAsDye())});
  pp.addRecipe(new ItemStack(APIBlocks.blockUtils,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',Item.leather,'B',Item.porkRaw,'C',Item.feather,'D',Block.cloth,'E',Item.ingotIron,'F',Block.mushroomRed,'G',new ItemStack(Block.glowStone)});
  pp.addRecipe(new ItemStack(APIBlocks.blockUtils,1,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',GearType.StoneRing.getItem(),'Y',Block.bookShelf,'C',Block.tripWireSource,'V',Block.redstoneLampIdle,'B',Item.eyeOfEnder,'N',Block.stoneButton});
  pp.addRecipe(new ItemStack(APIItems.redstoneCable,6),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Block.glass,'Y',APIItems.tinyRedstoneDust});
  pp.addRecipe(new ItemStack(APIBlocks.animalUtils),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'E',Block.mushroomRed,'D',Block.cloth,'C',Item.beefRaw,'A',Item.feather,'B',Item.porkRaw,'Y',Item.emerald,'X',Block.cobblestoneMossy});
  pp.addBlockRecipe(new ItemStack(Item.redstone),new ItemStack(APIItems.tinyRedstoneDust));
  pp.addSRecipe(new ItemStack(APIItems.tinyRedstoneDust,9),new ItemStack(Item.redstone));
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'C',""String_Node_Str"",'B',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'B',""String_Node_Str"",'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'C',""String_Node_Str"",'B',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'B',""String_Node_Str"",'C',""String_Node_Str"");
  pp.addRecipe(new ItemStack(APIItems.circuits,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',new ItemStack(APIItems.circuits,1,0),'Y',new ItemStack(APIItems.circuits,1,1),'C',Item.diamond});
}","public static void load(PathProxy pp){
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.WoodenCorner,32),""String_Node_Str"",""String_Node_Str"",'Y',""String_Node_Str"",'X',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.WoodenRing,16),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',Item.flint,'X',""String_Node_Str"");
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.CobbleRing,2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.CobbleRing,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.StoneCorner,8),""String_Node_Str"",""String_Node_Str"",'Y',""String_Node_Str"",'X',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.CobbleRing),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.WoodenRing));
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.StoneRing),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.WoodenRing));
  pp.addFurnaceRecipe(ItemGear.getGearFromType(GearType.CobbleRing),ItemGear.getGearFromType(GearType.StoneRing),0.2F);
  pp.addRecipe(ItemGear.getGearFromType(GearType.Wood),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.WoodenRing),'X',ItemGear.getGearFromType(GearType.WoodenCorner)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Stone),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.StoneRing),'X',ItemGear.getGearFromType(GearType.StoneCorner)});
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.Bone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"");
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.Cobblestone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.Wood),'X',""String_Node_Str"");
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.Stone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.Wood),'X',""String_Node_Str"");
  pp.addRecipe(ItemGear.getGearFromType(GearType.Iron),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.ingotIron,'Y',ItemGear.getGearFromType(GearType.Stone)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Gold),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.ingotGold,'Y',ItemGear.getGearFromType(GearType.Iron)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Diamond),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.diamond,'Y',ItemGear.getGearFromType(GearType.Gold)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Redstone),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.redstone,'Y',ItemGear.getGearFromType(GearType.Gold)});
  pp.addFurnaceRecipe(ItemGear.getGearFromType(GearType.Cobblestone),ItemGear.getGearFromType(GearType.Stone),0.35F);
  pp.addRecipe(new ShapedColorCardRecipe(new ItemStack(APIItems.colorCard,8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'V',""String_Node_Str"",'Y',""String_Node_Str"",'C',""String_Node_Str"",'D',""String_Node_Str"",'B',""String_Node_Str""));
  pp.addRecipe(new ColorCardRecipe());
  for (  FluidContainerData data : PathProxy.getDataFromFluid(FluidRegistry.WATER)) {
    pp.addRecipe(new ColorCardCleaning(data.filledContainer));
  }
  pp.addRecipe(new ItemStack(APIBlocks.blockUtils,1,3),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Block.glass,'C',Block.ice,'V',Item.porkRaw,'Y',new ItemStack(Item.dyePowder,1,EnumColor.BLACK.getAsDye())});
  pp.addSRecipe(new ItemStack(APIItems.blueDye,2),new Object[]{APIBlocks.blueFlower});
  pp.addRecipe(new ItemStack(APIBlocks.blockUtils,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',Item.leather,'B',Item.porkRaw,'C',Item.feather,'D',Block.cloth,'E',Item.ingotIron,'F',Block.mushroomRed,'G',new ItemStack(Block.glowStone)});
  pp.addRecipe(new ItemStack(APIBlocks.blockUtils,1,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',GearType.StoneRing.getItem(),'Y',Block.bookShelf,'C',Block.tripWireSource,'V',Block.redstoneLampIdle,'B',Item.eyeOfEnder,'N',Block.stoneButton});
  pp.addRecipe(new ItemStack(APIItems.redstoneCable,6),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Block.glass,'Y',APIItems.tinyRedstoneDust});
  pp.addRecipe(new ItemStack(APIBlocks.animalUtils),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'E',Block.mushroomRed,'D',Block.cloth,'C',Item.beefRaw,'A',Item.feather,'B',Item.porkRaw,'Y',Item.emerald,'X',Block.cobblestoneMossy});
  pp.addBlockRecipe(new ItemStack(Item.redstone),new ItemStack(APIItems.tinyRedstoneDust));
  pp.addSRecipe(new ItemStack(APIItems.tinyRedstoneDust,9),new ItemStack(Item.redstone));
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'C',""String_Node_Str"",'B',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'B',""String_Node_Str"",'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'C',""String_Node_Str"",'B',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'B',""String_Node_Str"",'C',""String_Node_Str"");
  pp.addRecipe(new ItemStack(APIItems.circuits,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',new ItemStack(APIItems.circuits,1,0),'Y',new ItemStack(APIItems.circuits,1,1),'C',Item.diamond});
}",0.962842579596661
149457,"@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  String s=""String_Node_Str"";
  fontRenderer.drawString(s,xSize / 2 - fontRenderer.getStringWidth(s) / 2,6,4210752);
  fontRenderer.drawString(I18n.getString(""String_Node_Str""),8,ySize - 96 + 2,4210752);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  int k=(width - xSize) / 2;
  int l=(height - ySize) / 2;
  setTexture(engine.getTexture(""String_Node_Str""));
  defineSlot(""String_Node_Str"");
  this.drawTexturedModalRect(k - 52,l,getX(),getY(),23,16);
}","@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  String s=""String_Node_Str"";
  fontRenderer.drawString(s,xSize / 2 - fontRenderer.getStringWidth(s) / 2,6,4210752);
  fontRenderer.drawString(I18n.getString(""String_Node_Str""),8,ySize - 96 + 2,4210752);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  int k=(width - xSize) / 2;
  int l=(height - ySize) / 2;
  setTexture(engine.getTexture(""String_Node_Str""));
  defineSlot(""String_Node_Str"");
  this.drawTexturedModalRect(75,35,getX(),getY(),23,16);
}",0.9894937917860552
149458,"@Override @SideOnly(Side.CLIENT) public GuiInventoryCore getGui(InventoryPlayer par1){
  if (guiClass != null) {
    try {
      return guiClass.getConstructor(InventoryPlayer.class,AdvTile.class).newInstance(par1,this);
    }
 catch (    Exception e) {
    }
  }
  return super.getGui(par1);
}","@Override @SideOnly(Side.CLIENT) public GuiInventoryCore getGui(InventoryPlayer par1){
  if (guiClass != null) {
    try {
      return guiClass.getConstructor(InventoryPlayer.class,AdvTile.class).newInstance(par1,this).setAutoDrawing();
    }
 catch (    Exception e) {
    }
  }
  return super.getGui(par1);
}",0.971900826446281
149459,"public void doWork(){
  if (heat >= MaxHeat) {
    PressureRecipeList list=PressureRecipeList.getInstance();
    if (currentRecipe != null && !currentRecipe.recipeMatches(inv[1],inv[2],inv[3],1)) {
      currentRecipe=null;
    }
    if (currentRecipe == null && list.hasRecipe(inv[1],inv[2],inv[3])) {
      currentRecipe=list.getRecipe(inv[1],inv[2],inv[3]);
    }
    if (paused) {
      paused=false;
      return;
    }
    if (currentRecipe != null) {
      if (canRun()) {
        progress++;
        fuel--;
        int maxProgress=Math.max(currentRecipe.getRequiredCookTime(),100);
        if (progress >= maxProgress) {
          progress=0;
          int max=currentRecipe.isMultiRecipe() ? 5 : 1;
          for (; max > 1 && !currentRecipe.recipeMatches(inv[1],inv[2],inv[3],max); ) {
            max--;
          }
          currentRecipe.runRecipe(inv[1],inv[2],inv[3],max);
          ItemStack result=currentRecipe.getOutput().copy();
          result.stackSize*=max;
          storedExp+=(double)(FurnaceRecipes.smelting().getExperience(result) * max);
          for (int i=1; i < 4; i++) {
            if (inv[i] != null && inv[i].stackSize <= 0) {
              inv[i]=null;
            }
          }
          if (inv[4] == null) {
            inv[4]=result;
          }
 else {
            inv[4].stackSize+=result.stackSize;
          }
        }
      }
 else {
        progress=0;
      }
    }
 else {
      progress=0;
    }
  }
}","public void doWork(){
  if (heat >= MaxHeat) {
    PressureRecipeList list=PressureRecipeList.getInstance();
    if (currentRecipe != null && !currentRecipe.recipeMatches(inv[1],inv[2],inv[3],1)) {
      currentRecipe=null;
    }
    if (currentRecipe == null && list.hasRecipe(inv[1],inv[2],inv[3])) {
      currentRecipe=list.getRecipe(inv[1],inv[2],inv[3]);
    }
    if (paused) {
      paused=false;
      return;
    }
    if (currentRecipe != null) {
      if (canRun()) {
        progress++;
        fuel--;
        int maxProgress=Math.max(currentRecipe.getRequiredCookTime(),100);
        if (progress >= maxProgress) {
          progress=0;
          int max=currentRecipe.isMultiRecipe() ? 5 : 1;
          for (; max > 1 && (!currentRecipe.recipeMatches(inv[1],inv[2],inv[3],max) || (inv[4] != null && inv[4].stackSize + (currentRecipe.getOutput().stackSize * max) > inv[4].getMaxStackSize())); ) {
            max--;
          }
          currentRecipe.runRecipe(inv[1],inv[2],inv[3],max);
          ItemStack result=currentRecipe.getOutput().copy();
          result.stackSize*=max;
          storedExp+=(double)(FurnaceRecipes.smelting().getExperience(result) * max);
          for (int i=1; i < 4; i++) {
            if (inv[i] != null && inv[i].stackSize <= 0) {
              inv[i]=null;
            }
          }
          if (inv[4] == null) {
            inv[4]=result;
          }
 else {
            inv[4].stackSize+=result.stackSize;
          }
        }
      }
 else {
        progress=0;
      }
    }
 else {
      progress=0;
    }
  }
}",0.9619834710743802
149460,"public static void init(){
  if (Loader.isModLoaded(""String_Node_Str"")) {
    IC2IridiumPlugin.init();
  }
}","public static void init(){
  if (Loader.isModLoaded(""String_Node_Str"")) {
    IC2IridiumPlugin.init();
  }
  if (IC2Classic.isIc2ClassicLoaded()) {
    PressureRecipeList.getInstance().addRecipe(new RedefinedIron());
  }
}",0.6545454545454545
149461,"public void loadPlugins(){
  List<IPlugin> plugins=getPlugins(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  for (  IPlugin plugin : plugins) {
    initPlugin(plugin);
  }
}","public void loadPlugins(){
  List<IPlugin> plugins=getPlugins(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  for (  IPlugin plugin : plugins) {
    initPlugin(plugin);
  }
  PressureRecipeList list=PressureRecipeList.getInstance();
  FurnaceRecipes furnace=FurnaceRecipes.smelting();
  Map<Integer,ItemStack> map=furnace.getSmeltingList();
  for (  Entry<Integer,ItemStack> cu : map.entrySet()) {
    list.addRecipe(new FurnaceRecipe(cu.getKey(),cu.getValue()));
  }
  for (  Entry<List<Integer>,ItemStack> cu : furnace.getMetaSmeltingList().entrySet()) {
    list.addRecipe(new FurnaceRecipe(cu.getKey(),cu.getValue()));
  }
}",0.4708624708624708
149462,"public static void registerServer(){
  regist(new RetrogenSave());
  GameRegistry.registerWorldGenerator(SpmodWorldGen.getWorldGen());
  regist(ChunkCollector.getInstance());
  regist(new BlockDetector());
  TickRegistry.registerTickHandler(new CountdownTick(),Side.SERVER);
  regist(new WorldCrafter());
  StructureStorage.registerForgeEvent();
  TickRegistry.registerTickHandler(new ServerTick(),Side.SERVER);
  if (SpmodConfig.booleanInfos.get(""String_Node_Str"")) {
    TickRegistry.registerTickHandler(RetroGenTickHandler.getTicks(),Side.SERVER);
  }
  if (!SpmodConfig.booleanInfos.get(""String_Node_Str"")) {
    regist(new BucketHandler());
    regist(LivingHandler.instance);
  }
}","public static void registerServer(){
  regist(new RetrogenSave());
  GameRegistry.registerWorldGenerator(SpmodWorldGen.getWorldGen());
  regist(ChunkCollector.getInstance());
  regist(new BlockDetector());
  TickRegistry.registerTickHandler(new CountdownTick(),Side.SERVER);
  StructureStorage.registerForgeEvent();
  TickRegistry.registerTickHandler(new ServerTick(),Side.SERVER);
  if (SpmodConfig.booleanInfos.get(""String_Node_Str"")) {
    TickRegistry.registerTickHandler(RetroGenTickHandler.getTicks(),Side.SERVER);
  }
  if (!SpmodConfig.booleanInfos.get(""String_Node_Str"")) {
    regist(new BucketHandler());
    regist(LivingHandler.instance);
  }
}",0.9776785714285714
149463,"public void registerServer(){
  GameRegistry.registerCraftingHandler(new TinyCraftingHandler());
  FuelHandler.init();
  DataStorage.registerNBTReciver((ItemNetherCrystal)TinyItems.netherCrystal);
  new RenderCommand();
  initHopperUpgrades();
}","public void registerServer(){
  GameRegistry.registerCraftingHandler(new TinyCraftingHandler());
  FuelHandler.init();
  DataStorage.registerNBTReciver((ItemNetherCrystal)TinyItems.netherCrystal);
  new RenderCommand();
  initHopperUpgrades();
  ForgeRegister.regist(new WorldCrafter());
}",0.9176029962546816
149464,"@Override public boolean onBlockActivated(World par1,int par2,int par3,int par4,EntityPlayer par5,int par6,float par7,float par8,float par9){
  int meta=par1.getBlockMetadata(par2,par3,par4);
  if (par5.isSneaking() && !this.ignoreRightClick[meta]) {
    return false;
  }
  if (this.ItemNoRightClick[meta]) {
    return false;
  }
  if (!par1.isRemote) {
    int guiID=getGuiIDForMeta(meta);
    if (guiID != -1) {
      SpmodMod mod=getModInstance(meta);
      if (mod == null) {
        mod=SpmodAPI.instance;
      }
      par5.openGui(mod,guiID,par1,par2,par3,par4);
      return true;
    }
  }
  return false;
}","@Override public boolean onBlockActivated(World par1,int par2,int par3,int par4,EntityPlayer par5,int par6,float par7,float par8,float par9){
  int meta=par1.getBlockMetadata(par2,par3,par4);
  if (par5.isSneaking() && !this.ignoreRightClick[meta]) {
    return false;
  }
  if (this.ItemNoRightClick[meta]) {
    return false;
  }
  int guiID=getGuiIDForMeta(meta);
  if (guiID != -1) {
    SpmodMod mod=getModInstance(meta);
    if (mod == null) {
      mod=SpmodAPI.instance;
    }
    par5.openGui(mod,guiID,par1,par2,par3,par4);
    return true;
  }
  return false;
}",0.9159663865546218
149465,"@Override public int getRenderType(){
  return requiresRender() ? RenderHelper.getGlobalRenderID() : 0;
}","@Override public int getRenderType(){
  return requiresRender() ? SpmodAPI.core.getRenderID() : 0;
}",0.8585365853658536
149466,"@Override @SideOnly(Side.CLIENT) public GuiInventoryCore getGui(InventoryPlayer par1){
  if (guiClass != null) {
    try {
      return guiClass.getConstructor(InventoryPlayer.class,AdvTile.class).newInstance(par1,this);
    }
 catch (    Exception e) {
    }
  }
  return super.getGui(par1);
}","@Override @SideOnly(Side.CLIENT) public GuiInventoryCore getGui(InventoryPlayer par1){
  if (guiClass != null) {
    try {
      return guiClass.getConstructor(InventoryPlayer.class,AdvTile.class).newInstance(par1,this).setAutoDrawing();
    }
 catch (    Exception e) {
    }
  }
  return super.getGui(par1);
}",0.971900826446281
149467,"public int getCurrentID(){
  if (Item.itemsList[ID + 256] != null) {
    int end=ID + 256;
    throw new IndexOutOfBoundsException(""String_Node_Str"" + end);
  }
  return ID;
}","public int getCurrentID(){
  if (Item.itemsList[ID + 256] != null) {
    int end=ID + 256;
    throw new IndexOutOfBoundsException(""String_Node_Str"" + end + ""String_Node_Str""+ Item.itemsList[ID + 256].getUnlocalizedName());
  }
  return ID;
}",0.8393285371702638
149468,"@ForgeSubscribe public void onDeath(LivingDeathEvent evt){
  EntityLivingBase entity=evt.entityLiving;
  if (entity != null && !entity.worldObj.isRemote) {
    if (entity instanceof EntityMob) {
      EntityMob mob=(EntityMob)entity;
      ArrayList<TileEntity> tiles=WorldReading.getTileWithAABB((int)mob.posX,(int)mob.posY,(int)mob.posZ,mob.worldObj,10,APIBlocks.blockUtils.blockID,1);
      for (      TileEntity tile : tiles) {
        if (tile != null && tile instanceof IExpProvider) {
          IExpProvider pro=(IExpProvider)tile;
          if (pro.absorbDeath()) {
            pro.addExp(mob.experienceValue);
          }
        }
      }
    }
    if (entity instanceof EntityAgeable) {
      EntityAgeable age=(EntityAgeable)entity;
      AnimalChunkLoader.onEntityDeath(age);
      if (gas.isValidEntity(age) && rand.nextInt(3) == 0) {
        IEntityGasInfo gasInfo=gas.getGasInfo(age.getClass());
        int min=gasInfo.getMinProducingGas(age);
        int max=gasInfo.getMaxProducingGas(age);
        if (max > 0 && max <= 10) {
          int newMax=Math.max(min,rand.nextInt(max + 1));
          int x=(int)age.posX;
          int y=(int)age.posY;
          int z=(int)age.posZ;
          if (newMax > 0 && age.worldObj.getBlockId(x,y + 1,z) == 0) {
            age.worldObj.setBlock(x,y + 1,z,APIBlocks.animalGas.blockID,newMax,3);
          }
        }
      }
    }
  }
}","@ForgeSubscribe public void onDeath(LivingDeathEvent evt){
  EntityLivingBase entity=evt.entityLiving;
  if (entity != null && !entity.worldObj.isRemote) {
    if (entity instanceof EntityMob) {
      EntityMob mob=(EntityMob)entity;
      ArrayList<TileEntity> tiles=WorldReading.getTileWithAABB((int)mob.posX,(int)mob.posY,(int)mob.posZ,mob.worldObj,10,APIBlocks.blockUtils.blockID,1);
      for (      TileEntity tile : tiles) {
        if (tile != null && tile instanceof IExpProvider) {
          IExpProvider pro=(IExpProvider)tile;
          if (pro.absorbDeath()) {
            pro.addExp(mob.experienceValue);
          }
        }
      }
    }
    Entity en=evt.source.getSourceOfDamage();
    if (entity instanceof EntityAgeable && en != null && en instanceof EntityPlayer) {
      EntityAgeable age=(EntityAgeable)entity;
      AnimalChunkLoader.onEntityDeath(age);
      if (gas.isValidEntity(age) && rand.nextInt(3) == 0) {
        IEntityGasInfo gasInfo=gas.getGasInfo(age.getClass());
        int min=gasInfo.getMinProducingGas(age);
        int max=gasInfo.getMaxProducingGas(age);
        if (max > 0 && max <= 10) {
          int newMax=Math.max(min,rand.nextInt(max + 1));
          int x=(int)age.posX;
          int y=(int)age.posY;
          int z=(int)age.posZ;
          if (newMax > 0 && age.worldObj.getBlockId(x,y + 1,z) == 0) {
            age.worldObj.setBlock(x,y + 1,z,APIBlocks.animalGas.blockID,newMax,3);
          }
        }
      }
    }
  }
}",0.9686847599164928
149469,"public static void load(PathProxy pp){
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.WoodenCorner,32),""String_Node_Str"",""String_Node_Str"",'Y',""String_Node_Str"",'X',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.WoodenRing,16),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',Item.flint,'X',""String_Node_Str"");
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.CobbleRing,2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.CobbleRing,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.StoneCorner,8),""String_Node_Str"",""String_Node_Str"",'Y',""String_Node_Str"",'X',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.CobbleRing),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.WoodenRing));
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.StoneRing),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.WoodenRing));
  pp.addFurnaceRecipe(ItemGear.getGearFromType(GearType.CobbleRing),ItemGear.getGearFromType(GearType.StoneRing),0.2F);
  pp.addRecipe(ItemGear.getGearFromType(GearType.Wood),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.WoodenRing),'X',ItemGear.getGearFromType(GearType.WoodenCorner)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Stone),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.StoneRing),'X',ItemGear.getGearFromType(GearType.StoneCorner)});
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.Bone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"");
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.Cobblestone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.Wood),'X',""String_Node_Str"");
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.Stone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.Wood),'X',""String_Node_Str"");
  pp.addRecipe(ItemGear.getGearFromType(GearType.Iron),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.ingotIron,'Y',ItemGear.getGearFromType(GearType.Stone)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Gold),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.ingotGold,'Y',ItemGear.getGearFromType(GearType.Iron)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Diamond),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.diamond,'Y',ItemGear.getGearFromType(GearType.Gold)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Redstone),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.redstone,'Y',ItemGear.getGearFromType(GearType.Gold)});
  pp.addFurnaceRecipe(ItemGear.getGearFromType(GearType.Cobblestone),ItemGear.getGearFromType(GearType.Stone),0.35F);
  pp.addRecipe(new ShapedColorCardRecipe(new ItemStack(APIItems.colorCard,8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'V',""String_Node_Str"",'Y',""String_Node_Str"",'C',""String_Node_Str"",'D',""String_Node_Str"",'B',""String_Node_Str""));
  pp.addRecipe(new ColorCardRecipe());
  for (  FluidContainerData data : PathProxy.getDataFromFluid(FluidRegistry.WATER)) {
    pp.addRecipe(new ColorCardCleaning(data.filledContainer));
  }
  pp.addRecipe(new ItemStack(APIBlocks.blockUtils,1,3),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Block.glass,'C',Block.ice,'V',Item.porkRaw,'Y',new ItemStack(Item.dyePowder,1,EnumColor.BLACK.getAsDye())});
  pp.addRecipe(new ItemStack(APIBlocks.blockUtils,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',Item.leather,'B',Item.porkRaw,'C',Item.feather,'D',Block.cloth,'E',Item.ingotIron,'F',Block.mushroomRed,'G',new ItemStack(Block.glowStone)});
  pp.addRecipe(new ItemStack(APIBlocks.blockUtils,1,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',GearType.StoneRing.getItem(),'Y',Block.bookShelf,'C',Block.tripWireSource,'V',Block.redstoneLampIdle,'B',Item.eyeOfEnder,'N',Block.stoneButton});
  pp.addRecipe(new ItemStack(APIItems.redstoneCable,6),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Block.glass,'Y',APIItems.tinyRedstoneDust});
  pp.addRecipe(new ItemStack(APIBlocks.animalUtils),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'E',Block.mushroomRed,'D',Block.cloth,'C',Item.beefRaw,'A',Item.feather,'B',Item.porkRaw,'Y',Item.emerald,'X',Block.cobblestoneMossy});
  pp.addBlockRecipe(new ItemStack(Item.redstone),new ItemStack(APIItems.tinyRedstoneDust));
  pp.addSRecipe(new ItemStack(APIItems.tinyRedstoneDust,9),new ItemStack(Item.redstone));
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'C',""String_Node_Str"",'B',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'B',""String_Node_Str"",'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'C',""String_Node_Str"",'B',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'B',""String_Node_Str"",'C',""String_Node_Str"");
  pp.addRecipe(new ItemStack(APIItems.circuits,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',new ItemStack(APIItems.circuits,1,0),'Y',new ItemStack(APIItems.circuits,1,1),'C',Item.diamond});
}","public static void load(PathProxy pp){
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.WoodenCorner,32),""String_Node_Str"",""String_Node_Str"",'Y',""String_Node_Str"",'X',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.WoodenRing,16),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',Item.flint,'X',""String_Node_Str"");
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.CobbleRing,2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.CobbleRing,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.StoneCorner,8),""String_Node_Str"",""String_Node_Str"",'Y',""String_Node_Str"",'X',Item.flint);
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.CobbleRing),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.WoodenRing));
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.StoneRing),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.WoodenRing));
  pp.addFurnaceRecipe(ItemGear.getGearFromType(GearType.CobbleRing),ItemGear.getGearFromType(GearType.StoneRing),0.2F);
  pp.addRecipe(ItemGear.getGearFromType(GearType.Wood),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.WoodenRing),'X',ItemGear.getGearFromType(GearType.WoodenCorner)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Stone),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.StoneRing),'X',ItemGear.getGearFromType(GearType.StoneCorner)});
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.Bone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"");
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.Cobblestone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.Wood),'X',""String_Node_Str"");
  pp.addOreRecipe(ItemGear.getGearFromType(GearType.Stone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'Y',ItemGear.getGearFromType(GearType.Wood),'X',""String_Node_Str"");
  pp.addRecipe(ItemGear.getGearFromType(GearType.Iron),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.ingotIron,'Y',ItemGear.getGearFromType(GearType.Stone)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Gold),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.ingotGold,'Y',ItemGear.getGearFromType(GearType.Iron)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Diamond),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.diamond,'Y',ItemGear.getGearFromType(GearType.Gold)});
  pp.addRecipe(ItemGear.getGearFromType(GearType.Redstone),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.redstone,'Y',ItemGear.getGearFromType(GearType.Gold)});
  pp.addFurnaceRecipe(ItemGear.getGearFromType(GearType.Cobblestone),ItemGear.getGearFromType(GearType.Stone),0.35F);
  pp.addRecipe(new ShapedColorCardRecipe(new ItemStack(APIItems.colorCard,8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'V',""String_Node_Str"",'Y',""String_Node_Str"",'C',""String_Node_Str"",'D',""String_Node_Str"",'B',""String_Node_Str""));
  pp.addRecipe(new ColorCardRecipe());
  for (  FluidContainerData data : PathProxy.getDataFromFluid(FluidRegistry.WATER)) {
    pp.addRecipe(new ColorCardCleaning(data.filledContainer));
  }
  pp.addRecipe(new ItemStack(APIBlocks.blockUtils,1,3),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Block.glass,'C',Block.ice,'V',Item.porkRaw,'Y',new ItemStack(Item.dyePowder,1,EnumColor.BLACK.getAsDye())});
  pp.addSRecipe(new ItemStack(APIItems.blueDye,2),new Object[]{APIBlocks.blueFlower});
  pp.addRecipe(new ItemStack(APIBlocks.blockUtils,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',Item.leather,'B',Item.porkRaw,'C',Item.feather,'D',Block.cloth,'E',Item.ingotIron,'F',Block.mushroomRed,'G',new ItemStack(Block.glowStone)});
  pp.addRecipe(new ItemStack(APIBlocks.blockUtils,1,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',GearType.StoneRing.getItem(),'Y',Block.bookShelf,'C',Block.tripWireSource,'V',Block.redstoneLampIdle,'B',Item.eyeOfEnder,'N',Block.stoneButton});
  pp.addRecipe(new ItemStack(APIItems.redstoneCable,6),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Block.glass,'Y',APIItems.tinyRedstoneDust});
  pp.addRecipe(new ItemStack(APIBlocks.animalUtils),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'E',Block.mushroomRed,'D',Block.cloth,'C',Item.beefRaw,'A',Item.feather,'B',Item.porkRaw,'Y',Item.emerald,'X',Block.cobblestoneMossy});
  pp.addBlockRecipe(new ItemStack(Item.redstone),new ItemStack(APIItems.tinyRedstoneDust));
  pp.addSRecipe(new ItemStack(APIItems.tinyRedstoneDust,9),new ItemStack(Item.redstone));
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'C',""String_Node_Str"",'B',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.goldNugget,'B',""String_Node_Str"",'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'C',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'C',""String_Node_Str"",'B',""String_Node_Str"");
  pp.addOreRecipe(new ItemStack(APIItems.circuits,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',APIItems.redstoneCable,'V',Item.ingotGold,'B',""String_Node_Str"",'C',""String_Node_Str"");
  pp.addRecipe(new ItemStack(APIItems.circuits,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',new ItemStack(APIItems.circuits,1,0),'Y',new ItemStack(APIItems.circuits,1,1),'C',Item.diamond});
}",0.962842579596661
149470,"@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  String s=""String_Node_Str"";
  fontRenderer.drawString(s,xSize / 2 - fontRenderer.getStringWidth(s) / 2,6,4210752);
  fontRenderer.drawString(I18n.getString(""String_Node_Str""),8,ySize - 96 + 2,4210752);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  int k=(width - xSize) / 2;
  int l=(height - ySize) / 2;
  setTexture(engine.getTexture(""String_Node_Str""));
  defineSlot(""String_Node_Str"");
  this.drawTexturedModalRect(k - 52,l,getX(),getY(),23,16);
}","@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  String s=""String_Node_Str"";
  fontRenderer.drawString(s,xSize / 2 - fontRenderer.getStringWidth(s) / 2,6,4210752);
  fontRenderer.drawString(I18n.getString(""String_Node_Str""),8,ySize - 96 + 2,4210752);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  int k=(width - xSize) / 2;
  int l=(height - ySize) / 2;
  setTexture(engine.getTexture(""String_Node_Str""));
  defineSlot(""String_Node_Str"");
  this.drawTexturedModalRect(75,35,getX(),getY(),23,16);
}",0.9894937917860552
149471,"@Override @SideOnly(Side.CLIENT) public GuiInventoryCore getGui(InventoryPlayer par1){
  if (guiClass != null) {
    try {
      return guiClass.getConstructor(InventoryPlayer.class,AdvTile.class).newInstance(par1,this);
    }
 catch (    Exception e) {
    }
  }
  return super.getGui(par1);
}","@Override @SideOnly(Side.CLIENT) public GuiInventoryCore getGui(InventoryPlayer par1){
  if (guiClass != null) {
    try {
      return guiClass.getConstructor(InventoryPlayer.class,AdvTile.class).newInstance(par1,this).setAutoDrawing();
    }
 catch (    Exception e) {
    }
  }
  return super.getGui(par1);
}",0.971900826446281
149472,"public void doWork(){
  if (heat >= MaxHeat) {
    PressureRecipeList list=PressureRecipeList.getInstance();
    if (currentRecipe != null && !currentRecipe.recipeMatches(inv[1],inv[2],inv[3],1)) {
      currentRecipe=null;
    }
    if (currentRecipe == null && list.hasRecipe(inv[1],inv[2],inv[3])) {
      currentRecipe=list.getRecipe(inv[1],inv[2],inv[3]);
    }
    if (paused) {
      paused=false;
      return;
    }
    if (currentRecipe != null) {
      if (canRun()) {
        progress++;
        fuel--;
        int maxProgress=Math.max(currentRecipe.getRequiredCookTime(),100);
        if (progress >= maxProgress) {
          progress=0;
          int max=currentRecipe.isMultiRecipe() ? 5 : 1;
          for (; max > 1 && !currentRecipe.recipeMatches(inv[1],inv[2],inv[3],max); ) {
            max--;
          }
          currentRecipe.runRecipe(inv[1],inv[2],inv[3],max);
          ItemStack result=currentRecipe.getOutput().copy();
          result.stackSize*=max;
          storedExp+=(double)(FurnaceRecipes.smelting().getExperience(result) * max);
          for (int i=1; i < 4; i++) {
            if (inv[i] != null && inv[i].stackSize <= 0) {
              inv[i]=null;
            }
          }
          if (inv[4] == null) {
            inv[4]=result;
          }
 else {
            inv[4].stackSize+=result.stackSize;
          }
        }
      }
 else {
        progress=0;
      }
    }
 else {
      progress=0;
    }
  }
}","public void doWork(){
  if (heat >= MaxHeat) {
    PressureRecipeList list=PressureRecipeList.getInstance();
    if (currentRecipe != null && !currentRecipe.recipeMatches(inv[1],inv[2],inv[3],1)) {
      currentRecipe=null;
    }
    if (currentRecipe == null && list.hasRecipe(inv[1],inv[2],inv[3])) {
      currentRecipe=list.getRecipe(inv[1],inv[2],inv[3]);
    }
    if (paused) {
      paused=false;
      return;
    }
    if (currentRecipe != null) {
      if (canRun()) {
        progress++;
        fuel--;
        int maxProgress=Math.max(currentRecipe.getRequiredCookTime(),100);
        if (progress >= maxProgress) {
          progress=0;
          int max=currentRecipe.isMultiRecipe() ? 5 : 1;
          for (; max > 1 && (!currentRecipe.recipeMatches(inv[1],inv[2],inv[3],max) || (inv[4] != null && inv[4].stackSize + (currentRecipe.getOutput().stackSize * max) > inv[4].getMaxStackSize())); ) {
            max--;
          }
          currentRecipe.runRecipe(inv[1],inv[2],inv[3],max);
          ItemStack result=currentRecipe.getOutput().copy();
          result.stackSize*=max;
          storedExp+=(double)(FurnaceRecipes.smelting().getExperience(result) * max);
          for (int i=1; i < 4; i++) {
            if (inv[i] != null && inv[i].stackSize <= 0) {
              inv[i]=null;
            }
          }
          if (inv[4] == null) {
            inv[4]=result;
          }
 else {
            inv[4].stackSize+=result.stackSize;
          }
        }
      }
 else {
        progress=0;
      }
    }
 else {
      progress=0;
    }
  }
}",0.9619834710743802
149473,"public static void init(){
  if (Loader.isModLoaded(""String_Node_Str"")) {
    IC2IridiumPlugin.init();
  }
}","public static void init(){
  if (Loader.isModLoaded(""String_Node_Str"")) {
    IC2IridiumPlugin.init();
  }
  if (IC2Classic.isIc2ClassicLoaded()) {
    PressureRecipeList.getInstance().addRecipe(new RedefinedIron());
  }
}",0.6545454545454545
149474,"public void loadPlugins(){
  List<IPlugin> plugins=getPlugins(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  for (  IPlugin plugin : plugins) {
    initPlugin(plugin);
  }
}","public void loadPlugins(){
  List<IPlugin> plugins=getPlugins(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  for (  IPlugin plugin : plugins) {
    initPlugin(plugin);
  }
  PressureRecipeList list=PressureRecipeList.getInstance();
  FurnaceRecipes furnace=FurnaceRecipes.smelting();
  Map<Integer,ItemStack> map=furnace.getSmeltingList();
  for (  Entry<Integer,ItemStack> cu : map.entrySet()) {
    list.addRecipe(new FurnaceRecipe(cu.getKey(),cu.getValue()));
  }
  for (  Entry<List<Integer>,ItemStack> cu : furnace.getMetaSmeltingList().entrySet()) {
    list.addRecipe(new FurnaceRecipe(cu.getKey(),cu.getValue()));
  }
}",0.4708624708624708
149475,"public static void renderBlockStandart(IBlockRenderer par1,BlockStack par2,RenderBlocks par3){
  BlockRendererSpmodCore.instance.renderBlock(par1,par2,par3);
}","public static void renderBlockStandart(Icon[] texture,float[] sides,Block block,float[] sizes,RenderBlocks render){
  if (sizes == null || sizes.length != 3) {
    sizes=new float[]{-0.5F,-0.5F,-0.5F};
  }
  Tessellator tessellator=Tessellator.instance;
  block.setBlockBounds(sides[0],sides[1],sides[2],sides[3],sides[4],sides[5]);
  block.setBlockBoundsForItemRender();
  render.setRenderBoundsFromBlock(block);
  GL11.glTranslatef(sizes[0],sizes[1],sizes[2]);
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,-1.0F,0.0F);
  render.renderFaceYNeg(block,0.0D,0.0D,0.0D,texture[0]);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,1.0F,0.0F);
  render.renderFaceYPos(block,0.0D,0.0D,0.0D,texture[0]);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,0.0F,-1.0F);
  render.renderFaceZNeg(block,0.0D,0.0D,0.0D,texture[0]);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,0.0F,1.0F);
  render.renderFaceZPos(block,0.0D,0.0D,0.0D,texture[0]);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(-1.0F,0.0F,0.0F);
  render.renderFaceXNeg(block,0.0D,0.0D,0.0D,texture[0]);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(1.0F,0.0F,0.0F);
  render.renderFaceXPos(block,0.0D,0.0D,0.0D,texture[0]);
  tessellator.draw();
  GL11.glTranslatef(0.5F,0.5F,0.5F);
  block.setBlockBounds(0.0F,0.0F,0.0F,1.0F,1.0F,1.0F);
}",0.0834340991535671
149476,"public void renderBlock(IBlockRenderer par1,BlockStack par2,RenderBlocks par3){
  float[] size=par1.getBoundingBoxes(par2.getMeta());
  if (size == null || size.length < 6) {
    size=new float[]{0,0,0,1,1,1};
  }
  Icon[] textureArray=new Icon[6];
  for (int i=0; i < 6; i++) {
    Icon blockIcon=par2.getTexture(i);
    if (blockIcon == null || !engine.isTextureRegistered(blockIcon,engine.getTextureMap())) {
      blockIcon=engine.getIconSafe();
    }
    textureArray[i]=blockIcon;
  }
  Tessellator tessellator=Tessellator.instance;
  Block block=par2.getBlock();
  block.setBlockBounds(size[0],size[1],size[2],size[3],size[4],size[5]);
  block.setBlockBoundsForItemRender();
  par3.setRenderBoundsFromBlock(block);
  GL11.glTranslatef(-0.5F,-0.5F,-0.5F);
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,-1.0F,0.0F);
  par3.renderFaceYNeg(block,0.0D,0.0D,0.0D,textureArray[0]);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,1.0F,0.0F);
  par3.renderFaceYPos(block,0.0D,0.0D,0.0D,textureArray[0]);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,0.0F,-1.0F);
  par3.renderFaceZNeg(block,0.0D,0.0D,0.0D,textureArray[0]);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,0.0F,1.0F);
  par3.renderFaceZPos(block,0.0D,0.0D,0.0D,textureArray[0]);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(-1.0F,0.0F,0.0F);
  par3.renderFaceXNeg(block,0.0D,0.0D,0.0D,textureArray[0]);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(1.0F,0.0F,0.0F);
  par3.renderFaceXPos(block,0.0D,0.0D,0.0D,textureArray[0]);
  tessellator.draw();
  GL11.glTranslatef(0.5F,0.5F,0.5F);
  block.setBlockBounds(0.0F,0.0F,0.0F,1.0F,1.0F,1.0F);
}","public void renderBlock(IBlockRenderer par1,BlockStack par2,RenderBlocks par3,ItemRenderType par4){
  float[] size=par1.getBoundingBoxes(par2.getMeta());
  if (size == null || size.length < 6) {
    size=new float[]{0,0,0,1,1,1};
  }
  Icon[] textureArray=new Icon[6];
  for (int i=0; i < 6; i++) {
    Icon blockIcon=par2.getTexture(i);
    if (blockIcon == null || !engine.isTextureRegistered(blockIcon,engine.getTextureMap())) {
      blockIcon=engine.getIconSafe();
    }
    textureArray[i]=blockIcon;
  }
  float[] data=par1.getXYZForItemRenderer(par4,par2.getMeta());
  if (data == null || data.length != 3) {
    data=new float[]{-0.5F,-0.5F,-0.5F};
  }
  Tessellator tessellator=Tessellator.instance;
  Block block=par2.getBlock();
  block.setBlockBounds(size[0],size[1],size[2],size[3],size[4],size[5]);
  block.setBlockBoundsForItemRender();
  par3.setRenderBoundsFromBlock(block);
  GL11.glTranslatef(data[0],data[1],data[2]);
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,-1.0F,0.0F);
  par3.renderFaceYNeg(block,0.0D,0.0D,0.0D,textureArray[0]);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,1.0F,0.0F);
  par3.renderFaceYPos(block,0.0D,0.0D,0.0D,textureArray[0]);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,0.0F,-1.0F);
  par3.renderFaceZNeg(block,0.0D,0.0D,0.0D,textureArray[0]);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,0.0F,1.0F);
  par3.renderFaceZPos(block,0.0D,0.0D,0.0D,textureArray[0]);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(-1.0F,0.0F,0.0F);
  par3.renderFaceXNeg(block,0.0D,0.0D,0.0D,textureArray[0]);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(1.0F,0.0F,0.0F);
  par3.renderFaceXPos(block,0.0D,0.0D,0.0D,textureArray[0]);
  tessellator.draw();
  GL11.glTranslatef(0.5F,0.5F,0.5F);
  block.setBlockBounds(0.0F,0.0F,0.0F,1.0F,1.0F,1.0F);
}",0.9444882925545908
149477,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  BlockStack stack=new BlockStack(item);
  IBlockRenderer render=stack.getCastedBlock(IBlockRenderer.class);
  if (render != null) {
    if (render.renderItemBlockBasic(item.getItemDamage())) {
      renderBlock(render,stack,(RenderBlocks)data[0]);
    }
 else {
      float[] key=render.getXYZForItemRenderer(type,stack.getMeta());
      if (key == null || key.length != 3) {
        key=new float[]{0.5F,0.5F,0.5F};
      }
      int renderPasses=render.getItemRenderPasses(stack.getMeta());
      if (renderPasses <= 0) {
        renderPasses=1;
      }
      for (int i=0; i < renderPasses; i++) {
        if (type == type.INVENTORY) {
          render.onItemRendering(helper,type,stack,i,key[0],key[1],key[2],item,data[0]);
        }
 else {
          render.onItemRendering(helper,type,stack,i,key[0],key[1],key[2],item,data[0],data[1]);
        }
      }
    }
  }
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  BlockStack stack=new BlockStack(item);
  IBlockRenderer render=stack.getCastedBlock(IBlockRenderer.class);
  if (render != null) {
    if (render.renderItemBlockBasic(item.getItemDamage())) {
      renderBlock(render,stack,(RenderBlocks)data[0],type);
    }
 else {
      float[] key=render.getXYZForItemRenderer(type,stack.getMeta());
      if (key == null || key.length != 3) {
        key=new float[]{0.5F,0.5F,0.5F};
      }
      int renderPasses=render.getItemRenderPasses(stack.getMeta());
      if (renderPasses <= 0) {
        renderPasses=1;
      }
      for (int i=0; i < renderPasses; i++) {
        if (type == type.INVENTORY) {
          render.onItemRendering(helper,type,stack,i,key[0],key[1],key[2],item,data[0]);
        }
 else {
          render.onItemRendering(helper,type,stack,i,key[0],key[1],key[2],item,data[0],data[1]);
        }
      }
    }
  }
}",0.9973971889640812
149478,"@Override @SideOnly(Side.CLIENT) public Icon getBlockTexture(IBlockAccess par1iBlockAccess,int par2,int par3,int par4,int par5){
  AdvTile tile=this.getAdvTile(par1iBlockAccess,par2,par3,par4);
  if (tile != null) {
    return TextureEngine.getTextures().getIconSafe(tile.getIconFromSideAndMetadata(par5,0));
  }
  int meta=par1iBlockAccess.getBlockMetadata(par2,par3,par4);
  return getIcon(par5,meta);
}","@Override @SideOnly(Side.CLIENT) public Icon getBlockTexture(IBlockAccess par1iBlockAccess,int par2,int par3,int par4,int par5){
  AdvTile tile=this.getAdvTile(par1iBlockAccess,par2,par3,par4);
  int meta=par1iBlockAccess.getBlockMetadata(par2,par3,par4);
  if (tile != null) {
    if (requiresRenderPass(meta)) {
      return TextureEngine.getTextures().getIconSafe(tile.getIconFromSideAndMetadata(par5,getRenderPass(meta)));
    }
    return TextureEngine.getTextures().getIconSafe(tile.getIconFromSideAndMetadata(par5,0));
  }
  return getIcon(par5,meta);
}",0.6694300518134715
149479,"@Override public void onItemRendering(BlockRendererHelper render,ItemRenderType type,BlockStack stack,int renderPass,float x,float y,float z,Object... data){
  render.renderBlockStandart(this,stack,(RenderBlocks)data[1]);
  Tessellator tessellator=Tessellator.instance;
  tessellator.startDrawingQuads();
  tessellator.setNormal(1.0F,1.0F,0.0F);
  Minecraft mc=FMLClientHandler.instance().getClient();
  mc.renderEngine.bindTexture(TextureMap.locationItemsTexture);
  ((RenderBlocks)data[1]).renderFaceXPos(this,-0.5D,0.0D,0.0D,TextureEngine.getTextures().getIconSafe(Item.porkRaw.getIconFromDamage(0)));
  tessellator.draw();
  mc.renderEngine.bindTexture(TextureMap.locationBlocksTexture);
}","@Override public void onItemRendering(BlockRendererHelper render,ItemRenderType type,BlockStack stack,int renderPass,float x,float y,float z,Object... data){
  render.renderBlockStandart(this,stack,(RenderBlocks)data[1],type);
  Tessellator tessellator=Tessellator.instance;
  tessellator.startDrawingQuads();
  tessellator.setNormal(1.0F,1.0F,0.0F);
  Minecraft mc=FMLClientHandler.instance().getClient();
  mc.renderEngine.bindTexture(TextureMap.locationItemsTexture);
  ((RenderBlocks)data[1]).renderFaceXPos(this,-0.5D,0.0D,0.0D,TextureEngine.getTextures().getIconSafe(Item.porkRaw.getIconFromDamage(0)));
  tessellator.draw();
  mc.renderEngine.bindTexture(TextureMap.locationBlocksTexture);
}",0.9964054636951832
149480,"@Override public void runCommand(ICommandSender par1,ISubCommand sub,String[] arg){
  AdvancedRetrogen gen=AdvancedRetrogen.getInstance();
  if (gen.doesRetrogenWork()) {
    if (arg.length == 1) {
      if (arg[0].equalsIgnoreCase(""String_Node_Str"") || arg[0].equalsIgnoreCase(""String_Node_Str"")) {
        boolean result=Boolean.parseBoolean(arg[0]);
        gen.setAdvancedRetrogenState(!result);
        par1.sendChatToPlayer(LangProxy.getText(result ? ""String_Node_Str"" : ""String_Node_Str""));
      }
 else {
        par1.sendChatToPlayer(LangProxy.getText(""String_Node_Str""));
      }
    }
 else {
      HashMap<Integer,ArrayList<ChunkData>> list=gen.getData();
      Iterator<Entry<Integer,ArrayList<ChunkData>>> iter=list.entrySet().iterator();
      for (; iter.hasNext(); ) {
        Entry<Integer,ArrayList<ChunkData>> data=iter.next();
        WorldProvider pro=DimensionManager.getProvider(data.getKey());
        par1.sendChatToPlayer(LangProxy.getText(""String_Node_Str"" + data.getKey() + ""String_Node_Str""+ pro.getDimensionName()+ ""String_Node_Str""+ data.getValue().size()+ ""String_Node_Str""+ MathUtils.getTicksInTimeShort((data.getValue().size() * 1024) * gen.getTickSpeed())+ ""String_Node_Str""));
      }
    }
  }
 else {
    par1.sendChatToPlayer(LangProxy.getText(""String_Node_Str"",EnumChatFormatting.DARK_RED));
  }
}","@Override public void runCommand(ICommandSender par1,ISubCommand sub,String[] arg){
  AdvancedRetrogen gen=AdvancedRetrogen.getInstance();
  if (gen.doesRetrogenWork()) {
    if (arg.length == 1) {
      if (arg[0].equalsIgnoreCase(""String_Node_Str"") || arg[0].equalsIgnoreCase(""String_Node_Str"")) {
        boolean result=Boolean.parseBoolean(arg[0]);
        gen.setAdvancedRetrogenState(!result);
        par1.sendChatToPlayer(LangProxy.getText(result ? ""String_Node_Str"" : ""String_Node_Str""));
      }
 else {
        par1.sendChatToPlayer(LangProxy.getText(""String_Node_Str""));
      }
    }
 else {
      HashMap<Integer,ArrayList<ChunkData>> list=gen.getData();
      Iterator<Entry<Integer,ArrayList<ChunkData>>> iter=list.entrySet().iterator();
      for (; iter.hasNext(); ) {
        Entry<Integer,ArrayList<ChunkData>> data=iter.next();
        WorldProvider pro=DimensionManager.getProvider(data.getKey());
        par1.sendChatToPlayer(LangProxy.getText(""String_Node_Str"" + data.getKey() + ""String_Node_Str""+ pro.getDimensionName()+ ""String_Node_Str""+ data.getValue().size()+ ""String_Node_Str""+ MathUtils.getTicksInTimeShort((gen.getSizeFromList(data.getValue())) * gen.getTickSpeed())+ ""String_Node_Str""));
      }
    }
  }
 else {
    par1.sendChatToPlayer(LangProxy.getText(""String_Node_Str"",EnumChatFormatting.DARK_RED));
  }
}",0.9869646182495344
149481,"@Override public void tickEnd(EnumSet<TickType> type,Object... tickData){
  if (paused) {
    return;
  }
  World world=(World)tickData[0];
  boolean flag=delay == 1;
  if (world.getWorldTime() % delay == 0 || flag) {
    ArrayList<ChunkData> list=todoList.get(world.provider.dimensionId);
    if (list != null) {
      if (list.size() > 0) {
        ChunkData data=list.get(0);
        Chunk target=getChunk(world,data);
        if (target != null) {
          this.retrogenerateChunk(world,target);
          data.saveChunk(world,target);
        }
 else         if (!data.hasNextChunk()) {
          list.remove(0);
        }
      }
 else {
        todoList.remove(world.provider.dimensionId);
      }
    }
  }
  if (world.getWorldTime() % 200 == 0) {
    SpmodAPI.log.print(""String_Node_Str"" + world.provider.getDimensionName() + ""String_Node_Str""+ (todoList.get(world.provider.dimensionId) != null ? todoList.get(world.provider.dimensionId).size() : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  if (todoList.isEmpty() || todoList.size() <= 0) {
    if (this.totalShutdownDelay == 2000) {
      MinecraftServer.getServer().getConfigurationManager().func_110459_a(LangProxy.getText(""String_Node_Str"",EnumChatFormatting.DARK_RED),false);
    }
    this.totalShutdownDelay--;
    if (totalShutdownDelay <= 0) {
      MinecraftServer.getServer().initiateShutdown();
    }
  }
 else {
    this.totalShutdownDelay=2000;
  }
}","@Override public void tickEnd(EnumSet<TickType> type,Object... tickData){
  if (paused) {
    return;
  }
  World world=(World)tickData[0];
  boolean flag=delay == 1;
  if (world.getWorldTime() % delay == 0 || flag) {
    ArrayList<ChunkData> list=todoList.get(world.provider.dimensionId);
    if (list != null) {
      if (list.size() > 0) {
        ChunkData data=list.get(0);
        Chunk target=getChunk(world,data);
        if (target != null) {
          this.retrogenerateChunk(world,target);
          data.saveChunk(world,target);
        }
 else         if (!data.hasNextChunk()) {
          list.remove(0);
        }
      }
 else {
        todoList.remove(world.provider.dimensionId);
      }
    }
  }
  if (world.getWorldTime() % 200 == 0) {
    SpmodAPI.log.print(""String_Node_Str"" + world.provider.getDimensionName() + ""String_Node_Str""+ (todoList.get(world.provider.dimensionId) != null ? getSizeFromList(todoList.get(world.provider.dimensionId)) : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  if (todoList.isEmpty() || todoList.size() <= 0) {
    if (this.totalShutdownDelay == 2000) {
      MinecraftServer.getServer().getConfigurationManager().func_110459_a(LangProxy.getText(""String_Node_Str"",EnumChatFormatting.DARK_RED),false);
    }
    this.totalShutdownDelay--;
    if (totalShutdownDelay <= 0) {
      MinecraftServer.getServer().initiateShutdown();
    }
  }
 else {
    this.totalShutdownDelay=2000;
  }
}",0.989517819706499
149482,"@Override public void registerRenderer(){
  RenderingRegistry.registerBlockHandler(EnumIDs.Pipe.getId(),new RenderPipe());
  MinecraftForgeClient.registerItemRenderer(TinyBlocks.smallPipe.blockID,new ItemRendererPipe(TinyBlocks.smallPipe));
  MinecraftForgeClient.registerItemRenderer(TinyBlocks.normalPipe.blockID,new ItemRendererPipe(TinyBlocks.normalPipe));
  MinecraftForgeClient.registerItemRenderer(TinyBlocks.mediumPipe.blockID,new ItemRendererPipe(TinyBlocks.mediumPipe));
  MinecraftForgeClient.registerItemRenderer(TinyBlocks.bigPipe.blockID,new ItemRendererPipe(TinyBlocks.bigPipe));
  MinecraftForgeClient.registerItemRenderer(TinyBlocks.biggerPipe.blockID,new ItemRendererPipe(TinyBlocks.biggerPipe));
  MinecraftForgeClient.registerItemRenderer(TinyBlocks.largePipe.blockID,new ItemRendererPipe(TinyBlocks.largePipe));
  MinecraftForgeClient.registerItemRenderer(TinyBlocks.hugePipe.blockID,new ItemRendererPipe(TinyBlocks.hugePipe));
  RenderingRegistry.registerBlockHandler(EnumIDs.StorageBlock.getId(),new RenderStorage());
  ClientRegistry.bindTileEntitySpecialRenderer(TinyChest.class,new RenderStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(TinyTank.class,new RenderStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(AdvTinyChest.class,new RenderStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(AdvTinyTank.class,new RenderStorageBlock());
  MinecraftForgeClient.registerItemRenderer(TinyItems.tinyChest.itemID,new ItemRendererStorageBlock());
  MinecraftForgeClient.registerItemRenderer(TinyItems.tinyTank.itemID,new ItemRendererStorageBlock());
  MinecraftForgeClient.registerItemRenderer(TinyItems.advTinyChest.itemID,new ItemRendererStorageBlock());
  MinecraftForgeClient.registerItemRenderer(TinyItems.advTinyTank.itemID,new ItemRendererStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(TinyHopper.class,new renderTransportTile());
  MinecraftForgeClient.registerItemRenderer(TinyBlocks.transportBlock.blockID,new ItemRenderTransportTile());
  MinecraftForgeClient.registerItemRenderer(TinyItems.interfaceBlock.itemID,new ItemRenderTransportTile());
  MinecraftForgeClient.registerItemRenderer(TinyItems.tinyHopper.itemID,new ItemRenderTransportTile());
  MinecraftForgeClient.registerItemRenderer(TinyItems.advTinyHopper.itemID,new ItemRenderTransportTile());
  MinecraftForgeClient.registerItemRenderer(TinyItems.fluidHopper.itemID,new ItemRenderTransportTile());
  MinecraftForgeClient.registerItemRenderer(TinyItems.advFluidHopper.itemID,new ItemRenderTransportTile());
  MinecraftForgeClient.registerItemRenderer(TinyItems.energyHopper.itemID,new ItemRenderTransportTile());
  MinecraftForgeClient.registerItemRenderer(TinyItems.advEnergyHopper.itemID,new ItemRenderTransportTile());
  RenderingRegistry.registerBlockHandler(EnumIDs.TransportBlock.getId(),new RenderTransport());
  RenderingRegistry.registerEntityRenderingHandler(TCarts.class,new RenderTCarts());
  MinecraftForgeClient.registerItemRenderer(TinyItems.tinyStorageCart.itemID,new CartItemRenderer(false));
  MinecraftForgeClient.registerItemRenderer(TinyItems.advTinyStorageCart.itemID,new CartItemRenderer(true));
  MinecraftForgeClient.registerItemRenderer(TinyItems.cell.itemID,new RendererItemCell());
  if (Loader.isModLoaded(""String_Node_Str"")) {
    NeiRegistry.getInstance().init();
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    loadPipeToolTips();
  }
}","@Override public void registerRenderer(){
  ClientRegistry.bindTileEntitySpecialRenderer(TinyChest.class,new RenderStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(TinyTank.class,new RenderStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(AdvTinyChest.class,new RenderStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(AdvTinyTank.class,new RenderStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(TinyHopper.class,new renderTransportTile());
  RenderingRegistry.registerEntityRenderingHandler(TCarts.class,new RenderTCarts());
  MinecraftForgeClient.registerItemRenderer(TinyItems.cell.itemID,new RendererItemCell());
  if (Loader.isModLoaded(""String_Node_Str"")) {
    NeiRegistry.getInstance().init();
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    loadPipeToolTips();
  }
}",0.1195499296765119
149483,"@Override public void loadPipe(ItemPipe par1,int id,Class<? extends Pipe> par2){
  try {
    Pipe pipe=(Pipe)par2.getConstructor(new Class[]{Integer.TYPE}).newInstance(new Object[]{Integer.valueOf(id)});
    MinecraftForgeClient.registerItemRenderer(par1.itemID,ItemRendererBCPipe.pipe);
    if (pipe != null) {
      par1.setPipesIcons(pipe.getIconProvider());
      par1.setPipeIconIndex(pipe.getIconIndex(ForgeDirection.UNKNOWN));
    }
  }
 catch (  Exception e) {
  }
}","@Override public void loadPipe(ItemPipe par1,int id,Class<? extends Pipe> par2){
  try {
    Pipe pipe=(Pipe)par2.getConstructor(new Class[]{Integer.TYPE}).newInstance(new Object[]{Integer.valueOf(id)});
    MinecraftForgeClient.registerItemRenderer(par1.itemID,ItemRenderSpmodCore.instance);
    if (pipe != null) {
      par1.setPipesIcons(pipe.getIconProvider());
      par1.setPipeIconIndex(pipe.getIconIndex(ForgeDirection.UNKNOWN));
    }
  }
 catch (  Exception e) {
  }
}",0.9716684155299056
149484,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  BlockStack stack=new BlockStack(item);
  IBlockRenderer render=stack.getCastedBlock(IBlockRenderer.class);
  if (render != null) {
    RenderBlocksSpmod renderer=new RenderBlocksSpmod((RenderBlocks)data[0]);
    if (render.renderItemBlockBasic(item.getItemDamage())) {
      renderBlock(render,stack,renderer,type);
    }
 else {
      float[] key=render.getXYZForItemRenderer(type,stack.getMeta());
      if (key == null || key.length != 3) {
        key=new float[]{0.5F,0.5F,0.5F};
      }
      int renderPasses=render.getItemRenderPasses(stack.getMeta());
      if (renderPasses <= 0) {
        renderPasses=1;
      }
      for (int i=0; i < renderPasses; i++) {
        if (type == type.INVENTORY) {
          render.onItemRendering(helper,type,stack,i,key[0],key[1],key[2],item,renderer);
        }
 else {
          render.onItemRendering(helper,type,stack,i,key[0],key[1],key[2],item,renderer,data[1]);
        }
      }
    }
  }
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  BlockStack stack=new BlockStack(item);
  IBlockRenderer render=stack.getCastedBlock(IBlockRenderer.class);
  if (render != null) {
    RenderBlocks renderer=(RenderBlocks)data[0];
    if (render.renderItemBlockBasic(item.getItemDamage())) {
      renderBlock(render,stack,renderer,type);
    }
 else {
      float[] key=render.getXYZForItemRenderer(type,stack.getMeta());
      if (key == null || key.length != 3) {
        key=new float[]{0.5F,0.5F,0.5F};
      }
      int renderPasses=render.getItemRenderPasses(stack.getMeta());
      if (renderPasses <= 0) {
        renderPasses=1;
      }
      for (int i=0; i < renderPasses; i++) {
        if (type == type.INVENTORY) {
          render.onItemRendering(helper,type,stack,i,key[0],key[1],key[2],item,renderer);
        }
 else {
          render.onItemRendering(helper,type,stack,i,key[0],key[1],key[2],item,renderer,data[1]);
        }
      }
    }
  }
}",0.9763546798029556
149485,"private void renderLamp(TileLamp Lamp,double x,double y,double z){
  try {
    GL11.glPushMatrix();
    float f=1.0F;
    GL11.glTranslatef((float)x + 0.5F,(float)y + 0.5F,(float)z + 0.5F);
    EnumLampType type=Lamp.getType();
    if (type == null) {
      GL11.glPopMatrix();
      return;
    }
    if (type.hasFacing()) {
      int facing=Lamp.getFacing();
switch (facing) {
case 0:
        break;
case 1:
      GL11.glRotatef(180,1,0,0);
    break;
case 2:
  GL11.glRotatef(90,1,0,0);
break;
case 3:
GL11.glRotatef(-90,1,0,0);
break;
case 4:
GL11.glRotatef(-90,0,0,1);
break;
case 5:
GL11.glRotatef(90,0,0,1);
}
GL11.glRotatef(180,1,0,0);
}
if (type.getTexture() != null) {
this.bindTexture(type.getTexture());
}
GL11.glTranslatef(0,-f,0);
SpmodColor color=Lamp.getColor();
if (color != null) {
GL11.glColor4d(color.red,color.green,color.blue,1.0D);
}
lamp.render(0.0625F,type.getRenderType());
GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
lamp.renderAfter(0.0625F,type.getRenderType());
GL11.glPopMatrix();
}
 catch (Exception e) {
}
}","private void renderLamp(TileLamp Lamp,double x,double y,double z){
  GL11.glPushMatrix();
  try {
    float f=1.0F;
    GL11.glTranslatef((float)x + 0.5F,(float)y + 0.5F,(float)z + 0.5F);
    EnumLampType type=Lamp.getType();
    if (type == null) {
      GL11.glPopMatrix();
      return;
    }
    if (type.hasFacing()) {
      int facing=Lamp.getFacing();
switch (facing) {
case 0:
        break;
case 1:
      GL11.glRotatef(180,1,0,0);
    break;
case 2:
  GL11.glRotatef(90,1,0,0);
break;
case 3:
GL11.glRotatef(-90,1,0,0);
break;
case 4:
GL11.glRotatef(-90,0,0,1);
break;
case 5:
GL11.glRotatef(90,0,0,1);
}
GL11.glRotatef(180,1,0,0);
}
if (type.getTexture() != null) {
this.bindTexture(type.getTexture());
}
GL11.glTranslatef(0,-f,0);
SpmodColor color=Lamp.getColor();
if (color != null) {
GL11.glColor4d(color.red,color.green,color.blue,1.0D);
}
lamp.render(0.0625F,type.getRenderType());
GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
lamp.renderAfter(0.0625F,type.getRenderType());
}
 catch (Exception e) {
}
GL11.glPopMatrix();
}",0.9718992248062016
149486,"@Override public void registerRenderer(){
  ClientRegistry.bindTileEntitySpecialRenderer(TinyChest.class,new RenderStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(TinyTank.class,new RenderStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(AdvTinyChest.class,new RenderStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(AdvTinyTank.class,new RenderStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(MachineWaterSpender.class,new RenderWaterSpender());
  ClientRegistry.bindTileEntitySpecialRenderer(TinyHopper.class,new renderTransportTile());
  RenderingRegistry.registerEntityRenderingHandler(TCarts.class,new RenderTCarts());
  MinecraftForgeClient.registerItemRenderer(TinyItems.cell.itemID,new RendererItemCell());
  if (Loader.isModLoaded(""String_Node_Str"")) {
    NeiRegistry.getInstance().init();
  }
  TinyChestCart.cart=new ModelMinecart();
  AdvTinyChestCart.cart=new ModelMinecart();
  if (Loader.isModLoaded(""String_Node_Str"")) {
    loadPipeToolTips();
  }
}","@Override public void registerRenderer(){
  ClientRegistry.bindTileEntitySpecialRenderer(TinyChest.class,new RenderStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(TinyTank.class,new RenderStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(AdvTinyChest.class,new RenderStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(AdvTinyTank.class,new RenderStorageBlock());
  ClientRegistry.bindTileEntitySpecialRenderer(MachineWaterSpender.class,new RenderWaterSpender());
  ClientRegistry.bindTileEntitySpecialRenderer(TinyHopper.class,new renderTransportTile());
  RenderingRegistry.registerBlockHandler(MultiID,new RenderTransport());
  RenderingRegistry.registerEntityRenderingHandler(TCarts.class,new RenderTCarts());
  MinecraftForgeClient.registerItemRenderer(TinyItems.cell.itemID,new RendererItemCell());
  if (Loader.isModLoaded(""String_Node_Str"")) {
    NeiRegistry.getInstance().init();
  }
  TinyChestCart.cart=new ModelMinecart();
  AdvTinyChestCart.cart=new ModelMinecart();
  if (Loader.isModLoaded(""String_Node_Str"")) {
    loadPipeToolTips();
  }
}",0.9656470588235294
149487,"@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  mode=nbt.getInteger(""String_Node_Str"");
  isFull=nbt.getBoolean(""String_Node_Str"");
  isEmpty=nbt.getBoolean(""String_Node_Str"");
  NBTTagList nbttaglist=nbt.getTagList(""String_Node_Str"");
  inventory=new ItemStack[getSizeInventory()];
  for (int i=0; i < nbttaglist.tagCount(); ++i) {
    NBTTagCompound nbttagcompound1=(NBTTagCompound)nbttaglist.tagAt(i);
    byte b0=nbttagcompound1.getByte(""String_Node_Str"");
    if (b0 >= 0 && b0 < inventory.length) {
      inventory[b0]=ItemStack.loadItemStackFromNBT(nbttagcompound1);
    }
  }
}","@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  mode=nbt.getInteger(""String_Node_Str"");
  isFull=nbt.getBoolean(""String_Node_Str"");
  isEmpty=nbt.getBoolean(""String_Node_Str"");
  NBTTagList nbttaglist=nbt.getTagList(""String_Node_Str"");
  inventory=new ItemStack[mode < 0 ? 0 : mode];
  for (int i=0; i < nbttaglist.tagCount(); ++i) {
    NBTTagCompound nbttagcompound1=(NBTTagCompound)nbttaglist.tagAt(i);
    byte b0=nbttagcompound1.getByte(""String_Node_Str"");
    if (b0 >= 0 && b0 < inventory.length) {
      inventory[b0]=ItemStack.loadItemStackFromNBT(nbttagcompound1);
    }
  }
}",0.9701853344077356
149488,"@Override public boolean renderItemBlockBasic(int meta){
switch (meta) {
case 0:
case 4:
    return true;
}
return false;
}","@Override public boolean renderItemBlockBasic(int meta){
  return true;
}",0.7448979591836735
149489,"@Override public boolean renderItemBlock(int meta){
switch (meta) {
case 0:
case 4:
    return true;
}
return false;
}","@Override public boolean renderItemBlock(int meta){
  return true;
}",0.7311827956989247
149490,"@Override public boolean requiresRenderPass(int meta){
switch (meta) {
case 1:
case 2:
case 3:
    return true;
}
return super.requiresRenderPass(meta);
}","@Override public boolean requiresRenderPass(int meta){
  return meta > 0 && meta < 3;
}",0.5892116182572614
149491,"@Override public void clientSide(){
  ForgeRegister.regsiterClient();
  ClientRegistry.bindTileEntitySpecialRenderer(TileLamp.class,new RenderLamp());
  ClientRegistry.bindTileEntitySpecialRenderer(MultiPlate.class,new RenderHanfSign());
  MinecraftForgeClient.registerItemRenderer(APIBlocks.hempLamp.blockID,new ItemRendererLamp());
  RenderingRegistry.registerBlockHandler(RenderUtilsBlock.renderID,new RenderUtilsBlock());
  MinecraftForgeClient.registerItemRenderer(APIBlocks.blockUtils.blockID,new ItemRendererUtilsBlock());
  MinecraftForgeClient.registerItemRenderer(APIBlocks.statues.blockID,new ItemRendererStatue());
  ClientRegistry.bindTileEntitySpecialRenderer(KyrokaTheFox.class,new RenderKyroka());
}","@Override public void clientSide(){
  ForgeRegister.regsiterClient();
  ClientRegistry.bindTileEntitySpecialRenderer(TileLamp.class,new RenderLamp());
  ClientRegistry.bindTileEntitySpecialRenderer(MultiPlate.class,new RenderHanfSign());
  MinecraftForgeClient.registerItemRenderer(APIBlocks.hempLamp.blockID,new ItemRendererLamp());
  RenderingRegistry.registerBlockHandler(RenderUtilsBlock.renderID,new RenderUtilsBlock());
  MinecraftForgeClient.registerItemRenderer(APIBlocks.blockUtils.blockID,new ItemRendererUtilsBlock());
  MinecraftForgeClient.registerItemRenderer(APIBlocks.statues.blockID,new ItemRendererStatue());
  ClientRegistry.bindTileEntitySpecialRenderer(KyrokaTheFox.class,new RenderKyroka());
  RenderingRegistry.registerBlockHandler(new BlockRendererSpmodCore());
}",0.952063914780293
149492,"@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  String s=""String_Node_Str"";
  fontRenderer.drawString(s,-10 + xSize / 2 - fontRenderer.getStringWidth(s) / 2,-10,0xffffff);
  fontRenderer.drawString(I18n.getString(""String_Node_Str""),0,ySize - 20 + 2,0xffffff);
  this.buttonList.clear();
  int k=(width - xSize) / 2;
  int l=(height - ySize) / 2;
  if (tile.needPower()) {
    fontRenderer.drawString(""String_Node_Str"",50,20,0xffffff);
    return;
  }
  if (name) {
    if (!tile.isInRange(choosenTarget)) {
      name=false;
      text=null;
      choosenTarget=0;
      return;
    }
    BlockPosition pos=tile.getTarget(choosenTarget);
    ItemStack stack=pos.getAsBlockStack().getAsDroppedStack();
    if (stack == null)     stack=pos.getAsBlockStack().getAsDroppedStack(pos);
    if (stack == null)     stack=pos.getAsBlockStack().asItemStack();
    this.renderItem(stack,60,20);
    if (text == null) {
      text=new GuiTextField(fontRenderer,20,40,100,10);
      text.setCanLoseFocus(true);
      text.setFocused(true);
      if (tile.hasCustomName(pos.getAsList())) {
        text.setText(tile.getCustomName(pos.getAsList()));
      }
      return;
    }
    text.drawTextBox();
    buttonList.add(new GuiButton(8,k + 10,l + 70,50,20,""String_Node_Str""));
    buttonList.add(new GuiButton(9,k + 70,l + 70,50,20,""String_Node_Str""));
  }
 else {
    fontRenderer.drawString(""String_Node_Str"" + page,72,7,0xffffff);
    buttonList.add(new GuiButton(6,k + 90,l,20,20,""String_Node_Str""));
    buttonList.add(new GuiButton(7,k + 40,l,20,20,""String_Node_Str""));
    for (int i=0; i < 6; i++) {
      if (!tile.isInRange((page * 6) + i)) {
        return;
      }
      BlockPosition pos=tile.getTarget((page * 6) + i);
      String name=pos.getAsBlockStack().getDroppedBlockDisplayName();
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        name=pos.getAsBlockStack().getDroppedBlockDisplayName(pos);
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        name=pos.getAsBlockStack().getBlockDisplayName();
      }
      if (tile.hasCustomName(pos.getAsList())) {
        name=tile.getCustomName(pos.getAsList());
      }
      buttonList.add(new GuiButton(i,k,l + 25 + 20 * i,145,20,name));
      ItemStack stack=pos.getAsBlockStack().getAsDroppedStack();
      if (stack == null) {
        stack=pos.getAsBlockStack().getAsDroppedStack(pos);
      }
      if (stack == null) {
        stack=pos.getAsBlockStack().asItemStack();
      }
      this.renderItem(stack,-17,28 + (20 * i));
    }
  }
}","@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  String s=""String_Node_Str"";
  fontRenderer.drawString(s,-10 + xSize / 2 - fontRenderer.getStringWidth(s) / 2,-10,0xffffff);
  fontRenderer.drawString(I18n.getString(""String_Node_Str""),0,ySize - 20 + 2,0xffffff);
  this.buttonList.clear();
  int k=(width - xSize) / 2;
  int l=(height - ySize) / 2;
  if (tile.needPower()) {
    fontRenderer.drawString(""String_Node_Str"",50,20,0xffffff);
    return;
  }
  if (name) {
    if (!tile.isInRange(choosenTarget)) {
      name=false;
      text=null;
      choosenTarget=0;
      return;
    }
    BlockPosition pos=tile.getTarget(choosenTarget);
    ItemStack stack=pos.getAsBlockStack().getPicketBlock(pos,tile.getSideFromPlayer(mc.thePlayer.username));
    this.renderItem(stack,60,20);
    if (text == null) {
      text=new GuiTextField(fontRenderer,20,40,100,10);
      text.setCanLoseFocus(true);
      text.setFocused(true);
      if (tile.hasCustomName(pos.getAsList())) {
        text.setText(tile.getCustomName(pos.getAsList()));
      }
      return;
    }
    text.drawTextBox();
    buttonList.add(new GuiButton(8,k + 10,l + 70,50,20,""String_Node_Str""));
    buttonList.add(new GuiButton(9,k + 70,l + 70,50,20,""String_Node_Str""));
  }
 else {
    fontRenderer.drawString(""String_Node_Str"" + page,72,7,0xffffff);
    buttonList.add(new GuiButton(6,k + 90,l,20,20,""String_Node_Str""));
    buttonList.add(new GuiButton(7,k + 40,l,20,20,""String_Node_Str""));
    for (int i=0; i < 6; i++) {
      if (!tile.isInRange((page * 6) + i)) {
        return;
      }
      BlockPosition pos=tile.getTarget((page * 6) + i);
      String name=pos.getAsBlockStack().getPickedBlockDisplayName(pos,tile.getSideFromPlayer(mc.thePlayer.username));
      if (tile.hasCustomName(pos.getAsList())) {
        name=tile.getCustomName(pos.getAsList());
      }
      buttonList.add(new GuiButton(i,k,l + 25 + 20 * i,145,20,name));
      ItemStack stack=pos.getAsBlockStack().getPicketBlock(pos,tile.getSideFromPlayer(mc.thePlayer.username));
      if (stack == null) {
        continue;
      }
      this.renderItem(stack,-17,28 + (20 * i));
    }
  }
}",0.4719101123595505
149493,"public void loadEntityCatcher(IBlockAccess world,int x,int y,int z,Block block,RenderBlocks blocks){
  Tessellator tes=Tessellator.instance;
  Minecraft mc=FMLClientHandler.instance().getClient();
  tes.draw();
  mc.renderEngine.bindTexture(TextureMap.locationItemsTexture);
  tes.startDrawingQuads();
  tes.setNormal(1F,1F,0F);
  blocks.setOverrideBlockTexture(Item.porkRaw.getIconFromDamage(0));
  blocks.renderCrossedSquares(block,x,y,z);
  blocks.clearOverrideBlockTexture();
  tes.draw();
  tes.startDrawingQuads();
  mc.renderEngine.bindTexture(TextureMap.locationBlocksTexture);
  blocks.renderStandardBlock(block,x,y,z);
}","public void loadEntityCatcher(IBlockAccess world,int x,int y,int z,Block block,RenderBlocks render){
  Tessellator tes=Tessellator.instance;
  Minecraft mc=FMLClientHandler.instance().getClient();
  tes.draw();
  mc.renderEngine.bindTexture(TextureMap.locationItemsTexture);
  tes.startDrawingQuads();
  tes.setNormal(1F,1F,0F);
  render.setOverrideBlockTexture(Item.porkRaw.getIconFromDamage(0));
  render.renderCrossedSquares(block,x,y,z);
  render.clearOverrideBlockTexture();
  tes.draw();
  tes.startDrawingQuads();
  mc.renderEngine.bindTexture(TextureMap.locationBlocksTexture);
  render.renderStandardBlock(block,x,y,z);
}",0.919047619047619
149494,"public GuiCommands(InventoryPlayer par1){
  super(new AdvContainer(par1,24,143){
    @Override public boolean canInteractWith(    EntityPlayer entityplayer){
      return true;
    }
  }
);
  sender=par1.player;
  this.ySize=224;
  this.xSize=200;
}","public GuiCommands(InventoryPlayer par1){
  super(new AdvContainer(par1,24,143){
    @Override public boolean canInteractWith(    EntityPlayer entityplayer){
      return true;
    }
  }
);
  sender=par1.player;
  this.ySize=224;
  this.xSize=210;
}",0.9959839357429718
149495,"public void breakBlock(World par1World,int par2,int par3,int par4,int par5,int par6){
  super.breakBlock(par1World,par2,par3,par4,par5,par6);
  par1World.removeBlockTileEntity(par2,par3,par4);
}","public void breakBlock(World par1World,int par2,int par3,int par4,int par5,int par6){
  TileEntity tile=par1World.getBlockTileEntity(par2,par3,par4);
  if (tile != null && tile instanceof AdvTile) {
    ((AdvTile)tile).onBreaking();
  }
  super.breakBlock(par1World,par2,par3,par4,par5,par6);
  par1World.removeBlockTileEntity(par2,par3,par4);
}",0.7198515769944341
149496,"@Override public int addItem(ItemStack stack,boolean doAdd,ForgeDirection from){
  if (this.containesContainer(stack)) {
    ItemStack cu=inv[0].copy();
    if (cu.isItemEqual(stack)) {
      int left=64 - (stack.stackSize + cu.stackSize);
      if (left < 0) {
        if (doAdd) {
          cu.stackSize=64;
          inv[0]=cu;
        }
        return stack.stackSize - left;
      }
 else {
        if (doAdd) {
          cu.stackSize+=stack.stackSize;
          inv[0]=cu;
        }
        return stack.stackSize;
      }
    }
  }
  return 0;
}","@Override public int addItem(ItemStack stack,boolean doAdd,ForgeDirection from){
  if (this.containesContainer(stack)) {
    ItemStack cu=inv[0];
    if (cu != null) {
      if (cu.isItemEqual(stack)) {
        int left=stack.getMaxStackSize() - (stack.stackSize + cu.stackSize);
        if (left < 0) {
          if (doAdd) {
            cu.stackSize=64;
            inv[0]=cu;
          }
          return stack.stackSize - left;
        }
 else {
          if (doAdd) {
            cu.stackSize+=stack.stackSize;
            inv[0]=cu;
          }
          return stack.stackSize;
        }
      }
    }
 else {
      if (doAdd) {
        inv[0]=stack;
      }
      return stack.stackSize;
    }
  }
  return 0;
}",0.5538945712037766
149497,"@Override public LinkedList<ITrigger> getNeighborTriggers(Block block,TileEntity tile){
  LinkedList<ITrigger> triggers=new LinkedList<ITrigger>();
  if (tile != null) {
    if (tile instanceof TileEntityFurnace) {
      triggers.add(BCVariables.noWork);
      triggers.add(BCVariables.hasWork);
      triggers.add(BCVariables.needFuel);
    }
    try {
      if (tile instanceof IPowerReceptor) {
        triggers.add(BCVariables.requestPower);
      }
    }
 catch (    Exception e) {
    }
  }
  return triggers;
}","@Override public LinkedList<ITrigger> getNeighborTriggers(Block block,TileEntity tile){
  LinkedList<ITrigger> triggers=new LinkedList<ITrigger>();
  if (tile != null) {
    if (tile instanceof TileEntityFurnace) {
      triggers.add(BCVariables.noWork);
      triggers.add(BCVariables.hasWork);
      triggers.add(BCVariables.needFuel);
    }
    if (tile instanceof TileEntityBrewingStand) {
      triggers.add(BCVariables.hasWork);
      triggers.add(BCVariables.noWork);
    }
    try {
      if (tile instanceof IPowerReceptor) {
        triggers.add(BCVariables.requestPower);
      }
    }
 catch (    Exception e) {
    }
  }
  return triggers;
}",0.8830059777967549
149498,"@Override public boolean isTriggerActive(ForgeDirection side,TileEntity tile,ITriggerParameter parameter){
  if (tile != null) {
    if (tile instanceof PressureFurnace) {
      if (Active) {
        return ((PressureFurnace)tile).currentRecipe != null;
      }
 else {
        return ((PressureFurnace)tile).currentRecipe == null;
      }
    }
 else     if (tile instanceof TileEntityFurnace) {
      if (Active) {
        return canSmelt((TileEntityFurnace)tile);
      }
      return !canSmelt((TileEntityFurnace)tile);
    }
  }
  return false;
}","@Override public boolean isTriggerActive(ForgeDirection side,TileEntity tile,ITriggerParameter parameter){
  if (tile != null) {
    if (tile instanceof PressureFurnace) {
      if (Active) {
        return ((PressureFurnace)tile).currentRecipe != null;
      }
 else {
        return ((PressureFurnace)tile).currentRecipe == null;
      }
    }
    if (tile instanceof TileEntityFurnace) {
      if (Active) {
        return canSmelt((TileEntityFurnace)tile);
      }
      return !canSmelt((TileEntityFurnace)tile);
    }
    if (tile instanceof TileEntityBrewingStand) {
      TileEntityBrewingStand brew=(TileEntityBrewingStand)tile;
      if (Active) {
        return this.canBrew(brew);
      }
      return !this.canBrew(brew);
    }
  }
  return false;
}",0.8057882711348058
149499,"@Override public void onTick(){
  super.onTick();
  updateBlock();
  if (!worldObj.isRemote) {
    if (worldObj.getWorldTime() % 80 == 0) {
      PacketDispatcher.sendPacketToAllAround(xCoord,yCoord,zCoord,20,worldObj.provider.dimensionId,getDescriptionPacket());
    }
    if (worldObj.getWorldTime() % 15 == 0) {
      renderTank=WorldReading.isBlockBlocked(worldObj,xCoord,yCoord,zCoord,true);
    }
    if (this.tank.getFluid() != null) {
      if (canFillBelow()) {
        fillBelow();
      }
 else {
        fillToSide();
      }
    }
    if (this.BCTank) {
      TileEntity tile=worldObj.getBlockTileEntity(xCoord,yCoord + 1,zCoord);
      if (tile != null && tile instanceof TileTank) {
        TileTank tanks=(TileTank)tile;
        tanks.drain(ForgeDirection.DOWN,this.tank.fill(tanks.tank.getFluid(),true),true);
      }
    }
  }
}","@Override public void onTick(){
  super.onTick();
  updateBlock();
  if (!worldObj.isRemote) {
    if (worldObj.getWorldTime() % 80 == 0) {
      PacketDispatcher.sendPacketToAllAround(xCoord,yCoord,zCoord,20,worldObj.provider.dimensionId,getDescriptionPacket());
    }
    if (worldObj.getWorldTime() % 15 == 0) {
      renderTank=WorldReading.isBlockBlocked(worldObj,xCoord,yCoord,zCoord,true);
    }
    if (this.tank.getFluid() != null) {
      fillBelow();
      fillToSide();
    }
    if (this.BCTank) {
      TileEntity tile=worldObj.getBlockTileEntity(xCoord,yCoord + 1,zCoord);
      if (tile != null && tile instanceof TileTank) {
        TileTank tanks=(TileTank)tile;
        tanks.drain(ForgeDirection.DOWN,this.tank.fill(tanks.tank.getFluid(),true),true);
      }
    }
  }
}",0.9621026894865524
149500,"@Override public void loadPipe(ItemPipe par1,int id,Class<? extends Pipe> par2){
  try {
    Pipe pipe=(Pipe)par2.getConstructor(new Class[]{Integer.TYPE}).newInstance(new Object[]{Integer.valueOf(id)});
    if (pipe != null) {
      par1.setPipesIcons(pipe.getIconProvider());
      par1.setPipeIconIndex(pipe.getIconIndex(ForgeDirection.VALID_DIRECTIONS[0]));
    }
  }
 catch (  Exception e) {
  }
}","@Override public void loadPipe(ItemPipe par1,int id,Class<? extends Pipe> par2){
  try {
    Pipe pipe=(Pipe)par2.getConstructor(new Class[]{Integer.TYPE}).newInstance(new Object[]{Integer.valueOf(id)});
    MinecraftForgeClient.registerItemRenderer(par1.itemID,ItemRendererBCPipe.pipe);
    if (pipe != null) {
      par1.setPipesIcons(pipe.getIconProvider());
      par1.setPipeIconIndex(pipe.getIconIndex(ForgeDirection.VALID_DIRECTIONS[0]));
    }
  }
 catch (  Exception e) {
  }
}",0.9054054054054054
149501,"public void updateRedstone(){
  int fullSlot=0;
  for (int i=0; i < mode; i++) {
    ItemStack stack=getStackInSlot(i);
    if (stack != null && stack.stackSize >= stack.getMaxStackSize()) {
      fullSlot++;
    }
  }
  if (fullSlot == mode) {
    isFull=true;
  }
 else {
    isFull=false;
  }
  if (fullSlot == 0) {
    isEmpty=true;
  }
 else {
    isEmpty=false;
  }
  update=true;
}","public void updateRedstone(){
  int fullSlot=0;
  for (int i=0; i < this.getSizeInventory(); i++) {
    ItemStack stack=getStackInSlot(i);
    if (stack != null && stack.stackSize >= stack.getMaxStackSize()) {
      fullSlot++;
    }
  }
  if (fullSlot == this.getSizeInventory()) {
    isFull=true;
  }
 else {
    isFull=false;
  }
  if (fullSlot == 0) {
    isEmpty=true;
  }
 else {
    isEmpty=false;
  }
  update=true;
}",0.9336609336609336
149502,"public static void read(MinecraftServer server){
  if (server == null) {
    return;
  }
  String path=""String_Node_Str"";
  if (!server.isDedicatedServer()) {
    path+=""String_Node_Str"";
  }
  path+=server.getFolderName() + ""String_Node_Str"";
  FMLLog.getLogger().info(""String_Node_Str"");
  try {
    SpmodMod[] mods=nbtStorage.keySet().toArray(new SpmodMod[nbtStorage.keySet().size()]);
    for (int i=0; i < mods.length; i++) {
      SpmodMod mod=mods[i];
      File file=new File(path,mod.getName() + ""String_Node_Str"");
      if (file.exists() && file.isFile()) {
        DataInputStream stream=new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
        NBTTagCompound nbt=(NBTTagCompound)NBTBase.readNamedTag(stream);
        SpmodMod fileMod=SpmodModRegistry.getModFromName(nbt.getString(""String_Node_Str""));
        if (SpmodModRegistry.areModsEqual(mod,fileMod) && SpmodModRegistry.isModRegistered(mod)) {
          NBTTagList list=nbt.getTagList(""String_Node_Str"");
          for (int z=0; z < list.tagCount(); z++) {
            NBTTagCompound cu=(NBTTagCompound)list.tagAt(z);
            INBTReciver re=getReciverFromModAndID(mod,cu.getString(""String_Node_Str""));
            if (re != null) {
              re.loadFromNBT(cu);
            }
          }
        }
        stream.close();
      }
    }
  }
 catch (  Exception e) {
  }
  FMLLog.getLogger().info(""String_Node_Str"");
}","public static void read(MinecraftServer server){
  if (server == null) {
    return;
  }
  String path=""String_Node_Str"";
  if (!server.isDedicatedServer()) {
    path+=""String_Node_Str"";
  }
  path+=server.getFolderName() + ""String_Node_Str"";
  FMLLog.getLogger().info(""String_Node_Str"");
  try {
    SpmodMod[] mods=nbtStorage.keySet().toArray(new SpmodMod[nbtStorage.keySet().size()]);
    for (int i=0; i < mods.length; i++) {
      SpmodMod mod=mods[i];
      File file=new File(path,mod.getName() + ""String_Node_Str"");
      if (file.exists() && file.isFile()) {
        DataInputStream stream=new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
        NBTTagCompound nbt=(NBTTagCompound)NBTBase.readNamedTag(stream);
        SpmodMod fileMod=SpmodModRegistry.getModFromName(nbt.getString(""String_Node_Str""));
        if (SpmodModRegistry.areModsEqual(mod,fileMod) && SpmodModRegistry.isModRegistered(mod)) {
          NBTTagList list=nbt.getTagList(""String_Node_Str"");
          for (int z=0; z < list.tagCount(); z++) {
            NBTTagCompound cu=(NBTTagCompound)list.tagAt(z);
            INBTReciver re=getReciverFromModAndID(mod,cu.getString(""String_Node_Str""));
            if (re != null) {
              re.loadFromNBT(cu);
            }
          }
        }
        stream.close();
      }
    }
    for (    SpmodMod mod : mods) {
      ArrayList<INBTReciver> data=nbtStorage.get(mod);
      if (data != null) {
        for (int i=0; i < data.size(); i++) {
          INBTReciver nbt=data.get(i);
          nbt.finishLoading();
        }
      }
    }
  }
 catch (  Exception e) {
  }
  FMLLog.getLogger().info(""String_Node_Str"");
}",0.9168553866062764
149503,"public void PreCharge(ItemStack par1,World world,EntityPlayer player){
  if (!world.isRemote) {
    if (world.provider.dimensionId == -1) {
      if (par1.getItemDamage() == 1) {
        chargeCrystal(par1,world,player);
      }
      if (par1.getItemDamage() == 2) {
        cleanUpArea(par1,world);
      }
      if (par1.getItemDamage() == 4) {
        recharge(par1);
      }
    }
  }
}","public void PreCharge(ItemStack par1,World world,EntityPlayer player){
  if (!world.isRemote) {
    if (world.provider.dimensionId == -1) {
      if (dataLoaded == DataType.Loaded && hasWork(par1)) {
        if (par1.getItemDamage() == 1) {
          chargeCrystal(par1,world,player);
        }
        if (par1.getItemDamage() == 2) {
          cleanUpArea(par1,world);
        }
      }
      if (par1.getItemDamage() == 4) {
        recharge(par1);
      }
    }
  }
}",0.902552204176334
149504,"@Override public void loadFromNBT(NBTTagCompound par1){
  dataLoaded=false;
  NBTTagList first=par1.getTagList(""String_Node_Str"");
  todo.clear();
  for (int i=0; i < first.tagCount(); i++) {
    NBTTagCompound nbt=(NBTTagCompound)first.tagAt(i);
    todo.put(nbt.getString(""String_Node_Str""),new BlockPositionList(nbt));
  }
  NBTTagList second=par1.getTagList(""String_Node_Str"");
  replace.clear();
  for (int i=0; i < second.tagCount(); i++) {
    NBTTagCompound nbt=(NBTTagCompound)second.tagAt(i);
    replace.put(nbt.getString(""String_Node_Str""),new BlockPositionList(nbt));
  }
  dataLoaded=true;
}","@Override public void loadFromNBT(NBTTagCompound par1){
  dataLoaded=DataType.Loading;
  NBTTagList first=par1.getTagList(""String_Node_Str"");
  todo.clear();
  for (int i=0; i < first.tagCount(); i++) {
    NBTTagCompound nbt=(NBTTagCompound)first.tagAt(i);
    todo.put(nbt.getString(""String_Node_Str""),new BlockPositionList(nbt));
  }
  NBTTagList second=par1.getTagList(""String_Node_Str"");
  replace.clear();
  for (int i=0; i < second.tagCount(); i++) {
    NBTTagCompound nbt=(NBTTagCompound)second.tagAt(i);
    replace.put(nbt.getString(""String_Node_Str""),new BlockPositionList(nbt));
  }
  dataLoaded=DataType.Loaded;
}",0.9675324675324676
149505,"public static void initRecipes(){
  GameRegistry.addShapelessRecipe(new ItemStack(Item.skull,1,1),new Object[]{Item.diamond,Item.diamond,Block.coalBlock,Item.arrow,Item.arrow,Item.bone,Item.bone});
  GameRegistry.addRecipe(new ItemStack(TinyItems.interfaceBlock,4,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',TinyBlocks.normalPipe,'Y',Block.hopperBlock,'C',ItemGear.getGearFromType(GearType.Redstone),'V',Block.chest,'X',new ItemStack(TinyItems.ingots,1,EnumIngots.Aluminum.getIngotMeta())});
  GameRegistry.addRecipe(ItemNetherCrystal.createEmptyNetherCrystal(TinyItems.netherCrystal.itemID),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},'X',Item.netherStar,'C',Item.diamond,'Y',Item.enderPearl);
  GameRegistry.addShapelessRecipe(ItemNetherCrystal.createEmptyNetherCrystal(TinyItems.netherCrystal.itemID),new Object[]{new ItemStack(TinyItems.netherCrystal,1,5),Item.diamond,Item.enderPearl});
}","public static void initRecipes(){
  GameRegistry.addShapelessRecipe(new ItemStack(Item.skull,1,1),new Object[]{Item.diamond,Item.diamond,Block.coalBlock,Item.arrow,Item.arrow,Item.bone,Item.bone});
  GameRegistry.addRecipe(new ItemStack(TinyItems.interfaceBlock,4,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',TinyBlocks.normalPipe,'Y',Block.hopperBlock,'C',ItemGear.getGearFromType(GearType.Redstone),'V',Block.chest,'X',new ItemStack(TinyItems.ingots,1,EnumIngots.Aluminum.getIngotMeta())});
  GameRegistry.addRecipe(ItemNetherCrystal.createEmptyNetherCrystal(TinyItems.netherCrystal.itemID),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Item.netherStar,'C',Item.diamond,'Y',Item.enderPearl});
  GameRegistry.addShapelessRecipe(ItemNetherCrystal.createEmptyNetherCrystal(TinyItems.netherCrystal.itemID),new Object[]{new ItemStack(TinyItems.netherCrystal,1,5),Item.diamond,Item.enderPearl});
}",0.9398099260823654
149506,"private void login(final WifiManager wm,final boolean isFirst){
  final String ssid=WakefulIntentService.stripQuotes(wm.getConnectionInfo().getSSID());
  final LoginResult lr=LoginManager.login(ssid,getUsername(),getPassword());
switch (lr.getResponseCode()) {
case Constants.WISPR_RESPONSE_CODE_LOGIN_SUCCEEDED:
case Constants.CUST_ALREADY_CONNECTED:
    handleSuccess(ssid,lr,isFirst);
  break;
case Constants.WISPR_RESPONSE_CODE_RADIUS_ERROR:
case Constants.WISPR_RESPONSE_CODE_NETWORK_ADMIN_ERROR:
case Constants.FON_SESSION_LIMIT_EXCEEDED:
case Constants.FON_SPOT_LIMIT_EXCEEDED:
case Constants.FON_UNKNOWN_ERROR:
case Constants.CUST_WISPR_NOT_PRESENT:
handleError(wm,lr);
break;
case Constants.FON_NOT_ENOUGH_CREDIT:
case Constants.FON_USER_IN_BLACK_LIST:
case Constants.FON_NOT_AUTHORIZED:
case Constants.FON_CUSTOMIZED_ERROR:
case Constants.FON_INTERNAL_ERROR:
case Constants.FON_INVALID_TEMPORARY_CREDENTIAL:
case Constants.FON_AUTHORIZATION_CONNECTION_ERROR:
notifyFonError(lr);
break;
case Constants.FON_INVALID_CREDENTIALS_ALT:
case Constants.FON_INVALID_CREDENTIALS:
case Constants.CUST_CREDENTIALS_ERROR:
notifyCredentialsError();
break;
default :
break;
}
}","private void login(final WifiManager wm,final boolean isFirst){
  final String ssid=WakefulIntentService.stripQuotes(wm.getConnectionInfo().getSSID());
  final LoginResult lr=LoginManager.login(ssid,getUsername(),getPassword());
switch (lr.getResponseCode()) {
case Constants.WISPR_RESPONSE_CODE_LOGIN_SUCCEEDED:
case Constants.CUST_ALREADY_CONNECTED:
    handleSuccess(ssid,lr,isFirst);
  break;
case Constants.WISPR_RESPONSE_CODE_RADIUS_ERROR:
case Constants.WISPR_RESPONSE_CODE_NETWORK_ADMIN_ERROR:
case Constants.FON_SESSION_LIMIT_EXCEEDED:
case Constants.FON_SPOT_LIMIT_EXCEEDED:
case Constants.FON_UNKNOWN_ERROR:
case Constants.CUST_WISPR_NOT_PRESENT:
handleError(wm,lr);
break;
case Constants.FON_INVALID_CREDENTIALS_ALT:
case Constants.FON_NOT_ENOUGH_CREDIT:
case Constants.FON_INVALID_CREDENTIALS:
case Constants.FON_USER_IN_BLACK_LIST:
case Constants.FON_NOT_AUTHORIZED:
case Constants.FON_CUSTOMIZED_ERROR:
case Constants.FON_INTERNAL_ERROR:
case Constants.FON_INVALID_TEMPORARY_CREDENTIAL:
case Constants.FON_AUTHORIZATION_CONNECTION_ERROR:
notifyFonError(lr);
break;
case Constants.WISPR_RESPONSE_CODE_ACCESS_GATEWAY_INTERNAL_ERROR:
wm.removeNetwork(wm.getConnectionInfo().getNetworkId());
break;
case Constants.CUST_CREDENTIALS_ERROR:
notifyCredentialsError();
break;
default :
break;
}
}",0.8924818108326596
149507,"public static LoginResult login(final String ssid,final String user,final String password){
  int rc=Constants.WISPR_RESPONSE_CODE_ACCESS_GATEWAY_INTERNAL_ERROR;
  String rm=null;
  String lu=null;
  if ((user.length() != 0) && (password.length() != 0)) {
    String c=LoginManager.getTestUrlContent();
    if (c != null) {
      if (!LoginManager.isConnected(c)) {
        if (LoginManager.isFon(ssid)) {
          c=LoginManager.getXml(c);
          if (c != null) {
            final FonInfoHandler wih=new FonInfoHandler();
            if (LoginManager.parseXml(c,wih) && (wih.getMessageType() == Constants.WISPR_MESSAGE_TYPE_INITIAL_REDIRECT) && (wih.getResponseCode() == Constants.WISPR_RESPONSE_CODE_NO_ERROR)) {
              c=wih.getLoginURL();
            }
          }
        }
 else         if (LoginManager.isSfr(ssid)) {
          c=LoginManager.getSfrUrl(c);
        }
        if (c != null) {
          c=LoginManager.doLogin(c,user,password);
          if (c != null) {
            FonResponseHandler wrh=new FonResponseHandler();
            if (LoginManager.parseXml(c,wrh)) {
              rc=wrh.getResponseCode();
              if (wrh.getResponseCode() == Constants.WISPR_RESPONSE_CODE_AUTH_PENDING) {
                c=HttpUtils.get(wrh.getLoginResultsURL(),Constants.HTTP_TIMEOUT);
                if (c != null) {
                  wrh=new FonResponseHandler();
                  if (LoginManager.parseXml(c,wrh)) {
                    rc=wrh.getResponseCode();
                    lu=wrh.getLogoffURL();
                  }
                }
              }
 else               if (rc == Constants.WISPR_RESPONSE_CODE_LOGIN_SUCCEEDED) {
                lu=wrh.getLogoffURL();
              }
 else               if (rc == Constants.WISPR_RESPONSE_CODE_LOGIN_FAILED) {
                rc=wrh.getFonResponseCode();
                rm=wrh.getReplyMessage();
              }
            }
          }
 else           if (LoginManager.isConnected(LoginManager.getTestUrlContent())) {
            rc=Constants.WISPR_RESPONSE_CODE_LOGIN_SUCCEEDED;
          }
        }
 else {
          rc=Constants.CUST_WISPR_NOT_PRESENT;
        }
      }
 else {
        rc=Constants.CUST_ALREADY_CONNECTED;
      }
    }
  }
 else {
    rc=Constants.CUST_CREDENTIALS_ERROR;
  }
  return new LoginResult(rc,rm,lu);
}","public static LoginResult login(final String ssid,final String user,final String password){
  int rc=Constants.WISPR_RESPONSE_CODE_ACCESS_GATEWAY_INTERNAL_ERROR;
  String rm=null;
  String lu=null;
  if ((user.length() != 0) && (password.length() != 0)) {
    String c=LoginManager.getTestUrlContent();
    if (c != null) {
      if (!LoginManager.isConnected(c)) {
        if (LoginManager.isFon(ssid)) {
          c=LoginManager.getXml(c);
          if (c != null) {
            final FonInfoHandler wih=new FonInfoHandler();
            if (LoginManager.parseXml(c,wih) && (wih.getMessageType() == Constants.WISPR_MESSAGE_TYPE_INITIAL_REDIRECT) && (wih.getResponseCode() == Constants.WISPR_RESPONSE_CODE_NO_ERROR)) {
              c=wih.getLoginURL();
            }
          }
        }
 else         if (LoginManager.isSfr(ssid)) {
          c=LoginManager.getSfrUrl(c);
        }
        if (c != null) {
          c=LoginManager.doLogin(c,user,password);
          if (c != null) {
            FonResponseHandler wrh=new FonResponseHandler();
            if (LoginManager.parseXml(c,wrh)) {
              rc=wrh.getResponseCode();
              if (rc == Constants.WISPR_RESPONSE_CODE_AUTH_PENDING) {
                c=HttpUtils.get(wrh.getLoginResultsURL(),Constants.HTTP_TIMEOUT);
                if (c != null) {
                  wrh=new FonResponseHandler();
                  if (LoginManager.parseXml(c,wrh)) {
                    rc=wrh.getResponseCode();
                    lu=wrh.getLogoffURL();
                  }
                }
              }
 else               if (rc == Constants.WISPR_RESPONSE_CODE_LOGIN_SUCCEEDED) {
                lu=wrh.getLogoffURL();
              }
 else               if (rc == Constants.WISPR_RESPONSE_CODE_LOGIN_FAILED) {
                rc=wrh.getFonResponseCode();
                rm=wrh.getReplyMessage();
              }
 else {
                rc=Constants.FON_UNKNOWN_ERROR;
              }
            }
          }
 else           if (LoginManager.isConnected(LoginManager.getTestUrlContent())) {
            rc=Constants.WISPR_RESPONSE_CODE_LOGIN_SUCCEEDED;
          }
        }
 else {
          rc=Constants.CUST_WISPR_NOT_PRESENT;
        }
      }
 else {
        rc=Constants.CUST_ALREADY_CONNECTED;
      }
    }
  }
 else {
    rc=Constants.CUST_CREDENTIALS_ERROR;
  }
  return new LoginResult(rc,rm,lu);
}",0.9798087141339
149508,"/** 
 * Updates the weighted normaliser for the Gaussian.
 * @param sigmaX The Gaussian standard deviation in X
 * @param sigmaY The Gaussian standard deviation in Y
 */
private void updateWeightedNormaliser(final double sigmaX,final double sigmaY){
  if (normaliser == null || sx != sigmaX || sy != sigmaY) {
    float[] normalisation=weights.clone();
    sx=sigmaX;
    sy=sigmaY;
    DPGaussianFilter gf=new DPGaussianFilter(accuracy);
    gf.convolve(normalisation,weightHeight,weightWidth,sigmaX,sigmaY);
    normaliser=new PerPixelNormaliser(normalisation);
  }
}","/** 
 * Updates the weighted normaliser for the Gaussian.
 * @param sigmaX The Gaussian standard deviation in X
 * @param sigmaY The Gaussian standard deviation in Y
 */
private void updateWeightedNormaliser(final double sigmaX,final double sigmaY){
  if (normaliser == null || sx != sigmaX || sy != sigmaY) {
    float[] normalisation=weights.clone();
    sx=sigmaX;
    sy=sigmaY;
    DPGaussianFilter gf=new DPGaussianFilter(accuracy);
    gf.convolve(normalisation,weightWidth,weightHeight,sigmaX,sigmaY);
    normaliser=new PerPixelNormaliser(normalisation);
  }
}",0.9806678383128296
149509,"/** 
 * Updates the weighted normaliser for the Gaussian.
 * @param sigmaX The Gaussian standard deviation in X
 * @param sigmaY The Gaussian standard deviation in Y
 */
private void updateWeightedNormaliser(final double sigmaX,final double sigmaY){
  if (normaliser == null || sx != sigmaX || sy != sigmaY) {
    float[] normalisation=weights.clone();
    sx=sigmaX;
    sy=sigmaY;
    DoubleGaussianFilter gf=new DoubleGaussianFilter(accuracy);
    gf.convolve(normalisation,weightHeight,weightWidth,sigmaX,sigmaY);
    normaliser=new PerPixelNormaliser(normalisation);
  }
}","/** 
 * Updates the weighted normaliser for the Gaussian.
 * @param sigmaX The Gaussian standard deviation in X
 * @param sigmaY The Gaussian standard deviation in Y
 */
private void updateWeightedNormaliser(final double sigmaX,final double sigmaY){
  if (normaliser == null || sx != sigmaX || sy != sigmaY) {
    float[] normalisation=weights.clone();
    sx=sigmaX;
    sy=sigmaY;
    DoubleGaussianFilter gf=new DoubleGaussianFilter(accuracy);
    gf.convolve(normalisation,weightWidth,weightHeight,sigmaX,sigmaY);
    normaliser=new PerPixelNormaliser(normalisation);
  }
}",0.9809358752166378
149510,"/** 
 * Blur an image in one direction (x or y) by a Gaussian.
 * @param pixels The input/output data (packed in YX order)
 * @param roi The region to blur
 * @param width The width of the data
 * @param height The height of the data
 * @param sigma Standard deviation of the Gaussian
 * @param xDirection True for bluring in x direction, false for y direction
 * @param extraLines Number of lines (parallel to the blurring direction) below and above the roi bounds that should be processed.
 */
private void blur1Direction(final float[] pixels,Rectangle roi,final int width,final int height,final double sigma,final boolean xDirection,final int extraLines){
  final int UPSCALE_K_RADIUS=2;
  final double MIN_DOWNSCALED_SIGMA=4.;
  final int length=xDirection ? width : height;
  final int pointInc=xDirection ? 1 : width;
  final int lineInc=xDirection ? width : 1;
  final int lineFromA=(xDirection ? roi.y : roi.x) - extraLines;
  final int lineFrom;
  if (lineFromA < 0)   lineFrom=0;
 else   lineFrom=lineFromA;
  final int lineToA=(xDirection ? roi.y + roi.height : roi.x + roi.width) + extraLines;
  final int lineTo;
  if (lineToA > (xDirection ? height : width))   lineTo=(xDirection ? height : width);
 else   lineTo=lineToA;
  final int writeFrom=xDirection ? roi.x : roi.y;
  final int writeTo=xDirection ? roi.x + roi.width : roi.y + roi.height;
  final boolean doDownscaling=sigma > 2 * MIN_DOWNSCALED_SIGMA + 0.5;
  final int reduceBy=doDownscaling ? Math.min((int)Math.floor(sigma / MIN_DOWNSCALED_SIGMA),length) : 1;
  final double sigmaGauss=doDownscaling ? Math.sqrt(sigma * sigma / (reduceBy * reduceBy) - 1. / 3. - 1. / 4.) : sigma;
  final int maxLength=doDownscaling ? (length + reduceBy - 1) / reduceBy + 2 * (UPSCALE_K_RADIUS + 1) : length;
  final float[][] gaussKernel=makeGaussianKernel(sigmaGauss,maxLength);
  final int kRadius=gaussKernel[0].length * reduceBy;
  final int readFrom=(writeFrom - kRadius < 0) ? 0 : writeFrom - kRadius;
  final int readTo=(writeTo + kRadius > length) ? length : writeTo + kRadius;
  final int newLength=doDownscaling ? (readTo - readFrom + reduceBy - 1) / reduceBy + 2 * (UPSCALE_K_RADIUS + 1) : length;
  final int unscaled0=readFrom - (UPSCALE_K_RADIUS + 1) * reduceBy;
  if (doDownscaling)   createScalingKernels(reduceBy);
  final float[] cache1=new float[newLength];
  final float[] cache2=doDownscaling ? new float[newLength] : null;
  int pixel0=lineFrom * lineInc;
  for (int line=lineFrom; line < lineTo; line+=1, pixel0+=lineInc) {
    if (doDownscaling) {
      downscaleLine(pixels,cache1,downscaleKernel,reduceBy,pixel0,unscaled0,length,pointInc,newLength);
      convolveLine(cache1,cache2,gaussKernel,0,newLength,1,newLength - 1,0,1);
      upscaleLine(cache2,pixels,upscaleKernel,reduceBy,pixel0,unscaled0,writeFrom,writeTo,pointInc);
    }
 else {
      int p=pixel0 + readFrom * pointInc;
      for (int i=readFrom; i < readTo; i++, p+=pointInc)       cache1[i]=pixels[p];
      convolveLine(cache1,pixels,gaussKernel,readFrom,readTo,writeFrom,writeTo,pixel0,pointInc);
    }
  }
}","/** 
 * Blur an image in one direction (x or y) by a Gaussian.
 * @param pixels The input/output data (packed in YX order)
 * @param roi The region to blur
 * @param width The width of the data
 * @param height The height of the data
 * @param sigma Standard deviation of the Gaussian
 * @param xDirection True for blurring in x direction, false for y direction
 * @param extraLines Number of lines (parallel to the blurring direction) below and above the roi bounds that should be processed.
 */
private void blur1Direction(final float[] pixels,Rectangle roi,final int width,final int height,final double sigma,final boolean xDirection,final int extraLines){
  final int UPSCALE_K_RADIUS=2;
  final double MIN_DOWNSCALED_SIGMA=4.;
  final int length=xDirection ? width : height;
  final int pointInc=xDirection ? 1 : width;
  final int lineInc=xDirection ? width : 1;
  final int lineFromA=(xDirection ? roi.y : roi.x) - extraLines;
  final int lineFrom;
  if (lineFromA < 0)   lineFrom=0;
 else   lineFrom=lineFromA;
  final int lineToA=(xDirection ? roi.y + roi.height : roi.x + roi.width) + extraLines;
  final int lineTo;
  if (lineToA > (xDirection ? height : width))   lineTo=(xDirection ? height : width);
 else   lineTo=lineToA;
  final int writeFrom=xDirection ? roi.x : roi.y;
  final int writeTo=xDirection ? roi.x + roi.width : roi.y + roi.height;
  final boolean doDownscaling=sigma > 2 * MIN_DOWNSCALED_SIGMA + 0.5;
  final int reduceBy=doDownscaling ? Math.min((int)Math.floor(sigma / MIN_DOWNSCALED_SIGMA),length) : 1;
  final double sigmaGauss=doDownscaling ? Math.sqrt(sigma * sigma / (reduceBy * reduceBy) - 1. / 3. - 1. / 4.) : sigma;
  final int maxLength=doDownscaling ? (length + reduceBy - 1) / reduceBy + 2 * (UPSCALE_K_RADIUS + 1) : length;
  final float[][] gaussKernel=makeGaussianKernel(sigmaGauss,maxLength);
  final int kRadius=gaussKernel[0].length * reduceBy;
  final int readFrom=(writeFrom - kRadius < 0) ? 0 : writeFrom - kRadius;
  final int readTo=(writeTo + kRadius > length) ? length : writeTo + kRadius;
  final int newLength=doDownscaling ? (readTo - readFrom + reduceBy - 1) / reduceBy + 2 * (UPSCALE_K_RADIUS + 1) : length;
  final int unscaled0=readFrom - (UPSCALE_K_RADIUS + 1) * reduceBy;
  if (doDownscaling)   createScalingKernels(reduceBy);
  final float[] cache1=new float[newLength];
  final float[] cache2=doDownscaling ? new float[newLength] : null;
  int pixel0=lineFrom * lineInc;
  for (int line=lineFrom; line < lineTo; line+=1, pixel0+=lineInc) {
    if (doDownscaling) {
      downscaleLine(pixels,cache1,downscaleKernel,reduceBy,pixel0,unscaled0,length,pointInc,newLength);
      convolveLine(cache1,cache2,gaussKernel,0,newLength,1,newLength - 1,0,1);
      upscaleLine(cache2,pixels,upscaleKernel,reduceBy,pixel0,unscaled0,writeFrom,writeTo,pointInc);
    }
 else {
      int p=pixel0 + readFrom * pointInc;
      for (int i=readFrom; i < readTo; i++, p+=pointInc)       cache1[i]=pixels[p];
      convolveLine(cache1,pixels,gaussKernel,readFrom,readTo,writeFrom,writeTo,pixel0,pointInc);
    }
  }
}",0.999836787987596
149511,"/** 
 * Create a kernel for upscaling. The kernel function is a convolution of four unit squares, i.e., four uniform kernels with value +1 from -0.5 to +0.5 (in downscaled coordinates). The second derivative of this kernel is smooth, the third is not. Its standard deviation is 1/sqrt(3) in downscaled cordinates. The kernel runs from [-2 to +2[, corresponding to array index 0 ... 4*unitLength (whereby the last point is not in the array any more).
 */
final static private float[] makeUpscaleKernel(final int unitLength){
  final float[] kernel=new float[4 * unitLength];
  final int mid=2 * unitLength;
  kernel[0]=0;
  for (int i=0; i < unitLength; i++) {
    final double x=i / (double)unitLength;
    final float v=(float)((2. / 3. - x * x * (1 - 0.5 * x)));
    kernel[mid + i]=v;
    kernel[mid - i]=v;
  }
  for (int i=unitLength; i < 2 * unitLength; i++) {
    final double x=i / (double)unitLength;
    final float v=(float)((2. - x) * (2. - x) * (2. - x) / 6.);
    kernel[mid + i]=v;
    kernel[mid - i]=v;
  }
  return kernel;
}","/** 
 * Create a kernel for upscaling. The kernel function is a convolution of four unit squares, i.e., four uniform kernels with value +1 from -0.5 to +0.5 (in downscaled coordinates). The second derivative of this kernel is smooth, the third is not. Its standard deviation is 1/sqrt(3) in downscaled coordinates. The kernel runs from [-2 to +2[, corresponding to array index 0 ... 4*unitLength (whereby the last point is not in the array any more).
 */
final static private float[] makeUpscaleKernel(final int unitLength){
  final float[] kernel=new float[4 * unitLength];
  final int mid=2 * unitLength;
  kernel[0]=0;
  for (int i=0; i < unitLength; i++) {
    final double x=i / (double)unitLength;
    final float v=(float)((2. / 3. - x * x * (1 - 0.5 * x)));
    kernel[mid + i]=v;
    kernel[mid - i]=v;
  }
  for (int i=unitLength; i < 2 * unitLength; i++) {
    final double x=i / (double)unitLength;
    final float v=(float)((2. - x) * (2. - x) * (2. - x) / 6.);
    kernel[mid + i]=v;
    kernel[mid - i]=v;
  }
  return kernel;
}",0.9995203836930456
149512,"/** 
 * Updates the weighted normaliser for the Gaussian.
 * @param sigmaX The Gaussian standard deviation in X
 * @param sigmaY The Gaussian standard deviation in Y
 */
private void updateWeightedNormaliser(final double sigmaX,final double sigmaY){
  if (normaliser == null || sx != sigmaX || sy != sigmaY) {
    float[] normalisation=weights.clone();
    sx=sigmaX;
    sy=sigmaY;
    GaussianFilter gf=new GaussianFilter(accuracy);
    gf.convolve(normalisation,weightHeight,weightWidth,sigmaX,sigmaY);
    normaliser=new PerPixelNormaliser(normalisation);
  }
}","/** 
 * Updates the weighted normaliser for the Gaussian.
 * @param sigmaX The Gaussian standard deviation in X
 * @param sigmaY The Gaussian standard deviation in Y
 */
private void updateWeightedNormaliser(final double sigmaX,final double sigmaY){
  if (normaliser == null || sx != sigmaX || sy != sigmaY) {
    float[] normalisation=weights.clone();
    sx=sigmaX;
    sy=sigmaY;
    GaussianFilter gf=new GaussianFilter(accuracy);
    gf.convolve(normalisation,weightWidth,weightHeight,sigmaX,sigmaY);
    normaliser=new PerPixelNormaliser(normalisation);
  }
}",0.9805309734513274
149513,"/** 
 * Instantiates a new kernel filter.
 * @param kernel the kernel
 * @param kw the kernel width (must be odd)
 * @param kh the kernel height (must be odd)
 */
public KernelFilter(float[] kernel,int kw,int kh){
  if (kw < 1 || kh < 1)   throw new IllegalArgumentException(""String_Node_Str"");
  if (kw * kh != kernel.length)   throw new IllegalArgumentException(""String_Node_Str"");
  if ((kw & 1) != 1 || (kh & 1) != 1)   throw new IllegalArgumentException(""String_Node_Str"" + kw + ""String_Node_Str""+ kh+ ""String_Node_Str"");
  this.kernel=kernel.clone();
  this.kw=kw;
  this.kh=kh;
  this.scale=getScale(kernel);
}","/** 
 * Instantiates a new kernel filter with no normaliser.
 * @param kernel the kernel
 * @param kw the kernel width (must be odd)
 * @param kh the kernel height (must be odd)
 * @param scale the scale
 */
private KernelFilter(float[] kernel,int kw,int kh,double scale){
  this.kernel=kernel.clone();
  this.kw=kw;
  this.kh=kh;
  this.scale=scale;
}",0.5036119711042312
149514,"/** 
 * Updates the weighted normaliser for the convolution
 */
private void updateWeightedNormaliser(){
  if (normaliser == null) {
    float[] normalisation=weights.clone();
    KernelFilter kf=new KernelFilter(kernel,kw,kh);
    kf.convolve(normalisation,weightHeight,weightWidth);
    normaliser=new PerPixelNormaliser(normalisation);
  }
}","/** 
 * Updates the weighted normaliser for the convolution
 */
private void updateWeightedNormaliser(){
  if (normaliser == null) {
    float[] normalisation=weights.clone();
    KernelFilter kf=new KernelFilter(kernel,kw,kh,scale);
    kf.convolve(normalisation,weightWidth,weightHeight);
    normaliser=new PerPixelNormaliser(normalisation);
  }
}",0.956772334293948
149515,"private void cannotSubtractConstantBackgroundAndComputeLogLikelihoodRatio(BaseNonLinearFunction nlf1,BaseNonLinearFunction nlf2,BaseNonLinearFunction nlf3){
  int n=maxx * maxx;
  double[] a=new double[]{1};
  nlf1.initialise(a);
  nlf2.initialise(a);
  nlf3.initialise(a);
  RandomDataGenerator rdg=new RandomDataGenerator(TestSettings.getRandomGenerator());
  double[] x=SimpleArrayUtils.newArray(n,0,1.0);
  double[] u=new double[x.length];
  double[] b1=new double[x.length];
  double[] b2=new double[x.length];
  double[] b3=new double[x.length];
  for (int i=0; i < n; i++) {
    b1[i]=nlf1.eval(i);
    b2[i]=nlf2.eval(i);
    b3[i]=nlf3.eval(i);
    u[i]=b1[i] + b2[i] + b3[i];
    if (u[i] > 0)     x[i]=rdg.nextPoisson(u[i]);
  }
  double[] b12=add(b1,b2);
  double ll1a=PoissonCalculator.logLikelihood(b12,x);
  double ll2a=PoissonCalculator.logLikelihood(add(b12,b3),x);
  double llra=-2 * (ll1a - ll2a);
  x=subtract(x,b1);
  double ll1b=PoissonCalculator.logLikelihood(b2,x);
  double ll2b=PoissonCalculator.logLikelihood(add(b2,b3),x);
  double llrb=-2 * (ll1b - ll2b);
  Assert.assertNotEquals(""String_Node_Str"",llra,llrb,llra * 1e-10);
}","private void cannotSubtractConstantBackgroundAndComputeLogLikelihoodRatio(BaseNonLinearFunction nlf1,BaseNonLinearFunction nlf2,BaseNonLinearFunction nlf3){
  int n=maxx * maxx;
  double[] a=new double[]{1};
  nlf1.initialise(a);
  nlf2.initialise(a);
  nlf3.initialise(a);
  RandomDataGenerator rdg=new RandomDataGenerator(TestSettings.getRandomGenerator());
  double[] x=SimpleArrayUtils.newArray(n,0,1.0);
  double[] u=new double[x.length];
  double[] b1=new double[x.length];
  double[] b2=new double[x.length];
  double[] b3=new double[x.length];
  for (int i=0; i < n; i++) {
    b1[i]=nlf1.eval(i);
    b2[i]=nlf2.eval(i);
    b3[i]=nlf3.eval(i);
    u[i]=b1[i] + b2[i] + b3[i];
    if (u[i] > 0)     x[i]=rdg.nextPoisson(u[i]);
  }
  double[] b12=add(b1,b2);
  double ll1a=PoissonCalculator.logLikelihood(b12,x);
  double ll2a=PoissonCalculator.logLikelihood(add(b12,b3),x);
  double llra=-2 * (ll1a - ll2a);
  x=subtract(x,b1);
  double ll1b=PoissonCalculator.logLikelihood(b2,x);
  double ll2b=PoissonCalculator.logLikelihood(add(b2,b3),x);
  double llrb=-2 * (ll1b - ll2b);
  TestAssert.assertNotEqualsRelative(""String_Node_Str"",llra,llrb,1e-10);
}",0.9917855598789452
149516,"@Test public void canComputeLikelihoodForIntegerData(){
  for (  double u : photons) {
    PoissonDistribution pd=new PoissonDistribution(u);
    for (int x=0; x < 100; x++) {
      double e=pd.probability(x);
      double o=PoissonCalculator.likelihood(u,x);
      if (e > 1e-100)       Assert.assertEquals(e,o,e * 1e-10);
      e=pd.logProbability(x);
      o=PoissonCalculator.logLikelihood(u,x);
      Assert.assertEquals(e,o,Math.abs(e) * 1e-10);
    }
  }
}","@Test public void canComputeLikelihoodForIntegerData(){
  for (  double u : photons) {
    PoissonDistribution pd=new PoissonDistribution(u);
    for (int x=0; x < 100; x++) {
      double e=pd.probability(x);
      double o=PoissonCalculator.likelihood(u,x);
      if (e > 1e-100)       TestAssert.assertEqualsRelative(e,o,1e-10);
      e=pd.logProbability(x);
      o=PoissonCalculator.logLikelihood(u,x);
      TestAssert.assertEqualsRelative(e,o,1e-10);
    }
  }
}",0.9334763948497854
149517,"@Test public void canComputeFastLog_FastLikelihoodForIntegerData(){
  FastLog fastLog=FastLogFactory.getFastLog();
  for (  double u : photons) {
    PoissonDistribution pd=new PoissonDistribution(u);
    for (int x=0; x < 100; x++) {
      double e=pd.probability(x);
      double o=PoissonCalculator.fastLikelihood(u,x,fastLog);
      if (e > 1e-100)       Assert.assertEquals(e,o,e * 1e-4);
      e=pd.logProbability(x);
      o=PoissonCalculator.fastLogLikelihood(u,x,fastLog);
      Assert.assertEquals(e,o,Math.abs(e) * 1e-4);
    }
  }
}","@Test public void canComputeFastLog_FastLikelihoodForIntegerData(){
  FastLog fastLog=FastLogFactory.getFastLog();
  for (  double u : photons) {
    PoissonDistribution pd=new PoissonDistribution(u);
    for (int x=0; x < 100; x++) {
      double e=pd.probability(x);
      double o=PoissonCalculator.fastLikelihood(u,x,fastLog);
      if (e > 1e-100)       TestAssert.assertEqualsRelative(e,o,1e-4);
      e=pd.logProbability(x);
      o=PoissonCalculator.fastLogLikelihood(u,x,fastLog);
      TestAssert.assertEqualsRelative(e,o,1e-4);
    }
  }
}",0.943327239488117
149518,"private void canComputeLogLikelihoodRatio(BaseNonLinearFunction nlf){
  TestSettings.info(nlf.name);
  int n=maxx * maxx;
  double[] a=new double[]{1};
  nlf.initialise(a);
  RandomDataGenerator rdg=new RandomDataGenerator(TestSettings.getRandomGenerator());
  double[] x=new double[n];
  double[] u=new double[n];
  for (int i=0; i < n; i++) {
    u[i]=nlf.eval(i);
    if (u[i] > 0)     x[i]=rdg.nextPoisson(u[i]);
  }
  double ll=PoissonCalculator.logLikelihood(u,x);
  double mll=PoissonCalculator.maximumLogLikelihood(x);
  double llr=-2 * (ll - mll);
  double llr2=PoissonCalculator.logLikelihoodRatio(u,x);
  TestSettings.info(""String_Node_Str"",llr,llr2);
  Assert.assertEquals(""String_Node_Str"",llr,llr2,llr * 1e-10);
  double[] op=new double[x.length];
  for (int i=0; i < n; i++)   op[i]=PoissonCalculator.maximumLikelihood(x[i]);
  double max=Double.NEGATIVE_INFINITY;
  double maxa=0;
  int df=n - 1;
  ChiSquaredDistributionTable table=ChiSquaredDistributionTable.createUpperTailed(0.05,df);
  ChiSquaredDistributionTable table2=ChiSquaredDistributionTable.createUpperTailed(0.001,df);
  if (TestSettings.allow(LogLevel.INFO))   TestSettings.info(""String_Node_Str"",table.getCrititalValue(df),table.getSignificanceValue(),table2.getCrititalValue(df),table2.getSignificanceValue(),ChiSquaredDistributionTable.computeQValue(24,2),ChiSquaredDistributionTable.createUpperTailed(0.05,2).reject(24,2),ChiSquaredDistributionTable.getChiSquared(1e-6,2));
  for (int i=5; i <= 15; i++) {
    a[0]=(double)i / 10;
    nlf.initialise(a);
    for (int j=0; j < n; j++)     u[j]=nlf.eval(j);
    ll=PoissonCalculator.logLikelihood(u,x);
    llr=PoissonCalculator.logLikelihoodRatio(u,x);
    BigDecimal product=new BigDecimal(1);
    double ll2=0;
    for (int j=0; j < n; j++) {
      double p1=PoissonCalculator.likelihood(u[j],x[j]);
      ll2+=Math.log(p1);
      double ratio=p1 / op[j];
      product=product.multiply(new BigDecimal(ratio));
    }
    llr2=-2 * Math.log(product.doubleValue());
    double p=ChiSquaredDistributionTable.computePValue(llr,df);
    double q=ChiSquaredDistributionTable.computeQValue(llr,df);
    TestSettings.info(""String_Node_Str"",a[0],ll,ll2,llr,llr2,product.round(new MathContext(4)).toString(),p,q,table.reject(llr,df),table.getSignificanceValue(),table2.reject(llr,df),table2.getSignificanceValue());
    if (max < ll) {
      max=ll;
      maxa=a[0];
    }
    if (product.doubleValue() > 0) {
      Assert.assertEquals(""String_Node_Str"",ll,ll2,Math.abs(ll2) * 1e-10);
      Assert.assertEquals(""String_Node_Str"",llr,llr2,Math.abs(llr) * 1e-10);
    }
  }
  Assert.assertEquals(""String_Node_Str"",1,maxa,0);
}","private void canComputeLogLikelihoodRatio(BaseNonLinearFunction nlf){
  TestSettings.info(nlf.name);
  int n=maxx * maxx;
  double[] a=new double[]{1};
  nlf.initialise(a);
  RandomDataGenerator rdg=new RandomDataGenerator(TestSettings.getRandomGenerator());
  double[] x=new double[n];
  double[] u=new double[n];
  for (int i=0; i < n; i++) {
    u[i]=nlf.eval(i);
    if (u[i] > 0)     x[i]=rdg.nextPoisson(u[i]);
  }
  double ll=PoissonCalculator.logLikelihood(u,x);
  double mll=PoissonCalculator.maximumLogLikelihood(x);
  double llr=-2 * (ll - mll);
  double llr2=PoissonCalculator.logLikelihoodRatio(u,x);
  TestSettings.info(""String_Node_Str"",llr,llr2);
  TestAssert.assertEqualsRelative(""String_Node_Str"",llr,llr2,llr * 1e-10);
  double[] op=new double[x.length];
  for (int i=0; i < n; i++)   op[i]=PoissonCalculator.maximumLikelihood(x[i]);
  double max=Double.NEGATIVE_INFINITY;
  double maxa=0;
  int df=n - 1;
  ChiSquaredDistributionTable table=ChiSquaredDistributionTable.createUpperTailed(0.05,df);
  ChiSquaredDistributionTable table2=ChiSquaredDistributionTable.createUpperTailed(0.001,df);
  if (TestSettings.allow(LogLevel.INFO))   TestSettings.info(""String_Node_Str"",table.getCrititalValue(df),table.getSignificanceValue(),table2.getCrititalValue(df),table2.getSignificanceValue(),ChiSquaredDistributionTable.computeQValue(24,2),ChiSquaredDistributionTable.createUpperTailed(0.05,2).reject(24,2),ChiSquaredDistributionTable.getChiSquared(1e-6,2));
  for (int i=5; i <= 15; i++) {
    a[0]=(double)i / 10;
    nlf.initialise(a);
    for (int j=0; j < n; j++)     u[j]=nlf.eval(j);
    ll=PoissonCalculator.logLikelihood(u,x);
    llr=PoissonCalculator.logLikelihoodRatio(u,x);
    BigDecimal product=new BigDecimal(1);
    double ll2=0;
    for (int j=0; j < n; j++) {
      double p1=PoissonCalculator.likelihood(u[j],x[j]);
      ll2+=Math.log(p1);
      double ratio=p1 / op[j];
      product=product.multiply(new BigDecimal(ratio));
    }
    llr2=-2 * Math.log(product.doubleValue());
    double p=ChiSquaredDistributionTable.computePValue(llr,df);
    double q=ChiSquaredDistributionTable.computeQValue(llr,df);
    TestSettings.info(""String_Node_Str"",a[0],ll,ll2,llr,llr2,product.round(new MathContext(4)).toString(),p,q,table.reject(llr,df),table.getSignificanceValue(),table2.reject(llr,df),table2.getSignificanceValue());
    if (max < ll) {
      max=ll;
      maxa=a[0];
    }
    if (product.doubleValue() > 0) {
      TestAssert.assertEqualsRelative(""String_Node_Str"",ll,ll2,Math.abs(ll2) * 1e-10);
      TestAssert.assertEqualsRelative(""String_Node_Str"",llr,llr2,Math.abs(llr) * 1e-10);
    }
  }
  Assert.assertEquals(""String_Node_Str"",1,maxa,0);
}",0.9932533733133432
149519,"@Test public void canComputeFastLikelihoodForIntegerData(){
  for (  double u : photons) {
    PoissonDistribution pd=new PoissonDistribution(u);
    for (int x=0; x < 100; x++) {
      double e=pd.probability(x);
      double o=PoissonCalculator.fastLikelihood(u,x);
      if (e > 1e-100)       Assert.assertEquals(e,o,e * 1e-4);
      e=pd.logProbability(x);
      o=PoissonCalculator.fastLogLikelihood(u,x);
      Assert.assertEquals(e,o,Math.abs(e) * 1e-4);
    }
  }
}","@Test public void canComputeFastLikelihoodForIntegerData(){
  for (  double u : photons) {
    PoissonDistribution pd=new PoissonDistribution(u);
    for (int x=0; x < 100; x++) {
      double e=pd.probability(x);
      double o=PoissonCalculator.fastLikelihood(u,x);
      if (e > 1e-100)       TestAssert.assertEqualsRelative(e,o,1e-4);
      e=pd.logProbability(x);
      o=PoissonCalculator.fastLogLikelihood(u,x);
      TestAssert.assertEqualsRelative(e,o,1e-4);
    }
  }
}",0.934873949579832
149520,"private void canComputeFastLog_LogLikelihoodRatio(BaseNonLinearFunction nlf){
  TestSettings.infoln(nlf.name);
  int n=maxx * maxx;
  double[] a=new double[]{1};
  nlf.initialise(a);
  RandomDataGenerator rdg=new RandomDataGenerator(TestSettings.getRandomGenerator());
  double[] x=new double[n];
  double[] u=new double[n];
  for (int i=0; i < n; i++) {
    u[i]=nlf.eval(i);
    if (u[i] > 0)     x[i]=rdg.nextPoisson(u[i]);
  }
  double llr=PoissonCalculator.logLikelihoodRatio(u,x);
  double llr2=PoissonCalculator.logLikelihoodRatio(u,x,FastLogFactory.getFastLog());
  TestSettings.info(""String_Node_Str"",llr,llr2);
  Assert.assertEquals(""String_Node_Str"",llr,llr2,llr * 1e-3);
}","private void canComputeFastLog_LogLikelihoodRatio(BaseNonLinearFunction nlf){
  TestSettings.infoln(nlf.name);
  int n=maxx * maxx;
  double[] a=new double[]{1};
  nlf.initialise(a);
  RandomDataGenerator rdg=new RandomDataGenerator(TestSettings.getRandomGenerator());
  double[] x=new double[n];
  double[] u=new double[n];
  for (int i=0; i < n; i++) {
    u[i]=nlf.eval(i);
    if (u[i] > 0)     x[i]=rdg.nextPoisson(u[i]);
  }
  double llr=PoissonCalculator.logLikelihoodRatio(u,x);
  double llr2=PoissonCalculator.logLikelihoodRatio(u,x,FastLogFactory.getFastLog());
  TestSettings.info(""String_Node_Str"",llr,llr2);
  TestAssert.assertEqualsRelative(""String_Node_Str"",llr,llr2,5e-3);
}",0.985443959243086
149521,"private static void loadCustomTemplate(String name,String path,String tifPath){
  TemplateSettings.Builder builder=TemplateSettings.newBuilder();
  File file=new File(path);
  if (SettingsManager.fromJSON(file,builder,0)) {
    addTemplate(name,builder.build(),TemplateType.CUSTOM,file,tifPath);
  }
}","private static void loadCustomTemplate(String name,String path,String tifPath){
  if (TextUtils.isNullOrEmpty(path))   return;
  TemplateSettings.Builder builder=TemplateSettings.newBuilder();
  File file=new File(path);
  if (SettingsManager.fromJSON(file,builder,0)) {
    addTemplate(name,builder.build(),TemplateType.CUSTOM,file,tifPath);
  }
}",0.9275808936825886
149522,"/** 
 * Save template configuration. If an existing template exists with the same name it will be over-written. If an existing template was loaded from file it will be saved back to the same file, or optionally a new file.
 * @param name The name of the template
 * @param settings The template settings
 * @param file The file to save the template (over-riding the file the template was loaded from)
 * @return true, if successful
 */
public static boolean saveTemplate(String name,TemplateSettings settings,File file){
  Template template=map.get(name);
  if (template != null) {
    if (file == null)     file=template.file;
  }
  template=new Template(settings,TemplateType.CUSTOM,file,null);
  boolean result=true;
  if (file != null)   result=template.save(file);
  if (result) {
    map.put(name,template);
    saveLoadedTemplates();
  }
  return result;
}","/** 
 * Save template configuration. If an existing template exists with the same name it will be over-written. If an existing template was loaded from file it will be saved back to the same file, or optionally a new file.
 * @param name The name of the template
 * @param settings The template settings
 * @param file The file to save the template (over-riding the file the template was loaded from)
 * @return true, if successful
 */
public static boolean saveTemplate(String name,TemplateSettings settings,File file){
  Template template=map.get(name);
  if (template != null) {
    if (file == null)     file=template.file;
  }
  template=new Template(settings,TemplateType.CUSTOM,file,null);
  boolean result=true;
  if (file != null)   result=template.save(file);
  if (result) {
    map.put(name,template);
    if (file != null)     saveLoadedTemplates();
  }
  return result;
}",0.9874141876430206
149523,"private void checkLoaded(String test,TemplateResource[] templates,String[] before,String[] after){
  HashSet<String> set=new HashSet<String>(Arrays.asList(after));
  set.removeAll(Arrays.asList(before));
  Assert.assertEquals(""String_Node_Str"",templates.length,set.size());
  for (  TemplateResource template : templates) {
    if (set.contains(template.name)) {
      System.out.println(test + ""String_Node_Str"" + template);
      continue;
    }
    Assert.assertTrue(test + ""String_Node_Str"" + template,false);
  }
}","private void checkLoaded(String test,TemplateResource[] templates,String[] before,String[] after){
  HashSet<String> set=new HashSet<String>(Arrays.asList(after));
  set.removeAll(Arrays.asList(before));
  Assert.assertEquals(""String_Node_Str"",templates.length,set.size());
  for (  TemplateResource template : templates) {
    if (set.contains(template.name)) {
      TestSettings.info(test + ""String_Node_Str"" + template);
      continue;
    }
    Assert.assertTrue(test + ""String_Node_Str"" + template,false);
  }
}",0.9662487945998072
149524,"private void canTestDoubleError(BaseTestLog f,double[] d,double[] logD){
  DPair pair=new DPair();
  if (!next(f,pair,d))   return;
  double v=logD[pair.i - 1];
  double delta=v - pair.f;
  delta=Math.abs(delta);
  Stats s1=new Stats(delta,d[pair.i - 1]);
  Stats s2=new Stats(Math.abs(delta / v),d[pair.i - 1]);
  while (next(f,pair,d)) {
    v=logD[pair.i - 1];
    delta=v - pair.f;
    delta=Math.abs(delta);
    s1.add(delta,d[pair.i - 1]);
    s2.add(Math.abs(delta / v),d[pair.i - 1]);
  }
  System.out.printf(""String_Node_Str"",f.name,f.getN(),s1.n,s1.summary(),s2.summary());
}","private void canTestDoubleError(BaseTestLog f,double[] d,double[] logD){
  DPair pair=new DPair();
  if (!next(f,pair,d))   return;
  double v=logD[pair.i - 1];
  double delta=v - pair.f;
  delta=Math.abs(delta);
  Stats s1=new Stats(delta,d[pair.i - 1]);
  Stats s2=(v != 0) ? new Stats(Math.abs(delta / v),d[pair.i - 1]) : new Stats(0,d[pair.i - 1]);
  while (next(f,pair,d)) {
    v=logD[pair.i - 1];
    delta=v - pair.f;
    delta=Math.abs(delta);
    s1.add(delta,d[pair.i - 1]);
    if (v != 0)     s2.add(Math.abs(delta / v),d[pair.i - 1]);
  }
  System.out.printf(""String_Node_Str"",f.name,f.getN(),s1.n,s1.summary(),s2.summary());
}",0.9543230016313212
149525,"private boolean next(BaseTestLog f,DPair pair,double[] d){
  while (pair.i < d.length) {
    pair.f=f.log(d[pair.i++]);
    if (pair.f != Double.NEGATIVE_INFINITY)     return true;
  }
  return false;
}","private boolean next(BaseTestLog f,DPair pair,double[] d){
  while (pair.i < d.length) {
    double x=d[pair.i++];
    if (x == 0)     continue;
    pair.f=f.log(d[pair.i++]);
    if (pair.f != Double.NEGATIVE_INFINITY)     return true;
  }
  return false;
}",0.8782608695652174
149526,"private void canTestFloatError(BaseTestLog f,float[] d,float[] logD){
  FPair pair=new FPair();
  if (!next(f,pair,d))   return;
  float v=logD[pair.i - 1];
  double delta=v - pair.f;
  delta=Math.abs(delta);
  Stats s1=new Stats(delta,d[pair.i - 1]);
  Stats s2=new Stats(Math.abs(delta / v),d[pair.i - 1]);
  while (next(f,pair,d)) {
    v=logD[pair.i - 1];
    delta=v - pair.f;
    delta=Math.abs(delta);
    s1.add(delta,d[pair.i - 1]);
    s2.add(Math.abs(delta / v),d[pair.i - 1]);
  }
  System.out.printf(""String_Node_Str"",f.name,f.getN(),s1.n,s1.summary(),s2.summary());
}","private void canTestFloatError(BaseTestLog f,float[] d,float[] logD){
  FPair pair=new FPair();
  if (!next(f,pair,d))   return;
  float v=logD[pair.i - 1];
  double delta=v - pair.f;
  delta=Math.abs(delta);
  Stats s1=new Stats(delta,d[pair.i - 1]);
  Stats s2=(v != 0) ? new Stats(Math.abs(delta / v),d[pair.i - 1]) : new Stats(0,d[pair.i - 1]);
  while (next(f,pair,d)) {
    v=logD[pair.i - 1];
    delta=v - pair.f;
    delta=Math.abs(delta);
    s1.add(delta,d[pair.i - 1]);
    if (v != 0)     s2.add(Math.abs(delta / v),d[pair.i - 1]);
  }
  System.out.printf(""String_Node_Str"",f.name,f.getN(),s1.n,s1.summary(),s2.summary());
}",0.9540229885057472
149527,"private void addSummary(StringBuilder sb,MemoryPeakResults result){
  final DescriptiveStatistics[] stats=new DescriptiveStatistics[2];
  char[] suffix=new char[2];
  for (int i=0; i < stats.length; i++) {
    stats[i]=new DescriptiveStatistics();
    suffix[i]=0;
  }
  if (result.hasNullResults()) {
    IJ.log(""String_Node_Str"" + result.getName());
    if (removeNullResults == UNKNOWN) {
      GenericDialog gd=new GenericDialog(TITLE);
      gd.addMessage(""String_Node_Str"");
      gd.enableYesNoCancel();
      gd.hideCancelButton();
      gd.showDialog();
      removeNullResults=(gd.wasOKed()) ? YES : NO;
    }
    if (removeNullResults == NO)     result=result.copy();
    result.removeNullResults();
  }
  final int size=result.size();
  if (size > 0) {
    if (result.hasStoredPrecision()) {
      suffix[0]='*';
      result.forEach(new PeakResultProcedure(){
        public void execute(        PeakResult peakResult){
          stats[0].addValue(peakResult.getPrecision());
        }
      }
);
    }
 else {
      try {
        PrecisionResultProcedure pp=new PrecisionResultProcedure(result);
        pp.getLSEPrecision();
        for (        double v : pp.precision)         stats[0].addValue(v);
      }
 catch (      DataException e) {
      }
    }
    if (result.hasNoise()) {
      result.forEach(new PeakResultProcedure(){
        public void execute(        PeakResult peakResult){
          stats[1].addValue(peakResult.getSignal() / peakResult.noise);
        }
      }
);
    }
  }
  CalibrationReader calibration=result.getCalibrationReader();
  sb.append(result.getName());
  sb.append('\t').append(result.size());
  int maxT=result.getMaxFrame();
  sb.append('\t').append(maxT);
  if (calibration != null && calibration.hasExposureTime()) {
    sb.append('\t').append(Utils.timeToString(maxT * calibration.getExposureTime()));
  }
 else {
    sb.append(""String_Node_Str"");
  }
  if (size > 0) {
    boolean includeDeviations=result.hasDeviations();
    long memorySize=MemoryPeakResults.estimateMemorySize(size,includeDeviations);
    String memory=MemoryPeakResults.memorySizeString(memorySize);
    sb.append('\t').append(memory);
  }
 else {
    sb.append(""String_Node_Str"");
  }
  Rectangle bounds=result.getBounds(true);
  sb.append(String.format(""String_Node_Str"",bounds.x,bounds.y,bounds.x + bounds.width,bounds.y + bounds.height));
  if (calibration != null) {
    sb.append('\t').append(calibration.hasNmPerPixel() ? Utils.rounded(calibration.getNmPerPixel()) : '-');
    sb.append('\t').append(calibration.hasExposureTime() ? Utils.rounded(calibration.getExposureTime()) : '-');
    if (calibration.hasCameraType()) {
      sb.append('\t').append(CalibrationProtosHelper.getName(calibration.getCameraType()));
      if (calibration.isCCDCamera()) {
        sb.append(""String_Node_Str"").append(calibration.getBias());
        sb.append(""String_Node_Str"").append(calibration.getCountPerPhoton());
      }
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append('\t').append(calibration.hasDistanceUnit() ? UnitHelper.getShortName(calibration.getDistanceUnit()) : '-');
    sb.append('\t').append(calibration.hasIntensityUnit() ? UnitHelper.getShortName(calibration.getIntensityUnit()) : '-');
  }
 else {
    sb.append(""String_Node_Str"");
  }
  for (int i=0; i < stats.length; i++) {
    if (Double.isNaN(stats[i].getMean())) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append('\t').append(IJ.d2s(stats[i].getMean(),3));
      if (suffix[i] != 0)       sb.append(suffix[i]);
      sb.append('\t').append(IJ.d2s(stats[i].getPercentile(50),3));
      sb.append('\t').append(IJ.d2s(stats[i].getMin(),3));
      sb.append('\t').append(IJ.d2s(stats[i].getMax(),3));
    }
  }
  sb.append(""String_Node_Str"");
}","private void addSummary(StringBuilder sb,MemoryPeakResults result){
  final DescriptiveStatistics[] stats=new DescriptiveStatistics[2];
  char[] suffix=new char[2];
  for (int i=0; i < stats.length; i++) {
    stats[i]=new DescriptiveStatistics();
    suffix[i]=0;
  }
  if (result.hasNullResults()) {
    IJ.log(""String_Node_Str"" + result.getName());
    if (removeNullResults == UNKNOWN) {
      GenericDialog gd=new GenericDialog(TITLE);
      gd.addMessage(""String_Node_Str"");
      gd.enableYesNoCancel();
      gd.hideCancelButton();
      gd.showDialog();
      removeNullResults=(gd.wasOKed()) ? YES : NO;
    }
    if (removeNullResults == NO)     result=result.copy();
    result.removeNullResults();
  }
  final int size=result.size();
  if (size > 0) {
    if (result.hasStoredPrecision()) {
      suffix[0]='*';
      result.forEach(new PeakResultProcedure(){
        public void execute(        PeakResult peakResult){
          stats[0].addValue(peakResult.getPrecision());
        }
      }
);
    }
 else {
      try {
        PrecisionResultProcedure pp=new PrecisionResultProcedure(result);
        pp.getLSEPrecision();
        for (        double v : pp.precision)         stats[0].addValue(v);
      }
 catch (      DataException e) {
      }
    }
    if (result.hasNoise()) {
      result.forEach(new PeakResultProcedure(){
        public void execute(        PeakResult peakResult){
          stats[1].addValue(peakResult.getSignal() / peakResult.noise);
        }
      }
);
    }
  }
  CalibrationReader calibration=result.getCalibrationReader();
  sb.append(result.getName());
  int maxT=0;
  if (result.size() == 0) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append('\t').append(result.size());
    maxT=result.getMaxFrame();
    sb.append('\t').append(maxT);
  }
  if (calibration != null && calibration.hasExposureTime()) {
    sb.append('\t').append(Utils.timeToString(maxT * calibration.getExposureTime()));
  }
 else {
    sb.append(""String_Node_Str"");
  }
  if (size > 0) {
    boolean includeDeviations=result.hasDeviations();
    long memorySize=MemoryPeakResults.estimateMemorySize(size,includeDeviations);
    String memory=MemoryPeakResults.memorySizeString(memorySize);
    sb.append('\t').append(memory);
  }
 else {
    sb.append(""String_Node_Str"");
  }
  Rectangle bounds=result.getBounds(true);
  sb.append(String.format(""String_Node_Str"",bounds.x,bounds.y,bounds.x + bounds.width,bounds.y + bounds.height));
  if (calibration != null) {
    sb.append('\t').append(calibration.hasNmPerPixel() ? Utils.rounded(calibration.getNmPerPixel()) : '-');
    sb.append('\t').append(calibration.hasExposureTime() ? Utils.rounded(calibration.getExposureTime()) : '-');
    if (calibration.hasCameraType()) {
      sb.append('\t').append(CalibrationProtosHelper.getName(calibration.getCameraType()));
      if (calibration.isCCDCamera()) {
        sb.append(""String_Node_Str"").append(calibration.getBias());
        sb.append(""String_Node_Str"").append(calibration.getCountPerPhoton());
      }
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append('\t').append(calibration.hasDistanceUnit() ? UnitHelper.getShortName(calibration.getDistanceUnit()) : '-');
    sb.append('\t').append(calibration.hasIntensityUnit() ? UnitHelper.getShortName(calibration.getIntensityUnit()) : '-');
  }
 else {
    sb.append(""String_Node_Str"");
  }
  for (int i=0; i < stats.length; i++) {
    if (Double.isNaN(stats[i].getMean())) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append('\t').append(IJ.d2s(stats[i].getMean(),3));
      if (suffix[i] != 0)       sb.append(suffix[i]);
      sb.append('\t').append(IJ.d2s(stats[i].getPercentile(50),3));
      sb.append('\t').append(IJ.d2s(stats[i].getMin(),3));
      sb.append('\t').append(IJ.d2s(stats[i].getMax(),3));
    }
  }
  sb.append(""String_Node_Str"");
}",0.9769754055468342
149528,"private int showDialog(){
  ExtendedGenericDialog gd=new ExtendedGenericDialog(TITLE);
  gd.addHelp(About.HELP_URL);
  gd.addMessage(""String_Node_Str"");
  gd.addAndGetButton(""String_Node_Str"",new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Configuration c=new Configuration();
      c.run(""String_Node_Str"");
    }
  }
);
  gd.addNumericField(""String_Node_Str"",nmPerSlice,0);
  gd.addSlider(""String_Node_Str"",3,20,radius);
  gd.addSlider(""String_Node_Str"",0.01,0.5,amplitudeFraction);
  gd.addSlider(""String_Node_Str"",1,20,startBackgroundFrames);
  gd.addSlider(""String_Node_Str"",1,20,endBackgroundFrames);
  gd.addSlider(""String_Node_Str"",5,15,magnification);
  gd.addSlider(""String_Node_Str"",0.25,0.5,smoothing);
  gd.addCheckbox(""String_Node_Str"",centreEachSlice);
  gd.addNumericField(""String_Node_Str"",comCutOff,-2);
  gd.addCheckbox(""String_Node_Str"",interactiveMode);
  String[] methods=ImageProcessor.getInterpolationMethods();
  gd.addChoice(""String_Node_Str"",methods,methods[interpolationMethod]);
  gd.showDialog();
  if (gd.wasCanceled())   return DONE;
  gd.getNextBoolean();
  nmPerSlice=gd.getNextNumber();
  radius=gd.getNextNumber();
  amplitudeFraction=gd.getNextNumber();
  startBackgroundFrames=(int)gd.getNextNumber();
  endBackgroundFrames=(int)gd.getNextNumber();
  magnification=(int)gd.getNextNumber();
  smoothing=gd.getNextNumber();
  centreEachSlice=gd.getNextBoolean();
  comCutOff=Maths.max(0,gd.getNextNumber());
  interactiveMode=gd.getNextBoolean();
  interpolationMethod=gd.getNextChoiceIndex();
  try {
    Parameters.isPositive(""String_Node_Str"",nmPerSlice);
    Parameters.isAbove(""String_Node_Str"",radius,2);
    Parameters.isAbove(""String_Node_Str"",amplitudeFraction,0.01);
    Parameters.isBelow(""String_Node_Str"",amplitudeFraction,0.9);
    Parameters.isPositive(""String_Node_Str"",startBackgroundFrames);
    Parameters.isPositive(""String_Node_Str"",endBackgroundFrames);
    Parameters.isAbove(""String_Node_Str"",startBackgroundFrames + endBackgroundFrames,1);
    Parameters.isAbove(""String_Node_Str"",magnification,1);
    Parameters.isAbove(""String_Node_Str"",smoothing,0);
    Parameters.isBelow(""String_Node_Str"",smoothing,1);
  }
 catch (  IllegalArgumentException e) {
    IJ.error(TITLE,e.getMessage());
    return DONE;
  }
  return flags;
}","private int showDialog(){
  ExtendedGenericDialog gd=new ExtendedGenericDialog(TITLE);
  gd.addHelp(About.HELP_URL);
  gd.addMessage(""String_Node_Str"");
  gd.addAndGetButton(""String_Node_Str"",new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Configuration c=new Configuration();
      c.run(""String_Node_Str"");
    }
  }
);
  gd.addNumericField(""String_Node_Str"",nmPerSlice,0);
  gd.addSlider(""String_Node_Str"",3,20,radius);
  gd.addSlider(""String_Node_Str"",0.01,0.5,amplitudeFraction);
  gd.addSlider(""String_Node_Str"",1,20,startBackgroundFrames);
  gd.addSlider(""String_Node_Str"",1,20,endBackgroundFrames);
  gd.addSlider(""String_Node_Str"",5,15,magnification);
  gd.addSlider(""String_Node_Str"",0.25,0.5,smoothing);
  gd.addCheckbox(""String_Node_Str"",centreEachSlice);
  gd.addNumericField(""String_Node_Str"",comCutOff,-2);
  gd.addCheckbox(""String_Node_Str"",interactiveMode);
  String[] methods=ImageProcessor.getInterpolationMethods();
  gd.addChoice(""String_Node_Str"",methods,methods[interpolationMethod]);
  gd.showDialog();
  if (gd.wasCanceled())   return DONE;
  nmPerSlice=gd.getNextNumber();
  radius=gd.getNextNumber();
  amplitudeFraction=gd.getNextNumber();
  startBackgroundFrames=(int)gd.getNextNumber();
  endBackgroundFrames=(int)gd.getNextNumber();
  magnification=(int)gd.getNextNumber();
  smoothing=gd.getNextNumber();
  centreEachSlice=gd.getNextBoolean();
  comCutOff=Maths.max(0,gd.getNextNumber());
  interactiveMode=gd.getNextBoolean();
  interpolationMethod=gd.getNextChoiceIndex();
  try {
    Parameters.isPositive(""String_Node_Str"",nmPerSlice);
    Parameters.isAbove(""String_Node_Str"",radius,2);
    Parameters.isAbove(""String_Node_Str"",amplitudeFraction,0.01);
    Parameters.isBelow(""String_Node_Str"",amplitudeFraction,0.9);
    Parameters.isPositive(""String_Node_Str"",startBackgroundFrames);
    Parameters.isPositive(""String_Node_Str"",endBackgroundFrames);
    Parameters.isAbove(""String_Node_Str"",startBackgroundFrames + endBackgroundFrames,1);
    Parameters.isAbove(""String_Node_Str"",magnification,1);
    Parameters.isAbove(""String_Node_Str"",smoothing,0);
    Parameters.isBelow(""String_Node_Str"",smoothing,1);
  }
 catch (  IllegalArgumentException e) {
    IJ.error(TITLE,e.getMessage());
    return DONE;
  }
  return flags;
}",0.9950184102230886
149529,"/** 
 * Load selected standard templates.
 * @param settings the settings
 */
private void loadSelectedStandardTemplates(ConfigurationTemplateSettings.Builder settings){
  final String[] inlineNames=listInlineTemplates();
  final TemplateResource[] templates=listTemplateResources();
  if (templates.length + inlineNames.length == 0)   return;
  MultiDialog md=new MultiDialog(""String_Node_Str"",new MultiDialog.BaseItems(){
    public int size(){
      return templates.length + inlineNames.length;
    }
    public String getFormattedName(    int i){
      if (i < inlineNames.length)       return inlineNames[i];
      return templates[inlineNames.length + i].name;
    }
  }
);
  md.addSelected(settings.getSelectedStandardTemplatesList());
  md.showDialog();
  if (md.wasCanceled())   return;
  ArrayList<String> selected=md.getSelectedResults();
  if (selected.isEmpty())   return;
  settings.clearSelectedStandardTemplates();
  settings.addAllSelectedStandardTemplates(selected);
  int count=0;
  final HashSet<String> remaining=new HashSet<String>(selected.size());
  for (int i=0; i < selected.size(); i++) {
    String name=selected.get(i);
    Template t=inlineTemplates.get(name);
    if (t != null) {
      count++;
      map.put(name,t);
    }
 else {
      remaining.add(name);
    }
  }
  if (!remaining.isEmpty()) {
    TurboList<TemplateResource> list=new TurboList<TemplateResource>(remaining.size());
    for (    TemplateResource t : templates) {
      if (remaining.contains(t.name))       list.add(t);
    }
    count+=loadTemplateResources(list.toArray(new TemplateResource[list.size()]));
  }
  if (count > 0)   saveDefaultTemplates();
  IJ.showMessage(""String_Node_Str"" + TextUtils.pleural(count,""String_Node_Str""));
}","/** 
 * Load selected standard templates.
 * @param settings the settings
 */
private void loadSelectedStandardTemplates(ConfigurationTemplateSettings.Builder settings){
  final String[] inlineNames=listInlineTemplates();
  final TemplateResource[] templates=listTemplateResources();
  if (templates.length + inlineNames.length == 0)   return;
  MultiDialog md=new MultiDialog(""String_Node_Str"",new MultiDialog.BaseItems(){
    public int size(){
      return templates.length + inlineNames.length;
    }
    public String getFormattedName(    int i){
      if (i < inlineNames.length)       return inlineNames[i];
      return templates[i - inlineNames.length].name;
    }
  }
);
  md.addSelected(settings.getSelectedStandardTemplatesList());
  md.showDialog();
  if (md.wasCanceled())   return;
  ArrayList<String> selected=md.getSelectedResults();
  if (selected.isEmpty())   return;
  settings.clearSelectedStandardTemplates();
  settings.addAllSelectedStandardTemplates(selected);
  int count=0;
  final HashSet<String> remaining=new HashSet<String>(selected.size());
  for (int i=0; i < selected.size(); i++) {
    String name=selected.get(i);
    Template t=inlineTemplates.get(name);
    if (t != null) {
      count++;
      map.put(name,t);
    }
 else {
      remaining.add(name);
    }
  }
  if (!remaining.isEmpty()) {
    TurboList<TemplateResource> list=new TurboList<TemplateResource>(remaining.size());
    for (    TemplateResource t : templates) {
      if (remaining.contains(t.name))       list.add(t);
    }
    count+=loadTemplateResources(list.toArray(new TemplateResource[list.size()]));
  }
  if (count > 0)   saveDefaultTemplates();
  IJ.showMessage(""String_Node_Str"" + TextUtils.pleural(count,""String_Node_Str""));
}",0.9977051061388412
149530,"public boolean accept(File arg0,String arg1){
  return arg0.isFile() && !arg1.toLowerCase().endsWith(""String_Node_Str"");
}","public boolean accept(File file){
  return file.isFile() && !file.getName().toLowerCase().endsWith(""String_Node_Str"");
}",0.8264462809917356
149531,"/** 
 * Load templates from directory.
 * @param settings the settings
 */
private void loadSelectedCustomTemplatesFromDirectory(ConfigurationTemplateSettings.Builder settings){
  String newDirectory=Utils.getDirectory(""String_Node_Str"",settings.getConfigurationDirectory());
  if (newDirectory == null)   return;
  settings.setConfigurationDirectory(newDirectory);
  File[] fileList=(new File(newDirectory)).listFiles(new FilenameFilter(){
    public boolean accept(    File arg0,    String arg1){
      return arg0.isFile() && !arg1.toLowerCase().endsWith(""String_Node_Str"");
    }
  }
);
  if (fileList == null)   return;
  String[] list=new String[fileList.length];
  int n=0;
  for (  File file : fileList) {
    if (file.isFile()) {
      list[n++]=file.getPath();
    }
  }
  final String[] sortedList=StringSorter.sortNumerically(list);
  MultiDialog md=new MultiDialog(""String_Node_Str"",new MultiDialog.BaseItems(){
    public int size(){
      return sortedList.length;
    }
    public String getFormattedName(    int i){
      String[] path=Utils.decodePath(sortedList[i]);
      return path[1];
    }
  }
);
  md.addSelected(settings.getSelectedCustomTemplatesList());
  md.showDialog();
  if (md.wasCanceled())   return;
  ArrayList<String> selected=md.getSelectedResults();
  if (selected.isEmpty())   return;
  settings.clearSelectedCustomTemplates();
  settings.addAllSelectedCustomTemplates(selected);
  int count=0;
  TemplateSettings.Builder builder=TemplateSettings.newBuilder();
  for (  String path : selected) {
    builder.clear();
    File file=new File(newDirectory,path);
    if (SettingsManager.fromJSON(file,builder,0)) {
      count++;
      String name=Utils.removeExtension(file.getName());
      addTemplate(name,builder.build(),TemplateType.CUSTOM,file,null);
    }
  }
  if (count > 0)   saveDefaultTemplates();
  IJ.showMessage(""String_Node_Str"" + TextUtils.pleural(count,""String_Node_Str""));
}","/** 
 * Load templates from directory.
 * @param settings the settings
 */
private void loadSelectedCustomTemplatesFromDirectory(ConfigurationTemplateSettings.Builder settings){
  String newDirectory=Utils.getDirectory(""String_Node_Str"",settings.getConfigurationDirectory());
  if (newDirectory == null)   return;
  settings.setConfigurationDirectory(newDirectory);
  File[] fileList=(new File(newDirectory)).listFiles(new FileFilter(){
    public boolean accept(    File file){
      return file.isFile() && !file.getName().toLowerCase().endsWith(""String_Node_Str"");
    }
  }
);
  if (fileList == null)   return;
  String[] list=new String[fileList.length];
  int n=0;
  for (  File file : fileList) {
    if (file.isFile()) {
      list[n++]=file.getPath();
    }
  }
  final String[] sortedList=StringSorter.sortNumerically(list);
  MultiDialog md=new MultiDialog(""String_Node_Str"",new MultiDialog.BaseItems(){
    public int size(){
      return sortedList.length;
    }
    public String getFormattedName(    int i){
      String[] path=Utils.decodePath(sortedList[i]);
      return path[1];
    }
  }
);
  md.addSelected(settings.getSelectedCustomTemplatesList());
  md.showDialog();
  if (md.wasCanceled())   return;
  ArrayList<String> selected=md.getSelectedResults();
  if (selected.isEmpty())   return;
  settings.clearSelectedCustomTemplates();
  settings.addAllSelectedCustomTemplates(selected);
  int count=0;
  TemplateSettings.Builder builder=TemplateSettings.newBuilder();
  for (  String path : selected) {
    builder.clear();
    File file=new File(newDirectory,path);
    if (SettingsManager.fromJSON(file,builder,0)) {
      count++;
      String name=Utils.removeExtension(file.getName());
      addTemplate(name,builder.build(),TemplateType.CUSTOM,file,null);
    }
  }
  if (count > 0)   saveDefaultTemplates();
  IJ.showMessage(""String_Node_Str"" + TextUtils.pleural(count,""String_Node_Str""));
}",0.985981308411215
149532,"private void run(){
  long start=System.currentTimeMillis();
  Utils.setShowProgress(false);
  Utils.setShowStatus(false);
  JLabel statusLine=Utils.getStatusLine();
  progressBar=Utils.getProgressBar();
  ExecutorService executor=Executors.newFixedThreadPool(getThreads());
  TurboList<Future<?>> futures=new TurboList<Future<?>>(nThreads);
  TurboList<ImageWorker> workers=new TurboList<ImageWorker>(nThreads);
  double[][][] data=new double[subDirs.size()][2][];
  double[] pixelOffset=null, pixelVariance=null;
  Statistics statsOffset=null, statsVariance=null;
  final int nSubDirs=subDirs.size();
  boolean error=false;
  int width=0, height=0;
  for (int n=0; n < nSubDirs; n++) {
    SubDir sd=subDirs.getf(n);
    statusLine.setText(""String_Node_Str"" + sd.name);
    SeriesImageSource source=new SeriesImageSource(sd.name,sd.path.getPath());
    if (!source.open()) {
      error=true;
      IJ.error(TITLE,""String_Node_Str"" + sd.path.getPath());
      break;
    }
    if (n == 0) {
      width=source.getWidth();
      height=source.getHeight();
    }
 else {
      if (width != source.getWidth() || height != source.getHeight()) {
        error=true;
        IJ.error(TITLE,""String_Node_Str"" + sd.path.getPath());
        break;
      }
    }
    totalProgress=source.getFrames() + 1;
    stepProgress=Utils.getProgressInterval(totalProgress);
    progress=0;
    progressBar.show(0);
    ArrayMoment moment=(rollingAlgorithm) ? new RollingArrayMoment() : new SimpleArrayMoment();
    final BlockingQueue<ImageJob> jobs=new ArrayBlockingQueue<ImageJob>(nThreads * 2);
    for (int i=0; i < nThreads; i++) {
      final ImageWorker worker=new ImageWorker(jobs,moment);
      workers.add(worker);
      futures.add(executor.submit(worker));
    }
    for (float[] pixels=source.next(); pixels != null; pixels=source.next()) {
      put(jobs,new ImageJob(pixels));
    }
    for (int i=0; i < nThreads; i++) {
      put(jobs,new ImageJob(null));
    }
    for (int t=futures.size(); t-- > 0; ) {
      try {
        futures.get(t).get();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (    ImageWorker w : workers)     moment.add(w.moment);
    data[n][0]=moment.getFirstMoment();
    data[n][1]=moment.getVariance();
    futures.clear();
    workers.clear();
    Statistics s=new Statistics(data[n][0]);
    if (n != 0) {
      Statistics signal=new Statistics();
      double[] mean=data[n][0];
      for (int i=0; i < pixelOffset.length; i++)       signal.add(mean[i] - pixelOffset[i]);
      Utils.log(""String_Node_Str"",sd.name,Utils.rounded(s.getMean()),Utils.rounded(s.getStandardDeviation()),Utils.rounded(signal.getMean()),Utils.rounded(signal.getStandardDeviation()));
      ImageStack stack=new ImageStack(source.getWidth(),source.getHeight());
      stack.addSlice(""String_Node_Str"",SimpleArrayUtils.toFloat(data[n][0]));
      stack.addSlice(""String_Node_Str"",SimpleArrayUtils.toFloat(data[n][1]));
      IJ.save(new ImagePlus(""String_Node_Str"",stack),new File(directory,""String_Node_Str"" + sd.name + ""String_Node_Str"").getPath());
    }
 else {
      pixelOffset=data[0][0];
      pixelVariance=data[0][1];
      statsOffset=s;
      statsVariance=new Statistics(pixelVariance);
      Utils.log(""String_Node_Str"",sd.name,Utils.rounded(s.getMean()),Utils.rounded(s.getStandardDeviation()),Utils.rounded(statsVariance.getMean()),Utils.rounded(statsVariance.getStandardDeviation()));
    }
  }
  Utils.setShowStatus(true);
  Utils.setShowProgress(true);
  IJ.showProgress(1);
  executor.shutdown();
  if (error)   return;
  statusLine.setText(""String_Node_Str"");
  double[] pixelGain=new double[pixelOffset.length];
  for (int i=0; i < pixelGain.length; i++) {
    double bibiT=0;
    double biaiT=0;
    for (int n=1; n < nSubDirs; n++) {
      double bi=data[n][0][i] - pixelOffset[i];
      double ai=data[n][1][i] - pixelVariance[i];
      bibiT+=bi * bi;
      biaiT+=bi * ai;
    }
    pixelGain[i]=biaiT / bibiT;
  }
  Statistics statsGain=new Statistics(pixelGain);
  Utils.log(""String_Node_Str"",Utils.rounded(statsGain.getMean()),Utils.rounded(statsGain.getStandardDeviation()));
  int bins=Utils.getBinsSturges(pixelGain.length);
  WindowOrganiser wo=new WindowOrganiser();
  showHistogram(""String_Node_Str"",pixelOffset,bins,statsOffset,wo);
  showHistogram(""String_Node_Str"",pixelVariance,bins,statsVariance,wo);
  showHistogram(""String_Node_Str"",pixelGain,bins,statsGain,wo);
  wo.tile();
  float[] bias=SimpleArrayUtils.toFloat(pixelOffset);
  float[] variance=SimpleArrayUtils.toFloat(pixelVariance);
  float[] gain=SimpleArrayUtils.toFloat(pixelGain);
  measuredStack=new ImageStack(width,height);
  measuredStack.addSlice(""String_Node_Str"",bias);
  measuredStack.addSlice(""String_Node_Str"",variance);
  measuredStack.addSlice(""String_Node_Str"",gain);
  ExtendedGenericDialog egd=new ExtendedGenericDialog(TITLE);
  egd.addMessage(""String_Node_Str"");
  if (modelDirectory == null) {
    modelDirectory=directory;
    modelName=""String_Node_Str"";
  }
  egd.addStringField(""String_Node_Str"",modelName);
  egd.addDirectoryField(""String_Node_Str"",modelDirectory);
  egd.showDialog();
  if (!egd.wasCanceled()) {
    modelName=egd.getNextString();
    modelDirectory=egd.getNextString();
    PerPixelCameraModel cameraModel=new PerPixelCameraModel(width,height,bias,gain,variance);
    if (!CameraModelManager.save(cameraModel,new File(directory,modelName).getPath()))     IJ.error(TITLE,""String_Node_Str"");
  }
  IJ.showStatus(""String_Node_Str"");
  Utils.log(""String_Node_Str"" + Utils.timeToString(System.currentTimeMillis() - start));
}","private void run(){
  long start=System.currentTimeMillis();
  Utils.setShowProgress(false);
  Utils.setShowStatus(false);
  JLabel statusLine=Utils.getStatusLine();
  progressBar=Utils.getProgressBar();
  ExecutorService executor=Executors.newFixedThreadPool(getThreads());
  TurboList<Future<?>> futures=new TurboList<Future<?>>(nThreads);
  TurboList<ImageWorker> workers=new TurboList<ImageWorker>(nThreads);
  double[][][] data=new double[subDirs.size()][2][];
  double[] pixelOffset=null, pixelVariance=null;
  Statistics statsOffset=null, statsVariance=null;
  final int nSubDirs=subDirs.size();
  boolean error=false;
  int width=0, height=0;
  for (int n=0; n < nSubDirs; n++) {
    SubDir sd=subDirs.getf(n);
    statusLine.setText(""String_Node_Str"" + sd.name);
    SeriesImageSource source=new SeriesImageSource(sd.name,sd.path.getPath());
    if (!source.open()) {
      error=true;
      IJ.error(TITLE,""String_Node_Str"" + sd.path.getPath());
      break;
    }
    if (n == 0) {
      width=source.getWidth();
      height=source.getHeight();
    }
 else {
      if (width != source.getWidth() || height != source.getHeight()) {
        error=true;
        IJ.error(TITLE,""String_Node_Str"" + sd.path.getPath());
        break;
      }
    }
    totalProgress=source.getFrames() + 1;
    stepProgress=Utils.getProgressInterval(totalProgress);
    progress=0;
    progressBar.show(0);
    ArrayMoment moment=(rollingAlgorithm) ? new RollingArrayMoment() : new SimpleArrayMoment();
    final BlockingQueue<ImageJob> jobs=new ArrayBlockingQueue<ImageJob>(nThreads * 2);
    for (int i=0; i < nThreads; i++) {
      final ImageWorker worker=new ImageWorker(jobs,moment);
      workers.add(worker);
      futures.add(executor.submit(worker));
    }
    for (float[] pixels=source.next(); pixels != null; pixels=source.next()) {
      put(jobs,new ImageJob(pixels));
    }
    for (int i=0; i < nThreads; i++) {
      put(jobs,new ImageJob(null));
    }
    for (int t=futures.size(); t-- > 0; ) {
      try {
        futures.get(t).get();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (    ImageWorker w : workers)     moment.add(w.moment);
    data[n][0]=moment.getFirstMoment();
    data[n][1]=moment.getVariance();
    futures.clear();
    workers.clear();
    Statistics s=new Statistics(data[n][0]);
    if (n != 0) {
      Statistics signal=new Statistics();
      double[] mean=data[n][0];
      for (int i=0; i < pixelOffset.length; i++)       signal.add(mean[i] - pixelOffset[i]);
      Utils.log(""String_Node_Str"",sd.name,Utils.rounded(s.getMean()),Utils.rounded(s.getStandardDeviation()),Utils.rounded(signal.getMean()),Utils.rounded(signal.getStandardDeviation()));
      ImageStack stack=new ImageStack(source.getWidth(),source.getHeight());
      stack.addSlice(""String_Node_Str"",SimpleArrayUtils.toFloat(data[n][0]));
      stack.addSlice(""String_Node_Str"",SimpleArrayUtils.toFloat(data[n][1]));
      IJ.save(new ImagePlus(""String_Node_Str"",stack),new File(directory,""String_Node_Str"" + sd.name + ""String_Node_Str"").getPath());
    }
 else {
      pixelOffset=data[0][0];
      pixelVariance=data[0][1];
      statsOffset=s;
      statsVariance=new Statistics(pixelVariance);
      Utils.log(""String_Node_Str"",sd.name,Utils.rounded(s.getMean()),Utils.rounded(s.getStandardDeviation()),Utils.rounded(statsVariance.getMean()),Utils.rounded(statsVariance.getStandardDeviation()));
    }
  }
  Utils.setShowStatus(true);
  Utils.setShowProgress(true);
  IJ.showProgress(1);
  executor.shutdown();
  if (error)   return;
  statusLine.setText(""String_Node_Str"");
  double[] pixelGain=new double[pixelOffset.length];
  for (int i=0; i < pixelGain.length; i++) {
    double bibiT=0;
    double biaiT=0;
    for (int n=1; n < nSubDirs; n++) {
      double bi=data[n][0][i] - pixelOffset[i];
      double ai=data[n][1][i] - pixelVariance[i];
      bibiT+=bi * bi;
      biaiT+=bi * ai;
    }
    pixelGain[i]=biaiT / bibiT;
  }
  Statistics statsGain=new Statistics(pixelGain);
  Utils.log(""String_Node_Str"",Utils.rounded(statsGain.getMean()),Utils.rounded(statsGain.getStandardDeviation()));
  int bins=Utils.getBinsSturges(pixelGain.length);
  WindowOrganiser wo=new WindowOrganiser();
  showHistogram(""String_Node_Str"",pixelOffset,bins,statsOffset,wo);
  showHistogram(""String_Node_Str"",pixelVariance,bins,statsVariance,wo);
  showHistogram(""String_Node_Str"",pixelGain,bins,statsGain,wo);
  wo.tile();
  float[] bias=SimpleArrayUtils.toFloat(pixelOffset);
  float[] variance=SimpleArrayUtils.toFloat(pixelVariance);
  float[] gain=SimpleArrayUtils.toFloat(pixelGain);
  measuredStack=new ImageStack(width,height);
  measuredStack.addSlice(""String_Node_Str"",bias);
  measuredStack.addSlice(""String_Node_Str"",variance);
  measuredStack.addSlice(""String_Node_Str"",gain);
  ExtendedGenericDialog egd=new ExtendedGenericDialog(TITLE);
  egd.addMessage(""String_Node_Str"");
  if (modelDirectory == null) {
    modelDirectory=directory;
    modelName=""String_Node_Str"";
  }
  egd.addStringField(""String_Node_Str"",modelName,30);
  egd.addDirectoryField(""String_Node_Str"",modelDirectory);
  egd.showDialog();
  if (!egd.wasCanceled()) {
    modelName=egd.getNextString();
    modelDirectory=egd.getNextString();
    PerPixelCameraModel cameraModel=new PerPixelCameraModel(width,height,bias,gain,variance);
    if (!CameraModelManager.save(cameraModel,new File(directory,modelName).getPath()))     IJ.error(TITLE,""String_Node_Str"");
  }
  IJ.showStatus(""String_Node_Str"");
  Utils.log(""String_Node_Str"" + Utils.timeToString(System.currentTimeMillis() - start));
}",0.9997325964881004
149533,"/** 
 * Get the data from the image as a double array (include cropping to the ROI). Data is duplicated if the input already a double array. <p> Allows reuse of an existing buffer if provided. This will not be truncated if it is larger than the ImageProcessor ROI bounds. If smaller then a new buffer will be created.
 * @param oPixels
 * @param width
 * @param height
 * @param bounds
 * @param buffer
 * @return The double array data
 */
public static double[] getDoubleData(final Object oPixels,final int width,final int height,final Rectangle bounds,double[] buffer){
  if (oPixels == null)   return null;
  if (oPixels instanceof float[]) {
    float[] pixels=(float[])oPixels;
    if (bounds != null && (bounds.x != 0 || bounds.y != 0 || bounds.width != width || bounds.height != height)) {
      double[] pixels2=allocate(buffer,bounds.width * bounds.height);
      for (int ys=0, offset1=0; ys < bounds.height; ys++) {
        for (int xs=0, offset2=(ys + bounds.y) * width + bounds.x; xs < bounds.width; xs++)         pixels2[offset1++]=pixels[offset2++];
      }
      return pixels2;
    }
 else {
      double[] pixels2=allocate(buffer,pixels.length);
      for (int i=0; i < pixels.length; i++)       pixels2[i]=pixels[i];
      return pixels2;
    }
  }
 else   if (oPixels instanceof short[]) {
    short[] pixels=(short[])oPixels;
    if (bounds != null && (bounds.x != 0 || bounds.y != 0 || bounds.width != width || bounds.height != height)) {
      double[] pixels2=allocate(buffer,bounds.width * bounds.height);
      for (int ys=0, offset1=0; ys < bounds.height; ys++) {
        for (int xs=0, offset2=(ys + bounds.y) * width + bounds.x; xs < bounds.width; xs++)         pixels2[offset1++]=pixels[offset2++] & 0xffff;
      }
      return pixels2;
    }
 else {
      double[] pixels2=allocate(buffer,pixels.length);
      for (int i=0; i < pixels.length; i++)       pixels2[i]=pixels[i] & 0xffff;
      return pixels2;
    }
  }
 else   if (oPixels instanceof byte[]) {
    byte[] pixels=(byte[])oPixels;
    if (bounds != null && (bounds.x != 0 || bounds.y != 0 || bounds.width != width || bounds.height != height)) {
      double[] pixels2=allocate(buffer,bounds.width * bounds.height);
      for (int ys=0, offset1=0; ys < bounds.height; ys++) {
        for (int xs=0, offset2=(ys + bounds.y) * width + bounds.x; xs < bounds.width; xs++)         pixels2[offset1++]=pixels[offset2++] & 0xff;
      }
      return pixels2;
    }
 else {
      double[] pixels2=allocate(buffer,pixels.length);
      for (int i=0; i < pixels.length; i++)       pixels2[i]=pixels[i] & 0xff;
      return pixels2;
    }
  }
 else   if (oPixels instanceof int[]) {
    ImageProcessor ip=new ColorProcessor(width,height,(int[])oPixels);
    ip.setRoi(bounds);
    FloatProcessor fp=ip.crop().toFloat(0,null);
    return (double[])fp.getPixels();
  }
  return null;
}","/** 
 * Get the data from the image as a double array (include cropping to the ROI). Data is duplicated if the input already a double array. <p> Allows reuse of an existing buffer if provided. This will not be truncated if it is larger than the ImageProcessor ROI bounds. If smaller then a new buffer will be created. <p> If the object pixels array is incorrect size (it should be width*height) then null will be returned. 
 * @param oPixels
 * @param width
 * @param height
 * @param bounds
 * @param buffer
 * @return The double array data
 */
public static double[] getDoubleData(final Object oPixels,final int width,final int height,final Rectangle bounds,double[] buffer){
  if (oPixels == null)   return null;
  if (oPixels instanceof float[]) {
    float[] pixels=(float[])oPixels;
    if (incorrectSize(pixels.length,width,height))     return null;
    if (bounds != null && (bounds.x != 0 || bounds.y != 0 || bounds.width != width || bounds.height != height)) {
      double[] pixels2=allocate(buffer,bounds.width * bounds.height);
      for (int ys=0, offset1=0; ys < bounds.height; ys++) {
        for (int xs=0, offset2=(ys + bounds.y) * width + bounds.x; xs < bounds.width; xs++)         pixels2[offset1++]=pixels[offset2++];
      }
      return pixels2;
    }
 else {
      double[] pixels2=allocate(buffer,pixels.length);
      for (int i=0; i < pixels.length; i++)       pixels2[i]=pixels[i];
      return pixels2;
    }
  }
 else   if (oPixels instanceof short[]) {
    short[] pixels=(short[])oPixels;
    if (incorrectSize(pixels.length,width,height))     return null;
    if (bounds != null && (bounds.x != 0 || bounds.y != 0 || bounds.width != width || bounds.height != height)) {
      double[] pixels2=allocate(buffer,bounds.width * bounds.height);
      for (int ys=0, offset1=0; ys < bounds.height; ys++) {
        for (int xs=0, offset2=(ys + bounds.y) * width + bounds.x; xs < bounds.width; xs++)         pixels2[offset1++]=pixels[offset2++] & 0xffff;
      }
      return pixels2;
    }
 else {
      double[] pixels2=allocate(buffer,pixels.length);
      for (int i=0; i < pixels.length; i++)       pixels2[i]=pixels[i] & 0xffff;
      return pixels2;
    }
  }
 else   if (oPixels instanceof byte[]) {
    byte[] pixels=(byte[])oPixels;
    if (incorrectSize(pixels.length,width,height))     return null;
    if (bounds != null && (bounds.x != 0 || bounds.y != 0 || bounds.width != width || bounds.height != height)) {
      double[] pixels2=allocate(buffer,bounds.width * bounds.height);
      for (int ys=0, offset1=0; ys < bounds.height; ys++) {
        for (int xs=0, offset2=(ys + bounds.y) * width + bounds.x; xs < bounds.width; xs++)         pixels2[offset1++]=pixels[offset2++] & 0xff;
      }
      return pixels2;
    }
 else {
      double[] pixels2=allocate(buffer,pixels.length);
      for (int i=0; i < pixels.length; i++)       pixels2[i]=pixels[i] & 0xff;
      return pixels2;
    }
  }
 else   if (oPixels instanceof int[]) {
    int[] pixels=(int[])oPixels;
    if (incorrectSize(pixels.length,width,height))     return null;
    ImageProcessor ip=new ColorProcessor(width,height,pixels);
    ip.setRoi(bounds);
    FloatProcessor fp=ip.crop().toFloat(0,null);
    return (double[])fp.getPixels();
  }
  return null;
}",0.8974400782651231
149534,"/** 
 * Get the data from the image as a float array (include cropping to the ROI). Data is duplicated if the input already a float array. <p> Allows reuse of an existing buffer if provided. This will not be truncated if it is larger than the ImageProcessor ROI bounds. If smaller then a new buffer will be created.
 * @param oPixels
 * @param width
 * @param height
 * @param bounds
 * @param buffer
 * @return The float array data
 */
public static float[] getData(final Object oPixels,final int width,final int height,final Rectangle bounds,float[] buffer){
  if (oPixels == null)   return null;
  if (oPixels instanceof float[]) {
    float[] pixels=(float[])oPixels;
    if (bounds != null && (bounds.x != 0 || bounds.y != 0 || bounds.width != width || bounds.height != height)) {
      float[] pixels2=allocate(buffer,bounds.width * bounds.height);
      for (int ys=0, offset1=0; ys < bounds.height; ys++) {
        for (int xs=0, offset2=(ys + bounds.y) * width + bounds.x; xs < bounds.width; xs++)         pixels2[offset1++]=pixels[offset2++];
      }
      return pixels2;
    }
 else {
      float[] pixels2=allocate(buffer,pixels.length);
      System.arraycopy(pixels,0,pixels2,0,pixels.length);
      return pixels2;
    }
  }
 else   if (oPixels instanceof short[]) {
    short[] pixels=(short[])oPixels;
    if (bounds != null && (bounds.x != 0 || bounds.y != 0 || bounds.width != width || bounds.height != height)) {
      float[] pixels2=allocate(buffer,bounds.width * bounds.height);
      for (int ys=0, offset1=0; ys < bounds.height; ys++) {
        for (int xs=0, offset2=(ys + bounds.y) * width + bounds.x; xs < bounds.width; xs++)         pixels2[offset1++]=pixels[offset2++] & 0xffff;
      }
      return pixels2;
    }
 else {
      float[] pixels2=allocate(buffer,pixels.length);
      for (int i=0; i < pixels.length; i++)       pixels2[i]=pixels[i] & 0xffff;
      return pixels2;
    }
  }
 else   if (oPixels instanceof byte[]) {
    byte[] pixels=(byte[])oPixels;
    if (bounds != null && (bounds.x != 0 || bounds.y != 0 || bounds.width != width || bounds.height != height)) {
      float[] pixels2=allocate(buffer,bounds.width * bounds.height);
      for (int ys=0, offset1=0; ys < bounds.height; ys++) {
        for (int xs=0, offset2=(ys + bounds.y) * width + bounds.x; xs < bounds.width; xs++)         pixels2[offset1++]=pixels[offset2++] & 0xff;
      }
      return pixels2;
    }
 else {
      float[] pixels2=allocate(buffer,pixels.length);
      for (int i=0; i < pixels.length; i++)       pixels2[i]=pixels[i] & 0xff;
      return pixels2;
    }
  }
 else   if (oPixels instanceof int[]) {
    ImageProcessor ip=new ColorProcessor(width,height,(int[])oPixels);
    ip.setRoi(bounds);
    FloatProcessor fp=ip.crop().toFloat(0,null);
    return (float[])fp.getPixels();
  }
  return null;
}","/** 
 * Get the data from the image as a float array (include cropping to the ROI). Data is duplicated if the input already a float array. <p> Allows reuse of an existing buffer if provided. This will not be truncated if it is larger than the ImageProcessor ROI bounds. If smaller then a new buffer will be created. <p> If the object pixels array is incorrect size (it should be width*height) then null will be returned. 
 * @param oPixels
 * @param width
 * @param height
 * @param bounds
 * @param buffer
 * @return The float array data
 */
public static float[] getData(final Object oPixels,final int width,final int height,final Rectangle bounds,float[] buffer){
  if (oPixels == null)   return null;
  if (oPixels instanceof float[]) {
    float[] pixels=(float[])oPixels;
    if (incorrectSize(pixels.length,width,height))     return null;
    if (bounds != null && (bounds.x != 0 || bounds.y != 0 || bounds.width != width || bounds.height != height)) {
      float[] pixels2=allocate(buffer,bounds.width * bounds.height);
      for (int ys=0, offset1=0; ys < bounds.height; ys++) {
        for (int xs=0, offset2=(ys + bounds.y) * width + bounds.x; xs < bounds.width; xs++)         pixels2[offset1++]=pixels[offset2++];
      }
      return pixels2;
    }
 else {
      float[] pixels2=allocate(buffer,pixels.length);
      System.arraycopy(pixels,0,pixels2,0,pixels.length);
      return pixels2;
    }
  }
 else   if (oPixels instanceof short[]) {
    short[] pixels=(short[])oPixels;
    if (incorrectSize(pixels.length,width,height))     return null;
    if (bounds != null && (bounds.x != 0 || bounds.y != 0 || bounds.width != width || bounds.height != height)) {
      float[] pixels2=allocate(buffer,bounds.width * bounds.height);
      for (int ys=0, offset1=0; ys < bounds.height; ys++) {
        for (int xs=0, offset2=(ys + bounds.y) * width + bounds.x; xs < bounds.width; xs++)         pixels2[offset1++]=pixels[offset2++] & 0xffff;
      }
      return pixels2;
    }
 else {
      float[] pixels2=allocate(buffer,pixels.length);
      for (int i=0; i < pixels.length; i++)       pixels2[i]=pixels[i] & 0xffff;
      return pixels2;
    }
  }
 else   if (oPixels instanceof byte[]) {
    byte[] pixels=(byte[])oPixels;
    if (incorrectSize(pixels.length,width,height))     return null;
    if (bounds != null && (bounds.x != 0 || bounds.y != 0 || bounds.width != width || bounds.height != height)) {
      float[] pixels2=allocate(buffer,bounds.width * bounds.height);
      for (int ys=0, offset1=0; ys < bounds.height; ys++) {
        for (int xs=0, offset2=(ys + bounds.y) * width + bounds.x; xs < bounds.width; xs++)         pixels2[offset1++]=pixels[offset2++] & 0xff;
      }
      return pixels2;
    }
 else {
      float[] pixels2=allocate(buffer,pixels.length);
      for (int i=0; i < pixels.length; i++)       pixels2[i]=pixels[i] & 0xff;
      return pixels2;
    }
  }
 else   if (oPixels instanceof int[]) {
    int[] pixels=(int[])oPixels;
    if (incorrectSize(pixels.length,width,height))     return null;
    ImageProcessor ip=new ColorProcessor(width,height,pixels);
    ip.setRoi(bounds);
    FloatProcessor fp=ip.crop().toFloat(0,null);
    return (float[])fp.getPixels();
  }
  return null;
}",0.8970176305816444
149535,"private void add(StringBuilder sb,PeakResult result){
  addStandardData(sb,result.getId(),result.getFrame(),result.getEndFrame(),result.origX,result.origY,result.origValue,result.error,result.noise);
  final float[] params=result.params;
  if (isShowDeviations()) {
    final float[] paramsStdDev=result.paramsStdDev;
    if (paramsStdDev != null) {
      for (int i=0; i < converters.length; i++) {
        add(sb,converters[i].convert(params[i]));
        add(sb,converters[i].convert(paramsStdDev[i]));
      }
    }
 else {
      for (int i=0; i < converters.length; i++) {
        add(sb,converters[i].convert(params[i]));
        sb.append(""String_Node_Str"");
      }
    }
  }
 else {
    for (int i=0; i < converters.length; i++) {
      add(sb,converters[i].convert(params[i]));
      sb.append(""String_Node_Str"");
    }
  }
  if (canComputePrecision) {
    addResult(sb,(float)calculator.getPrecision(params,result.noise));
  }
  sb.append('\n');
}","private void add(StringBuilder sb,PeakResult result){
  addStandardData(sb,result.getId(),result.getFrame(),result.getEndFrame(),result.origX,result.origY,result.origValue,result.error,result.noise);
  final float[] params=result.params;
  if (isShowDeviations()) {
    final float[] paramsStdDev=result.paramsStdDev;
    if (paramsStdDev != null) {
      for (int i=0; i < converters.length; i++) {
        add(sb,converters[i].convert(params[i]));
        add(sb,converters[i].convert(paramsStdDev[i]));
      }
    }
 else {
      for (int i=0; i < converters.length; i++) {
        add(sb,converters[i].convert(params[i]));
        sb.append(""String_Node_Str"");
      }
    }
  }
 else {
    for (int i=0; i < converters.length; i++) {
      add(sb,converters[i].convert(params[i]));
    }
  }
  if (canComputePrecision) {
    addResult(sb,(float)calculator.getPrecision(params,result.noise));
  }
  sb.append('\n');
}",0.9808510638297872
149536,"private void guessFormat(String firstLine){
  format=FileFormat.UNKNOWN;
  if (header.length() == 0) {
    if (TSFPeakResultsReader.isTSF(filename)) {
      format=FileFormat.TSF_BINARY;
      return;
    }
    if (Utils.isNullOrEmpty(firstLine))     return;
  }
  if (header.contains(""String_Node_Str"")) {
    format=FileFormat.NSTORM;
  }
 else   if (header.contains(""String_Node_Str"")) {
    format=FileFormat.SMLM_TABLE;
    readId=header.startsWith(""String_Node_Str"");
    readEndFrame=header.contains(""String_Node_Str"");
    deviations=header.contains(""String_Node_Str"");
    readSource=header.contains(""String_Node_Str"");
  }
 else   if (header.contains(""String_Node_Str"")) {
    if (isMALKFormat(firstLine)) {
      format=FileFormat.MALK;
    }
 else {
      format=FileFormat.RAPID_STORM;
    }
  }
 else   if (isMALKFormat(firstLine)) {
    format=FileFormat.MALK;
  }
 else {
    if (version.length() > 0) {
      format=(version.contains(""String_Node_Str"")) ? FileFormat.SMLM_BINARY : FileFormat.SMLM_TEXT;
      deviations=version.contains(""String_Node_Str"");
      if (version.contains(""String_Node_Str"")) {
        readEndFrame=readId=true;
      }
 else {
        readEndFrame=version.contains(""String_Node_Str"");
        readId=version.contains(""String_Node_Str"");
      }
      if (version.contains(""String_Node_Str"")) {
        readAmplitude=false;
      }
    }
 else {
      format=(version.contains(""String_Node_Str"")) ? FileFormat.SMLM_BINARY : FileFormat.SMLM_TEXT;
      deviations=header.contains((format == FileFormat.SMLM_BINARY) ? ""String_Node_Str"" : ""String_Node_Str"");
      readEndFrame=readId=false;
    }
  }
}","private void guessFormat(String firstLine){
  format=FileFormat.UNKNOWN;
  if (header.length() == 0) {
    if (TSFPeakResultsReader.isTSF(filename)) {
      format=FileFormat.TSF_BINARY;
      return;
    }
    if (Utils.isNullOrEmpty(firstLine))     return;
  }
  if (header.contains(""String_Node_Str"")) {
    format=FileFormat.NSTORM;
  }
 else   if (header.contains(IMAGEJ_TABLE_RESULTS_HEADER)) {
    format=FileFormat.SMLM_TABLE;
    readId=header.startsWith(""String_Node_Str"");
    readEndFrame=header.contains(""String_Node_Str"");
    deviations=header.contains(""String_Node_Str"");
    readSource=header.contains(""String_Node_Str"");
  }
 else   if (header.contains(""String_Node_Str"")) {
    if (isMALKFormat(firstLine)) {
      format=FileFormat.MALK;
    }
 else {
      format=FileFormat.RAPID_STORM;
    }
  }
 else   if (isMALKFormat(firstLine)) {
    format=FileFormat.MALK;
  }
 else {
    if (version.length() > 0) {
      format=(version.contains(""String_Node_Str"")) ? FileFormat.SMLM_BINARY : FileFormat.SMLM_TEXT;
      deviations=version.contains(""String_Node_Str"");
      if (version.contains(""String_Node_Str"")) {
        readEndFrame=readId=true;
      }
 else {
        readEndFrame=version.contains(""String_Node_Str"");
        readId=version.contains(""String_Node_Str"");
      }
      if (version.contains(""String_Node_Str"")) {
        readAmplitude=false;
      }
    }
 else {
      format=(version.contains(""String_Node_Str"")) ? FileFormat.SMLM_BINARY : FileFormat.SMLM_TEXT;
      deviations=header.contains((format == FileFormat.SMLM_BINARY) ? ""String_Node_Str"" : ""String_Node_Str"");
      readEndFrame=readId=false;
    }
  }
}",0.967878787878788
149537,"/** 
 * @return The header from the results file
 */
public String getHeader(){
  if (header == null) {
    BufferedReader input=null;
    try {
      FileInputStream fis=new FileInputStream(filename);
      input=new BufferedReader(new UnicodeReader(fis,null));
      StringBuffer sb=new StringBuffer();
      String line;
      int count=0;
      while ((line=input.readLine()) != null) {
        count++;
        if (count == 1) {
          if (line.startsWith(""String_Node_Str"")) {
            sb.append(line).append(""String_Node_Str"");
            break;
          }
          if (line.contains(""String_Node_Str"")) {
            sb.append(line).append(""String_Node_Str"");
            break;
          }
        }
        if (line.length() == 0)         continue;
        if (line.charAt(0) == '#')         sb.append(line).append(""String_Node_Str"");
 else         break;
      }
      header=sb.toString();
      version=getField(""String_Node_Str"");
      guessFormat(line);
    }
 catch (    IOException e) {
    }
 finally {
      try {
        if (input != null)         input.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return header;
}","/** 
 * @return The header from the results file
 */
public String getHeader(){
  if (header == null) {
    BufferedReader input=null;
    try {
      FileInputStream fis=new FileInputStream(filename);
      input=new BufferedReader(new UnicodeReader(fis,null));
      StringBuffer sb=new StringBuffer();
      String line;
      int count=0;
      while ((line=input.readLine()) != null) {
        count++;
        if (count == 1) {
          if (line.startsWith(""String_Node_Str"")) {
            sb.append(line).append(""String_Node_Str"");
            break;
          }
          if (line.contains(IMAGEJ_TABLE_RESULTS_HEADER)) {
            sb.append(line).append(""String_Node_Str"");
            break;
          }
        }
        if (line.length() == 0)         continue;
        if (line.charAt(0) == '#')         sb.append(line).append(""String_Node_Str"");
 else         break;
      }
      header=sb.toString();
      version=getField(""String_Node_Str"");
      guessFormat(line);
    }
 catch (    IOException e) {
    }
 finally {
      try {
        if (input != null)         input.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return header;
}",0.9812446717817562
149538,"@Test public void gradientProcedureComputesSameWithPrecomputed(){
  int iter=10;
  rdg=new RandomDataGenerator(new Well19937c(30051977));
  ErfGaussian2DFunction f1=(ErfGaussian2DFunction)GaussianFunctionFactory.create2D(1,10,10,GaussianFunctionFactory.FIT_ERF_FREE_CIRCLE,null);
  ErfGaussian2DFunction f2=(ErfGaussian2DFunction)GaussianFunctionFactory.create2D(2,10,10,GaussianFunctionFactory.FIT_ERF_FREE_CIRCLE,null);
  double[] a1=new double[7];
  double[] a2=new double[13];
  final double[] x=new double[f1.size()];
  final double[] b=new double[f1.size()];
  for (int i=0; i < iter; i++) {
    a2[Gaussian2DFunction.BACKGROUND]=rdg.nextUniform(0.1,0.3);
    a2[Gaussian2DFunction.SIGNAL]=rdg.nextUniform(100,300);
    a2[Gaussian2DFunction.X_POSITION]=rdg.nextUniform(3,5);
    a2[Gaussian2DFunction.Y_POSITION]=rdg.nextUniform(3,5);
    a2[Gaussian2DFunction.X_SD]=rdg.nextUniform(1,1.3);
    a2[Gaussian2DFunction.Y_SD]=rdg.nextUniform(1,1.3);
    a2[6 + Gaussian2DFunction.SIGNAL]=rdg.nextUniform(100,300);
    a2[6 + Gaussian2DFunction.X_POSITION]=rdg.nextUniform(5,7);
    a2[6 + Gaussian2DFunction.Y_POSITION]=rdg.nextUniform(5,7);
    a2[6 + Gaussian2DFunction.X_SD]=rdg.nextUniform(1,1.3);
    a2[6 + Gaussian2DFunction.Y_SD]=rdg.nextUniform(1,1.3);
    f2.initialise0(a2);
    f1.forEach(new ValueProcedure(){
      int k=0;
      public void execute(      double value){
        x[k++]=(value > 0) ? rdg.nextPoisson(value) : 0;
      }
    }
);
    a1[Gaussian2DFunction.BACKGROUND]=0;
    for (int j=1; j < 7; j++)     a1[j]=a2[6 + j];
    f1.initialise0(a1);
    f1.forEach(new ValueProcedure(){
      int k=0;
      public void execute(      double value){
        b[k++]=value;
      }
    }
);
    for (int j=0; j < 7; j++)     a1[j]=a2[j];
    NewtonRaphsonGradient2Procedure p12=NewtonRaphsonGradient2ProcedureFactory.create(x,f2);
    double[] up1=Arrays.copyOf(p12.computeUpdate(a2),f1.getNumberOfGradients());
    NewtonRaphsonGradient2Procedure p1b2=NewtonRaphsonGradient2ProcedureFactory.create(x,b,f1);
    double[] up2=p1b2.computeUpdate(a1);
    Assert.assertArrayEquals(""String_Node_Str"" + i,p12.u,p1b2.u,1e-10);
    Assert.assertArrayEquals(""String_Node_Str"" + i,up1,up2,1e-10);
    double[] v1=p12.computeValue(a2);
    double[] v2=p1b2.computeValue(a1);
    Assert.assertArrayEquals(""String_Node_Str"" + i,v1,v2,1e-10);
    double[] d1=Arrays.copyOf(p12.computeFirstDerivative(a2),f1.getNumberOfGradients());
    double[] d2=p1b2.computeFirstDerivative(a1);
    Assert.assertArrayEquals(""String_Node_Str"" + i,d1,d2,1e-10);
  }
}","@Test public void gradientProcedureComputesSameWithPrecomputed(){
  int iter=10;
  rdg=new RandomDataGenerator(new Well19937c(30051977));
  ErfGaussian2DFunction f1=(ErfGaussian2DFunction)GaussianFunctionFactory.create2D(1,10,10,GaussianFunctionFactory.FIT_ERF_FREE_CIRCLE,null);
  ErfGaussian2DFunction f2=(ErfGaussian2DFunction)GaussianFunctionFactory.create2D(2,10,10,GaussianFunctionFactory.FIT_ERF_FREE_CIRCLE,null);
  double[] a1=new double[7];
  double[] a2=new double[13];
  final double[] x=new double[f1.size()];
  final double[] b=new double[f1.size()];
  for (int i=0; i < iter; i++) {
    a2[Gaussian2DFunction.BACKGROUND]=rdg.nextUniform(0.1,0.3);
    a2[Gaussian2DFunction.SIGNAL]=rdg.nextUniform(100,300);
    a2[Gaussian2DFunction.X_POSITION]=rdg.nextUniform(3,5);
    a2[Gaussian2DFunction.Y_POSITION]=rdg.nextUniform(3,5);
    a2[Gaussian2DFunction.X_SD]=rdg.nextUniform(1,1.3);
    a2[Gaussian2DFunction.Y_SD]=rdg.nextUniform(1,1.3);
    a2[6 + Gaussian2DFunction.SIGNAL]=rdg.nextUniform(100,300);
    a2[6 + Gaussian2DFunction.X_POSITION]=rdg.nextUniform(5,7);
    a2[6 + Gaussian2DFunction.Y_POSITION]=rdg.nextUniform(5,7);
    a2[6 + Gaussian2DFunction.X_SD]=rdg.nextUniform(1,1.3);
    a2[6 + Gaussian2DFunction.Y_SD]=rdg.nextUniform(1,1.3);
    f2.initialise0(a2);
    f1.forEach(new ValueProcedure(){
      int k=0;
      public void execute(      double value){
        x[k++]=(value > 0) ? rdg.nextPoisson(value) : 0;
      }
    }
);
    a1[Gaussian2DFunction.BACKGROUND]=0;
    for (int j=1; j < 7; j++)     a1[j]=a2[6 + j];
    f1.initialise0(a1);
    f1.forEach(new ValueProcedure(){
      int k=0;
      public void execute(      double value){
        b[k++]=value;
      }
    }
);
    for (int j=0; j < 7; j++)     a1[j]=a2[j];
    NewtonRaphsonGradient2Procedure p12=NewtonRaphsonGradient2ProcedureFactory.create(x,f2);
    p12.computeUpdate(a2);
    double[] up1=Arrays.copyOf(p12.getUpdate(),f1.getNumberOfGradients());
    NewtonRaphsonGradient2Procedure p1b2=NewtonRaphsonGradient2ProcedureFactory.create(x,b,f1);
    p1b2.computeUpdate(a1);
    double[] up2=p1b2.getUpdate();
    Assert.assertArrayEquals(""String_Node_Str"" + i,p12.u,p1b2.u,1e-10);
    Assert.assertArrayEquals(""String_Node_Str"" + i,up1,up2,1e-10);
    double[] v1=p12.computeValue(a2);
    double[] v2=p1b2.computeValue(a1);
    Assert.assertArrayEquals(""String_Node_Str"" + i,v1,v2,1e-10);
    double[] d1=Arrays.copyOf(p12.computeFirstDerivative(a2),f1.getNumberOfGradients());
    double[] d2=p1b2.computeFirstDerivative(a1);
    Assert.assertArrayEquals(""String_Node_Str"" + i,d1,d2,1e-10);
  }
}",0.9313479017598144
149539,"/** 
 * Fit the single spot location as two spots (a doublet). <p> Perform quadrant analysis as per rapidSTORM. If the residuals of the the fit are skewed around the single fit result then an attempt is made to fit two spots (a doublet)
 * @param fitResult the fit result
 * @param region the region
 * @param regionBounds the region bounds
 * @param residualsThreshold the residuals threshold
 * @param neighbours the neighbours
 * @param peakNeighbours the peak neighbours
 * @param qa the qa object that performed quadrant analysis
 * @return the multi path fit result. fit result
 */
private MultiPathFitResult.FitResult fitAsDoublet(FitResult fitResult,double[] region,Rectangle regionBounds,double residualsThreshold,CandidateList neighbours,PeakResult[] peakNeighbours,QuadrantAnalysis qa,double singleSumOfSquares,double singelValue){
  final int width=regionBounds.width;
  final int height=regionBounds.height;
  final double[] params=fitResult.getParameters();
  final int cx=(int)Math.round(params[Gaussian2DFunction.X_POSITION]);
  final int cy=(int)Math.round(params[Gaussian2DFunction.Y_POSITION]);
  if (logger != null)   logger.info(""String_Node_Str"");
  if (!qa.computeDoubletCentres(width,height,cx,cy,params[Gaussian2DFunction.X_SD],params[Gaussian2DFunction.Y_SD]))   return null;
  final double[] doubletParams=new double[1 + 2 * 6];
  doubletParams[Gaussian2DFunction.BACKGROUND]=params[Gaussian2DFunction.BACKGROUND];
  doubletParams[Gaussian2DFunction.SIGNAL]=params[Gaussian2DFunction.SIGNAL] * 0.5;
  doubletParams[Gaussian2DFunction.X_POSITION]=(float)(qa.x1 - 0.5);
  doubletParams[Gaussian2DFunction.Y_POSITION]=(float)(qa.y1 - 0.5);
  doubletParams[6 + Gaussian2DFunction.SIGNAL]=params[Gaussian2DFunction.SIGNAL] * 0.5;
  doubletParams[6 + Gaussian2DFunction.X_POSITION]=(float)(qa.x2 - 0.5);
  doubletParams[6 + Gaussian2DFunction.Y_POSITION]=(float)(qa.y2 - 0.5);
  final double shift=fitConfig.getCoordinateShift();
  final int maxIterations=fitConfig.getMaxIterations();
  final int maxEvaluations=fitConfig.getMaxFunctionEvaluations();
  fitConfig.setCoordinateShift(FastMath.min(width,height));
  fitConfig.setFitRegion(0,0,0);
  fitConfig.setMaxIterations(maxIterations * ITERATION_INCREASE_FOR_DOUBLETS);
  fitConfig.setMaxFunctionEvaluations(maxEvaluations * FitWorker.EVALUATION_INCREASE_FOR_DOUBLETS);
  final boolean isComputeResiduals=gf.isComputeResiduals();
  gf.setComputeResiduals(false);
  final boolean[] amplitudeEstimate=new boolean[2];
  final FitResult newFitResult=gf.fit(region,width,height,2,doubletParams,amplitudeEstimate,doubletParams[Gaussian2DFunction.BACKGROUND] == 0);
  gf.setComputeResiduals(isComputeResiduals);
  fitConfig.setCoordinateShift(shift);
  fitConfig.setFitRegion(width,height,0.5);
  fitConfig.setMaxIterations(maxIterations);
  fitConfig.setMaxFunctionEvaluations(maxEvaluations);
  updateError(newFitResult);
  if (newFitResult.getStatus() == FitStatus.OK) {
    final double doubleSumOfSquares=gf.getFinalResidualSumOfSquares();
    final int length=width * height;
    final double ic1, ic2;
    if (fitConfig.getFitSolver() == FitSolver.MLE && fitConfig.isModelCamera()) {
      final double doubleValue=gf.getValue();
      ic1=Maths.getBayesianInformationCriterion(singleValue,length,fitResult.getNumberOfFittedParameters());
      ic2=Maths.getBayesianInformationCriterion(doubleValue,length,newFitResult.getNumberOfFittedParameters());
      if (logger != null)       logger.info(""String_Node_Str"",singleSumOfSquares,singleValue,ic1,doubleSumOfSquares,doubleValue,ic2,ic1 - ic2);
    }
 else {
      ic1=Maths.getBayesianInformationCriterionFromResiduals(singleSumOfSquares,length,fitResult.getNumberOfFittedParameters());
      ic2=Maths.getBayesianInformationCriterionFromResiduals(doubleSumOfSquares,length,newFitResult.getNumberOfFittedParameters());
      if (logger != null)       logger.info(""String_Node_Str"",singleSumOfSquares,ic1,doubleSumOfSquares,ic2,ic1 - ic2);
    }
    if (logger2 != null) {
      double[] peakParams=newFitResult.getParameters();
      if (peakParams != null) {
        peakParams=Arrays.copyOf(peakParams,peakParams.length);
        int npeaks=peakParams.length / 6;
        for (int i=0; i < npeaks; i++) {
          peakParams[i * 6 + Gaussian2DFunction.X_POSITION]+=0.5 + regionBounds.x;
          peakParams[i * 6 + Gaussian2DFunction.Y_POSITION]+=0.5 + regionBounds.y;
        }
      }
      String msg=String.format(""String_Node_Str"",slice,cc.fromRegionToGlobalX(cx),cc.fromRegionToGlobalY(cy),newFitResult.getStatus(),newFitResult.getStatusData(),singleValue,gf.getValue(),singleSumOfSquares,doubleSumOfSquares,ic1,ic2,Arrays.toString(peakParams));
      logger2.debug(msg);
    }
    if (ic2 > ic1) {
      return createResult(newFitResult,null,FitStatus.NO_MODEL_IMPROVEMENT);
    }
    final double[] fitParams=newFitResult.getParameters();
    final double[] initialParams=newFitResult.getInitialParameters();
    final double halfWindow=0.5 * FastMath.min(regionBounds.width,regionBounds.height);
    final int[] position=new int[2];
    final int[] candidateIndex=new int[2];
    int nPeaks=0;
    NEXT_PEAK:     for (int n=0; n < 2; n++) {
      final int offset=n * 6;
      initialParams[Gaussian2DFunction.X_POSITION + offset]=candidates.get(candidateId).x - regionBounds.x;
      initialParams[Gaussian2DFunction.Y_POSITION + offset]=candidates.get(candidateId).y - regionBounds.y;
      final double xpos=fitParams[Gaussian2DFunction.X_POSITION + offset] + 0.5;
      final double ypos=fitParams[Gaussian2DFunction.Y_POSITION + offset] + 0.5;
      if (xpos < 0 || xpos > width || ypos < 0 || ypos > height) {
        if (logger != null)         logger.info(""String_Node_Str"",xpos,ypos,width,height);
        continue;
      }
      double xShift=fitParams[Gaussian2DFunction.X_POSITION + offset] - params[Gaussian2DFunction.X_POSITION];
      double yShift=fitParams[Gaussian2DFunction.Y_POSITION + offset] - params[Gaussian2DFunction.Y_POSITION];
      if (Math.abs(xShift) > halfWindow || Math.abs(yShift) > halfWindow) {
        final double a=QuadrantAnalysis.getAngle(qa.vector,new double[]{xShift,yShift});
        if (a > 0.785398 && a < 2.356194) {
          if (logger != null) {
            logger.info(""String_Node_Str"",n,xShift,yShift,a * 57.29578);
          }
          continue;
        }
      }
      xShift=fitParams[Gaussian2DFunction.X_POSITION + offset] - initialParams[Gaussian2DFunction.X_POSITION];
      yShift=fitParams[Gaussian2DFunction.Y_POSITION + offset] - initialParams[Gaussian2DFunction.Y_POSITION];
      final double distanceToSingleFit2=xShift * xShift + yShift * yShift;
      if (peakNeighbours.length != 0) {
        final float fcx2=(float)(regionBounds.x + fitParams[Gaussian2DFunction.X_POSITION + offset] + 0.5);
        final float fcy2=(float)(regionBounds.y + fitParams[Gaussian2DFunction.Y_POSITION + offset] + 0.5);
        final float d2=(float)distanceToSingleFit2;
        for (int i=0; i < peakNeighbours.length; i++) {
          if (d2 > distance2(fcx2,fcy2,peakNeighbours[i].params)) {
            if (logger != null) {
              logger.info(""String_Node_Str"",n,candidates.get(candidateId).x,candidates.get(candidateId).y,fcx2,fcy2,peakNeighbours[i].getXPosition(),peakNeighbours[i].getYPosition());
            }
            continue NEXT_PEAK;
          }
        }
      }
      int otherId=candidateId;
      if (neighbours.size != 0) {
        float fcx2=(float)(regionBounds.x + fitParams[Gaussian2DFunction.X_POSITION + offset]);
        float fcy2=(float)(regionBounds.y + fitParams[Gaussian2DFunction.Y_POSITION + offset]);
        double mind2=distanceToSingleFit2;
        for (int j=0; j < neighbours.size; j++) {
          final int id=neighbours.list[j].index;
          if (isFit(id))           continue;
          final double d2=distance2(fcx2,fcy2,candidates.get(id));
          if (mind2 > d2) {
            mind2=d2;
            otherId=id;
          }
        }
        if (otherId != candidateId) {
          if (logger != null) {
            logger.info(""String_Node_Str"",n,candidates.get(candidateId).x,candidates.get(candidateId).y,fcx2 + 0.5f,fcy2 + 0.5f,candidates.get(otherId).x,candidates.get(otherId).y);
          }
          initialParams[Gaussian2DFunction.X_POSITION + offset]=candidates.get(otherId).x - regionBounds.x;
          initialParams[Gaussian2DFunction.Y_POSITION + offset]=candidates.get(otherId).y - regionBounds.y;
        }
      }
      candidateIndex[nPeaks]=otherId;
      position[nPeaks++]=n;
    }
    if (nPeaks == 0) {
      return createResult(newFitResult,null,FitStatus.FAILED_VALIDATION);
    }
    convertParameters(fitParams);
    final PreprocessedPeakResult[] results=new PreprocessedPeakResult[nPeaks];
    for (int i=0; i < nPeaks; i++) {
      final ResultType resultType=(candidateIndex[i] <= candidateId) ? ResultType.NEW : ResultType.CANDIDATE;
      results[i]=resultFactory.createPreprocessedPeakResult(candidateIndex[i],position[i],initialParams,fitParams,0,resultType);
    }
    return createResult(newFitResult,results);
  }
 else {
    if (logger != null)     logger.info(""String_Node_Str"",newFitResult.getStatus());
    if (logger2 != null) {
      double[] peakParams=newFitResult.getParameters();
      if (peakParams != null) {
        peakParams=Arrays.copyOf(peakParams,peakParams.length);
        int npeaks=peakParams.length / 6;
        for (int i=0; i < npeaks; i++) {
          peakParams[i * 6 + Gaussian2DFunction.X_POSITION]+=0.5 + regionBounds.x;
          peakParams[i * 6 + Gaussian2DFunction.Y_POSITION]+=0.5 + regionBounds.y;
        }
      }
      String msg=String.format(""String_Node_Str"",slice,cc.fromRegionToGlobalX(cx),cc.fromRegionToGlobalY(cy),newFitResult.getStatus(),newFitResult.getStatusData(),Arrays.toString(peakParams));
      logger2.debug(msg);
    }
    return createResult(newFitResult,null);
  }
}","/** 
 * Fit the single spot location as two spots (a doublet). <p> Perform quadrant analysis as per rapidSTORM. If the residuals of the the fit are skewed around the single fit result then an attempt is made to fit two spots (a doublet)
 * @param fitResult the fit result
 * @param region the region
 * @param regionBounds the region bounds
 * @param residualsThreshold the residuals threshold
 * @param neighbours the neighbours
 * @param peakNeighbours the peak neighbours
 * @param qa the qa object that performed quadrant analysis
 * @return the multi path fit result. fit result
 */
private MultiPathFitResult.FitResult fitAsDoublet(FitResult fitResult,double[] region,Rectangle regionBounds,double residualsThreshold,CandidateList neighbours,PeakResult[] peakNeighbours,QuadrantAnalysis qa,double singleSumOfSquares,double singleValue){
  final int width=regionBounds.width;
  final int height=regionBounds.height;
  final double[] params=fitResult.getParameters();
  final int cx=(int)Math.round(params[Gaussian2DFunction.X_POSITION]);
  final int cy=(int)Math.round(params[Gaussian2DFunction.Y_POSITION]);
  if (logger != null)   logger.info(""String_Node_Str"");
  if (!qa.computeDoubletCentres(width,height,cx,cy,params[Gaussian2DFunction.X_SD],params[Gaussian2DFunction.Y_SD]))   return null;
  final double[] doubletParams=new double[1 + 2 * 6];
  doubletParams[Gaussian2DFunction.BACKGROUND]=params[Gaussian2DFunction.BACKGROUND];
  doubletParams[Gaussian2DFunction.SIGNAL]=params[Gaussian2DFunction.SIGNAL] * 0.5;
  doubletParams[Gaussian2DFunction.X_POSITION]=(float)(qa.x1 - 0.5);
  doubletParams[Gaussian2DFunction.Y_POSITION]=(float)(qa.y1 - 0.5);
  doubletParams[6 + Gaussian2DFunction.SIGNAL]=params[Gaussian2DFunction.SIGNAL] * 0.5;
  doubletParams[6 + Gaussian2DFunction.X_POSITION]=(float)(qa.x2 - 0.5);
  doubletParams[6 + Gaussian2DFunction.Y_POSITION]=(float)(qa.y2 - 0.5);
  final double shift=fitConfig.getCoordinateShift();
  final int maxIterations=fitConfig.getMaxIterations();
  final int maxEvaluations=fitConfig.getMaxFunctionEvaluations();
  fitConfig.setCoordinateShift(FastMath.min(width,height));
  fitConfig.setFitRegion(0,0,0);
  fitConfig.setMaxIterations(maxIterations * ITERATION_INCREASE_FOR_DOUBLETS);
  fitConfig.setMaxFunctionEvaluations(maxEvaluations * FitWorker.EVALUATION_INCREASE_FOR_DOUBLETS);
  final boolean isComputeResiduals=gf.isComputeResiduals();
  gf.setComputeResiduals(false);
  final boolean[] amplitudeEstimate=new boolean[2];
  final FitResult newFitResult=gf.fit(region,width,height,2,doubletParams,amplitudeEstimate,doubletParams[Gaussian2DFunction.BACKGROUND] == 0);
  gf.setComputeResiduals(isComputeResiduals);
  fitConfig.setCoordinateShift(shift);
  fitConfig.setFitRegion(width,height,0.5);
  fitConfig.setMaxIterations(maxIterations);
  fitConfig.setMaxFunctionEvaluations(maxEvaluations);
  updateError(newFitResult);
  if (newFitResult.getStatus() == FitStatus.OK) {
    final double doubleSumOfSquares=gf.getFinalResidualSumOfSquares();
    final int length=width * height;
    final double ic1, ic2;
    if (fitConfig.getFitSolver() == FitSolver.MLE && fitConfig.isModelCamera()) {
      final double doubleValue=gf.getValue();
      ic1=Maths.getBayesianInformationCriterion(singleValue,length,fitResult.getNumberOfFittedParameters());
      ic2=Maths.getBayesianInformationCriterion(doubleValue,length,newFitResult.getNumberOfFittedParameters());
      if (logger != null)       logger.info(""String_Node_Str"",singleSumOfSquares,singleValue,ic1,doubleSumOfSquares,doubleValue,ic2,ic1 - ic2);
    }
 else {
      ic1=Maths.getBayesianInformationCriterionFromResiduals(singleSumOfSquares,length,fitResult.getNumberOfFittedParameters());
      ic2=Maths.getBayesianInformationCriterionFromResiduals(doubleSumOfSquares,length,newFitResult.getNumberOfFittedParameters());
      if (logger != null)       logger.info(""String_Node_Str"",singleSumOfSquares,ic1,doubleSumOfSquares,ic2,ic1 - ic2);
    }
    if (logger2 != null) {
      double[] peakParams=newFitResult.getParameters();
      if (peakParams != null) {
        peakParams=Arrays.copyOf(peakParams,peakParams.length);
        int npeaks=peakParams.length / 6;
        for (int i=0; i < npeaks; i++) {
          peakParams[i * 6 + Gaussian2DFunction.X_POSITION]+=0.5 + regionBounds.x;
          peakParams[i * 6 + Gaussian2DFunction.Y_POSITION]+=0.5 + regionBounds.y;
        }
      }
      String msg=String.format(""String_Node_Str"",slice,cc.fromRegionToGlobalX(cx),cc.fromRegionToGlobalY(cy),newFitResult.getStatus(),newFitResult.getStatusData(),singleValue,gf.getValue(),singleSumOfSquares,doubleSumOfSquares,ic1,ic2,Arrays.toString(peakParams));
      logger2.debug(msg);
    }
    if (ic2 > ic1) {
      return createResult(newFitResult,null,FitStatus.NO_MODEL_IMPROVEMENT);
    }
    final double[] fitParams=newFitResult.getParameters();
    final double[] initialParams=newFitResult.getInitialParameters();
    final double halfWindow=0.5 * FastMath.min(regionBounds.width,regionBounds.height);
    final int[] position=new int[2];
    final int[] candidateIndex=new int[2];
    int nPeaks=0;
    NEXT_PEAK:     for (int n=0; n < 2; n++) {
      final int offset=n * 6;
      initialParams[Gaussian2DFunction.X_POSITION + offset]=candidates.get(candidateId).x - regionBounds.x;
      initialParams[Gaussian2DFunction.Y_POSITION + offset]=candidates.get(candidateId).y - regionBounds.y;
      final double xpos=fitParams[Gaussian2DFunction.X_POSITION + offset] + 0.5;
      final double ypos=fitParams[Gaussian2DFunction.Y_POSITION + offset] + 0.5;
      if (xpos < 0 || xpos > width || ypos < 0 || ypos > height) {
        if (logger != null)         logger.info(""String_Node_Str"",xpos,ypos,width,height);
        continue;
      }
      double xShift=fitParams[Gaussian2DFunction.X_POSITION + offset] - params[Gaussian2DFunction.X_POSITION];
      double yShift=fitParams[Gaussian2DFunction.Y_POSITION + offset] - params[Gaussian2DFunction.Y_POSITION];
      if (Math.abs(xShift) > halfWindow || Math.abs(yShift) > halfWindow) {
        final double a=QuadrantAnalysis.getAngle(qa.vector,new double[]{xShift,yShift});
        if (a > 0.785398 && a < 2.356194) {
          if (logger != null) {
            logger.info(""String_Node_Str"",n,xShift,yShift,a * 57.29578);
          }
          continue;
        }
      }
      xShift=fitParams[Gaussian2DFunction.X_POSITION + offset] - initialParams[Gaussian2DFunction.X_POSITION];
      yShift=fitParams[Gaussian2DFunction.Y_POSITION + offset] - initialParams[Gaussian2DFunction.Y_POSITION];
      final double distanceToSingleFit2=xShift * xShift + yShift * yShift;
      if (peakNeighbours.length != 0) {
        final float fcx2=(float)(regionBounds.x + fitParams[Gaussian2DFunction.X_POSITION + offset] + 0.5);
        final float fcy2=(float)(regionBounds.y + fitParams[Gaussian2DFunction.Y_POSITION + offset] + 0.5);
        final float d2=(float)distanceToSingleFit2;
        for (int i=0; i < peakNeighbours.length; i++) {
          if (d2 > distance2(fcx2,fcy2,peakNeighbours[i].params)) {
            if (logger != null) {
              logger.info(""String_Node_Str"",n,candidates.get(candidateId).x,candidates.get(candidateId).y,fcx2,fcy2,peakNeighbours[i].getXPosition(),peakNeighbours[i].getYPosition());
            }
            continue NEXT_PEAK;
          }
        }
      }
      int otherId=candidateId;
      if (neighbours.size != 0) {
        float fcx2=(float)(regionBounds.x + fitParams[Gaussian2DFunction.X_POSITION + offset]);
        float fcy2=(float)(regionBounds.y + fitParams[Gaussian2DFunction.Y_POSITION + offset]);
        double mind2=distanceToSingleFit2;
        for (int j=0; j < neighbours.size; j++) {
          final int id=neighbours.list[j].index;
          if (isFit(id))           continue;
          final double d2=distance2(fcx2,fcy2,candidates.get(id));
          if (mind2 > d2) {
            mind2=d2;
            otherId=id;
          }
        }
        if (otherId != candidateId) {
          if (logger != null) {
            logger.info(""String_Node_Str"",n,candidates.get(candidateId).x,candidates.get(candidateId).y,fcx2 + 0.5f,fcy2 + 0.5f,candidates.get(otherId).x,candidates.get(otherId).y);
          }
          initialParams[Gaussian2DFunction.X_POSITION + offset]=candidates.get(otherId).x - regionBounds.x;
          initialParams[Gaussian2DFunction.Y_POSITION + offset]=candidates.get(otherId).y - regionBounds.y;
        }
      }
      candidateIndex[nPeaks]=otherId;
      position[nPeaks++]=n;
    }
    if (nPeaks == 0) {
      return createResult(newFitResult,null,FitStatus.FAILED_VALIDATION);
    }
    convertParameters(fitParams);
    final PreprocessedPeakResult[] results=new PreprocessedPeakResult[nPeaks];
    for (int i=0; i < nPeaks; i++) {
      final ResultType resultType=(candidateIndex[i] <= candidateId) ? ResultType.NEW : ResultType.CANDIDATE;
      results[i]=resultFactory.createPreprocessedPeakResult(candidateIndex[i],position[i],initialParams,fitParams,0,resultType);
    }
    return createResult(newFitResult,results);
  }
 else {
    if (logger != null)     logger.info(""String_Node_Str"",newFitResult.getStatus());
    if (logger2 != null) {
      double[] peakParams=newFitResult.getParameters();
      if (peakParams != null) {
        peakParams=Arrays.copyOf(peakParams,peakParams.length);
        int npeaks=peakParams.length / 6;
        for (int i=0; i < npeaks; i++) {
          peakParams[i * 6 + Gaussian2DFunction.X_POSITION]+=0.5 + regionBounds.x;
          peakParams[i * 6 + Gaussian2DFunction.Y_POSITION]+=0.5 + regionBounds.y;
        }
      }
      String msg=String.format(""String_Node_Str"",slice,cc.fromRegionToGlobalX(cx),cc.fromRegionToGlobalY(cy),newFitResult.getStatus(),newFitResult.getStatusData(),Arrays.toString(peakParams));
      logger2.debug(msg);
    }
    return createResult(newFitResult,null);
  }
}",0.9997983870967742
149540,"/** 
 * Gets the sample.
 * @param nNo the number of samples with no localisations
 * @param nLow the number of samples with low localisations
 * @param nHigh the number of samples with high localisations
 * @return the sample (could be empty if no samples were made)
 */
public ImageStack getSample(int nNo,int nLow,int nHigh){
  ImageStack out=new ImageStack(size,size);
  if (!isValid())   return out;
  list.clearf();
  for (  int i : r.sample(nNo,no.length))   list.add(new long[]{no[i],0});
  for (  int i : r.sample(nLow,lower))   list.add(data[i]);
  for (  int i : r.sample(nHigh,upper))   list.add(data[i + lower]);
  if (list.isEmpty())   return out;
  long[][] sample=list.toArray(new long[list.size()][]);
  Arrays.sort(sample,lc);
  int[] xyz=new int[3];
  Rectangle stackBounds=new Rectangle(stack.getWidth(),stack.getHeight());
  for (  long[] s : sample) {
    getXYZ(s[0],xyz);
    Rectangle target=new Rectangle(xyz[0],xyz[1],size,size);
    target=target.intersection(stackBounds);
    if (target.width == 0 || target.height == 0)     continue;
    int slice=xyz[2];
    ImageProcessor ip=stack.getProcessor(slice);
    float[] pixels=new float[size * size];
    for (int y=0; y < target.height; y++)     for (int x=0, i=y * size, index=target.y * ip.getWidth() + target.x; x < target.width; x++, i++, index++) {
      pixels[i]=ip.getf(index);
    }
    out.addSlice(String.format(""String_Node_Str"",slice,xyz[0],xyz[1],s[1]),pixels);
  }
  return out;
}","/** 
 * Gets the sample.
 * @param nNo the number of samples with no localisations
 * @param nLow the number of samples with low localisations
 * @param nHigh the number of samples with high localisations
 * @return the sample (could be empty if no samples were made)
 */
public ImageStack getSample(int nNo,int nLow,int nHigh){
  ImageStack out=new ImageStack(size,size);
  if (!isValid())   return out;
  list.clearf();
  for (  int i : r.sample(nNo,no.length))   list.add(new long[]{no[i],0});
  for (  int i : r.sample(nLow,lower))   list.add(data[i]);
  for (  int i : r.sample(nHigh,upper))   list.add(data[i + lower]);
  if (list.isEmpty())   return out;
  long[][] sample=list.toArray(new long[list.size()][]);
  Arrays.sort(sample,lc);
  int[] xyz=new int[3];
  Rectangle stackBounds=new Rectangle(stack.getWidth(),stack.getHeight());
  for (  long[] s : sample) {
    getXYZ(s[0],xyz);
    Rectangle target=new Rectangle(xyz[0],xyz[1],size,size);
    target=target.intersection(stackBounds);
    if (target.width == 0 || target.height == 0)     continue;
    int slice=xyz[2];
    ImageProcessor ip=stack.getProcessor(slice);
    float[] pixels=new float[size * size];
    for (int y=0; y < target.height; y++)     for (int x=0, i=y * size, index=(y + target.y) * ip.getWidth() + target.x; x < target.width; x++, i++, index++) {
      pixels[i]=ip.getf(index);
    }
    out.addSlice(String.format(""String_Node_Str"",slice,xyz[0],xyz[1],s[1]),pixels);
  }
  return out;
}",0.992552471225457
149541,"private void summariseResults(HashMap<Integer,FilterCandidates> filterCandidates,long runTime,PreprocessedPeakResult[] preprocessedPeakResults){
  createTable();
  StoredDataStatistics distanceStats=new StoredDataStatistics();
  StoredDataStatistics depthStats=new StoredDataStatistics();
  createFilterCriteria();
  StoredDataStatistics[][] stats=new StoredDataStatistics[3][filterCriteria.length];
  for (int i=0; i < stats.length; i++)   for (int j=0; j < stats[i].length; j++)   stats[i][j]=new StoredDataStatistics();
  final double nmPerPixel=simulationParameters.a;
  double tp=0, fp=0;
  int failcTP=0, failcFP=0;
  int cTP=0, cFP=0;
  int[] singleStatus=null, multiStatus=null, doubletStatus=null, multiDoubletStatus=null;
  singleStatus=new int[FitStatus.values().length];
  multiStatus=new int[singleStatus.length];
  doubletStatus=new int[singleStatus.length];
  multiDoubletStatus=new int[singleStatus.length];
  for (  FilterCandidates result : filterCandidates.values()) {
    tp+=result.tp;
    fp+=result.fp;
    for (int i=0; i < result.fitResult.length; i++) {
      if (result.spots[i].match)       cTP++;
 else       cFP++;
      final MultiPathFitResult fitResult=result.fitResult[i];
      if (singleStatus != null && result.spots[i].match) {
        addStatus(singleStatus,fitResult.getSingleFitResult());
        addStatus(multiStatus,fitResult.getMultiFitResult());
        addStatus(doubletStatus,fitResult.getDoubletFitResult());
        addStatus(multiDoubletStatus,fitResult.getMultiDoubletFitResult());
      }
      if (noMatch(fitResult)) {
        if (result.spots[i].match)         failcTP++;
 else         failcFP++;
      }
      addToStats(fitResult.getSingleFitResult(),stats);
      addToStats(fitResult.getMultiFitResult(),stats);
      addToStats(fitResult.getDoubletFitResult(),stats);
      addToStats(fitResult.getMultiDoubletFitResult(),stats);
    }
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      distanceStats.add(fitMatch.d * nmPerPixel);
      depthStats.add(fitMatch.z * nmPerPixel);
    }
  }
  double[] i1=new double[depthStats.getN()];
  double[] i2=new double[i1.length];
  double[] is=new double[i1.length];
  int ci=0;
  for (  FilterCandidates result : filterCandidates.values()) {
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      ScoredSpot spot=result.spots[fitMatch.i];
      i1[ci]=fitMatch.predictedSignal;
      i2[ci]=fitMatch.actualSignal;
      is[ci]=spot.spot.intensity;
      ci++;
    }
  }
  ArrayList<MultiPathFitResults> multiPathResults=new ArrayList<MultiPathFitResults>(filterCandidates.size());
  for (  Entry<Integer,FilterCandidates> entry : filterCandidates.entrySet()) {
    int frame=entry.getKey();
    MultiPathFitResult[] multiPathFitResults=entry.getValue().fitResult;
    int totalCandidates=multiPathFitResults.length;
    int nActual=actualCoordinates.get(frame).size();
    multiPathResults.add(new MultiPathFitResults(frame,multiPathFitResults,totalCandidates,nActual));
  }
  List<FractionalAssignment[]> assignments=new ArrayList<FractionalAssignment[]>();
  final Set<Integer> set=new TreeSet<Integer>();
  FractionScoreStore scoreStore=new FractionScoreStore(){
    public void add(    int uniqueId){
      set.add(uniqueId);
    }
  }
;
  MultiPathFitResults[] multiResults=multiPathResults.toArray(new MultiPathFitResults[multiPathResults.size()]);
  MultiPathFilter mpf=new MultiPathFilter(new SignalFilter(0),null,multiFilter.residualsThreshold);
  FractionClassificationResult fractionResult=mpf.fractionScoreSubset(multiResults,Integer.MAX_VALUE,this.results.size(),assignments,scoreStore);
  double nPredicted=fractionResult.getTP() + fractionResult.getFP();
  double[][] matchScores=new double[set.size()][];
  int count=0;
  for (int i=0; i < assignments.size(); i++) {
    FractionalAssignment[] a=assignments.get(i);
    if (a == null)     continue;
    for (int j=0; j < a.length; j++) {
      final PreprocessedPeakResult r=((PeakFractionalAssignment)a[j]).peakResult;
      set.remove(r.getUniqueId());
      final double precision=Math.sqrt(r.getLocationVariance());
      final double signal=r.getSignal();
      final double snr=r.getSNR();
      final double width=r.getXSDFactor();
      final double xShift=r.getXRelativeShift2();
      final double yShift=r.getYRelativeShift2();
      final double shift=(xShift > yShift) ? Math.sqrt(xShift) : Math.sqrt(yShift);
      final double eshift=Math.sqrt(xShift + yShift);
      final double[] score=new double[8];
      score[FILTER_SIGNAL]=signal;
      score[FILTER_SNR]=snr;
      score[FILTER_MIN_WIDTH]=width;
      score[FILTER_MAX_WIDTH]=width;
      score[FILTER_SHIFT]=shift;
      score[FILTER_ESHIFT]=eshift;
      score[FILTER_PRECISION]=precision;
      score[FILTER_PRECISION + 1]=a[j].getScore();
      matchScores[count++]=score;
    }
  }
  for (  int uniqueId : set.toArray(new Integer[0])) {
    PreprocessedPeakResult r=preprocessedPeakResults[uniqueId];
    if (r == null)     throw new RuntimeException(""String_Node_Str"" + uniqueId);
    final double precision=Math.sqrt(r.getLocationVariance());
    final double signal=r.getSignal();
    final double snr=r.getSNR();
    final double width=r.getXSDFactor();
    final double xShift=r.getXRelativeShift2();
    final double yShift=r.getYRelativeShift2();
    final double shift=(xShift > yShift) ? Math.sqrt(xShift) : Math.sqrt(yShift);
    final double eshift=Math.sqrt(xShift + yShift);
    final double[] score=new double[8];
    score[FILTER_SIGNAL]=signal;
    score[FILTER_SNR]=snr;
    score[FILTER_MIN_WIDTH]=width;
    score[FILTER_MAX_WIDTH]=width;
    score[FILTER_SHIFT]=shift;
    score[FILTER_ESHIFT]=eshift;
    score[FILTER_PRECISION]=precision;
    matchScores[count++]=score;
  }
  if (singleStatus != null) {
    String name=PeakFit.getSolverName(fitConfig);
    if (fitConfig.getFitSolver() == FitSolver.MLE && fitConfig.isModelCamera())     name+=""String_Node_Str"";
    System.out.println(""String_Node_Str"" + name);
    printFailures(""String_Node_Str"",singleStatus);
    printFailures(""String_Node_Str"",multiStatus);
    printFailures(""String_Node_Str"",doubletStatus);
    printFailures(""String_Node_Str"",multiDoubletStatus);
  }
  StringBuilder sb=new StringBuilder();
  final double signal=simulationParameters.signalPerFrame;
  final int n=results.size();
  sb.append(imp.getStackSize()).append(""String_Node_Str"");
  final int w=imp.getWidth();
  final int h=imp.getHeight();
  sb.append(w).append(""String_Node_Str"");
  sb.append(h).append(""String_Node_Str"");
  sb.append(n).append(""String_Node_Str"");
  double density=((double)n / imp.getStackSize()) / (w * h) / (simulationParameters.a * simulationParameters.a / 1e6);
  sb.append(Utils.rounded(density)).append(""String_Node_Str"");
  sb.append(Utils.rounded(signal)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.a)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.depth)).append(""String_Node_Str"");
  sb.append(simulationParameters.fixedDepth).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.gain)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.readNoise)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b2)).append(""String_Node_Str"");
  double noise=simulationParameters.b2;
  if (simulationParameters.emCCD) {
    final double readVariance=noise - simulationParameters.b;
    noise=simulationParameters.b * 2 + readVariance;
  }
  if (simulationParameters.fullSimulation) {
  }
  sb.append(Utils.rounded(signal / Math.sqrt(noise))).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s / simulationParameters.a)).append(""String_Node_Str"");
  sb.append(spotFilter.getDescription());
  addCount(sb,nP + nN);
  addCount(sb,nP);
  addCount(sb,nN);
  addCount(sb,fP);
  addCount(sb,fN);
  String name=PeakFit.getSolverName(fitConfig);
  if (fitConfig.getFitSolver() == FitSolver.MLE && fitConfig.isModelCamera())   name+=""String_Node_Str"";
  add(sb,name);
  add(sb,config.getFitting());
  resultPrefix=sb.toString();
  add(sb,(100.0 * cTP) / nP);
  add(sb,(100.0 * cFP) / nN);
  add(sb,cTP + cFP);
  add(sb,cTP);
  add(sb,cFP);
  FractionClassificationResult m=new FractionClassificationResult(cTP,cFP,0,simulationParameters.molecules - cTP);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  add(sb,failcTP);
  add(sb,failcFP);
  add(sb,tp);
  add(sb,fp);
  m=new FractionClassificationResult(tp,fp,0,simulationParameters.molecules - tp);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  m=new FractionClassificationResult(tp,0,0,simulationParameters.molecules - tp);
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  double median=distanceStats.getMedian();
  add(sb,median);
  WindowOrganiser wo=new WindowOrganiser();
  String label=String.format(""String_Node_Str"",Utils.rounded(m.getRecall()),distanceStats.getN(),Utils.rounded(median),Utils.rounded(distanceStats.getStandardDeviation()));
  int id=Utils.showHistogram(TITLE,distanceStats,""String_Node_Str"",0,0,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  median=depthStats.getMedian();
  add(sb,median);
  int[] indices=Utils.newArray(i1.length,0,1);
  if (showCorrelation)   Sort.sort(indices,is,rankByIntensity);
  double[] r=(showCorrelation) ? new double[i1.length] : null;
  double[] sr=(showCorrelation) ? new double[i1.length] : null;
  double[] rank=(showCorrelation) ? new double[i1.length] : null;
  ci=0;
  FastCorrelator fastCorrelator=new FastCorrelator();
  ArrayList<Ranking> pc1=new ArrayList<Ranking>();
  ArrayList<Ranking> pc2=new ArrayList<Ranking>();
  for (  int ci2 : indices) {
    fastCorrelator.add((long)Math.round(i1[ci2]),(long)Math.round(i2[ci2]));
    pc1.add(new Ranking(i1[ci2],ci));
    pc2.add(new Ranking(i2[ci2],ci));
    if (showCorrelation) {
      r[ci]=fastCorrelator.getCorrelation();
      sr[ci]=Correlator.correlation(rank(pc1),rank(pc2));
      if (rankByIntensity)       rank[ci]=is[0] - is[ci];
 else       rank[ci]=ci;
    }
    ci++;
  }
  final double pearsonCorr=fastCorrelator.getCorrelation();
  final double rankedCorr=Correlator.correlation(rank(pc1),rank(pc2));
  SimpleRegression regression=new SimpleRegression(false);
  for (int i=0; i < pc1.size(); i++)   regression.addData(pc1.get(i).value,pc2.get(i).value);
  final double slope=regression.getSlope();
  if (showCorrelation) {
    String title=TITLE + ""String_Node_Str"";
    Plot plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] limits1=Maths.limits(i1);
    double[] limits2=Maths.limits(i2);
    plot.setLimits(limits1[0],limits1[1],limits2[0],limits2[1]);
    label=String.format(""String_Node_Str"",Utils.rounded(pearsonCorr),Utils.rounded(rankedCorr),Utils.rounded(slope));
    plot.addLabel(0,0,label);
    plot.setColor(Color.red);
    plot.addPoints(i1,i2,Plot.DOT);
    if (slope > 1)     plot.drawLine(limits1[0],limits1[0] * slope,limits1[1],limits1[1] * slope);
 else     plot.drawLine(limits2[0] / slope,limits2[0],limits2[1] / slope,limits2[1]);
    PlotWindow pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
    title=TITLE + ""String_Node_Str"";
    plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] xlimits=Maths.limits(rank);
    double[] ylimits=Maths.limits(r);
    ylimits=Maths.limits(ylimits,sr);
    plot.setLimits(xlimits[0],xlimits[1],ylimits[0],ylimits[1]);
    plot.setColor(Color.red);
    plot.addPoints(rank,r,Plot.LINE);
    plot.setColor(Color.blue);
    plot.addPoints(rank,sr,Plot.LINE);
    plot.setColor(Color.black);
    plot.addLabel(0,0,label);
    pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
  }
  add(sb,pearsonCorr);
  add(sb,rankedCorr);
  add(sb,slope);
  label=String.format(""String_Node_Str"",depthStats.getN(),Utils.rounded(median));
  id=Utils.showHistogram(TITLE,depthStats,""String_Node_Str"",0,1,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  double[] lower=new double[filterCriteria.length];
  double[] upper=new double[lower.length];
  double[] min=new double[lower.length];
  double[] max=new double[lower.length];
  for (int i=0; i < stats[0].length; i++) {
    double[] limits=showDoubleHistogram(stats,i,wo,matchScores,nPredicted);
    lower[i]=limits[0];
    upper[i]=limits[1];
    min[i]=limits[2];
    max[i]=limits[3];
  }
  upper[FILTER_SIGNAL]*=2;
  upper[FILTER_SNR]*=2;
  double factor=0.25;
  if (lower[FILTER_MIN_WIDTH] != 0)   upper[FILTER_MIN_WIDTH]=1 - Math.max(0,factor * (1 - lower[FILTER_MIN_WIDTH]));
  if (upper[FILTER_MIN_WIDTH] != 0)   lower[FILTER_MAX_WIDTH]=1 + Math.max(0,factor * (upper[FILTER_MAX_WIDTH] - 1));
  final double[] interval=new double[stats[0].length];
  interval[FILTER_SIGNAL]=SignalFilter.DEFAULT_INCREMENT;
  interval[FILTER_SNR]=SNRFilter.DEFAULT_INCREMENT;
  interval[FILTER_MIN_WIDTH]=WidthFilter2.DEFAULT_MIN_INCREMENT;
  interval[FILTER_MAX_WIDTH]=WidthFilter.DEFAULT_INCREMENT;
  interval[FILTER_SHIFT]=ShiftFilter.DEFAULT_INCREMENT;
  interval[FILTER_ESHIFT]=EShiftFilter.DEFAULT_INCREMENT;
  interval[FILTER_PRECISION]=PrecisionFilter.DEFAULT_INCREMENT;
  interval[FILTER_ITERATIONS]=0.1;
  interval[FILTER_EVALUATIONS]=0.1;
  double[] increment=new double[lower.length];
  for (int i=0; i < increment.length; i++) {
    lower[i]=Maths.floor(lower[i],interval[i]);
    upper[i]=Maths.ceil(upper[i],interval[i]);
    double range=upper[i] - lower[i];
    double multiples=range / interval[i];
    if (multiples < 9) {
      multiples=Math.ceil(multiples);
    }
 else     multiples=9;
    increment[i]=Maths.ceil(range / multiples,interval[i]);
    if (i == FILTER_MIN_WIDTH)     lower[i]=upper[i] - increment[i] * multiples;
 else     upper[i]=lower[i] + increment[i] * multiples;
  }
  for (int i=0; i < stats[0].length; i++) {
    lower[i]=Maths.round(lower[i]);
    upper[i]=Maths.round(upper[i]);
    min[i]=Maths.round(min[i]);
    max[i]=Maths.round(max[i]);
    increment[i]=Maths.round(increment[i]);
    sb.append(""String_Node_Str"").append(min[i]).append(':').append(lower[i]).append('-').append(upper[i]).append(':').append(max[i]);
  }
  increment[FILTER_SIGNAL]=Double.POSITIVE_INFINITY;
  increment[FILTER_ESHIFT]=Double.POSITIVE_INFINITY;
  wo.tile();
  sb.append(""String_Node_Str"").append(Utils.timeToString(runTime / 1000000.0));
  summaryTable.append(sb.toString());
  if (saveFilterRange) {
    GlobalSettings gs=SettingsManager.loadSettings();
    FilterSettings filterSettings=gs.getFilterSettings();
    String filename=Utils.getFilename(""String_Node_Str"",filterSettings.filterSetFilename);
    if (filename == null)     return;
    filename=Utils.removeExtension(filename);
    filterSettings.filterSetFilename=filename;
    ArrayList<Filter> filters=new ArrayList<Filter>(3);
    filters.add(new MultiFilter2(lower[0],(float)lower[1],lower[2],lower[3],lower[4],lower[5],lower[6]));
    filters.add(new MultiFilter2(upper[0],(float)upper[1],upper[2],upper[3],upper[4],upper[5],upper[6]));
    filters.add(new MultiFilter2(increment[0],(float)increment[1],increment[2],increment[3],increment[4],increment[5],increment[6]));
    if (saveFilters(filename + ""String_Node_Str"",filters))     SettingsManager.saveSettings(gs);
    min[FILTER_SIGNAL]=Math.max(min[FILTER_SIGNAL],30);
    max[FILTER_PRECISION]=Math.min(min[FILTER_PRECISION],100);
    final boolean[] limitToLower=new boolean[min.length];
    limitToLower[FILTER_SIGNAL]=true;
    limitToLower[FILTER_SNR]=true;
    limitToLower[FILTER_MIN_WIDTH]=true;
    limitToLower[FILTER_MAX_WIDTH]=false;
    limitToLower[FILTER_SHIFT]=false;
    limitToLower[FILTER_ESHIFT]=false;
    limitToLower[FILTER_PRECISION]=true;
    for (int i=0; i < limitToLower.length; i++) {
      final double range=(upper[i] - lower[i]) / 2;
      if (limitToLower[i])       upper[i]=lower[i] + range;
 else       lower[i]=upper[i] - range;
    }
    filters=new ArrayList<Filter>(4);
    filters.add(new MultiFilter2(min[0],(float)min[1],min[2],min[3],min[4],min[5],min[6]));
    filters.add(new MultiFilter2(lower[0],(float)lower[1],lower[2],lower[3],lower[4],lower[5],lower[6]));
    filters.add(new MultiFilter2(upper[0],(float)upper[1],upper[2],upper[3],upper[4],upper[5],upper[6]));
    filters.add(new MultiFilter2(max[0],(float)max[1],max[2],max[3],max[4],max[5],max[6]));
    saveFilters(filename + ""String_Node_Str"",filters);
  }
}","private void summariseResults(HashMap<Integer,FilterCandidates> filterCandidates,long runTime,PreprocessedPeakResult[] preprocessedPeakResults){
  createTable();
  StoredDataStatistics distanceStats=new StoredDataStatistics();
  StoredDataStatistics depthStats=new StoredDataStatistics();
  createFilterCriteria();
  StoredDataStatistics[][] stats=new StoredDataStatistics[3][filterCriteria.length];
  for (int i=0; i < stats.length; i++)   for (int j=0; j < stats[i].length; j++)   stats[i][j]=new StoredDataStatistics();
  final double nmPerPixel=simulationParameters.a;
  double tp=0, fp=0;
  int failcTP=0, failcFP=0;
  int cTP=0, cFP=0;
  int[] singleStatus=null, multiStatus=null, doubletStatus=null, multiDoubletStatus=null;
  singleStatus=new int[FitStatus.values().length];
  multiStatus=new int[singleStatus.length];
  doubletStatus=new int[singleStatus.length];
  multiDoubletStatus=new int[singleStatus.length];
  for (  FilterCandidates result : filterCandidates.values()) {
    tp+=result.tp;
    fp+=result.fp;
    for (int i=0; i < result.fitResult.length; i++) {
      if (result.spots[i].match)       cTP++;
 else       cFP++;
      final MultiPathFitResult fitResult=result.fitResult[i];
      if (singleStatus != null && result.spots[i].match) {
        addStatus(singleStatus,fitResult.getSingleFitResult());
        addStatus(multiStatus,fitResult.getMultiFitResult());
        addStatus(doubletStatus,fitResult.getDoubletFitResult());
        addStatus(multiDoubletStatus,fitResult.getMultiDoubletFitResult());
      }
      if (noMatch(fitResult)) {
        if (result.spots[i].match)         failcTP++;
 else         failcFP++;
      }
      addToStats(fitResult.getSingleFitResult(),stats);
      addToStats(fitResult.getMultiFitResult(),stats);
      addToStats(fitResult.getDoubletFitResult(),stats);
      addToStats(fitResult.getMultiDoubletFitResult(),stats);
    }
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      distanceStats.add(fitMatch.d * nmPerPixel);
      depthStats.add(fitMatch.z * nmPerPixel);
    }
  }
  double[] i1=new double[depthStats.getN()];
  double[] i2=new double[i1.length];
  double[] is=new double[i1.length];
  int ci=0;
  for (  FilterCandidates result : filterCandidates.values()) {
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      ScoredSpot spot=result.spots[fitMatch.i];
      i1[ci]=fitMatch.predictedSignal;
      i2[ci]=fitMatch.actualSignal;
      is[ci]=spot.spot.intensity;
      ci++;
    }
  }
  ArrayList<MultiPathFitResults> multiPathResults=new ArrayList<MultiPathFitResults>(filterCandidates.size());
  for (  Entry<Integer,FilterCandidates> entry : filterCandidates.entrySet()) {
    int frame=entry.getKey();
    MultiPathFitResult[] multiPathFitResults=entry.getValue().fitResult;
    int totalCandidates=multiPathFitResults.length;
    int nActual=actualCoordinates.get(frame).size();
    multiPathResults.add(new MultiPathFitResults(frame,multiPathFitResults,totalCandidates,nActual));
  }
  List<FractionalAssignment[]> assignments=new ArrayList<FractionalAssignment[]>();
  final Set<Integer> set=new TreeSet<Integer>();
  FractionScoreStore scoreStore=new FractionScoreStore(){
    public void add(    int uniqueId){
      set.add(uniqueId);
    }
  }
;
  MultiPathFitResults[] multiResults=multiPathResults.toArray(new MultiPathFitResults[multiPathResults.size()]);
  MultiPathFilter mpf=new MultiPathFilter(new SignalFilter(0),null,multiFilter.residualsThreshold);
  FractionClassificationResult fractionResult=mpf.fractionScoreSubset(multiResults,Integer.MAX_VALUE,this.results.size(),assignments,scoreStore);
  double nPredicted=fractionResult.getTP() + fractionResult.getFP();
  double[][] matchScores=new double[set.size()][];
  int count=0;
  for (int i=0; i < assignments.size(); i++) {
    FractionalAssignment[] a=assignments.get(i);
    if (a == null)     continue;
    for (int j=0; j < a.length; j++) {
      final PreprocessedPeakResult r=((PeakFractionalAssignment)a[j]).peakResult;
      set.remove(r.getUniqueId());
      final double precision=Math.sqrt(r.getLocationVariance());
      final double signal=r.getSignal();
      final double snr=r.getSNR();
      final double width=r.getXSDFactor();
      final double xShift=r.getXRelativeShift2();
      final double yShift=r.getYRelativeShift2();
      final double shift=(xShift > yShift) ? Math.sqrt(xShift) : Math.sqrt(yShift);
      final double eshift=Math.sqrt(xShift + yShift);
      final double[] score=new double[8];
      score[FILTER_SIGNAL]=signal;
      score[FILTER_SNR]=snr;
      score[FILTER_MIN_WIDTH]=width;
      score[FILTER_MAX_WIDTH]=width;
      score[FILTER_SHIFT]=shift;
      score[FILTER_ESHIFT]=eshift;
      score[FILTER_PRECISION]=precision;
      score[FILTER_PRECISION + 1]=a[j].getScore();
      matchScores[count++]=score;
    }
  }
  for (  int uniqueId : set.toArray(new Integer[0])) {
    PreprocessedPeakResult r=preprocessedPeakResults[uniqueId];
    if (r == null)     throw new RuntimeException(""String_Node_Str"" + uniqueId);
    final double precision=Math.sqrt(r.getLocationVariance());
    final double signal=r.getSignal();
    final double snr=r.getSNR();
    final double width=r.getXSDFactor();
    final double xShift=r.getXRelativeShift2();
    final double yShift=r.getYRelativeShift2();
    final double shift=(xShift > yShift) ? Math.sqrt(xShift) : Math.sqrt(yShift);
    final double eshift=Math.sqrt(xShift + yShift);
    final double[] score=new double[8];
    score[FILTER_SIGNAL]=signal;
    score[FILTER_SNR]=snr;
    score[FILTER_MIN_WIDTH]=width;
    score[FILTER_MAX_WIDTH]=width;
    score[FILTER_SHIFT]=shift;
    score[FILTER_ESHIFT]=eshift;
    score[FILTER_PRECISION]=precision;
    matchScores[count++]=score;
  }
  if (singleStatus != null) {
    String name=PeakFit.getSolverName(fitConfig);
    if (fitConfig.getFitSolver() == FitSolver.MLE && fitConfig.isModelCamera())     name+=""String_Node_Str"";
    System.out.println(""String_Node_Str"" + name);
    printFailures(""String_Node_Str"",singleStatus);
    printFailures(""String_Node_Str"",multiStatus);
    printFailures(""String_Node_Str"",doubletStatus);
    printFailures(""String_Node_Str"",multiDoubletStatus);
  }
  StringBuilder sb=new StringBuilder();
  final double signal=simulationParameters.signalPerFrame;
  final int n=results.size();
  sb.append(imp.getStackSize()).append(""String_Node_Str"");
  final int w=imp.getWidth();
  final int h=imp.getHeight();
  sb.append(w).append(""String_Node_Str"");
  sb.append(h).append(""String_Node_Str"");
  sb.append(n).append(""String_Node_Str"");
  double density=((double)n / imp.getStackSize()) / (w * h) / (simulationParameters.a * simulationParameters.a / 1e6);
  sb.append(Utils.rounded(density)).append(""String_Node_Str"");
  sb.append(Utils.rounded(signal)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.a)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.depth)).append(""String_Node_Str"");
  sb.append(simulationParameters.fixedDepth).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.gain)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.readNoise)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b2)).append(""String_Node_Str"");
  double noise=simulationParameters.b2;
  if (simulationParameters.emCCD) {
    final double readVariance=noise - simulationParameters.b;
    noise=simulationParameters.b * 2 + readVariance;
  }
  if (simulationParameters.fullSimulation) {
  }
  sb.append(Utils.rounded(signal / Math.sqrt(noise))).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s / simulationParameters.a)).append(""String_Node_Str"");
  sb.append(spotFilter.getDescription());
  addCount(sb,nP + nN);
  addCount(sb,nP);
  addCount(sb,nN);
  addCount(sb,fP);
  addCount(sb,fN);
  String name=PeakFit.getSolverName(fitConfig);
  if (fitConfig.getFitSolver() == FitSolver.MLE && fitConfig.isModelCamera())   name+=""String_Node_Str"";
  add(sb,name);
  add(sb,config.getFitting());
  resultPrefix=sb.toString();
  add(sb,(100.0 * cTP) / nP);
  add(sb,(100.0 * cFP) / nN);
  add(sb,cTP + cFP);
  add(sb,cTP);
  add(sb,cFP);
  FractionClassificationResult m=new FractionClassificationResult(cTP,cFP,0,simulationParameters.molecules - cTP);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  add(sb,failcTP);
  add(sb,failcFP);
  add(sb,tp);
  add(sb,fp);
  m=new FractionClassificationResult(tp,fp,0,simulationParameters.molecules - tp);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  m=new FractionClassificationResult(tp,0,0,simulationParameters.molecules - tp);
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  double median=distanceStats.getMedian();
  add(sb,median);
  WindowOrganiser wo=new WindowOrganiser();
  String label=String.format(""String_Node_Str"",Utils.rounded(m.getRecall()),distanceStats.getN(),Utils.rounded(median),Utils.rounded(distanceStats.getStandardDeviation()));
  int id=Utils.showHistogram(TITLE,distanceStats,""String_Node_Str"",0,0,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  median=depthStats.getMedian();
  add(sb,median);
  int[] indices=Utils.newArray(i1.length,0,1);
  if (showCorrelation)   Sort.sort(indices,is,rankByIntensity);
  double[] r=(showCorrelation) ? new double[i1.length] : null;
  double[] sr=(showCorrelation) ? new double[i1.length] : null;
  double[] rank=(showCorrelation) ? new double[i1.length] : null;
  ci=0;
  FastCorrelator fastCorrelator=new FastCorrelator();
  ArrayList<Ranking> pc1=new ArrayList<Ranking>();
  ArrayList<Ranking> pc2=new ArrayList<Ranking>();
  for (  int ci2 : indices) {
    fastCorrelator.add((long)Math.round(i1[ci2]),(long)Math.round(i2[ci2]));
    pc1.add(new Ranking(i1[ci2],ci));
    pc2.add(new Ranking(i2[ci2],ci));
    if (showCorrelation) {
      r[ci]=fastCorrelator.getCorrelation();
      sr[ci]=Correlator.correlation(rank(pc1),rank(pc2));
      if (rankByIntensity)       rank[ci]=is[0] - is[ci];
 else       rank[ci]=ci;
    }
    ci++;
  }
  final double pearsonCorr=fastCorrelator.getCorrelation();
  final double rankedCorr=Correlator.correlation(rank(pc1),rank(pc2));
  SimpleRegression regression=new SimpleRegression(false);
  for (int i=0; i < pc1.size(); i++)   regression.addData(pc1.get(i).value,pc2.get(i).value);
  final double slope=regression.getSlope();
  if (showCorrelation) {
    String title=TITLE + ""String_Node_Str"";
    Plot plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] limits1=Maths.limits(i1);
    double[] limits2=Maths.limits(i2);
    plot.setLimits(limits1[0],limits1[1],limits2[0],limits2[1]);
    label=String.format(""String_Node_Str"",Utils.rounded(pearsonCorr),Utils.rounded(rankedCorr),Utils.rounded(slope));
    plot.addLabel(0,0,label);
    plot.setColor(Color.red);
    plot.addPoints(i1,i2,Plot.DOT);
    if (slope > 1)     plot.drawLine(limits1[0],limits1[0] * slope,limits1[1],limits1[1] * slope);
 else     plot.drawLine(limits2[0] / slope,limits2[0],limits2[1] / slope,limits2[1]);
    PlotWindow pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
    title=TITLE + ""String_Node_Str"";
    plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] xlimits=Maths.limits(rank);
    double[] ylimits=Maths.limits(r);
    ylimits=Maths.limits(ylimits,sr);
    plot.setLimits(xlimits[0],xlimits[1],ylimits[0],ylimits[1]);
    plot.setColor(Color.red);
    plot.addPoints(rank,r,Plot.LINE);
    plot.setColor(Color.blue);
    plot.addPoints(rank,sr,Plot.LINE);
    plot.setColor(Color.black);
    plot.addLabel(0,0,label);
    pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
  }
  add(sb,pearsonCorr);
  add(sb,rankedCorr);
  add(sb,slope);
  label=String.format(""String_Node_Str"",depthStats.getN(),Utils.rounded(median));
  id=Utils.showHistogram(TITLE,depthStats,""String_Node_Str"",0,1,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  double[] lower=new double[filterCriteria.length];
  double[] upper=new double[lower.length];
  double[] min=new double[lower.length];
  double[] max=new double[lower.length];
  for (int i=0; i < stats[0].length; i++) {
    double[] limits=showDoubleHistogram(stats,i,wo,matchScores,nPredicted);
    lower[i]=limits[0];
    upper[i]=limits[1];
    min[i]=limits[2];
    max[i]=limits[3];
  }
  upper[FILTER_SIGNAL]*=2;
  upper[FILTER_SNR]*=2;
  double factor=0.25;
  if (lower[FILTER_MIN_WIDTH] != 0)   upper[FILTER_MIN_WIDTH]=1 - Math.max(0,factor * (1 - lower[FILTER_MIN_WIDTH]));
  if (upper[FILTER_MIN_WIDTH] != 0)   lower[FILTER_MAX_WIDTH]=1 + Math.max(0,factor * (upper[FILTER_MAX_WIDTH] - 1));
  final double[] interval=new double[stats[0].length];
  interval[FILTER_SIGNAL]=SignalFilter.DEFAULT_INCREMENT;
  interval[FILTER_SNR]=SNRFilter.DEFAULT_INCREMENT;
  interval[FILTER_MIN_WIDTH]=WidthFilter2.DEFAULT_MIN_INCREMENT;
  interval[FILTER_MAX_WIDTH]=WidthFilter.DEFAULT_INCREMENT;
  interval[FILTER_SHIFT]=ShiftFilter.DEFAULT_INCREMENT;
  interval[FILTER_ESHIFT]=EShiftFilter.DEFAULT_INCREMENT;
  interval[FILTER_PRECISION]=PrecisionFilter.DEFAULT_INCREMENT;
  interval[FILTER_ITERATIONS]=0.1;
  interval[FILTER_EVALUATIONS]=0.1;
  double[] increment=new double[lower.length];
  for (int i=0; i < increment.length; i++) {
    lower[i]=Maths.floor(lower[i],interval[i]);
    upper[i]=Maths.ceil(upper[i],interval[i]);
    double range=upper[i] - lower[i];
    double multiples=range / interval[i];
    if (multiples < 9) {
      multiples=Math.ceil(multiples);
    }
 else     multiples=9;
    increment[i]=Maths.ceil(range / multiples,interval[i]);
    if (i == FILTER_MIN_WIDTH)     lower[i]=upper[i] - increment[i] * multiples;
 else     upper[i]=lower[i] + increment[i] * multiples;
  }
  for (int i=0; i < stats[0].length; i++) {
    lower[i]=Maths.round(lower[i]);
    upper[i]=Maths.round(upper[i]);
    min[i]=Maths.round(min[i]);
    max[i]=Maths.round(max[i]);
    increment[i]=Maths.round(increment[i]);
    sb.append(""String_Node_Str"").append(min[i]).append(':').append(lower[i]).append('-').append(upper[i]).append(':').append(max[i]);
  }
  increment[FILTER_SIGNAL]=Double.POSITIVE_INFINITY;
  increment[FILTER_ESHIFT]=Double.POSITIVE_INFINITY;
  wo.tile();
  sb.append(""String_Node_Str"").append(Utils.timeToString(runTime / 1000000.0));
  summaryTable.append(sb.toString());
  if (saveFilterRange) {
    GlobalSettings gs=SettingsManager.loadSettings();
    FilterSettings filterSettings=gs.getFilterSettings();
    String filename=Utils.getFilename(""String_Node_Str"",filterSettings.filterSetFilename);
    if (filename == null)     return;
    filename=Utils.removeExtension(filename);
    filterSettings.filterSetFilename=filename;
    ArrayList<Filter> filters=new ArrayList<Filter>(3);
    filters.add(new MultiFilter2(lower[0],(float)lower[1],lower[2],lower[3],lower[4],lower[5],lower[6]));
    filters.add(new MultiFilter2(upper[0],(float)upper[1],upper[2],upper[3],upper[4],upper[5],upper[6]));
    filters.add(new MultiFilter2(increment[0],(float)increment[1],increment[2],increment[3],increment[4],increment[5],increment[6]));
    if (saveFilters(filename + ""String_Node_Str"",filters))     SettingsManager.saveSettings(gs);
    min[FILTER_SIGNAL]=Math.max(min[FILTER_SIGNAL],30);
    max[FILTER_PRECISION]=Math.min(max[FILTER_PRECISION],100);
    final boolean[] limitToLower=new boolean[min.length];
    limitToLower[FILTER_SIGNAL]=true;
    limitToLower[FILTER_SNR]=true;
    limitToLower[FILTER_MIN_WIDTH]=true;
    limitToLower[FILTER_MAX_WIDTH]=false;
    limitToLower[FILTER_SHIFT]=false;
    limitToLower[FILTER_ESHIFT]=false;
    limitToLower[FILTER_PRECISION]=true;
    for (int i=0; i < limitToLower.length; i++) {
      final double range=(upper[i] - lower[i]) / 2;
      if (limitToLower[i])       upper[i]=lower[i] + range;
 else       lower[i]=upper[i] - range;
    }
    filters=new ArrayList<Filter>(4);
    filters.add(new MultiFilter2(min[0],(float)min[1],min[2],min[3],min[4],min[5],min[6]));
    filters.add(new MultiFilter2(lower[0],(float)lower[1],lower[2],lower[3],lower[4],lower[5],lower[6]));
    filters.add(new MultiFilter2(upper[0],(float)upper[1],upper[2],upper[3],upper[4],upper[5],upper[6]));
    filters.add(new MultiFilter2(max[0],(float)max[1],max[2],max[3],max[4],max[5],max[6]));
    saveFilters(filename + ""String_Node_Str"",filters);
  }
}",0.9998813549267368
149542,"@Override public FitResult getMultiFitResult(){
  FitResult result=super.getMultiFitResult();
  if (result == null) {
    result=spotFitter.getResultMulti();
    setMultiFitResult(result);
    fitType.setMulti(true);
  }
  return result;
}","@Override public FitResult getMultiFitResult(){
  FitResult result=super.getMultiFitResult();
  if (result == null) {
    result=spotFitter.getResultMulti();
    setMultiFitResult(result);
    if (result != null)     fitType.setMulti(true);
  }
  return result;
}",0.952191235059761
149543,"public int validate(PreprocessedPeakResult peak){
  final int flags=doValidate(peak);
  if (flags == 0 || log == null)   return 0;
  log.info(""String_Node_Str"",peak.getCandidateId(),peak.getId(),DirectFilter.getStatusMessage(peak,flags));
  return flags;
}","public int validate(PreprocessedPeakResult peak){
  final int flags=doValidate(peak);
  if (log == null)   return flags;
  if (flags != 0)   log.info(""String_Node_Str"",peak.getCandidateId(),peak.getX(),peak.getY(),peak.getId(),DirectFilter.getStatusMessage(peak,flags));
  return flags;
}",0.8088235294117647
149544,"/** 
 * Show a dialog to configure the smart filter. The updated settings are saved to the settings file. <p> If the fit configuration isSmartFilter is not enabled then this method returns true. If it is enabled then a dialog is shown to input the configuration for a smart filter. If no valid filter can be created from the input then the method returns false.
 * @param settings the settings
 * @param filename the filename
 * @return true, if successful
 */
public static boolean configureSmartFilter(GlobalSettings settings,String filename){
  FitEngineConfiguration config=settings.getFitEngineConfiguration();
  FitConfiguration fitConfig=config.getFitConfiguration();
  Calibration calibration=settings.getCalibration();
  if (!fitConfig.isSmartFilter())   return true;
  GenericDialog gd=new GenericDialog(TITLE);
  String xml=fitConfig.getSmartFilterXML();
  if (Utils.isNullOrEmpty(xml))   xml=fitConfig.getDefaultSmartFilterXML();
  gd.addMessage(""String_Node_Str"");
  gd.addTextAreas(XmlUtils.convertQuotes(xml),null,8,60);
  gd.addMessage(""String_Node_Str"");
  gd.addNumericField(""String_Node_Str"",calibration.bias,2);
  gd.showDialog();
  if (gd.wasCanceled())   return false;
  xml=gd.getNextText();
  Filter f=DirectFilter.fromXML(xml);
  if (f == null || !(f instanceof DirectFilter))   return false;
  fitConfig.setDirectFilter((DirectFilter)f);
  calibration.bias=Math.abs(gd.getNextNumber());
  if (filename != null)   SettingsManager.saveSettings(settings,filename);
  return true;
}","/** 
 * Show a dialog to configure the smart filter. The updated settings are saved to the settings file. <p> If the fit configuration isSmartFilter is not enabled then this method returns true. If it is enabled then a dialog is shown to input the configuration for a smart filter. If no valid filter can be created from the input then the method returns false. <p> Note: If the smart filter is successfully configured then the standard fit validation is disabled. 
 * @param settings the settings
 * @param filename the filename
 * @return true, if successful
 */
public static boolean configureSmartFilter(GlobalSettings settings,String filename){
  FitEngineConfiguration config=settings.getFitEngineConfiguration();
  FitConfiguration fitConfig=config.getFitConfiguration();
  Calibration calibration=settings.getCalibration();
  if (!fitConfig.isSmartFilter())   return true;
  GenericDialog gd=new GenericDialog(TITLE);
  String xml=fitConfig.getSmartFilterXML();
  if (Utils.isNullOrEmpty(xml))   xml=fitConfig.getDefaultSmartFilterXML();
  gd.addMessage(""String_Node_Str"");
  gd.addTextAreas(XmlUtils.convertQuotes(xml),null,8,60);
  gd.addMessage(""String_Node_Str"");
  gd.addNumericField(""String_Node_Str"",calibration.bias,2);
  gd.showDialog();
  if (gd.wasCanceled())   return false;
  xml=gd.getNextText();
  Filter f=DirectFilter.fromXML(xml);
  if (f == null || !(f instanceof DirectFilter))   return false;
  fitConfig.setDirectFilter((DirectFilter)f);
  fitConfig.setFitValidation(false);
  calibration.bias=Math.abs(gd.getNextNumber());
  if (filename != null)   SettingsManager.saveSettings(settings,filename);
  return true;
}",0.9552238805970148
149545,"/** 
 * Updates the configuration for peak fitting. Configures the calculation of residuals, logging and peak validation.
 * @return
 */
private void updateFitConfiguration(FitEngineConfiguration config){
  FitConfiguration fitConfig=config.getFitConfiguration();
  fitConfig.setComputeResiduals(config.getResidualsThreshold() < 1);
  logger=(resultsSettings.logProgress) ? new IJLogger() : null;
  fitConfig.setLog(logger);
  fitConfig.setComputeDeviations(resultsSettings.showDeviations);
  fitConfig.setFitValidation(true);
  fitConfig.setNmPerPixel(calibration.nmPerPixel);
  fitConfig.setGain(calibration.gain);
  fitConfig.setBias(calibration.bias);
  fitConfig.setEmCCD(calibration.emCCD);
}","/** 
 * Updates the configuration for peak fitting. Configures the calculation of residuals, logging and peak validation.
 * @return
 */
private void updateFitConfiguration(FitEngineConfiguration config){
  FitConfiguration fitConfig=config.getFitConfiguration();
  fitConfig.setComputeResiduals(config.getResidualsThreshold() < 1);
  logger=(resultsSettings.logProgress) ? new IJLogger() : null;
  fitConfig.setLog(logger);
  fitConfig.setComputeDeviations(resultsSettings.showDeviations);
  fitConfig.setFitValidation(!fitConfig.isSmartFilter());
  fitConfig.setNmPerPixel(calibration.nmPerPixel);
  fitConfig.setGain(calibration.gain);
  fitConfig.setBias(calibration.bias);
  fitConfig.setEmCCD(calibration.emCCD);
}",0.9788434414668548
149546,"public MultiPathFitResult.FitResult getResultMulti(){
  if (neighbours == 0)   return null;
  if (resultMulti != null)   return resultMulti;
  float background=getMultiFittingBackground();
  int subtractFittedPeaks=0;
  boolean[] subtract=null;
  if (fittedNeighbourCount > 0) {
    subtract=new boolean[fittedNeighbourCount];
    final float xmin=regionBounds.x;
    final float xmax=xmin + regionBounds.width;
    final float ymin=regionBounds.y;
    final float ymax=ymin + regionBounds.height;
    for (int i=0; i < fittedNeighbourCount; i++) {
      final PeakResult result=sliceResults.get(fittedNeighbourIndices[i]);
      if (result.getXPosition() < xmin || result.getXPosition() > xmax || result.getYPosition() < ymin || result.getYPosition() > ymax) {
        subtract[i]=true;
        subtractFittedPeaks++;
      }
    }
  }
  if (logger != null)   logger.info(""String_Node_Str"",slice,neighbours + 1,neighbourCount,fittedNeighbourCount,subtractFittedPeaks);
  neighbours=neighbourCount + fittedNeighbourCount - subtractFittedPeaks;
  int npeaks=1 + neighbours;
  double[] params=new double[1 + npeaks * parametersPerPeak];
  double[] lower=new double[params.length];
  double[] upper=new double[params.length];
  for (int i=0; i < lower.length; i++) {
    lower[i]=Double.NEGATIVE_INFINITY;
    upper[i]=Double.POSITIVE_INFINITY;
  }
  params[Gaussian2DFunction.SIGNAL]=candidates[candidateId].intensity + ((relativeIntensity) ? background : 0);
  params[Gaussian2DFunction.X_POSITION]=candidates[candidateId].x - regionBounds.x;
  params[Gaussian2DFunction.Y_POSITION]=candidates[candidateId].y - regionBounds.y;
  for (int i=0, j=parametersPerPeak; i < neighbourCount; i++, j+=parametersPerPeak) {
    final int n2=neighbourIndices[i];
    final double candidateX=candidates[n2].x - regionBounds.x;
    final double candidateY=candidates[n2].y - regionBounds.y;
    final double[] estimatedParams=getEstimate(n2);
    if (estimatedParams != null) {
      params[j + Gaussian2DFunction.SIGNAL]=estimatedParams[Gaussian2DFunction.SIGNAL] / (2 * Math.PI * estimatedParams[Gaussian2DFunction.X_SD]* estimatedParams[Gaussian2DFunction.Y_SD]);
      params[j + Gaussian2DFunction.X_POSITION]=estimatedParams[Gaussian2DFunction.X_POSITION] - regionBounds.x;
      params[j + Gaussian2DFunction.Y_POSITION]=estimatedParams[Gaussian2DFunction.Y_POSITION] - regionBounds.y;
      params[j + Gaussian2DFunction.ANGLE]=estimatedParams[Gaussian2DFunction.ANGLE];
      params[j + Gaussian2DFunction.X_SD]=estimatedParams[Gaussian2DFunction.X_SD];
      params[j + Gaussian2DFunction.Y_SD]=estimatedParams[Gaussian2DFunction.Y_SD];
    }
 else {
      params[j + Gaussian2DFunction.SIGNAL]=candidates[n2].intensity + ((relativeIntensity) ? background : 0);
      params[j + Gaussian2DFunction.X_POSITION]=candidateX;
      params[j + Gaussian2DFunction.Y_POSITION]=candidateY;
    }
    lower[j + Gaussian2DFunction.X_POSITION]=candidateX - 1;
    upper[j + Gaussian2DFunction.X_POSITION]=candidateX + 1;
    lower[j + Gaussian2DFunction.Y_POSITION]=candidateY - 1;
    upper[j + Gaussian2DFunction.Y_POSITION]=candidateY + 1;
  }
  if (!relativeIntensity) {
    for (int i=0, j=0; i <= neighbourCount; i++, j+=parametersPerPeak) {
      if (params[j + Gaussian2DFunction.SIGNAL] < background) {
        background=0;
        break;
      }
    }
  }
  double[] region=this.region;
  if (fittedNeighbourCount > 0) {
    final double xOffset=regionBounds.x + 0.5;
    final double yOffset=regionBounds.y + 0.5;
    if (subtractFittedPeaks > 0) {
      region=Arrays.copyOf(region,width * height);
      final double[] funcParams=new double[1 + parametersPerPeak * subtractFittedPeaks];
      for (int i=0, j=0; i < fittedNeighbourCount; i++) {
        if (!subtract[i])         continue;
        PeakResult result=sliceResults.get(fittedNeighbourIndices[i]);
        for (int k=1; k <= parametersPerPeak; k++)         funcParams[j + k]=result.params[k];
        funcParams[j + Gaussian2DFunction.X_POSITION]-=xOffset;
        funcParams[j + Gaussian2DFunction.Y_POSITION]-=yOffset;
        j+=parametersPerPeak;
      }
      final GaussianFunction func=fitConfig.createGaussianFunction(subtractFittedPeaks,regionBounds.width,funcParams);
      func.initialise(funcParams);
      for (int i=0; i < region.length; i++) {
        region[i]-=func.eval(i);
      }
    }
    for (int i=0, j=(1 + neighbourCount) * parametersPerPeak; i < fittedNeighbourCount; i++) {
      if (subtract[i])       continue;
      final PeakResult result=sliceResults.get(fittedNeighbourIndices[i]);
      params[j + Gaussian2DFunction.SIGNAL]=result.getAmplitude();
      for (int k=2; k <= parametersPerPeak; k++)       params[j + k]=result.params[k];
      params[j + Gaussian2DFunction.SIGNAL]+=result.params[Gaussian2DFunction.BACKGROUND];
      params[j + Gaussian2DFunction.X_POSITION]-=xOffset;
      params[j + Gaussian2DFunction.Y_POSITION]-=yOffset;
      lower[j + Gaussian2DFunction.X_POSITION]=params[j + Gaussian2DFunction.X_POSITION] - 1;
      upper[j + Gaussian2DFunction.X_POSITION]=params[j + Gaussian2DFunction.X_POSITION] + 1;
      lower[j + Gaussian2DFunction.Y_POSITION]=params[j + Gaussian2DFunction.Y_POSITION] - 1;
      upper[j + Gaussian2DFunction.Y_POSITION]=params[j + Gaussian2DFunction.Y_POSITION] + 1;
      j+=parametersPerPeak;
    }
  }
  if (background != 0) {
    params[Gaussian2DFunction.BACKGROUND]=background;
    for (int j=Gaussian2DFunction.SIGNAL; j < params.length; j+=parametersPerPeak)     params[j]-=background;
  }
  for (int i=0; i < npeaks; i++) {
    if ((int)params[i * parametersPerPeak + Gaussian2DFunction.X_POSITION] == params[i * parametersPerPeak + Gaussian2DFunction.X_POSITION])     params[i * parametersPerPeak + Gaussian2DFunction.X_POSITION]+=0.001;
    if ((int)params[i * parametersPerPeak + Gaussian2DFunction.Y_POSITION] == params[i * parametersPerPeak + Gaussian2DFunction.Y_POSITION])     params[i * parametersPerPeak + Gaussian2DFunction.Y_POSITION]+=0.001;
  }
  final boolean fitValidation=fitConfig.isFitValidation();
  fitConfig.setFitValidation(false);
  final int maxIterations=fitConfig.getMaxIterations();
  final int maxEvaluations=fitConfig.getMaxFunctionEvaluations();
  fitConfig.setMaxIterations(maxIterations + maxIterations * (npeaks - 1) * ITERATION_INCREASE_FOR_MULTIPLE_PEAKS);
  fitConfig.setMaxIterations(maxEvaluations + maxEvaluations * (npeaks - 1) * EVALUATION_INCREASE_FOR_MULTIPLE_PEAKS);
  gf.setBounds(lower,upper);
  final FitResult fitResult=gf.fit(region,width,height,npeaks,params,true);
  gf.setBounds(null,null);
  fitConfig.setFitValidation(fitValidation);
  fitConfig.setMaxIterations(maxIterations);
  fitConfig.setMaxFunctionEvaluations(maxEvaluations);
  updateError(fitResult);
  PreprocessedPeakResult[] results=null;
  if (fitResult.getStatus() == FitStatus.OK) {
    final double[] fitParams=fitResult.getParameters();
    final double[] initialParams=fitResult.getInitialParameters();
    convertParameters(fitParams);
    results=new PreprocessedPeakResult[npeaks];
    final int flags=fitConfig.getFunctionFlags();
    results[0]=resultFactory.createPreprocessedPeakResult(this.candidateId,0,initialParams,fitParams,getLocalBackground(0,npeaks,fitParams,flags),ResultType.NEW);
    for (int n=neighbourCount + 1; n < npeaks; n++) {
      results[n]=resultFactory.createPreprocessedPeakResult(this.candidateId,n,initialParams,fitParams,getLocalBackground(n,npeaks,fitParams,flags),ResultType.EXISTING);
    }
    for (int n=1; n <= neighbourCount; n++) {
      results[n]=resultFactory.createPreprocessedPeakResult(this.candidateId,n,initialParams,fitParams,getLocalBackground(n,npeaks,fitParams,flags),ResultType.CANDIDATE);
    }
  }
  return resultMulti=createResult(fitResult,results);
}","public MultiPathFitResult.FitResult getResultMulti(){
  if (neighbours == 0)   return null;
  if (resultMulti != null)   return resultMulti;
  float background=getMultiFittingBackground();
  int subtractFittedPeaks=0;
  boolean[] subtract=null;
  if (fittedNeighbourCount > 0) {
    subtract=new boolean[fittedNeighbourCount];
    final float xmin=regionBounds.x;
    final float xmax=xmin + regionBounds.width;
    final float ymin=regionBounds.y;
    final float ymax=ymin + regionBounds.height;
    for (int i=0; i < fittedNeighbourCount; i++) {
      final PeakResult result=sliceResults.get(fittedNeighbourIndices[i]);
      if (result.getXPosition() < xmin || result.getXPosition() > xmax || result.getYPosition() < ymin || result.getYPosition() > ymax) {
        subtract[i]=true;
        subtractFittedPeaks++;
      }
    }
  }
  if (logger != null)   logger.info(""String_Node_Str"",slice,neighbours + 1,neighbourCount,fittedNeighbourCount,subtractFittedPeaks);
  neighbours=neighbourCount + fittedNeighbourCount - subtractFittedPeaks;
  int npeaks=1 + neighbours;
  double[] params=new double[1 + npeaks * parametersPerPeak];
  double[] lower=new double[params.length];
  double[] upper=new double[params.length];
  for (int i=0; i < lower.length; i++) {
    lower[i]=Double.NEGATIVE_INFINITY;
    upper[i]=Double.POSITIVE_INFINITY;
  }
  params[Gaussian2DFunction.SIGNAL]=candidates[candidateId].intensity + ((relativeIntensity) ? background : 0);
  params[Gaussian2DFunction.X_POSITION]=candidates[candidateId].x - regionBounds.x;
  params[Gaussian2DFunction.Y_POSITION]=candidates[candidateId].y - regionBounds.y;
  for (int i=0, j=parametersPerPeak; i < neighbourCount; i++, j+=parametersPerPeak) {
    final int n2=neighbourIndices[i];
    final double candidateX=candidates[n2].x - regionBounds.x;
    final double candidateY=candidates[n2].y - regionBounds.y;
    final double[] estimatedParams=getEstimate(n2);
    if (estimatedParams != null) {
      params[j + Gaussian2DFunction.SIGNAL]=estimatedParams[Gaussian2DFunction.SIGNAL] / (2 * Math.PI * estimatedParams[Gaussian2DFunction.X_SD]* estimatedParams[Gaussian2DFunction.Y_SD]);
      params[j + Gaussian2DFunction.X_POSITION]=estimatedParams[Gaussian2DFunction.X_POSITION] - regionBounds.x;
      params[j + Gaussian2DFunction.Y_POSITION]=estimatedParams[Gaussian2DFunction.Y_POSITION] - regionBounds.y;
      params[j + Gaussian2DFunction.ANGLE]=estimatedParams[Gaussian2DFunction.ANGLE];
      params[j + Gaussian2DFunction.X_SD]=estimatedParams[Gaussian2DFunction.X_SD];
      params[j + Gaussian2DFunction.Y_SD]=estimatedParams[Gaussian2DFunction.Y_SD];
    }
 else {
      params[j + Gaussian2DFunction.SIGNAL]=candidates[n2].intensity + ((relativeIntensity) ? background : 0);
      params[j + Gaussian2DFunction.X_POSITION]=candidateX;
      params[j + Gaussian2DFunction.Y_POSITION]=candidateY;
    }
    lower[j + Gaussian2DFunction.X_POSITION]=candidateX - 1;
    upper[j + Gaussian2DFunction.X_POSITION]=candidateX + 1;
    lower[j + Gaussian2DFunction.Y_POSITION]=candidateY - 1;
    upper[j + Gaussian2DFunction.Y_POSITION]=candidateY + 1;
  }
  if (!relativeIntensity) {
    for (int i=0, j=0; i <= neighbourCount; i++, j+=parametersPerPeak) {
      if (params[j + Gaussian2DFunction.SIGNAL] < background) {
        background=0;
        break;
      }
    }
  }
  double[] region=this.region;
  if (fittedNeighbourCount > 0) {
    final double xOffset=regionBounds.x + 0.5;
    final double yOffset=regionBounds.y + 0.5;
    if (subtractFittedPeaks > 0) {
      region=Arrays.copyOf(region,width * height);
      final double[] funcParams=new double[1 + parametersPerPeak * subtractFittedPeaks];
      for (int i=0, j=0; i < fittedNeighbourCount; i++) {
        if (!subtract[i])         continue;
        PeakResult result=sliceResults.get(fittedNeighbourIndices[i]);
        for (int k=1; k <= parametersPerPeak; k++)         funcParams[j + k]=result.params[k];
        funcParams[j + Gaussian2DFunction.X_POSITION]-=xOffset;
        funcParams[j + Gaussian2DFunction.Y_POSITION]-=yOffset;
        j+=parametersPerPeak;
      }
      final GaussianFunction func=fitConfig.createGaussianFunction(subtractFittedPeaks,regionBounds.width,funcParams);
      func.initialise(funcParams);
      for (int i=0; i < region.length; i++) {
        region[i]-=func.eval(i);
      }
    }
    for (int i=0, j=(1 + neighbourCount) * parametersPerPeak; i < fittedNeighbourCount; i++) {
      if (subtract[i])       continue;
      final PeakResult result=sliceResults.get(fittedNeighbourIndices[i]);
      params[j + Gaussian2DFunction.SIGNAL]=result.getAmplitude();
      for (int k=2; k <= parametersPerPeak; k++)       params[j + k]=result.params[k];
      params[j + Gaussian2DFunction.SIGNAL]+=result.params[Gaussian2DFunction.BACKGROUND];
      params[j + Gaussian2DFunction.X_POSITION]-=xOffset;
      params[j + Gaussian2DFunction.Y_POSITION]-=yOffset;
      lower[j + Gaussian2DFunction.X_POSITION]=params[j + Gaussian2DFunction.X_POSITION] - 1;
      upper[j + Gaussian2DFunction.X_POSITION]=params[j + Gaussian2DFunction.X_POSITION] + 1;
      lower[j + Gaussian2DFunction.Y_POSITION]=params[j + Gaussian2DFunction.Y_POSITION] - 1;
      upper[j + Gaussian2DFunction.Y_POSITION]=params[j + Gaussian2DFunction.Y_POSITION] + 1;
      j+=parametersPerPeak;
    }
  }
  if (background != 0) {
    params[Gaussian2DFunction.BACKGROUND]=background;
    for (int j=Gaussian2DFunction.SIGNAL; j < params.length; j+=parametersPerPeak)     params[j]-=background;
  }
  for (int i=0; i < npeaks; i++) {
    if ((int)params[i * parametersPerPeak + Gaussian2DFunction.X_POSITION] == params[i * parametersPerPeak + Gaussian2DFunction.X_POSITION])     params[i * parametersPerPeak + Gaussian2DFunction.X_POSITION]+=0.001;
    if ((int)params[i * parametersPerPeak + Gaussian2DFunction.Y_POSITION] == params[i * parametersPerPeak + Gaussian2DFunction.Y_POSITION])     params[i * parametersPerPeak + Gaussian2DFunction.Y_POSITION]+=0.001;
  }
  final boolean fitValidation=fitConfig.isFitValidation();
  fitConfig.setFitValidation(false);
  final int maxIterations=fitConfig.getMaxIterations();
  final int maxEvaluations=fitConfig.getMaxFunctionEvaluations();
  fitConfig.setMaxIterations(maxIterations + maxIterations * (npeaks - 1) * ITERATION_INCREASE_FOR_MULTIPLE_PEAKS);
  fitConfig.setMaxFunctionEvaluations(maxEvaluations + maxEvaluations * (npeaks - 1) * EVALUATION_INCREASE_FOR_MULTIPLE_PEAKS);
  gf.setBounds(lower,upper);
  final FitResult fitResult=gf.fit(region,width,height,npeaks,params,true);
  gf.setBounds(null,null);
  fitConfig.setFitValidation(fitValidation);
  fitConfig.setMaxIterations(maxIterations);
  fitConfig.setMaxFunctionEvaluations(maxEvaluations);
  updateError(fitResult);
  PreprocessedPeakResult[] results=null;
  if (fitResult.getStatus() == FitStatus.OK) {
    final double[] fitParams=fitResult.getParameters();
    final double[] initialParams=fitResult.getInitialParameters();
    convertParameters(fitParams);
    results=new PreprocessedPeakResult[npeaks];
    final int flags=fitConfig.getFunctionFlags();
    results[0]=resultFactory.createPreprocessedPeakResult(this.candidateId,0,initialParams,fitParams,getLocalBackground(0,npeaks,fitParams,flags),ResultType.NEW);
    for (int n=neighbourCount + 1; n < npeaks; n++) {
      results[n]=resultFactory.createPreprocessedPeakResult(this.candidateId,n,initialParams,fitParams,getLocalBackground(n,npeaks,fitParams,flags),ResultType.EXISTING);
    }
    for (int n=1; n <= neighbourCount; n++) {
      results[n]=resultFactory.createPreprocessedPeakResult(this.candidateId,n,initialParams,fitParams,getLocalBackground(n,npeaks,fitParams,flags),ResultType.CANDIDATE);
    }
  }
  return resultMulti=createResult(fitResult,results);
}",0.9989089275399524
149547,"/** 
 * Search for any neighbours within a set height of the specified peak that is within the search region bounds.
 * @param regionBounds the region bounds
 * @param n the candidate index
 * @return The number of neighbours
 */
private int findNeighbours(Rectangle regionBounds,int n){
  int xmin=regionBounds.x;
  int xmax=xmin + regionBounds.width - 1;
  int ymin=regionBounds.y;
  int ymax=ymin + regionBounds.height - 1;
  final Candidate spot=candidates[n];
  final float heightThreshold;
  if (relativeIntensity) {
    heightThreshold=(float)(spot.intensity * config.getNeighbourHeightThreshold());
  }
 else {
    if (spot.intensity < background)     heightThreshold=spot.intensity;
 else     heightThreshold=(float)((spot.intensity - background) * config.getNeighbourHeightThreshold() + background);
  }
  neighbourCount=0;
  final CandidateList neighbours=findNeighbours(spot);
  final Candidate[] candidates=neighbours.list;
  for (int i=0; i < neighbours.size; i++) {
    final int id=candidates[i].index;
    if (isFit(id))     continue;
    if (canIgnore(candidates[i].x,candidates[i].y,xmin,xmax,ymin,ymax,candidates[i].intensity,heightThreshold))     continue;
    neighbourIndices[neighbourCount++]=id;
  }
  int c=0;
  for (int i=0; i < this.candidates.length; i++) {
    if (i == n || isFit(i))     continue;
    if (canIgnore(this.candidates[i].x,this.candidates[i].y,xmin,xmax,ymin,ymax,this.candidates[i].intensity,heightThreshold))     continue;
    if (neighbourIndices[c++] != i)     throw new RuntimeException(""String_Node_Str"");
  }
  fittedNeighbourCount=0;
  if (!sliceResults.isEmpty()) {
    final double x0min=regionBounds.x;
    final double y0min=regionBounds.y;
    final double x0max=regionBounds.x + regionBounds.width;
    final double y0max=regionBounds.y + regionBounds.height;
    final PeakResult[] peakNeighbours=findPeakNeighbours(spot);
    for (int i=0; i < peakNeighbours.length; i++) {
      final PeakResult result=peakNeighbours[i];
      final double xw=2 * result.getXSD();
      final double yw=2 * result.getYSD();
      if (intersects(x0min,y0min,x0max,y0max,result.getXPosition() - xw,result.getYPosition() - yw,result.getXPosition() + xw,result.getYPosition() + yw))       continue;
      fittedNeighbourIndices[fittedNeighbourCount++]=i;
    }
  }
  return neighbourCount + fittedNeighbourCount;
}","/** 
 * Search for any neighbours within a set height of the specified peak that is within the search region bounds.
 * @param regionBounds the region bounds
 * @param n the candidate index
 * @return The number of neighbours
 */
private int findNeighbours(Rectangle regionBounds,int n){
  int xmin=regionBounds.x;
  int xmax=xmin + regionBounds.width - 1;
  int ymin=regionBounds.y;
  int ymax=ymin + regionBounds.height - 1;
  final Candidate spot=candidates[n];
  final float heightThreshold;
  if (relativeIntensity) {
    heightThreshold=(float)(spot.intensity * config.getNeighbourHeightThreshold());
  }
 else {
    if (spot.intensity < background)     heightThreshold=spot.intensity;
 else     heightThreshold=(float)((spot.intensity - background) * config.getNeighbourHeightThreshold() + background);
  }
  neighbourCount=0;
  final CandidateList neighbours=findNeighbours(spot);
  final Candidate[] candidates=neighbours.list;
  for (int i=0; i < neighbours.size; i++) {
    final int id=candidates[i].index;
    if (isFit(id))     continue;
    if (canIgnore(candidates[i].x,candidates[i].y,xmin,xmax,ymin,ymax,candidates[i].intensity,heightThreshold))     continue;
    neighbourIndices[neighbourCount++]=id;
  }
  fittedNeighbourCount=0;
  if (!sliceResults.isEmpty()) {
    final double x0min=regionBounds.x;
    final double y0min=regionBounds.y;
    final double x0max=regionBounds.x + regionBounds.width;
    final double y0max=regionBounds.y + regionBounds.height;
    final PeakResult[] peakNeighbours=findPeakNeighbours(spot);
    for (int i=0; i < peakNeighbours.length; i++) {
      final PeakResult result=peakNeighbours[i];
      final double xw=2 * result.getXSD();
      final double yw=2 * result.getYSD();
      if (intersects(x0min,y0min,x0max,y0max,result.getXPosition() - xw,result.getYPosition() - yw,result.getXPosition() + xw,result.getYPosition() + yw))       continue;
      fittedNeighbourIndices[fittedNeighbourCount++]=i;
    }
  }
  return neighbourCount + fittedNeighbourCount;
}",0.5804387568555759
149548,"private void summariseResults(HashMap<Integer,FilterCandidates> filterCandidates){
  createTable();
  StoredDataStatistics distanceStats=new StoredDataStatistics();
  StoredDataStatistics depthStats=new StoredDataStatistics();
  createFilterCriteria();
  StoredDataStatistics[][] stats=new StoredDataStatistics[3][filterCriteria.length];
  for (int i=0; i < stats.length; i++)   for (int j=0; j < stats[i].length; j++)   stats[i][j]=new StoredDataStatistics();
  final double nmPerPixel=simulationParameters.a;
  final boolean mle=fitConfig.getFitSolver() == FitSolver.MLE;
  double tp=0, fp=0;
  int failcTP=0, failcFP=0;
  int cTP=0, cFP=0;
  int[] status=null, status2=null;
  status=new int[FitStatus.values().length];
  status2=new int[status.length];
  for (  FilterCandidates result : filterCandidates.values()) {
    tp+=result.tp;
    fp+=result.fp;
    for (int i=0; i < result.fitResult.length; i++) {
      if (result.spots[i].match)       cTP++;
 else       cFP++;
      final FitResult fitResult=result.fitResult[i];
      if (fitResult.getStatus() != FitStatus.OK) {
        if (status != null) {
          status[result.fitResult[i].getStatus().ordinal()]++;
          status2[result.fitResultWithNeighbours[i].getStatus().ordinal()]++;
        }
        if (result.spots[i].match)         failcTP++;
 else         failcFP++;
        stats[0][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[0][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
      }
 else {
        final double[] p=fitResult.getParameters();
        final double[] initialParams=fitResult.getInitialParameters();
        final double s0=(p[Gaussian2DFunction.X_SD] + p[Gaussian2DFunction.Y_SD]) * 0.5;
        final double s=s0 * nmPerPixel;
        final double N=p[Gaussian2DFunction.SIGNAL] / simulationParameters.gain;
        final double b2=Math.max(0,(p[Gaussian2DFunction.BACKGROUND] - simulationParameters.bias) / simulationParameters.gain);
        double precision;
        if (mle)         precision=PeakResult.getMLPrecisionX(nmPerPixel,s,N,b2,simulationParameters.emCCD);
 else         precision=PeakResult.getPrecisionX(nmPerPixel,s,N,b2,simulationParameters.emCCD);
        final double signal=p[Gaussian2DFunction.SIGNAL] / simulationParameters.gain;
        final double snr=p[Gaussian2DFunction.SIGNAL] / result.noise;
        final double width=s0 / fitConfig.getInitialPeakStdDev0();
        final double xShift=p[Gaussian2DFunction.X_POSITION] - initialParams[Gaussian2DFunction.X_POSITION];
        final double yShift=p[Gaussian2DFunction.Y_POSITION] - initialParams[Gaussian2DFunction.Y_POSITION];
        double shift=((Math.abs(xShift) > Math.abs(yShift)) ? xShift : yShift) / fitConfig.getInitialPeakStdDev0();
        shift=Math.abs(shift);
        final double eshift=Math.sqrt(xShift * xShift + yShift * yShift);
        stats[0][FILTER_SIGNAL].add(signal);
        stats[0][FILTER_SNR].add(snr);
        if (width < 1)         stats[0][FILTER_MIN_WIDTH].add(width);
 else         stats[0][FILTER_MAX_WIDTH].add(width);
        stats[0][FILTER_SHIFT].add(shift);
        stats[0][FILTER_ESHIFT].add(eshift);
        stats[0][FILTER_PRECISION].add(precision);
        stats[0][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[0][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
        final int index=(result.fitMatch[i]) ? 1 : 2;
        stats[index][FILTER_SIGNAL].add(signal);
        stats[index][FILTER_SNR].add(snr);
        if (width < 1)         stats[index][FILTER_MIN_WIDTH].add(width);
 else         stats[index][FILTER_MAX_WIDTH].add(width);
        stats[index][FILTER_SHIFT].add(shift);
        stats[index][FILTER_ESHIFT].add(eshift);
        stats[index][FILTER_PRECISION].add(precision);
        stats[index][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[index][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
      }
    }
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      distanceStats.add(fitMatch.d * nmPerPixel);
      depthStats.add(fitMatch.z * nmPerPixel);
    }
  }
  double[] i1=new double[depthStats.getN()];
  double[] i2=new double[i1.length];
  double[] is=new double[i1.length];
  int ci=0;
  for (  FilterCandidates result : filterCandidates.values()) {
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      ScoredSpot spot=result.spots[i];
      i1[ci]=fitMatch.predictedSignal;
      i2[ci]=fitMatch.actualSignal;
      is[ci]=spot.intensity;
      ci++;
    }
  }
  if (status != null) {
    System.out.printf(""String_Node_Str"");
    for (int i=0; i < status.length; i++) {
      if (status[i] != 0)       System.out.printf(""String_Node_Str"",FitStatus.values()[i].toString(),status[i]);
    }
    for (int i=0; i < status2.length; i++) {
      if (status2[i] != 0)       System.out.printf(""String_Node_Str"",FitStatus.values()[i].toString(),status2[i]);
    }
  }
  StringBuilder sb=new StringBuilder();
  final double signal=simulationParameters.signalPerFrame;
  final int n=results.size();
  sb.append(imp.getStackSize()).append(""String_Node_Str"");
  final int w=imp.getWidth();
  final int h=imp.getHeight();
  sb.append(w).append(""String_Node_Str"");
  sb.append(h).append(""String_Node_Str"");
  sb.append(n).append(""String_Node_Str"");
  double density=((double)n / imp.getStackSize()) / (w * h) / (simulationParameters.a * simulationParameters.a / 1e6);
  sb.append(Utils.rounded(density)).append(""String_Node_Str"");
  sb.append(Utils.rounded(signal)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.a)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.depth)).append(""String_Node_Str"");
  sb.append(simulationParameters.fixedDepth).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.gain)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.readNoise)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b2)).append(""String_Node_Str"");
  double noise=simulationParameters.b2;
  if (simulationParameters.emCCD) {
    final double readVariance=noise - simulationParameters.b;
    noise=simulationParameters.b * 2 + readVariance;
  }
  if (simulationParameters.fullSimulation) {
  }
  sb.append(Utils.rounded(signal / Math.sqrt(noise))).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s / simulationParameters.a)).append(""String_Node_Str"");
  sb.append(spotFilter.getDescription());
  addCount(sb,nP + nN);
  addCount(sb,nP);
  addCount(sb,nN);
  addCount(sb,fP);
  addCount(sb,fN);
  String name=PeakFit.getSolverName(fitConfig);
  if (fitConfig.getFitSolver() == FitSolver.MLE && fitConfig.isModelCamera())   name+=""String_Node_Str"";
  add(sb,name);
  add(sb,config.getFitting());
  resultPrefix=sb.toString();
  add(sb,(100.0 * cTP) / nP);
  add(sb,(100.0 * cFP) / nN);
  add(sb,cTP + cFP);
  add(sb,cTP);
  add(sb,cFP);
  FractionClassificationResult m=new FractionClassificationResult(cTP,cFP,0,simulationParameters.molecules - cTP);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  add(sb,failcTP);
  add(sb,failcFP);
  add(sb,tp);
  add(sb,fp);
  m=new FractionClassificationResult(tp,fp,0,simulationParameters.molecules - tp);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  add(sb,tp);
  m=new FractionClassificationResult(tp,0,0,simulationParameters.molecules - tp);
  add(sb,m.getRecall());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  double median=distanceStats.getMedian();
  add(sb,median);
  WindowOrganiser wo=new WindowOrganiser();
  String label=String.format(""String_Node_Str"",Utils.rounded(m.getRecall()),distanceStats.getN(),Utils.rounded(median),Utils.rounded(distanceStats.getStandardDeviation()));
  int id=Utils.showHistogram(TITLE,distanceStats,""String_Node_Str"",0,0,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  median=depthStats.getMedian();
  add(sb,median);
  int[] indices=Utils.newArray(i1.length,0,1);
  if (showCorrelation)   Sort.sort(indices,is,rankByIntensity);
  double[] r=(showCorrelation) ? new double[i1.length] : null;
  double[] sr=(showCorrelation) ? new double[i1.length] : null;
  double[] rank=(showCorrelation) ? new double[i1.length] : null;
  ci=0;
  FastCorrelator fastCorrelator=new FastCorrelator();
  ArrayList<Ranking> pc1=new ArrayList<Ranking>();
  ArrayList<Ranking> pc2=new ArrayList<Ranking>();
  for (  int ci2 : indices) {
    fastCorrelator.add((long)Math.round(i1[ci2]),(long)Math.round(i2[ci2]));
    pc1.add(new Ranking(i1[ci2],ci));
    pc2.add(new Ranking(i2[ci2],ci));
    if (showCorrelation) {
      r[ci]=fastCorrelator.getCorrelation();
      sr[ci]=Correlator.correlation(rank(pc1),rank(pc2));
      if (rankByIntensity)       rank[ci]=is[0] - is[ci];
 else       rank[ci]=ci;
    }
    ci++;
  }
  final double pearsonCorr=fastCorrelator.getCorrelation();
  final double rankedCorr=Correlator.correlation(rank(pc1),rank(pc2));
  SimpleRegression regression=new SimpleRegression(false);
  for (int i=0; i < pc1.size(); i++)   regression.addData(pc1.get(i).value,pc2.get(i).value);
  final double slope=regression.getSlope();
  if (showCorrelation) {
    String title=TITLE + ""String_Node_Str"";
    Plot plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] limits1=Maths.limits(i1);
    double[] limits2=Maths.limits(i2);
    plot.setLimits(limits1[0],limits1[1],limits2[0],limits2[1]);
    label=String.format(""String_Node_Str"",Utils.rounded(pearsonCorr),Utils.rounded(rankedCorr),Utils.rounded(slope));
    plot.addLabel(0,0,label);
    plot.setColor(Color.red);
    plot.addPoints(i1,i2,Plot.DOT);
    if (slope > 1)     plot.drawLine(limits1[0],limits1[0] * slope,limits1[1],limits1[1] * slope);
 else     plot.drawLine(limits2[0] / slope,limits2[0],limits2[1] / slope,limits2[1]);
    PlotWindow pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
    title=TITLE + ""String_Node_Str"";
    plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] xlimits=Maths.limits(rank);
    double[] ylimits=Maths.limits(r);
    ylimits=Maths.limits(ylimits,sr);
    plot.setLimits(xlimits[0],xlimits[1],ylimits[0],ylimits[1]);
    plot.setColor(Color.red);
    plot.addPoints(rank,r,Plot.LINE);
    plot.setColor(Color.blue);
    plot.addPoints(rank,sr,Plot.LINE);
    plot.setColor(Color.black);
    plot.addLabel(0,0,label);
    pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
  }
  add(sb,pearsonCorr);
  add(sb,rankedCorr);
  add(sb,slope);
  label=String.format(""String_Node_Str"",depthStats.getN(),Utils.rounded(median));
  id=Utils.showHistogram(TITLE,depthStats,""String_Node_Str"",0,1,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  double[] lower=new double[filterCriteria.length];
  double[] upper=new double[lower.length];
  for (int i=0; i < stats[0].length; i++) {
    double[] limits=showDoubleHistogram(stats,i,wo);
    lower[i]=limits[0];
    upper[i]=limits[1];
  }
  upper[FILTER_SIGNAL]*=2;
  upper[FILTER_SNR]*=2;
  lower[FILTER_PRECISION]*=0.5;
  double factor=0.25;
  if (lower[FILTER_MIN_WIDTH] != 0)   upper[FILTER_MIN_WIDTH]=1 - Math.max(0,factor * (1 - lower[FILTER_MIN_WIDTH]));
  if (upper[FILTER_MIN_WIDTH] != 0)   lower[FILTER_MAX_WIDTH]=1 + Math.max(0,factor * (upper[FILTER_MAX_WIDTH] - 1));
  double[] increment=new double[lower.length];
  for (int i=0; i < increment.length; i++)   increment[i]=(upper[i] - lower[i]) / 10;
  increment[FILTER_SIGNAL]=Double.POSITIVE_INFINITY;
  increment[FILTER_ESHIFT]=Double.POSITIVE_INFINITY;
  for (int i=0; i < stats[0].length; i++) {
    lower[i]=Maths.round(lower[i]);
    upper[i]=Maths.round(upper[i]);
    increment[i]=Maths.round(increment[i]);
    sb.append(""String_Node_Str"").append(lower[i]).append('-').append(upper[i]);
  }
  wo.tile();
  summaryTable.append(sb.toString());
  if (saveFilterRange) {
    GlobalSettings gs=SettingsManager.loadSettings();
    FilterSettings filterSettings=gs.getFilterSettings();
    String filename=Utils.getFilename(""String_Node_Str"",filterSettings.filterSetFilename);
    if (filename == null)     return;
    filename=Utils.replaceExtension(filename,""String_Node_Str"");
    filterSettings.filterSetFilename=filename;
    ArrayList<Filter> filters=new ArrayList<Filter>(3);
    filters.add(new MultiFilter2(lower[0],(float)lower[1],lower[2],lower[3],lower[4],lower[5],lower[6]));
    filters.add(new MultiFilter2(upper[0],(float)upper[1],upper[2],upper[3],upper[4],upper[5],upper[6]));
    filters.add(new MultiFilter2(increment[0],(float)increment[1],increment[2],increment[3],increment[4],increment[5],increment[6]));
    ArrayList<FilterSet> filterList=new ArrayList<FilterSet>(1);
    filterList.add(new FilterSet(""String_Node_Str"",filters));
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(filename);
      XStreamWrapper.getInstance().toXML(filterList,fos);
      SettingsManager.saveSettings(gs);
    }
 catch (    Exception e) {
      IJ.log(""String_Node_Str"" + e.getMessage());
    }
 finally {
      if (fos != null) {
        try {
          fos.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}","private void summariseResults(HashMap<Integer,FilterCandidates> filterCandidates){
  createTable();
  StoredDataStatistics distanceStats=new StoredDataStatistics();
  StoredDataStatistics depthStats=new StoredDataStatistics();
  createFilterCriteria();
  StoredDataStatistics[][] stats=new StoredDataStatistics[3][filterCriteria.length];
  for (int i=0; i < stats.length; i++)   for (int j=0; j < stats[i].length; j++)   stats[i][j]=new StoredDataStatistics();
  final double nmPerPixel=simulationParameters.a;
  final boolean mle=fitConfig.getFitSolver() == FitSolver.MLE;
  double tp=0, fp=0;
  int failcTP=0, failcFP=0;
  int cTP=0, cFP=0;
  int[] status=null, status2=null;
  status=new int[FitStatus.values().length];
  status2=new int[status.length];
  for (  FilterCandidates result : filterCandidates.values()) {
    tp+=result.tp;
    fp+=result.fp;
    for (int i=0; i < result.fitResult.length; i++) {
      if (result.spots[i].match)       cTP++;
 else       cFP++;
      final FitResult fitResult=result.fitResult[i];
      if (fitResult.getStatus() != FitStatus.OK) {
        if (status != null) {
          status[result.fitResult[i].getStatus().ordinal()]++;
          status2[result.fitResultWithNeighbours[i].getStatus().ordinal()]++;
        }
        if (result.spots[i].match)         failcTP++;
 else         failcFP++;
        stats[0][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[0][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
      }
 else {
        final double[] p=fitResult.getParameters();
        final double[] initialParams=fitResult.getInitialParameters();
        final double s0=(p[Gaussian2DFunction.X_SD] + p[Gaussian2DFunction.Y_SD]) * 0.5;
        final double s=s0 * nmPerPixel;
        final double N=p[Gaussian2DFunction.SIGNAL] / simulationParameters.gain;
        final double b2=Math.max(0,(p[Gaussian2DFunction.BACKGROUND] - simulationParameters.bias) / simulationParameters.gain);
        double precision;
        if (mle)         precision=PeakResult.getMLPrecisionX(nmPerPixel,s,N,b2,simulationParameters.emCCD);
 else         precision=PeakResult.getPrecisionX(nmPerPixel,s,N,b2,simulationParameters.emCCD);
        final double signal=p[Gaussian2DFunction.SIGNAL] / simulationParameters.gain;
        final double snr=p[Gaussian2DFunction.SIGNAL] / result.noise;
        final double width=s0 / fitConfig.getInitialPeakStdDev0();
        final double xShift=p[Gaussian2DFunction.X_POSITION] - initialParams[Gaussian2DFunction.X_POSITION];
        final double yShift=p[Gaussian2DFunction.Y_POSITION] - initialParams[Gaussian2DFunction.Y_POSITION];
        double shift=((Math.abs(xShift) > Math.abs(yShift)) ? xShift : yShift) / fitConfig.getInitialPeakStdDev0();
        shift=Math.abs(shift);
        final double eshift=Math.sqrt(xShift * xShift + yShift * yShift);
        stats[0][FILTER_SIGNAL].add(signal);
        stats[0][FILTER_SNR].add(snr);
        if (width < 1)         stats[0][FILTER_MIN_WIDTH].add(width);
 else         stats[0][FILTER_MAX_WIDTH].add(width);
        stats[0][FILTER_SHIFT].add(shift);
        stats[0][FILTER_ESHIFT].add(eshift);
        stats[0][FILTER_PRECISION].add(precision);
        stats[0][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[0][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
        final int index=(result.fitMatch[i]) ? 1 : 2;
        stats[index][FILTER_SIGNAL].add(signal);
        stats[index][FILTER_SNR].add(snr);
        if (width < 1)         stats[index][FILTER_MIN_WIDTH].add(width);
 else         stats[index][FILTER_MAX_WIDTH].add(width);
        stats[index][FILTER_SHIFT].add(shift);
        stats[index][FILTER_ESHIFT].add(eshift);
        stats[index][FILTER_PRECISION].add(precision);
        stats[index][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[index][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
      }
    }
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      distanceStats.add(fitMatch.d * nmPerPixel);
      depthStats.add(fitMatch.z * nmPerPixel);
    }
  }
  double[] i1=new double[depthStats.getN()];
  double[] i2=new double[i1.length];
  double[] is=new double[i1.length];
  int ci=0;
  for (  FilterCandidates result : filterCandidates.values()) {
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      ScoredSpot spot=result.spots[i];
      i1[ci]=fitMatch.predictedSignal;
      i2[ci]=fitMatch.actualSignal;
      is[ci]=spot.intensity;
      ci++;
    }
  }
  if (status != null) {
    String name=PeakFit.getSolverName(fitConfig);
    if (fitConfig.getFitSolver() == FitSolver.MLE && fitConfig.isModelCamera())     name+=""String_Node_Str"";
    System.out.println(""String_Node_Str"" + name);
    for (int i=0; i < status.length; i++) {
      if (status[i] != 0)       System.out.printf(""String_Node_Str"",FitStatus.values()[i].toString(),status[i]);
    }
    for (int i=0; i < status2.length; i++) {
      if (status2[i] != 0)       System.out.printf(""String_Node_Str"",FitStatus.values()[i].toString(),status2[i]);
    }
  }
  StringBuilder sb=new StringBuilder();
  final double signal=simulationParameters.signalPerFrame;
  final int n=results.size();
  sb.append(imp.getStackSize()).append(""String_Node_Str"");
  final int w=imp.getWidth();
  final int h=imp.getHeight();
  sb.append(w).append(""String_Node_Str"");
  sb.append(h).append(""String_Node_Str"");
  sb.append(n).append(""String_Node_Str"");
  double density=((double)n / imp.getStackSize()) / (w * h) / (simulationParameters.a * simulationParameters.a / 1e6);
  sb.append(Utils.rounded(density)).append(""String_Node_Str"");
  sb.append(Utils.rounded(signal)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.a)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.depth)).append(""String_Node_Str"");
  sb.append(simulationParameters.fixedDepth).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.gain)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.readNoise)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b2)).append(""String_Node_Str"");
  double noise=simulationParameters.b2;
  if (simulationParameters.emCCD) {
    final double readVariance=noise - simulationParameters.b;
    noise=simulationParameters.b * 2 + readVariance;
  }
  if (simulationParameters.fullSimulation) {
  }
  sb.append(Utils.rounded(signal / Math.sqrt(noise))).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s / simulationParameters.a)).append(""String_Node_Str"");
  sb.append(spotFilter.getDescription());
  addCount(sb,nP + nN);
  addCount(sb,nP);
  addCount(sb,nN);
  addCount(sb,fP);
  addCount(sb,fN);
  String name=PeakFit.getSolverName(fitConfig);
  if (fitConfig.getFitSolver() == FitSolver.MLE && fitConfig.isModelCamera())   name+=""String_Node_Str"";
  add(sb,name);
  add(sb,config.getFitting());
  resultPrefix=sb.toString();
  add(sb,(100.0 * cTP) / nP);
  add(sb,(100.0 * cFP) / nN);
  add(sb,cTP + cFP);
  add(sb,cTP);
  add(sb,cFP);
  FractionClassificationResult m=new FractionClassificationResult(cTP,cFP,0,simulationParameters.molecules - cTP);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  add(sb,failcTP);
  add(sb,failcFP);
  add(sb,tp);
  add(sb,fp);
  m=new FractionClassificationResult(tp,fp,0,simulationParameters.molecules - tp);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  add(sb,tp);
  m=new FractionClassificationResult(tp,0,0,simulationParameters.molecules - tp);
  add(sb,m.getRecall());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  double median=distanceStats.getMedian();
  add(sb,median);
  WindowOrganiser wo=new WindowOrganiser();
  String label=String.format(""String_Node_Str"",Utils.rounded(m.getRecall()),distanceStats.getN(),Utils.rounded(median),Utils.rounded(distanceStats.getStandardDeviation()));
  int id=Utils.showHistogram(TITLE,distanceStats,""String_Node_Str"",0,0,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  median=depthStats.getMedian();
  add(sb,median);
  int[] indices=Utils.newArray(i1.length,0,1);
  if (showCorrelation)   Sort.sort(indices,is,rankByIntensity);
  double[] r=(showCorrelation) ? new double[i1.length] : null;
  double[] sr=(showCorrelation) ? new double[i1.length] : null;
  double[] rank=(showCorrelation) ? new double[i1.length] : null;
  ci=0;
  FastCorrelator fastCorrelator=new FastCorrelator();
  ArrayList<Ranking> pc1=new ArrayList<Ranking>();
  ArrayList<Ranking> pc2=new ArrayList<Ranking>();
  for (  int ci2 : indices) {
    fastCorrelator.add((long)Math.round(i1[ci2]),(long)Math.round(i2[ci2]));
    pc1.add(new Ranking(i1[ci2],ci));
    pc2.add(new Ranking(i2[ci2],ci));
    if (showCorrelation) {
      r[ci]=fastCorrelator.getCorrelation();
      sr[ci]=Correlator.correlation(rank(pc1),rank(pc2));
      if (rankByIntensity)       rank[ci]=is[0] - is[ci];
 else       rank[ci]=ci;
    }
    ci++;
  }
  final double pearsonCorr=fastCorrelator.getCorrelation();
  final double rankedCorr=Correlator.correlation(rank(pc1),rank(pc2));
  SimpleRegression regression=new SimpleRegression(false);
  for (int i=0; i < pc1.size(); i++)   regression.addData(pc1.get(i).value,pc2.get(i).value);
  final double slope=regression.getSlope();
  if (showCorrelation) {
    String title=TITLE + ""String_Node_Str"";
    Plot plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] limits1=Maths.limits(i1);
    double[] limits2=Maths.limits(i2);
    plot.setLimits(limits1[0],limits1[1],limits2[0],limits2[1]);
    label=String.format(""String_Node_Str"",Utils.rounded(pearsonCorr),Utils.rounded(rankedCorr),Utils.rounded(slope));
    plot.addLabel(0,0,label);
    plot.setColor(Color.red);
    plot.addPoints(i1,i2,Plot.DOT);
    if (slope > 1)     plot.drawLine(limits1[0],limits1[0] * slope,limits1[1],limits1[1] * slope);
 else     plot.drawLine(limits2[0] / slope,limits2[0],limits2[1] / slope,limits2[1]);
    PlotWindow pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
    title=TITLE + ""String_Node_Str"";
    plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] xlimits=Maths.limits(rank);
    double[] ylimits=Maths.limits(r);
    ylimits=Maths.limits(ylimits,sr);
    plot.setLimits(xlimits[0],xlimits[1],ylimits[0],ylimits[1]);
    plot.setColor(Color.red);
    plot.addPoints(rank,r,Plot.LINE);
    plot.setColor(Color.blue);
    plot.addPoints(rank,sr,Plot.LINE);
    plot.setColor(Color.black);
    plot.addLabel(0,0,label);
    pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
  }
  add(sb,pearsonCorr);
  add(sb,rankedCorr);
  add(sb,slope);
  label=String.format(""String_Node_Str"",depthStats.getN(),Utils.rounded(median));
  id=Utils.showHistogram(TITLE,depthStats,""String_Node_Str"",0,1,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  double[] lower=new double[filterCriteria.length];
  double[] upper=new double[lower.length];
  for (int i=0; i < stats[0].length; i++) {
    double[] limits=showDoubleHistogram(stats,i,wo);
    lower[i]=limits[0];
    upper[i]=limits[1];
  }
  upper[FILTER_SIGNAL]*=2;
  upper[FILTER_SNR]*=2;
  lower[FILTER_PRECISION]*=0.5;
  double factor=0.25;
  if (lower[FILTER_MIN_WIDTH] != 0)   upper[FILTER_MIN_WIDTH]=1 - Math.max(0,factor * (1 - lower[FILTER_MIN_WIDTH]));
  if (upper[FILTER_MIN_WIDTH] != 0)   lower[FILTER_MAX_WIDTH]=1 + Math.max(0,factor * (upper[FILTER_MAX_WIDTH] - 1));
  double[] increment=new double[lower.length];
  for (int i=0; i < increment.length; i++)   increment[i]=(upper[i] - lower[i]) / 10;
  increment[FILTER_SIGNAL]=Double.POSITIVE_INFINITY;
  increment[FILTER_ESHIFT]=Double.POSITIVE_INFINITY;
  for (int i=0; i < stats[0].length; i++) {
    lower[i]=Maths.round(lower[i]);
    upper[i]=Maths.round(upper[i]);
    increment[i]=Maths.round(increment[i]);
    sb.append(""String_Node_Str"").append(lower[i]).append('-').append(upper[i]);
  }
  wo.tile();
  summaryTable.append(sb.toString());
  if (saveFilterRange) {
    GlobalSettings gs=SettingsManager.loadSettings();
    FilterSettings filterSettings=gs.getFilterSettings();
    String filename=Utils.getFilename(""String_Node_Str"",filterSettings.filterSetFilename);
    if (filename == null)     return;
    filename=Utils.replaceExtension(filename,""String_Node_Str"");
    filterSettings.filterSetFilename=filename;
    ArrayList<Filter> filters=new ArrayList<Filter>(3);
    filters.add(new MultiFilter2(lower[0],(float)lower[1],lower[2],lower[3],lower[4],lower[5],lower[6]));
    filters.add(new MultiFilter2(upper[0],(float)upper[1],upper[2],upper[3],upper[4],upper[5],upper[6]));
    filters.add(new MultiFilter2(increment[0],(float)increment[1],increment[2],increment[3],increment[4],increment[5],increment[6]));
    ArrayList<FilterSet> filterList=new ArrayList<FilterSet>(1);
    filterList.add(new FilterSet(""String_Node_Str"",filters));
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(filename);
      XStreamWrapper.getInstance().toXML(filterList,fos);
      SettingsManager.saveSettings(gs);
    }
 catch (    Exception e) {
      IJ.log(""String_Node_Str"" + e.getMessage());
    }
 finally {
      if (fos != null) {
        try {
          fos.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}",0.9926618232266072
149549,"/** 
 * The fit result of the specified index in the array of fitted indices. This is only set if the fit was attempted with neighbours.
 * @param n
 * @return
 */
public FitResult getFitResultWithNeighbours(int i){
  return fitResultsWithNeighbours[i];
}","/** 
 * The fit result of the specified index in the array of fitted indices. This is only set if the fit was attempted with neighbours.
 * @param n
 * @return
 */
public FitResult getFitResultWithNeighbours(int n){
  if (fitResultsWithNeighbours != null && n < fitResultsWithNeighbours.length)   return fitResultsWithNeighbours[n];
  return null;
}",0.8145695364238411
149550,"private void summariseResults(HashMap<Integer,FilterCandidates> filterCandidates){
  createTable();
  StoredDataStatistics distanceStats=new StoredDataStatistics();
  StoredDataStatistics depthStats=new StoredDataStatistics();
  createFilterCriteria();
  StoredDataStatistics[][] stats=new StoredDataStatistics[3][filterCriteria.length];
  for (int i=0; i < stats.length; i++)   for (int j=0; j < stats[i].length; j++)   stats[i][j]=new StoredDataStatistics();
  final double nmPerPixel=simulationParameters.a;
  final boolean mle=fitConfig.getFitSolver() == FitSolver.MLE;
  double tp=0, fp=0;
  int failcTP=0, failcFP=0;
  int cTP=0, cFP=0;
  int[] status=null, status2=null;
  status=new int[FitStatus.values().length];
  status2=new int[status.length];
  for (  FilterCandidates result : filterCandidates.values()) {
    tp+=result.tp;
    fp+=result.fp;
    for (int i=0; i < result.fitResult.length; i++) {
      if (result.spots[i].match)       cTP++;
 else       cFP++;
      final FitResult fitResult=result.fitResult[i];
      if (fitResult.getStatus() != FitStatus.OK) {
        if (status != null) {
          status[result.fitResult[i].getStatus().ordinal()]++;
          status2[result.fitResultWithNeighbours[i].getStatus().ordinal()]++;
        }
        if (result.spots[i].match)         failcTP++;
 else         failcFP++;
        stats[0][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[0][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
      }
 else {
        final double[] p=fitResult.getParameters();
        final double[] initialParams=fitResult.getInitialParameters();
        final double s0=(p[Gaussian2DFunction.X_SD] + p[Gaussian2DFunction.Y_SD]) * 0.5;
        final double s=s0 * nmPerPixel;
        final double N=p[Gaussian2DFunction.SIGNAL] / simulationParameters.gain;
        final double b2=Math.max(0,(p[Gaussian2DFunction.BACKGROUND] - simulationParameters.bias) / simulationParameters.gain);
        double precision;
        if (mle)         precision=PeakResult.getMLPrecisionX(nmPerPixel,s,N,b2,simulationParameters.emCCD);
 else         precision=PeakResult.getPrecisionX(nmPerPixel,s,N,b2,simulationParameters.emCCD);
        final double signal=p[Gaussian2DFunction.SIGNAL] / simulationParameters.gain;
        final double snr=p[Gaussian2DFunction.SIGNAL] / result.noise;
        final double width=s0 / fitConfig.getInitialPeakStdDev0();
        final double xShift=p[Gaussian2DFunction.X_POSITION] - initialParams[Gaussian2DFunction.X_POSITION];
        final double yShift=p[Gaussian2DFunction.Y_POSITION] - initialParams[Gaussian2DFunction.Y_POSITION];
        double shift=((Math.abs(xShift) > Math.abs(yShift)) ? xShift : yShift) / fitConfig.getInitialPeakStdDev0();
        shift=Math.abs(shift);
        final double eshift=Math.sqrt(xShift * xShift + yShift * yShift);
        stats[0][FILTER_SIGNAL].add(signal);
        stats[0][FILTER_SNR].add(snr);
        if (width < 1)         stats[0][FILTER_MIN_WIDTH].add(width);
 else         stats[0][FILTER_MAX_WIDTH].add(width);
        stats[0][FILTER_SHIFT].add(shift);
        stats[0][FILTER_ESHIFT].add(eshift);
        stats[0][FILTER_PRECISION].add(precision);
        stats[0][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[0][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
        final int index=(result.fitMatch[i]) ? 1 : 2;
        stats[index][FILTER_SIGNAL].add(signal);
        stats[index][FILTER_SNR].add(snr);
        if (width < 1)         stats[index][FILTER_MIN_WIDTH].add(width);
 else         stats[index][FILTER_MAX_WIDTH].add(width);
        stats[index][FILTER_SHIFT].add(shift);
        stats[index][FILTER_ESHIFT].add(eshift);
        stats[index][FILTER_PRECISION].add(precision);
        stats[index][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[index][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
      }
    }
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      distanceStats.add(fitMatch.d * nmPerPixel);
      depthStats.add(fitMatch.z * nmPerPixel);
    }
  }
  double[] i1=new double[depthStats.getN()];
  double[] i2=new double[i1.length];
  double[] is=new double[i1.length];
  int ci=0;
  for (  FilterCandidates result : filterCandidates.values()) {
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      ScoredSpot spot=result.spots[i];
      i1[ci]=fitMatch.predictedSignal;
      i2[ci]=fitMatch.actualSignal;
      is[ci]=spot.intensity;
      ci++;
    }
  }
  if (status != null) {
    String name=PeakFit.getSolverName(fitConfig);
    if (fitConfig.getFitSolver() == FitSolver.MLE && fitConfig.isModelCamera())     name+=""String_Node_Str"";
    System.out.println(""String_Node_Str"" + name);
    for (int i=0; i < status.length; i++) {
      if (status[i] != 0)       System.out.printf(""String_Node_Str"",FitStatus.values()[i].toString(),status[i]);
    }
    for (int i=0; i < status2.length; i++) {
      if (status2[i] != 0)       System.out.printf(""String_Node_Str"",FitStatus.values()[i].toString(),status2[i]);
    }
  }
  StringBuilder sb=new StringBuilder();
  final double signal=simulationParameters.signalPerFrame;
  final int n=results.size();
  sb.append(imp.getStackSize()).append(""String_Node_Str"");
  final int w=imp.getWidth();
  final int h=imp.getHeight();
  sb.append(w).append(""String_Node_Str"");
  sb.append(h).append(""String_Node_Str"");
  sb.append(n).append(""String_Node_Str"");
  double density=((double)n / imp.getStackSize()) / (w * h) / (simulationParameters.a * simulationParameters.a / 1e6);
  sb.append(Utils.rounded(density)).append(""String_Node_Str"");
  sb.append(Utils.rounded(signal)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.a)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.depth)).append(""String_Node_Str"");
  sb.append(simulationParameters.fixedDepth).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.gain)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.readNoise)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b2)).append(""String_Node_Str"");
  double noise=simulationParameters.b2;
  if (simulationParameters.emCCD) {
    final double readVariance=noise - simulationParameters.b;
    noise=simulationParameters.b * 2 + readVariance;
  }
  if (simulationParameters.fullSimulation) {
  }
  sb.append(Utils.rounded(signal / Math.sqrt(noise))).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s / simulationParameters.a)).append(""String_Node_Str"");
  sb.append(spotFilter.getDescription());
  addCount(sb,nP + nN);
  addCount(sb,nP);
  addCount(sb,nN);
  addCount(sb,fP);
  addCount(sb,fN);
  String name=PeakFit.getSolverName(fitConfig);
  if (fitConfig.getFitSolver() == FitSolver.MLE && fitConfig.isModelCamera())   name+=""String_Node_Str"";
  add(sb,name);
  add(sb,config.getFitting());
  resultPrefix=sb.toString();
  add(sb,(100.0 * cTP) / nP);
  add(sb,(100.0 * cFP) / nN);
  add(sb,cTP + cFP);
  add(sb,cTP);
  add(sb,cFP);
  FractionClassificationResult m=new FractionClassificationResult(cTP,cFP,0,simulationParameters.molecules - cTP);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  add(sb,failcTP);
  add(sb,failcFP);
  add(sb,tp);
  add(sb,fp);
  m=new FractionClassificationResult(tp,fp,0,simulationParameters.molecules - tp);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  add(sb,tp);
  m=new FractionClassificationResult(tp,0,0,simulationParameters.molecules - tp);
  add(sb,m.getRecall());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  double median=distanceStats.getMedian();
  add(sb,median);
  WindowOrganiser wo=new WindowOrganiser();
  String label=String.format(""String_Node_Str"",Utils.rounded(m.getRecall()),distanceStats.getN(),Utils.rounded(median),Utils.rounded(distanceStats.getStandardDeviation()));
  int id=Utils.showHistogram(TITLE,distanceStats,""String_Node_Str"",0,0,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  median=depthStats.getMedian();
  add(sb,median);
  int[] indices=Utils.newArray(i1.length,0,1);
  if (showCorrelation)   Sort.sort(indices,is,rankByIntensity);
  double[] r=(showCorrelation) ? new double[i1.length] : null;
  double[] sr=(showCorrelation) ? new double[i1.length] : null;
  double[] rank=(showCorrelation) ? new double[i1.length] : null;
  ci=0;
  FastCorrelator fastCorrelator=new FastCorrelator();
  ArrayList<Ranking> pc1=new ArrayList<Ranking>();
  ArrayList<Ranking> pc2=new ArrayList<Ranking>();
  for (  int ci2 : indices) {
    fastCorrelator.add((long)Math.round(i1[ci2]),(long)Math.round(i2[ci2]));
    pc1.add(new Ranking(i1[ci2],ci));
    pc2.add(new Ranking(i2[ci2],ci));
    if (showCorrelation) {
      r[ci]=fastCorrelator.getCorrelation();
      sr[ci]=Correlator.correlation(rank(pc1),rank(pc2));
      if (rankByIntensity)       rank[ci]=is[0] - is[ci];
 else       rank[ci]=ci;
    }
    ci++;
  }
  final double pearsonCorr=fastCorrelator.getCorrelation();
  final double rankedCorr=Correlator.correlation(rank(pc1),rank(pc2));
  SimpleRegression regression=new SimpleRegression(false);
  for (int i=0; i < pc1.size(); i++)   regression.addData(pc1.get(i).value,pc2.get(i).value);
  final double slope=regression.getSlope();
  if (showCorrelation) {
    String title=TITLE + ""String_Node_Str"";
    Plot plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] limits1=Maths.limits(i1);
    double[] limits2=Maths.limits(i2);
    plot.setLimits(limits1[0],limits1[1],limits2[0],limits2[1]);
    label=String.format(""String_Node_Str"",Utils.rounded(pearsonCorr),Utils.rounded(rankedCorr),Utils.rounded(slope));
    plot.addLabel(0,0,label);
    plot.setColor(Color.red);
    plot.addPoints(i1,i2,Plot.DOT);
    if (slope > 1)     plot.drawLine(limits1[0],limits1[0] * slope,limits1[1],limits1[1] * slope);
 else     plot.drawLine(limits2[0] / slope,limits2[0],limits2[1] / slope,limits2[1]);
    PlotWindow pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
    title=TITLE + ""String_Node_Str"";
    plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] xlimits=Maths.limits(rank);
    double[] ylimits=Maths.limits(r);
    ylimits=Maths.limits(ylimits,sr);
    plot.setLimits(xlimits[0],xlimits[1],ylimits[0],ylimits[1]);
    plot.setColor(Color.red);
    plot.addPoints(rank,r,Plot.LINE);
    plot.setColor(Color.blue);
    plot.addPoints(rank,sr,Plot.LINE);
    plot.setColor(Color.black);
    plot.addLabel(0,0,label);
    pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
  }
  add(sb,pearsonCorr);
  add(sb,rankedCorr);
  add(sb,slope);
  label=String.format(""String_Node_Str"",depthStats.getN(),Utils.rounded(median));
  id=Utils.showHistogram(TITLE,depthStats,""String_Node_Str"",0,1,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  double[] lower=new double[filterCriteria.length];
  double[] upper=new double[lower.length];
  for (int i=0; i < stats[0].length; i++) {
    double[] limits=showDoubleHistogram(stats,i,wo);
    lower[i]=limits[0];
    upper[i]=limits[1];
  }
  upper[FILTER_SIGNAL]*=2;
  upper[FILTER_SNR]*=2;
  lower[FILTER_PRECISION]*=0.5;
  double factor=0.25;
  if (lower[FILTER_MIN_WIDTH] != 0)   upper[FILTER_MIN_WIDTH]=1 - Math.max(0,factor * (1 - lower[FILTER_MIN_WIDTH]));
  if (upper[FILTER_MIN_WIDTH] != 0)   lower[FILTER_MAX_WIDTH]=1 + Math.max(0,factor * (upper[FILTER_MAX_WIDTH] - 1));
  double[] increment=new double[lower.length];
  for (int i=0; i < increment.length; i++)   increment[i]=(upper[i] - lower[i]) / 10;
  increment[FILTER_SIGNAL]=Double.POSITIVE_INFINITY;
  increment[FILTER_ESHIFT]=Double.POSITIVE_INFINITY;
  for (int i=0; i < stats[0].length; i++) {
    lower[i]=Maths.round(lower[i]);
    upper[i]=Maths.round(upper[i]);
    increment[i]=Maths.round(increment[i]);
    sb.append(""String_Node_Str"").append(lower[i]).append('-').append(upper[i]);
  }
  wo.tile();
  summaryTable.append(sb.toString());
  if (saveFilterRange) {
    GlobalSettings gs=SettingsManager.loadSettings();
    FilterSettings filterSettings=gs.getFilterSettings();
    String filename=Utils.getFilename(""String_Node_Str"",filterSettings.filterSetFilename);
    if (filename == null)     return;
    filename=Utils.replaceExtension(filename,""String_Node_Str"");
    filterSettings.filterSetFilename=filename;
    ArrayList<Filter> filters=new ArrayList<Filter>(3);
    filters.add(new MultiFilter2(lower[0],(float)lower[1],lower[2],lower[3],lower[4],lower[5],lower[6]));
    filters.add(new MultiFilter2(upper[0],(float)upper[1],upper[2],upper[3],upper[4],upper[5],upper[6]));
    filters.add(new MultiFilter2(increment[0],(float)increment[1],increment[2],increment[3],increment[4],increment[5],increment[6]));
    ArrayList<FilterSet> filterList=new ArrayList<FilterSet>(1);
    filterList.add(new FilterSet(""String_Node_Str"",filters));
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(filename);
      XStreamWrapper.getInstance().toXML(filterList,fos);
      SettingsManager.saveSettings(gs);
    }
 catch (    Exception e) {
      IJ.log(""String_Node_Str"" + e.getMessage());
    }
 finally {
      if (fos != null) {
        try {
          fos.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}","private void summariseResults(HashMap<Integer,FilterCandidates> filterCandidates){
  createTable();
  StoredDataStatistics distanceStats=new StoredDataStatistics();
  StoredDataStatistics depthStats=new StoredDataStatistics();
  createFilterCriteria();
  StoredDataStatistics[][] stats=new StoredDataStatistics[3][filterCriteria.length];
  for (int i=0; i < stats.length; i++)   for (int j=0; j < stats[i].length; j++)   stats[i][j]=new StoredDataStatistics();
  final double nmPerPixel=simulationParameters.a;
  final boolean mle=fitConfig.getFitSolver() == FitSolver.MLE;
  double tp=0, fp=0;
  int failcTP=0, failcFP=0;
  int cTP=0, cFP=0;
  int[] status=null, status2=null;
  status=new int[FitStatus.values().length];
  status2=new int[status.length];
  for (  FilterCandidates result : filterCandidates.values()) {
    tp+=result.tp;
    fp+=result.fp;
    for (int i=0; i < result.fitResult.length; i++) {
      if (result.spots[i].match)       cTP++;
 else       cFP++;
      final FitResult fitResult=result.fitResult[i];
      if (fitResult.getStatus() != FitStatus.OK) {
        if (status != null) {
          status[result.fitResult[i].getStatus().ordinal()]++;
          if (result.fitResultWithNeighbours[i] != null)           status2[result.fitResultWithNeighbours[i].getStatus().ordinal()]++;
        }
        if (result.spots[i].match)         failcTP++;
 else         failcFP++;
        stats[0][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[0][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
      }
 else {
        final double[] p=fitResult.getParameters();
        final double[] initialParams=fitResult.getInitialParameters();
        final double s0=(p[Gaussian2DFunction.X_SD] + p[Gaussian2DFunction.Y_SD]) * 0.5;
        final double s=s0 * nmPerPixel;
        final double N=p[Gaussian2DFunction.SIGNAL] / simulationParameters.gain;
        final double b2=Math.max(0,(p[Gaussian2DFunction.BACKGROUND] - simulationParameters.bias) / simulationParameters.gain);
        double precision;
        if (mle)         precision=PeakResult.getMLPrecisionX(nmPerPixel,s,N,b2,simulationParameters.emCCD);
 else         precision=PeakResult.getPrecisionX(nmPerPixel,s,N,b2,simulationParameters.emCCD);
        final double signal=p[Gaussian2DFunction.SIGNAL] / simulationParameters.gain;
        final double snr=p[Gaussian2DFunction.SIGNAL] / result.noise;
        final double width=s0 / fitConfig.getInitialPeakStdDev0();
        final double xShift=p[Gaussian2DFunction.X_POSITION] - initialParams[Gaussian2DFunction.X_POSITION];
        final double yShift=p[Gaussian2DFunction.Y_POSITION] - initialParams[Gaussian2DFunction.Y_POSITION];
        double shift=((Math.abs(xShift) > Math.abs(yShift)) ? xShift : yShift) / fitConfig.getInitialPeakStdDev0();
        shift=Math.abs(shift);
        final double eshift=Math.sqrt(xShift * xShift + yShift * yShift);
        stats[0][FILTER_SIGNAL].add(signal);
        stats[0][FILTER_SNR].add(snr);
        if (width < 1)         stats[0][FILTER_MIN_WIDTH].add(width);
 else         stats[0][FILTER_MAX_WIDTH].add(width);
        stats[0][FILTER_SHIFT].add(shift);
        stats[0][FILTER_ESHIFT].add(eshift);
        stats[0][FILTER_PRECISION].add(precision);
        stats[0][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[0][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
        final int index=(result.fitMatch[i]) ? 1 : 2;
        stats[index][FILTER_SIGNAL].add(signal);
        stats[index][FILTER_SNR].add(snr);
        if (width < 1)         stats[index][FILTER_MIN_WIDTH].add(width);
 else         stats[index][FILTER_MAX_WIDTH].add(width);
        stats[index][FILTER_SHIFT].add(shift);
        stats[index][FILTER_ESHIFT].add(eshift);
        stats[index][FILTER_PRECISION].add(precision);
        stats[index][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[index][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
      }
    }
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      distanceStats.add(fitMatch.d * nmPerPixel);
      depthStats.add(fitMatch.z * nmPerPixel);
    }
  }
  double[] i1=new double[depthStats.getN()];
  double[] i2=new double[i1.length];
  double[] is=new double[i1.length];
  int ci=0;
  for (  FilterCandidates result : filterCandidates.values()) {
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      ScoredSpot spot=result.spots[i];
      i1[ci]=fitMatch.predictedSignal;
      i2[ci]=fitMatch.actualSignal;
      is[ci]=spot.intensity;
      ci++;
    }
  }
  if (status != null) {
    String name=PeakFit.getSolverName(fitConfig);
    if (fitConfig.getFitSolver() == FitSolver.MLE && fitConfig.isModelCamera())     name+=""String_Node_Str"";
    System.out.println(""String_Node_Str"" + name);
    for (int i=0; i < status.length; i++) {
      if (status[i] != 0)       System.out.printf(""String_Node_Str"",FitStatus.values()[i].toString(),status[i]);
    }
    for (int i=0; i < status2.length; i++) {
      if (status2[i] != 0)       System.out.printf(""String_Node_Str"",FitStatus.values()[i].toString(),status2[i]);
    }
  }
  StringBuilder sb=new StringBuilder();
  final double signal=simulationParameters.signalPerFrame;
  final int n=results.size();
  sb.append(imp.getStackSize()).append(""String_Node_Str"");
  final int w=imp.getWidth();
  final int h=imp.getHeight();
  sb.append(w).append(""String_Node_Str"");
  sb.append(h).append(""String_Node_Str"");
  sb.append(n).append(""String_Node_Str"");
  double density=((double)n / imp.getStackSize()) / (w * h) / (simulationParameters.a * simulationParameters.a / 1e6);
  sb.append(Utils.rounded(density)).append(""String_Node_Str"");
  sb.append(Utils.rounded(signal)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.a)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.depth)).append(""String_Node_Str"");
  sb.append(simulationParameters.fixedDepth).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.gain)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.readNoise)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b2)).append(""String_Node_Str"");
  double noise=simulationParameters.b2;
  if (simulationParameters.emCCD) {
    final double readVariance=noise - simulationParameters.b;
    noise=simulationParameters.b * 2 + readVariance;
  }
  if (simulationParameters.fullSimulation) {
  }
  sb.append(Utils.rounded(signal / Math.sqrt(noise))).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s / simulationParameters.a)).append(""String_Node_Str"");
  sb.append(spotFilter.getDescription());
  addCount(sb,nP + nN);
  addCount(sb,nP);
  addCount(sb,nN);
  addCount(sb,fP);
  addCount(sb,fN);
  String name=PeakFit.getSolverName(fitConfig);
  if (fitConfig.getFitSolver() == FitSolver.MLE && fitConfig.isModelCamera())   name+=""String_Node_Str"";
  add(sb,name);
  add(sb,config.getFitting());
  resultPrefix=sb.toString();
  add(sb,(100.0 * cTP) / nP);
  add(sb,(100.0 * cFP) / nN);
  add(sb,cTP + cFP);
  add(sb,cTP);
  add(sb,cFP);
  FractionClassificationResult m=new FractionClassificationResult(cTP,cFP,0,simulationParameters.molecules - cTP);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  add(sb,failcTP);
  add(sb,failcFP);
  add(sb,tp);
  add(sb,fp);
  m=new FractionClassificationResult(tp,fp,0,simulationParameters.molecules - tp);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  add(sb,tp);
  m=new FractionClassificationResult(tp,0,0,simulationParameters.molecules - tp);
  add(sb,m.getRecall());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  double median=distanceStats.getMedian();
  add(sb,median);
  WindowOrganiser wo=new WindowOrganiser();
  String label=String.format(""String_Node_Str"",Utils.rounded(m.getRecall()),distanceStats.getN(),Utils.rounded(median),Utils.rounded(distanceStats.getStandardDeviation()));
  int id=Utils.showHistogram(TITLE,distanceStats,""String_Node_Str"",0,0,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  median=depthStats.getMedian();
  add(sb,median);
  int[] indices=Utils.newArray(i1.length,0,1);
  if (showCorrelation)   Sort.sort(indices,is,rankByIntensity);
  double[] r=(showCorrelation) ? new double[i1.length] : null;
  double[] sr=(showCorrelation) ? new double[i1.length] : null;
  double[] rank=(showCorrelation) ? new double[i1.length] : null;
  ci=0;
  FastCorrelator fastCorrelator=new FastCorrelator();
  ArrayList<Ranking> pc1=new ArrayList<Ranking>();
  ArrayList<Ranking> pc2=new ArrayList<Ranking>();
  for (  int ci2 : indices) {
    fastCorrelator.add((long)Math.round(i1[ci2]),(long)Math.round(i2[ci2]));
    pc1.add(new Ranking(i1[ci2],ci));
    pc2.add(new Ranking(i2[ci2],ci));
    if (showCorrelation) {
      r[ci]=fastCorrelator.getCorrelation();
      sr[ci]=Correlator.correlation(rank(pc1),rank(pc2));
      if (rankByIntensity)       rank[ci]=is[0] - is[ci];
 else       rank[ci]=ci;
    }
    ci++;
  }
  final double pearsonCorr=fastCorrelator.getCorrelation();
  final double rankedCorr=Correlator.correlation(rank(pc1),rank(pc2));
  SimpleRegression regression=new SimpleRegression(false);
  for (int i=0; i < pc1.size(); i++)   regression.addData(pc1.get(i).value,pc2.get(i).value);
  final double slope=regression.getSlope();
  if (showCorrelation) {
    String title=TITLE + ""String_Node_Str"";
    Plot plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] limits1=Maths.limits(i1);
    double[] limits2=Maths.limits(i2);
    plot.setLimits(limits1[0],limits1[1],limits2[0],limits2[1]);
    label=String.format(""String_Node_Str"",Utils.rounded(pearsonCorr),Utils.rounded(rankedCorr),Utils.rounded(slope));
    plot.addLabel(0,0,label);
    plot.setColor(Color.red);
    plot.addPoints(i1,i2,Plot.DOT);
    if (slope > 1)     plot.drawLine(limits1[0],limits1[0] * slope,limits1[1],limits1[1] * slope);
 else     plot.drawLine(limits2[0] / slope,limits2[0],limits2[1] / slope,limits2[1]);
    PlotWindow pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
    title=TITLE + ""String_Node_Str"";
    plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] xlimits=Maths.limits(rank);
    double[] ylimits=Maths.limits(r);
    ylimits=Maths.limits(ylimits,sr);
    plot.setLimits(xlimits[0],xlimits[1],ylimits[0],ylimits[1]);
    plot.setColor(Color.red);
    plot.addPoints(rank,r,Plot.LINE);
    plot.setColor(Color.blue);
    plot.addPoints(rank,sr,Plot.LINE);
    plot.setColor(Color.black);
    plot.addLabel(0,0,label);
    pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
  }
  add(sb,pearsonCorr);
  add(sb,rankedCorr);
  add(sb,slope);
  label=String.format(""String_Node_Str"",depthStats.getN(),Utils.rounded(median));
  id=Utils.showHistogram(TITLE,depthStats,""String_Node_Str"",0,1,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  double[] lower=new double[filterCriteria.length];
  double[] upper=new double[lower.length];
  for (int i=0; i < stats[0].length; i++) {
    double[] limits=showDoubleHistogram(stats,i,wo);
    lower[i]=limits[0];
    upper[i]=limits[1];
  }
  upper[FILTER_SIGNAL]*=2;
  upper[FILTER_SNR]*=2;
  lower[FILTER_PRECISION]*=0.5;
  double factor=0.25;
  if (lower[FILTER_MIN_WIDTH] != 0)   upper[FILTER_MIN_WIDTH]=1 - Math.max(0,factor * (1 - lower[FILTER_MIN_WIDTH]));
  if (upper[FILTER_MIN_WIDTH] != 0)   lower[FILTER_MAX_WIDTH]=1 + Math.max(0,factor * (upper[FILTER_MAX_WIDTH] - 1));
  double[] increment=new double[lower.length];
  for (int i=0; i < increment.length; i++)   increment[i]=(upper[i] - lower[i]) / 10;
  increment[FILTER_SIGNAL]=Double.POSITIVE_INFINITY;
  increment[FILTER_ESHIFT]=Double.POSITIVE_INFINITY;
  for (int i=0; i < stats[0].length; i++) {
    lower[i]=Maths.round(lower[i]);
    upper[i]=Maths.round(upper[i]);
    increment[i]=Maths.round(increment[i]);
    sb.append(""String_Node_Str"").append(lower[i]).append('-').append(upper[i]);
  }
  wo.tile();
  summaryTable.append(sb.toString());
  if (saveFilterRange) {
    GlobalSettings gs=SettingsManager.loadSettings();
    FilterSettings filterSettings=gs.getFilterSettings();
    String filename=Utils.getFilename(""String_Node_Str"",filterSettings.filterSetFilename);
    if (filename == null)     return;
    filename=Utils.replaceExtension(filename,""String_Node_Str"");
    filterSettings.filterSetFilename=filename;
    ArrayList<Filter> filters=new ArrayList<Filter>(3);
    filters.add(new MultiFilter2(lower[0],(float)lower[1],lower[2],lower[3],lower[4],lower[5],lower[6]));
    filters.add(new MultiFilter2(upper[0],(float)upper[1],upper[2],upper[3],upper[4],upper[5],upper[6]));
    filters.add(new MultiFilter2(increment[0],(float)increment[1],increment[2],increment[3],increment[4],increment[5],increment[6]));
    ArrayList<FilterSet> filterList=new ArrayList<FilterSet>(1);
    filterList.add(new FilterSet(""String_Node_Str"",filters));
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(filename);
      XStreamWrapper.getInstance().toXML(filterList,fos);
      SettingsManager.saveSettings(gs);
    }
 catch (    Exception e) {
      IJ.log(""String_Node_Str"" + e.getMessage());
    }
 finally {
      if (fos != null) {
        try {
          fos.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}",0.9979359043997827
149551,"/** 
 * Adds a new ROI to the overlay using the coordinates from start to end (non-inclusive)
 * @param x
 * @param y
 * @param slice
 * @param indices
 * @param o
 * @param start
 * @param end
 */
private void appendRoi(float[] x,float[] y,int[] slice,int[] indices,Overlay o,int start,int end){
  int p=end - start;
  float[] x2=new float[p];
  float[] y2=new float[p];
  for (int j=start, ii=0; j < end; j++, ii++) {
    x2[ii]=x[indices[start]];
    y2[ii]=y[indices[start]];
  }
  PointRoi roi=new PointRoi(x2,y2,p);
  roi.setPosition(slice[indices[start]]);
  o.add(roi);
}","/** 
 * Adds a new ROI to the overlay using the coordinates from start to end (non-inclusive)
 * @param x
 * @param y
 * @param slice
 * @param indices
 * @param o
 * @param start
 * @param end
 */
private void appendRoi(float[] x,float[] y,int[] slice,int[] indices,Overlay o,int start,int end){
  int p=end - start;
  float[] x2=new float[p];
  float[] y2=new float[p];
  for (int j=start, ii=0; j < end; j++, ii++) {
    x2[ii]=x[indices[j]];
    y2[ii]=y[indices[j]];
  }
  PointRoi roi=new PointRoi(x2,y2,p);
  roi.setPosition(slice[indices[start]]);
  o.add(roi);
}",0.9895652173913044
149552,"private void summariseResults(HashMap<Integer,FilterCandidates> filterCandidates){
  createTable();
  StoredDataStatistics distanceStats=new StoredDataStatistics();
  StoredDataStatistics depthStats=new StoredDataStatistics();
  createFilterCriteria();
  StoredDataStatistics[][] stats=new StoredDataStatistics[3][filterCriteria.length];
  for (int i=0; i < stats.length; i++)   for (int j=0; j < stats[i].length; j++)   stats[i][j]=new StoredDataStatistics();
  final double nmPerPixel=simulationParameters.a;
  final boolean mle=fitConfig.getFitSolver() == FitSolver.MLE;
  double tp=0, fp=0;
  int failcTP=0, failcFP=0;
  int cTP=0, cFP=0;
  int[] status=null;
  status=new int[FitStatus.values().length];
  for (  FilterCandidates result : filterCandidates.values()) {
    tp+=result.tp;
    fp+=result.fp;
    for (int i=0; i < result.fitResult.length; i++) {
      if (result.spots[i].match)       cTP++;
 else       cFP++;
      final FitResult fitResult=result.fitResult[i];
      if (fitResult.getStatus() != FitStatus.OK) {
        if (status != null)         status[result.fitResult[i].getStatus().ordinal()]++;
        if (result.spots[i].match)         failcTP++;
 else         failcFP++;
        stats[0][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[0][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
      }
 else {
        final double[] p=fitResult.getParameters();
        final double[] initialParams=fitResult.getInitialParameters();
        final double s0=(p[Gaussian2DFunction.X_SD] + p[Gaussian2DFunction.Y_SD]) * 0.5;
        final double s=s0 * nmPerPixel;
        final double N=p[Gaussian2DFunction.SIGNAL] / simulationParameters.gain;
        final double b2=Math.max(0,(p[Gaussian2DFunction.BACKGROUND] - simulationParameters.bias) / simulationParameters.gain);
        double precision;
        if (mle)         precision=PeakResult.getMLPrecisionX(nmPerPixel,s,N,b2,simulationParameters.emCCD);
 else         precision=PeakResult.getPrecisionX(nmPerPixel,s,N,b2,simulationParameters.emCCD);
        final double signal=p[Gaussian2DFunction.SIGNAL] / simulationParameters.gain;
        final double snr=p[Gaussian2DFunction.SIGNAL] / result.noise;
        final double width=s0 / fitConfig.getInitialPeakStdDev0();
        final double xShift=p[Gaussian2DFunction.X_POSITION] - initialParams[Gaussian2DFunction.X_POSITION];
        final double yShift=p[Gaussian2DFunction.Y_POSITION] - initialParams[Gaussian2DFunction.Y_POSITION];
        double shift=((Math.abs(xShift) > Math.abs(yShift)) ? xShift : yShift) / fitConfig.getInitialPeakStdDev0();
        shift=Math.abs(shift);
        final double eshift=Math.sqrt(xShift * xShift + yShift * yShift);
        stats[0][FILTER_SIGNAL].add(signal);
        stats[0][FILTER_SNR].add(snr);
        if (width < 1)         stats[0][FILTER_MIN_WIDTH].add(width);
 else         stats[0][FILTER_MAX_WIDTH].add(width);
        stats[0][FILTER_SHIFT].add(shift);
        stats[0][FILTER_ESHIFT].add(eshift);
        stats[0][FILTER_PRECISION].add(precision);
        stats[0][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[0][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
        final int index=(result.fitMatch[i]) ? 1 : 2;
        stats[index][FILTER_SIGNAL].add(signal);
        stats[index][FILTER_SNR].add(snr);
        if (width < 1)         stats[index][FILTER_MIN_WIDTH].add(width);
 else         stats[index][FILTER_MAX_WIDTH].add(width);
        stats[index][FILTER_SHIFT].add(shift);
        stats[index][FILTER_ESHIFT].add(eshift);
        stats[index][FILTER_PRECISION].add(precision);
        stats[index][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[index][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
      }
    }
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      distanceStats.add(fitMatch.d * nmPerPixel);
      depthStats.add(fitMatch.z * nmPerPixel);
    }
  }
  double[] i1=new double[depthStats.getN()];
  double[] i2=new double[i1.length];
  double[] is=new double[i1.length];
  int ci=0;
  for (  FilterCandidates result : filterCandidates.values()) {
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      ScoredSpot spot=result.spots[i];
      i1[ci]=fitMatch.predictedSignal;
      i2[ci]=fitMatch.actualSignal;
      is[ci]=spot.intensity;
      ci++;
    }
  }
  if (status != null) {
    for (int i=0; i < status.length; i++) {
      if (status[i] != 0)       System.out.printf(""String_Node_Str"",FitStatus.values()[i].toString(),status[i]);
    }
  }
  StringBuilder sb=new StringBuilder();
  final double signal=simulationParameters.signalPerFrame;
  final int n=results.size();
  sb.append(imp.getStackSize()).append(""String_Node_Str"");
  final int w=imp.getWidth();
  final int h=imp.getHeight();
  sb.append(w).append(""String_Node_Str"");
  sb.append(h).append(""String_Node_Str"");
  sb.append(n).append(""String_Node_Str"");
  double density=((double)n / imp.getStackSize()) / (w * h) / (simulationParameters.a * simulationParameters.a / 1e6);
  sb.append(Utils.rounded(density)).append(""String_Node_Str"");
  sb.append(Utils.rounded(signal)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.a)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.depth)).append(""String_Node_Str"");
  sb.append(simulationParameters.fixedDepth).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.gain)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.readNoise)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b2)).append(""String_Node_Str"");
  double noise=simulationParameters.b2;
  if (simulationParameters.emCCD) {
    final double readVariance=noise - simulationParameters.b;
    noise=simulationParameters.b * 2 + readVariance;
  }
  if (simulationParameters.fullSimulation) {
  }
  sb.append(Utils.rounded(signal / Math.sqrt(noise))).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s / simulationParameters.a)).append(""String_Node_Str"");
  sb.append(spotFilter.getDescription());
  addCount(sb,nP + nN);
  addCount(sb,nP);
  addCount(sb,nN);
  addCount(sb,fP);
  addCount(sb,fN);
  String name=PeakFit.getSolverName(fitConfig);
  if (fitConfig.getFitSolver() == FitSolver.MLE && fitConfig.isModelCamera())   name+=""String_Node_Str"";
  add(sb,name);
  add(sb,config.getFitting());
  resultPrefix=sb.toString();
  add(sb,(100.0 * cTP) / nP);
  add(sb,(100.0 * cFP) / nN);
  add(sb,cTP + cFP);
  add(sb,cTP);
  add(sb,cFP);
  FractionClassificationResult m=new FractionClassificationResult(cTP,cFP,0,simulationParameters.molecules - cTP);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  add(sb,failcTP);
  add(sb,failcFP);
  add(sb,tp);
  add(sb,fp);
  m=new FractionClassificationResult(tp,fp,0,simulationParameters.molecules - tp);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  add(sb,tp);
  m=new FractionClassificationResult(tp,0,0,simulationParameters.molecules - tp);
  add(sb,m.getRecall());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  double median=distanceStats.getMedian();
  add(sb,median);
  WindowOrganiser wo=new WindowOrganiser();
  String label=String.format(""String_Node_Str"",Utils.rounded(m.getRecall()),distanceStats.getN(),Utils.rounded(median),Utils.rounded(distanceStats.getStandardDeviation()));
  int id=Utils.showHistogram(TITLE,distanceStats,""String_Node_Str"",0,0,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  median=depthStats.getMedian();
  add(sb,median);
  int[] indices=Utils.newArray(i1.length,0,1);
  if (showCorrelation)   Sort.sort(indices,is,rankByIntensity);
  double[] r=(showCorrelation) ? new double[i1.length] : null;
  double[] sr=(showCorrelation) ? new double[i1.length] : null;
  double[] rank=(showCorrelation) ? new double[i1.length] : null;
  ci=0;
  FastCorrelator fastCorrelator=new FastCorrelator();
  ArrayList<Ranking> pc1=new ArrayList<Ranking>();
  ArrayList<Ranking> pc2=new ArrayList<Ranking>();
  for (  int ci2 : indices) {
    fastCorrelator.add((long)Math.round(i1[ci2]),(long)Math.round(i2[ci2]));
    pc1.add(new Ranking(i1[ci2],ci));
    pc2.add(new Ranking(i2[ci2],ci));
    if (showCorrelation) {
      r[ci]=fastCorrelator.getCorrelation();
      sr[ci]=Correlator.correlation(rank(pc1),rank(pc2));
      if (rankByIntensity)       rank[ci]=is[0] - is[ci];
 else       rank[ci]=ci;
      ci++;
    }
  }
  final double pearsonCorr=fastCorrelator.getCorrelation();
  final double rankedCorr=Correlator.correlation(rank(pc1),rank(pc2));
  SimpleRegression regression=new SimpleRegression(false);
  for (int i=0; i < pc1.size(); i++)   regression.addData(pc1.get(i).value,pc2.get(i).value);
  final double slope=regression.getSlope();
  if (showCorrelation) {
    String title=TITLE + ""String_Node_Str"";
    Plot plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] limits1=Maths.limits(i1);
    double[] limits2=Maths.limits(i2);
    plot.setLimits(limits1[0],limits1[1],limits2[0],limits2[1]);
    label=String.format(""String_Node_Str"",Utils.rounded(pearsonCorr),Utils.rounded(rankedCorr),Utils.rounded(slope));
    plot.addLabel(0,0,label);
    plot.setColor(Color.red);
    plot.addPoints(i1,i2,Plot.DOT);
    if (slope > 1)     plot.drawLine(limits1[0],limits1[0] * slope,limits1[1],limits1[1] * slope);
 else     plot.drawLine(limits2[0] / slope,limits2[0],limits2[1] / slope,limits2[1]);
    PlotWindow pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
    title=TITLE + ""String_Node_Str"";
    plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] xlimits=Maths.limits(rank);
    double[] ylimits=Maths.limits(r);
    ylimits=Maths.limits(ylimits,sr);
    plot.setLimits(xlimits[0],xlimits[1],ylimits[0],ylimits[1]);
    plot.setColor(Color.red);
    plot.addPoints(rank,r,Plot.LINE);
    plot.setColor(Color.blue);
    plot.addPoints(rank,sr,Plot.LINE);
    plot.setColor(Color.black);
    plot.addLabel(0,0,label);
    pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
  }
  add(sb,pearsonCorr);
  add(sb,rankedCorr);
  add(sb,slope);
  label=String.format(""String_Node_Str"",depthStats.getN(),Utils.rounded(median));
  id=Utils.showHistogram(TITLE,depthStats,""String_Node_Str"",0,1,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  double[] lower=new double[filterCriteria.length];
  double[] upper=new double[lower.length];
  for (int i=0; i < stats[0].length; i++) {
    double[] limits=showDoubleHistogram(stats,i,wo);
    lower[i]=limits[0];
    upper[i]=limits[1];
  }
  upper[FILTER_SIGNAL]*=2;
  upper[FILTER_SNR]*=2;
  lower[FILTER_PRECISION]*=0.5;
  double factor=0.25;
  if (lower[FILTER_MIN_WIDTH] != 0)   upper[FILTER_MIN_WIDTH]=1 - Math.max(0,factor * (1 - lower[FILTER_MIN_WIDTH]));
  if (upper[FILTER_MIN_WIDTH] != 0)   lower[FILTER_MAX_WIDTH]=1 + Math.max(0,factor * (upper[FILTER_MAX_WIDTH] - 1));
  double[] increment=new double[lower.length];
  for (int i=0; i < increment.length; i++)   increment[i]=(upper[i] - lower[i]) / 10;
  increment[FILTER_SIGNAL]=Double.POSITIVE_INFINITY;
  increment[FILTER_ESHIFT]=Double.POSITIVE_INFINITY;
  for (int i=0; i < stats[0].length; i++) {
    lower[i]=Maths.round(lower[i]);
    upper[i]=Maths.round(upper[i]);
    increment[i]=Maths.round(increment[i]);
    sb.append(""String_Node_Str"").append(lower[i]).append('-').append(upper[i]);
  }
  wo.tile();
  summaryTable.append(sb.toString());
  if (saveFilterRange) {
    GlobalSettings gs=SettingsManager.loadSettings();
    FilterSettings filterSettings=gs.getFilterSettings();
    String filename=Utils.getFilename(""String_Node_Str"",filterSettings.filterSetFilename);
    if (filename == null)     return;
    filename=Utils.replaceExtension(filename,""String_Node_Str"");
    filterSettings.filterSetFilename=filename;
    ArrayList<Filter> filters=new ArrayList<Filter>(3);
    filters.add(new MultiFilter2(lower[0],(float)lower[1],lower[2],lower[3],lower[4],lower[5],lower[6]));
    filters.add(new MultiFilter2(upper[0],(float)upper[1],upper[2],upper[3],upper[4],upper[5],upper[6]));
    filters.add(new MultiFilter2(increment[0],(float)increment[1],increment[2],increment[3],increment[4],increment[5],increment[6]));
    ArrayList<FilterSet> filterList=new ArrayList<FilterSet>(1);
    filterList.add(new FilterSet(""String_Node_Str"",filters));
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(filename);
      XStreamWrapper.getInstance().toXML(filterList,fos);
      SettingsManager.saveSettings(gs);
    }
 catch (    Exception e) {
      IJ.log(""String_Node_Str"" + e.getMessage());
    }
 finally {
      if (fos != null) {
        try {
          fos.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}","private void summariseResults(HashMap<Integer,FilterCandidates> filterCandidates){
  createTable();
  StoredDataStatistics distanceStats=new StoredDataStatistics();
  StoredDataStatistics depthStats=new StoredDataStatistics();
  createFilterCriteria();
  StoredDataStatistics[][] stats=new StoredDataStatistics[3][filterCriteria.length];
  for (int i=0; i < stats.length; i++)   for (int j=0; j < stats[i].length; j++)   stats[i][j]=new StoredDataStatistics();
  final double nmPerPixel=simulationParameters.a;
  final boolean mle=fitConfig.getFitSolver() == FitSolver.MLE;
  double tp=0, fp=0;
  int failcTP=0, failcFP=0;
  int cTP=0, cFP=0;
  int[] status=null;
  status=new int[FitStatus.values().length];
  for (  FilterCandidates result : filterCandidates.values()) {
    tp+=result.tp;
    fp+=result.fp;
    for (int i=0; i < result.fitResult.length; i++) {
      if (result.spots[i].match)       cTP++;
 else       cFP++;
      final FitResult fitResult=result.fitResult[i];
      if (fitResult.getStatus() != FitStatus.OK) {
        if (status != null)         status[result.fitResult[i].getStatus().ordinal()]++;
        if (result.spots[i].match)         failcTP++;
 else         failcFP++;
        stats[0][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[0][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
      }
 else {
        final double[] p=fitResult.getParameters();
        final double[] initialParams=fitResult.getInitialParameters();
        final double s0=(p[Gaussian2DFunction.X_SD] + p[Gaussian2DFunction.Y_SD]) * 0.5;
        final double s=s0 * nmPerPixel;
        final double N=p[Gaussian2DFunction.SIGNAL] / simulationParameters.gain;
        final double b2=Math.max(0,(p[Gaussian2DFunction.BACKGROUND] - simulationParameters.bias) / simulationParameters.gain);
        double precision;
        if (mle)         precision=PeakResult.getMLPrecisionX(nmPerPixel,s,N,b2,simulationParameters.emCCD);
 else         precision=PeakResult.getPrecisionX(nmPerPixel,s,N,b2,simulationParameters.emCCD);
        final double signal=p[Gaussian2DFunction.SIGNAL] / simulationParameters.gain;
        final double snr=p[Gaussian2DFunction.SIGNAL] / result.noise;
        final double width=s0 / fitConfig.getInitialPeakStdDev0();
        final double xShift=p[Gaussian2DFunction.X_POSITION] - initialParams[Gaussian2DFunction.X_POSITION];
        final double yShift=p[Gaussian2DFunction.Y_POSITION] - initialParams[Gaussian2DFunction.Y_POSITION];
        double shift=((Math.abs(xShift) > Math.abs(yShift)) ? xShift : yShift) / fitConfig.getInitialPeakStdDev0();
        shift=Math.abs(shift);
        final double eshift=Math.sqrt(xShift * xShift + yShift * yShift);
        stats[0][FILTER_SIGNAL].add(signal);
        stats[0][FILTER_SNR].add(snr);
        if (width < 1)         stats[0][FILTER_MIN_WIDTH].add(width);
 else         stats[0][FILTER_MAX_WIDTH].add(width);
        stats[0][FILTER_SHIFT].add(shift);
        stats[0][FILTER_ESHIFT].add(eshift);
        stats[0][FILTER_PRECISION].add(precision);
        stats[0][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[0][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
        final int index=(result.fitMatch[i]) ? 1 : 2;
        stats[index][FILTER_SIGNAL].add(signal);
        stats[index][FILTER_SNR].add(snr);
        if (width < 1)         stats[index][FILTER_MIN_WIDTH].add(width);
 else         stats[index][FILTER_MAX_WIDTH].add(width);
        stats[index][FILTER_SHIFT].add(shift);
        stats[index][FILTER_ESHIFT].add(eshift);
        stats[index][FILTER_PRECISION].add(precision);
        stats[index][FILTER_ITERATIONS].add(fitResult.getIterations());
        stats[index][FILTER_EVALUATIONS].add(fitResult.getEvaluations());
      }
    }
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      distanceStats.add(fitMatch.d * nmPerPixel);
      depthStats.add(fitMatch.z * nmPerPixel);
    }
  }
  double[] i1=new double[depthStats.getN()];
  double[] i2=new double[i1.length];
  double[] is=new double[i1.length];
  int ci=0;
  for (  FilterCandidates result : filterCandidates.values()) {
    for (int i=0; i < result.match.length; i++) {
      if (!result.match[i].isFitResult())       continue;
      FitMatch fitMatch=(FitMatch)result.match[i];
      ScoredSpot spot=result.spots[i];
      i1[ci]=fitMatch.predictedSignal;
      i2[ci]=fitMatch.actualSignal;
      is[ci]=spot.intensity;
      ci++;
    }
  }
  if (status != null) {
    for (int i=0; i < status.length; i++) {
      if (status[i] != 0)       System.out.printf(""String_Node_Str"",FitStatus.values()[i].toString(),status[i]);
    }
  }
  StringBuilder sb=new StringBuilder();
  final double signal=simulationParameters.signalPerFrame;
  final int n=results.size();
  sb.append(imp.getStackSize()).append(""String_Node_Str"");
  final int w=imp.getWidth();
  final int h=imp.getHeight();
  sb.append(w).append(""String_Node_Str"");
  sb.append(h).append(""String_Node_Str"");
  sb.append(n).append(""String_Node_Str"");
  double density=((double)n / imp.getStackSize()) / (w * h) / (simulationParameters.a * simulationParameters.a / 1e6);
  sb.append(Utils.rounded(density)).append(""String_Node_Str"");
  sb.append(Utils.rounded(signal)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.a)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.depth)).append(""String_Node_Str"");
  sb.append(simulationParameters.fixedDepth).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.gain)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.readNoise)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b2)).append(""String_Node_Str"");
  double noise=simulationParameters.b2;
  if (simulationParameters.emCCD) {
    final double readVariance=noise - simulationParameters.b;
    noise=simulationParameters.b * 2 + readVariance;
  }
  if (simulationParameters.fullSimulation) {
  }
  sb.append(Utils.rounded(signal / Math.sqrt(noise))).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s / simulationParameters.a)).append(""String_Node_Str"");
  sb.append(spotFilter.getDescription());
  addCount(sb,nP + nN);
  addCount(sb,nP);
  addCount(sb,nN);
  addCount(sb,fP);
  addCount(sb,fN);
  String name=PeakFit.getSolverName(fitConfig);
  if (fitConfig.getFitSolver() == FitSolver.MLE && fitConfig.isModelCamera())   name+=""String_Node_Str"";
  add(sb,name);
  add(sb,config.getFitting());
  resultPrefix=sb.toString();
  add(sb,(100.0 * cTP) / nP);
  add(sb,(100.0 * cFP) / nN);
  add(sb,cTP + cFP);
  add(sb,cTP);
  add(sb,cFP);
  FractionClassificationResult m=new FractionClassificationResult(cTP,cFP,0,simulationParameters.molecules - cTP);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  add(sb,failcTP);
  add(sb,failcFP);
  add(sb,tp);
  add(sb,fp);
  m=new FractionClassificationResult(tp,fp,0,simulationParameters.molecules - tp);
  add(sb,m.getRecall());
  add(sb,m.getPrecision());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  add(sb,tp);
  m=new FractionClassificationResult(tp,0,0,simulationParameters.molecules - tp);
  add(sb,m.getRecall());
  add(sb,m.getF1Score());
  add(sb,m.getJaccard());
  double median=distanceStats.getMedian();
  add(sb,median);
  WindowOrganiser wo=new WindowOrganiser();
  String label=String.format(""String_Node_Str"",Utils.rounded(m.getRecall()),distanceStats.getN(),Utils.rounded(median),Utils.rounded(distanceStats.getStandardDeviation()));
  int id=Utils.showHistogram(TITLE,distanceStats,""String_Node_Str"",0,0,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  median=depthStats.getMedian();
  add(sb,median);
  int[] indices=Utils.newArray(i1.length,0,1);
  if (showCorrelation)   Sort.sort(indices,is,rankByIntensity);
  double[] r=(showCorrelation) ? new double[i1.length] : null;
  double[] sr=(showCorrelation) ? new double[i1.length] : null;
  double[] rank=(showCorrelation) ? new double[i1.length] : null;
  ci=0;
  FastCorrelator fastCorrelator=new FastCorrelator();
  ArrayList<Ranking> pc1=new ArrayList<Ranking>();
  ArrayList<Ranking> pc2=new ArrayList<Ranking>();
  for (  int ci2 : indices) {
    fastCorrelator.add((long)Math.round(i1[ci2]),(long)Math.round(i2[ci2]));
    pc1.add(new Ranking(i1[ci2],ci));
    pc2.add(new Ranking(i2[ci2],ci));
    if (showCorrelation) {
      r[ci]=fastCorrelator.getCorrelation();
      sr[ci]=Correlator.correlation(rank(pc1),rank(pc2));
      if (rankByIntensity)       rank[ci]=is[0] - is[ci];
 else       rank[ci]=ci;
    }
    ci++;
  }
  final double pearsonCorr=fastCorrelator.getCorrelation();
  final double rankedCorr=Correlator.correlation(rank(pc1),rank(pc2));
  SimpleRegression regression=new SimpleRegression(false);
  for (int i=0; i < pc1.size(); i++)   regression.addData(pc1.get(i).value,pc2.get(i).value);
  final double slope=regression.getSlope();
  if (showCorrelation) {
    String title=TITLE + ""String_Node_Str"";
    Plot plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] limits1=Maths.limits(i1);
    double[] limits2=Maths.limits(i2);
    plot.setLimits(limits1[0],limits1[1],limits2[0],limits2[1]);
    label=String.format(""String_Node_Str"",Utils.rounded(pearsonCorr),Utils.rounded(rankedCorr),Utils.rounded(slope));
    plot.addLabel(0,0,label);
    plot.setColor(Color.red);
    plot.addPoints(i1,i2,Plot.DOT);
    if (slope > 1)     plot.drawLine(limits1[0],limits1[0] * slope,limits1[1],limits1[1] * slope);
 else     plot.drawLine(limits2[0] / slope,limits2[0],limits2[1] / slope,limits2[1]);
    PlotWindow pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
    title=TITLE + ""String_Node_Str"";
    plot=new Plot(title,""String_Node_Str"",""String_Node_Str"");
    double[] xlimits=Maths.limits(rank);
    double[] ylimits=Maths.limits(r);
    ylimits=Maths.limits(ylimits,sr);
    plot.setLimits(xlimits[0],xlimits[1],ylimits[0],ylimits[1]);
    plot.setColor(Color.red);
    plot.addPoints(rank,r,Plot.LINE);
    plot.setColor(Color.blue);
    plot.addPoints(rank,sr,Plot.LINE);
    plot.setColor(Color.black);
    plot.addLabel(0,0,label);
    pw=Utils.display(title,plot);
    if (Utils.isNewWindow())     wo.add(pw);
  }
  add(sb,pearsonCorr);
  add(sb,rankedCorr);
  add(sb,slope);
  label=String.format(""String_Node_Str"",depthStats.getN(),Utils.rounded(median));
  id=Utils.showHistogram(TITLE,depthStats,""String_Node_Str"",0,1,0,label);
  if (Utils.isNewWindow())   wo.add(id);
  double[] lower=new double[filterCriteria.length];
  double[] upper=new double[lower.length];
  for (int i=0; i < stats[0].length; i++) {
    double[] limits=showDoubleHistogram(stats,i,wo);
    lower[i]=limits[0];
    upper[i]=limits[1];
  }
  upper[FILTER_SIGNAL]*=2;
  upper[FILTER_SNR]*=2;
  lower[FILTER_PRECISION]*=0.5;
  double factor=0.25;
  if (lower[FILTER_MIN_WIDTH] != 0)   upper[FILTER_MIN_WIDTH]=1 - Math.max(0,factor * (1 - lower[FILTER_MIN_WIDTH]));
  if (upper[FILTER_MIN_WIDTH] != 0)   lower[FILTER_MAX_WIDTH]=1 + Math.max(0,factor * (upper[FILTER_MAX_WIDTH] - 1));
  double[] increment=new double[lower.length];
  for (int i=0; i < increment.length; i++)   increment[i]=(upper[i] - lower[i]) / 10;
  increment[FILTER_SIGNAL]=Double.POSITIVE_INFINITY;
  increment[FILTER_ESHIFT]=Double.POSITIVE_INFINITY;
  for (int i=0; i < stats[0].length; i++) {
    lower[i]=Maths.round(lower[i]);
    upper[i]=Maths.round(upper[i]);
    increment[i]=Maths.round(increment[i]);
    sb.append(""String_Node_Str"").append(lower[i]).append('-').append(upper[i]);
  }
  wo.tile();
  summaryTable.append(sb.toString());
  if (saveFilterRange) {
    GlobalSettings gs=SettingsManager.loadSettings();
    FilterSettings filterSettings=gs.getFilterSettings();
    String filename=Utils.getFilename(""String_Node_Str"",filterSettings.filterSetFilename);
    if (filename == null)     return;
    filename=Utils.replaceExtension(filename,""String_Node_Str"");
    filterSettings.filterSetFilename=filename;
    ArrayList<Filter> filters=new ArrayList<Filter>(3);
    filters.add(new MultiFilter2(lower[0],(float)lower[1],lower[2],lower[3],lower[4],lower[5],lower[6]));
    filters.add(new MultiFilter2(upper[0],(float)upper[1],upper[2],upper[3],upper[4],upper[5],upper[6]));
    filters.add(new MultiFilter2(increment[0],(float)increment[1],increment[2],increment[3],increment[4],increment[5],increment[6]));
    ArrayList<FilterSet> filterList=new ArrayList<FilterSet>(1);
    filterList.add(new FilterSet(""String_Node_Str"",filters));
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(filename);
      XStreamWrapper.getInstance().toXML(filterList,fos);
      SettingsManager.saveSettings(gs);
    }
 catch (    Exception e) {
      IJ.log(""String_Node_Str"" + e.getMessage());
    }
 finally {
      if (fos != null) {
        try {
          fos.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}",0.9996230682246512
149553,"private boolean showDialog(MemoryPeakResults results){
  GenericDialog gd=new GenericDialog(TITLE);
  gd.addHelp(About.HELP_URL);
  Calibration calibration=results.getCalibration();
  gd.addStringField(""String_Node_Str"",results.getName(),Math.max(Math.min(results.getName().length(),60),20));
  gd.addCheckbox(""String_Node_Str"",updateAll);
  gd.addNumericField(""String_Node_Str"",calibration.nmPerPixel,2);
  gd.addNumericField(""String_Node_Str"",calibration.gain,2);
  gd.addCheckbox(""String_Node_Str"",calibration.emCCD);
  gd.addNumericField(""String_Node_Str"",calibration.exposureTime,2);
  gd.addNumericField(""String_Node_Str"",calibration.bias,2);
  gd.addNumericField(""String_Node_Str"",calibration.readNoise,2);
  gd.addNumericField(""String_Node_Str"",calibration.amplification,2);
  gd.showDialog();
  if (gd.wasCanceled())   return false;
  String name=gd.getNextString();
  if (!results.getName().equals(name)) {
    results=MemoryPeakResults.removeResults(results.getName());
    if (results != null) {
      results.setName(name);
      MemoryPeakResults.addResults(results);
    }
  }
  updateAll=gd.getNextBoolean();
  if (!updateAll)   calibration=calibration.clone();
  calibration.nmPerPixel=Math.abs(gd.getNextNumber());
  calibration.gain=Math.abs(gd.getNextNumber());
  calibration.emCCD=gd.getNextBoolean();
  calibration.exposureTime=Math.abs(gd.getNextNumber());
  calibration.bias=Math.abs(gd.getNextNumber());
  calibration.readNoise=Math.abs(gd.getNextNumber());
  calibration.amplification=Math.abs(gd.getNextNumber());
  if (!updateAll)   results.setCalibration(calibration);
  return true;
}","private boolean showDialog(MemoryPeakResults results){
  GenericDialog gd=new GenericDialog(TITLE);
  gd.addHelp(About.HELP_URL);
  Calibration calibration=results.getCalibration();
  boolean newCalibration=false;
  if (calibration == null) {
    newCalibration=true;
    calibration=new Calibration();
    gd.addMessage(""String_Node_Str"");
  }
  gd.addStringField(""String_Node_Str"",results.getName(),Math.max(Math.min(results.getName().length(),60),20));
  if (!newCalibration)   gd.addCheckbox(""String_Node_Str"",updateAll);
  gd.addNumericField(""String_Node_Str"",calibration.nmPerPixel,2);
  gd.addNumericField(""String_Node_Str"",calibration.gain,2);
  gd.addCheckbox(""String_Node_Str"",calibration.emCCD);
  gd.addNumericField(""String_Node_Str"",calibration.exposureTime,2);
  gd.addNumericField(""String_Node_Str"",calibration.bias,2);
  gd.addNumericField(""String_Node_Str"",calibration.readNoise,2);
  gd.addNumericField(""String_Node_Str"",calibration.amplification,2);
  gd.showDialog();
  if (gd.wasCanceled())   return false;
  String name=gd.getNextString();
  if (!results.getName().equals(name)) {
    results=MemoryPeakResults.removeResults(results.getName());
    if (results != null) {
      results.setName(name);
      MemoryPeakResults.addResults(results);
    }
  }
  if (!newCalibration) {
    updateAll=gd.getNextBoolean();
    if (!updateAll) {
      newCalibration=true;
      calibration=calibration.clone();
    }
  }
  calibration.nmPerPixel=Math.abs(gd.getNextNumber());
  calibration.gain=Math.abs(gd.getNextNumber());
  calibration.emCCD=gd.getNextBoolean();
  calibration.exposureTime=Math.abs(gd.getNextNumber());
  calibration.bias=Math.abs(gd.getNextNumber());
  calibration.readNoise=Math.abs(gd.getNextNumber());
  calibration.amplification=Math.abs(gd.getNextNumber());
  if (newCalibration)   results.setCalibration(calibration);
  return true;
}",0.8911174785100286
149554,"public void itemStateChanged(ItemEvent e){
  if (e.getSource() instanceof Choice) {
    Choice choice=(Choice)e.getSource();
    String templateName=choice.getSelectedItem();
    GlobalSettings template=ConfigurationTemplate.getTemplate(templateName);
    if (template != null) {
      boolean custom=ConfigurationTemplate.isCustomTemplate(templateName);
      if (template.isFitEngineConfiguration()) {
        FitEngineConfiguration templateConfig=template.getFitEngineConfiguration().clone();
        if (!custom) {
          FitConfiguration templateFitConfig=templateConfig.getFitConfiguration();
          templateFitConfig.setInitialPeakStdDev0(fitConfig.getInitialPeakStdDev0());
          templateFitConfig.setInitialPeakStdDev1(fitConfig.getInitialPeakStdDev1());
          templateFitConfig.setInitialAngle(fitConfig.getInitialAngle());
          templateFitConfig.setFitFunction(fitConfig.getFitFunction());
        }
        refreshSettings(templateConfig);
      }
      if (template.isCalibration()) {
        refreshSettings(template.getCalibration().clone());
      }
      if (template.isResultsSettings()) {
        refreshSettings(template.getResultsSettings().clone());
      }
    }
  }
 else   if (e.getSource() instanceof Checkbox) {
    Checkbox cb=(Checkbox)e.getSource();
    if (cb.getState()) {
      cb.setState(false);
      PSFCalculator calculator=new PSFCalculator();
      calculatorSettings.pixelPitch=calibration.nmPerPixel / 1000.0;
      calculatorSettings.magnification=1;
      calculatorSettings.beamExpander=1;
      double sd=calculator.calculate(calculatorSettings,true);
      if (sd > 0)       textInitialPeakStdDev0.setText(Double.toString(sd));
    }
  }
}","public void itemStateChanged(ItemEvent e){
  if (e.getSource() instanceof Choice) {
    Choice choice=(Choice)e.getSource();
    String templateName=choice.getSelectedItem();
    GlobalSettings template=ConfigurationTemplate.getTemplate(templateName);
    if (template != null) {
      boolean custom=ConfigurationTemplate.isCustomTemplate(templateName);
      if (template.isFitEngineConfiguration()) {
        FitEngineConfiguration templateConfig=template.getFitEngineConfiguration().clone();
        refreshSettings(templateConfig,custom);
      }
      if (template.isCalibration()) {
        refreshSettings(template.getCalibration().clone());
      }
      if (template.isResultsSettings()) {
        refreshSettings(template.getResultsSettings().clone());
      }
    }
  }
 else   if (e.getSource() instanceof Checkbox) {
    Checkbox cb=(Checkbox)e.getSource();
    if (cb.getState()) {
      cb.setState(false);
      PSFCalculator calculator=new PSFCalculator();
      calculatorSettings.pixelPitch=calibration.nmPerPixel / 1000.0;
      calculatorSettings.magnification=1;
      calculatorSettings.beamExpander=1;
      double sd=calculator.calculate(calculatorSettings,true);
      if (sd > 0)       textInitialPeakStdDev0.setText(Double.toString(sd));
    }
  }
}",0.8521622527656721
149555,"/** 
 * @param results The results generated from running the filter (or null)
 * @param filter
 */
private MemoryPeakResults depthAnalysis(MemoryPeakResults results,Filter filter){
  if (!depthRecallAnalysis || simulationParameters.fixedDepth)   return results;
  final double[] depths=depthStats.getValues();
  final double range=simulationParameters.depth / simulationParameters.a / 2;
  double[] limits={-range,range};
  final int bins=Math.max(10,simulationParameters.molecules / 100);
  double[][] h1=Utils.calcHistogram(depths,limits[0],limits[1],bins);
  double[][] h2=Utils.calcHistogram(depthFitStats.getValues(),limits[0],limits[1],bins);
  results=filter(filter,resultsList.get(0),failCount);
  double[] depths2=new double[results.size()];
  int count=0;
  for (  PeakResult r : results.getResults()) {
    if (r.origValue != 0) {
      depths2[count]=((DepthPeakResult)r).depth;
      count++;
    }
  }
  depths2=Arrays.copyOf(depths2,count);
  double[][] h3=Utils.calcHistogram(depths2,limits[0],limits[1],bins);
  for (int i=0; i < h1[0].length; i++)   h1[0][i]*=simulationParameters.a;
  limits[0]*=simulationParameters.a;
  limits[1]*=simulationParameters.a;
  String title1=TITLE + ""String_Node_Str"";
  Plot2 plot1=new Plot2(title1,""String_Node_Str"",""String_Node_Str"");
  plot1.setLimits(limits[0],limits[1],0,Maths.max(h1[1]));
  plot1.setColor(Color.black);
  plot1.addPoints(h1[0],h1[1],Plot2.BAR);
  plot1.addLabel(0,0,""String_Node_Str"");
  plot1.setColor(Color.blue);
  plot1.addPoints(h1[0],h2[1],Plot2.BAR);
  plot1.setColor(Color.red);
  plot1.addPoints(h1[0],h3[1],Plot2.BAR);
  plot1.setColor(Color.magenta);
  PlotWindow pw1=Utils.display(title1,plot1);
  if (Utils.isNewWindow())   idList[idCount++]=pw1.getImagePlus().getID();
  final double halfBinWidth=(h1[0][1] - h1[0][0]) * 0.5;
  h1[0]=Arrays.copyOf(h1[0],h1[0].length - 1);
  h1[1]=Arrays.copyOf(h1[1],h1[0].length);
  h2[1]=Arrays.copyOf(h2[1],h1[0].length);
  h3[1]=Arrays.copyOf(h3[1],h1[0].length);
  double bandwidth=Math.max(3.0 / h1[0].length,0.15);
  LoessInterpolator loess=new LoessInterpolator(bandwidth,1);
  PolynomialSplineFunction spline1=loess.interpolate(h1[0],h1[1]);
  PolynomialSplineFunction spline2=loess.interpolate(h1[0],h2[1]);
  PolynomialSplineFunction spline3=loess.interpolate(h1[0],h3[1]);
  LinearInterpolator lin=new LinearInterpolator();
  PolynomialSplineFunction spline1b=lin.interpolate(h1[0],h1[1]);
  PolynomialSplineFunction spline2b=lin.interpolate(h1[0],h2[1]);
  PolynomialSplineFunction spline3b=lin.interpolate(h1[0],h3[1]);
  double[] points=new double[bins * 5];
  limits=Maths.limits(h1[0]);
  final double interval=(limits[1] - limits[0]) / (points.length - 1);
  double[] v=new double[points.length];
  double[] v2=new double[points.length];
  double[] v3=new double[points.length];
  for (int i=0; i < points.length - 1; i++) {
    points[i]=limits[0] + i * interval;
    v[i]=getSplineValue(spline1,spline1b,points[i]);
    v2[i]=getSplineValue(spline2,spline2b,points[i]);
    v3[i]=getSplineValue(spline3,spline3b,points[i]);
    points[i]+=halfBinWidth;
  }
  int ii=points.length - 1;
  v[ii]=getSplineValue(spline1,spline1b,limits[1]);
  v2[ii]=getSplineValue(spline2,spline2b,limits[1]);
  v3[ii]=getSplineValue(spline3,spline3b,limits[1]);
  points[ii]=limits[1] + halfBinWidth;
  for (int i=0; i < v.length; i++) {
    v2[i]=v2[i] / v[i];
    v3[i]=v3[i] / v[i];
  }
  final double halfSummaryDepth=summaryDepth * 0.5;
  String title2=TITLE + ""String_Node_Str"";
  Plot2 plot2=new Plot2(title2,""String_Node_Str"",""String_Node_Str"");
  plot2.setLimits(limits[0] + halfBinWidth,limits[1] + halfBinWidth,0,Maths.min(1,Maths.max(v2)));
  plot2.setColor(Color.black);
  plot2.addLabel(0,0,""String_Node_Str"");
  plot2.setColor(Color.blue);
  plot2.addPoints(points,v2,Plot2.LINE);
  plot2.setColor(Color.red);
  plot2.addPoints(points,v3,Plot2.LINE);
  plot2.setColor(Color.magenta);
  plot2.drawLine(-halfSummaryDepth,0,-halfSummaryDepth,getSplineValue(spline3,spline3b,-halfSummaryDepth - halfBinWidth) / getSplineValue(spline1,spline1b,-halfSummaryDepth - halfBinWidth));
  plot2.drawLine(halfSummaryDepth,0,halfSummaryDepth,getSplineValue(spline3,spline3b,halfSummaryDepth - halfBinWidth) / getSplineValue(spline1,spline1b,halfSummaryDepth - halfBinWidth));
  PlotWindow pw2=Utils.display(title2,plot2);
  if (Utils.isNewWindow())   idList[idCount++]=pw2.getImagePlus().getID();
  return results;
}","/** 
 * @param results The results generated from running the filter (or null)
 * @param filter
 */
private MemoryPeakResults depthAnalysis(MemoryPeakResults results,Filter filter){
  if (!depthRecallAnalysis || simulationParameters.fixedDepth)   return results;
  final double[] depths=depthStats.getValues();
  final double range=simulationParameters.depth / simulationParameters.a / 2;
  double[] limits={-range,range};
  final int bins=Math.max(10,simulationParameters.molecules / 100);
  double[][] h1=Utils.calcHistogram(depths,limits[0],limits[1],bins);
  double[][] h2=Utils.calcHistogram(depthFitStats.getValues(),limits[0],limits[1],bins);
  results=filter(filter,resultsList.get(0),failCount);
  double[] depths2=new double[results.size()];
  int count=0;
  for (  PeakResult r : results.getResults()) {
    if (r.origValue != 0) {
      depths2[count]=((DepthPeakResult)r).depth;
      count++;
    }
  }
  depths2=Arrays.copyOf(depths2,count);
  double[][] h3=Utils.calcHistogram(depths2,limits[0],limits[1],bins);
  for (int i=0; i < h1[0].length; i++)   h1[0][i]*=simulationParameters.a;
  limits[0]*=simulationParameters.a;
  limits[1]*=simulationParameters.a;
  String title1=TITLE + ""String_Node_Str"";
  Plot2 plot1=new Plot2(title1,""String_Node_Str"",""String_Node_Str"");
  plot1.setLimits(limits[0],limits[1],0,Maths.max(h1[1]));
  plot1.setColor(Color.black);
  plot1.addPoints(h1[0],h1[1],Plot2.BAR);
  plot1.addLabel(0,0,""String_Node_Str"");
  plot1.setColor(Color.blue);
  plot1.addPoints(h1[0],h2[1],Plot2.BAR);
  plot1.setColor(Color.red);
  plot1.addPoints(h1[0],h3[1],Plot2.BAR);
  plot1.setColor(Color.magenta);
  PlotWindow pw1=Utils.display(title1,plot1);
  if (Utils.isNewWindow())   idList[idCount++]=pw1.getImagePlus().getID();
  final double halfBinWidth=(h1[0][1] - h1[0][0]) * 0.5;
  h1[0]=Arrays.copyOf(h1[0],h1[0].length - 1);
  h1[1]=Arrays.copyOf(h1[1],h1[0].length);
  h2[1]=Arrays.copyOf(h2[1],h1[0].length);
  h3[1]=Arrays.copyOf(h3[1],h1[0].length);
  double bandwidth=Math.max(3.0 / h1[0].length,0.15);
  LoessInterpolator loess=new LoessInterpolator(bandwidth,1);
  PolynomialSplineFunction spline1=loess.interpolate(h1[0],h1[1]);
  PolynomialSplineFunction spline2=loess.interpolate(h1[0],h2[1]);
  PolynomialSplineFunction spline3=loess.interpolate(h1[0],h3[1]);
  LinearInterpolator lin=new LinearInterpolator();
  PolynomialSplineFunction spline1b=lin.interpolate(h1[0],h1[1]);
  PolynomialSplineFunction spline2b=lin.interpolate(h1[0],h2[1]);
  PolynomialSplineFunction spline3b=lin.interpolate(h1[0],h3[1]);
  double[] points=new double[bins * 5];
  limits=Maths.limits(h1[0]);
  final double interval=(limits[1] - limits[0]) / (points.length - 1);
  double[] v=new double[points.length];
  double[] v2=new double[points.length];
  double[] v3=new double[points.length];
  for (int i=0; i < points.length - 1; i++) {
    points[i]=limits[0] + i * interval;
    v[i]=getSplineValue(spline1,spline1b,points[i]);
    v2[i]=getSplineValue(spline2,spline2b,points[i]);
    v3[i]=getSplineValue(spline3,spline3b,points[i]);
    points[i]+=halfBinWidth;
  }
  int ii=points.length - 1;
  v[ii]=getSplineValue(spline1,spline1b,limits[1]);
  v2[ii]=getSplineValue(spline2,spline2b,limits[1]);
  v3[ii]=getSplineValue(spline3,spline3b,limits[1]);
  points[ii]=limits[1] + halfBinWidth;
  for (int i=0; i < v.length; i++) {
    v2[i]=v2[i] / v[i];
    v3[i]=v3[i] / v[i];
  }
  final double halfSummaryDepth=summaryDepth * 0.5;
  String title2=TITLE + ""String_Node_Str"";
  Plot2 plot2=new Plot2(title2,""String_Node_Str"",""String_Node_Str"");
  plot2.setLimits(limits[0] + halfBinWidth,limits[1] + halfBinWidth,0,Maths.min(1,Maths.max(v2)));
  plot2.setColor(Color.black);
  plot2.addLabel(0,0,""String_Node_Str"");
  plot2.setColor(Color.blue);
  plot2.addPoints(points,v2,Plot2.LINE);
  plot2.setColor(Color.red);
  plot2.addPoints(points,v3,Plot2.LINE);
  plot2.setColor(Color.magenta);
  if (-halfSummaryDepth - halfBinWidth >= limits[0]) {
    plot2.drawLine(-halfSummaryDepth,0,-halfSummaryDepth,getSplineValue(spline3,spline3b,-halfSummaryDepth - halfBinWidth) / getSplineValue(spline1,spline1b,-halfSummaryDepth - halfBinWidth));
  }
  if (halfSummaryDepth - halfBinWidth <= limits[1]) {
    plot2.drawLine(halfSummaryDepth,0,halfSummaryDepth,getSplineValue(spline3,spline3b,halfSummaryDepth - halfBinWidth) / getSplineValue(spline1,spline1b,halfSummaryDepth - halfBinWidth));
  }
  PlotWindow pw2=Utils.display(title2,plot2);
  if (Utils.isNewWindow())   idList[idCount++]=pw2.getImagePlus().getID();
  return results;
}",0.986563020544142
149556,"/** 
 * Trace localisations across frames that are the same molecule. <p> Any spot that occurred within time threshold and distance threshold of a previous spot is grouped into the same trace as that previous spot. The resulting trace is assigned a spatial position equal to the centroid position of all the spots included in the trace. <p> See Coltharp, et al. Accurate Construction of Photoactivated Localization Microscopy (PALM) Images for Quantitative Measurements (2012). PLoS One. 7(12): e51725. DOI: http://dx.doi.org/10.1371%2Fjournal.pone.0051725 <p> Note: The actual traces representing molecules can be obtained by calling   {@link #getTraces()}
 * @param distanceThreshold
 * @param timeThreshold
 * @return The number of traces
 */
public int traceMolecules(final double distanceThreshold,final int timeThreshold){
  if (timeThreshold <= 0 || distanceThreshold < 0)   return totalTraces=localisations.length;
  totalTraces=totalFiltered=0;
  dThresh2=(float)(distanceThreshold * distanceThreshold);
  dExclusion2=(distanceExclusion >= distanceThreshold) ? (float)(distanceExclusion * distanceExclusion) : 0;
  if (tracker != null)   tracker.progress(0);
  maxT=new int[localisations.length + 1];
  int[] traceIdToLocalisationsIndexMap=new int[localisations.length + 1];
  int nextIndex=index[localisations[0].t + 1];
  for (int index=0; index < nextIndex; index++) {
    localisations[index].trace=addTrace(index,traceIdToLocalisationsIndexMap,maxT);
  }
  Assignment[] assigned=new Assignment[10];
  while (nextIndex < localisations.length) {
    if (tracker != null)     tracker.progress(nextIndex,localisations.length);
    final int currentIndex=nextIndex;
    final int t=localisations[currentIndex].t;
    nextIndex=index[t + 1];
    int pastT=FastMath.max(t - timeThreshold,0);
    if (pulseInterval > 0) {
      int intervalBoundary=1 + pulseInterval * ((t - 1) / pulseInterval);
      if (pastT < intervalBoundary)       pastT=intervalBoundary;
    }
    final int pastEndIndex=endIndex[pastT];
    final int currentEndIndex=endIndex[t];
    if (pastEndIndex == currentEndIndex) {
      for (int index=currentIndex; index < nextIndex; index++) {
        localisations[index].trace=addTrace(index,traceIdToLocalisationsIndexMap,maxT);
      }
      continue;
    }
    if (assigned.length < nextIndex - currentIndex) {
      assigned=new Assignment[nextIndex - currentIndex];
    }
    int assignedToTrace=0;
    for (int index=currentIndex; index < nextIndex; index++) {
      int traceId=findForerunner(index,pastEndIndex,currentEndIndex);
      if (traceId == 0) {
        localisations[index].trace=addTrace(index,traceIdToLocalisationsIndexMap,maxT);
      }
 else {
        assigned[assignedToTrace++]=new Assignment(index,minD,traceId);
      }
    }
    if (assignedToTrace > 1) {
      int[] dualAllocation=new int[assignedToTrace];
      int[] ignore=new int[assignedToTrace];
      int ignoreCount=0;
      boolean reSort=true;
      for (int i=0; i < assignedToTrace - 1; i++) {
        if (assigned[i].distance < 0)         continue;
        if (reSort) {
          reSort=false;
          Arrays.sort(assigned,i,assignedToTrace - 1,new Comparator<Assignment>(){
            public int compare(            Assignment o1,            Assignment o2){
              if (o1.distance < o2.distance)               return -1;
              if (o1.distance > o2.distance)               return 1;
              return 0;
            }
          }
);
          if (assigned[i].distance < 0)           continue;
        }
        int dualAllocationCount=0;
        for (int j=i + 1; j < assignedToTrace; j++) {
          if (assigned[i].traceId == assigned[j].traceId)           dualAllocation[dualAllocationCount++]=j;
        }
        if (dualAllocationCount > 0) {
          ignore[ignoreCount++]=assigned[i].traceId;
          for (int a=0; a < dualAllocationCount; a++) {
            int index=assigned[dualAllocation[a]].index;
            int traceId=findAlternativeForerunner(index,pastEndIndex,currentEndIndex,ignoreCount,ignore);
            if (traceId == 0) {
              traceId=addTrace(index,traceIdToLocalisationsIndexMap,maxT);
              assigned[dualAllocation[a]].distance=-1;
            }
 else {
              reSort=true;
              assigned[dualAllocation[a]].distance=minD;
            }
            assigned[dualAllocation[a]].traceId=traceId;
          }
        }
      }
    }
    for (int i=0; i < assignedToTrace; i++) {
      localisations[assigned[i].index].trace=assigned[i].traceId;
      maxT[assigned[i].traceId]=localisations[assigned[i].index].endT;
    }
  }
  if (tracker != null)   tracker.progress(1.0);
  return getTotalTraces();
}","/** 
 * Trace localisations across frames that are the same molecule. <p> Any spot that occurred within time threshold and distance threshold of a previous spot is grouped into the same trace as that previous spot. The resulting trace is assigned a spatial position equal to the centroid position of all the spots included in the trace. <p> See Coltharp, et al. Accurate Construction of Photoactivated Localization Microscopy (PALM) Images for Quantitative Measurements (2012). PLoS One. 7(12): e51725. DOI: http://dx.doi.org/10.1371%2Fjournal.pone.0051725 <p> Note: The actual traces representing molecules can be obtained by calling   {@link #getTraces()}
 * @param distanceThreshold
 * @param timeThreshold
 * @return The number of traces
 */
public int traceMolecules(final double distanceThreshold,final int timeThreshold){
  if (timeThreshold <= 0 || distanceThreshold < 0)   return totalTraces=localisations.length;
  totalTraces=totalFiltered=0;
  dThresh2=(float)(distanceThreshold * distanceThreshold);
  dExclusion2=(distanceExclusion >= distanceThreshold) ? (float)(distanceExclusion * distanceExclusion) : 0;
  if (tracker != null)   tracker.progress(0);
  maxT=new int[localisations.length + 1];
  int[] traceIdToLocalisationsIndexMap=new int[localisations.length + 1];
  int nextIndex=index[localisations[0].t + 1];
  for (int index=0; index < nextIndex; index++) {
    localisations[index].trace=addTrace(index,traceIdToLocalisationsIndexMap,maxT);
  }
  Assignment[] assigned=new Assignment[10];
  while (nextIndex < localisations.length) {
    if (tracker != null)     tracker.progress(nextIndex,localisations.length);
    final int currentIndex=nextIndex;
    final int t=localisations[currentIndex].t;
    nextIndex=index[t + 1];
    int pastT=FastMath.max(t - timeThreshold,0);
    if (pulseInterval > 0) {
      int intervalBoundary=1 + pulseInterval * ((t - 1) / pulseInterval);
      if (pastT < intervalBoundary)       pastT=intervalBoundary;
    }
    final int pastEndIndex=endIndex[pastT];
    final int currentEndIndex=endIndex[t];
    if (pastEndIndex == currentEndIndex) {
      for (int index=currentIndex; index < nextIndex; index++) {
        localisations[index].trace=addTrace(index,traceIdToLocalisationsIndexMap,maxT);
      }
      continue;
    }
    if (assigned.length < nextIndex - currentIndex) {
      assigned=new Assignment[nextIndex - currentIndex];
    }
    int assignedToTrace=0;
    for (int index=currentIndex; index < nextIndex; index++) {
      int traceId=findForerunner(index,pastEndIndex,currentEndIndex);
      if (traceId == 0) {
        localisations[index].trace=addTrace(index,traceIdToLocalisationsIndexMap,maxT);
      }
 else {
        assigned[assignedToTrace++]=new Assignment(index,minD,traceId);
      }
    }
    if (assignedToTrace > 1) {
      int[] dualAllocation=new int[assignedToTrace];
      int[] ignore=new int[assignedToTrace];
      int ignoreCount=0;
      boolean reSort=true;
      for (int i=0; i < assignedToTrace - 1; i++) {
        if (assigned[i].distance < 0)         continue;
        if (reSort) {
          reSort=false;
          Arrays.sort(assigned,i,assignedToTrace,new Comparator<Assignment>(){
            public int compare(            Assignment o1,            Assignment o2){
              if (o1.distance < o2.distance)               return -1;
              if (o1.distance > o2.distance)               return 1;
              return 0;
            }
          }
);
          if (assigned[i].distance < 0)           continue;
        }
        int dualAllocationCount=0;
        for (int j=i + 1; j < assignedToTrace; j++) {
          if (assigned[i].traceId == assigned[j].traceId)           dualAllocation[dualAllocationCount++]=j;
        }
        ignore[ignoreCount++]=assigned[i].traceId;
        if (dualAllocationCount > 0) {
          for (int a=0; a < dualAllocationCount; a++) {
            final int j=dualAllocation[a];
            final int index=assigned[j].index;
            int traceId=findAlternativeForerunner(index,pastEndIndex,currentEndIndex,ignoreCount,ignore);
            if (traceId == 0) {
              traceId=addTrace(index,traceIdToLocalisationsIndexMap,maxT);
              assigned[j].distance=-1;
            }
 else {
              reSort=true;
              assigned[j].distance=minD;
            }
            assigned[j].traceId=traceId;
          }
        }
        assigned[i].distance=-1;
      }
    }
    for (int i=0; i < assignedToTrace; i++) {
      localisations[assigned[i].index].trace=assigned[i].traceId;
      maxT[assigned[i].traceId]=localisations[assigned[i].index].endT;
    }
  }
  if (tracker != null)   tracker.progress(1.0);
  return getTotalTraces();
}",0.9543911752227408
149557,"/** 
 * @return The traces that have been found using {@link #traceMolecules(double,int)}
 */
public Trace[] getTraces(){
  if (totalTraces == localisations.length) {
    if (filterActivationFrames) {
      ArrayList<Trace> traces=new ArrayList<Trace>();
      for (int index=0; index < totalTraces; index++) {
        PeakResult peakResult=results.getResults().get(localisations[index].id);
        if (!outsideActivationWindow(peakResult.peak))         traces.add(new Trace(peakResult));
      }
      return traces.toArray(new Trace[traces.size()]);
    }
 else {
      Trace[] traces=new Trace[localisations.length];
      for (int index=0; index < traces.length; index++)       traces[index]=new Trace(results.getResults().get(localisations[index].id));
      return traces;
    }
  }
  if (tracker != null)   tracker.progress(0);
  Trace[] traces=new Trace[getTotalTraces()];
  int n=0;
  TreeSet<Integer> processedTraces=new TreeSet<Integer>();
  for (int index=0; index < localisations.length; index++) {
    if (tracker != null && index % 256 == 0)     tracker.progress(index,localisations.length);
    final int traceId=localisations[index].trace;
    if (processedTraces.contains(traceId))     continue;
    processedTraces.add(traceId);
    if (filterActivationFrames && outsideActivationWindow(localisations[index].t))     continue;
    PeakResult peakResult=results.getResults().get(localisations[index].id);
    Trace nextTrace=new Trace(peakResult);
    final int tLimit=maxT[traceId];
    if (tLimit > localisations[index].t) {
      for (int j=index + 1; j < localisations.length; j++) {
        if (localisations[j].t > tLimit) {
          break;
        }
        if (localisations[j].trace == traceId)         nextTrace.add(results.getResults().get(localisations[j].id));
      }
    }
    traces[n++]=nextTrace;
  }
  if (tracker != null)   tracker.progress(1.0);
  return traces;
}","/** 
 * @return The traces that have been found using {@link #traceMolecules(double,int)}
 */
public Trace[] getTraces(){
  if (totalTraces == localisations.length) {
    if (filterActivationFrames) {
      ArrayList<Trace> traces=new ArrayList<Trace>();
      for (int index=0; index < totalTraces; index++) {
        PeakResult peakResult=results.getResults().get(localisations[index].id);
        if (!outsideActivationWindow(peakResult.peak))         traces.add(new Trace(peakResult));
      }
      return traces.toArray(new Trace[traces.size()]);
    }
 else {
      Trace[] traces=new Trace[localisations.length];
      for (int index=0; index < traces.length; index++)       traces[index]=new Trace(results.getResults().get(localisations[index].id));
      return traces;
    }
  }
  if (tracker != null)   tracker.progress(0);
  Trace[] traces=new Trace[getTotalTraces()];
  int n=0;
  TreeSet<Integer> processedTraces=new TreeSet<Integer>();
  for (int index=0; index < localisations.length; index++) {
    if (tracker != null && index % 256 == 0)     tracker.progress(index,localisations.length);
    final int traceId=localisations[index].trace;
    if (processedTraces.contains(traceId))     continue;
    processedTraces.add(traceId);
    if (filterActivationFrames && outsideActivationWindow(localisations[index].t))     continue;
    PeakResult peakResult=results.getResults().get(localisations[index].id);
    Trace nextTrace=new Trace(peakResult);
    nextTrace.setId(traceId);
    final int tLimit=maxT[traceId];
    if (tLimit > localisations[index].t) {
      for (int j=index + 1; j < localisations.length; j++) {
        if (localisations[j].t > tLimit) {
          break;
        }
        if (localisations[j].trace == traceId)         nextTrace.add(results.getResults().get(localisations[j].id));
      }
    }
    traces[n++]=nextTrace;
  }
  if (tracker != null)   tracker.progress(1.0);
  return traces;
}",0.9921834288692029
149558,"private void erase(float[] data,Spot spot){
  if (spot.samplePositions != null) {
    psfModel.eraseSample(data,settings.size,settings.size);
  }
 else {
    psfModel.erase(data,settings.size,settings.size,spot.psf,spot.x0min,spot.x0max,spot.x1min,spot.x1max);
  }
}","private void erase(float[] data,Spot spot){
  if (spot.samplePositions != null) {
    psfModel.eraseSample(data,settings.size,settings.size,spot.samplePositions);
  }
 else {
    psfModel.erase(data,settings.size,settings.size,spot.psf,spot.x0min,spot.x0max,spot.x1min,spot.x1max);
  }
}",0.9620253164556962
149559,"/** 
 * Save the filter set to a file prompted from the user
 * @param filterSet
 * @param setNumber
 */
private void saveFilterSet(FilterSet filterSet,int setNumber){
  stopTimer();
  String filename=Utils.getFilename(""String_Node_Str"" + setNumber,filterSetFilename);
  if (filename != null) {
    filterSetFilename=filename;
    saveFilterSet(filterSet,filename);
  }
  startTimer();
}","/** 
 * Save the filter set to a file prompted from the user
 * @param filterSet
 * @param setNumber
 */
private void saveFilterSet(FilterSet filterSet,int setNumber){
  stopTimer();
  String filename=getFilename(""String_Node_Str"" + setNumber,filterSetFilename);
  if (filename != null) {
    filterSetFilename=filename;
    saveFilterSet(filterSet,filename);
  }
  startTimer();
}",0.9921875
149560,"private static String getFilename(String title,String filename){
  filename=getFilename(title,filename);
  if (filename != null)   filename=Utils.replaceExtension(filename,""String_Node_Str"");
  return filename;
}","private static String getFilename(String title,String filename){
  filename=Utils.getFilename(title,filename);
  if (filename != null)   filename=Utils.replaceExtension(filename,""String_Node_Str"");
  return filename;
}",0.986046511627907
149561,"private void grow(SelectionStrategy selectionStrategy,Mutator mutator,Recombiner recombiner){
  if (individuals.size() >= populationSize)   return;
  ArrayList<Chromosome> newIndividuals=new ArrayList<Chromosome>(populationSize - individuals.size());
  final int minSize=Math.max(2,individuals.get(0).length());
  int target=minSize - individuals.size();
  if (target > 0) {
    int next=0;
    int fails=0;
    while (newIndividuals.size() < target && fails < failureLimit) {
      Chromosome c=mutator.mutate(individuals.get(next++ % individuals.size()));
      if (c != null && !isDuplicate(newIndividuals,c)) {
        newIndividuals.add(c);
        fails=0;
      }
 else {
        fails++;
      }
    }
    newIndividuals.addAll(individuals);
    individuals=newIndividuals;
    if (individuals.size() < 2)     return;
  }
  selectionStrategy.initialiseBreeding(individuals);
  target=populationSize - individuals.size();
  int previousSize=-1;
  int fails=0;
  while (newIndividuals.size() < target && fails < failureLimit) {
    previousSize=newIndividuals.size();
    ChromosomePair pair=selectionStrategy.next();
    Chromosome[] children=recombiner.cross(pair.c1,pair.c2);
    if (children != null && children.length != 0) {
      for (int i=0; i < children.length && newIndividuals.size() < target; i++) {
        Chromosome c=mutator.mutate(children[i]);
        if (c == null)         continue;
        if (isDuplicate(newIndividuals,c))         continue;
        newIndividuals.add(c);
      }
    }
    if (previousSize == newIndividuals.size())     fails++;
 else     fails=0;
  }
  selectionStrategy.finishBreeding();
  newIndividuals.addAll(individuals);
  individuals=newIndividuals;
}","private void grow(SelectionStrategy selectionStrategy,Mutator mutator,Recombiner recombiner){
  iteration++;
  if (tracker != null)   tracker.status(""String_Node_Str"",iteration);
  if (individuals.size() >= populationSize)   return;
  ArrayList<Chromosome> newIndividuals=new ArrayList<Chromosome>(populationSize - individuals.size());
  final int minSize=Math.max(2,individuals.get(0).length());
  int target=minSize - individuals.size();
  if (target > 0) {
    if (tracker != null)     tracker.progress(individuals.size(),populationSize);
    int next=0;
    int fails=0;
    while (newIndividuals.size() < target && fails < failureLimit) {
      Chromosome c=mutator.mutate(individuals.get(next++ % individuals.size()));
      if (c != null && !isDuplicate(newIndividuals,c)) {
        newIndividuals.add(c);
        fails=0;
        if (tracker != null)         tracker.progress(newIndividuals.size() + individuals.size(),populationSize);
      }
 else {
        fails++;
      }
    }
    newIndividuals.addAll(individuals);
    individuals=newIndividuals;
    if (individuals.size() < 2) {
      if (tracker != null)       tracker.progress(1);
      return;
    }
  }
  selectionStrategy.initialiseBreeding(individuals);
  target=populationSize - individuals.size();
  int previousSize=-1;
  int fails=0;
  while (newIndividuals.size() < target && fails < failureLimit) {
    previousSize=newIndividuals.size();
    ChromosomePair pair=selectionStrategy.next();
    Chromosome[] children=recombiner.cross(pair.c1,pair.c2);
    if (children != null && children.length != 0) {
      for (int i=0; i < children.length && newIndividuals.size() < target; i++) {
        Chromosome c=mutator.mutate(children[i]);
        if (c == null)         continue;
        if (isDuplicate(newIndividuals,c))         continue;
        newIndividuals.add(c);
      }
    }
    if (previousSize == newIndividuals.size())     fails++;
 else {
      fails=0;
      if (tracker != null)       tracker.progress(newIndividuals.size() + individuals.size(),populationSize);
    }
  }
  selectionStrategy.finishBreeding();
  newIndividuals.addAll(individuals);
  individuals=newIndividuals;
}",0.8743874129481558
149562,"/** 
 * Calculate the fitness of the population
 * @param fitnessFunction
 * @return The fittest individual
 */
private Chromosome evaluateFitness(FitnessFunction fitnessFunction){
  Chromosome best=null;
  double max=Double.NEGATIVE_INFINITY;
  ArrayList<Chromosome> subset=new ArrayList<Chromosome>(individuals.size());
  for (  Chromosome c : individuals) {
    final double f=c.getFitness();
    if (f == 0) {
      subset.add(c);
    }
 else     if (max < f) {
      max=f;
      best=c;
    }
  }
  fitnessFunction.initialise(subset);
  for (  Chromosome c : individuals) {
    final double f=fitnessFunction.fitness(c);
    c.setFitness(f);
    if (max < f) {
      max=f;
      best=c;
    }
  }
  fitnessFunction.shutdown();
  return best;
}","/** 
 * Calculate the fitness of the population
 * @param fitnessFunction
 * @return The fittest individual
 */
private Chromosome evaluateFitness(FitnessFunction fitnessFunction){
  if (tracker != null)   tracker.status(""String_Node_Str"",iteration);
  Chromosome best=null;
  double max=Double.NEGATIVE_INFINITY;
  ArrayList<Chromosome> subset=new ArrayList<Chromosome>(individuals.size());
  long count=0;
  for (  Chromosome c : individuals) {
    final double f=c.getFitness();
    if (f == 0) {
      subset.add(c);
    }
 else {
      if (tracker != null)       tracker.progress(++count,individuals.size());
      if (max < f) {
        max=f;
        best=c;
      }
    }
  }
  fitnessFunction.initialise(subset);
  for (  Chromosome c : subset) {
    final double f=fitnessFunction.fitness(c);
    c.setFitness(f);
    if (max < f) {
      max=f;
      best=c;
    }
    if (tracker != null)     tracker.progress(++count,individuals.size());
  }
  fitnessFunction.shutdown();
  return best;
}",0.6693318103940605
149563,"/** 
 * Select a subset of the population
 * @param selection The selection strategy
 */
private void select(SelectionStrategy selection){
  individuals=selection.select(individuals);
  checkSize(individuals.size());
}","/** 
 * Select a subset of the population
 * @param selection The selection strategy
 */
private void select(SelectionStrategy selection){
  if (tracker != null) {
    tracker.status(""String_Node_Str"",iteration);
  }
  individuals=selection.select(individuals);
  checkSize(individuals.size());
}",0.708171206225681
149564,"/** 
 * Evolve the population of individuals until convergence of the most fit individual in the population. <p> The population will grow until the desired population size by recombination of individual pairs chosen from the population by the selection strategy. Child sequences will be subject to mutation. The fitness of all the individuals in the new population is evaluated and convergence checked for the fittest individual. If the initial population is small (<2 or <Chromosome.length()) then mutation will be used to expand it before recombination. <p> The process of grow, evaluate, select is repeated until convergence. <p> Note: the subset of individuals selected for the next generation by the selection strategy will be unchanged (i.e. no mutation). This allows the fittest individuals to remain unchanged.
 * @param mutator
 * @param recombiner
 * @param checker
 * @throws InvalidPopulationSize if the population is less than 2 (this can occur after selection)
 * @return The best individual
 */
public Chromosome evolve(Mutator mutator,Recombiner recombiner,FitnessFunction fitnessFunction,SelectionStrategy selectionStrategy,ConvergenceChecker checker){
  grow(selectionStrategy,mutator,recombiner);
  Chromosome current=evaluateFitness(fitnessFunction);
  Chromosome previous;
  boolean converged=false;
  while (!converged) {
    previous=current;
    select(selectionStrategy);
    grow(selectionStrategy,mutator,recombiner);
    current=evaluateFitness(fitnessFunction);
    converged=checker.converged(previous,current);
  }
  return current;
}","/** 
 * Evolve the population of individuals until convergence of the most fit individual in the population. <p> The population will grow until the desired population size by recombination of individual pairs chosen from the population by the selection strategy. Child sequences will be subject to mutation. The fitness of all the individuals in the new population is evaluated and convergence checked for the fittest individual. If the initial population is small (<2 or <Chromosome.length()) then mutation will be used to expand it before recombination. <p> The process of grow, evaluate, select is repeated until convergence. <p> Note: the subset of individuals selected for the next generation by the selection strategy will be unchanged (i.e. no mutation). This allows the fittest individuals to remain unchanged.
 * @param mutator
 * @param recombiner
 * @param checker
 * @throws InvalidPopulationSize if the population is less than 2 (this can occur after selection)
 * @return The best individual
 */
public Chromosome evolve(Mutator mutator,Recombiner recombiner,FitnessFunction fitnessFunction,SelectionStrategy selectionStrategy,ConvergenceChecker checker){
  grow(selectionStrategy,mutator,recombiner);
  Chromosome current=evaluateFitness(fitnessFunction);
  Chromosome previous;
  boolean converged=false;
  while (!converged) {
    previous=current;
    select(selectionStrategy);
    grow(selectionStrategy,mutator,recombiner);
    current=evaluateFitness(fitnessFunction);
    converged=checker.converged(previous,current);
  }
  if (tracker != null)   tracker.status(""String_Node_Str"",iteration);
  return current;
}",0.969375
149565,"/** 
 * Select the top individual and then the rest using a probability set by their rank. The resulting subset will be at least size 2 (unless the input is smaller or there are not enough valid individuals (fitness above zero)).
 * @param individuals
 * @return the subset
 * @see gdsc.smlm.ga.SelectionStrategy#select(java.util.List)
 */
@Override public List<? extends Chromosome> select(List<? extends Chromosome> individuals){
  if (individuals == null || individuals.size() < 3)   return individuals;
  ArrayList<Chromosome> sorted=new ArrayList<Chromosome>(individuals.size());
  for (  Chromosome c : individuals)   if (c.getFitness() > 0)   sorted.add(c);
  if (sorted.size() < 3)   return sorted;
  ChromosomeComparator.sort(sorted);
  int size=(int)Math.round(sorted.size() * fraction);
  if (size < 2)   size=2;
  ArrayList<Chromosome> subset=new ArrayList<Chromosome>(size);
  int n=sorted.size() - 1;
  subset.add(sorted.get(0));
  long cumulative=((long)n * (n + 1l)) / 2l;
  int[] rank=new int[sorted.size()];
  for (int i=1; i < rank.length; i++)   rank[i]=n--;
  while (subset.size() < size) {
    final long previous=cumulative;
    long next=random.nextLong(1l,cumulative);
    long sum=0;
    for (int i=1; i < rank.length; i++) {
      sum+=rank[i];
      if (next <= sum) {
        subset.add(sorted.get(i));
        cumulative-=rank[i];
        rank[i]=0;
        break;
      }
    }
    if (previous == cumulative)     throw new RuntimeException(""String_Node_Str"" + subset.size() + ""String_Node_Str""+ size);
  }
  return subset;
}","/** 
 * Select the top individual and then the rest using a probability set by their rank. The resulting subset will be at least size 2 (unless the input is smaller or there are not enough valid individuals (fitness above zero)).
 * @param individuals
 * @return the subset
 * @see gdsc.smlm.ga.SelectionStrategy#select(java.util.List)
 */
@Override public List<? extends Chromosome> select(List<? extends Chromosome> individuals){
  if (individuals == null || individuals.size() < 3)   return individuals;
  ArrayList<Chromosome> sorted=new ArrayList<Chromosome>(individuals.size());
  for (  Chromosome c : individuals)   if (c.getFitness() > 0)   sorted.add(c);
  if (sorted.size() < 3)   return sorted;
  int size=(int)Math.round(sorted.size() * fraction);
  if (size < 2)   size=2;
  if (tracker != null)   tracker.progress(0,size);
  ChromosomeComparator.sort(sorted);
  ArrayList<Chromosome> subset=new ArrayList<Chromosome>(size);
  int n=sorted.size() - 1;
  subset.add(sorted.get(0));
  long cumulative=((long)n * (n + 1l)) / 2l;
  int[] rank=new int[sorted.size()];
  for (int i=1; i < rank.length; i++)   rank[i]=n--;
  while (subset.size() < size) {
    if (tracker != null)     tracker.progress(subset.size(),size);
    final long previous=cumulative;
    long next=random.nextLong(1l,cumulative);
    long sum=0;
    for (int i=1; i < rank.length; i++) {
      sum+=rank[i];
      if (next <= sum) {
        subset.add(sorted.get(i));
        cumulative-=rank[i];
        rank[i]=0;
        break;
      }
    }
    if (previous == cumulative)     throw new RuntimeException(""String_Node_Str"" + subset.size() + ""String_Node_Str""+ size);
  }
  if (tracker != null)   tracker.progress(1);
  return subset;
}",0.9010989010989012
149566,"/** 
 * Select the top individuals using the configured fraction. The resulting subset will be at least size 2 (unless the input is smaller or there are not enough valid individuals (fitness above zero)).
 * @param individuals
 * @return the subset
 * @see gdsc.smlm.ga.SelectionStrategy#select(java.util.List)
 */
@Override public List<? extends Chromosome> select(List<? extends Chromosome> individuals){
  if (individuals == null || individuals.size() < 2)   return individuals;
  ArrayList<Chromosome> subset=new ArrayList<Chromosome>();
  for (  Chromosome c : individuals)   if (c.getFitness() > 0)   subset.add(c);
  if (subset.size() < 3)   return subset;
  ChromosomeComparator.sort(subset);
  int size=(int)Math.round(subset.size() * fraction);
  if (size < 2)   size=2;
  return subset.subList(0,size);
}","/** 
 * Select the top individuals using the configured fraction. The resulting subset will be at least size 2 (unless the input is smaller or there are not enough valid individuals (fitness above zero)).
 * @param individuals
 * @return the subset
 * @see gdsc.smlm.ga.SelectionStrategy#select(java.util.List)
 */
@Override public List<? extends Chromosome> select(List<? extends Chromosome> individuals){
  if (individuals == null || individuals.size() < 2)   return individuals;
  ArrayList<Chromosome> subset=new ArrayList<Chromosome>();
  for (  Chromosome c : individuals)   if (c.getFitness() > 0)   subset.add(c);
  if (subset.size() < 3)   return subset;
  if (tracker != null)   tracker.progress(0.5);
  ChromosomeComparator.sort(subset);
  int size=(int)Math.round(subset.size() * fraction);
  if (size < 2)   size=2;
  if (tracker != null)   tracker.progress(1);
  return subset.subList(0,size);
}",0.945475638051044
149567,"@Override public void setup(MemoryPeakResults peakResults){
  ok=new HashSet<PeakResult>();
  MemoryPeakResults traceResults=new MemoryPeakResults();
  LinkedList<PeakResult> candidates=new LinkedList<PeakResult>();
  for (  PeakResult result : peakResults.getResults()) {
switch (getStatus(result)) {
case OK:
      ok.add(result);
    traceResults.add(result);
  break;
case CANDIDATE:
candidates.add(result);
traceResults.add(result);
break;
default :
break;
}
}
if (candidates.isEmpty()) {
return;
}
double distanceThreshold;
switch (searchDistanceMode) {
case 1:
distanceThreshold=searchDistance / peakResults.getNmPerPixel();
break;
case 0:
default :
distanceThreshold=getSearchDistanceUsingCandidates(peakResults,candidates);
}
if (distanceThreshold <= 0) return;
int myTimeThreshold;
switch (timeThresholdMode) {
case 1:
if (peakResults.getCalibration() != null) {
myTimeThreshold=(int)Math.round((this.timeThreshold / peakResults.getCalibration().exposureTime));
}
 else myTimeThreshold=1;
break;
case 0:
default :
myTimeThreshold=(int)this.timeThreshold;
}
if (myTimeThreshold <= 0) return;
TraceManager tm=new TraceManager(traceResults);
tm.setTraceMode(TraceMode.LATEST_FORERUNNER);
tm.traceMolecules(distanceThreshold,myTimeThreshold);
Trace[] traces=tm.getTraces();
for (Trace trace : traces) {
if (trace.size() > 1) {
boolean isOk=false;
for (PeakResult result : trace.getPoints()) {
if (ok.contains(result)) {
isOk=true;
break;
}
ok.add(result);
}
if (isOk) {
for (PeakResult result : trace.getPoints()) {
ok.add(result);
}
}
}
}
}","@Override public void setup(MemoryPeakResults peakResults){
  ok=new HashSet<PeakResult>();
  MemoryPeakResults traceResults=new MemoryPeakResults();
  LinkedList<PeakResult> candidates=new LinkedList<PeakResult>();
  for (  PeakResult result : peakResults.getResults()) {
switch (getStatus(result)) {
case OK:
      ok.add(result);
    traceResults.add(result);
  break;
case CANDIDATE:
candidates.add(result);
traceResults.add(result);
break;
default :
break;
}
}
if (candidates.isEmpty()) {
return;
}
double distanceThreshold;
switch (searchDistanceMode) {
case 1:
distanceThreshold=searchDistance / peakResults.getNmPerPixel();
break;
case 0:
default :
distanceThreshold=getSearchDistanceUsingCandidates(peakResults,candidates);
}
if (distanceThreshold <= 0) return;
int myTimeThreshold;
switch (timeThresholdMode) {
case 1:
if (peakResults.getCalibration() != null) {
myTimeThreshold=(int)Math.round((this.timeThreshold / peakResults.getCalibration().exposureTime));
}
 else myTimeThreshold=1;
break;
case 0:
default :
myTimeThreshold=(int)this.timeThreshold;
}
if (myTimeThreshold <= 0) return;
TraceManager tm=new TraceManager(traceResults);
tm.setTraceMode(TraceMode.LATEST_FORERUNNER);
tm.traceMolecules(distanceThreshold,myTimeThreshold);
Trace[] traces=tm.getTraces();
for (Trace trace : traces) {
if (trace.size() > 1) {
boolean isOk=false;
for (PeakResult result : trace.getPoints()) {
if (ok.contains(result)) {
isOk=true;
break;
}
}
if (isOk) {
for (PeakResult result : trace.getPoints()) {
ok.add(result);
}
}
}
}
}",0.9948018193632228
149568,"@Override public void setup(MemoryPeakResults peakResults){
  ok=new HashSet<PeakResult>();
  MemoryPeakResults traceResults=new MemoryPeakResults();
  LinkedList<PeakResult> candidates=new LinkedList<PeakResult>();
  for (  PeakResult result : peakResults.getResults()) {
switch (getStatus(result)) {
case OK:
      ok.add(result);
    traceResults.add(result);
  break;
case CANDIDATE:
candidates.add(result);
traceResults.add(result);
break;
default :
break;
}
}
if (candidates.isEmpty()) {
return;
}
double distanceThreshold;
switch (searchDistanceMode) {
case 1:
distanceThreshold=searchDistance / peakResults.getNmPerPixel();
break;
case 0:
default :
distanceThreshold=getSearchDistanceUsingCandidates(peakResults,candidates);
}
if (distanceThreshold <= 0) return;
int timeThreshold;
switch (searchDistanceMode) {
case 1:
if (peakResults.getCalibration() != null) {
timeThreshold=(int)Math.round((this.timeThreshold / peakResults.getCalibration().exposureTime));
}
 else timeThreshold=1;
break;
case 0:
default :
timeThreshold=(int)this.timeThreshold;
}
if (timeThreshold <= 0) return;
TraceManager tm=new TraceManager(traceResults);
tm.setTraceMode(TraceMode.LATEST_FORERUNNER);
tm.traceMolecules(distanceThreshold,timeThreshold);
Trace[] traces=tm.getTraces();
for (Trace trace : traces) {
if (trace.size() > 1) {
boolean isOk=false;
for (PeakResult result : trace.getPoints()) {
if (ok.contains(result)) {
isOk=true;
break;
}
ok.add(result);
}
if (isOk) {
for (PeakResult result : trace.getPoints()) {
ok.add(result);
}
}
}
}
}","@Override public void setup(MemoryPeakResults peakResults){
  ok=new HashSet<PeakResult>();
  MemoryPeakResults traceResults=new MemoryPeakResults();
  LinkedList<PeakResult> candidates=new LinkedList<PeakResult>();
  for (  PeakResult result : peakResults.getResults()) {
switch (getStatus(result)) {
case OK:
      ok.add(result);
    traceResults.add(result);
  break;
case CANDIDATE:
candidates.add(result);
traceResults.add(result);
break;
default :
break;
}
}
if (candidates.isEmpty()) {
return;
}
double distanceThreshold;
switch (searchDistanceMode) {
case 1:
distanceThreshold=searchDistance / peakResults.getNmPerPixel();
break;
case 0:
default :
distanceThreshold=getSearchDistanceUsingCandidates(peakResults,candidates);
}
if (distanceThreshold <= 0) return;
int myTimeThreshold;
switch (timeThresholdMode) {
case 1:
if (peakResults.getCalibration() != null) {
myTimeThreshold=(int)Math.round((this.timeThreshold / peakResults.getCalibration().exposureTime));
}
 else myTimeThreshold=1;
break;
case 0:
default :
myTimeThreshold=(int)this.timeThreshold;
}
if (myTimeThreshold <= 0) return;
TraceManager tm=new TraceManager(traceResults);
tm.setTraceMode(TraceMode.LATEST_FORERUNNER);
tm.traceMolecules(distanceThreshold,myTimeThreshold);
Trace[] traces=tm.getTraces();
for (Trace trace : traces) {
if (trace.size() > 1) {
boolean isOk=false;
for (PeakResult result : trace.getPoints()) {
if (ok.contains(result)) {
isOk=true;
break;
}
ok.add(result);
}
if (isOk) {
for (PeakResult result : trace.getPoints()) {
ok.add(result);
}
}
}
}
}",0.9834576710995784
149569,"private void grow(SelectionStrategy selectionStrategy,Mutator mutator,Recombiner recombiner){
  if (individuals.size() >= populationSize)   return;
  selectionStrategy.initialiseBreeding(individuals);
  int fails=0;
  int target=populationSize - individuals.size();
  ArrayList<Chromosome> newIndividuals=new ArrayList<Chromosome>(target);
  while (newIndividuals.size() < target && fails < failureLimit) {
    ChromosomePair pair=selectionStrategy.next();
    Chromosome[] children=recombiner.cross(pair.c1,pair.c2);
    if (children == null || children.length == 0) {
      fails++;
      continue;
    }
    for (int i=0; i < children.length && newIndividuals.size() < target; i++) {
      Chromosome c=mutator.mutate(children[i]);
      if (c == null) {
        fails++;
        continue;
      }
      if (isDuplicate(newIndividuals,c)) {
        fails++;
        continue;
      }
      newIndividuals.add(c);
    }
  }
  selectionStrategy.finishBreeding();
  newIndividuals.addAll(individuals);
  individuals=newIndividuals;
}","private void grow(SelectionStrategy selectionStrategy,Mutator mutator,Recombiner recombiner){
  if (individuals.size() >= populationSize)   return;
  selectionStrategy.initialiseBreeding(individuals);
  int fails=0;
  int target=populationSize - individuals.size();
  ArrayList<Chromosome> newIndividuals=new ArrayList<Chromosome>(target);
  int previousSize=-1;
  while (newIndividuals.size() < target && fails < failureLimit) {
    previousSize=newIndividuals.size();
    ChromosomePair pair=selectionStrategy.next();
    Chromosome[] children=recombiner.cross(pair.c1,pair.c2);
    if (children != null && children.length != 0) {
      for (int i=0; i < children.length && newIndividuals.size() < target; i++) {
        Chromosome c=mutator.mutate(children[i]);
        if (c == null)         continue;
        if (isDuplicate(newIndividuals,c))         continue;
        newIndividuals.add(c);
      }
    }
    if (previousSize == newIndividuals.size())     fails++;
 else     fails=0;
  }
  selectionStrategy.finishBreeding();
  newIndividuals.addAll(individuals);
  individuals=newIndividuals;
}",0.5639344262295082
149570,"/** 
 * Mutates the chromosome to form a new sequence. <p> The number of positions are chosen from a Poisson distribution with an average using a fraction of the total positions. The positions are then chosen randomly. Note that the same position may be chosen multiple times. The random shifts for each mutation are taken from a Gaussian using the chromosome mutation step range as the standard deviation.
 * @see gdsc.smlm.ga.Mutator#mutate(gdsc.smlm.ga.Chromosome)
 */
@Override public Chromosome mutate(Chromosome chromosome){
  final double[] sequence=chromosome.sequence().clone();
  final double mean=fraction * chromosome.length();
  if (mean > 0) {
    int count=(int)random.nextPoisson(mean);
    final double[] step, min, max;
    if (override) {
      step=stepSize;
      min=lower;
      max=upper;
    }
 else {
      step=chromosome.mutationStepRange();
      min=chromosome.lowerLimit();
      max=chromosome.upperLimit();
    }
    while (count-- > 0) {
      int i=random.nextInt(0,chromosome.length());
      sequence[i]=random.nextGaussian(sequence[i],step[i]);
      if (min != null) {
        if (sequence[i] < min[i])         sequence[i]=min[i];
      }
      if (max != null) {
        if (sequence[i] > max[i])         sequence[i]=max[i];
      }
    }
  }
  return chromosome.newChromosome(sequence);
}","/** 
 * Mutates the chromosome to form a new sequence. <p> The number of positions are chosen from a Poisson distribution with an average using a fraction of the total positions. The positions are then chosen randomly. Note that the same position may be chosen multiple times. The random shifts for each mutation are taken from a Gaussian using the chromosome mutation step range as the standard deviation.
 * @see gdsc.smlm.ga.Mutator#mutate(gdsc.smlm.ga.Chromosome)
 */
@Override public Chromosome mutate(Chromosome chromosome){
  final double[] sequence=chromosome.sequence().clone();
  final double mean=fraction * chromosome.length();
  if (mean > 0) {
    int count=(int)random.nextPoisson(mean);
    final double[] step, min, max;
    if (override) {
      step=stepSize;
      min=lower;
      max=upper;
    }
 else {
      step=chromosome.mutationStepRange();
      min=chromosome.lowerLimit();
      max=chromosome.upperLimit();
    }
    final int upper=chromosome.length() - 1;
    while (count-- > 0) {
      int i=random.nextInt(0,upper);
      sequence[i]=random.nextGaussian(sequence[i],step[i]);
      if (min != null) {
        if (sequence[i] < min[i])         sequence[i]=min[i];
      }
      if (max != null) {
        if (sequence[i] > max[i])         sequence[i]=max[i];
      }
    }
  }
  return chromosome.newChromosome(sequence);
}",0.9743399033097806
149571,"/** 
 * Select pairs randomly from the population
 * @see gdsc.smlm.ga.SelectionStrategy#next()
 */
@Override public ChromosomePair next(){
  if (individuals == null)   return null;
  int first, second;
  if (individuals.size() == 2) {
    first=0;
    second=1;
  }
 else {
    first=random.nextInt(0,individuals.size());
    second=random.nextInt(0,individuals.size());
    while (second != first)     second=random.nextInt(0,individuals.size());
  }
  return new ChromosomePair(individuals.get(first),individuals.get(second));
}","/** 
 * Select pairs randomly from the population
 * @see gdsc.smlm.ga.SelectionStrategy#next()
 */
@Override public ChromosomePair next(){
  if (individuals == null)   return null;
  int first, second;
  if (individuals.size() == 2) {
    first=0;
    second=1;
  }
 else {
    final int upper=individuals.size() - 1;
    first=random.nextInt(0,upper);
    second=random.nextInt(0,upper);
    while (second == first)     second=random.nextInt(0,upper);
  }
  return new ChromosomePair(individuals.get(first),individuals.get(second));
}",0.8922211808809747
149572,"/** 
 * Run different filtering methods on a set of labelled peak results outputting performance statistics on the success of the filter to an ImageJ table. <p> If the peak result original value is set to 1 it is considered a true peak, 0 for a false peak. Filtering is done using e.g. SNR threshold, Precision thresholds, etc. The statistics reported are shown in a table, e.g. precision, Jaccard, F-score. <p> For each filter set a plot is shown of the score verses the filter value, thus filters should be provided in ascending numerical order otherwise they are sorted.
 * @param resultsList
 * @param filterSets
 */
private void analyse(List<MemoryPeakResults> resultsList,List<FilterSet> filterSets){
  createResultsWindow();
  plots=new ArrayList<NamedPlot>(plotTopN);
  bestFilter=new HashMap<String,FilterScore>();
  bestFilterOrder=new LinkedList<String>();
  startTimer();
  IJ.showStatus(""String_Node_Str"");
  int total=countFilters(filterSets);
  int count=0;
  int setNumber=0;
  for (  FilterSet filterSet : filterSets) {
    setNumber++;
    count=run(filterSet,setNumber,resultsList,count,total);
    if (count < 0)     break;
  }
  stopTimer();
  IJ.showProgress(1);
  IJ.showStatus(""String_Node_Str"");
  if (Utils.isInterrupted())   return;
  if (bestFilter.isEmpty()) {
    IJ.log(""String_Node_Str"");
    return;
  }
  List<FilterScore> filters=new ArrayList<FilterScore>(bestFilter.values());
  if (showSummaryTable || saveBestFilter)   Collections.sort(filters);
  if (showSummaryTable) {
    createSummaryWindow();
    int n=0;
    final double range=summaryDepth / simulationParameters.a / 2;
    int np=0;
    for (    double depth : depthStats.getValues()) {
      if (Math.abs(depth) < range)       np++;
    }
    for (    FilterScore fs : filters) {
      FractionClassificationResult r=scoreFilter(fs.filter,resultsList);
      String text=createResult(fs.filter,r);
      MemoryPeakResults results=fs.filter.filter(resultsList.get(0),failCount);
      int tp=0;
      for (      PeakResult result : results.getResults()) {
        if (result.origValue != 0 && Math.abs(((DepthPeakResult)result).depth) <= range)         tp++;
      }
      text+=""String_Node_Str"" + Utils.rounded((double)tp / np);
      if (isHeadless)       IJ.log(text);
 else       summaryWindow.append(text);
      n++;
      if (summaryTopN > 0 && n >= summaryTopN)       break;
    }
    if (n > 1) {
      if (isHeadless)       IJ.log(""String_Node_Str"");
 else       summaryWindow.append(""String_Node_Str"");
    }
  }
  if (saveBestFilter)   saveFilter(filters.get(0).filter);
  showPlots();
  calculateSensitivity(resultsList);
  depthAnalysis(filters.get(0).filter);
}","/** 
 * Run different filtering methods on a set of labelled peak results outputting performance statistics on the success of the filter to an ImageJ table. <p> If the peak result original value is set to 1 it is considered a true peak, 0 for a false peak. Filtering is done using e.g. SNR threshold, Precision thresholds, etc. The statistics reported are shown in a table, e.g. precision, Jaccard, F-score. <p> For each filter set a plot is shown of the score verses the filter value, thus filters should be provided in ascending numerical order otherwise they are sorted.
 * @param resultsList
 * @param filterSets
 */
private void analyse(List<MemoryPeakResults> resultsList,List<FilterSet> filterSets){
  createResultsWindow();
  plots=new ArrayList<NamedPlot>(plotTopN);
  bestFilter=new HashMap<String,FilterScore>();
  bestFilterOrder=new LinkedList<String>();
  startTimer();
  IJ.showStatus(""String_Node_Str"");
  int total=countFilters(filterSets);
  int count=0;
  int setNumber=0;
  for (  FilterSet filterSet : filterSets) {
    setNumber++;
    if (run(filterSet,setNumber,resultsList,count,total) < 0)     break;
    count+=filterSet.size();
  }
  stopTimer();
  IJ.showProgress(1);
  IJ.showStatus(""String_Node_Str"");
  if (Utils.isInterrupted())   return;
  if (bestFilter.isEmpty()) {
    IJ.log(""String_Node_Str"");
    return;
  }
  List<FilterScore> filters=new ArrayList<FilterScore>(bestFilter.values());
  if (showSummaryTable || saveBestFilter)   Collections.sort(filters);
  if (showSummaryTable) {
    createSummaryWindow();
    int n=0;
    final double range=summaryDepth / simulationParameters.a / 2;
    int np=0;
    for (    double depth : depthStats.getValues()) {
      if (Math.abs(depth) < range)       np++;
    }
    for (    FilterScore fs : filters) {
      FractionClassificationResult r=scoreFilter(fs.filter,resultsList);
      String text=createResult(fs.filter,r);
      MemoryPeakResults results=fs.filter.filter(resultsList.get(0),failCount);
      int tp=0;
      for (      PeakResult result : results.getResults()) {
        if (result.origValue != 0 && Math.abs(((DepthPeakResult)result).depth) <= range)         tp++;
      }
      text+=""String_Node_Str"" + Utils.rounded((double)tp / np);
      if (isHeadless)       IJ.log(text);
 else       summaryWindow.append(text);
      n++;
      if (summaryTopN > 0 && n >= summaryTopN)       break;
    }
    if (n > 1) {
      if (isHeadless)       IJ.log(""String_Node_Str"");
 else       summaryWindow.append(""String_Node_Str"");
    }
  }
  if (saveBestFilter)   saveFilter(filters.get(0).filter);
  showPlots();
  calculateSensitivity(resultsList);
  depthAnalysis(filters.get(0).filter);
}",0.9668034315553896
149573,"@Override public double fitness(Chromosome chromosome){
  Filter filter=(Filter)chromosome;
  FractionClassificationResult r;
  if (ga_subset)   r=filter.fractionScoreSubset(ga_resultsListToScore,failCount,ga_tn,ga_fn);
 else   r=scoreFilter(filter,ga_resultsListToScore);
  double score=getScore(r);
  final double criteria=getCriteria(r);
  if (criteria >= minCriteria)   score+=1;
  return score;
}","@Override public double fitness(Chromosome chromosome){
  if (ga_count++ % 16 == 0) {
    IJ.showProgress(ga_count,ga_total);
  }
  Filter filter=(Filter)chromosome;
  FractionClassificationResult r;
  if (ga_subset)   r=filter.fractionScoreSubset(ga_resultsListToScore,failCount,ga_tn,ga_fn);
 else   r=scoreFilter(filter,ga_resultsListToScore);
  double score=getScore(r);
  final double criteria=getCriteria(r);
  if (criteria >= minCriteria)   score+=1;
  return score;
}",0.9155251141552512
149574,"private void updateGAStatus(){
  IJ.showStatus(ga_statusPrefix + ga_checker.getIterations());
}","private void updateGAStatus(){
  IJ.showStatus(ga_statusPrefix + ga_iteration);
}",0.9090909090909092
149575,"@Override public void shutdown(){
  List<? extends Chromosome> individuals=ga_population.getIndividuals();
  ChromosomeComparator.sort(individuals);
  Filter filter=(Filter)individuals.get(0);
  FractionClassificationResult r;
  if (ga_subset)   r=filter.fractionScoreSubset(ga_resultsListToScore,failCount,ga_tn,ga_fn);
 else   r=scoreFilter(filter,ga_resultsListToScore);
  String text=createResult(filter,r);
  gaWindow.append(text + ""String_Node_Str"" + ga_checker.getIterations());
}","@Override public void shutdown(){
  List<? extends Chromosome> individuals=ga_population.getIndividuals();
  ChromosomeComparator.sort(individuals);
  Filter filter=(Filter)individuals.get(0);
  FractionClassificationResult r;
  if (ga_subset)   r=filter.fractionScoreSubset(ga_resultsListToScore,failCount,ga_tn,ga_fn);
 else   r=scoreFilter(filter,ga_resultsListToScore);
  String text=createResult(filter,r);
  gaWindow.append(text + ""String_Node_Str"" + ga_iteration);
}",0.9666666666666668
149576,"@Override public void initialise(List<? extends Chromosome> individuals){
  updateGAStatus();
  initialiseScoring(new FilterSet(populationToFilters(individuals)));
}","@Override public void initialise(List<? extends Chromosome> individuals){
  ga_count=0;
  ga_total=individuals.size();
  ga_iteration++;
  updateGAStatus();
  initialiseScoring(new FilterSet(populationToFilters(individuals)));
}",0.8396946564885496
149577,"@Override public boolean converged(Chromosome previous,Chromosome current){
  if (IJ.escapePressed()) {
    Utils.log(""String_Node_Str"" + ga_statusPrefix);
    IJ.resetEscape();
  }
  return super.converged(previous,current);
}","@Override public boolean converged(Chromosome previous,Chromosome current){
  if (super.converged(previous,current))   count++;
 else   count=0;
  if (convergedCount >= 0 && count > convergedCount)   return true;
  if (IJ.escapePressed()) {
    Utils.log(""String_Node_Str"" + ga_statusPrefix);
    IJ.resetEscape();
    return true;
  }
  return false;
}",0.6689655172413793
149578,"public InterruptChecker(double relative,double absolute){
  super(relative,absolute);
}","public InterruptChecker(double relative,double absolute,int convergedCount){
  super(relative,absolute);
  this.convergedCount=convergedCount;
}",0.7532467532467533
149579,"/** 
 * Trace localisations
 * @param results The results
 * @param distance The distance threshold (nm)
 * @param time The time threshold (frames)
 * @param singles a list of the singles (not grouped into molecules)
 * @return a list of molecules
 */
private ArrayList<Molecule> traceMolecules(MemoryPeakResults results,double distance,int time,ArrayList<Molecule> singles){
  TraceManager tm=new TraceManager(results);
  double distanceThreshold=distance / results.getNmPerPixel();
  tm.traceMolecules(distanceThreshold,time);
  Trace[] traces=tm.getTraces();
  ArrayList<Molecule> molecules=new ArrayList<Molecule>(traces.length);
  final double nmPerPixel=results.getNmPerPixel();
  final double gain=results.getGain();
  final boolean emCCD=results.isEMCCD();
  for (  Trace t : traces) {
    double p=t.getLocalisationPrecision(nmPerPixel,gain,emCCD);
    if (t.size() == 1) {
      float[] centroid=t.getCentroid();
      singles.add(new Molecule(centroid[0] * nmPerPixel,centroid[1] * nmPerPixel,p,t.getSignal() / gain));
    }
 else {
      float[] centroid=t.getCentroid();
      molecules.add(new Molecule(centroid[0] * nmPerPixel,centroid[1] * nmPerPixel,p,t.getSignal() / gain));
    }
  }
  log(""String_Node_Str"",results.size(),molecules.size(),singles.size(),molecules.size() - singles.size(),distance,time,Utils.rounded(time * results.getCalibration().exposureTime / 1000.0));
  return molecules;
}","/** 
 * Trace localisations
 * @param results The results
 * @param distance The distance threshold (nm)
 * @param time The time threshold (frames)
 * @param singles a list of the singles (not grouped into molecules)
 * @return a list of molecules
 */
private ArrayList<Molecule> traceMolecules(MemoryPeakResults results,double distance,int time,ArrayList<Molecule> singles){
  TraceManager tm=new TraceManager(results);
  double distanceThreshold=distance / results.getNmPerPixel();
  tm.traceMolecules(distanceThreshold,time);
  Trace[] traces=tm.getTraces();
  ArrayList<Molecule> molecules=new ArrayList<Molecule>(traces.length);
  final double nmPerPixel=results.getNmPerPixel();
  final double gain=results.getGain();
  final boolean emCCD=results.isEMCCD();
  for (  Trace t : traces) {
    double p=t.getLocalisationPrecision(nmPerPixel,gain,emCCD);
    if (t.size() == 1) {
      float[] centroid=t.getCentroid();
      singles.add(new Molecule(centroid[0] * nmPerPixel,centroid[1] * nmPerPixel,p,t.getSignal() / gain));
    }
 else {
      float[] centroid=t.getCentroid();
      molecules.add(new Molecule(centroid[0] * nmPerPixel,centroid[1] * nmPerPixel,p,t.getSignal() / gain));
    }
  }
  log(""String_Node_Str"",results.size(),molecules.size() + singles.size(),singles.size(),molecules.size(),distance,time,Utils.rounded(time * results.getCalibration().exposureTime / 1000.0));
  return molecules;
}",0.99009900990099
149580,"public Worker(BlockingQueue<Integer> jobs,ImageStack stack,HashMap<Integer,ArrayList<Coordinate>> actualCoordinates,HashMap<Integer,FilterCandidates> filterCandidates){
  this.jobs=jobs;
  this.stack=stack;
  this.fitWorker=new FitWorker((FitEngineConfiguration)config.clone(),new NullPeakResults(),null);
  this.actualCoordinates=actualCoordinates;
  this.filterCandidates=filterCandidates;
  this.results=new HashMap<Integer,FilterCandidates>();
  bounds=new Rectangle(0,0,stack.getWidth(),stack.getHeight());
}","public Worker(BlockingQueue<Integer> jobs,ImageStack stack,HashMap<Integer,ArrayList<Coordinate>> actualCoordinates,HashMap<Integer,FilterCandidates> filterCandidates){
  this.jobs=jobs;
  this.stack=stack;
  this.fitWorker=new FitWorker((FitEngineConfiguration)(config.clone()),new NullPeakResults(),null);
  final int fitting=config.getRelativeFitting();
  fitWorker.setSearchParameters(spotFilter,fitting);
  this.actualCoordinates=actualCoordinates;
  this.filterCandidates=filterCandidates;
  this.results=new HashMap<Integer,FilterCandidates>();
  bounds=new Rectangle(0,0,stack.getWidth(),stack.getHeight());
}",0.8849557522123894
149581,"private void summariseResults(HashMap<Integer,FilterCandidates> filterCandidates){
  createTable();
  int tp=0, fp=0, tn=0, fn=0;
  int failP=0, failN=0;
  for (  FilterCandidates result : filterCandidates.values()) {
    tp+=result.tp;
    fp+=result.fp;
    tn+=result.tn;
    fn+=result.fn;
    for (int i=0; i < result.fitResult.length; i++) {
      if (result.fitResult[i].getStatus() != FitStatus.OK) {
        if (result.spots[i].match)         failP++;
 else         failN++;
      }
    }
  }
  ClassificationResult r=new ClassificationResult(tp,fp,tn,fn);
  StringBuilder sb=new StringBuilder();
  final double signal=(simulationParameters.minSignal + simulationParameters.maxSignal) * 0.5;
  final int n=results.size();
  sb.append(imp.getStackSize()).append(""String_Node_Str"");
  final int w=imp.getWidth();
  final int h=imp.getHeight();
  sb.append(w).append(""String_Node_Str"");
  sb.append(h).append(""String_Node_Str"");
  sb.append(n).append(""String_Node_Str"");
  double density=((double)n / imp.getStackSize()) / (w * h) / (simulationParameters.a * simulationParameters.a / 1e6);
  sb.append(Utils.rounded(density)).append(""String_Node_Str"");
  sb.append(Utils.rounded(signal)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.a)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.depth)).append(""String_Node_Str"");
  sb.append(simulationParameters.fixedDepth).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.gain)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.readNoise)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b2)).append(""String_Node_Str"");
  double noise=simulationParameters.b2;
  if (simulationParameters.emCCD) {
    final double readVariance=noise - simulationParameters.b;
    noise=simulationParameters.b * 2 + readVariance;
  }
  sb.append(Utils.rounded(signal / Math.sqrt(noise))).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s / simulationParameters.a)).append(""String_Node_Str"");
  sb.append(BenchmarkSpotFilter.filterName).append(""String_Node_Str"");
  add(sb,nP + nN);
  add(sb,nP);
  add(sb,nN);
  add(sb,PeakFit.getSolverName(config.getFitConfiguration()));
  add(sb,config.getFitting());
  add(sb,100.0 * r.getP() / nP);
  add(sb,100.0 * r.getN() / nN);
  add(sb,r.getTotal());
  add(sb,r.getP());
  add(sb,r.getN());
  add(sb,failP);
  add(sb,failN);
  add(sb,tp);
  add(sb,fp);
  add(sb,tn);
  add(sb,fn);
  add(sb,r.getTPR());
  add(sb,r.getTNR());
  add(sb,r.getPPV());
  add(sb,r.getNPV());
  add(sb,r.getFPR());
  add(sb,r.getFDR());
  add(sb,r.getAccuracy());
  add(sb,r.getFScore(1));
  add(sb,r.getJaccard());
  add(sb,r.getMCC());
  add(sb,r.getInformedness());
  add(sb,r.getMarkedness());
  summaryTable.append(sb.toString());
}","private void summariseResults(HashMap<Integer,FilterCandidates> filterCandidates){
  createTable();
  int tp=0, fp=0, tn=0, fn=0;
  int failP=0, failN=0;
  for (  FilterCandidates result : filterCandidates.values()) {
    tp+=result.tp;
    fp+=result.fp;
    tn+=result.tn;
    fn+=result.fn;
    for (int i=0; i < result.fitResult.length; i++) {
      if (result.fitResult[i].getStatus() != FitStatus.OK) {
        if (result.spots[i].match)         failP++;
 else         failN++;
      }
    }
  }
  ClassificationResult r=new ClassificationResult(tp,fp,tn,fn);
  StringBuilder sb=new StringBuilder();
  final double signal=(simulationParameters.minSignal + simulationParameters.maxSignal) * 0.5;
  final int n=results.size();
  sb.append(imp.getStackSize()).append(""String_Node_Str"");
  final int w=imp.getWidth();
  final int h=imp.getHeight();
  sb.append(w).append(""String_Node_Str"");
  sb.append(h).append(""String_Node_Str"");
  sb.append(n).append(""String_Node_Str"");
  double density=((double)n / imp.getStackSize()) / (w * h) / (simulationParameters.a * simulationParameters.a / 1e6);
  sb.append(Utils.rounded(density)).append(""String_Node_Str"");
  sb.append(Utils.rounded(signal)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.a)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.depth)).append(""String_Node_Str"");
  sb.append(simulationParameters.fixedDepth).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.gain)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.readNoise)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b)).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.b2)).append(""String_Node_Str"");
  double noise=simulationParameters.b2;
  if (simulationParameters.emCCD) {
    final double readVariance=noise - simulationParameters.b;
    noise=simulationParameters.b * 2 + readVariance;
  }
  sb.append(Utils.rounded(signal / Math.sqrt(noise))).append(""String_Node_Str"");
  sb.append(Utils.rounded(simulationParameters.s / simulationParameters.a)).append(""String_Node_Str"");
  sb.append(spotFilter.getDescription()).append(""String_Node_Str"");
  add(sb,nP + nN);
  add(sb,nP);
  add(sb,nN);
  add(sb,PeakFit.getSolverName(config.getFitConfiguration()));
  add(sb,config.getFitting());
  add(sb,100.0 * r.getP() / nP);
  add(sb,100.0 * r.getN() / nN);
  add(sb,r.getTotal());
  add(sb,r.getP());
  add(sb,r.getN());
  add(sb,failP);
  add(sb,failN);
  add(sb,tp);
  add(sb,fp);
  add(sb,tn);
  add(sb,fn);
  add(sb,r.getTPR());
  add(sb,r.getTNR());
  add(sb,r.getPPV());
  add(sb,r.getNPV());
  add(sb,r.getFPR());
  add(sb,r.getFDR());
  add(sb,r.getAccuracy());
  add(sb,r.getFScore(1));
  add(sb,r.getJaccard());
  add(sb,r.getMCC());
  add(sb,r.getInformedness());
  add(sb,r.getMarkedness());
  summaryTable.append(sb.toString());
}",0.9908226263974635
149582,"private void fitTraces(MemoryPeakResults results,Trace[] traces){
  ImageSource source=results.getSource();
  if (source == null)   return;
  if (!source.open())   return;
  FitEngineConfiguration config=(FitEngineConfiguration)XmlUtils.fromXML(results.getConfiguration());
  if (config == null)   return;
  GenericDialog gd=new GenericDialog(TITLE);
  gd.addMessage(""String_Node_Str"");
  gd.addCheckbox(""String_Node_Str"",!fitOnlyCentroid);
  gd.addSlider(""String_Node_Str"",0.01,3,distanceThreshold);
  gd.addSlider(""String_Node_Str"",1,4.5,expansionFactor);
  FitConfiguration fitConfig=config.getFitConfiguration();
  gd.addMessage(""String_Node_Str"");
  String[] filterTypes=SettingsManager.getNames((Object[])DataFilterType.values());
  gd.addChoice(""String_Node_Str"",filterTypes,filterTypes[config.getDataFilterType().ordinal()]);
  String[] filterNames=SettingsManager.getNames((Object[])DataFilter.values());
  gd.addChoice(""String_Node_Str"",filterNames,filterNames[config.getDataFilter(0).ordinal()]);
  gd.addSlider(""String_Node_Str"",0,2.5,config.getSmooth(0));
  gd.addSlider(""String_Node_Str"",0.5,2.5,config.getSearch());
  gd.addSlider(""String_Node_Str"",0.5,2.5,config.getBorder());
  gd.addSlider(""String_Node_Str"",2,4.5,config.getFitting());
  String[] solverNames=SettingsManager.getNames((Object[])FitSolver.values());
  gd.addChoice(""String_Node_Str"",solverNames,solverNames[fitConfig.getFitSolver().ordinal()]);
  String[] functionNames=SettingsManager.getNames((Object[])FitFunction.values());
  gd.addChoice(""String_Node_Str"",functionNames,functionNames[fitConfig.getFitFunction().ordinal()]);
  String[] criteriaNames=SettingsManager.getNames((Object[])FitCriteria.values());
  gd.addChoice(""String_Node_Str"",criteriaNames,criteriaNames[fitConfig.getFitCriteria().ordinal()]);
  gd.addNumericField(""String_Node_Str"",fitConfig.getSignificantDigits(),0);
  gd.addNumericField(""String_Node_Str"",fitConfig.getDelta(),4);
  gd.addNumericField(""String_Node_Str"",fitConfig.getLambda(),4);
  gd.addNumericField(""String_Node_Str"",fitConfig.getMaxIterations(),0);
  gd.addNumericField(""String_Node_Str"",config.getFailuresLimit(),0);
  gd.addCheckbox(""String_Node_Str"",config.isIncludeNeighbours());
  gd.addSlider(""String_Node_Str"",0.01,1,config.getNeighbourHeightThreshold());
  gd.addSlider(""String_Node_Str"",0.01,1,config.getResidualsThreshold());
  gd.addMessage(""String_Node_Str"");
  gd.addSlider(""String_Node_Str"",0.01,2,fitConfig.getCoordinateShiftFactor());
  gd.addNumericField(""String_Node_Str"",fitConfig.getSignalStrength(),2);
  gd.addNumericField(""String_Node_Str"",fitConfig.getMinPhotons(),0);
  gd.addSlider(""String_Node_Str"",0.01,5,fitConfig.getWidthFactor());
  gd.addNumericField(""String_Node_Str"",fitConfig.getPrecisionThreshold(),2);
  gd.addCheckbox(""String_Node_Str"",debugFailures);
  gd.showDialog();
  if (!gd.wasOKed()) {
    source.close();
    return;
  }
  fitOnlyCentroid=!gd.getNextBoolean();
  distanceThreshold=(float)gd.getNextNumber();
  expansionFactor=(float)gd.getNextNumber();
  config.setDataFilterType(gd.getNextChoiceIndex());
  config.setDataFilter(gd.getNextChoiceIndex(),Math.abs(gd.getNextNumber()),0);
  config.setSearch(gd.getNextNumber());
  config.setBorder(gd.getNextNumber());
  config.setFitting(gd.getNextNumber());
  fitConfig.setFitSolver(gd.getNextChoiceIndex());
  fitConfig.setFitFunction(gd.getNextChoiceIndex());
  fitConfig.setFitCriteria(gd.getNextChoiceIndex());
  fitConfig.setSignificantDigits((int)gd.getNextNumber());
  fitConfig.setDelta(gd.getNextNumber());
  fitConfig.setLambda(gd.getNextNumber());
  fitConfig.setMaxIterations((int)gd.getNextNumber());
  config.setFailuresLimit((int)gd.getNextNumber());
  config.setIncludeNeighbours(gd.getNextBoolean());
  config.setNeighbourHeightThreshold(gd.getNextNumber());
  config.setResidualsThreshold(gd.getNextNumber());
  fitConfig.setCoordinateShiftFactor(gd.getNextNumber());
  fitConfig.setSignalStrength(gd.getNextNumber());
  fitConfig.setMinPhotons(gd.getNextNumber());
  fitConfig.setWidthFactor(gd.getNextNumber());
  fitConfig.setPrecisionThreshold(gd.getNextNumber());
  try {
    Parameters.isAboveZero(""String_Node_Str"",distanceThreshold);
    Parameters.isAbove(""String_Node_Str"",expansionFactor,1);
    Parameters.isAboveZero(""String_Node_Str"",config.getSearch());
    Parameters.isAboveZero(""String_Node_Str"",config.getFitting());
    Parameters.isAboveZero(""String_Node_Str"",fitConfig.getSignificantDigits());
    Parameters.isAboveZero(""String_Node_Str"",fitConfig.getDelta());
    Parameters.isAboveZero(""String_Node_Str"",fitConfig.getLambda());
    Parameters.isAboveZero(""String_Node_Str"",fitConfig.getMaxIterations());
    Parameters.isAboveZero(""String_Node_Str"",config.getFailuresLimit());
    Parameters.isPositive(""String_Node_Str"",config.getNeighbourHeightThreshold());
    Parameters.isPositive(""String_Node_Str"",config.getResidualsThreshold());
    Parameters.isPositive(""String_Node_Str"",fitConfig.getCoordinateShiftFactor());
    Parameters.isPositive(""String_Node_Str"",fitConfig.getSignalStrength());
    Parameters.isPositive(""String_Node_Str"",fitConfig.getMinPhotons());
    Parameters.isPositive(""String_Node_Str"",fitConfig.getWidthFactor());
    Parameters.isPositive(""String_Node_Str"",fitConfig.getPrecisionThreshold());
  }
 catch (  IllegalArgumentException e) {
    IJ.error(TITLE,e.getMessage());
    source.close();
    return;
  }
  debugFailures=gd.getNextBoolean();
  if (!PeakFit.configureDataFilter(globalSettings,filename,false))   return;
  if (!PeakFit.configureFitSolver(globalSettings,filename,false))   return;
  config.setIncludeNeighbours(false);
  fitConfig.setDuplicateDistance(0);
  MemoryPeakResults refitResults=new MemoryPeakResults();
  refitResults.copySettings(results);
  refitResults.setName(results.getName() + ""String_Node_Str"");
  refitResults.setSortAfterEnd(true);
  refitResults.begin();
  FitEngine engine=new FitEngine(config,refitResults,Prefs.getThreads(),FitQueue.BLOCKING);
  final double stdDev=FastMath.max(fitConfig.getInitialPeakStdDev0(),fitConfig.getInitialPeakStdDev1());
  float fitWidth=(float)(stdDev * config.getFitting() * ((fitOnlyCentroid) ? 1 : expansionFactor));
  IJ.showStatus(""String_Node_Str"");
  List<JobItem> jobItems=new ArrayList<JobItem>(traces.length);
  int singles=0;
  int fitted=0;
  for (int n=0; n < traces.length; n++) {
    Trace trace=traces[n];
    if (n % 32 == 0)     IJ.showProgress(n,traces.length);
    if (trace.size() == 1) {
      singles++;
      refitResults.addSync(trace.getHead());
      continue;
    }
    Rectangle bounds=new Rectangle();
    double[] combinedNoise=new double[1];
    float[] data=buildCombinedImage(source,trace,fitWidth,bounds,combinedNoise,false);
    if (data == null)     continue;
    FitParameters params=new FitParameters();
    params.noise=(float)combinedNoise[0];
    params.background=0;
    float[] centre=trace.getCentroid();
    if (fitOnlyCentroid) {
      int newX=(int)Math.round(centre[0]) - bounds.x;
      int newY=(int)Math.round(centre[1]) - bounds.y;
      params.maxIndices=new int[]{newY * bounds.width + newX};
    }
 else {
      params.filter=new ArrayList<float[]>();
      params.filter.add(new float[]{centre[0] - bounds.x,centre[1] - bounds.y});
      params.distanceThreshold=distanceThreshold;
    }
    int startT=trace.getHead().peak;
    params.endT=trace.getTail().peak;
    ParameterisedFitJob job=new ParameterisedFitJob(n,params,startT,data,bounds);
    jobItems.add(new JobItem(job,trace,centre));
    engine.run(job);
    fitted++;
  }
  engine.end(false);
  IJ.showStatus(""String_Node_Str"");
  IJ.showProgress(1);
  FitStatus[] values=FitStatus.values();
  int[] statusCount=new int[values.length + 1];
  ArrayList<String> names=new ArrayList<String>(Arrays.asList(SettingsManager.getNames((Object[])values)));
  names.add(String.format(""String_Node_Str"",distanceThreshold));
  int separated=0;
  int success=0;
  final int debugLimit=3;
  for (  JobItem jobItem : jobItems) {
    int id=jobItem.getId();
    ParameterisedFitJob job=jobItem.job;
    Trace trace=jobItem.trace;
    int[] indices=job.getIndices();
    FitResult fitResult=null;
    int status;
    if (indices.length < 1) {
      status=values.length;
    }
 else     if (indices.length > 1) {
      for (int n=0; n < indices.length; n++) {
        if (job.getFitResult(n).getStatus() == FitStatus.OK) {
          fitResult=job.getFitResult(n);
          break;
        }
      }
      if (fitResult == null) {
        final float[] centre=traces[id].getCentroid();
        double minD=Double.POSITIVE_INFINITY;
        for (int n=0; n < indices.length; n++) {
          final double[] params=job.getFitResult(n).getInitialParameters();
          final double dx=params[Gaussian2DFunction.X_POSITION] - centre[0];
          final double dy=params[Gaussian2DFunction.X_POSITION] - centre[1];
          final double d=dx * dx + dy * dy;
          if (minD > d) {
            minD=d;
            fitResult=job.getFitResult(n);
          }
        }
      }
      status=fitResult.getStatus().ordinal();
    }
 else {
      fitResult=job.getFitResult(0);
      status=fitResult.getStatus().ordinal();
    }
    statusCount[status]++;
    if (fitResult == null || fitResult.getStatus() != FitStatus.OK) {
      refitResults.addAll(trace.getPoints());
      separated+=trace.size();
      if (debugFailures) {
        FitStatus s=(fitResult == null) ? FitStatus.UNKNOWN : fitResult.getStatus();
        double[] noise=new double[1];
        if (statusCount[status] <= debugLimit) {
          Rectangle bounds=new Rectangle();
          buildCombinedImage(source,trace,fitWidth,bounds,noise,true);
          float[] centre=trace.getCentroid();
          float[] offset=job.getFitParameters().getOffset();
          Utils.display(String.format(""String_Node_Str"",id,trace.size(),centre[0] - offset[0],centre[1] - offset[1]),slices);
switch (s) {
case INSUFFICIENT_PRECISION:
            float precision=(Float)fitResult.getStatusData();
          IJ.log(String.format(""String_Node_Str"",id,trace.size(),names.get(status),precision));
        break;
case INSUFFICIENT_SIGNAL:
      if (noise[0] == 0)       noise[0]=getCombinedNoise(trace);
    float snr=(Float)fitResult.getStatusData();
  IJ.log(String.format(""String_Node_Str"",id,trace.size(),names.get(status),snr,noise[0]));
break;
case COORDINATES_MOVED:
case WIDTH_DIVERGED:
float[] shift=(float[])fitResult.getStatusData();
IJ.log(String.format(""String_Node_Str"",id,trace.size(),names.get(status),shift[0],shift[1]));
break;
default :
IJ.log(String.format(""String_Node_Str"",id,trace.size(),names.get(status)));
break;
}
}
}
}
 else {
success++;
if (debugFailures) {
double[] noise=new double[1];
if (statusCount[status] <= debugLimit) {
Rectangle bounds=new Rectangle();
buildCombinedImage(source,trace,fitWidth,bounds,noise,true);
float[] centre=trace.getCentroid();
float[] offset=job.getFitParameters().getOffset();
Utils.display(String.format(""String_Node_Str"",id,trace.size(),centre[0] - offset[0],centre[1] - offset[1]),slices);
}
}
}
}
IJ.log(String.format(""String_Node_Str"",singles,success,fitted,separated));
if (separated > 0) {
IJ.log(""String_Node_Str"");
for (int i=1; i < statusCount.length; i++) {
if (statusCount[i] != 0) IJ.log(""String_Node_Str"" + names.get(i) + ""String_Node_Str""+ statusCount[i]);
}
}
refitResults.end();
MemoryPeakResults.addResults(refitResults);
source.close();
}","private void fitTraces(MemoryPeakResults results,Trace[] traces){
  ImageSource source=results.getSource();
  if (source == null)   return;
  if (!source.open())   return;
  FitEngineConfiguration config=(FitEngineConfiguration)XmlUtils.fromXML(results.getConfiguration());
  if (config == null)   return;
  GenericDialog gd=new GenericDialog(TITLE);
  gd.addMessage(""String_Node_Str"");
  gd.addCheckbox(""String_Node_Str"",!fitOnlyCentroid);
  gd.addSlider(""String_Node_Str"",0.01,3,distanceThreshold);
  gd.addSlider(""String_Node_Str"",1,4.5,expansionFactor);
  FitConfiguration fitConfig=config.getFitConfiguration();
  gd.addMessage(""String_Node_Str"");
  String[] filterTypes=SettingsManager.getNames((Object[])DataFilterType.values());
  gd.addChoice(""String_Node_Str"",filterTypes,filterTypes[config.getDataFilterType().ordinal()]);
  String[] filterNames=SettingsManager.getNames((Object[])DataFilter.values());
  gd.addChoice(""String_Node_Str"",filterNames,filterNames[config.getDataFilter(0).ordinal()]);
  gd.addSlider(""String_Node_Str"",0,2.5,config.getSmooth(0));
  gd.addSlider(""String_Node_Str"",0.5,2.5,config.getSearch());
  gd.addSlider(""String_Node_Str"",0.5,2.5,config.getBorder());
  gd.addSlider(""String_Node_Str"",2,4.5,config.getFitting());
  String[] solverNames=SettingsManager.getNames((Object[])FitSolver.values());
  gd.addChoice(""String_Node_Str"",solverNames,solverNames[fitConfig.getFitSolver().ordinal()]);
  String[] functionNames=SettingsManager.getNames((Object[])FitFunction.values());
  gd.addChoice(""String_Node_Str"",functionNames,functionNames[fitConfig.getFitFunction().ordinal()]);
  String[] criteriaNames=SettingsManager.getNames((Object[])FitCriteria.values());
  gd.addChoice(""String_Node_Str"",criteriaNames,criteriaNames[fitConfig.getFitCriteria().ordinal()]);
  gd.addNumericField(""String_Node_Str"",fitConfig.getSignificantDigits(),0);
  gd.addNumericField(""String_Node_Str"",fitConfig.getDelta(),4);
  gd.addNumericField(""String_Node_Str"",fitConfig.getLambda(),4);
  gd.addNumericField(""String_Node_Str"",fitConfig.getMaxIterations(),0);
  gd.addNumericField(""String_Node_Str"",config.getFailuresLimit(),0);
  gd.addCheckbox(""String_Node_Str"",config.isIncludeNeighbours());
  gd.addSlider(""String_Node_Str"",0.01,1,config.getNeighbourHeightThreshold());
  gd.addSlider(""String_Node_Str"",0.01,1,config.getResidualsThreshold());
  gd.addMessage(""String_Node_Str"");
  gd.addSlider(""String_Node_Str"",0.01,2,fitConfig.getCoordinateShiftFactor());
  gd.addNumericField(""String_Node_Str"",fitConfig.getSignalStrength(),2);
  gd.addNumericField(""String_Node_Str"",fitConfig.getMinPhotons(),0);
  gd.addSlider(""String_Node_Str"",0.01,5,fitConfig.getWidthFactor());
  gd.addNumericField(""String_Node_Str"",fitConfig.getPrecisionThreshold(),2);
  gd.addCheckbox(""String_Node_Str"",debugFailures);
  gd.showDialog();
  if (!gd.wasOKed()) {
    source.close();
    return;
  }
  fitOnlyCentroid=!gd.getNextBoolean();
  distanceThreshold=(float)gd.getNextNumber();
  expansionFactor=(float)gd.getNextNumber();
  config.setDataFilterType(gd.getNextChoiceIndex());
  config.setDataFilter(gd.getNextChoiceIndex(),Math.abs(gd.getNextNumber()),0);
  config.setSearch(gd.getNextNumber());
  config.setBorder(gd.getNextNumber());
  config.setFitting(gd.getNextNumber());
  fitConfig.setFitSolver(gd.getNextChoiceIndex());
  fitConfig.setFitFunction(gd.getNextChoiceIndex());
  fitConfig.setFitCriteria(gd.getNextChoiceIndex());
  fitConfig.setSignificantDigits((int)gd.getNextNumber());
  fitConfig.setDelta(gd.getNextNumber());
  fitConfig.setLambda(gd.getNextNumber());
  fitConfig.setMaxIterations((int)gd.getNextNumber());
  config.setFailuresLimit((int)gd.getNextNumber());
  config.setIncludeNeighbours(gd.getNextBoolean());
  config.setNeighbourHeightThreshold(gd.getNextNumber());
  config.setResidualsThreshold(gd.getNextNumber());
  fitConfig.setCoordinateShiftFactor(gd.getNextNumber());
  fitConfig.setSignalStrength(gd.getNextNumber());
  fitConfig.setMinPhotons(gd.getNextNumber());
  fitConfig.setWidthFactor(gd.getNextNumber());
  fitConfig.setPrecisionThreshold(gd.getNextNumber());
  try {
    Parameters.isAboveZero(""String_Node_Str"",distanceThreshold);
    Parameters.isAbove(""String_Node_Str"",expansionFactor,1);
    Parameters.isAboveZero(""String_Node_Str"",config.getSearch());
    Parameters.isAboveZero(""String_Node_Str"",config.getFitting());
    Parameters.isAboveZero(""String_Node_Str"",fitConfig.getSignificantDigits());
    Parameters.isAboveZero(""String_Node_Str"",fitConfig.getDelta());
    Parameters.isAboveZero(""String_Node_Str"",fitConfig.getLambda());
    Parameters.isAboveZero(""String_Node_Str"",fitConfig.getMaxIterations());
    Parameters.isAboveZero(""String_Node_Str"",config.getFailuresLimit());
    Parameters.isPositive(""String_Node_Str"",config.getNeighbourHeightThreshold());
    Parameters.isPositive(""String_Node_Str"",config.getResidualsThreshold());
    Parameters.isPositive(""String_Node_Str"",fitConfig.getCoordinateShiftFactor());
    Parameters.isPositive(""String_Node_Str"",fitConfig.getSignalStrength());
    Parameters.isPositive(""String_Node_Str"",fitConfig.getMinPhotons());
    Parameters.isPositive(""String_Node_Str"",fitConfig.getWidthFactor());
    Parameters.isPositive(""String_Node_Str"",fitConfig.getPrecisionThreshold());
  }
 catch (  IllegalArgumentException e) {
    IJ.error(TITLE,e.getMessage());
    source.close();
    return;
  }
  debugFailures=gd.getNextBoolean();
  if (!PeakFit.configureDataFilter(globalSettings,filename,false))   return;
  if (!PeakFit.configureFitSolver(globalSettings,filename,false))   return;
  config.setIncludeNeighbours(false);
  fitConfig.setDuplicateDistance(0);
  MemoryPeakResults refitResults=new MemoryPeakResults();
  refitResults.copySettings(results);
  refitResults.setName(results.getName() + ""String_Node_Str"");
  refitResults.setSortAfterEnd(true);
  refitResults.begin();
  FitEngine engine=new FitEngine(config,refitResults,Prefs.getThreads(),FitQueue.BLOCKING);
  final double stdDev=FastMath.max(fitConfig.getInitialPeakStdDev0(),fitConfig.getInitialPeakStdDev1());
  float fitWidth=(float)(stdDev * config.getFitting() * ((fitOnlyCentroid) ? 1 : expansionFactor));
  IJ.showStatus(""String_Node_Str"");
  List<JobItem> jobItems=new ArrayList<JobItem>(traces.length);
  int singles=0;
  int fitted=0;
  for (int n=0; n < traces.length; n++) {
    Trace trace=traces[n];
    if (n % 32 == 0)     IJ.showProgress(n,traces.length);
    if (trace.size() == 1) {
      singles++;
      refitResults.addSync(trace.getHead());
      continue;
    }
    Rectangle bounds=new Rectangle();
    double[] combinedNoise=new double[1];
    float[] data=buildCombinedImage(source,trace,fitWidth,bounds,combinedNoise,false);
    if (data == null)     continue;
    FitParameters params=new FitParameters();
    params.noise=(float)combinedNoise[0];
    params.background=0;
    float[] centre=trace.getCentroid();
    if (fitOnlyCentroid) {
      int newX=(int)Math.round(centre[0]) - bounds.x;
      int newY=(int)Math.round(centre[1]) - bounds.y;
      params.maxIndices=new int[]{newY * bounds.width + newX};
    }
 else {
      params.filter=new ArrayList<float[]>();
      params.filter.add(new float[]{centre[0] - bounds.x,centre[1] - bounds.y});
      params.distanceThreshold=distanceThreshold;
    }
    int startT=trace.getHead().peak;
    params.endT=trace.getTail().peak;
    ParameterisedFitJob job=new ParameterisedFitJob(n,params,startT,data,bounds);
    jobItems.add(new JobItem(job,trace,centre));
    engine.run(job);
    fitted++;
  }
  engine.end(false);
  IJ.showStatus(""String_Node_Str"");
  IJ.showProgress(1);
  FitStatus[] values=FitStatus.values();
  int[] statusCount=new int[values.length + 1];
  ArrayList<String> names=new ArrayList<String>(Arrays.asList(SettingsManager.getNames((Object[])values)));
  names.add(String.format(""String_Node_Str"",distanceThreshold));
  int separated=0;
  int success=0;
  final int debugLimit=3;
  for (  JobItem jobItem : jobItems) {
    int id=jobItem.getId();
    ParameterisedFitJob job=jobItem.job;
    Trace trace=jobItem.trace;
    int[] indices=job.getIndices();
    FitResult fitResult=null;
    int status;
    if (indices.length < 1) {
      status=values.length;
    }
 else     if (indices.length > 1) {
      for (int n=0; n < indices.length; n++) {
        if (job.getFitResult(n).getStatus() == FitStatus.OK) {
          fitResult=job.getFitResult(n);
          break;
        }
      }
      if (fitResult == null) {
        final float[] centre=traces[id].getCentroid();
        double minD=Double.POSITIVE_INFINITY;
        for (int n=0; n < indices.length; n++) {
          final double[] params=job.getFitResult(n).getInitialParameters();
          final double dx=params[Gaussian2DFunction.X_POSITION] - centre[0];
          final double dy=params[Gaussian2DFunction.Y_POSITION] - centre[1];
          final double d=dx * dx + dy * dy;
          if (minD > d) {
            minD=d;
            fitResult=job.getFitResult(n);
          }
        }
      }
      status=fitResult.getStatus().ordinal();
    }
 else {
      fitResult=job.getFitResult(0);
      status=fitResult.getStatus().ordinal();
    }
    statusCount[status]++;
    if (fitResult == null || fitResult.getStatus() != FitStatus.OK) {
      refitResults.addAll(trace.getPoints());
      separated+=trace.size();
      if (debugFailures) {
        FitStatus s=(fitResult == null) ? FitStatus.UNKNOWN : fitResult.getStatus();
        double[] noise=new double[1];
        if (statusCount[status] <= debugLimit) {
          Rectangle bounds=new Rectangle();
          buildCombinedImage(source,trace,fitWidth,bounds,noise,true);
          float[] centre=trace.getCentroid();
          float[] offset=job.getFitParameters().getOffset();
          Utils.display(String.format(""String_Node_Str"",id,trace.size(),centre[0] - offset[0],centre[1] - offset[1]),slices);
switch (s) {
case INSUFFICIENT_PRECISION:
            float precision=(Float)fitResult.getStatusData();
          IJ.log(String.format(""String_Node_Str"",id,trace.size(),names.get(status),precision));
        break;
case INSUFFICIENT_SIGNAL:
      if (noise[0] == 0)       noise[0]=getCombinedNoise(trace);
    float snr=(Float)fitResult.getStatusData();
  IJ.log(String.format(""String_Node_Str"",id,trace.size(),names.get(status),snr,noise[0]));
break;
case COORDINATES_MOVED:
case WIDTH_DIVERGED:
float[] shift=(float[])fitResult.getStatusData();
IJ.log(String.format(""String_Node_Str"",id,trace.size(),names.get(status),shift[0],shift[1]));
break;
default :
IJ.log(String.format(""String_Node_Str"",id,trace.size(),names.get(status)));
break;
}
}
}
}
 else {
success++;
if (debugFailures) {
double[] noise=new double[1];
if (statusCount[status] <= debugLimit) {
Rectangle bounds=new Rectangle();
buildCombinedImage(source,trace,fitWidth,bounds,noise,true);
float[] centre=trace.getCentroid();
float[] offset=job.getFitParameters().getOffset();
Utils.display(String.format(""String_Node_Str"",id,trace.size(),centre[0] - offset[0],centre[1] - offset[1]),slices);
}
}
}
}
IJ.log(String.format(""String_Node_Str"",singles,success,fitted,separated));
if (separated > 0) {
IJ.log(""String_Node_Str"");
for (int i=1; i < statusCount.length; i++) {
if (statusCount[i] != 0) IJ.log(""String_Node_Str"" + names.get(i) + ""String_Node_Str""+ statusCount[i]);
}
}
refitResults.end();
MemoryPeakResults.addResults(refitResults);
source.close();
}",0.9999125032811268
149583,"/** 
 * @return The function solver for the current configuration
 */
public FunctionSolver getFunctionSolver(){
  if (functionSolver == null)   functionSolver=createFitSolver();
  return functionSolver;
}","/** 
 * @return The function solver for the current configuration
 */
public FunctionSolver getFunctionSolver(){
  if (functionSolver == null)   functionSolver=createFunctionSolver();
  return functionSolver;
}",0.9783132530120482
149584,"/** 
 * Show a dialog to configure the fit solver. The updated settings are saved to the settings file. An error message is shown if the dialog is cancelled or the configuration is invalid.
 * @param settings
 * @param filename
 * @param extraOptions True if extra configuration options should be allowed
 * @return True if the configuration succeeded
 */
public static boolean configureFitSolver(GlobalSettings settings,String filename,boolean extraOptions){
  FitConfiguration fitConfig=settings.getFitEngineConfiguration().getFitConfiguration();
  Calibration calibration=settings.getCalibration();
  if (fitConfig.getFitSolver() == FitSolver.MLE) {
    GenericDialog gd=new GenericDialog(TITLE);
    gd.addMessage(""String_Node_Str"");
    gd.addNumericField(""String_Node_Str"",calibration.bias,2);
    gd.addCheckbox(""String_Node_Str"",fitConfig.isModelCamera());
    gd.addNumericField(""String_Node_Str"",calibration.readNoise,2);
    gd.addNumericField(""String_Node_Str"",calibration.gain,2);
    gd.addCheckbox(""String_Node_Str"",calibration.emCCD);
    String[] searchNames=SettingsManager.getNames((Object[])MaximumLikelihoodFitter.SearchMethod.values());
    gd.addChoice(""String_Node_Str"",searchNames,searchNames[fitConfig.getSearchMethod().ordinal()]);
    gd.addStringField(""String_Node_Str"",""String_Node_Str"" + fitConfig.getRelativeThreshold());
    gd.addStringField(""String_Node_Str"",""String_Node_Str"" + fitConfig.getAbsoluteThreshold());
    gd.addNumericField(""String_Node_Str"",fitConfig.getMaxIterations(),0);
    gd.addNumericField(""String_Node_Str"",fitConfig.getMaxFunctionEvaluations(),0);
    if (extraOptions)     gd.addCheckbox(""String_Node_Str"",fitConfig.isGradientLineMinimisation());
    gd.showDialog();
    if (gd.wasCanceled())     return false;
    calibration.bias=Math.abs(gd.getNextNumber());
    fitConfig.setModelCamera(gd.getNextBoolean());
    calibration.readNoise=Math.abs(gd.getNextNumber());
    calibration.gain=Math.abs(gd.getNextNumber());
    calibration.emCCD=gd.getNextBoolean();
    fitConfig.setBias(calibration.bias);
    fitConfig.setReadNoise(calibration.readNoise);
    fitConfig.setGain(calibration.gain);
    fitConfig.setEmCCD(calibration.emCCD);
    fitConfig.setSearchMethod(gd.getNextChoiceIndex());
    try {
      fitConfig.setRelativeThreshold(Math.abs(Double.parseDouble(gd.getNextString())));
      fitConfig.setAbsoluteThreshold(Math.abs(Double.parseDouble(gd.getNextString())));
    }
 catch (    NumberFormatException e) {
      fitConfig.setRelativeThreshold(0);
      fitConfig.setAbsoluteThreshold(0);
    }
    fitConfig.setMaxIterations((int)gd.getNextNumber());
    fitConfig.setMaxFunctionEvaluations((int)gd.getNextNumber());
    if (extraOptions)     fitConfig.setGradientLineMinimisation(gd.getNextBoolean());
 else     fitConfig.setGradientLineMinimisation(false);
    if (filename != null)     SettingsManager.saveSettings(settings,filename);
    try {
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getRelativeThreshold());
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getAbsoluteThreshold());
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getMaxIterations());
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getMaxFunctionEvaluations());
    }
 catch (    IllegalArgumentException e) {
      IJ.error(TITLE,e.getMessage());
      return false;
    }
  }
 else   if (fitConfig.getFitSolver() == FitSolver.LVM || fitConfig.getFitSolver() == FitSolver.LVM_WEIGHTED) {
    GenericDialog gd=new GenericDialog(TITLE);
    gd.addMessage(""String_Node_Str"");
    String[] criteriaNames=SettingsManager.getNames((Object[])FitCriteria.values());
    gd.addChoice(""String_Node_Str"",criteriaNames,criteriaNames[fitConfig.getFitCriteria().ordinal()]);
    gd.addNumericField(""String_Node_Str"",fitConfig.getSignificantDigits(),0);
    gd.addNumericField(""String_Node_Str"",fitConfig.getDelta(),4);
    gd.addNumericField(""String_Node_Str"",fitConfig.getLambda(),4);
    if (extraOptions)     gd.addNumericField(""String_Node_Str"",fitConfig.getMinIterations(),0);
    gd.addNumericField(""String_Node_Str"",fitConfig.getMaxIterations(),0);
    if (fitConfig.getFitSolver() == FitSolver.LVM_WEIGHTED) {
      gd.addMessage(""String_Node_Str"");
      gd.addNumericField(""String_Node_Str"",calibration.readNoise,2);
      gd.addNumericField(""String_Node_Str"",calibration.bias,2);
    }
    gd.showDialog();
    if (gd.wasCanceled())     return false;
    fitConfig.setFitCriteria(gd.getNextChoiceIndex());
    fitConfig.setSignificantDigits((int)gd.getNextNumber());
    fitConfig.setDelta(gd.getNextNumber());
    fitConfig.setLambda(gd.getNextNumber());
    if (extraOptions)     fitConfig.setMinIterations((int)gd.getNextNumber());
    fitConfig.setMaxIterations((int)gd.getNextNumber());
    if (fitConfig.getFitSolver() == FitSolver.LVM_WEIGHTED) {
      calibration.readNoise=Math.abs(gd.getNextNumber());
      calibration.bias=Math.abs(gd.getNextNumber());
      fitConfig.setNoiseModel(CameraNoiseModel.createNoiseModel(calibration.readNoise,calibration.bias,calibration.emCCD));
    }
    if (filename != null)     SettingsManager.saveSettings(settings,filename);
    try {
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getSignificantDigits());
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getDelta());
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getLambda());
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getMaxIterations());
    }
 catch (    IllegalArgumentException e) {
      IJ.error(TITLE,e.getMessage());
      return false;
    }
  }
 else   if (fitConfig.getFitSolver() == FitSolver.LVM_QUASI_NEWTON) {
    if (filename != null)     SettingsManager.saveSettings(settings,filename);
  }
  return true;
}","/** 
 * Show a dialog to configure the fit solver. The updated settings are saved to the settings file. An error message is shown if the dialog is cancelled or the configuration is invalid.
 * @param settings
 * @param filename
 * @param extraOptions True if extra configuration options should be allowed
 * @return True if the configuration succeeded
 */
public static boolean configureFitSolver(GlobalSettings settings,String filename,boolean extraOptions){
  FitConfiguration fitConfig=settings.getFitEngineConfiguration().getFitConfiguration();
  Calibration calibration=settings.getCalibration();
  if (fitConfig.getFitSolver() == FitSolver.MLE) {
    GenericDialog gd=new GenericDialog(TITLE);
    gd.addMessage(""String_Node_Str"");
    gd.addNumericField(""String_Node_Str"",calibration.bias,2);
    gd.addCheckbox(""String_Node_Str"",fitConfig.isModelCamera());
    gd.addNumericField(""String_Node_Str"",calibration.readNoise,2);
    gd.addNumericField(""String_Node_Str"",calibration.gain,2);
    gd.addCheckbox(""String_Node_Str"",calibration.emCCD);
    String[] searchNames=SettingsManager.getNames((Object[])MaximumLikelihoodFitter.SearchMethod.values());
    gd.addChoice(""String_Node_Str"",searchNames,searchNames[fitConfig.getSearchMethod().ordinal()]);
    gd.addStringField(""String_Node_Str"",""String_Node_Str"" + fitConfig.getRelativeThreshold());
    gd.addStringField(""String_Node_Str"",""String_Node_Str"" + fitConfig.getAbsoluteThreshold());
    gd.addNumericField(""String_Node_Str"",fitConfig.getMaxIterations(),0);
    gd.addNumericField(""String_Node_Str"",fitConfig.getMaxFunctionEvaluations(),0);
    if (extraOptions)     gd.addCheckbox(""String_Node_Str"",fitConfig.isGradientLineMinimisation());
    gd.showDialog();
    if (gd.wasCanceled())     return false;
    calibration.bias=Math.abs(gd.getNextNumber());
    fitConfig.setModelCamera(gd.getNextBoolean());
    calibration.readNoise=Math.abs(gd.getNextNumber());
    calibration.gain=Math.abs(gd.getNextNumber());
    calibration.emCCD=gd.getNextBoolean();
    fitConfig.setBias(calibration.bias);
    fitConfig.setReadNoise(calibration.readNoise);
    fitConfig.setGain(calibration.gain);
    fitConfig.setEmCCD(calibration.emCCD);
    fitConfig.setSearchMethod(gd.getNextChoiceIndex());
    try {
      fitConfig.setRelativeThreshold(Math.abs(Double.parseDouble(gd.getNextString())));
      fitConfig.setAbsoluteThreshold(Math.abs(Double.parseDouble(gd.getNextString())));
    }
 catch (    NumberFormatException e) {
      fitConfig.setRelativeThreshold(0);
      fitConfig.setAbsoluteThreshold(0);
    }
    fitConfig.setMaxIterations((int)gd.getNextNumber());
    fitConfig.setMaxFunctionEvaluations((int)gd.getNextNumber());
    if (extraOptions)     fitConfig.setGradientLineMinimisation(gd.getNextBoolean());
 else     fitConfig.setGradientLineMinimisation(false);
    if (filename != null)     SettingsManager.saveSettings(settings,filename);
    try {
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getRelativeThreshold());
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getAbsoluteThreshold());
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getMaxIterations());
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getMaxFunctionEvaluations());
      fitConfig.getFunctionSolver();
    }
 catch (    IllegalArgumentException e) {
      IJ.error(TITLE,e.getMessage());
      return false;
    }
  }
 else   if (fitConfig.getFitSolver() == FitSolver.LVM || fitConfig.getFitSolver() == FitSolver.LVM_WEIGHTED) {
    GenericDialog gd=new GenericDialog(TITLE);
    gd.addMessage(""String_Node_Str"");
    String[] criteriaNames=SettingsManager.getNames((Object[])FitCriteria.values());
    gd.addChoice(""String_Node_Str"",criteriaNames,criteriaNames[fitConfig.getFitCriteria().ordinal()]);
    gd.addNumericField(""String_Node_Str"",fitConfig.getSignificantDigits(),0);
    gd.addNumericField(""String_Node_Str"",fitConfig.getDelta(),4);
    gd.addNumericField(""String_Node_Str"",fitConfig.getLambda(),4);
    if (extraOptions)     gd.addNumericField(""String_Node_Str"",fitConfig.getMinIterations(),0);
    gd.addNumericField(""String_Node_Str"",fitConfig.getMaxIterations(),0);
    if (fitConfig.getFitSolver() == FitSolver.LVM_WEIGHTED) {
      gd.addMessage(""String_Node_Str"");
      gd.addNumericField(""String_Node_Str"",calibration.readNoise,2);
      gd.addNumericField(""String_Node_Str"",calibration.bias,2);
    }
    gd.showDialog();
    if (gd.wasCanceled())     return false;
    fitConfig.setFitCriteria(gd.getNextChoiceIndex());
    fitConfig.setSignificantDigits((int)gd.getNextNumber());
    fitConfig.setDelta(gd.getNextNumber());
    fitConfig.setLambda(gd.getNextNumber());
    if (extraOptions)     fitConfig.setMinIterations((int)gd.getNextNumber());
    fitConfig.setMaxIterations((int)gd.getNextNumber());
    if (fitConfig.getFitSolver() == FitSolver.LVM_WEIGHTED) {
      calibration.readNoise=Math.abs(gd.getNextNumber());
      calibration.bias=Math.abs(gd.getNextNumber());
      fitConfig.setNoiseModel(CameraNoiseModel.createNoiseModel(calibration.readNoise,calibration.bias,calibration.emCCD));
    }
    if (filename != null)     SettingsManager.saveSettings(settings,filename);
    try {
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getSignificantDigits());
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getDelta());
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getLambda());
      Parameters.isAboveZero(""String_Node_Str"",fitConfig.getMaxIterations());
    }
 catch (    IllegalArgumentException e) {
      IJ.error(TITLE,e.getMessage());
      return false;
    }
  }
 else   if (fitConfig.getFitSolver() == FitSolver.LVM_QUASI_NEWTON) {
    if (filename != null)     SettingsManager.saveSettings(settings,filename);
  }
  return true;
}",0.9968001383723948
149585,"private void run(){
}","private void run(){
  answer[Gaussian2DFunction.BACKGROUND]=benchmarkParameters.getBackground() * benchmarkParameters.gain;
  answer[Gaussian2DFunction.SIGNAL]=benchmarkParameters.getSignal() * benchmarkParameters.gain;
  answer[Gaussian2DFunction.X_POSITION]=benchmarkParameters.x;
  answer[Gaussian2DFunction.Y_POSITION]=benchmarkParameters.y;
  answer[Gaussian2DFunction.X_SD]=benchmarkParameters.s / benchmarkParameters.a;
  answer[Gaussian2DFunction.Y_SD]=benchmarkParameters.s / benchmarkParameters.a;
  int x=(int)benchmarkParameters.x;
  int y=(int)benchmarkParameters.y;
  region=new Rectangle(x - regionSize,y - regionSize,2 * regionSize + 1,2 * regionSize + 1);
  if (!new Rectangle(0,0,imp.getWidth(),imp.getHeight()).contains(region)) {
    if (region.width <= imp.getWidth() + 1 && region.height <= imp.getHeight() + 1) {
      Utils.log(""String_Node_Str"",region.toString(),imp.getWidth(),imp.getHeight());
      region=new Rectangle(0,0,imp.getWidth(),imp.getHeight());
    }
 else {
      IJ.error(TITLE,""String_Node_Str"");
      return;
    }
  }
  x-=region.x;
  y-=region.y;
  answer[Gaussian2DFunction.X_POSITION]-=(region.x + 0.5);
  answer[Gaussian2DFunction.Y_POSITION]-=(region.y + 0.5);
  fitConfig.setBackgroundFitting(backgroundFitting);
  fitConfig.setNotSignalFitting(!signalFitting);
  fitConfig.setComputeDeviations(false);
  final ImageStack stack=imp.getImageStack();
  int nThreads=Prefs.getThreads();
  BlockingQueue<Integer> jobs=new ArrayBlockingQueue<Integer>(nThreads * 2);
  List<Worker> workers=new LinkedList<Worker>();
  List<Thread> threads=new LinkedList<Thread>();
  for (int i=0; i < nThreads; i++) {
    Worker worker=new Worker(jobs,stack,region,fitConfig);
    Thread t=new Thread(worker);
    workers.add(worker);
    threads.add(t);
    t.start();
  }
  final int totalFrames=benchmarkParameters.frames;
  results=new double[totalFrames * getNumberOfStartPoints()][];
  resultsTime=new long[results.length];
  final int step=(totalFrames > 400) ? totalFrames / 200 : 2;
  for (int i=0; i < totalFrames; i++) {
    if (benchmarkParameters.p[i] > 0) {
      put(jobs,i);
      if (i % step == 0) {
        IJ.showProgress(i,totalFrames);
        IJ.showStatus(""String_Node_Str"" + i + ""String_Node_Str""+ totalFrames);
      }
    }
  }
  for (int i=0; i < threads.size(); i++) {
    put(jobs,-1);
  }
  for (int i=0; i < threads.size(); i++) {
    try {
      threads.get(i).join();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  threads.clear();
  if (comFitting)   Utils.log(TITLE + ""String_Node_Str"",comValid.intValue(),totalFrames,Utils.rounded((100.0 * comValid.intValue()) / totalFrames));
  IJ.showProgress(1);
  IJ.showStatus(""String_Node_Str"");
  Statistics[] stats=new Statistics[NAMES.length];
  for (int i=0; i < workers.size(); i++) {
    Statistics[] next=workers.get(i).stats;
    for (int j=0; j < next.length; j++) {
      if (stats[j] == null)       stats[j]=next[j];
 else       stats[j].add(next[j]);
    }
  }
  workers.clear();
  summariseResults(stats);
  if (showHistograms) {
    IJ.showStatus(""String_Node_Str"");
    int[] idList=new int[NAMES.length];
    int count=0;
    double[] convert=getConversionFactors();
    boolean requireRetile=false;
    for (int i=0; i < NAMES.length; i++) {
      if (displayHistograms[i] && convert[i] != 0) {
        double[] tmp=((StoredDataStatistics)stats[i]).getValues();
        for (int j=0; j < tmp.length; j++)         tmp[j]*=convert[i];
        StoredDataStatistics tmpStats=new StoredDataStatistics(tmp);
        idList[count++]=Utils.showHistogram(TITLE,tmpStats,NAMES[i],0,0,histogramBins,String.format(""String_Node_Str"",Utils.rounded(tmpStats.getMean()),Utils.rounded(tmpStats.getStandardDeviation())));
        requireRetile=requireRetile || Utils.isNewWindow();
      }
    }
    if (count > 0 && requireRetile) {
      idList=Arrays.copyOf(idList,count);
      new WindowOrganiser().tileWindows(idList);
    }
  }
  IJ.showStatus(""String_Node_Str"");
}",0.0104089219330855
149586,"private void runManualTracing(){
  if (!showManualTracingDialog())   return;
  startLog();
  int timeInFrames=FastMath.max(1,(int)Math.round(tThreshold / results.getCalibration().exposureTime));
  ArrayList<Molecule> singles=new ArrayList<Molecule>();
  molecules=traceMolecules(results,dThreshold,timeInFrames,singles);
  molecules.addAll(singles);
}","private void runManualTracing(){
  if (!showManualTracingDialog())   return;
  startLog();
  int timeInFrames=FastMath.max(1,(int)Math.round(tThreshold * 1000.0 / results.getCalibration().exposureTime));
  ArrayList<Molecule> singles=new ArrayList<Molecule>();
  molecules=traceMolecules(results,dThreshold,timeInFrames,singles);
  molecules.addAll(singles);
}",0.9873417721518988
149587,"public void run(String arg){
  if (MemoryPeakResults.countMemorySize() == 0) {
    IJ.error(TITLE,""String_Node_Str"");
    return;
  }
  altKeyDown=Utils.isExtraOptions();
  Trace[] traces=null;
  int totalFiltered=0;
  if (""String_Node_Str"".equals(arg)) {
    outputName=""String_Node_Str"";
    if (!showClusterDialog())     return;
    if (settings.splitPulses) {
      if (timeInFrames(settings.timeThreshold) > settings.pulseInterval) {
        settings.timeThreshold=settings.pulseInterval * exposureTime;
      }
    }
    ClusteringEngine engine=new ClusteringEngine(Prefs.getThreads(),settings.getClusteringAlgorithm(),new IJTrackProgress());
    ArrayList<Cluster> clusters=engine.findClusters(convertToClusterPoints(),settings.distanceThreshold / results.getCalibration().nmPerPixel,timeInFrames(settings.timeThreshold));
    if (clusters == null) {
      Utils.log(""String_Node_Str"");
      return;
    }
    traces=convertToTraces(clusters);
  }
 else {
    outputName=""String_Node_Str"";
    if (!showDialog())     return;
    TraceManager manager=new TraceManager(results);
    manager.setTraceMode(settings.getTraceMode());
    manager.setActivationFrameInterval(settings.pulseInterval);
    manager.setActivationFrameWindow(settings.pulseWindow);
    manager.setDistanceExclusion(settings.distanceExclusion / results.getCalibration().nmPerPixel);
    if (settings.optimise) {
      runOptimiser(manager);
    }
    if (settings.splitPulses) {
      manager.setPulseInterval(settings.pulseInterval);
      if (timeInFrames(settings.timeThreshold) > settings.pulseInterval) {
        settings.timeThreshold=settings.pulseInterval * exposureTime;
      }
    }
    manager.setTracker(new IJTrackProgress());
    manager.traceMolecules(settings.distanceThreshold / results.getCalibration().nmPerPixel,timeInFrames(settings.timeThreshold));
    traces=manager.getTraces();
    totalFiltered=manager.getTotalFiltered();
  }
  MemoryPeakResults tracedResults=saveResults(results,traces,outputName + (outputName.endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  saveResults(results,getSingles(traces),outputName + ""String_Node_Str"");
  saveResults(results,getTraces(traces),outputName + ""String_Node_Str"");
  sortByTime(traces);
  if (settings.saveTraces)   saveTraces(traces);
  summarise(traces,totalFiltered,settings.distanceThreshold,settings.timeThreshold);
  IJ.showStatus(String.format(""String_Node_Str"",results.size(),tracedResults.size(),totalFiltered));
  if (settings.refitOption)   fitTraces(results,traces);
}","public void run(String arg){
  if (MemoryPeakResults.countMemorySize() == 0) {
    IJ.error(TITLE,""String_Node_Str"");
    return;
  }
  altKeyDown=Utils.isExtraOptions();
  Trace[] traces=null;
  int totalFiltered=0;
  if (""String_Node_Str"".equals(arg)) {
    outputName=""String_Node_Str"";
    if (!showClusterDialog())     return;
    ClusteringEngine engine=new ClusteringEngine(Prefs.getThreads(),settings.getClusteringAlgorithm(),new IJTrackProgress());
    if (settings.splitPulses) {
      engine.setPulseInterval(settings.pulseInterval);
      if (timeInFrames(settings.timeThreshold) > settings.pulseInterval) {
        settings.timeThreshold=settings.pulseInterval * exposureTime;
      }
    }
    ArrayList<Cluster> clusters=engine.findClusters(convertToClusterPoints(),settings.distanceThreshold / results.getCalibration().nmPerPixel,timeInFrames(settings.timeThreshold));
    if (clusters == null) {
      Utils.log(""String_Node_Str"");
      return;
    }
    traces=convertToTraces(clusters);
  }
 else {
    outputName=""String_Node_Str"";
    if (!showDialog())     return;
    TraceManager manager=new TraceManager(results);
    manager.setTraceMode(settings.getTraceMode());
    manager.setActivationFrameInterval(settings.pulseInterval);
    manager.setActivationFrameWindow(settings.pulseWindow);
    manager.setDistanceExclusion(settings.distanceExclusion / results.getCalibration().nmPerPixel);
    if (settings.optimise) {
      runOptimiser(manager);
    }
    if (settings.splitPulses) {
      manager.setPulseInterval(settings.pulseInterval);
      if (timeInFrames(settings.timeThreshold) > settings.pulseInterval) {
        settings.timeThreshold=settings.pulseInterval * exposureTime;
      }
    }
    manager.setTracker(new IJTrackProgress());
    manager.traceMolecules(settings.distanceThreshold / results.getCalibration().nmPerPixel,timeInFrames(settings.timeThreshold));
    traces=manager.getTraces();
    totalFiltered=manager.getTotalFiltered();
  }
  MemoryPeakResults tracedResults=saveResults(results,traces,outputName + (outputName.endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  saveResults(results,getSingles(traces),outputName + ""String_Node_Str"");
  saveResults(results,getTraces(traces),outputName + ""String_Node_Str"");
  sortByTime(traces);
  if (settings.saveTraces)   saveTraces(traces);
  summarise(traces,totalFiltered,settings.distanceThreshold,settings.timeThreshold);
  IJ.showStatus(String.format(""String_Node_Str"",results.size(),tracedResults.size(),totalFiltered));
  if (settings.refitOption)   fitTraces(results,traces);
}",0.2448508180943214
149588,"private void analyse(MemoryPeakResults results){
  results.sort();
  int min=results.getResults().get(0).peak;
  int max=results.getResults().get(results.size() - 1).getEndFrame();
  double d=searchDistance / results.getCalibration().nmPerPixel;
  int range=max - min + 1;
  if (maxDarkTime > 0)   range=Math.max(1,(int)Math.round(maxDarkTime * 1000 / msPerFrame));
  IJTrackProgress tracker=new IJTrackProgress();
  tracker.status(""String_Node_Str"");
  Trace[] traces;
  ClusteringAlgorithm algorithm=ClusteringAlgorithm.ClosestParticleTimePriority;
switch (method) {
case 2:
    algorithm=ClusteringAlgorithm.ClosestParticleDistancePriority;
case 1:
  ClusteringEngine engine=new ClusteringEngine();
engine.setClusteringAlgorithm(algorithm);
engine.setThreadCount(Prefs.getThreads());
engine.setTracker(tracker);
List<PeakResult> peakResults=results.getResults();
ArrayList<Cluster> clusters=engine.findClusters(TraceMolecules.convertToClusterPoints(peakResults),d,range);
traces=TraceMolecules.convertToTraces(peakResults,clusters);
break;
case 0:
default :
TraceManager tm=new TraceManager(results);
tm.setTracker(tracker);
tm.traceMolecules(d,range);
traces=tm.getTraces();
}
tracker.status(""String_Node_Str"");
int[] times=new int[range];
StoredDataStatistics stats=new StoredDataStatistics();
for (Trace trace : traces) {
if (trace.getNBlinks() > 1) {
for (int t : trace.getOffTimes()) {
times[t]++;
}
stats.add(trace.getOffTimes());
}
}
plotDarkTimeHistogram(stats);
for (int i=1; i < times.length; i++) times[i]+=times[i - 1];
int total=times[times.length - 1];
double[] x=new double[range];
double[] y=new double[range];
int truncate=0;
for (int i=0; i < x.length; i++) {
x[i]=i * msPerFrame;
y[i]=(100.0 * times[i]) / total;
if (times[i] == total) {
truncate=i + 1;
break;
}
}
if (truncate > 0) {
x=Arrays.copyOf(x,truncate);
y=Arrays.copyOf(y,truncate);
}
String title=""String_Node_Str"";
Plot plot=new Plot(title,""String_Node_Str"",""String_Node_Str"",x,y);
Utils.display(title,plot);
for (int i=0; i < y.length; i++) {
if (y[i] >= percentile) {
Utils.log(""String_Node_Str"",percentile,Utils.rounded(x[i]),Utils.rounded(x[i] / 1000));
break;
}
}
tracker.status(""String_Node_Str"");
}","private void analyse(MemoryPeakResults results){
  results.sort();
  int min=results.getResults().get(0).peak;
  int max=results.getResults().get(results.size() - 1).getEndFrame();
  double d=searchDistance / results.getCalibration().nmPerPixel;
  int range=max - min + 1;
  if (maxDarkTime > 0)   range=Math.max(1,(int)Math.round(maxDarkTime * 1000 / msPerFrame));
  IJTrackProgress tracker=new IJTrackProgress();
  tracker.status(""String_Node_Str"");
  tracker.log(""String_Node_Str"",Utils.rounded(searchDistance),Utils.rounded(d),Utils.rounded(range * msPerFrame / 1000.0),range);
  Trace[] traces;
  ClusteringAlgorithm algorithm=ClusteringAlgorithm.ClosestParticleDistancePriority;
switch (method) {
case 2:
    algorithm=ClusteringAlgorithm.ClosestParticleTimePriority;
case 1:
  ClusteringEngine engine=new ClusteringEngine();
engine.setClusteringAlgorithm(algorithm);
engine.setThreadCount(Prefs.getThreads());
engine.setTracker(tracker);
List<PeakResult> peakResults=results.getResults();
ArrayList<Cluster> clusters=engine.findClusters(TraceMolecules.convertToClusterPoints(peakResults),d,range);
traces=TraceMolecules.convertToTraces(peakResults,clusters);
break;
case 0:
default :
TraceManager tm=new TraceManager(results);
tm.setTracker(tracker);
tm.traceMolecules(d,range);
traces=tm.getTraces();
}
tracker.status(""String_Node_Str"");
int[] times=new int[range];
StoredDataStatistics stats=new StoredDataStatistics();
for (Trace trace : traces) {
if (trace.getNBlinks() > 1) {
for (int t : trace.getOffTimes()) {
times[t]++;
}
stats.add(trace.getOffTimes());
}
}
plotDarkTimeHistogram(stats);
for (int i=1; i < times.length; i++) times[i]+=times[i - 1];
int total=times[times.length - 1];
double[] x=new double[range];
double[] y=new double[range];
int truncate=0;
for (int i=0; i < x.length; i++) {
x[i]=i * msPerFrame;
y[i]=(100.0 * times[i]) / total;
if (times[i] == total) {
truncate=i + 1;
break;
}
}
if (truncate > 0) {
x=Arrays.copyOf(x,truncate);
y=Arrays.copyOf(y,truncate);
}
String title=""String_Node_Str"";
Plot plot=new Plot(title,""String_Node_Str"",""String_Node_Str"",x,y);
Utils.display(title,plot);
for (int i=0; i < y.length; i++) {
if (y[i] >= percentile) {
Utils.log(""String_Node_Str"",percentile,Utils.rounded(x[i]),Utils.rounded(x[i] / 1000));
break;
}
}
tracker.status(""String_Node_Str"");
}",0.966725820763088
149589,"/** 
 * Perform the PC Analysis <p> Spatial domain results can just be combined to an average curve. <p> Frequency domain results can be fit using the g(r) model.
 */
private void analyse(){
  previous_gr=gr;
  previous_peakDensity=peakDensity;
  previous_spatialDomain=spatialDomain;
  String axisTitle;
  if (spatialDomain) {
    offset=0;
    axisTitle=""String_Node_Str"";
  }
 else {
    offset=(gr[0][0] == 0) ? 1 : 0;
    axisTitle=""String_Node_Str"";
  }
  String title=TITLE + ""String_Node_Str"" + axisTitle;
  Plot plot=PCPALMAnalysis.plotCorrelation(gr,offset,title,axisTitle,spatialDomain,showErrorBars);
  if (spatialDomain) {
    saveCorrelationCurve(gr);
    log(""String_Node_Str"" + title + ""String_Node_Str"");
    return;
  }
  log(""String_Node_Str"");
  log(""String_Node_Str"",Utils.rounded(peakDensity,4),Utils.rounded(blinkingRate,4));
  createResultsTable();
  peakDensity/=1e6;
  double proteinDensity=peakDensity / blinkingRate;
  ArrayList<double[]> curves=new ArrayList<double[]>();
  double[] parameters=fitRandomModel(gr,PCPALMMolecules.sigmaS,proteinDensity);
  if (parameters != null) {
    log(""String_Node_Str"",randomModel.getName(),Utils.rounded(peakDensity / parameters[1],4));
    log(""String_Node_Str"",randomModel.getName());
    plot.setColor(Color.red);
    plot.addPoints(randomModel.getX(),randomModel.value(parameters),Plot.LINE);
    addNonFittedPoints(plot,gr,randomModel,parameters);
    Utils.display(title,plot);
    if (saveCorrelationCurve)     curves.add(extractCurve(gr,randomModel,parameters));
  }
  if (!valid1 || fitClusteredModels) {
    parameters=fitClusteredModel(gr,PCPALMMolecules.sigmaS,proteinDensity);
    if (parameters != null) {
      log(""String_Node_Str"",clusteredModel.getName(),Utils.rounded(peakDensity / parameters[1],4));
      log(""String_Node_Str"",clusteredModel.getName());
      plot.setColor(Color.blue);
      plot.addPoints(clusteredModel.getX(),clusteredModel.value(parameters),Plot.LINE);
      addNonFittedPoints(plot,gr,clusteredModel,parameters);
      Utils.display(title,plot);
      if (saveCorrelationCurve)       curves.add(extractCurve(gr,clusteredModel,parameters));
    }
    parameters=fitEmulsionModel(gr,PCPALMMolecules.sigmaS,proteinDensity);
    if (parameters != null) {
      log(""String_Node_Str"",emulsionModel.getName(),Utils.rounded(peakDensity / parameters[1],4));
      log(""String_Node_Str"",emulsionModel.getName());
      plot.setColor(Color.magenta);
      plot.addPoints(emulsionModel.getX(),emulsionModel.value(parameters),Plot.LINE);
      addNonFittedPoints(plot,gr,emulsionModel,parameters);
      Utils.display(title,plot);
      if (saveCorrelationCurve)       curves.add(extractCurve(gr,emulsionModel,parameters));
    }
  }
  saveCorrelationCurve(gr,curves.toArray(new double[0][0]));
}","/** 
 * Perform the PC Analysis <p> Spatial domain results can just be combined to an average curve. <p> Frequency domain results can be fit using the g(r) model.
 */
private void analyse(){
  previous_gr=gr;
  previous_peakDensity=peakDensity;
  previous_spatialDomain=spatialDomain;
  String axisTitle;
  if (spatialDomain) {
    offset=0;
    axisTitle=""String_Node_Str"";
  }
 else {
    offset=(gr[0][0] == 0) ? 1 : 0;
    axisTitle=""String_Node_Str"";
  }
  String title=TITLE + ""String_Node_Str"" + axisTitle;
  Plot plot=PCPALMAnalysis.plotCorrelation(gr,offset,title,axisTitle,spatialDomain,showErrorBars);
  if (spatialDomain) {
    saveCorrelationCurve(gr);
    log(""String_Node_Str"" + title + ""String_Node_Str"");
    return;
  }
  log(""String_Node_Str"");
  log(""String_Node_Str"",Utils.rounded(peakDensity,4),Utils.rounded(blinkingRate,4));
  createResultsTable();
  peakDensity/=1e6;
  double proteinDensity=peakDensity / blinkingRate;
  ArrayList<double[]> curves=new ArrayList<double[]>();
  double[] parameters=fitRandomModel(gr,estimatedPrecision,proteinDensity);
  if (parameters != null) {
    log(""String_Node_Str"",randomModel.getName(),Utils.rounded(peakDensity / parameters[1],4));
    log(""String_Node_Str"",randomModel.getName());
    plot.setColor(Color.red);
    plot.addPoints(randomModel.getX(),randomModel.value(parameters),Plot.LINE);
    addNonFittedPoints(plot,gr,randomModel,parameters);
    Utils.display(title,plot);
    if (saveCorrelationCurve)     curves.add(extractCurve(gr,randomModel,parameters));
  }
  if (!valid1 || fitClusteredModels) {
    parameters=fitClusteredModel(gr,estimatedPrecision,proteinDensity);
    if (parameters != null) {
      log(""String_Node_Str"",clusteredModel.getName(),Utils.rounded(peakDensity / parameters[1],4));
      log(""String_Node_Str"",clusteredModel.getName());
      plot.setColor(Color.blue);
      plot.addPoints(clusteredModel.getX(),clusteredModel.value(parameters),Plot.LINE);
      addNonFittedPoints(plot,gr,clusteredModel,parameters);
      Utils.display(title,plot);
      if (saveCorrelationCurve)       curves.add(extractCurve(gr,clusteredModel,parameters));
    }
    parameters=fitEmulsionModel(gr,estimatedPrecision,proteinDensity);
    if (parameters != null) {
      log(""String_Node_Str"",emulsionModel.getName(),Utils.rounded(peakDensity / parameters[1],4));
      log(""String_Node_Str"",emulsionModel.getName());
      plot.setColor(Color.magenta);
      plot.addPoints(emulsionModel.getX(),emulsionModel.value(parameters),Plot.LINE);
      addNonFittedPoints(plot,gr,emulsionModel,parameters);
      Utils.display(title,plot);
      if (saveCorrelationCurve)       curves.add(extractCurve(gr,emulsionModel,parameters));
    }
  }
  saveCorrelationCurve(gr,curves.toArray(new double[0][0]));
}",0.9817138759411976
149590,"private boolean getCorrelationResults(){
  String[] options=new String[]{INPUT_FROM_FILE,""String_Node_Str"",""String_Node_Str""};
  int count=1;
  if (previous_gr != null)   options[count++]=INPUT_PREVIOUS;
  if (!PCPALMAnalysis.results.isEmpty())   options[count++]=INPUT_ANALYSIS;
  options=Arrays.copyOf(options,count);
  GenericDialog gd=new GenericDialog(TITLE);
  gd.addMessage(""String_Node_Str"");
  gd.addChoice(""String_Node_Str"",options,inputOption);
  gd.showDialog();
  if (gd.wasCanceled())   return false;
  inputOption=gd.getNextChoice();
  if (inputOption.equals(INPUT_PREVIOUS)) {
    if (previous_gr == null)     return false;
    gr=previous_gr;
    peakDensity=previous_peakDensity;
    spatialDomain=previous_spatialDomain;
    return true;
  }
  if (inputOption.equals(INPUT_FROM_FILE)) {
    return loadCorrelationCurve();
  }
  ArrayList<CorrelationResult> results=new ArrayList<CorrelationResult>();
  if (!selectAnalysisResults(results))   return false;
  header();
  log(""String_Node_Str"",results.size());
  spatialDomain=results.get(0).spatialDomain;
  peakDensity=0;
  int size=0;
  for (  CorrelationResult r : results) {
    peakDensity+=r.peakDensity;
    size=Math.max(size,r.gr[0].length);
  }
  peakDensity/=results.size();
  gr=combineCurves(results,size);
  return true;
}","private boolean getCorrelationResults(){
  String[] options=new String[]{INPUT_FROM_FILE,""String_Node_Str"",""String_Node_Str""};
  int count=1;
  if (previous_gr != null)   options[count++]=INPUT_PREVIOUS;
  if (!PCPALMAnalysis.results.isEmpty())   options[count++]=INPUT_ANALYSIS;
  options=Arrays.copyOf(options,count);
  GenericDialog gd=new GenericDialog(TITLE);
  gd.addMessage(""String_Node_Str"");
  gd.addChoice(""String_Node_Str"",options,inputOption);
  gd.showDialog();
  if (gd.wasCanceled())   return false;
  inputOption=gd.getNextChoice();
  if (inputOption.equals(INPUT_PREVIOUS)) {
    if (previous_gr == null)     return false;
    gr=previous_gr;
    peakDensity=previous_peakDensity;
    spatialDomain=previous_spatialDomain;
    return true;
  }
 else   if (inputOption.equals(INPUT_FROM_FILE)) {
    return loadCorrelationCurve();
  }
  ArrayList<CorrelationResult> results=new ArrayList<CorrelationResult>();
  if (!selectAnalysisResults(results))   return false;
  header();
  log(""String_Node_Str"",results.size());
  spatialDomain=results.get(0).spatialDomain;
  peakDensity=0;
  int size=0;
  for (  CorrelationResult r : results) {
    peakDensity+=r.peakDensity;
    size=Math.max(size,r.gr[0].length);
  }
  peakDensity/=results.size();
  gr=combineCurves(results,size);
  return true;
}",0.9977046671767408
149591,"/** 
 * Load a correlation curve from file. Will set the global gr, peakDensity and spatialDomain variables. If the data fails to be loaded then the method will return false.
 * @return True if loaded
 */
private boolean loadCorrelationCurve(){
  inputFilename=Utils.getFilename(""String_Node_Str"",inputFilename);
  if (inputFilename == null)   return false;
  boolean spatialDomainSet=false;
  boolean peakDensitySet=false;
  BufferedReader input=null;
  try {
    FileInputStream fis=new FileInputStream(inputFilename);
    input=new BufferedReader(new UnicodeReader(fis,null));
    String line;
    int count=0;
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    while ((line=input.readLine()) != null) {
      count++;
      if (line.length() == 0)       continue;
      if (line.charAt(0) != '#') {
        break;
      }
      Matcher match=pattern.matcher(line);
      if (match.find()) {
        if (match.group(1).equals(HEADER_SPATIAL_DOMAIN)) {
          spatialDomainSet=true;
          if (match.group(2).equalsIgnoreCase(""String_Node_Str""))           spatialDomain=true;
 else           if (match.group(2).equalsIgnoreCase(""String_Node_Str""))           spatialDomain=false;
 else           spatialDomainSet=false;
        }
 else         if (match.group(1).equals(HEADER_PEAK_DENSITY)) {
          try {
            peakDensity=Double.parseDouble(match.group(2));
            peakDensitySet=true;
          }
 catch (          NumberFormatException e) {
          }
        }
      }
    }
    if (!peakDensitySet) {
      IJ.error(TITLE,""String_Node_Str"" + HEADER_PEAK_DENSITY + ""String_Node_Str""+ inputFilename);
      return false;
    }
    if (!spatialDomainSet) {
      IJ.error(TITLE,""String_Node_Str"" + HEADER_SPATIAL_DOMAIN + ""String_Node_Str""+ inputFilename);
      return false;
    }
    ArrayList<double[]> data=new ArrayList<double[]>();
    while (line != null) {
      if (line.length() == 0)       continue;
      if (line.charAt(0) == '#')       continue;
      Scanner scanner=new Scanner(line);
      scanner.useDelimiter(""String_Node_Str"");
      double r, g;
      try {
        r=scanner.nextDouble();
        g=scanner.nextDouble();
      }
 catch (      InputMismatchException e) {
        IJ.error(TITLE,""String_Node_Str"" + count);
        return false;
      }
catch (      NoSuchElementException e) {
        IJ.error(TITLE,""String_Node_Str"" + count);
        return false;
      }
      double error=0;
      try {
        error=scanner.nextDouble();
      }
 catch (      InputMismatchException e) {
      }
catch (      NoSuchElementException e) {
      }
      data.add(new double[]{r,g,error});
      line=input.readLine();
      count++;
    }
    if (data.isEmpty()) {
      IJ.error(TITLE,""String_Node_Str"" + inputFilename);
      return false;
    }
    gr=new double[3][data.size()];
    for (int i=0; i < data.size(); i++) {
      final double[] d=data.get(i);
      gr[0][i]=d[0];
      gr[1][i]=d[1];
      gr[2][i]=d[2];
    }
  }
 catch (  IOException e) {
    IJ.error(TITLE,""String_Node_Str"" + inputFilename);
    return false;
  }
 finally {
    try {
      if (input != null)       input.close();
    }
 catch (    IOException e) {
    }
  }
  return true;
}","/** 
 * Load a correlation curve from file. Will set the global gr, peakDensity and spatialDomain variables. If the data fails to be loaded then the method will return false.
 * @return True if loaded
 */
private boolean loadCorrelationCurve(){
  inputFilename=Utils.getFilename(""String_Node_Str"",inputFilename);
  if (inputFilename == null)   return false;
  boolean spatialDomainSet=false;
  boolean peakDensitySet=false;
  BufferedReader input=null;
  try {
    FileInputStream fis=new FileInputStream(inputFilename);
    input=new BufferedReader(new UnicodeReader(fis,null));
    String line;
    int count=0;
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    while ((line=input.readLine()) != null) {
      count++;
      if (line.length() == 0)       continue;
      if (line.charAt(0) != '#') {
        break;
      }
      Matcher match=pattern.matcher(line);
      if (match.find()) {
        if (match.group(1).equals(HEADER_SPATIAL_DOMAIN)) {
          spatialDomainSet=true;
          if (match.group(2).equalsIgnoreCase(""String_Node_Str""))           spatialDomain=true;
 else           if (match.group(2).equalsIgnoreCase(""String_Node_Str""))           spatialDomain=false;
 else           spatialDomainSet=false;
        }
 else         if (match.group(1).equals(HEADER_PEAK_DENSITY)) {
          try {
            peakDensity=Double.parseDouble(match.group(2));
            peakDensitySet=true;
          }
 catch (          NumberFormatException e) {
          }
        }
      }
    }
    if (!peakDensitySet) {
      IJ.error(TITLE,""String_Node_Str"" + HEADER_PEAK_DENSITY + ""String_Node_Str""+ inputFilename);
      return false;
    }
    if (!spatialDomainSet) {
      IJ.error(TITLE,""String_Node_Str"" + HEADER_SPATIAL_DOMAIN + ""String_Node_Str""+ inputFilename);
      return false;
    }
    ArrayList<double[]> data=new ArrayList<double[]>();
    while (line != null) {
      if (line.length() == 0)       continue;
      if (line.charAt(0) == '#')       continue;
      Scanner scanner=new Scanner(line);
      scanner.useDelimiter(""String_Node_Str"");
      double r, g;
      try {
        r=scanner.nextDouble();
        g=scanner.nextDouble();
      }
 catch (      InputMismatchException e) {
        IJ.error(TITLE,""String_Node_Str"" + count);
        scanner.close();
        return false;
      }
catch (      NoSuchElementException e) {
        IJ.error(TITLE,""String_Node_Str"" + count);
        scanner.close();
        return false;
      }
      double error=0;
      try {
        error=scanner.nextDouble();
      }
 catch (      InputMismatchException e) {
      }
catch (      NoSuchElementException e) {
      }
      scanner.close();
      data.add(new double[]{r,g,error});
      line=input.readLine();
      count++;
    }
    if (data.isEmpty()) {
      IJ.error(TITLE,""String_Node_Str"" + inputFilename);
      return false;
    }
    gr=new double[3][data.size()];
    for (int i=0; i < data.size(); i++) {
      final double[] d=data.get(i);
      gr[0][i]=d[0];
      gr[1][i]=d[1];
      gr[2][i]=d[2];
    }
  }
 catch (  IOException e) {
    IJ.error(TITLE,""String_Node_Str"" + inputFilename);
    return false;
  }
 finally {
    try {
      if (input != null)       input.close();
    }
 catch (    IOException e) {
    }
  }
  return true;
}",0.9888156886778
149592,"/** 
 * Search for the closest pair of particles, one of which is not in a cluster, below the squared radius distance and join them
 * @param grid
 * @param nXBins
 * @param nYBins
 * @param r2 The squared radius distance
 * @param yBinWidth
 * @param xBinWidth
 * @param miny
 * @param minx
 * @param clusterId
 * @return The number of points assigned to clusters (either 0, 1, or 2)
 */
private int joinClosestParticle(ExtendedClusterPoint[][] grid,final int nXBins,final int nYBins,final double r2,double minx,double miny,double xBinWidth,double yBinWidth,int[] clusterId){
  double min=r2;
  ExtendedClusterPoint pair1=null, pair2=null;
  for (int yBin=0; yBin < nYBins; yBin++) {
    for (int xBin=0; xBin < nXBins; xBin++) {
      for (ExtendedClusterPoint c1=grid[xBin][yBin]; c1 != null; c1=c1.nextE) {
        final boolean cluster1=c1.inCluster;
        ExtendedClusterPoint other=null;
        for (ExtendedClusterPoint c2=c1.nextE; c2 != null; c2=c2.nextE) {
          if (cluster1 && c2.inCluster)           continue;
          final double d2=c1.distance2(c2);
          if (d2 < min) {
            min=d2;
            other=c2;
          }
        }
        if (yBin < nYBins - 1) {
          for (ExtendedClusterPoint c2=grid[xBin][yBin + 1]; c2 != null; c2=c2.nextE) {
            if (cluster1 && c2.inCluster)             continue;
            final double d2=c1.distance2(c2);
            if (d2 < min) {
              min=d2;
              other=c2;
            }
          }
          if (xBin > 0) {
            for (ExtendedClusterPoint c2=grid[xBin - 1][yBin + 1]; c2 != null; c2=c2.nextE) {
              if (cluster1 && c2.inCluster)               continue;
              final double d2=c1.distance2(c2);
              if (d2 < min) {
                min=d2;
                other=c2;
              }
            }
          }
        }
        if (xBin < nXBins - 1) {
          for (ExtendedClusterPoint c2=grid[xBin + 1][yBin]; c2 != null; c2=c2.nextE) {
            if (cluster1 && c2.inCluster)             continue;
            final double d2=c1.distance2(c2);
            if (d2 < min) {
              min=d2;
              other=c2;
            }
          }
          if (yBin < nYBins - 1) {
            for (ExtendedClusterPoint c2=grid[xBin + 1][yBin + 1]; c2 != null; c2=c2.nextE) {
              if (cluster1 && c2.inCluster)               continue;
              final double d2=c1.distance2(c2);
              if (d2 < min) {
                min=d2;
                other=c2;
              }
            }
          }
        }
        if (other != null) {
          pair1=c1;
          pair2=other;
        }
      }
    }
  }
  if (pair1 != null) {
    int nProcessed=1;
    if (clusterId[pair2.id] == 0) {
      nProcessed=2;
      clusterId[pair2.id]=++nextClusterId;
      pair2.inCluster=true;
    }
    clusterId[pair1.id]=clusterId[pair2.id];
    pair1.inCluster=true;
    if (trackJoins) {
      if (pair1.next.id == pair2.next.id)       intraIdDistances[intraIdCount++]=Math.sqrt(min);
 else       interIdDistances[interIdCount++]=Math.sqrt(min);
    }
    return nProcessed;
  }
  return 0;
}","/** 
 * Search for the closest pair of particles, one of which is not in a cluster, below the squared radius distance and join them
 * @param grid
 * @param nXBins
 * @param nYBins
 * @param r2 The squared radius distance
 * @param yBinWidth
 * @param xBinWidth
 * @param miny
 * @param minx
 * @param clusterId
 * @return The number of points assigned to clusters (either 0, 1, or 2)
 */
private int joinClosestParticle(ExtendedClusterPoint[][] grid,final int nXBins,final int nYBins,final double r2,double minx,double miny,double xBinWidth,double yBinWidth,int[] clusterId){
  double min=r2;
  ExtendedClusterPoint pair1=null, pair2=null;
  for (int yBin=0; yBin < nYBins; yBin++) {
    for (int xBin=0; xBin < nXBins; xBin++) {
      for (ExtendedClusterPoint c1=grid[xBin][yBin]; c1 != null; c1=c1.nextE) {
        final boolean cluster1=c1.inCluster;
        ExtendedClusterPoint other=null;
        for (ExtendedClusterPoint c2=c1.nextE; c2 != null; c2=c2.nextE) {
          if (cluster1 && c2.inCluster)           continue;
          final double d2=c1.distance2(c2);
          if (d2 < min) {
            min=d2;
            other=c2;
          }
        }
        if (yBin < nYBins - 1) {
          for (ExtendedClusterPoint c2=grid[xBin][yBin + 1]; c2 != null; c2=c2.nextE) {
            if (cluster1 && c2.inCluster)             continue;
            final double d2=c1.distance2(c2);
            if (d2 < min) {
              min=d2;
              other=c2;
            }
          }
          if (xBin > 0) {
            for (ExtendedClusterPoint c2=grid[xBin - 1][yBin + 1]; c2 != null; c2=c2.nextE) {
              if (cluster1 && c2.inCluster)               continue;
              final double d2=c1.distance2(c2);
              if (d2 < min) {
                min=d2;
                other=c2;
              }
            }
          }
        }
        if (xBin < nXBins - 1) {
          for (ExtendedClusterPoint c2=grid[xBin + 1][yBin]; c2 != null; c2=c2.nextE) {
            if (cluster1 && c2.inCluster)             continue;
            final double d2=c1.distance2(c2);
            if (d2 < min) {
              min=d2;
              other=c2;
            }
          }
          if (yBin < nYBins - 1) {
            for (ExtendedClusterPoint c2=grid[xBin + 1][yBin + 1]; c2 != null; c2=c2.nextE) {
              if (cluster1 && c2.inCluster)               continue;
              final double d2=c1.distance2(c2);
              if (d2 < min) {
                min=d2;
                other=c2;
              }
            }
          }
        }
        if (other != null) {
          pair1=c1;
          pair2=other;
        }
      }
    }
  }
  if (pair1 != null) {
    int nProcessed=1;
    if (pair1.inCluster && pair2.inCluster) {
      throw new RuntimeException(""String_Node_Str"");
    }
 else     if (pair1.inCluster) {
      clusterId[pair2.id]=clusterId[pair1.id];
      pair2.inCluster=true;
    }
 else     if (pair2.inCluster) {
      clusterId[pair1.id]=clusterId[pair2.id];
      pair1.inCluster=true;
    }
 else {
      nProcessed=2;
      clusterId[pair1.id]=clusterId[pair2.id]=++nextClusterId;
      pair1.inCluster=pair2.inCluster=true;
    }
    if (trackJoins) {
      if (pair1.next.id == pair2.next.id)       intraIdDistances[intraIdCount++]=Math.sqrt(min);
 else       interIdDistances[interIdCount++]=Math.sqrt(min);
    }
    return nProcessed;
  }
  return 0;
}",0.9262644728823888
149593,"/** 
 * Fits a 2D Gaussian to the given data. Fits all the specified peaks. <p> Data must be arranged in yx block order, i.e. height rows of width.
 * @param data
 * @param width
 * @param height
 * @param index Index of the data to fit
 * @param estimatedHeight Estimated height for the peak (input from smoothed data)
 * @return Array containing the fitted curve data: The first value is the Background. The remaining values areAmplitude, PosX, PosY, StdDevX, StdDevY for each fitted peak. <p> Null if no fit is possible.
 */
private float[] fitSingle(Gaussian2DFitter gf,float[] data,int width,int height,int index,float estimatedHeight){
  this.fitResult=gf.fit(data,width,height,new int[]{index},new float[]{estimatedHeight});
  if (fitResult.getStatus() == FitStatus.OK) {
    chiSquared=fitResult.getError();
    float[] params=fitResult.getParameters();
    convertParameters(params);
    return params;
  }
  return null;
}","/** 
 * Fits a 2D Gaussian to the given data. Fits all the specified peaks. <p> Data must be arranged in yx block order, i.e. height rows of width.
 * @param data
 * @param width
 * @param height
 * @param index Index of the data to fit
 * @param estimatedHeight Estimated height for the peak (input from smoothed data)
 * @return Array containing the fitted curve data: The first value is the Background. The remaining values areAmplitude, PosX, PosY, StdDevX, StdDevY for each fitted peak. <p> Null if no fit is possible.
 */
private float[] fitSingle(Gaussian2DFitter gf,float[] data,int width,int height,int index,float estimatedHeight){
  this.fitResult=gf.fit(data,width,height,new int[]{index},new float[]{estimatedHeight});
  if (fitResult.getStatus() == FitStatus.OK) {
    chiSquared=fitResult.getError();
    float[] params=fitResult.getParameters();
    convertParameters(params);
    if (params[Gaussian2DFunction.X_POSITION] < 0 || params[Gaussian2DFunction.X_POSITION] > width || params[Gaussian2DFunction.Y_POSITION] < 0 || params[Gaussian2DFunction.Y_POSITION] > height) {
      fitResult=new FitResult(FitStatus.COORDINATES_MOVED,fitResult.getDegreesOfFreedom(),fitResult.getError(),fitResult.getInitialParameters(),fitResult.getParameters(),fitResult.getParameterStdDev(),fitResult.getNumberOfPeaks(),fitResult.getNumberOfFittedParameters(),fitResult.getStatusData());
      return null;
    }
    return params;
  }
  return null;
}",0.761744966442953
149594,"private String getReason(FitStatus status){
switch (status) {
case SINGULAR_NON_LINEAR_MODEL:
    return ""String_Node_Str"";
case FAILED_TO_CONVERGE:
  return ""String_Node_Str"";
default :
return ""String_Node_Str"" + status.toString().toLowerCase(null).replace(""String_Node_Str"",""String_Node_Str"");
}
}","private String getReason(FitStatus status){
switch (status) {
case SINGULAR_NON_LINEAR_MODEL:
    return ""String_Node_Str"";
case FAILED_TO_CONVERGE:
  return ""String_Node_Str"";
default :
return ""String_Node_Str"" + status.toString().toLowerCase().replace(""String_Node_Str"",""String_Node_Str"");
}
}",0.9932659932659932
149595,"public synchronized void write(String description,S sequence){
  try {
    outputStream.write('>');
    if (description != null)     outputStream.write(description.getBytes());
    outputStream.write('\n');
    byte[] seq=sequence.toString().getBytes();
    int pointer=0;
    while (true) {
      if (seq.length - pointer <= maxLength) {
        outputStream.write(seq,pointer,seq.length - pointer);
        break;
      }
 else {
        outputStream.write(seq,pointer,maxLength);
        pointer+=maxLength;
      }
    }
    outputStream.write('\n');
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public synchronized void write(String description,S sequence){
  try {
    outputStream.write('>');
    if (description != null)     outputStream.write(description.getBytes());
    outputStream.write('\n');
    byte[] seq=sequence.toString().getBytes();
    int pointer=0;
    do {
      if (seq.length - pointer <= maxLength)       outputStream.write(seq,pointer,seq.length - pointer);
 else       outputStream.write(seq,pointer,maxLength);
      pointer+=maxLength;
      outputStream.write('\n');
    }
 while (seq.length > pointer);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.914332784184514
149596,"public Map.Entry<Range,S> ensureEntry(Range range){
  Range direct=range.isReverse() ? range.inverse() : range;
  Map.Entry<Range,S> entry=sequences.findContaining(direct);
  if (entry != null)   return entry;
  List<Map.Entry<Range,S>> allIntersecting=sequences.findAllIntersectingOrTouching(range);
  int resFrom=range.getFrom(), resTo=range.getTo();
  if (!allIntersecting.isEmpty()) {
    Range tmp=allIntersecting.get(0).getKey();
    if (tmp.containsBoundary(resFrom)) {
      resFrom=Math.min(resFrom,tmp.getFrom());
    }
    tmp=allIntersecting.get(allIntersecting.size() - 1).getKey();
    if (tmp.containsBoundary(resTo)) {
      resTo=Math.max(resTo,tmp.getTo());
    }
  }
  Range rr=new Range(resFrom,resTo);
  S seq=provider.getRegion(rr);
  for (  Map.Entry<Range,S> e : allIntersecting) {
    int length=e.getKey().length();
    S s=e.getValue();
    for (int i=0, j=e.getKey().getFrom() - rr.getFrom(); i < length; ++i, ++j)     if (seq.codeAt(j) != s.codeAt(i))     throw new IllegalStateException(""String_Node_Str"");
    sequences.remove(e.getKey());
  }
  sequences.put(rr,seq);
  return new AbstractMap.SimpleEntry<>(rr,seq);
}","public Map.Entry<Range,S> ensureEntry(Range range){
  if (range.isReverse())   throw new IllegalArgumentException(""String_Node_Str"");
  Range direct=range.isReverse() ? range.inverse() : range;
  Map.Entry<Range,S> entry=sequences.findContaining(direct);
  if (entry != null)   return entry;
  List<Map.Entry<Range,S>> allIntersecting=sequences.findAllIntersectingOrTouching(range);
  int resFrom=range.getFrom(), resTo=range.getTo();
  if (!allIntersecting.isEmpty()) {
    Range tmp=allIntersecting.get(0).getKey();
    if (tmp.containsBoundary(resFrom)) {
      resFrom=Math.min(resFrom,tmp.getFrom());
    }
    tmp=allIntersecting.get(allIntersecting.size() - 1).getKey();
    if (tmp.containsBoundary(resTo)) {
      resTo=Math.max(resTo,tmp.getTo());
    }
  }
  Range rr=new Range(resFrom,resTo);
  S seq=provider.getRegion(rr);
  for (  Map.Entry<Range,S> e : allIntersecting) {
    int length=e.getKey().length();
    S s=e.getValue();
    for (int i=0, j=e.getKey().getFrom() - rr.getFrom(); i < length; ++i, ++j)     if (seq.codeAt(j) != s.codeAt(i))     throw new IllegalStateException(""String_Node_Str"");
    sequences.remove(e.getKey());
  }
  sequences.put(rr,seq);
  return new AbstractMap.SimpleEntry<>(rr,seq);
}",0.965546218487395
149597,"/** 
 * Performs truncation of cluster from the right side. - if byIndex = true  : till the index of last cluster record will be < truncationPoint - if byIndex = false : till the positionInTarget of last cluster record will be < truncationPoint
 * @param byIndex         determine truncation type
 * @param seedPositions   seed positions
 * @param results         cluster data
 * @param data            records data
 * @param dataTo          use only [0..dataTo] records from data
 * @param clusterPointer  pointer to target cluster
 * @param truncationPoint main truncation threshold
 * @return {@literal true} if cluster remains to have score above the threshold (absoluteMinClusterScore);{@literal false} if cluster was removed due to too low score
 */
private boolean truncateClusterFromRight(boolean byIndex,final IntArrayList seedPositions,final IntArrayList results,final int[] data,final int dataTo,final int clusterPointer,final int truncationPoint){
  if (stat != null)   stat.trimmingEvent(byIndex ? TrimRightQuery : TrimRightTarget);
  int lastRecordId=results.get(clusterPointer + FIRST_RECORD_ID), record=data[lastRecordId], prevOffset=offset(record), prevIndex=index(record), score=matchScore;
  int i=lastRecordId;
  while (++i < dataTo && prevIndex == index(data[i]))   ;
  int offset, index;
  for (; i < dataTo && (byIndex ? index(data[i]) < truncationPoint : (positionInTarget(seedPositions,data[i]) < truncationPoint)); ++i) {
    index=index(data[i]);
    offset=offset(data[i]);
    if (inDelta(prevOffset,offset,maxClusterIndels)) {
      if (i < dataTo - 1 && index == index(data[i + 1]) && abs(prevOffset - offset) > abs(prevOffset - offset(data[i + 1])))       continue;
      int scoreDelta=matchScore + (index - prevIndex - 1) * mismatchScore + abs(prevOffset - offset) * offsetShiftScore;
      if (scoreDelta > 0) {
        score+=scoreDelta;
        prevOffset=offset;
        prevIndex=index;
        lastRecordId=i;
      }
    }
  }
  results.set(clusterPointer + LAST_RECORD_ID,lastRecordId);
  results.set(clusterPointer + SCORE,score);
  if (score < absoluteMinClusterScore) {
    results.set(clusterPointer + FIRST_RECORD_ID,DROPPED_CLUSTER);
    return false;
  }
  return true;
}","/** 
 * Performs truncation of cluster from the right side. - if byIndex = true  : till the index of last cluster record will be < truncationPoint - if byIndex = false : till the positionInTarget of last cluster record will be < truncationPoint
 * @param byIndex         determine truncation type
 * @param seedPositions   seed positions
 * @param results         cluster data
 * @param data            records data
 * @param dataTo          use only [0..dataTo] records from data
 * @param clusterPointer  pointer to target cluster
 * @param truncationPoint main truncation threshold
 * @return {@literal true} if cluster remains to have score above the threshold (absoluteMinClusterScore);{@literal false} if cluster was removed due to too low score
 */
private boolean truncateClusterFromRight(boolean byIndex,final IntArrayList seedPositions,final IntArrayList results,final int[] data,final int dataTo,final int clusterPointer,final int truncationPoint){
}",0.6042125117887457
149598,"public void printResult(String title,BenchmarkResults result){
  System.out.println(title);
  System.out.println(""String_Node_Str"" + TestUtil.time(result.getAverageTiming()));
  System.out.println(""String_Node_Str"" + result.getStat().totalTime.mean() + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + result.getStat().seedExtractionTime.mean() + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + result.getStat().hitCalculationTime.mean() + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + result.getStat().mapperTotalTime.mean() + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + result.getStat().alignerTime.mean() + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + (result.getBadFraction() * 100) + ""String_Node_Str"");
  System.out.println();
}","public static void printResult(String title,BenchmarkResults result){
  System.out.println(title);
  System.out.println(""String_Node_Str"" + TestUtil.time(result.getAverageTiming()));
  System.out.println(""String_Node_Str"" + result.getStat().totalTime.mean() + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + result.getStat().seedExtractionTime.mean() + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + result.getStat().hitCalculationTime.mean() + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + result.getStat().mapperTotalTime.mean() + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + result.getStat().alignerTime.mean() + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + (result.getBadFraction() * 100) + ""String_Node_Str"");
  System.out.println();
}",0.9956816779765576
149599,"public Alignment(S sequence1,Mutations<S> mutations,Range sequence1Range,Range sequence2Range,float score){
  if (!mutations.isEmpty()) {
    if (!mutations.isCompatibleWith(sequence1) || !sequence1Range.contains(mutations.getMutatedRange()) || sequence1Range.length() + mutations.getLengthDelta() != sequence2Range.length())     throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (sequence1Range.length() != sequence2Range.length())   throw new IllegalArgumentException(""String_Node_Str"");
  this.sequence1=sequence1;
  this.mutations=mutations;
  this.sequence1Range=sequence1Range;
  this.sequence2Range=sequence2Range;
  this.score=score;
}","public Alignment(S sequence1,Mutations<S> mutations,Range sequence1Range,Range sequence2Range,float score){
  if (!mutations.isEmpty()) {
    if (!mutations.isCompatibleWith(sequence1) || !sequence1Range.contains(mutations.getMutatedRange()) || sequence1Range.length() + mutations.getLengthDelta() != sequence2Range.length())     throw new IllegalArgumentException(""String_Node_Str"" + mutations + ""String_Node_Str""+ sequence1Range+ ""String_Node_Str""+ sequence2Range);
  }
 else   if (sequence1Range.length() != sequence2Range.length())   throw new IllegalArgumentException(""String_Node_Str"");
  this.sequence1=sequence1;
  this.mutations=mutations;
  this.sequence1Range=sequence1Range;
  this.sequence2Range=sequence2Range;
  this.score=score;
}",0.9410929737402411
149600,"public static BandedSemiLocalResult semiLocalLeft0(final AffineGapAlignmentScoring<NucleotideSequence> scoring,final NucleotideSequence seq1,final NucleotideSequence seq2,int offset1,int length1,int offset2,int length2,final int width,final MutationsBuilder<NucleotideSequence> mutations,final MatrixCache cache){
  if (length1 == 0 || length2 == 0)   return new BandedSemiLocalResult(offset1 + length1,offset2 + length2,0);
  offset1+=length1;
  offset2+=length2;
  int minLength=Math.min(length1,length2) + width;
  length1=Math.min(length1,minLength);
  length2=Math.min(length2,minLength);
  offset1-=length1;
  offset2-=length2;
  int size1=length1 + 1, size2=length2 + 1;
  cache.prepareMatrices(size1,size2,width,scoring);
  BandedMatrix main=cache.main;
  BandedMatrix gapIn1=cache.gapIn1;
  BandedMatrix gapIn2=cache.gapIn2;
  int i, j;
  int match, gap1, gap2, to;
  int maxI=0, maxJ=0, maxScore=Integer.MIN_VALUE;
  final int gapExtensionPenalty=scoring.getGapExtensionPenalty();
  for (i=0; i < length1; ++i) {
    to=Math.min(i + main.getRowFactor() - main.getColumnDelta() + 1,length2);
    for (j=Math.max(0,i - main.getColumnDelta()); j < to; ++j) {
      match=main.get(i,j) + scoring.getScore(seq1.codeAt(offset1 + length1 - 1 - i),seq2.codeAt(offset2 + length2 - 1 - j));
      gap1=Math.max(main.get(i + 1,j) + scoring.getGapOpenPenalty(),gapIn1.get(i + 1,j) + gapExtensionPenalty);
      gap2=Math.max(main.get(i,j + 1) + scoring.getGapOpenPenalty(),gapIn2.get(i,j + 1) + gapExtensionPenalty);
      gapIn1.set(i + 1,j + 1,gap1);
      gapIn2.set(i + 1,j + 1,gap2);
      int score=Math.max(match,Math.max(gap1,gap2));
      main.set(i + 1,j + 1,score);
      if (score > maxScore) {
        maxScore=score;
        maxI=i;
        maxJ=j;
      }
    }
  }
  i=maxI;
  j=maxJ;
  int pScore=main.get(i + 1,j + 1);
  byte c1, c2;
  while (i >= 0 || j >= 0) {
    if (i >= 0 && pScore == gapIn2.get(i + 1,j + 1)) {
      if (pScore == gapIn2.get(i,j + 1) + gapExtensionPenalty)       pScore=gapIn2.get(i,j + 1);
 else       pScore=main.get(i,j + 1);
      mutations.appendDeletion(offset1 + length1 - 1 - i,seq1.codeAt(offset1 + length1 - 1 - i));
      --i;
    }
 else     if (j >= 0 && pScore == gapIn1.get(i + 1,j + 1)) {
      if (pScore == gapIn1.get(i + 1,j) + gapExtensionPenalty)       pScore=gapIn1.get(i + 1,j);
 else       pScore=main.get(i + 1,j);
      mutations.appendInsertion(offset1 + length1 - 1 - i,seq2.codeAt(offset2 + length2 - 1 - j));
      --j;
    }
 else     if (i >= 0 && j >= 0 && pScore == main.get(i,j) + scoring.getScore(c1=seq1.codeAt(offset1 + length1 - 1 - i),c2=seq2.codeAt(offset2 + length2 - 1 - j))) {
      pScore=main.get(i,j);
      if (c1 != c2)       mutations.appendSubstitution(offset1 + length1 - 1 - i,c1,c2);
      --i;
      --j;
    }
 else     throw new RuntimeException();
  }
  return new BandedSemiLocalResult(offset1 + length1 - 1 - maxI,offset2 + length2 - 1 - maxJ,maxScore);
}","public static BandedSemiLocalResult semiLocalLeft0(final AffineGapAlignmentScoring<NucleotideSequence> scoring,final NucleotideSequence seq1,final NucleotideSequence seq2,int offset1,int length1,int offset2,int length2,final int width,final MutationsBuilder<NucleotideSequence> mutations,final MatrixCache cache){
  if (length1 == 0 || length2 == 0)   return new BandedSemiLocalResult(offset1 + length1,offset2 + length2,0);
  offset1+=length1;
  offset2+=length2;
  int minLength=Math.min(length1,length2) + width;
  length1=Math.min(length1,minLength);
  length2=Math.min(length2,minLength);
  offset1-=length1;
  offset2-=length2;
  int size1=length1 + 1, size2=length2 + 1;
  cache.prepareMatrices(size1,size2,width,scoring);
  BandedMatrix main=cache.main;
  BandedMatrix gapIn1=cache.gapIn1;
  BandedMatrix gapIn2=cache.gapIn2;
  int i, j;
  int match, gap1, gap2, to;
  int maxI=-1, maxJ=-1, maxScore=0;
  final int gapExtensionPenalty=scoring.getGapExtensionPenalty();
  for (i=0; i < length1; ++i) {
    to=Math.min(i + main.getRowFactor() - main.getColumnDelta() + 1,length2);
    for (j=Math.max(0,i - main.getColumnDelta()); j < to; ++j) {
      match=main.get(i,j) + scoring.getScore(seq1.codeAt(offset1 + length1 - 1 - i),seq2.codeAt(offset2 + length2 - 1 - j));
      gap1=Math.max(main.get(i + 1,j) + scoring.getGapOpenPenalty(),gapIn1.get(i + 1,j) + gapExtensionPenalty);
      gap2=Math.max(main.get(i,j + 1) + scoring.getGapOpenPenalty(),gapIn2.get(i,j + 1) + gapExtensionPenalty);
      gapIn1.set(i + 1,j + 1,gap1);
      gapIn2.set(i + 1,j + 1,gap2);
      int score=Math.max(match,Math.max(gap1,gap2));
      main.set(i + 1,j + 1,score);
      if (score > maxScore) {
        maxScore=score;
        maxI=i;
        maxJ=j;
      }
    }
  }
  i=maxI;
  j=maxJ;
  int pScore=main.get(i + 1,j + 1);
  byte c1, c2;
  while (i >= 0 || j >= 0) {
    if (i >= 0 && pScore == gapIn2.get(i + 1,j + 1)) {
      if (pScore == gapIn2.get(i,j + 1) + gapExtensionPenalty)       pScore=gapIn2.get(i,j + 1);
 else       pScore=main.get(i,j + 1);
      mutations.appendDeletion(offset1 + length1 - 1 - i,seq1.codeAt(offset1 + length1 - 1 - i));
      --i;
    }
 else     if (j >= 0 && pScore == gapIn1.get(i + 1,j + 1)) {
      if (pScore == gapIn1.get(i + 1,j) + gapExtensionPenalty)       pScore=gapIn1.get(i + 1,j);
 else       pScore=main.get(i + 1,j);
      mutations.appendInsertion(offset1 + length1 - 1 - i,seq2.codeAt(offset2 + length2 - 1 - j));
      --j;
    }
 else     if (i >= 0 && j >= 0 && pScore == main.get(i,j) + scoring.getScore(c1=seq1.codeAt(offset1 + length1 - 1 - i),c2=seq2.codeAt(offset2 + length2 - 1 - j))) {
      pScore=main.get(i,j);
      if (c1 != c2)       mutations.appendSubstitution(offset1 + length1 - 1 - i,c1,c2);
      --i;
      --j;
    }
 else     throw new RuntimeException();
  }
  return new BandedSemiLocalResult(offset1 + length1 - 1 - maxI,offset2 + length2 - 1 - maxJ,maxScore);
}",0.9959294436906376
149601,"public static BandedSemiLocalResult semiLocalRight0(final AffineGapAlignmentScoring<NucleotideSequence> scoring,final NucleotideSequence seq1,final NucleotideSequence seq2,final int offset1,int length1,final int offset2,int length2,final int width,final MutationsBuilder<NucleotideSequence> mutations,final MatrixCache cache){
  if (length1 == 0 || length2 == 0)   return new BandedSemiLocalResult(offset1 - 1,offset2 - 1,0);
  int minLength=Math.min(length1,length2) + width;
  length1=Math.min(length1,minLength);
  length2=Math.min(length2,minLength);
  int size1=length1 + 1, size2=length2 + 1;
  cache.prepareMatrices(size1,size2,width,scoring);
  BandedMatrix main=cache.main;
  BandedMatrix gapIn1=cache.gapIn1;
  BandedMatrix gapIn2=cache.gapIn2;
  int i, j;
  int match, gap1, gap2, to;
  int maxI=0, maxJ=0, maxScore=Integer.MIN_VALUE;
  final int gapExtensionPenalty=scoring.getGapExtensionPenalty();
  for (i=0; i < length1; ++i) {
    to=Math.min(i + main.getRowFactor() - main.getColumnDelta() + 1,length2);
    for (j=Math.max(0,i - main.getColumnDelta()); j < to; ++j) {
      match=main.get(i,j) + scoring.getScore(seq1.codeAt(offset1 + i),seq2.codeAt(offset2 + j));
      gap1=Math.max(main.get(i + 1,j) + scoring.getGapOpenPenalty(),gapIn1.get(i + 1,j) + gapExtensionPenalty);
      gap2=Math.max(main.get(i,j + 1) + scoring.getGapOpenPenalty(),gapIn2.get(i,j + 1) + gapExtensionPenalty);
      gapIn1.set(i + 1,j + 1,gap1);
      gapIn2.set(i + 1,j + 1,gap2);
      int score=Math.max(match,Math.max(gap1,gap2));
      main.set(i + 1,j + 1,score);
      if (score > maxScore) {
        maxScore=score;
        maxI=i;
        maxJ=j;
      }
    }
  }
  to=mutations.size();
  i=maxI;
  j=maxJ;
  int pScore=main.get(i + 1,j + 1);
  byte c1, c2;
  while (i >= 0 || j >= 0) {
    if (i >= 0 && pScore == gapIn2.get(i + 1,j + 1)) {
      if (pScore == gapIn2.get(i,j + 1) + gapExtensionPenalty)       pScore=gapIn2.get(i,j + 1);
 else       pScore=main.get(i,j + 1);
      mutations.appendDeletion(offset1 + i,seq1.codeAt(offset1 + i));
      --i;
    }
 else     if (j >= 0 && pScore == gapIn1.get(i + 1,j + 1)) {
      if (pScore == gapIn1.get(i + 1,j) + gapExtensionPenalty)       pScore=gapIn1.get(i + 1,j);
 else       pScore=main.get(i + 1,j);
      mutations.appendInsertion(offset1 + i + 1,seq2.codeAt(offset2 + j));
      --j;
    }
 else     if (i >= 0 && j >= 0 && pScore == main.get(i,j) + scoring.getScore(c1=seq1.codeAt(offset1 + i),c2=seq2.codeAt(offset2 + j))) {
      pScore=main.get(i,j);
      if (c1 != c2)       mutations.appendSubstitution(offset1 + i,c1,c2);
      --i;
      --j;
    }
 else     throw new RuntimeException();
  }
  mutations.reverseRange(to,mutations.size());
  return new BandedSemiLocalResult(offset1 + maxI,offset2 + maxJ,maxScore);
}","public static BandedSemiLocalResult semiLocalRight0(final AffineGapAlignmentScoring<NucleotideSequence> scoring,final NucleotideSequence seq1,final NucleotideSequence seq2,final int offset1,int length1,final int offset2,int length2,final int width,final MutationsBuilder<NucleotideSequence> mutations,final MatrixCache cache){
  if (length1 == 0 || length2 == 0)   return new BandedSemiLocalResult(offset1 - 1,offset2 - 1,0);
  int minLength=Math.min(length1,length2) + width;
  length1=Math.min(length1,minLength);
  length2=Math.min(length2,minLength);
  int size1=length1 + 1, size2=length2 + 1;
  cache.prepareMatrices(size1,size2,width,scoring);
  BandedMatrix main=cache.main;
  BandedMatrix gapIn1=cache.gapIn1;
  BandedMatrix gapIn2=cache.gapIn2;
  int i, j;
  int match, gap1, gap2, to;
  int maxI=-1, maxJ=-1, maxScore=0;
  final int gapExtensionPenalty=scoring.getGapExtensionPenalty();
  for (i=0; i < length1; ++i) {
    to=Math.min(i + main.getRowFactor() - main.getColumnDelta() + 1,length2);
    for (j=Math.max(0,i - main.getColumnDelta()); j < to; ++j) {
      match=main.get(i,j) + scoring.getScore(seq1.codeAt(offset1 + i),seq2.codeAt(offset2 + j));
      gap1=Math.max(main.get(i + 1,j) + scoring.getGapOpenPenalty(),gapIn1.get(i + 1,j) + gapExtensionPenalty);
      gap2=Math.max(main.get(i,j + 1) + scoring.getGapOpenPenalty(),gapIn2.get(i,j + 1) + gapExtensionPenalty);
      gapIn1.set(i + 1,j + 1,gap1);
      gapIn2.set(i + 1,j + 1,gap2);
      int score=Math.max(match,Math.max(gap1,gap2));
      main.set(i + 1,j + 1,score);
      if (score > maxScore) {
        maxScore=score;
        maxI=i;
        maxJ=j;
      }
    }
  }
  to=mutations.size();
  i=maxI;
  j=maxJ;
  int pScore=main.get(i + 1,j + 1);
  byte c1, c2;
  while (i >= 0 || j >= 0) {
    if (i >= 0 && pScore == gapIn2.get(i + 1,j + 1)) {
      if (pScore == gapIn2.get(i,j + 1) + gapExtensionPenalty)       pScore=gapIn2.get(i,j + 1);
 else       pScore=main.get(i,j + 1);
      mutations.appendDeletion(offset1 + i,seq1.codeAt(offset1 + i));
      --i;
    }
 else     if (j >= 0 && pScore == gapIn1.get(i + 1,j + 1)) {
      if (pScore == gapIn1.get(i + 1,j) + gapExtensionPenalty)       pScore=gapIn1.get(i + 1,j);
 else       pScore=main.get(i + 1,j);
      mutations.appendInsertion(offset1 + i + 1,seq2.codeAt(offset2 + j));
      --j;
    }
 else     if (i >= 0 && j >= 0 && pScore == main.get(i,j) + scoring.getScore(c1=seq1.codeAt(offset1 + i),c2=seq2.codeAt(offset2 + j))) {
      pScore=main.get(i,j);
      if (c1 != c2)       mutations.appendSubstitution(offset1 + i,c1,c2);
      --i;
      --j;
    }
 else     throw new RuntimeException();
  }
  mutations.reverseRange(to,mutations.size());
  return new BandedSemiLocalResult(offset1 + maxI,offset2 + maxJ,maxScore);
}",0.9956973825743994
149602,"@Override public BenchmarkResults process(BenchmarkInput input){
  RandomUtil.reseedThreadLocal(input.challenge.seed);
  KAligner2Statistics stat=new KAligner2Statistics();
  BatchAlignerWithBase<NucleotideSequence,Integer,? extends AlignmentHit> aligner=input.params.createAligner();
  NucleotideSequence[] db=input.challenge.getDB();
  for (int i=0; i < db.length; i++)   aligner.addReference(db[i],i);
  long executionTime=0;
  int processedQueries=0;
  int mismatched=0;
  int noHits=0;
  long start=System.nanoTime();
  OUTER:   for (  KAlignerQuery query : CUtils.it(input.challenge.queries())) {
    if (System.nanoTime() - start > maxExecutionTime)     break;
    if (noHits > maxNoHits)     break;
    long seed=RandomUtil.reseedThreadLocal();
    try {
      long b=System.nanoTime();
      AlignmentResult<? extends AlignmentHit> result=aligner.align(query.query);
      ++processedQueries;
      executionTime+=(System.nanoTime() - b);
      if (!result.hasHits()) {
        ++noHits;
        continue;
      }
      for (      AlignmentHit hit : result.getHits())       if (!query.query.getRange(hit.getAlignment().getSequence2Range()).equals(AlignmentUtils.getAlignedSequence2Part(hit.getAlignment())))       throw new RuntimeException(""String_Node_Str"");
      float topScore=result.getHits().get(0).getAlignment().getScore();
      for (      AlignmentHit hit : result.getHits()) {
        if (hit.getAlignment().getScore() != topScore)         break;
        if (hit.getRecordPayload().equals(query.targetId))         continue OUTER;
      }
      ++mismatched;
    }
 catch (    Exception e) {
      if (exceptionListener != null)       exceptionListener.onException(new ExceptionData(seed,e,db,query.query,input));
 else       throw e;
    }
  }
  return new BenchmarkResults(input,stat,executionTime,processedQueries,mismatched,noHits);
}","@Override public BenchmarkResults process(BenchmarkInput input){
  RandomUtil.reseedThreadLocal(input.challenge.seed);
  KAligner2Statistics stat=new KAligner2Statistics();
  BatchAlignerWithBase<NucleotideSequence,Integer,? extends AlignmentHit> aligner=input.params.createAligner();
  NucleotideSequence[] db=input.challenge.getDB();
  for (int i=0; i < db.length; i++)   aligner.addReference(db[i],i);
  long executionTime=0;
  int processedQueries=0;
  int processedGoodQueries=0;
  int falsePositives=0;
  int mismatched=0;
  int noHits=0;
  int scoreError=0;
  long start=System.nanoTime();
  OUTER:   for (  KAlignerQuery query : CUtils.it(input.challenge.queries())) {
    if (System.nanoTime() - start > maxExecutionTime)     break;
    if (noHits > maxNoHits)     break;
    long seed=RandomUtil.reseedThreadLocal();
    try {
      long b=System.nanoTime();
      AlignmentResult<? extends AlignmentHit> result=aligner.align(query.query);
      executionTime+=(System.nanoTime() - b);
      ++processedQueries;
      if (query.isFalse()) {
        if (result.hasHits())         ++falsePositives;
      }
 else {
        ++processedGoodQueries;
        if (!result.hasHits()) {
          ++noHits;
          continue;
        }
        for (        AlignmentHit hit : result.getHits())         if (!query.query.getRange(hit.getAlignment().getSequence2Range()).equals(AlignmentUtils.getAlignedSequence2Part(hit.getAlignment())))         throw new RuntimeException(""String_Node_Str"");
        float topScore=result.getHits().get(0).getAlignment().getScore();
        for (        AlignmentHit hit : result.getHits()) {
          if (hit.getAlignment().getScore() != topScore)           break;
          if (hit.getRecordPayload().equals(query.targetId)) {
            if (topScore < 0.95 * query.expectedAlignment.getScore()) {
              ++scoreError;
            }
            continue OUTER;
          }
        }
        ++mismatched;
      }
    }
 catch (    Exception e) {
      if (exceptionListener != null)       exceptionListener.onException(new ExceptionData(seed,e,db,query.query,input));
 else       throw e;
    }
  }
  return new BenchmarkResults(input,stat,executionTime,processedQueries,processedGoodQueries,falsePositives,mismatched,noHits,scoreError);
}",0.8565910188314824
149603,"public BenchmarkResults(BenchmarkInput input,KAligner2Statistics stat,long executionTime,int processedQueries,int mismatched,int noHits){
  this.input=input;
  this.stat=stat;
  this.executionTime=executionTime;
  this.processedQueries=processedQueries;
  this.mismatched=mismatched;
  this.noHits=noHits;
}","public BenchmarkResults(BenchmarkInput input,KAligner2Statistics stat,long executionTime,int processedQueries,int processedGoodQueries,int falsePositives,int mismatched,int noHits,int scoreError){
  this.input=input;
  this.stat=stat;
  this.executionTime=executionTime;
  this.processedQueries=processedQueries;
  this.processedGoodQueries=processedGoodQueries;
  this.falsePositives=falsePositives;
  this.mismatched=mismatched;
  this.noHits=noHits;
  this.scoreError=scoreError;
}",0.7762326169405815
149604,"public double getBadFraction(){
  return 1.0 * (noHits + mismatched) / processedQueries;
}","public double getBadFraction(){
  return 1.0 * (noHits + mismatched) / processedGoodQueries;
}",0.9782608695652174
149605,"public double getNoHitsFraction(){
  return 1.0 * noHits / processedQueries;
}","public double getNoHitsFraction(){
  return 1.0 * noHits / processedGoodQueries;
}",0.975
149606,"public double getMismatchedFraction(){
  return 1.0 * mismatched / processedQueries;
}","public double getMismatchedFraction(){
  return 1.0 * mismatched / processedGoodQueries;
}",0.9772727272727272
149607,"public ChallengeParameters(int dbSize,int dbMinSeqLength,int dbMaxSeqLength,int queryCount,int minClusters,int maxClusters,int minClusterLength,int maxClusterLength,int minIndelLength,int maxIndelLength,double insertionProbability,double deletionProbability,double boundaryInsertProbability,NucleotideMutationModel mutationModel,int minAlignmentScoring,int maxAlignmentScoring,AffineGapAlignmentScoring<NucleotideSequence> scoring){
  this.dbSize=dbSize;
  this.dbMinSeqLength=dbMinSeqLength;
  this.dbMaxSeqLength=dbMaxSeqLength;
  this.queryCount=queryCount;
  this.minClusters=minClusters;
  this.maxClusters=maxClusters;
  this.minClusterLength=minClusterLength;
  this.maxClusterLength=maxClusterLength;
  this.minIndelLength=minIndelLength;
  this.maxIndelLength=maxIndelLength;
  this.insertionProbability=insertionProbability;
  this.deletionProbability=deletionProbability;
  this.boundaryInsertProbability=boundaryInsertProbability;
  this.mutationModel=mutationModel;
  this.minAlignmentScoring=minAlignmentScoring;
  this.maxAlignmentScoring=maxAlignmentScoring;
  this.scoring=scoring;
}","public ChallengeParameters(int dbSize,int dbMinSeqLength,int dbMaxSeqLength,int queryCount,int falseCount,int minClusters,int maxClusters,int minClusterLength,int maxClusterLength,int minIndelLength,int maxIndelLength,double insertionProbability,double deletionProbability,double boundaryInsertProbability,NucleotideMutationModel mutationModel,int minAlignmentScoring,int maxAlignmentScoring,AffineGapAlignmentScoring<NucleotideSequence> scoring){
  this.dbSize=dbSize;
  this.dbMinSeqLength=dbMinSeqLength;
  this.dbMaxSeqLength=dbMaxSeqLength;
  this.queryCount=queryCount;
  this.falseCount=falseCount;
  this.minClusters=minClusters;
  this.maxClusters=maxClusters;
  this.minClusterLength=minClusterLength;
  this.maxClusterLength=maxClusterLength;
  this.minIndelLength=minIndelLength;
  this.maxIndelLength=maxIndelLength;
  this.insertionProbability=insertionProbability;
  this.deletionProbability=deletionProbability;
  this.boundaryInsertProbability=boundaryInsertProbability;
  this.mutationModel=mutationModel;
  this.minAlignmentScoring=minAlignmentScoring;
  this.maxAlignmentScoring=maxAlignmentScoring;
  this.scoring=scoring;
}",0.979955456570156
149608,"public ChallengeParameters setQueryCount(int newCount){
  return new ChallengeParameters(dbSize,dbMinSeqLength,dbMaxSeqLength,newCount,minClusters,maxClusters,minClusterLength,maxClusterLength,minIndelLength,maxIndelLength,insertionProbability,deletionProbability,boundaryInsertProbability,mutationModel,minAlignmentScoring,maxAlignmentScoring,scoring);
}","public ChallengeParameters setQueryCount(int newCount){
  return new ChallengeParameters(dbSize,dbMinSeqLength,dbMaxSeqLength,newCount,falseCount,minClusters,maxClusters,minClusterLength,maxClusterLength,minIndelLength,maxIndelLength,insertionProbability,deletionProbability,boundaryInsertProbability,mutationModel,minAlignmentScoring,maxAlignmentScoring,scoring);
}",0.984743411927878
149609,"public static ChallengeParameters getParamsOneCluster(AffineGapAlignmentScoring<NucleotideSequence> scoring,int minAlignmentScoring,int maxAlignmentScoring,double multiplier){
  return new ChallengeParameters(100,350,500,1000000,1,1,35,80,30,100,0.45,0.45,0.5,new GenericNucleotideMutationModel(SubstitutionModels.getEmpiricalNucleotideSubstitutionModel(),deletionProbability,insertionProbability).multiplyProbabilities(multiplier),minAlignmentScoring,maxAlignmentScoring,scoring);
}","public static ChallengeParameters getParamsOneCluster(AffineGapAlignmentScoring<NucleotideSequence> scoring,int minAlignmentScoring,int maxAlignmentScoring,double multiplier){
  return new ChallengeParameters(100,350,500,1000000,1000000,1,1,35,80,30,100,0.45,0.45,0.5,new GenericNucleotideMutationModel(SubstitutionModels.getEmpiricalNucleotideSubstitutionModel(),deletionProbability,insertionProbability).multiplyProbabilities(multiplier),minAlignmentScoring,maxAlignmentScoring,scoring);
}",0.9917864476386036
149610,"public static ChallengeParameters getParamsTwoClusters(AffineGapAlignmentScoring<NucleotideSequence> scoring,int minAlignmentScoring,int maxAlignmentScoring,double multiplier){
  return new ChallengeParameters(100,350,500,1000000,2,2,35,100,30,80,0.45,0.45,0.5,new GenericNucleotideMutationModel(SubstitutionModels.getEmpiricalNucleotideSubstitutionModel(),deletionProbability,insertionProbability).multiplyProbabilities(multiplier),minAlignmentScoring,maxAlignmentScoring,scoring);
}","public static ChallengeParameters getParamsTwoClusters(AffineGapAlignmentScoring<NucleotideSequence> scoring,int minAlignmentScoring,int maxAlignmentScoring,double multiplier){
  return new ChallengeParameters(100,350,500,1000000,1000000,2,2,35,100,30,80,0.45,0.45,0.5,new GenericNucleotideMutationModel(SubstitutionModels.getEmpiricalNucleotideSubstitutionModel(),deletionProbability,insertionProbability).multiplyProbabilities(multiplier),minAlignmentScoring,maxAlignmentScoring,scoring);
}",0.9918032786885246
149611,"public static ChallengeParameters getParams1NoGap(AffineGapAlignmentScoring<NucleotideSequence> scoring,int minAlignmentScoring,int maxAlignmentScoring,double multiplier){
  return new ChallengeParameters(100,100,500,100000,1,4,15,50,3,30,0.45,0.45,0.5,new GenericNucleotideMutationModel(SubstitutionModels.getEmpiricalNucleotideSubstitutionModel(),0,0).multiplyProbabilities(multiplier),minAlignmentScoring,maxAlignmentScoring,scoring);
}","public static ChallengeParameters getParams1NoGap(AffineGapAlignmentScoring<NucleotideSequence> scoring,int minAlignmentScoring,int maxAlignmentScoring,double multiplier){
  return new ChallengeParameters(100,100,500,100000,1000000,1,4,15,50,3,30,0.45,0.45,0.5,new GenericNucleotideMutationModel(SubstitutionModels.getEmpiricalNucleotideSubstitutionModel(),0,0).multiplyProbabilities(multiplier),minAlignmentScoring,maxAlignmentScoring,scoring);
}",0.9909706546275396
149612,"public KAlignerQuery(int targetId,List<Range> queryClusters,List<Range> targetClusters,List<Mutations<NucleotideSequence>> mutationsInTarget,NucleotideSequence query,Alignment<NucleotideSequence> expectedAlignment){
  this.targetId=targetId;
  this.queryClusters=queryClusters;
  this.targetClusters=targetClusters;
  this.mutationsInTarget=mutationsInTarget;
  this.query=query;
  this.expectedAlignment=expectedAlignment;
}","public KAlignerQuery(NucleotideSequence sequence){
  this(-1,null,null,null,sequence,null);
}",0.2509652509652509
149613,"public BatchAlignmentResult<S> align(final S sequence){
  ArrayList<BatchAlignmentHit<S>> alignments=new ArrayList<>(references.size());
  for (int i=0; i < alignments.size(); i++)   alignments.add(alignSingle(i,sequence));
  Collections.sort(alignments,new HitComparator());
  float topScore=alignments.get(0).getAlignment().getScore();
  float scoreThreshold=Math.max(topScore * parameters.getRelativeMinScore(),parameters.getAbsoluteMinScore());
  for (int i=0; i < alignments.size(); i++)   if (i == parameters.getMaxHits() || alignments.get(i).getAlignment().getScore() < scoreThreshold)   return new BatchAlignmentResult<>(new ArrayList<>(alignments.subList(0,i)));
  return new BatchAlignmentResult<>(alignments);
}","public BatchAlignmentResult<S> align(final S sequence){
  ArrayList<BatchAlignmentHit<S>> alignments=new ArrayList<>(references.size());
  for (int i=0; i < references.size(); i++)   alignments.add(alignSingle(i,sequence));
  Collections.sort(alignments,new HitComparator());
  float topScore=alignments.get(0).getAlignment().getScore();
  float scoreThreshold=Math.max(topScore * parameters.getRelativeMinScore(),parameters.getAbsoluteMinScore());
  for (int i=0; i < alignments.size(); i++)   if (i == parameters.getMaxHits() || alignments.get(i).getAlignment().getScore() < scoreThreshold)   return new BatchAlignmentResult<>(new ArrayList<>(alignments.subList(0,i)));
  return new BatchAlignmentResult<>(alignments);
}",0.9875346260387812
149614,"@Override public synchronized void write(SingleRead read){
  int pointer=this.pointer;
  String description=read.getDescription();
  int len=description.length();
  flushIfNeededToWrite(len + 1);
  buffer[pointer++]='@';
  for (int i=0; i < len; ++i)   buffer[pointer++]=(byte)description.charAt(i);
  NucleotideSequence sequence=read.getData().getSequence();
  SequenceQuality quality=read.getData().getQuality();
  len=sequence.size();
  flushIfNeededToWrite(len + 2);
  buffer[pointer++]='\n';
  for (int i=0; i < len; ++i)   buffer[pointer++]=NucleotideAlphabet.symbolByteFromCode(sequence.codeAt(i));
  buffer[pointer++]='\n';
  flushIfNeededToWrite(len + 3);
  buffer[pointer++]='+';
  buffer[pointer++]='\n';
  quality.encodeTo(qualityFormat,buffer,pointer);
  pointer+=len;
  buffer[pointer++]='\n';
  this.pointer=pointer;
}","@Override public synchronized void write(SingleRead read){
  String description=read.getDescription();
  int len=description.length();
  flushIfNeededToWrite(len + 1);
  buffer[pointer++]='@';
  for (int i=0; i < len; ++i)   buffer[pointer++]=(byte)description.charAt(i);
  NucleotideSequence sequence=read.getData().getSequence();
  SequenceQuality quality=read.getData().getQuality();
  len=sequence.size();
  flushIfNeededToWrite(len + 2);
  buffer[pointer++]='\n';
  for (int i=0; i < len; ++i)   buffer[pointer++]=NucleotideAlphabet.symbolByteFromCode(sequence.codeAt(i));
  buffer[pointer++]='\n';
  flushIfNeededToWrite(len + 3);
  buffer[pointer++]='+';
  buffer[pointer++]='\n';
  quality.encodeTo(qualityFormat,buffer,pointer);
  pointer+=len;
  buffer[pointer++]='\n';
}",0.9677819083023544
149615,"public void flushIfNeededToWrite(int sizeToWrite){
  if (buffer.length - pointer < sizeToWrite)   flush();
}","private void flushIfNeededToWrite(int sizeToWrite){
  if (buffer.length - pointer < sizeToWrite)   flush();
}",0.9585253456221198
149616,"@Override public SequenceBuilder<S> getBuilder(){
  return new ArraySequenceBuilder<S>(this);
}","@Override public SequenceBuilder<S> getBuilder(){
  return new ArraySequenceBuilder<>(this);
}",0.9947089947089948
149617,"@Override public B append(S seq){
  ensureInternalCapacity(size + seq.size());
  System.arraycopy(getUnsafe(seq),0,data,size,seq.size());
  size+=seq.size();
  return (B)this;
}","@Override public B append(S seq){
  if (seq.size() == 0)   return (B)this;
  ensureInternalCapacity(size + seq.size());
  System.arraycopy(getUnsafe(seq),0,data,size,seq.size());
  size+=seq.size();
  return (B)this;
}",0.8962025316455696
149618,"@Override public SequenceBuilder<S> append(byte[] letters){
  ensureInternalCapacity(size + letters.length);
  System.arraycopy(letters,0,data,size,letters.length);
  size+=letters.length;
  return this;
}","@Override public SequenceBuilder<S> append(byte[] letters){
  if (letters.length == 0)   return this;
  ensureInternalCapacity(size + letters.length);
  System.arraycopy(letters,0,data,size,letters.length);
  size+=letters.length;
  return this;
}",0.9070796460176992
149619,"private void ensureInternalCapacity(int newSize){
  if (size == -1)   throw new IllegalStateException(""String_Node_Str"");
  if (storage == null && newSize != 0)   storage=new Bit2Array(Math.max(newSize,10));
  if (storage.size() < newSize)   storage=storage.extend(Math.max(newSize,3 * storage.size() / 2 + 1));
}","private void ensureInternalCapacity(int newSize){
  if (size == -1)   throw new IllegalStateException(""String_Node_Str"");
  if (newSize > 0) {
    if (storage == null)     storage=new Bit2Array(Math.max(newSize,10));
    if (storage.size() < newSize)     storage=storage.extend(Math.max(newSize,3 * storage.size() / 2 + 1));
  }
}",0.9206842923794712
149620,"@Override public NucleotideSequenceBuilder append(NucleotideSequence seq){
  ensureInternalCapacity(size + seq.size());
  storage.copyFrom(seq.data,0,size,seq.size());
  size+=seq.size();
  return this;
}","@Override public NucleotideSequenceBuilder append(NucleotideSequence seq){
  if (seq.size() == 0)   return this;
  ensureInternalCapacity(size + seq.size());
  storage.copyFrom(seq.data,0,size,seq.size());
  size+=seq.size();
  return this;
}",0.9147982062780268
149621,"void fillBuffer(int size) throws IOException {
  if (closed.get())   return;
  byte[] newBuffer;
  if (lazyReads)   newBuffer=new byte[size];
 else {
    if (buffer == null)     buffer=new byte[size];
    if (buffer.length != size)     newBuffer=new byte[size];
 else     newBuffer=buffer;
  }
  if (buffer != null)   System.arraycopy(buffer,pointer,newBuffer,0,currentBufferSize - pointer);
  int readBytes=inputStream.read(newBuffer,currentBufferSize - pointer,newBuffer.length - currentBufferSize + pointer);
  currentBufferSize=(readBytes == -1 ? 0 : readBytes) + currentBufferSize - pointer;
  pointer=0;
  buffer=newBuffer;
  if (readBytes == -1 && autoClose)   close();
}","void fillBuffer(int size) throws IOException {
  if (closed.get())   return;
  byte[] newBuffer;
  if (lazyReads)   newBuffer=new byte[size];
 else {
    if (buffer == null)     buffer=new byte[size];
    if (buffer.length != size)     newBuffer=new byte[size];
 else     newBuffer=buffer;
  }
  if (buffer != null)   System.arraycopy(buffer,pointer,newBuffer,0,currentBufferSize - pointer);
  int readBytes=inputStream.readFully(newBuffer,currentBufferSize - pointer,newBuffer.length - currentBufferSize + pointer);
  currentBufferSize=(readBytes == -1 ? 0 : readBytes) + currentBufferSize - pointer;
  pointer=0;
  buffer=newBuffer;
  if (readBytes == -1 && autoClose)   close();
}",0.9963262307127112
149622,"private static InputDataWrapper create(final RandomAccessFile stream){
  return new InputDataWrapper(){
    @Override public int read(    byte[] buffer,    int off,    int len) throws IOException {
      return stream.read(buffer,off,len);
    }
    @Override public void close() throws IOException {
      stream.close();
    }
  }
;
}","private static final InputDataWrapper create(final RandomAccessFile stream){
  return new InputDataWrapper(){
    @Override public int read(    byte[] buffer,    int off,    int len) throws IOException {
      return stream.read(buffer,off,len);
    }
    @Override public void close() throws IOException {
      stream.close();
    }
  }
;
}",0.991150442477876
149623,"@Override public void readFromNBT(NBTTagCompound arg0){
  tank.readFromNBT(arg0);
  if (arg0.hasKey(""String_Node_Str""))   ticksFromLastDrain=arg0.getInteger(""String_Node_Str"");
}","@Override public void readFromNBT(NBTTagCompound arg0){
  tank.readFromNBT(arg0);
  if (arg0.hasKey(""String_Node_Str""))   ticksFromLastDrain=arg0.getInteger(""String_Node_Str"");
  if (arg0.hasKey(""String_Node_Str""))   active=arg0.getBoolean(""String_Node_Str"");
}",0.8109339407744874
149624,"@Override protected void isMachineWhole() throws MultiblockValidationException {
  if (controlers.size() < 2) {
    throw new MultiblockValidationException(""String_Node_Str"");
  }
}","@Override protected void isMachineWhole() throws MultiblockValidationException {
  if (controlers.size() < 2) {
    active=false;
    renderUpdate();
    throw new MultiblockValidationException(""String_Node_Str"");
  }
}",0.905
149625,"@Override protected void onBlockRemoved(IMultiblockPart arg0){
  if (arg0 instanceof TileEntityControler) {
    controlers.remove((TileEntityControler)arg0);
  }
  if (arg0.worldObj.isRemote) {
    arg0.worldObj.markBlockForRenderUpdate(arg0.xCoord,arg0.yCoord,arg0.zCoord);
  }
}","@Override protected void onBlockRemoved(IMultiblockPart arg0){
  if (arg0 instanceof TileEntityControler) {
    controlers.remove((TileEntityControler)arg0);
  }
}",0.7358916478555305
149626,"@Override protected void onAssimilate(MultiblockControllerBase arg0){
  if (arg0 instanceof SuperConductor) {
  }
}","@Override protected void onAssimilate(MultiblockControllerBase arg0){
}",0.7634408602150538
149627,"@Override protected void onAssimilated(MultiblockControllerBase arg0){
}","@Override protected void onAssimilated(MultiblockControllerBase arg0){
  ((SuperConductor)arg0).getTank().fill(tank.getFluid(),true);
}",0.6956521739130435
149628,"@Override protected void onMachineDisassembled(){
}","@Override protected void onMachineDisassembled(){
  active=false;
  renderUpdate();
}",0.75
149629,"@Override public void decodeDescriptionPacket(NBTTagCompound arg0){
  tank.readFromNBT(arg0);
  boolean lactive=arg0.getBoolean(""String_Node_Str"");
  System.out.println(lactive);
  if (lactive != active) {
    active=lactive;
  }
}","@Override public void decodeDescriptionPacket(NBTTagCompound arg0){
  tank.readFromNBT(arg0);
  boolean lactive=arg0.getBoolean(""String_Node_Str"");
  if (lactive != active) {
    active=lactive;
    renderUpdate();
  }
}",0.8869179600886918
149630,"@Override public void writeToNBT(NBTTagCompound arg0){
  tank.writeToNBT(arg0);
  arg0.setInteger(""String_Node_Str"",ticksFromLastDrain);
}","@Override public void writeToNBT(NBTTagCompound arg0){
  tank.writeToNBT(arg0);
  arg0.setInteger(""String_Node_Str"",ticksFromLastDrain);
  arg0.setBoolean(""String_Node_Str"",active);
}",0.8598130841121495
149631,"@Override public Icon getGlowIcon(IBlockAccess blockAccess,int x,int y,int z,int side){
  ForgeDirection[] dirsToCheck=Sides.neighborsBySide[side];
  ForgeDirection dir;
  int myBlockId=blockAccess.getBlockId(x,y,z);
  World world=blockAccess.getBlockTileEntity(x,y,z) != null ? blockAccess.getBlockTileEntity(x,y,z).worldObj : null;
  ForgeDirection out=ForgeDirection.getOrientation(side);
  if (blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == BlockWire.instance.blockID || blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == myBlockId) {
    return null;
  }
  if (isEnergyHandler(world,x + out.offsetX,y + out.offsetY,z + out.offsetZ))   return glowIcons[getBlockType(blockAccess,x,y,z)][15];
  int iconIdx=0;
  for (int i=0; i < dirsToCheck.length; i++) {
    dir=dirsToCheck[i];
    if (blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == BlockWire.instance.blockID || blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == myBlockId || isEnergyHandler(world,x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ)) {
      iconIdx|=1 << i;
    }
  }
  return glowIcons[getBlockType(blockAccess,x,y,z)][iconIdx];
}","@Override public Icon getGlowIcon(IBlockAccess blockAccess,int x,int y,int z,int side){
  TileEntityControler tile=(TileEntityControler)blockAccess.getBlockTileEntity(x,y,z);
  if (tile != null && tile.getMultiblockController() != null) {
    if (!((SuperConductor)tile.getMultiblockController()).active)     return null;
  }
 else   return null;
  ForgeDirection[] dirsToCheck=Sides.neighborsBySide[side];
  ForgeDirection dir;
  int myBlockId=blockAccess.getBlockId(x,y,z);
  World world=blockAccess.getBlockTileEntity(x,y,z) != null ? blockAccess.getBlockTileEntity(x,y,z).worldObj : null;
  ForgeDirection out=ForgeDirection.getOrientation(side);
  if (blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == BlockWire.instance.blockID || blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == myBlockId) {
    return null;
  }
  if (isEnergyHandler(world,x + out.offsetX,y + out.offsetY,z + out.offsetZ))   return glowIcons[getBlockType(blockAccess,x,y,z)][15];
  int iconIdx=0;
  for (int i=0; i < dirsToCheck.length; i++) {
    dir=dirsToCheck[i];
    if (blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == BlockWire.instance.blockID || blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == myBlockId || isEnergyHandler(world,x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ)) {
      iconIdx|=1 << i;
    }
  }
  return glowIcons[getBlockType(blockAccess,x,y,z)][iconIdx];
}",0.9030325720703856
149632,"@Override public Icon getGlowIcon(IBlockAccess blockAccess,int x,int y,int z,int side){
  ForgeDirection[] dirsToCheck=Sides.neighborsBySide[side];
  ForgeDirection dir;
  int myBlockId=blockAccess.getBlockId(x,y,z);
  ForgeDirection out=ForgeDirection.getOrientation(side);
  if (blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == myBlockId || blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == BlockControler.instance.blockID) {
    return null;
  }
  int iconIdx=0;
  for (int i=0; i < dirsToCheck.length; i++) {
    dir=dirsToCheck[i];
    if (blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == myBlockId || blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == BlockControler.instance.blockID) {
      iconIdx|=1 << i;
    }
  }
  return glowIcons[iconIdx];
}","@Override public Icon getGlowIcon(IBlockAccess blockAccess,int x,int y,int z,int side){
  TileEntityWire tile=(TileEntityWire)blockAccess.getBlockTileEntity(x,y,z);
  if (tile != null && tile.getMultiblockController() != null) {
    if (!((SuperConductor)tile.getMultiblockController()).active)     return null;
  }
 else   return null;
  ForgeDirection[] dirsToCheck=Sides.neighborsBySide[side];
  ForgeDirection dir;
  int myBlockId=blockAccess.getBlockId(x,y,z);
  ForgeDirection out=ForgeDirection.getOrientation(side);
  if (blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == myBlockId || blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == BlockControler.instance.blockID) {
    return null;
  }
  int iconIdx=0;
  for (int i=0; i < dirsToCheck.length; i++) {
    dir=dirsToCheck[i];
    if (blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == myBlockId || blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == BlockControler.instance.blockID) {
      iconIdx|=1 << i;
    }
  }
  return glowIcons[iconIdx];
}",0.8731533367294957
149633,"@Override public boolean onBlockActivated(World par1World,int par2,int par3,int par4,EntityPlayer par5EntityPlayer,int par6,float par7,float par8,float par9){
  par1World.setBlockMetadataWithNotify(par2,par3,par4,(par1World.getBlockMetadata(par2,par3,par4) | 8),2);
  par1World.scheduleBlockUpdate(par2,par3,par4,blockID,tickRate(par1World));
  int sx, sy, sz;
  sx=par2;
  sy=par3;
  sz=par4;
  TileQuarry tq=null;
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    if (par1World.getBlockTileEntity(sx + dir.offsetX,sy + dir.offsetY,sz + dir.offsetZ) instanceof TileQuarry) {
      tq=(TileQuarry)par1World.getBlockTileEntity(sx + dir.offsetX,sy + dir.offsetY,sz + dir.offsetZ);
      break;
    }
  }
  if (tq == null)   return false;
  Box box=tq.box;
  for (int x=box.xMin; x <= box.xMax; x++) {
    for (int y=box.yMin - 1; y >= 1; y--) {
      for (int z=box.zMin; z <= box.zMax; z++) {
        if (x == box.xMin || x == box.xMax || z == box.zMin || z == box.zMax) {
          if (BlockUtil.isSoftBlock(par1World,x,y,z))           par1World.setBlock(x,y,z,Block.stone.blockID);
          continue;
        }
        if (BuildCraftAPI.softBlocks[par1World.getBlockId(x,y,z)]) {
          par1World.setBlockToAir(x,y,z);
        }
      }
    }
  }
  return true;
}","@Override public boolean onBlockActivated(World par1World,int par2,int par3,int par4,EntityPlayer par5EntityPlayer,int par6,float par7,float par8,float par9){
  if ((par1World.getBlockMetadata(par2,par3,par4) & 8) != 0)   return true;
  TileQuarry tq=null;
  int sx, sy, sz;
  sx=par2;
  sy=par3;
  sz=par4;
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    if (par1World.getBlockTileEntity(sx + dir.offsetX,sy + dir.offsetY,sz + dir.offsetZ) instanceof TileQuarry) {
      tq=(TileQuarry)par1World.getBlockTileEntity(sx + dir.offsetX,sy + dir.offsetY,sz + dir.offsetZ);
      break;
    }
  }
  if (tq == null)   return false;
  par1World.setBlockMetadataWithNotify(par2,par3,par4,(par1World.getBlockMetadata(par2,par3,par4) | 8),2);
  par1World.scheduleBlockUpdate(par2,par3,par4,blockID,tickRate(par1World));
  Box box=tq.box;
  for (int x=box.xMin; x <= box.xMax; x++) {
    for (int y=box.yMin - 1; y >= 1; y--) {
      for (int z=box.zMin; z <= box.zMax; z++) {
        if (x == box.xMin || x == box.xMax || z == box.zMin || z == box.zMax) {
          if (BlockUtil.isSoftBlock(par1World,x,y,z))           par1World.setBlock(x,y,z,Block.stone.blockID);
          continue;
        }
        if (BuildCraftAPI.softBlocks[par1World.getBlockId(x,y,z)]) {
          par1World.setBlockToAir(x,y,z);
        }
      }
    }
  }
  return true;
}",0.8301886792452831
149634,"@Override public void formatDescriptionPacket(NBTTagCompound arg0){
  tank.writeToNBT(arg0);
}","@Override public void formatDescriptionPacket(NBTTagCompound arg0){
  tank.writeToNBT(arg0);
  arg0.setBoolean(""String_Node_Str"",active);
}",0.8068669527896996
149635,"@Override protected void onBlockRemoved(IMultiblockPart arg0){
  if (arg0 instanceof TileEntityControler) {
    controlers.remove((TileEntityControler)arg0);
  }
}","@Override protected void onBlockRemoved(IMultiblockPart arg0){
  if (arg0 instanceof TileEntityControler) {
    controlers.remove((TileEntityControler)arg0);
  }
  if (arg0.worldObj.isRemote) {
    arg0.worldObj.markBlockForRenderUpdate(arg0.xCoord,arg0.yCoord,arg0.zCoord);
  }
}",0.7358916478555305
149636,"@Override protected boolean updateServer(){
  if (ticksFromLastDrain % 10 == 0) {
    for (    TileEntityControler c : controlers)     c.updateTick();
  }
  if (ticksFromLastDrain >= 864) {
    tank.drain(1,true);
    ticksFromLastDrain=0;
  }
  ticksFromLastDrain++;
  if ((float)tank.getFluidAmount() / (float)tank.getCapacity() < 0.5)   return true;
  long energyNeed=0;
  for (  TileEntityControler c : controlers) {
    if (c.isOutput()) {
      energyNeed+=c.getEnergyNeed();
    }
  }
  long currentEnergy=0;
  for (  TileEntityControler c : controlers) {
    if (!c.isOutput()) {
      int temp=c.getEnergy(energyNeed > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int)energyNeed);
      currentEnergy+=temp;
      energyNeed-=temp;
      if (energyNeed <= 0)       break;
    }
  }
  for (  TileEntityControler c : controlers) {
    if (c.isOutput()) {
      currentEnergy-=c.putEnergy(currentEnergy > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int)currentEnergy);
      if (currentEnergy <= 0)       break;
    }
  }
  return true;
}","@Override protected boolean updateServer(){
  if (ticksFromLastDrain % 10 == 0) {
    for (    TileEntityControler c : controlers)     c.updateTick();
  }
  if (ticksFromLastDrain >= 12 * 60 * 60* 20 / 1000) {
    tank.drain(1,true);
    ticksFromLastDrain=0;
  }
  ticksFromLastDrain++;
  boolean newactive=(float)tank.getFluidAmount() / (float)tank.getCapacity() >= 0.5;
  if (newactive != active) {
    active=newactive;
    worldObj.markBlockForUpdate(getReferenceCoord().x,getReferenceCoord().y,getReferenceCoord().z);
  }
  if (!active)   return true;
  long energyNeed=0;
  for (  TileEntityControler c : controlers) {
    if (c.isOutput()) {
      energyNeed+=c.getEnergyNeed();
    }
  }
  long currentEnergy=0;
  for (  TileEntityControler c : controlers) {
    if (!c.isOutput()) {
      int temp=c.getEnergy(energyNeed > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int)energyNeed);
      currentEnergy+=temp;
      energyNeed-=temp;
      if (energyNeed <= 0)       break;
    }
  }
  for (  TileEntityControler c : controlers) {
    if (c.isOutput()) {
      currentEnergy-=c.putEnergy(currentEnergy > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int)currentEnergy);
      if (currentEnergy <= 0)       break;
    }
  }
  return true;
}",0.903905221588416
149637,"@Override protected void onAssimilate(MultiblockControllerBase arg0){
}","@Override protected void onAssimilate(MultiblockControllerBase arg0){
  if (arg0 instanceof SuperConductor) {
  }
}",0.7634408602150538
149638,"@Override public void decodeDescriptionPacket(NBTTagCompound arg0){
  tank.readFromNBT(arg0);
}","@Override public void decodeDescriptionPacket(NBTTagCompound arg0){
  tank.readFromNBT(arg0);
  boolean lactive=arg0.getBoolean(""String_Node_Str"");
  System.out.println(lactive);
  if (lactive != active) {
    active=lactive;
  }
}",0.5828220858895705
149639,"@Override public Icon getGlowIcon(IBlockAccess blockAccess,int x,int y,int z,int side){
  ForgeDirection[] dirsToCheck=Sides.neighborsBySide[side];
  ForgeDirection dir;
  int myBlockId=blockAccess.getBlockId(x,y,z);
  World world=blockAccess.getBlockTileEntity(x,y,z) != null ? blockAccess.getBlockTileEntity(x,y,z).worldObj : null;
  ForgeDirection out=ForgeDirection.getOrientation(side);
  if (blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == BlockWire.instance.blockID || blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == myBlockId) {
    return null;
  }
  if (isEnergyHandler(world,x + out.offsetX,y + out.offsetY,z + out.offsetZ))   return glowIcons[blockAccess.getBlockMetadata(x,y,z)][15];
  int iconIdx=0;
  for (int i=0; i < dirsToCheck.length; i++) {
    dir=dirsToCheck[i];
    if (blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == BlockWire.instance.blockID || blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == myBlockId || isEnergyHandler(world,x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ)) {
      iconIdx|=1 << i;
    }
  }
  return glowIcons[blockAccess.getBlockMetadata(x,y,z)][iconIdx];
}","@Override public Icon getGlowIcon(IBlockAccess blockAccess,int x,int y,int z,int side){
  ForgeDirection[] dirsToCheck=Sides.neighborsBySide[side];
  ForgeDirection dir;
  int myBlockId=blockAccess.getBlockId(x,y,z);
  World world=blockAccess.getBlockTileEntity(x,y,z) != null ? blockAccess.getBlockTileEntity(x,y,z).worldObj : null;
  ForgeDirection out=ForgeDirection.getOrientation(side);
  if (blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == BlockWire.instance.blockID || blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == myBlockId) {
    return null;
  }
  if (isEnergyHandler(world,x + out.offsetX,y + out.offsetY,z + out.offsetZ))   return glowIcons[getBlockType(blockAccess,x,y,z)][15];
  int iconIdx=0;
  for (int i=0; i < dirsToCheck.length; i++) {
    dir=dirsToCheck[i];
    if (blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == BlockWire.instance.blockID || blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == myBlockId || isEnergyHandler(world,x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ)) {
      iconIdx|=1 << i;
    }
  }
  return glowIcons[getBlockType(blockAccess,x,y,z)][iconIdx];
}",0.9735537190082644
149640,"@Override public boolean onBlockActivated(World world,int par2,int par3,int par4,EntityPlayer player,int par6,float par7,float par8,float par9){
  if (player.getCurrentEquippedItem() == null && player.isSneaking()) {
    if (world.getBlockMetadata(par2,par3,par4) == 0) {
      world.setBlockMetadataWithNotify(par2,par3,par4,1,2);
    }
 else {
      world.setBlockMetadataWithNotify(par2,par3,par4,0,2);
    }
    return true;
  }
  if (!player.isSneaking() && world.getBlockTileEntity(par2,par3,par4) instanceof TileEntityControler) {
    if (((TileEntityControler)world.getBlockTileEntity(par2,par3,par4)).getMultiblockController().isAssembled()) {
      player.openGui(EvenMoreUtilities.instance,4,world,par2,par3,par4);
      return true;
    }
  }
  return false;
}","@Override public boolean onBlockActivated(World world,int par2,int par3,int par4,EntityPlayer player,int par6,float par7,float par8,float par9){
  if (player.getCurrentEquippedItem() == null && player.isSneaking()) {
    world.setBlockMetadataWithNotify(par2,par3,par4,world.getBlockMetadata(par2,par3,par4) ^ 1,2);
    return true;
  }
  if (!player.isSneaking() && world.getBlockTileEntity(par2,par3,par4) instanceof TileEntityControler) {
    if (((TileEntityControler)world.getBlockTileEntity(par2,par3,par4)).getMultiblockController().isAssembled()) {
      player.openGui(EvenMoreUtilities.instance,4,world,par2,par3,par4);
      return true;
    }
  }
  return false;
}",0.8770718232044199
149641,"@Override public Icon getBlockTexture(IBlockAccess blockAccess,int x,int y,int z,int side){
  ForgeDirection[] dirsToCheck=Sides.neighborsBySide[side];
  ForgeDirection dir;
  int myBlockId=blockAccess.getBlockId(x,y,z);
  World world=blockAccess.getBlockTileEntity(x,y,z) != null ? blockAccess.getBlockTileEntity(x,y,z).worldObj : null;
  ForgeDirection out=ForgeDirection.getOrientation(side);
  if (blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == BlockWire.instance.blockID || blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == myBlockId) {
    return transparentIcon;
  }
  if (isEnergyHandler(world,x + out.offsetX,y + out.offsetY,z + out.offsetZ))   return icons[blockAccess.getBlockMetadata(x,y,z)][15];
  int iconIdx=0;
  for (int i=0; i < dirsToCheck.length; i++) {
    dir=dirsToCheck[i];
    if (blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == BlockWire.instance.blockID || blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == myBlockId || isEnergyHandler(world,x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ)) {
      iconIdx|=1 << i;
    }
  }
  return icons[blockAccess.getBlockMetadata(x,y,z)][iconIdx];
}","@Override public Icon getBlockTexture(IBlockAccess blockAccess,int x,int y,int z,int side){
  ForgeDirection[] dirsToCheck=Sides.neighborsBySide[side];
  ForgeDirection dir;
  int myBlockId=blockAccess.getBlockId(x,y,z);
  World world=blockAccess.getBlockTileEntity(x,y,z) != null ? blockAccess.getBlockTileEntity(x,y,z).worldObj : null;
  ForgeDirection out=ForgeDirection.getOrientation(side);
  if (blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == BlockWire.instance.blockID || blockAccess.getBlockId(x + out.offsetX,y + out.offsetY,z + out.offsetZ) == myBlockId) {
    return transparentIcon;
  }
  if (isEnergyHandler(world,x + out.offsetX,y + out.offsetY,z + out.offsetZ))   return icons[getBlockType(blockAccess,x,y,z)][15];
  int iconIdx=0;
  for (int i=0; i < dirsToCheck.length; i++) {
    dir=dirsToCheck[i];
    if (blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == BlockWire.instance.blockID || blockAccess.getBlockId(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ) == myBlockId || isEnergyHandler(world,x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ)) {
      iconIdx|=1 << i;
    }
  }
  return icons[getBlockType(blockAccess,x,y,z)][iconIdx];
}",0.9737058340180772
149642,"@Override public Icon getIcon(int side,int metadata){
  return icons[metadata][0];
}","@Override public Icon getIcon(int side,int metadata){
  return icons[metadata & 1][0];
}",0.9767441860465116
149643,"@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  renderer.renderStandardBlock(block,x,y,z);
  renderGlow(world,x,y,z,block,renderer);
  return true;
}","@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  if (SuperConductorMod.pass == 0) {
    renderer.renderStandardBlock(block,x,y,z);
    return true;
  }
 else {
    renderGlow(world,x,y,z,block,renderer);
  }
  return true;
}",0.8614232209737828
149644,"public boolean isOutput(){
  return worldObj.getBlockMetadata(xCoord,yCoord,zCoord) == 0;
}","public boolean isOutput(){
  return (worldObj.getBlockMetadata(xCoord,yCoord,zCoord) & 1) == 0;
}",0.9680851063829788
149645,"@Override protected void isMachineWhole() throws MultiblockValidationException {
  if (controlers.size() < 3) {
    throw new MultiblockValidationException(""String_Node_Str"");
  }
}","@Override protected void isMachineWhole() throws MultiblockValidationException {
  if (controlers.size() < 2) {
    throw new MultiblockValidationException(""String_Node_Str"");
  }
}",0.994475138121547
149646,"@Override protected void onMachineRestored(){
}","@Override protected void onMachineRestored(){
  tank.setCapacity(connectedParts.size() * 4000);
  if (tank.getFluidAmount() > tank.getCapacity()) {
    tank.getFluid().amount=tank.getCapacity();
  }
}",0.3805668016194332
149647,"@Override protected void onBlockRemoved(IMultiblockPart arg0){
  if (arg0 instanceof TileEntityControler) {
    controlers.remove((TileEntityControler)arg0);
  }
  tank.setCapacity(Math.max(0,tank.getCapacity() - 4000));
}","@Override protected void onBlockRemoved(IMultiblockPart arg0){
  if (arg0 instanceof TileEntityControler) {
    controlers.remove((TileEntityControler)arg0);
  }
}",0.8467532467532467
149648,"@Override protected void onBlockAdded(IMultiblockPart arg0){
  if (arg0 instanceof TileEntityControler) {
    controlers.add((TileEntityControler)arg0);
  }
  tank.setCapacity(tank.getCapacity() + 4000);
}","@Override protected void onBlockAdded(IMultiblockPart arg0){
  if (arg0 instanceof TileEntityControler) {
    controlers.add((TileEntityControler)arg0);
  }
}",0.8705234159779615
149649,"@Override protected void onMachineAssembled(){
}","@Override protected void onMachineAssembled(){
  tank.setCapacity(connectedParts.size() * 4000);
  if (tank.getFluidAmount() > tank.getCapacity()) {
    tank.getFluid().amount=tank.getCapacity();
  }
}",0.3855421686746988
149650,"@Override public boolean onBlockActivated(World world,int par2,int par3,int par4,EntityPlayer player,int par6,float par7,float par8,float par9){
  if (player.getCurrentEquippedItem() == null && player.isSneaking()) {
    if (world.getBlockMetadata(par2,par3,par4) == 0) {
      world.setBlockMetadataWithNotify(par2,par3,par4,1,2);
    }
 else {
      world.setBlockMetadataWithNotify(par2,par3,par4,0,2);
    }
    return true;
  }
  if (!player.isSneaking()) {
    player.openGui(EvenMoreUtilities.instance,4,world,par2,par3,par4);
    return true;
  }
  return false;
}","@Override public boolean onBlockActivated(World world,int par2,int par3,int par4,EntityPlayer player,int par6,float par7,float par8,float par9){
  if (player.getCurrentEquippedItem() == null && player.isSneaking()) {
    if (world.getBlockMetadata(par2,par3,par4) == 0) {
      world.setBlockMetadataWithNotify(par2,par3,par4,1,2);
    }
 else {
      world.setBlockMetadataWithNotify(par2,par3,par4,0,2);
    }
    return true;
  }
  if (!player.isSneaking() && world.getBlockTileEntity(par2,par3,par4) instanceof TileEntityControler) {
    if (((TileEntityControler)world.getBlockTileEntity(par2,par3,par4)).getMultiblockController().isAssembled()) {
      player.openGui(EvenMoreUtilities.instance,4,world,par2,par3,par4);
      return true;
    }
  }
  return false;
}",0.8511904761904762
149651,"public Optional<AmazonS3ExceptionBuilder> parse(HttpResponseStatus status,ByteBuf content) throws IOException {
  try {
    AmazonS3ExceptionBuilder response=parseResponse(status,content);
    ReferenceCountUtil.release(content);
    return Optional.of(response);
  }
  finally {
    ReferenceCountUtil.release(content);
  }
}","public Optional<AmazonS3ExceptionBuilder> parse(HttpResponseStatus status,ByteBuf content) throws IOException {
  try {
    AmazonS3ExceptionBuilder response=parseResponse(status,content);
    return Optional.of(response);
  }
  finally {
    ReferenceCountUtil.release(content);
  }
}",0.7692307692307693
149652,"/** 
 * Check a single use, to see if this use may cause the object referenced to escape from this method.
 * @param use the use to check
 * @param ir the governing IR
 * @return true if it may escape, false otherwise
 */
private static boolean checkEscapesMethod(RegisterOperand use,IR ir,Set<Register> visited){
  Instruction inst=use.instruction;
  try {
switch (inst.getOpcode()) {
case INT_ASTORE_opcode:
case LONG_ASTORE_opcode:
case FLOAT_ASTORE_opcode:
case DOUBLE_ASTORE_opcode:
case BYTE_ASTORE_opcode:
case SHORT_ASTORE_opcode:
case REF_ASTORE_opcode:
      Operand value=AStore.getValue(inst);
    return value == use;
case GETFIELD_opcode:
case GETSTATIC_opcode:
case INT_ALOAD_opcode:
case LONG_ALOAD_opcode:
case FLOAT_ALOAD_opcode:
case DOUBLE_ALOAD_opcode:
case BYTE_ALOAD_opcode:
case UBYTE_ALOAD_opcode:
case BYTE_LOAD_opcode:
case UBYTE_LOAD_opcode:
case USHORT_ALOAD_opcode:
case SHORT_ALOAD_opcode:
case USHORT_LOAD_opcode:
case SHORT_LOAD_opcode:
case REF_ALOAD_opcode:
case INT_LOAD_opcode:
case LONG_LOAD_opcode:
case FLOAT_LOAD_opcode:
case DOUBLE_LOAD_opcode:
case REF_LOAD_opcode:
  Operand result=ResultCarrier.getResult(inst);
return result == use;
case PUTFIELD_opcode:
value=PutField.getValue(inst);
return value == use;
case PUTSTATIC_opcode:
value=PutStatic.getValue(inst);
return value == use;
case BYTE_STORE_opcode:
case SHORT_STORE_opcode:
case REF_STORE_opcode:
case INT_STORE_opcode:
case LONG_STORE_opcode:
case FLOAT_STORE_opcode:
case DOUBLE_STORE_opcode:
value=Store.getValue(inst);
return value == use;
case BOUNDS_CHECK_opcode:
case MONITORENTER_opcode:
case MONITOREXIT_opcode:
case NULL_CHECK_opcode:
case ARRAYLENGTH_opcode:
case REF_IFCMP_opcode:
case INT_IFCMP_opcode:
case IG_PATCH_POINT_opcode:
case IG_CLASS_TEST_opcode:
case IG_METHOD_TEST_opcode:
case BOOLEAN_CMP_INT_opcode:
case BOOLEAN_CMP_ADDR_opcode:
case OBJARRAY_STORE_CHECK_opcode:
case OBJARRAY_STORE_CHECK_NOTNULL_opcode:
case GET_OBJ_TIB_opcode:
case GET_TYPE_FROM_TIB_opcode:
case NEW_opcode:
case NEWARRAY_opcode:
case NEWOBJMULTIARRAY_opcode:
case NEW_UNRESOLVED_opcode:
case NEWARRAY_UNRESOLVED_opcode:
case INSTANCEOF_opcode:
case INSTANCEOF_NOTNULL_opcode:
case INSTANCEOF_UNRESOLVED_opcode:
case CHECKCAST_opcode:
case MUST_IMPLEMENT_INTERFACE_opcode:
case CHECKCAST_NOTNULL_opcode:
case CHECKCAST_UNRESOLVED_opcode:
case GET_CAUGHT_EXCEPTION_opcode:
case IR_PROLOGUE_opcode:
return false;
case RETURN_opcode:
return true;
case CALL_opcode:
{
MethodOperand mop=Call.getMethod(inst);
if (mop != null && mop.hasPreciseTarget()) {
RVMMethod target=mop.getTarget();
if (target.hasNoEscapesAnnotation()) {
return false;
}
}
return true;
}
case REF_MOVE_opcode:
{
if (visited == null) {
visited=new HashSet<Register>();
}
Register copy=Move.getResult(inst).getRegister();
if (!copy.isSSA()) {
return true;
}
 else {
visited.add(use.getRegister());
if (visited.contains(copy)) {
return false;
}
 else {
boolean result2=checkIfUseEscapesMethod(copy,ir,visited);
return result2;
}
}
}
case ATHROW_opcode:
case PREPARE_INT_opcode:
case PREPARE_ADDR_opcode:
case ATTEMPT_INT_opcode:
case ATTEMPT_ADDR_opcode:
case PREPARE_LONG_opcode:
case ATTEMPT_LONG_opcode:
case INT_MOVE_opcode:
case INT_ADD_opcode:
case REF_ADD_opcode:
case INT_MUL_opcode:
case INT_DIV_opcode:
case INT_REM_opcode:
case INT_NEG_opcode:
case INT_ZERO_CHECK_opcode:
case INT_OR_opcode:
case INT_AND_opcode:
case INT_XOR_opcode:
case REF_OR_opcode:
case REF_AND_opcode:
case REF_XOR_opcode:
case INT_SUB_opcode:
case REF_SUB_opcode:
case INT_SHL_opcode:
case INT_SHR_opcode:
case INT_USHR_opcode:
case SYSCALL_opcode:
case REF_SHL_opcode:
case REF_SHR_opcode:
case REF_USHR_opcode:
case SET_CAUGHT_EXCEPTION_opcode:
case PHI_opcode:
case INT_2LONG_opcode:
case REF_COND_MOVE_opcode:
case INT_COND_MOVE_opcode:
case INT_2ADDRSigExt_opcode:
case INT_2ADDRZerExt_opcode:
case ADDR_2INT_opcode:
case ADDR_2LONG_opcode:
case YIELDPOINT_OSR_opcode:
return true;
default :
return Operators.helper.mayEscapeMethod(inst);
}
}
 catch (Exception e) {
OptimizingCompilerException oe=new OptimizingCompilerException(""String_Node_Str"" + use + ""String_Node_Str""+ inst);
oe.initCause(e);
throw oe;
}
}","/** 
 * Check a single use, to see if this use may cause the object referenced to escape from this method.
 * @param use the use to check
 * @param ir the governing IR
 * @return true if it may escape, false otherwise
 */
private static boolean checkEscapesMethod(RegisterOperand use,IR ir,Set<Register> visited){
  Instruction inst=use.instruction;
  try {
switch (inst.getOpcode()) {
case INT_ASTORE_opcode:
case LONG_ASTORE_opcode:
case FLOAT_ASTORE_opcode:
case DOUBLE_ASTORE_opcode:
case BYTE_ASTORE_opcode:
case SHORT_ASTORE_opcode:
case REF_ASTORE_opcode:
      Operand value=AStore.getValue(inst);
    return value == use;
case GETFIELD_opcode:
case GETSTATIC_opcode:
case INT_ALOAD_opcode:
case LONG_ALOAD_opcode:
case FLOAT_ALOAD_opcode:
case DOUBLE_ALOAD_opcode:
case BYTE_ALOAD_opcode:
case UBYTE_ALOAD_opcode:
case BYTE_LOAD_opcode:
case UBYTE_LOAD_opcode:
case USHORT_ALOAD_opcode:
case SHORT_ALOAD_opcode:
case USHORT_LOAD_opcode:
case SHORT_LOAD_opcode:
case REF_ALOAD_opcode:
case INT_LOAD_opcode:
case LONG_LOAD_opcode:
case FLOAT_LOAD_opcode:
case DOUBLE_LOAD_opcode:
case REF_LOAD_opcode:
  Operand result=ResultCarrier.getResult(inst);
return result == use;
case PUTFIELD_opcode:
value=PutField.getValue(inst);
return value == use;
case PUTSTATIC_opcode:
value=PutStatic.getValue(inst);
return value == use;
case BYTE_STORE_opcode:
case SHORT_STORE_opcode:
case REF_STORE_opcode:
case INT_STORE_opcode:
case LONG_STORE_opcode:
case FLOAT_STORE_opcode:
case DOUBLE_STORE_opcode:
value=Store.getValue(inst);
return value == use;
case BOUNDS_CHECK_opcode:
case MONITORENTER_opcode:
case MONITOREXIT_opcode:
case NULL_CHECK_opcode:
case ARRAYLENGTH_opcode:
case REF_IFCMP_opcode:
case INT_IFCMP_opcode:
case IG_PATCH_POINT_opcode:
case IG_CLASS_TEST_opcode:
case IG_METHOD_TEST_opcode:
case BOOLEAN_CMP_INT_opcode:
case BOOLEAN_CMP_ADDR_opcode:
case OBJARRAY_STORE_CHECK_opcode:
case OBJARRAY_STORE_CHECK_NOTNULL_opcode:
case GET_OBJ_TIB_opcode:
case GET_TYPE_FROM_TIB_opcode:
case NEW_opcode:
case NEWARRAY_opcode:
case NEWOBJMULTIARRAY_opcode:
case NEW_UNRESOLVED_opcode:
case NEWARRAY_UNRESOLVED_opcode:
case INSTANCEOF_opcode:
case INSTANCEOF_NOTNULL_opcode:
case INSTANCEOF_UNRESOLVED_opcode:
case MUST_IMPLEMENT_INTERFACE_opcode:
case GET_CAUGHT_EXCEPTION_opcode:
case IR_PROLOGUE_opcode:
return false;
case RETURN_opcode:
return true;
case CALL_opcode:
{
MethodOperand mop=Call.getMethod(inst);
if (mop != null && mop.hasPreciseTarget()) {
RVMMethod target=mop.getTarget();
if (target.hasNoEscapesAnnotation()) {
return false;
}
}
return true;
}
case CHECKCAST_opcode:
case CHECKCAST_NOTNULL_opcode:
case CHECKCAST_UNRESOLVED_opcode:
case REF_MOVE_opcode:
{
if (visited == null) {
visited=new HashSet<Register>();
}
Register copy=ResultCarrier.getResult(inst).getRegister();
if (!copy.isSSA()) {
return true;
}
 else {
visited.add(use.getRegister());
if (visited.contains(copy)) {
return false;
}
 else {
boolean result2=checkIfUseEscapesMethod(copy,ir,visited);
return result2;
}
}
}
case ATHROW_opcode:
case PREPARE_INT_opcode:
case PREPARE_ADDR_opcode:
case ATTEMPT_INT_opcode:
case ATTEMPT_ADDR_opcode:
case PREPARE_LONG_opcode:
case ATTEMPT_LONG_opcode:
case INT_MOVE_opcode:
case INT_ADD_opcode:
case REF_ADD_opcode:
case INT_MUL_opcode:
case INT_DIV_opcode:
case INT_REM_opcode:
case INT_NEG_opcode:
case INT_ZERO_CHECK_opcode:
case INT_OR_opcode:
case INT_AND_opcode:
case INT_XOR_opcode:
case REF_OR_opcode:
case REF_AND_opcode:
case REF_XOR_opcode:
case INT_SUB_opcode:
case REF_SUB_opcode:
case INT_SHL_opcode:
case INT_SHR_opcode:
case INT_USHR_opcode:
case SYSCALL_opcode:
case REF_SHL_opcode:
case REF_SHR_opcode:
case REF_USHR_opcode:
case SET_CAUGHT_EXCEPTION_opcode:
case PHI_opcode:
case INT_2LONG_opcode:
case REF_COND_MOVE_opcode:
case INT_COND_MOVE_opcode:
case INT_2ADDRSigExt_opcode:
case INT_2ADDRZerExt_opcode:
case ADDR_2INT_opcode:
case ADDR_2LONG_opcode:
case YIELDPOINT_OSR_opcode:
return true;
default :
return Operators.helper.mayEscapeMethod(inst);
}
}
 catch (Exception e) {
OptimizingCompilerException oe=new OptimizingCompilerException(""String_Node_Str"" + use + ""String_Node_Str""+ inst);
oe.initCause(e);
throw oe;
}
}",0.9768723786698622
149653,"/** 
 * Check a single use, to see if this use may cause the object referenced to escape from this thread.
 * @param use the use to check
 * @param ir the governing IR
 * @return {@code true} if it may escape, {@code false} otherwise
 */
private static boolean checkEscapesThread(RegisterOperand use,IR ir,Set<Register> visited){
  Instruction inst=use.instruction;
switch (inst.getOpcode()) {
case INT_ASTORE_opcode:
case LONG_ASTORE_opcode:
case FLOAT_ASTORE_opcode:
case DOUBLE_ASTORE_opcode:
case BYTE_ASTORE_opcode:
case SHORT_ASTORE_opcode:
case REF_ASTORE_opcode:
    Operand value=AStore.getValue(inst);
  return value == use;
case GETFIELD_opcode:
case GETSTATIC_opcode:
case INT_ALOAD_opcode:
case LONG_ALOAD_opcode:
case FLOAT_ALOAD_opcode:
case DOUBLE_ALOAD_opcode:
case BYTE_ALOAD_opcode:
case UBYTE_ALOAD_opcode:
case BYTE_LOAD_opcode:
case UBYTE_LOAD_opcode:
case SHORT_ALOAD_opcode:
case USHORT_ALOAD_opcode:
case SHORT_LOAD_opcode:
case USHORT_LOAD_opcode:
case REF_ALOAD_opcode:
case INT_LOAD_opcode:
case LONG_LOAD_opcode:
case FLOAT_LOAD_opcode:
case DOUBLE_LOAD_opcode:
case REF_LOAD_opcode:
Operand result=ResultCarrier.getResult(inst);
return result == use;
case PUTFIELD_opcode:
value=PutField.getValue(inst);
return value == use;
case PUTSTATIC_opcode:
value=PutStatic.getValue(inst);
return value == use;
case BYTE_STORE_opcode:
case SHORT_STORE_opcode:
case REF_STORE_opcode:
case INT_STORE_opcode:
case LONG_STORE_opcode:
case FLOAT_STORE_opcode:
case DOUBLE_STORE_opcode:
value=Store.getValue(inst);
return value == use;
case BOUNDS_CHECK_opcode:
case MONITORENTER_opcode:
case MONITOREXIT_opcode:
case NULL_CHECK_opcode:
case ARRAYLENGTH_opcode:
case REF_IFCMP_opcode:
case INT_IFCMP_opcode:
case IG_PATCH_POINT_opcode:
case IG_CLASS_TEST_opcode:
case IG_METHOD_TEST_opcode:
case BOOLEAN_CMP_INT_opcode:
case BOOLEAN_CMP_ADDR_opcode:
case OBJARRAY_STORE_CHECK_opcode:
case OBJARRAY_STORE_CHECK_NOTNULL_opcode:
case GET_OBJ_TIB_opcode:
case GET_TYPE_FROM_TIB_opcode:
case NEW_opcode:
case NEWARRAY_opcode:
case NEWOBJMULTIARRAY_opcode:
case NEW_UNRESOLVED_opcode:
case NEWARRAY_UNRESOLVED_opcode:
case INSTANCEOF_opcode:
case INSTANCEOF_NOTNULL_opcode:
case INSTANCEOF_UNRESOLVED_opcode:
case CHECKCAST_opcode:
case MUST_IMPLEMENT_INTERFACE_opcode:
case CHECKCAST_NOTNULL_opcode:
case CHECKCAST_UNRESOLVED_opcode:
case GET_CAUGHT_EXCEPTION_opcode:
case IR_PROLOGUE_opcode:
return false;
case RETURN_opcode:
return !ir.isParameter(use);
case CALL_opcode:
MethodOperand mop=Call.getMethod(inst);
if (mop == null) {
return true;
}
if (!mop.hasPreciseTarget()) {
return true;
}
if (mop.getTarget().isPure()) {
return false;
}
if (mop.getTarget().isNative()) {
return false;
}
MethodSummary summ=findOrCreateMethodSummary(mop.getTarget(),ir.options);
if (summ == null) {
return true;
}
if (use == Call.getResult(inst)) {
return summ.resultMayEscapeThread();
}
int p=getParameterIndex(use,inst);
return summ.parameterMayEscapeThread(p);
case REF_MOVE_opcode:
{
Register copy=Move.getResult(inst).getRegister();
if (!copy.isSSA()) {
return true;
}
 else {
if (visited == null) {
visited=new HashSet<Register>();
}
visited.add(use.getRegister());
if (visited.contains(copy)) {
return false;
}
 else {
return checkIfUseEscapesThread(copy,ir,visited);
}
}
}
case ATHROW_opcode:
case PREPARE_INT_opcode:
case PREPARE_ADDR_opcode:
case PREPARE_LONG_opcode:
case ATTEMPT_LONG_opcode:
case ATTEMPT_INT_opcode:
case ATTEMPT_ADDR_opcode:
case INT_MOVE_opcode:
case INT_ADD_opcode:
case REF_ADD_opcode:
case INT_MUL_opcode:
case INT_DIV_opcode:
case INT_REM_opcode:
case INT_NEG_opcode:
case INT_ZERO_CHECK_opcode:
case INT_OR_opcode:
case INT_AND_opcode:
case INT_XOR_opcode:
case REF_OR_opcode:
case REF_AND_opcode:
case REF_XOR_opcode:
case INT_SUB_opcode:
case REF_SUB_opcode:
case INT_SHL_opcode:
case INT_SHR_opcode:
case INT_USHR_opcode:
case SYSCALL_opcode:
case REF_SHL_opcode:
case REF_SHR_opcode:
case REF_USHR_opcode:
case SET_CAUGHT_EXCEPTION_opcode:
case PHI_opcode:
case INT_2LONG_opcode:
case REF_COND_MOVE_opcode:
case INT_COND_MOVE_opcode:
case INT_2ADDRSigExt_opcode:
case INT_2ADDRZerExt_opcode:
case ADDR_2INT_opcode:
case ADDR_2LONG_opcode:
case YIELDPOINT_OSR_opcode:
return true;
default :
return Operators.helper.mayEscapeThread(inst);
}
}","/** 
 * Check a single use, to see if this use may cause the object referenced to escape from this thread.
 * @param use the use to check
 * @param ir the governing IR
 * @return {@code true} if it may escape, {@code false} otherwise
 */
private static boolean checkEscapesThread(RegisterOperand use,IR ir,Set<Register> visited){
  Instruction inst=use.instruction;
switch (inst.getOpcode()) {
case INT_ASTORE_opcode:
case LONG_ASTORE_opcode:
case FLOAT_ASTORE_opcode:
case DOUBLE_ASTORE_opcode:
case BYTE_ASTORE_opcode:
case SHORT_ASTORE_opcode:
case REF_ASTORE_opcode:
    Operand value=AStore.getValue(inst);
  return value == use;
case GETFIELD_opcode:
case GETSTATIC_opcode:
case INT_ALOAD_opcode:
case LONG_ALOAD_opcode:
case FLOAT_ALOAD_opcode:
case DOUBLE_ALOAD_opcode:
case BYTE_ALOAD_opcode:
case UBYTE_ALOAD_opcode:
case BYTE_LOAD_opcode:
case UBYTE_LOAD_opcode:
case SHORT_ALOAD_opcode:
case USHORT_ALOAD_opcode:
case SHORT_LOAD_opcode:
case USHORT_LOAD_opcode:
case REF_ALOAD_opcode:
case INT_LOAD_opcode:
case LONG_LOAD_opcode:
case FLOAT_LOAD_opcode:
case DOUBLE_LOAD_opcode:
case REF_LOAD_opcode:
Operand result=ResultCarrier.getResult(inst);
return result == use;
case PUTFIELD_opcode:
value=PutField.getValue(inst);
return value == use;
case PUTSTATIC_opcode:
value=PutStatic.getValue(inst);
return value == use;
case BYTE_STORE_opcode:
case SHORT_STORE_opcode:
case REF_STORE_opcode:
case INT_STORE_opcode:
case LONG_STORE_opcode:
case FLOAT_STORE_opcode:
case DOUBLE_STORE_opcode:
value=Store.getValue(inst);
return value == use;
case BOUNDS_CHECK_opcode:
case MONITORENTER_opcode:
case MONITOREXIT_opcode:
case NULL_CHECK_opcode:
case ARRAYLENGTH_opcode:
case REF_IFCMP_opcode:
case INT_IFCMP_opcode:
case IG_PATCH_POINT_opcode:
case IG_CLASS_TEST_opcode:
case IG_METHOD_TEST_opcode:
case BOOLEAN_CMP_INT_opcode:
case BOOLEAN_CMP_ADDR_opcode:
case OBJARRAY_STORE_CHECK_opcode:
case OBJARRAY_STORE_CHECK_NOTNULL_opcode:
case GET_OBJ_TIB_opcode:
case GET_TYPE_FROM_TIB_opcode:
case NEW_opcode:
case NEWARRAY_opcode:
case NEWOBJMULTIARRAY_opcode:
case NEW_UNRESOLVED_opcode:
case NEWARRAY_UNRESOLVED_opcode:
case INSTANCEOF_opcode:
case INSTANCEOF_NOTNULL_opcode:
case INSTANCEOF_UNRESOLVED_opcode:
case MUST_IMPLEMENT_INTERFACE_opcode:
case GET_CAUGHT_EXCEPTION_opcode:
case IR_PROLOGUE_opcode:
return false;
case RETURN_opcode:
return !ir.isParameter(use);
case CALL_opcode:
MethodOperand mop=Call.getMethod(inst);
if (mop == null) {
return true;
}
if (!mop.hasPreciseTarget()) {
return true;
}
if (mop.getTarget().isPure()) {
return false;
}
if (mop.getTarget().isNative()) {
return false;
}
MethodSummary summ=findOrCreateMethodSummary(mop.getTarget(),ir.options);
if (summ == null) {
return true;
}
if (use == Call.getResult(inst)) {
return summ.resultMayEscapeThread();
}
int p=getParameterIndex(use,inst);
return summ.parameterMayEscapeThread(p);
case CHECKCAST_opcode:
case CHECKCAST_NOTNULL_opcode:
case CHECKCAST_UNRESOLVED_opcode:
case REF_MOVE_opcode:
{
Register copy=ResultCarrier.getResult(inst).getRegister();
if (!copy.isSSA()) {
return true;
}
 else {
if (visited == null) {
visited=new HashSet<Register>();
}
visited.add(use.getRegister());
if (visited.contains(copy)) {
return false;
}
 else {
return checkIfUseEscapesThread(copy,ir,visited);
}
}
}
case ATHROW_opcode:
case PREPARE_INT_opcode:
case PREPARE_ADDR_opcode:
case PREPARE_LONG_opcode:
case ATTEMPT_LONG_opcode:
case ATTEMPT_INT_opcode:
case ATTEMPT_ADDR_opcode:
case INT_MOVE_opcode:
case INT_ADD_opcode:
case REF_ADD_opcode:
case INT_MUL_opcode:
case INT_DIV_opcode:
case INT_REM_opcode:
case INT_NEG_opcode:
case INT_ZERO_CHECK_opcode:
case INT_OR_opcode:
case INT_AND_opcode:
case INT_XOR_opcode:
case REF_OR_opcode:
case REF_AND_opcode:
case REF_XOR_opcode:
case INT_SUB_opcode:
case REF_SUB_opcode:
case INT_SHL_opcode:
case INT_SHR_opcode:
case INT_USHR_opcode:
case SYSCALL_opcode:
case REF_SHL_opcode:
case REF_SHR_opcode:
case REF_USHR_opcode:
case SET_CAUGHT_EXCEPTION_opcode:
case PHI_opcode:
case INT_2LONG_opcode:
case REF_COND_MOVE_opcode:
case INT_COND_MOVE_opcode:
case INT_2ADDRSigExt_opcode:
case INT_2ADDRZerExt_opcode:
case ADDR_2INT_opcode:
case ADDR_2LONG_opcode:
case YIELDPOINT_OSR_opcode:
return true;
default :
return Operators.helper.mayEscapeThread(inst);
}
}",0.9774559046840322
149654,"@Override public void run(){
  while (!interrupted()) {
    try {
synchronized (this) {
        idleImpl();
      }
    }
 catch (    IllegalMonitorStateException e) {
      throw e;
    }
catch (    InterruptedException e) {
      return;
    }
  }
}","@Override public void run(){
  while (!interrupted()) {
    try {
synchronized (this) {
        idleImpl();
      }
    }
 catch (    InterruptedException e) {
      return;
    }
  }
}",0.8486238532110092
149655,"/** 
 * This is the findOrCreate() method through which all Atoms are ultimately created.   The constructor for Atom is a private method, so someone has to call one of the public findOrCreate() methods to get a new one.  And they all feed through here.
 */
private static Atom findOrCreate(byte[] bytes,boolean create,String str){
  Atom val=new Atom(bytes,-1,str);
  val=dictionary.get(val);
  if (val != null || !create)   return val;
synchronized (Atom.class) {
    val=new Atom(bytes,nextId++,str);
    int column=val.id >> LOG_ROW_SIZE;
    if (column == atoms.length) {
      Atom[][] tmp=new Atom[column + 1][];
      for (int i=0; i < column; i++) {
        tmp[i]=atoms[i];
      }
      atoms=tmp;
      atoms[column]=new Atom[1 << LOG_ROW_SIZE];
    }
    atoms[column][val.id & ROW_MASK]=val;
    dictionary.put(val,val);
  }
  return val;
}","/** 
 * This is the findOrCreate() method through which all Atoms are ultimately created.   The constructor for Atom is a private method, so someone has to call one of the public findOrCreate() methods to get a new one.  And they all feed through here.
 */
private static Atom findOrCreate(byte[] bytes,boolean create,String str){
  Atom val=new Atom(bytes,-1,str);
  val=dictionary.get(val);
  if (val != null || !create)   return val;
synchronized (Atom.class) {
    val=new Atom(bytes,-1,str);
    val=dictionary.get(val);
    if (val != null)     return val;
    val=new Atom(bytes,nextId++,str);
    int column=val.id >> LOG_ROW_SIZE;
    if (column == atoms.length) {
      Atom[][] tmp=new Atom[column + 1][];
      for (int i=0; i < column; i++) {
        tmp[i]=atoms[i];
      }
      atoms=tmp;
      atoms[column]=new Atom[1 << LOG_ROW_SIZE];
    }
    atoms[column][val.id & ROW_MASK]=val;
    dictionary.put(val,val);
  }
  return val;
}",0.9456762749445676
149656,"public RVMField[] finish(){
  RVMField[] result=popularFVs.get(this);
  if (result != null) {
    array=result;
    return result;
  }
 else {
    adjustLength(cnt);
    popularFVs.put(this,array);
    return array;
  }
}","public RVMField[] finish(){
synchronized (RVMField.class) {
    RVMField[] result=popularFVs.get(this);
    if (result != null) {
      array=result;
      return result;
    }
 else {
      adjustLength(cnt);
      popularFVs.put(this,array);
      return array;
    }
  }
}",0.7056451612903226
149657,"public RVMMethod[] finish(){
  RVMMethod[] result=popularMVs.get(this);
  if (result != null) {
    array=result;
    return result;
  }
 else {
    adjustLength(cnt);
    popularMVs.put(this,array);
    return array;
  }
}","public RVMMethod[] finish(){
synchronized (MethodVector.class) {
    RVMMethod[] result=popularMVs.get(this);
    if (result != null) {
      array=result;
      return result;
    }
 else {
      adjustLength(cnt);
      popularMVs.put(this,array);
      return array;
    }
  }
}",0.7023809523809523
149658,"/** 
 * Add to list of classes that derive from this one.
 */
private void addSubClass(RVMClass sub){
  int n=subClasses.length;
  RVMClass[] tmp=new RVMClass[n + 1];
  for (int i=0; i < n; ++i) {
    tmp[i]=subClasses[i];
  }
  tmp[n]=sub;
  subClasses=tmp;
}","/** 
 * Add to list of classes that derive from this one.
 */
private synchronized void addSubClass(RVMClass sub){
  int n=subClasses.length;
  RVMClass[] tmp=new RVMClass[n + 1];
  for (int i=0; i < n; ++i) {
    tmp[i]=subClasses[i];
  }
  tmp[n]=sub;
  subClasses=tmp;
}",0.975609756097561
149659,"@Override public void collectionPhase(short phaseId){
  if (phaseId == SET_COLLECTION_KIND) {
    super.collectionPhase(phaseId);
    if (CC_ENABLED) {
      ccForceFull=Options.fullHeapSystemGC.getValue();
      performCycleCollection|=(collectionAttempt > 1) || emergencyCollection || ccForceFull;
      if (performCycleCollection && Options.verbose.getValue() > 0)       Log.write(""String_Node_Str"");
    }
    return;
  }
  if (phaseId == PREPARE) {
    VM.finalizableProcessor.clear();
    VM.weakReferences.clear();
    VM.softReferences.clear();
    VM.phantomReferences.clear();
    rootTrace.prepare();
    rcSpace.prepare();
    if (CC_BACKUP_TRACE && performCycleCollection) {
      backupTrace.prepare();
    }
    return;
  }
  if (phaseId == CLOSURE) {
    rootTrace.prepare();
    modPool.prepare();
    return;
  }
  if (phaseId == BT_CLOSURE) {
    if (CC_BACKUP_TRACE && performCycleCollection) {
      backupTrace.prepare();
    }
    return;
  }
  if (phaseId == PROCESS_OLDROOTBUFFER) {
    oldRootPool.prepare();
    return;
  }
  if (phaseId == PROCESS_NEWROOTBUFFER) {
    newRootPool.prepare();
    return;
  }
  if (phaseId == PROCESS_MODBUFFER) {
    modPool.prepare();
    return;
  }
  if (phaseId == PROCESS_DECBUFFER) {
    decPool.prepare();
    return;
  }
  if (phaseId == RELEASE) {
    rootTrace.release();
    if (CC_BACKUP_TRACE && performCycleCollection) {
      backupTrace.release();
      rcSpace.sweepCells(rcSweeper);
      rcloSpace.sweep(loFreeSweeper);
    }
 else {
      rcSpace.release();
    }
    performCycleCollection=getPagesAvail() < Options.cycleTriggerThreshold.getPages();
    return;
  }
  super.collectionPhase(phaseId);
}","@Override public void collectionPhase(short phaseId){
  if (phaseId == SET_COLLECTION_KIND) {
    super.collectionPhase(phaseId);
    if (CC_ENABLED) {
      ccForceFull=Options.fullHeapSystemGC.getValue();
      if (BUILD_FOR_GENRC)       performCycleCollection=(collectionAttempt > 1) || emergencyCollection || ccForceFull;
 else       performCycleCollection|=(collectionAttempt > 1) || emergencyCollection || ccForceFull;
      if (performCycleCollection && Options.verbose.getValue() > 0)       Log.write(""String_Node_Str"");
    }
    return;
  }
  if (phaseId == PREPARE) {
    VM.finalizableProcessor.clear();
    VM.weakReferences.clear();
    VM.softReferences.clear();
    VM.phantomReferences.clear();
    rootTrace.prepare();
    rcSpace.prepare();
    if (CC_BACKUP_TRACE && performCycleCollection) {
      backupTrace.prepare();
    }
    return;
  }
  if (phaseId == CLOSURE) {
    rootTrace.prepare();
    modPool.prepare();
    return;
  }
  if (phaseId == BT_CLOSURE) {
    if (CC_BACKUP_TRACE && performCycleCollection) {
      backupTrace.prepare();
    }
    return;
  }
  if (phaseId == PROCESS_OLDROOTBUFFER) {
    oldRootPool.prepare();
    return;
  }
  if (phaseId == PROCESS_NEWROOTBUFFER) {
    newRootPool.prepare();
    return;
  }
  if (phaseId == PROCESS_MODBUFFER) {
    modPool.prepare();
    return;
  }
  if (phaseId == PROCESS_DECBUFFER) {
    decPool.prepare();
    return;
  }
  if (phaseId == RELEASE) {
    rootTrace.release();
    if (CC_BACKUP_TRACE && performCycleCollection) {
      backupTrace.release();
      rcSpace.sweepCells(rcSweeper);
      rcloSpace.sweep(loFreeSweeper);
    }
 else {
      rcSpace.release();
    }
    if (!BUILD_FOR_GENRC)     performCycleCollection=getPagesAvail() < Options.cycleTriggerThreshold.getPages();
    return;
  }
  super.collectionPhase(phaseId);
}",0.9570656809781064
149660,"@Override public void collectionPhase(short phaseId,boolean primary){
  if (phaseId == RCBase.PREPARE) {
    getRootTrace().prepare();
    if (RCBase.CC_BACKUP_TRACE && RCBase.performCycleCollection)     backupTrace.prepare();
    return;
  }
  if (phaseId == RCBase.CLOSURE) {
    getRootTrace().completeTrace();
    newRootBuffer.flushLocal();
    return;
  }
  if (phaseId == RCBase.BT_CLOSURE) {
    if (RCBase.CC_BACKUP_TRACE && RCBase.performCycleCollection) {
      backupTrace.completeTrace();
    }
    return;
  }
  if (phaseId == RCBase.PROCESS_OLDROOTBUFFER) {
    if (RCBase.CC_BACKUP_TRACE && RCBase.performCycleCollection)     return;
    ObjectReference current;
    while (!(current=oldRootBuffer.pop()).isNull()) {
      decBuffer.push(current);
    }
    return;
  }
  if (phaseId == RCBase.PROCESS_NEWROOTBUFFER) {
    ObjectReference current;
    if (RCBase.CC_BACKUP_TRACE && RCBase.performCycleCollection) {
      while (!(current=newRootBuffer.pop()).isNull()) {
        if (RCHeader.testAndMark(current)) {
          if (RCHeader.initRC(current) == RCHeader.INC_NEW) {
            modBuffer.push(current);
          }
          backupTrace.processNode(current);
        }
 else {
          if (RCHeader.incRC(current) == RCHeader.INC_NEW) {
            modBuffer.push(current);
          }
        }
      }
      modBuffer.flushLocal();
      return;
    }
    while (!(current=newRootBuffer.pop()).isNull()) {
      if (RCHeader.incRC(current) == RCHeader.INC_NEW) {
        modBuffer.push(current);
      }
      oldRootBuffer.push(current);
    }
    oldRootBuffer.flushLocal();
    modBuffer.flushLocal();
    return;
  }
  if (phaseId == RCBase.PROCESS_MODBUFFER) {
    ObjectReference current;
    while (!(current=modBuffer.pop()).isNull()) {
      RCHeader.makeUnlogged(current);
      if (Space.isInSpace(RCBase.REF_COUNT,current)) {
        ExplicitFreeListSpace.testAndSetLiveBit(current);
      }
      VM.scanning.scanObject(getModifiedProcessor(),current);
    }
    return;
  }
  if (phaseId == RCBase.PROCESS_DECBUFFER) {
    ObjectReference current;
    if (RCBase.CC_BACKUP_TRACE && RCBase.performCycleCollection) {
      while (!(current=decBuffer.pop()).isNull()) {
        if (RCHeader.isNew(current)) {
          if (Space.isInSpace(RCBase.REF_COUNT,current)) {
            RCBase.rcSpace.free(current);
          }
 else           if (Space.isInSpace(RCBase.REF_COUNT_LOS,current)) {
            RCBase.rcloSpace.free(current);
          }
 else           if (Space.isInSpace(RCBase.IMMORTAL,current)) {
            VM.scanning.scanObject(zero,current);
          }
        }
      }
      return;
    }
    while (!(current=decBuffer.pop()).isNull()) {
      if (RCHeader.isNew(current)) {
        if (Space.isInSpace(RCBase.REF_COUNT,current)) {
          RCBase.rcSpace.free(current);
        }
 else         if (Space.isInSpace(RCBase.REF_COUNT_LOS,current)) {
          RCBase.rcloSpace.free(current);
        }
 else         if (Space.isInSpace(RCBase.IMMORTAL,current)) {
          VM.scanning.scanObject(zero,current);
        }
      }
 else {
        if (RCHeader.decRC(current) == RCHeader.DEC_KILL) {
          decBuffer.processChildren(current);
          if (Space.isInSpace(RCBase.REF_COUNT,current)) {
            RCBase.rcSpace.free(current);
          }
 else           if (Space.isInSpace(RCBase.REF_COUNT_LOS,current)) {
            RCBase.rcloSpace.free(current);
          }
 else           if (Space.isInSpace(RCBase.IMMORTAL,current)) {
            VM.scanning.scanObject(zero,current);
          }
        }
      }
    }
    return;
  }
  if (phaseId == RCBase.RELEASE) {
    if (RCBase.CC_BACKUP_TRACE && RCBase.performCycleCollection) {
      backupTrace.release();
      global().oldRootPool.clearDeque(1);
    }
    getRootTrace().release();
    if (VM.VERIFY_ASSERTIONS) {
      VM.assertions._assert(newRootBuffer.isEmpty());
      VM.assertions._assert(modBuffer.isEmpty());
      VM.assertions._assert(decBuffer.isEmpty());
    }
    return;
  }
  super.collectionPhase(phaseId,primary);
}","@Override public void collectionPhase(short phaseId,boolean primary){
  if (phaseId == RCBase.PREPARE) {
    getRootTrace().prepare();
    if (RCBase.CC_BACKUP_TRACE && RCBase.performCycleCollection)     backupTrace.prepare();
    return;
  }
  if (phaseId == RCBase.CLOSURE) {
    getRootTrace().completeTrace();
    newRootBuffer.flushLocal();
    return;
  }
  if (phaseId == RCBase.BT_CLOSURE) {
    if (RCBase.CC_BACKUP_TRACE && RCBase.performCycleCollection) {
      backupTrace.completeTrace();
    }
    return;
  }
  if (phaseId == RCBase.PROCESS_OLDROOTBUFFER) {
    if (RCBase.CC_BACKUP_TRACE && RCBase.performCycleCollection)     return;
    ObjectReference current;
    while (!(current=oldRootBuffer.pop()).isNull()) {
      decBuffer.push(current);
    }
    return;
  }
  if (phaseId == RCBase.PROCESS_NEWROOTBUFFER) {
    ObjectReference current;
    if (RCBase.CC_BACKUP_TRACE && RCBase.performCycleCollection) {
      while (!(current=newRootBuffer.pop()).isNull()) {
        if (RCHeader.testAndMark(current)) {
          if (RCBase.BUILD_FOR_GENRC) {
            RCHeader.initRC(current);
          }
 else {
            if (RCHeader.initRC(current) == RCHeader.INC_NEW) {
              modBuffer.push(current);
            }
          }
          backupTrace.processNode(current);
        }
 else {
          if (RCBase.BUILD_FOR_GENRC) {
            RCHeader.incRC(current);
          }
 else {
            if (RCHeader.incRC(current) == RCHeader.INC_NEW) {
              modBuffer.push(current);
            }
          }
        }
      }
      if (!RCBase.BUILD_FOR_GENRC)       modBuffer.flushLocal();
      return;
    }
    while (!(current=newRootBuffer.pop()).isNull()) {
      if (RCBase.BUILD_FOR_GENRC) {
        RCHeader.incRC(current);
      }
 else {
        if (RCHeader.incRC(current) == RCHeader.INC_NEW) {
          modBuffer.push(current);
        }
      }
      oldRootBuffer.push(current);
    }
    oldRootBuffer.flushLocal();
    if (!RCBase.BUILD_FOR_GENRC)     modBuffer.flushLocal();
    return;
  }
  if (phaseId == RCBase.PROCESS_MODBUFFER) {
    ObjectReference current;
    while (!(current=modBuffer.pop()).isNull()) {
      RCHeader.makeUnlogged(current);
      if (!RCBase.BUILD_FOR_GENRC) {
        if (Space.isInSpace(RCBase.REF_COUNT,current)) {
          ExplicitFreeListSpace.testAndSetLiveBit(current);
        }
      }
      VM.scanning.scanObject(getModifiedProcessor(),current);
    }
    return;
  }
  if (phaseId == RCBase.PROCESS_DECBUFFER) {
    ObjectReference current;
    if (RCBase.CC_BACKUP_TRACE && RCBase.performCycleCollection) {
      if (!RCBase.BUILD_FOR_GENRC) {
        while (!(current=decBuffer.pop()).isNull()) {
          if (RCHeader.isNew(current)) {
            if (Space.isInSpace(RCBase.REF_COUNT,current)) {
              RCBase.rcSpace.free(current);
            }
 else             if (Space.isInSpace(RCBase.REF_COUNT_LOS,current)) {
              RCBase.rcloSpace.free(current);
            }
 else             if (Space.isInSpace(RCBase.IMMORTAL,current)) {
              VM.scanning.scanObject(zero,current);
            }
          }
        }
      }
      return;
    }
    while (!(current=decBuffer.pop()).isNull()) {
      if (RCBase.BUILD_FOR_GENRC) {
        if (RCHeader.decRC(current) == RCHeader.DEC_KILL) {
          decBuffer.processChildren(current);
          if (Space.isInSpace(RCBase.REF_COUNT,current)) {
            RCBase.rcSpace.free(current);
          }
 else           if (Space.isInSpace(RCBase.REF_COUNT_LOS,current)) {
            RCBase.rcloSpace.free(current);
          }
 else           if (Space.isInSpace(RCBase.IMMORTAL,current)) {
            VM.scanning.scanObject(zero,current);
          }
        }
      }
 else {
        if (RCHeader.isNew(current)) {
          if (Space.isInSpace(RCBase.REF_COUNT,current)) {
            RCBase.rcSpace.free(current);
          }
 else           if (Space.isInSpace(RCBase.REF_COUNT_LOS,current)) {
            RCBase.rcloSpace.free(current);
          }
 else           if (Space.isInSpace(RCBase.IMMORTAL,current)) {
            VM.scanning.scanObject(zero,current);
          }
        }
 else {
          if (RCHeader.decRC(current) == RCHeader.DEC_KILL) {
            decBuffer.processChildren(current);
            if (Space.isInSpace(RCBase.REF_COUNT,current)) {
              RCBase.rcSpace.free(current);
            }
 else             if (Space.isInSpace(RCBase.REF_COUNT_LOS,current)) {
              RCBase.rcloSpace.free(current);
            }
 else             if (Space.isInSpace(RCBase.IMMORTAL,current)) {
              VM.scanning.scanObject(zero,current);
            }
          }
        }
      }
    }
    return;
  }
  if (phaseId == RCBase.RELEASE) {
    if (RCBase.CC_BACKUP_TRACE && RCBase.performCycleCollection) {
      backupTrace.release();
      global().oldRootPool.clearDeque(1);
      if (RCBase.BUILD_FOR_GENRC)       global().decPool.clearDeque(1);
    }
    getRootTrace().release();
    if (VM.VERIFY_ASSERTIONS) {
      VM.assertions._assert(newRootBuffer.isEmpty());
      VM.assertions._assert(modBuffer.isEmpty());
      VM.assertions._assert(decBuffer.isEmpty());
    }
    return;
  }
  super.collectionPhase(phaseId,primary);
}",0.8264693264693265
149661,"/** 
 * {@inheritDoc}
 */
@Override public void collect(){
  Phase.beginNewPhaseStack(Phase.scheduleComplex(global().collection));
}","/** 
 * {@inheritDoc}
 */
@Override public void collect(){
  if (RCBase.BUILD_FOR_GENRC)   Phase.beginNewPhaseStack(Phase.scheduleComplex(global().genRCCollection));
 else   Phase.beginNewPhaseStack(Phase.scheduleComplex(global().refCountCollection));
}",0.6805194805194805
149662,"/** 
 * {@inheritDoc}
 */
@Override public void collectionPhase(short phaseId,boolean primary){
  if (phaseId == RCBase.PREPARE) {
    rc.prepare();
    return;
  }
  if (phaseId == RCBase.PROCESS_MODBUFFER) {
    modBuffer.flushLocal();
    return;
  }
  if (phaseId == RCBase.PROCESS_DECBUFFER) {
    decBuffer.flushLocal();
    return;
  }
  if (phaseId == RCBase.RELEASE) {
    if (RCBase.CC_BACKUP_TRACE && RCBase.performCycleCollection) {
      immortal.linearScan(btSweepImmortal);
    }
    rc.release();
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(modBuffer.isEmpty());
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(decBuffer.isEmpty());
    return;
  }
  super.collectionPhase(phaseId,primary);
}","/** 
 * {@inheritDoc}
 */
@Override public void collectionPhase(short phaseId,boolean primary){
  if (phaseId == RCBase.PREPARE) {
    rc.prepare();
    return;
  }
  if (phaseId == RCBase.PROCESS_MODBUFFER) {
    modBuffer.flushLocal();
    return;
  }
  if (phaseId == RCBase.PROCESS_DECBUFFER) {
    decBuffer.flushLocal();
    return;
  }
  if (phaseId == RCBase.RELEASE) {
    if (RCBase.CC_BACKUP_TRACE && RCBase.performCycleCollection) {
      immortal.linearScan(btSweepImmortal);
    }
    rc.release();
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(modBuffer.isEmpty());
    if (!RCBase.BUILD_FOR_GENRC) {
      if (VM.VERIFY_ASSERTIONS)       VM.assertions._assert(decBuffer.isEmpty());
    }
    return;
  }
  super.collectionPhase(phaseId,primary);
}",0.9566955363091272
149663,"@Override @Inline public void postAlloc(ObjectReference ref,ObjectReference typeRef,int bytes,int allocator){
switch (allocator) {
case RCBase.ALLOC_DEFAULT:
case RCBase.ALLOC_NON_MOVING:
case RCBase.ALLOC_CODE:
    break;
case RCBase.ALLOC_LOS:
case RCBase.ALLOC_PRIMITIVE_LOS:
case RCBase.ALLOC_LARGE_CODE:
  decBuffer.push(ref);
RCBase.rcloSpace.initializeHeader(ref,true);
return;
case RCBase.ALLOC_IMMORTAL:
decBuffer.push(ref);
return;
default :
VM.assertions.fail(""String_Node_Str"");
return;
}
}","@Override @Inline public void postAlloc(ObjectReference ref,ObjectReference typeRef,int bytes,int allocator){
switch (allocator) {
case RCBase.ALLOC_DEFAULT:
case RCBase.ALLOC_NON_MOVING:
    if (RCBase.BUILD_FOR_GENRC)     modBuffer.push(ref);
case RCBase.ALLOC_CODE:
  if (RCBase.BUILD_FOR_GENRC) {
    decBuffer.push(ref);
    RCHeader.initializeHeader(ref,true);
    ExplicitFreeListSpace.unsyncSetLiveBit(ref);
  }
break;
case RCBase.ALLOC_LOS:
if (RCBase.BUILD_FOR_GENRC) modBuffer.push(ref);
case RCBase.ALLOC_PRIMITIVE_LOS:
case RCBase.ALLOC_LARGE_CODE:
decBuffer.push(ref);
if (RCBase.BUILD_FOR_GENRC) RCHeader.initializeHeader(ref,true);
RCBase.rcloSpace.initializeHeader(ref,true);
return;
case RCBase.ALLOC_IMMORTAL:
if (RCBase.BUILD_FOR_GENRC) modBuffer.push(ref);
decBuffer.push(ref);
if (RCBase.BUILD_FOR_GENRC) RCHeader.initializeHeader(ref,true);
return;
default :
VM.assertions.fail(""String_Node_Str"");
return;
}
}",0.6624825662482566
149664,"/** 
 * Initialize the reference count of an object.  Return either <code>INC_OLD</code> if the object is not new, <code>INC_NEW</code> if the object is new.
 * @param object The object whose RC is to be initialized.
 * @return <code>INC_OLD</code> if the object is not new,<code>INC_NEW</code> if the object is new.
 */
@Inline public static int initRC(ObjectReference object){
  Word oldValue, newValue;
  int rtn;
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(RCBase.isRCObject(object));
  do {
    oldValue=VM.objectModel.prepareAvailableBits(object);
    newValue=oldValue.and(WRITE_MASK).or(INCREMENT);
    if (isHeaderNew(oldValue)) {
      newValue=newValue.or(NEW_BIT_MASK);
      rtn=INC_NEW;
    }
 else {
      rtn=INC_OLD;
    }
  }
 while (!VM.objectModel.attemptAvailableBits(object,oldValue,newValue));
  return rtn;
}","/** 
 * Initialize the reference count of an object.  Return either <code>INC_OLD</code> if the object is not new, <code>INC_NEW</code> if the object is new.
 * @param object The object whose RC is to be initialized.
 * @return <code>INC_OLD</code> if the object is not new,<code>INC_NEW</code> if the object is new.
 */
@Inline public static int initRC(ObjectReference object){
  Word oldValue, newValue;
  int rtn;
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(RCBase.isRCObject(object));
  do {
    oldValue=VM.objectModel.prepareAvailableBits(object);
    newValue=oldValue.and(WRITE_MASK).or(INCREMENT);
    if (RCBase.BUILD_FOR_GENRC) {
      rtn=INC_OLD;
    }
 else {
      if (isHeaderNew(oldValue)) {
        newValue=newValue.or(NEW_BIT_MASK);
        rtn=INC_NEW;
      }
 else {
        rtn=INC_OLD;
      }
    }
  }
 while (!VM.objectModel.attemptAvailableBits(object,oldValue,newValue));
  return rtn;
}",0.9518413597733713
149665,"/** 
 * Increment the reference count of an object.  Return either <code>INC_OLD</code> if the object is not new, <code>INC_NEW</code> if the object is new.
 * @param object The object whose RC is to be incremented.
 * @return <code>INC_OLD</code> if the object is not new,<code>INC_NEW</code> if the object is new.
 */
@Inline public static int incRC(ObjectReference object){
  Word oldValue, newValue;
  int rtn;
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(RCBase.isRCObject(object));
  do {
    oldValue=VM.objectModel.prepareAvailableBits(object);
    if (isStuck(oldValue))     return INC_OLD;
    if (isHeaderNew(oldValue)) {
      newValue=oldValue.plus(DOUBLE_INCREMENT);
      newValue=newValue.or(NEW_BIT_MASK);
      rtn=INC_NEW;
    }
 else {
      newValue=oldValue.plus(INCREMENT);
      rtn=INC_OLD;
    }
  }
 while (!VM.objectModel.attemptAvailableBits(object,oldValue,newValue));
  return rtn;
}","/** 
 * Increment the reference count of an object.  Return either <code>INC_OLD</code> if the object is not new, <code>INC_NEW</code> if the object is new.
 * @param object The object whose RC is to be incremented.
 * @return <code>INC_OLD</code> if the object is not new,<code>INC_NEW</code> if the object is new.
 */
@Inline public static int incRC(ObjectReference object){
  Word oldValue, newValue;
  int rtn;
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(RCBase.isRCObject(object));
  do {
    oldValue=VM.objectModel.prepareAvailableBits(object);
    if (isStuck(oldValue))     return INC_OLD;
    if (RCBase.BUILD_FOR_GENRC) {
      newValue=oldValue.plus(INCREMENT);
      rtn=INC_OLD;
    }
 else {
      if (isHeaderNew(oldValue)) {
        newValue=oldValue.plus(DOUBLE_INCREMENT);
        newValue=newValue.or(NEW_BIT_MASK);
        rtn=INC_NEW;
      }
 else {
        newValue=oldValue.plus(INCREMENT);
        rtn=INC_OLD;
      }
    }
  }
 while (!VM.objectModel.attemptAvailableBits(object,oldValue,newValue));
  return rtn;
}",0.934077079107505
149666,"/** 
 * Retain the reference count of an object.  Return either <code>INC_OLD</code> if the object is not new, <code>INC_NEW</code> if the object is new.
 * @param object The object whose RC is to be retained.
 * @return <code>INC_OLD</code> if the object is not new,<code>INC_NEW</code> if the object is new.
 */
@Inline public static int remainRC(ObjectReference object){
  Word oldValue, newValue;
  int rtn;
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(RCBase.isRCObject(object));
  do {
    oldValue=VM.objectModel.prepareAvailableBits(object);
    newValue=oldValue;
    if (isHeaderNew(oldValue)) {
      newValue=newValue.or(NEW_BIT_MASK);
      rtn=INC_NEW;
    }
 else {
      return INC_OLD;
    }
  }
 while (!VM.objectModel.attemptAvailableBits(object,oldValue,newValue));
  return rtn;
}","/** 
 * Retain the reference count of an object.  Return either <code>INC_OLD</code> if the object is not new, <code>INC_NEW</code> if the object is new.
 * @param object The object whose RC is to be retained.
 * @return <code>INC_OLD</code> if the object is not new,<code>INC_NEW</code> if the object is new.
 */
@Inline public static int remainRC(ObjectReference object){
  Word oldValue, newValue;
  int rtn;
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(RCBase.isRCObject(object));
  do {
    oldValue=VM.objectModel.prepareAvailableBits(object);
    newValue=oldValue;
    if (RCBase.BUILD_FOR_GENRC) {
      return INC_OLD;
    }
 else {
      if (isHeaderNew(oldValue)) {
        newValue=newValue.or(NEW_BIT_MASK);
        rtn=INC_NEW;
      }
 else {
        return INC_OLD;
      }
    }
  }
 while (!VM.objectModel.attemptAvailableBits(object,oldValue,newValue));
  return rtn;
}",0.9483568075117372
149667,"/** 
 * {@inheritDoc}
 */
@Override public final void collectionPhase(short phaseId,boolean primary){
  if (phaseId == RCBase.PREPARE) {
    super.collectionPhase(phaseId,primary);
    rc.prepare();
    return;
  }
  if (phaseId == RCBase.RELEASE) {
    rc.release();
    super.collectionPhase(phaseId,primary);
    return;
  }
  super.collectionPhase(phaseId,primary);
}","/** 
 * {@inheritDoc}
 */
@Override public final void collectionPhase(short phaseId,boolean primary){
  if (phaseId == RCBase.PREPARE) {
    super.collectionPhase(phaseId,primary);
    rc.prepare();
    return;
  }
  if (phaseId == RCBase.CLOSURE) {
    super.collectionPhase(phaseId,primary);
    rc.flush();
    return;
  }
  if (phaseId == RCBase.RELEASE) {
    rc.release();
    super.collectionPhase(phaseId,primary);
    return;
  }
  super.collectionPhase(phaseId,primary);
}",0.8698710433763188
149668,"@Override public boolean hasPrevious(){
  return cursor != l.head;
}","@Override public boolean hasPrevious(){
  return cursor != null && cursor != l.head;
}",0.8831168831168831
149669,"public final boolean compare(Stack<T> s2){
  Iterator<T> i1=iterator();
  Iterator<T> i2=s2.iterator();
  if (isEmpty() && s2.isEmpty()) {
    return true;
  }
 else   if (isEmpty() || s2.isEmpty()) {
    return false;
  }
  for (T t1=i1.next(), t2=i2.next(); i1.hasNext() && i2.hasNext(); ) {
    if (t1 != t2) {
      return false;
    }
  }
  return !i1.hasNext() && !i2.hasNext();
}","public final boolean compare(Stack<T> s2){
  Iterator<T> i1=iterator();
  Iterator<T> i2=s2.iterator();
  if (isEmpty() && s2.isEmpty()) {
    return true;
  }
 else   if (isEmpty() || s2.isEmpty()) {
    return false;
  }
  for (T t1=i1.next(), t2=i2.next(); i1.hasNext() && i2.hasNext(); ) {
    if (t1 != t2) {
      return false;
    }
    t1=i1.next();
    t2=i2.next();
  }
  return !i1.hasNext() && !i2.hasNext();
}",0.9554455445544554
149670,"/** 
 * Perform the actual read of a boolean read barrier.
 * @param objref The object that has the boolean field
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final boolean booleanRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getByteAtOffset(objref.toObject(),offset.toOffset()) == 0;
}","/** 
 * Perform the actual read of a boolean read barrier.
 * @param objref The object that has the boolean field
 * @param offset The offset from the ref
 * @param location Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final boolean booleanRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getByteAtOffset(objref.toObject(),offset.toOffset()) == 0;
}",0.9846153846153848
149671,"/** 
 * Perform the actual read of a char read barrier.
 * @param objref The object that has the char field
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final char charRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getCharAtOffset(objref.toObject(),offset.toOffset());
}","/** 
 * Perform the actual read of a char read barrier.
 * @param objref The object that has the char field
 * @param offset The offset from the ref
 * @param location Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final char charRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getCharAtOffset(objref.toObject(),offset.toOffset());
}",0.9840182648401826
149672,"/** 
 * Perform the actual read of a int read barrier.
 * @param objref The object that has the int field
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final int intRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getIntAtOffset(objref.toObject(),offset.toOffset());
}","/** 
 * Perform the actual read of a int read barrier.
 * @param objref The object that has the int field
 * @param offset The offset from the ref
 * @param location Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final int intRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getIntAtOffset(objref.toObject(),offset.toOffset());
}",0.9838337182448036
149673,"/** 
 * Perform the actual write of the non-heap write barrier.  This is used when the store is not to an object, but to a non-heap location such as statics or the stack.
 * @param target The value that the slot will be updated to
 * @param unusedA The offset from the ref
 * @param unusedB Unused
 * @param ref The object that has the reference field
 */
@Inline @Override public final void objectReferenceNonHeapWrite(Address slot,ObjectReference target,Word unusedA,Word unusedB){
  slot.store(target);
}","/** 
 * Perform the actual write of the non-heap write barrier.  This is used when the store is not to an object, but to a non-heap location such as statics or the stack.
 * @param slot The slot to be updated
 * @param target The value that the slot will be updated to
 * @param unusedA Unused
 * @param unusedB Unused
 */
@Inline @Override public final void objectReferenceNonHeapWrite(Address slot,ObjectReference target,Word unusedA,Word unusedB){
  slot.store(target);
}",0.8583078491335372
149674,"/** 
 * Perform the actual read of a byte read barrier.
 * @param objref The object that has the byte field
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final byte byteRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getByteAtOffset(objref.toObject(),offset.toOffset());
}","/** 
 * Perform the actual read of a byte read barrier.
 * @param objref The object that has the byte field
 * @param offset The offset from the ref
 * @param location Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final byte byteRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getByteAtOffset(objref.toObject(),offset.toOffset());
}",0.9840182648401826
149675,"/** 
 * Perform the actual read of a long read barrier.
 * @param objref The object that has the long field
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final long longRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getLongAtOffset(objref.toObject(),offset.toOffset());
}","/** 
 * Perform the actual read of a long read barrier.
 * @param objref The object that has the long field
 * @param offset The offset from the ref
 * @param location Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final long longRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getLongAtOffset(objref.toObject(),offset.toOffset());
}",0.9840182648401826
149676,"/** 
 * Perform the actual read of a double read barrier.
 * @param objref The object that has the double field
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final double doubleRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getDoubleAtOffset(objref.toObject(),offset.toOffset());
}","/** 
 * Perform the actual read of a double read barrier.
 * @param objref The object that has the double field
 * @param offset The offset from the ref
 * @param location Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final double doubleRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getDoubleAtOffset(objref.toObject(),offset.toOffset());
}",0.984375
149677,"/** 
 * Perform the actual read of a short read barrier.
 * @param objref The object that has the short field
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final short shortRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getShortAtOffset(objref.toObject(),offset.toOffset());
}","/** 
 * Perform the actual read of a short read barrier.
 * @param objref The object that has the short field
 * @param offset The offset from the ref
 * @param location Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final short shortRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getShortAtOffset(objref.toObject(),offset.toOffset());
}",0.984198645598194
149678,"/** 
 * Perform the actual read of a float read barrier.
 * @param objref The object that has the float field
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final float floatRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getFloatAtOffset(objref.toObject(),offset.toOffset());
}","/** 
 * Perform the actual read of a float read barrier.
 * @param objref The object that has the float field
 * @param offset The offset from the ref
 * @param location Unused
 * @param mode The context in which the write is occurring
 * @return the read value
 */
@Inline @Override public final float floatRead(ObjectReference objref,Word offset,Word location,int mode){
  return Magic.getFloatAtOffset(objref.toObject(),offset.toOffset());
}",0.984198645598194
149679,"/** 
 * Place a phase on the phase stack and begin processing.
 * @param scheduledPhase The phase to execute
 * @return True if the phase stack is exhausted.
 */
public static void beginNewPhaseStack(int scheduledPhase){
  int order=((ParallelCollector)VM.activePlan.collector()).rendezvous();
  if (order == 0) {
    pushScheduledPhase(scheduledPhase);
  }
  processPhaseStack(false);
}","/** 
 * Place a phase on the phase stack and begin processing.
 * @param scheduledPhase The phase to execute
 */
public static void beginNewPhaseStack(int scheduledPhase){
  int order=((ParallelCollector)VM.activePlan.collector()).rendezvous();
  if (order == 0) {
    pushScheduledPhase(scheduledPhase);
  }
  processPhaseStack(false);
}",0.9324137931034484
149680,"/** 
 * Continue the execution of a phase stack. Used for incremental and concurrent collection.
 * @return True if the phase stack is exhausted.
 */
public static void continuePhaseStack(){
  processPhaseStack(true);
}","/** 
 * Continue the execution of a phase stack. Used for incremental and concurrent collection.
 */
public static void continuePhaseStack(){
  processPhaseStack(true);
}",0.8740359897172236
149681,"/** 
 * A number of references are about to be copied from object <code>src</code> to object <code>dst</code> (as in an array copy).  Thus, <code>dst</code> is the mutated object.  Take appropriate write barrier actions.<p> In this case, we remember the mutated source address range and will scan that address range at GC time.
 * @param src The source of the values to be copied
 * @param srcIdx The starting source index
 * @param dst The mutated object, i.e. the destination of the copy.
 * @param srcIdx The starting source index
 * @param len The number of array elements to be copied
 * @return True if the update was performed by the barrier, false ifleft to the caller (always false in this case).
 */
@Inline @Override public final boolean objectReferenceBulkCopy(ObjectReference src,Offset srcOffset,ObjectReference dst,Offset dstOffset,int bytes){
  if (!Gen.inNursery(dst)) {
    Address start=dst.toAddress().plus(dstOffset);
    arrayRemset.insert(start,start.plus(bytes));
  }
  return false;
}","/** 
 * A number of references are about to be copied from object <code>src</code> to object <code>dst</code> (as in an array copy).  Thus, <code>dst</code> is the mutated object.  Take appropriate write barrier actions.<p> In this case, we remember the mutated source address range and will scan that address range at GC time.
 * @param src The source of the values to be copied
 * @param srcOffset The starting source offset
 * @param dst The mutated object, i.e. the destination of the copy.
 * @param dstOffset The starting destination offset
 * @param bytes The number of bytes to copy
 * @return True if the update was performed by the barrier, false ifleft to the caller (always false in this case).
 */
@Inline @Override public final boolean objectReferenceBulkCopy(ObjectReference src,Offset srcOffset,ObjectReference dst,Offset dstOffset,int bytes){
  if (!Gen.inNursery(dst)) {
    Address start=dst.toAddress().plus(dstOffset);
    arrayRemset.insert(start,start.plus(bytes));
  }
  return false;
}",0.9440316988608222
149682,"/** 
 * Perform the root write barrier fast path, which may involve remembering a reference if necessary.
 * @param slot The address into which the new reference will bestored.
 * @param tgt The target of the new reference
 * @param mode The mode of the store (eg putfield, putstatic etc)
 */
@Inline private void fastPath(Address slot,ObjectReference tgt){
  if (Gen.GATHER_WRITE_BARRIER_STATS)   Gen.wbFast.inc();
  if (Gen.inNursery(tgt)) {
    if (Gen.GATHER_WRITE_BARRIER_STATS)     Gen.wbSlow.inc();
    remset.insert(slot);
  }
}","/** 
 * Perform the root write barrier fast path, which may involve remembering a reference if necessary.
 * @param slot The address into which the new reference will bestored.
 * @param tgt The target of the new reference
 */
@Inline private void fastPath(Address slot,ObjectReference tgt){
  if (Gen.GATHER_WRITE_BARRIER_STATS)   Gen.wbFast.inc();
  if (Gen.inNursery(tgt)) {
    if (Gen.GATHER_WRITE_BARRIER_STATS)     Gen.wbSlow.inc();
    remset.insert(slot);
  }
}",0.9343936381709742
149683,"/** 
 * Advance the cursor either to the next region in the list, or to a new region allocated from the global list.
 * @param m
 */
void advanceToNextForwardableRegion(MarkCompactSpace space){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(get().EQ(getLimit()));
  Address nextRegion=BumpPointer.getNextRegion(region);
  if (nextRegion.isZero()) {
    nextRegion=space.getNextRegion();
    if (nextRegion.isZero()) {
      region=Address.zero();
      return;
    }
    MarkCompactLocal.setNextRegion(region,nextRegion);
    MarkCompactLocal.clearNextRegion(nextRegion);
  }
  init(nextRegion);
  if (VM.VERIFY_ASSERTIONS)   assertCursorInBounds();
}","/** 
 * Advance the cursor either to the next region in the list, or to a new region allocated from the global list.
 * @param space
 */
void advanceToNextForwardableRegion(MarkCompactSpace space){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(get().EQ(getLimit()));
  Address nextRegion=BumpPointer.getNextRegion(region);
  if (nextRegion.isZero()) {
    nextRegion=space.getNextRegion();
    if (nextRegion.isZero()) {
      region=Address.zero();
      return;
    }
    MarkCompactLocal.setNextRegion(region,nextRegion);
    MarkCompactLocal.clearNextRegion(nextRegion);
  }
  init(nextRegion);
  if (VM.VERIFY_ASSERTIONS)   assertCursorInBounds();
}",0.9954407294832828
149684,"/** 
 * Advance the cursor to the end of the given object.
 * @return The object reference of the next object.
 */
@Inline void advanceToObjectEnd(ObjectReference current){
  cursor=VM.objectModel.getObjectEndAddress(current);
  if (VM.VERIFY_ASSERTIONS)   assertCursorInBounds();
}","/** 
 * Advance the cursor to the end of the given object.
 */
@Inline void advanceToObjectEnd(ObjectReference current){
  cursor=VM.objectModel.getObjectEndAddress(current);
  if (VM.VERIFY_ASSERTIONS)   assertCursorInBounds();
}",0.8984375
149685,"/** 
 * Atomically attempt to set the mark bit of an object.  Return true if successful, false if the mark bit was already set.
 * @param object The object whose mark bit is to be written
 * @param value The value to which the mark bits will be set
 */
@Inline private boolean testAndMark(ObjectReference object){
  byte oldValue, markBits, newValue;
  oldValue=VM.objectModel.readAvailableByte(object);
  markBits=(byte)(oldValue & MARK_COUNT_MASK);
  if (markBits == markState)   return false;
  newValue=(byte)((oldValue & ~MARK_COUNT_MASK) | markState);
  if (HeaderByte.NEEDS_UNLOGGED_BIT)   newValue|=HeaderByte.UNLOGGED_BIT;
  VM.objectModel.writeAvailableByte(object,newValue);
  return true;
}","/** 
 * Atomically attempt to set the mark bit of an object.  Return true if successful, false if the mark bit was already set.
 * @param object The object whose mark bit is to be set
 */
@Inline private boolean testAndMark(ObjectReference object){
  byte oldValue, markBits, newValue;
  oldValue=VM.objectModel.readAvailableByte(object);
  markBits=(byte)(oldValue & MARK_COUNT_MASK);
  if (markBits == markState)   return false;
  newValue=(byte)((oldValue & ~MARK_COUNT_MASK) | markState);
  if (HeaderByte.NEEDS_UNLOGGED_BIT)   newValue|=HeaderByte.UNLOGGED_BIT;
  VM.objectModel.writeAvailableByte(object,newValue);
  return true;
}",0.9514563106796116
149686,"/** 
 * Return true if the mark count for an object has the given value.
 * @param object The object whose mark bit is to be tested
 * @param value The value against which the mark bit will be tested
 * @return True if the mark bit for the object has the given value.
 */
@Inline private boolean testMarkState(ObjectReference object){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert((markState & ~MARK_COUNT_MASK) == 0);
  return (VM.objectModel.readAvailableByte(object) & MARK_COUNT_MASK) == markState;
}","/** 
 * Return true if the mark count for an object has the given value.
 * @param object The object whose mark bit is to be tested
 * @return True if the mark bit for the object is set.
 */
@Inline private boolean testMarkState(ObjectReference object){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert((markState & ~MARK_COUNT_MASK) == 0);
  return (VM.objectModel.readAvailableByte(object) & MARK_COUNT_MASK) == markState;
}",0.8136315228966986
149687,"/** 
 * Has an object been forwarded or being forwarded?
 * @param object The object to be checked
 * @return True if the object has been forwarded
 */
@Inline public static boolean stateIsForwardedOrBeingForwarded(Word header){
  return (header.toInt() & FORWARDING_MASK) != 0;
}","/** 
 * Has an object been forwarded or being forwarded?
 * @param header The object header to be checked
 * @return True if the object has been forwarded
 */
@Inline public static boolean stateIsForwardedOrBeingForwarded(Word header){
  return (header.toInt() & FORWARDING_MASK) != 0;
}",0.9523809523809524
149688,"/** 
 * Has an object been forwarded or being forwarded?
 * @param object The object to be checked
 * @return True if the object has been forwarded
 */
@Inline public static boolean stateIsBeingForwarded(Word header){
  return (header.toInt() & FORWARDING_MASK) == BEING_FORWARDED;
}","/** 
 * Has an object been forwarded or being forwarded?
 * @param header The object header to be checked
 * @return True if the object has been forwarded
 */
@Inline public static boolean stateIsBeingForwarded(Word header){
  return (header.toInt() & FORWARDING_MASK) == BEING_FORWARDED;
}",0.9528795811518324
149689,"/** 
 * Perform any required initialization of the GC portion of the header. Called for objects created at boot time.
 * @param ref the object ref to the storage to be initialized
 * @param typeRef the type reference for the instance being created
 * @param size the number of bytes allocated by the GC system forthis object.
 * @param status the initial value of the status word
 * @return The new value of the status word
 */
public static byte setBuildTimeGCByte(Address object,ObjectReference typeRef,int size){
  byte status=0;
  if (NEEDS_UNLOGGED_BIT)   status|=UNLOGGED_BIT;
  return status;
}","/** 
 * Perform any required initialization of the GC portion of the header. Called for objects created at boot time.
 * @param object the Address representing the storage to be initialized
 * @param typeRef the type reference for the instance being created
 * @param size the number of bytes allocated by the GC system forthis object.
 * @return The new value of the status word
 */
public static byte setBuildTimeGCByte(Address object,ObjectReference typeRef,int size){
  byte status=0;
  if (NEEDS_UNLOGGED_BIT)   status|=UNLOGGED_BIT;
  return status;
}",0.9032815198618308
149690,"/** 
 * Set the next region in the linked-list of regions
 * @param region The region
 * @param the next region in the list
 */
@Inline public static void setNextRegion(Address region,Address nextRegion){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!region.isZero());
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!nextRegion.EQ(Address.fromIntZeroExtend(0xdeadbeef)));
  region.store(nextRegion,NEXT_REGION_OFFSET);
}","/** 
 * Set the next region in the linked-list of regions
 * @param region The region
 * @param nextRegion the next region in the list
 */
@Inline public static void setNextRegion(Address region,Address nextRegion){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!region.isZero());
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!nextRegion.EQ(Address.fromIntZeroExtend(0xdeadbeef)));
  region.store(nextRegion,NEXT_REGION_OFFSET);
}",0.9874285714285714
149691,"/** 
 * Return the end address of the given region.
 * @param region The region.
 * @return the allocation limit of the region.
 */
public static void setRegionLimit(Address region,Address limit){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!region.isZero());
  region.plus(REGION_LIMIT_OFFSET).store(limit);
}","/** 
 * Store the limit value at the end of the region.
 */
public static void setRegionLimit(Address region,Address limit){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!region.isZero());
  region.plus(REGION_LIMIT_OFFSET).store(limit);
}",0.7907801418439716
149692,"/** 
 * Remove a request to the space.
 * @param pages The number of pages returned due to the request.
 */
@Inline public final void clearRequest(int reservedPages){
  lock();
  reserved-=reservedPages;
  unlock();
}","/** 
 * Remove a request to the space.
 * @param reservedPages The number of pages returned due to the request.
 */
@Inline public final void clearRequest(int reservedPages){
  lock();
  reserved-=reservedPages;
  unlock();
}",0.9773755656108596
149693,"/** 
 * Atomically write a Word field of an object or array and return the old value of the Word field.
 * @param ref The object that has the Word field
 * @param target The value that the slot will be updated to
 * @param metaDataA Opaque, VM-specific, meta-data identifying the slot
 * @param metaDataB Opaque, VM-specific, meta-data identifying the slot
 * @param mode The context in which the write is occurring
 * @return The raw value that was replaced by the write.
 */
public abstract Word wordAtomicWrite(ObjectReference ref,Word rawTarget,Word metaDataA,Word metaDataB,int mode);","/** 
 * Atomically write a Word field of an object or array and return the old value of the Word field.
 * @param ref The object that has the Word field
 * @param rawTarget The value that the slot will be updated to
 * @param metaDataA Opaque, VM-specific, meta-data identifying the slot
 * @param metaDataB Opaque, VM-specific, meta-data identifying the slot
 * @param mode The context in which the write is occurring
 * @return The raw value that was replaced by the write.
 */
public abstract Word wordAtomicWrite(ObjectReference ref,Word rawTarget,Word metaDataA,Word metaDataB,int mode);",0.995766299745978
149694,"/** 
 * Perform element-by-element arraycopy for array of objects without performing checkcast.  Used when bulk copy is not possible, but checkcast is still not necessary.  If barriers are required they must be explicitly invoked.
 * @param src The source array
 * @param srcIdx The starting source index
 * @param dst The destination array
 * @param dstIdx The starting destination index
 * @param len The number of array elements to be copied
 */
private static void arraycopyPiecemealNoCheckcast(Object[] src,Object[] dst,int len,Offset srcOffset,Offset dstOffset,int bytes){
  int increment;
  if (srcOffset.sGT(dstOffset)) {
    increment=BYTES_IN_ADDRESS;
  }
 else {
    srcOffset=srcOffset.plus(bytes - BYTES_IN_ADDRESS);
    dstOffset=dstOffset.plus(bytes - BYTES_IN_ADDRESS);
    increment=-BYTES_IN_ADDRESS;
  }
  while (len-- != 0) {
    Object value;
    if (NEEDS_OBJECT_ALOAD_BARRIER) {
      value=Barriers.objectArrayRead(src,srcOffset.toInt() >> LOG_BYTES_IN_ADDRESS);
    }
 else {
      value=Magic.getObjectAtOffset(src,srcOffset);
    }
    if (NEEDS_OBJECT_ASTORE_BARRIER) {
      Barriers.objectArrayWrite(dst,dstOffset.toInt() >> LOG_BYTES_IN_ADDRESS,value);
    }
 else {
      Magic.setObjectAtOffset(dst,dstOffset,value);
    }
    srcOffset=srcOffset.plus(increment);
    dstOffset=dstOffset.plus(increment);
  }
}","/** 
 * Perform element-by-element arraycopy for array of objects without performing checkcast.  Used when bulk copy is not possible, but checkcast is still not necessary.  If barriers are required they must be explicitly invoked.
 * @param src The source array
 * @param dst The destination array
 * @param len The number of array elements to be copied
 * @param srcOffset The starting offset in the source array
 * @param dstOffset The starting offset in the destination array.
 * @param bytes the number of bytes to copy
 */
private static void arraycopyPiecemealNoCheckcast(Object[] src,Object[] dst,int len,Offset srcOffset,Offset dstOffset,int bytes){
  int increment;
  if (srcOffset.sGT(dstOffset)) {
    increment=BYTES_IN_ADDRESS;
  }
 else {
    srcOffset=srcOffset.plus(bytes - BYTES_IN_ADDRESS);
    dstOffset=dstOffset.plus(bytes - BYTES_IN_ADDRESS);
    increment=-BYTES_IN_ADDRESS;
  }
  while (len-- != 0) {
    Object value;
    if (NEEDS_OBJECT_ALOAD_BARRIER) {
      value=Barriers.objectArrayRead(src,srcOffset.toInt() >> LOG_BYTES_IN_ADDRESS);
    }
 else {
      value=Magic.getObjectAtOffset(src,srcOffset);
    }
    if (NEEDS_OBJECT_ASTORE_BARRIER) {
      Barriers.objectArrayWrite(dst,dstOffset.toInt() >> LOG_BYTES_IN_ADDRESS,value);
    }
 else {
      Magic.setObjectAtOffset(dst,dstOffset,value);
    }
    srcOffset=srcOffset.plus(increment);
    dstOffset=dstOffset.plus(increment);
  }
}",0.8918625678119348
149695,"/** 
 * Number of padding bytes required.
 * @param alignCode Prospective encoded value.
 * @return
 */
public static int padding(int alignCode){
  if (alignCode == ALIGN_CODE_NONE)   return 0;
  return (MAX_ALIGN_WORDS << FIELD_SHIFT);
}","/** 
 * Number of padding bytes required.
 * @param alignCode Prospective encoded value.
 * @return the number of padding bytes required
 */
public static int padding(int alignCode){
  if (alignCode == ALIGN_CODE_NONE)   return 0;
  return (MAX_ALIGN_WORDS << FIELD_SHIFT);
}",0.9278752436647172
149696,"/** 
 * Extract the encoded value from an object's TIB pointer
 * @param tib
 * @return
 */
@Uninterruptible @Inline public static int getTibCode(ObjectReference object){
  int tibCode=extractTibCode(Magic.objectAsAddress(ObjectModel.getTIB(object)));
  return tibCode;
}","/** 
 * Extract the encoded value from an object's TIB pointer
 * @param object
 * @return the encoded value from a TIB pointer
 */
@Uninterruptible @Inline public static int getTibCode(ObjectReference object){
  int tibCode=extractTibCode(Magic.objectAsAddress(ObjectModel.getTIB(object)));
  return tibCode;
}",0.9209621993127148
149697,"/** 
 * Extract the encoded value from a TIB pointer, represented as a raw address.
 * @param tib
 * @return
 */
@Uninterruptible @Inline public static int extractTibCode(Address address){
  return (address.toInt() & TIB_ALIGN_MASK) >> FIELD_SHIFT;
}","/** 
 * Extract the encoded value from a TIB pointer, represented as a raw address.
 * @param address
 * @return the encoded value from a TIB pointer
 */
@Uninterruptible @Inline public static int extractTibCode(Address address){
  return (address.toInt() & TIB_ALIGN_MASK) >> FIELD_SHIFT;
}",0.8724584103512015
149698,"/** 
 * Adjust a region address so that the object pointer of an object that starts at this address will be aligned so as to encode the specified value.
 * @param alignCode Value to encode
 * @param region The initial region
 * @return
 */
public static Address adjustRegion(int alignCode,Address region){
  assertSanity(alignCode);
  if (alignCode == ALIGN_CODE_NONE)   return region;
  final Address limit=region.plus(padding(alignCode));
  if (VERBOSE) {
    VM.sysWrite(""String_Node_Str"",region,""String_Node_Str"",getTibCodeForRegion(region));
    VM.sysWriteln(""String_Node_Str"",alignCode);
  }
  while (getTibCodeForRegion(region) != alignCode) {
    if (VM.runningVM) {
      region.store(Word.fromIntZeroExtend(ObjectModel.ALIGNMENT_VALUE));
    }
    region=region.plus(ALIGNMENT_INCREMENT);
    if (region.GT(limit)) {
      VM.sysFail(""String_Node_Str"");
    }
  }
  if (VERBOSE) {
    VM.sysWrite(""String_Node_Str"",region,""String_Node_Str"",getTibCodeForRegion(region));
    VM.sysWriteln(""String_Node_Str"",alignCode);
  }
  return region;
}","/** 
 * Adjust a region address so that the object pointer of an object that starts at this address will be aligned so as to encode the specified value.
 * @param alignCode Value to encode
 * @param region The initial region
 * @return the aligned address
 */
public static Address adjustRegion(int alignCode,Address region){
  assertSanity(alignCode);
  if (alignCode == ALIGN_CODE_NONE)   return region;
  final Address limit=region.plus(padding(alignCode));
  if (VERBOSE) {
    VM.sysWrite(""String_Node_Str"",region,""String_Node_Str"",getTibCodeForRegion(region));
    VM.sysWriteln(""String_Node_Str"",alignCode);
  }
  while (getTibCodeForRegion(region) != alignCode) {
    if (VM.runningVM) {
      region.store(Word.fromIntZeroExtend(ObjectModel.ALIGNMENT_VALUE));
    }
    region=region.plus(ALIGNMENT_INCREMENT);
    if (region.GT(limit)) {
      VM.sysFail(""String_Node_Str"");
    }
  }
  if (VERBOSE) {
    VM.sysWrite(""String_Node_Str"",region,""String_Node_Str"",getTibCodeForRegion(region));
    VM.sysWriteln(""String_Node_Str"",alignCode);
  }
  return region;
}",0.99057492931197
149699,"/** 
 * Barrier for a bulk copy of floats (i.e. in an array copy).
 * @param src The source array
 * @param srcIdx The starting source index
 * @param dst The destination array
 * @param dstIdx The starting source index
 * @param len The number of array elements to be copied
 */
@Inline public static void floatBulkCopy(float[] src,Offset srcOffset,float[] dst,Offset dstOffset,int bytes){
  if (VM.VerifyAssertions)   VM._assert(FLOAT_BULK_COPY_SUPPORTED);
  if (!Selected.Mutator.get().floatBulkCopy(ObjectReference.fromObject(src),srcOffset,ObjectReference.fromObject(dst),dstOffset,bytes)) {
    Memory.aligned32Copy(Magic.objectAsAddress(dst).plus(dstOffset),Magic.objectAsAddress(src).plus(srcOffset),bytes);
  }
}","/** 
 * Barrier for a bulk copy of floats (i.e. in an array copy).
 * @param src The source array
 * @param srcOffset The starting source offset
 * @param dst The destination array
 * @param dstOffset The starting destination offset
 * @param bytes The number of bytes to be copied
 */
@Inline public static void floatBulkCopy(float[] src,Offset srcOffset,float[] dst,Offset dstOffset,int bytes){
  if (VM.VerifyAssertions)   VM._assert(FLOAT_BULK_COPY_SUPPORTED);
  if (!Selected.Mutator.get().floatBulkCopy(ObjectReference.fromObject(src),srcOffset,ObjectReference.fromObject(dst),dstOffset,bytes)) {
    Memory.aligned32Copy(Magic.objectAsAddress(dst).plus(dstOffset),Magic.objectAsAddress(src).plus(srcOffset),bytes);
  }
}",0.9419889502762432
149700,"/** 
 * Barrier for a bulk copy of doubles (i.e. in an array copy).
 * @param src The source array
 * @param srcIdx The starting source index
 * @param dst The destination array
 * @param dstIdx The starting source index
 * @param len The number of array elements to be copied
 */
@Inline public static void doubleBulkCopy(double[] src,Offset srcOffset,double[] dst,Offset dstOffset,int bytes){
  if (VM.VerifyAssertions)   VM._assert(DOUBLE_BULK_COPY_SUPPORTED);
  if (!Selected.Mutator.get().doubleBulkCopy(ObjectReference.fromObject(src),srcOffset,ObjectReference.fromObject(dst),dstOffset,bytes)) {
    Memory.aligned64Copy(Magic.objectAsAddress(dst).plus(dstOffset),Magic.objectAsAddress(src).plus(srcOffset),bytes);
  }
}","/** 
 * Barrier for a bulk copy of doubles (i.e. in an array copy).
 * @param src The source array
 * @param srcOffset The starting source offset
 * @param dst The destination array
 * @param dstOffset The starting destination offset
 * @param bytes The number of bytes to be copied
 */
@Inline public static void doubleBulkCopy(double[] src,Offset srcOffset,double[] dst,Offset dstOffset,int bytes){
  if (VM.VerifyAssertions)   VM._assert(DOUBLE_BULK_COPY_SUPPORTED);
  if (!Selected.Mutator.get().doubleBulkCopy(ObjectReference.fromObject(src),srcOffset,ObjectReference.fromObject(dst),dstOffset,bytes)) {
    Memory.aligned64Copy(Magic.objectAsAddress(dst).plus(dstOffset),Magic.objectAsAddress(src).plus(srcOffset),bytes);
  }
}",0.9424657534246575
149701,"/** 
 * Copy copyBytes from src to dst. Assumption either the ranges are non overlapping, or src >= dst + 4. Also, src and dst are 4 byte aligned and numBytes is a multiple of 4.
 * @param dst the destination addr
 * @param src the source addr
 * @param numBytes the number of bytes top copy
 */
public static void aligned32Copy(Address dst,Address src,int copyBytes){
  if (VM.VerifyAssertions) {
    VM._assert(copyBytes >= 0);
    VM._assert((copyBytes & (BYTES_IN_INT - 1)) == 0);
    VM._assert(src.toWord().and(Word.fromIntZeroExtend(BYTES_IN_INT - 1)).isZero());
    VM._assert(dst.toWord().and(Word.fromIntZeroExtend(BYTES_IN_INT - 1)).isZero());
    VM._assert(src.plus(copyBytes).LE(dst) || src.GE(dst.plus(BYTES_IN_INT)));
  }
  if (USE_NATIVE && copyBytes > NATIVE_THRESHOLD) {
    memcopy(dst,src,copyBytes);
  }
 else {
    Offset numBytes=Offset.fromIntSignExtend(copyBytes);
    if (BYTES_IN_COPY == 8 && copyBytes != 0) {
      Word wordMask=Word.fromIntZeroExtend(BYTES_IN_COPY - 1);
      Word srcAlignment=src.toWord().and(wordMask);
      if (srcAlignment.EQ(dst.toWord().and(wordMask))) {
        Offset i=Offset.zero();
        if (srcAlignment.EQ(Word.fromIntZeroExtend(BYTES_IN_INT))) {
          copy4Bytes(dst.plus(i),src.plus(i));
          i=i.plus(BYTES_IN_INT);
        }
        Word endAlignment=srcAlignment.plus(numBytes).and(wordMask);
        numBytes=numBytes.minus(endAlignment.toOffset());
        for (; i.sLT(numBytes); i=i.plus(BYTES_IN_COPY)) {
          copy8Bytes(dst.plus(i),src.plus(i));
        }
        if (!endAlignment.isZero()) {
          copy4Bytes(dst.plus(i),src.plus(i));
        }
        return;
      }
    }
    for (Offset i=Offset.zero(); i.sLT(numBytes); i=i.plus(BYTES_IN_INT)) {
      copy4Bytes(dst.plus(i),src.plus(i));
    }
  }
}","/** 
 * Copy copyBytes from src to dst. Assumption either the ranges are non overlapping, or src >= dst + 4. Also, src and dst are 4 byte aligned and numBytes is a multiple of 4.
 * @param dst the destination addr
 * @param src the source addr
 * @param copyBytes the number of bytes top copy
 */
public static void aligned32Copy(Address dst,Address src,int copyBytes){
  if (VM.VerifyAssertions) {
    VM._assert(copyBytes >= 0);
    VM._assert((copyBytes & (BYTES_IN_INT - 1)) == 0);
    VM._assert(src.toWord().and(Word.fromIntZeroExtend(BYTES_IN_INT - 1)).isZero());
    VM._assert(dst.toWord().and(Word.fromIntZeroExtend(BYTES_IN_INT - 1)).isZero());
    VM._assert(src.plus(copyBytes).LE(dst) || src.GE(dst.plus(BYTES_IN_INT)));
  }
  if (USE_NATIVE && copyBytes > NATIVE_THRESHOLD) {
    memcopy(dst,src,copyBytes);
  }
 else {
    Offset numBytes=Offset.fromIntSignExtend(copyBytes);
    if (BYTES_IN_COPY == 8 && copyBytes != 0) {
      Word wordMask=Word.fromIntZeroExtend(BYTES_IN_COPY - 1);
      Word srcAlignment=src.toWord().and(wordMask);
      if (srcAlignment.EQ(dst.toWord().and(wordMask))) {
        Offset i=Offset.zero();
        if (srcAlignment.EQ(Word.fromIntZeroExtend(BYTES_IN_INT))) {
          copy4Bytes(dst.plus(i),src.plus(i));
          i=i.plus(BYTES_IN_INT);
        }
        Word endAlignment=srcAlignment.plus(numBytes).and(wordMask);
        numBytes=numBytes.minus(endAlignment.toOffset());
        for (; i.sLT(numBytes); i=i.plus(BYTES_IN_COPY)) {
          copy8Bytes(dst.plus(i),src.plus(i));
        }
        if (!endAlignment.isZero()) {
          copy4Bytes(dst.plus(i),src.plus(i));
        }
        return;
      }
    }
    for (Offset i=Offset.zero(); i.sLT(numBytes); i=i.plus(BYTES_IN_INT)) {
      copy4Bytes(dst.plus(i),src.plus(i));
    }
  }
}",0.9980571745767416
149702,"/** 
 * Atomically attempt to set the mark bit of an object.  Return true if successful, false if the mark bit was already set.
 * @param object The object whose mark bit is to be written
 * @param value The value to which the mark bits will be set
 */
@Inline private boolean testAndMark(ObjectReference object){
  byte oldValue, markBits;
  oldValue=VM.objectModel.readAvailableByte(object);
  markBits=(byte)(oldValue & MARK_COUNT_MASK);
  if (markBits == markState)   return false;
  VM.objectModel.writeAvailableByte(object,(byte)((oldValue & ~MARK_COUNT_MASK) | markState));
  return true;
}","/** 
 * Atomically attempt to set the mark bit of an object.  Return true if successful, false if the mark bit was already set.
 * @param object The object whose mark bit is to be written
 * @param value The value to which the mark bits will be set
 */
@Inline private boolean testAndMark(ObjectReference object){
  byte oldValue, markBits, newValue;
  oldValue=VM.objectModel.readAvailableByte(object);
  markBits=(byte)(oldValue & MARK_COUNT_MASK);
  if (markBits == markState)   return false;
  newValue=(byte)((oldValue & ~MARK_COUNT_MASK) | markState);
  if (HeaderByte.NEEDS_UNLOGGED_BIT)   newValue|=HeaderByte.UNLOGGED_BIT;
  VM.objectModel.writeAvailableByte(object,newValue);
  return true;
}",0.8375673595073133
149703,"/** 
 * Perform any required initialization of the GC portion of the header.
 * @param object the object ref to the storage to be initialized
 * @param alloc is this initialization occuring due to (initial) allocation(true) or due to copying (false)?
 */
@Inline public void initializeHeader(ObjectReference object,boolean alloc){
  if (HEADER_MARK_BITS) {
    byte oldValue=VM.objectModel.readAvailableByte(object);
    byte newValue=(byte)((oldValue & ~MARK_COUNT_MASK) | (alloc && !isAllocAsMarked ? allocState : markState));
    if (HeaderByte.NEEDS_UNLOGGED_BIT)     newValue|=HeaderByte.UNLOGGED_BIT;
    VM.objectModel.writeAvailableByte(object,newValue);
  }
 else   if (HeaderByte.NEEDS_UNLOGGED_BIT)   HeaderByte.markAsUnlogged(object);
}","/** 
 * Perform any required initialization of the GC portion of the header.
 * @param object the object ref to the storage to be initialized
 * @param alloc is this initialization occuring due to (initial) allocation(true) or due to copying (false)?
 */
@Inline public void initializeHeader(ObjectReference object,boolean alloc){
  if (HEADER_MARK_BITS) {
    byte oldValue=VM.objectModel.readAvailableByte(object);
    byte newValue=(byte)((oldValue & ~MARK_COUNT_MASK) | (alloc && !isAllocAsMarked ? allocState : markState));
    VM.objectModel.writeAvailableByte(object,newValue);
  }
 else   if (HeaderByte.NEEDS_UNLOGGED_BIT)   HeaderByte.markAsUnlogged(object);
}",0.8547249647390691
149704,"/** 
 * Perform a (global) collection phase.
 * @param phaseId Collection phase to execute.
 */
@Inline @Override public final void collectionPhase(short phaseId){
  if (phaseId == SET_COLLECTION_KIND) {
    super.collectionPhase(phaseId);
    collectWholeHeap=requiresFullHeapCollection();
    if (Stats.gatheringStats() && collectWholeHeap)     fullHeap.set();
    super.collectionPhase(phaseId);
    return;
  }
  if (!collectWholeHeap && phaseId == PREPARE) {
    immixTrace.prepare();
    immixSpace.prepare(false);
    return;
  }
  if (phaseId == RELEASE) {
    if (collectWholeHeap) {
      super.collectionPhase(RELEASE);
    }
 else {
      immixTrace.release();
      lastGCWasDefrag=immixSpace.release(false);
    }
    modPool.reset();
    lastCommittedImmixPages=immixSpace.committedPages();
    nextGCWholeHeap=(getPagesAvail() < Options.nurserySize.getMinNursery());
    return;
  }
  super.collectionPhase(phaseId);
}","/** 
 * Perform a (global) collection phase.
 * @param phaseId Collection phase to execute.
 */
@Inline @Override public final void collectionPhase(short phaseId){
  if (phaseId == SET_COLLECTION_KIND) {
    super.collectionPhase(phaseId);
    collectWholeHeap=requiresFullHeapCollection();
    if (Stats.gatheringStats() && collectWholeHeap)     fullHeap.set();
    return;
  }
  if (!collectWholeHeap && phaseId == PREPARE) {
    immixTrace.prepare();
    immixSpace.prepare(false);
    return;
  }
  if (phaseId == RELEASE) {
    if (collectWholeHeap) {
      super.collectionPhase(RELEASE);
    }
 else {
      immixTrace.release();
      lastGCWasDefrag=immixSpace.release(false);
    }
    modPool.reset();
    lastCommittedImmixPages=immixSpace.committedPages();
    nextGCWholeHeap=(getPagesAvail() < Options.nurserySize.getMinNursery());
    return;
  }
  super.collectionPhase(phaseId);
}",0.980349344978166
149705,"/** 
 * The phase has changed (from GC to mutator or mutator to GC). Take action with respect to the last phase if necessary. <b>Do nothing in this case.</b>
 * @param oldPhase The last phase
 */
void phaseChange(int oldPhase){
  if (running) {
    count[oldPhase]=totalCount;
    totalCount=0;
  }
}","/** 
 * The phase has changed (from GC to mutator or mutator to GC). Take action with respect to the last phase if necessary. <b>Do nothing in this case.</b>
 * @param oldPhase The last phase
 */
void phaseChange(int oldPhase){
  if (running) {
    count[oldPhase]=currentCount;
    currentCount=0;
  }
}",0.9602649006622516
149706,"/** 
 * Stop this counter
 */
protected void stop(){
  if (!Stats.gatheringStats)   return;
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(running);
  running=false;
}","/** 
 * Stop this counter
 */
protected void stop(){
  if (!Stats.gatheringStats)   return;
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(running);
  count[Stats.phase]=currentCount;
  currentCount=0;
  running=false;
}",0.8664987405541562
149707,"/** 
 * Increment the event counter by <code>value</code>
 * @param value The amount by which the counter should be incremented.
 */
public void inc(int value){
  if (running)   totalCount+=value;
}","/** 
 * Increment the event counter by <code>value</code>
 * @param value The amount by which the counter should be incremented.
 */
public void inc(int value){
  if (running)   currentCount+=value;
}",0.9698492462311558
149708,"/** 
 * Print the current value for this counter (mid-phase)
 */
public final void printCurrent(){
  printValue(totalCount);
}","/** 
 * Print the current value for this counter (mid-phase)
 */
public final void printCurrent(){
  printValue(currentCount);
}",0.9606299212598424
149709,"/** 
 * Scan static variables (JTOC) for object references.  Executed by all GC threads in parallel, with each doing a portion of the JTOC.
 */
@Inline @Uninterruptible public static void scanStatics(TraceLocal trace){
  final Address slots=Magic.getJTOC();
  final CollectorContext cc=RVMThread.getCurrentThread().getCollectorContext();
  final int numberOfCollectors=cc.parallelWorkerCount();
  final int numberOfReferences=Statics.getNumberOfReferenceSlots();
  final int chunkSize=(numberOfReferences / numberOfCollectors) & chunkSizeMask;
  final int threadOrdinal=cc.parallelWorkerOrdinal();
  final int start=(threadOrdinal == 0) ? refSlotSize : threadOrdinal * chunkSize;
  final int end=(threadOrdinal + 1 == numberOfCollectors) ? numberOfReferences : numberOfCollectors * chunkSize;
  for (int slot=start; slot < end; slot+=refSlotSize) {
    Offset slotOffset=Offset.fromIntSignExtend(slot << LOG_BYTES_IN_INT);
    if (ScanThread.VALIDATE_REFS)     checkReference(slots.plus(slotOffset),slot);
    trace.processRootEdge(slots.plus(slotOffset),true);
  }
}","/** 
 * Scan static variables (JTOC) for object references.  Executed by all GC threads in parallel, with each doing a portion of the JTOC.
 */
@Inline @Uninterruptible public static void scanStatics(TraceLocal trace){
  final Address slots=Magic.getJTOC();
  final CollectorContext cc=RVMThread.getCurrentThread().getCollectorContext();
  final int numberOfCollectors=cc.parallelWorkerCount();
  final int numberOfReferences=Statics.getNumberOfReferenceSlots();
  final int chunkSize=(numberOfReferences / numberOfCollectors) & chunkSizeMask;
  final int threadOrdinal=cc.parallelWorkerOrdinal();
  final int start=(threadOrdinal == 0) ? refSlotSize : threadOrdinal * chunkSize;
  final int end=(threadOrdinal + 1 == numberOfCollectors) ? numberOfReferences : (threadOrdinal + 1) * chunkSize;
  for (int slot=start; slot < end; slot+=refSlotSize) {
    Offset slotOffset=Offset.fromIntSignExtend(slot << LOG_BYTES_IN_INT);
    if (ScanThread.VALIDATE_REFS)     checkReference(slots.plus(slotOffset),slot);
    trace.processRootEdge(slots.plus(slotOffset),true);
  }
}",0.9826697892271664
149710,"/** 
 * Attempt an atomic compare and exchange in a write barrier sequence.
 * @param objref The object that has the Address field
 * @param expected The old Address to be swapped out
 * @param newValue the new Address
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return True if the compare and swap was successful
 */
@Override public boolean addressTryCompareAndSwap(ObjectReference objref,Address expected,Address newValue,Word offset,Word unused,int mode){
  Address oldValue;
  do {
    oldValue=Magic.prepareAddress(objref,offset.toOffset());
    if (oldValue != expected)     return false;
  }
 while (!Magic.attemptAddress(objref,offset.toOffset(),oldValue,newValue));
  return true;
}","/** 
 * Attempt an atomic compare and exchange in a write barrier sequence.
 * @param objref The object that has the Address field
 * @param expected The old Address to be swapped out
 * @param newValue the new Address
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return True if the compare and swap was successful
 */
@Override public boolean addressTryCompareAndSwap(ObjectReference objref,Address expected,Address newValue,Word offset,Word unused,int mode){
  if (org.jikesrvm.VM.BuildForIA32) {
    return Magic.attemptAddress(objref.toObject(),offset.toOffset(),expected,newValue);
  }
 else {
    Address oldValue;
    do {
      oldValue=Magic.prepareAddress(objref,offset.toOffset());
      if (oldValue != expected)       return false;
    }
 while (!Magic.attemptAddress(objref,offset.toOffset(),oldValue,newValue));
    return true;
  }
}",0.8887587822014051
149711,"/** 
 * Attempt an atomic compare and exchange in a write barrier sequence.
 * @param objref The object that has the int field
 * @param expected The old int to be swapped out
 * @param newValue the new int
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return True if the compare and swap was successful
 */
@Override public boolean intTryCompareAndSwap(ObjectReference objref,int expected,int newValue,Word offset,Word unused,int mode){
  int oldValue;
  do {
    oldValue=Magic.prepareInt(objref,offset.toOffset());
    if (oldValue != expected)     return false;
  }
 while (!Magic.attemptInt(objref,offset.toOffset(),oldValue,newValue));
  return true;
}","/** 
 * Attempt an atomic compare and exchange in a write barrier sequence.
 * @param objref The object that has the int field
 * @param expected The old int to be swapped out
 * @param newValue the new int
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return True if the compare and swap was successful
 */
@Override public boolean intTryCompareAndSwap(ObjectReference objref,int expected,int newValue,Word offset,Word unused,int mode){
  if (org.jikesrvm.VM.BuildForIA32) {
    return Magic.attemptInt(objref.toObject(),offset.toOffset(),expected,newValue);
  }
 else {
    int oldValue;
    do {
      oldValue=Magic.prepareInt(objref,offset.toOffset());
      if (oldValue != expected)       return false;
    }
 while (!Magic.attemptInt(objref,offset.toOffset(),oldValue,newValue));
    return true;
  }
}",0.8921568627450981
149712,"/** 
 * Attempt an atomic compare and exchange in a write barrier sequence.
 * @param objref The object that has the reference field
 * @param old The old reference to be swapped out
 * @param target The value that the slot will be updated to
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return True if the compare and swap was successful
 */
@Inline @Override public final boolean objectReferenceTryCompareAndSwap(ObjectReference objref,ObjectReference old,ObjectReference target,Word offset,Word unused,int mode){
  Object oldValue;
  do {
    oldValue=Magic.prepareObject(objref,offset.toOffset());
    if (oldValue != old)     return false;
  }
 while (!Magic.attemptObject(objref,offset.toOffset(),oldValue,target));
  return true;
}","/** 
 * Attempt an atomic compare and exchange in a write barrier sequence.
 * @param objref The object that has the reference field
 * @param old The old reference to be swapped out
 * @param target The value that the slot will be updated to
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return True if the compare and swap was successful
 */
@Inline @Override public final boolean objectReferenceTryCompareAndSwap(ObjectReference objref,ObjectReference old,ObjectReference target,Word offset,Word unused,int mode){
  if (org.jikesrvm.VM.BuildForIA32) {
    return Magic.attemptObject(objref.toObject(),offset.toOffset(),old.toObject(),target.toObject());
  }
 else {
    Object oldValue;
    do {
      oldValue=Magic.prepareObject(objref,offset.toOffset());
      if (oldValue != old)       return false;
    }
 while (!Magic.attemptObject(objref,offset.toOffset(),oldValue,target));
    return true;
  }
}",0.8885209713024282
149713,"/** 
 * Attempt an atomic compare and exchange in a write barrier sequence.
 * @param ref The object that has the Word field
 * @param old The old Word to be swapped out
 * @param target The value that the slot will be updated to
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return True if the compare and swap was successful
 */
@Inline @Override public final boolean wordTryCompareAndSwap(ObjectReference ref,Word old,Word target,Word offset,Word unused,int mode){
  do {
    Word currentValue=Magic.prepareWord(ref,offset.toOffset());
    if (currentValue != old)     return false;
  }
 while (!Magic.attemptWord(ref,offset.toOffset(),old,target));
  return true;
}","/** 
 * Attempt an atomic compare and exchange in a write barrier sequence.
 * @param ref The object that has the Word field
 * @param old The old Word to be swapped out
 * @param target The value that the slot will be updated to
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return True if the compare and swap was successful
 */
@Inline @Override public final boolean wordTryCompareAndSwap(ObjectReference ref,Word old,Word target,Word offset,Word unused,int mode){
  if (org.jikesrvm.VM.BuildForIA32) {
    return Magic.attemptWord(ref.toObject(),offset.toOffset(),old,target);
  }
 else {
    do {
      Word currentValue=Magic.prepareWord(ref,offset.toOffset());
      if (currentValue != old)       return false;
    }
 while (!Magic.attemptWord(ref,offset.toOffset(),old,target));
    return true;
  }
}",0.9117468046256848
149714,"/** 
 * Attempt an atomic compare and exchange in a write barrier sequence.
 * @param objref The object that has the long field
 * @param expected The old long to be swapped out
 * @param newValue the new long
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return True if the compare and swap was successful
 */
@Override public boolean longTryCompareAndSwap(ObjectReference objref,long expected,long newValue,Word offset,Word unused,int mode){
  long oldValue;
  do {
    oldValue=Magic.prepareLong(objref,offset.toOffset());
    if (oldValue != expected)     return false;
  }
 while (!Magic.attemptLong(objref,offset.toOffset(),oldValue,newValue));
  return true;
}","/** 
 * Attempt an atomic compare and exchange in a write barrier sequence.
 * @param objref The object that has the long field
 * @param expected The old long to be swapped out
 * @param newValue the new long
 * @param offset The offset from the ref
 * @param unused Unused
 * @param mode The context in which the write is occurring
 * @return True if the compare and swap was successful
 */
@Override public boolean longTryCompareAndSwap(ObjectReference objref,long expected,long newValue,Word offset,Word unused,int mode){
  if (org.jikesrvm.VM.BuildForIA32) {
    return Magic.attemptLong(objref.toObject(),offset.toOffset(),expected,newValue);
  }
 else {
    long oldValue;
    do {
      oldValue=Magic.prepareLong(objref,offset.toOffset());
      if (oldValue != expected)       return false;
    }
 while (!Magic.attemptLong(objref,offset.toOffset(),oldValue,newValue));
    return true;
  }
}",0.8903694730466384
149715,"public void putIntVolatile(Object obj,long offset,int value){
  Magic.writeFloor();
  Offset off=longToOffset(offset);
  if (NEEDS_INT_PUTFIELD_BARRIER) {
    intFieldWrite(obj,value,off,0);
  }
 else {
    Magic.setIntAtOffset(obj,off,value);
  }
}","public void putIntVolatile(Object obj,long offset,int value){
  Magic.writeFloor();
  Offset off=longToOffset(offset);
  if (NEEDS_INT_PUTFIELD_BARRIER) {
    intFieldWrite(obj,value,off,0);
  }
 else {
    Magic.setIntAtOffset(obj,off,value);
  }
  Magic.fence();
}",0.966990291262136
149716,"public void putLongVolatile(Object obj,long offset,long value){
  Magic.writeFloor();
  Offset off=longToOffset(offset);
  if (NEEDS_LONG_PUTFIELD_BARRIER) {
    longFieldWrite(obj,value,off,0);
  }
 else {
    Magic.setLongAtOffset(obj,off,value);
  }
}","public void putLongVolatile(Object obj,long offset,long value){
  Magic.writeFloor();
  Offset off=longToOffset(offset);
  if (NEEDS_LONG_PUTFIELD_BARRIER) {
    longFieldWrite(obj,value,off,0);
  }
 else {
    Magic.setLongAtOffset(obj,off,value);
  }
  Magic.fence();
}",0.9676190476190476
149717,"public void putObjectVolatile(Object obj,long offset,Object value){
  Offset off=longToOffset(offset);
  Magic.writeFloor();
  if (NEEDS_OBJECT_PUTFIELD_BARRIER) {
    objectFieldWrite(obj,value,off,0);
  }
 else {
    Magic.setObjectAtOffset(obj,off,value);
  }
}","public void putObjectVolatile(Object obj,long offset,Object value){
  Offset off=longToOffset(offset);
  Magic.writeFloor();
  if (NEEDS_OBJECT_PUTFIELD_BARRIER) {
    objectFieldWrite(obj,value,off,0);
  }
 else {
    Magic.setObjectAtOffset(obj,off,value);
  }
  Magic.fence();
}",0.9688073394495412
149718,"/** 
 * Copy an object to the given raw storage address
 */
@Inline public static Object moveObject(Address toAddress,Object fromObj,Object toObj,int numBytes){
  if (VM.VerifyAssertions)   VM._assert(toAddress.isZero() || toObj == null);
  int copyBytes=numBytes;
  int objRefOffset=OBJECT_REF_OFFSET;
  Word statusWord=Word.zero();
  Word hashState=HASH_STATE_UNHASHED;
  if (ADDRESS_BASED_HASHING) {
    statusWord=Magic.getWordAtOffset(fromObj,STATUS_OFFSET);
    hashState=statusWord.and(HASH_STATE_MASK);
    if (hashState.EQ(HASH_STATE_HASHED)) {
      copyBytes-=HASHCODE_BYTES;
      if (!DYNAMIC_HASH_OFFSET) {
        if (toObj == null) {
          toAddress=toAddress.plus(HASHCODE_BYTES);
        }
      }
    }
 else     if (!DYNAMIC_HASH_OFFSET && hashState.EQ(HASH_STATE_HASHED_AND_MOVED)) {
      objRefOffset+=HASHCODE_BYTES;
    }
  }
  if (toObj != null) {
    toAddress=Magic.objectAsAddress(toObj).minus(OBJECT_REF_OFFSET);
  }
  Address fromAddress=Magic.objectAsAddress(fromObj).minus(objRefOffset);
  Memory.aligned32Copy(toAddress,fromAddress,copyBytes);
  toObj=Magic.addressAsObject(toAddress.plus(objRefOffset));
  if (hashState.EQ(HASH_STATE_HASHED)) {
    int hashCode=Magic.objectAsAddress(fromObj).toWord().rshl(SizeConstants.LOG_BYTES_IN_ADDRESS).toInt();
    if (DYNAMIC_HASH_OFFSET) {
      Magic.setIntAtOffset(toObj,Offset.fromIntSignExtend(numBytes - objRefOffset - HASHCODE_BYTES),hashCode);
    }
 else {
      Magic.setIntAtOffset(toObj,HASHCODE_OFFSET,(hashCode << 1) | ALIGNMENT_MASK);
    }
    Magic.setWordAtOffset(toObj,STATUS_OFFSET,statusWord.or(HASH_STATE_HASHED_AND_MOVED));
    if (ObjectModel.HASH_STATS)     ObjectModel.hashTransition2++;
  }
  return toObj;
}","/** 
 * Copy an object to the given raw storage address
 */
@Inline public static Object moveObject(Address toAddress,Object fromObj,Object toObj,int numBytes){
  if (VM.VerifyAssertions)   VM._assert(toAddress.isZero() || toObj == null);
  int copyBytes=numBytes;
  int objRefOffset=OBJECT_REF_OFFSET;
  Word statusWord=Word.zero();
  Word hashState=HASH_STATE_UNHASHED;
  if (ADDRESS_BASED_HASHING) {
    statusWord=Magic.getWordAtOffset(fromObj,STATUS_OFFSET);
    hashState=statusWord.and(HASH_STATE_MASK);
    if (hashState.EQ(HASH_STATE_HASHED)) {
      copyBytes-=HASHCODE_BYTES;
      if (!DYNAMIC_HASH_OFFSET) {
        if (toObj == null) {
          toAddress=toAddress.plus(HASHCODE_BYTES);
        }
      }
    }
 else     if (!DYNAMIC_HASH_OFFSET && hashState.EQ(HASH_STATE_HASHED_AND_MOVED)) {
      objRefOffset+=HASHCODE_BYTES;
    }
  }
  if (toObj != null) {
    toAddress=Magic.objectAsAddress(toObj).minus(objRefOffset);
  }
  Address fromAddress=Magic.objectAsAddress(fromObj).minus(objRefOffset);
  Memory.aligned32Copy(toAddress,fromAddress,copyBytes);
  if (toObj == null) {
    toObj=Magic.addressAsObject(toAddress.plus(objRefOffset));
  }
 else {
    if (VM.VerifyAssertions)     VM._assert(toObj == Magic.addressAsObject(toAddress.plus(objRefOffset)));
  }
  if (hashState.EQ(HASH_STATE_HASHED)) {
    int hashCode=Magic.objectAsAddress(fromObj).toWord().rshl(SizeConstants.LOG_BYTES_IN_ADDRESS).toInt();
    if (DYNAMIC_HASH_OFFSET) {
      Magic.setIntAtOffset(toObj,Offset.fromIntSignExtend(numBytes - OBJECT_REF_OFFSET - HASHCODE_BYTES),hashCode);
    }
 else {
      Magic.setIntAtOffset(toObj,HASHCODE_OFFSET,(hashCode << 1) | ALIGNMENT_MASK);
    }
    Magic.setWordAtOffset(toObj,STATUS_OFFSET,statusWord.or(HASH_STATE_HASHED_AND_MOVED));
    if (ObjectModel.HASH_STATS)     ObjectModel.hashTransition2++;
  }
  return toObj;
}",0.9435754189944134
149719,"protected void zeroLiveBits(){
  Extent bytes=Extent.fromIntSignExtend(EmbeddedMetaData.BYTES_IN_REGION >> LOG_LIVE_COVERAGE);
  if (contiguous) {
    Address end=((FreeListPageResource)pr).getHighWater();
    Address cursor=start;
    while (cursor.LT(end)) {
      Address metadata=EmbeddedMetaData.getMetaDataBase(cursor).plus(META_DATA_OFFSET);
      VM.memory.zero(metadata,bytes);
      cursor=cursor.plus(EmbeddedMetaData.BYTES_IN_REGION);
    }
  }
 else {
    for (Address cursor=lastDiscontiguousRegion; !cursor.isZero(); cursor=Map.getNextContiguousRegion(cursor)) {
      Address metadata=EmbeddedMetaData.getMetaDataBase(cursor).plus(META_DATA_OFFSET);
      VM.memory.zero(metadata,bytes);
    }
  }
}","protected void zeroLiveBits(){
  Extent bytes=Extent.fromIntSignExtend(EmbeddedMetaData.BYTES_IN_REGION >> LOG_LIVE_COVERAGE);
  if (contiguous) {
    Address end=((FreeListPageResource)pr).getHighWater();
    Address cursor=start;
    while (cursor.LT(end)) {
      Address metadata=EmbeddedMetaData.getMetaDataBase(cursor).plus(META_DATA_OFFSET);
      VM.memory.zero(metadata,bytes);
      cursor=cursor.plus(EmbeddedMetaData.BYTES_IN_REGION);
    }
  }
 else {
    for (Address cursor=headDiscontiguousRegion; !cursor.isZero(); cursor=Map.getNextContiguousRegion(cursor)) {
      Address metadata=EmbeddedMetaData.getMetaDataBase(cursor).plus(META_DATA_OFFSET);
      VM.memory.zero(metadata,bytes);
    }
  }
}",0.9944055944055944
149720,"/** 
 * Extend the virtual memory associated with a particular discontiguous space.  This simply involves requesting a suitable number of chunks from the pool of chunks available to discontiguous spaces.
 * @param chunks The number of chunks by which the space needs to be extended
 * @return The address of the new discontiguous space.
 */
public Address growDiscontiguousSpace(int chunks){
  this.lastDiscontiguousRegion=Map.allocateContiguousChunks(descriptor,this,chunks,lastDiscontiguousRegion);
  return lastDiscontiguousRegion;
}","/** 
 * Extend the virtual memory associated with a particular discontiguous space.  This simply involves requesting a suitable number of chunks from the pool of chunks available to discontiguous spaces.
 * @param chunks The number of chunks by which the space needs to be extended
 * @return The address of the new discontiguous space.
 */
public Address growDiscontiguousSpace(int chunks){
  return headDiscontiguousRegion=Map.allocateContiguousChunks(descriptor,this,chunks,headDiscontiguousRegion);
}",0.9403846153846154
149721,"/** 
 * This is the base constructor for <i>all</i> spaces.<p>
 * @param name The name of this space (used when printing error messages etc)
 * @param movable Are objects in this space movable?
 * @param immortal Are objects in this space immortal (uncollected)?
 * @param vmRequest An object describing the virtual memory requested.
 */
protected Space(String name,boolean movable,boolean immortal,VMRequest vmRequest){
  this.name=name;
  this.nameLength=name.length();
  this.movable=movable;
  this.immortal=immortal;
  this.vmRequest=vmRequest;
  this.index=spaceCount++;
  spaces[index]=this;
  if (vmRequest.type == VMRequest.REQUEST_DISCONTIGUOUS) {
    this.contiguous=false;
    this.descriptor=SpaceDescriptor.createDescriptor();
    this.start=Address.zero();
    this.extent=Extent.zero();
    this.lastDiscontiguousRegion=Address.zero();
    VM.memory.setHeapRange(index,HEAP_START,HEAP_END);
    return;
  }
  Address start;
  Extent extent;
  if (vmRequest.type == VMRequest.REQUEST_FRACTION) {
    extent=getFracAvailable(vmRequest.frac);
  }
 else {
    extent=vmRequest.extent;
  }
  if (extent.NE(chunkAlign(extent,false))) {
    VM.assertions.fail(name + ""String_Node_Str"" + extent.toLong()+ ""String_Node_Str"");
  }
  if (vmRequest.type == VMRequest.REQUEST_FIXED) {
    start=vmRequest.start;
    if (start.NE(chunkAlign(start,false))) {
      VM.assertions.fail(name + ""String_Node_Str"" + start.toLong()+ ""String_Node_Str"");
    }
  }
 else   if (vmRequest.top) {
    heapLimit=heapLimit.minus(extent);
    start=heapLimit;
  }
 else {
    start=heapCursor;
    heapCursor=heapCursor.plus(extent);
  }
  if (heapCursor.GT(heapLimit)) {
    Log.write(""String_Node_Str"");
    Log.write(name);
    Log.write(""String_Node_Str"");
    Log.write(heapCursor.minus(extent));
    Log.write(""String_Node_Str"");
    Log.write(heapCursor);
    Log.write(""String_Node_Str"");
    Log.write(heapLimit);
    Log.writeln(""String_Node_Str"");
    VM.assertions.fail(""String_Node_Str"");
  }
  this.contiguous=true;
  this.start=start;
  this.extent=extent;
  this.descriptor=SpaceDescriptor.createDescriptor(start,start.plus(extent));
  VM.memory.setHeapRange(index,start,start.plus(extent));
  Map.insert(start,extent,descriptor,this);
  if (DEBUG) {
    Log.write(name);
    Log.write(""String_Node_Str"");
    Log.write(start);
    Log.write(""String_Node_Str"");
    Log.write(start.plus(extent));
    Log.write(""String_Node_Str"");
    Log.writeln(extent.toWord());
  }
}","/** 
 * This is the base constructor for <i>all</i> spaces.<p>
 * @param name The name of this space (used when printing error messages etc)
 * @param movable Are objects in this space movable?
 * @param immortal Are objects in this space immortal (uncollected)?
 * @param vmRequest An object describing the virtual memory requested.
 */
protected Space(String name,boolean movable,boolean immortal,VMRequest vmRequest){
  this.name=name;
  this.nameLength=name.length();
  this.movable=movable;
  this.immortal=immortal;
  this.vmRequest=vmRequest;
  this.index=spaceCount++;
  spaces[index]=this;
  if (vmRequest.type == VMRequest.REQUEST_DISCONTIGUOUS) {
    this.contiguous=false;
    this.descriptor=SpaceDescriptor.createDescriptor();
    this.start=Address.zero();
    this.extent=Extent.zero();
    this.headDiscontiguousRegion=Address.zero();
    VM.memory.setHeapRange(index,HEAP_START,HEAP_END);
    return;
  }
  Address start;
  Extent extent;
  if (vmRequest.type == VMRequest.REQUEST_FRACTION) {
    extent=getFracAvailable(vmRequest.frac);
  }
 else {
    extent=vmRequest.extent;
  }
  if (extent.NE(chunkAlign(extent,false))) {
    VM.assertions.fail(name + ""String_Node_Str"" + extent.toLong()+ ""String_Node_Str"");
  }
  if (vmRequest.type == VMRequest.REQUEST_FIXED) {
    start=vmRequest.start;
    if (start.NE(chunkAlign(start,false))) {
      VM.assertions.fail(name + ""String_Node_Str"" + start.toLong()+ ""String_Node_Str"");
    }
  }
 else   if (vmRequest.top) {
    heapLimit=heapLimit.minus(extent);
    start=heapLimit;
  }
 else {
    start=heapCursor;
    heapCursor=heapCursor.plus(extent);
  }
  if (heapCursor.GT(heapLimit)) {
    Log.write(""String_Node_Str"");
    Log.write(name);
    Log.write(""String_Node_Str"");
    Log.write(heapCursor.minus(extent));
    Log.write(""String_Node_Str"");
    Log.write(heapCursor);
    Log.write(""String_Node_Str"");
    Log.write(heapLimit);
    Log.writeln(""String_Node_Str"");
    VM.assertions.fail(""String_Node_Str"");
  }
  this.contiguous=true;
  this.start=start;
  this.extent=extent;
  this.descriptor=SpaceDescriptor.createDescriptor(start,start.plus(extent));
  VM.memory.setHeapRange(index,start,start.plus(extent));
  Map.insert(start,extent,descriptor,this);
  if (DEBUG) {
    Log.write(name);
    Log.write(""String_Node_Str"");
    Log.write(start);
    Log.write(""String_Node_Str"");
    Log.write(start.plus(extent));
    Log.write(""String_Node_Str"");
    Log.writeln(extent.toWord());
  }
}",0.9983825313384552
149722,"/** 
 * Print out a map of virtual memory useage by all spaces
 */
public static void printVMMap(){
  Log.writeln(""String_Node_Str"");
  Log.write(""String_Node_Str"");
  Log.writeln(HEAP_START);
  Log.write(""String_Node_Str"");
  Log.writeln(AVAILABLE_START);
  for (int i=0; i < spaceCount; i++) {
    Space space=spaces[i];
    for (int s=0; s < 11 - space.nameLength; s++)     Log.write(""String_Node_Str"");
    Log.write(space.name);
    Log.write(""String_Node_Str"");
    Log.write(space.immortal ? ""String_Node_Str"" : ""String_Node_Str"");
    Log.write(space.movable ? ""String_Node_Str"" : ""String_Node_Str"");
    if (space.contiguous) {
      Log.write(""String_Node_Str"");
      Log.write(space.start);
      Log.write(""String_Node_Str"");
      Log.write(space.start.plus(space.extent.minus(1)));
      if (space.vmRequest.type == VMRequest.REQUEST_EXTENT) {
        Log.write(""String_Node_Str"");
        Log.write(space.vmRequest.extent);
      }
 else       if (space.vmRequest.type == VMRequest.REQUEST_FRACTION) {
        Log.write(""String_Node_Str"");
        Log.write(space.vmRequest.frac);
      }
      Log.writeln();
    }
 else {
      Log.write(""String_Node_Str"");
      for (Address a=space.lastDiscontiguousRegion; !a.isZero(); a=Map.getNextContiguousRegion(a)) {
        Log.write(a);
        Log.write(""String_Node_Str"");
        Log.write(a.plus(Map.getContiguousRegionSize(a).minus(1)));
        if (Map.getNextContiguousRegion(a) != Address.zero())         Log.write(""String_Node_Str"");
      }
      Log.writeln(""String_Node_Str"");
    }
  }
  Log.write(""String_Node_Str"");
  Log.writeln(AVAILABLE_END);
  Log.write(""String_Node_Str"");
  Log.writeln(HEAP_END);
}","/** 
 * Print out a map of virtual memory useage by all spaces
 */
public static void printVMMap(){
  Log.writeln(""String_Node_Str"");
  Log.write(""String_Node_Str"");
  Log.writeln(HEAP_START);
  Log.write(""String_Node_Str"");
  Log.writeln(AVAILABLE_START);
  for (int i=0; i < spaceCount; i++) {
    Space space=spaces[i];
    for (int s=0; s < 11 - space.nameLength; s++)     Log.write(""String_Node_Str"");
    Log.write(space.name);
    Log.write(""String_Node_Str"");
    Log.write(space.immortal ? ""String_Node_Str"" : ""String_Node_Str"");
    Log.write(space.movable ? ""String_Node_Str"" : ""String_Node_Str"");
    if (space.contiguous) {
      Log.write(""String_Node_Str"");
      Log.write(space.start);
      Log.write(""String_Node_Str"");
      Log.write(space.start.plus(space.extent.minus(1)));
      if (space.vmRequest.type == VMRequest.REQUEST_EXTENT) {
        Log.write(""String_Node_Str"");
        Log.write(space.vmRequest.extent);
      }
 else       if (space.vmRequest.type == VMRequest.REQUEST_FRACTION) {
        Log.write(""String_Node_Str"");
        Log.write(space.vmRequest.frac);
      }
      Log.writeln();
    }
 else {
      Log.write(""String_Node_Str"");
      for (Address a=space.headDiscontiguousRegion; !a.isZero(); a=Map.getNextContiguousRegion(a)) {
        Log.write(a);
        Log.write(""String_Node_Str"");
        Log.write(a.plus(Map.getContiguousRegionSize(a).minus(1)));
        if (Map.getNextContiguousRegion(a) != Address.zero())         Log.write(""String_Node_Str"");
      }
      Log.writeln(""String_Node_Str"");
    }
  }
  Log.write(""String_Node_Str"");
  Log.writeln(AVAILABLE_END);
  Log.write(""String_Node_Str"");
  Log.writeln(HEAP_END);
}",0.997620464009518
149723,"/** 
 * Release one or more contiguous chunks associated with a discontiguous space.
 * @param chunk THe address of the start of the contiguous chunk or chunks
 * @return The number of chunks freed
 */
public int releaseDiscontiguousChunks(Address chunk){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(chunk.EQ(chunkAlign(chunk,true)));
  if (chunk.EQ(lastDiscontiguousRegion)) {
    lastDiscontiguousRegion=Map.getNextContiguousRegion(chunk);
  }
  return Map.freeContiguousChunks(chunk);
}","/** 
 * Release one or more contiguous chunks associated with a discontiguous space.
 * @param chunk THe address of the start of the contiguous chunk or chunks
 * @return The number of chunks freed
 */
public int releaseDiscontiguousChunks(Address chunk){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(chunk.EQ(chunkAlign(chunk,true)));
  if (chunk.EQ(headDiscontiguousRegion)) {
    headDiscontiguousRegion=Map.getNextContiguousRegion(chunk);
  }
  return Map.freeContiguousChunks(chunk);
}",0.9839034205231388
149724,"/** 
 * Return the address of the next contiguous region associated with some discontiguous space by following the linked list for that space.
 * @param start The current region (return the next region in the list)
 * @return Return the next contiguous region after start in the linked list of regions
 */
public static Address getNextContiguousRegion(Address start){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(start.EQ(Space.chunkAlign(start,true)));
  int chunk=getChunkIndex(start);
  return (chunk == 0) ? Address.zero() : (linkageMap[chunk] == 0) ? Address.zero() : addressForChunkIndex(linkageMap[chunk]);
}","/** 
 * Return the address of the next contiguous region associated with some discontiguous space by following the linked list for that space.
 * @param start The current region (return the next region in the list)
 * @return Return the next contiguous region after start in the linked list of regions
 */
public static Address getNextContiguousRegion(Address start){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(start.EQ(Space.chunkAlign(start,true)));
  int chunk=getChunkIndex(start);
  return (chunk == 0) ? Address.zero() : (nextLink[chunk] == 0) ? Address.zero() : addressForChunkIndex(nextLink[chunk]);
}",0.970967741935484
149725,"/** 
 * Allocate some number of contiguous chunks within a discontiguous region
 * @param descriptor The descriptor for the space to which these chunks will be assigned
 * @param space The space to which these chunks will be assigned
 * @param chunks The number of chunks required
 * @param previous The previous contgiuous set of chunks for this space (to create a linked list of contiguous regions for each space)
 * @return The address of the assigned memory.  This always succeeds.  If the request fails we fail right here.
 */
public static Address allocateContiguousChunks(int descriptor,Space space,int chunks,Address previous){
  lock.acquire();
  int chunk=regionMap.alloc(chunks);
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(chunk != 0);
  if (chunk == -1) {
    Log.write(""String_Node_Str"");
    Log.write(space.getName());
    Log.write(""String_Node_Str"");
    Log.write(chunks);
    Log.write(""String_Node_Str"");
    Log.write(chunks << Space.LOG_BYTES_IN_CHUNK);
    Log.writeln(""String_Node_Str"");
    Space.printVMMap();
    VM.assertions.fail(""String_Node_Str"");
  }
  totalAvailableDiscontiguousChunks-=chunks;
  Address rtn=addressForChunkIndex(chunk);
  insert(rtn,Extent.fromIntZeroExtend(chunks << Space.LOG_BYTES_IN_CHUNK),descriptor,space);
  linkageMap[chunk]=previous.isZero() ? 0 : getChunkIndex(previous);
  lock.release();
  return rtn;
}","/** 
 * Allocate some number of contiguous chunks within a discontiguous region
 * @param descriptor The descriptor for the space to which these chunks will be assigned
 * @param space The space to which these chunks will be assigned
 * @param chunks The number of chunks required
 * @param head The previous contgiuous set of chunks for this space (to create a linked list of contiguous regions for each space)
 * @return The address of the assigned memory.  This always succeeds.  If the request fails we fail right here.
 */
public static Address allocateContiguousChunks(int descriptor,Space space,int chunks,Address head){
  lock.acquire();
  int chunk=regionMap.alloc(chunks);
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(chunk != 0);
  if (chunk == -1) {
    Log.write(""String_Node_Str"");
    Log.write(space.getName());
    Log.write(""String_Node_Str"");
    Log.write(chunks);
    Log.write(""String_Node_Str"");
    Log.write(chunks << Space.LOG_BYTES_IN_CHUNK);
    Log.writeln(""String_Node_Str"");
    Space.printVMMap();
    VM.assertions.fail(""String_Node_Str"");
  }
  totalAvailableDiscontiguousChunks-=chunks;
  Address rtn=addressForChunkIndex(chunk);
  insert(rtn,Extent.fromIntZeroExtend(chunks << Space.LOG_BYTES_IN_CHUNK),descriptor,space);
  if (head.isZero()) {
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(nextLink[chunk] == 0);
  }
 else {
    nextLink[chunk]=getChunkIndex(head);
    prevLink[getChunkIndex(head)]=chunk;
  }
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(prevLink[chunk] == 0);
  lock.release();
  return rtn;
}",0.8887381275440976
149726,"/** 
 * Free all chunks in a linked list of contiguous chunks.  This means starting with lastChunk and then walking the chain of contiguous regions, freeing each.
 * @param lastChunk The last chunk in the linked list of chunks to be freed
 */
public static void freeAllChunks(Address lastChunk){
  lock.acquire();
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(lastChunk.EQ(Space.chunkAlign(lastChunk,true)));
  int chunk=getChunkIndex(lastChunk);
  while (chunk != 0) {
    int next=linkageMap[chunk];
    freeContiguousChunks(chunk);
    chunk=next;
  }
  lock.release();
}","/** 
 * Free all chunks in a linked list of contiguous chunks.  This means starting with one and then walking the chains of contiguous regions, freeing each.
 * @param anyChunk Any chunk in the linked list of chunks to be freed
 */
public static void freeAllChunks(Address anyChunk){
  lock.acquire();
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(anyChunk.EQ(Space.chunkAlign(anyChunk,true)));
  if (!anyChunk.isZero()) {
    int chunk=getChunkIndex(anyChunk);
    while (nextLink[chunk] != 0) {
      freeContiguousChunks(nextLink[chunk]);
    }
    while (prevLink[chunk] != 0) {
      freeContiguousChunks(prevLink[chunk]);
    }
    freeContiguousChunks(chunk);
  }
  lock.release();
}",0.7601880877742947
149727,"/** 
 * Free some set of contiguous chunks, given the chunk index
 * @param chunk The chunk index of the region to be freed
 * @return The number of chunks freed
 */
private static int freeContiguousChunks(int chunk){
  int chunks=regionMap.free(chunk);
  totalAvailableDiscontiguousChunks+=chunks;
  for (int offset=0; offset < chunks; offset++) {
    descriptorMap[chunk + offset]=0;
    VM.barriers.objectArrayStoreNoGCBarrier(spaceMap,chunk + offset,null);
    linkageMap[chunk + offset]=0;
  }
  return chunks;
}","/** 
 * Free some set of contiguous chunks, given the chunk index
 * @param chunk The chunk index of the region to be freed
 * @return The number of chunks freed
 */
private static int freeContiguousChunks(int chunk){
  int chunks=regionMap.free(chunk);
  totalAvailableDiscontiguousChunks+=chunks;
  int next=nextLink[chunk];
  int prev=prevLink[chunk];
  if (next != 0)   prevLink[next]=prev;
  if (prev != 0)   nextLink[prev]=next;
  nextLink[chunk]=prevLink[chunk]=0;
  for (int offset=0; offset < chunks; offset++) {
    descriptorMap[chunk + offset]=0;
    VM.barriers.objectArrayStoreNoGCBarrier(spaceMap,chunk + offset,null);
  }
  return chunks;
}",0.8235294117647058
149728,"/** 
 * Allocate a numeric slot in the jtoc.
 * @param size of slot
 * @param field is the slot for a field
 * @return offset of slot that was allocated as int(two slots are allocated for longs and doubles)
 */
public static synchronized Offset allocateNumericSlot(int size,boolean field){
  int slot;
  if (size == 16) {
    nextNumericSlot-=3;
    if ((nextNumericSlot & 1) != 0) {
      nextNumericSlot--;
      numericSlotHole=nextNumericSlot + 2;
    }
    if ((nextNumericSlot & 3) != 0) {
      nextNumericSlot-=2;
    }
    slot=nextNumericSlot;
    nextNumericSlot--;
    if (field) {
      numericFieldVector.set(slot);
      numericFieldVector.set(slot + 1);
      numericFieldVector.set(slot + 2);
      numericFieldVector.set(slot + 3);
    }
  }
 else   if (size == BYTES_IN_LONG) {
    nextNumericSlot--;
    if ((nextNumericSlot & 1) != 0) {
      nextNumericSlot--;
      numericSlotHole=nextNumericSlot + 2;
    }
    slot=nextNumericSlot;
    nextNumericSlot--;
    if (field) {
      numericFieldVector.set(slot);
      numericFieldVector.set(slot + 1);
    }
  }
 else {
    if (numericSlotHole != middleOfTable) {
      slot=numericSlotHole;
      numericSlotHole=middleOfTable;
    }
 else {
      slot=nextNumericSlot;
      nextNumericSlot--;
    }
    if (field) {
      numericFieldVector.set(slot);
    }
  }
  if (nextNumericSlot < 0) {
    enlargeTable();
  }
  return slotAsOffset(slot);
}","/** 
 * Allocate a numeric slot in the jtoc.
 * @param size of slot
 * @param field is the slot for a field
 * @return offset of slot that was allocated as int(two slots are allocated for longs and doubles)
 */
public static synchronized Offset allocateNumericSlot(int size,boolean field){
  int slot;
  if (size == 16) {
    nextNumericSlot-=3;
    if ((nextNumericSlot & 1) != 0) {
      nextNumericSlot--;
      numericSlotHole=nextNumericSlot + 4;
    }
    if ((nextNumericSlot & 3) != 0) {
      nextNumericSlot-=2;
    }
    slot=nextNumericSlot;
    nextNumericSlot--;
    if (field) {
      numericFieldVector.set(slot);
      numericFieldVector.set(slot + 1);
      numericFieldVector.set(slot + 2);
      numericFieldVector.set(slot + 3);
    }
  }
 else   if (size == BYTES_IN_LONG) {
    nextNumericSlot--;
    if ((nextNumericSlot & 1) != 0) {
      nextNumericSlot--;
      numericSlotHole=nextNumericSlot + 2;
    }
    slot=nextNumericSlot;
    nextNumericSlot--;
    if (field) {
      numericFieldVector.set(slot);
      numericFieldVector.set(slot + 1);
    }
  }
 else {
    if (numericSlotHole != middleOfTable) {
      slot=numericSlotHole;
      numericSlotHole=middleOfTable;
    }
 else {
      slot=nextNumericSlot;
      nextNumericSlot--;
    }
    if (field) {
      numericFieldVector.set(slot);
    }
  }
  if (nextNumericSlot < 0) {
    enlargeTable();
  }
  return slotAsOffset(slot);
}",0.9992957746478872
149729,"/** 
 * Allocate <code>pages</code> pages from this resource.<p> If the request can be satisfied, then ensure the pages are mmpapped and zeroed before returning the address of the start of the region.  If the request cannot be satisfied, return zero.
 * @param pages The number of pages to be allocated.
 * @return The start of the first page if successful, zero onfailure.
 */
@Inline protected Address allocPages(int pages){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(metaDataPagesPerRegion == 0 || pages <= PAGES_IN_CHUNK - metaDataPagesPerRegion);
  lock();
  boolean newChunk=false;
  int pageOffset=freeList.alloc(pages);
  if (pageOffset == GenericFreeList.FAILURE && !contiguous) {
    pageOffset=allocateContiguousChunks(pages);
    newChunk=true;
  }
  if (pageOffset == -1) {
    unlock();
    return Address.zero();
  }
 else {
    pagesCurrentlyOnFreeList-=pages;
    if (pageOffset > highWaterMark) {
      if ((pageOffset ^ highWaterMark) > EmbeddedMetaData.PAGES_IN_REGION) {
        int regions=1 + ((pageOffset - highWaterMark) >> EmbeddedMetaData.LOG_PAGES_IN_REGION);
        int metapages=regions * metaDataPagesPerRegion;
        reserved+=metapages;
        committed+=metapages;
        newChunk=true;
      }
      highWaterMark=pageOffset;
    }
    Address rtn=start.plus(Conversions.pagesToBytes(pageOffset));
    Extent bytes=Conversions.pagesToBytes(pages);
    commitPages(pages,pages);
    space.growSpace(rtn,bytes,newChunk);
    unlock();
    Mmapper.ensureMapped(rtn,pages);
    VM.memory.zero(rtn,bytes);
    VM.events.tracePageAcquired(space,rtn,pages);
    return rtn;
  }
}","/** 
 * Allocate <code>pages</code> pages from this resource.<p> If the request can be satisfied, then ensure the pages are mmpapped and zeroed before returning the address of the start of the region.  If the request cannot be satisfied, return zero.
 * @param pages The number of pages to be allocated.
 * @return The start of the first page if successful, zero onfailure.
 */
@Inline protected Address allocPages(int pages){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(metaDataPagesPerRegion == 0 || pages <= PAGES_IN_CHUNK - metaDataPagesPerRegion);
  lock();
  boolean newChunk=false;
  int pageOffset=freeList.alloc(pages);
  if (pageOffset == GenericFreeList.FAILURE && !contiguous) {
    pageOffset=allocateContiguousChunks(pages);
    newChunk=true;
  }
  if (pageOffset == -1) {
    unlock();
    return Address.zero();
  }
 else {
    pagesCurrentlyOnFreeList-=pages;
    if (pageOffset > highWaterMark) {
      if (highWaterMark == 0 || (pageOffset ^ highWaterMark) > EmbeddedMetaData.PAGES_IN_REGION) {
        int regions=1 + ((pageOffset - highWaterMark) >> EmbeddedMetaData.LOG_PAGES_IN_REGION);
        int metapages=regions * metaDataPagesPerRegion;
        reserved+=metapages;
        committed+=metapages;
        newChunk=true;
      }
      highWaterMark=pageOffset;
    }
    Address rtn=start.plus(Conversions.pagesToBytes(pageOffset));
    Extent bytes=Conversions.pagesToBytes(pages);
    commitPages(pages,pages);
    space.growSpace(rtn,bytes,newChunk);
    unlock();
    Mmapper.ensureMapped(rtn,pages);
    VM.memory.zero(rtn,bytes);
    VM.events.tracePageAcquired(space,rtn,pages);
    return rtn;
  }
}",0.9932598039215688
149730,"/** 
 * Save data and perform necessary conversions for entry into JNI. NB only used for Intel.
 * @param encodedReferenceOffsets bit mask marking which elements on the stack hold objects that need encoding as JNI ref identifiers
 */
@Uninterruptible(""String_Node_Str"") @Entrypoint public void entryToJNI(int encodedReferenceOffsets){
  savedTRreg=Magic.getThreadRegister();
  Address callersFP=Magic.getCallerFramePointer(Magic.getFramePointer());
  basePointerOnEntryToNative=callersFP;
  JNITopJavaFP=callersFP;
  if (VM.traceJNI) {
    RVMMethod m=CompiledMethods.getCompiledMethod(Magic.getCompiledMethodID(callersFP)).getMethod();
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(m.getDeclaringClass().getDescriptor());
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(m.getName());
    VM.sysWrite(m.getDescriptor());
    VM.sysWriteln();
  }
  int oldJNIRefsSavedFP=JNIRefsSavedFP;
  JNIRefsSavedFP=JNIRefsTop;
  uninterruptiblePushJNIRef(Address.fromIntSignExtend(oldJNIRefsSavedFP),false);
  Address fp=Magic.getFramePointer();
  Offset argOffset=Offset.fromIntSignExtend(5 * BYTES_IN_ADDRESS);
  fp.store(uninterruptiblePushJNIRef(fp.loadAddress(argOffset),true),argOffset);
  while (encodedReferenceOffsets != 0) {
    argOffset=argOffset.plus(BYTES_IN_ADDRESS);
    if ((encodedReferenceOffsets & 1) != 0) {
      fp.store(uninterruptiblePushJNIRef(fp.loadAddress(argOffset),true),argOffset);
    }
    encodedReferenceOffsets>>>=1;
  }
  RVMThread.enterJNIFromCallIntoNative();
}","/** 
 * Save data and perform necessary conversions for entry into JNI. NB only used for Intel.
 * @param encodedReferenceOffsets bit mask marking which elements on the stack hold objects that need encoding as JNI ref identifiers
 */
@Uninterruptible(""String_Node_Str"") @Entrypoint public void entryToJNI(int encodedReferenceOffsets){
  savedTRreg=Magic.getThreadRegister();
  Address callersFP=Magic.getCallerFramePointer(Magic.getFramePointer());
  basePointerOnEntryToNative=callersFP;
  JNITopJavaFP=callersFP;
  if (VM.traceJNI) {
    RVMMethod m=CompiledMethods.getCompiledMethod(Magic.getCompiledMethodID(callersFP)).getMethod();
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(m.getDeclaringClass().getDescriptor());
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(m.getName());
    VM.sysWrite(m.getDescriptor());
    VM.sysWriteln();
  }
  if (JNIRefsTop > 0) {
    uninterruptiblePushJNIRef(Address.fromIntSignExtend(JNIRefsSavedFP),false);
    JNIRefsSavedFP=JNIRefsTop;
  }
  Address fp=Magic.getFramePointer();
  Offset argOffset=Offset.fromIntSignExtend(5 * BYTES_IN_ADDRESS);
  fp.store(uninterruptiblePushJNIRef(fp.loadAddress(argOffset),true),argOffset);
  while (encodedReferenceOffsets != 0) {
    argOffset=argOffset.plus(BYTES_IN_ADDRESS);
    if ((encodedReferenceOffsets & 1) != 0) {
      fp.store(uninterruptiblePushJNIRef(fp.loadAddress(argOffset),true),argOffset);
    }
    encodedReferenceOffsets>>>=1;
  }
  RVMThread.enterJNIFromCallIntoNative();
}",0.9253431536658856
149731,"/** 
 * Restore data, throw pending exceptions or convert return value for exit from JNI. NB only used for Intel.
 * @param offset offset into JNI reference tables of result
 * @return Object encoded by offset or null if offset is 0
 */
@Unpreemptible(""String_Node_Str"" + ""String_Node_Str"") @Entrypoint public Object exitFromJNI(int offset){
  RVMThread.leaveJNIFromCallIntoNative();
  JNIRefsTop=JNIRefsSavedFP;
  if (JNIRefsTop > 0) {
    JNIRefsSavedFP=JNIRefs.get((JNIRefsTop >> LOG_BYTES_IN_ADDRESS) + 1).toInt();
  }
  Throwable pe=pendingException;
  if (pe != null) {
    pendingException=null;
    RuntimeEntrypoints.athrow(pe);
  }
  Object result;
  if (offset == 0) {
    result=null;
  }
 else   if (offset < 0) {
    result=JNIGlobalRefTable.ref(offset);
  }
 else {
    result=Magic.addressAsObject(JNIRefs.get(offset >> LOG_BYTES_IN_ADDRESS));
  }
  return result;
}","/** 
 * Restore data, throw pending exceptions or convert return value for exit from JNI. NB only used for Intel.
 * @param offset offset into JNI reference tables of result
 * @return Object encoded by offset or null if offset is 0
 */
@Unpreemptible(""String_Node_Str"" + ""String_Node_Str"") @Entrypoint public Object exitFromJNI(int offset){
  RVMThread.leaveJNIFromCallIntoNative();
  JNIRefsTop=0;
  if (JNIRefsSavedFP > 0) {
    JNIRefsTop=JNIRefsSavedFP - BYTES_IN_ADDRESS;
    JNIRefsSavedFP=JNIRefs.get(JNIRefsSavedFP >> LOG_BYTES_IN_ADDRESS).toInt();
  }
  Throwable pe=pendingException;
  if (pe != null) {
    pendingException=null;
    RuntimeEntrypoints.athrow(pe);
  }
  Object result;
  if (offset == 0) {
    result=null;
  }
 else   if (offset < 0) {
    result=JNIGlobalRefTable.ref(offset);
  }
 else {
    result=Magic.addressAsObject(JNIRefs.get(offset >> LOG_BYTES_IN_ADDRESS));
  }
  return result;
}",0.5524126455906821
149732,"/** 
 * Does this event type accept the supplied number of attributes of each type.
 * @param numInt The number of int attributes.
 * @param numLong The number of long attributes.
 * @param numDouble The number of double attributes.
 * @param numString The number of String attributes.
 * @return True if the event will accept attributes of the specified types.
 */
public boolean admits(int numInt,int numLong,int numDouble,int numString){
  return (numInt == numberOfInts) && (numLong == numLong) && (numDouble == numberOfDoubles)&& (numString == numberOfStrings);
}","/** 
 * Does this event type accept the supplied number of attributes of each type.
 * @param numInt The number of int attributes.
 * @param numLong The number of long attributes.
 * @param numDouble The number of double attributes.
 * @param numString The number of String attributes.
 * @return True if the event will accept attributes of the specified types.
 */
public boolean admits(int numInt,int numLong,int numDouble,int numString){
  return (numInt == numberOfInts) && (numLong == numberOfLongs) && (numDouble == numberOfDoubles)&& (numString == numberOfStrings);
}",0.9947460595446584
149733,"/** 
 * GetFieldID:  return a field id, which can be cached in native code and reused
 * @param env A JREF index for the JNI environment object
 * @param classJREF a JREF index for the RVMClass object
 * @param fieldNameAddress a raw address to a null-terminated string in C for the field name
 * @param descriptorAddress a raw address to a null-terminated string in C for the descriptor
 * @return the fieldID of an instance field given the class, field nameand type. Return 0 if the field is not found
 * @exception NoSuchFieldError if the specified field cannot be found
 * @exception ExceptionInInitializerError if the class initializer fails
 * @exception OutOfMemoryError if the system runs out of memory
 */
private static int GetFieldID(JNIEnvironment env,int classJREF,Address fieldNameAddress,Address descriptorAddress){
  if (traceJNI)   VM.sysWrite(""String_Node_Str"");
  RuntimeEntrypoints.checkJNICountDownToGC();
  try {
    if (traceJNI)     VM.sysWriteln(""String_Node_Str"",classJREF);
    Class<?> cls=(Class<?>)env.getJNIRef(classJREF);
    if (VM.VerifyAssertions)     VM._assert(cls != null);
    String fieldString=JNIHelpers.createStringFromC(fieldNameAddress);
    Atom fieldName=Atom.findOrCreateAsciiAtom(fieldString);
    String descriptorString=JNIHelpers.createStringFromC(descriptorAddress);
    Atom descriptor=Atom.findOrCreateAsciiAtom(descriptorString);
    RVMField[] fields=java.lang.JikesRVMSupport.getTypeForClass(cls).getInstanceFields();
    for (    RVMField f : fields) {
      if (f.getName() == fieldName && f.getDescriptor() == descriptor) {
        return f.getId();
      }
    }
    env.recordException(new NoSuchFieldError(fieldString + ""String_Node_Str"" + descriptorString+ ""String_Node_Str""+ cls));
    return 0;
  }
 catch (  Throwable unexpected) {
    if (traceJNI)     unexpected.printStackTrace(System.err);
    env.recordException(unexpected);
    return 0;
  }
}","/** 
 * GetFieldID:  return a field id, which can be cached in native code and reused
 * @param env A JREF index for the JNI environment object
 * @param classJREF a JREF index for the RVMClass object
 * @param fieldNameAddress a raw address to a null-terminated string in C for the field name
 * @param descriptorAddress a raw address to a null-terminated string in C for the descriptor
 * @return the fieldID of an instance field given the class, field nameand type. Return 0 if the field is not found
 * @exception NoSuchFieldError if the specified field cannot be found
 * @exception ExceptionInInitializerError if the class initializer fails
 * @exception OutOfMemoryError if the system runs out of memory
 */
private static int GetFieldID(JNIEnvironment env,int classJREF,Address fieldNameAddress,Address descriptorAddress){
  if (traceJNI)   VM.sysWrite(""String_Node_Str"");
  RuntimeEntrypoints.checkJNICountDownToGC();
  try {
    if (traceJNI)     VM.sysWriteln(""String_Node_Str"",classJREF);
    Class<?> cls=(Class<?>)env.getJNIRef(classJREF);
    if (VM.VerifyAssertions)     VM._assert(cls != null);
    String fieldString=JNIHelpers.createStringFromC(fieldNameAddress);
    Atom fieldName=Atom.findOrCreateAsciiAtom(fieldString);
    String descriptorString=JNIHelpers.createStringFromC(descriptorAddress);
    Atom descriptor=Atom.findOrCreateAsciiAtom(descriptorString);
    RVMField[] fields=java.lang.JikesRVMSupport.getTypeForClass(cls).getInstanceFields();
    for (int i=fields.length - 1; i >= 0; i--) {
      RVMField f=fields[i];
      if (f.getName() == fieldName && f.getDescriptor() == descriptor) {
        return f.getId();
      }
    }
    env.recordException(new NoSuchFieldError(fieldString + ""String_Node_Str"" + descriptorString+ ""String_Node_Str""+ cls));
    return 0;
  }
 catch (  Throwable unexpected) {
    if (traceJNI)     unexpected.printStackTrace(System.err);
    env.recordException(unexpected);
    return 0;
  }
}",0.9832344596337376
149734,"/** 
 * GetStaticFieldID:  return a field id which can be cached in native code and reused
 * @param env A JREF index for the JNI environment object
 * @param classJREF a JREF index for the RVMClass object
 * @param fieldNameAddress a raw address to a null-terminated string in C for the field name
 * @param descriptorAddress a raw address to a null-terminated string in C for the descriptor
 * @return the offset of a static field given the class, field nameand type. Return 0 if the field is not found
 * @exception NoSuchFieldError if the specified field cannot be found
 * @exception ExceptionInInitializerError if the class initializer fails
 * @exception OutOfMemoryError if the system runs out of memory
 */
private static int GetStaticFieldID(JNIEnvironment env,int classJREF,Address fieldNameAddress,Address descriptorAddress){
  if (traceJNI)   VM.sysWrite(""String_Node_Str"");
  RuntimeEntrypoints.checkJNICountDownToGC();
  try {
    Class<?> cls=(Class<?>)env.getJNIRef(classJREF);
    String fieldString=JNIHelpers.createStringFromC(fieldNameAddress);
    Atom fieldName=Atom.findOrCreateAsciiAtom(fieldString);
    String descriptorString=JNIHelpers.createStringFromC(descriptorAddress);
    Atom descriptor=Atom.findOrCreateAsciiAtom(descriptorString);
    RVMField[] fields=java.lang.JikesRVMSupport.getTypeForClass(cls).getStaticFields();
    for (    RVMField field : fields) {
      if (field.getName() == fieldName && field.getDescriptor() == descriptor) {
        return field.getId();
      }
    }
    env.recordException(new NoSuchFieldError(fieldString + ""String_Node_Str"" + descriptorString+ ""String_Node_Str""+ cls));
    return 0;
  }
 catch (  Throwable unexpected) {
    if (traceJNI)     unexpected.printStackTrace(System.err);
    env.recordException(unexpected);
    return 0;
  }
}","/** 
 * GetStaticFieldID:  return a field id which can be cached in native code and reused
 * @param env A JREF index for the JNI environment object
 * @param classJREF a JREF index for the RVMClass object
 * @param fieldNameAddress a raw address to a null-terminated string in C for the field name
 * @param descriptorAddress a raw address to a null-terminated string in C for the descriptor
 * @return the offset of a static field given the class, field nameand type. Return 0 if the field is not found
 * @exception NoSuchFieldError if the specified field cannot be found
 * @exception ExceptionInInitializerError if the class initializer fails
 * @exception OutOfMemoryError if the system runs out of memory
 */
private static int GetStaticFieldID(JNIEnvironment env,int classJREF,Address fieldNameAddress,Address descriptorAddress){
  if (traceJNI)   VM.sysWrite(""String_Node_Str"");
  RuntimeEntrypoints.checkJNICountDownToGC();
  try {
    Class<?> cls=(Class<?>)env.getJNIRef(classJREF);
    String fieldString=JNIHelpers.createStringFromC(fieldNameAddress);
    Atom fieldName=Atom.findOrCreateAsciiAtom(fieldString);
    String descriptorString=JNIHelpers.createStringFromC(descriptorAddress);
    Atom descriptor=Atom.findOrCreateAsciiAtom(descriptorString);
    RVMType rvmType=java.lang.JikesRVMSupport.getTypeForClass(cls);
    if (rvmType.isClassType()) {
      for (RVMClass curClass=rvmType.asClass(); curClass != null; curClass=curClass.getSuperClass()) {
        for (        RVMField field : curClass.getStaticFields()) {
          if (field.getName() == fieldName && field.getDescriptor() == descriptor) {
            return field.getId();
          }
        }
      }
      for (      RVMClass curClass : rvmType.asClass().getAllImplementedInterfaces()) {
        for (        RVMField field : curClass.getStaticFields()) {
          if (field.getName() == fieldName && field.getDescriptor() == descriptor) {
            return field.getId();
          }
        }
      }
    }
    env.recordException(new NoSuchFieldError(fieldString + ""String_Node_Str"" + descriptorString+ ""String_Node_Str""+ cls));
    return 0;
  }
 catch (  Throwable unexpected) {
    if (traceJNI)     unexpected.printStackTrace(System.err);
    env.recordException(unexpected);
    return 0;
  }
}",0.8624969578972986
149735,"@Override public void run(){
  JavaThreadModel.collectorThreadLocal.set(collector);
  model.waitForGCStart();
  code.execute(new Env());
  model.collectorThreads.remove(this);
  model.exitGC();
}","@Override public void run(){
  JavaThreadModel.setCurrentCollector(collector);
  model.waitForGCStart();
  code.execute(new Env());
  model.removeCollector(this);
  model.exitGC();
}",0.870026525198939
149736,"@Override public void run(){
  JavaThreadModel.collectorThreadLocal.set(collector);
  collector.run();
}","@Override public void run(){
  JavaThreadModel.setCurrentCollector(collector);
  collector.run();
}",0.8669950738916257
149737,"/** 
 * Perform the delicate operation of leaving the mutator pool. If there's a GC scheduled, and we are the last thread to join, join the GC (because we are required to trigger it) and then exit. Otherwise, just decrement the mutator count and leave.
 */
void leaveMutatorPool(){
synchronized (count) {
    boolean lastToGC=(mutatorsWaitingForGC == (activeMutators - 1));
    if (!lastToGC) {
      decActiveMutators();
      return;
    }
    mutatorsWaitingForGC++;
  }
  waitForGC(true);
synchronized (count) {
    mutatorsWaitingForGC--;
    decActiveMutators();
  }
}","/** 
 * Perform the delicate operation of leaving the mutator pool. If there's a GC scheduled, and we are the last thread to join, join the GC (because we are required to trigger it) and then exit. Otherwise, just decrement the mutator count and leave.
 */
void leaveMutatorPool(MutatorThread m){
  Trace.trace(Item.SCHEDULER,""String_Node_Str"",Thread.currentThread().getId());
synchronized (count) {
    boolean lastToGC=(mutatorsWaitingForGC == (activeMutators - 1));
    if (!lastToGC) {
      decActiveMutators();
      return;
    }
    mutatorsWaitingForGC++;
  }
  waitForGC(true);
synchronized (count) {
    mutatorsWaitingForGC--;
    decActiveMutators();
  }
  mutatorThreads.remove(m);
}",0.9032258064516128
149738,"/** 
 * Wait for the mutator threads to exit.
 * @see org.mmtk.harness.scheduler.ThreadModel#schedule()
 */
@Override public void schedule(){
  startRunning();
  while (activeMutators > 0) {
synchronized (count) {
      try {
        count.wait();
      }
 catch (      InterruptedException e) {
      }
      System.err.println(""String_Node_Str"" + activeMutators);
    }
  }
}","/** 
 * Wait for the mutator threads to exit.
 * @see org.mmtk.harness.scheduler.ThreadModel#schedule()
 */
@Override public void schedule(){
  startRunning();
  while (mutatorThreads.size() > activeMutators) {
synchronized (count) {
      try {
        count.wait();
      }
 catch (      InterruptedException e) {
      }
      Trace.trace(Item.SCHEDULER,""String_Node_Str"" + activeMutators);
    }
  }
  while (activeMutators > 0) {
synchronized (count) {
      try {
        count.wait();
      }
 catch (      InterruptedException e) {
      }
      Trace.trace(Item.SCHEDULER,""String_Node_Str"" + activeMutators);
    }
  }
}",0.7037773359840954
149739,"private void incActiveMutators(){
  activeMutators++;
}","private void incActiveMutators(){
  activeMutators++;
  count.notify();
}",0.859375
149740,"private void endMutator(){
  model.leaveMutatorPool();
}","private void endMutator(){
  model.leaveMutatorPool(this);
}",0.9655172413793104
149741,"/** 
 * Recompute the normal out edges of 'this' based on the semantics of the branch instructions in the block. WARNING: Use this method with caution.  It does not update the CFG edges correctly if the method contains certain instructions such as throws and returns.  Incorrect liveness info and GC maps result, causing crashes during GC.  CMVC Defect 171189
 */
public final void recomputeNormalOut(IR ir){
  deleteNormalOut();
  for (InstructionEnumeration e=enumerateBranchInstructions(); e.hasMoreElements(); ) {
    Instruction branch=e.next();
    BasicBlockEnumeration targets=branch.getBranchTargets();
    while (targets.hasMoreElements()) {
      insertOut(targets.next());
    }
  }
  BasicBlock fallThrough=getFallThroughBlock();
  if (fallThrough != null) {
    insertOut(fallThrough);
  }
  if (hasReturn()) {
    insertOut(ir.cfg.exit());
  }
 else   if (hasAthrowInst() || hasNonReturningCall()) {
    if (mayThrowUncaughtException()) {
      insertOut(ir.cfg.exit());
    }
  }
 else   if (hasNonReturningOsr()) {
    insertOut(ir.cfg.exit());
  }
}","/** 
 * Recompute the normal out edges of 'this' based on the semantics of the branch instructions in the block. WARNING: Use this method with caution.  It does not update the CFG edges correctly if the method contains certain instructions such as throws and returns.  Incorrect liveness info and GC maps result, causing crashes during GC.  CMVC Defect 171189
 */
public final void recomputeNormalOut(IR ir){
  deleteNormalOut();
  for (InstructionEnumeration e=enumerateBranchInstructions(); e.hasMoreElements(); ) {
    Instruction branch=e.next();
    BasicBlockEnumeration targets=branch.getBranchTargets();
    while (targets.hasMoreElements()) {
      BasicBlock targetBlock=targets.next();
      if (targetBlock.isExceptionHandlerBasicBlock()) {
        targetBlock.setExceptionHandlerWithNormalIn();
      }
      insertOut(targetBlock);
    }
  }
  BasicBlock fallThrough=getFallThroughBlock();
  if (fallThrough != null) {
    if (fallThrough.isExceptionHandlerBasicBlock()) {
      fallThrough.setExceptionHandlerWithNormalIn();
    }
    insertOut(fallThrough);
  }
  if (hasReturn()) {
    insertOut(ir.cfg.exit());
  }
 else   if (hasAthrowInst() || hasNonReturningCall()) {
    if (mayThrowUncaughtException()) {
      insertOut(ir.cfg.exit());
    }
  }
 else   if (hasNonReturningOsr()) {
    insertOut(ir.cfg.exit());
  }
}",0.8795681063122923
149742,"private boolean isExceptionHandlerWithNormalIn(){
  return (flags & EXCEPTION_HANDLER_WITH_NORMAL_IN) != 0;
}","public final boolean isExceptionHandlerWithNormalIn(){
  return (flags & EXCEPTION_HANDLER_WITH_NORMAL_IN) != 0;
}",0.9417040358744396
149743,"@NoInline @Unpreemptible private void timedWaitRelativeNicelyImpl(long delayNanos){
  RVMThread.enterNative();
  timedWaitRelative(delayNanos);
  int recCount=unlockCompletely();
  RVMThread.leaveNative();
  relockNicelyImpl(recCount);
}","@NoInline @Unpreemptible @NoOptCompile private void timedWaitRelativeNicelyImpl(long delayNanos){
  RVMThread.enterNative();
  timedWaitRelative(delayNanos);
  int recCount=unlockCompletely();
  RVMThread.leaveNative();
  relockNicelyImpl(recCount);
}",0.971311475409836
149744,"/** 
 * Send a broadcast, which should awaken anyone who is currently blocked in any of the wait methods.  This method should (in principle) be non-blocking, and, as such, it does not notify the threading subsystem that it is blocking.
 */
public void broadcast(){
  sysCall.sysPthreadCondBroadcast(cond);
}","/** 
 * Send a broadcast, which should awaken anyone who is currently blocked in any of the wait methods.  This method should (in principle) be non-blocking, and, as such, it does not notify the threading subsystem that it is blocking.
 */
@NoInline @NoOptCompile public void broadcast(){
  sysCall.sysPthreadCondBroadcast(cond);
}",0.962382445141066
149745,"@NoInline @Unpreemptible private void lockNicelyNoRecImpl(){
  for (; ; ) {
    RVMThread.enterNative();
    sysCall.sysPthreadMutexLock(mutex);
    if (RVMThread.attemptLeaveNativeNoBlock()) {
      return;
    }
 else {
      sysCall.sysPthreadMutexUnlock(mutex);
      RVMThread.leaveNative();
    }
  }
}","@NoInline @Unpreemptible @NoOptCompile private void lockNicelyNoRecImpl(){
  for (; ; ) {
    RVMThread.enterNative();
    sysCall.sysPthreadMutexLock(mutex);
    if (RVMThread.attemptLeaveNativeNoBlock()) {
      return;
    }
 else {
      sysCall.sysPthreadMutexUnlock(mutex);
      RVMThread.leaveNative();
    }
  }
}",0.9777777777777776
149746,"@NoInline public static void unlock(boolean b,HeavyCondLock l){
  if (b)   l.unlock();
}","@NoInline @NoOptCompile public static void unlock(boolean b,HeavyCondLock l){
  if (b)   l.unlock();
}",0.9263157894736842
149747,"/** 
 * Completely release the lock, ignoring recursion.  Returns the recursion count.
 */
public int unlockCompletely(){
  int result=recCount;
  recCount=0;
  holder=null;
  sysCall.sysPthreadMutexUnlock(mutex);
  return result;
}","/** 
 * Completely release the lock, ignoring recursion.  Returns the recursion count.
 */
@NoInline @NoOptCompile public int unlockCompletely(){
  int result=recCount;
  recCount=0;
  holderSlot=-1;
  sysCall.sysPthreadMutexUnlock(mutex);
  return result;
}",0.9306122448979592
149748,"/** 
 * Wait until someone calls broadcast, or until at least the given number of nanoseconds pass. <p> This blocking method method does not notify the threading subsystem that it is blocking.  Thus, if someone (like, say, the GC) requests that the thread is blocked then their request will block until this method unblocks.  If this sounds like it might be undesirable, call timedWaitRelativeNicely instead.
 */
public void timedWaitRelative(long delayNanos){
  long now=sysCall.sysNanoTime();
  timedWaitAbsolute(now + delayNanos);
}","/** 
 * Wait until someone calls broadcast, or until at least the given number of nanoseconds pass. <p> This blocking method method does not notify the threading subsystem that it is blocking.  Thus, if someone (like, say, the GC) requests that the thread is blocked then their request will block until this method unblocks.  If this sounds like it might be undesirable, call timedWaitRelativeNicely instead.
 */
@NoInline @NoOptCompile public void timedWaitRelative(long delayNanos){
  long now=sysCall.sysNanoTime();
  timedWaitAbsolute(now + delayNanos);
}",0.9780621572212066
149749,"/** 
 * Wait until someone calls broadcast, or until the clock reaches the given time. <p> This blocking method method does not notify the threading subsystem that it is blocking.  Thus, if someone (like, say, the GC) requests that the thread is blocked then their request will block until this method unblocks.  If this sounds like it might be undesirable, call timedWaitAbsoluteNicely instead.
 */
public void timedWaitAbsolute(long whenWakeupNanos){
  int recCount=this.recCount;
  this.recCount=0;
  holder=null;
  sysCall.sysPthreadCondTimedWait(cond,mutex,whenWakeupNanos);
  this.recCount=recCount;
  holder=RVMThread.getCurrentThread();
}","/** 
 * Wait until someone calls broadcast, or until the clock reaches the given time. <p> This blocking method method does not notify the threading subsystem that it is blocking.  Thus, if someone (like, say, the GC) requests that the thread is blocked then their request will block until this method unblocks.  If this sounds like it might be undesirable, call timedWaitAbsoluteNicely instead.
 */
@NoInline @NoOptCompile public void timedWaitAbsolute(long whenWakeupNanos){
  int recCount=this.recCount;
  this.recCount=0;
  holderSlot=-1;
  sysCall.sysPthreadCondTimedWait(cond,mutex,whenWakeupNanos);
  if (VM.VerifyAssertions)   VM._assert(holderSlot == -1);
  if (VM.VerifyAssertions)   VM._assert(this.recCount == 0);
  this.recCount=recCount;
  holderSlot=RVMThread.getCurrentThreadSlot();
}",0.8506224066390041
149750,"@NoInline @Unpreemptible private void timedWaitAbsoluteNicelyImpl(long whenWakeupNanos){
  RVMThread.enterNative();
  timedWaitAbsolute(whenWakeupNanos);
  int recCount=unlockCompletely();
  RVMThread.leaveNative();
  relockNicelyImpl(recCount);
}","@NoInline @Unpreemptible @NoOptCompile private void timedWaitAbsoluteNicelyImpl(long whenWakeupNanos){
  RVMThread.enterNative();
  timedWaitAbsolute(whenWakeupNanos);
  int recCount=unlockCompletely();
  RVMThread.leaveNative();
  relockNicelyImpl(recCount);
}",0.9724409448818898
149751,"@NoInline @Unpreemptible private void relockNicelyImpl(int recCount){
  for (; ; ) {
    RVMThread.enterNative();
    sysCall.sysPthreadMutexLock(mutex);
    if (RVMThread.attemptLeaveNativeNoBlock()) {
      break;
    }
 else {
      sysCall.sysPthreadMutexUnlock(mutex);
      RVMThread.leaveNative();
    }
  }
  holder=RVMThread.getCurrentThread();
  this.recCount=recCount;
}","@NoInline @Unpreemptible @NoOptCompile private void relockNicelyImpl(int recCount){
  for (; ; ) {
    RVMThread.enterNative();
    sysCall.sysPthreadMutexLock(mutex);
    if (RVMThread.attemptLeaveNativeNoBlock()) {
      break;
    }
 else {
      sysCall.sysPthreadMutexUnlock(mutex);
      RVMThread.leaveNative();
    }
  }
  if (VM.VerifyAssertions)   VM._assert(holderSlot == -1);
  if (VM.VerifyAssertions)   VM._assert(this.recCount == 0);
  holderSlot=RVMThread.getCurrentThreadSlot();
  this.recCount=recCount;
}",0.8296460176991151
149752,"@NoInline @Unpreemptible private void waitNicelyImpl(){
  RVMThread.enterNative();
  await();
  int recCount=unlockCompletely();
  RVMThread.leaveNative();
  relockNicelyImpl(recCount);
}","@NoInline @Unpreemptible @NoOptCompile private void waitNicelyImpl(){
  RVMThread.enterNative();
  await();
  int recCount=unlockCompletely();
  RVMThread.leaveNative();
  relockNicelyImpl(recCount);
}",0.963917525773196
149753,"/** 
 * Wait until it is possible to acquire the lock and then acquire it. There is no bound on how long you might wait, if someone else is holding the lock and there is no bound on how long they will hold it. As well, even if there is a bound on how long a thread might hold a lock but there are multiple threads contending on its acquisition, there will not necessarily be a bound on how long any particular thread will wait until it gets its turn. <p> This blocking method method notifies the threading subsystem that it is blocking.  Thus, it may be safer than calling lock.  But, its reliance on threading subsystem accounting methods may mean that it cannot be used in certain contexts (say, the threading subsystem itself). <p> This method will ensure that if it blocks, it does so with the mutex not held.  This is useful for cases where the subsystem that requested you to block needs to acquire the lock you were trying to acquire when the blocking request came. <p> It is usually not necessary to call this method instead of lock(), since most VM locks are held for short periods of time.
 */
@Unpreemptible(""String_Node_Str"") public void lockNicely(){
  RVMThread t=RVMThread.getCurrentThread();
  if (t != holder) {
    lockNicelyNoRec();
    holder=t;
  }
  recCount++;
  acquireCount++;
}","/** 
 * Wait until it is possible to acquire the lock and then acquire it. There is no bound on how long you might wait, if someone else is holding the lock and there is no bound on how long they will hold it. As well, even if there is a bound on how long a thread might hold a lock but there are multiple threads contending on its acquisition, there will not necessarily be a bound on how long any particular thread will wait until it gets its turn. <p> This blocking method method notifies the threading subsystem that it is blocking.  Thus, it may be safer than calling lock.  But, its reliance on threading subsystem accounting methods may mean that it cannot be used in certain contexts (say, the threading subsystem itself). <p> This method will ensure that if it blocks, it does so with the mutex not held.  This is useful for cases where the subsystem that requested you to block needs to acquire the lock you were trying to acquire when the blocking request came. <p> It is usually not necessary to call this method instead of lock(), since most VM locks are held for short periods of time.
 */
@Unpreemptible(""String_Node_Str"") @NoInline @NoOptCompile public void lockNicely(){
  int mySlot=RVMThread.getCurrentThreadSlot();
  if (mySlot != holderSlot) {
    lockNicelyNoRec();
    if (VM.VerifyAssertions)     VM._assert(holderSlot == -1);
    if (VM.VerifyAssertions)     VM._assert(recCount == 0);
    holderSlot=mySlot;
  }
  recCount++;
  acquireCount++;
}",0.9279019466474404
149754,"/** 
 * Send a broadcast after first acquiring the lock.  Release the lock after sending the broadacst.  In most cases where you want to send a broadcast but you don't need to acquire the lock to set the condition that the other thread(s) are waiting on, you want to call this method instead of <code>broadcast</code>.
 */
public void lockedBroadcast(){
  lock();
  broadcast();
  unlock();
}","/** 
 * Send a broadcast after first acquiring the lock.  Release the lock after sending the broadacst.  In most cases where you want to send a broadcast but you don't need to acquire the lock to set the condition that the other thread(s) are waiting on, you want to call this method instead of <code>broadcast</code>.
 */
@NoInline @NoOptCompile public void lockedBroadcast(){
  lock();
  broadcast();
  unlock();
}",0.9702970297029704
149755,"/** 
 * Relock the mutex after using unlockCompletely.
 */
public void relock(int recCount){
  sysCall.sysPthreadMutexLock(mutex);
  holder=RVMThread.getCurrentThread();
  this.recCount=recCount;
  acquireCount++;
}","/** 
 * Relock the mutex after using unlockCompletely.
 */
@NoInline @NoOptCompile public void relock(int recCount){
  sysCall.sysPthreadMutexLock(mutex);
  if (VM.VerifyAssertions)   VM._assert(holderSlot == -1);
  if (VM.VerifyAssertions)   VM._assert(this.recCount == 0);
  holderSlot=RVMThread.getCurrentThreadSlot();
  this.recCount=recCount;
  acquireCount++;
}",0.718213058419244
149756,"/** 
 * Wait until someone calls broadcast. <p> This blocking method method does not notify the threading subsystem that it is blocking.  Thus, if someone (like, say, the GC) requests that the thread is blocked then their request will block until this method unblocks.  If this sounds like it might be undesirable, call waitNicely instead.
 */
public void await(){
  int recCount=this.recCount;
  this.recCount=0;
  holder=null;
  sysCall.sysPthreadCondWait(cond,mutex);
  this.recCount=recCount;
  holder=RVMThread.getCurrentThread();
}","/** 
 * Wait until someone calls broadcast. <p> This blocking method method does not notify the threading subsystem that it is blocking.  Thus, if someone (like, say, the GC) requests that the thread is blocked then their request will block until this method unblocks.  If this sounds like it might be undesirable, call waitNicely instead.
 */
@NoInline @NoOptCompile public void await(){
  int recCount=this.recCount;
  this.recCount=0;
  holderSlot=-1;
  sysCall.sysPthreadCondWait(cond,mutex);
  if (VM.VerifyAssertions)   VM._assert(holderSlot == -1);
  if (VM.VerifyAssertions)   VM._assert(this.recCount == 0);
  this.recCount=recCount;
  holderSlot=RVMThread.getCurrentThreadSlot();
}",0.8143322475570033
149757,"@NoInline public static boolean lock(HeavyCondLock l){
  if (l == null) {
    return false;
  }
 else {
    l.lock();
    return true;
  }
}","@NoInline @NoOptCompile public static boolean lock(HeavyCondLock l){
  if (l == null) {
    return false;
  }
 else {
    l.lock();
    return true;
  }
}",0.9523809523809524
149758,"@Unpreemptible public void lockNicely(){
  VM.disableYieldpoints();
  super.lockNicely();
}","@Unpreemptible @NoInline @NoOptCompile public void lockNicely(){
  VM.disableYieldpoints();
  super.lockNicely();
}",0.883495145631068
149759,"public void unlock(){
  super.unlock();
  VM.enableYieldpoints();
}","@NoInline @NoOptCompile public void unlock(){
  super.unlock();
  VM.enableYieldpoints();
}",0.8481012658227848
149760,"public void lock(){
  VM.disableYieldpoints();
  super.lock();
}","@NoInline @NoOptCompile public void lock(){
  VM.disableYieldpoints();
  super.lock();
}",0.8421052631578947
149761,"/** 
 * @param obj an object
 * @param lockOffset the offset of the thin lock word in the object.
 * @param thread a thread
 * @return <code>true</code> if the lock on obj at offset lockOffset is currently ownedby thread <code>false</code> if it is not.
 */
public static boolean holdsLock(Object obj,Offset lockOffset,RVMThread thread){
  int tid=thread.getLockingId();
  Word bits=Magic.getWordAtOffset(obj,lockOffset);
  if (bits.and(TL_FAT_LOCK_MASK).isZero()) {
    return (bits.and(ThinLockConstants.TL_THREAD_ID_MASK).toInt() == tid);
  }
 else {
    int index=getLockIndex(bits);
    Lock l=Lock.getLock(index);
    return l != null && l.getOwnerId() == tid;
  }
}","/** 
 * @param obj an object
 * @param lockOffset the offset of the thin lock word in the object.
 * @param thread a thread
 * @return <code>true</code> if the lock on obj at offset lockOffset is currently ownedby thread <code>false</code> if it is not.
 */
public static boolean holdsLock(Object obj,Offset lockOffset,RVMThread thread){
  int tid=thread.getLockingId();
  Word bits=Magic.getWordAtOffset(obj,lockOffset);
  if (bits.and(TL_FAT_LOCK_MASK).isZero()) {
    return (bits.and(ThinLockConstants.TL_THREAD_ID_MASK).toInt() == tid);
  }
 else {
    int index=getLockIndex(bits);
    Lock l=Lock.getLock(index);
    boolean result=false;
    if (l != null) {
      l.mutex.lock();
      result=(l.getOwnerId() == tid && l.getLockedObject() == obj);
      l.mutex.unlock();
    }
    return result;
  }
}",0.8725556304787593
149762,"/** 
 * Main code generation loop.
 */
protected final MachineCode genCode(){
  emit_prologue();
  while (bcodes.hasMoreBytecodes()) {
    biStart=bcodes.index();
    bytecodeMap[biStart]=asm.getMachineCodeIndex();
    asm.resolveForwardReferences(biStart);
    starting_bytecode();
    int code=bcodes.nextInstruction();
switch (code) {
case JBC_nop:
{
        if (shouldPrint)         asm.noteBytecode(biStart,""String_Node_Str"");
        break;
      }
case JBC_aconst_null:
{
      if (shouldPrint)       asm.noteBytecode(biStart,""String_Node_Str"");
      emit_aconst_null();
      break;
    }
case JBC_iconst_m1:
{
    if (shouldPrint)     asm.noteBytecode(biStart,""String_Node_Str"");
    emit_iconst(-1);
    break;
  }
case JBC_iconst_0:
{
  if (shouldPrint)   asm.noteBytecode(biStart,""String_Node_Str"");
  emit_iconst(0);
  break;
}
case JBC_iconst_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iconst(1);
break;
}
case JBC_iconst_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iconst(2);
break;
}
case JBC_iconst_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iconst(3);
break;
}
case JBC_iconst_4:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iconst(4);
break;
}
case JBC_iconst_5:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iconst(5);
break;
}
case JBC_lconst_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lconst(0);
break;
}
case JBC_lconst_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lconst(1);
break;
}
case JBC_fconst_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fconst_0();
break;
}
case JBC_fconst_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fconst_1();
break;
}
case JBC_fconst_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fconst_2();
break;
}
case JBC_dconst_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dconst_0();
break;
}
case JBC_dconst_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dconst_1();
break;
}
case JBC_bipush:
{
int val=bcodes.getByteValue();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",val);
emit_iconst(val);
break;
}
case JBC_sipush:
{
int val=bcodes.getShortValue();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",val);
emit_iconst(val);
break;
}
case JBC_ldc:
{
int index=bcodes.getConstantIndex();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
Offset offset=klass.getLiteralOffset(index);
byte type=klass.getLiteralDescription(index);
emit_ldc(offset,type);
break;
}
case JBC_ldc_w:
{
int index=bcodes.getWideConstantIndex();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
Offset offset=klass.getLiteralOffset(index);
byte type=klass.getLiteralDescription(index);
emit_ldc(offset,type);
break;
}
case JBC_ldc2_w:
{
int index=bcodes.getWideConstantIndex();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
Offset offset=klass.getLiteralOffset(index);
byte type=klass.getLiteralDescription(index);
emit_ldc2(offset,type);
break;
}
case JBC_iload:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_iload(index);
break;
}
case JBC_lload:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_lload(index);
break;
}
case JBC_fload:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_fload(index);
break;
}
case JBC_dload:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_dload(index);
break;
}
case JBC_aload:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_aload(index);
break;
}
case JBC_iload_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iload(0);
break;
}
case JBC_iload_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iload(1);
break;
}
case JBC_iload_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iload(2);
break;
}
case JBC_iload_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iload(3);
break;
}
case JBC_lload_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lload(0);
break;
}
case JBC_lload_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lload(1);
break;
}
case JBC_lload_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lload(2);
break;
}
case JBC_lload_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lload(3);
break;
}
case JBC_fload_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fload(0);
break;
}
case JBC_fload_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fload(1);
break;
}
case JBC_fload_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fload(2);
break;
}
case JBC_fload_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fload(3);
break;
}
case JBC_dload_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dload(0);
break;
}
case JBC_dload_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dload(1);
break;
}
case JBC_dload_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dload(2);
break;
}
case JBC_dload_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dload(3);
break;
}
case JBC_aload_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_aload(0);
break;
}
case JBC_aload_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_aload(1);
break;
}
case JBC_aload_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_aload(2);
break;
}
case JBC_aload_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_aload(3);
break;
}
case JBC_iaload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iaload();
break;
}
case JBC_laload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_laload();
break;
}
case JBC_faload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_faload();
break;
}
case JBC_daload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_daload();
break;
}
case JBC_aaload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_aaload();
break;
}
case JBC_baload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_baload();
break;
}
case JBC_caload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_caload();
break;
}
case JBC_saload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_saload();
break;
}
case JBC_istore:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_istore(index);
break;
}
case JBC_lstore:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_lstore(index);
break;
}
case JBC_fstore:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_fstore(index);
break;
}
case JBC_dstore:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_dstore(index);
break;
}
case JBC_astore:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_astore(index);
break;
}
case JBC_istore_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_istore(0);
break;
}
case JBC_istore_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_istore(1);
break;
}
case JBC_istore_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_istore(2);
break;
}
case JBC_istore_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_istore(3);
break;
}
case JBC_lstore_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lstore(0);
break;
}
case JBC_lstore_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lstore(1);
break;
}
case JBC_lstore_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lstore(2);
break;
}
case JBC_lstore_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lstore(3);
break;
}
case JBC_fstore_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fstore(0);
break;
}
case JBC_fstore_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fstore(1);
break;
}
case JBC_fstore_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fstore(2);
break;
}
case JBC_fstore_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fstore(3);
break;
}
case JBC_dstore_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dstore(0);
break;
}
case JBC_dstore_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dstore(1);
break;
}
case JBC_dstore_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dstore(2);
break;
}
case JBC_dstore_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dstore(3);
break;
}
case JBC_astore_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_astore(0);
break;
}
case JBC_astore_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_astore(1);
break;
}
case JBC_astore_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_astore(2);
break;
}
case JBC_astore_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_astore(3);
break;
}
case JBC_iastore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iastore();
break;
}
case JBC_lastore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lastore();
break;
}
case JBC_fastore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fastore();
break;
}
case JBC_dastore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dastore();
break;
}
case JBC_aastore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.VerifyUnint && isUninterruptible && doesCheckStore) forbiddenBytecode(""String_Node_Str"",bcodes.index());
emit_aastore();
break;
}
case JBC_bastore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_bastore();
break;
}
case JBC_castore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_castore();
break;
}
case JBC_sastore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_sastore();
break;
}
case JBC_pop:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_pop();
break;
}
case JBC_pop2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_pop2();
break;
}
case JBC_dup:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dup();
break;
}
case JBC_dup_x1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dup_x1();
break;
}
case JBC_dup_x2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dup_x2();
break;
}
case JBC_dup2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dup2();
break;
}
case JBC_dup2_x1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dup2_x1();
break;
}
case JBC_dup2_x2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dup2_x2();
break;
}
case JBC_swap:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_swap();
break;
}
case JBC_iadd:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iadd();
break;
}
case JBC_ladd:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ladd();
break;
}
case JBC_fadd:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fadd();
break;
}
case JBC_dadd:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dadd();
break;
}
case JBC_isub:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_isub();
break;
}
case JBC_lsub:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lsub();
break;
}
case JBC_fsub:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fsub();
break;
}
case JBC_dsub:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dsub();
break;
}
case JBC_imul:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_imul();
break;
}
case JBC_lmul:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lmul();
break;
}
case JBC_fmul:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fmul();
break;
}
case JBC_dmul:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dmul();
break;
}
case JBC_idiv:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_idiv();
break;
}
case JBC_ldiv:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ldiv();
break;
}
case JBC_fdiv:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fdiv();
break;
}
case JBC_ddiv:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ddiv();
break;
}
case JBC_irem:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_irem();
break;
}
case JBC_lrem:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lrem();
break;
}
case JBC_frem:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_frem();
break;
}
case JBC_drem:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_drem();
break;
}
case JBC_ineg:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ineg();
break;
}
case JBC_lneg:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lneg();
break;
}
case JBC_fneg:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fneg();
break;
}
case JBC_dneg:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dneg();
break;
}
case JBC_ishl:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ishl();
break;
}
case JBC_lshl:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lshl();
break;
}
case JBC_ishr:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ishr();
break;
}
case JBC_lshr:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lshr();
break;
}
case JBC_iushr:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iushr();
break;
}
case JBC_lushr:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lushr();
break;
}
case JBC_iand:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iand();
break;
}
case JBC_land:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_land();
break;
}
case JBC_ior:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ior();
break;
}
case JBC_lor:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lor();
break;
}
case JBC_ixor:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ixor();
break;
}
case JBC_lxor:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lxor();
break;
}
case JBC_iinc:
{
int index=bcodes.getLocalNumber();
int val=bcodes.getIncrement();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index,val);
emit_iinc(index,val);
break;
}
case JBC_i2l:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_i2l();
break;
}
case JBC_i2f:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_i2f();
break;
}
case JBC_i2d:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_i2d();
break;
}
case JBC_l2i:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_l2i();
break;
}
case JBC_l2f:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_l2f();
break;
}
case JBC_l2d:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_l2d();
break;
}
case JBC_f2i:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_f2i();
break;
}
case JBC_f2l:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_f2l();
break;
}
case JBC_f2d:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_f2d();
break;
}
case JBC_d2i:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_d2i();
break;
}
case JBC_d2l:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_d2l();
break;
}
case JBC_d2f:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_d2f();
break;
}
case JBC_int2byte:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_i2b();
break;
}
case JBC_int2char:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_i2c();
break;
}
case JBC_int2short:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_i2s();
break;
}
case JBC_lcmp:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lcmp();
break;
}
case JBC_fcmpl:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fcmpl();
break;
}
case JBC_fcmpg:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fcmpg();
break;
}
case JBC_dcmpl:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dcmpl();
break;
}
case JBC_dcmpg:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dcmpg();
break;
}
case JBC_ifeq:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_ifeq(bTarget);
break;
}
case JBC_ifne:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_ifne(bTarget);
break;
}
case JBC_iflt:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_iflt(bTarget);
break;
}
case JBC_ifge:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_ifge(bTarget);
break;
}
case JBC_ifgt:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_ifgt(bTarget);
break;
}
case JBC_ifle:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_ifle(bTarget);
break;
}
case JBC_if_icmpeq:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_icmpeq(bTarget);
break;
}
case JBC_if_icmpne:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_icmpne(bTarget);
break;
}
case JBC_if_icmplt:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_icmplt(bTarget);
break;
}
case JBC_if_icmpge:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_icmpge(bTarget);
break;
}
case JBC_if_icmpgt:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_icmpgt(bTarget);
break;
}
case JBC_if_icmple:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_icmple(bTarget);
break;
}
case JBC_if_acmpeq:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_acmpeq(bTarget);
break;
}
case JBC_if_acmpne:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_acmpne(bTarget);
break;
}
case JBC_goto:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_goto(bTarget);
break;
}
case JBC_jsr:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
emit_jsr(bTarget);
break;
}
case JBC_ret:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_ret(index);
break;
}
case JBC_tableswitch:
{
bcodes.alignSwitch();
int defaultval=bcodes.getDefaultSwitchOffset();
int low=bcodes.getLowSwitchValue();
int high=bcodes.getHighSwitchValue();
if (shouldPrint) asm.noteTableswitchBytecode(biStart,low,high,defaultval);
emit_tableswitch(defaultval,low,high);
break;
}
case JBC_lookupswitch:
{
bcodes.alignSwitch();
int defaultval=bcodes.getDefaultSwitchOffset();
int npairs=bcodes.getSwitchLength();
if (shouldPrint) asm.noteLookupswitchBytecode(biStart,npairs,defaultval);
emit_lookupswitch(defaultval,npairs);
break;
}
case JBC_ireturn:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.UseEpilogueYieldPoints) emit_threadSwitchTest(RVMThread.EPILOGUE);
emit_ireturn();
break;
}
case JBC_lreturn:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.UseEpilogueYieldPoints) emit_threadSwitchTest(RVMThread.EPILOGUE);
emit_lreturn();
break;
}
case JBC_freturn:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.UseEpilogueYieldPoints) emit_threadSwitchTest(RVMThread.EPILOGUE);
emit_freturn();
break;
}
case JBC_dreturn:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.UseEpilogueYieldPoints) emit_threadSwitchTest(RVMThread.EPILOGUE);
emit_dreturn();
break;
}
case JBC_areturn:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.UseEpilogueYieldPoints) emit_threadSwitchTest(RVMThread.EPILOGUE);
emit_areturn();
break;
}
case JBC_return:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.UseEpilogueYieldPoints) emit_threadSwitchTest(RVMThread.EPILOGUE);
emit_return();
break;
}
case JBC_getstatic:
{
FieldReference fieldRef=bcodes.getFieldReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",fieldRef);
if (fieldRef.needsDynamicLink(method)) {
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",fieldRef,bcodes.index());
emit_unresolved_getstatic(fieldRef);
}
 else {
emit_resolved_getstatic(fieldRef);
}
break;
}
case JBC_putstatic:
{
FieldReference fieldRef=bcodes.getFieldReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",fieldRef);
if (fieldRef.needsDynamicLink(method)) {
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",fieldRef,bcodes.index());
emit_unresolved_putstatic(fieldRef);
}
 else {
emit_resolved_putstatic(fieldRef);
}
break;
}
case JBC_getfield:
{
FieldReference fieldRef=bcodes.getFieldReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",fieldRef);
if (fieldRef.needsDynamicLink(method)) {
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",fieldRef,bcodes.index());
emit_unresolved_getfield(fieldRef);
}
 else {
emit_resolved_getfield(fieldRef);
}
break;
}
case JBC_putfield:
{
FieldReference fieldRef=bcodes.getFieldReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",fieldRef);
if (fieldRef.needsDynamicLink(method)) {
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",fieldRef,bcodes.index());
emit_unresolved_putfield(fieldRef);
}
 else {
emit_resolved_putfield(fieldRef);
}
break;
}
case JBC_invokevirtual:
{
ForwardReference xx=null;
if (biStart == this.pendingIdx) {
ForwardReference x=emit_pending_goto(0);
this.pendingRef.resolve(asm);
CompiledMethod cm=CompiledMethods.getCompiledMethod(this.pendingCMID);
if (VM.VerifyAssertions) VM._assert(cm.isSpecialForOSR());
emit_invoke_compiledmethod(cm);
xx=emit_pending_goto(0);
x.resolve(asm);
}
MethodReference methodRef=bcodes.getMethodReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",methodRef);
if (methodRef.getType().isMagicType()) {
if (emit_Magic(methodRef)) {
break;
}
}
if (methodRef.isMiranda()) {
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",methodRef);
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",methodRef,bcodes.index());
emit_invokeinterface(methodRef);
}
 else {
if (methodRef.needsDynamicLink(method)) {
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",methodRef,bcodes.index());
emit_unresolved_invokevirtual(methodRef);
}
 else {
if (VM.VerifyUnint && !isInterruptible) checkTarget(methodRef.peekResolvedMethod(),bcodes.index());
emit_resolved_invokevirtual(methodRef);
}
}
if (xx != null) {
xx.resolve(asm);
}
break;
}
case JBC_invokespecial:
{
ForwardReference xx=null;
if (biStart == this.pendingIdx) {
ForwardReference x=emit_pending_goto(0);
this.pendingRef.resolve(asm);
CompiledMethod cm=CompiledMethods.getCompiledMethod(this.pendingCMID);
if (VM.VerifyAssertions) VM._assert(cm.isSpecialForOSR());
emit_invoke_compiledmethod(cm);
xx=emit_pending_goto(0);
x.resolve(asm);
}
MethodReference methodRef=bcodes.getMethodReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",methodRef);
RVMMethod target=methodRef.resolveInvokeSpecial();
if (target != null) {
if (VM.VerifyUnint && !isInterruptible) checkTarget(target,bcodes.index());
emit_resolved_invokespecial(methodRef,target);
}
 else {
emit_unresolved_invokespecial(methodRef);
}
if (xx != null) {
xx.resolve(asm);
}
break;
}
case JBC_invokestatic:
{
ForwardReference xx=null;
if (biStart == this.pendingIdx) {
ForwardReference x=emit_pending_goto(0);
this.pendingRef.resolve(asm);
CompiledMethod cm=CompiledMethods.getCompiledMethod(this.pendingCMID);
if (VM.VerifyAssertions) VM._assert(cm.isSpecialForOSR());
emit_invoke_compiledmethod(cm);
xx=emit_pending_goto(0);
x.resolve(asm);
}
MethodReference methodRef=bcodes.getMethodReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",methodRef);
if (methodRef.isMagic()) {
if (emit_Magic(methodRef)) {
break;
}
}
if (methodRef.needsDynamicLink(method)) {
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",methodRef,bcodes.index());
emit_unresolved_invokestatic(methodRef);
}
 else {
if (VM.VerifyUnint && !isInterruptible) checkTarget(methodRef.peekResolvedMethod(),bcodes.index());
emit_resolved_invokestatic(methodRef);
}
if (xx != null) {
xx.resolve(asm);
}
break;
}
case JBC_invokeinterface:
{
ForwardReference xx=null;
if (biStart == this.pendingIdx) {
ForwardReference x=emit_pending_goto(0);
this.pendingRef.resolve(asm);
CompiledMethod cm=CompiledMethods.getCompiledMethod(this.pendingCMID);
if (VM.VerifyAssertions) VM._assert(cm.isSpecialForOSR());
emit_invoke_compiledmethod(cm);
xx=emit_pending_goto(0);
x.resolve(asm);
}
MethodReference methodRef=bcodes.getMethodReference();
bcodes.alignInvokeInterface();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",methodRef);
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",methodRef,bcodes.index());
emit_invokeinterface(methodRef);
if (xx != null) {
xx.resolve(asm);
}
break;
}
case JBC_xxxunusedxxx:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);
break;
}
case JBC_new:
{
TypeReference typeRef=bcodes.getTypeReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",typeRef);
if (VM.VerifyUnint && isUninterruptible) forbiddenBytecode(""String_Node_Str"",typeRef,bcodes.index());
RVMType type=typeRef.peekType();
if (type != null && (type.isInitialized() || type.isInBootImage())) {
emit_resolved_new(type.asClass());
}
 else {
if (VM.VerifyUnint && isUnpreemptible) forbiddenBytecode(""String_Node_Str"",typeRef,bcodes.index());
emit_unresolved_new(typeRef);
}
break;
}
case JBC_newarray:
{
int atype=bcodes.getArrayElementType();
RVMArray array=RVMArray.getPrimitiveArrayType(atype);
if (VM.VerifyAssertions) VM._assert(array.isResolved());
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",array.getTypeRef());
if (VM.VerifyUnint && isUninterruptible) forbiddenBytecode(""String_Node_Str"",array,bcodes.index());
emit_resolved_newarray(array);
break;
}
case JBC_anewarray:
{
TypeReference elementTypeRef=bcodes.getTypeReference();
TypeReference arrayRef=elementTypeRef.getArrayTypeForElementType();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",arrayRef);
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",arrayRef,bcodes.index());
if (VM.VerifyAssertions && elementTypeRef.isUnboxedType()) {
VM._assert(false,""String_Node_Str"" + method + ""String_Node_Str""+ elementTypeRef+ ""String_Node_Str""+ ""String_Node_Str"");
}
RVMArray array=(RVMArray)arrayRef.peekType();
if (array != null && !(array.isInitialized() || array.isInBootImage()) && RVMType.JavaLangObjectType.isInstantiated()) {
RVMType elementType=elementTypeRef.peekType();
if (elementType != null && (elementType.isInitialized() || elementType.isInBootImage())) {
array.resolve();
array.instantiate();
}
if (array.isInitialized() || array.isInBootImage()) {
emit_resolved_newarray(array);
break;
}
}
emit_unresolved_newarray(arrayRef);
break;
}
case JBC_arraylength:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_arraylength();
break;
}
case JBC_athrow:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.UseEpilogueYieldPoints) emit_threadSwitchTest(RVMThread.EPILOGUE);
if (VM.VerifyUnint && isUninterruptible) forbiddenBytecode(""String_Node_Str"",bcodes.index());
emit_athrow();
break;
}
case JBC_checkcast:
{
TypeReference typeRef=bcodes.getTypeReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",typeRef);
RVMType type=typeRef.peekType();
if (type != null) {
if (type.isClassType()) {
RVMClass cType=type.asClass();
if (cType.isFinal()) {
emit_checkcast_final(cType);
break;
}
 else if (cType.isResolved()) {
if (cType.isInterface()) {
emit_checkcast_resolvedInterface(cType);
}
 else {
emit_checkcast_resolvedClass(cType);
}
break;
}
}
 else if (type.isArrayType()) {
RVMType elemType=type.asArray().getElementType();
if (elemType.isPrimitiveType() || elemType.isUnboxedType() || (elemType.isClassType() && elemType.asClass().isFinal())) {
emit_checkcast_final(type);
break;
}
}
 else {
if (VM.VerifyAssertions) VM._assert(type.getTypeRef().isUnboxedType());
break;
}
}
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",typeRef,bcodes.index());
emit_checkcast(typeRef);
break;
}
case JBC_instanceof:
{
TypeReference typeRef=bcodes.getTypeReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",typeRef);
RVMType type=typeRef.peekType();
if (type != null) {
if (type.isClassType()) {
RVMClass cType=type.asClass();
if (cType.isFinal()) {
emit_instanceof_final(type);
break;
}
 else if (cType.isResolved()) {
if (cType.isInterface()) {
emit_instanceof_resolvedInterface(cType);
}
 else {
emit_instanceof_resolvedClass(cType);
}
break;
}
}
 else if (type.isArrayType()) {
RVMType elemType=type.asArray().getElementType();
if (elemType.isPrimitiveType() || elemType.isUnboxedType() || (elemType.isClassType() && elemType.asClass().isFinal())) {
emit_instanceof_final(type);
break;
}
}
}
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",typeRef,bcodes.index());
emit_instanceof(typeRef);
break;
}
case JBC_monitorenter:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.VerifyUnint && isUninterruptible) forbiddenBytecode(""String_Node_Str"",bcodes.index());
emit_monitorenter();
break;
}
case JBC_monitorexit:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.VerifyUnint && isUninterruptible) forbiddenBytecode(""String_Node_Str"",bcodes.index());
emit_monitorexit();
break;
}
case JBC_wide:
{
int widecode=bcodes.getWideOpcode();
int index=bcodes.getWideLocalNumber();
switch (widecode) {
case JBC_iload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_iload(index);
break;
}
case JBC_lload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_lload(index);
break;
}
case JBC_fload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_fload(index);
break;
}
case JBC_dload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_dload(index);
break;
}
case JBC_aload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_aload(index);
break;
}
case JBC_istore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_istore(index);
break;
}
case JBC_lstore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_lstore(index);
break;
}
case JBC_fstore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_fstore(index);
break;
}
case JBC_dstore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_dstore(index);
break;
}
case JBC_astore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_astore(index);
break;
}
case JBC_iinc:
{
int val=bcodes.getWideIncrement();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index,val);
emit_iinc(index,val);
break;
}
case JBC_ret:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_ret(index);
break;
}
default :
if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);
}
break;
}
case JBC_multianewarray:
{
TypeReference typeRef=bcodes.getTypeReference();
int dimensions=bcodes.getArrayDimension();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",typeRef);
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",bcodes.index());
emit_multianewarray(typeRef,dimensions);
break;
}
case JBC_ifnull:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_ifnull(bTarget);
break;
}
case JBC_ifnonnull:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_ifnonnull(bTarget);
break;
}
case JBC_goto_w:
{
int offset=bcodes.getWideBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_goto(bTarget);
break;
}
case JBC_jsr_w:
{
int offset=bcodes.getWideBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
emit_jsr(bTarget);
break;
}
case JBC_impdep1:
{
if (VM.BuildForAdaptiveSystem) {
int pseudo_opcode=bcodes.nextPseudoInstruction();
switch (pseudo_opcode) {
case org.jikesrvm.osr.OSRConstants.PSEUDO_LoadIntConst:
{
int value=bcodes.readIntConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",value);
Offset offset=Offset.fromIntSignExtend(Statics.findOrCreateIntSizeLiteral(value));
emit_ldc(offset,CP_INT);
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_LoadLongConst:
{
long value=bcodes.readLongConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",value);
Offset offset=Offset.fromIntSignExtend(Statics.findOrCreateLongSizeLiteral(value));
emit_ldc2(offset,CP_LONG);
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_LoadWordConst:
{
if (VM.BuildFor32Addr) {
int value=bcodes.readIntConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"" + Integer.toHexString(value));
Offset offset=Offset.fromIntSignExtend(Statics.findOrCreateIntSizeLiteral(value));
emit_ldc(offset,CP_INT);
}
 else {
long value=bcodes.readLongConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"" + Long.toHexString(value));
Offset offset=Offset.fromIntSignExtend(Statics.findOrCreateLongSizeLiteral(value));
emit_ldc2(offset,CP_LONG);
emit_l2i();
}
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_LoadFloatConst:
{
int ibits=bcodes.readIntConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",ibits);
Offset offset=Offset.fromIntSignExtend(Statics.findOrCreateIntSizeLiteral(ibits));
emit_ldc(offset,CP_FLOAT);
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_LoadDoubleConst:
{
long lbits=bcodes.readLongConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",lbits);
Offset offset=Offset.fromIntSignExtend(Statics.findOrCreateLongSizeLiteral(lbits));
emit_ldc2(offset,CP_DOUBLE);
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_LoadRetAddrConst:
{
int bcIndex=bcodes.readIntConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",bcIndex);
emit_loadretaddrconst(bcIndex);
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_InvokeStatic:
{
int targetidx=bcodes.readIntConst();
RVMMethod methodRef=InvokeStatic.targetMethod(targetidx);
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",methodRef);
emit_resolved_invokestatic(methodRef.getMemberRef().asMethodReference());
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_InvokeCompiledMethod:
{
int cmid=bcodes.readIntConst();
int origIdx=bcodes.readIntConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",cmid);
this.pendingCMID=cmid;
this.pendingIdx=origIdx + this.method.getOsrPrologueLength();
this.pendingRef=emit_pending_goto(this.pendingIdx);
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_ParamInitEnd:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_deferred_prologue();
break;
}
default :
if (VM.TraceOnStackReplacement) {
VM.sysWrite(""String_Node_Str"" + VM.intAsHexString(pseudo_opcode) + ""String_Node_Str"");
}
if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);
break;
}
}
 else {
if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);
}
break;
}
default :
VM.sysWrite(""String_Node_Str"" + Services.getHexString(code,false) + ""String_Node_Str"");
if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);
}
ending_bytecode();
}
bytecodeMap[bcodes.length()]=asm.getMachineCodeIndex();
return asm.finalizeMachineCode(bytecodeMap);
}","/** 
 * Main code generation loop.
 */
protected final MachineCode genCode(){
  emit_prologue();
  while (bcodes.hasMoreBytecodes()) {
    biStart=bcodes.index();
    bytecodeMap[biStart]=asm.getMachineCodeIndex();
    asm.resolveForwardReferences(biStart);
    starting_bytecode();
    int code=bcodes.nextInstruction();
switch (code) {
case JBC_nop:
{
        if (shouldPrint)         asm.noteBytecode(biStart,""String_Node_Str"");
        break;
      }
case JBC_aconst_null:
{
      if (shouldPrint)       asm.noteBytecode(biStart,""String_Node_Str"");
      emit_aconst_null();
      break;
    }
case JBC_iconst_m1:
{
    if (shouldPrint)     asm.noteBytecode(biStart,""String_Node_Str"");
    emit_iconst(-1);
    break;
  }
case JBC_iconst_0:
{
  if (shouldPrint)   asm.noteBytecode(biStart,""String_Node_Str"");
  emit_iconst(0);
  break;
}
case JBC_iconst_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iconst(1);
break;
}
case JBC_iconst_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iconst(2);
break;
}
case JBC_iconst_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iconst(3);
break;
}
case JBC_iconst_4:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iconst(4);
break;
}
case JBC_iconst_5:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iconst(5);
break;
}
case JBC_lconst_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lconst(0);
break;
}
case JBC_lconst_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lconst(1);
break;
}
case JBC_fconst_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fconst_0();
break;
}
case JBC_fconst_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fconst_1();
break;
}
case JBC_fconst_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fconst_2();
break;
}
case JBC_dconst_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dconst_0();
break;
}
case JBC_dconst_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dconst_1();
break;
}
case JBC_bipush:
{
int val=bcodes.getByteValue();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",val);
emit_iconst(val);
break;
}
case JBC_sipush:
{
int val=bcodes.getShortValue();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",val);
emit_iconst(val);
break;
}
case JBC_ldc:
{
int index=bcodes.getConstantIndex();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
Offset offset=klass.getLiteralOffset(index);
byte type=klass.getLiteralDescription(index);
emit_ldc(offset,type);
break;
}
case JBC_ldc_w:
{
int index=bcodes.getWideConstantIndex();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
Offset offset=klass.getLiteralOffset(index);
byte type=klass.getLiteralDescription(index);
emit_ldc(offset,type);
break;
}
case JBC_ldc2_w:
{
int index=bcodes.getWideConstantIndex();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
Offset offset=klass.getLiteralOffset(index);
byte type=klass.getLiteralDescription(index);
emit_ldc2(offset,type);
break;
}
case JBC_iload:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_iload(index);
break;
}
case JBC_lload:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_lload(index);
break;
}
case JBC_fload:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_fload(index);
break;
}
case JBC_dload:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_dload(index);
break;
}
case JBC_aload:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_aload(index);
break;
}
case JBC_iload_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iload(0);
break;
}
case JBC_iload_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iload(1);
break;
}
case JBC_iload_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iload(2);
break;
}
case JBC_iload_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iload(3);
break;
}
case JBC_lload_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lload(0);
break;
}
case JBC_lload_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lload(1);
break;
}
case JBC_lload_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lload(2);
break;
}
case JBC_lload_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lload(3);
break;
}
case JBC_fload_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fload(0);
break;
}
case JBC_fload_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fload(1);
break;
}
case JBC_fload_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fload(2);
break;
}
case JBC_fload_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fload(3);
break;
}
case JBC_dload_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dload(0);
break;
}
case JBC_dload_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dload(1);
break;
}
case JBC_dload_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dload(2);
break;
}
case JBC_dload_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dload(3);
break;
}
case JBC_aload_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_aload(0);
break;
}
case JBC_aload_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_aload(1);
break;
}
case JBC_aload_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_aload(2);
break;
}
case JBC_aload_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_aload(3);
break;
}
case JBC_iaload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iaload();
break;
}
case JBC_laload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_laload();
break;
}
case JBC_faload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_faload();
break;
}
case JBC_daload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_daload();
break;
}
case JBC_aaload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_aaload();
break;
}
case JBC_baload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_baload();
break;
}
case JBC_caload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_caload();
break;
}
case JBC_saload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_saload();
break;
}
case JBC_istore:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_istore(index);
break;
}
case JBC_lstore:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_lstore(index);
break;
}
case JBC_fstore:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_fstore(index);
break;
}
case JBC_dstore:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_dstore(index);
break;
}
case JBC_astore:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_astore(index);
break;
}
case JBC_istore_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_istore(0);
break;
}
case JBC_istore_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_istore(1);
break;
}
case JBC_istore_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_istore(2);
break;
}
case JBC_istore_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_istore(3);
break;
}
case JBC_lstore_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lstore(0);
break;
}
case JBC_lstore_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lstore(1);
break;
}
case JBC_lstore_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lstore(2);
break;
}
case JBC_lstore_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lstore(3);
break;
}
case JBC_fstore_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fstore(0);
break;
}
case JBC_fstore_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fstore(1);
break;
}
case JBC_fstore_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fstore(2);
break;
}
case JBC_fstore_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fstore(3);
break;
}
case JBC_dstore_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dstore(0);
break;
}
case JBC_dstore_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dstore(1);
break;
}
case JBC_dstore_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dstore(2);
break;
}
case JBC_dstore_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dstore(3);
break;
}
case JBC_astore_0:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_astore(0);
break;
}
case JBC_astore_1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_astore(1);
break;
}
case JBC_astore_2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_astore(2);
break;
}
case JBC_astore_3:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_astore(3);
break;
}
case JBC_iastore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iastore();
break;
}
case JBC_lastore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lastore();
break;
}
case JBC_fastore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fastore();
break;
}
case JBC_dastore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dastore();
break;
}
case JBC_aastore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.VerifyUnint && isUninterruptible && doesCheckStore) forbiddenBytecode(""String_Node_Str"",bcodes.index());
emit_aastore();
break;
}
case JBC_bastore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_bastore();
break;
}
case JBC_castore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_castore();
break;
}
case JBC_sastore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_sastore();
break;
}
case JBC_pop:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_pop();
break;
}
case JBC_pop2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_pop2();
break;
}
case JBC_dup:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dup();
break;
}
case JBC_dup_x1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dup_x1();
break;
}
case JBC_dup_x2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dup_x2();
break;
}
case JBC_dup2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dup2();
break;
}
case JBC_dup2_x1:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dup2_x1();
break;
}
case JBC_dup2_x2:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dup2_x2();
break;
}
case JBC_swap:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_swap();
break;
}
case JBC_iadd:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iadd();
break;
}
case JBC_ladd:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ladd();
break;
}
case JBC_fadd:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fadd();
break;
}
case JBC_dadd:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dadd();
break;
}
case JBC_isub:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_isub();
break;
}
case JBC_lsub:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lsub();
break;
}
case JBC_fsub:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fsub();
break;
}
case JBC_dsub:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dsub();
break;
}
case JBC_imul:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_imul();
break;
}
case JBC_lmul:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lmul();
break;
}
case JBC_fmul:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fmul();
break;
}
case JBC_dmul:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dmul();
break;
}
case JBC_idiv:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_idiv();
break;
}
case JBC_ldiv:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ldiv();
break;
}
case JBC_fdiv:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fdiv();
break;
}
case JBC_ddiv:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ddiv();
break;
}
case JBC_irem:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_irem();
break;
}
case JBC_lrem:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lrem();
break;
}
case JBC_frem:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_frem();
break;
}
case JBC_drem:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_drem();
break;
}
case JBC_ineg:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ineg();
break;
}
case JBC_lneg:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lneg();
break;
}
case JBC_fneg:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fneg();
break;
}
case JBC_dneg:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dneg();
break;
}
case JBC_ishl:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ishl();
break;
}
case JBC_lshl:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lshl();
break;
}
case JBC_ishr:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ishr();
break;
}
case JBC_lshr:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lshr();
break;
}
case JBC_iushr:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iushr();
break;
}
case JBC_lushr:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lushr();
break;
}
case JBC_iand:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_iand();
break;
}
case JBC_land:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_land();
break;
}
case JBC_ior:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ior();
break;
}
case JBC_lor:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lor();
break;
}
case JBC_ixor:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_ixor();
break;
}
case JBC_lxor:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lxor();
break;
}
case JBC_iinc:
{
int index=bcodes.getLocalNumber();
int val=bcodes.getIncrement();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index,val);
emit_iinc(index,val);
break;
}
case JBC_i2l:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_i2l();
break;
}
case JBC_i2f:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_i2f();
break;
}
case JBC_i2d:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_i2d();
break;
}
case JBC_l2i:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_l2i();
break;
}
case JBC_l2f:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_l2f();
break;
}
case JBC_l2d:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_l2d();
break;
}
case JBC_f2i:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_f2i();
break;
}
case JBC_f2l:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_f2l();
break;
}
case JBC_f2d:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_f2d();
break;
}
case JBC_d2i:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_d2i();
break;
}
case JBC_d2l:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_d2l();
break;
}
case JBC_d2f:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_d2f();
break;
}
case JBC_int2byte:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_i2b();
break;
}
case JBC_int2char:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_i2c();
break;
}
case JBC_int2short:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_i2s();
break;
}
case JBC_lcmp:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_lcmp();
break;
}
case JBC_fcmpl:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fcmpl();
break;
}
case JBC_fcmpg:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_fcmpg();
break;
}
case JBC_dcmpl:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dcmpl();
break;
}
case JBC_dcmpg:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_dcmpg();
break;
}
case JBC_ifeq:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_ifeq(bTarget);
break;
}
case JBC_ifne:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_ifne(bTarget);
break;
}
case JBC_iflt:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_iflt(bTarget);
break;
}
case JBC_ifge:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_ifge(bTarget);
break;
}
case JBC_ifgt:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_ifgt(bTarget);
break;
}
case JBC_ifle:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_ifle(bTarget);
break;
}
case JBC_if_icmpeq:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_icmpeq(bTarget);
break;
}
case JBC_if_icmpne:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_icmpne(bTarget);
break;
}
case JBC_if_icmplt:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_icmplt(bTarget);
break;
}
case JBC_if_icmpge:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_icmpge(bTarget);
break;
}
case JBC_if_icmpgt:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_icmpgt(bTarget);
break;
}
case JBC_if_icmple:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_icmple(bTarget);
break;
}
case JBC_if_acmpeq:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_acmpeq(bTarget);
break;
}
case JBC_if_acmpne:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_if_acmpne(bTarget);
break;
}
case JBC_goto:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_goto(bTarget);
break;
}
case JBC_jsr:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
emit_jsr(bTarget);
break;
}
case JBC_ret:
{
int index=bcodes.getLocalNumber();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_ret(index);
break;
}
case JBC_tableswitch:
{
bcodes.alignSwitch();
int defaultval=bcodes.getDefaultSwitchOffset();
int low=bcodes.getLowSwitchValue();
int high=bcodes.getHighSwitchValue();
if (shouldPrint) asm.noteTableswitchBytecode(biStart,low,high,defaultval);
emit_tableswitch(defaultval,low,high);
break;
}
case JBC_lookupswitch:
{
bcodes.alignSwitch();
int defaultval=bcodes.getDefaultSwitchOffset();
int npairs=bcodes.getSwitchLength();
if (shouldPrint) asm.noteLookupswitchBytecode(biStart,npairs,defaultval);
emit_lookupswitch(defaultval,npairs);
break;
}
case JBC_ireturn:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.UseEpilogueYieldPoints) emit_threadSwitchTest(RVMThread.EPILOGUE);
emit_ireturn();
break;
}
case JBC_lreturn:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.UseEpilogueYieldPoints) emit_threadSwitchTest(RVMThread.EPILOGUE);
emit_lreturn();
break;
}
case JBC_freturn:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.UseEpilogueYieldPoints) emit_threadSwitchTest(RVMThread.EPILOGUE);
emit_freturn();
break;
}
case JBC_dreturn:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.UseEpilogueYieldPoints) emit_threadSwitchTest(RVMThread.EPILOGUE);
emit_dreturn();
break;
}
case JBC_areturn:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.UseEpilogueYieldPoints) emit_threadSwitchTest(RVMThread.EPILOGUE);
emit_areturn();
break;
}
case JBC_return:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.UseEpilogueYieldPoints) emit_threadSwitchTest(RVMThread.EPILOGUE);
emit_return();
break;
}
case JBC_getstatic:
{
FieldReference fieldRef=bcodes.getFieldReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",fieldRef);
if (fieldRef.needsDynamicLink(method)) {
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",fieldRef,bcodes.index());
emit_unresolved_getstatic(fieldRef);
}
 else {
emit_resolved_getstatic(fieldRef);
}
break;
}
case JBC_putstatic:
{
FieldReference fieldRef=bcodes.getFieldReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",fieldRef);
if (fieldRef.needsDynamicLink(method)) {
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",fieldRef,bcodes.index());
emit_unresolved_putstatic(fieldRef);
}
 else {
emit_resolved_putstatic(fieldRef);
}
break;
}
case JBC_getfield:
{
FieldReference fieldRef=bcodes.getFieldReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",fieldRef);
if (fieldRef.needsDynamicLink(method)) {
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",fieldRef,bcodes.index());
emit_unresolved_getfield(fieldRef);
}
 else {
emit_resolved_getfield(fieldRef);
}
break;
}
case JBC_putfield:
{
FieldReference fieldRef=bcodes.getFieldReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",fieldRef);
if (fieldRef.needsDynamicLink(method)) {
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",fieldRef,bcodes.index());
emit_unresolved_putfield(fieldRef);
}
 else {
emit_resolved_putfield(fieldRef);
}
break;
}
case JBC_invokevirtual:
{
ForwardReference xx=null;
if (biStart == this.pendingIdx) {
ForwardReference x=emit_pending_goto(0);
this.pendingRef.resolve(asm);
CompiledMethod cm=CompiledMethods.getCompiledMethod(this.pendingCMID);
if (VM.VerifyAssertions) VM._assert(cm.isSpecialForOSR());
emit_invoke_compiledmethod(cm);
xx=emit_pending_goto(0);
x.resolve(asm);
}
MethodReference methodRef=bcodes.getMethodReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",methodRef);
if (methodRef.getType().isMagicType()) {
if (emit_Magic(methodRef)) {
break;
}
}
if (methodRef.isMiranda()) {
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",methodRef);
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",methodRef,bcodes.index());
emit_invokeinterface(methodRef);
}
 else {
if (methodRef.needsDynamicLink(method)) {
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",methodRef,bcodes.index());
emit_unresolved_invokevirtual(methodRef);
}
 else {
if (VM.VerifyUnint && !isInterruptible) checkTarget(methodRef.peekResolvedMethod(),bcodes.index());
emit_resolved_invokevirtual(methodRef);
}
}
if (xx != null) {
xx.resolve(asm);
}
break;
}
case JBC_invokespecial:
{
ForwardReference xx=null;
if (biStart == this.pendingIdx) {
ForwardReference x=emit_pending_goto(0);
this.pendingRef.resolve(asm);
CompiledMethod cm=CompiledMethods.getCompiledMethod(this.pendingCMID);
if (VM.VerifyAssertions) VM._assert(cm.isSpecialForOSR());
emit_invoke_compiledmethod(cm);
xx=emit_pending_goto(0);
x.resolve(asm);
}
MethodReference methodRef=bcodes.getMethodReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",methodRef);
RVMMethod target=methodRef.resolveInvokeSpecial();
if (target != null) {
if (VM.VerifyUnint && !isInterruptible) checkTarget(target,bcodes.index());
emit_resolved_invokespecial(methodRef,target);
}
 else {
emit_unresolved_invokespecial(methodRef);
}
if (xx != null) {
xx.resolve(asm);
}
break;
}
case JBC_invokestatic:
{
ForwardReference xx=null;
if (biStart == this.pendingIdx) {
ForwardReference x=emit_pending_goto(0);
this.pendingRef.resolve(asm);
CompiledMethod cm=CompiledMethods.getCompiledMethod(this.pendingCMID);
if (VM.VerifyAssertions) VM._assert(cm.isSpecialForOSR());
emit_invoke_compiledmethod(cm);
xx=emit_pending_goto(0);
x.resolve(asm);
}
MethodReference methodRef=bcodes.getMethodReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",methodRef);
if (methodRef.isMagic()) {
if (emit_Magic(methodRef)) {
break;
}
}
if (methodRef.needsDynamicLink(method)) {
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",methodRef,bcodes.index());
emit_unresolved_invokestatic(methodRef);
}
 else {
if (VM.VerifyUnint && !isInterruptible) checkTarget(methodRef.peekResolvedMethod(),bcodes.index());
emit_resolved_invokestatic(methodRef);
}
if (xx != null) {
xx.resolve(asm);
}
break;
}
case JBC_invokeinterface:
{
ForwardReference xx=null;
if (biStart == this.pendingIdx) {
ForwardReference x=emit_pending_goto(0);
this.pendingRef.resolve(asm);
CompiledMethod cm=CompiledMethods.getCompiledMethod(this.pendingCMID);
if (VM.VerifyAssertions) VM._assert(cm.isSpecialForOSR());
emit_invoke_compiledmethod(cm);
xx=emit_pending_goto(0);
x.resolve(asm);
}
MethodReference methodRef=bcodes.getMethodReference();
bcodes.alignInvokeInterface();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",methodRef);
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",methodRef,bcodes.index());
emit_invokeinterface(methodRef);
if (xx != null) {
xx.resolve(asm);
}
break;
}
case JBC_xxxunusedxxx:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);
break;
}
case JBC_new:
{
TypeReference typeRef=bcodes.getTypeReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",typeRef);
if (VM.VerifyUnint && isUninterruptible) forbiddenBytecode(""String_Node_Str"",typeRef,bcodes.index());
RVMType type=typeRef.peekType();
if (type != null && (type.isInitialized() || type.isInBootImage())) {
emit_resolved_new(type.asClass());
}
 else {
if (VM.VerifyUnint && isUnpreemptible) forbiddenBytecode(""String_Node_Str"",typeRef,bcodes.index());
emit_unresolved_new(typeRef);
}
break;
}
case JBC_newarray:
{
int atype=bcodes.getArrayElementType();
RVMArray array=RVMArray.getPrimitiveArrayType(atype);
if (VM.VerifyAssertions) VM._assert(array.isResolved());
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",array.getTypeRef());
if (VM.VerifyUnint && isUninterruptible) forbiddenBytecode(""String_Node_Str"",array,bcodes.index());
emit_resolved_newarray(array);
break;
}
case JBC_anewarray:
{
TypeReference elementTypeRef=bcodes.getTypeReference();
TypeReference arrayRef=elementTypeRef.getArrayTypeForElementType();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",arrayRef);
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",arrayRef,bcodes.index());
if (VM.VerifyAssertions && elementTypeRef.isUnboxedType()) {
VM._assert(false,""String_Node_Str"" + method + ""String_Node_Str""+ elementTypeRef+ ""String_Node_Str""+ ""String_Node_Str"");
}
RVMArray array=(RVMArray)arrayRef.peekType();
if (array != null && !(array.isInitialized() || array.isInBootImage()) && RVMType.JavaLangObjectType.isInstantiated()) {
RVMType elementType=elementTypeRef.peekType();
if (elementType != null && (elementType.isInitialized() || elementType.isInBootImage())) {
array.resolve();
array.instantiate();
}
}
if (array != null && (array.isInitialized() || array.isInBootImage())) {
emit_resolved_newarray(array);
}
 else {
emit_unresolved_newarray(arrayRef);
}
break;
}
case JBC_arraylength:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_arraylength();
break;
}
case JBC_athrow:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.UseEpilogueYieldPoints) emit_threadSwitchTest(RVMThread.EPILOGUE);
if (VM.VerifyUnint && isUninterruptible) forbiddenBytecode(""String_Node_Str"",bcodes.index());
emit_athrow();
break;
}
case JBC_checkcast:
{
TypeReference typeRef=bcodes.getTypeReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",typeRef);
RVMType type=typeRef.peekType();
if (type != null) {
if (type.isClassType()) {
RVMClass cType=type.asClass();
if (cType.isFinal()) {
emit_checkcast_final(cType);
break;
}
 else if (cType.isResolved()) {
if (cType.isInterface()) {
emit_checkcast_resolvedInterface(cType);
}
 else {
emit_checkcast_resolvedClass(cType);
}
break;
}
}
 else if (type.isArrayType()) {
RVMType elemType=type.asArray().getElementType();
if (elemType.isPrimitiveType() || elemType.isUnboxedType() || (elemType.isClassType() && elemType.asClass().isFinal())) {
emit_checkcast_final(type);
break;
}
}
 else {
if (VM.VerifyAssertions) VM._assert(type.getTypeRef().isUnboxedType());
break;
}
}
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",typeRef,bcodes.index());
emit_checkcast(typeRef);
break;
}
case JBC_instanceof:
{
TypeReference typeRef=bcodes.getTypeReference();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",typeRef);
RVMType type=typeRef.peekType();
if (type != null) {
if (type.isClassType()) {
RVMClass cType=type.asClass();
if (cType.isFinal()) {
emit_instanceof_final(type);
break;
}
 else if (cType.isResolved()) {
if (cType.isInterface()) {
emit_instanceof_resolvedInterface(cType);
}
 else {
emit_instanceof_resolvedClass(cType);
}
break;
}
}
 else if (type.isArrayType()) {
RVMType elemType=type.asArray().getElementType();
if (elemType.isPrimitiveType() || elemType.isUnboxedType() || (elemType.isClassType() && elemType.asClass().isFinal())) {
emit_instanceof_final(type);
break;
}
}
}
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",typeRef,bcodes.index());
emit_instanceof(typeRef);
break;
}
case JBC_monitorenter:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.VerifyUnint && isUninterruptible) forbiddenBytecode(""String_Node_Str"",bcodes.index());
emit_monitorenter();
break;
}
case JBC_monitorexit:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
if (VM.VerifyUnint && isUninterruptible) forbiddenBytecode(""String_Node_Str"",bcodes.index());
emit_monitorexit();
break;
}
case JBC_wide:
{
int widecode=bcodes.getWideOpcode();
int index=bcodes.getWideLocalNumber();
switch (widecode) {
case JBC_iload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_iload(index);
break;
}
case JBC_lload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_lload(index);
break;
}
case JBC_fload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_fload(index);
break;
}
case JBC_dload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_dload(index);
break;
}
case JBC_aload:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_aload(index);
break;
}
case JBC_istore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_istore(index);
break;
}
case JBC_lstore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_lstore(index);
break;
}
case JBC_fstore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_fstore(index);
break;
}
case JBC_dstore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_dstore(index);
break;
}
case JBC_astore:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_astore(index);
break;
}
case JBC_iinc:
{
int val=bcodes.getWideIncrement();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index,val);
emit_iinc(index,val);
break;
}
case JBC_ret:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",index);
emit_ret(index);
break;
}
default :
if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);
}
break;
}
case JBC_multianewarray:
{
TypeReference typeRef=bcodes.getTypeReference();
int dimensions=bcodes.getArrayDimension();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",typeRef);
if (VM.VerifyUnint && !isInterruptible) forbiddenBytecode(""String_Node_Str"",bcodes.index());
emit_multianewarray(typeRef,dimensions);
break;
}
case JBC_ifnull:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_ifnull(bTarget);
break;
}
case JBC_ifnonnull:
{
int offset=bcodes.getBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_ifnonnull(bTarget);
break;
}
case JBC_goto_w:
{
int offset=bcodes.getWideBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
if (offset <= 0) emit_threadSwitchTest(RVMThread.BACKEDGE);
emit_goto(bTarget);
break;
}
case JBC_jsr_w:
{
int offset=bcodes.getWideBranchOffset();
int bTarget=biStart + offset;
if (shouldPrint) asm.noteBranchBytecode(biStart,""String_Node_Str"",offset,bTarget);
emit_jsr(bTarget);
break;
}
case JBC_impdep1:
{
if (VM.BuildForAdaptiveSystem) {
int pseudo_opcode=bcodes.nextPseudoInstruction();
switch (pseudo_opcode) {
case org.jikesrvm.osr.OSRConstants.PSEUDO_LoadIntConst:
{
int value=bcodes.readIntConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",value);
Offset offset=Offset.fromIntSignExtend(Statics.findOrCreateIntSizeLiteral(value));
emit_ldc(offset,CP_INT);
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_LoadLongConst:
{
long value=bcodes.readLongConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",value);
Offset offset=Offset.fromIntSignExtend(Statics.findOrCreateLongSizeLiteral(value));
emit_ldc2(offset,CP_LONG);
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_LoadWordConst:
{
if (VM.BuildFor32Addr) {
int value=bcodes.readIntConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"" + Integer.toHexString(value));
Offset offset=Offset.fromIntSignExtend(Statics.findOrCreateIntSizeLiteral(value));
emit_ldc(offset,CP_INT);
}
 else {
long value=bcodes.readLongConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"" + Long.toHexString(value));
Offset offset=Offset.fromIntSignExtend(Statics.findOrCreateLongSizeLiteral(value));
emit_ldc2(offset,CP_LONG);
emit_l2i();
}
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_LoadFloatConst:
{
int ibits=bcodes.readIntConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",ibits);
Offset offset=Offset.fromIntSignExtend(Statics.findOrCreateIntSizeLiteral(ibits));
emit_ldc(offset,CP_FLOAT);
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_LoadDoubleConst:
{
long lbits=bcodes.readLongConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",lbits);
Offset offset=Offset.fromIntSignExtend(Statics.findOrCreateLongSizeLiteral(lbits));
emit_ldc2(offset,CP_DOUBLE);
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_LoadRetAddrConst:
{
int bcIndex=bcodes.readIntConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",bcIndex);
emit_loadretaddrconst(bcIndex);
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_InvokeStatic:
{
int targetidx=bcodes.readIntConst();
RVMMethod methodRef=InvokeStatic.targetMethod(targetidx);
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",methodRef);
emit_resolved_invokestatic(methodRef.getMemberRef().asMethodReference());
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_InvokeCompiledMethod:
{
int cmid=bcodes.readIntConst();
int origIdx=bcodes.readIntConst();
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"",cmid);
this.pendingCMID=cmid;
this.pendingIdx=origIdx + this.method.getOsrPrologueLength();
this.pendingRef=emit_pending_goto(this.pendingIdx);
break;
}
case org.jikesrvm.osr.OSRConstants.PSEUDO_ParamInitEnd:
{
if (shouldPrint) asm.noteBytecode(biStart,""String_Node_Str"");
emit_deferred_prologue();
break;
}
default :
if (VM.TraceOnStackReplacement) {
VM.sysWrite(""String_Node_Str"" + VM.intAsHexString(pseudo_opcode) + ""String_Node_Str"");
}
if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);
break;
}
}
 else {
if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);
}
break;
}
default :
VM.sysWrite(""String_Node_Str"" + Services.getHexString(code,false) + ""String_Node_Str"");
if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);
}
ending_bytecode();
}
bytecodeMap[bcodes.length()]=asm.getMachineCodeIndex();
return asm.finalizeMachineCode(bytecodeMap);
}",0.9985841781912876
149763,"/** 
 * The main stack scanning loop.<p> Walk the stack one frame at a time, top (lo) to bottom (hi),<p>
 * @param gprs The general purpose registers associated with thestack being scanned (normally extracted from the thread).
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void scanThreadInternal(Address gprs,int verbosity){
  if (false) {
    VM.sysWriteln(""String_Node_Str"",thread.getThreadSlot(),""String_Node_Str"",RVMThread.getCurrentThreadSlot());
  }
  if (verbosity >= 1) {
    Log.writeln(""String_Node_Str"");
    Log.write(""String_Node_Str"");
    Log.writeln(thread.getThreadSlot());
  }
  if (VM.VerifyAssertions)   assertImmovableInCurrentCollection();
  getHWExceptionRegisters();
  iteratorGroup.newStackWalk(thread,gprs);
  if (verbosity >= 1)   dumpTopFrameInfo(verbosity);
  if (fp.NE(ArchitectureSpecific.StackframeLayoutConstants.STACKFRAME_SENTINEL_FP)) {
    prevFp=Address.zero();
    while (Magic.getCallerFramePointer(fp).NE(ArchitectureSpecific.StackframeLayoutConstants.STACKFRAME_SENTINEL_FP)) {
      if (false) {
        VM.sysWriteln(""String_Node_Str"",RVMThread.getCurrentThreadSlot(),""String_Node_Str"",fp);
      }
      prevFp=scanFrame(verbosity);
      ip=Magic.getReturnAddress(fp);
      fp=Magic.getCallerFramePointer(fp);
    }
  }
  checkJNIBase();
  if (verbosity >= 1)   Log.writeln(""String_Node_Str"");
}","/** 
 * The main stack scanning loop.<p> Walk the stack one frame at a time, top (lo) to bottom (hi),<p>
 * @param gprs The general purpose registers associated with thestack being scanned (normally extracted from the thread).
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void scanThreadInternal(Address gprs,int verbosity){
  if (false) {
    VM.sysWriteln(""String_Node_Str"",thread.getThreadSlot(),""String_Node_Str"",RVMThread.getCurrentThreadSlot());
  }
  if (verbosity >= 2) {
    Log.writeln(""String_Node_Str"");
    Log.write(""String_Node_Str"");
    Log.writeln(thread.getThreadSlot());
  }
  if (VM.VerifyAssertions)   assertImmovableInCurrentCollection();
  getHWExceptionRegisters();
  iteratorGroup.newStackWalk(thread,gprs);
  if (verbosity >= 2)   dumpTopFrameInfo(verbosity);
  if (fp.NE(ArchitectureSpecific.StackframeLayoutConstants.STACKFRAME_SENTINEL_FP)) {
    prevFp=Address.zero();
    while (Magic.getCallerFramePointer(fp).NE(ArchitectureSpecific.StackframeLayoutConstants.STACKFRAME_SENTINEL_FP)) {
      if (false) {
        VM.sysWriteln(""String_Node_Str"",RVMThread.getCurrentThreadSlot(),""String_Node_Str"",fp);
      }
      prevFp=scanFrame(verbosity);
      ip=Magic.getReturnAddress(fp);
      fp=Magic.getCallerFramePointer(fp);
    }
  }
  checkJNIBase();
  if (verbosity >= 2)   Log.writeln(""String_Node_Str"");
}",0.9978386167146974
149764,"/** 
 * Scan the current stack frame.<p> First the various iterators are set up, then the frame is scanned for regular pointers, before scanning for code pointers.  The iterators are then cleaned up, and native frames skipped if necessary.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private Address scanFrame(int verbosity){
  if (!setUpFrame(verbosity))   return fp;
  scanFrameForObjects(verbosity);
  if (processCodeLocations && compiledMethodType != CompiledMethod.TRAP)   processFrameForCode(verbosity);
  iterator.cleanupPointers();
  if (compiledMethodType != CompiledMethod.TRAP && compiledMethod.getMethod().getDeclaringClass().hasBridgeFromNativeAnnotation()) {
    fp=RuntimeEntrypoints.unwindNativeStackFrameForGC(fp);
    if (verbosity >= 1)     Log.write(""String_Node_Str"");
  }
  return fp;
}","/** 
 * Scan the current stack frame.<p> First the various iterators are set up, then the frame is scanned for regular pointers, before scanning for code pointers.  The iterators are then cleaned up, and native frames skipped if necessary.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private Address scanFrame(int verbosity){
  if (!setUpFrame(verbosity))   return fp;
  scanFrameForObjects(verbosity);
  if (processCodeLocations && compiledMethodType != CompiledMethod.TRAP)   processFrameForCode(verbosity);
  iterator.cleanupPointers();
  if (compiledMethodType != CompiledMethod.TRAP && compiledMethod.getMethod().getDeclaringClass().hasBridgeFromNativeAnnotation()) {
    fp=RuntimeEntrypoints.unwindNativeStackFrameForGC(fp);
    if (verbosity >= 2)     Log.write(""String_Node_Str"");
  }
  return fp;
}",0.998819362455726
149765,"/** 
 * Identify all the object pointers stored as local variables associated with (though not necessarily strictly within!) the current frame.  Loop through the GC map iterator, getting the address of each object pointer, adding them to the root locations deque.<p> NOTE: Because of the callee save policy of the optimizing compiler, references associated with a given frame may be in callee stack frames (lower memory), <i>outside</i> the current frame.  So the iterator may return locations that are outside the frame being scanned.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void scanFrameForObjects(int verbosity){
  for (Address refaddr=iterator.getNextReferenceAddress(); !refaddr.isZero(); refaddr=iterator.getNextReferenceAddress()) {
    if (VALIDATE_REFS)     checkReference(refaddr,verbosity);
    if (verbosity >= 3)     dumpRef(refaddr,verbosity);
    reportDelayedRootEdge(trace,refaddr);
  }
}","/** 
 * Identify all the object pointers stored as local variables associated with (though not necessarily strictly within!) the current frame.  Loop through the GC map iterator, getting the address of each object pointer, adding them to the root locations deque.<p> NOTE: Because of the callee save policy of the optimizing compiler, references associated with a given frame may be in callee stack frames (lower memory), <i>outside</i> the current frame.  So the iterator may return locations that are outside the frame being scanned.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void scanFrameForObjects(int verbosity){
  for (Address refaddr=iterator.getNextReferenceAddress(); !refaddr.isZero(); refaddr=iterator.getNextReferenceAddress()) {
    if (VALIDATE_REFS)     checkReference(refaddr,verbosity);
    if (verbosity >= 4)     dumpRef(refaddr,verbosity);
    reportDelayedRootEdge(trace,refaddr);
  }
}",0.9989550679205852
149766,"/** 
 * Push the instruction pointer associated with this frame onto the code locations deque.<p> A stack frame represents an execution context, and thus has an instruction pointer associated with it.  In the case of the top frame, the instruction pointer is captured by the IP register, which is preserved in the thread data structure at thread switch time.  In the case of all non-top frames, the next instruction pointer is stored as the return address for the <i>previous</i> frame.<p> The address of the code pointer is pushed onto the code locations deque along with the address of the code object into which it points (both are required since the former is an internal pointer).<p> The code pointers are updated later (after stack scanning) when the code locations deque is processed. The pointer from RVMMethod to the code object is not updated until after stack scanning, so the pointer to the (uncopied) code object is available throughout the stack scanning process, which enables interior pointer offsets to be correctly computed.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void pushFrameIP(ObjectReference code,int verbosity){
  if (prevFp.isZero()) {
    if (verbosity >= 2) {
      Log.write(""String_Node_Str"");
      Log.writeln(thread.getContextRegisters().ip);
      Log.write(""String_Node_Str"");
      Log.writeln(thread.getContextRegisters().getIPLocation().loadAddress());
    }
    if (compiledMethodType != CompiledMethod.JNI)     processCodeLocation(code,initialIPLoc);
 else     if (verbosity >= 3) {
      Log.writeln(""String_Node_Str"");
    }
  }
 else {
    Address returnAddressLoc=Magic.getReturnAddressLocation(prevFp);
    Address returnAddress=returnAddressLoc.loadAddress();
    if (verbosity >= 3) {
      Log.write(""String_Node_Str"");
      Log.write(returnAddress);
      Log.write(""String_Node_Str"");
      Log.writeln(returnAddressLoc);
    }
    if (!DebugUtil.addrInBootImage(returnAddress))     processCodeLocation(code,returnAddressLoc);
  }
}","/** 
 * Push the instruction pointer associated with this frame onto the code locations deque.<p> A stack frame represents an execution context, and thus has an instruction pointer associated with it.  In the case of the top frame, the instruction pointer is captured by the IP register, which is preserved in the thread data structure at thread switch time.  In the case of all non-top frames, the next instruction pointer is stored as the return address for the <i>previous</i> frame.<p> The address of the code pointer is pushed onto the code locations deque along with the address of the code object into which it points (both are required since the former is an internal pointer).<p> The code pointers are updated later (after stack scanning) when the code locations deque is processed. The pointer from RVMMethod to the code object is not updated until after stack scanning, so the pointer to the (uncopied) code object is available throughout the stack scanning process, which enables interior pointer offsets to be correctly computed.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void pushFrameIP(ObjectReference code,int verbosity){
  if (prevFp.isZero()) {
    if (verbosity >= 3) {
      Log.write(""String_Node_Str"");
      Log.writeln(thread.getContextRegisters().ip);
      Log.write(""String_Node_Str"");
      Log.writeln(thread.getContextRegisters().getIPLocation().loadAddress());
    }
    if (compiledMethodType != CompiledMethod.JNI)     processCodeLocation(code,initialIPLoc);
 else     if (verbosity >= 4) {
      Log.writeln(""String_Node_Str"");
    }
  }
 else {
    Address returnAddressLoc=Magic.getReturnAddressLocation(prevFp);
    Address returnAddress=returnAddressLoc.loadAddress();
    if (verbosity >= 4) {
      Log.write(""String_Node_Str"");
      Log.write(returnAddress);
      Log.write(""String_Node_Str"");
      Log.writeln(returnAddressLoc);
    }
    if (!DebugUtil.addrInBootImage(returnAddress))     processCodeLocation(code,returnAddressLoc);
  }
}",0.9985250737463128
149767,"/** 
 * Dump the contents of a stack frame. Attempts to interpret each word as an object reference
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void dumpStackFrame(int verbosity){
  Address start, end;
  if (VM.BuildForIA32) {
    if (prevFp.isZero()) {
      start=fp.minus(20 * BYTES_IN_ADDRESS);
      Log.writeln(""String_Node_Str"",fp);
    }
 else {
      start=prevFp;
    }
    end=fp;
  }
 else {
    start=fp;
    end=fp.loadAddress();
  }
  for (Address loc=start; loc.LT(end); loc=loc.plus(BYTES_IN_ADDRESS)) {
    Log.write(loc);
    Log.write(""String_Node_Str"");
    Log.write(loc.diff(start));
    Log.write(""String_Node_Str"");
    ObjectReference value=Selected.Plan.get().loadObjectReference(loc);
    Log.write(value);
    Log.write(""String_Node_Str"");
    Log.flush();
    if (verbosity >= 3 && MemoryManager.objectInVM(value) && loc.NE(start) && loc.NE(end))     MemoryManager.dumpRef(value);
 else     Log.writeln();
  }
  Log.writeln();
}","/** 
 * Dump the contents of a stack frame. Attempts to interpret each word as an object reference
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void dumpStackFrame(int verbosity){
  Address start, end;
  if (VM.BuildForIA32) {
    if (prevFp.isZero()) {
      start=fp.minus(20 * BYTES_IN_ADDRESS);
      Log.writeln(""String_Node_Str"",fp);
    }
 else {
      start=prevFp;
    }
    end=fp;
  }
 else {
    start=fp;
    end=fp.loadAddress();
  }
  for (Address loc=start; loc.LT(end); loc=loc.plus(BYTES_IN_ADDRESS)) {
    Log.write(loc);
    Log.write(""String_Node_Str"");
    Log.write(loc.diff(start));
    Log.write(""String_Node_Str"");
    ObjectReference value=Selected.Plan.get().loadObjectReference(loc);
    Log.write(value);
    Log.write(""String_Node_Str"");
    Log.flush();
    if (verbosity >= 4 && MemoryManager.objectInVM(value) && loc.NE(start) && loc.NE(end))     MemoryManager.dumpRef(value);
 else     Log.writeln();
  }
  Log.writeln();
}",0.999003984063745
149768,"/** 
 * Print out information associated with a reference.
 * @param refaddr The address of the reference in question.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void dumpRef(Address refaddr,int verbosity){
  ObjectReference ref=refaddr.loadObjectReference();
  VM.sysWrite(refaddr);
  if (verbosity >= 4) {
    VM.sysWrite(""String_Node_Str"");
    MemoryManager.dumpRef(ref);
  }
 else   VM.sysWriteln();
}","/** 
 * Print out information associated with a reference.
 * @param refaddr The address of the reference in question.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void dumpRef(Address refaddr,int verbosity){
  ObjectReference ref=refaddr.loadObjectReference();
  VM.sysWrite(refaddr);
  if (verbosity >= 5) {
    VM.sysWrite(""String_Node_Str"");
    MemoryManager.dumpRef(ref);
  }
 else   VM.sysWriteln();
}",0.9977973568281938
149769,"/** 
 * Set up to scan the current stack frame.  This means examining the frame to discover the method being invoked and then retrieving the associated metadata (stack maps etc).  Certain frames should not be scanned---these are identified and skipped.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 * @return True if the frame should be scanned, false if it shouldbe skipped.
 */
private boolean setUpFrame(int verbosity){
  int compiledMethodId=Magic.getCompiledMethodID(fp);
  if (compiledMethodId == ArchitectureSpecific.ArchConstants.INVISIBLE_METHOD_ID) {
    if (verbosity >= 1)     Log.writeln(""String_Node_Str"");
    return false;
  }
  compiledMethod=CompiledMethods.getCompiledMethod(compiledMethodId);
  compiledMethod.setActiveOnStack();
  compiledMethodType=compiledMethod.getCompilerType();
  if (verbosity >= 1)   printMethodHeader();
  Offset offset=compiledMethod.getInstructionOffset(ip);
  iterator=iteratorGroup.selectIterator(compiledMethod);
  iterator.setupIterator(compiledMethod,offset,fp);
  if (verbosity >= 2)   dumpStackFrame(verbosity);
  if (verbosity >= 3)   Log.writeln(""String_Node_Str"");
  return true;
}","/** 
 * Set up to scan the current stack frame.  This means examining the frame to discover the method being invoked and then retrieving the associated metadata (stack maps etc).  Certain frames should not be scanned---these are identified and skipped.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 * @return True if the frame should be scanned, false if it shouldbe skipped.
 */
private boolean setUpFrame(int verbosity){
  int compiledMethodId=Magic.getCompiledMethodID(fp);
  if (compiledMethodId == ArchitectureSpecific.ArchConstants.INVISIBLE_METHOD_ID) {
    if (verbosity >= 2)     Log.writeln(""String_Node_Str"");
    return false;
  }
  compiledMethod=CompiledMethods.getCompiledMethod(compiledMethodId);
  compiledMethod.setActiveOnStack();
  compiledMethodType=compiledMethod.getCompilerType();
  if (verbosity >= 2)   printMethodHeader();
  Offset offset=compiledMethod.getInstructionOffset(ip);
  iterator=iteratorGroup.selectIterator(compiledMethod);
  iterator.setupIterator(compiledMethod,offset,fp);
  if (verbosity >= 3)   dumpStackFrame(verbosity);
  if (verbosity >= 4)   Log.writeln(""String_Node_Str"");
  return true;
}",0.9965899403239556
149770,"/** 
 * Print out the basic information associated with the top frame on the stack.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void dumpTopFrameInfo(int verbosity){
  Log.write(""String_Node_Str"");
  Log.writeln(topFrame);
  Log.write(""String_Node_Str"");
  Log.writeln(ip);
  Log.write(""String_Node_Str"");
  Log.writeln(fp);
  Log.write(""String_Node_Str"");
  Log.writeln(thread.getContextRegisters().ip);
  if (verbosity >= 2 && thread.getJNIEnv() != null)   thread.getJNIEnv().dumpJniRefsStack();
}","/** 
 * Print out the basic information associated with the top frame on the stack.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void dumpTopFrameInfo(int verbosity){
  Log.write(""String_Node_Str"");
  Log.writeln(topFrame);
  Log.write(""String_Node_Str"");
  Log.writeln(ip);
  Log.write(""String_Node_Str"");
  Log.writeln(fp);
  Log.write(""String_Node_Str"");
  Log.writeln(thread.getContextRegisters().ip);
  if (verbosity >= 3 && thread.getJNIEnv() != null)   thread.getJNIEnv().dumpJniRefsStack();
}",0.9981684981684982
149771,"@Override public void run(){
  disableYieldpoints();
  if (verbose >= 1)   trace(""String_Node_Str"",""String_Node_Str"");
  try {
    for (; ; ) {
      sysCall.sysNanosleep(1000L * 1000L * (long)VM.interruptQuantum);
      RVMThread.timerTicks++;
      for (int i=0; i < RVMThread.numThreads; ++i) {
        RVMThread candidate=RVMThread.threads[i];
        if (candidate != null) {
          for (; ; ) {
            Offset offset=Entrypoints.timeSliceExpiredField.getOffset();
            int oldValue=Magic.prepareInt(candidate,offset);
            if (Magic.attemptInt(candidate,offset,oldValue,oldValue + 1)) {
              break;
            }
          }
          candidate.takeYieldpoint=1;
        }
      }
      RVMThread.checkDebugRequest();
    }
  }
 catch (  Throwable e) {
    printExceptionAndDie(e);
  }
}","@Override public void run(){
  disableYieldpoints();
  if (verbose >= 1)   trace(""String_Node_Str"",""String_Node_Str"");
  try {
    for (; ; ) {
      sysCall.sysNanosleep(1000L * 1000L * (long)VM.interruptQuantum);
      RVMThread.acctLock.lock();
      RVMThread.timerTicks++;
      for (int i=0; i < RVMThread.numThreads; ++i) {
        RVMThread candidate=RVMThread.threads[i];
        if (candidate != null) {
          candidate.timeSliceExpired++;
          candidate.takeYieldpoint=1;
        }
      }
      RVMThread.acctLock.unlock();
      RVMThread.checkDebugRequest();
    }
  }
 catch (  Throwable e) {
    printExceptionAndDie(e);
  }
}",0.7761194029850746
149772,"static void compilePutstaticBarrierImm(Assembler asm,Offset fieldOffset,int locationMetadata){
  asm.emitPOP_Reg(S0);
  asm.emitPUSH_Imm(fieldOffset.toInt());
  asm.emitPUSH_Reg(S0);
  asm.emitPUSH_Imm(locationMetadata);
  BaselineCompilerImpl.genParameterRegisterLoad(asm,3);
  asm.emitCALL_Abs(Magic.getTocPointer().plus(Entrypoints.putstaticWriteBarrierMethod.getOffset()));
}","static void compilePutstaticBarrierImm(Assembler asm,Offset fieldOffset,int locationMetadata){
  asm.emitPUSH_Imm(fieldOffset.toInt());
  asm.emitPUSH_Imm(locationMetadata);
  BaselineCompilerImpl.genParameterRegisterLoad(asm,3);
  asm.emitCALL_Abs(Magic.getTocPointer().plus(Entrypoints.putstaticWriteBarrierMethod.getOffset()));
}",0.9338959212376934
149773,"/** 
 * LHSclass is a fully loaded class. Is rhsTIB the TIB of a subclass of LHSclass?
 * @param LHSclass a (fully loaded) class
 * @param rhsTIB the TIB of an object that might be an instance of LHSclass
 * @return <code>true</code> if the object is an instance of LHSClassor <code>false</code> if it is not
 */
@Uninterruptible public static boolean instanceOfClass(RVMClass LHSclass,TIB rhsTIB){
  if (VM.VerifyAssertions) {
    VM._assert(rhsTIB != null);
    VM._assert(rhsTIB.getSuperclassIds() != null);
  }
  short[] superclassIds=Magic.objectAsShortArray(rhsTIB.getSuperclassIds());
  int LHSDepth=LHSclass.getTypeDepth();
  if (LHSDepth >= superclassIds.length)   return false;
  int LHSId=LHSclass.getId();
  return superclassIds[LHSDepth] == LHSId;
}","/** 
 * LHSclass is a fully loaded class. Is rhsTIB the TIB of a subclass of LHSclass?
 * @param LHSclass a (fully loaded) class
 * @param rhsTIB the TIB of an object that might be an instance of LHSclass
 * @return <code>true</code> if the object is an instance of LHSClassor <code>false</code> if it is not
 */
@Uninterruptible public static boolean instanceOfClass(RVMClass LHSclass,TIB rhsTIB){
  if (VM.VerifyAssertions) {
    VM._assert(rhsTIB != null);
    VM._assert(rhsTIB.getSuperclassIds() != null);
  }
  short[] superclassIds=Magic.objectAsShortArray(rhsTIB.getSuperclassIds());
  int LHSDepth=LHSclass.getTypeDepth();
  if (LHSDepth >= superclassIds.length)   return false;
  int LHSId=LHSclass.getId();
  return (superclassIds[LHSDepth] & 0xFFFF) == LHSId;
}",0.9928338762214984
149774,"private static void getVariableValue(byte[] stack,Offset offset,byte[] types,BaselineCompiledMethod compiledMethod,boolean kind,ExecutionState state){
  int size=types.length;
  Offset vOffset=offset;
  for (int i=0; i < size; i++) {
    if (VM.TraceOnStackReplacement) {
      Word content=Magic.getWordAtOffset(stack,vOffset.minus(BYTES_IN_ADDRESS));
      VM.sysWrite(""String_Node_Str"",vOffset.minus(BYTES_IN_ADDRESS),""String_Node_Str"");
      VM.sysWriteln(content);
    }
switch (types[i]) {
case VoidTypeCode:
      vOffset=vOffset.minus(BYTES_IN_STACKSLOT);
    break;
case BooleanTypeCode:
case ByteTypeCode:
case ShortTypeCode:
case CharTypeCode:
case IntTypeCode:
case FloatTypeCode:
{
    int value=Magic.getIntAtOffset(stack,vOffset.minus(BYTES_IN_INT));
    vOffset=vOffset.minus(BYTES_IN_STACKSLOT);
    byte tcode=(types[i] == FloatTypeCode) ? FLOAT : INT;
    state.add(new VariableElement(kind,i,tcode,value));
    break;
  }
case LongTypeCode:
case DoubleTypeCode:
{
  Offset memoff=(kind == LOCAL) ? vOffset.minus(BYTES_IN_DOUBLE) : VM.BuildFor64Addr ? vOffset : vOffset.minus(BYTES_IN_STACKSLOT);
  long value=Magic.getLongAtOffset(stack,memoff);
  byte tcode=(types[i] == LongTypeCode) ? LONG : DOUBLE;
  state.add(new VariableElement(kind,i,tcode,value));
  if (kind == LOCAL) {
    vOffset=vOffset.minus(2 * BYTES_IN_STACKSLOT);
    i++;
  }
 else {
    vOffset=vOffset.minus(BYTES_IN_STACKSLOT);
  }
  break;
}
case ReturnAddressTypeCode:
{
VM.disableGC();
Address rowIP=Magic.objectAsAddress(stack).loadAddress(vOffset);
Offset ipOffset=compiledMethod.getInstructionOffset(rowIP);
VM.enableGC();
vOffset=vOffset.minus(BYTES_IN_STACKSLOT);
if (VM.TraceOnStackReplacement) {
  Offset ipIndex=ipOffset.toWord().rsha(LG_INSTRUCTION_WIDTH).toOffset();
  VM.sysWrite(""String_Node_Str"",ipIndex,""String_Node_Str"");
}
int bcIndex=compiledMethod.findBytecodeIndexForInstruction(ipOffset.plus(INSTRUCTION_WIDTH));
if (VM.TraceOnStackReplacement) {
  VM.sysWrite(""String_Node_Str"" + bcIndex + ""String_Node_Str"");
}
state.add(new VariableElement(kind,i,RET_ADDR,bcIndex));
break;
}
case ClassTypeCode:
case ArrayTypeCode:
{
VM.disableGC();
Object ref=Magic.getObjectAtOffset(stack,vOffset.minus(BYTES_IN_ADDRESS));
VM.enableGC();
vOffset=vOffset.minus(BYTES_IN_STACKSLOT);
state.add(new VariableElement(kind,i,REF,ref));
break;
}
case WordTypeCode:
{
Word value=Magic.getWordAtOffset(stack,vOffset.minus(BYTES_IN_ADDRESS));
vOffset=vOffset.minus(BYTES_IN_STACKSLOT);
state.add(new VariableElement(kind,i,WORD,value));
break;
}
default :
if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);
break;
}
}
}","private static void getVariableValue(byte[] stack,Offset offset,byte[] types,BaselineCompiledMethod compiledMethod,boolean kind,ExecutionState state){
  int size=types.length;
  Offset vOffset=offset;
  for (int i=0; i < size; i++) {
    if (VM.TraceOnStackReplacement) {
      Word content=Magic.getWordAtOffset(stack,vOffset.minus(BYTES_IN_ADDRESS));
      VM.sysWrite(""String_Node_Str"",vOffset.minus(BYTES_IN_ADDRESS),""String_Node_Str"");
      VM.sysWriteln(content);
      if ((types[i] == LongTypeCode) || (types[i] == DoubleTypeCode)) {
        content=Magic.getWordAtOffset(stack,vOffset.minus(2 * BYTES_IN_ADDRESS));
        VM.sysWrite(""String_Node_Str"",vOffset.minus(2 * BYTES_IN_ADDRESS),""String_Node_Str"");
        VM.sysWriteln(content);
      }
    }
switch (types[i]) {
case VoidTypeCode:
      vOffset=vOffset.minus(BYTES_IN_STACKSLOT);
    break;
case BooleanTypeCode:
case ByteTypeCode:
case ShortTypeCode:
case CharTypeCode:
case IntTypeCode:
case FloatTypeCode:
{
    int value=Magic.getIntAtOffset(stack,vOffset.minus(BYTES_IN_INT));
    vOffset=vOffset.minus(BYTES_IN_STACKSLOT);
    byte tcode=(types[i] == FloatTypeCode) ? FLOAT : INT;
    state.add(new VariableElement(kind,i,tcode,value));
    break;
  }
case LongTypeCode:
case DoubleTypeCode:
{
  Offset memoff=(kind == LOCAL) ? vOffset.minus(BYTES_IN_DOUBLE) : VM.BuildFor64Addr ? vOffset : vOffset.minus(BYTES_IN_STACKSLOT);
  long value=Magic.getLongAtOffset(stack,memoff);
  byte tcode=(types[i] == LongTypeCode) ? LONG : DOUBLE;
  state.add(new VariableElement(kind,i,tcode,value));
  if (kind == LOCAL) {
    vOffset=vOffset.minus(2 * BYTES_IN_STACKSLOT);
    i++;
  }
 else {
    vOffset=vOffset.minus(BYTES_IN_STACKSLOT);
  }
  break;
}
case ReturnAddressTypeCode:
{
VM.disableGC();
Address rowIP=Magic.objectAsAddress(stack).loadAddress(vOffset);
Offset ipOffset=compiledMethod.getInstructionOffset(rowIP);
VM.enableGC();
vOffset=vOffset.minus(BYTES_IN_STACKSLOT);
if (VM.TraceOnStackReplacement) {
  Offset ipIndex=ipOffset.toWord().rsha(LG_INSTRUCTION_WIDTH).toOffset();
  VM.sysWrite(""String_Node_Str"",ipIndex,""String_Node_Str"");
}
int bcIndex=compiledMethod.findBytecodeIndexForInstruction(ipOffset.plus(INSTRUCTION_WIDTH));
if (VM.TraceOnStackReplacement) {
  VM.sysWrite(""String_Node_Str"" + bcIndex + ""String_Node_Str"");
}
state.add(new VariableElement(kind,i,RET_ADDR,bcIndex));
break;
}
case ClassTypeCode:
case ArrayTypeCode:
{
VM.disableGC();
Object ref=Magic.getObjectAtOffset(stack,vOffset.minus(BYTES_IN_ADDRESS));
VM.enableGC();
vOffset=vOffset.minus(BYTES_IN_STACKSLOT);
state.add(new VariableElement(kind,i,REF,ref));
break;
}
case WordTypeCode:
{
Word value=Magic.getWordAtOffset(stack,vOffset.minus(BYTES_IN_ADDRESS));
vOffset=vOffset.minus(BYTES_IN_STACKSLOT);
state.add(new VariableElement(kind,i,WORD,value));
break;
}
default :
if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);
break;
}
}
}",0.9477882523567804
149775,"/** 
 * Generate a floating point move portion of a conditional move.
 * @param s the instruction to copy position info from
 * @param result the result of the conditional move
 * @param cond the condition operand
 * @param trueValue the value to move to result if cond is true
 * @param falseValue the value to move to result if cond is not true
 */
protected final void CMOV_FMOV(Instruction s,RegisterOperand result,ConditionOperand cond,Operand trueValue,Operand falseValue){
  if (result.similar(trueValue)) {
    EMIT(MIR_CondMove.mutate(s,IA32_FCMOV,result,asReg(s,IA32_FMOV,falseValue),COND(cond.flipCode())));
  }
 else   if (result.similar(falseValue)) {
    EMIT(MIR_CondMove.mutate(s,IA32_FCMOV,result,asReg(s,IA32_FMOV,trueValue),COND(cond)));
  }
 else {
    if (falseValue.isRegister()) {
      EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,result,trueValue)));
      EMIT(MIR_CondMove.mutate(s,IA32_FCMOV,result.copyRO(),falseValue,COND(cond.flipCode())));
    }
 else {
      EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,result,falseValue)));
      EMIT(MIR_CondMove.mutate(s,IA32_FCMOV,result.copyRO(),asReg(s,IA32_FMOV,trueValue),COND(cond)));
    }
  }
}","/** 
 * Generate a floating point move portion of a conditional move.
 * @param s the instruction to copy position info from
 * @param result the result of the conditional move
 * @param cond the condition operand
 * @param trueValue the value to move to result if cond is true
 * @param falseValue the value to move to result if cond is not true
 */
protected final void CMOV_FMOV(Instruction s,RegisterOperand result,ConditionOperand cond,Operand trueValue,Operand falseValue){
  RegisterOperand FP0=new RegisterOperand(burs.ir.regpool.getPhysicalRegisterSet().getFPR(0),result.getType());
  if (falseValue.isRegister()) {
    EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,FP0,trueValue)));
    EMIT(MIR_CondMove.mutate(s,IA32_FCMOV,FP0.copyRO(),falseValue,COND(cond.flipCode())));
  }
 else {
    EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,FP0,falseValue)));
    EMIT(MIR_CondMove.mutate(s,IA32_FCMOV,FP0.copyRO(),asReg(s,IA32_FMOV,trueValue),COND(cond)));
  }
  EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,result.copyRO(),FP0.copyRO())));
}",0.5815018315018315
149776,"/** 
 * Perform aastore bytecode
 */
@Entrypoint static void aastore(Object[] arrayRef,int index,Object value) throws ArrayStoreException, ArrayIndexOutOfBoundsException {
  checkstore(arrayRef,value);
  int nelts=ObjectModel.getArrayLength(arrayRef);
  if (index < nelts) {
    Services.setArrayUninterruptible(arrayRef,index,value);
  }
 else {
    throw new ArrayIndexOutOfBoundsException(index);
  }
}","/** 
 * Perform aastore bytecode
 */
@Entrypoint static void aastore(Object[] arrayRef,int index,Object value) throws ArrayStoreException, ArrayIndexOutOfBoundsException {
  checkstore(arrayRef,value);
  int nelts=ObjectModel.getArrayLength(arrayRef);
  if (index >= 0 && index < nelts) {
    Services.setArrayUninterruptible(arrayRef,index,value);
  }
 else {
    throw new ArrayIndexOutOfBoundsException(index);
  }
}",0.983009708737864
149777,"/** 
 * Constructor
 * @param typeRef
 * @param elementType
 */
RVMArray(TypeReference typeRef,RVMType elementType){
  super(typeRef,typeRef.getDimensionality(),null);
  this.elementType=elementType;
  this.logElementSize=computeLogElementSize();
  depth=1;
  if (elementType.isArrayType()) {
    innermostElementType=elementType.asArray().getInnermostElementType();
  }
 else {
    innermostElementType=elementType;
  }
  innermostElementTypeDimension=innermostElementType.dimension;
  if (VM.BuildForIA32 && this == RVMArray.CodeArrayType) {
    this.alignment=16;
  }
 else   if (BYTES_IN_DOUBLE != BYTES_IN_ADDRESS) {
    if (elementType.isDoubleType() || elementType.isLongType()) {
      this.alignment=BYTES_IN_DOUBLE;
    }
 else {
      this.alignment=BYTES_IN_ADDRESS;
    }
  }
 else {
    this.alignment=BYTES_IN_DOUBLE;
  }
  acyclic=elementType.isAcyclicReference();
  state=CLASS_LOADED;
  if (VM.verboseClassLoading)   VM.sysWrite(""String_Node_Str"" + this.getDescriptor() + ""String_Node_Str"");
  if (VM.verboseClassLoading)   VM.sysWrite(""String_Node_Str"" + this.getDescriptor() + ""String_Node_Str"");
}","/** 
 * Constructor
 * @param typeRef
 * @param elementType
 */
RVMArray(TypeReference typeRef,RVMType elementType){
  super(typeRef,typeRef.getDimensionality(),null);
  this.elementType=elementType;
  this.logElementSize=computeLogElementSize();
  depth=1;
  if (elementType.isArrayType()) {
    innermostElementType=elementType.asArray().getInnermostElementType();
  }
 else {
    innermostElementType=elementType;
  }
  innermostElementTypeDimension=innermostElementType.dimension;
  if (VM.BuildForIA32 && typeRef == TypeReference.CodeArray) {
    this.alignment=16;
  }
 else   if (BYTES_IN_DOUBLE != BYTES_IN_ADDRESS) {
    if (elementType.isDoubleType() || elementType.isLongType()) {
      this.alignment=BYTES_IN_DOUBLE;
    }
 else {
      this.alignment=BYTES_IN_ADDRESS;
    }
  }
 else {
    this.alignment=BYTES_IN_DOUBLE;
  }
  acyclic=elementType.isAcyclicReference();
  state=CLASS_LOADED;
  if (VM.verboseClassLoading)   VM.sysWrite(""String_Node_Str"" + this.getDescriptor() + ""String_Node_Str"");
  if (VM.verboseClassLoading)   VM.sysWrite(""String_Node_Str"" + this.getDescriptor() + ""String_Node_Str"");
}",0.9776785714285714
149778,"/** 
 * Identify candidate blocks by using a very simplistic algorithm. <ul> <li> Find all blocks that end in a test that is statically known to be likely to create a common case trace. For example, blocks that end in IG_METHOD_TEST, IG_CLASS_TEST and IG_PATCH_POINT. Note that these tests also have the property that it is correct (but less desirable) to execute the off branch when the test would have selected the on branch. <li> If such a block has a control flow predecessor that is marked as infrequent, and if the block is relatively small, then it is almost certainly profitable to duplicate the block and transfer the infrequent predecessor to go to the cloned block.  This has the effect of freeing the common-case path from the pollution of the infrequently executed block. Therefore we identify the block as a splitting candidate. </ul>
 */
private void simpleCandidateSearch(IR ir){
  for (BasicBlockEnumeration e=ir.getBasicBlocks(); e.hasMoreElements(); ) {
    BasicBlock cand=e.next();
    if (cand.isExceptionHandlerBasicBlock())     continue;
    Instruction candTest=getCandidateTest(cand);
    if (candTest == null)     continue;
    BasicBlock coldPrev=findColdPrev(cand);
    if (coldPrev == null)     continue;
    if (tooBig(cand))     continue;
    BasicBlock coldSucc=findColdSucc(cand,candTest);
    if (DEBUG) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(""String_Node_Str"" + candTest + ""String_Node_Str"");
      VM.sysWrite(""String_Node_Str"" + coldPrev + ""String_Node_Str"");
      VM.sysWrite(""String_Node_Str"" + coldSucc + ""String_Node_Str"");
      cand.printExtended();
    }
    pushCandidate(cand,coldPrev,coldSucc,candTest);
  }
}","/** 
 * Identify candidate blocks by using a very simplistic algorithm. <ul> <li> Find all blocks that end in a test that is statically known to be likely to create a common case trace. For example, blocks that end in IG_METHOD_TEST, IG_CLASS_TEST and IG_PATCH_POINT. Note that these tests also have the property that it is correct (but less desirable) to execute the off branch when the test would have selected the on branch. <li> If such a block has a control flow predecessor that is marked as infrequent, and if the block is relatively small, then it is almost certainly profitable to duplicate the block and transfer the infrequent predecessor to go to the cloned block.  This has the effect of freeing the common-case path from the pollution of the infrequently executed block. Therefore we identify the block as a splitting candidate. </ul>
 */
private void simpleCandidateSearch(IR ir){
  for (BasicBlockEnumeration e=ir.getBasicBlocks(); e.hasMoreElements(); ) {
    BasicBlock cand=e.next();
    if (cand.isExceptionHandlerBasicBlock())     continue;
    Instruction candTest=getCandidateTest(cand);
    if (candTest == null)     continue;
    BasicBlock coldPrev=findColdPrev(cand);
    if (coldPrev == null)     continue;
    if (tooBig(cand))     continue;
    BasicBlock coldSucc=findColdSucc(cand,candTest);
    if (containsOSRPoint(coldSucc))     continue;
    if (DEBUG) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(""String_Node_Str"" + candTest + ""String_Node_Str"");
      VM.sysWrite(""String_Node_Str"" + coldPrev + ""String_Node_Str"");
      VM.sysWrite(""String_Node_Str"" + coldSucc + ""String_Node_Str"");
      cand.printExtended();
    }
    pushCandidate(cand,coldPrev,coldSucc,candTest);
  }
}",0.9853113983548766
149779,"/** 
 * Get location of next reference. A zero return indicates that no more references exist.
 */
public Address getNextReferenceAddress(){
  if (!finishedWithRegularMap) {
    if (counterArrayBase) {
      counterArrayBase=false;
      return registerLocations.get(EBX.value()).toAddress();
    }
    if (mapId < 0) {
      mapIndex=maps.getNextJSRRefIndex(mapIndex);
    }
 else {
      mapIndex=maps.getNextRefIndex(mapIndex,mapId);
    }
    if (mapIndex != 0) {
      int mapOffset=convertIndexToOffset(mapIndex);
      if (VM.TraceStkMaps || TRACE_ALL) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWriteHex(mapOffset);
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(""String_Node_Str"");
      }
      if (bridgeParameterMappingRequired) {
        if (VM.TraceStkMaps || TRACE_ALL) {
          VM.sysWriteHex(framePtr.plus(mapOffset - BRIDGE_FRAME_EXTRA_SIZE).loadInt());
          VM.sysWrite(""String_Node_Str"");
          if (mapId < 0) {
            VM.sysWrite(""String_Node_Str"");
          }
        }
        return (framePtr.plus(mapOffset - BRIDGE_FRAME_EXTRA_SIZE));
      }
 else {
        if (VM.TraceStkMaps || TRACE_ALL) {
          VM.sysWriteHex(framePtr.plus(mapOffset).loadInt());
          VM.sysWrite(""String_Node_Str"");
          if (mapId < 0) {
            VM.sysWrite(""String_Node_Str"");
          }
        }
        return (framePtr.plus(mapOffset));
      }
    }
 else {
      finishedWithRegularMap=true;
    }
  }
  if (bridgeParameterMappingRequired) {
    if (VM.TraceStkMaps || TRACE_ALL || TRACE_DL) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(bridgeTarget);
      VM.sysWrite(""String_Node_Str"");
    }
    if (!bridgeRegistersLocationUpdated) {
      registerLocations.set(EDI.value(),framePtr.plus(EDI_SAVE_OFFSET).toWord());
      registerLocations.set(T0.value(),framePtr.plus(T0_SAVE_OFFSET).toWord());
      registerLocations.set(T1.value(),framePtr.plus(T1_SAVE_OFFSET).toWord());
      registerLocations.set(EBX.value(),framePtr.plus(EBX_SAVE_OFFSET).toWord());
      bridgeRegistersLocationUpdated=true;
    }
    if (bridgeParameterIndex == -1) {
      bridgeParameterIndex+=1;
      bridgeRegisterIndex+=1;
      bridgeRegisterLocation=bridgeRegisterLocation.minus(4);
      bridgeSpilledParamLocation=bridgeSpilledParamLocation.minus(4);
      if (VM.TraceStkMaps || TRACE_ALL || TRACE_DL) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(bridgeRegisterLocation.plus(WORDSIZE));
        VM.sysWrite(""String_Node_Str"");
      }
      return bridgeRegisterLocation.plus(WORDSIZE);
    }
    while (bridgeParameterIndex < bridgeParameterTypes.length) {
      TypeReference bridgeParameterType=bridgeParameterTypes[bridgeParameterIndex++];
      if (bridgeParameterType.isReferenceType()) {
        bridgeRegisterIndex+=1;
        bridgeRegisterLocation=bridgeRegisterLocation.minus(WORDSIZE);
        bridgeSpilledParamLocation=bridgeSpilledParamLocation.minus(WORDSIZE);
        if (bridgeRegisterIndex <= NUM_PARAMETER_GPRS) {
          if (VM.TraceStkMaps || TRACE_ALL || TRACE_DL) {
            VM.sysWrite(""String_Node_Str"");
            VM.sysWrite(bridgeRegisterLocation.plus(WORDSIZE));
            VM.sysWrite(""String_Node_Str"");
          }
          return bridgeRegisterLocation.plus(WORDSIZE);
        }
 else {
          if (bridgeSpilledParameterMappingRequired) {
            if (VM.TraceStkMaps || TRACE_ALL || TRACE_DL) {
              VM.sysWrite(""String_Node_Str"");
              VM.sysWrite(bridgeSpilledParamLocation.plus(WORDSIZE));
              VM.sysWrite(""String_Node_Str"");
            }
            return bridgeSpilledParamLocation.plus(WORDSIZE);
          }
 else {
            break;
          }
        }
      }
 else       if (bridgeParameterType.isLongType()) {
        bridgeRegisterIndex+=VM.BuildFor32Addr ? 2 : 1;
        bridgeRegisterLocation=bridgeRegisterLocation.minus(2 * WORDSIZE);
        bridgeSpilledParamLocation=bridgeSpilledParamLocation.minus(2 * WORDSIZE);
      }
 else       if (bridgeParameterType.isDoubleType()) {
        bridgeSpilledParamLocation=bridgeSpilledParamLocation.minus(2 * WORDSIZE);
      }
 else       if (bridgeParameterType.isFloatType()) {
        bridgeSpilledParamLocation=bridgeSpilledParamLocation.minus(WORDSIZE);
      }
 else {
        bridgeRegisterIndex+=1;
        bridgeRegisterLocation=bridgeRegisterLocation.minus(WORDSIZE);
        bridgeSpilledParamLocation=bridgeSpilledParamLocation.minus(WORDSIZE);
      }
    }
  }
 else {
    registerLocations.set(EDI.value(),framePtr.plus(EDI_SAVE_OFFSET).toWord());
    registerLocations.set(EBX.value(),framePtr.plus(EBX_SAVE_OFFSET).toWord());
  }
  return Address.zero();
}","/** 
 * Get location of next reference. A zero return indicates that no more references exist.
 */
public Address getNextReferenceAddress(){
  if (!finishedWithRegularMap) {
    if (counterArrayBase) {
      counterArrayBase=false;
      return registerLocations.get(EBX.value()).toAddress();
    }
    if (mapId < 0) {
      mapIndex=maps.getNextJSRRefIndex(mapIndex);
    }
 else {
      mapIndex=maps.getNextRefIndex(mapIndex,mapId);
    }
    if (mapIndex != 0) {
      int mapOffset=convertIndexToOffset(mapIndex);
      if (VM.TraceStkMaps || TRACE_ALL) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWriteHex(mapOffset);
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(""String_Node_Str"");
      }
      if (bridgeParameterMappingRequired) {
        if (VM.TraceStkMaps || TRACE_ALL) {
          VM.sysWriteHex(framePtr.plus(mapOffset - BRIDGE_FRAME_EXTRA_SIZE).loadAddress());
          VM.sysWrite(""String_Node_Str"");
          if (mapId < 0) {
            VM.sysWrite(""String_Node_Str"");
          }
        }
        return (framePtr.plus(mapOffset - BRIDGE_FRAME_EXTRA_SIZE));
      }
 else {
        if (VM.TraceStkMaps || TRACE_ALL) {
          VM.sysWriteHex(framePtr.plus(mapOffset).loadAddress());
          VM.sysWrite(""String_Node_Str"");
          if (mapId < 0) {
            VM.sysWrite(""String_Node_Str"");
          }
        }
        return (framePtr.plus(mapOffset));
      }
    }
 else {
      finishedWithRegularMap=true;
    }
  }
  if (bridgeParameterMappingRequired) {
    if (VM.TraceStkMaps || TRACE_ALL || TRACE_DL) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(bridgeTarget);
      VM.sysWrite(""String_Node_Str"");
    }
    if (!bridgeRegistersLocationUpdated) {
      registerLocations.set(EDI.value(),framePtr.plus(EDI_SAVE_OFFSET).toWord());
      registerLocations.set(T0.value(),framePtr.plus(T0_SAVE_OFFSET).toWord());
      registerLocations.set(T1.value(),framePtr.plus(T1_SAVE_OFFSET).toWord());
      registerLocations.set(EBX.value(),framePtr.plus(EBX_SAVE_OFFSET).toWord());
      bridgeRegistersLocationUpdated=true;
    }
    if (bridgeParameterIndex == -1) {
      bridgeParameterIndex+=1;
      bridgeRegisterIndex+=1;
      bridgeRegisterLocation=bridgeRegisterLocation.minus(4);
      bridgeSpilledParamLocation=bridgeSpilledParamLocation.minus(4);
      if (VM.TraceStkMaps || TRACE_ALL || TRACE_DL) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(bridgeRegisterLocation.plus(WORDSIZE));
        VM.sysWrite(""String_Node_Str"");
      }
      return bridgeRegisterLocation.plus(WORDSIZE);
    }
    while (bridgeParameterIndex < bridgeParameterTypes.length) {
      TypeReference bridgeParameterType=bridgeParameterTypes[bridgeParameterIndex++];
      if (bridgeParameterType.isReferenceType()) {
        bridgeRegisterIndex+=1;
        bridgeRegisterLocation=bridgeRegisterLocation.minus(WORDSIZE);
        bridgeSpilledParamLocation=bridgeSpilledParamLocation.minus(WORDSIZE);
        if (bridgeRegisterIndex <= NUM_PARAMETER_GPRS) {
          if (VM.TraceStkMaps || TRACE_ALL || TRACE_DL) {
            VM.sysWrite(""String_Node_Str"");
            VM.sysWrite(bridgeRegisterLocation.plus(WORDSIZE));
            VM.sysWrite(""String_Node_Str"");
          }
          return bridgeRegisterLocation.plus(WORDSIZE);
        }
 else {
          if (bridgeSpilledParameterMappingRequired) {
            if (VM.TraceStkMaps || TRACE_ALL || TRACE_DL) {
              VM.sysWrite(""String_Node_Str"");
              VM.sysWrite(bridgeSpilledParamLocation.plus(WORDSIZE));
              VM.sysWrite(""String_Node_Str"");
            }
            return bridgeSpilledParamLocation.plus(WORDSIZE);
          }
 else {
            break;
          }
        }
      }
 else       if (bridgeParameterType.isLongType()) {
        bridgeRegisterIndex+=VM.BuildFor32Addr ? 2 : 1;
        bridgeRegisterLocation=bridgeRegisterLocation.minus(2 * WORDSIZE);
        bridgeSpilledParamLocation=bridgeSpilledParamLocation.minus(2 * WORDSIZE);
      }
 else       if (bridgeParameterType.isDoubleType()) {
        bridgeSpilledParamLocation=bridgeSpilledParamLocation.minus(2 * WORDSIZE);
      }
 else       if (bridgeParameterType.isFloatType()) {
        bridgeSpilledParamLocation=bridgeSpilledParamLocation.minus(WORDSIZE);
      }
 else {
        bridgeRegisterIndex+=1;
        bridgeRegisterLocation=bridgeRegisterLocation.minus(WORDSIZE);
        bridgeSpilledParamLocation=bridgeSpilledParamLocation.minus(WORDSIZE);
      }
    }
  }
 else {
    registerLocations.set(EDI.value(),framePtr.plus(EDI_SAVE_OFFSET).toWord());
    registerLocations.set(EBX.value(),framePtr.plus(EBX_SAVE_OFFSET).toWord());
  }
  return Address.zero();
}",0.9978786593126856
149780,"/** 
 * End of discontig getter @return The end of the discontiguous space 
 */
public static Address getDiscontigEnd(){
  return heapLimit;
}","/** 
 * End of discontig getter @return The end of the discontiguous space 
 */
public static Address getDiscontigEnd(){
  return heapLimit.minus(1);
}",0.969283276450512
149781,"/** 
 * Finalize the space map, establishing which virtual memory is nailed down, and then placing the rest into a map to be used by discontiguous spaces.
 */
@Interruptible public static void finalizeStaticSpaceMap(){
  Address startAddress=Space.getDiscontigStart();
  int first=hashAddress(startAddress);
  int last=hashAddress(Space.getDiscontigEnd().minus(1));
  int pages=(1 + last - first) * Space.PAGES_IN_CHUNK + 1;
  globalPageMap.resizeFreeList(pages,pages);
  for (int pr=0; pr < sharedDiscontigFLCount; pr++)   sharedFLMap[pr].resizeFreeList(startAddress);
  regionMap.alloc(first);
  for (int chunk=first; chunk <= last; chunk++)   regionMap.alloc(1);
  regionMap.alloc(Space.MAX_CHUNKS - last);
  int firstPage=0;
  for (int chunk=first; chunk <= last; chunk++) {
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(spaceMap[chunk] == null);
    totalAvailableDiscontiguousChunks++;
    regionMap.free(chunk);
    globalPageMap.setUncoalescable(firstPage);
    int tmp=globalPageMap.alloc(Space.PAGES_IN_CHUNK);
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(tmp == firstPage);
    firstPage+=Space.PAGES_IN_CHUNK;
  }
}","/** 
 * Finalize the space map, establishing which virtual memory is nailed down, and then placing the rest into a map to be used by discontiguous spaces.
 */
@Interruptible public static void finalizeStaticSpaceMap(){
  Address startAddress=Space.getDiscontigStart();
  int first=hashAddress(startAddress);
  int last=hashAddress(Space.getDiscontigEnd());
  int unavailStart=last + 1;
  int trailingUnavail=Space.MAX_CHUNKS - unavailStart;
  int pages=(1 + last - first) * Space.PAGES_IN_CHUNK;
  globalPageMap.resizeFreeList(pages,pages);
  for (int pr=0; pr < sharedDiscontigFLCount; pr++)   sharedFLMap[pr].resizeFreeList(startAddress);
  int index=regionMap.alloc(first);
  for (int chunk=first; chunk <= last; chunk++)   index=regionMap.alloc(1);
  index=regionMap.alloc(trailingUnavail);
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(index == unavailStart);
  int firstPage=0;
  for (int chunk=first; chunk <= last; chunk++) {
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(spaceMap[chunk] == null);
    totalAvailableDiscontiguousChunks++;
    regionMap.free(chunk);
    globalPageMap.setUncoalescable(firstPage);
    int tmp=globalPageMap.alloc(Space.PAGES_IN_CHUNK);
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(tmp == firstPage);
    firstPage+=Space.PAGES_IN_CHUNK;
  }
}",0.8945868945868946
149782,"/** 
 * Initiate a garbage collection.  Called by a mutator thread when its allocator runs out of space.  The caller should pass the Handshake that was referenced by the static variable ""collect"" at the time space was unavailable.
 * @param handshake Handshake for the requested collection
 */
@Unpreemptible(""String_Node_Str"") public static void collect(Handshake handshake,int why){
  Processor.getCurrentFeedlet().addEvent(MMTk_Events.events.gcStart,why);
  handshake.requestAndAwaitCompletion(why);
  Processor.getCurrentFeedlet().addEvent(MMTk_Events.events.gcStart,why);
}","/** 
 * Initiate a garbage collection.  Called by a mutator thread when its allocator runs out of space.  The caller should pass the Handshake that was referenced by the static variable ""collect"" at the time space was unavailable.
 * @param handshake Handshake for the requested collection
 */
@Unpreemptible(""String_Node_Str"") public static void collect(Handshake handshake,int why){
  Processor.getCurrentFeedlet().addEvent(MMTk_Events.events.gcStart,why);
  handshake.requestAndAwaitCompletion(why);
  Processor.getCurrentFeedlet().addEvent(MMTk_Events.events.gcStop);
}",0.9921807124239792
149783,"@Override public int rendezvous(int where){
  return rendezvous.rendezvous(where);
}","@Override public int rendezvous(int where){
  return Rendezvous.rendezvous(where);
}",0.988095238095238
149784,"/** 
 * Rendezvous with all other processors, returning the rank (that is, the order this processor arrived at the barrier).
 */
int rendezvous(int where){
}","/** 
 * Dispatch to the current rendezvous object
 * @param where
 * @return
 */
static int rendezvous(int where){
  return current(where).rendezvous();
}",0.405144694533762
149785,"/** 
 * Compute the in set for this block given the out, gen, and kill set
 * @param block the block of interest
 * @param reuseCurrentSet whether we can reuse the ""currentSet"" or elseclear it out and recompute the meet of our succs
 * @param ir the governing ir
 */
private boolean processBlock(BasicBlock block,boolean reuseCurrentSet,IR ir){
  if (verbose) {
    System.out.println(""String_Node_Str"" + block + ""String_Node_Str""+ block.getNumberOfOut());
    block.printExtended();
  }
  LiveSet exceptionBlockSummary=new LiveSet();
  boolean blockHasHandlers=bbLiveInfo[block.getNumber()].getContainsPEIWithHandler();
  if (!reuseCurrentSet) {
    currentSet.clear();
    for (BasicBlockEnumeration bbEnum=block.getOut(); bbEnum.hasMoreElements(); ) {
      BasicBlock succ=bbEnum.next();
      if (blockHasHandlers && succ.isExceptionHandlerBasicBlock()) {
        exceptionBlockSummary.add(bbLiveInfo[succ.getNumber()].getIn());
      }
 else {
        currentSet.add(bbLiveInfo[succ.getNumber()].getIn());
      }
    }
  }
  if (verbose) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + currentSet);
    System.out.println(""String_Node_Str"" + exceptionBlockSummary);
  }
  if (bbLiveInfo[block.getNumber()].BBKillSet() == null) {
    bbLiveInfo[block.getNumber()].createKillAndGen();
    computeBlockGenAndKill(block,ir);
  }
  currentSet.remove(bbLiveInfo[block.getNumber()].BBKillSet());
  if (blockHasHandlers) {
    currentSet.add(exceptionBlockSummary);
    currentSet.remove(bbLiveInfo[block.getNumber()].firstPEIKillSet());
  }
  currentSet.add(bbLiveInfo[block.getNumber()].getGen());
  if (bbLiveInfo[block.getNumber()].getIn().add(currentSet)) {
    if (verbose) {
      System.out.println(""String_Node_Str"" + currentSet);
    }
    return true;
  }
 else {
    if (verbose) {
      System.out.println(""String_Node_Str"" + currentSet);
    }
    return false;
  }
}","/** 
 * Compute the in set for this block given the out, gen, and kill set
 * @param block the block of interest
 * @param reuseCurrentSet whether we can reuse the ""currentSet"" or elseclear it out and recompute the meet of our succs
 * @param ir the governing ir
 */
private boolean processBlock(BasicBlock block,boolean reuseCurrentSet,IR ir){
  if (verbose) {
    System.out.println(""String_Node_Str"" + block + ""String_Node_Str""+ block.getNumberOfOut());
    block.printExtended();
  }
  if (bbLiveInfo[block.getNumber()].BBKillSet() == null) {
    bbLiveInfo[block.getNumber()].createKillAndGen();
    computeBlockGenAndKill(block,ir);
  }
  LiveSet exceptionBlockSummary=new LiveSet();
  boolean blockHasHandlers=bbLiveInfo[block.getNumber()].getContainsPEIWithHandler();
  if (!reuseCurrentSet) {
    currentSet.clear();
    for (BasicBlockEnumeration bbEnum=block.getOut(); bbEnum.hasMoreElements(); ) {
      BasicBlock succ=bbEnum.next();
      if (blockHasHandlers && succ.isExceptionHandlerBasicBlock()) {
        exceptionBlockSummary.add(bbLiveInfo[succ.getNumber()].getIn());
      }
 else {
        currentSet.add(bbLiveInfo[succ.getNumber()].getIn());
      }
    }
  }
  if (verbose) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + currentSet);
    System.out.println(""String_Node_Str"" + exceptionBlockSummary);
  }
  currentSet.remove(bbLiveInfo[block.getNumber()].BBKillSet());
  if (blockHasHandlers) {
    currentSet.add(exceptionBlockSummary);
    currentSet.remove(bbLiveInfo[block.getNumber()].firstPEIKillSet());
  }
  currentSet.add(bbLiveInfo[block.getNumber()].getGen());
  if (bbLiveInfo[block.getNumber()].getIn().add(currentSet)) {
    if (verbose) {
      System.out.println(""String_Node_Str"" + currentSet);
    }
    return true;
  }
 else {
    if (verbose) {
      System.out.println(""String_Node_Str"" + currentSet);
    }
    return false;
  }
}",0.9192708333333334
149786,"/** 
 * Release a group of pages, associated with this page resource, that were allocated together, optionally zeroing on release and optionally memory protecting on release.
 * @param first The first page in the group of pages that wereallocated together.
 */
@Inline public void releasePages(Address first){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(Conversions.isPageAligned(first));
  int pageOffset=Conversions.bytesToPages(first.diff(start));
  int pages=freeList.size(pageOffset);
  if (ZERO_ON_RELEASE)   VM.memory.zero(first,Conversions.pagesToBytes(pages));
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(pages <= committed);
  lock();
  reserved-=pages;
  committed-=pages;
  int freed=freeList.free(pageOffset,true);
  pagesCurrentlyOnFreeList+=pages;
  boolean completelyFreed=!contiguous && metaDataPagesPerRegion > 0 && freed == (PAGES_IN_CHUNK - metaDataPagesPerRegion);
  if (!contiguous && (freed % PAGES_IN_CHUNK == 0)) {
    int regionStart=pageOffset & ~(PAGES_IN_CHUNK - 1);
    int nextRegionStart=regionStart + PAGES_IN_CHUNK;
    while (regionStart >= 0 && freeList.isCoalescable(regionStart))     regionStart-=PAGES_IN_CHUNK;
    while (nextRegionStart < GenericFreeList.MAX_UNITS && freeList.isCoalescable(nextRegionStart))     nextRegionStart+=PAGES_IN_CHUNK;
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(regionStart >= 0 && nextRegionStart < GenericFreeList.MAX_UNITS);
    completelyFreed=(freed == nextRegionStart - regionStart);
  }
  if (completelyFreed)   freeContiguousChunk(Space.chunkAlign(first,true));
  unlock();
}","/** 
 * Release a group of pages, associated with this page resource, that were allocated together, optionally zeroing on release and optionally memory protecting on release.
 * @param first The first page in the group of pages that wereallocated together.
 */
@Inline public void releasePages(Address first){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(Conversions.isPageAligned(first));
  int pageOffset=Conversions.bytesToPages(first.diff(start));
  int pages=freeList.size(pageOffset);
  if (ZERO_ON_RELEASE)   VM.memory.zero(first,Conversions.pagesToBytes(pages));
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(pages <= committed);
  lock();
  reserved-=pages;
  committed-=pages;
  int freed=freeList.free(pageOffset,true);
  pagesCurrentlyOnFreeList+=pages;
  if (!contiguous)   releaseFreeChunks(first,freed);
  unlock();
}",0.6564948453608247
149787,"/** 
 * Copies characters from the string into the character array. Thread switching is disabled during this method's execution. <p> <b>TODO:</b> There are special memory management semantics here that someone should document.
 * @param str the source string
 * @param dst the destination array
 * @param dstBegin the start offset in the desination array
 * @param dstEnd the index after the last character in thedestination to copy to
 * @return the number of characters copied.
 */
public int copyStringToChars(String str,char[] dst,int dstBegin,int dstEnd){
  if (VM.runningVM) {
    Processor.getCurrentProcessor().disableThreadSwitching(""String_Node_Str"");
  }
  char[] str_backing=java.lang.JikesRVMSupport.getBackingCharArray(str);
  int str_length=java.lang.JikesRVMSupport.getStringLength(str);
  int str_offset=java.lang.JikesRVMSupport.getStringOffset(str);
  int n=(dstBegin + str_length <= dstEnd) ? str_length : (dstEnd - dstBegin);
  for (int i=0; i < n; i++) {
    Services.setArrayNoBarrier(dst,dstBegin + i,str_backing[str_offset + i]);
  }
  if (VM.runningVM) {
    Processor.getCurrentProcessor().enableThreadSwitching();
  }
  return n;
}","/** 
 * Copies characters from the string into the character array. Thread switching is disabled during this method's execution.
 * @param str the source string
 * @param dst the destination array
 * @param dstBegin the start offset in the desination array
 * @param dstEnd the index after the last character in thedestination to copy to
 * @return the number of characters copied.
 */
public int copyStringToChars(String str,char[] dst,int dstBegin,int dstEnd){
  if (!VM.runningVM)   return naiveCopyStringToChars(str,dst,dstBegin,dstEnd);
 else   return safeCopyStringToChars(str,dst,dstBegin,dstEnd);
}",0.5631728045325779
149788,"/** 
 * Finalize the space map, establishing which virtual memory is nailed down, and then placing the rest into a map to be used by discontiguous spaces.
 */
@Interruptible public static void finalizeStaticSpaceMap(){
  Address startAddress=Space.getDiscontigStart();
  int start=hashAddress(startAddress);
  int end=hashAddress(Space.getDiscontigEnd());
  int pages=(end - start) * Space.PAGES_IN_CHUNK + 1;
  globalPageMap.resizeFreeList(pages,pages);
  for (int pr=0; pr < sharedDiscontigFLCount; pr++)   sharedFLMap[pr].resizeFreeList(startAddress);
  regionMap.alloc(start);
  for (int chunk=start; chunk < end; chunk++)   regionMap.alloc(1);
  regionMap.alloc(Space.MAX_CHUNKS - end);
  int firstPage=0;
  for (int chunk=start; chunk < end; chunk++) {
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(spaceMap[chunk] == null);
    totalAvailableDiscontiguousChunks++;
    regionMap.free(chunk);
    globalPageMap.setUncoalescable(firstPage);
    int tmp=globalPageMap.alloc(Space.PAGES_IN_CHUNK);
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(tmp == firstPage);
    firstPage+=Space.PAGES_IN_CHUNK;
  }
}","/** 
 * Finalize the space map, establishing which virtual memory is nailed down, and then placing the rest into a map to be used by discontiguous spaces.
 */
@Interruptible public static void finalizeStaticSpaceMap(){
  Address startAddress=Space.getDiscontigStart();
  int first=hashAddress(startAddress);
  int last=hashAddress(Space.getDiscontigEnd().minus(1));
  int pages=(1 + last - first) * Space.PAGES_IN_CHUNK + 1;
  globalPageMap.resizeFreeList(pages,pages);
  for (int pr=0; pr < sharedDiscontigFLCount; pr++)   sharedFLMap[pr].resizeFreeList(startAddress);
  regionMap.alloc(first);
  for (int chunk=first; chunk <= last; chunk++)   regionMap.alloc(1);
  regionMap.alloc(Space.MAX_CHUNKS - last);
  int firstPage=0;
  for (int chunk=first; chunk <= last; chunk++) {
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(spaceMap[chunk] == null);
    totalAvailableDiscontiguousChunks++;
    regionMap.free(chunk);
    globalPageMap.setUncoalescable(firstPage);
    int tmp=globalPageMap.alloc(Space.PAGES_IN_CHUNK);
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(tmp == firstPage);
    firstPage+=Space.PAGES_IN_CHUNK;
  }
}",0.9138840070298768
149789,"/** 
 * Return a generation context that represents the execution of inlDec in the context <parent,ebag> for the call instruction callSite. <p> PRECONDITION: inlDec.isYes() <p> POSTCONDITIONS: Let gc be the returned generation context. <ul> <li> gc.cfg.firstInCodeOrder is the entry to the inlined context <li>gc.cfg.lastInCodeOrder is the exit from the inlined context <li> GenerationContext.transferState(parent, child) has been called. </ul>
 * @param inlDec the inlining decision to execute
 * @param parent the caller generation context
 * @param ebag exception handler scope for the caller
 * @param callSite the callsite to execute
 * @return a generation context that represents the execution of theinline decision in the given context
 */
public static GenerationContext execute(InlineDecision inlDec,GenerationContext parent,ExceptionHandlerBasicBlockBag ebag,Instruction callSite){
  if (inlDec.needsGuard()) {
    GenerationContext container=GenerationContext.createSynthetic(parent,ebag);
    container.cfg.breakCodeOrder(container.prologue,container.epilogue);
    RVMMethod[] targets=inlDec.getTargets();
    byte[] guards=inlDec.getGuards();
    GenerationContext[] children=new GenerationContext[targets.length];
    for (int i=0; i < targets.length; i++) {
      NormalMethod callee=(NormalMethod)targets[i];
      if (parent.options.PRINT_INLINE_REPORT) {
        String guard=guards[i] == OptOptions.IG_CLASS_TEST ? ""String_Node_Str"" : ""String_Node_Str"";
        VM.sysWrite(""String_Node_Str"" + guard + ""String_Node_Str""+ callee+ ""String_Node_Str""+ callSite.position.getMethod()+ ""String_Node_Str""+ callSite.bcIndex+ ""String_Node_Str"");
      }
      children[i]=GenerationContext.createChildContext(parent,ebag,callee,callSite);
      BC2IR.generateHIR(children[i]);
      GenerationContext.transferState(parent,children[i]);
    }
    if (Call.hasResult(callSite)) {
      Register reg=Call.getResult(callSite).getRegister();
      container.result=children[0].result;
      for (int i=1; i < targets.length; i++) {
        container.result=Operand.meet(container.result,children[i].result,reg);
      }
      if (!inlDec.OSRTestFailed()) {
        container.result=Operand.meet(container.result,Call.getResult(callSite),reg);
      }
    }
    BasicBlock testFailed=new BasicBlock(callSite.bcIndex,callSite.position,parent.cfg);
    testFailed.exceptionHandlers=ebag;
    if (COUNT_FAILED_GUARDS && Controller.options.INSERT_DEBUGGING_COUNTERS) {
      String eventName=""String_Node_Str"" + callSite.position.getMethod().toString();
      Instruction counterInst=AOSDatabase.debuggingCounterData.getCounterInstructionForEvent(eventName);
      testFailed.appendInstruction(counterInst);
    }
    if (inlDec.OSRTestFailed()) {
      Instruction lastOsrBarrier=(Instruction)callSite.scratchObject;
      Instruction s=BC2IR._osrHelper(lastOsrBarrier);
      s.position=callSite.position;
      s.bcIndex=callSite.bcIndex;
      testFailed.appendInstruction(s);
      testFailed.insertOut(parent.exit);
    }
 else {
      Instruction call=callSite.copyWithoutLinks();
      Call.getMethod(call).setIsGuardedInlineOffBranch(true);
      call.bcIndex=callSite.bcIndex;
      call.position=callSite.position;
      testFailed.appendInstruction(call);
      testFailed.insertOut(container.epilogue);
      if (ebag != null) {
        for (BasicBlockEnumeration e=ebag.enumerator(); e.hasMoreElements(); ) {
          BasicBlock handler=e.next();
          testFailed.insertOut(handler);
        }
      }
      testFailed.setCanThrowExceptions();
      testFailed.setMayThrowUncaughtException();
    }
    container.cfg.linkInCodeOrder(testFailed,container.epilogue);
    testFailed.setInfrequent();
    BasicBlock firstIfBlock=testFailed;
    Operand receiver=Call.getParam(callSite,0);
    MethodOperand mo=Call.getMethod(callSite);
    boolean isInterface=mo.isInterface();
    if (isInterface) {
      if (VM.BuildForIMTInterfaceInvocation) {
        RVMType interfaceType=mo.getTarget().getDeclaringClass();
        TypeReference recTypeRef=receiver.getType();
        RVMClass recType=(RVMClass)recTypeRef.peekType();
        boolean requiresImplementsTest=true;
        if (recType != null && recType.isResolved() && !recType.isInterface()) {
          byte doesImplement=ClassLoaderProxy.includesType(interfaceType.getTypeRef(),recTypeRef);
          requiresImplementsTest=doesImplement != OptConstants.YES;
        }
        if (requiresImplementsTest) {
          RegisterOperand checkedReceiver=parent.temps.makeTemp(receiver);
          Instruction dtc=TypeCheck.create(MUST_IMPLEMENT_INTERFACE,checkedReceiver,receiver.copy(),new TypeOperand(interfaceType),Call.getGuard(callSite).copy());
          dtc.copyPosition(callSite);
          checkedReceiver.refine(interfaceType.getTypeRef());
          Call.setParam(callSite,0,checkedReceiver.copyRO());
          testFailed.prependInstruction(dtc);
        }
      }
    }
    for (int i=children.length - 1; i >= 0; i--, testFailed=firstIfBlock) {
      firstIfBlock=new BasicBlock(callSite.bcIndex,callSite.position,parent.cfg);
      firstIfBlock.exceptionHandlers=ebag;
      BasicBlock lastIfBlock=firstIfBlock;
      RVMMethod target=children[i].method;
      Instruction tmp;
      if (isInterface) {
        RVMClass callDeclClass=mo.getTarget().getDeclaringClass();
        if (!callDeclClass.isInterface()) {
          throw new OptimizingCompilerException(""String_Node_Str"");
        }
        byte doesImplement=ClassLoaderProxy.includesType(callDeclClass.getTypeRef(),target.getDeclaringClass().getTypeRef());
        if (doesImplement != OptConstants.YES) {
          if (parent.options.PRINT_INLINE_REPORT) {
            VM.sysWrite(""String_Node_Str"" + callDeclClass + ""String_Node_Str"");
          }
          firstIfBlock=new BasicBlock(callSite.bcIndex,callSite.position,parent.cfg);
          firstIfBlock.exceptionHandlers=ebag;
          RegisterOperand instanceOfResult=parent.temps.makeTempInt();
          tmp=InstanceOf.create(INSTANCEOF_NOTNULL,instanceOfResult,new TypeOperand(callDeclClass),receiver.copy(),Call.getGuard(callSite));
          tmp.copyPosition(callSite);
          firstIfBlock.appendInstruction(tmp);
          tmp=IfCmp.create(INT_IFCMP,parent.temps.makeTempValidation(),instanceOfResult.copyD2U(),new IntConstantOperand(0),ConditionOperand.EQUAL(),testFailed.makeJumpTarget(),BranchProfileOperand.unlikely());
          tmp.copyPosition(callSite);
          firstIfBlock.appendInstruction(tmp);
          firstIfBlock.insertOut(testFailed);
          firstIfBlock.insertOut(lastIfBlock);
          container.cfg.linkInCodeOrder(firstIfBlock,lastIfBlock);
        }
      }
      if (guards[i] == OptOptions.IG_CLASS_TEST) {
        tmp=InlineGuard.create(IG_CLASS_TEST,receiver.copy(),Call.getGuard(callSite).copy(),new TypeOperand(target.getDeclaringClass()),testFailed.makeJumpTarget(),BranchProfileOperand.unlikely());
      }
 else       if (guards[i] == OptOptions.IG_METHOD_TEST) {
        if (isInterface) {
          RegisterOperand t=parent.temps.makeTempInt();
          Instruction test=InstanceOf.create(INSTANCEOF_NOTNULL,t,new TypeOperand(target.getDeclaringClass().getTypeRef()),receiver.copy());
          test.copyPosition(callSite);
          lastIfBlock.appendInstruction(test);
          Instruction cmp=IfCmp.create(INT_IFCMP,parent.temps.makeTempValidation(),t.copyD2U(),new IntConstantOperand(0),ConditionOperand.EQUAL(),testFailed.makeJumpTarget(),BranchProfileOperand.unlikely());
          cmp.copyPosition(callSite);
          lastIfBlock.appendInstruction(cmp);
          BasicBlock subclassTest=new BasicBlock(callSite.bcIndex,callSite.position,parent.cfg);
          lastIfBlock.insertOut(testFailed);
          lastIfBlock.insertOut(subclassTest);
          container.cfg.linkInCodeOrder(lastIfBlock,subclassTest);
          lastIfBlock=subclassTest;
        }
        tmp=InlineGuard.create(IG_METHOD_TEST,receiver.copy(),Call.getGuard(callSite).copy(),MethodOperand.VIRTUAL(target.getMemberRef().asMethodReference(),target),testFailed.makeJumpTarget(),BranchProfileOperand.unlikely());
      }
 else {
        tmp=InlineGuard.create(IG_PATCH_POINT,receiver.copy(),Call.getGuard(callSite).copy(),MethodOperand.VIRTUAL(target.getMemberRef().asMethodReference(),target),testFailed.makeJumpTarget(),inlDec.OSRTestFailed() ? BranchProfileOperand.never() : BranchProfileOperand.unlikely());
      }
      tmp.copyPosition(callSite);
      lastIfBlock.appendInstruction(tmp);
      lastIfBlock.insertOut(testFailed);
      lastIfBlock.insertOut(children[i].prologue);
      container.cfg.linkInCodeOrder(lastIfBlock,children[i].cfg.firstInCodeOrder());
      if (children[i].epilogue != null) {
        children[i].epilogue.appendInstruction(container.epilogue.makeGOTO());
        children[i].epilogue.insertOut(container.epilogue);
      }
      container.cfg.linkInCodeOrder(children[i].cfg.lastInCodeOrder(),testFailed);
    }
    container.prologue.insertOut(testFailed);
    container.cfg.linkInCodeOrder(container.prologue,testFailed);
    return container;
  }
 else {
    if (VM.VerifyAssertions)     VM._assert(inlDec.getNumberOfTargets() == 1);
    NormalMethod callee=(NormalMethod)inlDec.getTargets()[0];
    if (parent.options.PRINT_INLINE_REPORT) {
      VM.sysWrite(""String_Node_Str"" + callee + ""String_Node_Str""+ callSite.position.getMethod()+ ""String_Node_Str""+ callSite.bcIndex+ ""String_Node_Str"");
    }
    GenerationContext child=GenerationContext.createChildContext(parent,ebag,callee,callSite);
    BC2IR.generateHIR(child);
    GenerationContext.transferState(parent,child);
    return child;
  }
}","/** 
 * Return a generation context that represents the execution of inlDec in the context <parent,ebag> for the call instruction callSite. <p> PRECONDITION: inlDec.isYes() <p> POSTCONDITIONS: Let gc be the returned generation context. <ul> <li> gc.cfg.firstInCodeOrder is the entry to the inlined context <li>gc.cfg.lastInCodeOrder is the exit from the inlined context <li> GenerationContext.transferState(parent, child) has been called. </ul>
 * @param inlDec the inlining decision to execute
 * @param parent the caller generation context
 * @param ebag exception handler scope for the caller
 * @param callSite the callsite to execute
 * @return a generation context that represents the execution of theinline decision in the given context
 */
public static GenerationContext execute(InlineDecision inlDec,GenerationContext parent,ExceptionHandlerBasicBlockBag ebag,Instruction callSite){
  if (inlDec.needsGuard()) {
    GenerationContext container=GenerationContext.createSynthetic(parent,ebag);
    container.cfg.breakCodeOrder(container.prologue,container.epilogue);
    RVMMethod[] targets=inlDec.getTargets();
    byte[] guards=inlDec.getGuards();
    GenerationContext[] children=new GenerationContext[targets.length];
    for (int i=0; i < targets.length; i++) {
      NormalMethod callee=(NormalMethod)targets[i];
      if (parent.options.PRINT_INLINE_REPORT) {
        String guard=guards[i] == OptOptions.IG_CLASS_TEST ? ""String_Node_Str"" : ""String_Node_Str"";
        VM.sysWrite(""String_Node_Str"" + guard + ""String_Node_Str""+ callee+ ""String_Node_Str""+ callSite.position.getMethod()+ ""String_Node_Str""+ callSite.bcIndex+ ""String_Node_Str"");
      }
      children[i]=GenerationContext.createChildContext(parent,ebag,callee,callSite);
      BC2IR.generateHIR(children[i]);
      GenerationContext.transferState(parent,children[i]);
    }
    if (Call.hasResult(callSite)) {
      Register reg=Call.getResult(callSite).getRegister();
      container.result=children[0].result;
      for (int i=1; i < targets.length; i++) {
        if (children[i].result != null) {
          container.result=(container.result == null) ? children[i].result : Operand.meet(container.result,children[i].result,reg);
        }
      }
      if (!inlDec.OSRTestFailed()) {
        RegisterOperand failureCaseResult=Call.getResult(callSite);
        container.result=(container.result == null) ? failureCaseResult : Operand.meet(container.result,failureCaseResult,reg);
      }
    }
    BasicBlock testFailed=new BasicBlock(callSite.bcIndex,callSite.position,parent.cfg);
    testFailed.exceptionHandlers=ebag;
    if (COUNT_FAILED_GUARDS && Controller.options.INSERT_DEBUGGING_COUNTERS) {
      String eventName=""String_Node_Str"" + callSite.position.getMethod().toString();
      Instruction counterInst=AOSDatabase.debuggingCounterData.getCounterInstructionForEvent(eventName);
      testFailed.appendInstruction(counterInst);
    }
    if (inlDec.OSRTestFailed()) {
      Instruction lastOsrBarrier=(Instruction)callSite.scratchObject;
      Instruction s=BC2IR._osrHelper(lastOsrBarrier);
      s.position=callSite.position;
      s.bcIndex=callSite.bcIndex;
      testFailed.appendInstruction(s);
      testFailed.insertOut(parent.exit);
    }
 else {
      Instruction call=callSite.copyWithoutLinks();
      Call.getMethod(call).setIsGuardedInlineOffBranch(true);
      call.bcIndex=callSite.bcIndex;
      call.position=callSite.position;
      testFailed.appendInstruction(call);
      testFailed.insertOut(container.epilogue);
      if (ebag != null) {
        for (BasicBlockEnumeration e=ebag.enumerator(); e.hasMoreElements(); ) {
          BasicBlock handler=e.next();
          testFailed.insertOut(handler);
        }
      }
      testFailed.setCanThrowExceptions();
      testFailed.setMayThrowUncaughtException();
    }
    container.cfg.linkInCodeOrder(testFailed,container.epilogue);
    testFailed.setInfrequent();
    BasicBlock firstIfBlock=testFailed;
    Operand receiver=Call.getParam(callSite,0);
    MethodOperand mo=Call.getMethod(callSite);
    boolean isInterface=mo.isInterface();
    if (isInterface) {
      if (VM.BuildForIMTInterfaceInvocation) {
        RVMType interfaceType=mo.getTarget().getDeclaringClass();
        TypeReference recTypeRef=receiver.getType();
        RVMClass recType=(RVMClass)recTypeRef.peekType();
        boolean requiresImplementsTest=true;
        if (recType != null && recType.isResolved() && !recType.isInterface()) {
          byte doesImplement=ClassLoaderProxy.includesType(interfaceType.getTypeRef(),recTypeRef);
          requiresImplementsTest=doesImplement != OptConstants.YES;
        }
        if (requiresImplementsTest) {
          RegisterOperand checkedReceiver=parent.temps.makeTemp(receiver);
          Instruction dtc=TypeCheck.create(MUST_IMPLEMENT_INTERFACE,checkedReceiver,receiver.copy(),new TypeOperand(interfaceType),Call.getGuard(callSite).copy());
          dtc.copyPosition(callSite);
          checkedReceiver.refine(interfaceType.getTypeRef());
          Call.setParam(callSite,0,checkedReceiver.copyRO());
          testFailed.prependInstruction(dtc);
        }
      }
    }
    for (int i=children.length - 1; i >= 0; i--, testFailed=firstIfBlock) {
      firstIfBlock=new BasicBlock(callSite.bcIndex,callSite.position,parent.cfg);
      firstIfBlock.exceptionHandlers=ebag;
      BasicBlock lastIfBlock=firstIfBlock;
      RVMMethod target=children[i].method;
      Instruction tmp;
      if (isInterface) {
        RVMClass callDeclClass=mo.getTarget().getDeclaringClass();
        if (!callDeclClass.isInterface()) {
          throw new OptimizingCompilerException(""String_Node_Str"");
        }
        byte doesImplement=ClassLoaderProxy.includesType(callDeclClass.getTypeRef(),target.getDeclaringClass().getTypeRef());
        if (doesImplement != OptConstants.YES) {
          if (parent.options.PRINT_INLINE_REPORT) {
            VM.sysWrite(""String_Node_Str"" + callDeclClass + ""String_Node_Str"");
          }
          firstIfBlock=new BasicBlock(callSite.bcIndex,callSite.position,parent.cfg);
          firstIfBlock.exceptionHandlers=ebag;
          RegisterOperand instanceOfResult=parent.temps.makeTempInt();
          tmp=InstanceOf.create(INSTANCEOF_NOTNULL,instanceOfResult,new TypeOperand(callDeclClass),receiver.copy(),Call.getGuard(callSite));
          tmp.copyPosition(callSite);
          firstIfBlock.appendInstruction(tmp);
          tmp=IfCmp.create(INT_IFCMP,parent.temps.makeTempValidation(),instanceOfResult.copyD2U(),new IntConstantOperand(0),ConditionOperand.EQUAL(),testFailed.makeJumpTarget(),BranchProfileOperand.unlikely());
          tmp.copyPosition(callSite);
          firstIfBlock.appendInstruction(tmp);
          firstIfBlock.insertOut(testFailed);
          firstIfBlock.insertOut(lastIfBlock);
          container.cfg.linkInCodeOrder(firstIfBlock,lastIfBlock);
        }
      }
      if (guards[i] == OptOptions.IG_CLASS_TEST) {
        tmp=InlineGuard.create(IG_CLASS_TEST,receiver.copy(),Call.getGuard(callSite).copy(),new TypeOperand(target.getDeclaringClass()),testFailed.makeJumpTarget(),BranchProfileOperand.unlikely());
      }
 else       if (guards[i] == OptOptions.IG_METHOD_TEST) {
        if (isInterface) {
          RegisterOperand t=parent.temps.makeTempInt();
          Instruction test=InstanceOf.create(INSTANCEOF_NOTNULL,t,new TypeOperand(target.getDeclaringClass().getTypeRef()),receiver.copy());
          test.copyPosition(callSite);
          lastIfBlock.appendInstruction(test);
          Instruction cmp=IfCmp.create(INT_IFCMP,parent.temps.makeTempValidation(),t.copyD2U(),new IntConstantOperand(0),ConditionOperand.EQUAL(),testFailed.makeJumpTarget(),BranchProfileOperand.unlikely());
          cmp.copyPosition(callSite);
          lastIfBlock.appendInstruction(cmp);
          BasicBlock subclassTest=new BasicBlock(callSite.bcIndex,callSite.position,parent.cfg);
          lastIfBlock.insertOut(testFailed);
          lastIfBlock.insertOut(subclassTest);
          container.cfg.linkInCodeOrder(lastIfBlock,subclassTest);
          lastIfBlock=subclassTest;
        }
        tmp=InlineGuard.create(IG_METHOD_TEST,receiver.copy(),Call.getGuard(callSite).copy(),MethodOperand.VIRTUAL(target.getMemberRef().asMethodReference(),target),testFailed.makeJumpTarget(),BranchProfileOperand.unlikely());
      }
 else {
        tmp=InlineGuard.create(IG_PATCH_POINT,receiver.copy(),Call.getGuard(callSite).copy(),MethodOperand.VIRTUAL(target.getMemberRef().asMethodReference(),target),testFailed.makeJumpTarget(),inlDec.OSRTestFailed() ? BranchProfileOperand.never() : BranchProfileOperand.unlikely());
      }
      tmp.copyPosition(callSite);
      lastIfBlock.appendInstruction(tmp);
      lastIfBlock.insertOut(testFailed);
      lastIfBlock.insertOut(children[i].prologue);
      container.cfg.linkInCodeOrder(lastIfBlock,children[i].cfg.firstInCodeOrder());
      if (children[i].epilogue != null) {
        children[i].epilogue.appendInstruction(container.epilogue.makeGOTO());
        children[i].epilogue.insertOut(container.epilogue);
      }
      container.cfg.linkInCodeOrder(children[i].cfg.lastInCodeOrder(),testFailed);
    }
    container.prologue.insertOut(testFailed);
    container.cfg.linkInCodeOrder(container.prologue,testFailed);
    return container;
  }
 else {
    if (VM.VerifyAssertions)     VM._assert(inlDec.getNumberOfTargets() == 1);
    NormalMethod callee=(NormalMethod)inlDec.getTargets()[0];
    if (parent.options.PRINT_INLINE_REPORT) {
      VM.sysWrite(""String_Node_Str"" + callee + ""String_Node_Str""+ callSite.position.getMethod()+ ""String_Node_Str""+ callSite.bcIndex+ ""String_Node_Str"");
    }
    GenerationContext child=GenerationContext.createChildContext(parent,ebag,callee,callSite);
    BC2IR.generateHIR(child);
    GenerationContext.transferState(parent,child);
    return child;
  }
}",0.9846672799754675
149790,"/** 
 * Emit code to implement the instanceof bytecode
 * @param type     The LHS type
 */
protected final void emit_instanceof_resolvedClass(RVMClass type){
  int LHSDepth=type.getTypeDepth();
  int LHSId=type.getId();
  popAddr(T0);
  asm.emitCMPAddrI(T0,0);
  ForwardReference isNull=asm.emitForwardBC(EQ);
  ObjectModel.baselineEmitLoadTIB(asm,T0,T0);
  asm.emitLAddr(T0,TIB_SUPERCLASS_IDS_INDEX << LOG_BYTES_IN_ADDRESS,T0);
  ForwardReference outOfBounds=null;
  if (DynamicTypeCheck.MIN_SUPERCLASS_IDS_SIZE <= LHSDepth) {
    asm.emitLIntOffset(T1,T0,ObjectModel.getArrayLengthOffset());
    asm.emitLVAL(T2,LHSDepth);
    asm.emitCMPL(T1,T2);
    outOfBounds=asm.emitForwardBC(LE);
  }
  asm.emitLHZ(T0,LHSDepth << LOG_BYTES_IN_CHAR,T0);
  asm.emitCMPI(T0,LHSId);
  ForwardReference notMatched=asm.emitForwardBC(NE);
  asm.emitLVAL(T0,1);
  ForwardReference done=asm.emitForwardB();
  isNull.resolve(asm);
  if (outOfBounds != null)   outOfBounds.resolve(asm);
  notMatched.resolve(asm);
  asm.emitLVAL(T0,0);
  done.resolve(asm);
  pushInt(T0);
}","/** 
 * Emit code to implement the instanceof bytecode
 * @param type     The LHS type
 */
protected final void emit_instanceof_resolvedClass(RVMClass type){
  int LHSDepth=type.getTypeDepth();
  int LHSId=type.getId();
  popAddr(T0);
  asm.emitCMPAddrI(T0,0);
  ForwardReference isNull=asm.emitForwardBC(EQ);
  ObjectModel.baselineEmitLoadTIB(asm,T0,T0);
  asm.emitLAddr(T0,TIB_SUPERCLASS_IDS_INDEX << LOG_BYTES_IN_ADDRESS,T0);
  ForwardReference outOfBounds=null;
  if (DynamicTypeCheck.MIN_SUPERCLASS_IDS_SIZE <= LHSDepth) {
    asm.emitLIntOffset(T1,T0,ObjectModel.getArrayLengthOffset());
    asm.emitLVAL(T2,LHSDepth);
    asm.emitCMPL(T1,T2);
    outOfBounds=asm.emitForwardBC(LE);
  }
  asm.emitLHZ(T0,LHSDepth << LOG_BYTES_IN_CHAR,T0);
  if (Assembler.fits(LHSId,16)) {
    asm.emitCMPI(T0,LHSId);
  }
 else {
    asm.emitLVAL(T1,LHSId);
    asm.emitCMP(T0,T1);
  }
  ForwardReference notMatched=asm.emitForwardBC(NE);
  asm.emitLVAL(T0,1);
  ForwardReference done=asm.emitForwardB();
  isNull.resolve(asm);
  if (outOfBounds != null)   outOfBounds.resolve(asm);
  notMatched.resolve(asm);
  asm.emitLVAL(T0,0);
  done.resolve(asm);
  pushInt(T0);
}",0.952983725135624
149791,"/** 
 * Emit code to implement the checkcast bytecode
 * @param type   The LHS type
 */
protected final void emit_checkcast_resolvedClass(RVMClass type){
  int LHSDepth=type.getTypeDepth();
  int LHSId=type.getId();
  peekAddr(T0,0);
  asm.emitCMPAddrI(T0,0);
  ForwardReference isNull=asm.emitForwardBC(EQ);
  ObjectModel.baselineEmitLoadTIB(asm,T0,T0);
  asm.emitLAddr(T0,TIB_SUPERCLASS_IDS_INDEX << LOG_BYTES_IN_ADDRESS,T0);
  if (DynamicTypeCheck.MIN_SUPERCLASS_IDS_SIZE <= LHSDepth) {
    asm.emitLIntOffset(T1,T0,ObjectModel.getArrayLengthOffset());
    asm.emitLVAL(T2,LHSDepth);
    asm.emitCMPL(T2,T1);
    ForwardReference fr1=asm.emitForwardBC(LT);
    asm.emitTWI(31,12,TrapConstants.CHECKCAST_TRAP);
    fr1.resolve(asm);
  }
  asm.emitLHZ(T0,LHSDepth << LOG_BYTES_IN_CHAR,T0);
  asm.emitCMPI(T0,LHSId);
  ForwardReference fr2=asm.emitForwardBC(EQ);
  asm.emitTWI(31,12,TrapConstants.CHECKCAST_TRAP);
  fr2.resolve(asm);
  isNull.resolve(asm);
}","/** 
 * Emit code to implement the checkcast bytecode
 * @param type   The LHS type
 */
protected final void emit_checkcast_resolvedClass(RVMClass type){
  int LHSDepth=type.getTypeDepth();
  int LHSId=type.getId();
  peekAddr(T0,0);
  asm.emitCMPAddrI(T0,0);
  ForwardReference isNull=asm.emitForwardBC(EQ);
  ObjectModel.baselineEmitLoadTIB(asm,T0,T0);
  asm.emitLAddr(T0,TIB_SUPERCLASS_IDS_INDEX << LOG_BYTES_IN_ADDRESS,T0);
  if (DynamicTypeCheck.MIN_SUPERCLASS_IDS_SIZE <= LHSDepth) {
    asm.emitLIntOffset(T1,T0,ObjectModel.getArrayLengthOffset());
    asm.emitLVAL(T2,LHSDepth);
    asm.emitCMPL(T2,T1);
    ForwardReference fr1=asm.emitForwardBC(LT);
    asm.emitTWI(31,12,TrapConstants.CHECKCAST_TRAP);
    fr1.resolve(asm);
  }
  asm.emitLHZ(T0,LHSDepth << LOG_BYTES_IN_CHAR,T0);
  if (Assembler.fits(LHSId,16)) {
    asm.emitCMPI(T0,LHSId);
  }
 else {
    asm.emitLVAL(T1,LHSId);
    asm.emitCMP(T0,T1);
  }
  ForwardReference fr2=asm.emitForwardBC(EQ);
  asm.emitTWI(31,12,TrapConstants.CHECKCAST_TRAP);
  fr2.resolve(asm);
  isNull.resolve(asm);
}",0.9485148514851484
149792,"/** 
 * Create an array of a particular type. The easiest way to use this is: Foo[] x = (Foo [])Stream.createDataArray(new Foo[0], numElements);
 * @param templ a data array to use as a template
 * @param numElements number of elements in new array
 * @return the new array
 */
@Interruptible public Object createDataArray(Object templ,int numElements){
  if (org.jikesrvm.VM.BuildWithGCSpy) {
    RVMArray array=Magic.getObjectType(templ).asArray();
    return RuntimeEntrypoints.resolvedNewArray(numElements,array.getLogElementSize(),ObjectModel.computeArrayHeaderSize(array),array.getTypeInformationBlock(),Plan.ALLOC_GCSPY,ObjectModel.getAlignment(array),ObjectModel.getOffsetForAlignment(array),0);
  }
 else {
    return null;
  }
}","/** 
 * Create an array of a particular type. The easiest way to use this is: Foo[] x = (Foo [])Stream.createDataArray(new Foo[0], numElements);
 * @param templ a data array to use as a template
 * @param numElements number of elements in new array
 * @return the new array
 */
@Interruptible public Object createDataArray(Object templ,int numElements){
  if (org.jikesrvm.VM.BuildWithGCSpy) {
    RVMArray array=Magic.getObjectType(templ).asArray();
    return RuntimeEntrypoints.resolvedNewArray(numElements,array.getLogElementSize(),ObjectModel.computeArrayHeaderSize(array),array.getTypeInformationBlock(),Plan.ALLOC_GCSPY,ObjectModel.getAlignment(array),ObjectModel.getOffsetForAlignment(array,false),0);
  }
 else {
    return null;
  }
}",0.9959514170040484
149793,"/** 
 * Emit code to allocate an array
 * @param array the RVMArray to instantiate
 */
@Override protected final void emit_resolved_newarray(RVMArray array){
  int width=array.getLogElementSize();
  Offset tibOffset=array.getTibOffset();
  int headerSize=ObjectModel.computeHeaderSize(array);
  int whichAllocator=MM_Interface.pickAllocator(array,method);
  int site=MM_Interface.getAllocationSite(true);
  int align=ObjectModel.getAlignment(array);
  int offset=ObjectModel.getOffsetForAlignment(array);
  asm.emitPUSH_Imm(width);
  asm.emitPUSH_Imm(headerSize);
  asm.emitPUSH_Abs(Magic.getTocPointer().plus(tibOffset));
  asm.emitPUSH_Imm(whichAllocator);
  asm.emitPUSH_Imm(align);
  asm.emitPUSH_Imm(offset);
  asm.emitPUSH_Imm(site);
  genParameterRegisterLoad(8);
  asm.emitCALL_Abs(Magic.getTocPointer().plus(Entrypoints.resolvedNewArrayMethod.getOffset()));
  asm.emitPUSH_Reg(T0);
}","/** 
 * Emit code to allocate an array
 * @param array the RVMArray to instantiate
 */
@Override protected final void emit_resolved_newarray(RVMArray array){
  int width=array.getLogElementSize();
  Offset tibOffset=array.getTibOffset();
  int headerSize=ObjectModel.computeHeaderSize(array);
  int whichAllocator=MM_Interface.pickAllocator(array,method);
  int site=MM_Interface.getAllocationSite(true);
  int align=ObjectModel.getAlignment(array);
  int offset=ObjectModel.getOffsetForAlignment(array,false);
  asm.emitPUSH_Imm(width);
  asm.emitPUSH_Imm(headerSize);
  asm.emitPUSH_Abs(Magic.getTocPointer().plus(tibOffset));
  asm.emitPUSH_Imm(whichAllocator);
  asm.emitPUSH_Imm(align);
  asm.emitPUSH_Imm(offset);
  asm.emitPUSH_Imm(site);
  genParameterRegisterLoad(8);
  asm.emitCALL_Abs(Magic.getTocPointer().plus(Entrypoints.resolvedNewArrayMethod.getOffset()));
  asm.emitPUSH_Reg(T0);
}",0.9966480446927374
149794,"/** 
 * Emit code to allocate a scalar object
 * @param typeRef the RVMClass to instantiate
 */
@Override protected final void emit_resolved_new(RVMClass typeRef){
  int instanceSize=typeRef.getInstanceSize();
  Offset tibOffset=typeRef.getTibOffset();
  int whichAllocator=MM_Interface.pickAllocator(typeRef,method);
  int align=ObjectModel.getAlignment(typeRef);
  int offset=ObjectModel.getOffsetForAlignment(typeRef);
  int site=MM_Interface.getAllocationSite(true);
  asm.emitPUSH_Imm(instanceSize);
  asm.emitPUSH_Abs(Magic.getTocPointer().plus(tibOffset));
  asm.emitPUSH_Imm(typeRef.hasFinalizer() ? 1 : 0);
  asm.emitPUSH_Imm(whichAllocator);
  asm.emitPUSH_Imm(align);
  asm.emitPUSH_Imm(offset);
  asm.emitPUSH_Imm(site);
  genParameterRegisterLoad(7);
  asm.emitCALL_Abs(Magic.getTocPointer().plus(Entrypoints.resolvedNewScalarMethod.getOffset()));
  asm.emitPUSH_Reg(T0);
}","/** 
 * Emit code to allocate a scalar object
 * @param typeRef the RVMClass to instantiate
 */
@Override protected final void emit_resolved_new(RVMClass typeRef){
  int instanceSize=typeRef.getInstanceSize();
  Offset tibOffset=typeRef.getTibOffset();
  int whichAllocator=MM_Interface.pickAllocator(typeRef,method);
  int align=ObjectModel.getAlignment(typeRef,false);
  int offset=ObjectModel.getOffsetForAlignment(typeRef,false);
  int site=MM_Interface.getAllocationSite(true);
  asm.emitPUSH_Imm(instanceSize);
  asm.emitPUSH_Abs(Magic.getTocPointer().plus(tibOffset));
  asm.emitPUSH_Imm(typeRef.hasFinalizer() ? 1 : 0);
  asm.emitPUSH_Imm(whichAllocator);
  asm.emitPUSH_Imm(align);
  asm.emitPUSH_Imm(offset);
  asm.emitPUSH_Imm(site);
  genParameterRegisterLoad(7);
  asm.emitCALL_Abs(Magic.getTocPointer().plus(Entrypoints.resolvedNewScalarMethod.getOffset()));
  asm.emitPUSH_Reg(T0);
}",0.9932735426008968
149795,"/** 
 * Emit code to allocate an array
 * @param array the RVMArray to instantiate
 */
protected final void emit_resolved_newarray(RVMArray array){
  int width=array.getLogElementSize();
  Offset tibOffset=array.getTibOffset();
  int headerSize=ObjectModel.computeArrayHeaderSize(array);
  int whichAllocator=MM_Interface.pickAllocator(array,method);
  int site=MM_Interface.getAllocationSite(true);
  int align=ObjectModel.getAlignment(array);
  int offset=ObjectModel.getOffsetForAlignment(array);
  asm.emitLAddrToc(T0,Entrypoints.resolvedNewArrayMethod.getOffset());
  asm.emitMTCTR(T0);
  peekInt(T0,0);
  asm.emitLVAL(T5,site);
  asm.emitLVAL(T1,width);
  asm.emitLVAL(T2,headerSize);
  asm.emitLAddrToc(T3,tibOffset);
  asm.emitLVAL(T4,whichAllocator);
  asm.emitLVAL(T5,align);
  asm.emitLVAL(T6,offset);
  asm.emitBCCTRL();
  pokeAddr(T0,0);
}","/** 
 * Emit code to allocate an array
 * @param array the RVMArray to instantiate
 */
protected final void emit_resolved_newarray(RVMArray array){
  int width=array.getLogElementSize();
  Offset tibOffset=array.getTibOffset();
  int headerSize=ObjectModel.computeArrayHeaderSize(array);
  int whichAllocator=MM_Interface.pickAllocator(array,method);
  int site=MM_Interface.getAllocationSite(true);
  int align=ObjectModel.getAlignment(array);
  int offset=ObjectModel.getOffsetForAlignment(array,false);
  asm.emitLAddrToc(T0,Entrypoints.resolvedNewArrayMethod.getOffset());
  asm.emitMTCTR(T0);
  peekInt(T0,0);
  asm.emitLVAL(T5,site);
  asm.emitLVAL(T1,width);
  asm.emitLVAL(T2,headerSize);
  asm.emitLAddrToc(T3,tibOffset);
  asm.emitLVAL(T4,whichAllocator);
  asm.emitLVAL(T5,align);
  asm.emitLVAL(T6,offset);
  asm.emitBCCTRL();
  pokeAddr(T0,0);
}",0.9964912280701754
149796,"/** 
 * Emit code to allocate a scalar object
 * @param typeRef the RVMClass to instantiate
 */
protected final void emit_resolved_new(RVMClass typeRef){
  int instanceSize=typeRef.getInstanceSize();
  Offset tibOffset=typeRef.getTibOffset();
  int whichAllocator=MM_Interface.pickAllocator(typeRef,method);
  int align=ObjectModel.getAlignment(typeRef);
  int offset=ObjectModel.getOffsetForAlignment(typeRef);
  int site=MM_Interface.getAllocationSite(true);
  asm.emitLAddrToc(T0,Entrypoints.resolvedNewScalarMethod.getOffset());
  asm.emitMTCTR(T0);
  asm.emitLVAL(T0,instanceSize);
  asm.emitLAddrToc(T1,tibOffset);
  asm.emitLVAL(T2,typeRef.hasFinalizer() ? 1 : 0);
  asm.emitLVAL(T3,whichAllocator);
  asm.emitLVAL(T4,site);
  asm.emitLVAL(T4,align);
  asm.emitLVAL(T5,offset);
  asm.emitBCCTRL();
  pushAddr(T0);
}","/** 
 * Emit code to allocate a scalar object
 * @param typeRef the RVMClass to instantiate
 */
protected final void emit_resolved_new(RVMClass typeRef){
  int instanceSize=typeRef.getInstanceSize();
  Offset tibOffset=typeRef.getTibOffset();
  int whichAllocator=MM_Interface.pickAllocator(typeRef,method);
  int align=ObjectModel.getAlignment(typeRef);
  int offset=ObjectModel.getOffsetForAlignment(typeRef,false);
  int site=MM_Interface.getAllocationSite(true);
  asm.emitLAddrToc(T0,Entrypoints.resolvedNewScalarMethod.getOffset());
  asm.emitMTCTR(T0);
  asm.emitLVAL(T0,instanceSize);
  asm.emitLAddrToc(T1,tibOffset);
  asm.emitLVAL(T2,typeRef.hasFinalizer() ? 1 : 0);
  asm.emitLVAL(T3,whichAllocator);
  asm.emitLVAL(T4,site);
  asm.emitLVAL(T4,align);
  asm.emitLVAL(T5,offset);
  asm.emitBCCTRL();
  pushAddr(T0);
}",0.9963636363636365
149797,"/** 
 * Given an HIR, expand operators that are implemented as calls to runtime service methods. This method should be called as one of the first steps in lowering HIR into LIR.
 * @param ir  The HIR to expand
 */
public void perform(IR ir){
  ir.gc.resync();
  Instruction next;
  for (Instruction inst=ir.firstInstructionInCodeOrder(); inst != null; inst=next) {
    next=inst.nextInstructionInCodeOrder();
    int opcode=inst.getOpcode();
switch (opcode) {
case NEW_opcode:
{
        TypeOperand Type=New.getClearType(inst);
        RVMClass cls=(RVMClass)Type.getVMType();
        IntConstantOperand hasFinalizer=IRTools.IC(cls.hasFinalizer() ? 1 : 0);
        RVMMethod callSite=inst.position.getMethod();
        IntConstantOperand allocator=IRTools.IC(MM_Interface.pickAllocator(cls,callSite));
        IntConstantOperand align=IRTools.IC(ObjectModel.getAlignment(cls));
        IntConstantOperand offset=IRTools.IC(ObjectModel.getOffsetForAlignment(cls));
        Operand tib=ConvertToLowLevelIR.getTIB(inst,ir,Type);
        if (VM.BuildForIA32 && VM.runningVM) {
          RegisterOperand tmp=ir.regpool.makeTemp(TypeReference.TIB);
          inst.insertBefore(Move.create(REF_MOVE,tmp,tib));
          tib=tmp.copyRO();
        }
        IntConstantOperand site=IRTools.IC(MM_Interface.getAllocationSite(true));
        RVMMethod target=Entrypoints.resolvedNewScalarMethod;
        Call.mutate7(inst,CALL,New.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),IRTools.IC(cls.getInstanceSize()),tib,hasFinalizer,allocator,align,offset,site);
        next=inst.prevInstructionInCodeOrder();
        if (ir.options.INLINE_NEW) {
          if (inst.getBasicBlock().getInfrequent())           container.counter1++;
          container.counter2++;
          if (!ir.options.FREQ_FOCUS_EFFORT || !inst.getBasicBlock().getInfrequent()) {
            inline(inst,ir);
          }
        }
      }
    break;
case NEW_UNRESOLVED_opcode:
{
    int typeRefId=New.getType(inst).getTypeRef().getId();
    RVMMethod target=Entrypoints.unresolvedNewScalarMethod;
    IntConstantOperand site=IRTools.IC(MM_Interface.getAllocationSite(true));
    Call.mutate2(inst,CALL,New.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),IRTools.IC(typeRefId),site);
  }
break;
case NEWARRAY_opcode:
{
TypeOperand Array=NewArray.getClearType(inst);
RVMArray array=(RVMArray)Array.getVMType();
Operand numberElements=NewArray.getClearSize(inst);
boolean inline=numberElements instanceof IntConstantOperand;
Operand width=IRTools.IC(array.getLogElementSize());
Operand headerSize=IRTools.IC(ObjectModel.computeArrayHeaderSize(array));
RVMMethod callSite=inst.position.getMethod();
IntConstantOperand allocator=IRTools.IC(MM_Interface.pickAllocator(array,callSite));
IntConstantOperand align=IRTools.IC(ObjectModel.getAlignment(array));
IntConstantOperand offset=IRTools.IC(ObjectModel.getOffsetForAlignment(array));
Operand tib=ConvertToLowLevelIR.getTIB(inst,ir,Array);
if (VM.BuildForIA32 && VM.runningVM) {
  RegisterOperand tmp=ir.regpool.makeTemp(TypeReference.TIB);
  inst.insertBefore(Move.create(REF_MOVE,tmp,tib));
  tib=tmp.copyRO();
}
IntConstantOperand site=IRTools.IC(MM_Interface.getAllocationSite(true));
RVMMethod target=Entrypoints.resolvedNewArrayMethod;
Call.mutate8(inst,CALL,NewArray.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),numberElements,width,headerSize,tib,allocator,align,offset,site);
next=inst.prevInstructionInCodeOrder();
if (inline && ir.options.INLINE_NEW) {
  if (inst.getBasicBlock().getInfrequent())   container.counter1++;
  container.counter2++;
  if (!ir.options.FREQ_FOCUS_EFFORT || !inst.getBasicBlock().getInfrequent()) {
    inline(inst,ir);
  }
}
}
break;
case NEWARRAY_UNRESOLVED_opcode:
{
int typeRefId=NewArray.getType(inst).getTypeRef().getId();
Operand numberElements=NewArray.getClearSize(inst);
RVMMethod target=Entrypoints.unresolvedNewArrayMethod;
IntConstantOperand site=IRTools.IC(MM_Interface.getAllocationSite(true));
Call.mutate3(inst,CALL,NewArray.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),numberElements,IRTools.IC(typeRefId),site);
}
break;
case NEWOBJMULTIARRAY_opcode:
{
int dimensions=Multianewarray.getNumberOfDimensions(inst);
RVMMethod callSite=inst.position.getMethod();
int typeRefId=Multianewarray.getType(inst).getTypeRef().getId();
if (dimensions == 2) {
RVMMethod target=Entrypoints.optNew2DArrayMethod;
Call.mutate4(inst,CALL,Multianewarray.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),IRTools.IC(callSite.getId()),Multianewarray.getClearDimension(inst,0),Multianewarray.getClearDimension(inst,1),IRTools.IC(typeRefId));
}
 else {
TypeOperand dimArrayType=new TypeOperand(RVMArray.IntArray);
RegisterOperand dimArray=ir.regpool.makeTemp(TypeReference.IntArray);
dimArray.setPreciseType();
next=NewArray.create(NEWARRAY,dimArray,dimArrayType,new IntConstantOperand(dimensions));
inst.insertBefore(next);
for (int i=0; i < dimensions; i++) {
LocationOperand loc=new LocationOperand(TypeReference.Int);
inst.insertBefore(AStore.create(INT_ASTORE,Multianewarray.getClearDimension(inst,i),dimArray.copyD2U(),IRTools.IC(i),loc,IRTools.TG()));
}
RVMMethod target=Entrypoints.optNewArrayArrayMethod;
Call.mutate3(inst,CALL,Multianewarray.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),IRTools.IC(callSite.getId()),dimArray.copyD2U(),IRTools.IC(typeRefId));
}
}
break;
case ATHROW_opcode:
{
RVMMethod target=Entrypoints.athrowMethod;
MethodOperand methodOp=MethodOperand.STATIC(target);
methodOp.setIsNonReturningCall(true);
Call.mutate1(inst,CALL,null,IRTools.AC(target.getOffset()),methodOp,Athrow.getClearValue(inst));
}
break;
case MONITORENTER_opcode:
{
if (ir.options.NO_SYNCHRO) {
inst.remove();
}
 else {
Operand ref=MonitorOp.getClearRef(inst);
RVMType refType=ref.getType().peekType();
if (refType != null && !refType.getThinLockOffset().isMax()) {
RVMMethod target=Entrypoints.inlineLockMethod;
Call.mutate2(inst,CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),MonitorOp.getClearGuard(inst),ref,IRTools.AC(refType.getThinLockOffset()));
if (inst.getBasicBlock().getInfrequent()) container.counter1++;
container.counter2++;
if (!ir.options.FREQ_FOCUS_EFFORT || !inst.getBasicBlock().getInfrequent()) {
inline(inst,ir);
}
}
 else {
RVMMethod target=Entrypoints.lockMethod;
Call.mutate1(inst,CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),MonitorOp.getClearGuard(inst),ref);
}
}
break;
}
case MONITOREXIT_opcode:
{
if (ir.options.NO_SYNCHRO) {
inst.remove();
}
 else {
Operand ref=MonitorOp.getClearRef(inst);
RVMType refType=ref.getType().peekType();
if (refType != null && !refType.getThinLockOffset().isMax()) {
RVMMethod target=Entrypoints.inlineUnlockMethod;
Call.mutate2(inst,CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),MonitorOp.getClearGuard(inst),ref,IRTools.AC(refType.getThinLockOffset()));
if (inst.getBasicBlock().getInfrequent()) container.counter1++;
container.counter2++;
if (!ir.options.FREQ_FOCUS_EFFORT || !inst.getBasicBlock().getInfrequent()) {
inline(inst,ir);
}
}
 else {
RVMMethod target=Entrypoints.unlockMethod;
Call.mutate1(inst,CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),MonitorOp.getClearGuard(inst),ref);
}
}
}
break;
case REF_ASTORE_opcode:
{
if (MM_Constants.NEEDS_WRITE_BARRIER) {
RVMMethod target=Entrypoints.arrayStoreWriteBarrierMethod;
Instruction wb=Call.create3(CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),AStore.getClearGuard(inst),AStore.getArray(inst).copy(),AStore.getIndex(inst).copy(),AStore.getValue(inst).copy());
wb.bcIndex=RUNTIME_SERVICES_BCI;
wb.position=inst.position;
inst.replace(wb);
next=wb.prevInstructionInCodeOrder();
if (ir.options.INLINE_WRITE_BARRIER) {
inline(wb,ir,true);
}
}
}
break;
case REF_ALOAD_opcode:
{
if (MM_Constants.NEEDS_READ_BARRIER) {
RVMMethod target=Entrypoints.arrayLoadReadBarrierMethod;
Instruction rb=Call.create2(CALL,ALoad.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),ALoad.getClearGuard(inst),ALoad.getArray(inst).copy(),ALoad.getIndex(inst).copy());
rb.bcIndex=RUNTIME_SERVICES_BCI;
rb.position=inst.position;
inst.replace(rb);
next=rb.prevInstructionInCodeOrder();
inline(rb,ir,true);
}
}
break;
case PUTFIELD_opcode:
{
if (MM_Constants.NEEDS_WRITE_BARRIER) {
LocationOperand loc=PutField.getLocation(inst);
FieldReference fieldRef=loc.getFieldRef();
if (!fieldRef.getFieldContentsType().isPrimitiveType()) {
RVMField field=fieldRef.peekResolvedField();
if (field == null || !field.isUntraced()) {
RVMMethod target=Entrypoints.putfieldWriteBarrierMethod;
Instruction wb=Call.create4(CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),PutField.getClearGuard(inst),PutField.getRef(inst).copy(),PutField.getOffset(inst).copy(),PutField.getValue(inst).copy(),IRTools.IC(fieldRef.getId()));
wb.bcIndex=RUNTIME_SERVICES_BCI;
wb.position=inst.position;
inst.replace(wb);
next=wb.prevInstructionInCodeOrder();
if (ir.options.INLINE_WRITE_BARRIER) {
inline(wb,ir,true);
}
}
}
}
}
break;
case GETFIELD_opcode:
{
if (MM_Constants.NEEDS_READ_BARRIER) {
LocationOperand loc=GetField.getLocation(inst);
FieldReference fieldRef=loc.getFieldRef();
if (GetField.getResult(inst).getType().isReferenceType()) {
RVMField field=fieldRef.peekResolvedField();
if (field == null || !field.isUntraced()) {
RVMMethod target=Entrypoints.getfieldReadBarrierMethod;
Instruction rb=Call.create3(CALL,GetField.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),GetField.getClearGuard(inst),GetField.getRef(inst).copy(),GetField.getOffset(inst).copy(),IRTools.IC(fieldRef.getId()));
rb.bcIndex=RUNTIME_SERVICES_BCI;
rb.position=inst.position;
inst.replace(rb);
next=rb.prevInstructionInCodeOrder();
inline(rb,ir,true);
}
}
}
}
break;
case PUTSTATIC_opcode:
{
if (MM_Constants.NEEDS_PUTSTATIC_WRITE_BARRIER) {
LocationOperand loc=PutStatic.getLocation(inst);
FieldReference field=loc.getFieldRef();
if (!field.getFieldContentsType().isPrimitiveType()) {
RVMMethod target=Entrypoints.putstaticWriteBarrierMethod;
Instruction wb=Call.create3(CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),PutStatic.getOffset(inst).copy(),PutStatic.getValue(inst).copy(),IRTools.IC(field.getId()));
wb.bcIndex=RUNTIME_SERVICES_BCI;
wb.position=inst.position;
inst.replace(wb);
next=wb.prevInstructionInCodeOrder();
if (ir.options.INLINE_WRITE_BARRIER) {
inline(wb,ir,true);
}
}
}
}
break;
case GETSTATIC_opcode:
{
if (MM_Constants.NEEDS_GETSTATIC_READ_BARRIER) {
LocationOperand loc=GetStatic.getLocation(inst);
FieldReference field=loc.getFieldRef();
if (!field.getFieldContentsType().isPrimitiveType()) {
RVMMethod target=Entrypoints.getstaticReadBarrierMethod;
Instruction rb=Call.create2(CALL,GetStatic.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),GetStatic.getOffset(inst).copy(),IRTools.IC(field.getId()));
rb.bcIndex=RUNTIME_SERVICES_BCI;
rb.position=inst.position;
inst.replace(rb);
next=rb.prevInstructionInCodeOrder();
inline(rb,ir,true);
}
}
}
break;
default :
break;
}
}
if (didSomething) {
branchOpts.perform(ir,true);
_os.perform(ir);
}
ir.gc.close();
}","/** 
 * Given an HIR, expand operators that are implemented as calls to runtime service methods. This method should be called as one of the first steps in lowering HIR into LIR.
 * @param ir  The HIR to expand
 */
public void perform(IR ir){
  ir.gc.resync();
  Instruction next;
  for (Instruction inst=ir.firstInstructionInCodeOrder(); inst != null; inst=next) {
    next=inst.nextInstructionInCodeOrder();
    int opcode=inst.getOpcode();
switch (opcode) {
case NEW_opcode:
{
        TypeOperand Type=New.getClearType(inst);
        RVMClass cls=(RVMClass)Type.getVMType();
        IntConstantOperand hasFinalizer=IRTools.IC(cls.hasFinalizer() ? 1 : 0);
        RVMMethod callSite=inst.position.getMethod();
        IntConstantOperand allocator=IRTools.IC(MM_Interface.pickAllocator(cls,callSite));
        IntConstantOperand align=IRTools.IC(ObjectModel.getAlignment(cls));
        IntConstantOperand offset=IRTools.IC(ObjectModel.getOffsetForAlignment(cls,false));
        Operand tib=ConvertToLowLevelIR.getTIB(inst,ir,Type);
        if (VM.BuildForIA32 && VM.runningVM) {
          RegisterOperand tmp=ir.regpool.makeTemp(TypeReference.TIB);
          inst.insertBefore(Move.create(REF_MOVE,tmp,tib));
          tib=tmp.copyRO();
        }
        IntConstantOperand site=IRTools.IC(MM_Interface.getAllocationSite(true));
        RVMMethod target=Entrypoints.resolvedNewScalarMethod;
        Call.mutate7(inst,CALL,New.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),IRTools.IC(cls.getInstanceSize()),tib,hasFinalizer,allocator,align,offset,site);
        next=inst.prevInstructionInCodeOrder();
        if (ir.options.INLINE_NEW) {
          if (inst.getBasicBlock().getInfrequent())           container.counter1++;
          container.counter2++;
          if (!ir.options.FREQ_FOCUS_EFFORT || !inst.getBasicBlock().getInfrequent()) {
            inline(inst,ir);
          }
        }
      }
    break;
case NEW_UNRESOLVED_opcode:
{
    int typeRefId=New.getType(inst).getTypeRef().getId();
    RVMMethod target=Entrypoints.unresolvedNewScalarMethod;
    IntConstantOperand site=IRTools.IC(MM_Interface.getAllocationSite(true));
    Call.mutate2(inst,CALL,New.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),IRTools.IC(typeRefId),site);
  }
break;
case NEWARRAY_opcode:
{
TypeOperand Array=NewArray.getClearType(inst);
RVMArray array=(RVMArray)Array.getVMType();
Operand numberElements=NewArray.getClearSize(inst);
boolean inline=numberElements instanceof IntConstantOperand;
Operand width=IRTools.IC(array.getLogElementSize());
Operand headerSize=IRTools.IC(ObjectModel.computeArrayHeaderSize(array));
RVMMethod callSite=inst.position.getMethod();
IntConstantOperand allocator=IRTools.IC(MM_Interface.pickAllocator(array,callSite));
IntConstantOperand align=IRTools.IC(ObjectModel.getAlignment(array));
IntConstantOperand offset=IRTools.IC(ObjectModel.getOffsetForAlignment(array,false));
Operand tib=ConvertToLowLevelIR.getTIB(inst,ir,Array);
if (VM.BuildForIA32 && VM.runningVM) {
  RegisterOperand tmp=ir.regpool.makeTemp(TypeReference.TIB);
  inst.insertBefore(Move.create(REF_MOVE,tmp,tib));
  tib=tmp.copyRO();
}
IntConstantOperand site=IRTools.IC(MM_Interface.getAllocationSite(true));
RVMMethod target=Entrypoints.resolvedNewArrayMethod;
Call.mutate8(inst,CALL,NewArray.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),numberElements,width,headerSize,tib,allocator,align,offset,site);
next=inst.prevInstructionInCodeOrder();
if (inline && ir.options.INLINE_NEW) {
  if (inst.getBasicBlock().getInfrequent())   container.counter1++;
  container.counter2++;
  if (!ir.options.FREQ_FOCUS_EFFORT || !inst.getBasicBlock().getInfrequent()) {
    inline(inst,ir);
  }
}
}
break;
case NEWARRAY_UNRESOLVED_opcode:
{
int typeRefId=NewArray.getType(inst).getTypeRef().getId();
Operand numberElements=NewArray.getClearSize(inst);
RVMMethod target=Entrypoints.unresolvedNewArrayMethod;
IntConstantOperand site=IRTools.IC(MM_Interface.getAllocationSite(true));
Call.mutate3(inst,CALL,NewArray.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),numberElements,IRTools.IC(typeRefId),site);
}
break;
case NEWOBJMULTIARRAY_opcode:
{
int dimensions=Multianewarray.getNumberOfDimensions(inst);
RVMMethod callSite=inst.position.getMethod();
int typeRefId=Multianewarray.getType(inst).getTypeRef().getId();
if (dimensions == 2) {
RVMMethod target=Entrypoints.optNew2DArrayMethod;
Call.mutate4(inst,CALL,Multianewarray.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),IRTools.IC(callSite.getId()),Multianewarray.getClearDimension(inst,0),Multianewarray.getClearDimension(inst,1),IRTools.IC(typeRefId));
}
 else {
TypeOperand dimArrayType=new TypeOperand(RVMArray.IntArray);
RegisterOperand dimArray=ir.regpool.makeTemp(TypeReference.IntArray);
dimArray.setPreciseType();
next=NewArray.create(NEWARRAY,dimArray,dimArrayType,new IntConstantOperand(dimensions));
inst.insertBefore(next);
for (int i=0; i < dimensions; i++) {
LocationOperand loc=new LocationOperand(TypeReference.Int);
inst.insertBefore(AStore.create(INT_ASTORE,Multianewarray.getClearDimension(inst,i),dimArray.copyD2U(),IRTools.IC(i),loc,IRTools.TG()));
}
RVMMethod target=Entrypoints.optNewArrayArrayMethod;
Call.mutate3(inst,CALL,Multianewarray.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),IRTools.IC(callSite.getId()),dimArray.copyD2U(),IRTools.IC(typeRefId));
}
}
break;
case ATHROW_opcode:
{
RVMMethod target=Entrypoints.athrowMethod;
MethodOperand methodOp=MethodOperand.STATIC(target);
methodOp.setIsNonReturningCall(true);
Call.mutate1(inst,CALL,null,IRTools.AC(target.getOffset()),methodOp,Athrow.getClearValue(inst));
}
break;
case MONITORENTER_opcode:
{
if (ir.options.NO_SYNCHRO) {
inst.remove();
}
 else {
Operand ref=MonitorOp.getClearRef(inst);
RVMType refType=ref.getType().peekType();
if (refType != null && !refType.getThinLockOffset().isMax()) {
RVMMethod target=Entrypoints.inlineLockMethod;
Call.mutate2(inst,CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),MonitorOp.getClearGuard(inst),ref,IRTools.AC(refType.getThinLockOffset()));
if (inst.getBasicBlock().getInfrequent()) container.counter1++;
container.counter2++;
if (!ir.options.FREQ_FOCUS_EFFORT || !inst.getBasicBlock().getInfrequent()) {
inline(inst,ir);
}
}
 else {
RVMMethod target=Entrypoints.lockMethod;
Call.mutate1(inst,CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),MonitorOp.getClearGuard(inst),ref);
}
}
break;
}
case MONITOREXIT_opcode:
{
if (ir.options.NO_SYNCHRO) {
inst.remove();
}
 else {
Operand ref=MonitorOp.getClearRef(inst);
RVMType refType=ref.getType().peekType();
if (refType != null && !refType.getThinLockOffset().isMax()) {
RVMMethod target=Entrypoints.inlineUnlockMethod;
Call.mutate2(inst,CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),MonitorOp.getClearGuard(inst),ref,IRTools.AC(refType.getThinLockOffset()));
if (inst.getBasicBlock().getInfrequent()) container.counter1++;
container.counter2++;
if (!ir.options.FREQ_FOCUS_EFFORT || !inst.getBasicBlock().getInfrequent()) {
inline(inst,ir);
}
}
 else {
RVMMethod target=Entrypoints.unlockMethod;
Call.mutate1(inst,CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),MonitorOp.getClearGuard(inst),ref);
}
}
}
break;
case REF_ASTORE_opcode:
{
if (MM_Constants.NEEDS_WRITE_BARRIER) {
RVMMethod target=Entrypoints.arrayStoreWriteBarrierMethod;
Instruction wb=Call.create3(CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),AStore.getClearGuard(inst),AStore.getArray(inst).copy(),AStore.getIndex(inst).copy(),AStore.getValue(inst).copy());
wb.bcIndex=RUNTIME_SERVICES_BCI;
wb.position=inst.position;
inst.replace(wb);
next=wb.prevInstructionInCodeOrder();
if (ir.options.INLINE_WRITE_BARRIER) {
inline(wb,ir,true);
}
}
}
break;
case REF_ALOAD_opcode:
{
if (MM_Constants.NEEDS_READ_BARRIER) {
RVMMethod target=Entrypoints.arrayLoadReadBarrierMethod;
Instruction rb=Call.create2(CALL,ALoad.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),ALoad.getClearGuard(inst),ALoad.getArray(inst).copy(),ALoad.getIndex(inst).copy());
rb.bcIndex=RUNTIME_SERVICES_BCI;
rb.position=inst.position;
inst.replace(rb);
next=rb.prevInstructionInCodeOrder();
inline(rb,ir,true);
}
}
break;
case PUTFIELD_opcode:
{
if (MM_Constants.NEEDS_WRITE_BARRIER) {
LocationOperand loc=PutField.getLocation(inst);
FieldReference fieldRef=loc.getFieldRef();
if (!fieldRef.getFieldContentsType().isPrimitiveType()) {
RVMField field=fieldRef.peekResolvedField();
if (field == null || !field.isUntraced()) {
RVMMethod target=Entrypoints.putfieldWriteBarrierMethod;
Instruction wb=Call.create4(CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),PutField.getClearGuard(inst),PutField.getRef(inst).copy(),PutField.getOffset(inst).copy(),PutField.getValue(inst).copy(),IRTools.IC(fieldRef.getId()));
wb.bcIndex=RUNTIME_SERVICES_BCI;
wb.position=inst.position;
inst.replace(wb);
next=wb.prevInstructionInCodeOrder();
if (ir.options.INLINE_WRITE_BARRIER) {
inline(wb,ir,true);
}
}
}
}
}
break;
case GETFIELD_opcode:
{
if (MM_Constants.NEEDS_READ_BARRIER) {
LocationOperand loc=GetField.getLocation(inst);
FieldReference fieldRef=loc.getFieldRef();
if (GetField.getResult(inst).getType().isReferenceType()) {
RVMField field=fieldRef.peekResolvedField();
if (field == null || !field.isUntraced()) {
RVMMethod target=Entrypoints.getfieldReadBarrierMethod;
Instruction rb=Call.create3(CALL,GetField.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),GetField.getClearGuard(inst),GetField.getRef(inst).copy(),GetField.getOffset(inst).copy(),IRTools.IC(fieldRef.getId()));
rb.bcIndex=RUNTIME_SERVICES_BCI;
rb.position=inst.position;
inst.replace(rb);
next=rb.prevInstructionInCodeOrder();
inline(rb,ir,true);
}
}
}
}
break;
case PUTSTATIC_opcode:
{
if (MM_Constants.NEEDS_PUTSTATIC_WRITE_BARRIER) {
LocationOperand loc=PutStatic.getLocation(inst);
FieldReference field=loc.getFieldRef();
if (!field.getFieldContentsType().isPrimitiveType()) {
RVMMethod target=Entrypoints.putstaticWriteBarrierMethod;
Instruction wb=Call.create3(CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),PutStatic.getOffset(inst).copy(),PutStatic.getValue(inst).copy(),IRTools.IC(field.getId()));
wb.bcIndex=RUNTIME_SERVICES_BCI;
wb.position=inst.position;
inst.replace(wb);
next=wb.prevInstructionInCodeOrder();
if (ir.options.INLINE_WRITE_BARRIER) {
inline(wb,ir,true);
}
}
}
}
break;
case GETSTATIC_opcode:
{
if (MM_Constants.NEEDS_GETSTATIC_READ_BARRIER) {
LocationOperand loc=GetStatic.getLocation(inst);
FieldReference field=loc.getFieldRef();
if (!field.getFieldContentsType().isPrimitiveType()) {
RVMMethod target=Entrypoints.getstaticReadBarrierMethod;
Instruction rb=Call.create2(CALL,GetStatic.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),GetStatic.getOffset(inst).copy(),IRTools.IC(field.getId()));
rb.bcIndex=RUNTIME_SERVICES_BCI;
rb.position=inst.position;
inst.replace(rb);
next=rb.prevInstructionInCodeOrder();
inline(rb,ir,true);
}
}
}
break;
default :
break;
}
}
if (didSomething) {
branchOpts.perform(ir,true);
_os.perform(ir);
}
ir.gc.close();
}",0.9994708061386488
149798,"/** 
 * Allocate a non moving int array
 * @param size The size of the array
 */
@Inline @Interruptible public static int[] newNonMovingIntArray(int size){
  if (!VM.runningVM) {
    return new int[size];
  }
  RVMArray arrayType=RVMArray.IntArray;
  int headerSize=ObjectModel.computeArrayHeaderSize(arrayType);
  int align=ObjectModel.getAlignment(arrayType);
  int offset=ObjectModel.getOffsetForAlignment(arrayType);
  int width=arrayType.getLogElementSize();
  TIB arrayTib=arrayType.getTypeInformationBlock();
  return (int[])allocateArray(size,width,headerSize,arrayTib,Plan.ALLOC_NON_MOVING,align,offset,Plan.DEFAULT_SITE);
}","/** 
 * Allocate a non moving int array
 * @param size The size of the array
 */
@Inline @Interruptible public static int[] newNonMovingIntArray(int size){
  if (!VM.runningVM) {
    return new int[size];
  }
  RVMArray arrayType=RVMArray.IntArray;
  int headerSize=ObjectModel.computeArrayHeaderSize(arrayType);
  int align=ObjectModel.getAlignment(arrayType);
  int offset=ObjectModel.getOffsetForAlignment(arrayType,false);
  int width=arrayType.getLogElementSize();
  TIB arrayTib=arrayType.getTypeInformationBlock();
  return (int[])allocateArray(size,width,headerSize,arrayTib,Plan.ALLOC_NON_MOVING,align,offset,Plan.DEFAULT_SITE);
}",0.9952830188679244
149799,"/** 
 * Allocate a new runtime table (at runtime)
 * @param size The size of the table.
 * @return the newly allocated table
 */
@Inline @Interruptible public static Object newRuntimeTable(int size,RVMType type){
  if (VM.VerifyAssertions)   VM._assert(VM.runningVM);
  TIB realTib=type.getTypeInformationBlock();
  RVMArray fakeType=RVMType.WordArrayType;
  TIB fakeTib=fakeType.getTypeInformationBlock();
  int headerSize=ObjectModel.computeArrayHeaderSize(fakeType);
  int align=ObjectModel.getAlignment(fakeType);
  int offset=ObjectModel.getOffsetForAlignment(fakeType);
  int width=fakeType.getLogElementSize();
  Object array=allocateArray(size,width,headerSize,fakeTib,type.getMMAllocator(),align,offset,Plan.DEFAULT_SITE);
  ObjectModel.setTIB(array,realTib);
  return array;
}","/** 
 * Allocate a new runtime table (at runtime)
 * @param size The size of the table.
 * @return the newly allocated table
 */
@Inline @Interruptible public static Object newRuntimeTable(int size,RVMType type){
  if (VM.VerifyAssertions)   VM._assert(VM.runningVM);
  TIB realTib=type.getTypeInformationBlock();
  RVMArray fakeType=RVMType.WordArrayType;
  TIB fakeTib=fakeType.getTypeInformationBlock();
  int headerSize=ObjectModel.computeArrayHeaderSize(fakeType);
  int align=ObjectModel.getAlignment(fakeType);
  int offset=ObjectModel.getOffsetForAlignment(fakeType,false);
  int width=fakeType.getLogElementSize();
  Object array=allocateArray(size,width,headerSize,fakeTib,type.getMMAllocator(),align,offset,Plan.DEFAULT_SITE);
  ObjectModel.setTIB(array,realTib);
  return array;
}",0.9961977186311788
149800,"/** 
 * Allocate a stack
 * @param bytes    The number of bytes to allocate
 * @param immortal  Is the stack immortal and non-moving?
 * @return The stack
 */
@Inline @Interruptible public static byte[] newStack(int bytes,boolean immortal){
  if (!VM.runningVM) {
    return new byte[bytes];
  }
 else {
    RVMArray stackType=RVMArray.ByteArray;
    int headerSize=ObjectModel.computeArrayHeaderSize(stackType);
    int align=ObjectModel.getAlignment(stackType);
    int offset=ObjectModel.getOffsetForAlignment(stackType);
    int width=stackType.getLogElementSize();
    TIB stackTib=stackType.getTypeInformationBlock();
    return (byte[])allocateArray(bytes,width,headerSize,stackTib,(immortal ? Plan.ALLOC_IMMORTAL_STACK : Plan.ALLOC_STACK),align,offset,Plan.DEFAULT_SITE);
  }
}","/** 
 * Allocate a stack
 * @param bytes    The number of bytes to allocate
 * @param immortal  Is the stack immortal and non-moving?
 * @return The stack
 */
@Inline @Interruptible public static byte[] newStack(int bytes,boolean immortal){
  if (!VM.runningVM) {
    return new byte[bytes];
  }
 else {
    RVMArray stackType=RVMArray.ByteArray;
    int headerSize=ObjectModel.computeArrayHeaderSize(stackType);
    int align=ObjectModel.getAlignment(stackType);
    int offset=ObjectModel.getOffsetForAlignment(stackType,false);
    int width=stackType.getLogElementSize();
    TIB stackTib=stackType.getTypeInformationBlock();
    return (byte[])allocateArray(bytes,width,headerSize,stackTib,(immortal ? Plan.ALLOC_IMMORTAL_STACK : Plan.ALLOC_STACK),align,offset,Plan.DEFAULT_SITE);
  }
}",0.9961928934010152
149801,"/** 
 * Allocate a CodeArray into a code space. Currently the interface is fairly primitive; just the number of instructions in the code array and a boolean to indicate hot or cold code.
 * @param numInstrs number of instructions
 * @param isHot is this a request for hot code space allocation?
 * @return The  array
 */
@Interruptible public static CodeArray allocateCode(int numInstrs,boolean isHot){
  RVMArray type=RVMType.CodeArrayType;
  int headerSize=ObjectModel.computeArrayHeaderSize(type);
  int align=ObjectModel.getAlignment(type);
  int offset=ObjectModel.getOffsetForAlignment(type);
  int width=type.getLogElementSize();
  TIB tib=type.getTypeInformationBlock();
  int allocator=isHot ? Plan.ALLOC_HOT_CODE : Plan.ALLOC_COLD_CODE;
  return (CodeArray)allocateArray(numInstrs,width,headerSize,tib,allocator,align,offset,Plan.DEFAULT_SITE);
}","/** 
 * Allocate a CodeArray into a code space. Currently the interface is fairly primitive; just the number of instructions in the code array and a boolean to indicate hot or cold code.
 * @param numInstrs number of instructions
 * @param isHot is this a request for hot code space allocation?
 * @return The  array
 */
@Interruptible public static CodeArray allocateCode(int numInstrs,boolean isHot){
  RVMArray type=RVMType.CodeArrayType;
  int headerSize=ObjectModel.computeArrayHeaderSize(type);
  int align=ObjectModel.getAlignment(type);
  int offset=ObjectModel.getOffsetForAlignment(type,false);
  int width=type.getLogElementSize();
  TIB tib=type.getTypeInformationBlock();
  int allocator=isHot ? Plan.ALLOC_HOT_CODE : Plan.ALLOC_COLD_CODE;
  return (CodeArray)allocateArray(numInstrs,width,headerSize,tib,allocator,align,offset,Plan.DEFAULT_SITE);
}",0.9965075669383004
149802,"/** 
 * Allocate a non moving double array
 * @param size The size of the array
 */
@Inline @Interruptible public static double[] newNonMovingDoubleArray(int size){
  if (!VM.runningVM) {
    return new double[size];
  }
  RVMArray arrayType=RVMArray.DoubleArray;
  int headerSize=ObjectModel.computeArrayHeaderSize(arrayType);
  int align=ObjectModel.getAlignment(arrayType);
  int offset=ObjectModel.getOffsetForAlignment(arrayType);
  int width=arrayType.getLogElementSize();
  TIB arrayTib=arrayType.getTypeInformationBlock();
  return (double[])allocateArray(size,width,headerSize,arrayTib,Plan.ALLOC_NON_MOVING,align,offset,Plan.DEFAULT_SITE);
}","/** 
 * Allocate a non moving double array
 * @param size The size of the array
 */
@Inline @Interruptible public static double[] newNonMovingDoubleArray(int size){
  if (!VM.runningVM) {
    return new double[size];
  }
  RVMArray arrayType=RVMArray.DoubleArray;
  int headerSize=ObjectModel.computeArrayHeaderSize(arrayType);
  int align=ObjectModel.getAlignment(arrayType);
  int offset=ObjectModel.getOffsetForAlignment(arrayType,false);
  int width=arrayType.getLogElementSize();
  TIB arrayTib=arrayType.getTypeInformationBlock();
  return (double[])allocateArray(size,width,headerSize,arrayTib,Plan.ALLOC_NON_MOVING,align,offset,Plan.DEFAULT_SITE);
}",0.9954128440366972
149803,"/** 
 * Allocate a non moving word array
 * @param size The size of the array
 */
@Inline @Interruptible public static WordArray newNonMovingWordArray(int size){
  if (!VM.runningVM) {
    return WordArray.create(size);
  }
  RVMArray arrayType=RVMType.WordArrayType;
  int headerSize=ObjectModel.computeArrayHeaderSize(arrayType);
  int align=ObjectModel.getAlignment(arrayType);
  int offset=ObjectModel.getOffsetForAlignment(arrayType);
  int width=arrayType.getLogElementSize();
  TIB arrayTib=arrayType.getTypeInformationBlock();
  return (WordArray)allocateArray(size,width,headerSize,arrayTib,Plan.ALLOC_NON_MOVING,align,offset,Plan.DEFAULT_SITE);
}","/** 
 * Allocate a non moving word array
 * @param size The size of the array
 */
@Inline @Interruptible public static WordArray newNonMovingWordArray(int size){
  if (!VM.runningVM) {
    return WordArray.create(size);
  }
  RVMArray arrayType=RVMType.WordArrayType;
  int headerSize=ObjectModel.computeArrayHeaderSize(arrayType);
  int align=ObjectModel.getAlignment(arrayType);
  int offset=ObjectModel.getOffsetForAlignment(arrayType,false);
  int width=arrayType.getLogElementSize();
  TIB arrayTib=arrayType.getTypeInformationBlock();
  return (WordArray)allocateArray(size,width,headerSize,arrayTib,Plan.ALLOC_NON_MOVING,align,offset,Plan.DEFAULT_SITE);
}",0.9954476479514416
149804,"/** 
 * Allocate a non moving int array
 * @param size The size of the array
 */
@Inline @Interruptible public static short[] newNonMovingShortArray(int size){
  if (!VM.runningVM) {
    return new short[size];
  }
  RVMArray arrayType=RVMArray.ShortArray;
  int headerSize=ObjectModel.computeArrayHeaderSize(arrayType);
  int align=ObjectModel.getAlignment(arrayType);
  int offset=ObjectModel.getOffsetForAlignment(arrayType);
  int width=arrayType.getLogElementSize();
  TIB arrayTib=arrayType.getTypeInformationBlock();
  return (short[])allocateArray(size,width,headerSize,arrayTib,Plan.ALLOC_NON_MOVING,align,offset,Plan.DEFAULT_SITE);
}","/** 
 * Allocate a non moving int array
 * @param size The size of the array
 */
@Inline @Interruptible public static short[] newNonMovingShortArray(int size){
  if (!VM.runningVM) {
    return new short[size];
  }
  RVMArray arrayType=RVMArray.ShortArray;
  int headerSize=ObjectModel.computeArrayHeaderSize(arrayType);
  int align=ObjectModel.getAlignment(arrayType);
  int offset=ObjectModel.getOffsetForAlignment(arrayType,false);
  int width=arrayType.getLogElementSize();
  TIB arrayTib=arrayType.getTypeInformationBlock();
  return (short[])allocateArray(size,width,headerSize,arrayTib,Plan.ALLOC_NON_MOVING,align,offset,Plan.DEFAULT_SITE);
}",0.9953560371517028
149805,"/** 
 * Allocate and initialize space in the bootimage (at bootimage writing time) to be an uninitialized instance of the (array) type specified by array. NOTE: TIB is set by BootimageWriter2
 * @param bootImage the bootimage to put the object in
 * @param array RVMArray object of array being allocated.
 * @param numElements number of elements
 * @return Address of object in bootimage
 */
@Interruptible public static Address allocateCode(BootImageInterface bootImage,RVMArray array,int numElements){
  TIB tib=array.getTypeInformationBlock();
  int size=array.getInstanceSize(numElements);
  int align=getAlignment(array);
  int offset=getOffsetForAlignment(array);
  Address ptr=bootImage.allocateCodeStorage(size,align,offset);
  Address ref=JavaHeader.initializeArrayHeader(bootImage,ptr,tib,size,numElements,false,0);
  bootImage.setFullWord(ref.plus(getArrayLengthOffset()),numElements);
  MM_Interface.initializeHeader(bootImage,ref,tib,size,false);
  MiscHeader.initializeHeader(bootImage,ref,tib,size,false);
  return ref;
}","/** 
 * Allocate and initialize space in the bootimage (at bootimage writing time) to be an uninitialized instance of the (array) type specified by array. NOTE: TIB is set by BootimageWriter2
 * @param bootImage the bootimage to put the object in
 * @param array RVMArray object of array being allocated.
 * @param numElements number of elements
 * @return Address of object in bootimage
 */
@Interruptible public static Address allocateCode(BootImageInterface bootImage,RVMArray array,int numElements){
  TIB tib=array.getTypeInformationBlock();
  int size=array.getInstanceSize(numElements);
  int align=getAlignment(array);
  int offset=getOffsetForAlignment(array,false);
  Address ptr=bootImage.allocateCodeStorage(size,align,offset);
  Address ref=JavaHeader.initializeArrayHeader(bootImage,ptr,tib,size,numElements,false,0);
  bootImage.setFullWord(ref.plus(getArrayLengthOffset()),numElements);
  MM_Interface.initializeHeader(bootImage,ref,tib,size,false);
  MiscHeader.initializeHeader(bootImage,ref,tib,size,false);
  return ref;
}",0.9971126082771896
149806,"/** 
 * Allocate and initialize space in the bootimage (at bootimage writing time) to be an uninitialized instance of the (array) type specified by array. NOTE: TIB is set by BootimageWriter2
 * @param bootImage the bootimage to put the object in
 * @param array RVMArray object of array being allocated.
 * @param numElements number of elements
 * @param needsIdentityHash needs an identity hash value
 * @param identityHashValue the value for the identity hash
 * @return Address of object in bootimage (in bytes)
 */
@Interruptible public static Address allocateArray(BootImageInterface bootImage,RVMArray array,int numElements,boolean needsIdentityHash,int identityHashValue){
  TIB tib=array.getTypeInformationBlock();
  int size=array.getInstanceSize(numElements);
  if (needsIdentityHash) {
    if (JavaHeader.ADDRESS_BASED_HASHING) {
      size+=JavaHeader.HASHCODE_BYTES;
    }
 else {
      throw new Error(""String_Node_Str"");
    }
  }
  int align=getAlignment(array);
  int offset=getOffsetForAlignment(array);
  Address ptr=bootImage.allocateDataStorage(size,align,offset);
  Address ref=JavaHeader.initializeArrayHeader(bootImage,ptr,tib,size,numElements,needsIdentityHash,identityHashValue);
  bootImage.setFullWord(ref.plus(getArrayLengthOffset()),numElements);
  MM_Interface.initializeHeader(bootImage,ref,tib,size,false);
  MiscHeader.initializeHeader(bootImage,ref,tib,size,false);
  return ref;
}","/** 
 * Allocate and initialize space in the bootimage (at bootimage writing time) to be an uninitialized instance of the (array) type specified by array. NOTE: TIB is set by BootimageWriter2
 * @param bootImage the bootimage to put the object in
 * @param array RVMArray object of array being allocated.
 * @param numElements number of elements
 * @param needsIdentityHash needs an identity hash value
 * @param identityHashValue the value for the identity hash
 * @return Address of object in bootimage (in bytes)
 */
@Interruptible public static Address allocateArray(BootImageInterface bootImage,RVMArray array,int numElements,boolean needsIdentityHash,int identityHashValue){
  TIB tib=array.getTypeInformationBlock();
  int size=array.getInstanceSize(numElements);
  if (needsIdentityHash) {
    if (JavaHeader.ADDRESS_BASED_HASHING) {
      size+=JavaHeader.HASHCODE_BYTES;
    }
 else {
      throw new Error(""String_Node_Str"");
    }
  }
  int align=getAlignment(array);
  int offset=getOffsetForAlignment(array,needsIdentityHash);
  Address ptr=bootImage.allocateDataStorage(size,align,offset);
  Address ref=JavaHeader.initializeArrayHeader(bootImage,ptr,tib,size,numElements,needsIdentityHash,identityHashValue);
  bootImage.setFullWord(ref.plus(getArrayLengthOffset()),numElements);
  MM_Interface.initializeHeader(bootImage,ref,tib,size,false);
  MiscHeader.initializeHeader(bootImage,ref,tib,size,false);
  return ref;
}",0.993688639551192
149807,"/** 
 * Allocate and initialize space in the bootimage (at bootimage writing time) to be an uninitialized instance of the (scalar) type specified by klass. NOTE: TIB is set by BootImageWriter2
 * @param bootImage the bootimage to put the object in
 * @param klass the RVMClass object of the instance to create.
 * @param needsIdentityHash needs an identity hash value
 * @param identityHashValue the value for the identity hash
 * @return the offset of object in bootimage (in bytes)
 */
@Interruptible public static Address allocateScalar(BootImageInterface bootImage,RVMClass klass,boolean needsIdentityHash,int identityHashValue){
  TIB tib=klass.getTypeInformationBlock();
  int size=klass.getInstanceSize();
  if (needsIdentityHash) {
    if (JavaHeader.ADDRESS_BASED_HASHING) {
      size+=JavaHeader.HASHCODE_BYTES;
    }
 else {
      throw new Error(""String_Node_Str"");
    }
  }
  int align=getAlignment(klass);
  int offset=getOffsetForAlignment(klass);
  Address ptr=bootImage.allocateDataStorage(size,align,offset);
  Address ref=JavaHeader.initializeScalarHeader(bootImage,ptr,tib,size,needsIdentityHash,identityHashValue);
  MM_Interface.initializeHeader(bootImage,ref,tib,size,true);
  MiscHeader.initializeHeader(bootImage,ref,tib,size,true);
  return ref;
}","/** 
 * Allocate and initialize space in the bootimage (at bootimage writing time) to be an uninitialized instance of the (scalar) type specified by klass. NOTE: TIB is set by BootImageWriter2
 * @param bootImage the bootimage to put the object in
 * @param klass the RVMClass object of the instance to create.
 * @param needsIdentityHash needs an identity hash value
 * @param identityHashValue the value for the identity hash
 * @return the offset of object in bootimage (in bytes)
 */
@Interruptible public static Address allocateScalar(BootImageInterface bootImage,RVMClass klass,boolean needsIdentityHash,int identityHashValue){
  TIB tib=klass.getTypeInformationBlock();
  int size=klass.getInstanceSize();
  if (needsIdentityHash) {
    if (JavaHeader.ADDRESS_BASED_HASHING) {
      size+=JavaHeader.HASHCODE_BYTES;
    }
 else {
      throw new Error(""String_Node_Str"");
    }
  }
  int align=getAlignment(klass);
  int offset=getOffsetForAlignment(klass,needsIdentityHash);
  Address ptr=bootImage.allocateDataStorage(size,align,offset);
  Address ref=JavaHeader.initializeScalarHeader(bootImage,ptr,tib,size,needsIdentityHash,identityHashValue);
  MM_Interface.initializeHeader(bootImage,ref,tib,size,true);
  MiscHeader.initializeHeader(bootImage,ref,tib,size,true);
  return ref;
}",0.9929906542056076
149808,"/** 
 * Allocate something like ""new Foo()"".
 * @param id id of type reference of class to create.
 * @return object with header installed and all fields set to zero/null(ready for initializer to be run on it) See also: bytecode 0xbb (""new"")
 */
@Entrypoint static Object unresolvedNewScalar(int id,int site) throws NoClassDefFoundError, OutOfMemoryError {
  TypeReference tRef=TypeReference.getTypeRef(id);
  RVMType t=tRef.peekType();
  if (t == null) {
    t=tRef.resolve();
  }
  RVMClass cls=t.asClass();
  if (!cls.isInitialized()) {
    initializeClassForDynamicLink(cls);
  }
  int allocator=MM_Interface.pickAllocator(cls);
  int align=ObjectModel.getAlignment(cls);
  int offset=ObjectModel.getOffsetForAlignment(cls);
  return resolvedNewScalar(cls.getInstanceSize(),cls.getTypeInformationBlock(),cls.hasFinalizer(),allocator,align,offset,site);
}","/** 
 * Allocate something like ""new Foo()"".
 * @param id id of type reference of class to create.
 * @return object with header installed and all fields set to zero/null(ready for initializer to be run on it) See also: bytecode 0xbb (""new"")
 */
@Entrypoint static Object unresolvedNewScalar(int id,int site) throws NoClassDefFoundError, OutOfMemoryError {
  TypeReference tRef=TypeReference.getTypeRef(id);
  RVMType t=tRef.peekType();
  if (t == null) {
    t=tRef.resolve();
  }
  RVMClass cls=t.asClass();
  if (!cls.isInitialized()) {
    initializeClassForDynamicLink(cls);
  }
  int allocator=MM_Interface.pickAllocator(cls);
  int align=ObjectModel.getAlignment(cls);
  int offset=ObjectModel.getOffsetForAlignment(cls,false);
  return resolvedNewScalar(cls.getInstanceSize(),cls.getTypeInformationBlock(),cls.hasFinalizer(),allocator,align,offset,site);
}",0.9965156794425089
149809,"/** 
 * Create (in host jdk address space) the rvm objects that will be needed at run time to execute enough of the virtual machine to dynamically load and compile the remainder of itself. Side effect: rvm objects are created in host jdk address space Statics is populated ""bootImageTypes"" dictionary is populated with name/type pairs
 * @param typeNames names of rvm classes whose static fields will containthe objects comprising the virtual machine bootimage
 */
public static void createBootImageObjects(Vector<String> typeNames,String bootImageTypeNamesFile) throws IllegalAccessException {
  Callbacks.notifyBootImage(typeNames.elements());
  long startTime=0;
  long stopTime=0;
  if (verbose >= 1)   say(""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  for (  String typeName : typeNames) {
    if (verbose >= 4)     say(""String_Node_Str"",typeName);
    RVMType type;
    try {
      TypeReference tRef=TypeReference.findOrCreate(typeName);
      type=tRef.resolve();
    }
 catch (    NoClassDefFoundError ncdf) {
      ncdf.printStackTrace(System.out);
      fail(bootImageTypeNamesFile + ""String_Node_Str"" + typeName+ ""String_Node_Str""+ ncdf);
      return;
    }
catch (    IllegalArgumentException ila) {
      ila.printStackTrace(System.out);
      fail(bootImageTypeNamesFile + ""String_Node_Str"" + typeName+ ""String_Node_Str""+ ila);
      return;
    }
    type.markAsBootImageClass();
    typeName=typeName.replace('/','.');
    if (typeName.startsWith(""String_Node_Str""))     typeName=typeName.substring(1,typeName.length() - 1);
    bootImageTypes.put(typeName,type);
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  if (verbose >= 1)   say(String.valueOf(bootImageTypes.size()),""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  if (verbose >= 1)   say(""String_Node_Str"");
  for (  RVMType type : bootImageTypes.values()) {
    if (verbose >= 2)     say(""String_Node_Str"" + type);
    type.resolve();
  }
  for (  RVMType type : bootImageTypes.values()) {
    type.allBootImageTypesResolved();
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  BootRecord bootRecord=BootRecord.the_boot_record;
  RVMClass rvmBRType=getRvmType(bootRecord.getClass()).asClass();
  RVMArray intArrayType=RVMArray.getPrimitiveArrayType(10);
  bootImage.allocateDataStorage(rvmBRType.getInstanceSize(),ObjectModel.getAlignment(rvmBRType),ObjectModel.getOffsetForAlignment(rvmBRType));
  Address jtocAddress=bootImage.allocateDataStorage(intArrayType.getInstanceSize(0),ObjectModel.getAlignment(intArrayType),ObjectModel.getOffsetForAlignment(intArrayType));
  bootImage.resetAllocator();
  bootRecord.tocRegister=jtocAddress.plus(intArrayType.getInstanceSize(Statics.middleOfTable));
  OutOfLineMachineCode.init();
  if (profile)   startTime=System.currentTimeMillis();
  if (verbose >= 1)   say(""String_Node_Str"");
  if (verbose >= 1)   say(""String_Node_Str"" + numThreads + ""String_Node_Str"");
  ExecutorService threadPool=Executors.newFixedThreadPool(numThreads);
  for (  RVMType type : bootImageTypes.values()) {
    threadPool.execute(new BootImageWorker(type));
  }
  threadPool.shutdown();
  try {
    while (!threadPool.awaitTermination(Long.MAX_VALUE,TimeUnit.SECONDS)) {
      say(""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    throw new Error(""String_Node_Str"",e);
  }
  if (BootImageWorker.instantiationFailed) {
    throw new Error(""String_Node_Str"");
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  staticsJunk=Statics.bootImageInstantiationFinished();
  FunctionTable functionTable=BuildJNIFunctionTable.buildTable();
  JNIEnvironment.initFunctionTable(functionTable);
  if (verbose >= 1)   say(""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  bootImageTypeFields=new HashMap<Key,FieldInfo>(bootImageTypes.size());
  HashSet<String> invalidEntrys=new HashSet<String>();
  for (  RVMType rvmType : bootImageTypes.values()) {
    FieldInfo fieldInfo;
    if (!rvmType.isClassType())     continue;
    Class jdkType=getJdkType(rvmType);
    if (jdkType == null)     continue;
    Key key=new Key(jdkType);
    fieldInfo=bootImageTypeFields.get(key);
    if (fieldInfo != null) {
      fieldInfo.rvmType=rvmType;
    }
 else {
      if (verbose >= 1)       say(""String_Node_Str"" + rvmType);
      fieldInfo=new FieldInfo(jdkType,rvmType);
      bootImageTypeFields.put(key,fieldInfo);
      for (Class cls=jdkType.getSuperclass(); cls != null; cls=cls.getSuperclass()) {
        key=new Key(cls);
        fieldInfo=bootImageTypeFields.get(key);
        if (fieldInfo != null) {
          break;
        }
 else {
          if (verbose >= 1)           say(""String_Node_Str"" + jdkType);
          fieldInfo=new FieldInfo(cls,null);
          bootImageTypeFields.put(key,fieldInfo);
        }
      }
    }
  }
  for (  FieldInfo fieldInfo : bootImageTypeFields.values()) {
    RVMType rvmType=fieldInfo.rvmType;
    if (rvmType == null) {
      if (verbose >= 1)       say(""String_Node_Str"" + fieldInfo.jdkType);
      continue;
    }
    Class jdkType=fieldInfo.jdkType;
    if (verbose >= 1)     say(""String_Node_Str"" + rvmType);
    RVMField[] rvmFields=rvmType.getStaticFields();
    fieldInfo.jdkStaticFields=new Field[rvmFields.length];
    for (int j=0; j < rvmFields.length; j++) {
      String rvmName=rvmFields[j].getName().toString();
      for (      Field f : fieldInfo.jdkFields) {
        if (f.getName().equals(rvmName)) {
          fieldInfo.jdkStaticFields[j]=f;
          f.setAccessible(true);
          break;
        }
      }
    }
    rvmFields=rvmType.getInstanceFields();
    fieldInfo.jdkInstanceFields=new Field[rvmFields.length];
    for (int j=0; j < rvmFields.length; j++) {
      String rvmName=rvmFields[j].getName().toString();
      jdkType=getJdkType(rvmFields[j].getDeclaringClass());
      if (jdkType == null)       continue;
      FieldInfo jdkFieldInfo=bootImageTypeFields.get(new Key(jdkType));
      if (jdkFieldInfo == null)       continue;
      Field[] jdkFields=jdkFieldInfo.jdkFields;
      for (      Field f : jdkFields) {
        if (f.getName().equals(rvmName)) {
          fieldInfo.jdkInstanceFields[j]=f;
          f.setAccessible(true);
          break;
        }
      }
    }
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  startupThread=Scheduler.setupBootThread();
  byte[] stack=startupThread.getStack();
  int idx=stack.length - 1;
  if (VM.LittleEndian) {
    stack[idx--]=(byte)0xde;
    stack[idx--]=(byte)0xad;
    stack[idx--]=(byte)0xba;
    stack[idx--]=(byte)0xbe;
  }
 else {
    stack[idx--]=(byte)0xbe;
    stack[idx--]=(byte)0xba;
    stack[idx--]=(byte)0xad;
    stack[idx--]=(byte)0xde;
  }
  BootstrapClassLoader.setBootstrapRepositories(bootImageRepositoriesAtExecutionTime);
  if (verbose >= 1)   say(""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  for (  RVMType rvmType : bootImageTypes.values()) {
    if (verbose >= 1)     say(""String_Node_Str"",rvmType.toString());
    if (!rvmType.isClassType())     continue;
    Class jdkType=getJdkType(rvmType);
    if (jdkType == null && verbose >= 1) {
      say(""String_Node_Str"" + rvmType + ""String_Node_Str"");
    }
    RVMField[] rvmFields=rvmType.getStaticFields();
    for (int j=0; j < rvmFields.length; ++j) {
      RVMField rvmField=rvmFields[j];
      TypeReference rvmFieldType=rvmField.getType();
      Offset rvmFieldOffset=rvmField.getOffset();
      String rvmFieldName=rvmField.getName().toString();
      Field jdkFieldAcc=null;
      if (jdkType != null)       jdkFieldAcc=getJdkFieldAccessor(jdkType,j,STATIC_FIELD);
      if (jdkFieldAcc == null) {
        if (jdkType != null) {
          if (!copyKnownClasspathStaticField(jdkType,rvmFieldName,rvmFieldType,rvmFieldOffset)) {
            if (verbose >= 2) {
              traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);
              traceContext.traceFieldNotInHostJdk();
              traceContext.pop();
            }
            Statics.setSlotContents(rvmFieldOffset,0);
            if (!VM.runningTool)             bootImage.countNulledReference();
            invalidEntrys.add(jdkType.getName());
          }
        }
 else {
          if (verbose >= 2) {
            traceContext.push(rvmFieldType.toString(),rvmFieldType.toString(),rvmFieldName);
            traceContext.traceFieldNotInHostJdk();
            traceContext.pop();
          }
          Statics.setSlotContents(rvmFieldOffset,0);
          if (!VM.runningTool)           bootImage.countNulledReference();
          invalidEntrys.add(rvmField.getDeclaringClass().toString());
        }
        continue;
      }
      if (!Modifier.isStatic(jdkFieldAcc.getModifiers())) {
        if (verbose >= 2)         traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);
        if (verbose >= 2)         traceContext.traceFieldNotStaticInHostJdk();
        if (verbose >= 2)         traceContext.pop();
        Statics.setSlotContents(rvmFieldOffset,0);
        if (!VM.runningTool)         bootImage.countNulledReference();
        invalidEntrys.add(jdkType.getName());
        continue;
      }
      if (!equalTypes(jdkFieldAcc.getType().getName(),rvmFieldType)) {
        if (verbose >= 2)         traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);
        if (verbose >= 2)         traceContext.traceFieldDifferentTypeInHostJdk();
        if (verbose >= 2)         traceContext.pop();
        Statics.setSlotContents(rvmFieldOffset,0);
        if (!VM.runningTool)         bootImage.countNulledReference();
        invalidEntrys.add(jdkType.getName());
        continue;
      }
      if (verbose >= 2)       say(""String_Node_Str"",String.valueOf(Statics.offsetAsSlot(rvmFieldOffset)),""String_Node_Str"",rvmField.toString());
      if (rvmFieldType.isPrimitiveType()) {
        if (rvmFieldType.isBooleanType()) {
          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getBoolean(null) ? 1 : 0);
        }
 else         if (rvmFieldType.isByteType()) {
          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getByte(null));
        }
 else         if (rvmFieldType.isCharType()) {
          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getChar(null));
        }
 else         if (rvmFieldType.isShortType()) {
          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getShort(null));
        }
 else         if (rvmFieldType.isIntType()) {
          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getInt(null));
        }
 else         if (rvmFieldType.isLongType()) {
          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getLong(null));
        }
 else         if (rvmFieldType.isFloatType()) {
          float f=jdkFieldAcc.getFloat(null);
          Statics.setSlotContents(rvmFieldOffset,Float.floatToIntBits(f));
        }
 else         if (rvmFieldType.isDoubleType()) {
          double d=jdkFieldAcc.getDouble(null);
          Statics.setSlotContents(rvmFieldOffset,Double.doubleToLongBits(d));
        }
 else         if (rvmFieldType.equals(TypeReference.Address) || rvmFieldType.equals(TypeReference.Word) || rvmFieldType.equals(TypeReference.Extent)|| rvmFieldType.equals(TypeReference.Offset)) {
          Object o=jdkFieldAcc.get(null);
          String msg=""String_Node_Str"" + rvmField.toString();
          boolean warn=rvmFieldType.equals(TypeReference.Address);
          Statics.setSlotContents(rvmFieldOffset,getWordValue(o,msg,warn));
        }
 else {
          fail(""String_Node_Str"" + rvmFieldType);
        }
      }
 else {
        final Object o=jdkFieldAcc.get(null);
        if (verbose >= 3)         say(""String_Node_Str"",VM.addressAsHexString(Magic.objectAsAddress(o)));
        Statics.setSlotContents(rvmFieldOffset,o);
      }
    }
  }
  if (verbose >= 2) {
    for (    final String entry : invalidEntrys) {
      say(""String_Node_Str"",entry);
    }
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
}","/** 
 * Create (in host jdk address space) the rvm objects that will be needed at run time to execute enough of the virtual machine to dynamically load and compile the remainder of itself. Side effect: rvm objects are created in host jdk address space Statics is populated ""bootImageTypes"" dictionary is populated with name/type pairs
 * @param typeNames names of rvm classes whose static fields will containthe objects comprising the virtual machine bootimage
 */
public static void createBootImageObjects(Vector<String> typeNames,String bootImageTypeNamesFile) throws IllegalAccessException {
  Callbacks.notifyBootImage(typeNames.elements());
  long startTime=0;
  long stopTime=0;
  if (verbose >= 1)   say(""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  for (  String typeName : typeNames) {
    if (verbose >= 4)     say(""String_Node_Str"",typeName);
    RVMType type;
    try {
      TypeReference tRef=TypeReference.findOrCreate(typeName);
      type=tRef.resolve();
    }
 catch (    NoClassDefFoundError ncdf) {
      ncdf.printStackTrace(System.out);
      fail(bootImageTypeNamesFile + ""String_Node_Str"" + typeName+ ""String_Node_Str""+ ncdf);
      return;
    }
catch (    IllegalArgumentException ila) {
      ila.printStackTrace(System.out);
      fail(bootImageTypeNamesFile + ""String_Node_Str"" + typeName+ ""String_Node_Str""+ ila);
      return;
    }
    type.markAsBootImageClass();
    typeName=typeName.replace('/','.');
    if (typeName.startsWith(""String_Node_Str""))     typeName=typeName.substring(1,typeName.length() - 1);
    bootImageTypes.put(typeName,type);
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  if (verbose >= 1)   say(String.valueOf(bootImageTypes.size()),""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  if (verbose >= 1)   say(""String_Node_Str"");
  for (  RVMType type : bootImageTypes.values()) {
    if (verbose >= 2)     say(""String_Node_Str"" + type);
    type.resolve();
  }
  for (  RVMType type : bootImageTypes.values()) {
    type.allBootImageTypesResolved();
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  BootRecord bootRecord=BootRecord.the_boot_record;
  RVMClass rvmBRType=getRvmType(bootRecord.getClass()).asClass();
  RVMArray intArrayType=RVMArray.getPrimitiveArrayType(10);
  bootImage.allocateDataStorage(rvmBRType.getInstanceSize(),ObjectModel.getAlignment(rvmBRType),ObjectModel.getOffsetForAlignment(rvmBRType,false));
  Address jtocAddress=bootImage.allocateDataStorage(intArrayType.getInstanceSize(0),ObjectModel.getAlignment(intArrayType),ObjectModel.getOffsetForAlignment(intArrayType,false));
  bootImage.resetAllocator();
  bootRecord.tocRegister=jtocAddress.plus(intArrayType.getInstanceSize(Statics.middleOfTable));
  OutOfLineMachineCode.init();
  if (profile)   startTime=System.currentTimeMillis();
  if (verbose >= 1)   say(""String_Node_Str"");
  if (verbose >= 1)   say(""String_Node_Str"" + numThreads + ""String_Node_Str"");
  ExecutorService threadPool=Executors.newFixedThreadPool(numThreads);
  for (  RVMType type : bootImageTypes.values()) {
    threadPool.execute(new BootImageWorker(type));
  }
  threadPool.shutdown();
  try {
    while (!threadPool.awaitTermination(Long.MAX_VALUE,TimeUnit.SECONDS)) {
      say(""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    throw new Error(""String_Node_Str"",e);
  }
  if (BootImageWorker.instantiationFailed) {
    throw new Error(""String_Node_Str"");
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  staticsJunk=Statics.bootImageInstantiationFinished();
  FunctionTable functionTable=BuildJNIFunctionTable.buildTable();
  JNIEnvironment.initFunctionTable(functionTable);
  if (verbose >= 1)   say(""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  bootImageTypeFields=new HashMap<Key,FieldInfo>(bootImageTypes.size());
  HashSet<String> invalidEntrys=new HashSet<String>();
  for (  RVMType rvmType : bootImageTypes.values()) {
    FieldInfo fieldInfo;
    if (!rvmType.isClassType())     continue;
    Class jdkType=getJdkType(rvmType);
    if (jdkType == null)     continue;
    Key key=new Key(jdkType);
    fieldInfo=bootImageTypeFields.get(key);
    if (fieldInfo != null) {
      fieldInfo.rvmType=rvmType;
    }
 else {
      if (verbose >= 1)       say(""String_Node_Str"" + rvmType);
      fieldInfo=new FieldInfo(jdkType,rvmType);
      bootImageTypeFields.put(key,fieldInfo);
      for (Class cls=jdkType.getSuperclass(); cls != null; cls=cls.getSuperclass()) {
        key=new Key(cls);
        fieldInfo=bootImageTypeFields.get(key);
        if (fieldInfo != null) {
          break;
        }
 else {
          if (verbose >= 1)           say(""String_Node_Str"" + jdkType);
          fieldInfo=new FieldInfo(cls,null);
          bootImageTypeFields.put(key,fieldInfo);
        }
      }
    }
  }
  for (  FieldInfo fieldInfo : bootImageTypeFields.values()) {
    RVMType rvmType=fieldInfo.rvmType;
    if (rvmType == null) {
      if (verbose >= 1)       say(""String_Node_Str"" + fieldInfo.jdkType);
      continue;
    }
    Class jdkType=fieldInfo.jdkType;
    if (verbose >= 1)     say(""String_Node_Str"" + rvmType);
    RVMField[] rvmFields=rvmType.getStaticFields();
    fieldInfo.jdkStaticFields=new Field[rvmFields.length];
    for (int j=0; j < rvmFields.length; j++) {
      String rvmName=rvmFields[j].getName().toString();
      for (      Field f : fieldInfo.jdkFields) {
        if (f.getName().equals(rvmName)) {
          fieldInfo.jdkStaticFields[j]=f;
          f.setAccessible(true);
          break;
        }
      }
    }
    rvmFields=rvmType.getInstanceFields();
    fieldInfo.jdkInstanceFields=new Field[rvmFields.length];
    for (int j=0; j < rvmFields.length; j++) {
      String rvmName=rvmFields[j].getName().toString();
      jdkType=getJdkType(rvmFields[j].getDeclaringClass());
      if (jdkType == null)       continue;
      FieldInfo jdkFieldInfo=bootImageTypeFields.get(new Key(jdkType));
      if (jdkFieldInfo == null)       continue;
      Field[] jdkFields=jdkFieldInfo.jdkFields;
      for (      Field f : jdkFields) {
        if (f.getName().equals(rvmName)) {
          fieldInfo.jdkInstanceFields[j]=f;
          f.setAccessible(true);
          break;
        }
      }
    }
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  startupThread=Scheduler.setupBootThread();
  byte[] stack=startupThread.getStack();
  int idx=stack.length - 1;
  if (VM.LittleEndian) {
    stack[idx--]=(byte)0xde;
    stack[idx--]=(byte)0xad;
    stack[idx--]=(byte)0xba;
    stack[idx--]=(byte)0xbe;
  }
 else {
    stack[idx--]=(byte)0xbe;
    stack[idx--]=(byte)0xba;
    stack[idx--]=(byte)0xad;
    stack[idx--]=(byte)0xde;
  }
  BootstrapClassLoader.setBootstrapRepositories(bootImageRepositoriesAtExecutionTime);
  if (verbose >= 1)   say(""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  for (  RVMType rvmType : bootImageTypes.values()) {
    if (verbose >= 1)     say(""String_Node_Str"",rvmType.toString());
    if (!rvmType.isClassType())     continue;
    Class jdkType=getJdkType(rvmType);
    if (jdkType == null && verbose >= 1) {
      say(""String_Node_Str"" + rvmType + ""String_Node_Str"");
    }
    RVMField[] rvmFields=rvmType.getStaticFields();
    for (int j=0; j < rvmFields.length; ++j) {
      RVMField rvmField=rvmFields[j];
      TypeReference rvmFieldType=rvmField.getType();
      Offset rvmFieldOffset=rvmField.getOffset();
      String rvmFieldName=rvmField.getName().toString();
      Field jdkFieldAcc=null;
      if (jdkType != null)       jdkFieldAcc=getJdkFieldAccessor(jdkType,j,STATIC_FIELD);
      if (jdkFieldAcc == null) {
        if (jdkType != null) {
          if (!copyKnownClasspathStaticField(jdkType,rvmFieldName,rvmFieldType,rvmFieldOffset)) {
            if (verbose >= 2) {
              traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);
              traceContext.traceFieldNotInHostJdk();
              traceContext.pop();
            }
            Statics.setSlotContents(rvmFieldOffset,0);
            if (!VM.runningTool)             bootImage.countNulledReference();
            invalidEntrys.add(jdkType.getName());
          }
        }
 else {
          if (verbose >= 2) {
            traceContext.push(rvmFieldType.toString(),rvmFieldType.toString(),rvmFieldName);
            traceContext.traceFieldNotInHostJdk();
            traceContext.pop();
          }
          Statics.setSlotContents(rvmFieldOffset,0);
          if (!VM.runningTool)           bootImage.countNulledReference();
          invalidEntrys.add(rvmField.getDeclaringClass().toString());
        }
        continue;
      }
      if (!Modifier.isStatic(jdkFieldAcc.getModifiers())) {
        if (verbose >= 2)         traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);
        if (verbose >= 2)         traceContext.traceFieldNotStaticInHostJdk();
        if (verbose >= 2)         traceContext.pop();
        Statics.setSlotContents(rvmFieldOffset,0);
        if (!VM.runningTool)         bootImage.countNulledReference();
        invalidEntrys.add(jdkType.getName());
        continue;
      }
      if (!equalTypes(jdkFieldAcc.getType().getName(),rvmFieldType)) {
        if (verbose >= 2)         traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);
        if (verbose >= 2)         traceContext.traceFieldDifferentTypeInHostJdk();
        if (verbose >= 2)         traceContext.pop();
        Statics.setSlotContents(rvmFieldOffset,0);
        if (!VM.runningTool)         bootImage.countNulledReference();
        invalidEntrys.add(jdkType.getName());
        continue;
      }
      if (verbose >= 2)       say(""String_Node_Str"",String.valueOf(Statics.offsetAsSlot(rvmFieldOffset)),""String_Node_Str"",rvmField.toString());
      if (rvmFieldType.isPrimitiveType()) {
        if (rvmFieldType.isBooleanType()) {
          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getBoolean(null) ? 1 : 0);
        }
 else         if (rvmFieldType.isByteType()) {
          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getByte(null));
        }
 else         if (rvmFieldType.isCharType()) {
          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getChar(null));
        }
 else         if (rvmFieldType.isShortType()) {
          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getShort(null));
        }
 else         if (rvmFieldType.isIntType()) {
          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getInt(null));
        }
 else         if (rvmFieldType.isLongType()) {
          Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getLong(null));
        }
 else         if (rvmFieldType.isFloatType()) {
          float f=jdkFieldAcc.getFloat(null);
          Statics.setSlotContents(rvmFieldOffset,Float.floatToIntBits(f));
        }
 else         if (rvmFieldType.isDoubleType()) {
          double d=jdkFieldAcc.getDouble(null);
          Statics.setSlotContents(rvmFieldOffset,Double.doubleToLongBits(d));
        }
 else         if (rvmFieldType.equals(TypeReference.Address) || rvmFieldType.equals(TypeReference.Word) || rvmFieldType.equals(TypeReference.Extent)|| rvmFieldType.equals(TypeReference.Offset)) {
          Object o=jdkFieldAcc.get(null);
          String msg=""String_Node_Str"" + rvmField.toString();
          boolean warn=rvmFieldType.equals(TypeReference.Address);
          Statics.setSlotContents(rvmFieldOffset,getWordValue(o,msg,warn));
        }
 else {
          fail(""String_Node_Str"" + rvmFieldType);
        }
      }
 else {
        final Object o=jdkFieldAcc.get(null);
        if (verbose >= 3)         say(""String_Node_Str"",VM.addressAsHexString(Magic.objectAsAddress(o)));
        Statics.setSlotContents(rvmFieldOffset,o);
      }
    }
  }
  if (verbose >= 2) {
    for (    final String entry : invalidEntrys) {
      say(""String_Node_Str"",entry);
    }
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
}",0.99951938481256
149810,"private int bucketIndex(K key,int divisor){
  if (key == null) {
    return 0;
  }
 else {
    return (key.hashCode() & 0x7fffffff) % divisor;
  }
}","private int bucketIndex(K key,int divisor){
  if (key == null) {
    return 0;
  }
 else {
    return (hashTheKey(key) & 0x7fffffff) % divisor;
  }
}",0.9494949494949496
149811,"/** 
 * Perform local constant propagation for a method.
 * @param ir the IR to optimize
 */
public void perform(IR ir){
  HashMap<Register,Operand> info=new HashMap<Register,Operand>();
  for (BasicBlock bb=ir.firstBasicBlockInCodeOrder(); bb != null; bb=bb.nextBasicBlockInCodeOrder()) {
    if (bb.isEmpty())     continue;
    container.counter2++;
    if (bb.getInfrequent()) {
      container.counter1++;
      if (ir.options.FREQ_FOCUS_EFFORT)       continue;
    }
    for (Instruction s=bb.firstRealInstruction(), sentinel=bb.lastInstruction(); s != sentinel; s=s.nextInstructionInCodeOrder()) {
      if (!info.isEmpty()) {
        int numUses=s.getNumberOfUses();
        if (numUses > 0) {
          boolean didSomething=false;
          for (OperandEnumeration e=s.getUses(); e.hasMoreElements(); ) {
            Operand use=e.next();
            if (use instanceof RegisterOperand) {
              RegisterOperand rUse=(RegisterOperand)use;
              Operand value=info.get(rUse.getRegister());
              if (value != null) {
                didSomething=true;
                value=value.copy();
                if (value instanceof RegisterOperand) {
                  ((RegisterOperand)value).copyType(rUse);
                }
                s.replaceOperand(use,value);
              }
            }
          }
          if (didSomething)           Simplifier.simplify(ir.IRStage == IR.HIR,ir.regpool,s);
        }
        boolean killPhysicals=s.isTSPoint() || s.operator().implicitDefs != 0;
        if (killPhysicals) {
          HashSet<Register> toRemove=new HashSet<Register>();
          for (          Map.Entry<Register,Operand> entry : info.entrySet()) {
            Register eR=entry.getValue().asRegister().getRegister();
            if (killPhysicals && eR.isPhysical()) {
              toRemove.add(entry.getKey());
            }
          }
          for (          final Register aToRemove : toRemove) {
            info.remove(aToRemove);
          }
        }
        for (OperandEnumeration e=s.getDefs(); e.hasMoreElements(); ) {
          Operand def=e.next();
          if (def != null && def.isRegister()) {
            Register r=def.asRegister().getRegister();
            info.remove(r);
            HashSet<Register> toRemove=new HashSet<Register>();
            for (            Map.Entry<Register,Operand> entry : info.entrySet()) {
              Register eR=((RegisterOperand)entry.getValue()).getRegister();
              if (eR == r) {
                toRemove.add(entry.getKey());
              }
            }
            for (            final Register register : toRemove) {
              info.remove(register);
            }
          }
        }
      }
      if (Move.conforms(s)) {
        Operand val=Move.getVal(s);
        if (val.isRegister() && !val.asRegister().getRegister().isPhysical()) {
          info.put(Move.getResult(s).getRegister(),val);
        }
      }
    }
    info.clear();
  }
}","/** 
 * Perform local constant propagation for a method.
 * @param ir the IR to optimize
 */
public void perform(IR ir){
  HashMap<Register,Operand> info=new HashMap<Register,Operand>();
  for (BasicBlock bb=ir.firstBasicBlockInCodeOrder(); bb != null; bb=bb.nextBasicBlockInCodeOrder()) {
    if (bb.isEmpty())     continue;
    container.counter2++;
    if (bb.getInfrequent()) {
      container.counter1++;
      if (ir.options.FREQ_FOCUS_EFFORT)       continue;
    }
    for (Instruction s=bb.firstRealInstruction(), sentinel=bb.lastInstruction(); s != sentinel; s=s.nextInstructionInCodeOrder()) {
      if (!info.isEmpty()) {
        int numUses=s.getNumberOfPureUses();
        if (numUses > 0) {
          boolean didSomething=false;
          for (OperandEnumeration e=s.getUses(); e.hasMoreElements(); ) {
            Operand use=e.next();
            if (use instanceof RegisterOperand) {
              RegisterOperand rUse=(RegisterOperand)use;
              Operand value=info.get(rUse.getRegister());
              if (value != null) {
                didSomething=true;
                value=value.copy();
                if (value instanceof RegisterOperand) {
                  ((RegisterOperand)value).copyType(rUse);
                }
                s.replaceOperand(use,value);
              }
            }
          }
          if (didSomething)           Simplifier.simplify(ir.IRStage == IR.HIR,ir.regpool,s);
        }
        boolean killPhysicals=s.isTSPoint() || s.operator().implicitDefs != 0;
        if (killPhysicals) {
          HashSet<Register> toRemove=new HashSet<Register>();
          for (          Map.Entry<Register,Operand> entry : info.entrySet()) {
            Register eR=entry.getValue().asRegister().getRegister();
            if (killPhysicals && eR.isPhysical()) {
              toRemove.add(entry.getKey());
            }
          }
          for (          final Register aToRemove : toRemove) {
            info.remove(aToRemove);
          }
        }
        for (OperandEnumeration e=s.getDefs(); e.hasMoreElements(); ) {
          Operand def=e.next();
          if (def != null && def.isRegister()) {
            Register r=def.asRegister().getRegister();
            info.remove(r);
            HashSet<Register> toRemove=new HashSet<Register>();
            for (            Map.Entry<Register,Operand> entry : info.entrySet()) {
              Register eR=((RegisterOperand)entry.getValue()).getRegister();
              if (eR == r) {
                toRemove.add(entry.getKey());
              }
            }
            for (            final Register register : toRemove) {
              info.remove(register);
            }
          }
        }
      }
      if (Move.conforms(s)) {
        Operand val=Move.getVal(s);
        if (val.isRegister() && !val.asRegister().getRegister().isPhysical()) {
          info.put(Move.getResult(s).getRegister(),val);
        }
      }
    }
    info.clear();
  }
}",0.999326825984517
149812,"private static DefUseEffect intDiv(Instruction s){
  if (CF_INT) {
    Operand op1=GuardedBinary.getVal1(s);
    Operand op2=GuardedBinary.getVal2(s);
    if (op1.similar(op2)) {
      Move.mutate(s,INT_MOVE,GuardedBinary.getClearResult(s),IC(1));
      return DefUseEffect.MOVE_FOLDED;
    }
    if (op2.isIntConstant()) {
      int val2=op2.asIntConstant().value;
      if (val2 == 0) {
        return DefUseEffect.UNCHANGED;
      }
      if (op1.isIntConstant()) {
        int val1=op1.asIntConstant().value;
        Move.mutate(s,INT_MOVE,GuardedBinary.getClearResult(s),IC(val1 / val2));
        return DefUseEffect.MOVE_FOLDED;
      }
 else {
        if (val2 == 1) {
          Move.mutate(s,INT_MOVE,GuardedBinary.getClearResult(s),GuardedBinary.getClearVal1(s));
          return DefUseEffect.MOVE_REDUCED;
        }
        int power=PowerOf2(val2);
        if (power != -1) {
          Binary.mutate(s,INT_SHR,GuardedBinary.getClearResult(s),GuardedBinary.getClearVal1(s),IC(power));
          return DefUseEffect.REDUCED;
        }
      }
    }
  }
  return DefUseEffect.UNCHANGED;
}","private static DefUseEffect intDiv(AbstractRegisterPool regpool,Instruction s){
  if (CF_INT) {
    Operand op1=GuardedBinary.getVal1(s);
    Operand op2=GuardedBinary.getVal2(s);
    if (op1.similar(op2)) {
      Move.mutate(s,INT_MOVE,GuardedBinary.getClearResult(s),IC(1));
      return DefUseEffect.MOVE_FOLDED;
    }
    if (op2.isIntConstant()) {
      int val2=op2.asIntConstant().value;
      if (val2 == 0) {
        return DefUseEffect.UNCHANGED;
      }
      if (op1.isIntConstant()) {
        int val1=op1.asIntConstant().value;
        Move.mutate(s,INT_MOVE,GuardedBinary.getClearResult(s),IC(val1 / val2));
        return DefUseEffect.MOVE_FOLDED;
      }
 else {
        if (val2 == 1) {
          Move.mutate(s,INT_MOVE,GuardedBinary.getClearResult(s),GuardedBinary.getClearVal1(s));
          return DefUseEffect.MOVE_REDUCED;
        }
        if (s.getPrev() != null) {
          int power=PowerOf2(val2);
          if (power != -1) {
            int x=(1 << power) - 1;
            RegisterOperand tempInt1=regpool.makeTempInt();
            RegisterOperand tempInt2=regpool.makeTempInt();
            RegisterOperand tempInt3=regpool.makeTempInt();
            Instruction sign=Binary.create(INT_SHR,tempInt1,GuardedBinary.getVal1(s).copy(),IC(31));
            sign.copyPosition(s);
            s.insertBefore(sign);
            Instruction masked=Binary.create(INT_AND,tempInt2,tempInt1.copyRO(),IC((1 << power) - 1));
            masked.copyPosition(s);
            s.insertBefore(masked);
            Instruction adjusted=Binary.create(INT_ADD,tempInt3,tempInt2.copyRO(),GuardedBinary.getClearVal1(s));
            adjusted.copyPosition(s);
            s.insertBefore(adjusted);
            Binary.mutate(s,INT_SHR,GuardedBinary.getClearResult(s),tempInt3.copyRO(),IC(power));
            return DefUseEffect.REDUCED;
          }
        }
      }
    }
  }
  return DefUseEffect.UNCHANGED;
}",0.7128647214854111
149813,"/** 
 * Given an instruction, attempt to simplify it. The instruction will be mutated in place. <p> We don't deal with branching operations here -- doing peephole optimizations of branches is the job of a separate module.
 * @param HIR is this the HIR phase?
 * @param regpool register pool in case simplification requires a temporary register
 * @param s the instruction to simplify
 * @return one of UNCHANGED, MOVE_FOLDED, MOVE_REDUCED, TRAP_REDUCED, REDUCED
 */
public static DefUseEffect simplify(boolean hir,AbstractRegisterPool regpool,Instruction s){
  DefUseEffect result;
  char opcode=s.getOpcode();
switch (opcode) {
case GUARD_COMBINE_opcode:
    result=guardCombine(s);
  break;
case TRAP_IF_opcode:
result=trapIf(s);
break;
case NULL_CHECK_opcode:
result=nullCheck(s);
break;
case INT_ZERO_CHECK_opcode:
result=intZeroCheck(s);
break;
case LONG_ZERO_CHECK_opcode:
result=longZeroCheck(s);
break;
case CHECKCAST_opcode:
result=checkcast(s);
break;
case CHECKCAST_UNRESOLVED_opcode:
result=checkcast(s);
break;
case CHECKCAST_NOTNULL_opcode:
result=checkcastNotNull(s);
break;
case INSTANCEOF_opcode:
result=instanceOf(s);
break;
case INSTANCEOF_NOTNULL_opcode:
result=instanceOfNotNull(s);
break;
case OBJARRAY_STORE_CHECK_opcode:
result=objarrayStoreCheck(s);
break;
case OBJARRAY_STORE_CHECK_NOTNULL_opcode:
result=objarrayStoreCheckNotNull(s);
break;
case MUST_IMPLEMENT_INTERFACE_opcode:
result=mustImplementInterface(s);
break;
case INT_COND_MOVE_opcode:
result=intCondMove(s);
break;
case LONG_COND_MOVE_opcode:
result=longCondMove(s);
break;
case FLOAT_COND_MOVE_opcode:
result=floatCondMove(s);
break;
case DOUBLE_COND_MOVE_opcode:
result=doubleCondMove(s);
break;
case REF_COND_MOVE_opcode:
result=refCondMove(s);
break;
case GUARD_COND_MOVE_opcode:
result=guardCondMove(s);
break;
case BOOLEAN_NOT_opcode:
result=booleanNot(s);
break;
case BOOLEAN_CMP_INT_opcode:
result=booleanCmpInt(s);
break;
case BOOLEAN_CMP_ADDR_opcode:
result=booleanCmpAddr(s);
break;
case INT_ADD_opcode:
result=intAdd(s);
break;
case INT_AND_opcode:
result=intAnd(s);
break;
case INT_DIV_opcode:
result=intDiv(s);
break;
case INT_MUL_opcode:
result=intMul(regpool,s);
break;
case INT_NEG_opcode:
result=intNeg(s);
break;
case INT_NOT_opcode:
result=intNot(s);
break;
case INT_OR_opcode:
result=intOr(s);
break;
case INT_REM_opcode:
result=intRem(s);
break;
case INT_SHL_opcode:
result=intShl(s);
break;
case INT_SHR_opcode:
result=intShr(s);
break;
case INT_SUB_opcode:
result=intSub(s);
break;
case INT_USHR_opcode:
result=intUshr(s);
break;
case INT_XOR_opcode:
result=intXor(s);
break;
case REF_ADD_opcode:
result=refAdd(s);
break;
case REF_AND_opcode:
result=refAnd(s);
break;
case REF_SHL_opcode:
result=refShl(s);
break;
case REF_SHR_opcode:
result=refShr(s);
break;
case REF_NEG_opcode:
result=refNeg(s);
break;
case REF_NOT_opcode:
result=refNot(s);
break;
case REF_OR_opcode:
result=refOr(s);
break;
case REF_SUB_opcode:
result=refSub(s);
break;
case REF_USHR_opcode:
result=refUshr(s);
break;
case REF_XOR_opcode:
result=refXor(s);
break;
case LONG_ADD_opcode:
result=longAdd(s);
break;
case LONG_AND_opcode:
result=longAnd(s);
break;
case LONG_CMP_opcode:
result=longCmp(s);
break;
case LONG_DIV_opcode:
result=longDiv(s);
break;
case LONG_MUL_opcode:
result=longMul(regpool,s);
break;
case LONG_NEG_opcode:
result=longNeg(s);
break;
case LONG_NOT_opcode:
result=longNot(s);
break;
case LONG_OR_opcode:
result=longOr(s);
break;
case LONG_REM_opcode:
result=longRem(s);
break;
case LONG_SHL_opcode:
result=longShl(s);
break;
case LONG_SHR_opcode:
result=longShr(s);
break;
case LONG_SUB_opcode:
result=longSub(s);
break;
case LONG_USHR_opcode:
result=longUshr(s);
break;
case LONG_XOR_opcode:
result=longXor(s);
break;
case FLOAT_ADD_opcode:
result=floatAdd(s);
break;
case FLOAT_CMPG_opcode:
result=floatCmpg(s);
break;
case FLOAT_CMPL_opcode:
result=floatCmpl(s);
break;
case FLOAT_DIV_opcode:
result=floatDiv(s);
break;
case FLOAT_MUL_opcode:
result=floatMul(s);
break;
case FLOAT_NEG_opcode:
result=floatNeg(s);
break;
case FLOAT_REM_opcode:
result=floatRem(s);
break;
case FLOAT_SUB_opcode:
result=floatSub(s);
break;
case FLOAT_SQRT_opcode:
result=floatSqrt(s);
break;
case DOUBLE_ADD_opcode:
result=doubleAdd(s);
break;
case DOUBLE_CMPG_opcode:
result=doubleCmpg(s);
break;
case DOUBLE_CMPL_opcode:
result=doubleCmpl(s);
break;
case DOUBLE_DIV_opcode:
result=doubleDiv(s);
break;
case DOUBLE_MUL_opcode:
result=doubleMul(s);
break;
case DOUBLE_NEG_opcode:
result=doubleNeg(s);
break;
case DOUBLE_REM_opcode:
result=doubleRem(s);
break;
case DOUBLE_SUB_opcode:
result=doubleSub(s);
break;
case DOUBLE_SQRT_opcode:
result=doubleSqrt(s);
break;
case DOUBLE_2FLOAT_opcode:
result=double2Float(s);
break;
case DOUBLE_2INT_opcode:
result=double2Int(s);
break;
case DOUBLE_2LONG_opcode:
result=double2Long(s);
break;
case DOUBLE_AS_LONG_BITS_opcode:
result=doubleAsLongBits(s);
break;
case INT_2DOUBLE_opcode:
result=int2Double(s);
break;
case INT_2BYTE_opcode:
result=int2Byte(s);
break;
case INT_2USHORT_opcode:
result=int2UShort(s);
break;
case INT_2FLOAT_opcode:
result=int2Float(s);
break;
case INT_2LONG_opcode:
result=int2Long(s);
break;
case INT_2ADDRSigExt_opcode:
result=int2AddrSigExt(s);
break;
case INT_2ADDRZerExt_opcode:
result=int2AddrZerExt(s);
break;
case LONG_2ADDR_opcode:
result=long2Addr(s);
break;
case INT_2SHORT_opcode:
result=int2Short(s);
break;
case INT_BITS_AS_FLOAT_opcode:
result=intBitsAsFloat(s);
break;
case ADDR_2INT_opcode:
result=addr2Int(s);
break;
case ADDR_2LONG_opcode:
result=addr2Long(s);
break;
case FLOAT_2DOUBLE_opcode:
result=float2Double(s);
break;
case FLOAT_2INT_opcode:
result=float2Int(s);
break;
case FLOAT_2LONG_opcode:
result=float2Long(s);
break;
case FLOAT_AS_INT_BITS_opcode:
result=floatAsIntBits(s);
break;
case LONG_2FLOAT_opcode:
result=long2Float(s);
break;
case LONG_2INT_opcode:
result=long2Int(s);
break;
case LONG_2DOUBLE_opcode:
result=long2Double(s);
break;
case LONG_BITS_AS_DOUBLE_opcode:
result=longBitsAsDouble(s);
break;
case ARRAYLENGTH_opcode:
result=arrayLength(s);
break;
case BOUNDS_CHECK_opcode:
result=boundsCheck(s);
break;
case CALL_opcode:
result=call(hir,regpool,s);
break;
case GETFIELD_opcode:
result=getField(s);
break;
case GET_OBJ_TIB_opcode:
result=getObjTib(s);
break;
case GET_CLASS_TIB_opcode:
result=getClassTib(s);
break;
case GET_TYPE_FROM_TIB_opcode:
result=getTypeFromTib(s);
break;
case GET_ARRAY_ELEMENT_TIB_FROM_TIB_opcode:
result=getArrayElementTibFromTib(s);
break;
case GET_SUPERCLASS_IDS_FROM_TIB_opcode:
result=getSuperclassIdsFromTib(s);
break;
case GET_DOES_IMPLEMENT_FROM_TIB_opcode:
result=getDoesImplementFromTib(s);
break;
case REF_LOAD_opcode:
result=refLoad(s);
break;
default :
result=DefUseEffect.UNCHANGED;
}
if (VM.VerifyAssertions) {
switch (result) {
case MOVE_FOLDED:
VM._assert(Move.conforms(s) && (Move.getVal(s) instanceof ConstantOperand),""String_Node_Str"" + s + ""String_Node_Str""+ OperatorNames.operatorName[opcode]);
break;
case MOVE_REDUCED:
VM._assert(Move.conforms(s) && !(Move.getVal(s) instanceof ConstantOperand),""String_Node_Str"" + s + ""String_Node_Str""+ OperatorNames.operatorName[opcode]);
break;
default :
}
}
return result;
}","/** 
 * Given an instruction, attempt to simplify it. The instruction will be mutated in place. <p> We don't deal with branching operations here -- doing peephole optimizations of branches is the job of a separate module.
 * @param HIR is this the HIR phase?
 * @param regpool register pool in case simplification requires a temporary register
 * @param s the instruction to simplify
 * @return one of UNCHANGED, MOVE_FOLDED, MOVE_REDUCED, TRAP_REDUCED, REDUCED
 */
public static DefUseEffect simplify(boolean hir,AbstractRegisterPool regpool,Instruction s){
  DefUseEffect result;
  char opcode=s.getOpcode();
switch (opcode) {
case GUARD_COMBINE_opcode:
    result=guardCombine(s);
  break;
case TRAP_IF_opcode:
result=trapIf(s);
break;
case NULL_CHECK_opcode:
result=nullCheck(s);
break;
case INT_ZERO_CHECK_opcode:
result=intZeroCheck(s);
break;
case LONG_ZERO_CHECK_opcode:
result=longZeroCheck(s);
break;
case CHECKCAST_opcode:
result=checkcast(s);
break;
case CHECKCAST_UNRESOLVED_opcode:
result=checkcast(s);
break;
case CHECKCAST_NOTNULL_opcode:
result=checkcastNotNull(s);
break;
case INSTANCEOF_opcode:
result=instanceOf(s);
break;
case INSTANCEOF_NOTNULL_opcode:
result=instanceOfNotNull(s);
break;
case OBJARRAY_STORE_CHECK_opcode:
result=objarrayStoreCheck(s);
break;
case OBJARRAY_STORE_CHECK_NOTNULL_opcode:
result=objarrayStoreCheckNotNull(s);
break;
case MUST_IMPLEMENT_INTERFACE_opcode:
result=mustImplementInterface(s);
break;
case INT_COND_MOVE_opcode:
result=intCondMove(s);
break;
case LONG_COND_MOVE_opcode:
result=longCondMove(s);
break;
case FLOAT_COND_MOVE_opcode:
result=floatCondMove(s);
break;
case DOUBLE_COND_MOVE_opcode:
result=doubleCondMove(s);
break;
case REF_COND_MOVE_opcode:
result=refCondMove(s);
break;
case GUARD_COND_MOVE_opcode:
result=guardCondMove(s);
break;
case BOOLEAN_NOT_opcode:
result=booleanNot(s);
break;
case BOOLEAN_CMP_INT_opcode:
result=booleanCmpInt(s);
break;
case BOOLEAN_CMP_ADDR_opcode:
result=booleanCmpAddr(s);
break;
case INT_ADD_opcode:
result=intAdd(s);
break;
case INT_AND_opcode:
result=intAnd(s);
break;
case INT_DIV_opcode:
result=intDiv(regpool,s);
break;
case INT_MUL_opcode:
result=intMul(regpool,s);
break;
case INT_NEG_opcode:
result=intNeg(s);
break;
case INT_NOT_opcode:
result=intNot(s);
break;
case INT_OR_opcode:
result=intOr(s);
break;
case INT_REM_opcode:
result=intRem(s);
break;
case INT_SHL_opcode:
result=intShl(s);
break;
case INT_SHR_opcode:
result=intShr(s);
break;
case INT_SUB_opcode:
result=intSub(s);
break;
case INT_USHR_opcode:
result=intUshr(s);
break;
case INT_XOR_opcode:
result=intXor(s);
break;
case REF_ADD_opcode:
result=refAdd(s);
break;
case REF_AND_opcode:
result=refAnd(s);
break;
case REF_SHL_opcode:
result=refShl(s);
break;
case REF_SHR_opcode:
result=refShr(s);
break;
case REF_NEG_opcode:
result=refNeg(s);
break;
case REF_NOT_opcode:
result=refNot(s);
break;
case REF_OR_opcode:
result=refOr(s);
break;
case REF_SUB_opcode:
result=refSub(s);
break;
case REF_USHR_opcode:
result=refUshr(s);
break;
case REF_XOR_opcode:
result=refXor(s);
break;
case LONG_ADD_opcode:
result=longAdd(s);
break;
case LONG_AND_opcode:
result=longAnd(s);
break;
case LONG_CMP_opcode:
result=longCmp(s);
break;
case LONG_DIV_opcode:
result=longDiv(s);
break;
case LONG_MUL_opcode:
result=longMul(regpool,s);
break;
case LONG_NEG_opcode:
result=longNeg(s);
break;
case LONG_NOT_opcode:
result=longNot(s);
break;
case LONG_OR_opcode:
result=longOr(s);
break;
case LONG_REM_opcode:
result=longRem(s);
break;
case LONG_SHL_opcode:
result=longShl(s);
break;
case LONG_SHR_opcode:
result=longShr(s);
break;
case LONG_SUB_opcode:
result=longSub(s);
break;
case LONG_USHR_opcode:
result=longUshr(s);
break;
case LONG_XOR_opcode:
result=longXor(s);
break;
case FLOAT_ADD_opcode:
result=floatAdd(s);
break;
case FLOAT_CMPG_opcode:
result=floatCmpg(s);
break;
case FLOAT_CMPL_opcode:
result=floatCmpl(s);
break;
case FLOAT_DIV_opcode:
result=floatDiv(s);
break;
case FLOAT_MUL_opcode:
result=floatMul(s);
break;
case FLOAT_NEG_opcode:
result=floatNeg(s);
break;
case FLOAT_REM_opcode:
result=floatRem(s);
break;
case FLOAT_SUB_opcode:
result=floatSub(s);
break;
case FLOAT_SQRT_opcode:
result=floatSqrt(s);
break;
case DOUBLE_ADD_opcode:
result=doubleAdd(s);
break;
case DOUBLE_CMPG_opcode:
result=doubleCmpg(s);
break;
case DOUBLE_CMPL_opcode:
result=doubleCmpl(s);
break;
case DOUBLE_DIV_opcode:
result=doubleDiv(s);
break;
case DOUBLE_MUL_opcode:
result=doubleMul(s);
break;
case DOUBLE_NEG_opcode:
result=doubleNeg(s);
break;
case DOUBLE_REM_opcode:
result=doubleRem(s);
break;
case DOUBLE_SUB_opcode:
result=doubleSub(s);
break;
case DOUBLE_SQRT_opcode:
result=doubleSqrt(s);
break;
case DOUBLE_2FLOAT_opcode:
result=double2Float(s);
break;
case DOUBLE_2INT_opcode:
result=double2Int(s);
break;
case DOUBLE_2LONG_opcode:
result=double2Long(s);
break;
case DOUBLE_AS_LONG_BITS_opcode:
result=doubleAsLongBits(s);
break;
case INT_2DOUBLE_opcode:
result=int2Double(s);
break;
case INT_2BYTE_opcode:
result=int2Byte(s);
break;
case INT_2USHORT_opcode:
result=int2UShort(s);
break;
case INT_2FLOAT_opcode:
result=int2Float(s);
break;
case INT_2LONG_opcode:
result=int2Long(s);
break;
case INT_2ADDRSigExt_opcode:
result=int2AddrSigExt(s);
break;
case INT_2ADDRZerExt_opcode:
result=int2AddrZerExt(s);
break;
case LONG_2ADDR_opcode:
result=long2Addr(s);
break;
case INT_2SHORT_opcode:
result=int2Short(s);
break;
case INT_BITS_AS_FLOAT_opcode:
result=intBitsAsFloat(s);
break;
case ADDR_2INT_opcode:
result=addr2Int(s);
break;
case ADDR_2LONG_opcode:
result=addr2Long(s);
break;
case FLOAT_2DOUBLE_opcode:
result=float2Double(s);
break;
case FLOAT_2INT_opcode:
result=float2Int(s);
break;
case FLOAT_2LONG_opcode:
result=float2Long(s);
break;
case FLOAT_AS_INT_BITS_opcode:
result=floatAsIntBits(s);
break;
case LONG_2FLOAT_opcode:
result=long2Float(s);
break;
case LONG_2INT_opcode:
result=long2Int(s);
break;
case LONG_2DOUBLE_opcode:
result=long2Double(s);
break;
case LONG_BITS_AS_DOUBLE_opcode:
result=longBitsAsDouble(s);
break;
case ARRAYLENGTH_opcode:
result=arrayLength(s);
break;
case BOUNDS_CHECK_opcode:
result=boundsCheck(s);
break;
case CALL_opcode:
result=call(hir,regpool,s);
break;
case GETFIELD_opcode:
result=getField(s);
break;
case GET_OBJ_TIB_opcode:
result=getObjTib(s);
break;
case GET_CLASS_TIB_opcode:
result=getClassTib(s);
break;
case GET_TYPE_FROM_TIB_opcode:
result=getTypeFromTib(s);
break;
case GET_ARRAY_ELEMENT_TIB_FROM_TIB_opcode:
result=getArrayElementTibFromTib(s);
break;
case GET_SUPERCLASS_IDS_FROM_TIB_opcode:
result=getSuperclassIdsFromTib(s);
break;
case GET_DOES_IMPLEMENT_FROM_TIB_opcode:
result=getDoesImplementFromTib(s);
break;
case REF_LOAD_opcode:
result=refLoad(s);
break;
default :
result=DefUseEffect.UNCHANGED;
}
if (VM.VerifyAssertions) {
switch (result) {
case MOVE_FOLDED:
VM._assert(Move.conforms(s) && (Move.getVal(s) instanceof ConstantOperand),""String_Node_Str"" + s + ""String_Node_Str""+ OperatorNames.operatorName[opcode]);
break;
case MOVE_REDUCED:
VM._assert(Move.conforms(s) && !(Move.getVal(s) instanceof ConstantOperand),""String_Node_Str"" + s + ""String_Node_Str""+ OperatorNames.operatorName[opcode]);
break;
default :
}
}
return result;
}",0.999442741710783
149814,"/** 
 * Returns the number of operands that are pure uses. By convention, operands are ordered in instructions such that all defs are first, followed by all combined defs/uses, followed by all pure uses.
 * @return number of operands that are defs
 */
public int getNumberOfPureUses(){
  if (operator.hasVarDefs()) {
    if (VM.VerifyAssertions) {
      VM._assert(operator.getNumberOfDefUses() == 0);
    }
    int numOps=operator.getNumberOfFixedPureUses();
    int i=getNumberOfDefs() + numOps;
    for (; i < ops.length; i++) {
      if (ops[i] == null)       break;
      numOps++;
    }
    return numOps;
  }
 else {
    return operator.getNumberOfFixedPureUses();
  }
}","/** 
 * Returns the number of operands that are pure uses. By convention, operands are ordered in instructions such that all defs are first, followed by all combined defs/uses, followed by all pure uses.
 * @return number of operands that are defs
 */
public int getNumberOfPureUses(){
  if (operator.hasVarDefs()) {
    if (VM.VerifyAssertions) {
      VM._assert(operator.getNumberOfDefUses() == 0);
    }
    int numOps=operator.getNumberOfFixedPureUses();
    int i=getNumberOfDefs() + numOps;
    for (; i < ops.length; i++) {
      if (ops[i] == null)       break;
      numOps++;
    }
    return numOps;
  }
 else {
    if (operator.hasVarUses()) {
      return getNumberOfOperands() - operator.getNumberOfDefs();
    }
 else {
      return operator.getNumberOfFixedPureUses();
    }
  }
}",0.8968792401628223
149815,"/** 
 * Perform Local Constant propagation for a method.
 * @param ir the IR to optimize
 */
public void perform(IR ir){
  HashMap<Register,ConstantOperand> info=new HashMap<Register,ConstantOperand>();
  boolean runBranchOpts=false;
  for (BasicBlock bb=ir.firstBasicBlockInCodeOrder(); bb != null; bb=bb.nextBasicBlockInCodeOrder()) {
    if (bb.isEmpty())     continue;
    container.counter2++;
    if (bb.getInfrequent()) {
      container.counter1++;
      if (ir.options.FREQ_FOCUS_EFFORT)       continue;
    }
    for (Instruction s=bb.firstRealInstruction(), next, sentinel=bb.lastInstruction(); s != sentinel; s=next) {
      next=s.nextInstructionInCodeOrder();
      if (!info.isEmpty()) {
        int numUses=s.getNumberOfUses();
        if (numUses > 0) {
          boolean didSomething=false;
          int numDefs=s.getNumberOfDefs();
          for (int idx=numDefs; idx < numUses + numDefs; idx++) {
            Operand use=s.getOperand(idx);
            if (use instanceof RegisterOperand) {
              RegisterOperand rUse=(RegisterOperand)use;
              Operand value=info.get(rUse.getRegister());
              if (value != null) {
                didSomething=true;
                s.putOperand(idx,value.copy());
              }
            }
          }
          if (didSomething)           Simplifier.simplify(ir.IRStage == IR.HIR,ir.regpool,s);
        }
        for (OperandEnumeration e=s.getDefs(); e.hasMoreElements(); ) {
          Operand def=e.next();
          if (def != null) {
            Register defReg=((RegisterOperand)def).getRegister();
            ConstantOperand cOp=info.get(defReg);
            if (cOp != null) {
              if (Move.conforms(s) && Move.getVal(s).isConstant()) {
                ConstantOperand cOp2=(ConstantOperand)Move.getVal(s);
                if (cOp2.similar(cOp)) {
                  s.remove();
                }
 else {
                  info.put(defReg,cOp2);
                }
              }
 else {
                info.remove(defReg);
              }
            }
          }
        }
      }
 else       if (Move.conforms(s) && Move.getVal(s).isConstant()) {
        info.put(Move.getResult(s).getRegister(),(ConstantOperand)Move.getVal(s));
      }
    }
    info.clear();
    runBranchOpts|=BranchSimplifier.simplify(bb,ir);
  }
  if (runBranchOpts) {
    new BranchOptimizations(0,true,false,false).perform(ir);
  }
}","/** 
 * Perform Local Constant propagation for a method.
 * @param ir the IR to optimize
 */
public void perform(IR ir){
  HashMap<Register,ConstantOperand> info=new HashMap<Register,ConstantOperand>();
  boolean runBranchOpts=false;
  for (BasicBlock bb=ir.firstBasicBlockInCodeOrder(); bb != null; bb=bb.nextBasicBlockInCodeOrder()) {
    if (bb.isEmpty())     continue;
    container.counter2++;
    if (bb.getInfrequent()) {
      container.counter1++;
      if (ir.options.FREQ_FOCUS_EFFORT)       continue;
    }
    for (Instruction s=bb.firstRealInstruction(), next, sentinel=bb.lastInstruction(); s != sentinel; s=next) {
      next=s.nextInstructionInCodeOrder();
      if (!info.isEmpty()) {
        int numUses=s.getNumberOfPureUses();
        if (numUses > 0) {
          boolean didSomething=false;
          int numDefs=s.getNumberOfDefs();
          for (int idx=numDefs; idx < numUses + numDefs; idx++) {
            Operand use=s.getOperand(idx);
            if (use instanceof RegisterOperand) {
              RegisterOperand rUse=(RegisterOperand)use;
              Operand value=info.get(rUse.getRegister());
              if (value != null) {
                didSomething=true;
                s.putOperand(idx,value.copy());
              }
            }
          }
          if (didSomething) {
            Simplifier.simplify(ir.IRStage == IR.HIR,ir.regpool,s);
          }
        }
        if (!info.isEmpty()) {
          for (OperandEnumeration e=s.getDefs(); e.hasMoreElements(); ) {
            Operand def=e.next();
            if (def != null) {
              Register defReg=((RegisterOperand)def).getRegister();
              info.remove(defReg);
            }
          }
        }
      }
      if (Move.conforms(s) && Move.getVal(s).isConstant()) {
        info.put(Move.getResult(s).getRegister(),(ConstantOperand)Move.getVal(s));
      }
    }
    info.clear();
    runBranchOpts|=BranchSimplifier.simplify(bb,ir);
  }
  if (runBranchOpts) {
    new BranchOptimizations(0,true,false,false).perform(ir);
  }
}",0.8662334752408694
149816,"public Offset minus(Offset off2){
  return new Offset(value + off2.value);
}","public Offset minus(Offset off2){
  return new Offset(value - off2.value);
}",0.986842105263158
149817,"/** 
 * This method must be included, as it is used by ResourceBundle.getBundle(), and other places as well. The reference implementation of this method uses the getStackClassLoader() method. Returns the ClassLoader of the method that called the caller. i.e. A.x() calls B.y() calls callerClassLoader(), A's ClassLoader will be returned. Returns null for the bootstrap ClassLoader.
 * @return a ClassLoader or null for the bootstrap ClassLoader
 * @throws SecurityException when called from a non-bootstrap Class
 */
public static ClassLoader callerClassLoader(){
  if (org.jikesrvm.VM.runningVM) {
    ClassLoader ans=RVMClass.getClassLoaderFromStackFrame(1);
    if (ans == BootstrapClassLoader.getBootstrapClassLoader()) {
      return null;
    }
 else {
      return ans;
    }
  }
 else {
    return null;
  }
}","/** 
 * This method must be included, as it is used by ResourceBundle.getBundle(), and other places as well. The reference implementation of this method uses the getStackClassLoader() method. Returns the ClassLoader of the method that called the caller. i.e. A.x() calls B.y() calls callerClassLoader(), A's ClassLoader will be returned. Returns null for the bootstrap ClassLoader.
 * @return a ClassLoader or null for the bootstrap ClassLoader
 * @throws SecurityException when called from a non-bootstrap Class
 */
public static ClassLoader callerClassLoader(){
  if (org.jikesrvm.VM.runningVM) {
    ClassLoader ans=RVMClass.getClassLoaderFromStackFrame(2);
    if (ans == BootstrapClassLoader.getBootstrapClassLoader()) {
      return null;
    }
 else {
      return ans;
    }
  }
 else {
    return null;
  }
}",0.9987760097919216
149818,"private static DefUseEffect mustImplementInterface(Instruction s){
  Operand ref=TypeCheck.getRef(s);
  if (ref.isNullConstant()) {
    Trap.mutate(s,TRAP,null,TrapCodeOperand.NullPtr());
    return DefUseEffect.TRAP_REDUCED;
  }
 else {
    TypeReference lhsType=TypeCheck.getType(s).getTypeRef();
    TypeReference rhsType=ref.getType();
    byte ans=ClassLoaderProxy.includesType(lhsType,rhsType);
    if (ans == OptConstants.YES) {
      Move.mutate(s,REF_MOVE,TypeCheck.getResult(s),ref);
      if (ref.isConstant())       return DefUseEffect.MOVE_FOLDED;
 else       return DefUseEffect.MOVE_REDUCED;
    }
 else     if (ans == OptConstants.NO) {
      RVMType rType=rhsType.peekType();
      if (rType != null && rType.isClassType() && rType.asClass().isFinal()) {
        Trap.mutate(s,TRAP,null,TrapCodeOperand.MustImplement());
        return DefUseEffect.TRAP_REDUCED;
      }
    }
    return DefUseEffect.UNCHANGED;
  }
}","private static DefUseEffect mustImplementInterface(Instruction s){
  Operand ref=TypeCheck.getRef(s);
  if (ref.isNullConstant()) {
    Trap.mutate(s,TRAP,null,TrapCodeOperand.NullPtr());
    return DefUseEffect.TRAP_REDUCED;
  }
 else {
    TypeReference lhsType=TypeCheck.getType(s).getTypeRef();
    TypeReference rhsType=ref.getType();
    byte ans=ClassLoaderProxy.includesType(lhsType,rhsType);
    if (ans == OptConstants.YES) {
      RVMType rType=rhsType.peekType();
      if (rType != null) {
        if (rType.isClassType() && rType.asClass().isInterface()) {
          return DefUseEffect.UNCHANGED;
        }
        Move.mutate(s,REF_MOVE,TypeCheck.getResult(s),ref);
        if (ref.isConstant())         return DefUseEffect.MOVE_FOLDED;
 else         return DefUseEffect.MOVE_REDUCED;
      }
 else {
        return DefUseEffect.UNCHANGED;
      }
    }
 else     if (ans == OptConstants.NO) {
      RVMType rType=rhsType.peekType();
      if (rType != null && rType.isClassType() && rType.asClass().isFinal()) {
        Trap.mutate(s,TRAP,null,TrapCodeOperand.MustImplement());
        return DefUseEffect.TRAP_REDUCED;
      }
    }
    return DefUseEffect.UNCHANGED;
  }
}",0.6258823529411764
149819,"/** 
 * Return the modifiers for the modeled method. The Modifier class should be used to decode the result.
 * @return the modifiers
 * @see java.lang.reflect.Modifier
 */
int getModifiers(){
  return getVMMethod().getModifiers();
}","/** 
 * Return the modifiers for the modeled method. The Modifier class should be used to decode the result.
 * @return the modifiers
 * @see java.lang.reflect.Modifier
 */
int getModifiers(){
  return getVMMember().getModifiers();
}",0.9828326180257512
149820,"/** 
 * Release one or more contiguous chunks associated with a discontiguous space.
 * @param chunk THe address of the start of the contiguous chunk or chunks
 * @return The number of chunks freed
 */
public int releaseDiscontiguousChunks(Address chunk){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(chunk.EQ(chunkAlign(chunk,true)));
  return Map.freeContiguousChunks(chunk);
}","/** 
 * Release one or more contiguous chunks associated with a discontiguous space.
 * @param chunk THe address of the start of the contiguous chunk or chunks
 * @return The number of chunks freed
 */
public int releaseDiscontiguousChunks(Address chunk){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(chunk.EQ(chunkAlign(chunk,true)));
  if (chunk.EQ(lastDiscontiguousRegion)) {
    lastDiscontiguousRegion=Map.getNextContiguousRegion(chunk);
  }
  return Map.freeContiguousChunks(chunk);
}",0.8493771234428086
149821,"/** 
 * Utility to create a java.lang.Class for the given type using the given type reference
 */
protected static Class<?> createClassForType(VM_Type type,VM_TypeReference typeRef){
  if (VM.runningVM) {
    return java.lang.JikesRVMSupport.createClass(type);
  }
 else {
    Exception x;
    try {
      VM_Atom className=typeRef.getName();
      if (className.isAnnotationClass()) {
        return Class.forName(className.annotationClassToAnnotationInterface(),false,VM_Type.class.getClassLoader());
      }
 else       if (className.isClassDescriptor()) {
        return Class.forName(className.classNameFromDescriptor(),false,VM_Type.class.getClassLoader());
      }
 else {
        String classNameString=className.toString();
        if (classNameString.equals(""String_Node_Str"")) {
          return void.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return int.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return long.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return float.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return double.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return char.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return short.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return boolean.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return byte.class;
        }
 else {
          return Class.forName(classNameString.replace('/','.'),false,VM_Type.class.getClassLoader());
        }
      }
    }
 catch (    ClassNotFoundException e) {
      x=e;
    }
catch (    SecurityException e) {
      x=e;
    }
    if (typeRef.isArrayType() && typeRef.getArrayElementType().isCodeType()) {
      return null;
    }
 else     if (!VM.runningVM) {
      VM.sysWriteln(""String_Node_Str"");
      x.printStackTrace();
      return null;
    }
 else {
      throw new Error(""String_Node_Str"",x);
    }
  }
}","/** 
 * Utility to create a java.lang.Class for the given type using the given type reference
 */
protected static Class<?> createClassForType(VM_Type type,VM_TypeReference typeRef){
  if (VM.runningVM) {
    return java.lang.JikesRVMSupport.createClass(type);
  }
 else {
    Exception x;
    try {
      VM_Atom className=typeRef.getName();
      if (className.isAnnotationClass()) {
        return Class.forName(className.annotationClassToAnnotationInterface(),false,VM_Type.class.getClassLoader());
      }
 else       if (className.isClassDescriptor()) {
        return Class.forName(className.classNameFromDescriptor(),false,VM_Type.class.getClassLoader());
      }
 else {
        String classNameString=className.toString();
        if (classNameString.equals(""String_Node_Str"")) {
          return void.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return int.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return long.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return float.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return double.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return char.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return short.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return boolean.class;
        }
 else         if (classNameString.equals(""String_Node_Str"")) {
          return byte.class;
        }
 else {
          return Class.forName(classNameString.replace('/','.'),false,VM_Type.class.getClassLoader());
        }
      }
    }
 catch (    ClassNotFoundException e) {
      x=e;
    }
catch (    SecurityException e) {
      x=e;
    }
    if (typeRef.isArrayType() && typeRef.getArrayElementType().isCodeType()) {
      return VM_CodeArray.class;
    }
 else     if (!VM.runningVM) {
      VM.sysWriteln(""String_Node_Str"");
      x.printStackTrace();
      return null;
    }
 else {
      throw new Error(""String_Node_Str"",x);
    }
  }
}",0.9949794614331356
149822,"private static DefUseEffect arrayLength(Instruction s){
  if (CF_FIELDS) {
    Operand op=GuardedUnary.getVal(s);
    if (op.isObjectConstant()) {
      int length=Array.getLength(op.asObjectConstant().value);
      Move.mutate(s,INT_MOVE,GuardedUnary.getClearResult(s),IC(length));
      return DefUseEffect.MOVE_FOLDED;
    }
 else     if (op.isNullConstant()) {
      return DefUseEffect.UNCHANGED;
    }
  }
  return DefUseEffect.UNCHANGED;
}","private static DefUseEffect arrayLength(Instruction s){
  if (CF_FIELDS) {
    Operand op=GuardedUnary.getVal(s);
    if (op.isObjectConstant()) {
      int length=0;
      if (op.getType().getArrayElementType().isCodeType()) {
        length=((VM_CodeArray)(op.asObjectConstant().value)).length();
      }
 else {
        length=Array.getLength(op.asObjectConstant().value);
      }
      Move.mutate(s,INT_MOVE,GuardedUnary.getClearResult(s),IC(length));
      return DefUseEffect.MOVE_FOLDED;
    }
 else     if (op.isNullConstant()) {
      return DefUseEffect.UNCHANGED;
    }
  }
  return DefUseEffect.UNCHANGED;
}",0.8255159474671669
149823,"/** 
 * A JNI helper function, to set the value pointed to by a C pointer of type (jboolean *).
 * @param boolPtr Native pointer to a jboolean variable to be set.   May bethe NULL pointer, in which case we do nothing.
 * @param val Value to set it to (usually TRUE)XXX There was a strange bug where calling this would crash the VM. That's why it's ifdef'd.  So the dozen-odd places in VM_JNIFunctions where I would use it instead have this code inlined, guarded with an #if.  --Steve Augart
 */
static void setBoolStar(Address boolPtr,boolean val){
  if (boolPtr.isZero()) {
    return;
  }
  if (val) {
    boolPtr.store((byte)1);
  }
 else {
    boolPtr.store((byte)0);
  }
}","/** 
 * A JNI helper function, to set the value pointed to by a C pointer of type (jboolean *).
 * @param boolPtr Native pointer to a jboolean variable to be set.   May bethe NULL pointer, in which case we do nothing.
 * @param val Value to set it to (usually TRUE)
 */
static void setBoolStar(Address boolPtr,boolean val){
  if (boolPtr.isZero()) {
    return;
  }
  if (val) {
    boolPtr.store((byte)1);
  }
 else {
    boolPtr.store((byte)0);
  }
}",0.8007085916740478
149824,"/** 
 * Mark final fields as being available as literals
 */
private void markFinalFieldsAsLiterals(){
  for (  VM_Field f : getStaticFields()) {
    if (f.isFinal()) {
      Offset fieldOffset=f.getOffset();
      if (VM_Statics.isReference(VM_Statics.offsetAsSlot(fieldOffset))) {
        VM_Statics.markAsReferenceLiteral(fieldOffset);
      }
 else {
        VM_Statics.markAsNumericLiteral(fieldOffset);
      }
    }
  }
}","/** 
 * Mark final fields as being available as literals
 */
private void markFinalFieldsAsLiterals(){
  for (  VM_Field f : getStaticFields()) {
    if (f.isFinal()) {
      Offset fieldOffset=f.getOffset();
      if (VM_Statics.isReference(VM_Statics.offsetAsSlot(fieldOffset))) {
        VM_Statics.markAsReferenceLiteral(fieldOffset);
      }
 else {
        VM_Statics.markAsNumericLiteral(f.getSize(),fieldOffset);
      }
    }
  }
}",0.9861751152073732
149825,"/** 
 * Allocate a numeric slot in the jtoc.
 * @param size of slot
 * @param field is the slot for a field
 * @return offset of slot that was allocated as int(two slots are allocated for longs and doubles)
 */
public static synchronized Offset allocateNumericSlot(int size,boolean field){
  int slot;
  if (size == BYTES_IN_LONG) {
    nextNumericSlot--;
    if ((nextNumericSlot & 1) != 0) {
      nextNumericSlot--;
      numericSlotHole=nextNumericSlot + 2;
    }
    slot=nextNumericSlot;
    nextNumericSlot--;
  }
 else {
    if (numericSlotHole != middleOfTable) {
      slot=numericSlotHole;
      numericSlotHole=middleOfTable;
    }
 else {
      slot=nextNumericSlot;
      nextNumericSlot--;
    }
    if (field) {
      numericFieldVector.set(slot);
    }
  }
  if (nextNumericSlot < 0) {
    enlargeTable();
  }
  return slotAsOffset(slot);
}","/** 
 * Allocate a numeric slot in the jtoc.
 * @param size of slot
 * @param field is the slot for a field
 * @return offset of slot that was allocated as int(two slots are allocated for longs and doubles)
 */
public static synchronized Offset allocateNumericSlot(int size,boolean field){
  int slot;
  if (size == BYTES_IN_LONG) {
    nextNumericSlot--;
    if ((nextNumericSlot & 1) != 0) {
      nextNumericSlot--;
      numericSlotHole=nextNumericSlot + 2;
    }
    slot=nextNumericSlot;
    nextNumericSlot--;
    if (field) {
      numericFieldVector.set(slot);
      numericFieldVector.set(slot + 1);
    }
  }
 else {
    if (numericSlotHole != middleOfTable) {
      slot=numericSlotHole;
      numericSlotHole=middleOfTable;
    }
 else {
      slot=nextNumericSlot;
      nextNumericSlot--;
    }
    if (field) {
      numericFieldVector.set(slot);
    }
  }
  if (nextNumericSlot < 0) {
    enlargeTable();
  }
  return slotAsOffset(slot);
}",0.9453943739658024
149826,"/** 
 * Mark a slot that was previously a field as being a literal as its value is final
 */
public static synchronized void markAsNumericLiteral(Offset fieldOffset){
  int slot=offsetAsSlot(fieldOffset);
  numericFieldVector.clear(slot);
}","/** 
 * Mark a slot that was previously a field as being a literal as its value is final
 */
public static synchronized void markAsNumericLiteral(int size,Offset fieldOffset){
  int slot=offsetAsSlot(fieldOffset);
  if (size == BYTES_IN_LONG) {
    numericFieldVector.clear(slot);
    numericFieldVector.clear(slot + 1);
  }
 else {
    numericFieldVector.clear(slot);
  }
}",0.7817589576547231
149827,"/** 
 * Compute forward dependences from a given def to a given node.
 * @param op source operand
 * @param destNode destination node
 * @param lastExceptionNode node representing the last PEI
 */
private void computeForwardDependencesDef(Operand op,DepGraphNode destNode,DepGraphNode lastExceptionNode){
  if (!(op instanceof RegisterOperand))   return;
  RegisterOperand regOp=(RegisterOperand)op;
  DepGraphNode sourceNode=regOp.getRegister().dNode();
  if (sourceNode != null) {
    int type=regOp.getRegister().isValidation() ? GUARD_OUTPUT : REG_OUTPUT;
    sourceNode.insertOutEdge(destNode,type);
    if (lastExceptionNode != null && regOp.getRegister().spansBasicBlock() && currentBlock.hasExceptionHandlers()) {
      if (!ir.getHandlerLivenessComputed() || handlerLiveSet.contains(regOp.getRegister())) {
        lastExceptionNode.insertOutEdge(destNode,EXCEPTION_R);
      }
    }
  }
  regOp.getRegister().setdNode(destNode);
}","/** 
 * Compute forward dependences from a given def to a given node.
 * @param op source operand
 * @param destNode destination node
 * @param lastExceptionNode node representing the last PEI
 */
private void computeForwardDependencesDef(Operand op,DepGraphNode destNode,DepGraphNode lastExceptionNode){
  if (!(op instanceof RegisterOperand))   return;
  RegisterOperand regOp=(RegisterOperand)op;
  DepGraphNode sourceNode=regOp.getRegister().dNode();
  if (sourceNode != null) {
    int type=regOp.getRegister().isValidation() ? GUARD_OUTPUT : REG_OUTPUT;
    sourceNode.insertOutEdge(destNode,type);
  }
  if (lastExceptionNode != null && regOp.getRegister().spansBasicBlock() && currentBlock.hasExceptionHandlers()) {
    if (!ir.getHandlerLivenessComputed() || handlerLiveSet.contains(regOp.getRegister())) {
      lastExceptionNode.insertOutEdge(destNode,EXCEPTION_R);
    }
  }
  regOp.getRegister().setdNode(destNode);
}",0.9497326203208556
149828,"private void establishDefragSpillThreshold(ChunkList chunkMap,ImmixSpace space){
  int availableLines;
  if (TMP_VERBOSE_DEFRAG_STATS || !TMP_USE_NAIVE_SPILL_DEFRAG_THRESHOLD) {
    availableLines=space.getAvailableLines(spillAvailHistogram);
    if (TMP_VERBOSE_DEFRAG_STATS) {
      Log.write(""String_Node_Str"");
      Log.write(availableLines);
      Log.write(""String_Node_Str"");
      Log.write(availableLines << LOG_BYTES_IN_LINE);
      Log.writeln(""String_Node_Str"");
      Defrag.defragBytesAvailable.inc(availableLines << LOG_BYTES_IN_LINE);
    }
  }
  if (TMP_USE_NAIVE_SPILL_DEFRAG_THRESHOLD)   defragSpillThreshold=(short)(Options.defragSimpleSpillThreshold.getValue() * MAX_CONSV_SPILL_COUNT);
 else {
    if (!TMP_EAGER_SPILL_MARK_HISTO_CONSTRUCTION)     updateMarkHistogram(chunkMap);
    availableLines+=availableCleanPagesForDefrag << (LOG_BYTES_IN_PAGE - LOG_BYTES_IN_LINE);
    int requiredLines=0;
    short threshold=(short)(TMP_TRIAL_MARK_HISTO ? 0 : MAX_CONSV_SPILL_COUNT);
    int limit=(int)(availableLines / Options.defragLineReuseRatio.getValue());
    int collectors=VM.activePlan.collectorCount();
    for (short index=MAX_CONSV_SPILL_COUNT; index >= TMP_MIN_SPILL_THRESHOLD && limit > requiredLines; index--) {
      threshold=(short)(TMP_TRIAL_MARK_HISTO ? MAX_CONSV_SPILL_COUNT - index : index);
      int thisBucketMark=0;
      int thisBucketAvail=0;
      if (TMP_EAGER_SPILL_MARK_HISTO_CONSTRUCTION)       for (int c=0; c < collectors; c++)       thisBucketMark+=spillMarkHistograms[c][threshold];
 else       thisBucketMark=spillMarkHistogram[threshold];
      if (TMP_DECREASE_AVAIL_WHEN_CALC_THRESHOLD) {
        if (TMP_EAGER_SPILL_AVAIL_HISTO_CONSTRUCTION)         for (int c=0; c < collectors; c++)         thisBucketAvail+=spillAvailHistograms[c][threshold];
 else         thisBucketAvail=spillAvailHistogram[threshold];
      }
      if (TMP_VERBOSE_DEFRAG_STATS && Options.verbose.getValue() >= 1) {
        Log.write(""String_Node_Str"");
        Log.write(threshold);
        Log.write(""String_Node_Str"");
        Log.write(thisBucketMark);
        Log.write(""String_Node_Str"");
        Log.write(thisBucketAvail);
        Log.write(""String_Node_Str"");
        Log.write(requiredLines);
        Log.write(""String_Node_Str"");
        Log.write(availableLines);
        Log.write(""String_Node_Str"");
        Log.write(limit);
        Log.writeln(""String_Node_Str"");
      }
      if (TMP_DECREASE_AVAIL_WHEN_CALC_THRESHOLD)       limit-=thisBucketAvail;
      requiredLines+=thisBucketMark;
    }
    defragSpillThreshold=threshold;
  }
}","private void establishDefragSpillThreshold(ChunkList chunkMap,ImmixSpace space){
  int availableLines;
  if (TMP_VERBOSE_DEFRAG_STATS || !TMP_USE_NAIVE_SPILL_DEFRAG_THRESHOLD) {
    availableLines=space.getAvailableLines(spillAvailHistogram);
    if (TMP_VERBOSE_DEFRAG_STATS && Options.verbose.getValue() >= 1) {
      Log.write(""String_Node_Str"");
      Log.write(availableLines);
      Log.write(""String_Node_Str"");
      Log.write(availableLines << LOG_BYTES_IN_LINE);
      Log.writeln(""String_Node_Str"");
      Defrag.defragBytesAvailable.inc(availableLines << LOG_BYTES_IN_LINE);
    }
  }
  if (TMP_USE_NAIVE_SPILL_DEFRAG_THRESHOLD)   defragSpillThreshold=(short)(Options.defragSimpleSpillThreshold.getValue() * MAX_CONSV_SPILL_COUNT);
 else {
    if (!TMP_EAGER_SPILL_MARK_HISTO_CONSTRUCTION)     updateMarkHistogram(chunkMap);
    availableLines+=availableCleanPagesForDefrag << (LOG_BYTES_IN_PAGE - LOG_BYTES_IN_LINE);
    int requiredLines=0;
    short threshold=(short)(TMP_TRIAL_MARK_HISTO ? 0 : MAX_CONSV_SPILL_COUNT);
    int limit=(int)(availableLines / Options.defragLineReuseRatio.getValue());
    int collectors=VM.activePlan.collectorCount();
    for (short index=MAX_CONSV_SPILL_COUNT; index >= TMP_MIN_SPILL_THRESHOLD && limit > requiredLines; index--) {
      threshold=(short)(TMP_TRIAL_MARK_HISTO ? MAX_CONSV_SPILL_COUNT - index : index);
      int thisBucketMark=0;
      int thisBucketAvail=0;
      if (TMP_EAGER_SPILL_MARK_HISTO_CONSTRUCTION)       for (int c=0; c < collectors; c++)       thisBucketMark+=spillMarkHistograms[c][threshold];
 else       thisBucketMark=spillMarkHistogram[threshold];
      if (TMP_DECREASE_AVAIL_WHEN_CALC_THRESHOLD) {
        if (TMP_EAGER_SPILL_AVAIL_HISTO_CONSTRUCTION)         for (int c=0; c < collectors; c++)         thisBucketAvail+=spillAvailHistograms[c][threshold];
 else         thisBucketAvail=spillAvailHistogram[threshold];
      }
      if (TMP_VERBOSE_DEFRAG_STATS && Options.verbose.getValue() >= 1) {
        Log.write(""String_Node_Str"");
        Log.write(threshold);
        Log.write(""String_Node_Str"");
        Log.write(thisBucketMark);
        Log.write(""String_Node_Str"");
        Log.write(thisBucketAvail);
        Log.write(""String_Node_Str"");
        Log.write(requiredLines);
        Log.write(""String_Node_Str"");
        Log.write(availableLines);
        Log.write(""String_Node_Str"");
        Log.write(limit);
        Log.writeln(""String_Node_Str"");
      }
      if (TMP_DECREASE_AVAIL_WHEN_CALC_THRESHOLD)       limit-=thisBucketAvail;
      requiredLines+=thisBucketMark;
    }
    defragSpillThreshold=threshold;
  }
}",0.993270524899058
149829,"/** 
 * Prepare for a new collection increment.
 */
public void prepare(boolean majorGC){
  if (majorGC)   markState=ObjectHeader.deltaMarkState(markState,true);
  chunkMap.reset();
  defrag.prepare(chunkMap,this);
  inCollection=true;
  if (TMP_CHECK_REUSE_EFFICIENCY) {
    float ratio=(TMPreusableLineCount > 0) ? ((float)TMPreusedLineCount / (float)TMPreusableLineCount) : (float)1.0;
    Log.write(""String_Node_Str"");
    Log.write(TMPreusedLineCount);
    Log.write(""String_Node_Str"");
    Log.write(TMPreusableLineCount);
    Log.write(""String_Node_Str"");
    Log.write(ratio);
    ratio=(TMPreusableBlockCount > 0) ? ((float)TMPreusedBlockCount / (float)TMPreusableBlockCount) : (float)1.0;
    Log.write(""String_Node_Str"");
    Log.write(TMPreusedBlockCount);
    Log.write(""String_Node_Str"");
    Log.write(TMPreusableBlockCount);
    Log.write(""String_Node_Str"");
    Log.write(ratio);
    Log.write(""String_Node_Str"");
    TMPreusableLineCount=0;
    TMPreusedLineCount=0;
  }
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(VM.activePlan.collectorCount() <= MAX_COLLECTORS);
}","/** 
 * Prepare for a new collection increment.
 */
public void prepare(boolean majorGC){
  if (majorGC)   markState=ObjectHeader.deltaMarkState(markState,true);
  chunkMap.reset();
  defrag.prepare(chunkMap,this);
  inCollection=true;
  if (TMP_CHECK_REUSE_EFFICIENCY && Options.verbose.getValue() >= 1) {
    float ratio=(TMPreusableLineCount > 0) ? ((float)TMPreusedLineCount / (float)TMPreusableLineCount) : (float)1.0;
    Log.write(""String_Node_Str"");
    Log.write(TMPreusedLineCount);
    Log.write(""String_Node_Str"");
    Log.write(TMPreusableLineCount);
    Log.write(""String_Node_Str"");
    Log.write(ratio);
    ratio=(TMPreusableBlockCount > 0) ? ((float)TMPreusedBlockCount / (float)TMPreusableBlockCount) : (float)1.0;
    Log.write(""String_Node_Str"");
    Log.write(TMPreusedBlockCount);
    Log.write(""String_Node_Str"");
    Log.write(TMPreusableBlockCount);
    Log.write(""String_Node_Str"");
    Log.write(ratio);
    Log.write(""String_Node_Str"");
    TMPreusableLineCount=0;
    TMPreusedLineCount=0;
  }
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(VM.activePlan.collectorCount() <= MAX_COLLECTORS);
}",0.9842413327330032
149830,"/** 
 * Perform any required post allocation initialization
 * @param object the object ref to the storage to be initialized
 */
@Inline public void postAlloc(ObjectReference object,int bytes,boolean straddle){
  if (VM.VERIFY_ASSERTIONS && TMP_EXACT_ALLOC_TIME_STRADDLE_CHECK) {
    Address start=VM.objectModel.objectStartRef(object);
    Address end=VM.objectModel.getObjectEndAddress(object).minus(1);
    boolean sanityStraddle=start.toWord().xor(end.toWord()).toInt() >= BYTES_IN_LINE;
    VM.assertions._assert(sanityStraddle == straddle);
  }
  boolean setStraddleBit=(TMP_INEXACT_ALLOC_TIME_STRADDLE_CHECK && bytes > BYTES_IN_LINE) || (TMP_EXACT_ALLOC_TIME_STRADDLE_CHECK && straddle);
  if (setStraddleBit)   ObjectHeader.markAsStraddling(object);
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(ObjectHeader.isNewObject(object));
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!ObjectHeader.isForwardedOrMarked(object));
}","/** 
 * Perform any required post allocation initialization
 * @param object the object ref to the storage to be initialized
 */
@Inline public void postAlloc(ObjectReference object,int bytes,boolean straddle){
  if (VM.VERIFY_ASSERTIONS && TMP_EXACT_ALLOC_TIME_STRADDLE_CHECK) {
    Address start=VM.objectModel.objectStartRef(object);
    Address end=VM.objectModel.getObjectEndAddress(object).minus(1);
    boolean sanityStraddle=start.toWord().xor(end.toWord()).toInt() >= BYTES_IN_LINE;
    VM.assertions._assert(sanityStraddle == straddle);
  }
  boolean setStraddleBit=(TMP_INEXACT_ALLOC_TIME_STRADDLE_CHECK && bytes > BYTES_IN_LINE) || (TMP_EXACT_ALLOC_TIME_STRADDLE_CHECK && straddle);
  if (setStraddleBit)   ObjectHeader.markAsStraddling(object);
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(ObjectHeader.isNewObject(object));
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!ObjectHeader.isForwardedOrBeingForwarded(object));
}",0.9915433403805496
149831,"/** 
 * Test the liveness of an object during copying sticky mark bits collection
 * @param object The object in question
 * @return True if this object is known to be live (i.e. it is marked)
 */
@Inline public boolean copyNurseryIsLive(ObjectReference object){
  return ObjectHeader.isForwardedOrMarked(object) || ObjectHeader.testMarkState(object,markState);
}","/** 
 * Test the liveness of an object during copying sticky mark bits collection
 * @param object The object in question
 * @return True if this object is known to be live (i.e. it is marked)
 */
@Inline public boolean copyNurseryIsLive(ObjectReference object){
  return ObjectHeader.isForwardedOrBeingForwarded(object) || ObjectHeader.testMarkState(object,markState);
}",0.9782016348773842
149832,"/** 
 * Generic test of the liveness of an object
 * @param object The object in question
 * @return True if this object is known to be live (i.e. it is marked)
 */
@Inline public boolean isLive(ObjectReference object){
  if (TMP_SUPPORT_DEFRAG && defrag.inDefrag() && isDefragSource(object))   return ObjectHeader.isForwardedOrMarked(object) || ObjectHeader.testMarkState(object,markState);
 else   return ObjectHeader.testMarkState(object,markState);
}","/** 
 * Generic test of the liveness of an object
 * @param object The object in question
 * @return True if this object is known to be live (i.e. it is marked)
 */
@Inline public boolean isLive(ObjectReference object){
  if (TMP_SUPPORT_DEFRAG && defrag.inDefrag() && isDefragSource(object))   return ObjectHeader.isForwardedOrBeingForwarded(object) || ObjectHeader.testMarkState(object,markState);
 else   return ObjectHeader.testMarkState(object,markState);
}",0.982532751091703
149833,"/** 
 * Perform any required post copy (i.e. in-GC allocation) initialization. This is relevant (for example) when Squish is used as the mature space in a copying GC.
 * @param object the object ref to the storage to be initialized
 * @param majorGC Is this copy happening during a major gc?
 */
@Inline public void postCopy(ObjectReference object,int bytes,boolean majorGC,boolean straddle){
  boolean setStraddleBit=(TMP_INEXACT_ALLOC_TIME_STRADDLE_CHECK && bytes > BYTES_IN_LINE) || (TMP_EXACT_ALLOC_TIME_STRADDLE_CHECK && straddle);
  ObjectHeader.writeMarkState(object,markState,setStraddleBit);
  if (!MARK_LINE_AT_SCAN_TIME && majorGC)   markLines(object);
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!ObjectHeader.isForwardedOrMarked(object));
  if (VM.VERIFY_ASSERTIONS && Plan.NEEDS_LOG_BIT_IN_HEADER)   VM.assertions._assert(ObjectHeader.isUnloggedObject(object));
}","/** 
 * Perform any required post copy (i.e. in-GC allocation) initialization. This is relevant (for example) when Squish is used as the mature space in a copying GC.
 * @param object the object ref to the storage to be initialized
 * @param majorGC Is this copy happening during a major gc?
 */
@Inline public void postCopy(ObjectReference object,int bytes,boolean majorGC,boolean straddle){
  boolean setStraddleBit=(TMP_INEXACT_ALLOC_TIME_STRADDLE_CHECK && bytes > BYTES_IN_LINE) || (TMP_EXACT_ALLOC_TIME_STRADDLE_CHECK && straddle);
  ObjectHeader.writeMarkState(object,markState,setStraddleBit);
  if (!MARK_LINE_AT_SCAN_TIME && majorGC)   markLines(object);
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!ObjectHeader.isForwardedOrBeingForwarded(object));
  if (VM.VERIFY_ASSERTIONS && Plan.NEEDS_LOG_BIT_IN_HEADER)   VM.assertions._assert(ObjectHeader.isUnloggedObject(object));
}",0.9910011248593926
149834,"/** 
 * Trace a reference to an object, forwarding the object if appropriate If the object is not already marked, mark the object and enqueue it for subsequent processing.
 * @param trace The trace performing the transitive closure
 * @param object The object to be traced.
 * @param allocator The allocator to which any copying should be directed
 * @return Either the object or a forwarded object, if it was forwarded.
 */
@Inline private ObjectReference traceObjectWithOpportunisticCopy(TransitiveClosure trace,ObjectReference object,int allocator,boolean nurseryCollection){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(nurseryCollection || (defrag.determined(true) && isDefragSource(object)));
  Word forwardingWord=ObjectHeader.attemptToBeForwarder(object);
  if (ObjectHeader.isForwardedOrBeingForwarded(forwardingWord)) {
    ObjectReference rtn=ObjectHeader.spinAndGetForwardedObject(object,forwardingWord);
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(((rtn == object) && ((nurseryCollection && ObjectHeader.testMarkState(object,markState)) || defrag.spaceExhausted() || ObjectHeader.isPinnedObject(object))) || (rtn != object) && (nurseryCollection || !isDefragSource(rtn)));
    if (VM.VERIFY_ASSERTIONS && Plan.NEEDS_LOG_BIT_IN_HEADER)     VM.assertions._assert(ObjectHeader.isUnloggedObject(rtn));
    return rtn;
  }
 else {
    if (ObjectHeader.testMarkState(object,markState)) {
      if (VM.VERIFY_ASSERTIONS)       VM.assertions._assert(nurseryCollection || defrag.spaceExhausted() || ObjectHeader.isPinnedObject(object));
      ObjectHeader.setForwardingWord(object,forwardingWord.or(ObjectHeader.UNLOGGED_BIT));
      if (VM.VERIFY_ASSERTIONS && Plan.NEEDS_LOG_BIT_IN_HEADER)       VM.assertions._assert(ObjectHeader.isUnloggedObject(object));
      return object;
    }
 else {
      ObjectReference newObject;
      if (ObjectHeader.isPinnedObject(object) || (!TMP_DEFRAG_TO_IMMORTAL && defrag.spaceExhausted())) {
        Word markValue=Plan.NEEDS_LOG_BIT_IN_HEADER ? markState.or(ObjectHeader.UNLOGGED_BIT) : markState;
        Word oldMarkState=ObjectHeader.testAndMark(object,markValue);
        if (VM.VERIFY_ASSERTIONS)         VM.assertions._assert(oldMarkState != markValue);
        newObject=object;
        if (TMP_VERBOSE_DEFRAG_STATS)         Defrag.defragBytesSkipped.inc(VM.objectModel.getCurrentSize(newObject));
        if (VM.VERIFY_ASSERTIONS && Plan.NEEDS_LOG_BIT_IN_HEADER)         VM.assertions._assert(ObjectHeader.isUnloggedObject(newObject));
      }
 else {
        newObject=ObjectHeader.forwardObject(object,allocator);
        if (TMP_VERBOSE_DEFRAG_STATS)         Defrag.defragBytesCopied.inc(VM.objectModel.getCurrentSize(newObject));
        if (VM.VERIFY_ASSERTIONS && Plan.NEEDS_LOG_BIT_IN_HEADER)         VM.assertions._assert(ObjectHeader.isUnloggedObject(newObject));
      }
      if (!MARK_LINE_AT_SCAN_TIME)       ImmixSpace.markLines(newObject);
      trace.processNode(newObject);
      if (VM.VERIFY_ASSERTIONS) {
        if (!((getSpaceForObject(newObject) != this) || (newObject == object) || (nurseryCollection && willNotMoveThisNurseryGC(newObject))|| (defrag.inDefrag() && willNotMoveThisGC(newObject)))) {
          Log.write(""String_Node_Str"");
          Log.writeln(object);
          Log.write(""String_Node_Str"");
          Log.writeln(newObject);
          Log.write(""String_Node_Str"");
          Log.writeln(ObjectReference.fromObject(this));
          Log.write(""String_Node_Str"");
          Log.writeln(ObjectReference.fromObject(getSpaceForObject(newObject)));
          Log.write(""String_Node_Str"");
          Log.writeln(nurseryCollection);
          Log.write(""String_Node_Str"");
          Log.writeln(ObjectHeader.isMatureObject(object));
          Log.write(""String_Node_Str"");
          Log.writeln(willNotMoveThisNurseryGC(newObject));
          Log.write(""String_Node_Str"");
          Log.writeln(ObjectHeader.isPinnedObject(object));
          VM.assertions._assert(false);
        }
      }
      return newObject;
    }
  }
}","/** 
 * Trace a reference to an object, forwarding the object if appropriate If the object is not already marked, mark the object and enqueue it for subsequent processing.
 * @param trace The trace performing the transitive closure
 * @param object The object to be traced.
 * @param allocator The allocator to which any copying should be directed
 * @return Either the object or a forwarded object, if it was forwarded.
 */
@Inline private ObjectReference traceObjectWithOpportunisticCopy(TransitiveClosure trace,ObjectReference object,int allocator,boolean nurseryCollection){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(nurseryCollection || (defrag.determined(true) && isDefragSource(object)));
  Word priorForwardingWord=ObjectHeader.attemptToBeForwarder(object);
  if (ObjectHeader.isForwardedOrBeingForwarded(priorForwardingWord)) {
    ObjectReference rtn=ObjectHeader.spinAndGetForwardedObject(object,priorForwardingWord);
    if (VM.VERIFY_ASSERTIONS && rtn == object)     VM.assertions._assert((nurseryCollection && ObjectHeader.testMarkState(object,markState)) || defrag.spaceExhausted() || ObjectHeader.isPinnedObject(object));
    if (VM.VERIFY_ASSERTIONS && rtn != object)     VM.assertions._assert(nurseryCollection || !isDefragSource(rtn));
    if (VM.VERIFY_ASSERTIONS && Plan.NEEDS_LOG_BIT_IN_HEADER)     VM.assertions._assert(ObjectHeader.isUnloggedObject(rtn));
    return rtn;
  }
 else {
    if (ObjectHeader.testMarkState(priorForwardingWord,markState)) {
      if (VM.VERIFY_ASSERTIONS)       VM.assertions._assert(nurseryCollection || defrag.spaceExhausted() || ObjectHeader.isPinnedObject(object));
      ObjectHeader.setForwardingWordAndEnsureUnlogged(object,priorForwardingWord);
      if (VM.VERIFY_ASSERTIONS && Plan.NEEDS_LOG_BIT_IN_HEADER)       VM.assertions._assert(ObjectHeader.isUnloggedObject(object));
      return object;
    }
 else {
      ObjectReference newObject;
      if (ObjectHeader.isPinnedObject(object) || (!TMP_DEFRAG_TO_IMMORTAL && defrag.spaceExhausted())) {
        ObjectHeader.setMarkStateUnlogAndUnlock(object,priorForwardingWord,markState);
        newObject=object;
        if (TMP_VERBOSE_DEFRAG_STATS)         Defrag.defragBytesSkipped.inc(VM.objectModel.getCurrentSize(newObject));
        if (VM.VERIFY_ASSERTIONS && Plan.NEEDS_LOG_BIT_IN_HEADER)         VM.assertions._assert(ObjectHeader.isUnloggedObject(newObject));
      }
 else {
        newObject=ObjectHeader.forwardObject(object,allocator);
        if (TMP_VERBOSE_DEFRAG_STATS)         Defrag.defragBytesCopied.inc(VM.objectModel.getCurrentSize(newObject));
        if (VM.VERIFY_ASSERTIONS && Plan.NEEDS_LOG_BIT_IN_HEADER)         VM.assertions._assert(ObjectHeader.isUnloggedObject(newObject));
      }
      if (!MARK_LINE_AT_SCAN_TIME)       ImmixSpace.markLines(newObject);
      trace.processNode(newObject);
      if (VM.VERIFY_ASSERTIONS) {
        if (!((getSpaceForObject(newObject) != this) || (newObject == object) || (nurseryCollection && willNotMoveThisNurseryGC(newObject))|| (defrag.inDefrag() && willNotMoveThisGC(newObject)))) {
          Log.write(""String_Node_Str"");
          Log.writeln(object);
          Log.write(""String_Node_Str"");
          Log.writeln(newObject);
          Log.write(""String_Node_Str"");
          Log.writeln(ObjectReference.fromObject(this));
          Log.write(""String_Node_Str"");
          Log.writeln(ObjectReference.fromObject(getSpaceForObject(newObject)));
          Log.write(""String_Node_Str"");
          Log.writeln(nurseryCollection);
          Log.write(""String_Node_Str"");
          Log.writeln(ObjectHeader.isMatureObject(object));
          Log.write(""String_Node_Str"");
          Log.writeln(willNotMoveThisNurseryGC(newObject));
          Log.write(""String_Node_Str"");
          Log.writeln(ObjectHeader.isPinnedObject(object));
          VM.assertions._assert(false);
        }
      }
      return newObject;
    }
  }
}",0.8401458935982895
149835,"/** 
 * Trace a reference to an object in the context of a non-moving collection.  This call is optimized for the simpler non-moving case.
 * @param trace The trace performing the transitive closure
 * @param object The object to be traced.
 */
@Inline private void traceObjectWithoutMoving(TransitiveClosure trace,ObjectReference object){
  Word markValue=Plan.NEEDS_LOG_BIT_IN_HEADER ? markState.or(ObjectHeader.UNLOGGED_BIT) : markState;
  Word oldMarkState=ObjectHeader.testAndMark(object,markValue);
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!defrag.inDefrag() || defrag.spaceExhausted() || !isDefragSource(object));
  if (oldMarkState != markValue) {
    if (!MARK_LINE_AT_SCAN_TIME)     ImmixSpace.markLines(object);
    trace.processNode(object);
  }
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!ObjectHeader.isForwardedOrMarked(object));
  if (VM.VERIFY_ASSERTIONS && Plan.NEEDS_LOG_BIT_IN_HEADER)   VM.assertions._assert(ObjectHeader.isUnloggedObject(object));
}","/** 
 * Trace a reference to an object in the context of a non-moving collection.  This call is optimized for the simpler non-moving case.
 * @param trace The trace performing the transitive closure
 * @param object The object to be traced.
 */
@Inline private void traceObjectWithoutMoving(TransitiveClosure trace,ObjectReference object){
  Word markValue=Plan.NEEDS_LOG_BIT_IN_HEADER ? markState.or(ObjectHeader.UNLOGGED_BIT) : markState;
  Word oldMarkState=ObjectHeader.testAndMark(object,markValue);
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!defrag.inDefrag() || defrag.spaceExhausted() || !isDefragSource(object));
  if (oldMarkState != markValue) {
    if (!MARK_LINE_AT_SCAN_TIME)     ImmixSpace.markLines(object);
    trace.processNode(object);
  }
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!ObjectHeader.isForwardedOrBeingForwarded(object));
  if (VM.VERIFY_ASSERTIONS && Plan.NEEDS_LOG_BIT_IN_HEADER)   VM.assertions._assert(ObjectHeader.isUnloggedObject(object));
}",0.9919517102615694
149836,"public static boolean isForwardedOrBeingForwarded(Word forwardingWord){
  return !forwardingWord.and(FORWARDING_MASK).isZero();
}","static boolean isForwardedOrBeingForwarded(Word forwardingWord){
  return !forwardingWord.and(FORWARDING_MASK).isZero();
}",0.9721115537848606
149837,"@Inline public static boolean isStraddleBitSet(Word header){
  return header.and(STRADDLE_BIT).EQ(STRADDLE_BIT);
}","@Inline private static boolean isStraddleBitSet(Word header){
  return header.and(STRADDLE_BIT).EQ(STRADDLE_BIT);
}",0.960698689956332
149838,"@Inline public static boolean isPinnedObject(ObjectReference object){
  return isPinnedBitSet(VM.objectModel.readAvailableBitsWord(object));
}","@Inline static boolean isPinnedObject(ObjectReference object){
  return isPinnedBitSet(VM.objectModel.readAvailableBitsWord(object));
}",0.9747292418772564
149839,"/** 
 * Either return the forwarding pointer if the object is already forwarded (or being forwarded) or write the bit pattern that indicates that the object is being forwarded
 * @param object The object to be forwarded
 * @return The forwarding pointer for the object if it has alreadybeen forwarded.
 */
static Word attemptToBeForwarder(ObjectReference object){
  Word oldValue;
  do {
    oldValue=VM.objectModel.prepareAvailableBits(object);
    if (oldValue.and(IS_MARKED_MASK).EQ(MARKED))     return oldValue;
  }
 while (!VM.objectModel.attemptAvailableBits(object,oldValue,oldValue.or(BEING_FORWARDED)));
  return oldValue;
}","/** 
 * Either return the forwarding pointer if the object is already forwarded (or being forwarded) or write the bit pattern that indicates that the object is being forwarded
 * @param object The object to be forwarded
 * @return The forwarding pointer for the object if it has alreadybeen forwarded.
 */
static Word attemptToBeForwarder(ObjectReference object){
  Word oldValue;
  do {
    oldValue=VM.objectModel.prepareAvailableBits(object);
    if (oldValue.and(FORWARDING_MASK).EQ(FORWARDED))     return oldValue;
  }
 while (!VM.objectModel.attemptAvailableBits(object,oldValue,oldValue.or(BEING_FORWARDED)));
  return oldValue;
}",0.984251968503937
149840,"@Inline public static boolean isPinnedBitSet(Word header){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(ImmixConstants.TMP_SUPPORT_PINNING);
  return header.and(PINNED_BIT).EQ(PINNED_BIT);
}","@Inline private static boolean isPinnedBitSet(Word header){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(ImmixConstants.TMP_SUPPORT_PINNING);
  return header.and(PINNED_BIT).EQ(PINNED_BIT);
}",0.9772151898734176
149841,"@Inline public static boolean isUnloggedBitSet(Word header){
  return header.and(UNLOGGED_BIT).EQ(UNLOGGED_BIT);
}","@Inline static boolean isUnloggedBitSet(Word header){
  return header.and(UNLOGGED_BIT).EQ(UNLOGGED_BIT);
}",0.9683257918552036
149842,"@Inline public static boolean isUnloggedObject(ObjectReference object){
  return isUnloggedBitSet(VM.objectModel.readAvailableBitsWord(object));
}","@Inline static boolean isUnloggedObject(ObjectReference object){
  return isUnloggedBitSet(VM.objectModel.readAvailableBitsWord(object));
}",0.975438596491228
149843,"/** 
 * Return true if the mark count for an object has the given value.
 * @param object The object whose mark bit is to be tested
 * @param value The value against which the mark bit will be tested
 * @return True if the mark bit for the object has the given value.
 */
static boolean testMarkState(ObjectReference object,Word value){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(value.and(MARK_MASK).EQ(value));
  if (false && TMP_USE_BYTE_GRAIN_LOG_STORE) {
    return (VM.objectModel.readAvailableByte(object) & MARK_MASK.toInt()) == value.toInt();
  }
 else {
    return VM.objectModel.readAvailableBitsWord(object).and(MARK_MASK).EQ(value);
  }
}","static boolean testMarkState(Word forwardingWord,Word value){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(value.and(MARK_MASK).EQ(value));
  return forwardingWord.and(MARK_MASK).EQ(value);
}",0.4125874125874126
149844,"/** 
 * Allocate <code>pages</code> pages from this resource.<p> If the request can be satisfied, then ensure the pages are mmpapped and zeroed before returning the address of the start of the region.  If the request cannot be satisfied, return zero.
 * @param pages The number of pages to be allocated.
 * @return The start of the first page if successful, zero onfailure.
 */
@Inline protected Address allocPages(int pages){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(metaDataPagesPerRegion == 0 || pages <= PAGES_IN_CHUNK - metaDataPagesPerRegion);
  lock();
  boolean newChunk=false;
  int pageOffset=freeList.alloc(pages);
  if (pageOffset == GenericFreeList.FAILURE && !contiguous)   pageOffset=allocateContiguousChunks(pages);
  if (pageOffset == -1) {
    unlock();
    return Address.zero();
  }
 else {
    pagesCurrentlyOnFreeList-=pages;
    if (pageOffset > highWaterMark) {
      if ((pageOffset ^ highWaterMark) > EmbeddedMetaData.PAGES_IN_REGION) {
        int regions=1 + ((pageOffset - highWaterMark) >> EmbeddedMetaData.LOG_PAGES_IN_REGION);
        int metapages=regions * metaDataPagesPerRegion;
        reserved+=metapages;
        committed+=metapages;
        newChunk=true;
      }
      highWaterMark=pageOffset;
    }
    Address rtn=start.plus(Conversions.pagesToBytes(pageOffset));
    Extent bytes=Conversions.pagesToBytes(pages);
    commitPages(pages,pages);
    space.growSpace(rtn,bytes,newChunk);
    unlock();
    Mmapper.ensureMapped(rtn,pages);
    VM.memory.zero(rtn,bytes);
    return rtn;
  }
}","/** 
 * Allocate <code>pages</code> pages from this resource.<p> If the request can be satisfied, then ensure the pages are mmpapped and zeroed before returning the address of the start of the region.  If the request cannot be satisfied, return zero.
 * @param pages The number of pages to be allocated.
 * @return The start of the first page if successful, zero onfailure.
 */
@Inline protected Address allocPages(int pages){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(metaDataPagesPerRegion == 0 || pages <= PAGES_IN_CHUNK - metaDataPagesPerRegion);
  lock();
  boolean newChunk=false;
  int pageOffset=freeList.alloc(pages);
  if (pageOffset == GenericFreeList.FAILURE && !contiguous) {
    pageOffset=allocateContiguousChunks(pages);
    newChunk=true;
  }
  if (pageOffset == -1) {
    unlock();
    return Address.zero();
  }
 else {
    pagesCurrentlyOnFreeList-=pages;
    if (pageOffset > highWaterMark) {
      if ((pageOffset ^ highWaterMark) > EmbeddedMetaData.PAGES_IN_REGION) {
        int regions=1 + ((pageOffset - highWaterMark) >> EmbeddedMetaData.LOG_PAGES_IN_REGION);
        int metapages=regions * metaDataPagesPerRegion;
        reserved+=metapages;
        committed+=metapages;
        newChunk=true;
      }
      highWaterMark=pageOffset;
    }
    Address rtn=start.plus(Conversions.pagesToBytes(pageOffset));
    Extent bytes=Conversions.pagesToBytes(pages);
    commitPages(pages,pages);
    space.growSpace(rtn,bytes,newChunk);
    unlock();
    Mmapper.ensureMapped(rtn,pages);
    VM.memory.zero(rtn,bytes);
    return rtn;
  }
}",0.9913322632423756
149845,"private static DefUseEffect instanceOf(Instruction s){
  Operand ref=InstanceOf.getRef(s);
  if (ref.isNullConstant()) {
    Move.mutate(s,INT_MOVE,InstanceOf.getClearResult(s),IC(0));
    return DefUseEffect.MOVE_FOLDED;
  }
 else   if (ref.isConstant() || (ref.isRegister() && ref.asRegister().isExtant() && ref.asRegister().isPreciseType())) {
    s.operator=INSTANCEOF_NOTNULL;
    return instanceOfNotNull(s);
  }
 else {
    VM_TypeReference lhsType=InstanceOf.getType(s).getTypeRef();
    VM_TypeReference rhsType=ref.getType();
    byte ans=ClassLoaderProxy.includesType(lhsType,rhsType);
    if (ans == Constants.NO) {
      VM_Type rType=rhsType.peekType();
      if (rType != null && rType.isClassType() && rType.asClass().isFinal()) {
        Move.mutate(s,INT_MOVE,InstanceOf.getClearResult(s),IC(0));
        return DefUseEffect.MOVE_FOLDED;
      }
 else {
        return DefUseEffect.UNCHANGED;
      }
    }
 else {
      return DefUseEffect.UNCHANGED;
    }
  }
}","private static DefUseEffect instanceOf(Instruction s){
  Operand ref=InstanceOf.getRef(s);
  if (ref.isNullConstant()) {
    Move.mutate(s,INT_MOVE,InstanceOf.getClearResult(s),IC(0));
    return DefUseEffect.MOVE_FOLDED;
  }
 else   if (ref.isConstant()) {
    s.operator=INSTANCEOF_NOTNULL;
    return instanceOfNotNull(s);
  }
 else {
    VM_TypeReference lhsType=InstanceOf.getType(s).getTypeRef();
    VM_TypeReference rhsType=ref.getType();
    byte ans=ClassLoaderProxy.includesType(lhsType,rhsType);
    if (ans == Constants.NO) {
      VM_Type rType=rhsType.peekType();
      if (rType != null && rType.isClassType() && rType.asClass().isFinal()) {
        Move.mutate(s,INT_MOVE,InstanceOf.getClearResult(s),IC(0));
        return DefUseEffect.MOVE_FOLDED;
      }
 else {
        return DefUseEffect.UNCHANGED;
      }
    }
 else {
      return DefUseEffect.UNCHANGED;
    }
  }
}",0.9524826481580352
149846,"public Instruction generateAnewarray(VM_TypeReference arrayTypeRef,VM_TypeReference elementTypeRef){
  if (arrayTypeRef == null) {
    if (VM.VerifyAssertions)     VM._assert(elementTypeRef != null);
    arrayTypeRef=elementTypeRef.getArrayTypeForElementType();
  }
  if (elementTypeRef == null) {
    elementTypeRef=arrayTypeRef.getArrayElementType();
  }
  RegisterOperand t=gc.temps.makeTemp(arrayTypeRef);
  t.setPreciseType();
  t.setExtant();
  markGuardlessNonNull(t);
  VM_Type arrayType=arrayTypeRef.peekType();
  Operator op;
  TypeOperand arrayOp;
  if ((arrayType != null) && (arrayType.isInitialized() || arrayType.isInBootImage())) {
    op=NEWARRAY;
    arrayOp=makeTypeOperand(arrayType);
  }
 else {
    VM_Type elementType=elementTypeRef.peekType();
    if ((elementType != null) && (elementType.isInitialized() || elementType.isInBootImage())) {
      arrayType=arrayTypeRef.resolve();
      arrayType.resolve();
      arrayType.instantiate();
      op=NEWARRAY;
      arrayOp=makeTypeOperand(arrayType);
    }
 else {
      op=NEWARRAY_UNRESOLVED;
      arrayOp=makeTypeOperand(arrayTypeRef);
    }
  }
  Instruction s=NewArray.create(op,t,arrayOp,popInt());
  push(t.copyD2U());
  rectifyStateWithErrorHandler();
  rectifyStateWithExceptionHandler(VM_TypeReference.JavaLangNegativeArraySizeException);
  return s;
}","public Instruction generateAnewarray(VM_TypeReference arrayTypeRef,VM_TypeReference elementTypeRef){
  if (arrayTypeRef == null) {
    if (VM.VerifyAssertions)     VM._assert(elementTypeRef != null);
    arrayTypeRef=elementTypeRef.getArrayTypeForElementType();
  }
  if (elementTypeRef == null) {
    elementTypeRef=arrayTypeRef.getArrayElementType();
  }
  RegisterOperand t=gc.temps.makeTemp(arrayTypeRef);
  t.setPreciseType();
  markGuardlessNonNull(t);
  VM_Type arrayType=arrayTypeRef.peekType();
  Operator op;
  TypeOperand arrayOp;
  if ((arrayType != null) && (arrayType.isInitialized() || arrayType.isInBootImage())) {
    op=NEWARRAY;
    arrayOp=makeTypeOperand(arrayType);
    t.setExtant();
  }
 else {
    VM_Type elementType=elementTypeRef.peekType();
    if ((elementType != null) && (elementType.isInitialized() || elementType.isInBootImage())) {
      arrayType=arrayTypeRef.resolve();
      arrayType.resolve();
      arrayType.instantiate();
      op=NEWARRAY;
      arrayOp=makeTypeOperand(arrayType);
      t.setExtant();
    }
 else {
      op=NEWARRAY_UNRESOLVED;
      arrayOp=makeTypeOperand(arrayTypeRef);
    }
  }
  Instruction s=NewArray.create(op,t,arrayOp,popInt());
  push(t.copyD2U());
  rectifyStateWithErrorHandler();
  rectifyStateWithExceptionHandler(VM_TypeReference.JavaLangNegativeArraySizeException);
  return s;
}",0.9788497217068646
149847,"/** 
 * Generate instructions for a basic block. May discover other basic blocks that need to be generated along the way.
 * @param fromIndex bytecode index to start from
 */
private void generateFrom(int fromIndex){
  if (DBG_BB || DBG_SELECTED) {
    db(""String_Node_Str"" + currentBBLE + ""String_Node_Str""+ runoff);
  }
  currentBBLE.setGenerated();
  endOfBasicBlock=fallThrough=false;
  lastInstr=null;
  bcodes.reset(fromIndex);
  while (true) {
    currentBBLE.high=instrIndex=bcodes.index();
    int code=bcodes.nextInstruction();
    if (DBG_BCPARSE) {
      db(""String_Node_Str"" + instrIndex + ""String_Node_Str""+ code+ ""String_Node_Str""+ Integer.toHexString(code)+ ""String_Node_Str""+ ((code < JBC_name.length) ? JBC_name[code] : ""String_Node_Str""));
    }
    Instruction s=null;
    lastOsrBarrier=null;
switch (code) {
case JBC_nop:
      break;
case JBC_aconst_null:
    push(new NullConstantOperand());
  break;
case JBC_iconst_m1:
case JBC_iconst_0:
case JBC_iconst_1:
case JBC_iconst_2:
case JBC_iconst_3:
case JBC_iconst_4:
case JBC_iconst_5:
push(new IntConstantOperand(code - JBC_iconst_0));
break;
case JBC_lconst_0:
case JBC_lconst_1:
pushDual(new LongConstantOperand(code - JBC_lconst_0));
break;
case JBC_fconst_0:
push(new FloatConstantOperand(0.f));
break;
case JBC_fconst_1:
push(new FloatConstantOperand(1.f));
break;
case JBC_fconst_2:
push(new FloatConstantOperand(2.f));
break;
case JBC_dconst_0:
pushDual(new DoubleConstantOperand(0.));
break;
case JBC_dconst_1:
pushDual(new DoubleConstantOperand(1.));
break;
case JBC_bipush:
push(new IntConstantOperand(bcodes.getByteValue()));
break;
case JBC_sipush:
push(new IntConstantOperand(bcodes.getShortValue()));
break;
case JBC_ldc:
push(getConstantOperand(bcodes.getConstantIndex()));
break;
case JBC_ldc_w:
push(getConstantOperand(bcodes.getWideConstantIndex()));
break;
case JBC_ldc2_w:
pushDual(getConstantOperand(bcodes.getWideConstantIndex()));
break;
case JBC_iload:
s=do_iload(bcodes.getLocalNumber());
break;
case JBC_lload:
s=do_lload(bcodes.getLocalNumber());
break;
case JBC_fload:
s=do_fload(bcodes.getLocalNumber());
break;
case JBC_dload:
s=do_dload(bcodes.getLocalNumber());
break;
case JBC_aload:
s=do_aload(bcodes.getLocalNumber());
break;
case JBC_iload_0:
case JBC_iload_1:
case JBC_iload_2:
case JBC_iload_3:
s=do_iload(code - JBC_iload_0);
break;
case JBC_lload_0:
case JBC_lload_1:
case JBC_lload_2:
case JBC_lload_3:
s=do_lload(code - JBC_lload_0);
break;
case JBC_fload_0:
case JBC_fload_1:
case JBC_fload_2:
case JBC_fload_3:
s=do_fload(code - JBC_fload_0);
break;
case JBC_dload_0:
case JBC_dload_1:
case JBC_dload_2:
case JBC_dload_3:
s=do_dload(code - JBC_dload_0);
break;
case JBC_aload_0:
case JBC_aload_1:
case JBC_aload_2:
case JBC_aload_3:
s=do_aload(code - JBC_aload_0);
break;
case JBC_iaload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.IntArray);
}
s=_aloadHelper(INT_ALOAD,ref,index,VM_TypeReference.Int);
}
break;
case JBC_laload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.LongArray);
}
s=_aloadHelper(LONG_ALOAD,ref,index,VM_TypeReference.Long);
}
break;
case JBC_faload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.FloatArray);
}
s=_aloadHelper(FLOAT_ALOAD,ref,index,VM_TypeReference.Float);
}
break;
case JBC_daload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.DoubleArray);
}
s=_aloadHelper(DOUBLE_ALOAD,ref,index,VM_TypeReference.Double);
}
break;
case JBC_aaload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
VM_TypeReference type=getRefTypeOf(ref).getArrayElementType();
if (VM.VerifyAssertions) VM._assert(type.isReferenceType());
s=_aloadHelper(REF_ALOAD,ref,index,type);
}
break;
case JBC_baload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
VM_TypeReference type=getArrayTypeOf(ref);
if (VM.VerifyAssertions) {
VM._assert(type == VM_TypeReference.ByteArray || type == VM_TypeReference.BooleanArray);
}
if (type == VM_TypeReference.ByteArray) {
s=_aloadHelper(BYTE_ALOAD,ref,index,VM_TypeReference.Byte);
}
 else {
s=_aloadHelper(UBYTE_ALOAD,ref,index,VM_TypeReference.Boolean);
}
}
break;
case JBC_caload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.CharArray);
}
s=_aloadHelper(USHORT_ALOAD,ref,index,VM_TypeReference.Char);
}
break;
case JBC_saload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.ShortArray);
}
s=_aloadHelper(SHORT_ALOAD,ref,index,VM_TypeReference.Short);
}
break;
case JBC_istore:
s=do_store(bcodes.getLocalNumber(),popInt());
break;
case JBC_lstore:
s=do_store(bcodes.getLocalNumber(),popLong());
break;
case JBC_fstore:
s=do_store(bcodes.getLocalNumber(),popFloat());
break;
case JBC_dstore:
s=do_store(bcodes.getLocalNumber(),popDouble());
break;
case JBC_astore:
s=do_astore(bcodes.getLocalNumber());
break;
case JBC_istore_0:
case JBC_istore_1:
case JBC_istore_2:
case JBC_istore_3:
s=do_store(code - JBC_istore_0,popInt());
break;
case JBC_lstore_0:
case JBC_lstore_1:
case JBC_lstore_2:
case JBC_lstore_3:
s=do_store(code - JBC_lstore_0,popLong());
break;
case JBC_fstore_0:
case JBC_fstore_1:
case JBC_fstore_2:
case JBC_fstore_3:
s=do_store(code - JBC_fstore_0,popFloat());
break;
case JBC_dstore_0:
case JBC_dstore_1:
case JBC_dstore_2:
case JBC_dstore_3:
s=do_store(code - JBC_dstore_0,popDouble());
break;
case JBC_astore_0:
case JBC_astore_1:
case JBC_astore_2:
case JBC_astore_3:
s=do_astore(code - JBC_astore_0);
break;
case JBC_iastore:
{
Operand val=popInt();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.IntArray);
}
s=AStore.create(INT_ASTORE,val,ref,index,new LocationOperand(VM_TypeReference.Int),getCurrentGuard());
}
break;
case JBC_lastore:
{
Operand val=popLong();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.LongArray);
}
s=AStore.create(LONG_ASTORE,val,ref,index,new LocationOperand(VM_TypeReference.Long),getCurrentGuard());
}
break;
case JBC_fastore:
{
Operand val=popFloat();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.FloatArray);
}
s=AStore.create(FLOAT_ASTORE,val,ref,index,new LocationOperand(VM_TypeReference.Float),getCurrentGuard());
}
break;
case JBC_dastore:
{
Operand val=popDouble();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.DoubleArray);
}
s=AStore.create(DOUBLE_ASTORE,val,ref,index,new LocationOperand(VM_TypeReference.Double),getCurrentGuard());
}
break;
case JBC_aastore:
{
Operand val=pop();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
VM_TypeReference type=getRefTypeOf(ref).getArrayElementType();
if (VM.VerifyAssertions) VM._assert(type.isReferenceType());
if (do_CheckStore(ref,val,type)) {
break;
}
s=AStore.create(REF_ASTORE,val,ref,index,new LocationOperand(type),getCurrentGuard());
}
break;
case JBC_bastore:
{
Operand val=popInt();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
VM_TypeReference type=getArrayTypeOf(ref);
if (VM.VerifyAssertions) {
VM._assert(type == VM_TypeReference.ByteArray || type == VM_TypeReference.BooleanArray);
}
if (type == VM_TypeReference.ByteArray) {
type=VM_TypeReference.Byte;
}
 else {
type=VM_TypeReference.Boolean;
}
s=AStore.create(BYTE_ASTORE,val,ref,index,new LocationOperand(type),getCurrentGuard());
}
break;
case JBC_castore:
{
Operand val=popInt();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.CharArray);
}
s=AStore.create(SHORT_ASTORE,val,ref,index,new LocationOperand(VM_TypeReference.Char),getCurrentGuard());
}
break;
case JBC_sastore:
{
Operand val=popInt();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.ShortArray);
}
s=AStore.create(SHORT_ASTORE,val,ref,index,new LocationOperand(VM_TypeReference.Short),getCurrentGuard());
}
break;
case JBC_pop:
stack.pop();
break;
case JBC_pop2:
stack.pop2();
break;
case JBC_dup:
{
Operand op1=stack.pop();
stack.push(op1);
s=pushCopy(op1);
}
break;
case JBC_dup_x1:
{
Operand op1=stack.pop();
Operand op2=stack.pop();
stack.push(op1);
stack.push(op2);
s=pushCopy(op1);
}
break;
case JBC_dup_x2:
{
Operand op1=stack.pop();
Operand op2=stack.pop();
Operand op3=stack.pop();
stack.push(op1);
stack.push(op3);
stack.push(op2);
s=pushCopy(op1);
}
break;
case JBC_dup2:
{
Operand op1=stack.pop();
Operand op2=stack.pop();
stack.push(op2);
stack.push(op1);
s=pushCopy(op2);
if (s != null) {
appendInstruction(s);
s=null;
}
s=pushCopy(op1);
}
break;
case JBC_dup2_x1:
{
Operand op1=stack.pop();
Operand op2=stack.pop();
Operand op3=stack.pop();
stack.push(op2);
stack.push(op1);
stack.push(op3);
s=pushCopy(op2);
if (s != null) {
appendInstruction(s);
s=null;
}
s=pushCopy(op1);
}
break;
case JBC_dup2_x2:
{
Operand op1=stack.pop();
Operand op2=stack.pop();
Operand op3=stack.pop();
Operand op4=stack.pop();
stack.push(op2);
stack.push(op1);
stack.push(op4);
stack.push(op3);
s=pushCopy(op2);
if (s != null) {
appendInstruction(s);
s=null;
}
s=pushCopy(op1);
}
break;
case JBC_swap:
{
Operand op1=stack.pop();
Operand op2=stack.pop();
stack.push(op1);
stack.push(op2);
}
break;
case JBC_iadd:
{
Operand op2=popInt();
Operand op1=popInt();
s=_binaryHelper(INT_ADD,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_ladd:
{
Operand op2=popLong();
Operand op1=popLong();
s=_binaryDualHelper(LONG_ADD,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_fadd:
{
Operand op2=popFloat();
Operand op1=popFloat();
s=_binaryHelper(FLOAT_ADD,op1,op2,VM_TypeReference.Float);
}
break;
case JBC_dadd:
{
Operand op2=popDouble();
Operand op1=popDouble();
s=_binaryDualHelper(DOUBLE_ADD,op1,op2,VM_TypeReference.Double);
}
break;
case JBC_isub:
{
Operand op2=popInt();
Operand op1=popInt();
s=_binaryHelper(INT_SUB,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_lsub:
{
Operand op2=popLong();
Operand op1=popLong();
s=_binaryDualHelper(LONG_SUB,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_fsub:
{
Operand op2=popFloat();
Operand op1=popFloat();
s=_binaryHelper(FLOAT_SUB,op1,op2,VM_TypeReference.Float);
}
break;
case JBC_dsub:
{
Operand op2=popDouble();
Operand op1=popDouble();
s=_binaryDualHelper(DOUBLE_SUB,op1,op2,VM_TypeReference.Double);
}
break;
case JBC_imul:
{
Operand op2=popInt();
Operand op1=popInt();
s=_binaryHelper(INT_MUL,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_lmul:
{
Operand op2=popLong();
Operand op1=popLong();
s=_binaryDualHelper(LONG_MUL,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_fmul:
{
Operand op2=popFloat();
Operand op1=popFloat();
s=_binaryHelper(FLOAT_MUL,op1,op2,VM_TypeReference.Float);
}
break;
case JBC_dmul:
{
Operand op2=popDouble();
Operand op1=popDouble();
s=_binaryDualHelper(DOUBLE_MUL,op1,op2,VM_TypeReference.Double);
}
break;
case JBC_idiv:
{
clearCurrentGuard();
Operand op2=popInt();
Operand op1=popInt();
if (do_IntZeroCheck(op2)) {
break;
}
s=_guardedBinaryHelper(INT_DIV,op1,op2,getCurrentGuard(),VM_TypeReference.Int);
}
break;
case JBC_ldiv:
{
clearCurrentGuard();
Operand op2=popLong();
Operand op1=popLong();
if (do_LongZeroCheck(op2)) {
break;
}
s=_guardedBinaryDualHelper(LONG_DIV,op1,op2,getCurrentGuard(),VM_TypeReference.Long);
}
break;
case JBC_fdiv:
{
Operand op2=popFloat();
Operand op1=popFloat();
s=_binaryHelper(FLOAT_DIV,op1,op2,VM_TypeReference.Float);
}
break;
case JBC_ddiv:
{
Operand op2=popDouble();
Operand op1=popDouble();
s=_binaryDualHelper(DOUBLE_DIV,op1,op2,VM_TypeReference.Double);
}
break;
case JBC_irem:
{
clearCurrentGuard();
Operand op2=popInt();
Operand op1=popInt();
if (do_IntZeroCheck(op2)) {
break;
}
s=_guardedBinaryHelper(INT_REM,op1,op2,getCurrentGuard(),VM_TypeReference.Int);
}
break;
case JBC_lrem:
{
clearCurrentGuard();
Operand op2=popLong();
Operand op1=popLong();
if (do_LongZeroCheck(op2)) {
break;
}
s=_guardedBinaryDualHelper(LONG_REM,op1,op2,getCurrentGuard(),VM_TypeReference.Long);
}
break;
case JBC_frem:
{
Operand op2=popFloat();
Operand op1=popFloat();
s=_binaryHelper(FLOAT_REM,op1,op2,VM_TypeReference.Float);
}
break;
case JBC_drem:
{
Operand op2=popDouble();
Operand op1=popDouble();
s=_binaryDualHelper(DOUBLE_REM,op1,op2,VM_TypeReference.Double);
}
break;
case JBC_ineg:
s=_unaryHelper(INT_NEG,popInt(),VM_TypeReference.Int);
break;
case JBC_lneg:
s=_unaryDualHelper(LONG_NEG,popLong(),VM_TypeReference.Long);
break;
case JBC_fneg:
s=_unaryHelper(FLOAT_NEG,popFloat(),VM_TypeReference.Float);
break;
case JBC_dneg:
s=_unaryDualHelper(DOUBLE_NEG,popDouble(),VM_TypeReference.Double);
break;
case JBC_ishl:
{
Operand op2=popShiftInt(false);
Operand op1=popInt();
s=_binaryHelper(INT_SHL,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_lshl:
{
Operand op2=popShiftInt(true);
Operand op1=popLong();
s=_binaryDualHelper(LONG_SHL,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_ishr:
{
Operand op2=popShiftInt(false);
Operand op1=popInt();
s=_binaryHelper(INT_SHR,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_lshr:
{
Operand op2=popShiftInt(true);
Operand op1=popLong();
s=_binaryDualHelper(LONG_SHR,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_iushr:
{
Operand op2=popShiftInt(false);
Operand op1=popInt();
s=_binaryHelper(INT_USHR,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_lushr:
{
Operand op2=popShiftInt(true);
Operand op1=popLong();
s=_binaryDualHelper(LONG_USHR,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_iand:
{
Operand op2=popInt();
Operand op1=popInt();
s=_binaryHelper(INT_AND,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_land:
{
Operand op2=popLong();
Operand op1=popLong();
s=_binaryDualHelper(LONG_AND,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_ior:
{
Operand op2=popInt();
Operand op1=popInt();
s=_binaryHelper(INT_OR,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_lor:
{
Operand op2=popLong();
Operand op1=popLong();
s=_binaryDualHelper(LONG_OR,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_ixor:
{
Operand op2=popInt();
Operand op1=popInt();
s=_binaryHelper(INT_XOR,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_lxor:
{
Operand op2=popLong();
Operand op1=popLong();
s=_binaryDualHelper(LONG_XOR,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_iinc:
{
int index=bcodes.getLocalNumber();
s=do_iinc(index,bcodes.getIncrement());
}
break;
case JBC_i2l:
s=_unaryDualHelper(INT_2LONG,popInt(),VM_TypeReference.Long);
break;
case JBC_i2f:
s=_unaryHelper(INT_2FLOAT,popInt(),VM_TypeReference.Float);
break;
case JBC_i2d:
s=_unaryDualHelper(INT_2DOUBLE,popInt(),VM_TypeReference.Double);
break;
case JBC_l2i:
s=_unaryHelper(LONG_2INT,popLong(),VM_TypeReference.Int);
break;
case JBC_l2f:
s=_unaryHelper(LONG_2FLOAT,popLong(),VM_TypeReference.Float);
break;
case JBC_l2d:
s=_unaryDualHelper(LONG_2DOUBLE,popLong(),VM_TypeReference.Double);
break;
case JBC_f2i:
s=_unaryHelper(FLOAT_2INT,popFloat(),VM_TypeReference.Int);
break;
case JBC_f2l:
s=_unaryDualHelper(FLOAT_2LONG,popFloat(),VM_TypeReference.Long);
break;
case JBC_f2d:
s=_unaryDualHelper(FLOAT_2DOUBLE,popFloat(),VM_TypeReference.Double);
break;
case JBC_d2i:
s=_unaryHelper(DOUBLE_2INT,popDouble(),VM_TypeReference.Int);
break;
case JBC_d2l:
s=_unaryDualHelper(DOUBLE_2LONG,popDouble(),VM_TypeReference.Long);
break;
case JBC_d2f:
s=_unaryHelper(DOUBLE_2FLOAT,popDouble(),VM_TypeReference.Float);
break;
case JBC_int2byte:
s=_unaryHelper(INT_2BYTE,popInt(),VM_TypeReference.Byte);
break;
case JBC_int2char:
s=_unaryHelper(INT_2USHORT,popInt(),VM_TypeReference.Char);
break;
case JBC_int2short:
s=_unaryHelper(INT_2SHORT,popInt(),VM_TypeReference.Short);
break;
case JBC_lcmp:
{
Operand op2=popLong();
Operand op1=popLong();
s=_binaryHelper(LONG_CMP,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_fcmpl:
{
Operand op2=popFloat();
Operand op1=popFloat();
s=_binaryHelper(FLOAT_CMPL,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_fcmpg:
{
Operand op2=popFloat();
Operand op1=popFloat();
s=_binaryHelper(FLOAT_CMPG,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_dcmpl:
{
Operand op2=popDouble();
Operand op1=popDouble();
s=_binaryHelper(DOUBLE_CMPL,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_dcmpg:
{
Operand op2=popDouble();
Operand op1=popDouble();
s=_binaryHelper(DOUBLE_CMPG,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_ifeq:
s=_intIfHelper(ConditionOperand.EQUAL());
break;
case JBC_ifne:
s=_intIfHelper(ConditionOperand.NOT_EQUAL());
break;
case JBC_iflt:
s=_intIfHelper(ConditionOperand.LESS());
break;
case JBC_ifge:
s=_intIfHelper(ConditionOperand.GREATER_EQUAL());
break;
case JBC_ifgt:
s=_intIfHelper(ConditionOperand.GREATER());
break;
case JBC_ifle:
s=_intIfHelper(ConditionOperand.LESS_EQUAL());
break;
case JBC_if_icmpeq:
s=_intIfCmpHelper(ConditionOperand.EQUAL());
break;
case JBC_if_icmpne:
s=_intIfCmpHelper(ConditionOperand.NOT_EQUAL());
break;
case JBC_if_icmplt:
s=_intIfCmpHelper(ConditionOperand.LESS());
break;
case JBC_if_icmpge:
s=_intIfCmpHelper(ConditionOperand.GREATER_EQUAL());
break;
case JBC_if_icmpgt:
s=_intIfCmpHelper(ConditionOperand.GREATER());
break;
case JBC_if_icmple:
s=_intIfCmpHelper(ConditionOperand.LESS_EQUAL());
break;
case JBC_if_acmpeq:
s=_refIfCmpHelper(ConditionOperand.EQUAL());
break;
case JBC_if_acmpne:
s=_refIfCmpHelper(ConditionOperand.NOT_EQUAL());
break;
case JBC_goto:
{
int offset=bcodes.getBranchOffset();
if (offset != 3) {
s=_gotoHelper(offset);
}
}
break;
case JBC_jsr:
s=_jsrHelper(bcodes.getBranchOffset());
break;
case JBC_ret:
s=_retHelper(bcodes.getLocalNumber());
break;
case JBC_tableswitch:
{
bcodes.alignSwitch();
Operand op0=popInt();
int defaultoff=bcodes.getDefaultSwitchOffset();
int low=bcodes.getLowSwitchValue();
int high=bcodes.getHighSwitchValue();
int number=high - low + 1;
if (CF_TABLESWITCH && op0 instanceof IntConstantOperand) {
int v1=((IntConstantOperand)op0).value;
int match=bcodes.computeTableSwitchOffset(v1,low,high);
int offset=match == 0 ? defaultoff : match;
bcodes.skipTableSwitchOffsets(number);
if (DBG_CF) {
db(""String_Node_Str"" + v1 + ""String_Node_Str"");
}
s=_gotoHelper(offset);
break;
}
s=TableSwitch.create(TABLESWITCH,op0,null,null,new IntConstantOperand(low),new IntConstantOperand(high),generateTarget(defaultoff),null,number * 2);
for (int i=0; i < number; ++i) {
TableSwitch.setTarget(s,i,generateTarget(bcodes.getTableSwitchOffset(i)));
}
bcodes.skipTableSwitchOffsets(number);
VM_SwitchBranchProfile sp=gc.getSwitchProfile(instrIndex - bciAdjustment);
if (sp == null) {
float approxProb=1.0f / (number + 1);
TableSwitch.setDefaultBranchProfile(s,new BranchProfileOperand(approxProb));
for (int i=0; i < number; ++i) {
TableSwitch.setBranchProfile(s,i,new BranchProfileOperand(approxProb));
}
}
 else {
TableSwitch.setDefaultBranchProfile(s,new BranchProfileOperand(sp.getDefaultProbability()));
for (int i=0; i < number; ++i) {
TableSwitch.setBranchProfile(s,i,new BranchProfileOperand(sp.getCaseProbability(i)));
}
}
}
break;
case JBC_lookupswitch:
{
bcodes.alignSwitch();
Operand op0=popInt();
int defaultoff=bcodes.getDefaultSwitchOffset();
int numpairs=bcodes.getSwitchLength();
if (numpairs == 0) {
s=_gotoHelper(defaultoff);
break;
}
if (CF_LOOKUPSWITCH && op0 instanceof IntConstantOperand) {
int v1=((IntConstantOperand)op0).value;
int match=bcodes.computeLookupSwitchOffset(v1,numpairs);
int offset=match == 0 ? defaultoff : match;
bcodes.skipLookupSwitchPairs(numpairs);
if (DBG_CF) {
db(""String_Node_Str"" + v1 + ""String_Node_Str"");
}
s=_gotoHelper(offset);
break;
}
s=LookupSwitch.create(LOOKUPSWITCH,op0,null,null,generateTarget(defaultoff),null,numpairs * 3);
for (int i=0; i < numpairs; ++i) {
LookupSwitch.setMatch(s,i,new IntConstantOperand(bcodes.getLookupSwitchValue(i)));
LookupSwitch.setTarget(s,i,generateTarget(bcodes.getLookupSwitchOffset(i)));
}
bcodes.skipLookupSwitchPairs(numpairs);
VM_SwitchBranchProfile sp=gc.getSwitchProfile(instrIndex - bciAdjustment);
if (sp == null) {
float approxProb=1.0f / (float)(numpairs + 1);
LookupSwitch.setDefaultBranchProfile(s,new BranchProfileOperand(approxProb));
for (int i=0; i < numpairs; ++i) {
LookupSwitch.setBranchProfile(s,i,new BranchProfileOperand(approxProb));
}
}
 else {
LookupSwitch.setDefaultBranchProfile(s,new BranchProfileOperand(sp.getDefaultProbability()));
for (int i=0; i < numpairs; ++i) {
LookupSwitch.setBranchProfile(s,i,new BranchProfileOperand(sp.getCaseProbability(i)));
}
}
}
break;
case JBC_ireturn:
_returnHelper(INT_MOVE,popInt());
break;
case JBC_lreturn:
_returnHelper(LONG_MOVE,popLong());
break;
case JBC_freturn:
_returnHelper(FLOAT_MOVE,popFloat());
break;
case JBC_dreturn:
_returnHelper(DOUBLE_MOVE,popDouble());
break;
case JBC_areturn:
{
Operand op0=popRef();
if (VM.VerifyAssertions && !op0.isDefinitelyNull()) {
VM_TypeReference retType=op0.getType();
assertIsAssignable(gc.method.getReturnType(),retType);
}
_returnHelper(REF_MOVE,op0);
}
break;
case JBC_return:
_returnHelper(null,null);
break;
case JBC_getstatic:
{
VM_FieldReference ref=bcodes.getFieldReference();
boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());
LocationOperand fieldOp=makeStaticFieldRef(ref);
Operand offsetOp;
VM_TypeReference fieldType=ref.getFieldContentsType();
RegisterOperand t=gc.temps.makeTemp(fieldType);
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),fieldOp.copy()));
offsetOp=offsetrop;
rectifyStateWithErrorHandler();
}
 else {
VM_Field field=ref.peekResolvedField();
offsetOp=new AddressConstantOperand(field.getOffset());
VM_Type ft=fieldType.peekType();
if (ft != null && ft.isClassType()) {
VM_TypeReference concreteType=FieldAnalysis.getConcreteType(field);
if (concreteType != null) {
if (concreteType == fieldType) {
t.setDeclaredType();
t.setPreciseType();
}
 else {
fieldType=concreteType;
t.setType(concreteType);
t.setPreciseType();
}
}
}
if (field.isFinal()) {
VM_Class declaringClass=field.getDeclaringClass();
if (declaringClass.isInitialized() || declaringClass.isInBootImage()) {
try {
ConstantOperand rhs=StaticFieldReader.getStaticFieldValue(field);
push(rhs,fieldType);
break;
}
 catch (NoSuchFieldException e) {
if (VM.runningVM) {
throw new Error(""String_Node_Str"",e);
}
 else {
}
}
}
}
 else if (field.isRuntimeFinal()) {
if (VM.VerifyAssertions) VM._assert(fieldType.isBooleanType());
boolean rhsBool=field.getRuntimeFinalValue();
push(new IntConstantOperand(rhsBool ? 1 : 0));
break;
}
}
s=GetStatic.create(GETSTATIC,t,offsetOp,fieldOp);
push(t.copyD2U(),fieldType);
}
break;
case JBC_putstatic:
{
VM_FieldReference ref=bcodes.getFieldReference();
boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());
LocationOperand fieldOp=makeStaticFieldRef(ref);
Operand offsetOp;
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),fieldOp.copy()));
offsetOp=offsetrop;
rectifyStateWithErrorHandler();
}
 else {
VM_Field field=ref.peekResolvedField();
offsetOp=new AddressConstantOperand(field.getOffset());
}
VM_TypeReference fieldType=ref.getFieldContentsType();
Operand r=pop(fieldType);
s=PutStatic.create(PUTSTATIC,r,offsetOp,fieldOp);
}
break;
case JBC_getfield:
{
VM_FieldReference ref=bcodes.getFieldReference();
boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());
LocationOperand fieldOp=makeInstanceFieldRef(ref);
Operand offsetOp;
VM_TypeReference fieldType=ref.getFieldContentsType();
VM_Field field=null;
RegisterOperand t=gc.temps.makeTemp(fieldType);
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),fieldOp.copy()));
offsetOp=offsetrop;
rectifyStateWithErrorHandler();
}
 else {
field=ref.peekResolvedField();
offsetOp=new AddressConstantOperand(field.getOffset());
VM_Type ft=fieldType.peekType();
if (ft != null && ft.isClassType()) {
VM_TypeReference concreteType=FieldAnalysis.getConcreteType(field);
if (concreteType != null) {
if (concreteType == fieldType) {
t.setDeclaredType();
t.setPreciseType();
}
 else {
fieldType=concreteType;
t.setType(concreteType);
t.setPreciseType();
}
}
}
}
Operand op1=pop();
clearCurrentGuard();
if (do_NullCheck(op1)) {
break;
}
if (op1.isConstant() && field.isFinal()) {
try {
ConstantOperand rhs=StaticFieldReader.getFieldValueAsConstant(field,op1.asObjectConstant().value);
push(rhs,fieldType);
break;
}
 catch (NoSuchFieldException e) {
if (VM.runningVM) {
throw new Error(""String_Node_Str"",e);
}
 else {
}
}
}
s=GetField.create(GETFIELD,t,op1,offsetOp,fieldOp,getCurrentGuard());
push(t.copyD2U(),fieldType);
}
break;
case JBC_putfield:
{
VM_FieldReference ref=bcodes.getFieldReference();
boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());
LocationOperand fieldOp=makeInstanceFieldRef(ref);
VM_TypeReference fieldType=ref.getFieldContentsType();
Operand offsetOp;
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),fieldOp.copy()));
offsetOp=offsetrop;
rectifyStateWithErrorHandler();
}
 else {
VM_Field field=ref.peekResolvedField();
offsetOp=new AddressConstantOperand(field.getOffset());
}
Operand val=pop(fieldType);
Operand obj=popRef();
clearCurrentGuard();
if (do_NullCheck(obj)) {
break;
}
s=PutField.create(PUTFIELD,val,obj,offsetOp,fieldOp,getCurrentGuard());
}
break;
case JBC_invokevirtual:
{
VM_MethodReference ref=bcodes.getMethodReference();
if (ref.isMagic()) {
boolean generated=GenerateMagic.generateMagic(this,gc,ref);
if (generated) break;
}
if (this.osrGuardedInline) {
lastOsrBarrier=_createOsrBarrier();
}
if (ref.isMiranda()) {
s=_callHelper(ref,MethodOperand.INTERFACE(ref,null));
if (s == null) break;
Operand receiver=Call.getParam(s,0);
VM_Class receiverType=(VM_Class)receiver.getType().peekType();
clearCurrentGuard();
if (do_NullCheck(receiver)) {
s=null;
break;
}
Call.setGuard(s,getCurrentGuard());
VM_Method vmeth=null;
if (receiverType != null && receiverType.isInitialized() && !receiverType.isInterface()) {
vmeth=ClassLoaderProxy.lookupMethod(receiverType,ref);
}
if (vmeth != null) {
VM_MethodReference vmethRef=vmeth.getMemberRef().asMethodReference();
MethodOperand mop=MethodOperand.VIRTUAL(vmethRef,vmeth);
if (receiver.isConstant() || (receiver.isRegister() && receiver.asRegister().isPreciseType())) {
mop.refine(vmeth,true);
}
Call.setMethod(s,mop);
boolean unresolved=vmethRef.needsDynamicLink(bcodes.getMethod());
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),Call.getMethod(s).copy()));
Call.setAddress(s,offsetrop);
rectifyStateWithErrorHandler();
}
 else {
Call.setAddress(s,new AddressConstantOperand(vmeth.getOffset()));
}
if (maybeInlineMethod(shouldInline(s,receiver.isConstant() || (receiver.isRegister() && receiver.asRegister().isExtant())),s)) {
return;
}
}
}
 else {
boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());
VM_Method target=ref.peekResolvedMethod();
MethodOperand methOp=MethodOperand.VIRTUAL(ref,target);
s=_callHelper(ref,methOp);
if (s == null) break;
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),Call.getMethod(s).copy()));
Call.setAddress(s,offsetrop);
rectifyStateWithErrorHandler();
}
 else {
if (VM.VerifyAssertions) VM._assert(target != null);
Call.setAddress(s,new AddressConstantOperand(target.getOffset()));
}
Operand receiver=Call.getParam(s,0);
clearCurrentGuard();
if (do_NullCheck(receiver)) {
s=null;
break;
}
Call.setGuard(s,getCurrentGuard());
boolean isExtant=false;
boolean isPreciseType=false;
VM_TypeReference tr=null;
if (receiver.isRegister()) {
RegisterOperand rop=receiver.asRegister();
isExtant=rop.isExtant();
isPreciseType=rop.isPreciseType();
tr=rop.getType();
}
 else {
isExtant=true;
isPreciseType=true;
tr=receiver.getType();
}
VM_Type type=tr.peekType();
if (type != null && type.isResolved()) {
if (type.isClassType()) {
VM_Method vmeth=target;
if (target == null || type != target.getDeclaringClass()) {
vmeth=ClassLoaderProxy.lookupMethod(type.asClass(),ref);
}
if (vmeth != null) {
methOp.refine(vmeth,isPreciseType || type.asClass().isFinal());
}
}
 else {
if (VM.VerifyAssertions) VM._assert(target != null,""String_Node_Str"");
methOp.refine(target,true);
}
}
if (maybeInlineMethod(shouldInline(s,isExtant),s)) {
return;
}
}
rectifyStateWithExceptionHandlers();
}
break;
case JBC_invokespecial:
{
VM_MethodReference ref=bcodes.getMethodReference();
VM_Method target=ref.resolveInvokeSpecial();
if (this.osrGuardedInline) {
lastOsrBarrier=_createOsrBarrier();
}
s=_callHelper(ref,MethodOperand.SPECIAL(ref,target));
if (s == null) break;
if (target == null) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),Call.getMethod(s).copy()));
Call.setAddress(s,offsetrop);
rectifyStateWithErrorHandler();
}
 else {
Call.setAddress(s,new AddressConstantOperand(target.getOffset()));
}
Operand receiver=Call.getParam(s,0);
clearCurrentGuard();
if (do_NullCheck(receiver)) {
s=null;
break;
}
Call.setGuard(s,getCurrentGuard());
if (maybeInlineMethod(shouldInline(s,false),s)) {
return;
}
rectifyStateWithExceptionHandlers();
}
break;
case JBC_invokestatic:
{
VM_MethodReference ref=bcodes.getMethodReference();
if (ref.isMagic()) {
boolean generated=GenerateMagic.generateMagic(this,gc,ref);
if (generated) break;
}
boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());
VM_Method target=ref.peekResolvedMethod();
if (this.osrGuardedInline) {
lastOsrBarrier=_createOsrBarrier();
}
s=_callHelper(ref,MethodOperand.STATIC(ref,target));
if (s == null) break;
if (Call.conforms(s)) {
MethodOperand methOp=Call.getMethod(s);
if (methOp.getTarget() == target) {
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),Call.getMethod(s).copy()));
Call.setAddress(s,offsetrop);
rectifyStateWithErrorHandler();
}
 else {
Call.setAddress(s,new AddressConstantOperand(target.getOffset()));
}
if (maybeInlineMethod(shouldInline(s,false),s)) {
return;
}
}
}
rectifyStateWithExceptionHandlers();
}
break;
case JBC_invokeinterface:
{
VM_MethodReference ref=bcodes.getMethodReference();
bcodes.alignInvokeInterface();
VM_Method resolvedMethod=null;
resolvedMethod=ref.peekInterfaceMethod();
if (this.osrGuardedInline) {
lastOsrBarrier=_createOsrBarrier();
}
s=_callHelper(ref,MethodOperand.INTERFACE(ref,resolvedMethod));
if (s == null) break;
Operand receiver=Call.getParam(s,0);
VM_Class receiverType=(VM_Class)receiver.getType().peekType();
clearCurrentGuard();
if (do_NullCheck(receiver)) {
s=null;
break;
}
Call.setGuard(s,getCurrentGuard());
boolean requiresImplementsTest=VM.BuildForIMTInterfaceInvocation;
if (requiresImplementsTest) {
if (resolvedMethod == null) {
RegisterOperand tibPtr=gc.temps.makeTemp(VM_TypeReference.TIB);
Instruction getTib=GuardedUnary.create(GET_OBJ_TIB,tibPtr,receiver.copy(),getCurrentGuard());
appendInstruction(getTib);
getTib.bcIndex=RUNTIME_SERVICES_BCI;
VM_Method target=VM_Entrypoints.unresolvedInvokeinterfaceImplementsTestMethod;
Instruction callCheck=Call.create2(CALL,null,new AddressConstantOperand(target.getOffset()),MethodOperand.STATIC(target),new IntConstantOperand(ref.getId()),tibPtr.copyD2U());
if (gc.options.NO_CALLEE_EXCEPTIONS) {
callCheck.markAsNonPEI();
}
appendInstruction(callCheck);
callCheck.bcIndex=RUNTIME_SERVICES_BCI;
requiresImplementsTest=false;
rectifyStateWithErrorHandler();
}
 else {
VM_Type interfaceType=resolvedMethod.getDeclaringClass();
if (receiverType != null && receiverType.isResolved() && !receiverType.isInterface()) {
byte doesImplement=ClassLoaderProxy.includesType(interfaceType.getTypeRef(),receiverType.getTypeRef());
requiresImplementsTest=doesImplement != YES;
}
}
}
VM_Method vmeth=null;
if (receiverType != null && receiverType.isInitialized() && !receiverType.isInterface()) {
vmeth=ClassLoaderProxy.lookupMethod(receiverType,ref);
}
if (vmeth != null) {
VM_MethodReference vmethRef=vmeth.getMemberRef().asMethodReference();
if (requiresImplementsTest) {
RegisterOperand checkedReceiver=gc.temps.makeTemp(receiver);
appendInstruction(TypeCheck.create(MUST_IMPLEMENT_INTERFACE,checkedReceiver,receiver.copy(),makeTypeOperand(resolvedMethod.getDeclaringClass()),getCurrentGuard()));
checkedReceiver.refine(resolvedMethod.getDeclaringClass().getTypeRef());
Call.setParam(s,0,checkedReceiver.copyRO());
receiver=checkedReceiver;
rectifyStateWithErrorHandler();
}
MethodOperand mop=MethodOperand.VIRTUAL(vmethRef,vmeth);
if (receiver.isConstant() || receiver.asRegister().isPreciseType()) {
mop.refine(vmeth,true);
}
Call.setMethod(s,mop);
boolean unresolved=vmethRef.needsDynamicLink(bcodes.getMethod());
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),Call.getMethod(s).copy()));
Call.setAddress(s,offsetrop);
rectifyStateWithErrorHandler();
}
 else {
Call.setAddress(s,new AddressConstantOperand(vmeth.getOffset()));
}
if (maybeInlineMethod(shouldInline(s,receiver.isConstant() || receiver.asRegister().isExtant()),s)) {
return;
}
}
 else {
if (resolvedMethod != null && maybeInlineMethod(shouldInline(s,false),s)) {
return;
}
 else {
if (requiresImplementsTest) {
RegisterOperand checkedReceiver=gc.temps.makeTemp(receiver);
appendInstruction(TypeCheck.create(MUST_IMPLEMENT_INTERFACE,checkedReceiver,receiver.copy(),makeTypeOperand(resolvedMethod.getDeclaringClass()),getCurrentGuard()));
checkedReceiver.refine(resolvedMethod.getDeclaringClass().getTypeRef());
Call.setParam(s,0,checkedReceiver.copyRO());
}
}
}
rectifyStateWithExceptionHandlers();
}
break;
case JBC_xxxunusedxxx:
OptimizingCompilerException.UNREACHABLE();
break;
case JBC_new:
{
VM_TypeReference klass=bcodes.getTypeReference();
RegisterOperand t=gc.temps.makeTemp(klass);
t.setPreciseType();
t.setExtant();
markGuardlessNonNull(t);
Operator operator;
TypeOperand klassOp;
VM_Class klassType=(VM_Class)klass.peekType();
if (klassType != null && (klassType.isInitialized() || klassType.isInBootImage())) {
klassOp=makeTypeOperand(klassType);
operator=NEW;
}
 else {
operator=NEW_UNRESOLVED;
klassOp=makeTypeOperand(klass);
}
s=New.create(operator,t,klassOp);
push(t.copyD2U());
rectifyStateWithErrorHandler();
}
break;
case JBC_newarray:
{
VM_Type array=bcodes.getPrimitiveArrayType();
TypeOperand arrayOp=makeTypeOperand(array);
RegisterOperand t=gc.temps.makeTemp(array.getTypeRef());
t.setPreciseType();
t.setExtant();
markGuardlessNonNull(t);
s=NewArray.create(NEWARRAY,t,arrayOp,popInt());
push(t.copyD2U());
rectifyStateWithExceptionHandler(VM_TypeReference.JavaLangNegativeArraySizeException);
}
break;
case JBC_anewarray:
{
VM_TypeReference elementTypeRef=bcodes.getTypeReference();
s=generateAnewarray(null,elementTypeRef);
}
break;
case JBC_arraylength:
{
Operand op1=pop();
clearCurrentGuard();
if (do_NullCheck(op1)) {
break;
}
if (VM.VerifyAssertions) {
VM._assert(getArrayTypeOf(op1).isArrayType());
}
RegisterOperand t=gc.temps.makeTempInt();
s=GuardedUnary.create(ARRAYLENGTH,t,op1,getCurrentGuard());
push(t.copyD2U());
}
break;
case JBC_athrow:
{
Operand op0=pop();
clearCurrentGuard();
if (do_NullCheck(op0)) {
break;
}
VM_TypeReference type=getRefTypeOf(op0);
if (VM.VerifyAssertions) assertIsAssignable(VM_TypeReference.JavaLangThrowable,type);
if (!gc.method.isInterruptible()) {
appendInstruction(Empty.create(UNINT_END));
}
endOfBasicBlock=true;
BasicBlock definiteTarget=rectifyStateWithExceptionHandler(type,true);
if (definiteTarget != null) {
appendInstruction(CacheOp.create(SET_CAUGHT_EXCEPTION,op0));
s=Goto.create(GOTO,definiteTarget.makeJumpTarget());
definiteTarget.setExceptionHandlerWithNormalIn();
}
 else {
s=Athrow.create(ATHROW,op0);
}
}
break;
case JBC_checkcast:
{
VM_TypeReference typeRef=bcodes.getTypeReference();
boolean classLoading=couldCauseClassLoading(typeRef);
Operand op2=pop();
if (typeRef.isWordType()) {
op2=op2.copy();
if (op2 instanceof RegisterOperand) {
((RegisterOperand)op2).setType(typeRef);
}
push(op2);
if (DBG_CF) db(""String_Node_Str"" + typeRef);
break;
}
if (VM.VerifyAssertions) VM._assert(op2.isRef());
if (CF_CHECKCAST && !classLoading) {
if (op2.isDefinitelyNull()) {
push(op2);
if (DBG_CF) db(""String_Node_Str"");
break;
}
VM_TypeReference type=getRefTypeOf(op2);
if (ClassLoaderProxy.includesType(typeRef,type) == YES) {
push(op2);
if (DBG_CF) {
db(""String_Node_Str"" + op2 + ""String_Node_Str""+ typeRef+ ""String_Node_Str""+ type);
}
break;
}
}
RegisterOperand refinedOp2=gc.temps.makeTemp(op2);
if (!gc.options.NO_CHECKCAST) {
if (classLoading) {
s=TypeCheck.create(CHECKCAST_UNRESOLVED,refinedOp2,op2.copy(),makeTypeOperand(typeRef));
}
 else {
TypeOperand typeOp=makeTypeOperand(typeRef.peekType());
if (isNonNull(op2)) {
s=TypeCheck.create(CHECKCAST_NOTNULL,refinedOp2,op2.copy(),typeOp,getGuard(op2));
}
 else {
s=TypeCheck.create(CHECKCAST,refinedOp2,op2.copy(),typeOp);
}
}
}
refinedOp2.refine(typeRef);
push(refinedOp2.copyRO());
rectifyStateWithExceptionHandler(VM_TypeReference.JavaLangClassCastException);
if (classLoading) rectifyStateWithErrorHandler();
}
break;
case JBC_instanceof:
{
VM_TypeReference typeRef=bcodes.getTypeReference();
boolean classLoading=couldCauseClassLoading(typeRef);
Operand op2=pop();
if (VM.VerifyAssertions) VM._assert(op2.isRef());
if (CF_INSTANCEOF && !classLoading) {
if (op2.isDefinitelyNull()) {
push(new IntConstantOperand(0));
if (DBG_CF) db(""String_Node_Str"");
break;
}
VM_TypeReference type=getRefTypeOf(op2);
int answer=ClassLoaderProxy.includesType(typeRef,type);
if (answer == YES && isNonNull(op2)) {
push(new IntConstantOperand(1));
if (DBG_CF) {
db(op2 + ""String_Node_Str"" + typeRef+ ""String_Node_Str"");
}
break;
}
 else if (answer == NO) {
if (DBG_CF) {
db(op2 + ""String_Node_Str"" + typeRef+ ""String_Node_Str"");
}
push(new IntConstantOperand(0));
break;
}
}
RegisterOperand t=gc.temps.makeTempInt();
if (classLoading) {
s=InstanceOf.create(INSTANCEOF_UNRESOLVED,t,makeTypeOperand(typeRef),op2);
}
 else {
TypeOperand typeOp=makeTypeOperand(typeRef.peekType());
if (isNonNull(op2)) {
s=InstanceOf.create(INSTANCEOF_NOTNULL,t,typeOp,op2,getGuard(op2));
}
 else {
s=InstanceOf.create(INSTANCEOF,t,typeOp,op2);
}
}
push(t.copyD2U());
if (classLoading) rectifyStateWithErrorHandler();
}
break;
case JBC_monitorenter:
{
Operand op0=pop();
clearCurrentGuard();
if (do_NullCheck(op0)) {
break;
}
if (VM.VerifyAssertions) VM._assert(op0.isRef());
if (gc.options.MONITOR_NOP) {
s=null;
}
 else {
s=MonitorOp.create(MONITORENTER,op0,getCurrentGuard());
}
}
break;
case JBC_monitorexit:
{
Operand op0=pop();
clearCurrentGuard();
if (do_NullCheck(op0)) {
break;
}
if (gc.options.MONITOR_NOP) {
s=null;
}
 else {
s=MonitorOp.create(MONITOREXIT,op0,getCurrentGuard());
}
rectifyStateWithExceptionHandler(VM_TypeReference.JavaLangIllegalMonitorStateException);
}
break;
case JBC_wide:
{
int widecode=bcodes.getWideOpcode();
int index=bcodes.getWideLocalNumber();
switch (widecode) {
case JBC_iload:
s=do_iload(index);
break;
case JBC_lload:
s=do_lload(index);
break;
case JBC_fload:
s=do_fload(index);
break;
case JBC_dload:
s=do_dload(index);
break;
case JBC_aload:
s=do_aload(index);
break;
case JBC_istore:
s=do_store(index,popInt());
break;
case JBC_lstore:
s=do_store(index,popLong());
break;
case JBC_fstore:
s=do_store(index,popFloat());
break;
case JBC_dstore:
s=do_store(index,popDouble());
break;
case JBC_astore:
s=do_astore(index);
break;
case JBC_iinc:
s=do_iinc(index,bcodes.getWideIncrement());
break;
case JBC_ret:
s=_retHelper(index);
break;
default :
OptimizingCompilerException.UNREACHABLE();
break;
}
}
break;
case JBC_multianewarray:
{
VM_TypeReference arrayType=bcodes.getTypeReference();
int dimensions=bcodes.getArrayDimension();
if (dimensions == 1) {
s=generateAnewarray(arrayType,null);
}
 else {
TypeOperand typeOp=makeTypeOperand(arrayType);
RegisterOperand result=gc.temps.makeTemp(arrayType);
markGuardlessNonNull(result);
result.setPreciseType();
result.setExtant();
s=Multianewarray.create(NEWOBJMULTIARRAY,result,typeOp,dimensions);
for (int i=0; i < dimensions; i++) {
Multianewarray.setDimension(s,dimensions - i - 1,popInt());
}
push(result.copyD2U());
rectifyStateWithErrorHandler();
rectifyStateWithExceptionHandler(VM_TypeReference.JavaLangNegativeArraySizeException);
}
}
break;
case JBC_ifnull:
s=_refIfNullHelper(ConditionOperand.EQUAL());
break;
case JBC_ifnonnull:
s=_refIfNullHelper(ConditionOperand.NOT_EQUAL());
break;
case JBC_goto_w:
{
int offset=bcodes.getWideBranchOffset();
if (offset != 5) {
s=_gotoHelper(offset);
}
}
break;
case JBC_jsr_w:
s=_jsrHelper(bcodes.getWideBranchOffset());
break;
case JBC_impdep1:
{
if (VM.BuildForAdaptiveSystem) {
int pseudo_opcode=bcodes.nextPseudoInstruction();
switch (pseudo_opcode) {
case PSEUDO_LoadIntConst:
{
int value=bcodes.readIntConst();
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + value);
}
push(new IntConstantOperand(value));
param1=param2;
param2=value;
break;
}
case PSEUDO_LoadLongConst:
{
long value=bcodes.readLongConst();
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + value);
}
pushDual(new LongConstantOperand(value,Offset.zero()));
break;
}
case PSEUDO_LoadWordConst:
{
Address a=(VM.BuildFor32Addr) ? Address.fromIntSignExtend(bcodes.readIntConst()) : Address.fromLong(bcodes.readLongConst());
push(new AddressConstantOperand(a));
if (VM.TraceOnStackReplacement) {
VM.sysWrite(""String_Node_Str"");
}
VM.sysWrite(a);
VM.sysWriteln();
break;
}
case PSEUDO_LoadFloatConst:
{
int ibits=bcodes.readIntConst();
float value=Float.intBitsToFloat(ibits);
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + value);
}
push(new FloatConstantOperand(value,Offset.zero()));
break;
}
case PSEUDO_LoadDoubleConst:
{
long lbits=bcodes.readLongConst();
double value=VM_Magic.longBitsAsDouble(lbits);
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + lbits);
}
pushDual(new DoubleConstantOperand(value,Offset.zero()));
break;
}
case PSEUDO_LoadRetAddrConst:
{
int value=bcodes.readIntConst();
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + value);
}
push(new ReturnAddressOperand(value));
break;
}
case PSEUDO_InvokeStatic:
{
VM_Method meth=null;
int targetidx=bcodes.readIntConst();
switch (targetidx) {
case GETREFAT:
meth=VM_AosEntrypoints.osrGetRefAtMethod;
break;
case CLEANREFS:
meth=VM_AosEntrypoints.osrCleanRefsMethod;
break;
default :
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + targetidx);
}
OptimizingCompilerException.UNREACHABLE();
break;
}
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + meth + ""String_Node_Str"");
}
s=_callHelper(meth.getMemberRef().asMethodReference(),MethodOperand.STATIC(meth));
if (s == null) break;
Call.setAddress(s,new AddressConstantOperand(meth.getOffset()));
if (targetidx == GETREFAT) {
Object realObj=OSR_ObjectHolder.getRefAt(param1,param2);
if (VM.VerifyAssertions) VM._assert(realObj != null);
VM_TypeReference klass=VM_Magic.getObjectType(realObj).getTypeRef();
RegisterOperand op0=gc.temps.makeTemp(klass);
Call.setResult(s,op0);
pop();
push(op0.copyD2U(),klass);
}
rectifyStateWithExceptionHandlers();
break;
}
case PSEUDO_InvokeCompiledMethod:
{
int cmid=bcodes.readIntConst();
int origBCIdx=bcodes.readIntConst();
VM_CompiledMethod cm=VM_CompiledMethods.getCompiledMethod(cmid);
VM_Method meth=cm.getMethod();
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + meth + ""String_Node_Str"");
}
s=_callHelper(meth.getMemberRef().asMethodReference(),MethodOperand.COMPILED(meth,cm.getOsrJTOCoffset()));
if (s == null) break;
s.bcIndex=origBCIdx + bciAdjustment;
rectifyStateWithExceptionHandlers();
break;
}
case PSEUDO_ParamInitEnd:
{
break;
}
default :
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + pseudo_opcode);
}
OptimizingCompilerException.UNREACHABLE();
break;
}
break;
}
 else {
OptimizingCompilerException.UNREACHABLE();
}
}
default :
OptimizingCompilerException.UNREACHABLE();
break;
}
if (s != null && !currentBBLE.isSelfRegen()) {
appendInstruction(s);
}
if (VM.VerifyAssertions) VM._assert(bcodes.index() <= runoff);
if (!endOfBasicBlock && bcodes.index() == runoff) {
if (DBG_BB || DBG_SELECTED) {
db(""String_Node_Str"" + currentBBLE + ""String_Node_Str""+ runoff);
}
endOfBasicBlock=fallThrough=true;
}
if (endOfBasicBlock) {
if (currentBBLE.isSelfRegen()) {
currentBBLE.block.deleteOut();
if (DBG_CFG || DBG_SELECTED) {
db(""String_Node_Str"" + currentBBLE.block);
}
return;
}
if (fallThrough) {
if (VM.VerifyAssertions) VM._assert(bcodes.index() < bcodes.length());
currentBBLE.fallThrough=getOrCreateBlock(bcodes.index());
currentBBLE.block.insertOut(currentBBLE.fallThrough.block);
}
return;
}
}
}","/** 
 * Generate instructions for a basic block. May discover other basic blocks that need to be generated along the way.
 * @param fromIndex bytecode index to start from
 */
private void generateFrom(int fromIndex){
  if (DBG_BB || DBG_SELECTED) {
    db(""String_Node_Str"" + currentBBLE + ""String_Node_Str""+ runoff);
  }
  currentBBLE.setGenerated();
  endOfBasicBlock=fallThrough=false;
  lastInstr=null;
  bcodes.reset(fromIndex);
  while (true) {
    currentBBLE.high=instrIndex=bcodes.index();
    int code=bcodes.nextInstruction();
    if (DBG_BCPARSE) {
      db(""String_Node_Str"" + instrIndex + ""String_Node_Str""+ code+ ""String_Node_Str""+ Integer.toHexString(code)+ ""String_Node_Str""+ ((code < JBC_name.length) ? JBC_name[code] : ""String_Node_Str""));
    }
    Instruction s=null;
    lastOsrBarrier=null;
switch (code) {
case JBC_nop:
      break;
case JBC_aconst_null:
    push(new NullConstantOperand());
  break;
case JBC_iconst_m1:
case JBC_iconst_0:
case JBC_iconst_1:
case JBC_iconst_2:
case JBC_iconst_3:
case JBC_iconst_4:
case JBC_iconst_5:
push(new IntConstantOperand(code - JBC_iconst_0));
break;
case JBC_lconst_0:
case JBC_lconst_1:
pushDual(new LongConstantOperand(code - JBC_lconst_0));
break;
case JBC_fconst_0:
push(new FloatConstantOperand(0.f));
break;
case JBC_fconst_1:
push(new FloatConstantOperand(1.f));
break;
case JBC_fconst_2:
push(new FloatConstantOperand(2.f));
break;
case JBC_dconst_0:
pushDual(new DoubleConstantOperand(0.));
break;
case JBC_dconst_1:
pushDual(new DoubleConstantOperand(1.));
break;
case JBC_bipush:
push(new IntConstantOperand(bcodes.getByteValue()));
break;
case JBC_sipush:
push(new IntConstantOperand(bcodes.getShortValue()));
break;
case JBC_ldc:
push(getConstantOperand(bcodes.getConstantIndex()));
break;
case JBC_ldc_w:
push(getConstantOperand(bcodes.getWideConstantIndex()));
break;
case JBC_ldc2_w:
pushDual(getConstantOperand(bcodes.getWideConstantIndex()));
break;
case JBC_iload:
s=do_iload(bcodes.getLocalNumber());
break;
case JBC_lload:
s=do_lload(bcodes.getLocalNumber());
break;
case JBC_fload:
s=do_fload(bcodes.getLocalNumber());
break;
case JBC_dload:
s=do_dload(bcodes.getLocalNumber());
break;
case JBC_aload:
s=do_aload(bcodes.getLocalNumber());
break;
case JBC_iload_0:
case JBC_iload_1:
case JBC_iload_2:
case JBC_iload_3:
s=do_iload(code - JBC_iload_0);
break;
case JBC_lload_0:
case JBC_lload_1:
case JBC_lload_2:
case JBC_lload_3:
s=do_lload(code - JBC_lload_0);
break;
case JBC_fload_0:
case JBC_fload_1:
case JBC_fload_2:
case JBC_fload_3:
s=do_fload(code - JBC_fload_0);
break;
case JBC_dload_0:
case JBC_dload_1:
case JBC_dload_2:
case JBC_dload_3:
s=do_dload(code - JBC_dload_0);
break;
case JBC_aload_0:
case JBC_aload_1:
case JBC_aload_2:
case JBC_aload_3:
s=do_aload(code - JBC_aload_0);
break;
case JBC_iaload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.IntArray);
}
s=_aloadHelper(INT_ALOAD,ref,index,VM_TypeReference.Int);
}
break;
case JBC_laload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.LongArray);
}
s=_aloadHelper(LONG_ALOAD,ref,index,VM_TypeReference.Long);
}
break;
case JBC_faload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.FloatArray);
}
s=_aloadHelper(FLOAT_ALOAD,ref,index,VM_TypeReference.Float);
}
break;
case JBC_daload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.DoubleArray);
}
s=_aloadHelper(DOUBLE_ALOAD,ref,index,VM_TypeReference.Double);
}
break;
case JBC_aaload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
VM_TypeReference type=getRefTypeOf(ref).getArrayElementType();
if (VM.VerifyAssertions) VM._assert(type.isReferenceType());
s=_aloadHelper(REF_ALOAD,ref,index,type);
}
break;
case JBC_baload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
VM_TypeReference type=getArrayTypeOf(ref);
if (VM.VerifyAssertions) {
VM._assert(type == VM_TypeReference.ByteArray || type == VM_TypeReference.BooleanArray);
}
if (type == VM_TypeReference.ByteArray) {
s=_aloadHelper(BYTE_ALOAD,ref,index,VM_TypeReference.Byte);
}
 else {
s=_aloadHelper(UBYTE_ALOAD,ref,index,VM_TypeReference.Boolean);
}
}
break;
case JBC_caload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.CharArray);
}
s=_aloadHelper(USHORT_ALOAD,ref,index,VM_TypeReference.Char);
}
break;
case JBC_saload:
{
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.ShortArray);
}
s=_aloadHelper(SHORT_ALOAD,ref,index,VM_TypeReference.Short);
}
break;
case JBC_istore:
s=do_store(bcodes.getLocalNumber(),popInt());
break;
case JBC_lstore:
s=do_store(bcodes.getLocalNumber(),popLong());
break;
case JBC_fstore:
s=do_store(bcodes.getLocalNumber(),popFloat());
break;
case JBC_dstore:
s=do_store(bcodes.getLocalNumber(),popDouble());
break;
case JBC_astore:
s=do_astore(bcodes.getLocalNumber());
break;
case JBC_istore_0:
case JBC_istore_1:
case JBC_istore_2:
case JBC_istore_3:
s=do_store(code - JBC_istore_0,popInt());
break;
case JBC_lstore_0:
case JBC_lstore_1:
case JBC_lstore_2:
case JBC_lstore_3:
s=do_store(code - JBC_lstore_0,popLong());
break;
case JBC_fstore_0:
case JBC_fstore_1:
case JBC_fstore_2:
case JBC_fstore_3:
s=do_store(code - JBC_fstore_0,popFloat());
break;
case JBC_dstore_0:
case JBC_dstore_1:
case JBC_dstore_2:
case JBC_dstore_3:
s=do_store(code - JBC_dstore_0,popDouble());
break;
case JBC_astore_0:
case JBC_astore_1:
case JBC_astore_2:
case JBC_astore_3:
s=do_astore(code - JBC_astore_0);
break;
case JBC_iastore:
{
Operand val=popInt();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.IntArray);
}
s=AStore.create(INT_ASTORE,val,ref,index,new LocationOperand(VM_TypeReference.Int),getCurrentGuard());
}
break;
case JBC_lastore:
{
Operand val=popLong();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.LongArray);
}
s=AStore.create(LONG_ASTORE,val,ref,index,new LocationOperand(VM_TypeReference.Long),getCurrentGuard());
}
break;
case JBC_fastore:
{
Operand val=popFloat();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.FloatArray);
}
s=AStore.create(FLOAT_ASTORE,val,ref,index,new LocationOperand(VM_TypeReference.Float),getCurrentGuard());
}
break;
case JBC_dastore:
{
Operand val=popDouble();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.DoubleArray);
}
s=AStore.create(DOUBLE_ASTORE,val,ref,index,new LocationOperand(VM_TypeReference.Double),getCurrentGuard());
}
break;
case JBC_aastore:
{
Operand val=pop();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
VM_TypeReference type=getRefTypeOf(ref).getArrayElementType();
if (VM.VerifyAssertions) VM._assert(type.isReferenceType());
if (do_CheckStore(ref,val,type)) {
break;
}
s=AStore.create(REF_ASTORE,val,ref,index,new LocationOperand(type),getCurrentGuard());
}
break;
case JBC_bastore:
{
Operand val=popInt();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
VM_TypeReference type=getArrayTypeOf(ref);
if (VM.VerifyAssertions) {
VM._assert(type == VM_TypeReference.ByteArray || type == VM_TypeReference.BooleanArray);
}
if (type == VM_TypeReference.ByteArray) {
type=VM_TypeReference.Byte;
}
 else {
type=VM_TypeReference.Boolean;
}
s=AStore.create(BYTE_ASTORE,val,ref,index,new LocationOperand(type),getCurrentGuard());
}
break;
case JBC_castore:
{
Operand val=popInt();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.CharArray);
}
s=AStore.create(SHORT_ASTORE,val,ref,index,new LocationOperand(VM_TypeReference.Char),getCurrentGuard());
}
break;
case JBC_sastore:
{
Operand val=popInt();
Operand index=popInt();
Operand ref=pop();
clearCurrentGuard();
if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {
break;
}
if (VM.VerifyAssertions) {
assertIsType(ref,VM_TypeReference.ShortArray);
}
s=AStore.create(SHORT_ASTORE,val,ref,index,new LocationOperand(VM_TypeReference.Short),getCurrentGuard());
}
break;
case JBC_pop:
stack.pop();
break;
case JBC_pop2:
stack.pop2();
break;
case JBC_dup:
{
Operand op1=stack.pop();
stack.push(op1);
s=pushCopy(op1);
}
break;
case JBC_dup_x1:
{
Operand op1=stack.pop();
Operand op2=stack.pop();
stack.push(op1);
stack.push(op2);
s=pushCopy(op1);
}
break;
case JBC_dup_x2:
{
Operand op1=stack.pop();
Operand op2=stack.pop();
Operand op3=stack.pop();
stack.push(op1);
stack.push(op3);
stack.push(op2);
s=pushCopy(op1);
}
break;
case JBC_dup2:
{
Operand op1=stack.pop();
Operand op2=stack.pop();
stack.push(op2);
stack.push(op1);
s=pushCopy(op2);
if (s != null) {
appendInstruction(s);
s=null;
}
s=pushCopy(op1);
}
break;
case JBC_dup2_x1:
{
Operand op1=stack.pop();
Operand op2=stack.pop();
Operand op3=stack.pop();
stack.push(op2);
stack.push(op1);
stack.push(op3);
s=pushCopy(op2);
if (s != null) {
appendInstruction(s);
s=null;
}
s=pushCopy(op1);
}
break;
case JBC_dup2_x2:
{
Operand op1=stack.pop();
Operand op2=stack.pop();
Operand op3=stack.pop();
Operand op4=stack.pop();
stack.push(op2);
stack.push(op1);
stack.push(op4);
stack.push(op3);
s=pushCopy(op2);
if (s != null) {
appendInstruction(s);
s=null;
}
s=pushCopy(op1);
}
break;
case JBC_swap:
{
Operand op1=stack.pop();
Operand op2=stack.pop();
stack.push(op1);
stack.push(op2);
}
break;
case JBC_iadd:
{
Operand op2=popInt();
Operand op1=popInt();
s=_binaryHelper(INT_ADD,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_ladd:
{
Operand op2=popLong();
Operand op1=popLong();
s=_binaryDualHelper(LONG_ADD,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_fadd:
{
Operand op2=popFloat();
Operand op1=popFloat();
s=_binaryHelper(FLOAT_ADD,op1,op2,VM_TypeReference.Float);
}
break;
case JBC_dadd:
{
Operand op2=popDouble();
Operand op1=popDouble();
s=_binaryDualHelper(DOUBLE_ADD,op1,op2,VM_TypeReference.Double);
}
break;
case JBC_isub:
{
Operand op2=popInt();
Operand op1=popInt();
s=_binaryHelper(INT_SUB,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_lsub:
{
Operand op2=popLong();
Operand op1=popLong();
s=_binaryDualHelper(LONG_SUB,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_fsub:
{
Operand op2=popFloat();
Operand op1=popFloat();
s=_binaryHelper(FLOAT_SUB,op1,op2,VM_TypeReference.Float);
}
break;
case JBC_dsub:
{
Operand op2=popDouble();
Operand op1=popDouble();
s=_binaryDualHelper(DOUBLE_SUB,op1,op2,VM_TypeReference.Double);
}
break;
case JBC_imul:
{
Operand op2=popInt();
Operand op1=popInt();
s=_binaryHelper(INT_MUL,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_lmul:
{
Operand op2=popLong();
Operand op1=popLong();
s=_binaryDualHelper(LONG_MUL,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_fmul:
{
Operand op2=popFloat();
Operand op1=popFloat();
s=_binaryHelper(FLOAT_MUL,op1,op2,VM_TypeReference.Float);
}
break;
case JBC_dmul:
{
Operand op2=popDouble();
Operand op1=popDouble();
s=_binaryDualHelper(DOUBLE_MUL,op1,op2,VM_TypeReference.Double);
}
break;
case JBC_idiv:
{
clearCurrentGuard();
Operand op2=popInt();
Operand op1=popInt();
if (do_IntZeroCheck(op2)) {
break;
}
s=_guardedBinaryHelper(INT_DIV,op1,op2,getCurrentGuard(),VM_TypeReference.Int);
}
break;
case JBC_ldiv:
{
clearCurrentGuard();
Operand op2=popLong();
Operand op1=popLong();
if (do_LongZeroCheck(op2)) {
break;
}
s=_guardedBinaryDualHelper(LONG_DIV,op1,op2,getCurrentGuard(),VM_TypeReference.Long);
}
break;
case JBC_fdiv:
{
Operand op2=popFloat();
Operand op1=popFloat();
s=_binaryHelper(FLOAT_DIV,op1,op2,VM_TypeReference.Float);
}
break;
case JBC_ddiv:
{
Operand op2=popDouble();
Operand op1=popDouble();
s=_binaryDualHelper(DOUBLE_DIV,op1,op2,VM_TypeReference.Double);
}
break;
case JBC_irem:
{
clearCurrentGuard();
Operand op2=popInt();
Operand op1=popInt();
if (do_IntZeroCheck(op2)) {
break;
}
s=_guardedBinaryHelper(INT_REM,op1,op2,getCurrentGuard(),VM_TypeReference.Int);
}
break;
case JBC_lrem:
{
clearCurrentGuard();
Operand op2=popLong();
Operand op1=popLong();
if (do_LongZeroCheck(op2)) {
break;
}
s=_guardedBinaryDualHelper(LONG_REM,op1,op2,getCurrentGuard(),VM_TypeReference.Long);
}
break;
case JBC_frem:
{
Operand op2=popFloat();
Operand op1=popFloat();
s=_binaryHelper(FLOAT_REM,op1,op2,VM_TypeReference.Float);
}
break;
case JBC_drem:
{
Operand op2=popDouble();
Operand op1=popDouble();
s=_binaryDualHelper(DOUBLE_REM,op1,op2,VM_TypeReference.Double);
}
break;
case JBC_ineg:
s=_unaryHelper(INT_NEG,popInt(),VM_TypeReference.Int);
break;
case JBC_lneg:
s=_unaryDualHelper(LONG_NEG,popLong(),VM_TypeReference.Long);
break;
case JBC_fneg:
s=_unaryHelper(FLOAT_NEG,popFloat(),VM_TypeReference.Float);
break;
case JBC_dneg:
s=_unaryDualHelper(DOUBLE_NEG,popDouble(),VM_TypeReference.Double);
break;
case JBC_ishl:
{
Operand op2=popShiftInt(false);
Operand op1=popInt();
s=_binaryHelper(INT_SHL,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_lshl:
{
Operand op2=popShiftInt(true);
Operand op1=popLong();
s=_binaryDualHelper(LONG_SHL,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_ishr:
{
Operand op2=popShiftInt(false);
Operand op1=popInt();
s=_binaryHelper(INT_SHR,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_lshr:
{
Operand op2=popShiftInt(true);
Operand op1=popLong();
s=_binaryDualHelper(LONG_SHR,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_iushr:
{
Operand op2=popShiftInt(false);
Operand op1=popInt();
s=_binaryHelper(INT_USHR,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_lushr:
{
Operand op2=popShiftInt(true);
Operand op1=popLong();
s=_binaryDualHelper(LONG_USHR,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_iand:
{
Operand op2=popInt();
Operand op1=popInt();
s=_binaryHelper(INT_AND,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_land:
{
Operand op2=popLong();
Operand op1=popLong();
s=_binaryDualHelper(LONG_AND,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_ior:
{
Operand op2=popInt();
Operand op1=popInt();
s=_binaryHelper(INT_OR,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_lor:
{
Operand op2=popLong();
Operand op1=popLong();
s=_binaryDualHelper(LONG_OR,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_ixor:
{
Operand op2=popInt();
Operand op1=popInt();
s=_binaryHelper(INT_XOR,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_lxor:
{
Operand op2=popLong();
Operand op1=popLong();
s=_binaryDualHelper(LONG_XOR,op1,op2,VM_TypeReference.Long);
}
break;
case JBC_iinc:
{
int index=bcodes.getLocalNumber();
s=do_iinc(index,bcodes.getIncrement());
}
break;
case JBC_i2l:
s=_unaryDualHelper(INT_2LONG,popInt(),VM_TypeReference.Long);
break;
case JBC_i2f:
s=_unaryHelper(INT_2FLOAT,popInt(),VM_TypeReference.Float);
break;
case JBC_i2d:
s=_unaryDualHelper(INT_2DOUBLE,popInt(),VM_TypeReference.Double);
break;
case JBC_l2i:
s=_unaryHelper(LONG_2INT,popLong(),VM_TypeReference.Int);
break;
case JBC_l2f:
s=_unaryHelper(LONG_2FLOAT,popLong(),VM_TypeReference.Float);
break;
case JBC_l2d:
s=_unaryDualHelper(LONG_2DOUBLE,popLong(),VM_TypeReference.Double);
break;
case JBC_f2i:
s=_unaryHelper(FLOAT_2INT,popFloat(),VM_TypeReference.Int);
break;
case JBC_f2l:
s=_unaryDualHelper(FLOAT_2LONG,popFloat(),VM_TypeReference.Long);
break;
case JBC_f2d:
s=_unaryDualHelper(FLOAT_2DOUBLE,popFloat(),VM_TypeReference.Double);
break;
case JBC_d2i:
s=_unaryHelper(DOUBLE_2INT,popDouble(),VM_TypeReference.Int);
break;
case JBC_d2l:
s=_unaryDualHelper(DOUBLE_2LONG,popDouble(),VM_TypeReference.Long);
break;
case JBC_d2f:
s=_unaryHelper(DOUBLE_2FLOAT,popDouble(),VM_TypeReference.Float);
break;
case JBC_int2byte:
s=_unaryHelper(INT_2BYTE,popInt(),VM_TypeReference.Byte);
break;
case JBC_int2char:
s=_unaryHelper(INT_2USHORT,popInt(),VM_TypeReference.Char);
break;
case JBC_int2short:
s=_unaryHelper(INT_2SHORT,popInt(),VM_TypeReference.Short);
break;
case JBC_lcmp:
{
Operand op2=popLong();
Operand op1=popLong();
s=_binaryHelper(LONG_CMP,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_fcmpl:
{
Operand op2=popFloat();
Operand op1=popFloat();
s=_binaryHelper(FLOAT_CMPL,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_fcmpg:
{
Operand op2=popFloat();
Operand op1=popFloat();
s=_binaryHelper(FLOAT_CMPG,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_dcmpl:
{
Operand op2=popDouble();
Operand op1=popDouble();
s=_binaryHelper(DOUBLE_CMPL,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_dcmpg:
{
Operand op2=popDouble();
Operand op1=popDouble();
s=_binaryHelper(DOUBLE_CMPG,op1,op2,VM_TypeReference.Int);
}
break;
case JBC_ifeq:
s=_intIfHelper(ConditionOperand.EQUAL());
break;
case JBC_ifne:
s=_intIfHelper(ConditionOperand.NOT_EQUAL());
break;
case JBC_iflt:
s=_intIfHelper(ConditionOperand.LESS());
break;
case JBC_ifge:
s=_intIfHelper(ConditionOperand.GREATER_EQUAL());
break;
case JBC_ifgt:
s=_intIfHelper(ConditionOperand.GREATER());
break;
case JBC_ifle:
s=_intIfHelper(ConditionOperand.LESS_EQUAL());
break;
case JBC_if_icmpeq:
s=_intIfCmpHelper(ConditionOperand.EQUAL());
break;
case JBC_if_icmpne:
s=_intIfCmpHelper(ConditionOperand.NOT_EQUAL());
break;
case JBC_if_icmplt:
s=_intIfCmpHelper(ConditionOperand.LESS());
break;
case JBC_if_icmpge:
s=_intIfCmpHelper(ConditionOperand.GREATER_EQUAL());
break;
case JBC_if_icmpgt:
s=_intIfCmpHelper(ConditionOperand.GREATER());
break;
case JBC_if_icmple:
s=_intIfCmpHelper(ConditionOperand.LESS_EQUAL());
break;
case JBC_if_acmpeq:
s=_refIfCmpHelper(ConditionOperand.EQUAL());
break;
case JBC_if_acmpne:
s=_refIfCmpHelper(ConditionOperand.NOT_EQUAL());
break;
case JBC_goto:
{
int offset=bcodes.getBranchOffset();
if (offset != 3) {
s=_gotoHelper(offset);
}
}
break;
case JBC_jsr:
s=_jsrHelper(bcodes.getBranchOffset());
break;
case JBC_ret:
s=_retHelper(bcodes.getLocalNumber());
break;
case JBC_tableswitch:
{
bcodes.alignSwitch();
Operand op0=popInt();
int defaultoff=bcodes.getDefaultSwitchOffset();
int low=bcodes.getLowSwitchValue();
int high=bcodes.getHighSwitchValue();
int number=high - low + 1;
if (CF_TABLESWITCH && op0 instanceof IntConstantOperand) {
int v1=((IntConstantOperand)op0).value;
int match=bcodes.computeTableSwitchOffset(v1,low,high);
int offset=match == 0 ? defaultoff : match;
bcodes.skipTableSwitchOffsets(number);
if (DBG_CF) {
db(""String_Node_Str"" + v1 + ""String_Node_Str"");
}
s=_gotoHelper(offset);
break;
}
s=TableSwitch.create(TABLESWITCH,op0,null,null,new IntConstantOperand(low),new IntConstantOperand(high),generateTarget(defaultoff),null,number * 2);
for (int i=0; i < number; ++i) {
TableSwitch.setTarget(s,i,generateTarget(bcodes.getTableSwitchOffset(i)));
}
bcodes.skipTableSwitchOffsets(number);
VM_SwitchBranchProfile sp=gc.getSwitchProfile(instrIndex - bciAdjustment);
if (sp == null) {
float approxProb=1.0f / (number + 1);
TableSwitch.setDefaultBranchProfile(s,new BranchProfileOperand(approxProb));
for (int i=0; i < number; ++i) {
TableSwitch.setBranchProfile(s,i,new BranchProfileOperand(approxProb));
}
}
 else {
TableSwitch.setDefaultBranchProfile(s,new BranchProfileOperand(sp.getDefaultProbability()));
for (int i=0; i < number; ++i) {
TableSwitch.setBranchProfile(s,i,new BranchProfileOperand(sp.getCaseProbability(i)));
}
}
}
break;
case JBC_lookupswitch:
{
bcodes.alignSwitch();
Operand op0=popInt();
int defaultoff=bcodes.getDefaultSwitchOffset();
int numpairs=bcodes.getSwitchLength();
if (numpairs == 0) {
s=_gotoHelper(defaultoff);
break;
}
if (CF_LOOKUPSWITCH && op0 instanceof IntConstantOperand) {
int v1=((IntConstantOperand)op0).value;
int match=bcodes.computeLookupSwitchOffset(v1,numpairs);
int offset=match == 0 ? defaultoff : match;
bcodes.skipLookupSwitchPairs(numpairs);
if (DBG_CF) {
db(""String_Node_Str"" + v1 + ""String_Node_Str"");
}
s=_gotoHelper(offset);
break;
}
s=LookupSwitch.create(LOOKUPSWITCH,op0,null,null,generateTarget(defaultoff),null,numpairs * 3);
for (int i=0; i < numpairs; ++i) {
LookupSwitch.setMatch(s,i,new IntConstantOperand(bcodes.getLookupSwitchValue(i)));
LookupSwitch.setTarget(s,i,generateTarget(bcodes.getLookupSwitchOffset(i)));
}
bcodes.skipLookupSwitchPairs(numpairs);
VM_SwitchBranchProfile sp=gc.getSwitchProfile(instrIndex - bciAdjustment);
if (sp == null) {
float approxProb=1.0f / (float)(numpairs + 1);
LookupSwitch.setDefaultBranchProfile(s,new BranchProfileOperand(approxProb));
for (int i=0; i < numpairs; ++i) {
LookupSwitch.setBranchProfile(s,i,new BranchProfileOperand(approxProb));
}
}
 else {
LookupSwitch.setDefaultBranchProfile(s,new BranchProfileOperand(sp.getDefaultProbability()));
for (int i=0; i < numpairs; ++i) {
LookupSwitch.setBranchProfile(s,i,new BranchProfileOperand(sp.getCaseProbability(i)));
}
}
}
break;
case JBC_ireturn:
_returnHelper(INT_MOVE,popInt());
break;
case JBC_lreturn:
_returnHelper(LONG_MOVE,popLong());
break;
case JBC_freturn:
_returnHelper(FLOAT_MOVE,popFloat());
break;
case JBC_dreturn:
_returnHelper(DOUBLE_MOVE,popDouble());
break;
case JBC_areturn:
{
Operand op0=popRef();
if (VM.VerifyAssertions && !op0.isDefinitelyNull()) {
VM_TypeReference retType=op0.getType();
assertIsAssignable(gc.method.getReturnType(),retType);
}
_returnHelper(REF_MOVE,op0);
}
break;
case JBC_return:
_returnHelper(null,null);
break;
case JBC_getstatic:
{
VM_FieldReference ref=bcodes.getFieldReference();
boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());
LocationOperand fieldOp=makeStaticFieldRef(ref);
Operand offsetOp;
VM_TypeReference fieldType=ref.getFieldContentsType();
RegisterOperand t=gc.temps.makeTemp(fieldType);
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),fieldOp.copy()));
offsetOp=offsetrop;
rectifyStateWithErrorHandler();
}
 else {
VM_Field field=ref.peekResolvedField();
offsetOp=new AddressConstantOperand(field.getOffset());
VM_Type ft=fieldType.peekType();
if (ft != null && ft.isClassType()) {
VM_TypeReference concreteType=FieldAnalysis.getConcreteType(field);
if (concreteType != null) {
if (concreteType == fieldType) {
t.setDeclaredType();
t.setPreciseType();
}
 else {
fieldType=concreteType;
t.setType(concreteType);
t.setPreciseType();
}
}
}
if (field.isFinal()) {
VM_Class declaringClass=field.getDeclaringClass();
if (declaringClass.isInitialized() || declaringClass.isInBootImage()) {
try {
ConstantOperand rhs=StaticFieldReader.getStaticFieldValue(field);
push(rhs,fieldType);
break;
}
 catch (NoSuchFieldException e) {
if (VM.runningVM) {
throw new Error(""String_Node_Str"",e);
}
 else {
}
}
}
}
 else if (field.isRuntimeFinal()) {
if (VM.VerifyAssertions) VM._assert(fieldType.isBooleanType());
boolean rhsBool=field.getRuntimeFinalValue();
push(new IntConstantOperand(rhsBool ? 1 : 0));
break;
}
}
s=GetStatic.create(GETSTATIC,t,offsetOp,fieldOp);
push(t.copyD2U(),fieldType);
}
break;
case JBC_putstatic:
{
VM_FieldReference ref=bcodes.getFieldReference();
boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());
LocationOperand fieldOp=makeStaticFieldRef(ref);
Operand offsetOp;
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),fieldOp.copy()));
offsetOp=offsetrop;
rectifyStateWithErrorHandler();
}
 else {
VM_Field field=ref.peekResolvedField();
offsetOp=new AddressConstantOperand(field.getOffset());
}
VM_TypeReference fieldType=ref.getFieldContentsType();
Operand r=pop(fieldType);
s=PutStatic.create(PUTSTATIC,r,offsetOp,fieldOp);
}
break;
case JBC_getfield:
{
VM_FieldReference ref=bcodes.getFieldReference();
boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());
LocationOperand fieldOp=makeInstanceFieldRef(ref);
Operand offsetOp;
VM_TypeReference fieldType=ref.getFieldContentsType();
VM_Field field=null;
RegisterOperand t=gc.temps.makeTemp(fieldType);
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),fieldOp.copy()));
offsetOp=offsetrop;
rectifyStateWithErrorHandler();
}
 else {
field=ref.peekResolvedField();
offsetOp=new AddressConstantOperand(field.getOffset());
VM_Type ft=fieldType.peekType();
if (ft != null && ft.isClassType()) {
VM_TypeReference concreteType=FieldAnalysis.getConcreteType(field);
if (concreteType != null) {
if (concreteType == fieldType) {
t.setDeclaredType();
t.setPreciseType();
}
 else {
fieldType=concreteType;
t.setType(concreteType);
t.setPreciseType();
}
}
}
}
Operand op1=pop();
clearCurrentGuard();
if (do_NullCheck(op1)) {
break;
}
if (op1.isConstant() && field.isFinal()) {
try {
ConstantOperand rhs=StaticFieldReader.getFieldValueAsConstant(field,op1.asObjectConstant().value);
push(rhs,fieldType);
break;
}
 catch (NoSuchFieldException e) {
if (VM.runningVM) {
throw new Error(""String_Node_Str"",e);
}
 else {
}
}
}
s=GetField.create(GETFIELD,t,op1,offsetOp,fieldOp,getCurrentGuard());
push(t.copyD2U(),fieldType);
}
break;
case JBC_putfield:
{
VM_FieldReference ref=bcodes.getFieldReference();
boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());
LocationOperand fieldOp=makeInstanceFieldRef(ref);
VM_TypeReference fieldType=ref.getFieldContentsType();
Operand offsetOp;
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),fieldOp.copy()));
offsetOp=offsetrop;
rectifyStateWithErrorHandler();
}
 else {
VM_Field field=ref.peekResolvedField();
offsetOp=new AddressConstantOperand(field.getOffset());
}
Operand val=pop(fieldType);
Operand obj=popRef();
clearCurrentGuard();
if (do_NullCheck(obj)) {
break;
}
s=PutField.create(PUTFIELD,val,obj,offsetOp,fieldOp,getCurrentGuard());
}
break;
case JBC_invokevirtual:
{
VM_MethodReference ref=bcodes.getMethodReference();
if (ref.isMagic()) {
boolean generated=GenerateMagic.generateMagic(this,gc,ref);
if (generated) break;
}
if (this.osrGuardedInline) {
lastOsrBarrier=_createOsrBarrier();
}
if (ref.isMiranda()) {
s=_callHelper(ref,MethodOperand.INTERFACE(ref,null));
if (s == null) break;
Operand receiver=Call.getParam(s,0);
VM_Class receiverType=(VM_Class)receiver.getType().peekType();
clearCurrentGuard();
if (do_NullCheck(receiver)) {
s=null;
break;
}
Call.setGuard(s,getCurrentGuard());
VM_Method vmeth=null;
if (receiverType != null && receiverType.isInitialized() && !receiverType.isInterface()) {
vmeth=ClassLoaderProxy.lookupMethod(receiverType,ref);
}
if (vmeth != null) {
VM_MethodReference vmethRef=vmeth.getMemberRef().asMethodReference();
MethodOperand mop=MethodOperand.VIRTUAL(vmethRef,vmeth);
if (receiver.isConstant() || (receiver.isRegister() && receiver.asRegister().isPreciseType())) {
mop.refine(vmeth,true);
}
Call.setMethod(s,mop);
boolean unresolved=vmethRef.needsDynamicLink(bcodes.getMethod());
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),Call.getMethod(s).copy()));
Call.setAddress(s,offsetrop);
rectifyStateWithErrorHandler();
}
 else {
Call.setAddress(s,new AddressConstantOperand(vmeth.getOffset()));
}
if (maybeInlineMethod(shouldInline(s,receiver.isConstant() || (receiver.isRegister() && receiver.asRegister().isExtant())),s)) {
return;
}
}
}
 else {
boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());
VM_Method target=ref.peekResolvedMethod();
MethodOperand methOp=MethodOperand.VIRTUAL(ref,target);
s=_callHelper(ref,methOp);
if (s == null) break;
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),Call.getMethod(s).copy()));
Call.setAddress(s,offsetrop);
rectifyStateWithErrorHandler();
}
 else {
if (VM.VerifyAssertions) VM._assert(target != null);
Call.setAddress(s,new AddressConstantOperand(target.getOffset()));
}
Operand receiver=Call.getParam(s,0);
clearCurrentGuard();
if (do_NullCheck(receiver)) {
s=null;
break;
}
Call.setGuard(s,getCurrentGuard());
boolean isExtant=false;
boolean isPreciseType=false;
VM_TypeReference tr=null;
if (receiver.isRegister()) {
RegisterOperand rop=receiver.asRegister();
isExtant=rop.isExtant();
isPreciseType=rop.isPreciseType();
tr=rop.getType();
}
 else {
isExtant=true;
isPreciseType=true;
tr=receiver.getType();
}
VM_Type type=tr.peekType();
if (type != null && type.isResolved()) {
if (type.isClassType()) {
VM_Method vmeth=target;
if (target == null || type != target.getDeclaringClass()) {
vmeth=ClassLoaderProxy.lookupMethod(type.asClass(),ref);
}
if (vmeth != null) {
methOp.refine(vmeth,isPreciseType || type.asClass().isFinal());
}
}
 else {
if (VM.VerifyAssertions) VM._assert(target != null,""String_Node_Str"");
methOp.refine(target,true);
}
}
if (maybeInlineMethod(shouldInline(s,isExtant),s)) {
return;
}
}
rectifyStateWithExceptionHandlers();
}
break;
case JBC_invokespecial:
{
VM_MethodReference ref=bcodes.getMethodReference();
VM_Method target=ref.resolveInvokeSpecial();
if (this.osrGuardedInline) {
lastOsrBarrier=_createOsrBarrier();
}
s=_callHelper(ref,MethodOperand.SPECIAL(ref,target));
if (s == null) break;
if (target == null) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),Call.getMethod(s).copy()));
Call.setAddress(s,offsetrop);
rectifyStateWithErrorHandler();
}
 else {
Call.setAddress(s,new AddressConstantOperand(target.getOffset()));
}
Operand receiver=Call.getParam(s,0);
clearCurrentGuard();
if (do_NullCheck(receiver)) {
s=null;
break;
}
Call.setGuard(s,getCurrentGuard());
if (maybeInlineMethod(shouldInline(s,false),s)) {
return;
}
rectifyStateWithExceptionHandlers();
}
break;
case JBC_invokestatic:
{
VM_MethodReference ref=bcodes.getMethodReference();
if (ref.isMagic()) {
boolean generated=GenerateMagic.generateMagic(this,gc,ref);
if (generated) break;
}
boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());
VM_Method target=ref.peekResolvedMethod();
if (this.osrGuardedInline) {
lastOsrBarrier=_createOsrBarrier();
}
s=_callHelper(ref,MethodOperand.STATIC(ref,target));
if (s == null) break;
if (Call.conforms(s)) {
MethodOperand methOp=Call.getMethod(s);
if (methOp.getTarget() == target) {
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),Call.getMethod(s).copy()));
Call.setAddress(s,offsetrop);
rectifyStateWithErrorHandler();
}
 else {
Call.setAddress(s,new AddressConstantOperand(target.getOffset()));
}
if (maybeInlineMethod(shouldInline(s,false),s)) {
return;
}
}
}
rectifyStateWithExceptionHandlers();
}
break;
case JBC_invokeinterface:
{
VM_MethodReference ref=bcodes.getMethodReference();
bcodes.alignInvokeInterface();
VM_Method resolvedMethod=null;
resolvedMethod=ref.peekInterfaceMethod();
if (this.osrGuardedInline) {
lastOsrBarrier=_createOsrBarrier();
}
s=_callHelper(ref,MethodOperand.INTERFACE(ref,resolvedMethod));
if (s == null) break;
Operand receiver=Call.getParam(s,0);
VM_Class receiverType=(VM_Class)receiver.getType().peekType();
clearCurrentGuard();
if (do_NullCheck(receiver)) {
s=null;
break;
}
Call.setGuard(s,getCurrentGuard());
boolean requiresImplementsTest=VM.BuildForIMTInterfaceInvocation;
if (requiresImplementsTest) {
if (resolvedMethod == null) {
RegisterOperand tibPtr=gc.temps.makeTemp(VM_TypeReference.TIB);
Instruction getTib=GuardedUnary.create(GET_OBJ_TIB,tibPtr,receiver.copy(),getCurrentGuard());
appendInstruction(getTib);
getTib.bcIndex=RUNTIME_SERVICES_BCI;
VM_Method target=VM_Entrypoints.unresolvedInvokeinterfaceImplementsTestMethod;
Instruction callCheck=Call.create2(CALL,null,new AddressConstantOperand(target.getOffset()),MethodOperand.STATIC(target),new IntConstantOperand(ref.getId()),tibPtr.copyD2U());
if (gc.options.NO_CALLEE_EXCEPTIONS) {
callCheck.markAsNonPEI();
}
appendInstruction(callCheck);
callCheck.bcIndex=RUNTIME_SERVICES_BCI;
requiresImplementsTest=false;
rectifyStateWithErrorHandler();
}
 else {
VM_Type interfaceType=resolvedMethod.getDeclaringClass();
if (receiverType != null && receiverType.isResolved() && !receiverType.isInterface()) {
byte doesImplement=ClassLoaderProxy.includesType(interfaceType.getTypeRef(),receiverType.getTypeRef());
requiresImplementsTest=doesImplement != YES;
}
}
}
VM_Method vmeth=null;
if (receiverType != null && receiverType.isInitialized() && !receiverType.isInterface()) {
vmeth=ClassLoaderProxy.lookupMethod(receiverType,ref);
}
if (vmeth != null) {
VM_MethodReference vmethRef=vmeth.getMemberRef().asMethodReference();
if (requiresImplementsTest) {
RegisterOperand checkedReceiver=gc.temps.makeTemp(receiver);
appendInstruction(TypeCheck.create(MUST_IMPLEMENT_INTERFACE,checkedReceiver,receiver.copy(),makeTypeOperand(resolvedMethod.getDeclaringClass()),getCurrentGuard()));
checkedReceiver.refine(resolvedMethod.getDeclaringClass().getTypeRef());
Call.setParam(s,0,checkedReceiver.copyRO());
receiver=checkedReceiver;
rectifyStateWithErrorHandler();
}
MethodOperand mop=MethodOperand.VIRTUAL(vmethRef,vmeth);
if (receiver.isConstant() || receiver.asRegister().isPreciseType()) {
mop.refine(vmeth,true);
}
Call.setMethod(s,mop);
boolean unresolved=vmethRef.needsDynamicLink(bcodes.getMethod());
if (unresolved) {
RegisterOperand offsetrop=gc.temps.makeTempOffset();
appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),Call.getMethod(s).copy()));
Call.setAddress(s,offsetrop);
rectifyStateWithErrorHandler();
}
 else {
Call.setAddress(s,new AddressConstantOperand(vmeth.getOffset()));
}
if (maybeInlineMethod(shouldInline(s,receiver.isConstant() || receiver.asRegister().isExtant()),s)) {
return;
}
}
 else {
if (resolvedMethod != null && maybeInlineMethod(shouldInline(s,false),s)) {
return;
}
 else {
if (requiresImplementsTest) {
RegisterOperand checkedReceiver=gc.temps.makeTemp(receiver);
appendInstruction(TypeCheck.create(MUST_IMPLEMENT_INTERFACE,checkedReceiver,receiver.copy(),makeTypeOperand(resolvedMethod.getDeclaringClass()),getCurrentGuard()));
checkedReceiver.refine(resolvedMethod.getDeclaringClass().getTypeRef());
Call.setParam(s,0,checkedReceiver.copyRO());
}
}
}
rectifyStateWithExceptionHandlers();
}
break;
case JBC_xxxunusedxxx:
OptimizingCompilerException.UNREACHABLE();
break;
case JBC_new:
{
VM_TypeReference klass=bcodes.getTypeReference();
RegisterOperand t=gc.temps.makeTemp(klass);
t.setPreciseType();
markGuardlessNonNull(t);
Operator operator;
TypeOperand klassOp;
VM_Class klassType=(VM_Class)klass.peekType();
if (klassType != null && (klassType.isInitialized() || klassType.isInBootImage())) {
klassOp=makeTypeOperand(klassType);
operator=NEW;
t.setExtant();
}
 else {
operator=NEW_UNRESOLVED;
klassOp=makeTypeOperand(klass);
}
s=New.create(operator,t,klassOp);
push(t.copyD2U());
rectifyStateWithErrorHandler();
}
break;
case JBC_newarray:
{
VM_Type array=bcodes.getPrimitiveArrayType();
TypeOperand arrayOp=makeTypeOperand(array);
RegisterOperand t=gc.temps.makeTemp(array.getTypeRef());
t.setPreciseType();
t.setExtant();
markGuardlessNonNull(t);
s=NewArray.create(NEWARRAY,t,arrayOp,popInt());
push(t.copyD2U());
rectifyStateWithExceptionHandler(VM_TypeReference.JavaLangNegativeArraySizeException);
}
break;
case JBC_anewarray:
{
VM_TypeReference elementTypeRef=bcodes.getTypeReference();
s=generateAnewarray(null,elementTypeRef);
}
break;
case JBC_arraylength:
{
Operand op1=pop();
clearCurrentGuard();
if (do_NullCheck(op1)) {
break;
}
if (VM.VerifyAssertions) {
VM._assert(getArrayTypeOf(op1).isArrayType());
}
RegisterOperand t=gc.temps.makeTempInt();
s=GuardedUnary.create(ARRAYLENGTH,t,op1,getCurrentGuard());
push(t.copyD2U());
}
break;
case JBC_athrow:
{
Operand op0=pop();
clearCurrentGuard();
if (do_NullCheck(op0)) {
break;
}
VM_TypeReference type=getRefTypeOf(op0);
if (VM.VerifyAssertions) assertIsAssignable(VM_TypeReference.JavaLangThrowable,type);
if (!gc.method.isInterruptible()) {
appendInstruction(Empty.create(UNINT_END));
}
endOfBasicBlock=true;
BasicBlock definiteTarget=rectifyStateWithExceptionHandler(type,true);
if (definiteTarget != null) {
appendInstruction(CacheOp.create(SET_CAUGHT_EXCEPTION,op0));
s=Goto.create(GOTO,definiteTarget.makeJumpTarget());
definiteTarget.setExceptionHandlerWithNormalIn();
}
 else {
s=Athrow.create(ATHROW,op0);
}
}
break;
case JBC_checkcast:
{
VM_TypeReference typeRef=bcodes.getTypeReference();
boolean classLoading=couldCauseClassLoading(typeRef);
Operand op2=pop();
if (typeRef.isWordType()) {
op2=op2.copy();
if (op2 instanceof RegisterOperand) {
((RegisterOperand)op2).setType(typeRef);
}
push(op2);
if (DBG_CF) db(""String_Node_Str"" + typeRef);
break;
}
if (VM.VerifyAssertions) VM._assert(op2.isRef());
if (CF_CHECKCAST && !classLoading) {
if (op2.isDefinitelyNull()) {
push(op2);
if (DBG_CF) db(""String_Node_Str"");
break;
}
VM_TypeReference type=getRefTypeOf(op2);
if (ClassLoaderProxy.includesType(typeRef,type) == YES) {
push(op2);
if (DBG_CF) {
db(""String_Node_Str"" + op2 + ""String_Node_Str""+ typeRef+ ""String_Node_Str""+ type);
}
break;
}
}
RegisterOperand refinedOp2=gc.temps.makeTemp(op2);
if (!gc.options.NO_CHECKCAST) {
if (classLoading) {
s=TypeCheck.create(CHECKCAST_UNRESOLVED,refinedOp2,op2.copy(),makeTypeOperand(typeRef));
}
 else {
TypeOperand typeOp=makeTypeOperand(typeRef.peekType());
if (isNonNull(op2)) {
s=TypeCheck.create(CHECKCAST_NOTNULL,refinedOp2,op2.copy(),typeOp,getGuard(op2));
}
 else {
s=TypeCheck.create(CHECKCAST,refinedOp2,op2.copy(),typeOp);
}
}
}
refinedOp2.refine(typeRef);
push(refinedOp2.copyRO());
rectifyStateWithExceptionHandler(VM_TypeReference.JavaLangClassCastException);
if (classLoading) rectifyStateWithErrorHandler();
}
break;
case JBC_instanceof:
{
VM_TypeReference typeRef=bcodes.getTypeReference();
boolean classLoading=couldCauseClassLoading(typeRef);
Operand op2=pop();
if (VM.VerifyAssertions) VM._assert(op2.isRef());
if (CF_INSTANCEOF && !classLoading) {
if (op2.isDefinitelyNull()) {
push(new IntConstantOperand(0));
if (DBG_CF) db(""String_Node_Str"");
break;
}
VM_TypeReference type=getRefTypeOf(op2);
int answer=ClassLoaderProxy.includesType(typeRef,type);
if (answer == YES && isNonNull(op2)) {
push(new IntConstantOperand(1));
if (DBG_CF) {
db(op2 + ""String_Node_Str"" + typeRef+ ""String_Node_Str"");
}
break;
}
 else if (answer == NO) {
if (DBG_CF) {
db(op2 + ""String_Node_Str"" + typeRef+ ""String_Node_Str"");
}
push(new IntConstantOperand(0));
break;
}
}
RegisterOperand t=gc.temps.makeTempInt();
if (classLoading) {
s=InstanceOf.create(INSTANCEOF_UNRESOLVED,t,makeTypeOperand(typeRef),op2);
}
 else {
TypeOperand typeOp=makeTypeOperand(typeRef.peekType());
if (isNonNull(op2)) {
s=InstanceOf.create(INSTANCEOF_NOTNULL,t,typeOp,op2,getGuard(op2));
}
 else {
s=InstanceOf.create(INSTANCEOF,t,typeOp,op2);
}
}
push(t.copyD2U());
if (classLoading) rectifyStateWithErrorHandler();
}
break;
case JBC_monitorenter:
{
Operand op0=pop();
clearCurrentGuard();
if (do_NullCheck(op0)) {
break;
}
if (VM.VerifyAssertions) VM._assert(op0.isRef());
if (gc.options.MONITOR_NOP) {
s=null;
}
 else {
s=MonitorOp.create(MONITORENTER,op0,getCurrentGuard());
}
}
break;
case JBC_monitorexit:
{
Operand op0=pop();
clearCurrentGuard();
if (do_NullCheck(op0)) {
break;
}
if (gc.options.MONITOR_NOP) {
s=null;
}
 else {
s=MonitorOp.create(MONITOREXIT,op0,getCurrentGuard());
}
rectifyStateWithExceptionHandler(VM_TypeReference.JavaLangIllegalMonitorStateException);
}
break;
case JBC_wide:
{
int widecode=bcodes.getWideOpcode();
int index=bcodes.getWideLocalNumber();
switch (widecode) {
case JBC_iload:
s=do_iload(index);
break;
case JBC_lload:
s=do_lload(index);
break;
case JBC_fload:
s=do_fload(index);
break;
case JBC_dload:
s=do_dload(index);
break;
case JBC_aload:
s=do_aload(index);
break;
case JBC_istore:
s=do_store(index,popInt());
break;
case JBC_lstore:
s=do_store(index,popLong());
break;
case JBC_fstore:
s=do_store(index,popFloat());
break;
case JBC_dstore:
s=do_store(index,popDouble());
break;
case JBC_astore:
s=do_astore(index);
break;
case JBC_iinc:
s=do_iinc(index,bcodes.getWideIncrement());
break;
case JBC_ret:
s=_retHelper(index);
break;
default :
OptimizingCompilerException.UNREACHABLE();
break;
}
}
break;
case JBC_multianewarray:
{
VM_TypeReference arrayType=bcodes.getTypeReference();
int dimensions=bcodes.getArrayDimension();
if (dimensions == 1) {
s=generateAnewarray(arrayType,null);
}
 else {
TypeOperand typeOp=makeTypeOperand(arrayType);
RegisterOperand result=gc.temps.makeTemp(arrayType);
markGuardlessNonNull(result);
result.setPreciseType();
VM_TypeReference innermostElementTypeRef=arrayType.getInnermostElementType();
VM_Type innermostElementType=innermostElementTypeRef.peekType();
if (innermostElementType != null && (innermostElementType.isInitialized() || innermostElementType.isInBootImage())) {
result.setExtant();
}
s=Multianewarray.create(NEWOBJMULTIARRAY,result,typeOp,dimensions);
for (int i=0; i < dimensions; i++) {
Multianewarray.setDimension(s,dimensions - i - 1,popInt());
}
push(result.copyD2U());
rectifyStateWithErrorHandler();
rectifyStateWithExceptionHandler(VM_TypeReference.JavaLangNegativeArraySizeException);
}
}
break;
case JBC_ifnull:
s=_refIfNullHelper(ConditionOperand.EQUAL());
break;
case JBC_ifnonnull:
s=_refIfNullHelper(ConditionOperand.NOT_EQUAL());
break;
case JBC_goto_w:
{
int offset=bcodes.getWideBranchOffset();
if (offset != 5) {
s=_gotoHelper(offset);
}
}
break;
case JBC_jsr_w:
s=_jsrHelper(bcodes.getWideBranchOffset());
break;
case JBC_impdep1:
{
if (VM.BuildForAdaptiveSystem) {
int pseudo_opcode=bcodes.nextPseudoInstruction();
switch (pseudo_opcode) {
case PSEUDO_LoadIntConst:
{
int value=bcodes.readIntConst();
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + value);
}
push(new IntConstantOperand(value));
param1=param2;
param2=value;
break;
}
case PSEUDO_LoadLongConst:
{
long value=bcodes.readLongConst();
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + value);
}
pushDual(new LongConstantOperand(value,Offset.zero()));
break;
}
case PSEUDO_LoadWordConst:
{
Address a=(VM.BuildFor32Addr) ? Address.fromIntSignExtend(bcodes.readIntConst()) : Address.fromLong(bcodes.readLongConst());
push(new AddressConstantOperand(a));
if (VM.TraceOnStackReplacement) {
VM.sysWrite(""String_Node_Str"");
}
VM.sysWrite(a);
VM.sysWriteln();
break;
}
case PSEUDO_LoadFloatConst:
{
int ibits=bcodes.readIntConst();
float value=Float.intBitsToFloat(ibits);
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + value);
}
push(new FloatConstantOperand(value,Offset.zero()));
break;
}
case PSEUDO_LoadDoubleConst:
{
long lbits=bcodes.readLongConst();
double value=VM_Magic.longBitsAsDouble(lbits);
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + lbits);
}
pushDual(new DoubleConstantOperand(value,Offset.zero()));
break;
}
case PSEUDO_LoadRetAddrConst:
{
int value=bcodes.readIntConst();
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + value);
}
push(new ReturnAddressOperand(value));
break;
}
case PSEUDO_InvokeStatic:
{
VM_Method meth=null;
int targetidx=bcodes.readIntConst();
switch (targetidx) {
case GETREFAT:
meth=VM_AosEntrypoints.osrGetRefAtMethod;
break;
case CLEANREFS:
meth=VM_AosEntrypoints.osrCleanRefsMethod;
break;
default :
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + targetidx);
}
OptimizingCompilerException.UNREACHABLE();
break;
}
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + meth + ""String_Node_Str"");
}
s=_callHelper(meth.getMemberRef().asMethodReference(),MethodOperand.STATIC(meth));
if (s == null) break;
Call.setAddress(s,new AddressConstantOperand(meth.getOffset()));
if (targetidx == GETREFAT) {
Object realObj=OSR_ObjectHolder.getRefAt(param1,param2);
if (VM.VerifyAssertions) VM._assert(realObj != null);
VM_TypeReference klass=VM_Magic.getObjectType(realObj).getTypeRef();
RegisterOperand op0=gc.temps.makeTemp(klass);
Call.setResult(s,op0);
pop();
push(op0.copyD2U(),klass);
}
rectifyStateWithExceptionHandlers();
break;
}
case PSEUDO_InvokeCompiledMethod:
{
int cmid=bcodes.readIntConst();
int origBCIdx=bcodes.readIntConst();
VM_CompiledMethod cm=VM_CompiledMethods.getCompiledMethod(cmid);
VM_Method meth=cm.getMethod();
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + meth + ""String_Node_Str"");
}
s=_callHelper(meth.getMemberRef().asMethodReference(),MethodOperand.COMPILED(meth,cm.getOsrJTOCoffset()));
if (s == null) break;
s.bcIndex=origBCIdx + bciAdjustment;
rectifyStateWithExceptionHandlers();
break;
}
case PSEUDO_ParamInitEnd:
{
break;
}
default :
if (VM.TraceOnStackReplacement) {
VM.sysWriteln(""String_Node_Str"" + pseudo_opcode);
}
OptimizingCompilerException.UNREACHABLE();
break;
}
break;
}
 else {
OptimizingCompilerException.UNREACHABLE();
}
}
default :
OptimizingCompilerException.UNREACHABLE();
break;
}
if (s != null && !currentBBLE.isSelfRegen()) {
appendInstruction(s);
}
if (VM.VerifyAssertions) VM._assert(bcodes.index() <= runoff);
if (!endOfBasicBlock && bcodes.index() == runoff) {
if (DBG_BB || DBG_SELECTED) {
db(""String_Node_Str"" + currentBBLE + ""String_Node_Str""+ runoff);
}
endOfBasicBlock=fallThrough=true;
}
if (endOfBasicBlock) {
if (currentBBLE.isSelfRegen()) {
currentBBLE.block.deleteOut();
if (DBG_CFG || DBG_SELECTED) {
db(""String_Node_Str"" + currentBBLE.block);
}
return;
}
if (fallThrough) {
if (VM.VerifyAssertions) VM._assert(bcodes.index() < bcodes.length());
currentBBLE.fallThrough=getOrCreateBlock(bcodes.index());
currentBBLE.block.insertOut(currentBBLE.fallThrough.block);
}
return;
}
}
}",0.9968373217620328
149848,"/** 
 * Clear this register from holding a known to exist object 
 */
public void clearExtant(){
  flags&=~EXTANT;
}","/** 
 * Clear this register from holding an extant value 
 */
public void clearExtant(){
  flags&=~EXTANT;
}",0.9017857142857144
149849,"/** 
 * Is this register known to contain an object? 
 */
public boolean isExtant(){
  return (flags & EXTANT) != 0;
}","/** 
 * Is this register known to contain either NULL or an object whose class was fully loaded before the current method was called? This fact is used to determine whether we can optimize away inline guards based on pre-existence based inlining.
 */
public boolean isExtant(){
  return (flags & EXTANT) != 0;
}",0.5501165501165501
149850,"/** 
 * Set this register as holding a known to exist object 
 */
public void setExtant(){
  flags|=EXTANT;
}","/** 
 * Set this register as holding an extant object (or NULL) (ie, an object whose class was fully loaded before the current method was called). This fact is used to determine whether we can optimize away inline guards based on pre-existence based inlining.
 */
public void setExtant(){
  flags|=EXTANT;
}",0.4711538461538461
149851,"private void checkReadAccess(Object obj) throws IllegalAccessException, IllegalArgumentException, ExceptionInInitializerError {
  VM_Class declaringClass=field.getDeclaringClass();
  if (!field.isStatic()) {
    if (obj == null) {
      throw new NullPointerException();
    }
    VM_Type objType=VM_ObjectModel.getObjectType(obj);
    if (objType != declaringClass && !VM_Runtime.isAssignableWith(declaringClass,objType)) {
      throw new IllegalArgumentException();
    }
  }
  if (!field.isPublic() && !f.isAccessible()) {
    VM_Class accessingClass=VM_Class.getClassFromStackFrame(2);
    JikesRVMSupport.checkAccess(field,accessingClass);
  }
  if (field.isStatic() && !declaringClass.isInitialized()) {
    try {
      VM_Runtime.initializeClassForDynamicLink(declaringClass);
    }
 catch (    Throwable e) {
      ExceptionInInitializerError ex=new ExceptionInInitializerError();
      ex.initCause(e);
      throw ex;
    }
  }
}","private void checkReadAccess(Object obj) throws IllegalAccessException, IllegalArgumentException, ExceptionInInitializerError {
  VM_Class declaringClass=field.getDeclaringClass();
  if (!field.isStatic()) {
    if (obj == null) {
      throw new NullPointerException();
    }
    VM_Type objType=VM_ObjectModel.getObjectType(obj);
    if (objType != declaringClass && !VM_Runtime.isAssignableWith(declaringClass,objType)) {
      throw new IllegalArgumentException();
    }
  }
  if (!field.isPublic() && !f.isAccessible()) {
    VM_Class accessingClass=VM_Class.getClassFromStackFrame(3);
    JikesRVMSupport.checkAccess(field,accessingClass);
  }
  if (field.isStatic() && !declaringClass.isInitialized()) {
    try {
      VM_Runtime.initializeClassForDynamicLink(declaringClass);
    }
 catch (    Throwable e) {
      ExceptionInInitializerError ex=new ExceptionInInitializerError();
      ex.initCause(e);
      throw ex;
    }
  }
}",0.998936170212766
149852,"private void checkWriteAccess(Object obj) throws IllegalAccessException, IllegalArgumentException, ExceptionInInitializerError {
  VM_Class declaringClass=field.getDeclaringClass();
  if (!field.isStatic()) {
    if (obj == null) {
      throw new NullPointerException();
    }
    VM_Type objType=VM_ObjectModel.getObjectType(obj);
    if (objType != declaringClass && !VM_Runtime.isAssignableWith(declaringClass,objType)) {
      throw new IllegalArgumentException();
    }
  }
  if (!field.isPublic() && !f.isAccessible()) {
    VM_Class accessingClass=VM_Class.getClassFromStackFrame(2);
    JikesRVMSupport.checkAccess(field,accessingClass);
  }
  if (field.isFinal())   throw new IllegalAccessException();
  if (field.isStatic() && !declaringClass.isInitialized()) {
    try {
      VM_Runtime.initializeClassForDynamicLink(declaringClass);
    }
 catch (    Throwable e) {
      ExceptionInInitializerError ex=new ExceptionInInitializerError();
      ex.initCause(e);
      throw ex;
    }
  }
}","private void checkWriteAccess(Object obj) throws IllegalAccessException, IllegalArgumentException, ExceptionInInitializerError {
  VM_Class declaringClass=field.getDeclaringClass();
  if (!field.isStatic()) {
    if (obj == null) {
      throw new NullPointerException();
    }
    VM_Type objType=VM_ObjectModel.getObjectType(obj);
    if (objType != declaringClass && !VM_Runtime.isAssignableWith(declaringClass,objType)) {
      throw new IllegalArgumentException();
    }
  }
  if (!field.isPublic() && !f.isAccessible()) {
    VM_Class accessingClass=VM_Class.getClassFromStackFrame(3);
    JikesRVMSupport.checkAccess(field,accessingClass);
  }
  if (field.isFinal())   throw new IllegalAccessException();
  if (field.isStatic() && !declaringClass.isInitialized()) {
    try {
      VM_Runtime.initializeClassForDynamicLink(declaringClass);
    }
 catch (    Throwable e) {
      ExceptionInInitializerError ex=new ExceptionInInitializerError();
      ex.initCause(e);
      throw ex;
    }
  }
}",0.999001996007984
149853,"private static DefUseEffect call(boolean HIR,AbstractRegisterPool regpool,Instruction s){
  if (CF_FIELDS) {
    MethodOperand methOp=Call.getMethod(s);
    if (methOp == null) {
      return DefUseEffect.UNCHANGED;
    }
    if (methOp.isVirtual() && !methOp.hasPreciseTarget()) {
      Operand calleeThis=Call.getParam(s,0);
      if (calleeThis.isNullConstant()) {
        Trap.mutate(s,TRAP,NullCheck.getClearGuardResult(s),TrapCodeOperand.NullPtr());
        return DefUseEffect.TRAP_REDUCED;
      }
 else       if (calleeThis.isConstant() || calleeThis.asRegister().isPreciseType()) {
        VM_TypeReference calleeClass=calleeThis.getType();
        if (calleeClass.isResolved()) {
          methOp.refine(calleeClass.peekType());
          return DefUseEffect.UNCHANGED;
        }
      }
    }
 else     if (methOp.isStatic() && methOp.hasPreciseTarget() && HIR) {
      VM_Method containingMethod=s.position.getMethod();
      VM_Method method=methOp.getTarget();
      if (method == VM_Entrypoints.java_lang_Class_forName) {
        methOp=MethodOperand.STATIC(VM_Entrypoints.java_lang_Class_forName_withLoader.getMemberRef().asMethodReference(),VM_Entrypoints.java_lang_Class_forName_withLoader);
        Call.mutate3(s,CALL,Call.getResult(s),new AddressConstantOperand(VM_Entrypoints.java_lang_Class_forName_withLoader.getOffset()),methOp,Call.getGuard(s),Call.getParam(s,0),new IntConstantOperand(1),new ObjectConstantOperand(containingMethod.getDeclaringClass().getClassLoader(),Offset.zero()));
        return DefUseEffect.REDUCED;
      }
    }
    if (methOp.hasPreciseTarget() && methOp.getTarget().isPure()) {
      VM_Method method=methOp.getTarget();
      int n=Call.getNumberOfParams(s);
      for (int i=0; i < n; i++) {
        if (!Call.getParam(s,i).isConstant()) {
          return DefUseEffect.UNCHANGED;
        }
      }
      Object thisArg=null;
      VM_TypeReference[] paramTypes=method.getParameterTypes();
      Object[] otherArgs;
      Object result=null;
      if (methOp.isVirtual()) {
        thisArg=boxConstantOperand((ConstantOperand)Call.getParam(s,0),method.getDeclaringClass().getTypeRef());
        n--;
        otherArgs=new Object[n];
        for (int i=0; i < n; i++) {
          otherArgs[i]=boxConstantOperand((ConstantOperand)Call.getParam(s,i + 1),paramTypes[i]);
        }
      }
 else {
        otherArgs=new Object[n];
        for (int i=0; i < n; i++) {
          otherArgs[i]=boxConstantOperand((ConstantOperand)Call.getParam(s,i),paramTypes[i]);
        }
      }
      Throwable t=null;
      Method m=null;
      try {
        if (VM.runningVM) {
          result=VM_Reflection.invoke(method,thisArg,otherArgs,!methOp.isVirtual());
        }
 else {
          Class<?>[] argTypes=new Class<?>[n];
          for (int i=0; i < n; i++) {
            argTypes[i]=Call.getParam(s,i).getType().resolve().getClassForType();
          }
          m=method.getDeclaringClass().getClassForType().getDeclaredMethod(method.getName().toString(),argTypes);
          result=m.invoke(thisArg,otherArgs);
        }
      }
 catch (      Throwable e) {
        t=e;
      }
      if (t != null) {
        return DefUseEffect.UNCHANGED;
      }
      if (result == null)       throw new OptimizingCompilerException(""String_Node_Str"" + m + ""String_Node_Str""+ method+ ""String_Node_Str"");
      if (method.getReturnType().isVoidType()) {
        Empty.mutate(s,NOP);
        return DefUseEffect.REDUCED;
      }
 else {
        Operator moveOp=IRTools.getMoveOp(method.getReturnType());
        Move.mutate(s,moveOp,Call.getClearResult(s),boxConstantObjectAsOperand(result,method.getReturnType()));
        return DefUseEffect.MOVE_FOLDED;
      }
    }
  }
  return DefUseEffect.UNCHANGED;
}","private static DefUseEffect call(boolean HIR,AbstractRegisterPool regpool,Instruction s){
  if (CF_FIELDS) {
    MethodOperand methOp=Call.getMethod(s);
    if (methOp == null) {
      return DefUseEffect.UNCHANGED;
    }
    if (methOp.isVirtual() && !methOp.hasPreciseTarget()) {
      Operand calleeThis=Call.getParam(s,0);
      if (calleeThis.isNullConstant()) {
        Trap.mutate(s,TRAP,NullCheck.getClearGuardResult(s),TrapCodeOperand.NullPtr());
        return DefUseEffect.TRAP_REDUCED;
      }
 else       if (calleeThis.isConstant() || calleeThis.asRegister().isPreciseType()) {
        VM_TypeReference calleeClass=calleeThis.getType();
        if (calleeClass.isResolved()) {
          methOp.refine(calleeClass.peekType());
          return DefUseEffect.UNCHANGED;
        }
      }
    }
 else     if (methOp.isStatic() && methOp.hasPreciseTarget() && HIR) {
      VM_Method containingMethod=s.position.getMethod();
      VM_Method method=methOp.getTarget();
      if (method == VM_Entrypoints.java_lang_Class_forName) {
        methOp=MethodOperand.STATIC(VM_Entrypoints.java_lang_Class_forName_withLoader.getMemberRef().asMethodReference(),VM_Entrypoints.java_lang_Class_forName_withLoader);
        Call.mutate3(s,CALL,Call.getResult(s),new AddressConstantOperand(VM_Entrypoints.java_lang_Class_forName_withLoader.getOffset()),methOp,Call.getGuard(s),Call.getParam(s,0),new IntConstantOperand(1),new ObjectConstantOperand(containingMethod.getDeclaringClass().getClassLoader(),Offset.zero()));
        return DefUseEffect.REDUCED;
      }
    }
    if (methOp.hasPreciseTarget() && methOp.getTarget().isPure()) {
      VM_Method method=methOp.getTarget();
      int n=Call.getNumberOfParams(s);
      for (int i=0; i < n; i++) {
        if (!Call.getParam(s,i).isConstant()) {
          return DefUseEffect.UNCHANGED;
        }
      }
      Object thisArg=null;
      VM_TypeReference[] paramTypes=method.getParameterTypes();
      Object[] otherArgs;
      Object result=null;
      if (!methOp.isStatic()) {
        thisArg=boxConstantOperand((ConstantOperand)Call.getParam(s,0),method.getDeclaringClass().getTypeRef());
        n--;
        otherArgs=new Object[n];
        for (int i=0; i < n; i++) {
          otherArgs[i]=boxConstantOperand((ConstantOperand)Call.getParam(s,i + 1),paramTypes[i]);
        }
      }
 else {
        otherArgs=new Object[n];
        for (int i=0; i < n; i++) {
          otherArgs[i]=boxConstantOperand((ConstantOperand)Call.getParam(s,i),paramTypes[i]);
        }
      }
      Throwable t=null;
      Method m=null;
      try {
        if (VM.runningVM) {
          result=VM_Reflection.invoke(method,thisArg,otherArgs,!methOp.isVirtual());
        }
 else {
          Class<?>[] argTypes=new Class<?>[n];
          for (int i=0; i < n; i++) {
            argTypes[i]=Call.getParam(s,i).getType().resolve().getClassForType();
          }
          m=method.getDeclaringClass().getClassForType().getDeclaredMethod(method.getName().toString(),argTypes);
          result=m.invoke(thisArg,otherArgs);
        }
      }
 catch (      Throwable e) {
        t=e;
      }
      if (t != null) {
        return DefUseEffect.UNCHANGED;
      }
      if (result == null)       throw new OptimizingCompilerException(""String_Node_Str"" + m + ""String_Node_Str""+ method+ ""String_Node_Str"");
      if (method.getReturnType().isVoidType()) {
        Empty.mutate(s,NOP);
        return DefUseEffect.REDUCED;
      }
 else {
        Operator moveOp=IRTools.getMoveOp(method.getReturnType());
        Move.mutate(s,moveOp,Call.getClearResult(s),boxConstantObjectAsOperand(result,method.getReturnType()));
        return DefUseEffect.MOVE_FOLDED;
      }
    }
  }
  return DefUseEffect.UNCHANGED;
}",0.9957207809574752
149854,"private static DefUseEffect instanceOf(Instruction s){
  Operand ref=InstanceOf.getRef(s);
  if (ref.isNullConstant()) {
    Move.mutate(s,INT_MOVE,InstanceOf.getClearResult(s),IC(0));
    return DefUseEffect.MOVE_FOLDED;
  }
 else   if (ref.isConstant()) {
    s.operator=INSTANCEOF_NOTNULL;
    return instanceOfNotNull(s);
  }
 else {
    VM_TypeReference lhsType=InstanceOf.getType(s).getTypeRef();
    VM_TypeReference rhsType=ref.getType();
    byte ans=ClassLoaderProxy.includesType(lhsType,rhsType);
    if (ans == Constants.NO) {
      VM_Type rType=rhsType.peekType();
      if (rType != null && rType.isClassType() && rType.asClass().isFinal()) {
        Move.mutate(s,INT_MOVE,InstanceOf.getClearResult(s),IC(0));
        return DefUseEffect.MOVE_FOLDED;
      }
 else {
        return DefUseEffect.UNCHANGED;
      }
    }
 else {
      return DefUseEffect.UNCHANGED;
    }
  }
}","private static DefUseEffect instanceOf(Instruction s){
  Operand ref=InstanceOf.getRef(s);
  if (ref.isNullConstant()) {
    Move.mutate(s,INT_MOVE,InstanceOf.getClearResult(s),IC(0));
    return DefUseEffect.MOVE_FOLDED;
  }
 else   if (ref.isConstant() || (ref.isRegister() && ref.asRegister().isExtant())) {
    s.operator=INSTANCEOF_NOTNULL;
    return instanceOfNotNull(s);
  }
 else {
    VM_TypeReference lhsType=InstanceOf.getType(s).getTypeRef();
    VM_TypeReference rhsType=ref.getType();
    byte ans=ClassLoaderProxy.includesType(lhsType,rhsType);
    if (ans == Constants.NO) {
      VM_Type rType=rhsType.peekType();
      if (rType != null && rType.isClassType() && rType.asClass().isFinal()) {
        Move.mutate(s,INT_MOVE,InstanceOf.getClearResult(s),IC(0));
        return DefUseEffect.MOVE_FOLDED;
      }
 else {
        return DefUseEffect.UNCHANGED;
      }
    }
 else {
      return DefUseEffect.UNCHANGED;
    }
  }
}",0.9711486118671748
149855,"Object invoke(Object receiver,Object[] args) throws IllegalAccessException, IllegalArgumentException, ExceptionInInitializerError, InvocationTargetException {
  VM_Method method=this.method;
  VM_Class declaringClass=method.getDeclaringClass();
  if (!method.isStatic()) {
    if (receiver == null)     throw new NullPointerException();
    receiver=JikesRVMSupport.makeArgumentCompatible(declaringClass,receiver);
  }
  VM_TypeReference[] parameterTypes=method.getParameterTypes();
  if (args == null) {
    if (parameterTypes.length != 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else   if (args.length != parameterTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (int i=0, n=parameterTypes.length; i < n; ++i) {
    args[i]=JikesRVMSupport.makeArgumentCompatible(parameterTypes[i].resolve(),args[i]);
  }
  if (!method.isPublic() && !m.isAccessible()) {
    VM_Class accessingClass=VM_Class.getClassFromStackFrame(1);
    JikesRVMSupport.checkAccess(method,accessingClass);
  }
  if (!method.isStatic()) {
    VM_Class C=VM_Magic.getObjectType(receiver).asClass();
    method=C.findVirtualMethod(method.getName(),method.getDescriptor());
  }
  if (method.isStatic() && !declaringClass.isInitialized()) {
    try {
      VM_Runtime.initializeClassForDynamicLink(declaringClass);
    }
 catch (    Throwable e) {
      ExceptionInInitializerError ex=new ExceptionInInitializerError();
      ex.initCause(e);
      throw ex;
    }
  }
  try {
    return VM_Reflection.invoke(method,receiver,args);
  }
 catch (  Throwable t) {
    throw new InvocationTargetException(t,""String_Node_Str"" + method + ""String_Node_Str""+ ""String_Node_Str""+ receiver+ ""String_Node_Str""+ ""String_Node_Str""+ t+ ""String_Node_Str"");
  }
}","Object invoke(Object receiver,Object[] args) throws IllegalAccessException, IllegalArgumentException, ExceptionInInitializerError, InvocationTargetException {
  VM_Method method=this.method;
  VM_Class declaringClass=method.getDeclaringClass();
  if (!method.isStatic()) {
    if (receiver == null)     throw new NullPointerException();
    receiver=JikesRVMSupport.makeArgumentCompatible(declaringClass,receiver);
  }
  VM_TypeReference[] parameterTypes=method.getParameterTypes();
  if (args == null) {
    if (parameterTypes.length != 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else   if (args.length != parameterTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (int i=0, n=parameterTypes.length; i < n; ++i) {
    args[i]=JikesRVMSupport.makeArgumentCompatible(parameterTypes[i].resolve(),args[i]);
  }
  if (!method.isPublic() && !m.isAccessible()) {
    VM_Class accessingClass=VM_Class.getClassFromStackFrame(2);
    JikesRVMSupport.checkAccess(method,accessingClass);
  }
  if (!method.isStatic()) {
    VM_Class C=VM_Magic.getObjectType(receiver).asClass();
    method=C.findVirtualMethod(method.getName(),method.getDescriptor());
  }
  if (method.isStatic() && !declaringClass.isInitialized()) {
    try {
      VM_Runtime.initializeClassForDynamicLink(declaringClass);
    }
 catch (    Throwable e) {
      ExceptionInInitializerError ex=new ExceptionInInitializerError();
      ex.initCause(e);
      throw ex;
    }
  }
  try {
    return VM_Reflection.invoke(method,receiver,args);
  }
 catch (  Throwable t) {
    throw new InvocationTargetException(t,""String_Node_Str"" + method + ""String_Node_Str""+ ""String_Node_Str""+ receiver+ ""String_Node_Str""+ ""String_Node_Str""+ t+ ""String_Node_Str"");
  }
}",0.9994385176866928
149856,"Object construct(Object[] args) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
  if (!constructor.isPublic() && !cons.isAccessible()) {
    VM_Class accessingClass=VM_Class.getClassFromStackFrame(1);
    JikesRVMSupport.checkAccess(constructor,accessingClass);
  }
  VM_TypeReference[] parameterTypes=constructor.getParameterTypes();
  if (args == null) {
    if (parameterTypes.length != 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    if (args.length != parameterTypes.length) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    for (int i=0; i < parameterTypes.length; i++) {
      args[i]=JikesRVMSupport.makeArgumentCompatible(parameterTypes[i].resolve(),args[i]);
    }
  }
  VM_Class cls=constructor.getDeclaringClass();
  if (cls.isAbstract()) {
    throw new InstantiationException(""String_Node_Str"");
  }
  if (!cls.isInitialized()) {
    try {
      VM_Runtime.initializeClassForDynamicLink(cls);
    }
 catch (    Throwable e) {
      ExceptionInInitializerError ex=new ExceptionInInitializerError();
      ex.initCause(e);
      throw ex;
    }
  }
  Object obj=VM_Runtime.resolvedNewScalar(cls);
  try {
    VM_Reflection.invoke(constructor,obj,args);
  }
 catch (  Throwable e) {
    throw new InvocationTargetException(e);
  }
  return obj;
}","Object construct(Object[] args) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
  if (!constructor.isPublic() && !cons.isAccessible()) {
    VM_Class accessingClass=VM_Class.getClassFromStackFrame(2);
    JikesRVMSupport.checkAccess(constructor,accessingClass);
  }
  VM_TypeReference[] parameterTypes=constructor.getParameterTypes();
  if (args == null) {
    if (parameterTypes.length != 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    if (args.length != parameterTypes.length) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    for (int i=0; i < parameterTypes.length; i++) {
      args[i]=JikesRVMSupport.makeArgumentCompatible(parameterTypes[i].resolve(),args[i]);
    }
  }
  VM_Class cls=constructor.getDeclaringClass();
  if (cls.isAbstract()) {
    throw new InstantiationException(""String_Node_Str"");
  }
  if (!cls.isInitialized()) {
    try {
      VM_Runtime.initializeClassForDynamicLink(cls);
    }
 catch (    Throwable e) {
      ExceptionInInitializerError ex=new ExceptionInInitializerError();
      ex.initCause(e);
      throw ex;
    }
  }
  Object obj=VM_Runtime.resolvedNewScalar(cls);
  try {
    VM_Reflection.invoke(constructor,obj,args);
  }
 catch (  Throwable e) {
    throw new InvocationTargetException(e);
  }
  return obj;
}",0.999275887038378
149857,"/** 
 * Return true iff this member reference refers to a method which is declared as part of an abstract class but actually is an interface method, known formally as a ""miranda method"". This method is necessary to handle the special case where an invokevirtual is defined on an abstract class, where the method invocation points to a method inherited from an interface.
 * @return boolean    true iff this member method reference is a miranda method
 */
public boolean isMiranda(){
  VM_Class declaringClass=(VM_Class)type.peekType();
  if (declaringClass == null) {
    return false;
  }
  if (!declaringClass.isResolved()) {
    declaringClass.resolve();
  }
  for (VM_Class c=declaringClass; c != null; c=c.getSuperClass()) {
    if (c.findDeclaredMethod(name,descriptor) != null) {
      return false;
    }
    for (    VM_Class intf : c.getDeclaredInterfaces()) {
      if (searchInterfaceMethods(intf) != null) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Return true iff this member reference refers to a method which is declared as part of an abstract class but actually is an interface method, known formally as a ""miranda method"". This method is necessary to handle the special case where an invokevirtual is defined on an abstract class, where the method invocation points to a method inherited from an interface.
 * @return boolean    true iff this member method reference is a miranda method
 */
public boolean isMiranda(){
  VM_Class declaringClass=(VM_Class)type.peekType();
  if (declaringClass == null) {
    return false;
  }
  if (!declaringClass.isResolved()) {
    declaringClass.resolve();
  }
  for (VM_Class c=declaringClass; c != null; c=c.getSuperClass()) {
    if (c.findDeclaredMethod(name,descriptor) != null) {
      return false;
    }
  }
  for (VM_Class c=declaringClass; c != null; c=c.getSuperClass()) {
    for (    VM_Class intf : c.getDeclaredInterfaces()) {
      if (searchInterfaceMethods(intf) != null) {
        return true;
      }
    }
  }
  return false;
}",0.9466929911154984
149858,"public Constructor<? super T> getEnclosingConstructor(){
  throw new VM_UnimplementedError();
}","public Constructor<?> getEnclosingConstructor(){
  throw new VM_UnimplementedError();
}",0.956043956043956
149859,"public Class<?> getSuperclass(){
  if (type.isArrayType()) {
    return Object.class;
  }
 else   if (type.isClassType()) {
    VM_Class myClass=type.asClass();
    if (myClass.isInterface())     return null;
    VM_Type supe=myClass.getSuperClass();
    return supe == null ? null : supe.getClassForType();
  }
 else {
    return null;
  }
}","@SuppressWarnings(""String_Node_Str"") public Class<? super T> getSuperclass(){
  if (type.isArrayType()) {
    return Object.class;
  }
 else   if (type.isClassType()) {
    VM_Class myClass=type.asClass();
    if (myClass.isInterface())     return null;
    VM_Type supe=myClass.getSuperClass();
    return supe == null ? null : (Class<? super T>)supe.getClassForType();
  }
 else {
    return null;
  }
}",0.9156626506024096
149860,"/** 
 * Return the stack trace 
 */
StackTraceElement[] getStackTrace(Throwable parent){
  if (stackTrace == null) {
    return zeroLengthStackTrace;
  }
 else   if (VM_Scheduler.getCurrentThread().getThreadForStackTrace().isGCThread()) {
    VM.sysWriteln(""String_Node_Str"");
    VM_Scheduler.dumpStack();
    return zeroLengthStackTrace;
  }
  VM_StackTrace.Element[] vmElements;
  try {
    vmElements=stackTrace.getStackTrace(parent);
  }
 catch (  Throwable t) {
    VM.sysWriteln(""String_Node_Str"");
    VM_Scheduler.dumpStack();
    return zeroLengthStackTrace;
  }
  if (vmElements == null) {
    VM.sysWriteln(""String_Node_Str"");
    VM_Scheduler.dumpStack();
    return zeroLengthStackTrace;
  }
  if (VM.fullyBooted) {
    try {
      StackTraceElement[] elements=new StackTraceElement[vmElements.length];
      for (int i=0; i < vmElements.length; i++) {
        VM_StackTrace.Element vmElement=vmElements[i];
        String fileName=vmElement.getFileName();
        int lineNumber=vmElement.getLineNumber();
        String className=vmElement.getClassName();
        String methodName=vmElement.getMethodName();
        boolean isNative=vmElement.isNative();
        elements[i]=new StackTraceElement(fileName,lineNumber,className,methodName,isNative);
      }
      return elements;
    }
 catch (    Throwable t) {
      VM.sysWriteln(""String_Node_Str"");
    }
  }
 else {
    VM.sysWriteln(""String_Node_Str"");
  }
  for (  VM_StackTrace.Element vmElement : vmElements) {
    if (vmElement == null) {
      VM.sysWriteln(""String_Node_Str"");
      VM_Scheduler.dumpStack();
      return zeroLengthStackTrace;
    }
    String fileName=vmElement.getFileName();
    int lineNumber=vmElement.getLineNumber();
    String className=vmElement.getClassName();
    String methodName=vmElement.getMethodName();
    VM.sysWrite(""String_Node_Str"");
    if (className != null) {
      VM.sysWrite(className);
      VM.sysWrite(""String_Node_Str"");
    }
    VM.sysWrite(methodName);
    if (fileName != null) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(fileName);
      if (lineNumber > 0) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(vmElement.getLineNumber());
      }
      VM.sysWrite(""String_Node_Str"");
    }
    VM.sysWriteln();
  }
  return zeroLengthStackTrace;
}","/** 
 * Return the stack trace 
 */
StackTraceElement[] getStackTrace(Throwable parent){
  if (stackTrace == null) {
    return zeroLengthStackTrace;
  }
 else   if (VM_Scheduler.getCurrentThread().getThreadForStackTrace().isGCThread()) {
    VM.sysWriteln(""String_Node_Str"");
    VM_Scheduler.dumpStack();
    return zeroLengthStackTrace;
  }
  VM_StackTrace.Element[] vmElements;
  try {
    vmElements=stackTrace.getStackTrace(parent);
  }
 catch (  Throwable t) {
    VM.sysWriteln(""String_Node_Str"");
    VM_Scheduler.dumpStack();
    return zeroLengthStackTrace;
  }
  if (vmElements == null) {
    VM.sysWriteln(""String_Node_Str"");
    VM_Scheduler.dumpStack();
    return zeroLengthStackTrace;
  }
  if (VM.fullyBooted) {
    try {
      StackTraceElement[] elements=new StackTraceElement[vmElements.length];
      for (int i=0; i < vmElements.length; i++) {
        VM_StackTrace.Element vmElement=vmElements[i];
        String fileName=vmElement.getFileName();
        int lineNumber=vmElement.getLineNumber();
        String className=vmElement.getClassName();
        String methodName=vmElement.getMethodName();
        boolean isNative=vmElement.isNative();
        elements[i]=new StackTraceElement(fileName,lineNumber,className,methodName,isNative);
      }
      return elements;
    }
 catch (    Throwable t) {
      VM.sysWriteln(""String_Node_Str"");
    }
  }
 else {
    VM.sysWriteln(""String_Node_Str"");
  }
  for (  VM_StackTrace.Element vmElement : vmElements) {
    if (vmElement == null) {
      VM.sysWriteln(""String_Node_Str"");
      VM_Scheduler.dumpStack();
      return zeroLengthStackTrace;
    }
    String fileName=vmElement.getFileName();
    int lineNumber=vmElement.getLineNumber();
    String className=vmElement.getClassName();
    String methodName=vmElement.getMethodName();
    VM.sysWrite(""String_Node_Str"");
    if (className != ""String_Node_Str"") {
      VM.sysWrite(className);
      VM.sysWrite(""String_Node_Str"");
    }
    VM.sysWrite(methodName);
    if (fileName != null) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(fileName);
      if (lineNumber > 0) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(vmElement.getLineNumber());
      }
      VM.sysWrite(""String_Node_Str"");
    }
    VM.sysWriteln();
  }
  return zeroLengthStackTrace;
}",0.995455529106254
149861,"/** 
 * Get the compiled method at element
 */
private VM_CompiledMethod getCompiledMethod(int element){
  if ((element > 0) && (element < compiledMethods.length)) {
    int mid=compiledMethods[element];
    if (mid != INVISIBLE_METHOD_ID) {
      return VM_CompiledMethods.getCompiledMethod(element);
    }
  }
  return null;
}","/** 
 * Get the compiled method at element
 */
private VM_CompiledMethod getCompiledMethod(int element){
  if ((element > 0) && (element < compiledMethods.length)) {
    int mid=compiledMethods[element];
    if (mid != INVISIBLE_METHOD_ID) {
      return VM_CompiledMethods.getCompiledMethod(mid);
    }
  }
  return null;
}",0.9846625766871164
149862,"/** 
 * Get class name 
 */
public String getClassName(){
  if (isInvisible || isTrap) {
    return null;
  }
 else {
    return method.getDeclaringClass().toString();
  }
}","/** 
 * Get class name 
 */
public String getClassName(){
  if (isInvisible || isTrap) {
    return ""String_Node_Str"";
  }
 else {
    return method.getDeclaringClass().toString();
  }
}",0.947075208913649
149863,"/** 
 * Write method address map for use with dbx debugger.
 * @param fileName name of file to write the map to
 */
private static void writeAddressMap(String mapFileName) throws IOException {
  if (verbose >= 1)   say(""String_Node_Str"",mapFileName);
  VM_Statics.bootImageReportGeneration(staticsJunk);
  FileOutputStream fos=new FileOutputStream(mapFileName);
  BufferedOutputStream bos=new BufferedOutputStream(fos,128);
  PrintStream out=new PrintStream(bos,false);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + Integer.toHexString(BOOT_IMAGE_DATA_START.toInt()) + ""String_Node_Str""+ Integer.toHexString(BOOT_IMAGE_DATA_START.toInt() + bootImage.getDataSize()));
  out.println(""String_Node_Str"" + Integer.toHexString(BOOT_IMAGE_CODE_START.toInt()) + ""String_Node_Str""+ Integer.toHexString(BOOT_IMAGE_CODE_START.toInt() + bootImage.getCodeSize()));
  out.println(""String_Node_Str"" + Integer.toHexString(BOOT_IMAGE_RMAP_START.toInt()) + ""String_Node_Str""+ Integer.toHexString(BOOT_IMAGE_RMAP_START.toInt() + bootImage.getRMapSize()));
  out.println();
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  String pad=""String_Node_Str"";
  for (int jtocSlot=VM_Statics.getLowestInUseSlot(); jtocSlot < VM_Statics.middleOfTable; jtocSlot++) {
    Offset jtocOff=VM_Statics.slotAsOffset(jtocSlot);
    String category;
    String contents;
    String details;
    VM_Field field=getRvmStaticField(jtocOff);
    VM_Field field2=getRvmStaticField(jtocOff.plus(4));
    boolean couldBeLongLiteral=VM_Statics.isLongSizeLiteral(jtocSlot);
    boolean couldBeIntLiteral=VM_Statics.isIntSizeLiteral(jtocSlot);
    if (couldBeLongLiteral && ((field == null) || (field2 == null))) {
      if ((field == null) && (field2 == null)) {
        category=""String_Node_Str"";
        long lval=VM_Statics.getSlotContentsAsLong(jtocOff);
        contents=VM.intAsHexString((int)(lval >> 32)) + VM.intAsHexString((int)(lval & 0xffffffffL)).substring(2);
        details=lval + ""String_Node_Str"";
      }
 else       if ((field == null) && (field2 != null)) {
        category=""String_Node_Str"";
        long lval=VM_Statics.getSlotContentsAsLong(jtocOff);
        contents=VM.intAsHexString((int)(lval >> 32)) + VM.intAsHexString((int)(lval & 0xffffffffL)).substring(2);
        details=lval + ""String_Node_Str"" + field2.toString();
      }
 else       if ((field != null) && (field2 == null)) {
        category=""String_Node_Str"";
        long lval=VM_Statics.getSlotContentsAsLong(jtocOff);
        contents=VM.intAsHexString((int)(lval >> 32)) + VM.intAsHexString((int)(lval & 0xffffffffL)).substring(2);
        details=lval + ""String_Node_Str"" + field.toString();
      }
 else {
        throw new Error(""String_Node_Str"");
      }
      jtocSlot++;
    }
 else     if (couldBeIntLiteral) {
      if (field != null) {
        category=""String_Node_Str"";
        int ival=VM_Statics.getSlotContentsAsInt(jtocOff);
        contents=VM.intAsHexString(ival) + pad;
        details=Integer.toString(ival) + ""String_Node_Str"" + field.toString();
      }
 else {
        category=""String_Node_Str"";
        int ival=VM_Statics.getSlotContentsAsInt(jtocOff);
        contents=VM.intAsHexString(ival) + pad;
        details=Integer.toString(ival);
      }
    }
 else {
      if (field != null) {
        category=""String_Node_Str"";
        details=field.toString();
        VM_TypeReference type=field.getType();
        if (type.isIntLikeType()) {
          int ival=VM_Statics.getSlotContentsAsInt(jtocOff);
          contents=VM.intAsHexString(ival) + pad;
        }
 else         if (type.isLongType()) {
          long lval=VM_Statics.getSlotContentsAsLong(jtocOff);
          contents=VM.intAsHexString((int)(lval >> 32)) + VM.intAsHexString((int)(lval & 0xffffffffL)).substring(2);
          jtocSlot++;
        }
 else         if (type.isFloatType()) {
          int ival=VM_Statics.getSlotContentsAsInt(jtocOff);
          contents=Float.toString(Float.intBitsToFloat(ival)) + pad;
        }
 else         if (type.isDoubleType()) {
          long lval=VM_Statics.getSlotContentsAsLong(jtocOff);
          contents=Double.toString(Double.longBitsToDouble(lval)) + pad;
          jtocSlot++;
        }
 else         if (type.isWordType()) {
          if (VM.BuildFor32Addr) {
            int ival=VM_Statics.getSlotContentsAsInt(jtocOff);
            contents=VM.intAsHexString(ival) + pad;
          }
 else {
            long lval=VM_Statics.getSlotContentsAsLong(jtocOff);
            contents=VM.intAsHexString((int)(lval >> 32)) + VM.intAsHexString((int)(lval & 0xffffffffL)).substring(2);
            jtocSlot++;
          }
        }
 else {
          int ival=VM_Statics.getSlotContentsAsInt(jtocOff);
          category=""String_Node_Str"";
          details=""String_Node_Str"" + field.toString() + ""String_Node_Str"";
          contents=VM.intAsHexString(ival) + pad;
        }
      }
 else {
        int ival=VM_Statics.getSlotContentsAsInt(jtocOff);
        category=""String_Node_Str"";
        details=""String_Node_Str"";
        contents=VM.intAsHexString(ival) + pad;
      }
    }
    out.println((jtocSlot + ""String_Node_Str"").substring(0,6) + VM.addressAsHexString(jtocOff.toWord().toAddress()) + ""String_Node_Str""+ category+ ""String_Node_Str""+ contents+ ""String_Node_Str""+ details);
  }
  for (int jtocSlot=VM_Statics.middleOfTable, n=VM_Statics.getHighestInUseSlot(); jtocSlot <= n; jtocSlot+=VM_Statics.getReferenceSlotSize()) {
    Offset jtocOff=VM_Statics.slotAsOffset(jtocSlot);
    Object obj=BootImageMap.getObject(getIVal(jtocOff));
    String category;
    String details;
    String contents=VM.addressAsHexString(getReferenceAddr(jtocOff,false)) + pad;
    VM_Field field=getRvmStaticField(jtocOff);
    if (VM_Statics.isReferenceLiteral(jtocSlot)) {
      if (field != null) {
        category=""String_Node_Str"";
      }
 else {
        category=""String_Node_Str"";
      }
      if (obj == null) {
        details=""String_Node_Str"";
      }
 else       if (obj instanceof String) {
        details=""String_Node_Str"" + obj + ""String_Node_Str"";
      }
 else       if (obj instanceof Class) {
        details=""String_Node_Str"" + obj;
      }
 else       if (obj instanceof VM_TIB) {
        category=""String_Node_Str"";
        VM_Type type=VM_Statics.findTypeOfTIBSlot(jtocOff);
        details=(type == null) ? ""String_Node_Str"" : type.toString();
      }
 else {
        details=""String_Node_Str"" + obj.getClass();
      }
      if (field != null) {
        details+=""String_Node_Str"" + field.toString();
      }
    }
 else {
      if (field != null) {
        category=""String_Node_Str"";
        details=field.toString();
      }
 else {
        VM_CompiledMethod m=findMethodOfCode(obj);
        if (m != null) {
          category=""String_Node_Str"";
          details=m.getMethod().toString();
        }
 else {
          category=""String_Node_Str"";
          details=""String_Node_Str"";
        }
      }
    }
    out.println((jtocSlot + ""String_Node_Str"").substring(0,6) + VM.addressAsHexString(jtocOff.toWord().toAddress()) + ""String_Node_Str""+ category+ ""String_Node_Str""+ contents+ ""String_Node_Str""+ details);
  }
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  VM_CompiledMethod[] compiledMethods=VM_CompiledMethods.getCompiledMethods();
  for (int i=0; i < VM_CompiledMethods.numCompiledMethods(); ++i) {
    VM_CompiledMethod compiledMethod=compiledMethods[i];
    if (compiledMethod != null) {
      VM_Method m=compiledMethod.getMethod();
      if (m != null && compiledMethod.isCompiled()) {
        VM_CodeArray instructions=compiledMethod.getEntryCodeArray();
        Address code=BootImageMap.getImageAddress(instructions.getBacking(),true);
        out.println(""String_Node_Str"" + VM.addressAsHexString(code) + ""String_Node_Str""+ compiledMethod.getMethod());
      }
    }
  }
  if (false) {
    out.println();
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println();
    SortedSet<BootImageMap.Entry> set=new TreeSet<BootImageMap.Entry>(new Comparator<BootImageMap.Entry>(){
      public int compare(      BootImageMap.Entry a,      BootImageMap.Entry b){
        return Integer.valueOf(a.imageAddress.toInt()).compareTo(b.imageAddress.toInt());
      }
      public boolean equals(){
        throw new Error(""String_Node_Str"");
      }
    }
);
    for (Enumeration<BootImageMap.Entry> e=BootImageMap.elements(); e.hasMoreElements(); ) {
      BootImageMap.Entry entry=e.nextElement();
      set.add(entry);
    }
    for (Iterator<BootImageMap.Entry> i=set.iterator(); i.hasNext(); ) {
      BootImageMap.Entry entry=i.next();
      Address data=entry.imageAddress;
      out.println(""String_Node_Str"" + VM.addressAsHexString(data) + ""String_Node_Str""+ entry.jdkObject.getClass());
    }
  }
  out.println();
  out.println(""String_Node_Str"");
  out.flush();
  out.close();
}","/** 
 * Write method address map for use with dbx debugger.
 * @param fileName name of file to write the map to
 */
private static void writeAddressMap(String mapFileName) throws IOException {
  if (verbose >= 1)   say(""String_Node_Str"",mapFileName);
  VM_Statics.bootImageReportGeneration(staticsJunk);
  FileOutputStream fos=new FileOutputStream(mapFileName);
  BufferedOutputStream bos=new BufferedOutputStream(fos,128);
  PrintStream out=new PrintStream(bos,false);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + Integer.toHexString(BOOT_IMAGE_DATA_START.toInt()) + ""String_Node_Str""+ Integer.toHexString(BOOT_IMAGE_DATA_START.toInt() + bootImage.getDataSize()));
  out.println(""String_Node_Str"" + Integer.toHexString(BOOT_IMAGE_CODE_START.toInt()) + ""String_Node_Str""+ Integer.toHexString(BOOT_IMAGE_CODE_START.toInt() + bootImage.getCodeSize()));
  out.println(""String_Node_Str"" + Integer.toHexString(BOOT_IMAGE_RMAP_START.toInt()) + ""String_Node_Str""+ Integer.toHexString(BOOT_IMAGE_RMAP_START.toInt() + bootImage.getRMapSize()));
  out.println();
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  String pad=""String_Node_Str"";
  for (int jtocSlot=VM_Statics.getLowestInUseSlot(); jtocSlot < VM_Statics.middleOfTable; jtocSlot++) {
    Offset jtocOff=VM_Statics.slotAsOffset(jtocSlot);
    String category;
    String contents;
    String details;
    VM_Field field=getRvmStaticField(jtocOff);
    VM_Field field2=getRvmStaticField(jtocOff.plus(4));
    boolean couldBeLongLiteral=VM_Statics.isLongSizeLiteral(jtocSlot);
    boolean couldBeIntLiteral=VM_Statics.isIntSizeLiteral(jtocSlot);
    if (couldBeLongLiteral && ((field == null) || (field2 == null))) {
      if ((field == null) && (field2 == null)) {
        category=""String_Node_Str"";
        long lval=VM_Statics.getSlotContentsAsLong(jtocOff);
        contents=VM.intAsHexString((int)(lval >> 32)) + VM.intAsHexString((int)(lval & 0xffffffffL)).substring(2);
        details=lval + ""String_Node_Str"";
      }
 else       if ((field == null) && (field2 != null)) {
        category=""String_Node_Str"";
        long lval=VM_Statics.getSlotContentsAsLong(jtocOff);
        contents=VM.intAsHexString((int)(lval >> 32)) + VM.intAsHexString((int)(lval & 0xffffffffL)).substring(2);
        details=lval + ""String_Node_Str"" + field2.toString();
      }
 else       if ((field != null) && (field2 == null)) {
        category=""String_Node_Str"";
        long lval=VM_Statics.getSlotContentsAsLong(jtocOff);
        contents=VM.intAsHexString((int)(lval >> 32)) + VM.intAsHexString((int)(lval & 0xffffffffL)).substring(2);
        details=lval + ""String_Node_Str"" + field.toString();
      }
 else {
        throw new Error(""String_Node_Str"");
      }
      jtocSlot++;
    }
 else     if (couldBeIntLiteral) {
      if (field != null) {
        category=""String_Node_Str"";
        int ival=VM_Statics.getSlotContentsAsInt(jtocOff);
        contents=VM.intAsHexString(ival) + pad;
        details=Integer.toString(ival) + ""String_Node_Str"" + field.toString();
      }
 else {
        category=""String_Node_Str"";
        int ival=VM_Statics.getSlotContentsAsInt(jtocOff);
        contents=VM.intAsHexString(ival) + pad;
        details=Integer.toString(ival);
      }
    }
 else {
      if (field != null) {
        category=""String_Node_Str"";
        details=field.toString();
        VM_TypeReference type=field.getType();
        if (type.isIntLikeType()) {
          int ival=VM_Statics.getSlotContentsAsInt(jtocOff);
          contents=VM.intAsHexString(ival) + pad;
        }
 else         if (type.isLongType()) {
          long lval=VM_Statics.getSlotContentsAsLong(jtocOff);
          contents=VM.intAsHexString((int)(lval >> 32)) + VM.intAsHexString((int)(lval & 0xffffffffL)).substring(2);
          jtocSlot++;
        }
 else         if (type.isFloatType()) {
          int ival=VM_Statics.getSlotContentsAsInt(jtocOff);
          contents=Float.toString(Float.intBitsToFloat(ival)) + pad;
        }
 else         if (type.isDoubleType()) {
          long lval=VM_Statics.getSlotContentsAsLong(jtocOff);
          contents=Double.toString(Double.longBitsToDouble(lval)) + pad;
          jtocSlot++;
        }
 else         if (type.isWordType()) {
          if (VM.BuildFor32Addr) {
            int ival=VM_Statics.getSlotContentsAsInt(jtocOff);
            contents=VM.intAsHexString(ival) + pad;
          }
 else {
            long lval=VM_Statics.getSlotContentsAsLong(jtocOff);
            contents=VM.intAsHexString((int)(lval >> 32)) + VM.intAsHexString((int)(lval & 0xffffffffL)).substring(2);
            jtocSlot++;
          }
        }
 else {
          int ival=VM_Statics.getSlotContentsAsInt(jtocOff);
          category=""String_Node_Str"";
          details=""String_Node_Str"" + field.toString() + ""String_Node_Str"";
          contents=VM.intAsHexString(ival) + pad;
        }
      }
 else {
        int ival=VM_Statics.getSlotContentsAsInt(jtocOff);
        category=""String_Node_Str"";
        details=""String_Node_Str"";
        contents=VM.intAsHexString(ival) + pad;
      }
    }
    out.println((jtocSlot + ""String_Node_Str"").substring(0,6) + VM.addressAsHexString(jtocOff.toWord().toAddress()) + ""String_Node_Str""+ category+ ""String_Node_Str""+ contents+ ""String_Node_Str""+ details);
  }
  for (int jtocSlot=VM_Statics.middleOfTable, n=VM_Statics.getHighestInUseSlot(); jtocSlot <= n; jtocSlot+=VM_Statics.getReferenceSlotSize()) {
    Offset jtocOff=VM_Statics.slotAsOffset(jtocSlot);
    Object obj=BootImageMap.getObject(getIVal(jtocOff));
    String category;
    String details;
    String contents=VM.addressAsHexString(getReferenceAddr(jtocOff,false)) + pad;
    VM_Field field=getRvmStaticField(jtocOff);
    if (VM_Statics.isReferenceLiteral(jtocSlot)) {
      if (field != null) {
        category=""String_Node_Str"";
      }
 else {
        category=""String_Node_Str"";
      }
      if (obj == null) {
        details=""String_Node_Str"";
      }
 else       if (obj instanceof String) {
        details=""String_Node_Str"" + obj + ""String_Node_Str"";
      }
 else       if (obj instanceof Class) {
        details=""String_Node_Str"" + obj;
      }
 else       if (obj instanceof VM_TIB) {
        category=""String_Node_Str"";
        VM_Type type=VM_Statics.findTypeOfTIBSlot(jtocOff);
        details=(type == null) ? ""String_Node_Str"" : type.toString();
      }
 else {
        details=""String_Node_Str"" + obj.getClass();
      }
      if (field != null) {
        details+=""String_Node_Str"" + field.toString();
      }
    }
 else {
      if (field != null) {
        category=""String_Node_Str"";
        details=field.toString();
      }
 else       if (obj instanceof VM_TIB) {
        category=""String_Node_Str"";
        VM_Type type=VM_Statics.findTypeOfTIBSlot(jtocOff);
        details=(type == null) ? ""String_Node_Str"" : type.toString();
      }
 else {
        VM_CompiledMethod m=findMethodOfCode(obj);
        if (m != null) {
          category=""String_Node_Str"";
          details=m.getMethod().toString();
        }
 else {
          category=""String_Node_Str"";
          details=""String_Node_Str"";
        }
      }
    }
    out.println((jtocSlot + ""String_Node_Str"").substring(0,6) + VM.addressAsHexString(jtocOff.toWord().toAddress()) + ""String_Node_Str""+ category+ ""String_Node_Str""+ contents+ ""String_Node_Str""+ details);
  }
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  VM_CompiledMethod[] compiledMethods=VM_CompiledMethods.getCompiledMethods();
  for (int i=0; i < VM_CompiledMethods.numCompiledMethods(); ++i) {
    VM_CompiledMethod compiledMethod=compiledMethods[i];
    if (compiledMethod != null) {
      VM_Method m=compiledMethod.getMethod();
      if (m != null && compiledMethod.isCompiled()) {
        VM_CodeArray instructions=compiledMethod.getEntryCodeArray();
        Address code=BootImageMap.getImageAddress(instructions.getBacking(),true);
        out.println(""String_Node_Str"" + VM.addressAsHexString(code) + ""String_Node_Str""+ compiledMethod.getMethod());
      }
    }
  }
  if (false) {
    out.println();
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println();
    SortedSet<BootImageMap.Entry> set=new TreeSet<BootImageMap.Entry>(new Comparator<BootImageMap.Entry>(){
      public int compare(      BootImageMap.Entry a,      BootImageMap.Entry b){
        return Integer.valueOf(a.imageAddress.toInt()).compareTo(b.imageAddress.toInt());
      }
      public boolean equals(){
        throw new Error(""String_Node_Str"");
      }
    }
);
    for (Enumeration<BootImageMap.Entry> e=BootImageMap.elements(); e.hasMoreElements(); ) {
      BootImageMap.Entry entry=e.nextElement();
      set.add(entry);
    }
    for (Iterator<BootImageMap.Entry> i=set.iterator(); i.hasNext(); ) {
      BootImageMap.Entry entry=i.next();
      Address data=entry.imageAddress;
      out.println(""String_Node_Str"" + VM.addressAsHexString(data) + ""String_Node_Str""+ entry.jdkObject.getClass());
    }
  }
  out.println();
  out.println(""String_Node_Str"");
  out.flush();
  out.close();
}",0.9885278266901446
149864,"/** 
 * Find the first non-VM method/exception initializer method in the stack trace. As we're working with the compiled methods we're assumig the constructor of the exception won't have been inlined into the throwing method.
 * @param cause the cause of generating the stack trace marking the end of theframes to elide
 * @return the index of the method throwing the exception or else 0
 */
private int firstRealMethod(Throwable cause){
  if (VM_Options.stackTraceFull) {
    return 0;
  }
 else {
    int element=0;
    VM_CompiledMethod compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethods[element]);
    if (cause instanceof OutOfMemoryError) {
      while ((element < compiledMethods.length) && (compiledMethod != null) && compiledMethod.getMethod().getDeclaringClass().getClassForType() != VM_Runtime.class) {
        element++;
        compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethods[element]);
      }
      while ((element < compiledMethods.length) && (compiledMethod != null) && compiledMethod.getMethod().getDeclaringClass().getClassForType() == VM_Runtime.class) {
        element++;
        compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethods[element]);
      }
      return element;
    }
    while ((element < compiledMethods.length) && (compiledMethod != null) && compiledMethod.getMethod().getDeclaringClass().getClassForType() == VM_StackTrace.class) {
      element++;
      compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethods[element]);
    }
    while ((element < compiledMethods.length) && (compiledMethod != null) && compiledMethod.getMethod().getDeclaringClass().getClassForType() == java.lang.VMThrowable.class) {
      element++;
      compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethods[element]);
    }
    while ((element < compiledMethods.length) && (compiledMethod != null) && compiledMethod.getMethod().getDeclaringClass().getClassForType() == java.lang.Throwable.class) {
      element++;
      compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethods[element]);
    }
    while ((element < compiledMethods.length) && (compiledMethod != null) && (compiledMethod.getMethod().getDeclaringClass().getClassForType() != cause.getClass())&& compiledMethod.getMethod().isObjectInitializer()&& compiledMethod.getMethod().getDeclaringClass().isThrowable()) {
      element++;
      compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethods[element]);
    }
    while ((element < compiledMethods.length) && (compiledMethod != null) && (compiledMethod.getMethod().getDeclaringClass().getClassForType() == cause.getClass())&& compiledMethod.getMethod().isObjectInitializer()) {
      element++;
      compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethods[element]);
    }
    if (element < compiledMethods.length - 2) {
      compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethods[element + 1]);
      if ((compiledMethod != null) && compiledMethod.getCompilerType() == VM_CompiledMethod.TRAP) {
        element+=2;
        compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethods[element + 1]);
      }
    }
    return element;
  }
}","/** 
 * Find the first non-VM method/exception initializer method in the stack trace. As we're working with the compiled methods we're assumig the constructor of the exception won't have been inlined into the throwing method.
 * @param cause the cause of generating the stack trace marking the end of theframes to elide
 * @return the index of the method throwing the exception or else 0
 */
private int firstRealMethod(Throwable cause){
  if (VM_Options.stackTraceFull) {
    return 0;
  }
 else {
    int element=0;
    VM_CompiledMethod compiledMethod=getCompiledMethod(element);
    if (cause instanceof OutOfMemoryError) {
      while ((element < compiledMethods.length) && (compiledMethod != null) && compiledMethod.getMethod().getDeclaringClass().getClassForType() != VM_Runtime.class) {
        element++;
        compiledMethod=getCompiledMethod(element);
      }
      while ((element < compiledMethods.length) && (compiledMethod != null) && compiledMethod.getMethod().getDeclaringClass().getClassForType() == VM_Runtime.class) {
        element++;
        compiledMethod=getCompiledMethod(element);
      }
      return element;
    }
    while ((element < compiledMethods.length) && (compiledMethod != null) && compiledMethod.getMethod().getDeclaringClass().getClassForType() == VM_StackTrace.class) {
      element++;
      compiledMethod=getCompiledMethod(element);
    }
    while ((element < compiledMethods.length) && (compiledMethod != null) && compiledMethod.getMethod().getDeclaringClass().getClassForType() == java.lang.VMThrowable.class) {
      element++;
      compiledMethod=getCompiledMethod(element);
    }
    while ((element < compiledMethods.length) && (compiledMethod != null) && compiledMethod.getMethod().getDeclaringClass().getClassForType() == java.lang.Throwable.class) {
      element++;
      compiledMethod=getCompiledMethod(element);
    }
    while ((element < compiledMethods.length) && (compiledMethod != null) && (compiledMethod.getMethod().getDeclaringClass().getClassForType() != cause.getClass())&& compiledMethod.getMethod().isObjectInitializer()&& compiledMethod.getMethod().getDeclaringClass().isThrowable()) {
      element++;
      compiledMethod=getCompiledMethod(element);
    }
    while ((element < compiledMethods.length) && (compiledMethod != null) && (compiledMethod.getMethod().getDeclaringClass().getClassForType() == cause.getClass())&& compiledMethod.getMethod().isObjectInitializer()) {
      element++;
      compiledMethod=getCompiledMethod(element);
    }
    if (element < compiledMethods.length - 2) {
      compiledMethod=getCompiledMethod(element + 1);
      if ((compiledMethod != null) && compiledMethod.getCompilerType() == VM_CompiledMethod.TRAP) {
        element+=2;
      }
    }
    return element;
  }
}",0.8490219026918575
149865,"/** 
 * Return the stack trace for use by the Throwable API 
 */
public Element[] getStackTrace(Throwable cause){
  int first=firstRealMethod(cause);
  int last=lastRealMethod(first);
  Element[] elements=new Element[countFrames(first,last)];
  if (!VM.BuildForOptCompiler) {
    int element=0;
    for (int i=first; i <= last; i++) {
      elements[element]=new Element(VM_CompiledMethods.getCompiledMethod(compiledMethods[i]),instructionOffsets[i]);
      element++;
    }
  }
 else {
    int element=0;
    for (int i=first; i <= last; i++) {
      VM_CompiledMethod compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethods[i]);
      if ((compiledMethod == null) || (compiledMethod.getCompilerType() != VM_CompiledMethod.OPT)) {
        elements[element]=new Element(compiledMethod,instructionOffsets[i]);
        element++;
      }
 else {
        Offset instructionOffset=Offset.fromIntSignExtend(instructionOffsets[i]);
        VM_OptCompiledMethod optInfo=(VM_OptCompiledMethod)compiledMethod;
        VM_OptMachineCodeMap map=optInfo.getMCMap();
        int iei=map.getInlineEncodingForMCOffset(instructionOffset);
        if (iei < 0) {
          elements[element]=new Element(compiledMethod,instructionOffsets[i]);
          element++;
        }
 else {
          int[] inlineEncoding=map.inlineEncoding;
          int bci=map.getBytecodeIndexForMCOffset(instructionOffset);
          for (; iei >= 0; iei=VM_OptEncodedCallSiteTree.getParent(iei,inlineEncoding)) {
            int mid=VM_OptEncodedCallSiteTree.getMethodID(iei,inlineEncoding);
            VM_Method method=VM_MemberReference.getMemberRef(mid).asMethodReference().getResolvedMember();
            int lineNumber=((VM_NormalMethod)method).getLineNumberForBCIndex(bci);
            elements[element]=new Element(method,lineNumber);
            element++;
          }
        }
      }
    }
  }
  return elements;
}","/** 
 * Return the stack trace for use by the Throwable API 
 */
public Element[] getStackTrace(Throwable cause){
  int first=firstRealMethod(cause);
  int last=lastRealMethod(first);
  Element[] elements=new Element[countFrames(first,last)];
  if (!VM.BuildForOptCompiler) {
    int element=0;
    for (int i=first; i <= last; i++) {
      elements[element]=new Element(getCompiledMethod(i),instructionOffsets[i]);
      element++;
    }
  }
 else {
    int element=0;
    for (int i=first; i <= last; i++) {
      VM_CompiledMethod compiledMethod=getCompiledMethod(i);
      if ((compiledMethod == null) || (compiledMethod.getCompilerType() != VM_CompiledMethod.OPT)) {
        elements[element]=new Element(compiledMethod,instructionOffsets[i]);
        element++;
      }
 else {
        Offset instructionOffset=Offset.fromIntSignExtend(instructionOffsets[i]);
        VM_OptCompiledMethod optInfo=(VM_OptCompiledMethod)compiledMethod;
        VM_OptMachineCodeMap map=optInfo.getMCMap();
        int iei=map.getInlineEncodingForMCOffset(instructionOffset);
        if (iei < 0) {
          elements[element]=new Element(compiledMethod,instructionOffsets[i]);
          element++;
        }
 else {
          int[] inlineEncoding=map.inlineEncoding;
          int bci=map.getBytecodeIndexForMCOffset(instructionOffset);
          for (; iei >= 0; iei=VM_OptEncodedCallSiteTree.getParent(iei,inlineEncoding)) {
            int mid=VM_OptEncodedCallSiteTree.getMethodID(iei,inlineEncoding);
            VM_Method method=VM_MemberReference.getMemberRef(mid).asMethodReference().getResolvedMember();
            int lineNumber=((VM_NormalMethod)method).getLineNumberForBCIndex(bci);
            elements[element]=new Element(method,lineNumber);
            element++;
          }
        }
      }
    }
  }
  return elements;
}",0.8938337801608579
149866,"/** 
 * Find the first non-VM method at the end of the stack trace
 * @param first the first real method of the stack trace
 * @return compiledMethods.length-1 if no non-VM methods found else the index ofthe method
 */
private int lastRealMethod(int first){
  int max=compiledMethods.length - 1;
  if (VM_Options.stackTraceFull) {
    return max;
  }
 else {
    for (int i=max; i >= first; i--) {
      if (compiledMethods[i] == INVISIBLE_METHOD_ID) {
        if (i - 1 >= 0) {
          return i - 1;
        }
 else {
          return max;
        }
      }
      VM_CompiledMethod compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethods[i]);
      if (compiledMethod.getCompilerType() == VM_CompiledMethod.TRAP) {
        return max;
      }
      Class<?> frameClass=compiledMethod.getMethod().getDeclaringClass().getClassForType();
      if ((frameClass != org.jikesrvm.scheduler.VM_MainThread.class) && (frameClass != org.jikesrvm.scheduler.VM_Thread.class) && (frameClass != org.jikesrvm.runtime.VM_Reflection.class)) {
        return i;
      }
    }
    return max;
  }
}","/** 
 * Find the first non-VM method at the end of the stack trace
 * @param first the first real method of the stack trace
 * @return compiledMethods.length-1 if no non-VM methods found else the index ofthe method
 */
private int lastRealMethod(int first){
  int max=compiledMethods.length - 1;
  if (VM_Options.stackTraceFull) {
    return max;
  }
 else {
    for (int i=max; i >= first; i--) {
      if (compiledMethods[i] == INVISIBLE_METHOD_ID) {
        if (i - 1 >= 0) {
          return i - 1;
        }
 else {
          return max;
        }
      }
      VM_CompiledMethod compiledMethod=getCompiledMethod(i);
      if (compiledMethod.getCompilerType() == VM_CompiledMethod.TRAP) {
        return max;
      }
      Class<?> frameClass=compiledMethod.getMethod().getDeclaringClass().getClassForType();
      if ((frameClass != org.jikesrvm.scheduler.VM_MainThread.class) && (frameClass != org.jikesrvm.scheduler.VM_Thread.class) && (frameClass != org.jikesrvm.runtime.VM_Reflection.class)) {
        return i;
      }
    }
    return max;
  }
}",0.9786046511627908
149867,"/** 
 * Count number of stack frames including those inlined by the opt compiler
 * @param first the first compiled method to look from
 * @param last the last compiled method to look to
 */
private int countFrames(int first,int last){
  int numElements=0;
  if (!VM.BuildForOptCompiler) {
    numElements=last - first + 1;
  }
 else {
    for (int i=first; i <= last; i++) {
      VM_CompiledMethod compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethods[i]);
      if ((compiledMethod == null) || (compiledMethod.getCompilerType() != VM_CompiledMethod.OPT)) {
        numElements++;
      }
 else {
        Offset instructionOffset=Offset.fromIntSignExtend(instructionOffsets[i]);
        VM_OptCompiledMethod optInfo=(VM_OptCompiledMethod)compiledMethod;
        VM_OptMachineCodeMap map=optInfo.getMCMap();
        int iei=map.getInlineEncodingForMCOffset(instructionOffset);
        if (iei < 0) {
          numElements++;
        }
 else {
          int[] inlineEncoding=map.inlineEncoding;
          for (; iei >= 0; iei=VM_OptEncodedCallSiteTree.getParent(iei,inlineEncoding)) {
            numElements++;
          }
        }
      }
    }
  }
  return numElements;
}","/** 
 * Count number of stack frames including those inlined by the opt compiler
 * @param first the first compiled method to look from
 * @param last the last compiled method to look to
 */
private int countFrames(int first,int last){
  int numElements=0;
  if (!VM.BuildForOptCompiler) {
    numElements=last - first + 1;
  }
 else {
    for (int i=first; i <= last; i++) {
      VM_CompiledMethod compiledMethod=getCompiledMethod(i);
      if ((compiledMethod == null) || (compiledMethod.getCompilerType() != VM_CompiledMethod.OPT)) {
        numElements++;
      }
 else {
        Offset instructionOffset=Offset.fromIntSignExtend(instructionOffsets[i]);
        VM_OptCompiledMethod optInfo=(VM_OptCompiledMethod)compiledMethod;
        VM_OptMachineCodeMap map=optInfo.getMCMap();
        int iei=map.getInlineEncodingForMCOffset(instructionOffset);
        if (iei < 0) {
          numElements++;
        }
 else {
          int[] inlineEncoding=map.inlineEncoding;
          for (; iei >= 0; iei=VM_OptEncodedCallSiteTree.getParent(iei,inlineEncoding)) {
            numElements++;
          }
        }
      }
    }
  }
  return numElements;
}",0.9803586678052946
149868,"/** 
 * Begin vm execution. Uninterruptible because we are not setup to execute a yieldpoint or stackoverflow check in the prologue this early in booting. The following machine registers are set by ""C"" bootstrap program before calling this method: JTOC_POINTER        - required for accessing globals FRAME_POINTER       - required for accessing locals THREAD_ID_REGISTER  - required for method prolog (stack overflow check)
 * @exception Exception
 */
@UninterruptibleNoWarn public static void boot(){
  writingBootImage=false;
  runningVM=true;
  runningAsSubsystem=false;
  verboseBoot=VM_BootRecord.the_boot_record.verboseBoot;
  sysWriteLockOffset=VM_Entrypoints.sysWriteLockField.getOffset();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_ProcessorLocalState.boot();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_Thread currentThread=VM_Processor.getCurrentProcessor().activeThread;
  currentThread.stackLimit=VM_Magic.objectAsAddress(currentThread.getStack()).plus(ArchitectureSpecific.VM_StackframeLayoutConstants.STACK_SIZE_GUARD);
  VM_Processor.getCurrentProcessor().activeThreadStackLimit=currentThread.stackLimit;
  finishBooting();
}","/** 
 * Begin vm execution. Uninterruptible because we are not setup to execute a yieldpoint or stackoverflow check in the prologue this early in booting. The following machine registers are set by ""C"" bootstrap program before calling this method: JTOC_POINTER        - required for accessing globals FRAME_POINTER       - required for accessing locals THREAD_ID_REGISTER  - required for method prolog (stack overflow check)
 * @exception Exception
 */
@UninterruptibleNoWarn public static void boot(){
  writingBootImage=false;
  runningVM=true;
  runningAsSubsystem=false;
  verboseBoot=VM_BootRecord.the_boot_record.verboseBoot;
  sysWriteLockOffset=VM_Entrypoints.sysWriteLockField.getOffset();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_SysCall.sysCall.sysRegisterStaticFieldOffsets(VM_Entrypoints.gcStatusField.getOffset().toInt(),VM_Entrypoints.timerTicksField.getOffset().toInt(),VM_Entrypoints.reportedTimerTicksField.getOffset().toInt());
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_ProcessorLocalState.boot();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_Thread currentThread=VM_Processor.getCurrentProcessor().activeThread;
  currentThread.stackLimit=VM_Magic.objectAsAddress(currentThread.getStack()).plus(ArchitectureSpecific.VM_StackframeLayoutConstants.STACK_SIZE_GUARD);
  VM_Processor.getCurrentProcessor().activeThreadStackLimit=currentThread.stackLimit;
  finishBooting();
}",0.9015206372194062
149869,"static void emitVirtualMachineDeclarations(int bootImageDataAddress,int bootImageCodeAddress,int bootImageRMapAddress){
  p(""String_Node_Str"" + Integer.toHexString(bootImageDataAddress) + ""String_Node_Str"");
  p(""String_Node_Str"" + Integer.toHexString(bootImageCodeAddress) + ""String_Node_Str"");
  p(""String_Node_Str"" + Integer.toHexString(bootImageRMapAddress) + ""String_Node_Str"");
  p(""String_Node_Str"" + ArchitectureSpecific.VM_StackframeLayoutConstants.STACK_SIZE_GUARD + ""String_Node_Str"");
  p(""String_Node_Str"" + ArchitectureSpecific.VM_StackframeLayoutConstants.INVISIBLE_METHOD_ID + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThinLockConstants.TL_THREAD_ID_SHIFT + ""String_Node_Str"");
  p(""String_Node_Str"" + ArchitectureSpecific.VM_StackframeLayoutConstants.STACKFRAME_HEADER_SIZE + ""String_Node_Str"");
  p(""String_Node_Str"" + ArchitectureSpecific.VM_StackframeLayoutConstants.STACKFRAME_METHOD_ID_OFFSET + ""String_Node_Str"");
  p(""String_Node_Str"" + ArchitectureSpecific.VM_StackframeLayoutConstants.STACKFRAME_FRAME_POINTER_OFFSET + ""String_Node_Str"");
  pln(""String_Node_Str"",ArchitectureSpecific.VM_StackframeLayoutConstants.STACKFRAME_SENTINEL_FP);
  p(""String_Node_Str"");
  pln(""String_Node_Str"",VM_ObjectModel.getArrayLengthOffset());
  pln();
  p(""String_Node_Str"" + VM_GreenScheduler.PRIMORDIAL_PROCESSOR_ID + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Scheduler.PRIMORDIAL_THREAD_INDEX + ""String_Node_Str"");
  p(""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadEventConstants.WAIT_INFINITE + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOQueue.READ_OFFSET + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOQueue.WRITE_OFFSET + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOQueue.EXCEPT_OFFSET + ""String_Node_Str"");
  p(""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOConstants.FD_READY + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOConstants.FD_READY_BIT + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOConstants.FD_INVALID + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOConstants.FD_INVALID_BIT + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOConstants.FD_MASK + ""String_Node_Str"");
  p(""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadProcessWaitQueue.PROCESS_FINISHED + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_UNKNOWN + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_NULL_POINTER + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_ARRAY_BOUNDS + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_DIVIDE_BY_ZERO + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_STACK_OVERFLOW + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_CHECKCAST + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_REGENERATE + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_JNI_STACK + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_MUST_IMPLEMENT + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_STORE_CHECK + ""String_Node_Str"");
  pln();
  p(""String_Node_Str"" + VM_FileSystem.OPEN_READ + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.OPEN_WRITE + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.OPEN_MODIFY + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.OPEN_APPEND + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.SEEK_SET + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.SEEK_CUR + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.SEEK_END + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.STAT_EXISTS + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.STAT_IS_FILE + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.STAT_IS_DIRECTORY + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.STAT_IS_READABLE + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.STAT_IS_WRITABLE + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.STAT_LAST_MODIFIED + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.STAT_LENGTH + ""String_Node_Str"");
  p(""String_Node_Str"" + org.mmtk.utility.Constants.BYTES_IN_PAGE + ""String_Node_Str"");
  Offset offset;
  offset=VM_Entrypoints.timeSliceExpiredField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.takeYieldpointField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.activeThreadStackLimitField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.pthreadIDField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.timerTicksField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.reportedTimerTicksField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.activeThreadField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.vpStatusField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.threadIdField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.threadStackField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.stackLimitField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.threadHardwareExceptionRegistersField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.jniEnvField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_ArchEntrypoints.registersGPRsField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_ArchEntrypoints.registersFPRsField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_ArchEntrypoints.registersIPField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_ArchEntrypoints.registersInUseField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.JNIExternalFunctionsField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.inetAddressAddressField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.inetAddressFamilyField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.socketImplAddressField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.socketImplPortField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.gcStatusField.getOffset();
  pln(""String_Node_Str"",offset);
  arch.emitArchVirtualMachineDeclarations();
}","static void emitVirtualMachineDeclarations(int bootImageDataAddress,int bootImageCodeAddress,int bootImageRMapAddress){
  p(""String_Node_Str"" + Integer.toHexString(bootImageDataAddress) + ""String_Node_Str"");
  p(""String_Node_Str"" + Integer.toHexString(bootImageCodeAddress) + ""String_Node_Str"");
  p(""String_Node_Str"" + Integer.toHexString(bootImageRMapAddress) + ""String_Node_Str"");
  p(""String_Node_Str"" + ArchitectureSpecific.VM_StackframeLayoutConstants.STACK_SIZE_GUARD + ""String_Node_Str"");
  p(""String_Node_Str"" + ArchitectureSpecific.VM_StackframeLayoutConstants.INVISIBLE_METHOD_ID + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThinLockConstants.TL_THREAD_ID_SHIFT + ""String_Node_Str"");
  p(""String_Node_Str"" + ArchitectureSpecific.VM_StackframeLayoutConstants.STACKFRAME_HEADER_SIZE + ""String_Node_Str"");
  p(""String_Node_Str"" + ArchitectureSpecific.VM_StackframeLayoutConstants.STACKFRAME_METHOD_ID_OFFSET + ""String_Node_Str"");
  p(""String_Node_Str"" + ArchitectureSpecific.VM_StackframeLayoutConstants.STACKFRAME_FRAME_POINTER_OFFSET + ""String_Node_Str"");
  pln(""String_Node_Str"",ArchitectureSpecific.VM_StackframeLayoutConstants.STACKFRAME_SENTINEL_FP);
  p(""String_Node_Str"");
  pln(""String_Node_Str"",VM_ObjectModel.getArrayLengthOffset());
  pln();
  p(""String_Node_Str"" + VM_GreenScheduler.PRIMORDIAL_PROCESSOR_ID + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Scheduler.PRIMORDIAL_THREAD_INDEX + ""String_Node_Str"");
  p(""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadEventConstants.WAIT_INFINITE + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOQueue.READ_OFFSET + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOQueue.WRITE_OFFSET + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOQueue.EXCEPT_OFFSET + ""String_Node_Str"");
  p(""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOConstants.FD_READY + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOConstants.FD_READY_BIT + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOConstants.FD_INVALID + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOConstants.FD_INVALID_BIT + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadIOConstants.FD_MASK + ""String_Node_Str"");
  p(""String_Node_Str"");
  p(""String_Node_Str"" + VM_ThreadProcessWaitQueue.PROCESS_FINISHED + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_UNKNOWN + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_NULL_POINTER + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_ARRAY_BOUNDS + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_DIVIDE_BY_ZERO + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_STACK_OVERFLOW + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_CHECKCAST + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_REGENERATE + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_JNI_STACK + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_MUST_IMPLEMENT + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_Runtime.TRAP_STORE_CHECK + ""String_Node_Str"");
  pln();
  p(""String_Node_Str"" + VM_FileSystem.OPEN_READ + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.OPEN_WRITE + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.OPEN_MODIFY + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.OPEN_APPEND + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.SEEK_SET + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.SEEK_CUR + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.SEEK_END + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.STAT_EXISTS + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.STAT_IS_FILE + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.STAT_IS_DIRECTORY + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.STAT_IS_READABLE + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.STAT_IS_WRITABLE + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.STAT_LAST_MODIFIED + ""String_Node_Str"");
  p(""String_Node_Str"" + VM_FileSystem.STAT_LENGTH + ""String_Node_Str"");
  p(""String_Node_Str"" + org.mmtk.utility.Constants.BYTES_IN_PAGE + ""String_Node_Str"");
  Offset offset;
  offset=VM_Entrypoints.timeSliceExpiredField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.takeYieldpointField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.activeThreadStackLimitField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.pthreadIDField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.activeThreadField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.vpStatusField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.threadIdField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.threadStackField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.stackLimitField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.threadHardwareExceptionRegistersField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.jniEnvField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_ArchEntrypoints.registersGPRsField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_ArchEntrypoints.registersFPRsField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_ArchEntrypoints.registersIPField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_ArchEntrypoints.registersInUseField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.JNIExternalFunctionsField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.inetAddressAddressField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.inetAddressFamilyField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.socketImplAddressField.getOffset();
  pln(""String_Node_Str"",offset);
  offset=VM_Entrypoints.socketImplPortField.getOffset();
  pln(""String_Node_Str"",offset);
  arch.emitArchVirtualMachineDeclarations();
}",0.9786234817813764
149870,"/** 
 * @param ir the IR to expand
 * @return return value is garbage for IA32
 */
public static int expand(OPT_IR ir){
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  for (OPT_Instruction next, p=ir.firstInstructionInCodeOrder(); p != null; p=next) {
    next=p.nextInstructionInCodeOrder();
    p.setmcOffset(-1);
    p.scratchObject=null;
switch (p.getOpcode()) {
case MIR_LOWTABLESWITCH_opcode:
{
        OPT_BasicBlock thisBlock=p.getBasicBlock();
        OPT_BasicBlock nextBlock=thisBlock.splitNodeWithLinksAt(p,ir);
        nextBlock.firstInstruction().setmcOffset(-1);
        int NumTargets=MIR_LowTableSwitch.getNumberOfTargets(p);
        for (int i=0; i < NumTargets; i++) {
          thisBlock.appendInstruction(MIR_CaseLabel.create(IA32_OFFSET,IC(i),MIR_LowTableSwitch.getClearTarget(p,i)));
        }
        OPT_Register regS=MIR_LowTableSwitch.getIndex(p).getRegister();
        nextBlock.appendInstruction(MIR_BinaryAcc.create(IA32_SHL,new OPT_RegisterOperand(regS,VM_TypeReference.Int),IC(2)));
        nextBlock.appendInstruction(MIR_BinaryAcc.create(IA32_ADD,new OPT_RegisterOperand(regS,VM_TypeReference.Int),OPT_MemoryOperand.I(new OPT_RegisterOperand(phys.getESP(),VM_TypeReference.Int),(byte)4,null,null)));
        nextBlock.appendInstruction(MIR_Move.create(IA32_MOV,new OPT_RegisterOperand(regS,VM_TypeReference.Int),OPT_MemoryOperand.I(new OPT_RegisterOperand(regS,VM_TypeReference.Int),(byte)4,null,null)));
        nextBlock.appendInstruction(MIR_BinaryAcc.create(IA32_ADD,OPT_MemoryOperand.I(new OPT_RegisterOperand(phys.getESP(),VM_TypeReference.Int),(byte)4,null,null),new OPT_RegisterOperand(regS,VM_TypeReference.Int)));
        nextBlock.appendInstruction(MIR_Return.create(IA32_RET,IC(0),null,null));
        MIR_Call.mutate0(p,IA32_CALL,null,null,nextBlock.makeJumpTarget(),null);
      }
    break;
case IA32_TEST_opcode:
  if (MIR_Test.getVal2(p).isMemory()) {
    OPT_Operand tmp=MIR_Test.getClearVal1(p);
    MIR_Test.setVal1(p,MIR_Test.getClearVal2(p));
    MIR_Test.setVal2(p,tmp);
  }
break;
case NULL_CHECK_opcode:
{
OPT_Operand ref=NullCheck.getRef(p);
MIR_TrapIf.mutate(p,IA32_TRAPIF,null,ref.copy(),IC(0),OPT_IA32ConditionOperand.EQ(),OPT_TrapCodeOperand.NullPtr());
}
case IA32_TRAPIF_opcode:
{
OPT_BasicBlock thisBlock=p.getBasicBlock();
OPT_BasicBlock trap=thisBlock.createSubBlock(p.bcIndex,ir,0f);
thisBlock.insertOut(trap);
OPT_BasicBlock nextBlock=thisBlock.splitNodeWithLinksAt(p,ir);
thisBlock.insertOut(trap);
OPT_TrapCodeOperand tc=MIR_TrapIf.getClearTrapCode(p);
p.remove();
nextBlock.firstInstruction().setmcOffset(-1);
OPT_Instruction cmp=MIR_Compare.create(IA32_CMP,MIR_TrapIf.getVal1(p),MIR_TrapIf.getVal2(p));
if (p.isMarkedAsPEI()) {
cmp.markAsPEI();
cmp.copyPosition(p);
ir.MIRInfo.gcIRMap.insertTwin(p,cmp);
}
thisBlock.appendInstruction(cmp);
thisBlock.appendInstruction(MIR_CondBranch.create(IA32_JCC,MIR_TrapIf.getCond(p),trap.makeJumpTarget(),null));
ir.cfg.addLastInCodeOrder(trap);
if (tc.isArrayBounds()) {
OPT_Operand index=MIR_TrapIf.getVal2(p);
if (!(index instanceof OPT_RegisterOperand || index instanceof OPT_IntConstantOperand)) {
  index=IC(0xdeadbeef);
}
OPT_MemoryOperand mo=OPT_MemoryOperand.BD(ir.regpool.makePROp(),VM_ArchEntrypoints.arrayIndexTrapParamField.getOffset(),(byte)4,null,null);
trap.appendInstruction(MIR_Move.create(IA32_MOV,mo,index.copy()));
}
trap.appendInstruction(MIR_Trap.mutate(p,IA32_INT,null,tc));
ir.MIRInfo.gcIRMap.moveToEnd(p);
if (tc.isStackOverflow()) {
trap.appendInstruction(MIR_Branch.create(IA32_JMP,nextBlock.makeJumpTarget()));
}
}
break;
case IA32_FMOV_ENDING_LIVE_RANGE_opcode:
{
OPT_Operand result=MIR_Move.getResult(p);
OPT_Operand value=MIR_Move.getValue(p);
if (result.isRegister() && value.isRegister()) {
if (result.similar(value)) {
p.remove();
}
 else {
int i=OPT_PhysicalRegisterSet.getFPRIndex(result.asRegister().getRegister());
int j=OPT_PhysicalRegisterSet.getFPRIndex(value.asRegister().getRegister());
if (i == 0) {
MIR_XChng.mutate(p,IA32_FXCH,result,value);
}
 else if (j == 0) {
MIR_XChng.mutate(p,IA32_FXCH,value,result);
}
 else {
expandFmov(p,phys);
}
}
}
 else {
expandFmov(p,phys);
}
break;
}
case DUMMY_DEF_opcode:
case DUMMY_USE_opcode:
case REQUIRE_ESP_opcode:
case ADVISE_ESP_opcode:
p.remove();
break;
case IA32_FMOV_opcode:
expandFmov(p,phys);
break;
case IA32_MOV_opcode:
if (MIR_Move.getResult(p).isRegister() && MIR_Move.getValue(p).isIntConstant() && MIR_Move.getValue(p).asIntConstant().value == 0) {
OPT_Instruction x=next;
int futureDefs=0;
while (!BBend.conforms(x) && !OPT_PhysicalDefUse.usesEFLAGS(x.operator)) {
futureDefs|=x.operator.implicitDefs;
x=x.nextInstructionInCodeOrder();
}
if (BBend.conforms(x) || (futureDefs & OPT_PhysicalDefUse.maskAF_CF_OF_PF_SF_ZF) == OPT_PhysicalDefUse.maskAF_CF_OF_PF_SF_ZF) {
OPT_Operand result=MIR_Move.getClearResult(p);
MIR_BinaryAcc.mutate(p,IA32_XOR,result,result.copy());
}
}
break;
case IA32_SET__B_opcode:
if (MIR_Set.getResult(p).isRegister() && MIR_Unary.conforms(next) && (next.operator() == IA32_MOVZX__B)&& MIR_Unary.getResult(next).isRegister()&& MIR_Unary.getVal(next).similar(MIR_Unary.getResult(next))&& MIR_Unary.getVal(next).similar(MIR_Set.getResult(p))) {
OPT_Instruction x=p.getPrev();
OPT_Operand result=MIR_Unary.getResult(next);
boolean foundCmp=false;
outer: while (!Label.conforms(x)) {
OPT_OperandEnumeration e=x.getUses();
while (e.hasMoreElements()) {
if (e.next().similar(result)) {
break outer;
}
}
if (OPT_PhysicalDefUse.definesEFLAGS(x.operator)) {
foundCmp=true;
break outer;
}
x=x.getPrev();
}
if (foundCmp) {
next.remove();
MIR_BinaryAcc.mutate(next,IA32_XOR,result,MIR_Unary.getVal(next));
x.insertBefore(next);
next=p.nextInstructionInCodeOrder();
}
}
break;
case IA32_LEA_opcode:
{
OPT_MemoryOperand value=MIR_Lea.getValue(p);
OPT_RegisterOperand result=MIR_Lea.getResult(p);
if ((value.base != null && value.base.getRegister() == result.getRegister()) || (value.index != null && value.index.getRegister() == result.getRegister())) {
OPT_Instruction x=next;
int futureDefs=0;
while (!BBend.conforms(x) && !OPT_PhysicalDefUse.usesEFLAGS(x.operator)) {
futureDefs|=x.operator.implicitDefs;
x=x.nextInstructionInCodeOrder();
}
if (BBend.conforms(x) || (futureDefs & OPT_PhysicalDefUse.maskAF_CF_OF_PF_SF_ZF) == OPT_PhysicalDefUse.maskAF_CF_OF_PF_SF_ZF) {
if (value.base != null && value.index != null && value.index.getRegister() == result.getRegister() && value.disp.isZero() && value.scale == 0) {
MIR_BinaryAcc.mutate(p,IA32_ADD,result,value.base);
}
 else if (value.base != null && value.base.getRegister() == result.getRegister() && value.index != null && value.disp.isZero() && value.scale == 0) {
MIR_BinaryAcc.mutate(p,IA32_ADD,result,value.index);
}
 else if (value.base != null && value.base.getRegister() == result.getRegister() && value.index == null) {
MIR_BinaryAcc.mutate(p,IA32_ADD,result,IC(value.disp.toInt()));
}
 else if (value.base == null && value.index == null && value.index.getRegister() == result.getRegister() && value.scale == 0) {
MIR_BinaryAcc.mutate(p,IA32_ADD,result,IC(value.disp.toInt()));
}
 else if (value.base == null && value.index == null && value.index.getRegister() == result.getRegister() && value.disp.isZero()) {
MIR_BinaryAcc.mutate(p,IA32_SHL,result,IC(value.scale));
}
}
}
}
break;
case IA32_FCLEAR_opcode:
expandFClear(p,ir);
break;
case IA32_JCC2_opcode:
p.insertBefore(MIR_CondBranch.create(IA32_JCC,MIR_CondBranch2.getCond1(p),MIR_CondBranch2.getTarget1(p),MIR_CondBranch2.getBranchProfile1(p)));
MIR_CondBranch.mutate(p,IA32_JCC,MIR_CondBranch2.getCond2(p),MIR_CondBranch2.getTarget2(p),MIR_CondBranch2.getBranchProfile2(p));
break;
case CALL_SAVE_VOLATILE_opcode:
p.operator=IA32_CALL;
break;
case IA32_LOCK_CMPXCHG_opcode:
p.insertBefore(MIR_Empty.create(IA32_LOCK));
p.operator=IA32_CMPXCHG;
break;
case IA32_LOCK_CMPXCHG8B_opcode:
p.insertBefore(MIR_Empty.create(IA32_LOCK));
p.operator=IA32_CMPXCHG8B;
break;
case YIELDPOINT_PROLOGUE_opcode:
expandYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromPrologueMethod,OPT_IA32ConditionOperand.NE());
break;
case YIELDPOINT_EPILOGUE_opcode:
expandYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromEpilogueMethod,OPT_IA32ConditionOperand.NE());
break;
case YIELDPOINT_BACKEDGE_opcode:
expandYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromBackedgeMethod,OPT_IA32ConditionOperand.GT());
break;
case YIELDPOINT_OSR_opcode:
expandUnconditionalYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromOsrOptMethod);
break;
}
}
return 0;
}","/** 
 * @param ir the IR to expand
 * @return return value is garbage for IA32
 */
public static int expand(OPT_IR ir){
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  for (OPT_Instruction next, p=ir.firstInstructionInCodeOrder(); p != null; p=next) {
    next=p.nextInstructionInCodeOrder();
    p.setmcOffset(-1);
    p.scratchObject=null;
switch (p.getOpcode()) {
case MIR_LOWTABLESWITCH_opcode:
{
        OPT_BasicBlock thisBlock=p.getBasicBlock();
        OPT_BasicBlock nextBlock=thisBlock.splitNodeWithLinksAt(p,ir);
        nextBlock.firstInstruction().setmcOffset(-1);
        int NumTargets=MIR_LowTableSwitch.getNumberOfTargets(p);
        for (int i=0; i < NumTargets; i++) {
          thisBlock.appendInstruction(MIR_CaseLabel.create(IA32_OFFSET,IC(i),MIR_LowTableSwitch.getClearTarget(p,i)));
        }
        OPT_Register regS=MIR_LowTableSwitch.getIndex(p).getRegister();
        nextBlock.appendInstruction(MIR_BinaryAcc.create(IA32_SHL,new OPT_RegisterOperand(regS,VM_TypeReference.Int),IC(2)));
        nextBlock.appendInstruction(MIR_BinaryAcc.create(IA32_ADD,new OPT_RegisterOperand(regS,VM_TypeReference.Int),OPT_MemoryOperand.I(new OPT_RegisterOperand(phys.getESP(),VM_TypeReference.Int),(byte)4,null,null)));
        nextBlock.appendInstruction(MIR_Move.create(IA32_MOV,new OPT_RegisterOperand(regS,VM_TypeReference.Int),OPT_MemoryOperand.I(new OPT_RegisterOperand(regS,VM_TypeReference.Int),(byte)4,null,null)));
        nextBlock.appendInstruction(MIR_BinaryAcc.create(IA32_ADD,OPT_MemoryOperand.I(new OPT_RegisterOperand(phys.getESP(),VM_TypeReference.Int),(byte)4,null,null),new OPT_RegisterOperand(regS,VM_TypeReference.Int)));
        nextBlock.appendInstruction(MIR_Return.create(IA32_RET,IC(0),null,null));
        MIR_Call.mutate0(p,IA32_CALL,null,null,nextBlock.makeJumpTarget(),null);
      }
    break;
case IA32_TEST_opcode:
  if (MIR_Test.getVal2(p).isMemory()) {
    OPT_Operand tmp=MIR_Test.getClearVal1(p);
    MIR_Test.setVal1(p,MIR_Test.getClearVal2(p));
    MIR_Test.setVal2(p,tmp);
  }
break;
case NULL_CHECK_opcode:
{
OPT_Operand ref=NullCheck.getRef(p);
MIR_TrapIf.mutate(p,IA32_TRAPIF,null,ref.copy(),IC(0),OPT_IA32ConditionOperand.EQ(),OPT_TrapCodeOperand.NullPtr());
}
case IA32_TRAPIF_opcode:
{
OPT_BasicBlock thisBlock=p.getBasicBlock();
OPT_BasicBlock trap=thisBlock.createSubBlock(p.bcIndex,ir,0f);
thisBlock.insertOut(trap);
OPT_BasicBlock nextBlock=thisBlock.splitNodeWithLinksAt(p,ir);
thisBlock.insertOut(trap);
OPT_TrapCodeOperand tc=MIR_TrapIf.getClearTrapCode(p);
p.remove();
nextBlock.firstInstruction().setmcOffset(-1);
OPT_Instruction cmp=MIR_Compare.create(IA32_CMP,MIR_TrapIf.getVal1(p),MIR_TrapIf.getVal2(p));
if (p.isMarkedAsPEI()) {
cmp.markAsPEI();
cmp.copyPosition(p);
ir.MIRInfo.gcIRMap.insertTwin(p,cmp);
}
thisBlock.appendInstruction(cmp);
thisBlock.appendInstruction(MIR_CondBranch.create(IA32_JCC,MIR_TrapIf.getCond(p),trap.makeJumpTarget(),null));
ir.cfg.addLastInCodeOrder(trap);
if (tc.isArrayBounds()) {
OPT_Operand index=MIR_TrapIf.getVal2(p);
if (!(index instanceof OPT_RegisterOperand || index instanceof OPT_IntConstantOperand)) {
  index=IC(0xdeadbeef);
}
OPT_MemoryOperand mo=OPT_MemoryOperand.BD(ir.regpool.makePROp(),VM_ArchEntrypoints.arrayIndexTrapParamField.getOffset(),(byte)4,null,null);
trap.appendInstruction(MIR_Move.create(IA32_MOV,mo,index.copy()));
}
trap.appendInstruction(MIR_Trap.mutate(p,IA32_INT,null,tc));
ir.MIRInfo.gcIRMap.moveToEnd(p);
if (tc.isStackOverflow()) {
trap.appendInstruction(MIR_Branch.create(IA32_JMP,nextBlock.makeJumpTarget()));
}
}
break;
case IA32_FMOV_ENDING_LIVE_RANGE_opcode:
{
OPT_Operand result=MIR_Move.getResult(p);
OPT_Operand value=MIR_Move.getValue(p);
if (result.isRegister() && value.isRegister()) {
if (result.similar(value)) {
p.remove();
}
 else {
int i=OPT_PhysicalRegisterSet.getFPRIndex(result.asRegister().getRegister());
int j=OPT_PhysicalRegisterSet.getFPRIndex(value.asRegister().getRegister());
if (i == 0) {
MIR_XChng.mutate(p,IA32_FXCH,result,value);
}
 else if (j == 0) {
MIR_XChng.mutate(p,IA32_FXCH,value,result);
}
 else {
expandFmov(p,phys);
}
}
}
 else {
expandFmov(p,phys);
}
break;
}
case DUMMY_DEF_opcode:
case DUMMY_USE_opcode:
case REQUIRE_ESP_opcode:
case ADVISE_ESP_opcode:
p.remove();
break;
case IA32_FMOV_opcode:
expandFmov(p,phys);
break;
case IA32_MOV_opcode:
if (MIR_Move.getResult(p).isRegister() && MIR_Move.getValue(p).isIntConstant() && MIR_Move.getValue(p).asIntConstant().value == 0) {
OPT_Instruction x=next;
int futureDefs=0;
while (!BBend.conforms(x) && !OPT_PhysicalDefUse.usesEFLAGS(x.operator)) {
futureDefs|=x.operator.implicitDefs;
x=x.nextInstructionInCodeOrder();
}
if (BBend.conforms(x) || (futureDefs & OPT_PhysicalDefUse.maskAF_CF_OF_PF_SF_ZF) == OPT_PhysicalDefUse.maskAF_CF_OF_PF_SF_ZF) {
OPT_Operand result=MIR_Move.getClearResult(p);
MIR_BinaryAcc.mutate(p,IA32_XOR,result,result.copy());
}
}
break;
case IA32_SET__B_opcode:
if (MIR_Set.getResult(p).isRegister() && MIR_Unary.conforms(next) && (next.operator() == IA32_MOVZX__B)&& MIR_Unary.getResult(next).isRegister()&& MIR_Unary.getVal(next).similar(MIR_Unary.getResult(next))&& MIR_Unary.getVal(next).similar(MIR_Set.getResult(p))) {
OPT_Instruction x=p.getPrev();
OPT_Operand result=MIR_Unary.getResult(next);
boolean foundCmp=false;
outer: while (!Label.conforms(x)) {
OPT_OperandEnumeration e=x.getUses();
while (e.hasMoreElements()) {
if (e.next().similar(result)) {
break outer;
}
}
if (OPT_PhysicalDefUse.definesEFLAGS(x.operator) && !OPT_PhysicalDefUse.usesEFLAGS(x.operator)) {
foundCmp=true;
break outer;
}
x=x.getPrev();
}
if (foundCmp) {
next.remove();
MIR_BinaryAcc.mutate(next,IA32_XOR,result,MIR_Unary.getVal(next));
x.insertBefore(next);
next=p.nextInstructionInCodeOrder();
}
}
break;
case IA32_LEA_opcode:
{
OPT_MemoryOperand value=MIR_Lea.getValue(p);
OPT_RegisterOperand result=MIR_Lea.getResult(p);
if ((value.base != null && value.base.getRegister() == result.getRegister()) || (value.index != null && value.index.getRegister() == result.getRegister())) {
OPT_Instruction x=next;
int futureDefs=0;
while (!BBend.conforms(x) && !OPT_PhysicalDefUse.usesEFLAGS(x.operator)) {
futureDefs|=x.operator.implicitDefs;
x=x.nextInstructionInCodeOrder();
}
if (BBend.conforms(x) || (futureDefs & OPT_PhysicalDefUse.maskAF_CF_OF_PF_SF_ZF) == OPT_PhysicalDefUse.maskAF_CF_OF_PF_SF_ZF) {
if (value.base != null && value.index != null && value.index.getRegister() == result.getRegister() && value.disp.isZero() && value.scale == 0) {
MIR_BinaryAcc.mutate(p,IA32_ADD,result,value.base);
}
 else if (value.base != null && value.base.getRegister() == result.getRegister() && value.index != null && value.disp.isZero() && value.scale == 0) {
MIR_BinaryAcc.mutate(p,IA32_ADD,result,value.index);
}
 else if (value.base != null && value.base.getRegister() == result.getRegister() && value.index == null) {
MIR_BinaryAcc.mutate(p,IA32_ADD,result,IC(value.disp.toInt()));
}
 else if (value.base == null && value.index == null && value.index.getRegister() == result.getRegister() && value.scale == 0) {
MIR_BinaryAcc.mutate(p,IA32_ADD,result,IC(value.disp.toInt()));
}
 else if (value.base == null && value.index == null && value.index.getRegister() == result.getRegister() && value.disp.isZero()) {
MIR_BinaryAcc.mutate(p,IA32_SHL,result,IC(value.scale));
}
}
}
}
break;
case IA32_FCLEAR_opcode:
expandFClear(p,ir);
break;
case IA32_JCC2_opcode:
p.insertBefore(MIR_CondBranch.create(IA32_JCC,MIR_CondBranch2.getCond1(p),MIR_CondBranch2.getTarget1(p),MIR_CondBranch2.getBranchProfile1(p)));
MIR_CondBranch.mutate(p,IA32_JCC,MIR_CondBranch2.getCond2(p),MIR_CondBranch2.getTarget2(p),MIR_CondBranch2.getBranchProfile2(p));
break;
case CALL_SAVE_VOLATILE_opcode:
p.operator=IA32_CALL;
break;
case IA32_LOCK_CMPXCHG_opcode:
p.insertBefore(MIR_Empty.create(IA32_LOCK));
p.operator=IA32_CMPXCHG;
break;
case IA32_LOCK_CMPXCHG8B_opcode:
p.insertBefore(MIR_Empty.create(IA32_LOCK));
p.operator=IA32_CMPXCHG8B;
break;
case YIELDPOINT_PROLOGUE_opcode:
expandYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromPrologueMethod,OPT_IA32ConditionOperand.NE());
break;
case YIELDPOINT_EPILOGUE_opcode:
expandYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromEpilogueMethod,OPT_IA32ConditionOperand.NE());
break;
case YIELDPOINT_BACKEDGE_opcode:
expandYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromBackedgeMethod,OPT_IA32ConditionOperand.GT());
break;
case YIELDPOINT_OSR_opcode:
expandUnconditionalYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromOsrOptMethod);
break;
}
}
return 0;
}",0.997298884321785
149871,"/** 
 * Process a taken yieldpoint. May result in threadswitch, depending on state of various control flags on the processor object. NOTE: The ThreadSwitchSampling code in the adaptive system depends on (a) knowing how many stack frames there are between here and the code in which the yieldpoint is taken and (b) this number being identical for all possible paths (ie, all compilers) from a yieldpoint in compiled code to the entry of this method. Changing this portion of the call stack is delicate and requires changes in the various AOS listeners that do call stack sampling.
 */
@NoInline public static void yieldpoint(int whereFrom){
  boolean threadSwitch=false;
  VM_GreenProcessor p=VM_GreenProcessor.getCurrentProcessor();
  int takeYieldpointVal=p.takeYieldpoint;
  p.takeYieldpoint=0;
  if (VM.BuildForPowerPC && p.codePatchSyncRequested) {
    p.codePatchSyncRequested=false;
    VM_Magic.isync();
    VM_Synchronization.fetchAndDecrement(VM_Magic.getJTOC(),VM_ArchEntrypoints.toSyncProcessorsField.getOffset(),1);
  }
  if (!p.threadSwitchingEnabled()) {
    if (p.threadSwitchPending != 1) {
      p.threadSwitchPending=takeYieldpointVal;
    }
    return;
  }
  if (p.timeSliceExpired != 0) {
    p.timeSliceExpired=0;
    if (VM.CBSCallSamplesPerTick > 0) {
      p.yieldForCBSCall=true;
      p.takeYieldpoint=-1;
      p.firstCBSCallSample++;
      p.firstCBSCallSample=p.firstCBSCallSample % VM.CBSCallSampleStride;
      p.countdownCBSCall=p.firstCBSCallSample;
      p.numCBSCallSamples=VM.CBSCallSamplesPerTick;
    }
    if (VM.CBSMethodSamplesPerTick > 0) {
      p.yieldForCBSMethod=true;
      p.takeYieldpoint=-1;
      p.firstCBSMethodSample++;
      p.firstCBSMethodSample=p.firstCBSMethodSample % VM.CBSMethodSampleStride;
      p.countdownCBSMethod=p.firstCBSMethodSample;
      p.numCBSMethodSamples=VM.CBSMethodSamplesPerTick;
    }
    if (++p.interruptQuantumCounter >= VM.schedulingMultiplier) {
      threadSwitch=true;
      p.interruptQuantumCounter=0;
      if (VM_Scheduler.debugRequested && VM_GreenScheduler.allProcessorsInitialized) {
        VM_GreenScheduler.debuggerMutex.lock(""String_Node_Str"");
        if (VM_GreenScheduler.debuggerQueue.isEmpty()) {
          VM_GreenScheduler.debuggerMutex.unlock();
        }
 else {
          VM_GreenThread t=VM_GreenScheduler.debuggerQueue.dequeue();
          VM_GreenScheduler.debuggerMutex.unlock();
          t.schedule();
        }
      }
      if (VM_GreenScheduler.wakeupQueue.isReady()) {
        VM_GreenScheduler.wakeupMutex.lock(""String_Node_Str"");
        VM_GreenThread t=VM_GreenScheduler.wakeupQueue.dequeue();
        VM_GreenScheduler.wakeupMutex.unlock();
        if (t != null) {
          t.schedule();
        }
      }
    }
    if (VM.BuildForAdaptiveSystem) {
      VM_RuntimeMeasurements.takeTimerSample(whereFrom);
    }
    if (threadSwitch && (p.yieldForCBSMethod || p.yieldForCBSCall)) {
      p.threadSwitchWhenCBSComplete=true;
      threadSwitch=false;
    }
    if (VM.BuildForAdaptiveSystem) {
      threadSwitch|=OSR_Listener.checkForOSRPromotion(whereFrom);
    }
    if (threadSwitch) {
      p.yieldForCBSMethod=false;
      p.yieldForCBSCall=false;
      p.threadSwitchWhenCBSComplete=false;
    }
  }
  if (p.yieldForCBSCall) {
    if (!(whereFrom == BACKEDGE || whereFrom == OSROPT)) {
      if (--p.countdownCBSCall <= 0) {
        if (VM.BuildForAdaptiveSystem) {
          VM_RuntimeMeasurements.takeCBSCallSample(whereFrom);
        }
        p.countdownCBSCall=VM.CBSCallSampleStride;
        p.numCBSCallSamples--;
        if (p.numCBSCallSamples <= 0) {
          p.yieldForCBSCall=false;
          if (!p.yieldForCBSMethod) {
            p.threadSwitchWhenCBSComplete=false;
            threadSwitch=true;
          }
        }
      }
    }
    if (p.yieldForCBSCall) {
      p.takeYieldpoint=-1;
    }
  }
  if (p.yieldForCBSMethod) {
    if (--p.countdownCBSMethod <= 0) {
      if (VM.BuildForAdaptiveSystem) {
        VM_RuntimeMeasurements.takeCBSMethodSample(whereFrom);
      }
      p.countdownCBSMethod=VM.CBSMethodSampleStride;
      p.numCBSMethodSamples--;
      if (p.numCBSMethodSamples <= 0) {
        p.yieldForCBSMethod=false;
        if (!p.yieldForCBSCall) {
          p.threadSwitchWhenCBSComplete=false;
          threadSwitch=true;
        }
      }
    }
    if (p.yieldForCBSMethod) {
      p.takeYieldpoint=1;
    }
  }
  if (p.yieldToGCRequested) {
    p.yieldToGCRequested=false;
    p.yieldForCBSCall=false;
    p.yieldForCBSMethod=false;
    p.threadSwitchWhenCBSComplete=false;
    p.takeYieldpoint=0;
    threadSwitch=true;
  }
  if (VM.BuildForAdaptiveSystem && p.yieldToOSRRequested) {
    p.yieldToOSRRequested=false;
    OSR_Listener.handleOSRFromOpt();
    threadSwitch=true;
  }
  if (threadSwitch) {
    timerTickYield(whereFrom);
  }
  VM_GreenThread myThread=VM_GreenScheduler.getCurrentThread();
  if (VM.BuildForAdaptiveSystem && myThread.isWaitingForOsr) {
    ArchitectureSpecific.OSR_PostThreadSwitch.postProcess(myThread);
  }
}","/** 
 * Process a taken yieldpoint. May result in threadswitch, depending on state of various control flags on the processor object. NOTE: The ThreadSwitchSampling code in the adaptive system depends on (a) knowing how many stack frames there are between here and the code in which the yieldpoint is taken and (b) this number being identical for all possible paths (ie, all compilers) from a yieldpoint in compiled code to the entry of this method. Changing this portion of the call stack is delicate and requires changes in the various AOS listeners that do call stack sampling.
 */
@NoInline public static void yieldpoint(int whereFrom){
  boolean threadSwitch=false;
  boolean cbsOverrun=false;
  VM_GreenProcessor p=VM_GreenProcessor.getCurrentProcessor();
  int takeYieldpointVal=p.takeYieldpoint;
  p.takeYieldpoint=0;
  if (VM.BuildForPowerPC && p.codePatchSyncRequested) {
    p.codePatchSyncRequested=false;
    VM_Magic.isync();
    VM_Synchronization.fetchAndDecrement(VM_Magic.getJTOC(),VM_ArchEntrypoints.toSyncProcessorsField.getOffset(),1);
  }
  if (!p.threadSwitchingEnabled()) {
    if (p.threadSwitchPending != 1) {
      p.threadSwitchPending=takeYieldpointVal;
    }
    return;
  }
  if (p.timeSliceExpired != 0) {
    p.timeSliceExpired=0;
    if (p.yieldForCBSCall || p.yieldForCBSMethod) {
      cbsOverrun=true;
    }
 else {
      if (VM.CBSCallSamplesPerTick > 0) {
        p.yieldForCBSCall=true;
        p.takeYieldpoint=-1;
        p.firstCBSCallSample++;
        p.firstCBSCallSample=p.firstCBSCallSample % VM.CBSCallSampleStride;
        p.countdownCBSCall=p.firstCBSCallSample;
        p.numCBSCallSamples=VM.CBSCallSamplesPerTick;
      }
      if (VM.CBSMethodSamplesPerTick > 0) {
        p.yieldForCBSMethod=true;
        p.takeYieldpoint=-1;
        p.firstCBSMethodSample++;
        p.firstCBSMethodSample=p.firstCBSMethodSample % VM.CBSMethodSampleStride;
        p.countdownCBSMethod=p.firstCBSMethodSample;
        p.numCBSMethodSamples=VM.CBSMethodSamplesPerTick;
      }
    }
    if (++p.interruptQuantumCounter >= VM.schedulingMultiplier) {
      threadSwitch=true;
      p.interruptQuantumCounter=0;
      if (VM_Scheduler.debugRequested && VM_GreenScheduler.allProcessorsInitialized) {
        VM_GreenScheduler.debuggerMutex.lock(""String_Node_Str"");
        if (VM_GreenScheduler.debuggerQueue.isEmpty()) {
          VM_GreenScheduler.debuggerMutex.unlock();
        }
 else {
          VM_GreenThread t=VM_GreenScheduler.debuggerQueue.dequeue();
          VM_GreenScheduler.debuggerMutex.unlock();
          t.schedule();
        }
      }
      if (VM_GreenScheduler.wakeupQueue.isReady()) {
        VM_GreenScheduler.wakeupMutex.lock(""String_Node_Str"");
        VM_GreenThread t=VM_GreenScheduler.wakeupQueue.dequeue();
        VM_GreenScheduler.wakeupMutex.unlock();
        if (t != null) {
          t.schedule();
        }
      }
    }
    if (VM.BuildForAdaptiveSystem) {
      VM_RuntimeMeasurements.takeTimerSample(whereFrom);
    }
    if (threadSwitch && !cbsOverrun && (p.yieldForCBSMethod || p.yieldForCBSCall)) {
      p.threadSwitchWhenCBSComplete=true;
      threadSwitch=false;
    }
    if (VM.BuildForAdaptiveSystem) {
      threadSwitch|=OSR_Listener.checkForOSRPromotion(whereFrom);
    }
    if (threadSwitch) {
      p.yieldForCBSMethod=false;
      p.yieldForCBSCall=false;
      p.threadSwitchWhenCBSComplete=false;
    }
  }
  if (p.yieldForCBSCall) {
    if (!(whereFrom == BACKEDGE || whereFrom == OSROPT)) {
      if (--p.countdownCBSCall <= 0) {
        if (VM.BuildForAdaptiveSystem) {
          VM_RuntimeMeasurements.takeCBSCallSample(whereFrom);
        }
        p.countdownCBSCall=VM.CBSCallSampleStride;
        p.numCBSCallSamples--;
        if (p.numCBSCallSamples <= 0) {
          p.yieldForCBSCall=false;
          if (!p.yieldForCBSMethod) {
            p.threadSwitchWhenCBSComplete=false;
            threadSwitch=true;
          }
        }
      }
    }
    if (p.yieldForCBSCall) {
      p.takeYieldpoint=-1;
    }
  }
  if (p.yieldForCBSMethod) {
    if (--p.countdownCBSMethod <= 0) {
      if (VM.BuildForAdaptiveSystem) {
        VM_RuntimeMeasurements.takeCBSMethodSample(whereFrom);
      }
      p.countdownCBSMethod=VM.CBSMethodSampleStride;
      p.numCBSMethodSamples--;
      if (p.numCBSMethodSamples <= 0) {
        p.yieldForCBSMethod=false;
        if (!p.yieldForCBSCall) {
          p.threadSwitchWhenCBSComplete=false;
          threadSwitch=true;
        }
      }
    }
    if (p.yieldForCBSMethod) {
      p.takeYieldpoint=1;
    }
  }
  if (p.yieldToGCRequested) {
    p.yieldToGCRequested=false;
    p.yieldForCBSCall=false;
    p.yieldForCBSMethod=false;
    p.threadSwitchWhenCBSComplete=false;
    p.takeYieldpoint=0;
    threadSwitch=true;
  }
  if (VM.BuildForAdaptiveSystem && p.yieldToOSRRequested) {
    p.yieldToOSRRequested=false;
    OSR_Listener.handleOSRFromOpt();
    threadSwitch=true;
  }
  if (threadSwitch) {
    timerTickYield(whereFrom);
  }
  VM_GreenThread myThread=VM_GreenScheduler.getCurrentThread();
  if (VM.BuildForAdaptiveSystem && myThread.isWaitingForOsr) {
    ArchitectureSpecific.OSR_PostThreadSwitch.postProcess(myThread);
  }
}",0.983336600666536
149872,"/** 
 * Hash an address to a chunk (this is simply done via bit shifting)
 * @param address The address to be hashed
 * @return The chunk number that this address hashes into
 */
@Inline private static int hashAddress(Address address){
  if (Space.BYTES_IN_ADDRESS == 8)   return address.diff(Space.AVAILABLE_START).toWord().rshl(Space.LOG_BYTES_IN_CHUNK).toInt();
 else   return address.toWord().rshl(Space.LOG_BYTES_IN_CHUNK).toInt();
}","/** 
 * Hash an address to a chunk (this is simply done via bit shifting)
 * @param address The address to be hashed
 * @return The chunk number that this address hashes into
 */
@Inline private static int hashAddress(Address address){
  if (Space.BYTES_IN_ADDRESS == 8) {
    if (address.LT(Space.HEAP_START) || address.GE(Space.HEAP_END))     return 0;
 else     return address.diff(MAP_BASE_ADDRESS).toWord().rshl(Space.LOG_BYTES_IN_CHUNK).toInt();
  }
 else   return address.toWord().rshl(Space.LOG_BYTES_IN_CHUNK).toInt();
}",0.8665977249224406
149873,"@Inline private static Address reverseHashChunk(int chunk){
  if (Space.BYTES_IN_ADDRESS == 8)   return Space.AVAILABLE_START.plus(Word.fromIntZeroExtend(chunk).lsh(Space.LOG_BYTES_IN_CHUNK).toExtent());
 else   return Word.fromIntZeroExtend(chunk).lsh(Space.LOG_BYTES_IN_CHUNK).toAddress();
}","@Inline private static Address reverseHashChunk(int chunk){
  if (Space.BYTES_IN_ADDRESS == 8) {
    if (chunk == 0)     return Address.zero();
 else     return MAP_BASE_ADDRESS.plus(Word.fromIntZeroExtend(chunk).lsh(Space.LOG_BYTES_IN_CHUNK).toExtent());
  }
 else   return Word.fromIntZeroExtend(chunk).lsh(Space.LOG_BYTES_IN_CHUNK).toAddress();
}",0.8255451713395638
149874,"/** 
 * Terminate execution of current thread by abandoning all references to it and resuming execution in some other (ready) thread.
 */
@Interruptible public final void terminate(){
  if (VM.VerifyAssertions)   VM._assert(VM_Scheduler.getCurrentThread() == this);
  boolean terminateSystem=false;
  if (trace)   VM_Scheduler.trace(""String_Node_Str"",""String_Node_Str"");
  if (traceTermination) {
    VM.disableGC();
    VM.sysWriteln(""String_Node_Str"");
    VM_Scheduler.dumpStack();
    VM.sysWriteln(""String_Node_Str"");
    VM.enableGC();
  }
  if (VM.BuildForAdaptiveSystem) {
    VM_RuntimeMeasurements.monitorThreadExit();
  }
  java.lang.JikesRVMSupport.threadDied(thread);
  VM_Scheduler.threadCreationMutex.lock(""String_Node_Str"");
  VM_Processor.getCurrentProcessor().disableThreadSwitching(""String_Node_Str"");
  hardwareExceptionRegisters.inuse=false;
  VM_Scheduler.numActiveThreads-=1;
  if (daemon) {
    VM_Scheduler.numDaemons-=1;
  }
  if ((VM_Scheduler.numDaemons == VM_Scheduler.numActiveThreads) && (VM.mainThread != null) && VM.mainThread.launched) {
    terminateSystem=true;
  }
  if (traceTermination) {
    VM.sysWriteln(""String_Node_Str"",daemon);
    VM.sysWriteln(""String_Node_Str"",VM_Scheduler.numActiveThreads);
    VM.sysWriteln(""String_Node_Str"",VM_Scheduler.numDaemons);
    VM.sysWriteln(""String_Node_Str"",terminateSystem);
  }
  VM_Processor.getCurrentProcessor().enableThreadSwitching();
  VM_Scheduler.threadCreationMutex.unlock();
  if (VM.VerifyAssertions) {
    if (VM.fullyBooted || !terminateSystem) {
      VM_Processor.getCurrentProcessor().failIfThreadSwitchingDisabled();
    }
  }
  if (terminateSystem) {
    if (uncaughtExceptionCount > 0) {
      if (VM.TraceExceptionDelivery) {
        VM.sysWriteln(""String_Node_Str"");
      }
      System.exit(VM.EXIT_STATUS_DYING_WITH_UNCAUGHT_EXCEPTION);
    }
 else     if (thread instanceof VM_MainThread) {
      VM_MainThread mt=(VM_MainThread)thread;
      if (!mt.launched) {
        System.exit(VM.EXIT_STATUS_MAIN_THREAD_COULD_NOT_LAUNCH);
      }
    }
    System.exit(0);
    if (VM.VerifyAssertions)     VM._assert(VM.NOT_REACHED);
  }
  if (jniEnv != null) {
    VM_JNIEnvironment.deallocateEnvironment(jniEnv);
    jniEnv=null;
  }
synchronized (this) {
    state=State.TERMINATED;
    notifyAll(this);
  }
  VM_Scheduler.releaseThreadSlot(threadSlot,this);
  beingDispatched=true;
  VM_Processor.getCurrentProcessor().dispatch(false);
  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);
}","/** 
 * Terminate execution of current thread by abandoning all references to it and resuming execution in some other (ready) thread.
 */
@Interruptible public final void terminate(){
  if (VM.VerifyAssertions)   VM._assert(VM_Scheduler.getCurrentThread() == this);
  boolean terminateSystem=false;
  if (trace)   VM_Scheduler.trace(""String_Node_Str"",""String_Node_Str"");
  if (traceTermination) {
    VM.disableGC();
    VM.sysWriteln(""String_Node_Str"");
    VM_Scheduler.dumpStack();
    VM.sysWriteln(""String_Node_Str"");
    VM.enableGC();
  }
  if (VM.BuildForAdaptiveSystem) {
    VM_RuntimeMeasurements.monitorThreadExit();
  }
  java.lang.JikesRVMSupport.threadDied(thread);
  VM_Scheduler.threadCreationMutex.lock(""String_Node_Str"");
  VM_Processor.getCurrentProcessor().disableThreadSwitching(""String_Node_Str"");
  hardwareExceptionRegisters.inuse=false;
  VM_Scheduler.numActiveThreads-=1;
  if (daemon) {
    VM_Scheduler.numDaemons-=1;
  }
  if ((VM_Scheduler.numDaemons == VM_Scheduler.numActiveThreads) && (VM.mainThread != null) && VM.mainThread.launched) {
    terminateSystem=true;
  }
  if (terminateSystem) {
    if (systemShuttingDown == false) {
      systemShuttingDown=true;
    }
 else {
      terminateSystem=false;
    }
  }
  if (traceTermination) {
    VM.sysWriteln(""String_Node_Str"",daemon);
    VM.sysWriteln(""String_Node_Str"",VM_Scheduler.numActiveThreads);
    VM.sysWriteln(""String_Node_Str"",VM_Scheduler.numDaemons);
    VM.sysWriteln(""String_Node_Str"",terminateSystem);
  }
  VM_Processor.getCurrentProcessor().enableThreadSwitching();
  VM_Scheduler.threadCreationMutex.unlock();
  if (VM.VerifyAssertions) {
    if (VM.fullyBooted || !terminateSystem) {
      VM_Processor.getCurrentProcessor().failIfThreadSwitchingDisabled();
    }
  }
  if (terminateSystem) {
    if (uncaughtExceptionCount > 0) {
      if (VM.TraceExceptionDelivery) {
        VM.sysWriteln(""String_Node_Str"");
      }
      System.exit(VM.EXIT_STATUS_DYING_WITH_UNCAUGHT_EXCEPTION);
    }
 else     if (thread instanceof VM_MainThread) {
      VM_MainThread mt=(VM_MainThread)thread;
      if (!mt.launched) {
        System.exit(VM.EXIT_STATUS_MAIN_THREAD_COULD_NOT_LAUNCH);
      }
    }
    System.exit(0);
    if (VM.VerifyAssertions)     VM._assert(VM.NOT_REACHED);
  }
  if (jniEnv != null) {
    VM_JNIEnvironment.deallocateEnvironment(jniEnv);
    jniEnv=null;
  }
synchronized (this) {
    state=State.TERMINATED;
    notifyAll(this);
  }
  VM_Scheduler.releaseThreadSlot(threadSlot,this);
  beingDispatched=true;
  VM_Processor.getCurrentProcessor().dispatch(false);
  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);
}",0.9712062256809338
149875,"/** 
 * Resize the free list associated with this resource.  This method is called to re-set the free list once the global free list (which it shares) is finalized.  There's a circular dependency, so we need an explicit call-back to reset the free list size.
 */
@Interruptible public void resizeFreeList(){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!contiguous && !Plan.isInitialized());
  freeList.resizeFreeList();
}","/** 
 * Resize the free list associated with this resource and nail down its start address. This method is called to re-set the free list once the global free list (which it shares) is finalized and the base address is finalized.  There's a circular dependency, so we need an explicit call-back to reset the free list size and start
 * @param startAddress The final start address for the discontiguous space.
 */
@Interruptible public void resizeFreeList(Address startAddress){
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!contiguous && !Plan.isInitialized());
  start=startAddress;
  freeList.resizeFreeList();
}",0.8133333333333334
149876,"/** 
 * Finalize the space map, establishing which virtual memory is nailed down, and then placing the rest into a map to be used by discontiguous spaces.
 */
@Interruptible public static void finalizeStaticSpaceMap(){
  int start=hashAddress(Space.getDiscontigStart());
  int end=hashAddress(Space.getDiscontigEnd());
  int pages=(end - start) * Space.PAGES_IN_CHUNK;
  globalPageMap.resizeFreeList(pages,pages);
  for (int pr=0; pr < sharedDiscontigFLCount; pr++)   sharedFLMap[pr].resizeFreeList();
  regionMap.alloc(start);
  for (int chunk=start; chunk < end; chunk++)   regionMap.alloc(1);
  regionMap.alloc(Space.MAX_CHUNKS - end);
  int firstPage=0;
  for (int chunk=start; chunk < end; chunk++) {
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(spaceMap[chunk] == null);
    totalAvailableDiscontiguousChunks++;
    regionMap.free(chunk);
    globalPageMap.setUncoalescable(firstPage);
    int tmp=globalPageMap.alloc(Space.PAGES_IN_CHUNK);
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(tmp == firstPage);
    firstPage+=Space.PAGES_IN_CHUNK;
  }
}","/** 
 * Finalize the space map, establishing which virtual memory is nailed down, and then placing the rest into a map to be used by discontiguous spaces.
 */
@Interruptible public static void finalizeStaticSpaceMap(){
  Address startAddress=Space.getDiscontigStart();
  int start=hashAddress(startAddress);
  int end=hashAddress(Space.getDiscontigEnd());
  int pages=(end - start) * Space.PAGES_IN_CHUNK + 1;
  globalPageMap.resizeFreeList(pages,pages);
  for (int pr=0; pr < sharedDiscontigFLCount; pr++)   sharedFLMap[pr].resizeFreeList(startAddress);
  regionMap.alloc(start);
  for (int chunk=start; chunk < end; chunk++)   regionMap.alloc(1);
  regionMap.alloc(Space.MAX_CHUNKS - end);
  int firstPage=0;
  for (int chunk=start; chunk < end; chunk++) {
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(spaceMap[chunk] == null);
    totalAvailableDiscontiguousChunks++;
    regionMap.free(chunk);
    globalPageMap.setUncoalescable(firstPage);
    int tmp=globalPageMap.alloc(Space.PAGES_IN_CHUNK);
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(tmp == firstPage);
    firstPage+=Space.PAGES_IN_CHUNK;
  }
}",0.955969133000454
149877,"/** 
 * Finalize the space map, establishing which virtual memory is nailed down, and then placing the rest into a map to be used by discontiguous spaces.
 */
public static void finalizeStaticSpaceMap(){
  int start=hashAddress(Space.AVAILABLE_START);
  int end=hashAddress(Space.AVAILABLE_END);
  regionMap.alloc(start);
  for (int chunk=start; chunk < end; chunk++)   regionMap.alloc(1);
  regionMap.alloc(Space.MAX_CHUNKS - end);
  int firstPage=0;
  for (int chunk=start; chunk < end; chunk++) {
    if (spaceMap[chunk] == null) {
      totalAvailableDiscontiguousChunks++;
      regionMap.free(chunk);
      globalPageMap.setUncoalescable(firstPage);
      int tmp=globalPageMap.alloc(Space.PAGES_IN_CHUNK);
      if (VM.VERIFY_ASSERTIONS)       VM.assertions._assert(tmp == firstPage);
      firstPage+=Space.PAGES_IN_CHUNK;
    }
  }
}","/** 
 * Finalize the space map, establishing which virtual memory is nailed down, and then placing the rest into a map to be used by discontiguous spaces.
 */
public static void finalizeStaticSpaceMap(){
  int start=hashAddress(Space.AVAILABLE_START);
  int end=hashAddress(Space.AVAILABLE_END);
  regionMap.alloc(start);
  for (int chunk=start; chunk < end; chunk++)   regionMap.alloc(1);
  regionMap.alloc(Space.MAX_CHUNKS - end);
  int firstPage=0;
  for (int chunk=start; chunk < end; chunk++) {
    if (spaceMap[chunk] == null) {
      totalAvailableDiscontiguousChunks++;
      regionMap.free(chunk);
    }
    globalPageMap.setUncoalescable(firstPage);
    int tmp=globalPageMap.alloc(Space.PAGES_IN_CHUNK);
    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(tmp == firstPage);
    firstPage+=Space.PAGES_IN_CHUNK;
  }
}",0.989247311827957
149878,"/** 
 * Suspend thread if a suspend is pending. Called by processor dispatch loop.
 * @return whether the thread had a suspend pending
 */
final boolean suspendIfPending(){
  if (suspendPending == 1) {
    if (VM_Synchronization.tryCompareAndSwap(this,suspendPendingOffset,1,0)) {
      return true;
    }
 else {
    }
  }
  return false;
}","/** 
 * Suspend thread if a suspend is pending. Called by processor dispatch loop. Thread will be dequeued and not run if this returns true.
 * @return whether the thread had a suspend pending
 */
final boolean suspendIfPending(){
  if (suspendPending == 1) {
    if (VM_Synchronization.tryCompareAndSwap(this,suspendPendingOffset,1,0)) {
      return true;
    }
 else {
    }
  }
  return false;
}",0.9216216216216216
149879,"/** 
 * Thread model dependent part of thread resumption
 */
@Override protected final void resumeInternal(){
  VM_Synchronization.tryCompareAndSwap(this,suspendPendingOffset,1,0);
  VM_GreenProcessor.getCurrentProcessor().scheduleThread(this);
}","/** 
 * Thread model dependent part of thread resumption
 */
@Override protected final void resumeInternal(){
  if (VM_Synchronization.tryCompareAndSwap(this,suspendPendingOffset,1,0)) {
  }
 else {
    VM_GreenProcessor.getCurrentProcessor().scheduleThread(this);
  }
}",0.9457364341085271
149880,"/** 
 * Thread model dependent part of thread suspension
 */
@Override protected final void suspendInternal(){
  VM_Synchronization.tryCompareAndSwap(this,suspendPendingOffset,0,1);
  if (this == VM_GreenScheduler.getCurrentThread())   yield();
}","/** 
 * Thread model dependent part of thread suspension
 */
@Override protected final void suspendInternal(){
  if (VM_Synchronization.tryCompareAndSwap(this,suspendPendingOffset,0,1)) {
  }
 else {
  }
  if (this == VM_GreenScheduler.getCurrentThread())   yield();
}",0.953307392996109
149881,"/** 
 * Add a thread to tail of queue. 
 */
@Override @UninterruptibleNoWarn public void enqueue(VM_GreenThread t){
  if (VM.VerifyAssertions && t.getNext() != null) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWriteln(VM_Magic.getObjectType(t).getDescriptor());
    VM._assert(false);
  }
  if (VM.VerifyAssertions)   VM._assert(t.isQueueable());
  if (head == null) {
    head=t;
  }
 else {
    tail.setNext(t);
  }
  tail=t;
}","/** 
 * Add a thread to tail of queue. 
 */
@Override @UninterruptibleNoWarn public void enqueue(VM_GreenThread t){
  if (VM.VerifyAssertions && t.getNext() != null) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(VM_Magic.getObjectType(t).getDescriptor());
    VM.sysWrite(""String_Node_Str"",t.getIndex());
    VM.sysWrite(""String_Node_Str"",t.toString());
    VM.sysWrite(""String_Node_Str"",t.getJavaLangThread().toString());
    t=t.getNext();
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(VM_Magic.getObjectType(t).getDescriptor());
    VM.sysWrite(""String_Node_Str"",t.getIndex());
    VM.sysWrite(""String_Node_Str"",t.toString());
    VM.sysWrite(""String_Node_Str"",t.getJavaLangThread().toString());
    VM_Scheduler.dumpVirtualMachine();
    VM.sysFail(""String_Node_Str"");
  }
  if (VM.VerifyAssertions)   VM._assert(t.isQueueable());
  if (head == null) {
    head=t;
  }
 else {
    tail.setNext(t);
  }
  tail=t;
}",0.6129032258064516
149882,"/** 
 * Get a thread that has become ready to run.
 * @return the thread, or null if no threads from this queue are ready
 */
@Override public VM_GreenThread dequeue(){
  VM_GreenThread prev=null;
  VM_GreenThread thread=head;
  if (VM.VerifyAssertions)   VM._assert(ready >= 0);
  while (thread != null) {
    if (thread.waitData.isFinished()) {
      break;
    }
    prev=thread;
    thread=thread.getNext();
  }
  if (thread != null) {
    if (prev == null) {
      head=thread.getNext();
    }
 else {
      prev.setNext(thread.getNext());
    }
    if (tail == thread) {
      tail=prev;
    }
    prev=null;
    --length;
    --ready;
  }
 else {
    if (VM.VerifyAssertions)     VM._assert(ready == 0);
  }
  return thread;
}","/** 
 * Get a thread that has become ready to run.
 * @return the thread, or null if no threads from this queue are ready
 */
@Override public VM_GreenThread dequeue(){
  VM_GreenThread prev=null;
  VM_GreenThread thread=head;
  if (VM.VerifyAssertions)   VM._assert(ready >= 0);
  while (thread != null) {
    if (thread.waitData.isFinished()) {
      break;
    }
    prev=thread;
    thread=thread.getNext();
  }
  if (thread != null) {
    if (prev == null) {
      head=thread.getNext();
    }
 else {
      prev.setNext(thread.getNext());
    }
    if (tail == thread) {
      tail=prev;
    }
    thread.setNext(null);
    --length;
    --ready;
  }
 else {
    if (VM.VerifyAssertions)     VM._assert(ready == 0);
  }
  return thread;
}",0.980365605958023
149883,"/** 
 * Dump state for debugging.
 */
@Interruptible void dump(String prefix){
  VM.sysWrite(prefix);
  for (VM_GreenThread t=head; t != null; t=t.getNext()) {
    VM.sysWrite(t.getIndex());
    dumpWaitDescription((VM_GreenThread)t);
  }
  VM.sysWrite(""String_Node_Str"");
}","/** 
 * Dump state for debugging.
 */
@Interruptible void dump(String prefix){
  VM.sysWrite(prefix);
  for (VM_GreenThread t=head; t != null; t=t.getNext()) {
    VM.sysWrite(t.getIndex());
    dumpWaitDescription(t);
  }
  VM.sysWrite(""String_Node_Str"");
}",0.9699248120300752
149884,"private OSR_ExecutionState getExecStateSequence(VM_Thread thread,byte[] stack,Offset ipOffset,Offset fpOffset,int cmid,Offset tsFPOffset,OSR_TempRegisters registers,OSR_EncodedOSRMap osrmap){
  int lpart_one=0;
  OSR_MapIterator iterator=osrmap.getOsrMapIteratorForMCOffset(ipOffset);
  if (VM.VerifyAssertions)   VM._assert(iterator != null);
  OSR_ExecutionState state=new OSR_ExecutionState(thread,fpOffset,cmid,iterator.getBcIndex(),tsFPOffset);
  VM_MethodReference mref=VM_MemberReference.getMemberRef(iterator.getMethodId()).asMethodReference();
  state.setMethod((VM_NormalMethod)mref.peekResolvedMethod());
  state.callerState=null;
  if (VM.TraceOnStackReplacement) {
    VM.sysWriteln(""String_Node_Str"" + state.meth.toString());
  }
  while (iterator.hasMore()) {
    if (iterator.getMethodId() != state.meth.getId()) {
      OSR_ExecutionState newstate=new OSR_ExecutionState(thread,fpOffset,cmid,iterator.getBcIndex(),tsFPOffset);
      mref=VM_MemberReference.getMemberRef(iterator.getMethodId()).asMethodReference();
      newstate.setMethod((VM_NormalMethod)mref.peekResolvedMethod());
      newstate.callerState=state;
      state=newstate;
      if (VM.TraceOnStackReplacement) {
        VM.sysWriteln(""String_Node_Str"" + state.meth.toString());
      }
    }
    int kind=iterator.getKind();
    int num=iterator.getNumber();
    int tcode=iterator.getTypeCode();
    int vtype=iterator.getValueType();
    int value=iterator.getValue();
    iterator.moveToNext();
    if (VM.TraceOnStackReplacement) {
      VM.sysWrite((kind == LOCAL) ? ""String_Node_Str"" : ""String_Node_Str"");
      VM.sysWrite(num);
      VM.sysWrite(""String_Node_Str"");
      if (vtype == ICONST) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(value);
      }
 else       if (vtype == PHYREG) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(GPR_NAMES[value]);
      }
 else       if (vtype == SPILL) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(value);
      }
      VM.sysWriteln();
    }
switch (tcode) {
case INT:
{
        int ibits=getIntBitsFrom(vtype,value,stack,fpOffset,registers);
        state.add(new OSR_VariableElement(kind,num,tcode,ibits));
        break;
      }
case FLOAT:
{
      float fv=(float)getDoubleFrom(vtype,value,stack,fpOffset,registers);
      int ibits=VM_Magic.floatAsIntBits(fv);
      state.add(new OSR_VariableElement(kind,num,tcode,ibits));
      break;
    }
case HIGH_64BIT:
{
    lpart_one=value;
    break;
  }
case LONG:
{
  long lbits=getLongBitsFrom(vtype,lpart_one,value,stack,fpOffset,registers);
  lpart_one=0;
  state.add(new OSR_VariableElement(kind,num,LONG,lbits));
  break;
}
case DOUBLE:
{
double dv=getDoubleFrom(vtype,value,stack,fpOffset,registers);
long lbits=VM_Magic.doubleAsLongBits(dv);
state.add(new OSR_VariableElement(kind,num,tcode,lbits));
break;
}
case RET_ADDR:
{
int bcIndex=getIntBitsFrom(vtype,value,stack,fpOffset,registers);
state.add(new OSR_VariableElement(kind,num,tcode,bcIndex));
break;
}
case WORD:
{
if (VM.BuildFor64Addr) VM._assert(VM.NOT_REACHED);
int word=getIntBitsFrom(vtype,value,stack,fpOffset,registers);
state.add(new OSR_VariableElement(kind,num,tcode,word));
break;
}
case REF:
{
Object ref=getObjectFrom(vtype,value,stack,fpOffset,registers);
state.add(new OSR_VariableElement(kind,num,tcode,ref));
break;
}
default :
if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);
break;
}
}
return state;
}","private OSR_ExecutionState getExecStateSequence(VM_Thread thread,byte[] stack,Offset ipOffset,Offset fpOffset,int cmid,Offset tsFPOffset,OSR_TempRegisters registers,OSR_EncodedOSRMap osrmap){
  int lvalue_one=0;
  int lvtype_one=0;
  OSR_MapIterator iterator=osrmap.getOsrMapIteratorForMCOffset(ipOffset);
  if (VM.VerifyAssertions)   VM._assert(iterator != null);
  OSR_ExecutionState state=new OSR_ExecutionState(thread,fpOffset,cmid,iterator.getBcIndex(),tsFPOffset);
  VM_MethodReference mref=VM_MemberReference.getMemberRef(iterator.getMethodId()).asMethodReference();
  state.setMethod((VM_NormalMethod)mref.peekResolvedMethod());
  state.callerState=null;
  if (VM.TraceOnStackReplacement) {
    VM.sysWriteln(""String_Node_Str"" + state.meth.toString());
  }
  while (iterator.hasMore()) {
    if (iterator.getMethodId() != state.meth.getId()) {
      OSR_ExecutionState newstate=new OSR_ExecutionState(thread,fpOffset,cmid,iterator.getBcIndex(),tsFPOffset);
      mref=VM_MemberReference.getMemberRef(iterator.getMethodId()).asMethodReference();
      newstate.setMethod((VM_NormalMethod)mref.peekResolvedMethod());
      newstate.callerState=state;
      state=newstate;
      if (VM.TraceOnStackReplacement) {
        VM.sysWriteln(""String_Node_Str"" + state.meth.toString());
      }
    }
    int kind=iterator.getKind();
    int num=iterator.getNumber();
    int tcode=iterator.getTypeCode();
    int vtype=iterator.getValueType();
    int value=iterator.getValue();
    iterator.moveToNext();
    if (VM.TraceOnStackReplacement) {
      VM.sysWrite((kind == LOCAL) ? ""String_Node_Str"" : ""String_Node_Str"");
      VM.sysWrite(num);
      VM.sysWrite(""String_Node_Str"");
      if (vtype == ICONST) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(value);
      }
 else       if (vtype == PHYREG) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(GPR_NAMES[value]);
      }
 else       if (vtype == SPILL) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(value);
      }
      VM.sysWriteln();
    }
switch (tcode) {
case INT:
{
        int ibits=getIntBitsFrom(vtype,value,stack,fpOffset,registers);
        state.add(new OSR_VariableElement(kind,num,tcode,ibits));
        break;
      }
case FLOAT:
{
      float fv=(float)getDoubleFrom(vtype,value,stack,fpOffset,registers);
      int ibits=VM_Magic.floatAsIntBits(fv);
      state.add(new OSR_VariableElement(kind,num,tcode,ibits));
      break;
    }
case HIGH_64BIT:
{
    lvalue_one=value;
    lvtype_one=vtype;
    break;
  }
case LONG:
{
  long lbits=getLongBitsFrom(lvtype_one,lvalue_one,vtype,value,stack,fpOffset,registers);
  lvalue_one=0;
  lvtype_one=0;
  state.add(new OSR_VariableElement(kind,num,LONG,lbits));
  break;
}
case DOUBLE:
{
double dv=getDoubleFrom(vtype,value,stack,fpOffset,registers);
long lbits=VM_Magic.doubleAsLongBits(dv);
state.add(new OSR_VariableElement(kind,num,tcode,lbits));
break;
}
case RET_ADDR:
{
int bcIndex=getIntBitsFrom(vtype,value,stack,fpOffset,registers);
state.add(new OSR_VariableElement(kind,num,tcode,bcIndex));
break;
}
case WORD:
{
if (VM.BuildFor64Addr) VM._assert(VM.NOT_REACHED);
int word=getIntBitsFrom(vtype,value,stack,fpOffset,registers);
state.add(new OSR_VariableElement(kind,num,tcode,word));
break;
}
case REF:
{
Object ref=getObjectFrom(vtype,value,stack,fpOffset,registers);
state.add(new OSR_VariableElement(kind,num,tcode,ref));
break;
}
default :
if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);
break;
}
}
return state;
}",0.9807942238267148
149885,"private static long getLongBitsFrom(int vtype,int valueHigh,int valueLow,byte[] stack,Offset fpOffset,OSR_TempRegisters registers){
  if (vtype == LCONST || vtype == ACONST) {
    return ((((long)valueHigh) << 32) | (((long)valueLow) & 0x0FFFFFFFF));
  }
 else   if (VM.BuildFor32Addr) {
    if (vtype == PHYREG) {
      return ((((long)registers.gprs.get(valueHigh).toInt()) << 32) | (((long)registers.gprs.get(valueLow).toInt()) & 0x0FFFFFFFFL));
    }
 else     if (vtype == SPILL) {
      long lvalue=((long)VM_Magic.getIntAtOffset(stack,fpOffset.minus(valueHigh))) << 32;
      return (lvalue | (((long)VM_Magic.getIntAtOffset(stack,fpOffset.minus(valueLow))) & 0x0FFFFFFFFL));
    }
  }
 else   if (VM.BuildFor64Addr) {
    if (vtype == PHYREG) {
      return registers.gprs.get(valueLow).toLong();
    }
 else     if (vtype == SPILL) {
      return VM_Magic.getLongAtOffset(stack,fpOffset.minus(valueLow));
    }
  }
  if (VM.VerifyAssertions)   VM._assert(NOT_REACHED);
  return -1L;
}","private static long getLongBitsFrom(int vtypeHigh,int valueHigh,int vtypeLow,int valueLow,byte[] stack,Offset fpOffset,OSR_TempRegisters registers){
  if (vtypeLow == LCONST || vtypeLow == ACONST) {
    if (VM.VerifyAssertions)     VM._assert(vtypeHigh == vtypeLow);
    return ((((long)valueHigh) << 32) | (((long)valueLow) & 0x0FFFFFFFFL));
  }
 else   if (VM.BuildFor32Addr) {
    if (VM.VerifyAssertions)     VM._assert(vtypeHigh == PHYREG || vtypeHigh == SPILL);
    if (VM.VerifyAssertions)     VM._assert(vtypeLow == PHYREG || vtypeLow == SPILL);
    long lowPart, highPart;
    if (vtypeLow == PHYREG) {
      lowPart=((long)registers.gprs.get(valueLow).toInt()) & 0x0FFFFFFFFL;
    }
 else {
      lowPart=((long)VM_Magic.getIntAtOffset(stack,fpOffset.minus(valueLow))) & 0x0FFFFFFFFL;
    }
    if (vtypeHigh == PHYREG) {
      highPart=((long)registers.gprs.get(valueHigh).toInt());
    }
 else {
      highPart=((long)VM_Magic.getIntAtOffset(stack,fpOffset.minus(valueHigh)));
    }
    return (highPart << 32) | lowPart;
  }
 else   if (VM.BuildFor64Addr) {
    if (vtypeLow == PHYREG) {
      return registers.gprs.get(valueLow).toLong();
    }
 else     if (vtypeLow == SPILL) {
      return VM_Magic.getLongAtOffset(stack,fpOffset.minus(valueLow));
    }
  }
  if (VM.VerifyAssertions)   VM._assert(NOT_REACHED);
  return -1L;
}",0.7137355584082157
149886,"/** 
 * Copy an object (and, recursively, any of its fields or elements that are references) from host jdk address space into image.
 * @param jdkObject object to be copied
 * @param allocOnly if allocOnly is true, the TIB and other reference fields are not recursively copied
 * @param overwriteAddress if !overwriteAddress.isMax(), then copy object to given address
 * @param parentObject
 * @return offset of copied object within image, in bytes(OBJECT_NOT_PRESENT --> object not copied: it's not part of bootimage)
 */
private static Address copyToBootImage(Object jdkObject,boolean allocOnly,Address overwriteAddress,Object parentObject) throws IllegalAccessException {
  try {
    BootImageMap.Entry mapEntry=BootImageMap.findOrCreateEntry(jdkObject);
    if ((!mapEntry.imageAddress.EQ(OBJECT_NOT_ALLOCATED)) && overwriteAddress.isMax())     return mapEntry.imageAddress;
    if (verbose >= 2)     depth++;
    Class jdkType=jdkObject.getClass();
    VM_Type rvmType=getRvmType(jdkType);
    if (rvmType == null) {
      if (verbose >= 2)       traverseObject(jdkObject);
      if (verbose >= 2)       depth--;
      return OBJECT_NOT_PRESENT;
    }
    if (jdkType.isArray()) {
      VM_Array rvmArrayType=rvmType.asArray();
      int arrayCount=Array.getLength(jdkObject);
      Address arrayImageAddress=(overwriteAddress.isMax()) ? bootImage.allocateArray(rvmArrayType,arrayCount) : overwriteAddress;
      mapEntry.imageAddress=arrayImageAddress;
      if (verbose >= 2) {
        if (depth == depthCutoff)         say(SPACES.substring(0,depth + 1),""String_Node_Str"");
 else         if (depth < depthCutoff) {
          String tab=SPACES.substring(0,depth + 1);
          if (depth == 0 && jtocCount >= 0)           tab=tab + ""String_Node_Str"" + String.valueOf(jtocCount)+ ""String_Node_Str"";
          int arraySize=rvmArrayType.getInstanceSize(arrayCount);
          say(tab,""String_Node_Str"",jdkType.getName(),""String_Node_Str"",String.valueOf(arrayCount),(arraySize >= LARGE_ARRAY_SIZE) ? ""String_Node_Str"" : ""String_Node_Str"");
        }
      }
      VM_Type rvmElementType=rvmArrayType.getElementType();
      if (false && rvmElementType.equals(VM_Type.IntType)) {
        if (parentObject != null) {
          Class parentObjectType=parentObject.getClass();
          VM.sysWrite(""String_Node_Str"",4 * ((int[])jdkObject).length);
          VM.sysWriteln(""String_Node_Str"",parentObjectType.toString());
        }
 else {
          VM.sysWriteln(""String_Node_Str"");
        }
      }
      if (rvmElementType.isPrimitiveType()) {
        if (rvmElementType.equals(VM_Type.BooleanType)) {
          boolean[] values=(boolean[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setByte(arrayImageAddress.plus(i),values[i] ? 1 : 0);
        }
 else         if (rvmElementType.equals(VM_Type.ByteType)) {
          byte[] values=(byte[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setByte(arrayImageAddress.plus(i),values[i]);
        }
 else         if (rvmElementType.equals(VM_Type.CharType)) {
          char[] values=(char[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setHalfWord(arrayImageAddress.plus(i << LOG_BYTES_IN_CHAR),values[i]);
        }
 else         if (rvmElementType.equals(VM_Type.ShortType)) {
          short[] values=(short[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setHalfWord(arrayImageAddress.plus(i << LOG_BYTES_IN_SHORT),values[i]);
        }
 else         if (rvmElementType.equals(VM_Type.IntType)) {
          int[] values=(int[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setFullWord(arrayImageAddress.plus(i << LOG_BYTES_IN_INT),values[i]);
        }
 else         if (rvmElementType.equals(VM_Type.LongType)) {
          long[] values=(long[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setDoubleWord(arrayImageAddress.plus(i << LOG_BYTES_IN_LONG),values[i]);
        }
 else         if (rvmElementType.equals(VM_Type.FloatType)) {
          float[] values=(float[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setFullWord(arrayImageAddress.plus(i << LOG_BYTES_IN_FLOAT),Float.floatToIntBits(values[i]));
        }
 else         if (rvmElementType.equals(VM_Type.DoubleType)) {
          double[] values=(double[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setDoubleWord(arrayImageAddress.plus(i << LOG_BYTES_IN_DOUBLE),Double.doubleToLongBits(values[i]));
        }
 else         fail(""String_Node_Str"" + rvmArrayType);
      }
 else {
        Object[] values=(Object[])jdkObject;
        Class jdkClass=jdkObject.getClass();
        if (!allocOnly) {
          for (int i=0; i < arrayCount; ++i) {
            if (values[i] != null) {
              if (verbose >= 2)               traceContext.push(values[i].getClass().getName(),jdkClass.getName(),i);
              Address imageAddress=copyToBootImage(values[i],allocOnly,Address.max(),jdkObject);
              if (imageAddress.EQ(OBJECT_NOT_PRESENT)) {
                if (verbose >= 2)                 traceContext.traceObjectNotInBootImage();
                bootImage.setNullAddressWord(arrayImageAddress.plus(i << LOG_BYTES_IN_ADDRESS),true,false);
              }
 else {
                bootImage.setAddressWord(arrayImageAddress.plus(i << LOG_BYTES_IN_ADDRESS),imageAddress.toWord(),true);
              }
              if (verbose >= 2)               traceContext.pop();
            }
 else {
              bootImage.setNullAddressWord(arrayImageAddress.plus(i << LOG_BYTES_IN_ADDRESS),true,true);
            }
          }
        }
      }
    }
 else {
      if (rvmType == VM_Type.AddressArrayType) {
        if (verbose >= 2)         depth--;
        AddressArray addrArray=(AddressArray)jdkObject;
        Object backing=addrArray.getBacking();
        return copyMagicArrayToBootImage(backing,rvmType.asArray(),allocOnly,overwriteAddress,parentObject);
      }
      if (rvmType == VM_Type.ObjectReferenceArrayType) {
        if (verbose >= 2)         depth--;
        ObjectReferenceArray orArray=(ObjectReferenceArray)jdkObject;
        Object backing=orArray.getBacking();
        return copyMagicArrayToBootImage(backing,rvmType.asArray(),allocOnly,overwriteAddress,parentObject);
      }
      if (rvmType == VM_Type.OffsetArrayType) {
        if (verbose >= 2)         depth--;
        OffsetArray addrArray=(OffsetArray)jdkObject;
        Object backing=addrArray.getBacking();
        return copyMagicArrayToBootImage(backing,rvmType.asArray(),allocOnly,overwriteAddress,parentObject);
      }
      if (rvmType == VM_Type.WordArrayType) {
        if (verbose >= 2)         depth--;
        WordArray addrArray=(WordArray)jdkObject;
        Object backing=addrArray.getBacking();
        return copyMagicArrayToBootImage(backing,rvmType.asArray(),allocOnly,overwriteAddress,parentObject);
      }
      if (rvmType == VM_Type.ExtentArrayType) {
        if (verbose >= 2)         depth--;
        ExtentArray addrArray=(ExtentArray)jdkObject;
        Object backing=addrArray.getBacking();
        return copyMagicArrayToBootImage(backing,rvmType.asArray(),allocOnly,overwriteAddress,parentObject);
      }
      if (rvmType == VM_Type.CodeArrayType) {
        if (verbose >= 2)         depth--;
        VM_CodeArray codeArray=(VM_CodeArray)jdkObject;
        Object backing=codeArray.getBacking();
        return copyMagicArrayToBootImage(backing,rvmType.asArray(),allocOnly,overwriteAddress,parentObject);
      }
      if (rvmType.getTypeRef().isMagicType()) {
        VM.sysWriteln(""String_Node_Str"" + rvmType.getDescriptor().toString() + ""String_Node_Str""+ parentObject.getClass().toString());
        VM.sysFail(""String_Node_Str"");
      }
      VM_Class rvmScalarType=rvmType.asClass();
      Address scalarImageAddress=(overwriteAddress.isMax()) ? bootImage.allocateScalar(rvmScalarType) : overwriteAddress;
      mapEntry.imageAddress=scalarImageAddress;
      if (verbose >= 2) {
        if (depth == depthCutoff)         say(SPACES.substring(0,depth + 1),""String_Node_Str"");
 else         if (depth < depthCutoff) {
          String tab=SPACES.substring(0,depth + 1);
          if (depth == 0 && jtocCount >= 0)           tab=tab + ""String_Node_Str"" + String.valueOf(jtocCount)+ ""String_Node_Str"";
          int scalarSize=rvmScalarType.getInstanceSize();
          say(tab,""String_Node_Str"",jdkType.getName(),""String_Node_Str"",String.valueOf(scalarSize),(scalarSize >= LARGE_SCALAR_SIZE) ? ""String_Node_Str"" : ""String_Node_Str"");
        }
      }
      VM_Field[] rvmFields=rvmScalarType.getInstanceFields();
      for (int i=0, n=rvmFields.length; i < n; ++i) {
        VM_Field rvmField=rvmFields[i];
        VM_TypeReference rvmFieldType=rvmField.getType();
        Address rvmFieldAddress=scalarImageAddress.plus(rvmField.getOffset());
        String rvmFieldName=rvmField.getName().toString();
        Field jdkFieldAcc=getJdkFieldAccessor(jdkType,i,INSTANCE_FIELD);
        if (jdkFieldAcc == null) {
          if (!copyKnownClasspathInstanceField(jdkObject,rvmFieldName,rvmFieldType,rvmFieldAddress)) {
            if (verbose >= 2)             traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);
            if (verbose >= 2)             traceContext.traceFieldNotInHostJdk();
            if (verbose >= 2)             traceContext.pop();
            if (rvmFieldType.isPrimitiveType()) {
switch (rvmField.getType().getMemoryBytes()) {
case 1:
                bootImage.setByte(rvmFieldAddress,0);
              break;
case 2:
            bootImage.setHalfWord(rvmFieldAddress,0);
          break;
case 4:
        bootImage.setFullWord(rvmFieldAddress,0);
      break;
case 8:
    bootImage.setDoubleWord(rvmFieldAddress,0L);
  break;
default :
fail(""String_Node_Str"" + rvmFieldType);
break;
}
}
 else {
bootImage.setNullAddressWord(rvmFieldAddress,true,false);
}
}
continue;
}
if (rvmFieldType.isPrimitiveType()) {
if (rvmFieldType.isBooleanType()) {
bootImage.setByte(rvmFieldAddress,jdkFieldAcc.getBoolean(jdkObject) ? 1 : 0);
}
 else if (rvmFieldType.isByteType()) {
bootImage.setByte(rvmFieldAddress,jdkFieldAcc.getByte(jdkObject));
}
 else if (rvmFieldType.isCharType()) {
bootImage.setHalfWord(rvmFieldAddress,jdkFieldAcc.getChar(jdkObject));
}
 else if (rvmFieldType.isShortType()) {
bootImage.setHalfWord(rvmFieldAddress,jdkFieldAcc.getShort(jdkObject));
}
 else if (rvmFieldType.isIntType()) {
try {
bootImage.setFullWord(rvmFieldAddress,jdkFieldAcc.getInt(jdkObject));
}
 catch (IllegalArgumentException ex) {
System.out.println(""String_Node_Str"" + rvmScalarType + ""String_Node_Str""+ rvmField);
throw ex;
}
}
 else if (rvmFieldType.isLongType()) {
bootImage.setDoubleWord(rvmFieldAddress,jdkFieldAcc.getLong(jdkObject));
}
 else if (rvmFieldType.isFloatType()) {
float f=jdkFieldAcc.getFloat(jdkObject);
bootImage.setFullWord(rvmFieldAddress,Float.floatToIntBits(f));
}
 else if (rvmFieldType.isDoubleType()) {
double d=jdkFieldAcc.getDouble(jdkObject);
bootImage.setDoubleWord(rvmFieldAddress,Double.doubleToLongBits(d));
}
 else if (rvmFieldType.equals(VM_TypeReference.Address) || rvmFieldType.equals(VM_TypeReference.Word) || rvmFieldType.equals(VM_TypeReference.Extent)|| rvmFieldType.equals(VM_TypeReference.Offset)) {
Object o=jdkFieldAcc.get(jdkObject);
String msg=""String_Node_Str"" + rvmField.toString();
boolean warn=rvmFieldType.equals(VM_TypeReference.Address);
bootImage.setAddressWord(rvmFieldAddress,getWordValue(o,msg,warn),false);
}
 else {
fail(""String_Node_Str"" + rvmFieldType);
}
}
 else {
Object value=jdkFieldAcc.get(jdkObject);
if (!allocOnly) {
if (value != null) {
Class jdkClass=jdkFieldAcc.getDeclaringClass();
if (verbose >= 2) traceContext.push(value.getClass().getName(),jdkClass.getName(),jdkFieldAcc.getName());
Address imageAddress=copyToBootImage(value,allocOnly,Address.max(),jdkObject);
if (imageAddress.EQ(OBJECT_NOT_PRESENT)) {
if (verbose >= 2) traceContext.traceObjectNotInBootImage();
bootImage.setNullAddressWord(rvmFieldAddress,true,false);
}
 else bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),!rvmField.isFinal());
if (verbose >= 2) traceContext.pop();
}
 else {
bootImage.setNullAddressWord(rvmFieldAddress,true,true);
}
}
}
}
}
if (!allocOnly) {
if (verbose >= 2) traceContext.push(""String_Node_Str"",jdkObject.getClass().getName(),""String_Node_Str"");
Address tibImageAddress=copyToBootImage(rvmType.getTypeInformationBlock(),allocOnly,Address.max(),jdkObject);
if (verbose >= 2) traceContext.pop();
if (tibImageAddress.EQ(OBJECT_NOT_ALLOCATED)) {
fail(""String_Node_Str"" + jdkObject);
}
VM_ObjectModel.setTIB(bootImage,mapEntry.imageAddress,tibImageAddress,rvmType);
}
if (verbose >= 2) depth--;
return mapEntry.imageAddress;
}
 catch (Error e) {
e=new Error(e.getMessage() + ""String_Node_Str"" + jdkObject+ (jdkObject != null ? ""String_Node_Str"" + jdkObject.getClass() : ""String_Node_Str"")+ ""String_Node_Str""+ parentObject+ (parentObject != null ? ""String_Node_Str"" + parentObject.getClass() : ""String_Node_Str""),e.getCause() != null ? e.getCause() : e);
throw e;
}
}","/** 
 * Copy an object (and, recursively, any of its fields or elements that are references) from host jdk address space into image.
 * @param jdkObject object to be copied
 * @param allocOnly if allocOnly is true, the TIB and other reference fields are not recursively copied
 * @param overwriteAddress if !overwriteAddress.isMax(), then copy object to given address
 * @param parentObject
 * @return offset of copied object within image, in bytes(OBJECT_NOT_PRESENT --> object not copied: it's not part of bootimage)
 */
private static Address copyToBootImage(Object jdkObject,boolean allocOnly,Address overwriteAddress,Object parentObject) throws IllegalAccessException {
  try {
    BootImageMap.Entry mapEntry=BootImageMap.findOrCreateEntry(jdkObject);
    if ((!mapEntry.imageAddress.EQ(OBJECT_NOT_ALLOCATED)) && overwriteAddress.isMax())     return mapEntry.imageAddress;
    if (verbose >= 2)     depth++;
    Class jdkType=jdkObject.getClass();
    VM_Type rvmType=getRvmType(jdkType);
    if (rvmType == null) {
      if (verbose >= 2)       traverseObject(jdkObject);
      if (verbose >= 2)       depth--;
      return OBJECT_NOT_PRESENT;
    }
    if (jdkType.isArray()) {
      VM_Array rvmArrayType=rvmType.asArray();
      int arrayCount=Array.getLength(jdkObject);
      Address arrayImageAddress=(overwriteAddress.isMax()) ? bootImage.allocateArray(rvmArrayType,arrayCount) : overwriteAddress;
      mapEntry.imageAddress=arrayImageAddress;
      if (verbose >= 2) {
        if (depth == depthCutoff)         say(SPACES.substring(0,depth + 1),""String_Node_Str"");
 else         if (depth < depthCutoff) {
          String tab=SPACES.substring(0,depth + 1);
          if (depth == 0 && jtocCount >= 0)           tab=tab + ""String_Node_Str"" + String.valueOf(jtocCount)+ ""String_Node_Str"";
          int arraySize=rvmArrayType.getInstanceSize(arrayCount);
          say(tab,""String_Node_Str"",jdkType.getName(),""String_Node_Str"",String.valueOf(arrayCount),(arraySize >= LARGE_ARRAY_SIZE) ? ""String_Node_Str"" : ""String_Node_Str"");
        }
      }
      VM_Type rvmElementType=rvmArrayType.getElementType();
      if (false && rvmElementType.equals(VM_Type.IntType)) {
        if (parentObject != null) {
          Class parentObjectType=parentObject.getClass();
          VM.sysWrite(""String_Node_Str"",4 * ((int[])jdkObject).length);
          VM.sysWriteln(""String_Node_Str"",parentObjectType.toString());
        }
 else {
          VM.sysWriteln(""String_Node_Str"");
        }
      }
      if (rvmElementType.isPrimitiveType()) {
        if (rvmElementType.equals(VM_Type.BooleanType)) {
          boolean[] values=(boolean[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setByte(arrayImageAddress.plus(i),values[i] ? 1 : 0);
        }
 else         if (rvmElementType.equals(VM_Type.ByteType)) {
          byte[] values=(byte[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setByte(arrayImageAddress.plus(i),values[i]);
        }
 else         if (rvmElementType.equals(VM_Type.CharType)) {
          char[] values=(char[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setHalfWord(arrayImageAddress.plus(i << LOG_BYTES_IN_CHAR),values[i]);
        }
 else         if (rvmElementType.equals(VM_Type.ShortType)) {
          short[] values=(short[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setHalfWord(arrayImageAddress.plus(i << LOG_BYTES_IN_SHORT),values[i]);
        }
 else         if (rvmElementType.equals(VM_Type.IntType)) {
          int[] values=(int[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setFullWord(arrayImageAddress.plus(i << LOG_BYTES_IN_INT),values[i]);
        }
 else         if (rvmElementType.equals(VM_Type.LongType)) {
          long[] values=(long[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setDoubleWord(arrayImageAddress.plus(i << LOG_BYTES_IN_LONG),values[i]);
        }
 else         if (rvmElementType.equals(VM_Type.FloatType)) {
          float[] values=(float[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setFullWord(arrayImageAddress.plus(i << LOG_BYTES_IN_FLOAT),Float.floatToIntBits(values[i]));
        }
 else         if (rvmElementType.equals(VM_Type.DoubleType)) {
          double[] values=(double[])jdkObject;
          for (int i=0; i < arrayCount; ++i)           bootImage.setDoubleWord(arrayImageAddress.plus(i << LOG_BYTES_IN_DOUBLE),Double.doubleToLongBits(values[i]));
        }
 else {
          fail(""String_Node_Str"" + rvmArrayType);
        }
      }
 else {
        Object[] values=(Object[])jdkObject;
        Class jdkClass=jdkObject.getClass();
        if (!allocOnly) {
          for (int i=0; i < arrayCount; ++i) {
            if (values[i] != null) {
              if (verbose >= 2)               traceContext.push(values[i].getClass().getName(),jdkClass.getName(),i);
              Address imageAddress=copyToBootImage(values[i],allocOnly,Address.max(),jdkObject);
              if (imageAddress.EQ(OBJECT_NOT_PRESENT)) {
                if (verbose >= 2)                 traceContext.traceObjectNotInBootImage();
                bootImage.setNullAddressWord(arrayImageAddress.plus(i << LOG_BYTES_IN_ADDRESS),true,false);
              }
 else {
                bootImage.setAddressWord(arrayImageAddress.plus(i << LOG_BYTES_IN_ADDRESS),imageAddress.toWord(),true);
              }
              if (verbose >= 2)               traceContext.pop();
            }
 else {
              bootImage.setNullAddressWord(arrayImageAddress.plus(i << LOG_BYTES_IN_ADDRESS),true,true);
            }
          }
        }
      }
    }
 else {
      if (rvmType == VM_Type.AddressArrayType) {
        if (verbose >= 2)         depth--;
        AddressArray addrArray=(AddressArray)jdkObject;
        Object backing=addrArray.getBacking();
        return copyMagicArrayToBootImage(backing,rvmType.asArray(),allocOnly,overwriteAddress,parentObject);
      }
      if (rvmType == VM_Type.ObjectReferenceArrayType) {
        if (verbose >= 2)         depth--;
        ObjectReferenceArray orArray=(ObjectReferenceArray)jdkObject;
        Object backing=orArray.getBacking();
        return copyMagicArrayToBootImage(backing,rvmType.asArray(),allocOnly,overwriteAddress,parentObject);
      }
      if (rvmType == VM_Type.OffsetArrayType) {
        if (verbose >= 2)         depth--;
        OffsetArray addrArray=(OffsetArray)jdkObject;
        Object backing=addrArray.getBacking();
        return copyMagicArrayToBootImage(backing,rvmType.asArray(),allocOnly,overwriteAddress,parentObject);
      }
      if (rvmType == VM_Type.WordArrayType) {
        if (verbose >= 2)         depth--;
        WordArray addrArray=(WordArray)jdkObject;
        Object backing=addrArray.getBacking();
        return copyMagicArrayToBootImage(backing,rvmType.asArray(),allocOnly,overwriteAddress,parentObject);
      }
      if (rvmType == VM_Type.ExtentArrayType) {
        if (verbose >= 2)         depth--;
        ExtentArray addrArray=(ExtentArray)jdkObject;
        Object backing=addrArray.getBacking();
        return copyMagicArrayToBootImage(backing,rvmType.asArray(),allocOnly,overwriteAddress,parentObject);
      }
      if (rvmType == VM_Type.CodeArrayType) {
        if (verbose >= 2)         depth--;
        VM_CodeArray codeArray=(VM_CodeArray)jdkObject;
        Object backing=codeArray.getBacking();
        return copyMagicArrayToBootImage(backing,rvmType.asArray(),allocOnly,overwriteAddress,parentObject);
      }
      if (rvmType.getTypeRef().isMagicType()) {
        VM.sysWriteln(""String_Node_Str"" + rvmType.getDescriptor().toString() + ""String_Node_Str""+ parentObject.getClass().toString());
        VM.sysFail(""String_Node_Str"");
      }
      VM_Class rvmScalarType=rvmType.asClass();
      Address scalarImageAddress=(overwriteAddress.isMax()) ? bootImage.allocateScalar(rvmScalarType) : overwriteAddress;
      mapEntry.imageAddress=scalarImageAddress;
      if (verbose >= 2) {
        if (depth == depthCutoff)         say(SPACES.substring(0,depth + 1),""String_Node_Str"");
 else         if (depth < depthCutoff) {
          String tab=SPACES.substring(0,depth + 1);
          if (depth == 0 && jtocCount >= 0)           tab=tab + ""String_Node_Str"" + String.valueOf(jtocCount)+ ""String_Node_Str"";
          int scalarSize=rvmScalarType.getInstanceSize();
          say(tab,""String_Node_Str"",jdkType.getName(),""String_Node_Str"",String.valueOf(scalarSize),(scalarSize >= LARGE_SCALAR_SIZE) ? ""String_Node_Str"" : ""String_Node_Str"");
        }
      }
      VM_Field[] rvmFields=rvmScalarType.getInstanceFields();
      for (int i=0, n=rvmFields.length; i < n; ++i) {
        VM_Field rvmField=rvmFields[i];
        VM_TypeReference rvmFieldType=rvmField.getType();
        Address rvmFieldAddress=scalarImageAddress.plus(rvmField.getOffset());
        String rvmFieldName=rvmField.getName().toString();
        Field jdkFieldAcc=getJdkFieldAccessor(jdkType,i,INSTANCE_FIELD);
        if (jdkFieldAcc == null) {
          if (!copyKnownClasspathInstanceField(jdkObject,rvmFieldName,rvmFieldType,rvmFieldAddress)) {
            if (verbose >= 2)             traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);
            if (verbose >= 2)             traceContext.traceFieldNotInHostJdk();
            if (verbose >= 2)             traceContext.pop();
            if (rvmFieldType.isPrimitiveType()) {
switch (rvmField.getType().getMemoryBytes()) {
case 1:
                bootImage.setByte(rvmFieldAddress,0);
              break;
case 2:
            bootImage.setHalfWord(rvmFieldAddress,0);
          break;
case 4:
        bootImage.setFullWord(rvmFieldAddress,0);
      break;
case 8:
    bootImage.setDoubleWord(rvmFieldAddress,0L);
  break;
default :
fail(""String_Node_Str"" + rvmFieldType);
break;
}
}
 else {
bootImage.setNullAddressWord(rvmFieldAddress,true,false);
}
}
continue;
}
if (rvmFieldType.isPrimitiveType()) {
if (rvmFieldType.isBooleanType()) {
bootImage.setByte(rvmFieldAddress,jdkFieldAcc.getBoolean(jdkObject) ? 1 : 0);
}
 else if (rvmFieldType.isByteType()) {
bootImage.setByte(rvmFieldAddress,jdkFieldAcc.getByte(jdkObject));
}
 else if (rvmFieldType.isCharType()) {
bootImage.setHalfWord(rvmFieldAddress,jdkFieldAcc.getChar(jdkObject));
}
 else if (rvmFieldType.isShortType()) {
bootImage.setHalfWord(rvmFieldAddress,jdkFieldAcc.getShort(jdkObject));
}
 else if (rvmFieldType.isIntType()) {
try {
bootImage.setFullWord(rvmFieldAddress,jdkFieldAcc.getInt(jdkObject));
}
 catch (IllegalArgumentException ex) {
System.out.println(""String_Node_Str"" + rvmScalarType + ""String_Node_Str""+ rvmField);
throw ex;
}
}
 else if (rvmFieldType.isLongType()) {
bootImage.setDoubleWord(rvmFieldAddress,jdkFieldAcc.getLong(jdkObject));
}
 else if (rvmFieldType.isFloatType()) {
float f=jdkFieldAcc.getFloat(jdkObject);
bootImage.setFullWord(rvmFieldAddress,Float.floatToIntBits(f));
}
 else if (rvmFieldType.isDoubleType()) {
double d=jdkFieldAcc.getDouble(jdkObject);
bootImage.setDoubleWord(rvmFieldAddress,Double.doubleToLongBits(d));
}
 else if (rvmFieldType.equals(VM_TypeReference.Address) || rvmFieldType.equals(VM_TypeReference.Word) || rvmFieldType.equals(VM_TypeReference.Extent)|| rvmFieldType.equals(VM_TypeReference.Offset)) {
Object o=jdkFieldAcc.get(jdkObject);
String msg=""String_Node_Str"" + rvmField.toString();
boolean warn=rvmFieldType.equals(VM_TypeReference.Address);
bootImage.setAddressWord(rvmFieldAddress,getWordValue(o,msg,warn),false);
}
 else {
fail(""String_Node_Str"" + rvmFieldType);
}
}
 else {
Object value=jdkFieldAcc.get(jdkObject);
if (!allocOnly) {
if (value != null) {
Class jdkClass=jdkFieldAcc.getDeclaringClass();
if (verbose >= 2) traceContext.push(value.getClass().getName(),jdkClass.getName(),jdkFieldAcc.getName());
Address imageAddress=copyToBootImage(value,allocOnly,Address.max(),jdkObject);
if (imageAddress.EQ(OBJECT_NOT_PRESENT)) {
if (verbose >= 2) traceContext.traceObjectNotInBootImage();
bootImage.setNullAddressWord(rvmFieldAddress,true,false);
}
 else bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),!rvmField.isFinal());
if (verbose >= 2) traceContext.pop();
}
 else {
bootImage.setNullAddressWord(rvmFieldAddress,true,true);
}
}
}
}
}
if (!allocOnly) {
if (verbose >= 2) traceContext.push(""String_Node_Str"",jdkObject.getClass().getName(),""String_Node_Str"");
Address tibImageAddress=copyToBootImage(rvmType.getTypeInformationBlock(),allocOnly,Address.max(),jdkObject);
if (verbose >= 2) traceContext.pop();
if (tibImageAddress.EQ(OBJECT_NOT_ALLOCATED)) {
fail(""String_Node_Str"" + jdkObject);
}
VM_ObjectModel.setTIB(bootImage,mapEntry.imageAddress,tibImageAddress,rvmType);
}
if (verbose >= 2) depth--;
return mapEntry.imageAddress;
}
 catch (Error e) {
e=new Error(e.getMessage() + ""String_Node_Str"" + jdkObject+ (jdkObject != null ? ""String_Node_Str"" + jdkObject.getClass() : ""String_Node_Str"")+ ""String_Node_Str""+ parentObject+ (parentObject != null ? ""String_Node_Str"" + parentObject.getClass() : ""String_Node_Str""),e.getCause() != null ? e.getCause() : e);
throw e;
}
}",0.999468610035679
149887,"private static DefUseEffect call(OPT_Instruction s){
  if (CF_FIELDS) {
    OPT_MethodOperand methOp=Call.getMethod(s);
    if ((methOp != null) && methOp.isVirtual() && !methOp.hasPreciseTarget()) {
      OPT_Operand calleeThis=Call.getParam(s,0);
      if (calleeThis.isNullConstant()) {
        Trap.mutate(s,TRAP,NullCheck.getClearGuardResult(s),OPT_TrapCodeOperand.NullPtr());
        return DefUseEffect.TRAP_REDUCED;
      }
 else       if (calleeThis.isConstant() || calleeThis.asRegister().isPreciseType()) {
        VM_TypeReference calleeClass=calleeThis.getType();
        if (calleeClass.isResolved()) {
          methOp.refine(calleeClass.peekType());
          return DefUseEffect.UNCHANGED;
        }
      }
    }
    if ((methOp != null) && methOp.hasPreciseTarget() && methOp.getTarget().isPure()) {
      VM_Method method=methOp.getTarget();
      int n=Call.getNumberOfParams(s);
      for (int i=0; i < n; i++) {
        if (!Call.getParam(s,i).isConstant()) {
          return DefUseEffect.UNCHANGED;
        }
      }
      Object thisArg=null;
      VM_TypeReference[] paramTypes=method.getParameterTypes();
      Object[] otherArgs;
      Object result=null;
      if (methOp.isVirtual()) {
        thisArg=boxConstantOperand((OPT_ConstantOperand)Call.getParam(s,0),paramTypes[0]);
        n--;
        otherArgs=new Object[n];
        for (int i=0; i < n; i++) {
          otherArgs[i]=boxConstantOperand((OPT_ConstantOperand)Call.getParam(s,i),paramTypes[i + 1]);
        }
      }
 else {
        otherArgs=new Object[n];
        for (int i=0; i < n; i++) {
          otherArgs[i]=boxConstantOperand((OPT_ConstantOperand)Call.getParam(s,i),paramTypes[i]);
        }
      }
      Throwable t=null;
      try {
        if (VM.runningVM) {
          result=VM_Reflection.invoke(method,thisArg,otherArgs,!methOp.isVirtual());
        }
 else {
          Class<?>[] argTypes=new Class<?>[n];
          for (int i=0; i < n; i++) {
            argTypes[i]=Call.getParam(s,i).getType().resolve().getClassForType();
          }
          Method m=method.getDeclaringClass().getClassForType().getDeclaredMethod(method.getName().toString(),argTypes);
          result=m.invoke(thisArg,otherArgs);
        }
      }
 catch (      Throwable e) {
        t=e;
      }
      if (t != null) {
        return DefUseEffect.UNCHANGED;
      }
      if (method.getReturnType().isVoidType()) {
        Empty.mutate(s,NOP);
        return DefUseEffect.REDUCED;
      }
 else {
        OPT_Operator moveOp=OPT_IRTools.getMoveOp(method.getReturnType());
        Move.mutate(s,moveOp,Call.getClearResult(s),boxConstantObjectAsOperand(result,method.getReturnType()));
        return DefUseEffect.MOVE_FOLDED;
      }
    }
  }
  return DefUseEffect.UNCHANGED;
}","private static DefUseEffect call(OPT_Instruction s){
  if (CF_FIELDS) {
    OPT_MethodOperand methOp=Call.getMethod(s);
    if ((methOp != null) && methOp.isVirtual() && !methOp.hasPreciseTarget()) {
      OPT_Operand calleeThis=Call.getParam(s,0);
      if (calleeThis.isNullConstant()) {
        Trap.mutate(s,TRAP,NullCheck.getClearGuardResult(s),OPT_TrapCodeOperand.NullPtr());
        return DefUseEffect.TRAP_REDUCED;
      }
 else       if (calleeThis.isConstant() || calleeThis.asRegister().isPreciseType()) {
        VM_TypeReference calleeClass=calleeThis.getType();
        if (calleeClass.isResolved()) {
          methOp.refine(calleeClass.peekType());
          return DefUseEffect.UNCHANGED;
        }
      }
    }
    if ((methOp != null) && methOp.hasPreciseTarget() && methOp.getTarget().isPure()) {
      VM_Method method=methOp.getTarget();
      int n=Call.getNumberOfParams(s);
      for (int i=0; i < n; i++) {
        if (!Call.getParam(s,i).isConstant()) {
          return DefUseEffect.UNCHANGED;
        }
      }
      Object thisArg=null;
      VM_TypeReference[] paramTypes=method.getParameterTypes();
      Object[] otherArgs;
      Object result=null;
      if (methOp.isVirtual()) {
        thisArg=boxConstantOperand((OPT_ConstantOperand)Call.getParam(s,0),method.getDeclaringClass().getTypeRef());
        n--;
        otherArgs=new Object[n];
        for (int i=0; i < n; i++) {
          otherArgs[i]=boxConstantOperand((OPT_ConstantOperand)Call.getParam(s,i + 1),paramTypes[i]);
        }
      }
 else {
        otherArgs=new Object[n];
        for (int i=0; i < n; i++) {
          otherArgs[i]=boxConstantOperand((OPT_ConstantOperand)Call.getParam(s,i),paramTypes[i]);
        }
      }
      Throwable t=null;
      try {
        if (VM.runningVM) {
          result=VM_Reflection.invoke(method,thisArg,otherArgs,!methOp.isVirtual());
        }
 else {
          Class<?>[] argTypes=new Class<?>[n];
          for (int i=0; i < n; i++) {
            argTypes[i]=Call.getParam(s,i).getType().resolve().getClassForType();
          }
          Method m=method.getDeclaringClass().getClassForType().getDeclaredMethod(method.getName().toString(),argTypes);
          result=m.invoke(thisArg,otherArgs);
        }
      }
 catch (      Throwable e) {
        t=e;
      }
      if (t != null) {
        return DefUseEffect.UNCHANGED;
      }
      if (method.getReturnType().isVoidType()) {
        Empty.mutate(s,NOP);
        return DefUseEffect.REDUCED;
      }
 else {
        OPT_Operator moveOp=OPT_IRTools.getMoveOp(method.getReturnType());
        Move.mutate(s,moveOp,Call.getClearResult(s),boxConstantObjectAsOperand(result,method.getReturnType()));
        return DefUseEffect.MOVE_FOLDED;
      }
    }
  }
  return DefUseEffect.UNCHANGED;
}",0.9906407487401008
149888,"/** 
 * Thread model dependant sleep
 * @param millis
 * @param ns
 */
@Interruptible @Override protected void sleepInternal(long millis,int ns) throws InterruptedException {
  wakeupNanoTime=VM_Time.nanoTime() + (millis * (long)1e6);
  VM_ThreadProxy proxy=new VM_ThreadProxy(this,wakeupNanoTime);
  if (sleepImpl(proxy)) {
    throw new InterruptedException(""String_Node_Str"");
  }
}","/** 
 * Thread model dependant sleep
 * @param millis
 * @param ns
 */
@Interruptible @Override protected void sleepInternal(long millis,int ns) throws InterruptedException {
  wakeupNanoTime=VM_Time.nanoTime() + (millis * (long)1e6) + ns;
  VM_ThreadProxy proxy=new VM_ThreadProxy(this,wakeupNanoTime);
  if (sleepImpl(proxy)) {
    throw new InterruptedException(""String_Node_Str"");
  }
}",0.9935483870967742
149889,"/** 
 * Add a reference at the end of the table
 * @param ref The reference to add
 */
private void addReference(Reference<?> ref){
  setReference(maxIndex++,ObjectReference.fromObject(ref));
}","/** 
 * Add a reference at the end of the table
 * @param ref The reference to add
 */
private void addReference(Reference<?> ref,ObjectReference referent){
  ObjectReference reference=ObjectReference.fromObject(ref);
  setReferent(reference,referent);
  setReference(maxIndex++,reference);
}",0.668041237113402
149890,"/** 
 * Grow the reference table by GROWTH_FACTOR Logically Uninterruptible because it can GC when it allocates, but the rest of the code can't tolerate GC
 */
@UninterruptibleNoWarn private AddressArray growReferenceTable(){
  int newLength=STRESS ? references.length() + 1 : (int)(references.length() * GROWTH_FACTOR);
  if (TRACE)   VM.sysWriteln(""String_Node_Str"",semanticsStr,""String_Node_Str"",newLength);
  AddressArray newReferences=AddressArray.create(newLength);
  for (int i=0; i < references.length(); i++)   newReferences.set(i,references.get(i));
  return newReferences;
}","/** 
 * Grow the reference table by GROWTH_FACTOR. <p>Logically Uninterruptible because it can GC when it allocates, but the rest of the code can't tolerate GC. <p>This method is called without the reference processor lock held, but with the flag <code>growingTable</code> set.
 */
@UninterruptibleNoWarn private AddressArray growReferenceTable(){
  int newLength=STRESS ? references.length() + 1 : (int)(references.length() * GROWTH_FACTOR);
  if (TRACE)   VM.sysWriteln(""String_Node_Str"",semanticsStr,""String_Node_Str"",newLength);
  AddressArray newReferences=AddressArray.create(newLength);
  for (int i=0; i < references.length(); i++)   newReferences.set(i,references.get(i));
  return newReferences;
}",0.9040247678018576
149891,"/** 
 * Add a reference to the list of soft references.
 * @param ref the SoftReference to add
 */
@Interruptible public static void addSoftCandidate(SoftReference<?> ref){
  softReferenceProcessor.addCandidate(ref);
}","/** 
 * Add a reference to the list of soft references.
 * @param ref the SoftReference to add
 */
@Interruptible public static void addSoftCandidate(ObjectReference referent,SoftReference<?> ref){
  softReferenceProcessor.addCandidate(referent,ref);
}",0.9276595744680852
149892,"/** 
 * Add a reference to the list of phantom references.
 * @param ref the PhantomReference to add
 */
@Interruptible public static void addPhantomCandidate(PhantomReference<?> ref){
  phantomReferenceProcessor.addCandidate(ref);
}","/** 
 * Add a reference to the list of phantom references.
 * @param ref the PhantomReference to add
 */
@Interruptible public static void addPhantomCandidate(ObjectReference referent,PhantomReference<?> ref){
  phantomReferenceProcessor.addCandidate(referent,ref);
}",0.932
149893,"/** 
 * Add a reference to the list of weak references.
 * @param ref the WeakReference to add
 */
@Interruptible public static void addWeakCandidate(WeakReference<?> ref){
  weakReferenceProcessor.addCandidate(ref);
}","/** 
 * Add a reference to the list of weak references.
 * @param ref the WeakReference to add
 */
@Interruptible public static void addWeakCandidate(ObjectReference referent,WeakReference<?> ref){
  weakReferenceProcessor.addCandidate(referent,ref);
}",0.9276595744680852
149894,"/** 
 * Add a reference to the list of references. (SJF: This method must NOT be inlined into an inlined allocation sequence, since it contains a lock!)
 * @param ref the reference to add
 */
@NoInline private void addCandidate(Reference<?> ref){
  if (TRACE) {
    ObjectReference referenceAsAddress=ObjectReference.fromObject(ref);
    ObjectReference referent=getReferent(referenceAsAddress);
    VM.sysWrite(""String_Node_Str"",referenceAsAddress);
    VM.sysWriteln(""String_Node_Str"",referent);
  }
  lock.acquire();
  addReference(ref);
  while (maxIndex >= references.length()) {
    if (growingTable) {
      lock.release();
      VM_Scheduler.yield();
      lock.acquire();
    }
 else {
      growingTable=true;
      lock.release();
      AddressArray newTable=growReferenceTable();
      lock.acquire();
      references=newTable;
      growingTable=false;
    }
  }
  lock.release();
}","/** 
 * Add a reference to the list of references.  This method is responsible for installing the  address of the referent into the Reference object so that the referent is traced at all yield points before the Reference is correctly installed in the reference table. (SJF: This method must NOT be inlined into an inlined allocation sequence, since it contains a lock!)
 * @param referent The referent of the reference
 * @param ref The reference to add
 */
@NoInline private void addCandidate(ObjectReference referent,Reference<?> ref){
  if (TRACE) {
    ObjectReference referenceAsAddress=ObjectReference.fromObject(ref);
    VM.sysWrite(""String_Node_Str"",referenceAsAddress);
    VM.sysWriteln(""String_Node_Str"",referent);
  }
  lock.acquire();
  while (growingTable || maxIndex >= references.length()) {
    if (growingTable) {
      lock.release();
      VM_Scheduler.yield();
      lock.acquire();
    }
 else {
      growingTable=true;
      lock.release();
      AddressArray newTable=growReferenceTable();
      lock.acquire();
      references=newTable;
      growingTable=false;
    }
  }
  addReference(ref,referent);
  lock.release();
}",0.7927663734115347
149895,"public PhantomReference(T referent,ReferenceQueue<T> q){
  super(referent,q);
  MM_Interface.addPhantomReference(this);
}","public PhantomReference(T referent,ReferenceQueue<T> q){
  super(referent,q);
  MM_Interface.addPhantomReference(referent,this);
}",0.9641434262948207
149896,"@LogicallyUninterruptible @Uninterruptible public boolean enqueue(){
  if (nextOnQueue == null && queue != null) {
    wasEnqueued=true;
    queue.enqueue(this);
    queue=null;
    return true;
  }
  return false;
}","@LogicallyUninterruptible @Uninterruptible public boolean enqueue(){
  if (nextOnQueue == null && queue != null) {
    queue.enqueue(this);
    queue=null;
    return true;
  }
  return false;
}",0.946341463414634
149897,"Reference(T ref,ReferenceQueue<T> q){
  if (q == null)   throw new NullPointerException();
  referent=VM_Magic.objectAsAddress(ref);
  queue=q;
}","Reference(T ref,ReferenceQueue<T> q){
  if (q == null)   throw new NullPointerException();
  queue=q;
}",0.8306451612903226
149898,"public SoftReference(T referent,ReferenceQueue<T> q){
  super(referent,q);
  MM_Interface.addSoftReference(this);
}","public SoftReference(T referent,ReferenceQueue<T> q){
  super(referent,q);
  MM_Interface.addSoftReference(referent,this);
}",0.9623430962343096
149899,"public WeakReference(T referent,ReferenceQueue<T> q){
  super(referent,q);
  MM_Interface.addWeakReference(this);
}","public WeakReference(T referent,ReferenceQueue<T> q){
  super(referent,q);
  MM_Interface.addWeakReference(referent,this);
}",0.9623430962343096
149900,"/** 
 * Add a phantom reference to the list of phantom references.
 * @param obj the phantom reference to be added to the list
 */
@Interruptible public static void addPhantomReference(PhantomReference<?> obj){
  ReferenceProcessor.addPhantomCandidate(obj);
}","/** 
 * Add a phantom reference to the list of phantom references.
 * @param obj the phantom reference to be added to the list
 */
@Interruptible public static void addPhantomReference(Object referent,PhantomReference<?> obj){
  ReferenceProcessor.addPhantomCandidate(ObjectReference.fromObject(referent),obj);
}",0.9071803852889668
149901,"/** 
 * Add a weak reference to the list of weak references.
 * @param obj the weak reference to be added to the list
 */
@Interruptible public static void addWeakReference(WeakReference<?> obj){
  ReferenceProcessor.addWeakCandidate(obj);
}","/** 
 * Add a weak reference to the list of weak references.
 * @param obj the weak reference to be added to the list
 */
@Interruptible public static void addWeakReference(Object referent,WeakReference<?> obj){
  ReferenceProcessor.addWeakCandidate(ObjectReference.fromObject(referent),obj);
}",0.9009345794392524
149902,"/** 
 * Add a soft reference to the list of soft references.
 * @param obj the soft reference to be added to the list
 */
@Interruptible public static void addSoftReference(SoftReference<?> obj){
  ReferenceProcessor.addSoftCandidate(obj);
}","/** 
 * Add a soft reference to the list of soft references.
 * @param obj the soft reference to be added to the list
 */
@Interruptible public static void addSoftReference(Object referent,SoftReference<?> obj){
  ReferenceProcessor.addSoftCandidate(ObjectReference.fromObject(referent),obj);
}",0.9009345794392524
149903,"public static void main(String[] args) throws Throwable {
  boolean base=true;
  if (args.length == 0)   System.out.println(""String_Node_Str"");
  if (args[0].compareTo(""String_Node_Str"") == 0 || args[0].compareTo(""String_Node_Str"") == 0) {
    base=false;
    timeLimit=600;
  }
  allocSize=base ? 500 : 3000;
  runTest();
  System.exit(0);
}","public static void main(String[] args) throws Throwable {
  boolean base=true;
  if (args.length == 0) {
    System.out.println(""String_Node_Str"");
  }
  if (args[0].compareTo(""String_Node_Str"") == 0 || args[0].compareTo(""String_Node_Str"") == 0) {
    base=false;
    timeLimit=600;
  }
  allocSize=base ? 500 : 3000;
  runTest();
  System.exit(0);
}",0.9884393063583816
149904,"/** 
 * Process a reference with the current semantics.
 * @param reference the address of the reference. This may or may notbe the address of a heap object, depending on the VM.
 * @param trace the thread local trace element.
 */
public ObjectReference processReference(TraceLocal trace,ObjectReference reference){
  if (VM.VerifyAssertions)   VM._assert(!reference.isNull());
  if (TRACE_DETAIL)   VM.sysWriteln(""String_Node_Str"",reference);
  if (!trace.isLive(reference)) {
    clearReferent(reference);
    return ObjectReference.nullReference();
  }
  ObjectReference newReference=trace.getForwardedReference(reference);
  ObjectReference oldReferent=getReferent(reference);
  if (TRACE_DETAIL) {
    VM.sysWrite(""String_Node_Str"",newReference);
    VM.sysWriteln(""String_Node_Str"",oldReferent);
  }
  if (oldReferent.isNull()) {
    return ObjectReference.nullReference();
  }
  if (semantics == Semantics.SOFT) {
    if (!Plan.isEmergencyCollection()) {
      if (TRACE_DETAIL)       VM.sysWriteln(""String_Node_Str"",oldReferent);
      trace.retainReferent(oldReferent);
    }
  }
 else   if (semantics == Semantics.PHANTOM) {
  }
  if (trace.isLive(oldReferent)) {
    ObjectReference newReferent=trace.getForwardedReferent(oldReferent);
    if (TRACE_DETAIL)     VM.sysWriteln(""String_Node_Str"",newReferent);
    setReferent(newReference,newReferent);
    return newReference;
  }
 else {
    if (TRACE_UNREACHABLE)     VM.sysWriteln(""String_Node_Str"",oldReferent);
    clearReferent(newReference);
    enqueueReference(newReference);
    return ObjectReference.nullReference();
  }
}","/** 
 * Process a reference with the current semantics.
 * @param reference the address of the reference. This may or may notbe the address of a heap object, depending on the VM.
 * @param trace the thread local trace element.
 */
public ObjectReference processReference(TraceLocal trace,ObjectReference reference){
  if (VM.VerifyAssertions)   VM._assert(!reference.isNull());
  if (TRACE_DETAIL) {
    VM.sysWrite(""String_Node_Str"",reference);
  }
  if (!trace.isLive(reference)) {
    clearReferent(reference);
    if (TRACE_UNREACHABLE) {
      VM.sysWriteln(""String_Node_Str"",reference);
    }
    if (TRACE_DETAIL) {
      VM.sysWriteln(""String_Node_Str"");
    }
    return ObjectReference.nullReference();
  }
  ObjectReference newReference=trace.getForwardedReference(reference);
  ObjectReference oldReferent=getReferent(reference);
  if (TRACE_DETAIL) {
    VM.sysWrite(""String_Node_Str"",oldReferent);
  }
  if (oldReferent.isNull()) {
    if (TRACE_DETAIL)     VM.sysWriteln(""String_Node_Str"");
    return ObjectReference.nullReference();
  }
  if (TRACE_DETAIL)   VM.sysWrite(""String_Node_Str"",newReference);
  if (semantics == Semantics.SOFT) {
    if (!Plan.isEmergencyCollection()) {
      if (TRACE_DETAIL)       VM.sysWrite(""String_Node_Str"");
      trace.retainReferent(oldReferent);
    }
  }
 else   if (semantics == Semantics.PHANTOM) {
  }
  if (trace.isLive(oldReferent)) {
    if (VM.VerifyAssertions) {
      if (!DebugUtil.validRef(oldReferent)) {
        VM.sysWriteln(""String_Node_Str"");
        DebugUtil.dumpRef(oldReferent);
        VM.sysFail(""String_Node_Str"");
      }
    }
    ObjectReference newReferent=trace.getForwardedReferent(oldReferent);
    if (TRACE_DETAIL)     VM.sysWriteln(""String_Node_Str"",newReferent);
    if (VM.VerifyAssertions) {
      if (!DebugUtil.validRef(newReferent)) {
        VM.sysWriteln(""String_Node_Str"");
        DebugUtil.dumpRef(oldReferent);
        VM.sysFail(""String_Node_Str"");
      }
      VM._assert(trace.isLive(newReferent));
    }
    setReferent(newReference,newReferent);
    return newReference;
  }
 else {
    if (TRACE_DETAIL)     VM.sysWriteln(""String_Node_Str"");
 else     if (TRACE_UNREACHABLE)     VM.sysWriteln(""String_Node_Str"",oldReferent);
    clearReferent(newReference);
    enqueueReference(newReference);
    return ObjectReference.nullReference();
  }
}",0.7622909275215408
149905,"/** 
 * Update the reference table
 * @param i The table index
 * @param ref The reference to insert
 */
private void setReference(int i,ObjectReference ref){
  if (TRACE_DETAIL) {
    VM.sysWrite(""String_Node_Str"",i);
    VM.sysWriteln(""String_Node_Str"",ref);
  }
  references.set(i,ref.toAddress());
}","/** 
 * Update the reference table
 * @param i The table index
 * @param ref The reference to insert
 */
private void setReference(int i,ObjectReference ref){
  references.set(i,ref.toAddress());
}",0.788
149906,"/** 
 * Add a reference to the list of references. (SJF: This method must NOT be inlined into an inlined allocation sequence, since it contains a lock!)
 * @param ref the reference to add
 */
@NoInline private void addCandidate(Reference<?> ref){
  if (TRACE) {
    ObjectReference referenceAsAddress=ObjectReference.fromObject(ref);
    ObjectReference referent=getReferent(referenceAsAddress);
    VM.sysWrite(""String_Node_Str"",referenceAsAddress);
    VM.sysWriteln(""String_Node_Str"",referent);
  }
  lock.acquire();
  while (maxIndex >= references.length()) {
    if (growingTable) {
      lock.release();
      VM_Scheduler.yield();
      lock.acquire();
    }
 else {
      growingTable=true;
      lock.release();
      AddressArray newTable=growReferenceTable();
      lock.acquire();
      references=newTable;
      growingTable=false;
    }
  }
  if (TRACE) {
    VM.sysWriteln(""String_Node_Str"",maxIndex);
  }
  addReference(ref);
  lock.release();
}","/** 
 * Add a reference to the list of references. (SJF: This method must NOT be inlined into an inlined allocation sequence, since it contains a lock!)
 * @param ref the reference to add
 */
@NoInline private void addCandidate(Reference<?> ref){
  if (TRACE) {
    ObjectReference referenceAsAddress=ObjectReference.fromObject(ref);
    ObjectReference referent=getReferent(referenceAsAddress);
    VM.sysWrite(""String_Node_Str"",referenceAsAddress);
    VM.sysWriteln(""String_Node_Str"",referent);
  }
  lock.acquire();
  addReference(ref);
  while (maxIndex >= references.length()) {
    if (growingTable) {
      lock.release();
      VM_Scheduler.yield();
      lock.acquire();
    }
 else {
      growingTable=true;
      lock.release();
      AddressArray newTable=growReferenceTable();
      lock.acquire();
      references=newTable;
      growingTable=false;
    }
  }
  lock.release();
}",0.9246501614639396
149907,"public static void main(String[] args) throws Throwable {
  boolean base=true;
  if (args.length == 0)   System.out.println(""String_Node_Str"");
  if (args[0].compareTo(""String_Node_Str"") == 0 || args[0].compareTo(""String_Node_Str"") == 0)   base=false;
  liveSize=base ? 30 : 100;
  exclude=base ? 0 : 2;
  sampleCount=-exclude;
  if (liveSize < 0)   System.out.println(""String_Node_Str"");
  runTest();
  System.exit(0);
}","public static void main(String[] args) throws Throwable {
  boolean base=true;
  if (args.length == 0) {
    System.out.println(""String_Node_Str"");
  }
 else   if (args[0].compareTo(""String_Node_Str"") == 0 || args[0].compareTo(""String_Node_Str"") == 0) {
    base=false;
  }
  liveSize=base ? 30 : 100;
  exclude=base ? 0 : 2;
  sampleCount=-exclude;
  if (liveSize < 0)   System.out.println(""String_Node_Str"");
  runTest();
  System.exit(0);
}",0.9745370370370372
149908,"/** 
 * Support for Java   {@link java.lang.Object#notify()} synchronization primitive.
 * @param o the object synchronized on
 * @param l the heavy weight lock
 */
@Override protected void notifyAllInternal(Object o,VM_Lock lock){
  VM_GreenLock l=(VM_GreenLock)lock;
  l.mutex.lock(""String_Node_Str"");
  VM_GreenThread t=l.waiting.dequeue();
  while (t != null) {
    l.entering.enqueue(t);
    t=l.waiting.dequeue();
  }
  l.mutex.unlock();
}","/** 
 * Support for Java   {@link java.lang.Object#notify()} synchronization primitive.
 * @param o the object synchronized on
 * @param lock the heavy weight lock
 */
@Override protected void notifyAllInternal(Object o,VM_Lock lock){
  VM_GreenLock l=(VM_GreenLock)lock;
  l.mutex.lock(""String_Node_Str"");
  VM_GreenThread t=l.waiting.dequeue();
  while (t != null) {
    l.entering.enqueue(t);
    t=l.waiting.dequeue();
  }
  l.mutex.unlock();
}",0.9966405375139976
149909,"/** 
 * Support for Java   {@link java.lang.Object#notify()} synchronization primitive.
 * @param o the object synchronized on
 * @param l the heavy weight lock
 */
@Override protected void notifyInternal(Object o,VM_Lock lock){
  VM_GreenLock l=(VM_GreenLock)lock;
  l.mutex.lock(""String_Node_Str"");
  VM_GreenThread t=l.waiting.dequeue();
  if (t != null) {
    l.entering.enqueue(t);
  }
  l.mutex.unlock();
}","/** 
 * Support for Java   {@link java.lang.Object#notify()} synchronization primitive.
 * @param o the object synchronized on
 * @param lock the heavy weight lock
 */
@Override protected void notifyInternal(Object o,VM_Lock lock){
  VM_GreenLock l=(VM_GreenLock)lock;
  l.mutex.lock(""String_Node_Str"");
  VM_GreenThread t=l.waiting.dequeue();
  if (t != null) {
    l.entering.enqueue(t);
  }
  l.mutex.unlock();
}",0.996372430471584
149910,"/** 
 * The maximum number collection attempts across threads.
 */
public int maximumCollectionAttempt(){
  int max=1;
  for (int t=0; t < VM_Scheduler.getThreadHighWatermark(); t++) {
    VM_Thread thread=VM_Scheduler.threads[t];
    if (thread != null) {
      int current=thread.getCollectionAttempt();
      if (current > max)       max=current;
    }
  }
  return max + VM_CollectorThread.collectionAttemptBase;
}","/** 
 * The maximum number collection attempts across threads.
 */
public int maximumCollectionAttempt(){
  int max=1;
  for (int t=0; t <= VM_Scheduler.getThreadHighWatermark(); t++) {
    VM_Thread thread=VM_Scheduler.threads[t];
    if (thread != null) {
      int current=thread.getCollectionAttempt();
      if (current > max)       max=current;
    }
  }
  return max + VM_CollectorThread.collectionAttemptBase;
}",0.998805256869773
149911,"/** 
 * Run method for collector thread (one per VM_Processor).  Enters an infinite loop, waiting for collections to be requested, performing those collections, and then waiting again.  Calls Collection.collect to perform the collection, which will be different for the different allocators/collectors that the RVM can be configured to use.
 */
@LogicallyUninterruptible @NoOptCompile @BaselineNoRegisters @BaselineSaveLSRegisters @Uninterruptible public void run(){
  for (int count=0; ; count++) {
    VM_GreenScheduler.collectorMutex.lock(""String_Node_Str"");
    if (verbose >= 1)     VM.sysWriteln(""String_Node_Str"");
    if (count > 0) {
      VM_GreenProcessor.getCurrentProcessor().enableThreadSwitching();
    }
    VM_GreenScheduler.getCurrentThread().yield(VM_GreenScheduler.collectorQueue,VM_GreenScheduler.collectorMutex);
    VM_GreenProcessor.getCurrentProcessor().disableThreadSwitching(""String_Node_Str"");
    if (verbose >= 2)     VM.sysWriteln(""String_Node_Str"");
    gcOrdinal=VM_Synchronization.fetchAndAdd(participantCount,Offset.zero(),1) + 1;
    long startCycles=VM_Time.cycles();
    if (verbose > 2)     VM.sysWriteln(""String_Node_Str"",gcOrdinal);
    boolean userTriggered=handshake.gcTrigger == Collection.EXTERNAL_GC_TRIGGER;
    if (gcOrdinal == 1) {
      Plan.setUserTriggeredCollection(userTriggered);
    }
    if (verbose >= 2)     VM.sysWriteln(""String_Node_Str"");
    gcBarrier.startupRendezvous();
    do {
      if (verbose >= 2)       VM.sysWriteln(""String_Node_Str"");
      if (isActive)       Selected.Collector.get().collect();
      if (verbose >= 2)       VM.sysWriteln(""String_Node_Str"");
      gcBarrier.rendezvous(5200);
      if (gcOrdinal == 1) {
        long elapsedCycles=VM_Time.cycles() - startCycles;
        HeapGrowthManager.recordGCTime(VM_Time.cyclesToMillis(elapsedCycles));
        if (Selected.Plan.get().lastCollectionFullHeap()) {
          if (Options.variableSizeHeap.getValue() && !userTriggered) {
            HeapGrowthManager.considerHeapSize();
          }
          HeapGrowthManager.reset();
        }
        VM_CompiledMethods.snipObsoleteCompiledMethods();
        collectionCount+=1;
        collectionAttemptBase++;
      }
      startCycles=VM_Time.cycles();
      gcBarrier.rendezvous(5201);
    }
 while (Selected.Plan.get().lastCollectionFailed() && !Selected.Plan.get().isEmergencyCollection());
    if (gcOrdinal == 1) {
      if (Selected.Plan.get().isEmergencyCollection()) {
        Plan.startEmergencyAllocation();
        boolean gcFailed=Selected.Plan.get().lastCollectionFailed();
        for (int t=0; t < VM_Scheduler.getThreadHighWatermark(); t++) {
          VM_Thread thread=VM_Scheduler.threads[t];
          if (thread != null) {
            if (thread.getCollectionAttempt() > 0) {
              if (gcFailed || thread.physicalAllocationFailed()) {
                allocateOOMEForThread(thread);
              }
            }
          }
        }
        Plan.finishEmergencyAllocation();
      }
    }
    if (gcOrdinal == 1) {
      collectionAttemptBase=0;
      handshake.notifyCompletion();
      handshake.reset();
      Collection.scheduleFinalizerThread();
    }
    rendezvous(5210);
    if (verbose > 2)     VM.sysWriteln(""String_Node_Str"");
    if (gcOrdinal == 1) {
      if (verbose >= 2)       VM.sysWriteln(""String_Node_Str"");
      for (int i=1; i <= VM_GreenScheduler.numProcessors; i++) {
        VM_GreenProcessor vp=VM_GreenScheduler.processors[i];
        if (VM.VerifyAssertions)         VM._assert(vp != null);
        if (vp.vpStatus == VM_GreenProcessor.BLOCKED_IN_NATIVE) {
          vp.vpStatus=VM_GreenProcessor.IN_NATIVE;
          if (verbose >= 2)           VM.sysWriteln(""String_Node_Str"",vp.id);
        }
      }
      Plan.collectionComplete();
      gcThreadRunning=false;
    }
    rendezvous(9999);
  }
}","/** 
 * Run method for collector thread (one per VM_Processor).  Enters an infinite loop, waiting for collections to be requested, performing those collections, and then waiting again.  Calls Collection.collect to perform the collection, which will be different for the different allocators/collectors that the RVM can be configured to use.
 */
@LogicallyUninterruptible @NoOptCompile @BaselineNoRegisters @BaselineSaveLSRegisters @Uninterruptible public void run(){
  for (int count=0; ; count++) {
    VM_GreenScheduler.collectorMutex.lock(""String_Node_Str"");
    if (verbose >= 1)     VM.sysWriteln(""String_Node_Str"");
    if (count > 0) {
      VM_GreenProcessor.getCurrentProcessor().enableThreadSwitching();
    }
    VM_GreenScheduler.getCurrentThread().yield(VM_GreenScheduler.collectorQueue,VM_GreenScheduler.collectorMutex);
    VM_GreenProcessor.getCurrentProcessor().disableThreadSwitching(""String_Node_Str"");
    if (verbose >= 2)     VM.sysWriteln(""String_Node_Str"");
    gcOrdinal=VM_Synchronization.fetchAndAdd(participantCount,Offset.zero(),1) + 1;
    long startCycles=VM_Time.cycles();
    if (verbose > 2)     VM.sysWriteln(""String_Node_Str"",gcOrdinal);
    boolean userTriggered=handshake.gcTrigger == Collection.EXTERNAL_GC_TRIGGER;
    if (gcOrdinal == 1) {
      Plan.setUserTriggeredCollection(userTriggered);
    }
    if (verbose >= 2)     VM.sysWriteln(""String_Node_Str"");
    gcBarrier.startupRendezvous();
    do {
      if (verbose >= 2)       VM.sysWriteln(""String_Node_Str"");
      if (isActive)       Selected.Collector.get().collect();
      if (verbose >= 2)       VM.sysWriteln(""String_Node_Str"");
      gcBarrier.rendezvous(5200);
      if (gcOrdinal == 1) {
        long elapsedCycles=VM_Time.cycles() - startCycles;
        HeapGrowthManager.recordGCTime(VM_Time.cyclesToMillis(elapsedCycles));
        if (Selected.Plan.get().lastCollectionFullHeap()) {
          if (Options.variableSizeHeap.getValue() && !userTriggered) {
            HeapGrowthManager.considerHeapSize();
          }
          HeapGrowthManager.reset();
        }
        VM_CompiledMethods.snipObsoleteCompiledMethods();
        collectionCount+=1;
        collectionAttemptBase++;
      }
      startCycles=VM_Time.cycles();
      gcBarrier.rendezvous(5201);
    }
 while (Selected.Plan.get().lastCollectionFailed() && !Selected.Plan.get().isEmergencyCollection());
    if (gcOrdinal == 1) {
      if (Selected.Plan.get().isEmergencyCollection()) {
        Plan.startEmergencyAllocation();
        boolean gcFailed=Selected.Plan.get().lastCollectionFailed();
        for (int t=0; t <= VM_Scheduler.getThreadHighWatermark(); t++) {
          VM_Thread thread=VM_Scheduler.threads[t];
          if (thread != null) {
            if (thread.getCollectionAttempt() > 0) {
              if (gcFailed || thread.physicalAllocationFailed()) {
                allocateOOMEForThread(thread);
              }
            }
          }
        }
        Plan.finishEmergencyAllocation();
      }
    }
    if (gcOrdinal == 1) {
      collectionAttemptBase=0;
      handshake.notifyCompletion();
      handshake.reset();
      Collection.scheduleFinalizerThread();
    }
    rendezvous(5210);
    if (verbose > 2)     VM.sysWriteln(""String_Node_Str"");
    if (gcOrdinal == 1) {
      if (verbose >= 2)       VM.sysWriteln(""String_Node_Str"");
      for (int i=1; i <= VM_GreenScheduler.numProcessors; i++) {
        VM_GreenProcessor vp=VM_GreenScheduler.processors[i];
        if (VM.VerifyAssertions)         VM._assert(vp != null);
        if (vp.vpStatus == VM_GreenProcessor.BLOCKED_IN_NATIVE) {
          vp.vpStatus=VM_GreenProcessor.IN_NATIVE;
          if (verbose >= 2)           VM.sysWriteln(""String_Node_Str"",vp.id);
        }
      }
      Plan.collectionComplete();
      gcThreadRunning=false;
    }
    rendezvous(9999);
  }
}",0.9998698763825634
149912,"/** 
 * Dump state of a (stopped) thread's stack.
 * @param ip instruction pointer for first frame to dump
 * @param fp frame pointer for first frame to dump
 */
public static void dumpStack(Address ip,Address fp){
  ++inDumpStack;
  if (inDumpStack > 1 && inDumpStack <= VM.maxSystemTroubleRecursionDepth + VM.maxSystemTroubleRecursionDepthBeforeWeStopVMSysWrite) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(inDumpStack);
    VM.sysWriteln(""String_Node_Str"");
  }
  if (inDumpStack > VM.maxSystemTroubleRecursionDepth) {
    VM.dieAbruptlyRecursiveSystemTrouble();
    if (VM.VerifyAssertions)     VM._assert(VM.NOT_REACHED);
  }
  VM.sysWriteln();
  if (fp.LT(Selected.Plan.ploSpace.getStart()) || fp.GT(Selected.Plan.ploSpace.getStart().plus(Selected.Plan.ploSpace.getExtent()))) {
    VM.sysWrite(""String_Node_Str"",fp);
    VM.sysWriteln(""String_Node_Str"");
  }
 else {
    try {
      VM.sysWriteln(""String_Node_Str"");
      while (VM_Magic.getCallerFramePointer(fp).NE(ArchitectureSpecific.VM_StackframeLayoutConstants.STACKFRAME_SENTINEL_FP)) {
        if (!MM_Interface.addressInVM(ip)) {
          showMethod(""String_Node_Str"",fp);
          ip=VM_Magic.getReturnAddress(fp);
          fp=VM_Magic.getCallerFramePointer(fp);
        }
 else {
          int compiledMethodId=VM_Magic.getCompiledMethodID(fp);
          if (compiledMethodId == ArchitectureSpecific.VM_StackframeLayoutConstants.INVISIBLE_METHOD_ID) {
            showMethod(""String_Node_Str"",fp);
          }
 else {
            VM_CompiledMethod compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethodId);
            if (compiledMethod == null) {
              showMethod(compiledMethodId,fp);
            }
 else             if (compiledMethod.getCompilerType() == VM_CompiledMethod.TRAP) {
              showMethod(""String_Node_Str"",fp);
            }
 else {
              VM_Method method=compiledMethod.getMethod();
              Offset instructionOffset=compiledMethod.getInstructionOffset(ip);
              int lineNumber=compiledMethod.findLineNumberForInstruction(instructionOffset);
              boolean frameShown=false;
              if (VM.BuildForOptCompiler && compiledMethod.getCompilerType() == VM_CompiledMethod.OPT) {
                VM_OptCompiledMethod optInfo=(VM_OptCompiledMethod)compiledMethod;
                VM_OptMachineCodeMap map=optInfo.getMCMap();
                int iei=map.getInlineEncodingForMCOffset(instructionOffset);
                if (iei >= 0) {
                  int[] inlineEncoding=map.inlineEncoding;
                  int bci=map.getBytecodeIndexForMCOffset(instructionOffset);
                  for (; iei >= 0; iei=VM_OptEncodedCallSiteTree.getParent(iei,inlineEncoding)) {
                    int mid=VM_OptEncodedCallSiteTree.getMethodID(iei,inlineEncoding);
                    method=VM_MemberReference.getMemberRef(mid).asMethodReference().getResolvedMember();
                    lineNumber=((VM_NormalMethod)method).getLineNumberForBCIndex(bci);
                    showMethod(method,lineNumber,fp);
                    if (iei > 0) {
                      bci=VM_OptEncodedCallSiteTree.getByteCodeOffset(iei,inlineEncoding);
                    }
                  }
                  frameShown=true;
                }
              }
              if (!frameShown) {
                showMethod(method,lineNumber,fp);
              }
            }
          }
          ip=VM_Magic.getReturnAddress(fp);
          fp=VM_Magic.getCallerFramePointer(fp);
        }
        if (fp.LT(Selected.Plan.ploSpace.getStart()) || fp.GT(Selected.Plan.ploSpace.getStart().plus(Selected.Plan.ploSpace.getExtent()))) {
          VM.sysWrite(""String_Node_Str"",fp);
          VM.sysWriteln(""String_Node_Str"");
          break;
        }
      }
    }
 catch (    Throwable t) {
      VM.sysWriteln(""String_Node_Str"",fp);
    }
  }
  --inDumpStack;
}","/** 
 * Dump state of a (stopped) thread's stack.
 * @param ip instruction pointer for first frame to dump
 * @param fp frame pointer for first frame to dump
 */
public static void dumpStack(Address ip,Address fp){
  ++inDumpStack;
  if (inDumpStack > 1 && inDumpStack <= VM.maxSystemTroubleRecursionDepth + VM.maxSystemTroubleRecursionDepthBeforeWeStopVMSysWrite) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(inDumpStack);
    VM.sysWriteln(""String_Node_Str"");
  }
  if (inDumpStack > VM.maxSystemTroubleRecursionDepth) {
    VM.dieAbruptlyRecursiveSystemTrouble();
    if (VM.VerifyAssertions)     VM._assert(VM.NOT_REACHED);
  }
  VM.sysWriteln();
  if (!isAddressValidFramePointer(fp)) {
    VM.sysWrite(""String_Node_Str"",fp);
    VM.sysWriteln(""String_Node_Str"");
  }
 else {
    try {
      VM.sysWriteln(""String_Node_Str"");
      while (VM_Magic.getCallerFramePointer(fp).NE(ArchitectureSpecific.VM_StackframeLayoutConstants.STACKFRAME_SENTINEL_FP)) {
        if (!MM_Interface.addressInVM(ip)) {
          showMethod(""String_Node_Str"",fp);
          ip=VM_Magic.getReturnAddress(fp);
          fp=VM_Magic.getCallerFramePointer(fp);
        }
 else {
          int compiledMethodId=VM_Magic.getCompiledMethodID(fp);
          if (compiledMethodId == ArchitectureSpecific.VM_StackframeLayoutConstants.INVISIBLE_METHOD_ID) {
            showMethod(""String_Node_Str"",fp);
          }
 else {
            VM_CompiledMethod compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethodId);
            if (compiledMethod == null) {
              showMethod(compiledMethodId,fp);
            }
 else             if (compiledMethod.getCompilerType() == VM_CompiledMethod.TRAP) {
              showMethod(""String_Node_Str"",fp);
            }
 else {
              VM_Method method=compiledMethod.getMethod();
              Offset instructionOffset=compiledMethod.getInstructionOffset(ip);
              int lineNumber=compiledMethod.findLineNumberForInstruction(instructionOffset);
              boolean frameShown=false;
              if (VM.BuildForOptCompiler && compiledMethod.getCompilerType() == VM_CompiledMethod.OPT) {
                VM_OptCompiledMethod optInfo=(VM_OptCompiledMethod)compiledMethod;
                VM_OptMachineCodeMap map=optInfo.getMCMap();
                int iei=map.getInlineEncodingForMCOffset(instructionOffset);
                if (iei >= 0) {
                  int[] inlineEncoding=map.inlineEncoding;
                  int bci=map.getBytecodeIndexForMCOffset(instructionOffset);
                  for (; iei >= 0; iei=VM_OptEncodedCallSiteTree.getParent(iei,inlineEncoding)) {
                    int mid=VM_OptEncodedCallSiteTree.getMethodID(iei,inlineEncoding);
                    method=VM_MemberReference.getMemberRef(mid).asMethodReference().getResolvedMember();
                    lineNumber=((VM_NormalMethod)method).getLineNumberForBCIndex(bci);
                    showMethod(method,lineNumber,fp);
                    if (iei > 0) {
                      bci=VM_OptEncodedCallSiteTree.getByteCodeOffset(iei,inlineEncoding);
                    }
                  }
                  frameShown=true;
                }
              }
              if (!frameShown) {
                showMethod(method,lineNumber,fp);
              }
            }
          }
          ip=VM_Magic.getReturnAddress(fp);
          fp=VM_Magic.getCallerFramePointer(fp);
        }
        if (!isAddressValidFramePointer(fp)) {
          VM.sysWrite(""String_Node_Str"",fp);
          VM.sysWriteln(""String_Node_Str"");
          break;
        }
      }
    }
 catch (    Throwable t) {
      VM.sysWriteln(""String_Node_Str"",fp);
    }
  }
  --inDumpStack;
}",0.9599578503688092
149913,"/** 
 * Perform optimizations for a conditional branch. <pre> 1)   IF .. GOTO A          replaced by  IF .. GOTO B ... A: GOTO B 2)   conditional branch to next instruction eliminated 3)   IF (condition) GOTO A  replaced by  IF (!condition) GOTO B GOTO B                           A: ... A: ... 4) special case to generate Boolean compare opcode 5) special case to generate conditional move sequence 6)   IF .. GOTO A       replaced by  IF .. GOTO B A: LABEL BBEND B: 7)  fallthrough to a goto: replicate goto to enable other optimizations. </pre> <p> Precondition: IfCmp.conforms(cb)
 * @param ir the governing IR
 * @param cb the instruction to optimize
 * @param bb the basic block holding if
 * @return true iff made a transformation
 */
private boolean processConditionalBranch(OPT_IR ir,OPT_Instruction cb,OPT_BasicBlock bb){
  OPT_BasicBlock targetBlock=cb.getBranchTarget();
  if (targetBlock.getLandingPad())   return false;
  OPT_Instruction targetLabel=targetBlock.firstInstruction();
  OPT_Instruction targetInst=firstRealInstructionFollowing(targetLabel);
  if (targetInst == null || targetInst == cb) {
    return false;
  }
  boolean endsBlock=cb.nextInstructionInCodeOrder().operator() == BBEND;
  if (endsBlock) {
    OPT_Instruction nextLabel=firstLabelFollowing(cb);
    if (targetLabel == nextLabel) {
      cb.remove();
      return true;
    }
    OPT_Instruction nextI=firstRealInstructionFollowing(nextLabel);
    if (nextI != null && Goto.conforms(nextI)) {
      cb.insertAfter(nextI.copyWithoutLinks());
      bb.recomputeNormalOut(ir);
      return true;
    }
  }
  if (generateBooleanCompare(ir,bb,cb,targetBlock)) {
    return true;
  }
  if (generateCondMove(ir,bb,cb)) {
    return true;
  }
  OPT_BasicBlock fallThrough=bb.getFallThroughBlock();
  if (fallThrough != null) {
    OPT_Instruction fallThroughInstruction=fallThrough.firstRealInstruction();
    if ((fallThroughInstruction != null) && Goto.conforms(fallThroughInstruction)) {
      bb.appendInstruction(fallThroughInstruction.copyWithoutLinks());
      bb.recomputeNormalOut(ir);
    }
  }
  if (Goto.conforms(targetInst)) {
    OPT_Instruction target2=firstRealInstructionFollowing(targetInst.getBranchTarget().firstInstruction());
    if (target2 == targetInst) {
      return false;
    }
    IfCmp.setTarget(cb,(OPT_BranchOperand)Goto.getTarget(targetInst).copy());
    bb.recomputeNormalOut(ir);
    return true;
  }
  if (targetBlock.isEmpty()) {
    OPT_BasicBlock nextBlock=targetBlock.getFallThroughBlock();
    IfCmp.setTarget(cb,nextBlock.makeJumpTarget());
    bb.recomputeNormalOut(ir);
    return true;
  }
  if (isFlipCandidate(cb,targetInst)) {
    flipConditionalBranch(cb);
    bb.recomputeNormalOut(ir);
    return true;
  }
  return false;
}","/** 
 * Perform optimizations for a conditional branch. <pre> 1)   IF .. GOTO A          replaced by  IF .. GOTO B ... A: GOTO B 2)   conditional branch to next instruction eliminated 3)   IF (condition) GOTO A  replaced by  IF (!condition) GOTO B GOTO B                           A: ... A: ... 4) special case to generate Boolean compare opcode 5) special case to generate conditional move sequence 6)   IF .. GOTO A       replaced by  IF .. GOTO B A: LABEL BBEND B: 7)  fallthrough to a goto: replicate goto to enable other optimizations. </pre> <p> Precondition: IfCmp.conforms(cb)
 * @param ir the governing IR
 * @param cb the instruction to optimize
 * @param bb the basic block holding if
 * @return true iff made a transformation
 */
private boolean processConditionalBranch(OPT_IR ir,OPT_Instruction cb,OPT_BasicBlock bb){
  OPT_BasicBlock targetBlock=cb.getBranchTarget();
  if (targetBlock.getLandingPad())   return false;
  OPT_Instruction targetLabel=targetBlock.firstInstruction();
  OPT_Instruction targetInst=firstRealInstructionFollowing(targetLabel);
  if (targetInst == null || targetInst == cb) {
    return false;
  }
  boolean endsBlock=cb.nextInstructionInCodeOrder().operator() == BBEND;
  if (endsBlock) {
    OPT_Instruction nextLabel=firstLabelFollowing(cb);
    if (targetLabel == nextLabel) {
      cb.remove();
      return true;
    }
    OPT_Instruction nextI=firstRealInstructionFollowing(nextLabel);
    if (nextI != null && Goto.conforms(nextI)) {
      OPT_BasicBlock gotoTarget=nextI.getBranchTarget();
      OPT_Instruction gotoLabel=gotoTarget.firstInstruction();
      OPT_Instruction gotoInst=firstRealInstructionFollowing(gotoLabel);
      if (gotoInst != nextI) {
        cb.insertAfter(nextI.copyWithoutLinks());
        bb.recomputeNormalOut(ir);
        return true;
      }
    }
  }
  if (generateBooleanCompare(ir,bb,cb,targetBlock)) {
    return true;
  }
  if (generateCondMove(ir,bb,cb)) {
    return true;
  }
  OPT_BasicBlock fallThrough=bb.getFallThroughBlock();
  if (fallThrough != null) {
    OPT_Instruction fallThroughInstruction=fallThrough.firstRealInstruction();
    if ((fallThroughInstruction != null) && Goto.conforms(fallThroughInstruction)) {
      bb.appendInstruction(fallThroughInstruction.copyWithoutLinks());
      bb.recomputeNormalOut(ir);
    }
  }
  if (Goto.conforms(targetInst)) {
    OPT_Instruction target2=firstRealInstructionFollowing(targetInst.getBranchTarget().firstInstruction());
    if (target2 == targetInst) {
      return false;
    }
    IfCmp.setTarget(cb,(OPT_BranchOperand)Goto.getTarget(targetInst).copy());
    bb.recomputeNormalOut(ir);
    return true;
  }
  if (targetBlock.isEmpty()) {
    OPT_BasicBlock nextBlock=targetBlock.getFallThroughBlock();
    IfCmp.setTarget(cb,nextBlock.makeJumpTarget());
    bb.recomputeNormalOut(ir);
    return true;
  }
  if (isFlipCandidate(cb,targetInst)) {
    flipConditionalBranch(cb);
    bb.recomputeNormalOut(ir);
    return true;
  }
  return false;
}",0.9544664581160932
149914,"/** 
 * Perform the compacting phase of the collection.
 */
public void compact(){
  if (initialRegion.isZero())   return;
  Address start=initialRegion;
  Address allocStart=initialRegion;
  Address allocEnd=initialRegion.plus(REGION_LIMIT_OFFSET).loadAddress();
  Address allocCursor=allocStart.plus(DATA_START_OFFSET);
  int oldPages=0;
  int newPages=0;
  while (!start.isZero()) {
    Address end=start.plus(REGION_LIMIT_OFFSET).loadAddress();
    Address dataEnd=start.plus(DATA_END_OFFSET).loadAddress();
    Address nextRegion=start.plus(NEXT_REGION_OFFSET).loadAddress();
    oldPages+=Conversions.bytesToPages(end.diff(start).plus(BYTES_IN_ADDRESS));
    Address currentLimit=(dataEnd.isZero() ? cursor : dataEnd);
    ObjectReference current=VM.objectModel.getObjectFromStartAddress(start.plus(DATA_START_OFFSET));
    while (VM.objectModel.refToAddress(current).LT(currentLimit) && !current.isNull()) {
      ObjectReference next=VM.objectModel.getNextObject(current);
      ObjectReference copyTo=MarkCompactSpace.getForwardingPointer(current);
      if (!copyTo.isNull() && Space.isInSpace(MC.MARK_COMPACT,copyTo)) {
        if (VM.VERIFY_ASSERTIONS)         VM.assertions._assert(!MarkCompactSpace.isMarked(current));
        if (copyTo.toAddress().GT(allocEnd) || copyTo.toAddress().LT(allocStart)) {
          VM.memory.zero(allocCursor,allocEnd.diff(allocCursor).toWord().toExtent().plus(BYTES_IN_ADDRESS));
          allocStart.store(allocCursor,DATA_END_OFFSET);
          allocStart=allocStart.plus(NEXT_REGION_OFFSET).loadAddress();
          allocEnd=allocStart.plus(REGION_LIMIT_OFFSET).loadAddress();
          allocCursor=allocStart.plus(DATA_START_OFFSET);
          newPages+=Conversions.bytesToPages(allocEnd.diff(allocStart).plus(BYTES_IN_ADDRESS));
          if (VM.VERIFY_ASSERTIONS) {
            VM.assertions._assert(allocCursor.LT(allocEnd) && allocCursor.GE(allocStart));
          }
        }
        allocCursor=VM.objectModel.copyTo(current,copyTo,allocCursor);
        MarkCompactSpace.setForwardingPointer(copyTo,ObjectReference.nullReference());
      }
      current=next;
    }
    if (dataEnd.isZero()) {
      break;
    }
    start=nextRegion;
  }
  Extent zeroBytes=allocEnd.diff(allocCursor).toWord().toExtent().plus(BYTES_IN_ADDRESS);
  VM.memory.zero(allocCursor,zeroBytes);
  allocStart.store(Address.zero(),DATA_END_OFFSET);
  region=allocStart;
  cursor=allocCursor;
  updateLimit(allocEnd,region,0);
  if (oldPages > newPages) {
    ((MarkCompactSpace)space).unusePages((oldPages - newPages));
  }
  allocStart=allocStart.loadAddress(NEXT_REGION_OFFSET);
  while (!allocStart.isZero()) {
    allocStart.store(Address.zero(),DATA_END_OFFSET);
    if (VM.VERIFY_ASSERTIONS) {
      Address low=allocStart.plus(DATA_START_OFFSET);
      Extent size=allocStart.loadAddress(REGION_LIMIT_OFFSET).diff(allocStart).toWord().toExtent().minus(2 * BYTES_IN_ADDRESS);
      VM.memory.zero(low,size);
    }
    allocStart=allocStart.loadAddress(NEXT_REGION_OFFSET);
  }
}","/** 
 * Perform the compacting phase of the collection.
 */
public void compact(){
  if (initialRegion.isZero())   return;
  Address start=initialRegion;
  Address allocStart=initialRegion;
  Address allocEnd=initialRegion.plus(REGION_LIMIT_OFFSET).loadAddress();
  Address allocCursor=allocStart.plus(DATA_START_OFFSET);
  int oldPages=0;
  int newPages=Conversions.bytesToPages(allocEnd.diff(allocStart).plus(BYTES_IN_ADDRESS));
  ;
  while (!start.isZero()) {
    Address end=start.plus(REGION_LIMIT_OFFSET).loadAddress();
    Address dataEnd=start.plus(DATA_END_OFFSET).loadAddress();
    Address nextRegion=start.plus(NEXT_REGION_OFFSET).loadAddress();
    oldPages+=Conversions.bytesToPages(end.diff(start).plus(BYTES_IN_ADDRESS));
    Address currentLimit=(dataEnd.isZero() ? cursor : dataEnd);
    ObjectReference current=VM.objectModel.getObjectFromStartAddress(start.plus(DATA_START_OFFSET));
    while (VM.objectModel.refToAddress(current).LT(currentLimit) && !current.isNull()) {
      ObjectReference next=VM.objectModel.getNextObject(current);
      ObjectReference copyTo=MarkCompactSpace.getForwardingPointer(current);
      if (!copyTo.isNull() && Space.isInSpace(MC.MARK_COMPACT,copyTo)) {
        if (VM.VERIFY_ASSERTIONS)         VM.assertions._assert(!MarkCompactSpace.isMarked(current));
        if (copyTo.toAddress().GT(allocEnd) || copyTo.toAddress().LT(allocStart)) {
          VM.memory.zero(allocCursor,allocEnd.diff(allocCursor).toWord().toExtent().plus(BYTES_IN_ADDRESS));
          allocStart.store(allocCursor,DATA_END_OFFSET);
          allocStart=allocStart.plus(NEXT_REGION_OFFSET).loadAddress();
          allocEnd=allocStart.plus(REGION_LIMIT_OFFSET).loadAddress();
          allocCursor=allocStart.plus(DATA_START_OFFSET);
          newPages+=Conversions.bytesToPages(allocEnd.diff(allocStart).plus(BYTES_IN_ADDRESS));
          if (VM.VERIFY_ASSERTIONS) {
            VM.assertions._assert(allocCursor.LT(allocEnd) && allocCursor.GE(allocStart));
          }
        }
        allocCursor=VM.objectModel.copyTo(current,copyTo,allocCursor);
        MarkCompactSpace.setForwardingPointer(copyTo,ObjectReference.nullReference());
      }
      current=next;
    }
    if (dataEnd.isZero()) {
      break;
    }
    start=nextRegion;
  }
  Extent zeroBytes=allocEnd.diff(allocCursor).toWord().toExtent().plus(BYTES_IN_ADDRESS);
  VM.memory.zero(allocCursor,zeroBytes);
  allocStart.store(Address.zero(),DATA_END_OFFSET);
  region=allocStart;
  cursor=allocCursor;
  updateLimit(allocEnd,region,0);
  if (oldPages > newPages) {
    ((MarkCompactSpace)space).unusePages((oldPages - newPages));
  }
  allocStart=allocStart.loadAddress(NEXT_REGION_OFFSET);
  while (!allocStart.isZero()) {
    allocStart.store(Address.zero(),DATA_END_OFFSET);
    if (VM.VERIFY_ASSERTIONS) {
      Address low=allocStart.plus(DATA_START_OFFSET);
      Extent size=allocStart.loadAddress(REGION_LIMIT_OFFSET).diff(allocStart).toWord().toExtent().minus(2 * BYTES_IN_ADDRESS);
      VM.memory.zero(low,size);
    }
    allocStart=allocStart.loadAddress(NEXT_REGION_OFFSET);
  }
}",0.987059787059787
149915,"/** 
 * Generate inline code sequence for specified method.
 * @param methodToBeCalled method whose name indicates semantics of code to be generated
 * @return true if there was magic defined for the method
 */
private boolean generateInlineCode(VM_MethodReference methodToBeCalled){
  VM_Atom methodName=methodToBeCalled.getName();
  if (methodToBeCalled.isSysCall()) {
    VM_TypeReference[] args=methodToBeCalled.getParameterTypes();
    int paramWords=methodToBeCalled.getParameterWords();
    int gp=FIRST_OS_PARAMETER_GPR;
    int fp=FIRST_OS_PARAMETER_FPR;
    int stackIndex=paramWords - 1;
    int paramBytes=((VM.BuildFor64Addr ? args.length : paramWords) - 1) * BYTES_IN_STACKSLOT;
    int callee_param_index=-BYTES_IN_STACKSLOT - paramBytes;
    for (int i=1; i < args.length; i++) {
      VM_TypeReference t=args[i];
      if (t.isLongType()) {
        stackIndex-=2;
        callee_param_index+=BYTES_IN_LONG;
        if (VM.BuildFor64Addr) {
          if (gp <= LAST_OS_PARAMETER_GPR) {
            peekLong(gp,gp,stackIndex);
            gp++;
          }
 else {
            peekLong(S0,S0,stackIndex);
            asm.emitSTD(S0,callee_param_index - BYTES_IN_LONG,FP);
          }
        }
 else {
          if (VM.BuildForLinux) {
            gp+=(gp + 1) & 0x01;
          }
          if (gp <= LAST_OS_PARAMETER_GPR) {
            peekInt(gp++,stackIndex);
          }
          if (gp <= LAST_OS_PARAMETER_GPR) {
            peekInt(gp++,stackIndex + 1);
          }
 else {
            peekLong(S0,S1,stackIndex);
            asm.emitSTW(S0,callee_param_index - BYTES_IN_LONG,FP);
            asm.emitSTW(S1,callee_param_index - BYTES_IN_INT,FP);
          }
        }
      }
 else       if (t.isFloatType()) {
        stackIndex-=1;
        callee_param_index+=BYTES_IN_STACKSLOT;
        if (fp <= LAST_OS_PARAMETER_FPR) {
          peekFloat(fp++,stackIndex);
        }
 else {
          peekFloat(FIRST_SCRATCH_FPR,stackIndex);
          asm.emitSTFS(FIRST_SCRATCH_FPR,callee_param_index - BYTES_IN_FLOAT,FP);
        }
      }
 else       if (t.isDoubleType()) {
        stackIndex-=2;
        callee_param_index+=BYTES_IN_DOUBLE;
        if (fp <= LAST_OS_PARAMETER_FPR) {
          peekDouble(fp++,stackIndex);
        }
 else {
          peekDouble(FIRST_SCRATCH_FPR,stackIndex);
          asm.emitSTFD(FIRST_SCRATCH_FPR,callee_param_index - BYTES_IN_DOUBLE,FP);
        }
      }
 else       if (t.isIntLikeType()) {
        stackIndex-=1;
        callee_param_index+=BYTES_IN_STACKSLOT;
        if (gp <= LAST_OS_PARAMETER_GPR) {
          peekInt(gp++,stackIndex);
        }
 else {
          peekInt(S0,stackIndex);
          asm.emitSTAddr(S0,callee_param_index - BYTES_IN_ADDRESS,FP);
        }
      }
 else {
        stackIndex-=1;
        callee_param_index+=BYTES_IN_STACKSLOT;
        if (gp <= LAST_OS_PARAMETER_GPR) {
          peekAddr(gp++,stackIndex);
        }
 else {
          peekAddr(S0,stackIndex);
          asm.emitSTAddr(S0,callee_param_index - BYTES_IN_ADDRESS,FP);
        }
      }
    }
    if (VM.VerifyAssertions) {
      VM._assert(stackIndex == 0);
    }
    peekAddr(S0,paramWords - 1);
    generateSysCall(paramBytes);
    discardSlots(paramWords);
    VM_TypeReference rtype=methodToBeCalled.getReturnType();
    if (rtype.isIntLikeType()) {
      pushInt(T0);
    }
 else     if (rtype.isWordType() || rtype.isReferenceType()) {
      pushAddr(T0);
    }
 else     if (rtype.isDoubleType()) {
      pushDouble(FIRST_OS_PARAMETER_FPR);
    }
 else     if (rtype.isFloatType()) {
      pushFloat(FIRST_OS_PARAMETER_FPR);
    }
 else     if (rtype.isLongType()) {
      pushLong(T0,VM.BuildFor64Addr ? T0 : T1);
    }
    return true;
  }
  if (methodToBeCalled.getType() == VM_TypeReference.Address) {
    VM_TypeReference[] types=methodToBeCalled.getParameterTypes();
    if (methodName == VM_MagicNames.loadAddress || methodName == VM_MagicNames.loadObjectReference || methodName == VM_MagicNames.loadWord) {
      if (types.length == 0) {
        popAddr(T0);
        asm.emitLAddr(T0,0,T0);
        pushAddr(T0);
      }
 else {
        popInt(T1);
        popAddr(T0);
        asm.emitLAddrX(T0,T1,T0);
        pushAddr(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.loadChar) {
      if (types.length == 0) {
        popAddr(T0);
        asm.emitLHZ(T0,0,T0);
        pushInt(T0);
      }
 else {
        popInt(T1);
        popAddr(T0);
        asm.emitLHZX(T0,T1,T0);
        pushInt(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.loadShort) {
      if (types.length == 0) {
        popAddr(T0);
        asm.emitLHA(T0,0,T0);
        pushInt(T0);
      }
 else {
        popInt(T1);
        popAddr(T0);
        asm.emitLHAX(T0,T1,T0);
        pushInt(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.loadByte) {
      if (types.length == 0) {
        popAddr(T0);
        asm.emitLBZ(T0,0,T0);
        pushInt(T0);
      }
 else {
        popInt(T1);
        popAddr(T0);
        asm.emitLBZX(T0,T1,T0);
        pushInt(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.loadInt || methodName == VM_MagicNames.loadFloat) {
      if (types.length == 0) {
        popAddr(T0);
        asm.emitLInt(T0,0,T0);
        pushInt(T0);
      }
 else {
        popInt(T1);
        popAddr(T0);
        asm.emitLIntX(T0,T1,T0);
        pushInt(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.loadDouble || methodName == VM_MagicNames.loadLong) {
      if (types.length == 0) {
        popAddr(T1);
        asm.emitLFD(F0,0,T1);
        pushDouble(F0);
      }
 else {
        popInt(T2);
        popAddr(T1);
        asm.emitLFDX(F0,T1,T2);
        pushDouble(F0);
      }
      return true;
    }
    if ((methodName == VM_MagicNames.prepareInt) || (VM.BuildFor32Addr && (methodName == VM_MagicNames.prepareWord)) || (VM.BuildFor32Addr && (methodName == VM_MagicNames.prepareObjectReference))|| (VM.BuildFor32Addr && (methodName == VM_MagicNames.prepareAddress))) {
      if (types.length == 0) {
        popAddr(T0);
        asm.emitLWARX(T0,0,T0);
        pushInt(T0);
      }
 else {
        popInt(T1);
        popAddr(T0);
        asm.emitLWARX(T0,T1,T0);
        pushInt(T0);
      }
      return true;
    }
    if ((methodName == VM_MagicNames.prepareLong) || (VM.BuildFor64Addr && (methodName == VM_MagicNames.prepareWord)) || (VM.BuildFor64Addr && (methodName == VM_MagicNames.prepareObjectReference))|| (VM.BuildFor64Addr && (methodName == VM_MagicNames.prepareAddress))) {
      if (types.length == 0) {
        popAddr(T0);
        asm.emitLDARX(T0,0,T0);
        pushAddr(T0);
      }
 else {
        popInt(T1);
        popAddr(T0);
        if (VM.BuildFor64Addr) {
          asm.emitLDARX(T0,T1,T0);
        }
 else {
        }
        pushAddr(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.attempt && ((types[0] == VM_TypeReference.Int) || (VM.BuildFor32Addr && (types[0] == VM_TypeReference.Address)) || (VM.BuildFor32Addr && (types[0] == VM_TypeReference.Word)))) {
      if (types.length == 2) {
        popInt(T2);
        discardSlot();
        popAddr(T0);
        asm.emitSTWCXr(T2,0,T0);
        asm.emitLVAL(T0,0);
        VM_ForwardReference fr=asm.emitForwardBC(NE);
        asm.emitLVAL(T0,1);
        fr.resolve(asm);
        pushInt(T0);
      }
 else {
        popInt(T1);
        popInt(T2);
        discardSlot();
        popAddr(T0);
        asm.emitSTWCXr(T2,T1,T0);
        asm.emitLVAL(T0,0);
        VM_ForwardReference fr=asm.emitForwardBC(NE);
        asm.emitLVAL(T0,1);
        fr.resolve(asm);
        pushInt(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.attempt && ((types[0] == VM_TypeReference.Long) || (VM.BuildFor64Addr && (types[0] == VM_TypeReference.Address)) || (VM.BuildFor64Addr && (types[0] == VM_TypeReference.Word)))) {
      if (types.length == 2) {
        popAddr(T2);
        discardSlot();
        popAddr(T0);
        asm.emitSTDCXr(T2,0,T0);
        asm.emitLVAL(T0,0);
        VM_ForwardReference fr=asm.emitForwardBC(NE);
        asm.emitLVAL(T0,1);
        fr.resolve(asm);
        pushInt(T0);
      }
 else {
        popInt(T1);
        popAddr(T2);
        discardSlot();
        popAddr(T0);
        if (VM.BuildFor64Addr) {
          asm.emitSTDCXr(T2,T1,T0);
        }
 else {
        }
        asm.emitLVAL(T0,0);
        VM_ForwardReference fr=asm.emitForwardBC(NE);
        asm.emitLVAL(T0,1);
        fr.resolve(asm);
        pushInt(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.store) {
      if (types[0] == VM_TypeReference.Word || types[0] == VM_TypeReference.ObjectReference || types[0] == VM_TypeReference.Address) {
        if (types.length == 1) {
          popAddr(T1);
          popAddr(T0);
          asm.emitSTAddrX(T1,0,T0);
        }
 else {
          popInt(T1);
          popAddr(T2);
          popAddr(T0);
          asm.emitSTAddrX(T2,T1,T0);
        }
        return true;
      }
      if (types[0] == VM_TypeReference.Byte) {
        if (types.length == 1) {
          popInt(T1);
          popAddr(T0);
          asm.emitSTBX(T1,0,T0);
        }
 else {
          popInt(T1);
          popInt(T2);
          popAddr(T0);
          asm.emitSTBX(T2,T1,T0);
        }
        return true;
      }
      if (types[0] == VM_TypeReference.Int || types[0] == VM_TypeReference.Float) {
        if (types.length == 1) {
          popInt(T1);
          popAddr(T0);
          asm.emitSTWX(T1,0,T0);
        }
 else {
          popInt(T1);
          popInt(T2);
          popAddr(T0);
          asm.emitSTWX(T2,T1,T0);
        }
        return true;
      }
      if (types[0] == VM_TypeReference.Short || types[0] == VM_TypeReference.Char) {
        if (types.length == 1) {
          popInt(T1);
          popAddr(T0);
          asm.emitSTHX(T1,0,T0);
        }
 else {
          popInt(T1);
          popInt(T2);
          popAddr(T0);
          asm.emitSTHX(T2,T1,T0);
        }
        return true;
      }
      if (types[0] == VM_TypeReference.Double || types[0] == VM_TypeReference.Long) {
        if (types.length == 1) {
          popLong(T2,T1);
          popAddr(T0);
          if (VM.BuildFor32Addr) {
            asm.emitSTWX(T2,0,T0);
            asm.emitSTWX(T1,BYTES_IN_INT,T0);
          }
 else {
            asm.emitSTDX(T1,0,T0);
          }
        }
 else {
          popInt(T1);
          popLong(T3,T2);
          popAddr(T0);
          if (VM.BuildFor32Addr) {
            asm.emitSTWX(T3,T1,T0);
            asm.emitADDI(T1,BYTES_IN_INT,T1);
            asm.emitSTWX(T2,T1,T0);
          }
 else {
            asm.emitSTDX(T2,T1,T0);
          }
        }
        return true;
      }
    }
  }
  if (methodName == VM_MagicNames.getFramePointer) {
    pushAddr(FP);
  }
 else   if (methodName == VM_MagicNames.getCallerFramePointer) {
    popAddr(T0);
    asm.emitLAddr(T1,STACKFRAME_FRAME_POINTER_OFFSET,T0);
    pushAddr(T1);
  }
 else   if (methodName == VM_MagicNames.setCallerFramePointer) {
    popAddr(T1);
    popAddr(T0);
    asm.emitSTAddr(T1,STACKFRAME_FRAME_POINTER_OFFSET,T0);
  }
 else   if (methodName == VM_MagicNames.getCompiledMethodID) {
    popAddr(T0);
    asm.emitLInt(T1,STACKFRAME_METHOD_ID_OFFSET,T0);
    pushInt(T1);
  }
 else   if (methodName == VM_MagicNames.setCompiledMethodID) {
    popInt(T1);
    popAddr(T0);
    asm.emitSTW(T1,STACKFRAME_METHOD_ID_OFFSET,T0);
  }
 else   if (methodName == VM_MagicNames.getNextInstructionAddress) {
    popAddr(T0);
    asm.emitLAddr(T1,STACKFRAME_NEXT_INSTRUCTION_OFFSET,T0);
    pushAddr(T1);
  }
 else   if (methodName == VM_MagicNames.getReturnAddressLocation) {
    popAddr(T0);
    asm.emitLAddr(T1,STACKFRAME_FRAME_POINTER_OFFSET,T0);
    asm.emitADDI(T2,STACKFRAME_NEXT_INSTRUCTION_OFFSET,T1);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.getTocPointer || methodName == VM_MagicNames.getJTOC) {
    pushAddr(JTOC);
  }
 else   if (methodName == VM_MagicNames.getProcessorRegister) {
    pushAddr(PROCESSOR_REGISTER);
  }
 else   if (methodName == VM_MagicNames.setProcessorRegister) {
    popAddr(PROCESSOR_REGISTER);
  }
 else   if (methodName == VM_MagicNames.getTimeBase) {
    if (VM.BuildFor64Addr) {
      asm.emitMFTB(T1);
    }
 else {
      int label=asm.getMachineCodeIndex();
      asm.emitMFTBU(T0);
      asm.emitMFTB(T1);
      asm.emitMFTBU(T2);
      asm.emitCMP(T0,T2);
      asm.emitBC(NE,label);
    }
    pushLong(T0,T1);
  }
 else   if (methodName == VM_MagicNames.invokeClassInitializer) {
    popAddr(T0);
    asm.emitMTCTR(T0);
    asm.emitBCCTRL();
  }
 else   if (methodName == VM_MagicNames.invokeMethodReturningVoid) {
    generateMethodInvocation();
  }
 else   if (methodName == VM_MagicNames.invokeMethodReturningInt) {
    generateMethodInvocation();
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.invokeMethodReturningLong) {
    generateMethodInvocation();
    pushLong(T0,VM.BuildFor64Addr ? T0 : T1);
  }
 else   if (methodName == VM_MagicNames.invokeMethodReturningFloat) {
    generateMethodInvocation();
    pushFloat(F0);
  }
 else   if (methodName == VM_MagicNames.invokeMethodReturningDouble) {
    generateMethodInvocation();
    pushDouble(F0);
  }
 else   if (methodName == VM_MagicNames.invokeMethodReturningObject) {
    generateMethodInvocation();
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.addressArrayCreate) {
    VM_Array type=methodToBeCalled.getType().resolve().asArray();
    emit_resolved_newarray(type);
  }
 else   if (methodName == VM_MagicNames.addressArrayLength) {
    emit_arraylength();
  }
 else   if (methodName == VM_MagicNames.addressArrayGet) {
    if (VM.BuildFor32Addr || methodToBeCalled.getType() == VM_TypeReference.CodeArray) {
      emit_iaload();
    }
 else {
      genBoundsCheck();
      asm.emitSLDI(T1,T1,LOG_BYTES_IN_ADDRESS);
      asm.emitLAddrX(T2,T0,T1);
      pushAddr(T2);
    }
  }
 else   if (methodName == VM_MagicNames.addressArraySet) {
    if (VM.BuildFor32Addr || methodToBeCalled.getType() == VM_TypeReference.CodeArray) {
      emit_iastore();
    }
 else {
      popAddr(T2);
      genBoundsCheck();
      asm.emitSLDI(T1,T1,LOG_BYTES_IN_ADDRESS);
      asm.emitSTAddrX(T2,T0,T1);
    }
  }
 else   if (methodName == VM_MagicNames.getIntAtOffset) {
    popInt(T1);
    popAddr(T0);
    asm.emitLIntX(T0,T1,T0);
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.getObjectAtOffset || methodName == VM_MagicNames.getWordAtOffset || methodName == VM_MagicNames.getObjectArrayAtOffset) {
    popInt(T1);
    popAddr(T0);
    asm.emitLAddrX(T0,T1,T0);
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.getUnsignedByteAtOffset) {
    popInt(T1);
    popAddr(T0);
    asm.emitLBZX(T0,T1,T0);
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.getByteAtOffset) {
    popInt(T1);
    popAddr(T0);
    asm.emitLBZX(T0,T1,T0);
    asm.emitEXTSB(T0,T0);
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.getCharAtOffset) {
    popInt(T1);
    popAddr(T0);
    asm.emitLHZX(T0,T1,T0);
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.getShortAtOffset) {
    popInt(T1);
    popAddr(T0);
    asm.emitLHAX(T0,T1,T0);
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.setIntAtOffset) {
    popInt(T2);
    popInt(T1);
    popAddr(T0);
    asm.emitSTWX(T2,T1,T0);
  }
 else   if (methodName == VM_MagicNames.setObjectAtOffset || methodName == VM_MagicNames.setWordAtOffset) {
    if (methodToBeCalled.getParameterTypes().length == 4) {
      discardSlot();
    }
    popAddr(T2);
    popInt(T1);
    popAddr(T0);
    asm.emitSTAddrX(T2,T1,T0);
  }
 else   if (methodName == VM_MagicNames.setByteAtOffset) {
    popInt(T2);
    popInt(T1);
    popAddr(T0);
    asm.emitSTBX(T2,T1,T0);
  }
 else   if (methodName == VM_MagicNames.setCharAtOffset) {
    popInt(T2);
    popInt(T1);
    popAddr(T0);
    asm.emitSTHX(T2,T1,T0);
  }
 else   if (methodName == VM_MagicNames.getLongAtOffset || methodName == VM_MagicNames.getDoubleAtOffset) {
    popInt(T2);
    popAddr(T1);
    asm.emitLFDX(F0,T1,T2);
    pushDouble(F0);
  }
 else   if ((methodName == VM_MagicNames.setLongAtOffset) || (methodName == VM_MagicNames.setDoubleAtOffset)) {
    popLong(T3,T2);
    popInt(T1);
    popAddr(T0);
    if (VM.BuildFor32Addr) {
      asm.emitSTWX(T3,T1,T0);
      asm.emitADDI(T1,BYTES_IN_INT,T1);
      asm.emitSTWX(T2,T1,T0);
    }
 else {
      asm.emitSTDX(T2,T1,T0);
    }
  }
 else   if (methodName == VM_MagicNames.getMemoryInt) {
    popAddr(T0);
    asm.emitLInt(T0,0,T0);
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.getMemoryWord || methodName == VM_MagicNames.getMemoryAddress) {
    popAddr(T0);
    asm.emitLAddr(T0,0,T0);
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.setMemoryInt) {
    popInt(T1);
    popAddr(T0);
    asm.emitSTW(T1,0,T0);
  }
 else   if (methodName == VM_MagicNames.setMemoryWord) {
    if (methodToBeCalled.getParameterTypes().length == 3) {
      discardSlot();
    }
    popAddr(T1);
    popAddr(T0);
    asm.emitSTAddr(T1,0,T0);
  }
 else   if ((methodName == VM_MagicNames.prepareInt) || (VM.BuildFor32Addr && (methodName == VM_MagicNames.prepareObject)) || (VM.BuildFor32Addr && (methodName == VM_MagicNames.prepareAddress))|| (VM.BuildFor32Addr && (methodName == VM_MagicNames.prepareWord))) {
    popInt(T1);
    popAddr(T0);
    asm.emitLWARX(T0,T1,T0);
    pushInt(T0);
  }
 else   if ((methodName == VM_MagicNames.prepareLong) || (VM.BuildFor64Addr && (methodName == VM_MagicNames.prepareObject)) || (VM.BuildFor64Addr && (methodName == VM_MagicNames.prepareAddress))|| (VM.BuildFor64Addr && (methodName == VM_MagicNames.prepareWord))) {
    popInt(T1);
    popAddr(T0);
    if (VM.BuildFor64Addr) {
      asm.emitLDARX(T0,T1,T0);
    }
 else {
    }
    pushAddr(T0);
  }
 else   if ((methodName == VM_MagicNames.attemptInt) || (VM.BuildFor32Addr && (methodName == VM_MagicNames.attemptObject)) || (VM.BuildFor32Addr && (methodName == VM_MagicNames.attemptObjectReference))|| (VM.BuildFor32Addr && (methodName == VM_MagicNames.attemptAddress))|| (VM.BuildFor32Addr && (methodName == VM_MagicNames.attemptWord))) {
    popInt(T2);
    discardSlot();
    popInt(T1);
    popAddr(T0);
    asm.emitSTWCXr(T2,T1,T0);
    asm.emitLVAL(T0,0);
    VM_ForwardReference fr=asm.emitForwardBC(NE);
    asm.emitLVAL(T0,1);
    fr.resolve(asm);
    pushInt(T0);
  }
 else   if ((methodName == VM_MagicNames.attemptLong) || (VM.BuildFor64Addr && (methodName == VM_MagicNames.attemptObject)) || (VM.BuildFor64Addr && (methodName == VM_MagicNames.attemptObjectReference))|| (VM.BuildFor64Addr && (methodName == VM_MagicNames.attemptAddress))|| (VM.BuildFor64Addr && (methodName == VM_MagicNames.attemptWord))) {
    popAddr(T2);
    discardSlot();
    popInt(T1);
    popAddr(T0);
    if (VM.BuildFor64Addr) {
      asm.emitSTDCXr(T2,T1,T0);
    }
 else {
    }
    asm.emitLVAL(T0,0);
    VM_ForwardReference fr=asm.emitForwardBC(NE);
    asm.emitLVAL(T0,1);
    fr.resolve(asm);
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.saveThreadState) {
    peekAddr(T0,0);
    asm.emitLAddrToc(S0,VM_Entrypoints.saveThreadStateInstructionsField.getOffset());
    asm.emitMTCTR(S0);
    asm.emitBCCTRL();
    discardSlot();
  }
 else   if (methodName == VM_MagicNames.threadSwitch) {
    peekAddr(T1,0);
    peekAddr(T0,1);
    asm.emitLAddrToc(S0,VM_Entrypoints.threadSwitchInstructionsField.getOffset());
    asm.emitMTCTR(S0);
    asm.emitBCCTRL();
    discardSlots(2);
  }
 else   if (methodName == VM_MagicNames.restoreHardwareExceptionState) {
    peekAddr(T0,0);
    asm.emitLAddrToc(S0,VM_Entrypoints.restoreHardwareExceptionStateInstructionsField.getOffset());
    asm.emitMTLR(S0);
    asm.emitBCLR();
  }
 else   if (methodName == VM_MagicNames.returnToNewStack) {
    peekAddr(FP,0);
    asm.emitLAddr(S0,STACKFRAME_NEXT_INSTRUCTION_OFFSET,FP);
    asm.emitMTLR(S0);
    asm.emitBCLR();
  }
 else   if (methodName == VM_MagicNames.dynamicBridgeTo) {
    if (VM.VerifyAssertions)     VM._assert(klass.hasDynamicBridgeAnnotation());
    peekAddr(T0,0);
    asm.emitMTCTR(T0);
    int offset=frameSize;
    for (int i=LAST_NONVOLATILE_FPR; i >= FIRST_VOLATILE_FPR; --i) {
      asm.emitLFD(i,offset-=BYTES_IN_DOUBLE,FP);
    }
    for (int i=LAST_NONVOLATILE_GPR; i >= FIRST_NONVOLATILE_GPR; --i) {
      asm.emitLAddr(i,offset-=BYTES_IN_ADDRESS,FP);
    }
    offset-=(FIRST_NONVOLATILE_GPR - LAST_VOLATILE_GPR - 1) * BYTES_IN_ADDRESS;
    for (int i=LAST_VOLATILE_GPR; i >= FIRST_VOLATILE_GPR; --i) {
      asm.emitLAddr(i,offset-=BYTES_IN_ADDRESS,FP);
    }
    asm.emitLAddr(FP,0,FP);
    asm.emitLAddr(S0,STACKFRAME_NEXT_INSTRUCTION_OFFSET,FP);
    asm.emitMTLR(S0);
    asm.emitBCCTR();
  }
 else   if (methodName == VM_MagicNames.objectAsAddress || methodName == VM_MagicNames.addressAsByteArray || methodName == VM_MagicNames.addressAsObject || methodName == VM_MagicNames.addressAsObjectArray || methodName == VM_MagicNames.objectAsType || methodName == VM_MagicNames.objectAsShortArray || methodName == VM_MagicNames.objectAsIntArray || methodName == VM_MagicNames.objectAsProcessor || methodName == VM_MagicNames.threadAsCollectorThread || methodName == VM_MagicNames.floatAsIntBits || methodName == VM_MagicNames.intBitsAsFloat || methodName == VM_MagicNames.doubleAsLongBits || methodName == VM_MagicNames.longBitsAsDouble) {
  }
 else   if (methodName == VM_MagicNames.getObjectType) {
    popAddr(T0);
    VM_ObjectModel.baselineEmitLoadTIB(asm,T0,T0);
    asm.emitLAddr(T0,TIB_TYPE_INDEX << LOG_BYTES_IN_ADDRESS,T0);
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.getArrayLength) {
    popAddr(T0);
    asm.emitLIntOffset(T0,T0,VM_ObjectModel.getArrayLengthOffset());
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.sync) {
    asm.emitSYNC();
  }
 else   if (methodName == VM_MagicNames.isync) {
    asm.emitISYNC();
  }
 else   if (methodName == VM_MagicNames.dcbst) {
    popAddr(T0);
    asm.emitDCBST(0,T0);
  }
 else   if (methodName == VM_MagicNames.dcbt) {
    popAddr(T0);
    asm.emitDCBT(0,T0);
  }
 else   if (methodName == VM_MagicNames.dcbtst) {
    popAddr(T0);
    asm.emitDCBTST(0,T0);
  }
 else   if (methodName == VM_MagicNames.dcbz) {
    popAddr(T0);
    asm.emitDCBZ(0,T0);
  }
 else   if (methodName == VM_MagicNames.dcbzl) {
    popAddr(T0);
    asm.emitDCBZL(0,T0);
  }
 else   if (methodName == VM_MagicNames.icbi) {
    popAddr(T0);
    asm.emitICBI(0,T0);
  }
 else   if (methodName == VM_MagicNames.wordToInt || methodName == VM_MagicNames.wordToAddress || methodName == VM_MagicNames.wordToOffset || methodName == VM_MagicNames.wordToObject || methodName == VM_MagicNames.wordFromObject || methodName == VM_MagicNames.wordToObjectReference || methodName == VM_MagicNames.wordToExtent || methodName == VM_MagicNames.wordToWord || methodName == VM_MagicNames.codeArrayToAddress) {
  }
 else   if (methodName == VM_MagicNames.wordToLong) {
    asm.emitLVAL(T0,0);
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.wordFromInt || methodName == VM_MagicNames.wordFromIntSignExtend) {
    if (VM.BuildFor64Addr) {
      popInt(T0);
      pushAddr(T0);
    }
  }
 else   if (methodName == VM_MagicNames.wordFromIntZeroExtend) {
    if (VM.BuildFor64Addr) {
      asm.emitLWZ(T0,spTopOffset + BYTES_IN_STACKSLOT - BYTES_IN_INT,FP);
      pokeAddr(T0,0);
    }
  }
 else   if (methodName == VM_MagicNames.wordFromLong) {
    discardSlot();
  }
 else   if (methodName == VM_MagicNames.wordPlus) {
    if (VM.BuildFor64Addr && (methodToBeCalled.getParameterTypes()[0] == VM_TypeReference.Int)) {
      popInt(T0);
    }
 else {
      popAddr(T0);
    }
    popAddr(T1);
    asm.emitADD(T2,T1,T0);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordMinus || methodName == VM_MagicNames.wordDiff) {
    if (VM.BuildFor64Addr && (methodToBeCalled.getParameterTypes()[0] == VM_TypeReference.Int)) {
      popInt(T0);
    }
 else {
      popAddr(T0);
    }
    popAddr(T1);
    asm.emitSUBFC(T2,T0,T1);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordEQ) {
    generateAddrComparison(false,EQ);
  }
 else   if (methodName == VM_MagicNames.wordNE) {
    generateAddrComparison(false,NE);
  }
 else   if (methodName == VM_MagicNames.wordLT) {
    generateAddrComparison(false,LT);
  }
 else   if (methodName == VM_MagicNames.wordLE) {
    generateAddrComparison(false,LE);
  }
 else   if (methodName == VM_MagicNames.wordGT) {
    generateAddrComparison(false,GT);
  }
 else   if (methodName == VM_MagicNames.wordGE) {
    generateAddrComparison(false,GE);
  }
 else   if (methodName == VM_MagicNames.wordsLT) {
    generateAddrComparison(true,LT);
  }
 else   if (methodName == VM_MagicNames.wordsLE) {
    generateAddrComparison(true,LE);
  }
 else   if (methodName == VM_MagicNames.wordsGT) {
    generateAddrComparison(true,GT);
  }
 else   if (methodName == VM_MagicNames.wordsGE) {
    generateAddrComparison(true,GE);
  }
 else   if (methodName == VM_MagicNames.wordIsZero || methodName == VM_MagicNames.wordIsNull) {
    asm.emitLVAL(T0,0);
    pushAddr(T0);
    generateAddrComparison(false,EQ);
  }
 else   if (methodName == VM_MagicNames.wordIsMax) {
    asm.emitLVAL(T0,-1);
    pushAddr(T0);
    generateAddrComparison(false,EQ);
  }
 else   if (methodName == VM_MagicNames.wordZero || methodName == VM_MagicNames.wordNull) {
    asm.emitLVAL(T0,0);
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.wordOne) {
    asm.emitLVAL(T0,1);
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.wordMax) {
    asm.emitLVAL(T0,-1);
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.wordAnd) {
    popAddr(T0);
    popAddr(T1);
    asm.emitAND(T2,T1,T0);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordOr) {
    popAddr(T0);
    popAddr(T1);
    asm.emitOR(T2,T1,T0);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordNot) {
    popAddr(T0);
    asm.emitLVAL(T1,-1);
    asm.emitXOR(T2,T1,T0);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordXor) {
    popAddr(T0);
    popAddr(T1);
    asm.emitXOR(T2,T1,T0);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordLsh) {
    popInt(T0);
    popAddr(T1);
    asm.emitSLAddr(T2,T1,T0);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordRshl) {
    popInt(T0);
    popAddr(T1);
    asm.emitSRAddr(T2,T1,T0);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordRsha) {
    popInt(T0);
    popAddr(T1);
    asm.emitSRA_Addr(T2,T1,T0);
    pushAddr(T2);
  }
 else {
    return false;
  }
  return true;
}","/** 
 * Generate inline code sequence for specified method.
 * @param methodToBeCalled method whose name indicates semantics of code to be generated
 * @return true if there was magic defined for the method
 */
private boolean generateInlineCode(VM_MethodReference methodToBeCalled){
  VM_Atom methodName=methodToBeCalled.getName();
  if (methodToBeCalled.isSysCall()) {
    VM_TypeReference[] args=methodToBeCalled.getParameterTypes();
    int paramWords=methodToBeCalled.getParameterWords();
    int gp=FIRST_OS_PARAMETER_GPR;
    int fp=FIRST_OS_PARAMETER_FPR;
    int stackIndex=paramWords - 1;
    int paramBytes=((VM.BuildFor64Addr ? args.length : paramWords) - 1) * BYTES_IN_STACKSLOT;
    int callee_param_index=-BYTES_IN_STACKSLOT - paramBytes;
    for (int i=1; i < args.length; i++) {
      VM_TypeReference t=args[i];
      if (t.isLongType()) {
        stackIndex-=2;
        callee_param_index+=BYTES_IN_LONG;
        if (VM.BuildFor64Addr) {
          if (gp <= LAST_OS_PARAMETER_GPR) {
            peekLong(gp,gp,stackIndex);
            gp++;
          }
 else {
            peekLong(S0,S0,stackIndex);
            asm.emitSTD(S0,callee_param_index - BYTES_IN_LONG,FP);
          }
        }
 else {
          if (VM.BuildForLinux) {
            gp+=(gp + 1) & 0x01;
          }
          if (gp <= LAST_OS_PARAMETER_GPR) {
            peekInt(gp++,stackIndex);
          }
          if (gp <= LAST_OS_PARAMETER_GPR) {
            peekInt(gp++,stackIndex + 1);
          }
 else {
            peekLong(S0,S1,stackIndex);
            asm.emitSTW(S0,callee_param_index - BYTES_IN_LONG,FP);
            asm.emitSTW(S1,callee_param_index - BYTES_IN_INT,FP);
          }
        }
      }
 else       if (t.isFloatType()) {
        stackIndex-=1;
        callee_param_index+=BYTES_IN_STACKSLOT;
        if (fp <= LAST_OS_PARAMETER_FPR) {
          peekFloat(fp++,stackIndex);
        }
 else {
          peekFloat(FIRST_SCRATCH_FPR,stackIndex);
          asm.emitSTFS(FIRST_SCRATCH_FPR,callee_param_index - BYTES_IN_FLOAT,FP);
        }
      }
 else       if (t.isDoubleType()) {
        stackIndex-=2;
        callee_param_index+=BYTES_IN_DOUBLE;
        if (fp <= LAST_OS_PARAMETER_FPR) {
          peekDouble(fp++,stackIndex);
        }
 else {
          peekDouble(FIRST_SCRATCH_FPR,stackIndex);
          asm.emitSTFD(FIRST_SCRATCH_FPR,callee_param_index - BYTES_IN_DOUBLE,FP);
        }
      }
 else       if (t.isIntLikeType()) {
        stackIndex-=1;
        callee_param_index+=BYTES_IN_STACKSLOT;
        if (gp <= LAST_OS_PARAMETER_GPR) {
          peekInt(gp++,stackIndex);
        }
 else {
          peekInt(S0,stackIndex);
          asm.emitSTAddr(S0,callee_param_index - BYTES_IN_ADDRESS,FP);
        }
      }
 else {
        stackIndex-=1;
        callee_param_index+=BYTES_IN_STACKSLOT;
        if (gp <= LAST_OS_PARAMETER_GPR) {
          peekAddr(gp++,stackIndex);
        }
 else {
          peekAddr(S0,stackIndex);
          asm.emitSTAddr(S0,callee_param_index - BYTES_IN_ADDRESS,FP);
        }
      }
    }
    if (VM.VerifyAssertions) {
      VM._assert(stackIndex == 0);
    }
    peekAddr(S0,paramWords - 1);
    generateSysCall(paramBytes);
    discardSlots(paramWords);
    VM_TypeReference rtype=methodToBeCalled.getReturnType();
    if (rtype.isIntLikeType()) {
      pushInt(T0);
    }
 else     if (rtype.isWordType() || rtype.isReferenceType()) {
      pushAddr(T0);
    }
 else     if (rtype.isDoubleType()) {
      pushDouble(FIRST_OS_PARAMETER_FPR);
    }
 else     if (rtype.isFloatType()) {
      pushFloat(FIRST_OS_PARAMETER_FPR);
    }
 else     if (rtype.isLongType()) {
      pushLong(T0,VM.BuildFor64Addr ? T0 : T1);
    }
    return true;
  }
  if (methodToBeCalled.getType() == VM_TypeReference.Address) {
    VM_TypeReference[] types=methodToBeCalled.getParameterTypes();
    if (methodName == VM_MagicNames.loadAddress || methodName == VM_MagicNames.loadObjectReference || methodName == VM_MagicNames.loadWord) {
      if (types.length == 0) {
        popAddr(T0);
        asm.emitLAddr(T0,0,T0);
        pushAddr(T0);
      }
 else {
        popInt(T1);
        popAddr(T0);
        asm.emitLAddrX(T0,T1,T0);
        pushAddr(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.loadChar) {
      if (types.length == 0) {
        popAddr(T0);
        asm.emitLHZ(T0,0,T0);
        pushInt(T0);
      }
 else {
        popInt(T1);
        popAddr(T0);
        asm.emitLHZX(T0,T1,T0);
        pushInt(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.loadShort) {
      if (types.length == 0) {
        popAddr(T0);
        asm.emitLHA(T0,0,T0);
        pushInt(T0);
      }
 else {
        popInt(T1);
        popAddr(T0);
        asm.emitLHAX(T0,T1,T0);
        pushInt(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.loadByte) {
      if (types.length == 0) {
        popAddr(T0);
        asm.emitLBZ(T0,0,T0);
        pushInt(T0);
      }
 else {
        popInt(T1);
        popAddr(T0);
        asm.emitLBZX(T0,T1,T0);
        pushInt(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.loadInt || methodName == VM_MagicNames.loadFloat) {
      if (types.length == 0) {
        popAddr(T0);
        asm.emitLInt(T0,0,T0);
        pushInt(T0);
      }
 else {
        popInt(T1);
        popAddr(T0);
        asm.emitLIntX(T0,T1,T0);
        pushInt(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.loadDouble || methodName == VM_MagicNames.loadLong) {
      if (types.length == 0) {
        popAddr(T1);
        asm.emitLFD(F0,0,T1);
        pushDouble(F0);
      }
 else {
        popInt(T2);
        popAddr(T1);
        asm.emitLFDX(F0,T1,T2);
        pushDouble(F0);
      }
      return true;
    }
    if ((methodName == VM_MagicNames.prepareInt) || (VM.BuildFor32Addr && (methodName == VM_MagicNames.prepareWord)) || (VM.BuildFor32Addr && (methodName == VM_MagicNames.prepareObjectReference))|| (VM.BuildFor32Addr && (methodName == VM_MagicNames.prepareAddress))) {
      if (types.length == 0) {
        popAddr(T0);
        asm.emitLWARX(T0,0,T0);
        pushInt(T0);
      }
 else {
        popInt(T1);
        popAddr(T0);
        asm.emitLWARX(T0,T1,T0);
        pushInt(T0);
      }
      return true;
    }
    if ((methodName == VM_MagicNames.prepareLong) || (VM.BuildFor64Addr && (methodName == VM_MagicNames.prepareWord)) || (VM.BuildFor64Addr && (methodName == VM_MagicNames.prepareObjectReference))|| (VM.BuildFor64Addr && (methodName == VM_MagicNames.prepareAddress))) {
      if (types.length == 0) {
        popAddr(T0);
        asm.emitLDARX(T0,0,T0);
        pushAddr(T0);
      }
 else {
        popInt(T1);
        popAddr(T0);
        if (VM.BuildFor64Addr) {
          asm.emitLDARX(T0,T1,T0);
        }
 else {
        }
        pushAddr(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.attempt && ((types[0] == VM_TypeReference.Int) || (VM.BuildFor32Addr && (types[0] == VM_TypeReference.Address)) || (VM.BuildFor32Addr && (types[0] == VM_TypeReference.Word)))) {
      if (types.length == 2) {
        popInt(T2);
        discardSlot();
        popAddr(T0);
        asm.emitSTWCXr(T2,0,T0);
        asm.emitLVAL(T0,0);
        VM_ForwardReference fr=asm.emitForwardBC(NE);
        asm.emitLVAL(T0,1);
        fr.resolve(asm);
        pushInt(T0);
      }
 else {
        popInt(T1);
        popInt(T2);
        discardSlot();
        popAddr(T0);
        asm.emitSTWCXr(T2,T1,T0);
        asm.emitLVAL(T0,0);
        VM_ForwardReference fr=asm.emitForwardBC(NE);
        asm.emitLVAL(T0,1);
        fr.resolve(asm);
        pushInt(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.attempt && ((types[0] == VM_TypeReference.Long) || (VM.BuildFor64Addr && (types[0] == VM_TypeReference.Address)) || (VM.BuildFor64Addr && (types[0] == VM_TypeReference.Word)))) {
      if (types.length == 2) {
        popAddr(T2);
        discardSlot();
        popAddr(T0);
        asm.emitSTDCXr(T2,0,T0);
        asm.emitLVAL(T0,0);
        VM_ForwardReference fr=asm.emitForwardBC(NE);
        asm.emitLVAL(T0,1);
        fr.resolve(asm);
        pushInt(T0);
      }
 else {
        popInt(T1);
        popAddr(T2);
        discardSlot();
        popAddr(T0);
        if (VM.BuildFor64Addr) {
          asm.emitSTDCXr(T2,T1,T0);
        }
 else {
        }
        asm.emitLVAL(T0,0);
        VM_ForwardReference fr=asm.emitForwardBC(NE);
        asm.emitLVAL(T0,1);
        fr.resolve(asm);
        pushInt(T0);
      }
      return true;
    }
    if (methodName == VM_MagicNames.store) {
      if (types[0] == VM_TypeReference.Word || types[0] == VM_TypeReference.ObjectReference || types[0] == VM_TypeReference.Address) {
        if (types.length == 1) {
          popAddr(T1);
          popAddr(T0);
          asm.emitSTAddrX(T1,0,T0);
        }
 else {
          popInt(T1);
          popAddr(T2);
          popAddr(T0);
          asm.emitSTAddrX(T2,T1,T0);
        }
        return true;
      }
      if (types[0] == VM_TypeReference.Byte) {
        if (types.length == 1) {
          popInt(T1);
          popAddr(T0);
          asm.emitSTBX(T1,0,T0);
        }
 else {
          popInt(T1);
          popInt(T2);
          popAddr(T0);
          asm.emitSTBX(T2,T1,T0);
        }
        return true;
      }
      if (types[0] == VM_TypeReference.Int || types[0] == VM_TypeReference.Float) {
        if (types.length == 1) {
          popInt(T1);
          popAddr(T0);
          asm.emitSTWX(T1,0,T0);
        }
 else {
          popInt(T1);
          popInt(T2);
          popAddr(T0);
          asm.emitSTWX(T2,T1,T0);
        }
        return true;
      }
      if (types[0] == VM_TypeReference.Short || types[0] == VM_TypeReference.Char) {
        if (types.length == 1) {
          popInt(T1);
          popAddr(T0);
          asm.emitSTHX(T1,0,T0);
        }
 else {
          popInt(T1);
          popInt(T2);
          popAddr(T0);
          asm.emitSTHX(T2,T1,T0);
        }
        return true;
      }
      if (types[0] == VM_TypeReference.Double || types[0] == VM_TypeReference.Long) {
        if (types.length == 1) {
          popLong(T2,T1);
          popAddr(T0);
          if (VM.BuildFor32Addr) {
            asm.emitSTW(T2,0,T0);
            asm.emitSTW(T1,BYTES_IN_INT,T0);
          }
 else {
            asm.emitSTD(T1,0,T0);
          }
        }
 else {
          popInt(T1);
          popLong(T3,T2);
          popAddr(T0);
          if (VM.BuildFor32Addr) {
            asm.emitSTWX(T3,T1,T0);
            asm.emitADDI(T1,BYTES_IN_INT,T1);
            asm.emitSTWX(T2,T1,T0);
          }
 else {
            asm.emitSTDX(T2,T1,T0);
          }
        }
        return true;
      }
    }
  }
  if (methodName == VM_MagicNames.getFramePointer) {
    pushAddr(FP);
  }
 else   if (methodName == VM_MagicNames.getCallerFramePointer) {
    popAddr(T0);
    asm.emitLAddr(T1,STACKFRAME_FRAME_POINTER_OFFSET,T0);
    pushAddr(T1);
  }
 else   if (methodName == VM_MagicNames.setCallerFramePointer) {
    popAddr(T1);
    popAddr(T0);
    asm.emitSTAddr(T1,STACKFRAME_FRAME_POINTER_OFFSET,T0);
  }
 else   if (methodName == VM_MagicNames.getCompiledMethodID) {
    popAddr(T0);
    asm.emitLInt(T1,STACKFRAME_METHOD_ID_OFFSET,T0);
    pushInt(T1);
  }
 else   if (methodName == VM_MagicNames.setCompiledMethodID) {
    popInt(T1);
    popAddr(T0);
    asm.emitSTW(T1,STACKFRAME_METHOD_ID_OFFSET,T0);
  }
 else   if (methodName == VM_MagicNames.getNextInstructionAddress) {
    popAddr(T0);
    asm.emitLAddr(T1,STACKFRAME_NEXT_INSTRUCTION_OFFSET,T0);
    pushAddr(T1);
  }
 else   if (methodName == VM_MagicNames.getReturnAddressLocation) {
    popAddr(T0);
    asm.emitLAddr(T1,STACKFRAME_FRAME_POINTER_OFFSET,T0);
    asm.emitADDI(T2,STACKFRAME_NEXT_INSTRUCTION_OFFSET,T1);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.getTocPointer || methodName == VM_MagicNames.getJTOC) {
    pushAddr(JTOC);
  }
 else   if (methodName == VM_MagicNames.getProcessorRegister) {
    pushAddr(PROCESSOR_REGISTER);
  }
 else   if (methodName == VM_MagicNames.setProcessorRegister) {
    popAddr(PROCESSOR_REGISTER);
  }
 else   if (methodName == VM_MagicNames.getTimeBase) {
    if (VM.BuildFor64Addr) {
      asm.emitMFTB(T1);
    }
 else {
      int label=asm.getMachineCodeIndex();
      asm.emitMFTBU(T0);
      asm.emitMFTB(T1);
      asm.emitMFTBU(T2);
      asm.emitCMP(T0,T2);
      asm.emitBC(NE,label);
    }
    pushLong(T0,T1);
  }
 else   if (methodName == VM_MagicNames.invokeClassInitializer) {
    popAddr(T0);
    asm.emitMTCTR(T0);
    asm.emitBCCTRL();
  }
 else   if (methodName == VM_MagicNames.invokeMethodReturningVoid) {
    generateMethodInvocation();
  }
 else   if (methodName == VM_MagicNames.invokeMethodReturningInt) {
    generateMethodInvocation();
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.invokeMethodReturningLong) {
    generateMethodInvocation();
    pushLong(T0,VM.BuildFor64Addr ? T0 : T1);
  }
 else   if (methodName == VM_MagicNames.invokeMethodReturningFloat) {
    generateMethodInvocation();
    pushFloat(F0);
  }
 else   if (methodName == VM_MagicNames.invokeMethodReturningDouble) {
    generateMethodInvocation();
    pushDouble(F0);
  }
 else   if (methodName == VM_MagicNames.invokeMethodReturningObject) {
    generateMethodInvocation();
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.addressArrayCreate) {
    VM_Array type=methodToBeCalled.getType().resolve().asArray();
    emit_resolved_newarray(type);
  }
 else   if (methodName == VM_MagicNames.addressArrayLength) {
    emit_arraylength();
  }
 else   if (methodName == VM_MagicNames.addressArrayGet) {
    if (VM.BuildFor32Addr || methodToBeCalled.getType() == VM_TypeReference.CodeArray) {
      emit_iaload();
    }
 else {
      genBoundsCheck();
      asm.emitSLDI(T1,T1,LOG_BYTES_IN_ADDRESS);
      asm.emitLAddrX(T2,T0,T1);
      pushAddr(T2);
    }
  }
 else   if (methodName == VM_MagicNames.addressArraySet) {
    if (VM.BuildFor32Addr || methodToBeCalled.getType() == VM_TypeReference.CodeArray) {
      emit_iastore();
    }
 else {
      popAddr(T2);
      genBoundsCheck();
      asm.emitSLDI(T1,T1,LOG_BYTES_IN_ADDRESS);
      asm.emitSTAddrX(T2,T0,T1);
    }
  }
 else   if (methodName == VM_MagicNames.getIntAtOffset) {
    popInt(T1);
    popAddr(T0);
    asm.emitLIntX(T0,T1,T0);
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.getObjectAtOffset || methodName == VM_MagicNames.getWordAtOffset || methodName == VM_MagicNames.getObjectArrayAtOffset) {
    popInt(T1);
    popAddr(T0);
    asm.emitLAddrX(T0,T1,T0);
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.getUnsignedByteAtOffset) {
    popInt(T1);
    popAddr(T0);
    asm.emitLBZX(T0,T1,T0);
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.getByteAtOffset) {
    popInt(T1);
    popAddr(T0);
    asm.emitLBZX(T0,T1,T0);
    asm.emitEXTSB(T0,T0);
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.getCharAtOffset) {
    popInt(T1);
    popAddr(T0);
    asm.emitLHZX(T0,T1,T0);
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.getShortAtOffset) {
    popInt(T1);
    popAddr(T0);
    asm.emitLHAX(T0,T1,T0);
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.setIntAtOffset) {
    popInt(T2);
    popInt(T1);
    popAddr(T0);
    asm.emitSTWX(T2,T1,T0);
  }
 else   if (methodName == VM_MagicNames.setObjectAtOffset || methodName == VM_MagicNames.setWordAtOffset) {
    if (methodToBeCalled.getParameterTypes().length == 4) {
      discardSlot();
    }
    popAddr(T2);
    popInt(T1);
    popAddr(T0);
    asm.emitSTAddrX(T2,T1,T0);
  }
 else   if (methodName == VM_MagicNames.setByteAtOffset) {
    popInt(T2);
    popInt(T1);
    popAddr(T0);
    asm.emitSTBX(T2,T1,T0);
  }
 else   if (methodName == VM_MagicNames.setCharAtOffset) {
    popInt(T2);
    popInt(T1);
    popAddr(T0);
    asm.emitSTHX(T2,T1,T0);
  }
 else   if (methodName == VM_MagicNames.getLongAtOffset || methodName == VM_MagicNames.getDoubleAtOffset) {
    popInt(T2);
    popAddr(T1);
    asm.emitLFDX(F0,T1,T2);
    pushDouble(F0);
  }
 else   if ((methodName == VM_MagicNames.setLongAtOffset) || (methodName == VM_MagicNames.setDoubleAtOffset)) {
    popLong(T3,T2);
    popInt(T1);
    popAddr(T0);
    if (VM.BuildFor32Addr) {
      asm.emitSTWX(T3,T1,T0);
      asm.emitADDI(T1,BYTES_IN_INT,T1);
      asm.emitSTWX(T2,T1,T0);
    }
 else {
      asm.emitSTDX(T2,T1,T0);
    }
  }
 else   if (methodName == VM_MagicNames.getMemoryInt) {
    popAddr(T0);
    asm.emitLInt(T0,0,T0);
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.getMemoryWord || methodName == VM_MagicNames.getMemoryAddress) {
    popAddr(T0);
    asm.emitLAddr(T0,0,T0);
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.setMemoryInt) {
    popInt(T1);
    popAddr(T0);
    asm.emitSTW(T1,0,T0);
  }
 else   if (methodName == VM_MagicNames.setMemoryWord) {
    if (methodToBeCalled.getParameterTypes().length == 3) {
      discardSlot();
    }
    popAddr(T1);
    popAddr(T0);
    asm.emitSTAddr(T1,0,T0);
  }
 else   if ((methodName == VM_MagicNames.prepareInt) || (VM.BuildFor32Addr && (methodName == VM_MagicNames.prepareObject)) || (VM.BuildFor32Addr && (methodName == VM_MagicNames.prepareAddress))|| (VM.BuildFor32Addr && (methodName == VM_MagicNames.prepareWord))) {
    popInt(T1);
    popAddr(T0);
    asm.emitLWARX(T0,T1,T0);
    pushInt(T0);
  }
 else   if ((methodName == VM_MagicNames.prepareLong) || (VM.BuildFor64Addr && (methodName == VM_MagicNames.prepareObject)) || (VM.BuildFor64Addr && (methodName == VM_MagicNames.prepareAddress))|| (VM.BuildFor64Addr && (methodName == VM_MagicNames.prepareWord))) {
    popInt(T1);
    popAddr(T0);
    if (VM.BuildFor64Addr) {
      asm.emitLDARX(T0,T1,T0);
    }
 else {
    }
    pushAddr(T0);
  }
 else   if ((methodName == VM_MagicNames.attemptInt) || (VM.BuildFor32Addr && (methodName == VM_MagicNames.attemptObject)) || (VM.BuildFor32Addr && (methodName == VM_MagicNames.attemptObjectReference))|| (VM.BuildFor32Addr && (methodName == VM_MagicNames.attemptAddress))|| (VM.BuildFor32Addr && (methodName == VM_MagicNames.attemptWord))) {
    popInt(T2);
    discardSlot();
    popInt(T1);
    popAddr(T0);
    asm.emitSTWCXr(T2,T1,T0);
    asm.emitLVAL(T0,0);
    VM_ForwardReference fr=asm.emitForwardBC(NE);
    asm.emitLVAL(T0,1);
    fr.resolve(asm);
    pushInt(T0);
  }
 else   if ((methodName == VM_MagicNames.attemptLong) || (VM.BuildFor64Addr && (methodName == VM_MagicNames.attemptObject)) || (VM.BuildFor64Addr && (methodName == VM_MagicNames.attemptObjectReference))|| (VM.BuildFor64Addr && (methodName == VM_MagicNames.attemptAddress))|| (VM.BuildFor64Addr && (methodName == VM_MagicNames.attemptWord))) {
    popAddr(T2);
    discardSlot();
    popInt(T1);
    popAddr(T0);
    if (VM.BuildFor64Addr) {
      asm.emitSTDCXr(T2,T1,T0);
    }
 else {
    }
    asm.emitLVAL(T0,0);
    VM_ForwardReference fr=asm.emitForwardBC(NE);
    asm.emitLVAL(T0,1);
    fr.resolve(asm);
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.saveThreadState) {
    peekAddr(T0,0);
    asm.emitLAddrToc(S0,VM_Entrypoints.saveThreadStateInstructionsField.getOffset());
    asm.emitMTCTR(S0);
    asm.emitBCCTRL();
    discardSlot();
  }
 else   if (methodName == VM_MagicNames.threadSwitch) {
    peekAddr(T1,0);
    peekAddr(T0,1);
    asm.emitLAddrToc(S0,VM_Entrypoints.threadSwitchInstructionsField.getOffset());
    asm.emitMTCTR(S0);
    asm.emitBCCTRL();
    discardSlots(2);
  }
 else   if (methodName == VM_MagicNames.restoreHardwareExceptionState) {
    peekAddr(T0,0);
    asm.emitLAddrToc(S0,VM_Entrypoints.restoreHardwareExceptionStateInstructionsField.getOffset());
    asm.emitMTLR(S0);
    asm.emitBCLR();
  }
 else   if (methodName == VM_MagicNames.returnToNewStack) {
    peekAddr(FP,0);
    asm.emitLAddr(S0,STACKFRAME_NEXT_INSTRUCTION_OFFSET,FP);
    asm.emitMTLR(S0);
    asm.emitBCLR();
  }
 else   if (methodName == VM_MagicNames.dynamicBridgeTo) {
    if (VM.VerifyAssertions)     VM._assert(klass.hasDynamicBridgeAnnotation());
    peekAddr(T0,0);
    asm.emitMTCTR(T0);
    int offset=frameSize;
    for (int i=LAST_NONVOLATILE_FPR; i >= FIRST_VOLATILE_FPR; --i) {
      asm.emitLFD(i,offset-=BYTES_IN_DOUBLE,FP);
    }
    for (int i=LAST_NONVOLATILE_GPR; i >= FIRST_NONVOLATILE_GPR; --i) {
      asm.emitLAddr(i,offset-=BYTES_IN_ADDRESS,FP);
    }
    offset-=(FIRST_NONVOLATILE_GPR - LAST_VOLATILE_GPR - 1) * BYTES_IN_ADDRESS;
    for (int i=LAST_VOLATILE_GPR; i >= FIRST_VOLATILE_GPR; --i) {
      asm.emitLAddr(i,offset-=BYTES_IN_ADDRESS,FP);
    }
    asm.emitLAddr(FP,0,FP);
    asm.emitLAddr(S0,STACKFRAME_NEXT_INSTRUCTION_OFFSET,FP);
    asm.emitMTLR(S0);
    asm.emitBCCTR();
  }
 else   if (methodName == VM_MagicNames.objectAsAddress || methodName == VM_MagicNames.addressAsByteArray || methodName == VM_MagicNames.addressAsObject || methodName == VM_MagicNames.addressAsObjectArray || methodName == VM_MagicNames.objectAsType || methodName == VM_MagicNames.objectAsShortArray || methodName == VM_MagicNames.objectAsIntArray || methodName == VM_MagicNames.objectAsProcessor || methodName == VM_MagicNames.threadAsCollectorThread || methodName == VM_MagicNames.floatAsIntBits || methodName == VM_MagicNames.intBitsAsFloat || methodName == VM_MagicNames.doubleAsLongBits || methodName == VM_MagicNames.longBitsAsDouble) {
  }
 else   if (methodName == VM_MagicNames.getObjectType) {
    popAddr(T0);
    VM_ObjectModel.baselineEmitLoadTIB(asm,T0,T0);
    asm.emitLAddr(T0,TIB_TYPE_INDEX << LOG_BYTES_IN_ADDRESS,T0);
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.getArrayLength) {
    popAddr(T0);
    asm.emitLIntOffset(T0,T0,VM_ObjectModel.getArrayLengthOffset());
    pushInt(T0);
  }
 else   if (methodName == VM_MagicNames.sync) {
    asm.emitSYNC();
  }
 else   if (methodName == VM_MagicNames.isync) {
    asm.emitISYNC();
  }
 else   if (methodName == VM_MagicNames.dcbst) {
    popAddr(T0);
    asm.emitDCBST(0,T0);
  }
 else   if (methodName == VM_MagicNames.dcbt) {
    popAddr(T0);
    asm.emitDCBT(0,T0);
  }
 else   if (methodName == VM_MagicNames.dcbtst) {
    popAddr(T0);
    asm.emitDCBTST(0,T0);
  }
 else   if (methodName == VM_MagicNames.dcbz) {
    popAddr(T0);
    asm.emitDCBZ(0,T0);
  }
 else   if (methodName == VM_MagicNames.dcbzl) {
    popAddr(T0);
    asm.emitDCBZL(0,T0);
  }
 else   if (methodName == VM_MagicNames.icbi) {
    popAddr(T0);
    asm.emitICBI(0,T0);
  }
 else   if (methodName == VM_MagicNames.wordToInt || methodName == VM_MagicNames.wordToAddress || methodName == VM_MagicNames.wordToOffset || methodName == VM_MagicNames.wordToObject || methodName == VM_MagicNames.wordFromObject || methodName == VM_MagicNames.wordToObjectReference || methodName == VM_MagicNames.wordToExtent || methodName == VM_MagicNames.wordToWord || methodName == VM_MagicNames.codeArrayToAddress) {
  }
 else   if (methodName == VM_MagicNames.wordToLong) {
    asm.emitLVAL(T0,0);
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.wordFromInt || methodName == VM_MagicNames.wordFromIntSignExtend) {
    if (VM.BuildFor64Addr) {
      popInt(T0);
      pushAddr(T0);
    }
  }
 else   if (methodName == VM_MagicNames.wordFromIntZeroExtend) {
    if (VM.BuildFor64Addr) {
      asm.emitLWZ(T0,spTopOffset + BYTES_IN_STACKSLOT - BYTES_IN_INT,FP);
      pokeAddr(T0,0);
    }
  }
 else   if (methodName == VM_MagicNames.wordFromLong) {
    discardSlot();
  }
 else   if (methodName == VM_MagicNames.wordPlus) {
    if (VM.BuildFor64Addr && (methodToBeCalled.getParameterTypes()[0] == VM_TypeReference.Int)) {
      popInt(T0);
    }
 else {
      popAddr(T0);
    }
    popAddr(T1);
    asm.emitADD(T2,T1,T0);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordMinus || methodName == VM_MagicNames.wordDiff) {
    if (VM.BuildFor64Addr && (methodToBeCalled.getParameterTypes()[0] == VM_TypeReference.Int)) {
      popInt(T0);
    }
 else {
      popAddr(T0);
    }
    popAddr(T1);
    asm.emitSUBFC(T2,T0,T1);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordEQ) {
    generateAddrComparison(false,EQ);
  }
 else   if (methodName == VM_MagicNames.wordNE) {
    generateAddrComparison(false,NE);
  }
 else   if (methodName == VM_MagicNames.wordLT) {
    generateAddrComparison(false,LT);
  }
 else   if (methodName == VM_MagicNames.wordLE) {
    generateAddrComparison(false,LE);
  }
 else   if (methodName == VM_MagicNames.wordGT) {
    generateAddrComparison(false,GT);
  }
 else   if (methodName == VM_MagicNames.wordGE) {
    generateAddrComparison(false,GE);
  }
 else   if (methodName == VM_MagicNames.wordsLT) {
    generateAddrComparison(true,LT);
  }
 else   if (methodName == VM_MagicNames.wordsLE) {
    generateAddrComparison(true,LE);
  }
 else   if (methodName == VM_MagicNames.wordsGT) {
    generateAddrComparison(true,GT);
  }
 else   if (methodName == VM_MagicNames.wordsGE) {
    generateAddrComparison(true,GE);
  }
 else   if (methodName == VM_MagicNames.wordIsZero || methodName == VM_MagicNames.wordIsNull) {
    asm.emitLVAL(T0,0);
    pushAddr(T0);
    generateAddrComparison(false,EQ);
  }
 else   if (methodName == VM_MagicNames.wordIsMax) {
    asm.emitLVAL(T0,-1);
    pushAddr(T0);
    generateAddrComparison(false,EQ);
  }
 else   if (methodName == VM_MagicNames.wordZero || methodName == VM_MagicNames.wordNull) {
    asm.emitLVAL(T0,0);
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.wordOne) {
    asm.emitLVAL(T0,1);
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.wordMax) {
    asm.emitLVAL(T0,-1);
    pushAddr(T0);
  }
 else   if (methodName == VM_MagicNames.wordAnd) {
    popAddr(T0);
    popAddr(T1);
    asm.emitAND(T2,T1,T0);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordOr) {
    popAddr(T0);
    popAddr(T1);
    asm.emitOR(T2,T1,T0);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordNot) {
    popAddr(T0);
    asm.emitLVAL(T1,-1);
    asm.emitXOR(T2,T1,T0);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordXor) {
    popAddr(T0);
    popAddr(T1);
    asm.emitXOR(T2,T1,T0);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordLsh) {
    popInt(T0);
    popAddr(T1);
    asm.emitSLAddr(T2,T1,T0);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordRshl) {
    popInt(T0);
    popAddr(T1);
    asm.emitSRAddr(T2,T1,T0);
    pushAddr(T2);
  }
 else   if (methodName == VM_MagicNames.wordRsha) {
    popInt(T0);
    popAddr(T1);
    asm.emitSRA_Addr(T2,T1,T0);
    pushAddr(T2);
  }
 else {
    return false;
  }
  return true;
}",0.999943859123828
149916,"private static DefUseEffect call(OPT_Instruction s){
  if (CF_FIELDS) {
    OPT_MethodOperand methOp=Call.getMethod(s);
    if ((methOp != null) && methOp.isVirtual() && !methOp.hasPreciseTarget()) {
      OPT_Operand calleeThis=Call.getParam(s,0);
      if (calleeThis.isNullConstant()) {
        Trap.mutate(s,TRAP,NullCheck.getClearGuardResult(s),OPT_TrapCodeOperand.NullPtr());
        return DefUseEffect.TRAP_REDUCED;
      }
 else       if (calleeThis.isConstant() || calleeThis.asRegister().isPreciseType()) {
        VM_TypeReference calleeClass=calleeThis.getType();
        if (calleeClass.isResolved()) {
          methOp.refine(calleeClass.peekResolvedType());
          return DefUseEffect.UNCHANGED;
        }
      }
    }
    if ((methOp != null) && methOp.hasPreciseTarget() && methOp.getTarget().isPure()) {
      VM_Method method=methOp.getTarget();
      int n=Call.getNumberOfParams(s);
      for (int i=0; i < n; i++) {
        if (!Call.getParam(s,i).isConstant()) {
          return DefUseEffect.UNCHANGED;
        }
      }
      Object thisArg=null;
      VM_TypeReference[] paramTypes=method.getParameterTypes();
      Object[] otherArgs;
      Object result=null;
      if (methOp.isVirtual()) {
        thisArg=boxConstantOperand((OPT_ConstantOperand)Call.getParam(s,0),paramTypes[0]);
        n--;
        otherArgs=new Object[n];
        for (int i=0; i < n; i++) {
          otherArgs[i]=boxConstantOperand((OPT_ConstantOperand)Call.getParam(s,i),paramTypes[i + 1]);
        }
      }
 else {
        otherArgs=new Object[n];
        for (int i=0; i < n; i++) {
          otherArgs[i]=boxConstantOperand((OPT_ConstantOperand)Call.getParam(s,i),paramTypes[i]);
        }
      }
      Throwable t=null;
      try {
        if (VM.runningVM) {
          result=VM_Reflection.invoke(method,thisArg,otherArgs,!methOp.isVirtual());
        }
 else {
          Class<?>[] argTypes=new Class<?>[n];
          for (int i=0; i < n; i++) {
            argTypes[i]=Call.getParam(s,i).getType().resolve().getClassForType();
          }
          Method m=method.getDeclaringClass().getClassForType().getDeclaredMethod(method.getName().toString(),argTypes);
          result=m.invoke(thisArg,otherArgs);
        }
      }
 catch (      Throwable e) {
        t=e;
      }
      if (t != null) {
        return DefUseEffect.UNCHANGED;
      }
      if (method.getReturnType().isVoidType()) {
        Empty.mutate(s,NOP);
        return DefUseEffect.REDUCED;
      }
 else {
        OPT_Operator moveOp=OPT_IRTools.getMoveOp(method.getReturnType());
        Move.mutate(s,moveOp,Call.getClearResult(s),boxConstantObjectAsOperand(result,method.getReturnType()));
        return DefUseEffect.MOVE_FOLDED;
      }
    }
  }
  return DefUseEffect.UNCHANGED;
}","private static DefUseEffect call(OPT_Instruction s){
  if (CF_FIELDS) {
    OPT_MethodOperand methOp=Call.getMethod(s);
    if ((methOp != null) && methOp.isVirtual() && !methOp.hasPreciseTarget()) {
      OPT_Operand calleeThis=Call.getParam(s,0);
      if (calleeThis.isNullConstant()) {
        Trap.mutate(s,TRAP,NullCheck.getClearGuardResult(s),OPT_TrapCodeOperand.NullPtr());
        return DefUseEffect.TRAP_REDUCED;
      }
 else       if (calleeThis.isConstant() || calleeThis.asRegister().isPreciseType()) {
        VM_TypeReference calleeClass=calleeThis.getType();
        if (calleeClass.isResolved() && calleeClass.peekResolvedType().isResolved()) {
          methOp.refine(calleeClass.peekResolvedType());
          return DefUseEffect.UNCHANGED;
        }
      }
    }
    if ((methOp != null) && methOp.hasPreciseTarget() && methOp.getTarget().isPure()) {
      VM_Method method=methOp.getTarget();
      int n=Call.getNumberOfParams(s);
      for (int i=0; i < n; i++) {
        if (!Call.getParam(s,i).isConstant()) {
          return DefUseEffect.UNCHANGED;
        }
      }
      Object thisArg=null;
      VM_TypeReference[] paramTypes=method.getParameterTypes();
      Object[] otherArgs;
      Object result=null;
      if (methOp.isVirtual()) {
        thisArg=boxConstantOperand((OPT_ConstantOperand)Call.getParam(s,0),paramTypes[0]);
        n--;
        otherArgs=new Object[n];
        for (int i=0; i < n; i++) {
          otherArgs[i]=boxConstantOperand((OPT_ConstantOperand)Call.getParam(s,i),paramTypes[i + 1]);
        }
      }
 else {
        otherArgs=new Object[n];
        for (int i=0; i < n; i++) {
          otherArgs[i]=boxConstantOperand((OPT_ConstantOperand)Call.getParam(s,i),paramTypes[i]);
        }
      }
      Throwable t=null;
      try {
        if (VM.runningVM) {
          result=VM_Reflection.invoke(method,thisArg,otherArgs,!methOp.isVirtual());
        }
 else {
          Class<?>[] argTypes=new Class<?>[n];
          for (int i=0; i < n; i++) {
            argTypes[i]=Call.getParam(s,i).getType().resolve().getClassForType();
          }
          Method m=method.getDeclaringClass().getClassForType().getDeclaredMethod(method.getName().toString(),argTypes);
          result=m.invoke(thisArg,otherArgs);
        }
      }
 catch (      Throwable e) {
        t=e;
      }
      if (t != null) {
        return DefUseEffect.UNCHANGED;
      }
      if (method.getReturnType().isVoidType()) {
        Empty.mutate(s,NOP);
        return DefUseEffect.REDUCED;
      }
 else {
        OPT_Operator moveOp=OPT_IRTools.getMoveOp(method.getReturnType());
        Move.mutate(s,moveOp,Call.getClearResult(s),boxConstantObjectAsOperand(result,method.getReturnType()));
        return DefUseEffect.MOVE_FOLDED;
      }
    }
  }
  return DefUseEffect.UNCHANGED;
}",0.9915966386554622
149917,"private void incEdgeCounterIdx(int counters,int scratch,int base,int counterIdx){
  asm.emitADDI(counters,base << 2,counters);
  asm.emitLIntX(scratch,counterIdx,counters);
  asm.emitADDI(scratch,1,scratch);
  asm.emitRLWINM(scratch,scratch,0,1,31);
  asm.emitSTWX(scratch,counterIdx,counters);
}","private void incEdgeCounterIdx(int counters,int scratch,int base,int counterIdx){
  asm.emitADDI(counters,base << 2,counters);
  asm.emitLIntX(scratch,counterIdx,counters);
  asm.emitADDI(scratch,1,scratch);
  asm.emitCMPI(scratch,0);
  VM_ForwardReference fr=asm.emitForwardBC(VM_Assembler.LT);
  asm.emitSTWX(scratch,counterIdx,counters);
  fr.resolve(asm);
}",0.8188736681887366
149918,"/** 
 * increment an edge counter.
 * @param counters register containing base of counter array
 * @param scratch scratch register
 * @param counterIdx index of counter to increment
 */
private void incEdgeCounter(int counters,int scratch,int counterIdx){
  asm.emitLInt(scratch,counterIdx << 2,counters);
  asm.emitADDI(scratch,1,scratch);
  asm.emitRLWINM(scratch,scratch,0,1,31);
  asm.emitSTW(scratch,counterIdx << 2,counters);
}","/** 
 * increment an edge counter.
 * @param counters register containing base of counter array
 * @param scratch scratch register
 * @param counterIdx index of counter to increment
 */
private void incEdgeCounter(int counters,int scratch,int counterIdx){
  asm.emitLInt(scratch,counterIdx << 2,counters);
  asm.emitADDI(scratch,1,scratch);
  asm.emitCMPI(scratch,0);
  VM_ForwardReference fr=asm.emitForwardBC(VM_Assembler.LT);
  asm.emitSTW(scratch,counterIdx << 2,counters);
  fr.resolve(asm);
}",0.8721804511278195
149919,"/** 
 * A thread's stack has been moved or resized. Adjust the ESP register to reflect new position.
 * @param VM_Registers The registers for this thread
 * @param delta The displacement to be applied
 * @param traceAdjustments Log all adjustments to stderr if true
 */
@Uninterruptible public void adjustESP(VM_Registers registers,Offset delta,boolean traceAdjustments){
  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);
}","/** 
 * A thread's stack has been moved or resized. Adjust the ESP register to reflect new position.
 * @param registers The registers for this thread
 * @param delta The displacement to be applied
 * @param traceAdjustments Log all adjustments to stderr if true
 */
@Uninterruptible public void adjustESP(VM_Registers registers,Offset delta,boolean traceAdjustments){
  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);
}",0.9941656942823804
149920,"private VM_Type resolveInternal() throws NoClassDefFoundError, IllegalArgumentException {
  if (resolvedType != null)   return resolvedType;
  if (isClassType()) {
    VM_Type ans;
    if (VM.runningVM) {
      Class<?> klass;
      String myName=name.classNameFromDescriptor();
      try {
        klass=classloader.loadClass(myName);
      }
 catch (      ClassNotFoundException cnf) {
        NoClassDefFoundError ncdfe=new NoClassDefFoundError(""String_Node_Str"" + myName + ""String_Node_Str""+ cnf.getMessage());
        ncdfe.initCause(cnf);
        throw ncdfe;
      }
      ans=java.lang.JikesRVMSupport.getTypeForClass(klass);
    }
 else {
      ans=((VM_BootstrapClassLoader)classloader).loadVMClass(name.classNameFromDescriptor());
    }
    if (VM.VerifyAssertions)     VM._assert(resolvedType == null || resolvedType == ans);
    resolvedType=ans;
  }
 else   if (isArrayType()) {
    if (isWordArrayType() || isCodeArrayType()) {
      resolvedType=getArrayElementType().getArrayTypeForElementType().resolve();
    }
 else {
      VM_Type elementType=getArrayElementType().resolve();
      if (elementType.getClassLoader() != classloader) {
        VM_TypeReference canonical=VM_TypeReference.findOrCreate(elementType.getClassLoader(),name);
        resolvedType=canonical.resolve();
      }
 else {
        resolvedType=new VM_Array(this,elementType);
      }
    }
  }
 else {
    resolvedType=VM_Primitive.createPrimitive(this);
  }
  return resolvedType;
}","private VM_Type resolveInternal() throws NoClassDefFoundError, IllegalArgumentException {
  if (resolvedType != null)   return resolvedType;
  if (isClassType()) {
    VM_Type ans;
    if (VM.runningVM) {
      Class<?> klass;
      String myName=name.classNameFromDescriptor();
      try {
        klass=classloader.loadClass(myName);
      }
 catch (      ClassNotFoundException cnf) {
        NoClassDefFoundError ncdfe=new NoClassDefFoundError(""String_Node_Str"" + myName + ""String_Node_Str""+ cnf.getMessage());
        ncdfe.initCause(cnf);
        throw ncdfe;
      }
      ans=java.lang.JikesRVMSupport.getTypeForClass(klass);
    }
 else {
      ans=((VM_BootstrapClassLoader)classloader).loadVMClass(name.classNameFromDescriptor());
    }
    if (VM.VerifyAssertions)     VM._assert(resolvedType == null || resolvedType == ans);
    setResolvedType(ans);
  }
 else   if (isArrayType()) {
    if (isWordArrayType() || isCodeArrayType()) {
      setResolvedType(getArrayElementType().getArrayTypeForElementType().resolve());
    }
 else {
      VM_Type elementType=getArrayElementType().resolve();
      if (elementType.getClassLoader() != classloader) {
        VM_TypeReference canonical=VM_TypeReference.findOrCreate(elementType.getClassLoader(),name);
        setResolvedType(canonical.resolve());
      }
 else {
        setResolvedType(new VM_Array(this,elementType));
      }
    }
  }
 else {
    setResolvedType(VM_Primitive.createPrimitive(this));
  }
  return resolvedType;
}",0.935266351989211
149921,"/** 
 * Has the type reference already been resolved into a type?
 */
@Uninterruptible public boolean isResolved(){
  return resolvedType != null;
}","/** 
 * Has the type reference already been resolved into a type? NB this can return true when a type itself isn't resolved during the bootstrap
 */
@Uninterruptible public boolean isResolved(){
  return resolvedType != null;
}",0.7893333333333333
149922,"private static DefUseEffect getObjTib(OPT_Instruction s){
  if (CF_TIB) {
    OPT_Operand op=GuardedUnary.getVal(s);
    if (op.isNullConstant()) {
      Trap.mutate(s,TRAP,NullCheck.getClearGuardResult(s),OPT_TrapCodeOperand.NullPtr());
      return DefUseEffect.TRAP_REDUCED;
    }
 else     if (op.isConstant()) {
      try {
        VM_Type type=op.getType().resolve();
        Move.mutate(s,REF_MOVE,GuardedUnary.getClearResult(s),new OPT_TIBConstantOperand(type));
        return DefUseEffect.MOVE_FOLDED;
      }
 catch (      NoClassDefFoundError e) {
        if (VM.runningVM) {
          throw e;
        }
 else {
          System.out.println(""String_Node_Str"" + op.getType() + ""String_Node_Str""+ e.getMessage());
        }
      }
    }
 else {
      OPT_RegisterOperand rop=op.asRegister();
      VM_TypeReference typeRef=rop.getType();
      if (typeRef.isResolved() && rop.isPreciseType()) {
        Move.mutate(s,REF_MOVE,GuardedUnary.getClearResult(s),new OPT_TIBConstantOperand(typeRef.peekResolvedType()));
        return DefUseEffect.MOVE_FOLDED;
      }
    }
  }
  return DefUseEffect.UNCHANGED;
}","private static DefUseEffect getObjTib(OPT_Instruction s){
  if (CF_TIB) {
    OPT_Operand op=GuardedUnary.getVal(s);
    if (VM.VerifyAssertions && op.isNullConstant()) {
      OPT_RegisterOperand result=GetField.getClearResult(s);
      Move.mutate(s,OPT_IRTools.getMoveOp(result.getType()),result,new OPT_UnreachableOperand());
      return DefUseEffect.MOVE_FOLDED;
    }
 else     if (op.isConstant()) {
      try {
        VM_Type type=op.getType().resolve();
        Move.mutate(s,REF_MOVE,GuardedUnary.getClearResult(s),new OPT_TIBConstantOperand(type));
        return DefUseEffect.MOVE_FOLDED;
      }
 catch (      NoClassDefFoundError e) {
        if (VM.runningVM) {
          throw e;
        }
 else {
          System.out.println(""String_Node_Str"" + op.getType() + ""String_Node_Str""+ e.getMessage());
        }
      }
    }
 else {
      OPT_RegisterOperand rop=op.asRegister();
      VM_TypeReference typeRef=rop.getType();
      if (typeRef.isResolved() && rop.isPreciseType()) {
        Move.mutate(s,REF_MOVE,GuardedUnary.getClearResult(s),new OPT_TIBConstantOperand(typeRef.peekResolvedType()));
        return DefUseEffect.MOVE_FOLDED;
      }
    }
  }
  return DefUseEffect.UNCHANGED;
}",0.8716187204808931
149923,"private static DefUseEffect getField(OPT_Instruction s){
  if (CF_FIELDS) {
    OPT_Operand ref=GetField.getRef(s);
    if (ref.isNullConstant()) {
      Trap.mutate(s,TRAP,NullCheck.getClearGuardResult(s),OPT_TrapCodeOperand.NullPtr());
      return DefUseEffect.TRAP_REDUCED;
    }
 else     if (ref.isObjectConstant()) {
      VM_Field field=GetField.getLocation(s).getFieldRef().resolve();
      if (field.isFinal() && field.getDeclaringClass().isInitialized()) {
        try {
          OPT_ConstantOperand op=OPT_StaticFieldReader.getFieldValueAsConstant(field,ref.asObjectConstant().value);
          Move.mutate(s,OPT_IRTools.getMoveOp(field.getType()),GetField.getClearResult(s),op);
          return DefUseEffect.MOVE_FOLDED;
        }
 catch (        NoSuchFieldException e) {
          if (VM.runningVM) {
            throw new Error(""String_Node_Str"",e);
          }
 else {
          }
        }
      }
    }
  }
  return DefUseEffect.UNCHANGED;
}","private static DefUseEffect getField(OPT_Instruction s){
  if (CF_FIELDS) {
    OPT_Operand ref=GetField.getRef(s);
    if (VM.VerifyAssertions && ref.isNullConstant()) {
      OPT_RegisterOperand result=GetField.getClearResult(s);
      Move.mutate(s,OPT_IRTools.getMoveOp(result.getType()),result,new OPT_UnreachableOperand());
      return DefUseEffect.MOVE_FOLDED;
    }
 else     if (ref.isObjectConstant()) {
      VM_Field field=GetField.getLocation(s).getFieldRef().resolve();
      if (field.isFinal() && field.getDeclaringClass().isInitialized()) {
        try {
          OPT_ConstantOperand op=OPT_StaticFieldReader.getFieldValueAsConstant(field,ref.asObjectConstant().value);
          Move.mutate(s,OPT_IRTools.getMoveOp(field.getType()),GetField.getClearResult(s),op);
          return DefUseEffect.MOVE_FOLDED;
        }
 catch (        NoSuchFieldException e) {
          if (VM.runningVM) {
            throw new Error(""String_Node_Str"",e);
          }
 else {
          }
        }
      }
    }
  }
  return DefUseEffect.UNCHANGED;
}",0.8803970223325062
149924,"private static DefUseEffect call(OPT_Instruction s){
  if (CF_FIELDS) {
    OPT_MethodOperand methOp=Call.getMethod(s);
    if ((methOp != null) && methOp.isVirtual() && !methOp.hasPreciseTarget()) {
      OPT_Operand calleeThis=Call.getParam(s,0);
      if (calleeThis.isNullConstant()) {
        Trap.mutate(s,TRAP,NullCheck.getClearGuardResult(s),OPT_TrapCodeOperand.NullPtr());
        return DefUseEffect.TRAP_REDUCED;
      }
 else       if (calleeThis.isConstant() || calleeThis.asRegister().isPreciseType()) {
        VM_TypeReference calleeClass=calleeThis.getType();
        if (calleeClass.isResolved()) {
          methOp.refine(calleeClass.peekResolvedType());
          return DefUseEffect.UNCHANGED;
        }
      }
    }
  }
  return DefUseEffect.UNCHANGED;
}","private static DefUseEffect call(OPT_Instruction s){
  if (CF_FIELDS) {
    OPT_MethodOperand methOp=Call.getMethod(s);
    if ((methOp != null) && methOp.isVirtual() && !methOp.hasPreciseTarget()) {
      OPT_Operand calleeThis=Call.getParam(s,0);
      if (calleeThis.isNullConstant()) {
        Trap.mutate(s,TRAP,NullCheck.getClearGuardResult(s),OPT_TrapCodeOperand.NullPtr());
        return DefUseEffect.TRAP_REDUCED;
      }
 else       if (calleeThis.isConstant() || calleeThis.asRegister().isPreciseType()) {
        VM_TypeReference calleeClass=calleeThis.getType();
        if (calleeClass.isResolved()) {
          if (VM.runningVM || calleeClass.peekResolvedType().isResolved()) {
            methOp.refine(calleeClass.peekResolvedType());
            return DefUseEffect.UNCHANGED;
          }
        }
      }
    }
  }
  return DefUseEffect.UNCHANGED;
}",0.9435336976320584
149925,"@Interruptible int size(){
  int size=TYPE.peekResolvedType().asClass().getInstanceSize();
  if (MCSites != null)   size+=VM_Array.IntArray.getInstanceSize(MCSites.length);
  if (referenceMaps != null)   size+=VM_Array.ByteArray.getInstanceSize(referenceMaps.length);
  if (jsrInfo != null && jsrInfo.unusualReferenceMaps != null)   size+=VM_Array.JavaLangObjectArray.getInstanceSize(jsrInfo.unusualReferenceMaps.length);
  return size;
}","@Interruptible int size(){
  int size=VM_TypeReference.VM_ReferenceMaps.peekResolvedType().asClass().getInstanceSize();
  if (MCSites != null)   size+=VM_Array.IntArray.getInstanceSize(MCSites.length);
  if (referenceMaps != null)   size+=VM_Array.ByteArray.getInstanceSize(referenceMaps.length);
  if (jsrInfo != null && jsrInfo.unusualReferenceMaps != null)   size+=VM_Array.JavaLangObjectArray.getInstanceSize(jsrInfo.unusualReferenceMaps.length);
  return size;
}",0.9613259668508288
149926,"/** 
 * This method produces a summary report of compilation activities
 * @param explain Explains the metrics used in the report
 */
public static void report(boolean explain){
  VM.sysWrite(""String_Node_Str"");
  VM.sysWrite(""String_Node_Str"");
  for (int i=0; i <= name.length - 1; i++) {
    if (totalMethods[i] > 0) {
      VM.sysWrite(name[i]);
      VM.sysWrite(totalMethods[i]);
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(totalCompTime[i]);
      VM.sysWrite(""String_Node_Str"");
      if (i == JNI_COMPILER) {
        VM.sysWrite(""String_Node_Str"");
      }
 else {
        VM.sysWrite(Math.exp(totalLogOfRates[i] / totalLogValueMethods[i]),2);
      }
      VM.sysWrite(""String_Node_Str"");
      if (i != JNI_COMPILER) {
        VM.sysWrite((double)(totalMCLength[i] << ArchitectureSpecific.VM_RegisterConstants.LG_INSTRUCTION_WIDTH) / (double)totalBCLength[i],2);
      }
 else {
        VM.sysWrite(""String_Node_Str"");
      }
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite((double)(totalMCLength[i] << ArchitectureSpecific.VM_RegisterConstants.LG_INSTRUCTION_WIDTH) / 1024,1);
      VM.sysWrite(""String_Node_Str"");
      if (i != JNI_COMPILER) {
        VM.sysWrite((double)totalBCLength[i] / 1024,1);
      }
 else {
        VM.sysWrite(""String_Node_Str"");
      }
      VM.sysWrite(""String_Node_Str"");
    }
  }
  if (explain) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(""String_Node_Str"");
  }
  VM_BaselineCompiler.generateBaselineCompilerSubsystemReport(explain);
  if (VM.BuildForAdaptiveSystem) {
    VM_TypeReference theTypeRef=VM_TypeReference.findOrCreate(VM_BootstrapClassLoader.getBootstrapClassLoader(),VM_Atom.findOrCreateAsciiAtom(""String_Node_Str""));
    VM_Type theType=theTypeRef.peekResolvedType();
    if (theType != null && theType.asClass().isInitialized()) {
      OPT_OptimizationPlanner.generateOptimizingCompilerSubsystemReport(explain);
    }
 else {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(""String_Node_Str"");
    }
  }
}","/** 
 * This method produces a summary report of compilation activities
 * @param explain Explains the metrics used in the report
 */
public static void report(boolean explain){
  VM.sysWrite(""String_Node_Str"");
  VM.sysWrite(""String_Node_Str"");
  for (int i=0; i <= name.length - 1; i++) {
    if (totalMethods[i] > 0) {
      VM.sysWrite(name[i]);
      VM.sysWrite(totalMethods[i]);
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(totalCompTime[i]);
      VM.sysWrite(""String_Node_Str"");
      if (i == JNI_COMPILER) {
        VM.sysWrite(""String_Node_Str"");
      }
 else {
        VM.sysWrite(Math.exp(totalLogOfRates[i] / totalLogValueMethods[i]),2);
      }
      VM.sysWrite(""String_Node_Str"");
      if (i != JNI_COMPILER) {
        VM.sysWrite((double)(totalMCLength[i] << ArchitectureSpecific.VM_RegisterConstants.LG_INSTRUCTION_WIDTH) / (double)totalBCLength[i],2);
      }
 else {
        VM.sysWrite(""String_Node_Str"");
      }
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite((double)(totalMCLength[i] << ArchitectureSpecific.VM_RegisterConstants.LG_INSTRUCTION_WIDTH) / 1024,1);
      VM.sysWrite(""String_Node_Str"");
      if (i != JNI_COMPILER) {
        VM.sysWrite((double)totalBCLength[i] / 1024,1);
      }
 else {
        VM.sysWrite(""String_Node_Str"");
      }
      VM.sysWrite(""String_Node_Str"");
    }
  }
  if (explain) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(""String_Node_Str"");
  }
  VM_BaselineCompiler.generateBaselineCompilerSubsystemReport(explain);
  if (VM.BuildForAdaptiveSystem) {
    VM_Type theType=VM_TypeReference.OPT_OptimizationPlanner.peekResolvedType();
    if (theType != null && theType.asClass().isInitialized()) {
      OPT_OptimizationPlanner.generateOptimizingCompilerSubsystemReport(explain);
    }
 else {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(""String_Node_Str"");
    }
  }
}",0.906905491397596
149927,"/** 
 * Read the element_value field of an annotation
 * @param constantPool the constant pool for the class being read
 * @param input stream to read from
 * @return object representing the value read
 */
static Object readValue(int[] constantPool,DataInputStream input,ClassLoader classLoader) throws IOException, ClassNotFoundException {
  byte elementValue_tag=input.readByte();
  Object value;
switch (elementValue_tag) {
case 'B':
{
      Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
      value=(byte)VM_Statics.getSlotContentsAsInt(offset);
      break;
    }
case 'C':
{
    Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
    value=(char)VM_Statics.getSlotContentsAsInt(offset);
    break;
  }
case 'D':
{
  Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
  long longValue=VM_Statics.getSlotContentsAsLong(offset);
  value=Double.longBitsToDouble(longValue);
  break;
}
case 'F':
{
Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
int intValue=VM_Statics.getSlotContentsAsInt(offset);
value=Float.intBitsToFloat(intValue);
break;
}
case 'I':
{
Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
value=VM_Statics.getSlotContentsAsInt(offset);
break;
}
case 'J':
{
Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
value=VM_Statics.getSlotContentsAsLong(offset);
break;
}
case 'S':
{
Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
value=(short)VM_Statics.getSlotContentsAsInt(offset);
break;
}
case 'Z':
{
Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
value=VM_Statics.getSlotContentsAsInt(offset) == 1;
break;
}
case 's':
{
value=VM_Class.getUtf(constantPool,input.readUnsignedShort()).toString();
break;
}
case 'e':
{
int typeNameIndex=input.readUnsignedShort();
@SuppressWarnings(""String_Node_Str"") Class enumType=VM_TypeReference.findOrCreate(classLoader,VM_Class.getUtf(constantPool,typeNameIndex)).resolve().getClassForType();
int constNameIndex=input.readUnsignedShort();
@SuppressWarnings(""String_Node_Str"") Enum tmp=Enum.valueOf(enumType,VM_Class.getUtf(constantPool,constNameIndex).toString());
value=tmp;
break;
}
case 'c':
{
int classInfoIndex=input.readUnsignedShort();
value=Class.forName(VM_Class.getUtf(constantPool,classInfoIndex).toString());
break;
}
case '@':
value=VM_Annotation.readAnnotation(constantPool,input,classLoader);
break;
case '[':
{
int numValues=input.readUnsignedShort();
Object[] array=new Object[numValues];
for (int i=0; i < numValues; i++) {
array[i]=readValue(constantPool,input,classLoader);
}
value=array;
break;
}
default :
value=null;
throw new ClassFormatError(""String_Node_Str"" + (char)elementValue_tag + ""String_Node_Str"");
}
return value;
}","/** 
 * Read the element_value field of an annotation
 * @param constantPool the constant pool for the class being read
 * @param input stream to read from
 * @return object representing the value read
 */
static Object readValue(int[] constantPool,DataInputStream input,ClassLoader classLoader) throws IOException, ClassNotFoundException {
  byte elementValue_tag=input.readByte();
  Object value;
switch (elementValue_tag) {
case 'B':
{
      Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
      value=(byte)VM_Statics.getSlotContentsAsInt(offset);
      break;
    }
case 'C':
{
    Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
    value=(char)VM_Statics.getSlotContentsAsInt(offset);
    break;
  }
case 'D':
{
  Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
  long longValue=VM_Statics.getSlotContentsAsLong(offset);
  value=Double.longBitsToDouble(longValue);
  break;
}
case 'F':
{
Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
int intValue=VM_Statics.getSlotContentsAsInt(offset);
value=Float.intBitsToFloat(intValue);
break;
}
case 'I':
{
Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
value=VM_Statics.getSlotContentsAsInt(offset);
break;
}
case 'J':
{
Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
value=VM_Statics.getSlotContentsAsLong(offset);
break;
}
case 'S':
{
Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
value=(short)VM_Statics.getSlotContentsAsInt(offset);
break;
}
case 'Z':
{
Offset offset=VM_Class.getLiteralOffset(constantPool,input.readUnsignedShort());
value=VM_Statics.getSlotContentsAsInt(offset) == 1;
break;
}
case 's':
{
value=VM_Class.getUtf(constantPool,input.readUnsignedShort()).toString();
break;
}
case 'e':
{
int typeNameIndex=input.readUnsignedShort();
@SuppressWarnings(""String_Node_Str"") Class enumType=VM_TypeReference.findOrCreate(classLoader,VM_Class.getUtf(constantPool,typeNameIndex)).resolve().getClassForType();
int constNameIndex=input.readUnsignedShort();
value=Enum.valueOf(enumType,VM_Class.getUtf(constantPool,constNameIndex).toString());
break;
}
case 'c':
{
int classInfoIndex=input.readUnsignedShort();
value=Class.forName(VM_Class.getUtf(constantPool,classInfoIndex).toString());
break;
}
case '@':
value=VM_Annotation.readAnnotation(constantPool,input,classLoader);
break;
case '[':
{
int numValues=input.readUnsignedShort();
Object[] array=new Object[numValues];
for (int i=0; i < numValues; i++) {
array[i]=readValue(constantPool,input,classLoader);
}
value=array;
break;
}
default :
throw new ClassFormatError(""String_Node_Str"" + (char)elementValue_tag + ""String_Node_Str"");
}
return value;
}",0.9514048418448487
149928,"/** 
 * Read an annotation attribute from the class file
 * @param constantPool from constant pool being loaded
 * @param input the data being rea
 */
static VM_Annotation readAnnotation(int[] constantPool,DataInputStream input,ClassLoader classLoader) throws IOException, ClassNotFoundException {
  VM_Atom type;
  int typeIndex=input.readUnsignedShort();
  type=VM_Class.getUtf(constantPool,typeIndex);
  int numAnnotationMembers=input.readUnsignedShort();
  AnnotationMember[] elementValuePairs=new AnnotationMember[numAnnotationMembers];
  for (int i=0; i < numAnnotationMembers; i++) {
    elementValuePairs[i]=AnnotationMember.readAnnotationMember(constantPool,input,classLoader);
  }
  VM_Annotation result=new VM_Annotation(type,elementValuePairs,classLoader);
  return result;
}","/** 
 * Read an annotation attribute from the class file
 * @param constantPool from constant pool being loaded
 * @param input the data being rea
 */
static VM_Annotation readAnnotation(int[] constantPool,DataInputStream input,ClassLoader classLoader) throws IOException, ClassNotFoundException {
  VM_Atom type;
  int typeIndex=input.readUnsignedShort();
  type=VM_Class.getUtf(constantPool,typeIndex);
  int numAnnotationMembers=input.readUnsignedShort();
  AnnotationMember[] elementValuePairs=new AnnotationMember[numAnnotationMembers];
  for (int i=0; i < numAnnotationMembers; i++) {
    elementValuePairs[i]=AnnotationMember.readAnnotationMember(constantPool,input,classLoader);
  }
  return new VM_Annotation(type,elementValuePairs,classLoader);
}",0.9371354504212572
149929,"@Interruptible public int size(){
  int size=TYPE.peekResolvedType().asClass().getInstanceSize();
  size+=_mcMap.size();
  if (eTable != null)   size+=VM_Array.IntArray.getInstanceSize(eTable.length);
  if (patchMap != null)   size+=VM_Array.IntArray.getInstanceSize(patchMap.length);
  return size;
}","@Interruptible public int size(){
  int size=VM_TypeReference.VM_ExceptionTable.peekResolvedType().asClass().getInstanceSize();
  size+=_mcMap.size();
  if (eTable != null)   size+=VM_Array.IntArray.getInstanceSize(eTable.length);
  if (patchMap != null)   size+=VM_Array.IntArray.getInstanceSize(patchMap.length);
  return size;
}",0.9430379746835444
149930,"/** 
 * ""Semantic inlining"" of methods of the VM_Magic class. Based on the methodName, generate a sequence of opt instructions that implement the magic, updating the expression stack as necessary.
 * @param bc2ir the bc2ir object that is generating the ir containing this magic
 * @param gc must be bc2ir.gc
 * @param meth the VM_Method that is the magic method
 */
static boolean generateMagic(OPT_BC2IR bc2ir,OPT_GenerationContext gc,VM_MethodReference meth) throws OPT_MagicNotImplementedException {
  if (gc.method.hasNoInlinePragma())   gc.allocFrame=true;
  bc2ir.markBBUnsafeForScheduling();
  VM_Atom methodName=meth.getName();
  boolean address=(meth.getType() == VM_TypeReference.Address);
  VM_TypeReference[] types=meth.getParameterTypes();
  VM_TypeReference returnType=meth.getReturnType();
  if (address && isLoad(methodName)) {
    OPT_Operand offset=(types.length == 0) ? new OPT_AddressConstantOperand(Address.zero()) : bc2ir.popAddress();
    OPT_Operand base=bc2ir.popAddress();
    OPT_RegisterOperand result=gc.temps.makeTemp(returnType);
    bc2ir.appendInstruction(Load.create(getOperator(returnType,LOAD_OP),result,base,offset,null));
    bc2ir.push(result.copyD2U(),returnType);
  }
 else   if (address && isPrepare(methodName)) {
    OPT_Operand offset=(types.length == 0) ? new OPT_AddressConstantOperand(Address.zero()) : bc2ir.popAddress();
    OPT_Operand base=bc2ir.popAddress();
    OPT_RegisterOperand result=gc.temps.makeTemp(returnType);
    bc2ir.appendInstruction(Prepare.create(getOperator(returnType,PREPARE_OP),result,base,offset,null));
    bc2ir.push(result.copyD2U(),returnType);
  }
 else   if (address && methodName == VM_MagicNames.attempt) {
    VM_TypeReference attemptType=types[0];
    OPT_Operand offset=(types.length == 2) ? new OPT_AddressConstantOperand(Address.zero()) : bc2ir.popAddress();
    OPT_Operand newVal=bc2ir.pop();
    OPT_Operand oldVal=bc2ir.pop();
    OPT_Operand base=bc2ir.popAddress();
    OPT_RegisterOperand test=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Attempt.create(getOperator(attemptType,ATTEMPT_OP),test,base,offset,oldVal,newVal,null));
    bc2ir.push(test.copyD2U(),returnType);
  }
 else   if (address && methodName == VM_MagicNames.store) {
    VM_TypeReference storeType=types[0];
    OPT_Operand offset=(types.length == 1) ? new OPT_AddressConstantOperand(Address.zero()) : bc2ir.popAddress();
    OPT_Operand val=bc2ir.pop(storeType);
    OPT_Operand base=bc2ir.popAddress();
    bc2ir.appendInstruction(Store.create(getOperator(storeType,STORE_OP),val,base,offset,null));
  }
 else   if (methodName == VM_MagicNames.getProcessorRegister) {
    OPT_RegisterOperand rop=gc.temps.makePROp();
    bc2ir.markGuardlessNonNull(rop);
    bc2ir.push(rop);
  }
 else   if (methodName == VM_MagicNames.setProcessorRegister) {
    OPT_Operand val=bc2ir.popRef();
    if (val instanceof OPT_RegisterOperand) {
      bc2ir.appendInstruction(Move.create(REF_MOVE,gc.temps.makePROp(),val));
    }
 else {
      String msg=""String_Node_Str"";
      throw OPT_MagicNotImplementedException.UNEXPECTED(msg);
    }
  }
 else   if (methodName == VM_MagicNames.addressArrayCreate) {
    OPT_Instruction s=bc2ir.generateAnewarray(meth.getType().getArrayElementType());
    bc2ir.appendInstruction(s);
  }
 else   if (methodName == VM_MagicNames.addressArrayLength) {
    OPT_Operand op1=bc2ir.pop();
    bc2ir.clearCurrentGuard();
    if (bc2ir.do_NullCheck(op1))     return true;
    OPT_RegisterOperand t=gc.temps.makeTempInt();
    OPT_Instruction s=GuardedUnary.create(ARRAYLENGTH,t,op1,bc2ir.getCurrentGuard());
    bc2ir.push(t.copyD2U());
    bc2ir.appendInstruction(s);
  }
 else   if (methodName == VM_MagicNames.addressArrayGet) {
    VM_TypeReference elementType=meth.getType().getArrayElementType();
    OPT_Operand index=bc2ir.popInt();
    OPT_Operand ref=bc2ir.popRef();
    OPT_RegisterOperand offsetI=gc.temps.makeTempInt();
    OPT_RegisterOperand offset=gc.temps.makeTempOffset();
    OPT_RegisterOperand result;
    if (meth.getType().isCodeArrayType()) {
      if (VM.BuildForIA32) {
        result=gc.temps.makeTemp(VM_TypeReference.Byte);
        bc2ir.appendInstruction(Load.create(BYTE_LOAD,result,ref,index,new OPT_LocationOperand(elementType),new OPT_TrueGuardOperand()));
      }
 else       if (VM.BuildForPowerPC) {
        result=gc.temps.makeTemp(VM_TypeReference.Int);
        bc2ir.appendInstruction(Binary.create(INT_SHL,offsetI,index,new OPT_IntConstantOperand(LOG_BYTES_IN_INT)));
        bc2ir.appendInstruction(Unary.create(INT_2ADDRZerExt,offset,offsetI.copy()));
        bc2ir.appendInstruction(Load.create(INT_LOAD,result,ref,offset.copy(),new OPT_LocationOperand(elementType),new OPT_TrueGuardOperand()));
      }
    }
 else {
      result=gc.temps.makeTemp(elementType);
      bc2ir.appendInstruction(Binary.create(INT_SHL,offsetI,index,new OPT_IntConstantOperand(LOG_BYTES_IN_ADDRESS)));
      bc2ir.appendInstruction(Unary.create(INT_2ADDRZerExt,offset,offsetI.copy()));
      bc2ir.appendInstruction(Load.create(REF_LOAD,result,ref,offset.copy(),new OPT_LocationOperand(elementType),new OPT_TrueGuardOperand()));
    }
    bc2ir.push(result.copyD2U());
  }
 else   if (methodName == VM_MagicNames.addressArraySet) {
    VM_TypeReference elementType=meth.getType().getArrayElementType();
    OPT_Operand val=bc2ir.pop();
    OPT_Operand index=bc2ir.popInt();
    OPT_Operand ref=bc2ir.popRef();
    OPT_RegisterOperand offsetI=gc.temps.makeTempInt();
    OPT_RegisterOperand offset=gc.temps.makeTempOffset();
    if (meth.getType().isCodeArrayType()) {
      if (VM.BuildForIA32) {
        bc2ir.appendInstruction(Store.create(BYTE_STORE,val,ref,index,new OPT_LocationOperand(elementType),new OPT_TrueGuardOperand()));
      }
 else       if (VM.BuildForPowerPC) {
        bc2ir.appendInstruction(Binary.create(INT_SHL,offsetI,index,new OPT_IntConstantOperand(LOG_BYTES_IN_INT)));
        bc2ir.appendInstruction(Unary.create(INT_2ADDRZerExt,offset,offsetI.copy()));
        bc2ir.appendInstruction(Store.create(INT_STORE,val,ref,offset.copy(),new OPT_LocationOperand(elementType),new OPT_TrueGuardOperand()));
      }
    }
 else {
      bc2ir.appendInstruction(Binary.create(INT_SHL,offsetI,index,new OPT_IntConstantOperand(LOG_BYTES_IN_ADDRESS)));
      bc2ir.appendInstruction(Unary.create(INT_2ADDRZerExt,offset,offsetI.copy()));
      bc2ir.appendInstruction(Store.create(REF_STORE,val,ref,offset.copy(),new OPT_LocationOperand(elementType),new OPT_TrueGuardOperand()));
    }
  }
 else   if (methodName == VM_MagicNames.getIntAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Load.create(INT_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setIntAtOffset) {
    OPT_Operand val=bc2ir.popInt();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    bc2ir.appendInstruction(Store.create(INT_STORE,val,object,offset,null));
  }
 else   if (methodName == VM_MagicNames.getWordAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Word);
    bc2ir.appendInstruction(Load.create(REF_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setWordAtOffset) {
    OPT_Operand val=bc2ir.popRef();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    bc2ir.appendInstruction(Store.create(REF_STORE,val,object,offset,null));
  }
 else   if (methodName == VM_MagicNames.getLongAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTempLong();
    bc2ir.appendInstruction(Load.create(LONG_LOAD,val,object,offset,null));
    bc2ir.pushDual(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setLongAtOffset) {
    OPT_Operand val=bc2ir.popLong();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    bc2ir.appendInstruction(Store.create(LONG_STORE,val,object,offset,null));
  }
 else   if (methodName == VM_MagicNames.getDoubleAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTempDouble();
    bc2ir.appendInstruction(Load.create(DOUBLE_LOAD,val,object,offset,null));
    bc2ir.pushDual(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setDoubleAtOffset) {
    OPT_Operand val=bc2ir.popDouble();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    bc2ir.appendInstruction(Store.create(DOUBLE_STORE,val,object,offset,null));
  }
 else   if (methodName == VM_MagicNames.getObjectAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.JavaLangObject);
    bc2ir.appendInstruction(Load.create(REF_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.getObjectArrayAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.JavaLangObjectArray);
    bc2ir.appendInstruction(Load.create(REF_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setObjectAtOffset) {
    OPT_LocationOperand loc=null;
    if (meth.getParameterTypes().length == 4) {
      loc=mapToMetadata(bc2ir.popInt());
    }
    OPT_Operand val=bc2ir.popRef();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    bc2ir.appendInstruction(Store.create(REF_STORE,val,object,offset,loc));
  }
 else   if (methodName == VM_MagicNames.getByteAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Byte);
    bc2ir.appendInstruction(Load.create(BYTE_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.getUnsignedByteAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Byte);
    bc2ir.appendInstruction(Load.create(UBYTE_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setByteAtOffset) {
    OPT_Operand val=bc2ir.popInt();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    bc2ir.appendInstruction(Store.create(BYTE_STORE,val,object,offset,null));
  }
 else   if (methodName == VM_MagicNames.getShortAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Char);
    bc2ir.appendInstruction(Load.create(SHORT_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.getCharAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Char);
    bc2ir.appendInstruction(Load.create(USHORT_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setCharAtOffset) {
    OPT_Operand val=bc2ir.popInt();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    bc2ir.appendInstruction(Store.create(SHORT_STORE,val,object,offset,null));
  }
 else   if (methodName == VM_MagicNames.getMemoryInt) {
    OPT_Operand memAddr=bc2ir.popAddress();
    OPT_RegisterOperand val=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Load.create(INT_LOAD,val,memAddr,new OPT_AddressConstantOperand(Offset.zero()),null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.getMemoryWord) {
    OPT_Operand memAddr=bc2ir.popAddress();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Word);
    bc2ir.appendInstruction(Load.create(REF_LOAD,val,memAddr,new OPT_AddressConstantOperand(Offset.zero()),null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.getMemoryAddress) {
    OPT_Operand memAddr=bc2ir.popAddress();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Address);
    bc2ir.appendInstruction(Load.create(REF_LOAD,val,memAddr,new OPT_AddressConstantOperand(Offset.zero()),null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setMemoryInt) {
    OPT_Operand val=bc2ir.popInt();
    OPT_Operand memAddr=bc2ir.popAddress();
    bc2ir.appendInstruction(Store.create(INT_STORE,val,memAddr,new OPT_AddressConstantOperand(Offset.zero()),null));
  }
 else   if (methodName == VM_MagicNames.setMemoryWord) {
    OPT_Operand val=bc2ir.popRef();
    OPT_Operand memAddr=bc2ir.popAddress();
    bc2ir.appendInstruction(Store.create(REF_STORE,val,memAddr,new OPT_AddressConstantOperand(Offset.zero()),null));
  }
 else   if (meth.isSysCall()) {
    VM_TypeReference[] args=meth.getParameterTypes();
    OPT_Instruction call=Call.create(SYSCALL,null,null,null,null,args.length - 1);
    for (int i=args.length - 1; i >= 1; i--) {
      Call.setParam(call,i - 1,bc2ir.pop(args[i]));
    }
    OPT_Operand functionAddress=bc2ir.pop(args[0]);
    Call.setAddress(call,functionAddress);
    if (!returnType.isVoidType()) {
      OPT_RegisterOperand op0=gc.temps.makeTemp(returnType);
      Call.setResult(call,op0);
      bc2ir.push(op0.copyD2U(),returnType);
    }
    bc2ir.appendInstruction(call);
  }
 else   if (methodName == VM_MagicNames.threadAsCollectorThread) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.findOrCreate(VM_BootstrapClassLoader.getBootstrapClassLoader(),VM_Atom.findOrCreateAsciiAtom(""String_Node_Str"")));
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.objectAsType) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.VM_Type);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.objectAsProcessor) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.VM_Processor);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.objectAsAddress) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.Address);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.addressAsObject) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.JavaLangObject);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popAddress()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.addressAsObjectArray) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.JavaLangObjectArray);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popAddress()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.addressAsByteArray) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.ByteArray);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popAddress()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.objectAsShortArray) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.ShortArray);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.objectAsIntArray) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.IntArray);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.floatAsIntBits) {
    OPT_Operand val=bc2ir.popFloat();
    OPT_RegisterOperand op0=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Unary.create(FLOAT_AS_INT_BITS,op0,val));
    bc2ir.push(op0.copyD2U());
  }
 else   if (methodName == VM_MagicNames.intBitsAsFloat) {
    OPT_Operand val=bc2ir.popInt();
    OPT_RegisterOperand op0=gc.temps.makeTempFloat();
    bc2ir.appendInstruction(Unary.create(INT_BITS_AS_FLOAT,op0,val));
    bc2ir.push(op0.copyD2U());
  }
 else   if (methodName == VM_MagicNames.doubleAsLongBits) {
    OPT_Operand val=bc2ir.popDouble();
    OPT_RegisterOperand op0=gc.temps.makeTempLong();
    bc2ir.appendInstruction(Unary.create(DOUBLE_AS_LONG_BITS,op0,val));
    bc2ir.pushDual(op0.copyD2U());
  }
 else   if (methodName == VM_MagicNames.longBitsAsDouble) {
    OPT_Operand val=bc2ir.popLong();
    OPT_RegisterOperand op0=gc.temps.makeTempDouble();
    bc2ir.appendInstruction(Unary.create(LONG_BITS_AS_DOUBLE,op0,val));
    bc2ir.pushDual(op0.copyD2U());
  }
 else   if (methodName == VM_MagicNames.getObjectType) {
    OPT_Operand val=bc2ir.popRef();
    OPT_Operand guard=OPT_BC2IR.getGuard(val);
    if (guard == null) {
      guard=new OPT_TrueGuardOperand();
    }
    OPT_RegisterOperand tibPtr=gc.temps.makeTemp(VM_TypeReference.JavaLangObjectArray);
    bc2ir.appendInstruction(GuardedUnary.create(GET_OBJ_TIB,tibPtr,val,guard));
    OPT_RegisterOperand op0;
    VM_TypeReference argType=val.getType();
    if (argType.isArrayType()) {
      op0=gc.temps.makeTemp(VM_TypeReference.VM_Array);
    }
 else {
      if (argType == VM_TypeReference.JavaLangObject || argType == VM_TypeReference.JavaLangCloneable || argType == VM_TypeReference.JavaIoSerializable) {
        op0=gc.temps.makeTemp(VM_TypeReference.VM_Type);
      }
 else {
        op0=gc.temps.makeTemp(VM_TypeReference.VM_Class);
      }
    }
    bc2ir.markGuardlessNonNull(op0);
    bc2ir.appendInstruction(Unary.create(GET_TYPE_FROM_TIB,op0,tibPtr.copyD2U()));
    bc2ir.push(op0.copyD2U());
  }
 else   if (methodName == VM_MagicNames.getArrayLength) {
    OPT_Operand val=bc2ir.popRef();
    OPT_RegisterOperand op0=gc.temps.makeTempInt();
    bc2ir.appendInstruction(GuardedUnary.create(ARRAYLENGTH,op0,val,new OPT_TrueGuardOperand()));
    bc2ir.push(op0.copyD2U());
  }
 else   if (methodName == VM_MagicNames.invokeClassInitializer) {
    OPT_Instruction s=Call.create0(CALL,null,bc2ir.popRef(),null);
    bc2ir.appendInstruction(s);
  }
 else   if ((methodName == VM_MagicNames.invokeMethodReturningObject) || (methodName == VM_MagicNames.invokeMethodReturningVoid) || (methodName == VM_MagicNames.invokeMethodReturningLong)|| (methodName == VM_MagicNames.invokeMethodReturningDouble)|| (methodName == VM_MagicNames.invokeMethodReturningFloat)|| (methodName == VM_MagicNames.invokeMethodReturningInt)) {
    OPT_Operand spills=bc2ir.popRef();
    OPT_Operand fprs=bc2ir.popRef();
    OPT_Operand gprs=bc2ir.popRef();
    OPT_Operand code=bc2ir.popRef();
    OPT_RegisterOperand res=null;
    if (methodName == VM_MagicNames.invokeMethodReturningObject) {
      res=gc.temps.makeTemp(VM_TypeReference.JavaLangObject);
      bc2ir.push(res.copyD2U());
    }
 else     if (methodName == VM_MagicNames.invokeMethodReturningLong) {
      res=gc.temps.makeTemp(VM_TypeReference.Long);
      bc2ir.push(res.copyD2U(),VM_TypeReference.Long);
    }
 else     if (methodName == VM_MagicNames.invokeMethodReturningDouble) {
      res=gc.temps.makeTempDouble();
      bc2ir.push(res.copyD2U(),VM_TypeReference.Double);
    }
 else     if (methodName == VM_MagicNames.invokeMethodReturningFloat) {
      res=gc.temps.makeTempFloat();
      bc2ir.push(res.copyD2U(),VM_TypeReference.Float);
    }
 else     if (methodName == VM_MagicNames.invokeMethodReturningInt) {
      res=gc.temps.makeTempInt();
      bc2ir.push(res.copyD2U());
    }
    VM_Field target=VM_Entrypoints.reflectiveMethodInvokerInstructionsField;
    OPT_MethodOperand met=OPT_MethodOperand.STATIC(target);
    OPT_Instruction s=Call.create4(CALL,res,new OPT_AddressConstantOperand(target.getOffset()),met,code,gprs,fprs,spills);
    bc2ir.appendInstruction(s);
  }
 else   if (methodName == VM_MagicNames.saveThreadState) {
    OPT_Operand p1=bc2ir.popRef();
    VM_Field target=VM_Entrypoints.saveThreadStateInstructionsField;
    OPT_MethodOperand mo=OPT_MethodOperand.STATIC(target);
    bc2ir.appendInstruction(Call.create1(CALL,null,new OPT_AddressConstantOperand(target.getOffset()),mo,p1));
  }
 else   if (methodName == VM_MagicNames.threadSwitch) {
    OPT_Operand p2=bc2ir.popRef();
    OPT_Operand p1=bc2ir.popRef();
    VM_Field target=VM_Entrypoints.threadSwitchInstructionsField;
    OPT_MethodOperand mo=OPT_MethodOperand.STATIC(target);
    bc2ir.appendInstruction(Call.create2(CALL,null,new OPT_AddressConstantOperand(target.getOffset()),mo,p1,p2));
  }
 else   if (methodName == VM_MagicNames.restoreHardwareExceptionState) {
    VM_Field target=VM_Entrypoints.restoreHardwareExceptionStateInstructionsField;
    OPT_MethodOperand mo=OPT_MethodOperand.STATIC(target);
    bc2ir.appendInstruction(Call.create1(CALL,null,new OPT_AddressConstantOperand(target.getOffset()),mo,bc2ir.popRef()));
  }
 else   if (methodName == VM_MagicNames.prepareInt) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Prepare.create(PREPARE_INT,val,base,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.prepareObject) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.JavaLangObject);
    bc2ir.appendInstruction(Prepare.create(PREPARE_ADDR,val,base,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.prepareAddress) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Address);
    bc2ir.appendInstruction(Prepare.create(PREPARE_ADDR,val,base,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.prepareWord) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Word);
    bc2ir.appendInstruction(Prepare.create(PREPARE_ADDR,val,base,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.attemptInt) {
    OPT_Operand newVal=bc2ir.popInt();
    OPT_Operand oldVal=bc2ir.popInt();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand test=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Attempt.create(ATTEMPT_INT,test,base,offset,oldVal,newVal,null));
    bc2ir.push(test.copyD2U());
  }
 else   if (methodName == VM_MagicNames.attemptObject) {
    OPT_Operand newVal=bc2ir.popRef();
    OPT_Operand oldVal=bc2ir.popRef();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand test=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Attempt.create(ATTEMPT_ADDR,test,base,offset,oldVal,newVal,null));
    bc2ir.push(test.copyD2U());
  }
 else   if (methodName == VM_MagicNames.attemptAddress) {
    OPT_Operand newVal=bc2ir.popAddress();
    OPT_Operand oldVal=bc2ir.popAddress();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand test=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Attempt.create(ATTEMPT_ADDR,test,base,offset,oldVal,newVal,null));
    bc2ir.push(test.copyD2U());
  }
 else   if (methodName == VM_MagicNames.attemptWord) {
    OPT_Operand newVal=bc2ir.pop();
    OPT_Operand oldVal=bc2ir.pop();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand test=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Attempt.create(ATTEMPT_ADDR,test,base,offset,oldVal,newVal,null));
    bc2ir.push(test.copyD2U());
  }
 else   if (generatePolymorphicMagic(bc2ir,gc,meth,methodName)) {
    return true;
  }
 else   if (methodName == VM_MagicNames.getTimeBase) {
    OPT_RegisterOperand op0=gc.temps.makeTempLong();
    bc2ir.appendInstruction(Nullary.create(GET_TIME_BASE,op0));
    bc2ir.pushDual(op0.copyD2U());
  }
 else {
    return OPT_GenerateMachineSpecificMagic.generateMagic(bc2ir,gc,meth);
  }
  return true;
}","/** 
 * ""Semantic inlining"" of methods of the VM_Magic class. Based on the methodName, generate a sequence of opt instructions that implement the magic, updating the expression stack as necessary.
 * @param bc2ir the bc2ir object that is generating the ir containing this magic
 * @param gc must be bc2ir.gc
 * @param meth the VM_Method that is the magic method
 */
static boolean generateMagic(OPT_BC2IR bc2ir,OPT_GenerationContext gc,VM_MethodReference meth) throws OPT_MagicNotImplementedException {
  if (gc.method.hasNoInlinePragma())   gc.allocFrame=true;
  bc2ir.markBBUnsafeForScheduling();
  VM_Atom methodName=meth.getName();
  boolean address=(meth.getType() == VM_TypeReference.Address);
  VM_TypeReference[] types=meth.getParameterTypes();
  VM_TypeReference returnType=meth.getReturnType();
  if (address && isLoad(methodName)) {
    OPT_Operand offset=(types.length == 0) ? new OPT_AddressConstantOperand(Address.zero()) : bc2ir.popAddress();
    OPT_Operand base=bc2ir.popAddress();
    OPT_RegisterOperand result=gc.temps.makeTemp(returnType);
    bc2ir.appendInstruction(Load.create(getOperator(returnType,LOAD_OP),result,base,offset,null));
    bc2ir.push(result.copyD2U(),returnType);
  }
 else   if (address && isPrepare(methodName)) {
    OPT_Operand offset=(types.length == 0) ? new OPT_AddressConstantOperand(Address.zero()) : bc2ir.popAddress();
    OPT_Operand base=bc2ir.popAddress();
    OPT_RegisterOperand result=gc.temps.makeTemp(returnType);
    bc2ir.appendInstruction(Prepare.create(getOperator(returnType,PREPARE_OP),result,base,offset,null));
    bc2ir.push(result.copyD2U(),returnType);
  }
 else   if (address && methodName == VM_MagicNames.attempt) {
    VM_TypeReference attemptType=types[0];
    OPT_Operand offset=(types.length == 2) ? new OPT_AddressConstantOperand(Address.zero()) : bc2ir.popAddress();
    OPT_Operand newVal=bc2ir.pop();
    OPT_Operand oldVal=bc2ir.pop();
    OPT_Operand base=bc2ir.popAddress();
    OPT_RegisterOperand test=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Attempt.create(getOperator(attemptType,ATTEMPT_OP),test,base,offset,oldVal,newVal,null));
    bc2ir.push(test.copyD2U(),returnType);
  }
 else   if (address && methodName == VM_MagicNames.store) {
    VM_TypeReference storeType=types[0];
    OPT_Operand offset=(types.length == 1) ? new OPT_AddressConstantOperand(Address.zero()) : bc2ir.popAddress();
    OPT_Operand val=bc2ir.pop(storeType);
    OPT_Operand base=bc2ir.popAddress();
    bc2ir.appendInstruction(Store.create(getOperator(storeType,STORE_OP),val,base,offset,null));
  }
 else   if (methodName == VM_MagicNames.getProcessorRegister) {
    OPT_RegisterOperand rop=gc.temps.makePROp();
    bc2ir.markGuardlessNonNull(rop);
    bc2ir.push(rop);
  }
 else   if (methodName == VM_MagicNames.setProcessorRegister) {
    OPT_Operand val=bc2ir.popRef();
    if (val instanceof OPT_RegisterOperand) {
      bc2ir.appendInstruction(Move.create(REF_MOVE,gc.temps.makePROp(),val));
    }
 else {
      String msg=""String_Node_Str"";
      throw OPT_MagicNotImplementedException.UNEXPECTED(msg);
    }
  }
 else   if (methodName == VM_MagicNames.addressArrayCreate) {
    OPT_Instruction s=bc2ir.generateAnewarray(meth.getType().getArrayElementType());
    bc2ir.appendInstruction(s);
  }
 else   if (methodName == VM_MagicNames.addressArrayLength) {
    OPT_Operand op1=bc2ir.pop();
    bc2ir.clearCurrentGuard();
    if (bc2ir.do_NullCheck(op1))     return true;
    OPT_RegisterOperand t=gc.temps.makeTempInt();
    OPT_Instruction s=GuardedUnary.create(ARRAYLENGTH,t,op1,bc2ir.getCurrentGuard());
    bc2ir.push(t.copyD2U());
    bc2ir.appendInstruction(s);
  }
 else   if (methodName == VM_MagicNames.addressArrayGet) {
    VM_TypeReference elementType=meth.getType().getArrayElementType();
    OPT_Operand index=bc2ir.popInt();
    OPT_Operand ref=bc2ir.popRef();
    OPT_RegisterOperand offsetI=gc.temps.makeTempInt();
    OPT_RegisterOperand offset=gc.temps.makeTempOffset();
    OPT_RegisterOperand result;
    if (meth.getType().isCodeArrayType()) {
      if (VM.BuildForIA32) {
        result=gc.temps.makeTemp(VM_TypeReference.Byte);
        bc2ir.appendInstruction(Load.create(BYTE_LOAD,result,ref,index,new OPT_LocationOperand(elementType),new OPT_TrueGuardOperand()));
      }
 else       if (VM.BuildForPowerPC) {
        result=gc.temps.makeTemp(VM_TypeReference.Int);
        bc2ir.appendInstruction(Binary.create(INT_SHL,offsetI,index,new OPT_IntConstantOperand(LOG_BYTES_IN_INT)));
        bc2ir.appendInstruction(Unary.create(INT_2ADDRZerExt,offset,offsetI.copy()));
        bc2ir.appendInstruction(Load.create(INT_LOAD,result,ref,offset.copy(),new OPT_LocationOperand(elementType),new OPT_TrueGuardOperand()));
      }
    }
 else {
      result=gc.temps.makeTemp(elementType);
      bc2ir.appendInstruction(Binary.create(INT_SHL,offsetI,index,new OPT_IntConstantOperand(LOG_BYTES_IN_ADDRESS)));
      bc2ir.appendInstruction(Unary.create(INT_2ADDRZerExt,offset,offsetI.copy()));
      bc2ir.appendInstruction(Load.create(REF_LOAD,result,ref,offset.copy(),new OPT_LocationOperand(elementType),new OPT_TrueGuardOperand()));
    }
    bc2ir.push(result.copyD2U());
  }
 else   if (methodName == VM_MagicNames.addressArraySet) {
    VM_TypeReference elementType=meth.getType().getArrayElementType();
    OPT_Operand val=bc2ir.pop();
    OPT_Operand index=bc2ir.popInt();
    OPT_Operand ref=bc2ir.popRef();
    OPT_RegisterOperand offsetI=gc.temps.makeTempInt();
    OPT_RegisterOperand offset=gc.temps.makeTempOffset();
    if (meth.getType().isCodeArrayType()) {
      if (VM.BuildForIA32) {
        bc2ir.appendInstruction(Store.create(BYTE_STORE,val,ref,index,new OPT_LocationOperand(elementType),new OPT_TrueGuardOperand()));
      }
 else       if (VM.BuildForPowerPC) {
        bc2ir.appendInstruction(Binary.create(INT_SHL,offsetI,index,new OPT_IntConstantOperand(LOG_BYTES_IN_INT)));
        bc2ir.appendInstruction(Unary.create(INT_2ADDRZerExt,offset,offsetI.copy()));
        bc2ir.appendInstruction(Store.create(INT_STORE,val,ref,offset.copy(),new OPT_LocationOperand(elementType),new OPT_TrueGuardOperand()));
      }
    }
 else {
      bc2ir.appendInstruction(Binary.create(INT_SHL,offsetI,index,new OPT_IntConstantOperand(LOG_BYTES_IN_ADDRESS)));
      bc2ir.appendInstruction(Unary.create(INT_2ADDRZerExt,offset,offsetI.copy()));
      bc2ir.appendInstruction(Store.create(REF_STORE,val,ref,offset.copy(),new OPT_LocationOperand(elementType),new OPT_TrueGuardOperand()));
    }
  }
 else   if (methodName == VM_MagicNames.getIntAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Load.create(INT_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setIntAtOffset) {
    OPT_Operand val=bc2ir.popInt();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    bc2ir.appendInstruction(Store.create(INT_STORE,val,object,offset,null));
  }
 else   if (methodName == VM_MagicNames.getWordAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Word);
    bc2ir.appendInstruction(Load.create(REF_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setWordAtOffset) {
    OPT_Operand val=bc2ir.popRef();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    bc2ir.appendInstruction(Store.create(REF_STORE,val,object,offset,null));
  }
 else   if (methodName == VM_MagicNames.getLongAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTempLong();
    bc2ir.appendInstruction(Load.create(LONG_LOAD,val,object,offset,null));
    bc2ir.pushDual(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setLongAtOffset) {
    OPT_Operand val=bc2ir.popLong();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    bc2ir.appendInstruction(Store.create(LONG_STORE,val,object,offset,null));
  }
 else   if (methodName == VM_MagicNames.getDoubleAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTempDouble();
    bc2ir.appendInstruction(Load.create(DOUBLE_LOAD,val,object,offset,null));
    bc2ir.pushDual(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setDoubleAtOffset) {
    OPT_Operand val=bc2ir.popDouble();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    bc2ir.appendInstruction(Store.create(DOUBLE_STORE,val,object,offset,null));
  }
 else   if (methodName == VM_MagicNames.getObjectAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.JavaLangObject);
    bc2ir.appendInstruction(Load.create(REF_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.getObjectArrayAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.JavaLangObjectArray);
    bc2ir.appendInstruction(Load.create(REF_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setObjectAtOffset) {
    OPT_LocationOperand loc=null;
    if (meth.getParameterTypes().length == 4) {
      loc=mapToMetadata(bc2ir.popInt());
    }
    OPT_Operand val=bc2ir.popRef();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    bc2ir.appendInstruction(Store.create(REF_STORE,val,object,offset,loc));
  }
 else   if (methodName == VM_MagicNames.getByteAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Byte);
    bc2ir.appendInstruction(Load.create(BYTE_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.getUnsignedByteAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Byte);
    bc2ir.appendInstruction(Load.create(UBYTE_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setByteAtOffset) {
    OPT_Operand val=bc2ir.popInt();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    bc2ir.appendInstruction(Store.create(BYTE_STORE,val,object,offset,null));
  }
 else   if (methodName == VM_MagicNames.getShortAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Char);
    bc2ir.appendInstruction(Load.create(SHORT_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.getCharAtOffset) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Char);
    bc2ir.appendInstruction(Load.create(USHORT_LOAD,val,object,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setCharAtOffset) {
    OPT_Operand val=bc2ir.popInt();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand object=bc2ir.popRef();
    bc2ir.appendInstruction(Store.create(SHORT_STORE,val,object,offset,null));
  }
 else   if (methodName == VM_MagicNames.getMemoryInt) {
    OPT_Operand memAddr=bc2ir.popAddress();
    OPT_RegisterOperand val=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Load.create(INT_LOAD,val,memAddr,new OPT_AddressConstantOperand(Offset.zero()),null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.getMemoryWord) {
    OPT_Operand memAddr=bc2ir.popAddress();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Word);
    bc2ir.appendInstruction(Load.create(REF_LOAD,val,memAddr,new OPT_AddressConstantOperand(Offset.zero()),null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.getMemoryAddress) {
    OPT_Operand memAddr=bc2ir.popAddress();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Address);
    bc2ir.appendInstruction(Load.create(REF_LOAD,val,memAddr,new OPT_AddressConstantOperand(Offset.zero()),null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.setMemoryInt) {
    OPT_Operand val=bc2ir.popInt();
    OPT_Operand memAddr=bc2ir.popAddress();
    bc2ir.appendInstruction(Store.create(INT_STORE,val,memAddr,new OPT_AddressConstantOperand(Offset.zero()),null));
  }
 else   if (methodName == VM_MagicNames.setMemoryWord) {
    OPT_Operand val=bc2ir.popRef();
    OPT_Operand memAddr=bc2ir.popAddress();
    bc2ir.appendInstruction(Store.create(REF_STORE,val,memAddr,new OPT_AddressConstantOperand(Offset.zero()),null));
  }
 else   if (meth.isSysCall()) {
    VM_TypeReference[] args=meth.getParameterTypes();
    OPT_Instruction call=Call.create(SYSCALL,null,null,null,null,args.length - 1);
    for (int i=args.length - 1; i >= 1; i--) {
      Call.setParam(call,i - 1,bc2ir.pop(args[i]));
    }
    OPT_Operand functionAddress=bc2ir.pop(args[0]);
    Call.setAddress(call,functionAddress);
    if (!returnType.isVoidType()) {
      OPT_RegisterOperand op0=gc.temps.makeTemp(returnType);
      Call.setResult(call,op0);
      bc2ir.push(op0.copyD2U(),returnType);
    }
    bc2ir.appendInstruction(call);
  }
 else   if (methodName == VM_MagicNames.threadAsCollectorThread) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.VM_CollectorThread);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.objectAsType) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.VM_Type);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.objectAsProcessor) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.VM_Processor);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.objectAsAddress) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.Address);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.addressAsObject) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.JavaLangObject);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popAddress()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.addressAsObjectArray) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.JavaLangObjectArray);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popAddress()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.addressAsByteArray) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.ByteArray);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popAddress()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.objectAsShortArray) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.ShortArray);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.objectAsIntArray) {
    OPT_RegisterOperand reg=gc.temps.makeTemp(VM_TypeReference.IntArray);
    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));
    bc2ir.push(reg.copyD2U());
  }
 else   if (methodName == VM_MagicNames.floatAsIntBits) {
    OPT_Operand val=bc2ir.popFloat();
    OPT_RegisterOperand op0=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Unary.create(FLOAT_AS_INT_BITS,op0,val));
    bc2ir.push(op0.copyD2U());
  }
 else   if (methodName == VM_MagicNames.intBitsAsFloat) {
    OPT_Operand val=bc2ir.popInt();
    OPT_RegisterOperand op0=gc.temps.makeTempFloat();
    bc2ir.appendInstruction(Unary.create(INT_BITS_AS_FLOAT,op0,val));
    bc2ir.push(op0.copyD2U());
  }
 else   if (methodName == VM_MagicNames.doubleAsLongBits) {
    OPT_Operand val=bc2ir.popDouble();
    OPT_RegisterOperand op0=gc.temps.makeTempLong();
    bc2ir.appendInstruction(Unary.create(DOUBLE_AS_LONG_BITS,op0,val));
    bc2ir.pushDual(op0.copyD2U());
  }
 else   if (methodName == VM_MagicNames.longBitsAsDouble) {
    OPT_Operand val=bc2ir.popLong();
    OPT_RegisterOperand op0=gc.temps.makeTempDouble();
    bc2ir.appendInstruction(Unary.create(LONG_BITS_AS_DOUBLE,op0,val));
    bc2ir.pushDual(op0.copyD2U());
  }
 else   if (methodName == VM_MagicNames.getObjectType) {
    OPT_Operand val=bc2ir.popRef();
    OPT_Operand guard=OPT_BC2IR.getGuard(val);
    if (guard == null) {
      guard=new OPT_TrueGuardOperand();
    }
    OPT_RegisterOperand tibPtr=gc.temps.makeTemp(VM_TypeReference.JavaLangObjectArray);
    bc2ir.appendInstruction(GuardedUnary.create(GET_OBJ_TIB,tibPtr,val,guard));
    OPT_RegisterOperand op0;
    VM_TypeReference argType=val.getType();
    if (argType.isArrayType()) {
      op0=gc.temps.makeTemp(VM_TypeReference.VM_Array);
    }
 else {
      if (argType == VM_TypeReference.JavaLangObject || argType == VM_TypeReference.JavaLangCloneable || argType == VM_TypeReference.JavaIoSerializable) {
        op0=gc.temps.makeTemp(VM_TypeReference.VM_Type);
      }
 else {
        op0=gc.temps.makeTemp(VM_TypeReference.VM_Class);
      }
    }
    bc2ir.markGuardlessNonNull(op0);
    bc2ir.appendInstruction(Unary.create(GET_TYPE_FROM_TIB,op0,tibPtr.copyD2U()));
    bc2ir.push(op0.copyD2U());
  }
 else   if (methodName == VM_MagicNames.getArrayLength) {
    OPT_Operand val=bc2ir.popRef();
    OPT_RegisterOperand op0=gc.temps.makeTempInt();
    bc2ir.appendInstruction(GuardedUnary.create(ARRAYLENGTH,op0,val,new OPT_TrueGuardOperand()));
    bc2ir.push(op0.copyD2U());
  }
 else   if (methodName == VM_MagicNames.invokeClassInitializer) {
    OPT_Instruction s=Call.create0(CALL,null,bc2ir.popRef(),null);
    bc2ir.appendInstruction(s);
  }
 else   if ((methodName == VM_MagicNames.invokeMethodReturningObject) || (methodName == VM_MagicNames.invokeMethodReturningVoid) || (methodName == VM_MagicNames.invokeMethodReturningLong)|| (methodName == VM_MagicNames.invokeMethodReturningDouble)|| (methodName == VM_MagicNames.invokeMethodReturningFloat)|| (methodName == VM_MagicNames.invokeMethodReturningInt)) {
    OPT_Operand spills=bc2ir.popRef();
    OPT_Operand fprs=bc2ir.popRef();
    OPT_Operand gprs=bc2ir.popRef();
    OPT_Operand code=bc2ir.popRef();
    OPT_RegisterOperand res=null;
    if (methodName == VM_MagicNames.invokeMethodReturningObject) {
      res=gc.temps.makeTemp(VM_TypeReference.JavaLangObject);
      bc2ir.push(res.copyD2U());
    }
 else     if (methodName == VM_MagicNames.invokeMethodReturningLong) {
      res=gc.temps.makeTemp(VM_TypeReference.Long);
      bc2ir.push(res.copyD2U(),VM_TypeReference.Long);
    }
 else     if (methodName == VM_MagicNames.invokeMethodReturningDouble) {
      res=gc.temps.makeTempDouble();
      bc2ir.push(res.copyD2U(),VM_TypeReference.Double);
    }
 else     if (methodName == VM_MagicNames.invokeMethodReturningFloat) {
      res=gc.temps.makeTempFloat();
      bc2ir.push(res.copyD2U(),VM_TypeReference.Float);
    }
 else     if (methodName == VM_MagicNames.invokeMethodReturningInt) {
      res=gc.temps.makeTempInt();
      bc2ir.push(res.copyD2U());
    }
    VM_Field target=VM_Entrypoints.reflectiveMethodInvokerInstructionsField;
    OPT_MethodOperand met=OPT_MethodOperand.STATIC(target);
    OPT_Instruction s=Call.create4(CALL,res,new OPT_AddressConstantOperand(target.getOffset()),met,code,gprs,fprs,spills);
    bc2ir.appendInstruction(s);
  }
 else   if (methodName == VM_MagicNames.saveThreadState) {
    OPT_Operand p1=bc2ir.popRef();
    VM_Field target=VM_Entrypoints.saveThreadStateInstructionsField;
    OPT_MethodOperand mo=OPT_MethodOperand.STATIC(target);
    bc2ir.appendInstruction(Call.create1(CALL,null,new OPT_AddressConstantOperand(target.getOffset()),mo,p1));
  }
 else   if (methodName == VM_MagicNames.threadSwitch) {
    OPT_Operand p2=bc2ir.popRef();
    OPT_Operand p1=bc2ir.popRef();
    VM_Field target=VM_Entrypoints.threadSwitchInstructionsField;
    OPT_MethodOperand mo=OPT_MethodOperand.STATIC(target);
    bc2ir.appendInstruction(Call.create2(CALL,null,new OPT_AddressConstantOperand(target.getOffset()),mo,p1,p2));
  }
 else   if (methodName == VM_MagicNames.restoreHardwareExceptionState) {
    VM_Field target=VM_Entrypoints.restoreHardwareExceptionStateInstructionsField;
    OPT_MethodOperand mo=OPT_MethodOperand.STATIC(target);
    bc2ir.appendInstruction(Call.create1(CALL,null,new OPT_AddressConstantOperand(target.getOffset()),mo,bc2ir.popRef()));
  }
 else   if (methodName == VM_MagicNames.prepareInt) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Prepare.create(PREPARE_INT,val,base,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.prepareObject) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.JavaLangObject);
    bc2ir.appendInstruction(Prepare.create(PREPARE_ADDR,val,base,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.prepareAddress) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Address);
    bc2ir.appendInstruction(Prepare.create(PREPARE_ADDR,val,base,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.prepareWord) {
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand val=gc.temps.makeTemp(VM_TypeReference.Word);
    bc2ir.appendInstruction(Prepare.create(PREPARE_ADDR,val,base,offset,null));
    bc2ir.push(val.copyD2U());
  }
 else   if (methodName == VM_MagicNames.attemptInt) {
    OPT_Operand newVal=bc2ir.popInt();
    OPT_Operand oldVal=bc2ir.popInt();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand test=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Attempt.create(ATTEMPT_INT,test,base,offset,oldVal,newVal,null));
    bc2ir.push(test.copyD2U());
  }
 else   if (methodName == VM_MagicNames.attemptObject) {
    OPT_Operand newVal=bc2ir.popRef();
    OPT_Operand oldVal=bc2ir.popRef();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand test=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Attempt.create(ATTEMPT_ADDR,test,base,offset,oldVal,newVal,null));
    bc2ir.push(test.copyD2U());
  }
 else   if (methodName == VM_MagicNames.attemptAddress) {
    OPT_Operand newVal=bc2ir.popAddress();
    OPT_Operand oldVal=bc2ir.popAddress();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand test=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Attempt.create(ATTEMPT_ADDR,test,base,offset,oldVal,newVal,null));
    bc2ir.push(test.copyD2U());
  }
 else   if (methodName == VM_MagicNames.attemptWord) {
    OPT_Operand newVal=bc2ir.pop();
    OPT_Operand oldVal=bc2ir.pop();
    OPT_Operand offset=bc2ir.popAddress();
    OPT_Operand base=bc2ir.popRef();
    OPT_RegisterOperand test=gc.temps.makeTempInt();
    bc2ir.appendInstruction(Attempt.create(ATTEMPT_ADDR,test,base,offset,oldVal,newVal,null));
    bc2ir.push(test.copyD2U());
  }
 else   if (generatePolymorphicMagic(bc2ir,gc,meth,methodName)) {
    return true;
  }
 else   if (methodName == VM_MagicNames.getTimeBase) {
    OPT_RegisterOperand op0=gc.temps.makeTempLong();
    bc2ir.appendInstruction(Nullary.create(GET_TIME_BASE,op0));
    bc2ir.pushDual(op0.copyD2U());
  }
 else {
    return OPT_GenerateMachineSpecificMagic.generateMagic(bc2ir,gc,meth);
  }
  return true;
}",0.9973865817305728
149931,"/** 
 * Construct the JNIFuntionTable. This is not very efficient, but is done at bootImageWriting time, so we just don't worry about it.
 */
public static VM_CodeArray[] buildTable(){
  String[] names=initNames();
  VM_CodeArray[] functions=new VM_CodeArray[VM_JNIFunctions.FUNCTIONCOUNT];
  VM_TypeReference tRef=VM_TypeReference.findOrCreate(VM_BootstrapClassLoader.getBootstrapClassLoader(),VM_Atom.findOrCreateAsciiAtom(""String_Node_Str""));
  VM_Class cls=(VM_Class)tRef.peekResolvedType();
  if (VM.VerifyAssertions)   VM._assert(cls.isInstantiated());
  for (  VM_Method mth : cls.getDeclaredMethods()) {
    String methodName=mth.getName().toString();
    int jniIndex=indexOf(names,methodName);
    if (jniIndex != -1) {
      functions[jniIndex]=mth.getCurrentEntryCodeArray();
    }
  }
  return functions;
}","/** 
 * Construct the JNIFuntionTable. This is not very efficient, but is done at bootImageWriting time, so we just don't worry about it.
 */
public static VM_CodeArray[] buildTable(){
  String[] names=initNames();
  VM_CodeArray[] functions=new VM_CodeArray[VM_JNIFunctions.FUNCTIONCOUNT];
  VM_Class cls=VM_TypeReference.VM_JNIFunctions.peekResolvedType().asClass();
  if (VM.VerifyAssertions)   VM._assert(cls.isInstantiated());
  for (  VM_Method mth : cls.getDeclaredMethods()) {
    String methodName=mth.getName().toString();
    int jniIndex=indexOf(names,methodName);
    if (jniIndex != -1) {
      functions[jniIndex]=mth.getCurrentEntryCodeArray();
    }
  }
  return functions;
}",0.8643282594308405
149932,"/** 
 * Sorting method for Comparable. Sort by string value 
 */
public int compareTo(Object o){
  return value.compareTo(((Prefix)o).value);
}","/** 
 * Sorting method for Comparable. Sort by string value 
 */
public int compareTo(Object o){
  return -value.compareTo(((Prefix)o).value);
}",0.9965156794425089
149933,"/** 
 * Extract the first -D... command line argument that matches a given variable, and return it.
 * @return the environment arg, or null if there is none.
 */
public static String getEnvironmentArg(String variable){
  String[] allEnvArgs=getArgs(ENVIRONMENT_ARG);
  String prefix=variable + ""String_Node_Str"";
  if (allEnvArgs != null)   for (  String allEnvArg : allEnvArgs)   if (allEnvArg.startsWith(prefix))   return allEnvArg.substring(variable.length() + 1);
  if (variable.equals(""String_Node_Str""))   return getRvmRoot();
 else   if (variable.equals(""String_Node_Str""))   return getRvmBuild();
 else   if (variable.equals(""String_Node_Str""))   return getRvmRoot();
 else   if (variable.equals(""String_Node_Str""))   return ""String_Node_Str"" + getRvmBuild();
 else   if (variable.equals(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (variable.equals(""String_Node_Str""))   return getUserHome();
 else   if (variable.equals(""String_Node_Str""))   return getCWD();
 else   if (variable.equals(""String_Node_Str""))   return getOsName();
 else   if (variable.equals(""String_Node_Str""))   return getOsVersion();
 else   if (variable.equals(""String_Node_Str""))   return getOsArch();
  return null;
}","/** 
 * Extract the first -D... command line argument that matches a given variable, and return it.
 * @return the environment arg, or null if there is none.
 */
public static String getEnvironmentArg(String variable){
  if (!VM.runningVM)   throw new IllegalAccessError(""String_Node_Str"");
  String[] allEnvArgs=getArgs(ENVIRONMENT_ARG);
  String prefix=variable + ""String_Node_Str"";
  if (allEnvArgs != null)   for (  String allEnvArg : allEnvArgs)   if (allEnvArg.startsWith(prefix))   return allEnvArg.substring(variable.length() + 1);
  if (variable.equals(""String_Node_Str""))   return getRvmRoot();
 else   if (variable.equals(""String_Node_Str""))   return getRvmBuild();
 else   if (variable.equals(""String_Node_Str""))   return getRvmRoot();
 else   if (variable.equals(""String_Node_Str""))   return ""String_Node_Str"" + getRvmBuild();
 else   if (variable.equals(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (variable.equals(""String_Node_Str""))   return getUserHome();
 else   if (variable.equals(""String_Node_Str""))   return getCWD();
 else   if (variable.equals(""String_Node_Str""))   return getOsName();
 else   if (variable.equals(""String_Node_Str""))   return getOsVersion();
 else   if (variable.equals(""String_Node_Str""))   return getOsArch();
  return null;
}",0.971153846153846
149934,"private void naiveUnroller(OPT_LSTNode t,OPT_IR ir){
  OPT_BitVector nloop=t.loop;
  OPT_BasicBlock seqStart=null;
  OPT_BasicBlockEnumeration bs;
  if (t.loop.populationCount() > MAX_BLOCKS_FOR_NAIVE_UNROLLING) {
    report(""String_Node_Str"");
    return;
  }
  report(""String_Node_Str"");
  OPT_CFGTransformations.killFallThroughs(ir,nloop);
  int bodyBlocks=nloop.populationCount();
  OPT_BasicBlock[] body=new OPT_BasicBlock[bodyBlocks];
{
    int i=0;
    bs=ir.getBasicBlocks(nloop);
    while (bs.hasMoreElements()) {
      OPT_BasicBlock b=bs.next();
      if (VM.VerifyAssertions)       VM._assert(!(b instanceof OPT_ExceptionHandlerBasicBlock));
      body[i++]=b;
      OPT_BasicBlock next=b.nextBasicBlockInCodeOrder();
      if (next == null || !OPT_CFGTransformations.inLoop(next,nloop))       ;
      seqStart=b;
    }
  }
  OPT_BasicBlock seqEnd=seqStart.nextBasicBlockInCodeOrder();
  if (seqEnd != null)   ir.cfg.breakCodeOrder(seqStart,seqEnd);
  OPT_BasicBlock seqLast=seqStart;
  OPT_BasicBlock firstHeaderCopy=null;
  OPT_BasicBlock currentBlock=seqLast;
  for (int i=1; i <= unrollFactor; ++i) {
    for (    OPT_BasicBlock bb : body) {
      seqLast=copyAndLinkBlock(ir,seqLast,bb);
      if (bb == t.header) {
        if (firstHeaderCopy == null) {
          firstHeaderCopy=seqLast;
        }
      }
    }
    currentBlock=seqLast;
    for (int j=0; j < bodyBlocks; ++j) {
      currentBlock.recomputeNormalOut(ir);
      OPT_BasicBlockEnumeration be=currentBlock.getOut();
      while (be.hasMoreElements()) {
        OPT_BasicBlock out=be.next();
        if (out != t.header && OPT_CFGTransformations.inLoop(out,nloop)) {
          OPT_BasicBlock outCopy=(OPT_BasicBlock)out.scratchObject;
          currentBlock.redirectOuts(out,outCopy,ir);
        }
      }
      currentBlock.recomputeNormalOut(ir);
      currentBlock=currentBlock.prevBasicBlockInCodeOrder();
    }
    if (i != 1) {
      for (int j=0; j < bodyBlocks; ++j) {
        OPT_BasicBlockEnumeration be=currentBlock.getOut();
        while (be.hasMoreElements()) {
          OPT_BasicBlock out=be.next();
          if (out == t.header) {
            OPT_BasicBlock headerCopy;
            headerCopy=(OPT_BasicBlock)t.header.scratchObject;
            currentBlock.redirectOuts(t.header,headerCopy,ir);
          }
        }
        currentBlock.recomputeNormalOut(ir);
        currentBlock=currentBlock.prevBasicBlockInCodeOrder();
      }
    }
  }
  if (seqEnd != null)   ir.cfg.linkInCodeOrder(seqLast,seqEnd);
  for (int j=0; j < bodyBlocks; ++j) {
    OPT_BasicBlockEnumeration be=body[j].getOut();
    while (be.hasMoreElements()) {
      OPT_BasicBlock out=be.next();
      if (out == t.header) {
        body[j].redirectOuts(t.header,firstHeaderCopy,ir);
      }
    }
    body[j].recomputeNormalOut(ir);
  }
  currentBlock=seqLast;
  for (int j=0; j < bodyBlocks; ++j) {
    OPT_BasicBlockEnumeration be=currentBlock.getOut();
    while (be.hasMoreElements()) {
      OPT_BasicBlock out=be.next();
      if (out == t.header) {
        currentBlock.redirectOuts(t.header,firstHeaderCopy,ir);
      }
    }
    currentBlock.recomputeNormalOut(ir);
    currentBlock=currentBlock.prevBasicBlockInCodeOrder();
  }
}","private void naiveUnroller(OPT_LSTNode t,OPT_IR ir){
  OPT_BitVector nloop=t.loop;
  OPT_BasicBlock seqStart=null;
  OPT_BasicBlockEnumeration bs;
  if (t.loop.populationCount() > MAX_BLOCKS_FOR_NAIVE_UNROLLING) {
    report(""String_Node_Str"");
    return;
  }
  report(""String_Node_Str"");
  OPT_CFGTransformations.killFallThroughs(ir,nloop);
  int bodyBlocks=nloop.populationCount();
  OPT_BasicBlock[] body=new OPT_BasicBlock[bodyBlocks];
{
    int i=0;
    bs=ir.getBasicBlocks(nloop);
    while (bs.hasMoreElements()) {
      OPT_BasicBlock b=bs.next();
      if (VM.VerifyAssertions)       VM._assert(!(b instanceof OPT_ExceptionHandlerBasicBlock));
      body[i++]=b;
      OPT_BasicBlock next=b.nextBasicBlockInCodeOrder();
      if (next == null || !OPT_CFGTransformations.inLoop(next,nloop))       seqStart=b;
    }
  }
  OPT_BasicBlock seqEnd=seqStart.nextBasicBlockInCodeOrder();
  if (seqEnd != null)   ir.cfg.breakCodeOrder(seqStart,seqEnd);
  OPT_BasicBlock seqLast=seqStart;
  OPT_BasicBlock firstHeaderCopy=null;
  OPT_BasicBlock currentBlock=seqLast;
  for (int i=1; i <= unrollFactor; ++i) {
    for (    OPT_BasicBlock bb : body) {
      seqLast=copyAndLinkBlock(ir,seqLast,bb);
      if (bb == t.header) {
        if (firstHeaderCopy == null) {
          firstHeaderCopy=seqLast;
        }
      }
    }
    currentBlock=seqLast;
    for (int j=0; j < bodyBlocks; ++j) {
      currentBlock.recomputeNormalOut(ir);
      OPT_BasicBlockEnumeration be=currentBlock.getOut();
      while (be.hasMoreElements()) {
        OPT_BasicBlock out=be.next();
        if (out != t.header && OPT_CFGTransformations.inLoop(out,nloop)) {
          OPT_BasicBlock outCopy=(OPT_BasicBlock)out.scratchObject;
          currentBlock.redirectOuts(out,outCopy,ir);
        }
      }
      currentBlock.recomputeNormalOut(ir);
      currentBlock=currentBlock.prevBasicBlockInCodeOrder();
    }
    if (i != 1) {
      for (int j=0; j < bodyBlocks; ++j) {
        OPT_BasicBlockEnumeration be=currentBlock.getOut();
        while (be.hasMoreElements()) {
          OPT_BasicBlock out=be.next();
          if (out == t.header) {
            OPT_BasicBlock headerCopy;
            headerCopy=(OPT_BasicBlock)t.header.scratchObject;
            currentBlock.redirectOuts(t.header,headerCopy,ir);
          }
        }
        currentBlock.recomputeNormalOut(ir);
        currentBlock=currentBlock.prevBasicBlockInCodeOrder();
      }
    }
  }
  if (seqEnd != null)   ir.cfg.linkInCodeOrder(seqLast,seqEnd);
  for (int j=0; j < bodyBlocks; ++j) {
    OPT_BasicBlockEnumeration be=body[j].getOut();
    while (be.hasMoreElements()) {
      OPT_BasicBlock out=be.next();
      if (out == t.header) {
        body[j].redirectOuts(t.header,firstHeaderCopy,ir);
      }
    }
    body[j].recomputeNormalOut(ir);
  }
  currentBlock=seqLast;
  for (int j=0; j < bodyBlocks; ++j) {
    OPT_BasicBlockEnumeration be=currentBlock.getOut();
    while (be.hasMoreElements()) {
      OPT_BasicBlock out=be.next();
      if (out == t.header) {
        currentBlock.redirectOuts(t.header,firstHeaderCopy,ir);
      }
    }
    currentBlock.recomputeNormalOut(ir);
    currentBlock=currentBlock.prevBasicBlockInCodeOrder();
  }
}",0.9987538940809968
149935,"/** 
 * Find the VM_Field that this field reference refers to using the search order specified in JVM spec 5.4.3.2.
 * @return the VM_Field that this method ref resolved to.
 */
public final VM_Field resolve(){
  if (resolvedMember != null)   return resolvedMember;
  return resolveInternal((VM_Class)type.resolve());
}","/** 
 * Find the VM_Field that this field reference refers to using the search order specified in JVM spec 5.4.3.2.
 * @return the VM_Field that this method ref resolved to.
 */
public final synchronized VM_Field resolve(){
  if (resolvedMember != null)   return resolvedMember;
  return resolveInternal((VM_Class)type.resolve());
}",0.980030721966206
149936,"/** 
 * Find the VM_Method that this field reference refers to using the search order specified in JVM spec 5.4.3.3.
 * @return the VM_Method that this method ref resolved to.
 */
public final VM_Method resolve(){
  if (resolvedMember != null)   return resolvedMember;
  return resolveInternal((VM_Class)type.resolve());
}","/** 
 * Find the VM_Method that this field reference refers to using the search order specified in JVM spec 5.4.3.3.
 * @return the VM_Method that this method ref resolved to.
 */
public final synchronized VM_Method resolve(){
  if (resolvedMember != null)   return resolvedMember;
  return resolveInternal((VM_Class)type.resolve());
}",0.9802130898021308
149937,"/** 
 * Resolve the method reference for an invoke special into a target method, return null if the method cannot be resolved without classloading.
 */
public final VM_Method resolveInvokeSpecial(){
  VM_Class thisClass=(VM_Class)type.peekResolvedType();
  if (thisClass == null && name != VM_ClassLoader.StandardObjectInitializerMethodName) {
    thisClass=(VM_Class)type.resolve();
  }
  if (thisClass == null)   return null;
  VM_Method sought=resolveInternal(thisClass);
  if (sought.isObjectInitializer())   return sought;
  VM_Class cls=sought.getDeclaringClass();
  if (!cls.isSpecial())   return sought;
  for (; cls != null; cls=cls.getSuperClass()) {
    VM_Method found=cls.findDeclaredMethod(sought.getName(),sought.getDescriptor());
    if (found != null)     return found;
  }
  return null;
}","/** 
 * Resolve the method reference for an invoke special into a target method, return null if the method cannot be resolved without classloading.
 */
public final synchronized VM_Method resolveInvokeSpecial(){
  VM_Class thisClass=(VM_Class)type.peekResolvedType();
  if (thisClass == null && name != VM_ClassLoader.StandardObjectInitializerMethodName) {
    thisClass=(VM_Class)type.resolve();
  }
  if (thisClass == null)   return null;
  VM_Method sought=resolveInternal(thisClass);
  if (sought.isObjectInitializer())   return sought;
  VM_Class cls=sought.getDeclaringClass();
  if (!cls.isSpecial())   return sought;
  for (; cls != null; cls=cls.getSuperClass()) {
    VM_Method found=cls.findDeclaredMethod(sought.getName(),sought.getDescriptor());
    if (found != null)     return found;
  }
  return null;
}",0.9920098340503996
149938,"/** 
 * Perform the compacting phase of the collection.
 */
public void compact(){
  if (initialRegion.isZero())   return;
  Address start=initialRegion;
  Address allocStart=initialRegion;
  Address allocEnd=initialRegion.plus(REGION_LIMIT_OFFSET).loadAddress();
  Address allocCursor=allocStart.plus(DATA_START_OFFSET);
  int oldPages=0;
  int newPages=0;
  while (!start.isZero()) {
    Address end=start.plus(REGION_LIMIT_OFFSET).loadAddress();
    Address dataEnd=start.plus(DATA_END_OFFSET).loadAddress();
    Address nextRegion=start.plus(NEXT_REGION_OFFSET).loadAddress();
    oldPages+=Conversions.bytesToPages(end.diff(start).plus(BYTES_IN_ADDRESS));
    Address currentLimit=(dataEnd.isZero() ? cursor : dataEnd);
    ObjectReference current=VM.objectModel.getObjectFromStartAddress(start.plus(DATA_START_OFFSET));
    while (VM.objectModel.refToAddress(current).LT(currentLimit) && !current.isNull()) {
      ObjectReference next=VM.objectModel.getNextObject(current);
      ObjectReference copyTo=MarkCompactSpace.getForwardingPointer(current);
      if (!copyTo.isNull() && Space.isInSpace(MC.MARK_COMPACT,copyTo)) {
        if (VM.VERIFY_ASSERTIONS)         VM.assertions._assert(!MarkCompactSpace.isMarked(current));
        if (copyTo.toAddress().GT(allocEnd) || copyTo.toAddress().LT(allocStart)) {
          VM.memory.zero(allocCursor,allocEnd.diff(allocCursor).toWord().toExtent().plus(BYTES_IN_ADDRESS));
          allocStart.store(allocCursor,DATA_END_OFFSET);
          allocStart=allocStart.plus(NEXT_REGION_OFFSET).loadAddress();
          allocEnd=allocStart.plus(REGION_LIMIT_OFFSET).loadAddress();
          allocCursor=allocStart.plus(DATA_START_OFFSET);
          newPages+=Conversions.bytesToPages(allocEnd.diff(allocStart).plus(BYTES_IN_ADDRESS));
          if (VM.VERIFY_ASSERTIONS) {
            VM.assertions._assert(allocCursor.LT(allocEnd) && allocCursor.GE(allocStart));
          }
        }
        int copySize=VM.objectModel.getSizeWhenCopied(current);
        Address newAllocCursor=VM.objectModel.copyTo(current,copyTo,allocCursor);
        Address objectStart=newAllocCursor.minus(copySize);
        fillAlignmentGap(allocCursor,objectStart);
        allocCursor=newAllocCursor;
        MarkCompactSpace.setForwardingPointer(copyTo,ObjectReference.nullReference());
      }
      current=next;
    }
    if (dataEnd.isZero()) {
      break;
    }
    start=nextRegion;
  }
  Extent zeroBytes=allocEnd.diff(allocCursor).toWord().toExtent().plus(BYTES_IN_ADDRESS);
  VM.memory.zero(allocCursor,zeroBytes);
  allocStart.store(Address.zero(),DATA_END_OFFSET);
  region=allocStart;
  cursor=allocCursor;
  updateLimit(allocEnd,region,0);
  if (oldPages > newPages) {
    ((MarkCompactSpace)space).unusePages((oldPages - newPages));
  }
  allocStart=allocStart.loadAddress(NEXT_REGION_OFFSET);
  while (!allocStart.isZero()) {
    allocStart.store(Address.zero(),DATA_END_OFFSET);
    if (VM.VERIFY_ASSERTIONS) {
      Address low=allocStart.plus(DATA_START_OFFSET);
      Extent size=allocStart.loadAddress(REGION_LIMIT_OFFSET).diff(allocStart).toWord().toExtent().minus(2 * BYTES_IN_ADDRESS);
      VM.memory.zero(low,size);
    }
    allocStart=allocStart.loadAddress(NEXT_REGION_OFFSET);
  }
}","/** 
 * Perform the compacting phase of the collection.
 */
public void compact(){
  if (initialRegion.isZero())   return;
  Address start=initialRegion;
  Address allocStart=initialRegion;
  Address allocEnd=initialRegion.plus(REGION_LIMIT_OFFSET).loadAddress();
  Address allocCursor=allocStart.plus(DATA_START_OFFSET);
  int oldPages=0;
  int newPages=0;
  while (!start.isZero()) {
    Address end=start.plus(REGION_LIMIT_OFFSET).loadAddress();
    Address dataEnd=start.plus(DATA_END_OFFSET).loadAddress();
    Address nextRegion=start.plus(NEXT_REGION_OFFSET).loadAddress();
    oldPages+=Conversions.bytesToPages(end.diff(start).plus(BYTES_IN_ADDRESS));
    Address currentLimit=(dataEnd.isZero() ? cursor : dataEnd);
    ObjectReference current=VM.objectModel.getObjectFromStartAddress(start.plus(DATA_START_OFFSET));
    while (VM.objectModel.refToAddress(current).LT(currentLimit) && !current.isNull()) {
      ObjectReference next=VM.objectModel.getNextObject(current);
      ObjectReference copyTo=MarkCompactSpace.getForwardingPointer(current);
      if (!copyTo.isNull() && Space.isInSpace(MC.MARK_COMPACT,copyTo)) {
        if (VM.VERIFY_ASSERTIONS)         VM.assertions._assert(!MarkCompactSpace.isMarked(current));
        if (copyTo.toAddress().GT(allocEnd) || copyTo.toAddress().LT(allocStart)) {
          VM.memory.zero(allocCursor,allocEnd.diff(allocCursor).toWord().toExtent().plus(BYTES_IN_ADDRESS));
          allocStart.store(allocCursor,DATA_END_OFFSET);
          allocStart=allocStart.plus(NEXT_REGION_OFFSET).loadAddress();
          allocEnd=allocStart.plus(REGION_LIMIT_OFFSET).loadAddress();
          allocCursor=allocStart.plus(DATA_START_OFFSET);
          newPages+=Conversions.bytesToPages(allocEnd.diff(allocStart).plus(BYTES_IN_ADDRESS));
          if (VM.VERIFY_ASSERTIONS) {
            VM.assertions._assert(allocCursor.LT(allocEnd) && allocCursor.GE(allocStart));
          }
        }
        allocCursor=VM.objectModel.copyTo(current,copyTo,allocCursor);
        MarkCompactSpace.setForwardingPointer(copyTo,ObjectReference.nullReference());
      }
      current=next;
    }
    if (dataEnd.isZero()) {
      break;
    }
    start=nextRegion;
  }
  Extent zeroBytes=allocEnd.diff(allocCursor).toWord().toExtent().plus(BYTES_IN_ADDRESS);
  VM.memory.zero(allocCursor,zeroBytes);
  allocStart.store(Address.zero(),DATA_END_OFFSET);
  region=allocStart;
  cursor=allocCursor;
  updateLimit(allocEnd,region,0);
  if (oldPages > newPages) {
    ((MarkCompactSpace)space).unusePages((oldPages - newPages));
  }
  allocStart=allocStart.loadAddress(NEXT_REGION_OFFSET);
  while (!allocStart.isZero()) {
    allocStart.store(Address.zero(),DATA_END_OFFSET);
    if (VM.VERIFY_ASSERTIONS) {
      Address low=allocStart.plus(DATA_START_OFFSET);
      Extent size=allocStart.loadAddress(REGION_LIMIT_OFFSET).diff(allocStart).toWord().toExtent().minus(2 * BYTES_IN_ADDRESS);
      VM.memory.zero(low,size);
    }
    allocStart=allocStart.loadAddress(NEXT_REGION_OFFSET);
  }
}",0.9504
149939,"/** 
 * What is the first word after the array?
 */
public static Address getObjectEndAddress(Object obj,VM_Array type,int numElements){
  int size=type.getInstanceSize(numElements);
  if (ADDRESS_BASED_HASHING) {
    Word hashState=VM_Magic.getWordAtOffset(obj,STATUS_OFFSET).and(HASH_STATE_MASK);
    if (hashState.NE(HASH_STATE_UNHASHED)) {
      size+=HASHCODE_BYTES;
    }
  }
  return VM_Magic.objectAsAddress(obj).plus(VM_Memory.alignUp(size,BYTES_IN_INT) - OBJECT_REF_OFFSET);
}","/** 
 * What is the first word after the array?
 */
public static Address getObjectEndAddress(Object obj,VM_Array type,int numElements){
  int size=type.getInstanceSize(numElements);
  if (ADDRESS_BASED_HASHING && DYNAMIC_HASH_OFFSET) {
    Word hashState=VM_Magic.getWordAtOffset(obj,STATUS_OFFSET).and(HASH_STATE_MASK);
    if (hashState.EQ(HASH_STATE_HASHED_AND_MOVED)) {
      size+=HASHCODE_BYTES;
    }
  }
  return VM_Magic.objectAsAddress(obj).plus(VM_Memory.alignUp(size,BYTES_IN_INT) - OBJECT_REF_OFFSET);
}",0.9312063808574276
149940,"@Inline protected static Object getReferenceWhenCopiedTo(Object obj,Address to){
  if (ADDRESS_BASED_HASHING) {
    Word statusWord=VM_Magic.getWordAtOffset(obj,STATUS_OFFSET);
    Word hashState=statusWord.and(HASH_STATE_MASK);
    if (hashState.EQ(HASH_STATE_HASHED) && !DYNAMIC_HASH_OFFSET) {
      to=to.plus(HASHCODE_BYTES);
    }
  }
  return VM_Magic.addressAsObject(to.plus(OBJECT_REF_OFFSET));
}","@Inline protected static Object getReferenceWhenCopiedTo(Object obj,Address to){
  if (ADDRESS_BASED_HASHING && !DYNAMIC_HASH_OFFSET) {
    Word statusWord=VM_Magic.getWordAtOffset(obj,STATUS_OFFSET);
    Word hashState=statusWord.and(HASH_STATE_MASK);
    if (hashState.EQ(HASH_STATE_HASHED)) {
      to=to.plus(HASHCODE_BYTES);
    }
  }
  return VM_Magic.addressAsObject(to.plus(OBJECT_REF_OFFSET));
}",0.9405940594059404
149941,"/** 
 * Make an empty basic block on an edge in the control flow graph, and fix up the control flow graph and IR instructions accordingly. This routine will create the control struture <pre> in -> bb -> out. </pre> <em> Precondition </em>: There is an edge in the control flow graph  from * in -> out.
 * @param in the source of the control flow edge
 * @param out the sink of the control flow edge
 * @param ir the governing IR
 * @return the new basic block bb
 */
public static OPT_BasicBlock makeBlockOnEdge(OPT_BasicBlock in,OPT_BasicBlock out,OPT_IR ir){
  OPT_BasicBlock bb=in.createSubBlock(out.firstInstruction().bcIndex,ir);
  OPT_BasicBlock next=in.nextBasicBlockInCodeOrder();
  if (next == null) {
    ir.cfg.addLastInCodeOrder(bb);
  }
 else {
    ir.cfg.breakCodeOrder(in,next);
    ir.cfg.linkInCodeOrder(in,bb);
    ir.cfg.linkInCodeOrder(bb,next);
  }
  boolean foundGoto=false;
  OPT_BranchOperand target=bb.makeJumpTarget();
  OPT_BranchOperand outTarget=out.makeJumpTarget();
  for (OPT_InstructionEnumeration e=in.reverseRealInstrEnumerator(); e.hasMoreElements(); ) {
    OPT_Instruction s=e.next();
    if (IfCmp2.conforms(s)) {
      if (IfCmp2.getTarget1(s).similar(outTarget))       IfCmp2.setTarget1(s,(OPT_BranchOperand)target.copy());
      if (IfCmp2.getTarget2(s).similar(outTarget))       IfCmp2.setTarget2(s,(OPT_BranchOperand)target.copy());
    }
 else     if (IfCmp.conforms(s)) {
      if (IfCmp.getTarget(s).similar(outTarget)) {
        IfCmp.setTarget(s,(OPT_BranchOperand)target.copy());
      }
    }
 else     if (InlineGuard.conforms(s)) {
      if (InlineGuard.getTarget(s).similar(outTarget))       InlineGuard.setTarget(s,(OPT_BranchOperand)target.copy());
    }
 else     if (Goto.conforms(s)) {
      foundGoto=true;
      if (Goto.getTarget(s).similar(outTarget))       Goto.setTarget(s,(OPT_BranchOperand)target.copy());
    }
 else     if (TableSwitch.conforms(s)) {
      foundGoto=true;
      if (TableSwitch.getDefault(s).similar(outTarget))       TableSwitch.setDefault(s,(OPT_BranchOperand)target.copy());
      for (int i=0; i < TableSwitch.getNumberOfTargets(s); i++)       if (TableSwitch.getTarget(s,i).similar(outTarget))       TableSwitch.setTarget(s,i,(OPT_BranchOperand)target.copy());
    }
 else     if (LowTableSwitch.conforms(s)) {
      foundGoto=true;
      for (int i=0; i < LowTableSwitch.getNumberOfTargets(s); i++)       if (LowTableSwitch.getTarget(s,i).similar(outTarget))       LowTableSwitch.setTarget(s,i,(OPT_BranchOperand)target.copy());
    }
 else     if (LookupSwitch.conforms(s)) {
      foundGoto=true;
      if (LookupSwitch.getDefault(s).similar(outTarget))       LookupSwitch.setDefault(s,(OPT_BranchOperand)target.copy());
      for (int i=0; i < LookupSwitch.getNumberOfTargets(s); i++)       if (LookupSwitch.getTarget(s,i).similar(outTarget))       LookupSwitch.setTarget(s,i,(OPT_BranchOperand)target.copy());
    }
 else {
      break;
    }
  }
  OPT_Instruction s=Goto.create(GOTO,out.makeJumpTarget());
  bb.appendInstruction(s);
  if (out != next) {
    if (!foundGoto) {
      s=Goto.create(GOTO,next.makeJumpTarget());
      in.appendInstruction(s);
    }
  }
  in.recomputeNormalOut(ir);
  bb.recomputeNormalOut(ir);
  return bb;
}","/** 
 * Make an empty basic block on an edge in the control flow graph, and fix up the control flow graph and IR instructions accordingly. This routine will create the control struture <pre> in -> bb -> out. </pre> <em> Precondition </em>: There is an edge in the control flow graph  from * in -> out.
 * @param in the source of the control flow edge
 * @param out the sink of the control flow edge
 * @param ir the governing IR
 * @return the new basic block bb
 */
public static OPT_BasicBlock makeBlockOnEdge(OPT_BasicBlock in,OPT_BasicBlock out,OPT_IR ir){
  OPT_BasicBlock bb=in.createSubBlock(out.firstInstruction().bcIndex,ir);
  OPT_BasicBlock next=in.nextBasicBlockInCodeOrder();
  if (next == null) {
    ir.cfg.addLastInCodeOrder(bb);
  }
 else {
    ir.cfg.breakCodeOrder(in,next);
    ir.cfg.linkInCodeOrder(in,bb);
    ir.cfg.linkInCodeOrder(bb,next);
  }
  boolean foundGoto=false;
  OPT_BranchOperand target=bb.makeJumpTarget();
  OPT_BranchOperand outTarget=out.makeJumpTarget();
  for (OPT_InstructionEnumeration e=in.reverseRealInstrEnumerator(); e.hasMoreElements(); ) {
    OPT_Instruction s=e.next();
    if (IfCmp2.conforms(s)) {
      if (IfCmp2.getTarget1(s).similar(outTarget))       IfCmp2.setTarget1(s,(OPT_BranchOperand)target.copy());
      if (IfCmp2.getTarget2(s).similar(outTarget))       IfCmp2.setTarget2(s,(OPT_BranchOperand)target.copy());
    }
 else     if (IfCmp.conforms(s)) {
      if (IfCmp.getTarget(s).similar(outTarget)) {
        IfCmp.setTarget(s,(OPT_BranchOperand)target.copy());
      }
    }
 else     if (InlineGuard.conforms(s)) {
      if (InlineGuard.getTarget(s).similar(outTarget))       InlineGuard.setTarget(s,(OPT_BranchOperand)target.copy());
    }
 else     if (Goto.conforms(s)) {
      foundGoto=true;
      if (Goto.getTarget(s).similar(outTarget))       Goto.setTarget(s,(OPT_BranchOperand)target.copy());
    }
 else     if (TableSwitch.conforms(s)) {
      foundGoto=true;
      if (TableSwitch.getDefault(s).similar(outTarget))       TableSwitch.setDefault(s,(OPT_BranchOperand)target.copy());
      for (int i=0; i < TableSwitch.getNumberOfTargets(s); i++)       if (TableSwitch.getTarget(s,i).similar(outTarget))       TableSwitch.setTarget(s,i,(OPT_BranchOperand)target.copy());
    }
 else     if (LowTableSwitch.conforms(s)) {
      foundGoto=true;
      for (int i=0; i < LowTableSwitch.getNumberOfTargets(s); i++)       if (LowTableSwitch.getTarget(s,i).similar(outTarget))       LowTableSwitch.setTarget(s,i,(OPT_BranchOperand)target.copy());
    }
 else     if (LookupSwitch.conforms(s)) {
      foundGoto=true;
      if (LookupSwitch.getDefault(s).similar(outTarget))       LookupSwitch.setDefault(s,(OPT_BranchOperand)target.copy());
      for (int i=0; i < LookupSwitch.getNumberOfTargets(s); i++)       if (LookupSwitch.getTarget(s,i).similar(outTarget))       LookupSwitch.setTarget(s,i,(OPT_BranchOperand)target.copy());
    }
 else {
      break;
    }
  }
  OPT_Instruction s=Goto.create(GOTO,out.makeJumpTarget());
  bb.appendInstruction(s);
  if (out != next) {
    if (!foundGoto) {
      OPT_BasicBlock jumpTarget=next;
      while (jumpTarget.isEmpty() && jumpTarget.isExceptionHandlerBasicBlock()) {
        jumpTarget=jumpTarget.nextBasicBlockInCodeOrder();
      }
      s=Goto.create(GOTO,jumpTarget.makeJumpTarget());
      in.appendInstruction(s);
    }
  }
  in.recomputeNormalOut(ir);
  bb.recomputeNormalOut(ir);
  return bb;
}",0.970133573465406
149942,"/** 
 * Meet two operands based on their positions in the operand lattice. For the purposes of doing dataflow analysis, OPT_Operands can be  thought of as forming a lattice. This function takes two operands and returns their meet (glb). We use <code>null</code> to stand for bottom (the meet of  the two operands is an illegal value).  For exmaple, meet(5.0, ""hi"") would evalaute to bottom. Meet returns op1 iff conservativelyApproximates(op1, op2): this is exploited in BC2IR to avoid doing redundant work.   <p> Unfortunately there is a fair amount of code duplication between   {@link #conservativelyApproximates} and {@link #meet}, but factoring out the common control logic is a non-trivial task. 
 * @param op1  the first operand to meet
 * @param op2  the second operand to meet
 * @param reg  the <code>OPT_Register</code> to use to create a new <code>OPT_RegisterOperand</code> if meeting op1 and op2 requires doing so.
 * @return the OPT_Operand that is the meet of op1 and op2.This function will return <code>null</code> when the meet evaluates to bottom.  It will return op1 when conservativelyApproximates(op1, op2) evaluates to <code>true</code>.
 * @author Dave Grove
 */
public static OPT_Operand meet(OPT_Operand op1,OPT_Operand op2,OPT_Register reg){
  if (op1 == op2) {
    if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
      if (op1 == null) {
        VM.sysWrite(""String_Node_Str"");
      }
 else {
        VM.sysWrite(""String_Node_Str"");
      }
    }
    return op1;
  }
  if (op1 == null) {
    if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
      VM.sysWrite(""String_Node_Str"");
    }
    return op1;
  }
  if (op2 == null) {
    if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
      VM.sysWrite(""String_Node_Str"");
    }
    return op2;
  }
  if (op1 instanceof OPT_NullConstantOperand) {
    if (op2 instanceof OPT_NullConstantOperand) {
      if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
        VM.sysWrite(""String_Node_Str"");
      }
      return op1;
    }
 else {
      VM_TypeReference type2=op2.getType();
      if (type2.isReferenceType()) {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"");
        }
        return new OPT_RegisterOperand(reg,type2);
      }
 else {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"");
        }
        return null;
      }
    }
  }
  if (op1.isConstant()) {
    if (op1.similar(op2)) {
      if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
        VM.sysWrite(""String_Node_Str"");
      }
      return op1;
    }
 else {
      VM_TypeReference superType=OPT_ClassLoaderProxy.findCommonSuperclass(op1.getType(),op2.getType());
      if (superType == null) {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"");
        }
        return null;
      }
 else {
        return new OPT_RegisterOperand(reg,superType);
      }
    }
  }
  if (op1.isRegister()) {
    OPT_RegisterOperand rop1=op1.asRegister();
    VM_TypeReference type1=rop1.type;
    if (op2.isRegister()) {
      OPT_RegisterOperand rop2=op2.asRegister();
      VM_TypeReference type2=rop2.type;
      if (type1 == type2) {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"");
        }
        if (rop1.hasLessConservativeFlags(rop2)) {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          OPT_RegisterOperand res=new OPT_RegisterOperand(reg,type1,rop1.getFlags());
          if (rop1.scratchObject instanceof OPT_Operand && rop2.scratchObject instanceof OPT_Operand && (((OPT_Operand)rop1.scratchObject).similar(((OPT_Operand)rop2.scratchObject)))) {
            res.scratchObject=rop1.scratchObject;
          }
          res.meetInheritableFlags(rop2);
          return res;
        }
 else         if (OPT_BC2IR.hasLessConservativeGuard(rop1,rop2)) {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          return new OPT_RegisterOperand(reg,type1,rop1.getFlags());
        }
 else {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          return op1;
        }
      }
 else       if (compatiblePrimitives(type1,type2) || OPT_ClassLoaderProxy.includesType(type1,type2) == OPT_Constants.YES) {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"");
        }
        if (rop1.isPreciseType() || rop1.hasLessConservativeFlags(rop2)) {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          OPT_RegisterOperand res=new OPT_RegisterOperand(reg,type1,rop1.getFlags());
          res.meetInheritableFlags(rop2);
          res.clearPreciseType();
          if (rop1.scratchObject instanceof OPT_Operand && rop2.scratchObject instanceof OPT_Operand && (((OPT_Operand)rop1.scratchObject).similar(((OPT_Operand)rop2.scratchObject)))) {
            res.scratchObject=rop1.scratchObject;
          }
          return res;
        }
 else         if (OPT_BC2IR.hasLessConservativeGuard(rop1,rop2)) {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          return new OPT_RegisterOperand(reg,type1,rop1.getFlags());
        }
 else {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          return op1;
        }
      }
 else {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"" + type1 + ""String_Node_Str""+ type2+ ""String_Node_Str"");
        }
        VM_TypeReference resType=OPT_ClassLoaderProxy.findCommonSuperclass(type1,type2);
        if (resType == null) {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          return null;
        }
 else {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          OPT_RegisterOperand res=new OPT_RegisterOperand(reg,resType,rop1.getFlags());
          res.meetInheritableFlags(rop2);
          res.clearPreciseType();
          res.clearDeclaredType();
          if (rop1.scratchObject instanceof OPT_Operand && rop2.scratchObject instanceof OPT_Operand && (((OPT_Operand)rop1.scratchObject).similar(((OPT_Operand)rop2.scratchObject)))) {
            res.scratchObject=rop1.scratchObject;
          }
          return res;
        }
      }
    }
 else {
      if (op2 instanceof OPT_BC2IR.ReturnAddressOperand || op2 == OPT_BC2IR.DUMMY) {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"");
        }
        return null;
      }
      VM_TypeReference type2=op2.getType();
      if (type1 == type2 || compatiblePrimitives(type1,type2) || (OPT_ClassLoaderProxy.includesType(type1,type2) == OPT_Constants.YES)) {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"");
        }
        OPT_RegisterOperand res=rop1;
        if (res.isPreciseType() && type1 != type2) {
          res=res.copyU2U();
          res.clearPreciseType();
        }
        if ((rop1.scratchObject instanceof OPT_Operand) && ((type2 == VM_TypeReference.NULL_TYPE) || (type2.isIntLikeType() && op2.asIntConstant().value == 0) || (type2.isWordType() && op2.asAddressConstant().value.isZero())|| (type2.isLongType() && op2.asLongConstant().value == 0L))) {
          res=res.copyU2U();
          res.scratchObject=null;
        }
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          if (res == rop1) {
            VM.sysWrite(""String_Node_Str"");
          }
 else {
            VM.sysWrite(""String_Node_Str"");
          }
        }
        return res;
      }
 else {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"" + type1 + ""String_Node_Str""+ type2+ ""String_Node_Str"");
        }
        VM_TypeReference resType=OPT_ClassLoaderProxy.findCommonSuperclass(type1,type2);
        if (resType == null) {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          return null;
        }
 else {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          return new OPT_RegisterOperand(reg,resType);
        }
      }
    }
  }
  if (op1.similar(op2)) {
    if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
      VM.sysWrite(""String_Node_Str"");
    }
    return op1;
  }
 else {
    if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
      VM.sysWrite(""String_Node_Str"");
    }
    return null;
  }
}","/** 
 * Meet two operands based on their positions in the operand lattice. For the purposes of doing dataflow analysis, OPT_Operands can be  thought of as forming a lattice. This function takes two operands and returns their meet (glb). We use <code>null</code> to stand for bottom (the meet of  the two operands is an illegal value).  For exmaple, meet(5.0, ""hi"") would evalaute to bottom. Meet returns op1 iff conservativelyApproximates(op1, op2): this is exploited in BC2IR to avoid doing redundant work.   <p> Unfortunately there is a fair amount of code duplication between   {@link #conservativelyApproximates} and {@link #meet}, but factoring out the common control logic is a non-trivial task. 
 * @param op1  the first operand to meet
 * @param op2  the second operand to meet
 * @param reg  the <code>OPT_Register</code> to use to create a new <code>OPT_RegisterOperand</code> if meeting op1 and op2 requires doing so.
 * @return the OPT_Operand that is the meet of op1 and op2.This function will return <code>null</code> when the meet evaluates to bottom.  It will return op1 when conservativelyApproximates(op1, op2) evaluates to <code>true</code>.
 * @author Dave Grove
 */
public static OPT_Operand meet(OPT_Operand op1,OPT_Operand op2,OPT_Register reg){
  if (op1 == op2) {
    if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
      if (op1 == null) {
        VM.sysWrite(""String_Node_Str"");
      }
 else {
        VM.sysWrite(""String_Node_Str"");
      }
    }
    return op1;
  }
  if (op1 == null) {
    if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
      VM.sysWrite(""String_Node_Str"");
    }
    return op1;
  }
  if (op2 == null) {
    if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
      VM.sysWrite(""String_Node_Str"");
    }
    return op2;
  }
  if (op1 instanceof OPT_NullConstantOperand) {
    if (op2 instanceof OPT_NullConstantOperand) {
      if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
        VM.sysWrite(""String_Node_Str"");
      }
      return op1;
    }
 else {
      if (op2 instanceof OPT_BC2IR.ReturnAddressOperand || op2 == OPT_BC2IR.DUMMY) {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"");
        }
        return null;
      }
      VM_TypeReference type2=op2.getType();
      if (type2.isReferenceType()) {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"");
        }
        return new OPT_RegisterOperand(reg,type2);
      }
 else {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"");
        }
        return null;
      }
    }
  }
  if (op1.isConstant()) {
    if (op1.similar(op2)) {
      if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
        VM.sysWrite(""String_Node_Str"");
      }
      return op1;
    }
 else {
      VM_TypeReference superType=OPT_ClassLoaderProxy.findCommonSuperclass(op1.getType(),op2.getType());
      if (superType == null) {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"");
        }
        return null;
      }
 else {
        return new OPT_RegisterOperand(reg,superType);
      }
    }
  }
  if (op1.isRegister()) {
    OPT_RegisterOperand rop1=op1.asRegister();
    VM_TypeReference type1=rop1.type;
    if (op2.isRegister()) {
      OPT_RegisterOperand rop2=op2.asRegister();
      VM_TypeReference type2=rop2.type;
      if (type1 == type2) {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"");
        }
        if (rop1.hasLessConservativeFlags(rop2)) {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          OPT_RegisterOperand res=new OPT_RegisterOperand(reg,type1,rop1.getFlags());
          if (rop1.scratchObject instanceof OPT_Operand && rop2.scratchObject instanceof OPT_Operand && (((OPT_Operand)rop1.scratchObject).similar(((OPT_Operand)rop2.scratchObject)))) {
            res.scratchObject=rop1.scratchObject;
          }
          res.meetInheritableFlags(rop2);
          return res;
        }
 else         if (OPT_BC2IR.hasLessConservativeGuard(rop1,rop2)) {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          return new OPT_RegisterOperand(reg,type1,rop1.getFlags());
        }
 else {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          return op1;
        }
      }
 else       if (compatiblePrimitives(type1,type2) || OPT_ClassLoaderProxy.includesType(type1,type2) == OPT_Constants.YES) {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"");
        }
        if (rop1.isPreciseType() || rop1.hasLessConservativeFlags(rop2)) {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          OPT_RegisterOperand res=new OPT_RegisterOperand(reg,type1,rop1.getFlags());
          res.meetInheritableFlags(rop2);
          res.clearPreciseType();
          if (rop1.scratchObject instanceof OPT_Operand && rop2.scratchObject instanceof OPT_Operand && (((OPT_Operand)rop1.scratchObject).similar(((OPT_Operand)rop2.scratchObject)))) {
            res.scratchObject=rop1.scratchObject;
          }
          return res;
        }
 else         if (OPT_BC2IR.hasLessConservativeGuard(rop1,rop2)) {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          return new OPT_RegisterOperand(reg,type1,rop1.getFlags());
        }
 else {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          return op1;
        }
      }
 else {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"" + type1 + ""String_Node_Str""+ type2+ ""String_Node_Str"");
        }
        VM_TypeReference resType=OPT_ClassLoaderProxy.findCommonSuperclass(type1,type2);
        if (resType == null) {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          return null;
        }
 else {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          OPT_RegisterOperand res=new OPT_RegisterOperand(reg,resType,rop1.getFlags());
          res.meetInheritableFlags(rop2);
          res.clearPreciseType();
          res.clearDeclaredType();
          if (rop1.scratchObject instanceof OPT_Operand && rop2.scratchObject instanceof OPT_Operand && (((OPT_Operand)rop1.scratchObject).similar(((OPT_Operand)rop2.scratchObject)))) {
            res.scratchObject=rop1.scratchObject;
          }
          return res;
        }
      }
    }
 else {
      if (op2 instanceof OPT_BC2IR.ReturnAddressOperand || op2 == OPT_BC2IR.DUMMY) {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"");
        }
        return null;
      }
      VM_TypeReference type2=op2.getType();
      if (type1 == type2 || compatiblePrimitives(type1,type2) || (OPT_ClassLoaderProxy.includesType(type1,type2) == OPT_Constants.YES)) {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"");
        }
        OPT_RegisterOperand res=rop1;
        if (res.isPreciseType() && type1 != type2) {
          res=res.copyU2U();
          res.clearPreciseType();
        }
        if ((rop1.scratchObject instanceof OPT_Operand) && ((type2 == VM_TypeReference.NULL_TYPE) || (type2.isIntLikeType() && op2.asIntConstant().value == 0) || (type2.isWordType() && op2.asAddressConstant().value.isZero())|| (type2.isLongType() && op2.asLongConstant().value == 0L))) {
          res=res.copyU2U();
          res.scratchObject=null;
        }
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          if (res == rop1) {
            VM.sysWrite(""String_Node_Str"");
          }
 else {
            VM.sysWrite(""String_Node_Str"");
          }
        }
        return res;
      }
 else {
        if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
          VM.sysWrite(""String_Node_Str"" + type1 + ""String_Node_Str""+ type2+ ""String_Node_Str"");
        }
        VM_TypeReference resType=OPT_ClassLoaderProxy.findCommonSuperclass(type1,type2);
        if (resType == null) {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          return null;
        }
 else {
          if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
            VM.sysWrite(""String_Node_Str"");
          }
          return new OPT_RegisterOperand(reg,resType);
        }
      }
    }
  }
  if (op1.similar(op2)) {
    if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
      VM.sysWrite(""String_Node_Str"");
    }
    return op1;
  }
 else {
    if (OPT_IRGenOptions.DBG_OPERAND_LATTICE) {
      VM.sysWrite(""String_Node_Str"");
    }
    return null;
  }
}",0.4686722460981678
149943,"/** 
 * Force compilation of each of the methods and report on the size of the generated machine code.
 */
public static void main(String[] args) throws Exception {
  Class clazz=Class.forName(""String_Node_Str"");
  Method trivialJ=clazz.getDeclaredMethod(""String_Node_Str"",clazz);
  Method alloc1J=clazz.getDeclaredMethod(""String_Node_Str"",(Class[])null);
  Method alloc2J=clazz.getDeclaredMethod(""String_Node_Str"",(Class[])null);
  Method alloc3J=clazz.getDeclaredMethod(""String_Node_Str"",(Class[])null);
  Method alloc4J=clazz.getDeclaredMethod(""String_Node_Str"",Integer.TYPE);
  VM_Method trivial=java.lang.reflect.JikesRVMSupport.getMethodOf(trivialJ);
  VM_Method alloc1=java.lang.reflect.JikesRVMSupport.getMethodOf(alloc1J);
  VM_Method alloc2=java.lang.reflect.JikesRVMSupport.getMethodOf(alloc2J);
  VM_Method alloc3=java.lang.reflect.JikesRVMSupport.getMethodOf(alloc3J);
  VM_Method alloc4=java.lang.reflect.JikesRVMSupport.getMethodOf(alloc4J);
  trivial.compile();
  int trivialSize=trivial.getCurrentCompiledMethod().numberOfInstructions();
  alloc1.compile();
  int alloc1Size=alloc1.getCurrentCompiledMethod().numberOfInstructions();
  alloc2.compile();
  int alloc2Size=alloc2.getCurrentCompiledMethod().numberOfInstructions();
  alloc3.compile();
  int alloc3Size=alloc3.getCurrentCompiledMethod().numberOfInstructions();
  alloc4.compile();
  int alloc4Size=alloc4.getCurrentCompiledMethod().numberOfInstructions();
  alloc1Size-=trivialSize;
  alloc2Size-=trivialSize;
  alloc3Size-=trivialSize;
  alloc4Size-=trivialSize;
  System.out.println(""String_Node_Str"" + alloc1Size);
  System.out.println(""String_Node_Str"" + alloc2Size);
  System.out.println(""String_Node_Str"" + alloc3Size);
  System.out.println(""String_Node_Str"" + alloc4Size);
  boolean fail=false;
  if (alloc1Size > alloc1Limit) {
    System.out.println(""String_Node_Str"");
    fail=true;
  }
  if (alloc2Size > alloc2Limit) {
    System.out.println(""String_Node_Str"");
    fail=true;
  }
  if (alloc3Size > alloc3Limit) {
    System.out.println(""String_Node_Str"");
    fail=true;
  }
  if (alloc4Size > alloc4Limit) {
    System.out.println(""String_Node_Str"");
    fail=true;
  }
  if (!fail) {
    System.out.println(""String_Node_Str"");
  }
}","/** 
 * Force compilation of each of the methods and report on the size of the generated machine code.
 */
public static void main(String[] args) throws Exception {
  Class clazz=Class.forName(""String_Node_Str"");
  Method trivialJ=clazz.getDeclaredMethod(""String_Node_Str"",new Class[]{clazz});
  Method alloc1J=clazz.getDeclaredMethod(""String_Node_Str"",(Class[])null);
  Method alloc2J=clazz.getDeclaredMethod(""String_Node_Str"",(Class[])null);
  Method alloc3J=clazz.getDeclaredMethod(""String_Node_Str"",(Class[])null);
  Method alloc4J=clazz.getDeclaredMethod(""String_Node_Str"",new Class[]{Integer.TYPE});
  VM_Method trivial=java.lang.reflect.JikesRVMSupport.getMethodOf(trivialJ);
  VM_Method alloc1=java.lang.reflect.JikesRVMSupport.getMethodOf(alloc1J);
  VM_Method alloc2=java.lang.reflect.JikesRVMSupport.getMethodOf(alloc2J);
  VM_Method alloc3=java.lang.reflect.JikesRVMSupport.getMethodOf(alloc3J);
  VM_Method alloc4=java.lang.reflect.JikesRVMSupport.getMethodOf(alloc4J);
  trivial.compile();
  int trivialSize=trivial.getCurrentCompiledMethod().numberOfInstructions();
  alloc1.compile();
  int alloc1Size=alloc1.getCurrentCompiledMethod().numberOfInstructions();
  alloc2.compile();
  int alloc2Size=alloc2.getCurrentCompiledMethod().numberOfInstructions();
  alloc3.compile();
  int alloc3Size=alloc3.getCurrentCompiledMethod().numberOfInstructions();
  alloc4.compile();
  int alloc4Size=alloc4.getCurrentCompiledMethod().numberOfInstructions();
  alloc1Size-=trivialSize;
  alloc2Size-=trivialSize;
  alloc3Size-=trivialSize;
  alloc4Size-=trivialSize;
  System.out.println(""String_Node_Str"" + alloc1Size);
  System.out.println(""String_Node_Str"" + alloc2Size);
  System.out.println(""String_Node_Str"" + alloc3Size);
  System.out.println(""String_Node_Str"" + alloc4Size);
  boolean fail=false;
  if (alloc1Size > alloc1Limit) {
    System.out.println(""String_Node_Str"");
    fail=true;
  }
  if (alloc2Size > alloc2Limit) {
    System.out.println(""String_Node_Str"");
    fail=true;
  }
  if (alloc3Size > alloc3Limit) {
    System.out.println(""String_Node_Str"");
    fail=true;
  }
  if (alloc4Size > alloc4Limit) {
    System.out.println(""String_Node_Str"");
    fail=true;
  }
  if (!fail) {
    System.out.println(""String_Node_Str"");
  }
}",0.9919678714859438
149944,"private static void processOptionString(String[] args){
  for (int i=0, n=args.length; i < n; i++) {
    try {
      String arg=args[i];
      if (arg.startsWith(""String_Node_Str"") && options.processAsOption(""String_Node_Str"",arg.substring(4))) {
      }
 else       if (arg.equals(""String_Node_Str"")) {
        OPT_Compiler.setBootOptions(options);
      }
 else       if (arg.equals(""String_Node_Str"")) {
        i++;
        BufferedReader in=new BufferedReader(new FileReader(args[i]));
        StringBuffer s=new StringBuffer(""String_Node_Str"");
        while (in.ready()) {
          String line=in.readLine().trim();
          if (!line.startsWith(""String_Node_Str"")) {
            s.append(line);
            s.append(""String_Node_Str"");
          }
        }
        in.close();
        StringTokenizer t=new StringTokenizer(s.toString());
        String[] av=new String[t.countTokens()];
        for (int j=0; j < av.length; j++) {
          av[j]=t.nextToken();
        }
        processOptionString(av);
      }
 else       if (arg.equals(""String_Node_Str"")) {
        BASELINE=true;
      }
 else       if (arg.equals(""String_Node_Str"")) {
        BASELINE=false;
      }
 else       if (arg.equals(""String_Node_Str"")) {
        loadClass(args[++i]);
      }
 else       if (arg.equals(""String_Node_Str"")) {
        VM_Class klass=loadClass(args[++i]);
        processClass(klass,options);
        options=(OPT_Options)options.clone();
      }
 else       if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
        boolean isBaseline=BASELINE;
        if (arg.equals(""String_Node_Str""))         isBaseline=false;
        if (arg.equals(""String_Node_Str""))         isBaseline=true;
        VM_Class klass=null;
        try {
          klass=loadClass(args[++i]);
        }
 catch (        Exception e) {
          System.err.println(""String_Node_Str"" + args[i - 1]);
          klass=null;
        }
        if (klass == null)         continue;
        String name=args[++i];
        String desc=args[++i];
        VM_Method method=findDeclaredOrFirstMethod(klass,name,desc);
        if (method == null || method.isAbstract() || method.isNative()) {
          System.err.println(""String_Node_Str"" + args[i - 2] + ""String_Node_Str""+ name);
        }
 else {
          processMethod(method,options,isBaseline);
        }
        options=(OPT_Options)options.clone();
      }
 else       if (arg.equals(""String_Node_Str"")) {
        perf=new Performance();
      }
 else       if (arg.equals(""String_Node_Str"")) {
        DISABLE_CLASS_LOADING=true;
      }
 else       if (arg.equals(""String_Node_Str"")) {
        EXECUTE_WITH_REFLECTION=true;
        VM_Class klass=loadClass(args[++i]);
        String name=args[++i];
        String desc=args[++i];
        VM_NormalMethod method=(VM_NormalMethod)findDeclaredOrFirstMethod(klass,name,desc);
        VM_CompiledMethod cm=null;
        if (BASELINE)         cm=VM_Compiler.compile(method);
 else {
          OPT_CompilationPlan cp=new OPT_CompilationPlan(method,OPT_OptimizationPlanner.createOptimizationPlan(options),null,options);
          try {
            cm=OPT_Compiler.compile(cp);
          }
 catch (          Throwable e) {
            System.err.println(""String_Node_Str"" + method + ""String_Node_Str""+ e);
          }
        }
        if (cm != null)         method.replaceCompiledMethod(cm);
        VM_TypeReference[] argDesc=method.getDescriptor().parseForParameterTypes(klass.getClassLoader());
        Object[] reflectMethodArgs=new Object[argDesc.length];
        i=parseMethodArgs(argDesc,args,i,reflectMethodArgs);
        java.lang.reflect.Method reflectoid=java.lang.reflect.JikesRVMSupport.createMethod(method);
        reflectoidVector.addElement(reflectoid);
        reflectMethodVector.addElement(method);
        reflectMethodArgsVector.addElement(reflectMethodArgs);
        options=(OPT_Options)options.clone();
      }
 else {
        System.err.println(""String_Node_Str"" + arg + ""String_Node_Str"");
      }
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      System.err.println(""String_Node_Str"" + ""String_Node_Str"");
      printFormatString();
      e.printStackTrace(System.err);
      break;
    }
catch (    Exception e) {
      System.err.println(e);
      e.printStackTrace(System.err);
      break;
    }
  }
}","private static void processOptionString(String[] args){
  for (int i=0, n=args.length; i < n; i++) {
    try {
      String arg=args[i];
      if (arg.startsWith(""String_Node_Str"") && options.processAsOption(""String_Node_Str"",arg.substring(4))) {
      }
 else       if (arg.equals(""String_Node_Str"")) {
        OPT_Compiler.setBootOptions(options);
      }
 else       if (arg.equals(""String_Node_Str"")) {
        i++;
        BufferedReader in=new BufferedReader(new FileReader(args[i]));
        StringBuffer s=new StringBuffer(""String_Node_Str"");
        while (in.ready()) {
          String line=in.readLine().trim();
          if (!line.startsWith(""String_Node_Str"")) {
            s.append(line);
            s.append(""String_Node_Str"");
          }
        }
        in.close();
        StringTokenizer t=new StringTokenizer(s.toString());
        String[] av=new String[t.countTokens()];
        for (int j=0; j < av.length; j++) {
          av[j]=t.nextToken();
        }
        processOptionString(av);
      }
 else       if (arg.equals(""String_Node_Str"")) {
        BASELINE=true;
      }
 else       if (arg.equals(""String_Node_Str"")) {
        BASELINE=false;
      }
 else       if (arg.equals(""String_Node_Str"")) {
        loadClass(args[++i]);
      }
 else       if (arg.equals(""String_Node_Str"")) {
        VM_Class klass=loadClass(args[++i]);
        processClass(klass,options);
        options=(OPT_Options)options.clone();
      }
 else       if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
        boolean isBaseline=BASELINE;
        if (arg.equals(""String_Node_Str""))         isBaseline=false;
        if (arg.equals(""String_Node_Str""))         isBaseline=true;
        VM_Class klass=null;
        try {
          klass=loadClass(args[++i]);
        }
 catch (        Exception e) {
          System.err.println(""String_Node_Str"" + args[i - 1]);
          klass=null;
        }
        if (klass == null)         continue;
        String name=args[++i];
        String desc=args[++i];
        VM_Method method=findDeclaredOrFirstMethod(klass,name,desc);
        if (method == null || method.isAbstract() || method.isNative()) {
          System.err.println(""String_Node_Str"" + args[i - 2] + ""String_Node_Str""+ name);
        }
 else {
          processMethod(method,options,isBaseline);
        }
        options=(OPT_Options)options.clone();
      }
 else       if (arg.equals(""String_Node_Str"")) {
        perf=new Performance();
      }
 else       if (arg.equals(""String_Node_Str"")) {
        DISABLE_CLASS_LOADING=true;
      }
 else       if (arg.equals(""String_Node_Str"")) {
        EXECUTE_WITH_REFLECTION=true;
        VM_Class klass=loadClass(args[++i]);
        String name=args[++i];
        String desc=args[++i];
        VM_NormalMethod method=(VM_NormalMethod)findDeclaredOrFirstMethod(klass,name,desc);
        VM_CompiledMethod cm=null;
        if (BASELINE)         cm=VM_BaselineCompiler.compile(method);
 else {
          OPT_CompilationPlan cp=new OPT_CompilationPlan(method,OPT_OptimizationPlanner.createOptimizationPlan(options),null,options);
          try {
            cm=OPT_Compiler.compile(cp);
          }
 catch (          Throwable e) {
            System.err.println(""String_Node_Str"" + method + ""String_Node_Str""+ e);
          }
        }
        if (cm != null)         method.replaceCompiledMethod(cm);
        VM_TypeReference[] argDesc=method.getDescriptor().parseForParameterTypes(klass.getClassLoader());
        Object[] reflectMethodArgs=new Object[argDesc.length];
        i=parseMethodArgs(argDesc,args,i,reflectMethodArgs);
        java.lang.reflect.Method reflectoid=java.lang.reflect.JikesRVMSupport.createMethod(method);
        reflectoidVector.addElement(reflectoid);
        reflectMethodVector.addElement(method);
        reflectMethodArgsVector.addElement(reflectMethodArgs);
        options=(OPT_Options)options.clone();
      }
 else {
        System.err.println(""String_Node_Str"" + arg + ""String_Node_Str"");
      }
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      System.err.println(""String_Node_Str"" + ""String_Node_Str"");
      printFormatString();
      e.printStackTrace(System.err);
      break;
    }
catch (    Exception e) {
      System.err.println(e);
      e.printStackTrace(System.err);
      break;
    }
  }
}",0.9990850869167428
149945,"/** 
 * Helper function for   {@link #dumpStack(Address,Address)}.  Print a stack frame showing the method.  
 */
private static void showMethod(VM_Method method,int lineNumber){
  VM.sysWrite(""String_Node_Str"");
  if (method == null) {
    VM.sysWrite(""String_Node_Str"");
  }
 else {
    VM.sysWrite(method.getDeclaringClass().getDescriptor());
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(method.getName());
    VM.sysWrite(method.getDescriptor());
  }
  if (lineNumber > 0) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWriteInt(lineNumber);
  }
  VM.sysWrite(""String_Node_Str"");
}","/** 
 * Helper function for   {@link #dumpStack(Address,Address)}.  Print a stack frame showing the method.  
 */
private static void showMethod(VM_Method method,int lineNumber,Address fp){
  showPrologue(fp);
  if (method == null) {
    VM.sysWrite(""String_Node_Str"");
  }
 else {
    VM.sysWrite(method.getDeclaringClass().getDescriptor());
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(method.getName());
    VM.sysWrite(method.getDescriptor());
  }
  if (lineNumber > 0) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWriteInt(lineNumber);
  }
  VM.sysWrite(""String_Node_Str"");
}",0.9535080304311072
149946,"/** 
 * Dump state of a (stopped) thread's stack.
 * @param ip instruction pointer for first frame to dump
 * @param fp frame pointer for first frame to dump
 */
public static void dumpStack(Address ip,Address fp){
  ++inDumpStack;
  if (inDumpStack > 1 && inDumpStack <= VM.maxSystemTroubleRecursionDepth + VM.maxSystemTroubleRecursionDepthBeforeWeStopVMSysWrite) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(inDumpStack);
    VM.sysWriteln(""String_Node_Str"");
  }
  if (inDumpStack > VM.maxSystemTroubleRecursionDepth) {
    VM.dieAbruptlyRecursiveSystemTrouble();
    if (VM.VerifyAssertions)     VM._assert(VM.NOT_REACHED);
  }
  VM.sysWrite(""String_Node_Str"");
  while (VM_Magic.getCallerFramePointer(fp).NE(STACKFRAME_SENTINEL_FP)) {
    if (!MM_Interface.addressInVM(ip)) {
      VM.sysWrite(""String_Node_Str"");
      ip=VM_Magic.getReturnAddress(fp);
      fp=VM_Magic.getCallerFramePointer(fp);
      continue;
    }
    int compiledMethodId=VM_Magic.getCompiledMethodID(fp);
    if (compiledMethodId == INVISIBLE_METHOD_ID) {
      VM.sysWrite(""String_Node_Str"");
    }
 else {
      VM_CompiledMethod compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethodId);
      if (compiledMethod == null) {
        VM.sysWrite(""String_Node_Str"",compiledMethodId,""String_Node_Str"");
      }
 else       if (compiledMethod.getCompilerType() == VM_CompiledMethod.TRAP) {
        VM.sysWrite(""String_Node_Str"");
      }
 else {
        VM_Method method=compiledMethod.getMethod();
        Offset instructionOffset=compiledMethod.getInstructionOffset(ip);
        int lineNumber=compiledMethod.findLineNumberForInstruction(instructionOffset);
        if (VM.BuildForOptCompiler && compiledMethod.getCompilerType() == VM_CompiledMethod.OPT) {
          VM_OptCompiledMethod optInfo=(VM_OptCompiledMethod)compiledMethod;
          VM_OptMachineCodeMap map=optInfo.getMCMap();
          int iei=map.getInlineEncodingForMCOffset(instructionOffset);
          if (iei >= 0) {
            int[] inlineEncoding=map.inlineEncoding;
            int bci=map.getBytecodeIndexForMCOffset(instructionOffset);
            for (; iei >= 0; iei=VM_OptEncodedCallSiteTree.getParent(iei,inlineEncoding)) {
              int mid=VM_OptEncodedCallSiteTree.getMethodID(iei,inlineEncoding);
              method=VM_MemberReference.getMemberRef(mid).asMethodReference().getResolvedMember();
              lineNumber=((VM_NormalMethod)method).getLineNumberForBCIndex(bci);
              showMethod(method,lineNumber);
              if (iei > 0)               bci=VM_OptEncodedCallSiteTree.getByteCodeOffset(iei,inlineEncoding);
            }
          }
 else {
            showMethod(method,lineNumber);
          }
          ip=VM_Magic.getReturnAddress(fp);
          fp=VM_Magic.getCallerFramePointer(fp);
          continue;
        }
        showMethod(method,lineNumber);
      }
    }
    ip=VM_Magic.getReturnAddress(fp);
    fp=VM_Magic.getCallerFramePointer(fp);
  }
  --inDumpStack;
}","/** 
 * Dump state of a (stopped) thread's stack.
 * @param ip instruction pointer for first frame to dump
 * @param fp frame pointer for first frame to dump
 */
public static void dumpStack(Address ip,Address fp){
  ++inDumpStack;
  if (inDumpStack > 1 && inDumpStack <= VM.maxSystemTroubleRecursionDepth + VM.maxSystemTroubleRecursionDepthBeforeWeStopVMSysWrite) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(inDumpStack);
    VM.sysWriteln(""String_Node_Str"");
  }
  if (inDumpStack > VM.maxSystemTroubleRecursionDepth) {
    VM.dieAbruptlyRecursiveSystemTrouble();
    if (VM.VerifyAssertions)     VM._assert(VM.NOT_REACHED);
  }
  VM.sysWrite(""String_Node_Str"");
  while (VM_Magic.getCallerFramePointer(fp).NE(STACKFRAME_SENTINEL_FP)) {
    if (!MM_Interface.addressInVM(ip)) {
      showMethod(""String_Node_Str"",fp);
      ip=VM_Magic.getReturnAddress(fp);
      fp=VM_Magic.getCallerFramePointer(fp);
      continue;
    }
    int compiledMethodId=VM_Magic.getCompiledMethodID(fp);
    if (compiledMethodId == INVISIBLE_METHOD_ID) {
      showMethod(""String_Node_Str"",fp);
    }
 else {
      VM_CompiledMethod compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethodId);
      if (compiledMethod == null) {
        showMethod(compiledMethodId,fp);
      }
 else       if (compiledMethod.getCompilerType() == VM_CompiledMethod.TRAP) {
        showMethod(""String_Node_Str"",fp);
      }
 else {
        VM_Method method=compiledMethod.getMethod();
        Offset instructionOffset=compiledMethod.getInstructionOffset(ip);
        int lineNumber=compiledMethod.findLineNumberForInstruction(instructionOffset);
        if (VM.BuildForOptCompiler && compiledMethod.getCompilerType() == VM_CompiledMethod.OPT) {
          VM_OptCompiledMethod optInfo=(VM_OptCompiledMethod)compiledMethod;
          VM_OptMachineCodeMap map=optInfo.getMCMap();
          int iei=map.getInlineEncodingForMCOffset(instructionOffset);
          if (iei >= 0) {
            int[] inlineEncoding=map.inlineEncoding;
            int bci=map.getBytecodeIndexForMCOffset(instructionOffset);
            for (; iei >= 0; iei=VM_OptEncodedCallSiteTree.getParent(iei,inlineEncoding)) {
              int mid=VM_OptEncodedCallSiteTree.getMethodID(iei,inlineEncoding);
              method=VM_MemberReference.getMemberRef(mid).asMethodReference().getResolvedMember();
              lineNumber=((VM_NormalMethod)method).getLineNumberForBCIndex(bci);
              showMethod(method,lineNumber,fp);
              if (iei > 0)               bci=VM_OptEncodedCallSiteTree.getByteCodeOffset(iei,inlineEncoding);
            }
          }
 else {
            showMethod(method,lineNumber,fp);
          }
          ip=VM_Magic.getReturnAddress(fp);
          fp=VM_Magic.getCallerFramePointer(fp);
          continue;
        }
        showMethod(method,lineNumber,fp);
      }
    }
    ip=VM_Magic.getReturnAddress(fp);
    fp=VM_Magic.getCallerFramePointer(fp);
  }
  --inDumpStack;
}",0.9242907503777068
149947,"/** 
 * This method creates the stub to link native method.  It will be called from the lazy linker the first time a native method is invoked.  The stub generated will be patched by the lazy linker to link to the native method for all future calls. <p> <pre> The stub performs the following tasks in the prologue: -Allocate the glue frame -Save the PR register in the JNI Environment for reentering Java later -Shuffle the parameters in the registers to conform to the AIX convention -Save the nonvolatile registers in a known space in the frame to be used  for the GC stack map -Push a new JREF frame on the JNIRefs stack -Supply the first JNI argument:  the JNI environment pointer -Supply the second JNI argument:  class object if static, ""this"" if virtual -Setup the TOC (AIX only) and IP to the corresponding native code The stub performs the following tasks in the epilogue: -PR register is AIX nonvolatile, so it should be restored already -Restore the nonvolatile registers if GC has occurred -Pop the JREF frame off the JNIRefs stack -Check for pending exception and deliver to Java caller if present -Process the return value from native:  push onto caller's Java stack   The stack frame created by this stub conforms to the AIX convention: -6-word frame header -parameter save/spill area -one word flag to indicate whether GC has occurred during the native execution -16-word save area for nonvolatile registers | fp       | <- native frame | cr       | | lr       | | resv     | | resv     | + toc      + |          | |          | |----------|   | fp       | <- Java to C glue frame | cr/mid   | | lr       | | resv     | | resv     | + toc      + |   0      | spill area (at least 8 words reserved) |   1      | (also used for saving volatile regs during calls in prolog) |   2      | |   3      | |   4      | |   5      | |   6      | |   7      | |  ...     |  |          | |GC flag   | offset = JNI_SAVE_AREA_OFFSET           <- JNI_GC_FLAG_OFFSET |vol fpr1  | saved AIX volatile fpr during becomeNativeThread | ...      |  |vol fpr6  | saved AIX volatile fpr during becomeNativeThread |vol r4    | saved AIX volatile regs during Yield (to be removed when code moved to Java)    | ...      |  |vol r10   | saved AIX volatile regs during Yield    <- JNI_OS_PARAMETER_REGISTER_OFFSET |ENV       | VM_JNIEnvironment                       <- JNI_ENV_OFFSET |nonvol 17 | save 15 nonvolatile GPRs for GC stack mapper | ...      | |nonvol 31 |                                         <- JNI_RVM_NONVOLATILE_OFFSET |----------|    |  fp      | <- Java caller frame | mid      | | xxx      | |          | |          | |          | |----------| |          | </pre> Linux (and OSX) uses different transition scheme: the Java-to-Native transition stackframe consists of two mini frames: frame 1 has RVM's stack header with compiled method ID, and frame 2 has C (SVR4)'s stackframe layout.  Comparing to AIX transition frame, Linux version inserts a RVM frame header right above JNI_SAVE_AREA. <p> <pre> |            | <- Native callee frame   (lower addresses) | ......     | |------------| | fp         | <- Java to C glue frame (2) | lr         | | 0          | <- spill area, see VM_Compiler.getFrameSize | 1          | | .......    | |------------|  | fp         | <- Java to C glue frame (1) | lr         | | cmid       |  | padding    | | GC flag    | | Affinity   | | .......    | |------------|  | fp         | <- Java caller frame | lr         | | cmid       |                        (higher addresses) | .......    | </pre> VM_Runtime.unwindNativeStackFrame will return a pointer to glue frame (2). The lr slot of frame (2) holds the address of out-of-line machine code  which should be in bootimage, and GC shouldn't move this code.  The VM_JNIGCIterator returns the lr of frame (2) as the result of  getReturnAddressAddress.
 */
public static synchronized VM_CompiledMethod compile(VM_NativeMethod method){
  VM_JNICompiledMethod cm=(VM_JNICompiledMethod)VM_CompiledMethods.createCompiledMethod(method,VM_CompiledMethod.JNI);
  int compiledMethodId=cm.getId();
  VM_Assembler asm=new VM_Assembler(0);
  int frameSize=VM_Compiler.getFrameSize(method);
  VM_Class klass=method.getDeclaringClass();
  if (VM.VerifyAssertions)   VM._assert(T3 <= LAST_VOLATILE_GPR);
  if (VM.VerifyAssertions)   VM._assert(F3 <= LAST_VOLATILE_FPR);
  if (VM.VerifyAssertions)   VM._assert(S0 < S1 && S1 <= LAST_SCRATCH_GPR);
  Address nativeIP=method.getNativeIP();
  Address nativeTOC=method.getNativeTOC();
  asm.emitNativeStackOverflowCheck(frameSize + 14);
  int parameterAreaSize=method.getParameterWords() << LOG_BYTES_IN_STACKSLOT;
  asm.emitMFLR(REGISTER_ZERO);
  asm.emitSTAddr(REGISTER_ZERO,STACKFRAME_NEXT_INSTRUCTION_OFFSET,FP);
  if (VM.BuildForSVR4ABI || VM.BuildForMachOABI) {
    asm.emitSTAddrU(FP,-JNI_SAVE_AREA_SIZE,FP);
    asm.emitLVAL(S0,compiledMethodId);
    asm.emitSTW(S0,STACKFRAME_METHOD_ID_OFFSET,FP);
    asm.emitSTAddrU(FP,-frameSize + JNI_SAVE_AREA_SIZE,FP);
  }
 else {
    if (VM.VerifyAssertions)     VM._assert(VM.BuildForPowerOpenABI);
    asm.emitSTAddrU(FP,-frameSize,FP);
    asm.emitLVAL(S0,compiledMethodId);
    asm.emitSTW(S0,STACKFRAME_METHOD_ID_OFFSET,FP);
  }
  asm.emitLAddrOffset(S1,PROCESSOR_REGISTER,VM_Entrypoints.activeThreadField.getOffset());
  asm.emitLAddrOffset(S0,S1,VM_Entrypoints.jniEnvField.getOffset());
  asm.emitSTAddrOffset(PROCESSOR_REGISTER,S0,VM_Entrypoints.JNIEnvSavedPRField.getOffset());
  asm.emitSTAddr(S0,frameSize - JNI_ENV_OFFSET,FP);
  if (VM.BuildForSVR4ABI || VM.BuildForMachOABI) {
    asm.emitLAddr(PROCESSOR_REGISTER,0,FP);
    asm.emitSTAddrOffset(PROCESSOR_REGISTER,S0,VM_Entrypoints.JNITopJavaFPField.getOffset());
  }
 else {
    if (VM.VerifyAssertions)     VM._assert(VM.BuildForPowerOpenABI);
    asm.emitSTAddrOffset(FP,S0,VM_Entrypoints.JNITopJavaFPField.getOffset());
  }
  for (int i=LAST_NONVOLATILE_GPR, offset=JNI_RVM_NONVOLATILE_OFFSET; i >= FIRST_NONVOLATILE_GPR; --i, offset+=BYTES_IN_STACKSLOT) {
    asm.emitSTAddr(i,frameSize - offset,FP);
  }
  asm.emitLVAL(PROCESSOR_REGISTER,0);
  asm.emitSTW(PROCESSOR_REGISTER,frameSize - JNI_GC_FLAG_OFFSET,FP);
  storeParameters(asm,frameSize,method,klass);
  asm.emitLAddrOffset(S1,JTOC,VM_Entrypoints.invokeNativeFunctionInstructionsField.getOffset());
  asm.emitMTCTR(S1);
  asm.emitLVALAddr(JTOC,nativeTOC);
  asm.emitLVALAddr(S1,nativeIP);
  asm.emitBCCTRL();
  asm.emitLWZ(T2,frameSize - JNI_GC_FLAG_OFFSET,FP);
  asm.emitCMPI(T2,0);
  VM_ForwardReference fr1=asm.emitForwardBC(EQ);
  for (int i=LAST_NONVOLATILE_GPR, offset=JNI_RVM_NONVOLATILE_OFFSET; i >= FIRST_NONVOLATILE_GPR; --i, offset+=BYTES_IN_STACKSLOT) {
    asm.emitLAddr(i,frameSize - offset,FP);
  }
  fr1.resolve(asm);
  asm.emitLAddrOffset(S0,PROCESSOR_REGISTER,VM_Entrypoints.activeThreadField.getOffset());
  asm.emitLAddrOffset(S0,S0,VM_Entrypoints.jniEnvField.getOffset());
  asm.emitLAddrOffset(S1,S0,VM_Entrypoints.JNIRefsField.getOffset());
  asm.emitLIntOffset(T2,S0,VM_Entrypoints.JNIRefsSavedFPField.getOffset());
  asm.emitADDI(T3,-BYTES_IN_STACKSLOT,T2);
  asm.emitSTWoffset(T3,S0,VM_Entrypoints.JNIRefsTopField.getOffset());
  asm.emitLIntX(T2,S1,T2);
  asm.emitSTWoffset(T2,S0,VM_Entrypoints.JNIRefsSavedFPField.getOffset());
  if (VM.BuildFor64Addr) {
    asm.emitLD(T0,NATIVE_FRAME_HEADER_SIZE,FP);
  }
 else {
    asm.emitLWZ(T0,NATIVE_FRAME_HEADER_SIZE,FP);
    asm.emitLWZ(T1,NATIVE_FRAME_HEADER_SIZE + BYTES_IN_STACKSLOT,FP);
  }
  VM_TypeReference returnType=method.getReturnType();
  if (returnType.isReferenceType()) {
    asm.emitLAddrX(T0,S1,T0);
  }
  asm.emitADDI(FP,+frameSize,FP);
  asm.emitLAddr(REGISTER_ZERO,STACKFRAME_NEXT_INSTRUCTION_OFFSET,FP);
  asm.emitMTLR(REGISTER_ZERO);
  asm.emitLAddrOffset(T2,S0,VM_Entrypoints.JNIPendingExceptionField.getOffset());
  asm.emitLVAL(T3,0);
  asm.emitSTAddrOffset(T3,S0,VM_Entrypoints.JNIPendingExceptionField.getOffset());
  asm.emitCMPAddr(T2,T3);
  VM_ForwardReference fr3=asm.emitForwardBC(NE);
  asm.emitBCLR();
  fr3.resolve(asm);
  asm.emitLAddrToc(T3,VM_Entrypoints.athrowMethod.getOffset());
  asm.emitMTCTR(T3);
  asm.emitMR(T0,T2);
  asm.emitBCCTR();
  VM_MachineCode machineCode=asm.makeMachineCode();
  cm.compileComplete((VM_CodeArray)machineCode.getInstructions());
  return cm;
}","/** 
 * This method creates the stub to link native method.  It will be called from the lazy linker the first time a native method is invoked.  The stub generated will be patched by the lazy linker to link to the native method for all future calls. <p> <pre> The stub performs the following tasks in the prologue: -Allocate the glue frame -Save the PR register in the JNI Environment for reentering Java later -Shuffle the parameters in the registers to conform to the AIX convention -Save the nonvolatile registers in a known space in the frame to be used  for the GC stack map -Push a new JREF frame on the JNIRefs stack -Supply the first JNI argument:  the JNI environment pointer -Supply the second JNI argument:  class object if static, ""this"" if virtual -Setup the TOC (AIX only) and IP to the corresponding native code The stub performs the following tasks in the epilogue: -PR register is AIX nonvolatile, so it should be restored already -Restore the nonvolatile registers if GC has occurred -Pop the JREF frame off the JNIRefs stack -Check for pending exception and deliver to Java caller if present -Process the return value from native:  push onto caller's Java stack   The stack frame created by this stub conforms to the AIX convention: -6-word frame header -parameter save/spill area -one word flag to indicate whether GC has occurred during the native execution -16-word save area for nonvolatile registers | fp       | <- native frame | cr       | | lr       | | resv     | | resv     | + toc      + |          | |          | |----------|   | fp       | <- Java to C glue frame | cr/mid   | | lr       | | resv     | | resv     | + toc      + |   0      | spill area (at least 8 words reserved) |   1      | (also used for saving volatile regs during calls in prolog) |   2      | |   3      | |   4      | |   5      | |   6      | |   7      | |  ...     |  |          | |GC flag   | offset = JNI_SAVE_AREA_OFFSET           <- JNI_GC_FLAG_OFFSET |vol fpr1  | saved AIX volatile fpr during becomeNativeThread | ...      |  |vol fpr6  | saved AIX volatile fpr during becomeNativeThread |vol r4    | saved AIX volatile regs during Yield (to be removed when code moved to Java)    | ...      |  |vol r10   | saved AIX volatile regs during Yield    <- JNI_OS_PARAMETER_REGISTER_OFFSET |ENV       | VM_JNIEnvironment                       <- JNI_ENV_OFFSET |nonvol 17 | save 15 nonvolatile GPRs for GC stack mapper | ...      | |nonvol 31 |                                         <- JNI_RVM_NONVOLATILE_OFFSET |----------|    |  fp      | <- Java caller frame | mid      | | xxx      | |          | |          | |          | |----------| |          | </pre> Linux (and OSX) uses different transition scheme: the Java-to-Native transition stackframe consists of two mini frames: frame 1 has RVM's stack header with compiled method ID, and frame 2 has C (SVR4)'s stackframe layout.  Comparing to AIX transition frame, Linux version inserts a RVM frame header right above JNI_SAVE_AREA. <p> <pre> |            | <- Native callee frame   (lower addresses) | ......     | |------------| | fp         | <- Java to C glue frame (2) | lr         | | 0          | <- spill area, see VM_Compiler.getFrameSize | 1          | | .......    | |------------|  | fp         | <- Java to C glue frame (1) | lr         | | cmid       |  | padding    | | GC flag    | | Affinity   | | .......    | |------------|  | fp         | <- Java caller frame | lr         | | cmid       |                        (higher addresses) | .......    | </pre> VM_Runtime.unwindNativeStackFrame will return a pointer to glue frame (2). The lr slot of frame (2) holds the address of out-of-line machine code  which should be in bootimage, and GC shouldn't move this code.  The VM_JNIGCIterator returns the lr of frame (2) as the result of  getReturnAddressAddress.
 */
public static synchronized VM_CompiledMethod compile(VM_NativeMethod method){
  VM_JNICompiledMethod cm=(VM_JNICompiledMethod)VM_CompiledMethods.createCompiledMethod(method,VM_CompiledMethod.JNI);
  int compiledMethodId=cm.getId();
  VM_Assembler asm=new VM_Assembler(0);
  int frameSize=VM_Compiler.getFrameSize(method);
  VM_Class klass=method.getDeclaringClass();
  if (VM.VerifyAssertions)   VM._assert(T3 <= LAST_VOLATILE_GPR);
  if (VM.VerifyAssertions)   VM._assert(F3 <= LAST_VOLATILE_FPR);
  if (VM.VerifyAssertions)   VM._assert(S0 < S1 && S1 <= LAST_SCRATCH_GPR);
  Address nativeIP=method.getNativeIP();
  Address nativeTOC=method.getNativeTOC();
  asm.emitNativeStackOverflowCheck(frameSize + 14);
  int parameterAreaSize=method.getParameterWords() << LOG_BYTES_IN_STACKSLOT;
  asm.emitMFLR(REGISTER_ZERO);
  asm.emitSTAddr(REGISTER_ZERO,STACKFRAME_NEXT_INSTRUCTION_OFFSET,FP);
  if (VM.BuildForSVR4ABI || VM.BuildForMachOABI) {
    asm.emitSTAddrU(FP,-JNI_SAVE_AREA_SIZE,FP);
    asm.emitLVAL(S0,compiledMethodId);
    asm.emitSTW(S0,STACKFRAME_METHOD_ID_OFFSET,FP);
    asm.emitSTAddrU(FP,-frameSize + JNI_SAVE_AREA_SIZE,FP);
    asm.emitLVAL(S0,INVISIBLE_METHOD_ID);
    asm.emitSTW(S0,STACKFRAME_METHOD_ID_OFFSET,FP);
  }
 else {
    if (VM.VerifyAssertions)     VM._assert(VM.BuildForPowerOpenABI);
    asm.emitSTAddrU(FP,-frameSize,FP);
    asm.emitLVAL(S0,compiledMethodId);
    asm.emitSTW(S0,STACKFRAME_METHOD_ID_OFFSET,FP);
  }
  asm.emitLAddrOffset(S1,PROCESSOR_REGISTER,VM_Entrypoints.activeThreadField.getOffset());
  asm.emitLAddrOffset(S0,S1,VM_Entrypoints.jniEnvField.getOffset());
  asm.emitSTAddrOffset(PROCESSOR_REGISTER,S0,VM_Entrypoints.JNIEnvSavedPRField.getOffset());
  asm.emitSTAddr(S0,frameSize - JNI_ENV_OFFSET,FP);
  if (VM.BuildForSVR4ABI || VM.BuildForMachOABI) {
    asm.emitLAddr(PROCESSOR_REGISTER,0,FP);
    asm.emitSTAddrOffset(PROCESSOR_REGISTER,S0,VM_Entrypoints.JNITopJavaFPField.getOffset());
  }
 else {
    if (VM.VerifyAssertions)     VM._assert(VM.BuildForPowerOpenABI);
    asm.emitSTAddrOffset(FP,S0,VM_Entrypoints.JNITopJavaFPField.getOffset());
  }
  for (int i=LAST_NONVOLATILE_GPR, offset=JNI_RVM_NONVOLATILE_OFFSET; i >= FIRST_NONVOLATILE_GPR; --i, offset+=BYTES_IN_STACKSLOT) {
    asm.emitSTAddr(i,frameSize - offset,FP);
  }
  asm.emitLVAL(PROCESSOR_REGISTER,0);
  asm.emitSTW(PROCESSOR_REGISTER,frameSize - JNI_GC_FLAG_OFFSET,FP);
  storeParameters(asm,frameSize,method,klass);
  asm.emitLAddrOffset(S1,JTOC,VM_Entrypoints.invokeNativeFunctionInstructionsField.getOffset());
  asm.emitMTCTR(S1);
  asm.emitLVALAddr(JTOC,nativeTOC);
  asm.emitLVALAddr(S1,nativeIP);
  asm.emitBCCTRL();
  asm.emitLWZ(T2,frameSize - JNI_GC_FLAG_OFFSET,FP);
  asm.emitCMPI(T2,0);
  VM_ForwardReference fr1=asm.emitForwardBC(EQ);
  for (int i=LAST_NONVOLATILE_GPR, offset=JNI_RVM_NONVOLATILE_OFFSET; i >= FIRST_NONVOLATILE_GPR; --i, offset+=BYTES_IN_STACKSLOT) {
    asm.emitLAddr(i,frameSize - offset,FP);
  }
  fr1.resolve(asm);
  asm.emitLAddrOffset(S0,PROCESSOR_REGISTER,VM_Entrypoints.activeThreadField.getOffset());
  asm.emitLAddrOffset(S0,S0,VM_Entrypoints.jniEnvField.getOffset());
  asm.emitLAddrOffset(S1,S0,VM_Entrypoints.JNIRefsField.getOffset());
  asm.emitLIntOffset(T2,S0,VM_Entrypoints.JNIRefsSavedFPField.getOffset());
  asm.emitADDI(T3,-BYTES_IN_STACKSLOT,T2);
  asm.emitSTWoffset(T3,S0,VM_Entrypoints.JNIRefsTopField.getOffset());
  asm.emitLIntX(T2,S1,T2);
  asm.emitSTWoffset(T2,S0,VM_Entrypoints.JNIRefsSavedFPField.getOffset());
  if (VM.BuildFor64Addr) {
    asm.emitLD(T0,NATIVE_FRAME_HEADER_SIZE,FP);
  }
 else {
    asm.emitLWZ(T0,NATIVE_FRAME_HEADER_SIZE,FP);
    asm.emitLWZ(T1,NATIVE_FRAME_HEADER_SIZE + BYTES_IN_STACKSLOT,FP);
  }
  VM_TypeReference returnType=method.getReturnType();
  if (returnType.isReferenceType()) {
    asm.emitLAddrX(T0,S1,T0);
  }
  asm.emitADDI(FP,+frameSize,FP);
  asm.emitLAddr(REGISTER_ZERO,STACKFRAME_NEXT_INSTRUCTION_OFFSET,FP);
  asm.emitMTLR(REGISTER_ZERO);
  asm.emitLAddrOffset(T2,S0,VM_Entrypoints.JNIPendingExceptionField.getOffset());
  asm.emitLVAL(T3,0);
  asm.emitSTAddrOffset(T3,S0,VM_Entrypoints.JNIPendingExceptionField.getOffset());
  asm.emitCMPAddr(T2,T3);
  VM_ForwardReference fr3=asm.emitForwardBC(NE);
  asm.emitBCLR();
  fr3.resolve(asm);
  asm.emitLAddrToc(T3,VM_Entrypoints.athrowMethod.getOffset());
  asm.emitMTCTR(T3);
  asm.emitMR(T0,T2);
  asm.emitBCCTR();
  VM_MachineCode machineCode=asm.makeMachineCode();
  cm.compileComplete((VM_CodeArray)machineCode.getInstructions());
  return cm;
}",0.9943557103398584
149948,"/** 
 * Compute the number of stack words needed to hold nonvolatile registers. Side effects:  <ul> <li> updates the VM_OptCompiler structure  <li> updates the <code>frameSize</code> field of this object <li> updates the <code>frameRequired</code> field of this object </ul>
 */
public void computeNonVolatileArea(){
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  if (ir.compiledMethod.isSaveVolatile()) {
    int numGprNv=OPT_PhysicalRegisterSet.getNumberOfNonvolatileGPRs();
    ir.compiledMethod.setNumberOfNonvolatileGPRs((short)numGprNv);
    frameSize+=numGprNv * BYTES_IN_ADDRESS;
    int numFprNv=OPT_PhysicalRegisterSet.getNumberOfNonvolatileFPRs();
    ir.compiledMethod.setNumberOfNonvolatileFPRs((short)numFprNv);
    frameSize+=numFprNv * BYTES_IN_DOUBLE;
    frameSize=align(frameSize,STACKFRAME_ALIGNMENT);
    setFrameRequired();
    int i=0;
    for (Enumeration e=phys.enumerateVolatileGPRs(); e.hasMoreElements(); i++) {
      OPT_Register r=(OPT_Register)e.nextElement();
      saveVolatileGPRLocation[i]=allocateNewSpillLocation(INT_REG);
    }
    i=0;
    for (Enumeration e=phys.enumerateNonvolatileGPRs(); e.hasMoreElements(); i++) {
      OPT_Register r=(OPT_Register)e.nextElement();
      nonVolatileGPRLocation[i]=allocateNewSpillLocation(INT_REG);
    }
    saveXERLocation=allocateNewSpillLocation(INT_REG);
    saveCTRLocation=allocateNewSpillLocation(INT_REG);
    i=0;
    for (Enumeration e=phys.enumerateVolatileFPRs(); e.hasMoreElements(); i++) {
      OPT_Register r=(OPT_Register)e.nextElement();
      saveVolatileFPRLocation[i]=allocateNewSpillLocation(DOUBLE_REG);
    }
    int gprOffset=getNonvolatileGPROffset(0);
    ir.compiledMethod.setUnsignedNonVolatileOffset(gprOffset);
  }
 else {
    int numGprNv=0;
    int i=0;
    for (Enumeration e=phys.enumerateNonvolatileGPRs(); e.hasMoreElements(); ) {
      OPT_Register r=(OPT_Register)e.nextElement();
      if (r.isTouched()) {
        nonVolatileGPRLocation[i++]=allocateNewSpillLocation(INT_REG);
        numGprNv++;
      }
    }
    i=0;
    int numFprNv=0;
    for (Enumeration e=phys.enumerateNonvolatileFPRs(); e.hasMoreElements(); ) {
      OPT_Register r=(OPT_Register)e.nextElement();
      if (r.isTouched()) {
        nonVolatileFPRLocation[i++]=allocateNewSpillLocation(DOUBLE_REG);
        numFprNv++;
      }
    }
    ir.compiledMethod.setNumberOfNonvolatileGPRs((short)numGprNv);
    ir.compiledMethod.setNumberOfNonvolatileFPRs((short)numFprNv);
    if (numGprNv > 0 || numFprNv > 0) {
      int gprOffset=getNonvolatileGPROffset(0);
      ir.compiledMethod.setUnsignedNonVolatileOffset(gprOffset);
      setFrameRequired();
    }
 else {
      ir.compiledMethod.setUnsignedNonVolatileOffset(0);
    }
    frameSize=align(frameSize,STACKFRAME_ALIGNMENT);
  }
}","/** 
 * Compute the number of stack words needed to hold nonvolatile registers. Side effects:  <ul> <li> updates the VM_OptCompiler structure  <li> updates the <code>frameSize</code> field of this object <li> updates the <code>frameRequired</code> field of this object </ul>
 */
public void computeNonVolatileArea(){
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  if (ir.compiledMethod.isSaveVolatile()) {
    int numGprNv=OPT_PhysicalRegisterSet.getNumberOfNonvolatileGPRs();
    ir.compiledMethod.setNumberOfNonvolatileGPRs((short)numGprNv);
    frameSize+=numGprNv * BYTES_IN_ADDRESS;
    int numFprNv=OPT_PhysicalRegisterSet.getNumberOfNonvolatileFPRs();
    ir.compiledMethod.setNumberOfNonvolatileFPRs((short)numFprNv);
    frameSize+=numFprNv * BYTES_IN_DOUBLE;
    setFrameRequired();
    int i=0;
    for (Enumeration e=phys.enumerateVolatileGPRs(); e.hasMoreElements(); i++) {
      OPT_Register r=(OPT_Register)e.nextElement();
      saveVolatileGPRLocation[i]=allocateNewSpillLocation(INT_REG);
    }
    i=0;
    for (Enumeration e=phys.enumerateNonvolatileGPRs(); e.hasMoreElements(); i++) {
      OPT_Register r=(OPT_Register)e.nextElement();
      nonVolatileGPRLocation[i]=allocateNewSpillLocation(INT_REG);
    }
    saveXERLocation=allocateNewSpillLocation(INT_REG);
    saveCTRLocation=allocateNewSpillLocation(INT_REG);
    i=0;
    for (Enumeration e=phys.enumerateVolatileFPRs(); e.hasMoreElements(); i++) {
      OPT_Register r=(OPT_Register)e.nextElement();
      saveVolatileFPRLocation[i]=allocateNewSpillLocation(DOUBLE_REG);
    }
    int gprOffset=getNonvolatileGPROffset(0);
    ir.compiledMethod.setUnsignedNonVolatileOffset(gprOffset);
  }
 else {
    int numGprNv=0;
    int i=0;
    for (Enumeration e=phys.enumerateNonvolatileGPRs(); e.hasMoreElements(); ) {
      OPT_Register r=(OPT_Register)e.nextElement();
      if (r.isTouched()) {
        nonVolatileGPRLocation[i++]=allocateNewSpillLocation(INT_REG);
        numGprNv++;
      }
    }
    i=0;
    int numFprNv=0;
    for (Enumeration e=phys.enumerateNonvolatileFPRs(); e.hasMoreElements(); ) {
      OPT_Register r=(OPT_Register)e.nextElement();
      if (r.isTouched()) {
        nonVolatileFPRLocation[i++]=allocateNewSpillLocation(DOUBLE_REG);
        numFprNv++;
      }
    }
    ir.compiledMethod.setNumberOfNonvolatileGPRs((short)numGprNv);
    ir.compiledMethod.setNumberOfNonvolatileFPRs((short)numFprNv);
    if (numGprNv > 0 || numFprNv > 0) {
      int gprOffset=getNonvolatileGPROffset(0);
      ir.compiledMethod.setUnsignedNonVolatileOffset(gprOffset);
      setFrameRequired();
    }
 else {
      ir.compiledMethod.setUnsignedNonVolatileOffset(0);
    }
  }
  frameSize=align(frameSize,STACKFRAME_ALIGNMENT);
}",0.3051397655545536
149949,"/** 
 * prologue for the exceptional case. (1) R0 is the only available scratch register. (2) stack overflow check has to come first.
 */
final void insertExceptionalPrologue(){
  if (frameSize >= 0x7ff0) {
    throw new OPT_OptimizingCompilerException(""String_Node_Str"");
  }
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  OPT_Register FP=phys.getFP();
  OPT_Register PR=phys.getPR();
  OPT_Register TSR=phys.getTSR();
  OPT_Register R0=phys.getTemp();
  OPT_Register S1=phys.getGPR(LAST_SCRATCH_GPR);
  boolean interruptible=ir.method.isInterruptible();
  boolean stackOverflow=interruptible;
  boolean yp=hasPrologueYieldpoint();
  OPT_Instruction ptr=ir.firstInstructionInCodeOrder().nextInstructionInCodeOrder();
  if (VM.VerifyAssertions)   VM._assert(ptr.getOpcode() == IR_PROLOGUE_opcode);
  if (stackOverflow) {
    ptr.insertBefore(MIR_Store.create(PPC_STAddr,A(S1),A(FP),IC(STACKFRAME_NEXT_INSTRUCTION_OFFSET)));
    Offset offset=VM_Entrypoints.activeThreadStackLimitField.getOffset();
    if (VM.VerifyAssertions)     VM._assert(OPT_Bits.fits(offset,16));
    ptr.insertBefore(MIR_Load.create(PPC_LAddr,A(S1),A(phys.getPR()),IC(OPT_Bits.PPCMaskLower16(offset))));
    ptr.insertBefore(MIR_Binary.create(PPC_ADDI,A(R0),A(S1),IC(frameSize)));
    ptr.insertBefore(MIR_Load.create(PPC_LAddr,A(S1),A(FP),IC(STACKFRAME_NEXT_INSTRUCTION_OFFSET)));
    MIR_Trap.mutate(ptr,PPC_TAddr,OPT_PowerPCTrapOperand.LESS(),A(FP),A(R0),OPT_TrapCodeOperand.StackOverflow());
    ptr=ptr.nextInstructionInCodeOrder();
  }
 else {
    OPT_Instruction next=ptr.nextInstructionInCodeOrder();
    ptr.remove();
    ptr=next;
  }
  ptr.insertBefore(MIR_Move.create(PPC_MFSPR,A(R0),A(phys.getLR())));
  ptr.insertBefore(MIR_StoreUpdate.create(PPC_STAddrU,A(FP),A(FP),IC(-frameSize)));
  ptr.insertBefore(MIR_Store.create(PPC_STAddr,A(R0),A(FP),IC(frameSize + STACKFRAME_NEXT_INSTRUCTION_OFFSET)));
  int cmid=ir.compiledMethod.getId();
  if (cmid <= 0x7fff) {
    ptr.insertBefore(MIR_Unary.create(PPC_LDI,I(R0),IC(cmid)));
  }
 else {
    ptr.insertBefore(MIR_Unary.create(PPC_LDIS,I(R0),IC(cmid >>> 16)));
    ptr.insertBefore(MIR_Binary.create(PPC_ORI,I(R0),I(R0),IC(cmid & 0xffff)));
  }
  ptr.insertBefore(MIR_Store.create(PPC_STW,I(R0),A(FP),IC(STACKFRAME_METHOD_ID_OFFSET)));
  if (ir.compiledMethod.isSaveVolatile()) {
    saveVolatiles(ptr);
  }
  saveNonVolatiles(ptr);
  if (yp) {
    Offset offset=VM_Entrypoints.takeYieldpointField.getOffset();
    if (VM.VerifyAssertions)     VM._assert(OPT_Bits.fits(offset,16));
    ptr.insertBefore(MIR_Load.create(PPC_LInt,I(R0),A(PR),IC(OPT_Bits.PPCMaskLower16(offset))));
    ptr.insertBefore(MIR_Binary.create(PPC_CMPI,I(TSR),I(R0),IC(0)));
  }
}","/** 
 * prologue for the exceptional case. (1) R0 is the only available scratch register. (2) stack overflow check has to come first.
 */
final void insertExceptionalPrologue(){
  if (VM.VerifyAssertions)   VM._assert((frameSize & (STACKFRAME_ALIGNMENT - 1)) == 0,""String_Node_Str"");
  if (frameSize >= 0x7ff0) {
    throw new OPT_OptimizingCompilerException(""String_Node_Str"");
  }
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  OPT_Register FP=phys.getFP();
  OPT_Register PR=phys.getPR();
  OPT_Register TSR=phys.getTSR();
  OPT_Register R0=phys.getTemp();
  OPT_Register S1=phys.getGPR(LAST_SCRATCH_GPR);
  boolean interruptible=ir.method.isInterruptible();
  boolean stackOverflow=interruptible;
  boolean yp=hasPrologueYieldpoint();
  OPT_Instruction ptr=ir.firstInstructionInCodeOrder().nextInstructionInCodeOrder();
  if (VM.VerifyAssertions)   VM._assert(ptr.getOpcode() == IR_PROLOGUE_opcode);
  if (stackOverflow) {
    ptr.insertBefore(MIR_Store.create(PPC_STAddr,A(S1),A(FP),IC(STACKFRAME_NEXT_INSTRUCTION_OFFSET)));
    Offset offset=VM_Entrypoints.activeThreadStackLimitField.getOffset();
    if (VM.VerifyAssertions)     VM._assert(OPT_Bits.fits(offset,16));
    ptr.insertBefore(MIR_Load.create(PPC_LAddr,A(S1),A(phys.getPR()),IC(OPT_Bits.PPCMaskLower16(offset))));
    ptr.insertBefore(MIR_Binary.create(PPC_ADDI,A(R0),A(S1),IC(frameSize)));
    ptr.insertBefore(MIR_Load.create(PPC_LAddr,A(S1),A(FP),IC(STACKFRAME_NEXT_INSTRUCTION_OFFSET)));
    MIR_Trap.mutate(ptr,PPC_TAddr,OPT_PowerPCTrapOperand.LESS(),A(FP),A(R0),OPT_TrapCodeOperand.StackOverflow());
    ptr=ptr.nextInstructionInCodeOrder();
  }
 else {
    OPT_Instruction next=ptr.nextInstructionInCodeOrder();
    ptr.remove();
    ptr=next;
  }
  ptr.insertBefore(MIR_Move.create(PPC_MFSPR,A(R0),A(phys.getLR())));
  ptr.insertBefore(MIR_StoreUpdate.create(PPC_STAddrU,A(FP),A(FP),IC(-frameSize)));
  ptr.insertBefore(MIR_Store.create(PPC_STAddr,A(R0),A(FP),IC(frameSize + STACKFRAME_NEXT_INSTRUCTION_OFFSET)));
  int cmid=ir.compiledMethod.getId();
  if (cmid <= 0x7fff) {
    ptr.insertBefore(MIR_Unary.create(PPC_LDI,I(R0),IC(cmid)));
  }
 else {
    ptr.insertBefore(MIR_Unary.create(PPC_LDIS,I(R0),IC(cmid >>> 16)));
    ptr.insertBefore(MIR_Binary.create(PPC_ORI,I(R0),I(R0),IC(cmid & 0xffff)));
  }
  ptr.insertBefore(MIR_Store.create(PPC_STW,I(R0),A(FP),IC(STACKFRAME_METHOD_ID_OFFSET)));
  if (ir.compiledMethod.isSaveVolatile()) {
    saveVolatiles(ptr);
  }
  saveNonVolatiles(ptr);
  if (yp) {
    Offset offset=VM_Entrypoints.takeYieldpointField.getOffset();
    if (VM.VerifyAssertions)     VM._assert(OPT_Bits.fits(offset,16));
    ptr.insertBefore(MIR_Load.create(PPC_LInt,I(R0),A(PR),IC(OPT_Bits.PPCMaskLower16(offset))));
    ptr.insertBefore(MIR_Binary.create(PPC_CMPI,I(TSR),I(R0),IC(0)));
  }
}",0.9808248914616498
149950,"/** 
 * Allocate a new spill location and grow the frame size to reflect the new layout.
 * @param type the type to spill
 * @return the spill location
 */
public final int allocateNewSpillLocation(int type){
  spillPointer+=OPT_PhysicalRegisterSet.getSpillSize(type);
  if (spillPointer > frameSize) {
    frameSize=spillPointer;
  }
  return spillPointer - OPT_PhysicalRegisterSet.getSpillSize(type);
}","/** 
 * Allocate a new spill location and grow the frame size to reflect the new layout.
 * @param type the type to spill
 * @return the spill location
 */
public final int allocateNewSpillLocation(int type){
  int spillSize=OPT_PhysicalRegisterSet.getSpillSize(type);
  spillPointer=align(spillPointer,spillSize);
  spillPointer+=spillSize;
  if (spillPointer > frameSize) {
    frameSize=spillPointer;
  }
  return spillPointer - spillSize;
}",0.5542452830188679
149951,"/** 
 * Create a new driver for a generational immortal space.
 * @param server The GCspy ServerInterpreter
 * @param spaceName The name of this GCspy space
 * @param mmtkSpace The MMTk space
 * @param blockSize The tile size
 * @param mainSpace Is this the main space?
 */
@Interruptible public GenImmortalSpaceDriver(ServerInterpreter server,String spaceName,Space mmtkSpace,int blockSize,boolean mainSpace){
  super(server,spaceName,mmtkSpace,blockSize,mainSpace);
  remsetStream=createRemsetStream();
  if (DEBUG) {
    Log.write(""String_Node_Str"");
    Log.write(spaceName);
    Log.write(""String_Node_Str"");
    Log.write(blockSize);
    Log.write(""String_Node_Str"");
    Log.write(mmtkSpace.getStart());
    Log.write(""String_Node_Str"");
    Log.write(mmtkSpace.getExtent());
    Log.write(""String_Node_Str"");
    Log.writeln(maxTileNum);
  }
  resetData();
}","/** 
 * Create a new driver for a generational immortal space.
 * @param server The GCspy ServerInterpreter
 * @param spaceName The name of this GCspy space
 * @param mmtkSpace The MMTk space
 * @param blockSize The tile size
 * @param mainSpace Is this the main space?
 */
public GenImmortalSpaceDriver(ServerInterpreter server,String spaceName,Space mmtkSpace,int blockSize,boolean mainSpace){
  super(server,spaceName,mmtkSpace,blockSize,mainSpace);
  remsetStream=createRemsetStream();
  if (DEBUG) {
    Log.write(""String_Node_Str"");
    Log.write(spaceName);
    Log.write(""String_Node_Str"");
    Log.write(blockSize);
    Log.write(""String_Node_Str"");
    Log.write(mmtkSpace.getStart());
    Log.write(""String_Node_Str"");
    Log.write(mmtkSpace.getExtent());
    Log.write(""String_Node_Str"");
    Log.writeln(maxTileNum);
  }
  resetData();
}",0.9912638322655796
149952,"/** 
 * Create a new driver for this collector
 * @param server The name of the GCspy server that owns this space
 * @param spaceName The name of this driver
 * @param lospace the large object space for this allocator
 * @param blockSize The tile size
 * @param threshold the size threshold of the LOS
 * @param mainSpace Is this the main space?
 */
@Interruptible public GenLOSDriver(ServerInterpreter server,String spaceName,LargeObjectSpace lospace,int blockSize,int threshold,boolean mainSpace){
  super(server,spaceName,lospace,blockSize,threshold,mainSpace);
  remsetStream=createRemsetStream();
  resetData();
}","/** 
 * Create a new driver for this collector
 * @param server The name of the GCspy server that owns this space
 * @param spaceName The name of this driver
 * @param lospace the large object space for this allocator
 * @param blockSize The tile size
 * @param threshold the size threshold of the LOS
 * @param mainSpace Is this the main space?
 */
public GenLOSDriver(ServerInterpreter server,String spaceName,LargeObjectSpace lospace,int blockSize,int threshold,boolean mainSpace){
  super(server,spaceName,lospace,blockSize,threshold,mainSpace);
  remsetStream=createRemsetStream();
  resetData();
}",0.9877149877149876
149953,"/** 
 * Create a new driver for an immortal Contiguous MMTk space.
 * @param server The GCspy ServerInterpreter
 * @param spaceName The name of this GCspy space
 * @param mmtkSpace The MMTk space
 * @param blockSize The tile size
 * @param mainSpace Is this the main space?
 */
@Interruptible public ImmortalSpaceDriver(ServerInterpreter server,String spaceName,Space mmtkSpace,int blockSize,boolean mainSpace){
  super(server,spaceName,mmtkSpace,blockSize,mainSpace);
  if (DEBUG) {
    Log.write(""String_Node_Str"");
    Log.write(spaceName);
    Log.write(""String_Node_Str"");
    Log.write(blockSize);
    Log.write(""String_Node_Str"");
    Log.write(mmtkSpace.getStart());
    Log.write(""String_Node_Str"");
    Log.write(mmtkSpace.getExtent());
    Log.write(""String_Node_Str"");
    Log.writeln(maxTileNum);
  }
  registeredDrivers=new AbstractDriver[0];
}","/** 
 * Create a new driver for an immortal Contiguous MMTk space.
 * @param server The GCspy ServerInterpreter
 * @param spaceName The name of this GCspy space
 * @param mmtkSpace The MMTk space
 * @param blockSize The tile size
 * @param mainSpace Is this the main space?
 */
public ImmortalSpaceDriver(ServerInterpreter server,String spaceName,Space mmtkSpace,int blockSize,boolean mainSpace){
  super(server,spaceName,mmtkSpace,blockSize,mainSpace);
  if (DEBUG) {
    Log.write(""String_Node_Str"");
    Log.write(spaceName);
    Log.write(""String_Node_Str"");
    Log.write(blockSize);
    Log.write(""String_Node_Str"");
    Log.write(mmtkSpace.getStart());
    Log.write(""String_Node_Str"");
    Log.write(mmtkSpace.getExtent());
    Log.write(""String_Node_Str"");
    Log.writeln(maxTileNum);
  }
  registeredDrivers=new AbstractDriver[0];
}",0.9911816578483243
149954,"/** 
 * Can we store an object of type RHSType in a variable of type LHSType? Assumption. LHSType and RHSType are already resolved.
 * @param LHSType the left-hand-side type
 * @param RHSType the right-hand-size type
 * @return <code>true</code> if we can store an object of RHSType into a variable of type LSType or <code>false</code> if we cannot.
 */
public static boolean instanceOfResolved(VM_Type LHSType,VM_Type RHSType){
  int LHSDimension=LHSType.getDimensionality();
  int RHSDimension=RHSType.getDimensionality();
  if (LHSDimension < 0 || RHSDimension < 0)   return false;
  if (LHSDimension == 0)   return instanceOfNonArray(LHSType.asClass(),RHSType.getTypeInformationBlock());
  VM_Type LHSInnermostElementType=LHSType.asArray().getInnermostElementType();
  if (LHSInnermostElementType == VM_Type.JavaLangObjectType) {
    if (RHSDimension < LHSDimension)     return false;
    if (RHSDimension > LHSDimension)     return true;
    return RHSType.asArray().getInnermostElementType().isClassType();
  }
 else   if (!LHSInnermostElementType.isPrimitiveType()) {
    if (RHSDimension != LHSDimension)     return false;
    VM_Type RHSInnermostElementType=RHSType.asArray().getInnermostElementType();
    if (RHSInnermostElementType.isPrimitiveType())     return false;
    return instanceOfNonArray(LHSInnermostElementType.asClass(),RHSInnermostElementType.getTypeInformationBlock());
  }
 else {
    return false;
  }
}","/** 
 * Can we store an object of type RHSType in a variable of type LHSType? Assumption. LHSType and RHSType are already resolved.
 * @param LHSType the left-hand-side type
 * @param RHSType the right-hand-size type
 * @return <code>true</code> if we can store an object of RHSType into a variable of type LSType or <code>false</code> if we cannot.
 */
public static boolean instanceOfResolved(VM_Type LHSType,VM_Type RHSType){
  int LHSDimension=LHSType.getDimensionality();
  int RHSDimension=RHSType.getDimensionality();
  if (LHSDimension < 0 || RHSDimension < 0)   return false;
  if (LHSDimension == 0)   return instanceOfNonArray(LHSType.asClass(),RHSType.getTypeInformationBlock());
  VM_Type LHSInnermostElementType=LHSType.asArray().getInnermostElementType();
  if (LHSInnermostElementType == VM_Type.JavaLangObjectType) {
    if (RHSDimension < LHSDimension)     return false;
    if (RHSDimension > LHSDimension)     return true;
    return RHSType.asArray().getInnermostElementType().isClassType();
  }
 else   if (!LHSInnermostElementType.isPrimitiveType()) {
    if (RHSDimension == LHSDimension) {
      VM_Type RHSInnermostElementType=RHSType.asArray().getInnermostElementType();
      if (RHSInnermostElementType.isPrimitiveType())       return false;
      return instanceOfNonArray(LHSInnermostElementType.asClass(),RHSInnermostElementType.getTypeInformationBlock());
    }
 else {
      return (LHSDimension < RHSDimension && (LHSInnermostElementType == VM_Type.JavaLangCloneableType || LHSInnermostElementType == VM_Type.JavaIoSerializableType));
    }
  }
 else {
    return false;
  }
}",0.9254025632599407
149955,"/** 
 * Return the innermost element type reference for an array
 */
public final VM_TypeReference getInnermostElementType(){
  if (isWordArrayType() || isCodeArrayType()) {
    return getArrayElementType();
  }
 else {
    return findOrCreate(classloader,name.parseForInnermostArrayElementDescriptor());
  }
}","/** 
 * Return the innermost element type reference for an array
 */
public final VM_TypeReference getInnermostElementType(){
  VM_TypeReference elem=getArrayElementType();
  if (elem.isArrayType()) {
    return elem.getInnermostElementType();
  }
 else {
    return elem;
  }
}",0.7040816326530612
149956,"public int compare(Object a,Object b){
  if (a == null)   return 1;
  if (b == null)   return -1;
  if ((a instanceof VM_Type) && (b instanceof VM_Type)) {
    VM_Type typeA=(VM_Type)a;
    VM_Type typeB=(VM_Type)b;
    DemographicInformation infoA=(DemographicInformation)demographicData.get(typeA);
    if (infoA == null)     return 1;
    DemographicInformation infoB=(DemographicInformation)demographicData.get(typeA);
    if (infoB == null)     return -1;
    if (infoA.size > infoB.size)     return -1;
    if (infoA.size < infoB.size)     return 1;
    return 0;
  }
  return 0;
}","public int compare(Object a,Object b){
  if (a == null)   return 1;
  if (b == null)   return -1;
  if ((a instanceof VM_Type) && (b instanceof VM_Type)) {
    VM_Type typeA=(VM_Type)a;
    VM_Type typeB=(VM_Type)b;
    DemographicInformation infoA=(DemographicInformation)demographicData.get(typeA);
    if (infoA == null)     return 1;
    DemographicInformation infoB=(DemographicInformation)demographicData.get(typeB);
    if (infoB == null)     return -1;
    if (infoA.size > infoB.size)     return -1;
    if (infoA.size < infoB.size)     return 1;
    return 0;
  }
  return 0;
}",0.9982964224872232
149957,"/** 
 * Create (in host jdk address space) the rvm objects that will be needed at run time to execute enough of the virtual machine to dynamically load and compile the remainder of itself. Side effect: rvm objects are created in host jdk address space VM_Statics is populated ""bootImageTypes"" dictionary is populated with name/type pairs
 * @param typeNames names of rvm classes whose static fields will containthe objects comprising the virtual machine bootimage
 */
public static void createBootImageObjects(Vector typeNames,String bootImageTypeNamesFile) throws IllegalAccessException, ClassNotFoundException {
  VM_Callbacks.notifyBootImage(typeNames.elements());
  long startTime=0;
  long stopTime=0;
  if (verbose >= 1)   say(""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  for (Enumeration e=typeNames.elements(); e.hasMoreElements(); ) {
    String typeName=(String)e.nextElement();
    if (verbose >= 4)     say(""String_Node_Str"",typeName);
    VM_Type type;
    try {
      VM_TypeReference tRef=VM_TypeReference.findOrCreate(typeName);
      type=tRef.resolve();
    }
 catch (    NoClassDefFoundError ncdf) {
      ncdf.printStackTrace();
      fail(bootImageTypeNamesFile + ""String_Node_Str"" + typeName+ ""String_Node_Str""+ ncdf);
      return;
    }
catch (    IllegalArgumentException ila) {
      ila.printStackTrace();
      fail(bootImageTypeNamesFile + ""String_Node_Str"" + typeName+ ""String_Node_Str""+ ila);
      return;
    }
    type.markAsBootImageClass();
    typeName=typeName.replace('/','.');
    if (typeName.startsWith(""String_Node_Str""))     typeName=typeName.substring(1,typeName.length() - 1);
    bootImageTypes.put(typeName,type);
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  if (verbose >= 1)   say(String.valueOf(bootImageTypes.size()),""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  if (verbose >= 1)   say(""String_Node_Str"");
  for (Enumeration e=bootImageTypes.elements(); e.hasMoreElements(); ) {
    VM_Type type=(VM_Type)e.nextElement();
    if (verbose >= 2)     say(""String_Node_Str"" + type);
    type.resolve();
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  VM_BootRecord bootRecord=VM_BootRecord.the_boot_record;
  VM_Class rvmBRType=getRvmType(bootRecord.getClass()).asClass();
  VM_Array intArrayType=VM_Array.getPrimitiveArrayType(10);
  Address brAddress=bootImage.allocateDataStorage(rvmBRType.getInstanceSize(),VM_ObjectModel.getAlignment(rvmBRType),VM_ObjectModel.getOffsetForAlignment(rvmBRType));
  Address jtocAddress=bootImage.allocateDataStorage(intArrayType.getInstanceSize(0),VM_ObjectModel.getAlignment(intArrayType),VM_ObjectModel.getOffsetForAlignment(intArrayType));
  bootImage.resetAllocator();
  bootRecord.tocRegister=jtocAddress.plus(intArrayType.getInstanceSize(VM_Statics.middleOfTable));
  if (profile)   startTime=System.currentTimeMillis();
  if (verbose >= 1)   say(""String_Node_Str"");
  if (numThreads == 1) {
    int count=0;
    for (Enumeration e=bootImageTypes.elements(); e.hasMoreElements(); ) {
      VM_Type type=(VM_Type)e.nextElement();
      count++;
      long start2=System.currentTimeMillis();
      if (verbose >= 1)       say(startTime + ""String_Node_Str"" + count+ ""String_Node_Str""+ type);
      type.instantiate();
      long stop2=System.currentTimeMillis();
      if (verbose >= 1)       say(stop2 + ""String_Node_Str"" + count+ ""String_Node_Str""+ type+ ""String_Node_Str""+ (stop2 - start2)+ ""String_Node_Str"");
      if (profile && stop2 - start2 > classCompileThreshold)       System.out.println(""String_Node_Str"" + type + ""String_Node_Str""+ ((stop2 - start2 + 500) / 1000)+ ""String_Node_Str"");
    }
  }
 else {
    say(""String_Node_Str"" + numThreads + ""String_Node_Str"");
    BootImageWorker.startup(bootImageTypes.elements());
    BootImageWorker[] workers=new BootImageWorker[numThreads];
    for (int i=0; i < workers.length; i++) {
      workers[i]=new BootImageWorker();
      workers[i].id=i;
      workers[i].setName(""String_Node_Str"" + i);
      workers[i].start();
    }
    try {
      for (int i=0; i < workers.length; i++) {
        workers[i].join();
      }
    }
 catch (    InterruptedException ie) {
      say(""String_Node_Str"");
    }
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  VM_Statics.bootImageInstantiationFinished();
  VM_CodeArray[] functionTable=BuildJNIFunctionTable.buildTable();
  VM_JNIEnvironment.initFunctionTable(functionTable);
  if (verbose >= 1)   say(""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  bootImageTypeFields=new HashMap(bootImageTypes.size());
  for (Enumeration e=bootImageTypes.elements(); e.hasMoreElements(); ) {
    VM_Type rvmType=(VM_Type)e.nextElement();
    FieldInfo fieldInfo;
    if (!rvmType.isClassType())     continue;
    Class jdkType=getJdkType(rvmType);
    if (jdkType == null)     continue;
    Key key=new Key(jdkType);
    fieldInfo=(FieldInfo)bootImageTypeFields.get(key);
    if (fieldInfo != null) {
      fieldInfo.rvmType=rvmType;
    }
 else {
      if (verbose >= 1)       say(""String_Node_Str"" + rvmType);
      fieldInfo=new FieldInfo(jdkType,rvmType);
      bootImageTypeFields.put(key,fieldInfo);
      for (Class cls=jdkType.getSuperclass(); cls != null; cls=cls.getSuperclass()) {
        key=new Key(cls);
        fieldInfo=(FieldInfo)bootImageTypeFields.get(key);
        if (fieldInfo != null) {
          break;
        }
 else {
          if (verbose >= 1)           say(""String_Node_Str"" + jdkType);
          fieldInfo=new FieldInfo(cls,null);
          bootImageTypeFields.put(key,fieldInfo);
        }
      }
    }
  }
  for (Iterator iter=bootImageTypeFields.values().iterator(); iter.hasNext(); ) {
    FieldInfo fieldInfo=(FieldInfo)iter.next();
    VM_Type rvmType=fieldInfo.rvmType;
    if (rvmType == null) {
      if (verbose >= 1)       say(""String_Node_Str"" + fieldInfo.jdkType);
      continue;
    }
    Class jdkType=fieldInfo.jdkType;
    if (verbose >= 1)     say(""String_Node_Str"" + rvmType);
    VM_Field rvmFields[]=rvmType.getStaticFields();
    fieldInfo.jdkStaticFields=new Field[rvmFields.length];
    for (int j=0; j < rvmFields.length; j++) {
      String rvmName=rvmFields[j].getName().toString();
      for (int k=0; k < fieldInfo.jdkFields.length; k++) {
        Field f=fieldInfo.jdkFields[k];
        if (f.getName().equals(rvmName)) {
          fieldInfo.jdkStaticFields[j]=f;
          f.setAccessible(true);
          break;
        }
      }
    }
    rvmFields=rvmType.getInstanceFields();
    fieldInfo.jdkInstanceFields=new Field[rvmFields.length];
    for (int j=0; j < rvmFields.length; j++) {
      String rvmName=rvmFields[j].getName().toString();
      jdkType=getJdkType(rvmFields[j].getDeclaringClass());
      if (jdkType == null)       continue;
      FieldInfo jdkFieldInfo=(FieldInfo)bootImageTypeFields.get(new Key(jdkType));
      if (jdkFieldInfo == null)       continue;
      Field[] jdkFields=jdkFieldInfo.jdkFields;
      for (int k=0; k < jdkFields.length; k++) {
        Field f=jdkFields[k];
        if (f.getName().equals(rvmName)) {
          fieldInfo.jdkInstanceFields[j]=f;
          f.setAccessible(true);
          break;
        }
      }
    }
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  int initProc=VM_Scheduler.PRIMORDIAL_PROCESSOR_ID;
  VM_Thread startupThread=new VM_Thread(new byte[STACK_SIZE_BOOT],null,""String_Node_Str"");
  VM_Scheduler.processors[initProc].activeThread=startupThread;
  int idx=startupThread.stack.length - 1;
  if (VM.LittleEndian) {
    startupThread.stack[idx--]=(byte)0xde;
    startupThread.stack[idx--]=(byte)0xad;
    startupThread.stack[idx--]=(byte)0xba;
    startupThread.stack[idx--]=(byte)0xbe;
  }
 else {
    startupThread.stack[idx--]=(byte)0xbe;
    startupThread.stack[idx--]=(byte)0xba;
    startupThread.stack[idx--]=(byte)0xad;
    startupThread.stack[idx--]=(byte)0xde;
  }
  VM_BootstrapClassLoader.setBootstrapRepositories(bootImageRepositoriesAtExecutionTime);
  if (verbose >= 1)   say(""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  for (Enumeration e=bootImageTypes.elements(); e.hasMoreElements(); ) {
    VM_Type rvmType=(VM_Type)e.nextElement();
    if (verbose >= 1)     say(""String_Node_Str"",rvmType.toString());
    if (!rvmType.isClassType())     continue;
    Class jdkType=getJdkType(rvmType);
    if (jdkType == null && verbose >= 1) {
      say(""String_Node_Str"" + rvmType + ""String_Node_Str"");
    }
    VM_Field rvmFields[]=rvmType.getStaticFields();
    for (int j=0; j < rvmFields.length; ++j) {
      VM_Field rvmField=rvmFields[j];
      VM_TypeReference rvmFieldType=rvmField.getType();
      Offset rvmFieldOffset=rvmField.getOffset();
      String rvmFieldName=rvmField.getName().toString();
      Field jdkFieldAcc=null;
      if (jdkType != null)       jdkFieldAcc=getJdkFieldAccessor(jdkType,j,STATIC_FIELD);
      if (jdkFieldAcc == null) {
        if (jdkType != null) {
          if (!copyKnownClasspathStaticField(jdkType,rvmFieldName,rvmFieldType,rvmFieldOffset)) {
            if (verbose >= 2) {
              traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);
              traceContext.traceFieldNotInHostJdk();
              traceContext.pop();
            }
            VM_Statics.setSlotContents(rvmFieldOffset,0);
            if (!VM.runningTool)             bootImage.countNulledReference();
          }
        }
 else {
          if (verbose >= 2) {
            traceContext.push(rvmFieldType.toString(),rvmFieldType.toString(),rvmFieldName);
            traceContext.traceFieldNotInHostJdk();
            traceContext.pop();
          }
          VM_Statics.setSlotContents(rvmFieldOffset,0);
          if (!VM.runningTool)           bootImage.countNulledReference();
        }
        continue;
      }
      if (!Modifier.isStatic(jdkFieldAcc.getModifiers())) {
        if (verbose >= 2)         traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);
        if (verbose >= 2)         traceContext.traceFieldNotStaticInHostJdk();
        if (verbose >= 2)         traceContext.pop();
        VM_Statics.setSlotContents(rvmFieldOffset,0);
        if (!VM.runningTool)         bootImage.countNulledReference();
        continue;
      }
      if (verbose >= 2)       say(""String_Node_Str"",String.valueOf(VM_Statics.offsetAsSlot(rvmFieldOffset)),""String_Node_Str"",rvmField.toString());
      if (rvmFieldType.isPrimitiveType()) {
        if (rvmFieldType.isBooleanType()) {
          VM_Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getBoolean(null) ? 1 : 0);
        }
 else         if (rvmFieldType.isByteType()) {
          VM_Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getByte(null));
        }
 else         if (rvmFieldType.isCharType()) {
          VM_Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getChar(null));
        }
 else         if (rvmFieldType.isShortType()) {
          VM_Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getShort(null));
        }
 else         if (rvmFieldType.isIntType()) {
          try {
            VM_Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getInt(null));
          }
 catch (          IllegalArgumentException ex) {
            System.err.println(""String_Node_Str"" + rvmType + ""String_Node_Str""+ rvmField);
            throw ex;
          }
        }
 else         if (rvmFieldType.isLongType()) {
          VM_Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getLong(null));
        }
 else         if (rvmFieldType.isFloatType()) {
          float f=jdkFieldAcc.getFloat(null);
          VM_Statics.setSlotContents(rvmFieldOffset,Float.floatToIntBits(f));
        }
 else         if (rvmFieldType.isDoubleType()) {
          double d=jdkFieldAcc.getDouble(null);
          VM_Statics.setSlotContents(rvmFieldOffset,Double.doubleToLongBits(d));
        }
 else         if (rvmFieldType.equals(VM_TypeReference.Address) || rvmFieldType.equals(VM_TypeReference.Word) || rvmFieldType.equals(VM_TypeReference.Extent)|| rvmFieldType.equals(VM_TypeReference.Offset)) {
          Object o=jdkFieldAcc.get(null);
          String msg=""String_Node_Str"" + rvmField.toString();
          boolean warn=rvmFieldType.equals(VM_TypeReference.Address);
          VM_Statics.setSlotContents(rvmFieldOffset,getWordValue(o,msg,warn));
        }
 else {
          fail(""String_Node_Str"" + rvmFieldType);
        }
      }
 else {
        if (jdkFieldAcc == null)         fail(""String_Node_Str"");
        int modifs=jdkFieldAcc.getModifiers();
        if (!Modifier.isStatic(modifs))         fail(""String_Node_Str"" + jdkFieldAcc.toString());
        Object o;
        try {
          o=jdkFieldAcc.get(null);
        }
 catch (        NullPointerException npe) {
          fail(""String_Node_Str"" + jdkFieldAcc.toString() + ""String_Node_Str""+ npe.toString());
          o=null;
        }
        if (verbose >= 3)         say(""String_Node_Str"",VM.addressAsHexString(VM_Magic.objectAsAddress(o)));
        VM_Statics.setSlotContents(rvmFieldOffset,o);
      }
    }
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
}","/** 
 * Create (in host jdk address space) the rvm objects that will be needed at run time to execute enough of the virtual machine to dynamically load and compile the remainder of itself. Side effect: rvm objects are created in host jdk address space VM_Statics is populated ""bootImageTypes"" dictionary is populated with name/type pairs
 * @param typeNames names of rvm classes whose static fields will containthe objects comprising the virtual machine bootimage
 */
public static void createBootImageObjects(Vector typeNames,String bootImageTypeNamesFile) throws IllegalAccessException, ClassNotFoundException {
  VM_Callbacks.notifyBootImage(typeNames.elements());
  long startTime=0;
  long stopTime=0;
  if (verbose >= 1)   say(""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  for (Enumeration e=typeNames.elements(); e.hasMoreElements(); ) {
    String typeName=(String)e.nextElement();
    if (verbose >= 4)     say(""String_Node_Str"",typeName);
    VM_Type type;
    try {
      VM_TypeReference tRef=VM_TypeReference.findOrCreate(typeName);
      type=tRef.resolve();
    }
 catch (    NoClassDefFoundError ncdf) {
      ncdf.printStackTrace();
      fail(bootImageTypeNamesFile + ""String_Node_Str"" + typeName+ ""String_Node_Str""+ ncdf);
      return;
    }
catch (    IllegalArgumentException ila) {
      ila.printStackTrace();
      fail(bootImageTypeNamesFile + ""String_Node_Str"" + typeName+ ""String_Node_Str""+ ila);
      return;
    }
    type.markAsBootImageClass();
    typeName=typeName.replace('/','.');
    if (typeName.startsWith(""String_Node_Str""))     typeName=typeName.substring(1,typeName.length() - 1);
    bootImageTypes.put(typeName,type);
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  if (verbose >= 1)   say(String.valueOf(bootImageTypes.size()),""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  if (verbose >= 1)   say(""String_Node_Str"");
  for (Enumeration e=bootImageTypes.elements(); e.hasMoreElements(); ) {
    VM_Type type=(VM_Type)e.nextElement();
    if (verbose >= 2)     say(""String_Node_Str"" + type);
    type.resolve();
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  VM_BootRecord bootRecord=VM_BootRecord.the_boot_record;
  VM_Class rvmBRType=getRvmType(bootRecord.getClass()).asClass();
  VM_Array intArrayType=VM_Array.getPrimitiveArrayType(10);
  bootImage.allocateDataStorage(rvmBRType.getInstanceSize(),VM_ObjectModel.getAlignment(rvmBRType),VM_ObjectModel.getOffsetForAlignment(rvmBRType));
  Address jtocAddress=bootImage.allocateDataStorage(intArrayType.getInstanceSize(0),VM_ObjectModel.getAlignment(intArrayType),VM_ObjectModel.getOffsetForAlignment(intArrayType));
  bootImage.resetAllocator();
  bootRecord.tocRegister=jtocAddress.plus(intArrayType.getInstanceSize(VM_Statics.middleOfTable));
  if (profile)   startTime=System.currentTimeMillis();
  if (verbose >= 1)   say(""String_Node_Str"");
  if (numThreads == 1) {
    int count=0;
    for (Enumeration e=bootImageTypes.elements(); e.hasMoreElements(); ) {
      VM_Type type=(VM_Type)e.nextElement();
      count++;
      long start2=System.currentTimeMillis();
      if (verbose >= 1)       say(startTime + ""String_Node_Str"" + count+ ""String_Node_Str""+ type);
      type.instantiate();
      long stop2=System.currentTimeMillis();
      if (verbose >= 1)       say(stop2 + ""String_Node_Str"" + count+ ""String_Node_Str""+ type+ ""String_Node_Str""+ (stop2 - start2)+ ""String_Node_Str"");
      if (profile && stop2 - start2 > classCompileThreshold)       System.out.println(""String_Node_Str"" + type + ""String_Node_Str""+ ((stop2 - start2 + 500) / 1000)+ ""String_Node_Str"");
    }
  }
 else {
    say(""String_Node_Str"" + numThreads + ""String_Node_Str"");
    BootImageWorker.startup(bootImageTypes.elements());
    BootImageWorker[] workers=new BootImageWorker[numThreads];
    for (int i=0; i < workers.length; i++) {
      workers[i]=new BootImageWorker();
      workers[i].id=i;
      workers[i].setName(""String_Node_Str"" + i);
      workers[i].start();
    }
    try {
      for (int i=0; i < workers.length; i++) {
        workers[i].join();
      }
    }
 catch (    InterruptedException ie) {
      say(""String_Node_Str"");
    }
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  VM_Statics.bootImageInstantiationFinished();
  VM_CodeArray[] functionTable=BuildJNIFunctionTable.buildTable();
  VM_JNIEnvironment.initFunctionTable(functionTable);
  if (verbose >= 1)   say(""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  bootImageTypeFields=new HashMap(bootImageTypes.size());
  for (Enumeration e=bootImageTypes.elements(); e.hasMoreElements(); ) {
    VM_Type rvmType=(VM_Type)e.nextElement();
    FieldInfo fieldInfo;
    if (!rvmType.isClassType())     continue;
    Class jdkType=getJdkType(rvmType);
    if (jdkType == null)     continue;
    Key key=new Key(jdkType);
    fieldInfo=(FieldInfo)bootImageTypeFields.get(key);
    if (fieldInfo != null) {
      fieldInfo.rvmType=rvmType;
    }
 else {
      if (verbose >= 1)       say(""String_Node_Str"" + rvmType);
      fieldInfo=new FieldInfo(jdkType,rvmType);
      bootImageTypeFields.put(key,fieldInfo);
      for (Class cls=jdkType.getSuperclass(); cls != null; cls=cls.getSuperclass()) {
        key=new Key(cls);
        fieldInfo=(FieldInfo)bootImageTypeFields.get(key);
        if (fieldInfo != null) {
          break;
        }
 else {
          if (verbose >= 1)           say(""String_Node_Str"" + jdkType);
          fieldInfo=new FieldInfo(cls,null);
          bootImageTypeFields.put(key,fieldInfo);
        }
      }
    }
  }
  for (Iterator iter=bootImageTypeFields.values().iterator(); iter.hasNext(); ) {
    FieldInfo fieldInfo=(FieldInfo)iter.next();
    VM_Type rvmType=fieldInfo.rvmType;
    if (rvmType == null) {
      if (verbose >= 1)       say(""String_Node_Str"" + fieldInfo.jdkType);
      continue;
    }
    Class jdkType=fieldInfo.jdkType;
    if (verbose >= 1)     say(""String_Node_Str"" + rvmType);
    VM_Field rvmFields[]=rvmType.getStaticFields();
    fieldInfo.jdkStaticFields=new Field[rvmFields.length];
    for (int j=0; j < rvmFields.length; j++) {
      String rvmName=rvmFields[j].getName().toString();
      for (int k=0; k < fieldInfo.jdkFields.length; k++) {
        Field f=fieldInfo.jdkFields[k];
        if (f.getName().equals(rvmName)) {
          fieldInfo.jdkStaticFields[j]=f;
          f.setAccessible(true);
          break;
        }
      }
    }
    rvmFields=rvmType.getInstanceFields();
    fieldInfo.jdkInstanceFields=new Field[rvmFields.length];
    for (int j=0; j < rvmFields.length; j++) {
      String rvmName=rvmFields[j].getName().toString();
      jdkType=getJdkType(rvmFields[j].getDeclaringClass());
      if (jdkType == null)       continue;
      FieldInfo jdkFieldInfo=(FieldInfo)bootImageTypeFields.get(new Key(jdkType));
      if (jdkFieldInfo == null)       continue;
      Field[] jdkFields=jdkFieldInfo.jdkFields;
      for (int k=0; k < jdkFields.length; k++) {
        Field f=jdkFields[k];
        if (f.getName().equals(rvmName)) {
          fieldInfo.jdkInstanceFields[j]=f;
          f.setAccessible(true);
          break;
        }
      }
    }
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
  int initProc=VM_Scheduler.PRIMORDIAL_PROCESSOR_ID;
  VM_Thread startupThread=new VM_Thread(new byte[STACK_SIZE_BOOT],null,""String_Node_Str"");
  VM_Scheduler.processors[initProc].activeThread=startupThread;
  int idx=startupThread.stack.length - 1;
  if (VM.LittleEndian) {
    startupThread.stack[idx--]=(byte)0xde;
    startupThread.stack[idx--]=(byte)0xad;
    startupThread.stack[idx--]=(byte)0xba;
    startupThread.stack[idx--]=(byte)0xbe;
  }
 else {
    startupThread.stack[idx--]=(byte)0xbe;
    startupThread.stack[idx--]=(byte)0xba;
    startupThread.stack[idx--]=(byte)0xad;
    startupThread.stack[idx--]=(byte)0xde;
  }
  VM_BootstrapClassLoader.setBootstrapRepositories(bootImageRepositoriesAtExecutionTime);
  if (verbose >= 1)   say(""String_Node_Str"");
  if (profile)   startTime=System.currentTimeMillis();
  for (Enumeration e=bootImageTypes.elements(); e.hasMoreElements(); ) {
    VM_Type rvmType=(VM_Type)e.nextElement();
    if (verbose >= 1)     say(""String_Node_Str"",rvmType.toString());
    if (!rvmType.isClassType())     continue;
    Class jdkType=getJdkType(rvmType);
    if (jdkType == null && verbose >= 1) {
      say(""String_Node_Str"" + rvmType + ""String_Node_Str"");
    }
    VM_Field rvmFields[]=rvmType.getStaticFields();
    for (int j=0; j < rvmFields.length; ++j) {
      VM_Field rvmField=rvmFields[j];
      VM_TypeReference rvmFieldType=rvmField.getType();
      Offset rvmFieldOffset=rvmField.getOffset();
      String rvmFieldName=rvmField.getName().toString();
      Field jdkFieldAcc=null;
      if (jdkType != null)       jdkFieldAcc=getJdkFieldAccessor(jdkType,j,STATIC_FIELD);
      if (jdkFieldAcc == null) {
        if (jdkType != null) {
          if (!copyKnownClasspathStaticField(jdkType,rvmFieldName,rvmFieldType,rvmFieldOffset)) {
            if (verbose >= 2) {
              traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);
              traceContext.traceFieldNotInHostJdk();
              traceContext.pop();
            }
            VM_Statics.setSlotContents(rvmFieldOffset,0);
            if (!VM.runningTool)             bootImage.countNulledReference();
          }
        }
 else {
          if (verbose >= 2) {
            traceContext.push(rvmFieldType.toString(),rvmFieldType.toString(),rvmFieldName);
            traceContext.traceFieldNotInHostJdk();
            traceContext.pop();
          }
          VM_Statics.setSlotContents(rvmFieldOffset,0);
          if (!VM.runningTool)           bootImage.countNulledReference();
        }
        continue;
      }
      if (!Modifier.isStatic(jdkFieldAcc.getModifiers())) {
        if (verbose >= 2)         traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);
        if (verbose >= 2)         traceContext.traceFieldNotStaticInHostJdk();
        if (verbose >= 2)         traceContext.pop();
        VM_Statics.setSlotContents(rvmFieldOffset,0);
        if (!VM.runningTool)         bootImage.countNulledReference();
        continue;
      }
      if (verbose >= 2)       say(""String_Node_Str"",String.valueOf(VM_Statics.offsetAsSlot(rvmFieldOffset)),""String_Node_Str"",rvmField.toString());
      if (rvmFieldType.isPrimitiveType()) {
        if (rvmFieldType.isBooleanType()) {
          VM_Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getBoolean(null) ? 1 : 0);
        }
 else         if (rvmFieldType.isByteType()) {
          VM_Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getByte(null));
        }
 else         if (rvmFieldType.isCharType()) {
          VM_Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getChar(null));
        }
 else         if (rvmFieldType.isShortType()) {
          VM_Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getShort(null));
        }
 else         if (rvmFieldType.isIntType()) {
          try {
            VM_Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getInt(null));
          }
 catch (          IllegalArgumentException ex) {
            System.err.println(""String_Node_Str"" + rvmType + ""String_Node_Str""+ rvmField);
            throw ex;
          }
        }
 else         if (rvmFieldType.isLongType()) {
          VM_Statics.setSlotContents(rvmFieldOffset,jdkFieldAcc.getLong(null));
        }
 else         if (rvmFieldType.isFloatType()) {
          float f=jdkFieldAcc.getFloat(null);
          VM_Statics.setSlotContents(rvmFieldOffset,Float.floatToIntBits(f));
        }
 else         if (rvmFieldType.isDoubleType()) {
          double d=jdkFieldAcc.getDouble(null);
          VM_Statics.setSlotContents(rvmFieldOffset,Double.doubleToLongBits(d));
        }
 else         if (rvmFieldType.equals(VM_TypeReference.Address) || rvmFieldType.equals(VM_TypeReference.Word) || rvmFieldType.equals(VM_TypeReference.Extent)|| rvmFieldType.equals(VM_TypeReference.Offset)) {
          Object o=jdkFieldAcc.get(null);
          String msg=""String_Node_Str"" + rvmField.toString();
          boolean warn=rvmFieldType.equals(VM_TypeReference.Address);
          VM_Statics.setSlotContents(rvmFieldOffset,getWordValue(o,msg,warn));
        }
 else {
          fail(""String_Node_Str"" + rvmFieldType);
        }
      }
 else {
        if (jdkFieldAcc == null)         fail(""String_Node_Str"");
        int modifs=jdkFieldAcc.getModifiers();
        if (!Modifier.isStatic(modifs))         fail(""String_Node_Str"" + jdkFieldAcc.toString());
        Object o;
        try {
          o=jdkFieldAcc.get(null);
        }
 catch (        NullPointerException npe) {
          fail(""String_Node_Str"" + jdkFieldAcc.toString() + ""String_Node_Str""+ npe.toString());
          o=null;
        }
        if (verbose >= 3)         say(""String_Node_Str"",VM.addressAsHexString(VM_Magic.objectAsAddress(o)));
        VM_Statics.setSlotContents(rvmFieldOffset,o);
      }
    }
  }
  if (profile) {
    stopTime=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (stopTime - startTime) + ""String_Node_Str"");
  }
}",0.9993393040669504
149958,"/** 
 * Is the given operand a branch target?
 * @see #getLabel
 * @see #isLabel
 * @param op the operand being queried
 * @return true if it represents a branch target
 */
boolean isImmOrLabel(OPT_Operand op){
  return (isImm(op) || isLabel(op));
}","/** 
 * Is the given operand a branch target?
 * @see #getLabel
 * @see #isLabel
 * @param op the operand being queried
 * @return true if it represents a branch target
 */
boolean isImmOrLabel(OPT_Operand op) throws NoInlinePragma {
  return (isImm(op) || isLabel(op));
}",0.9558541266794626
149959,"private static Word roundDown(Word value,int logBase){
  Word mask=Word.one().lsh(logBase).minus(Word.one()).not();
  return value.and(mask);
}","public static int roundDown(int value,int alignment){
  return value & ~(alignment - 1);
}",0.5064377682403434
149960,"/** 
 * This method calculates the minimum size that will guarantee the allocation of a specified number of bytes at the specified alignment.
 * @param size The number of bytes (not aligned).
 * @param alignment The requested alignment (some factor of 2).
 * @param knownAlignment The known minimum alignment. Specifically for use inallocators that enforce greater than particle alignment.
 */
final public static int getMaximumAlignedSize(int size,int alignment,int knownAlignment) throws InlinePragma {
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(knownAlignment >= MIN_ALIGNMENT);
  if (MAX_ALIGNMENT <= MIN_ALIGNMENT || alignment <= knownAlignment) {
    return size;
  }
 else {
    return size + alignment - knownAlignment;
  }
}","/** 
 * This method calculates the minimum size that will guarantee the allocation of a specified number of bytes at the specified alignment.
 * @param size The number of bytes (not aligned).
 * @param alignment The requested alignment (some factor of 2).
 * @param knownAlignment The known minimum alignment. Specifically for use inallocators that enforce greater than particle alignment. It is a <b>precondition</b> that size is aligned to knownAlignment, and that knownAlignment >= MIN_ALGINMENT.
 */
final public static int getMaximumAlignedSize(int size,int alignment,int knownAlignment) throws InlinePragma {
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(size == Conversions.roundDown(size,knownAlignment));
  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(knownAlignment >= MIN_ALIGNMENT);
  if (MAX_ALIGNMENT <= MIN_ALIGNMENT || alignment <= knownAlignment) {
    return size;
  }
 else {
    return size + alignment - knownAlignment;
  }
}",0.8734549735138316
149961,"/** 
 * Allocate an array object.
 * @param numElements number of array elements
 * @param logElementSize size in bytes of an array element, log base 2.
 * @param headerSize size in bytes of array header
 * @param tib type information block for array object
 * @param allocator int that encodes which allocator should be used
 * @param align the alignment requested; must be a power of 2.
 * @param offset the offset at which the alignment is desired.
 * @param site allocation site.
 * @return array object with header installed and all elements set to zero/null See also: bytecode 0xbc (""newarray"") and 0xbd (""anewarray"")
 */
public static Object allocateArray(int numElements,int logElementSize,int headerSize,Object[] tib,int allocator,int align,int offset,int site) throws UninterruptiblePragma, InlinePragma {
  SelectedMutatorContext mutator=SelectedMutatorContext.get();
  int elemBytes=numElements << logElementSize;
  if ((elemBytes >>> logElementSize) != numElements) {
    Assert.failWithOutOfMemoryErrorStatic();
  }
  int size=elemBytes + headerSize;
  allocator=mutator.checkAllocator(size,align,allocator);
  Address region=allocateSpace(mutator,size,align,offset,allocator,site);
  Object result=VM_ObjectModel.initializeArray(region,tib,numElements,size);
  mutator.postAlloc(ObjectReference.fromObject(result),ObjectReference.fromObject(tib),size,allocator);
  return result;
}","/** 
 * Allocate an array object.
 * @param numElements number of array elements
 * @param logElementSize size in bytes of an array element, log base 2.
 * @param headerSize size in bytes of array header
 * @param tib type information block for array object
 * @param allocator int that encodes which allocator should be used
 * @param align the alignment requested; must be a power of 2.
 * @param offset the offset at which the alignment is desired.
 * @param site allocation site.
 * @return array object with header installed and all elements set to zero/null See also: bytecode 0xbc (""newarray"") and 0xbd (""anewarray"")
 */
public static Object allocateArray(int numElements,int logElementSize,int headerSize,Object[] tib,int allocator,int align,int offset,int site) throws UninterruptiblePragma, InlinePragma {
  SelectedMutatorContext mutator=SelectedMutatorContext.get();
  int elemBytes=numElements << logElementSize;
  if ((elemBytes >>> logElementSize) != numElements) {
    Assert.failWithOutOfMemoryErrorStatic();
  }
  int size=elemBytes + headerSize;
  allocator=mutator.checkAllocator(VM_Memory.alignUp(size,MIN_ALIGNMENT),align,allocator);
  Address region=allocateSpace(mutator,size,align,offset,allocator,site);
  Object result=VM_ObjectModel.initializeArray(region,tib,numElements,size);
  mutator.postAlloc(ObjectReference.fromObject(result),ObjectReference.fromObject(tib),size,allocator);
  return result;
}",0.9854867256637168
149962,"/** 
 * Allocate a scalar object.
 * @param size Size in bytes of the object, including any headersthat need space.
 * @param tib  Type of the object (pointer to TIB).
 * @param allocator Specify which allocation scheme/area JMTk shouldallocate the memory from.
 * @param align the alignment requested; must be a power of 2.
 * @param offset the offset at which the alignment is desired.
 * @param site allocation site.
 * @return the initialized Object
 */
public static Object allocateScalar(int size,Object[] tib,int allocator,int align,int offset,int site) throws UninterruptiblePragma, InlinePragma {
  SelectedMutatorContext mutator=SelectedMutatorContext.get();
  allocator=mutator.checkAllocator(size,align,allocator);
  Address region=allocateSpace(mutator,size,align,offset,allocator,site);
  Object result=VM_ObjectModel.initializeScalar(region,tib,size);
  mutator.postAlloc(ObjectReference.fromObject(result),ObjectReference.fromObject(tib),size,allocator);
  return result;
}","/** 
 * Allocate a scalar object.
 * @param size Size in bytes of the object, including any headersthat need space.
 * @param tib  Type of the object (pointer to TIB).
 * @param allocator Specify which allocation scheme/area JMTk shouldallocate the memory from.
 * @param align the alignment requested; must be a power of 2.
 * @param offset the offset at which the alignment is desired.
 * @param site allocation site.
 * @return the initialized Object
 */
public static Object allocateScalar(int size,Object[] tib,int allocator,int align,int offset,int site) throws UninterruptiblePragma, InlinePragma {
  SelectedMutatorContext mutator=SelectedMutatorContext.get();
  allocator=mutator.checkAllocator(VM_Memory.alignUp(size,MIN_ALIGNMENT),align,allocator);
  Address region=allocateSpace(mutator,size,align,offset,allocator,site);
  Object result=VM_ObjectModel.initializeScalar(region,tib,size);
  mutator.postAlloc(ObjectReference.fromObject(result),ObjectReference.fromObject(tib),size,allocator);
  return result;
}",0.9835902536051716
149963,"/** 
 * Close the tail buffer (normalizing if necessary), and enqueue it at the tail of the shared buffer queue.
 * @param arity The arity of this buffer.
 */
private final void closeAndEnqueueTail(int arity) throws NoInlinePragma {
  Address last;
  if (!bufferOffset(tail).isZero()) {
    last=normalizeTail(arity);
  }
 else {
    last=tail.plus(bufferLastOffset(arity));
  }
  queue.enqueue(last.plus(BYTES_IN_ADDRESS),arity,true);
}","/** 
 * Close the tail buffer (normalizing if necessary), and enqueue it at the tail of the shared buffer queue.
 * @param arity The arity of this buffer.
 */
private final void closeAndEnqueueTail(int arity) throws NoInlinePragma {
  Address last;
  if (!bufferOffset(tail).isZero()) {
    last=normalizeTail(arity);
  }
 else {
    last=tailBufferEnd.minus(BYTES_IN_ADDRESS);
  }
  queue.enqueue(last.plus(BYTES_IN_ADDRESS),arity,true);
}",0.8620296465222349
149964,"/** 
 * Find or allocate a slot in the jtoc for a class literal
 * @param typeReferenceID the type reference ID for the class
 * @return the offset of slot that was allocated
 */
public static int findOrCreateClassLiteral(int typeReferenceID){
  Class literalAsClass=VM_TypeReference.getTypeRef(typeReferenceID).resolve().asClass().getClassForType();
  Integer offAsInt;
synchronized (objectLiterals) {
    offAsInt=(Integer)objectLiterals.get(literalAsClass);
  }
  if (offAsInt != null) {
    return offAsInt.intValue();
  }
 else {
    Offset newOff=allocateReferenceSlot();
    Integer newOffAsInt=new Integer(newOff.toInt());
synchronized (objectLiterals) {
      objectLiterals.put(literalAsClass,newOffAsInt);
      setSlotContents(newOff,literalAsClass);
    }
    return newOff.toInt();
  }
}","/** 
 * Find or allocate a slot in the jtoc for a class literal
 * @param typeReferenceID the type reference ID for the class
 * @return the offset of slot that was allocated
 */
public static int findOrCreateClassLiteral(int typeReferenceID){
  Class literalAsClass=VM_TypeReference.getTypeRef(typeReferenceID).resolve().getClassForType();
  Integer offAsInt;
synchronized (objectLiterals) {
    offAsInt=(Integer)objectLiterals.get(literalAsClass);
  }
  if (offAsInt != null) {
    return offAsInt.intValue();
  }
 else {
    Offset newOff=allocateReferenceSlot();
    Integer newOffAsInt=new Integer(newOff.toInt());
synchronized (objectLiterals) {
      objectLiterals.put(literalAsClass,newOffAsInt);
      setSlotContents(newOff,literalAsClass);
    }
    return newOff.toInt();
  }
}",0.5339195979899497
149965,"/** 
 * This method inspects spill locations between the parameters passed to determine if they look like heap points If the first parameter is 0, it looks from the begining of the frame until new.
 * @param ref1 the last spill found as a reference
 * @param ref2 the next spill found as a reference
 */
final void checkForMissedSpills(Address ref1,Address ref2){
  if (ref1.isZero()) {
    ref1=getFirstSpillLoc();
    if (DEBUG) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(ref1);
      VM.sysWrite(""String_Node_Str"");
    }
  }
  if (ref2.isZero()) {
    ref2=getLastSpillLoc();
    if (DEBUG) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(ref2);
      VM.sysWrite(""String_Node_Str"");
    }
  }
  if (ref1.GT(ref2)) {
    Address tmp=ref1;
    ref1=ref2;
    ref2=ref1;
  }
  for (Address i=ref1.plus(BYTES_IN_ADDRESS); i.LT(ref2); i=i.plus(BYTES_IN_ADDRESS)) {
    Address ptr=i.loadAddress();
    if (DEBUG) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(i);
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(ptr);
      VM.sysWrite(""String_Node_Str"");
    }
    if (MM_Interface.addressInVM(ptr)) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(i);
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(ptr);
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(framePtr);
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(getFirstSpillLoc());
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(getLastSpillLoc());
      VM.sysWrite(""String_Node_Str"");
    }
  }
}","/** 
 * This method inspects spill locations between the parameters passed to determine if they look like heap points If the first parameter is 0, it looks from the begining of the frame until new.
 * @param ref1 the last spill found as a reference
 * @param ref2 the next spill found as a reference
 */
final void checkForMissedSpills(Address ref1,Address ref2){
  if (ref1.isZero()) {
    ref1=getFirstSpillLoc();
    if (DEBUG) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(ref1);
      VM.sysWrite(""String_Node_Str"");
    }
  }
  if (ref2.isZero()) {
    ref2=getLastSpillLoc();
    if (DEBUG) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(ref2);
      VM.sysWrite(""String_Node_Str"");
    }
  }
  if (ref1.GT(ref2)) {
    Address tmp=ref1;
    ref1=ref2;
    ref2=tmp;
  }
  for (Address i=ref1.plus(BYTES_IN_ADDRESS); i.LT(ref2); i=i.plus(BYTES_IN_ADDRESS)) {
    Address ptr=i.loadAddress();
    if (DEBUG) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(i);
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(ptr);
      VM.sysWrite(""String_Node_Str"");
    }
    if (MM_Interface.addressInVM(ptr)) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(i);
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(ptr);
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(framePtr);
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(getFirstSpillLoc());
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(getLastSpillLoc());
      VM.sysWrite(""String_Node_Str"");
    }
  }
}",0.997778483021263
149966,"/** 
 * Constructor
 * @param trace The shared deque that is used.
 */
public DecBuffer(SharedDeque queue){
  super(""String_Node_Str"",queue);
}","/** 
 * Constructor
 * @param queue The shared deque that is used.
 */
public DecBuffer(SharedDeque queue){
  super(""String_Node_Str"",queue);
}",0.972027972027972
149967,"/** 
 * Vist as many purple objects as time allows and transitively mark grey. This means ""pretending"" that the initial object is dead, and thus applying temporary decrements to each of the object's decendents.
 * @param timeCap The time by which we must stop markinggrey.
 */
private final void doMarkGreyPhase(){
  ObjectReference object=ObjectReference.nullReference();
  while (!(object=filteredPurpleBuffer.pop()).isNull()) {
    processGreyObject(object,cycleBufferA);
  }
}","/** 
 * Vist as many purple objects as time allows and transitively mark grey. This means ""pretending"" that the initial object is dead, and thus applying temporary decrements to each of the object's decendents.
 */
private final void doMarkGreyPhase(){
  ObjectReference object=ObjectReference.nullReference();
  while (!(object=filteredPurpleBuffer.pop()).isNull()) {
    processGreyObject(object,cycleBufferA);
  }
}",0.930957683741648
149968,"/** 
 * Return the allocator instance associated with a space <code>space</code>, for this plan instance.  This exists to support   {@link org.mmtk.plan.CollectorContext#getOwnAllocator(Allocator)}.
 * @see org.mmtk.plan.CollectorContext#getOwnAllocator(Allocator)
 * @param space The space for which the allocator instance is desired.
 * @return The allocator instance associated with this plan instancewhich is allocating into <code>space</code>, or <code>null</code> if no appropriate allocator can be established.
 */
public final Allocator getAllocatorFromSpace(Space space){
  if (space == GenRC.nurserySpace)   return nursery;
  return super.getAllocatorFromSpace(space);
}","/** 
 * Return the allocator instance associated with a space <code>space</code>, for this plan instance.  This exists to support   {@link org.mmtk.plan.MutatorContext#getOwnAllocator(Allocator)}.
 * @see org.mmtk.plan.MutatorContext#getOwnAllocator(Allocator)
 * @param space The space for which the allocator instance is desired.
 * @return The allocator instance associated with this plan instancewhich is allocating into <code>space</code>, or <code>null</code> if no appropriate allocator can be established.
 */
public final Allocator getAllocatorFromSpace(Space space){
  if (space == GenRC.nurserySpace)   return nursery;
  return super.getAllocatorFromSpace(space);
}",0.9852507374631267
149969,"/** 
 * Return the space into which an allocator is allocating.  This particular method will match against those spaces defined at this level of the class hierarchy.  Subclasses must deal with spaces they define and refer to superclasses appropriately.  This exists to support   {@link org.mmtk.plan.CollectorContext#getOwnAllocator(Allocator)}.
 * @see org.mmtk.plan.CollectorContext#getOwnAllocator(Allocator)
 * @param a An allocator
 * @return The space into which <code>a</code> is allocating, or<code>null</code> if there is no space associated with <code>a</code>.
 */
public final Space getSpaceFromAllocator(Allocator a){
  if (a == nursery)   return GenRC.nurserySpace;
  return super.getSpaceFromAllocator(a);
}","/** 
 * Return the space into which an allocator is allocating.  This particular method will match against those spaces defined at this level of the class hierarchy.  Subclasses must deal with spaces they define and refer to superclasses appropriately.  This exists to support   {@link org.mmtk.plan.MutatorContext#getOwnAllocator(Allocator)}.
 * @see org.mmtk.plan.MutatorContext#getOwnAllocator(Allocator)
 * @param a An allocator
 * @return The space into which <code>a</code> is allocating, or<code>null</code> if there is no space associated with <code>a</code>.
 */
public final Space getSpaceFromAllocator(Allocator a){
  if (a == nursery)   return GenRC.nurserySpace;
  return super.getSpaceFromAllocator(a);
}",0.9861111111111112
149970,"/** 
 * Constructor
 * @param name The name of the underlying deque.
 * @param trace The shared deque that is used.
 */
public ObjectReferenceBuffer(String name,SharedDeque queue){
  values=new ObjectReferenceDeque(name,queue);
  queue.newConsumer();
}","/** 
 * Constructor
 * @param name The name of the underlying deque.
 * @param queue The shared deque that is used.
 */
public ObjectReferenceBuffer(String name,SharedDeque queue){
  values=new ObjectReferenceDeque(name,queue);
  queue.newConsumer();
}",0.984126984126984
149971,"/** 
 * Force the resolution of the type reference. May cause class loading if a required class file hasn't been loaded before.
 * @return the VM_Type instance that this references resolves to.
 * @throws NoClassDefFoundError When it cannot resolve a class.  we go to the trouble of converting the class loader's <code>ClassNotFoundException</code> into this error,  since we need to be able to throw  <code>NoClassDefFoundError</code> for classes that we're loading whose existence was compile-time checked.
 * @throws IllegalArgumentException In case of a malformed class name(should never happen, since the right thing to do is probably to validate them as soon as we insert them into a VM_TypeReference. This stinks. XXX)
 */
public final synchronized VM_Type resolve() throws NoClassDefFoundError, IllegalArgumentException {
  if (resolvedType != null)   return resolvedType;
  if (isClassType()) {
    VM_Type ans;
    if (VM.runningVM) {
      Class klass;
      String myName=name.classNameFromDescriptor();
      try {
        klass=classloader.loadClass(myName);
      }
 catch (      ClassNotFoundException cnf) {
        NoClassDefFoundError ncdfe=new NoClassDefFoundError(""String_Node_Str"" + myName + ""String_Node_Str""+ cnf.getMessage());
        ncdfe.initCause(cnf);
        throw ncdfe;
      }
      ans=java.lang.JikesRVMSupport.getTypeForClass(klass);
    }
 else {
      ans=((VM_BootstrapClassLoader)classloader).loadVMClass(name.classNameFromDescriptor());
    }
    if (VM.VerifyAssertions)     VM._assert(resolvedType == null || resolvedType == ans);
    resolvedType=ans;
  }
 else   if (isArrayType()) {
    if (isWordArrayType() || isCodeArrayType()) {
      resolvedType=getArrayElementType().getArrayTypeForElementType().resolve();
    }
 else {
      VM_Type elementType=getArrayElementType().resolve();
      if (elementType.getClassLoader() != classloader) {
        VM_TypeReference canonical=VM_TypeReference.findOrCreate(elementType.getClassLoader(),name);
        resolvedType=canonical.resolve();
      }
 else {
        resolvedType=new VM_Array(this,elementType);
      }
    }
  }
 else {
    resolvedType=new VM_Primitive(this);
  }
  return resolvedType;
}","/** 
 * Force the resolution of the type reference. May cause class loading if a required class file hasn't been loaded before.
 * @return the VM_Type instance that this references resolves to.
 * @throws NoClassDefFoundError When it cannot resolve a class.  we go to the trouble of converting the class loader's <code>ClassNotFoundException</code> into this error,  since we need to be able to throw  <code>NoClassDefFoundError</code> for classes that we're loading whose existence was compile-time checked.
 * @throws IllegalArgumentException In case of a malformed class name(should never happen, since the right thing to do is probably to validate them as soon as we insert them into a VM_TypeReference. This stinks. XXX)
 */
public final VM_Type resolve() throws NoClassDefFoundError, IllegalArgumentException {
synchronized (classloader) {
    return resolveInternal();
  }
}",0.5423838908736602
149972,"/** 
 * When an exception occurs, registers are saved temporarily.  If the stack being scanned is in this state, we need to scan those registers for code pointers.  If the codeLocations deque is null, then scanning for code pointers is not required, so we don't need to do anything. (SB: Why only code pointers?)
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void getHWExceptionRegisters(int verbosity){
  if (processCodeLocations && thread.hardwareExceptionRegisters.inuse) {
    Address ip=thread.hardwareExceptionRegisters.ip;
    VM_CompiledMethod compiledMethod=VM_CompiledMethods.findMethodForInstruction(ip);
    if (VM.VerifyAssertions) {
      VM._assert(compiledMethod != null);
      VM._assert(compiledMethod.containsReturnAddress(ip));
    }
    compiledMethod.setObsolete(false);
    ObjectReference code=ObjectReference.fromObject(compiledMethod.getEntryCodeArray());
    Address ipLoc=thread.hardwareExceptionRegisters.getIPLocation();
    if (VM.VerifyAssertions)     VM._assert(ip == ipLoc.loadAddress());
    codeLocationsPush(code,ipLoc);
  }
}","/** 
 * When an exception occurs, registers are saved temporarily.  If the stack being scanned is in this state, we need to scan those registers for code pointers.  If the codeLocations deque is null, then scanning for code pointers is not required, so we don't need to do anything. (SB: Why only code pointers?)
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void getHWExceptionRegisters(int verbosity){
  if (processCodeLocations && thread.hardwareExceptionRegisters.inuse) {
    Address ip=thread.hardwareExceptionRegisters.ip;
    VM_CompiledMethod compiledMethod=VM_CompiledMethods.findMethodForInstruction(ip);
    if (VM.VerifyAssertions) {
      VM._assert(compiledMethod != null);
      VM._assert(compiledMethod.containsReturnAddress(ip));
    }
    compiledMethod.setActiveOnStack();
    ObjectReference code=ObjectReference.fromObject(compiledMethod.getEntryCodeArray());
    Address ipLoc=thread.hardwareExceptionRegisters.getIPLocation();
    if (VM.VerifyAssertions)     VM._assert(ip == ipLoc.loadAddress());
    codeLocationsPush(code,ipLoc);
  }
}",0.9882777276825968
149973,"/** 
 * Set up to scan the current stack frame.  This means examining the frame to discover the method being invoked and then retrieving the associated metadata (stack maps etc).  Certain frames should not be scanned---these are identified and skipped.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 * @return True if the frame should be scanned, false if it shouldbe skipped.
 */
private boolean setUpFrame(int verbosity){
  int compiledMethodId=VM_Magic.getCompiledMethodID(fp);
  if (compiledMethodId == VM_Constants.INVISIBLE_METHOD_ID) {
    if (verbosity >= 1)     Log.writeln(""String_Node_Str"");
    return false;
  }
  compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethodId);
  compiledMethod.setObsolete(false);
  compiledMethodType=compiledMethod.getCompilerType();
  if (verbosity >= 1)   printMethodHeader();
  Offset offset=compiledMethod.getInstructionOffset(ip);
  iterator=iteratorGroup.selectIterator(compiledMethod);
  iterator.setupIterator(compiledMethod,offset,fp);
  if (verbosity >= 2)   dumpStackFrame(verbosity);
  if (verbosity >= 3)   Log.writeln(""String_Node_Str"");
  return true;
}","/** 
 * Set up to scan the current stack frame.  This means examining the frame to discover the method being invoked and then retrieving the associated metadata (stack maps etc).  Certain frames should not be scanned---these are identified and skipped.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 * @return True if the frame should be scanned, false if it shouldbe skipped.
 */
private boolean setUpFrame(int verbosity){
  int compiledMethodId=VM_Magic.getCompiledMethodID(fp);
  if (compiledMethodId == VM_Constants.INVISIBLE_METHOD_ID) {
    if (verbosity >= 1)     Log.writeln(""String_Node_Str"");
    return false;
  }
  compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethodId);
  compiledMethod.setActiveOnStack();
  compiledMethodType=compiledMethod.getCompilerType();
  if (verbosity >= 1)   printMethodHeader();
  Offset offset=compiledMethod.getInstructionOffset(ip);
  iterator=iteratorGroup.selectIterator(compiledMethod);
  iterator.setupIterator(compiledMethod,offset,fp);
  if (verbosity >= 2)   dumpStackFrame(verbosity);
  if (verbosity >= 3)   Log.writeln(""String_Node_Str"");
  return true;
}",0.9887640449438202
149974,"/** 
 * @param ir the IR to expand
 * @return return value is garbage for IA32
 */
public final static int expand(OPT_IR ir){
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  for (OPT_Instruction next, p=ir.firstInstructionInCodeOrder(); p != null; p=next) {
    next=p.nextInstructionInCodeOrder();
    p.setmcOffset(-1);
    p.scratchObject=null;
switch (p.getOpcode()) {
case MIR_LOWTABLESWITCH_opcode:
{
        OPT_BasicBlock thisBlock=p.getBasicBlock();
        OPT_BasicBlock nextBlock=thisBlock.splitNodeWithLinksAt(p,ir);
        nextBlock.firstInstruction().setmcOffset(-1);
        int NumTargets=MIR_LowTableSwitch.getNumberOfTargets(p);
        for (int i=0; i < NumTargets; i++) {
          thisBlock.appendInstruction(MIR_CaseLabel.create(IA32_OFFSET,IC(i),MIR_LowTableSwitch.getClearTarget(p,i)));
        }
        OPT_Register regS=MIR_LowTableSwitch.getIndex(p).register;
        nextBlock.appendInstruction(MIR_BinaryAcc.create(IA32_SHL,new OPT_RegisterOperand(regS,VM_TypeReference.Int),IC(2)));
        nextBlock.appendInstruction(MIR_BinaryAcc.create(IA32_ADD,new OPT_RegisterOperand(regS,VM_TypeReference.Int),OPT_MemoryOperand.I(new OPT_RegisterOperand(phys.getESP(),VM_TypeReference.Int),(byte)4,null,null)));
        nextBlock.appendInstruction(MIR_Move.create(IA32_MOV,new OPT_RegisterOperand(regS,VM_TypeReference.Int),OPT_MemoryOperand.I(new OPT_RegisterOperand(regS,VM_TypeReference.Int),(byte)4,null,null)));
        nextBlock.appendInstruction(MIR_BinaryAcc.create(IA32_ADD,OPT_MemoryOperand.I(new OPT_RegisterOperand(phys.getESP(),VM_TypeReference.Int),(byte)4,null,null),new OPT_RegisterOperand(regS,VM_TypeReference.Int)));
        nextBlock.appendInstruction(MIR_Return.create(IA32_RET,IC(0),null,null));
        MIR_Call.mutate0(p,IA32_CALL,null,null,nextBlock.makeJumpTarget(),null);
      }
    break;
case IA32_TEST_opcode:
  if (MIR_Test.getVal2(p).isMemory()) {
    OPT_Operand tmp=MIR_Test.getClearVal1(p);
    MIR_Test.setVal1(p,MIR_Test.getClearVal2(p));
    MIR_Test.setVal2(p,tmp);
  }
break;
case NULL_CHECK_opcode:
{
OPT_Operand ref=NullCheck.getRef(p);
MIR_TrapIf.mutate(p,IA32_TRAPIF,null,ref.copy(),IC(0),OPT_IA32ConditionOperand.EQ(),OPT_TrapCodeOperand.NullPtr());
}
case IA32_TRAPIF_opcode:
{
OPT_BasicBlock thisBlock=p.getBasicBlock();
OPT_BasicBlock trap=thisBlock.createSubBlock(p.bcIndex,ir,0f);
thisBlock.insertOut(trap);
OPT_BasicBlock nextBlock=thisBlock.splitNodeWithLinksAt(p,ir);
thisBlock.insertOut(trap);
OPT_TrapCodeOperand tc=MIR_TrapIf.getClearTrapCode(p);
p.remove();
nextBlock.firstInstruction().setmcOffset(-1);
OPT_Instruction cmp=MIR_Compare.create(IA32_CMP,MIR_TrapIf.getVal1(p),MIR_TrapIf.getVal2(p));
if (p.isMarkedAsPEI()) {
cmp.markAsPEI();
cmp.copyPosition(p);
ir.MIRInfo.gcIRMap.insertTwin(p,cmp);
}
thisBlock.appendInstruction(cmp);
thisBlock.appendInstruction(MIR_CondBranch.create(IA32_JCC,MIR_TrapIf.getCond(p),trap.makeJumpTarget(),null));
ir.cfg.addLastInCodeOrder(trap);
if (tc.isArrayBounds()) {
OPT_Operand index=MIR_TrapIf.getVal2(p);
if (!(index instanceof OPT_RegisterOperand || index instanceof OPT_IntConstantOperand)) {
  index=IC(0xdeadbeef);
}
OPT_MemoryOperand mo=OPT_MemoryOperand.BD(new OPT_RegisterOperand(phys.getPR(),VM_TypeReference.Int),VM_Entrypoints.arrayIndexTrapParamField.getOffset(),(byte)4,null,null);
trap.appendInstruction(MIR_Move.create(IA32_MOV,mo,index.copy()));
}
trap.appendInstruction(MIR_Trap.mutate(p,IA32_INT,null,tc));
ir.MIRInfo.gcIRMap.moveToEnd(p);
if (tc.isStackOverflow()) {
trap.appendInstruction(MIR_Branch.create(IA32_JMP,nextBlock.makeJumpTarget()));
}
}
break;
case IA32_FMOV_ENDING_LIVE_RANGE_opcode:
OPT_Operand result=MIR_Move.getResult(p);
OPT_Operand value=MIR_Move.getValue(p);
if (result.isRegister() && value.isRegister()) {
if (result.similar(value)) {
p.remove();
}
 else {
int i=OPT_PhysicalRegisterSet.getFPRIndex(result.asRegister().register);
int j=OPT_PhysicalRegisterSet.getFPRIndex(value.asRegister().register);
if (i == 0) {
MIR_XChng.mutate(p,IA32_FXCH,result,value);
}
 else if (j == 0) {
MIR_XChng.mutate(p,IA32_FXCH,value,result);
}
 else {
expandFmov(p,phys);
}
}
}
 else {
expandFmov(p,phys);
}
break;
case DUMMY_DEF_opcode:
case DUMMY_USE_opcode:
case REQUIRE_ESP_opcode:
case ADVISE_ESP_opcode:
p.remove();
break;
case IA32_FMOV_opcode:
expandFmov(p,phys);
break;
case IA32_FCLEAR_opcode:
expandFClear(p,ir);
break;
case IA32_JCC2_opcode:
p.insertBefore(MIR_CondBranch.create(IA32_JCC,MIR_CondBranch2.getCond1(p),MIR_CondBranch2.getTarget1(p),MIR_CondBranch2.getBranchProfile1(p)));
MIR_CondBranch.mutate(p,IA32_JCC,MIR_CondBranch2.getCond2(p),MIR_CondBranch2.getTarget2(p),MIR_CondBranch2.getBranchProfile2(p));
break;
case CALL_SAVE_VOLATILE_opcode:
p.operator=IA32_CALL;
break;
case IA32_LOCK_CMPXCHG_opcode:
p.insertBefore(MIR_Empty.create(IA32_LOCK));
p.operator=IA32_CMPXCHG;
break;
case YIELDPOINT_PROLOGUE_opcode:
expandYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromPrologueMethod,OPT_IA32ConditionOperand.NE());
break;
case YIELDPOINT_EPILOGUE_opcode:
expandYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromEpilogueMethod,OPT_IA32ConditionOperand.NE());
break;
case YIELDPOINT_BACKEDGE_opcode:
expandYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromBackedgeMethod,OPT_IA32ConditionOperand.GT());
break;
case YIELDPOINT_OSR_opcode:
expandUnconditionalYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromOsrOptMethod);
break;
case IR_ENDPROLOGUE_opcode:
p.remove();
ir.MIRInfo.instAfterPrologue=next;
break;
}
}
return 0;
}","/** 
 * @param ir the IR to expand
 * @return return value is garbage for IA32
 */
public final static int expand(OPT_IR ir){
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  for (OPT_Instruction next, p=ir.firstInstructionInCodeOrder(); p != null; p=next) {
    next=p.nextInstructionInCodeOrder();
    p.setmcOffset(-1);
    p.scratchObject=null;
switch (p.getOpcode()) {
case MIR_LOWTABLESWITCH_opcode:
{
        OPT_BasicBlock thisBlock=p.getBasicBlock();
        OPT_BasicBlock nextBlock=thisBlock.splitNodeWithLinksAt(p,ir);
        nextBlock.firstInstruction().setmcOffset(-1);
        int NumTargets=MIR_LowTableSwitch.getNumberOfTargets(p);
        for (int i=0; i < NumTargets; i++) {
          thisBlock.appendInstruction(MIR_CaseLabel.create(IA32_OFFSET,IC(i),MIR_LowTableSwitch.getClearTarget(p,i)));
        }
        OPT_Register regS=MIR_LowTableSwitch.getIndex(p).register;
        nextBlock.appendInstruction(MIR_BinaryAcc.create(IA32_SHL,new OPT_RegisterOperand(regS,VM_TypeReference.Int),IC(2)));
        nextBlock.appendInstruction(MIR_BinaryAcc.create(IA32_ADD,new OPT_RegisterOperand(regS,VM_TypeReference.Int),OPT_MemoryOperand.I(new OPT_RegisterOperand(phys.getESP(),VM_TypeReference.Int),(byte)4,null,null)));
        nextBlock.appendInstruction(MIR_Move.create(IA32_MOV,new OPT_RegisterOperand(regS,VM_TypeReference.Int),OPT_MemoryOperand.I(new OPT_RegisterOperand(regS,VM_TypeReference.Int),(byte)4,null,null)));
        nextBlock.appendInstruction(MIR_BinaryAcc.create(IA32_ADD,OPT_MemoryOperand.I(new OPT_RegisterOperand(phys.getESP(),VM_TypeReference.Int),(byte)4,null,null),new OPT_RegisterOperand(regS,VM_TypeReference.Int)));
        nextBlock.appendInstruction(MIR_Return.create(IA32_RET,IC(0),null,null));
        MIR_Call.mutate0(p,IA32_CALL,null,null,nextBlock.makeJumpTarget(),null);
      }
    break;
case IA32_TEST_opcode:
  if (MIR_Test.getVal2(p).isMemory()) {
    OPT_Operand tmp=MIR_Test.getClearVal1(p);
    MIR_Test.setVal1(p,MIR_Test.getClearVal2(p));
    MIR_Test.setVal2(p,tmp);
  }
break;
case NULL_CHECK_opcode:
{
OPT_Operand ref=NullCheck.getRef(p);
MIR_TrapIf.mutate(p,IA32_TRAPIF,null,ref.copy(),IC(0),OPT_IA32ConditionOperand.EQ(),OPT_TrapCodeOperand.NullPtr());
}
case IA32_TRAPIF_opcode:
{
OPT_BasicBlock thisBlock=p.getBasicBlock();
OPT_BasicBlock trap=thisBlock.createSubBlock(p.bcIndex,ir,0f);
thisBlock.insertOut(trap);
OPT_BasicBlock nextBlock=thisBlock.splitNodeWithLinksAt(p,ir);
thisBlock.insertOut(trap);
OPT_TrapCodeOperand tc=MIR_TrapIf.getClearTrapCode(p);
p.remove();
nextBlock.firstInstruction().setmcOffset(-1);
OPT_Instruction cmp=MIR_Compare.create(IA32_CMP,MIR_TrapIf.getVal1(p),MIR_TrapIf.getVal2(p));
if (p.isMarkedAsPEI()) {
cmp.markAsPEI();
cmp.copyPosition(p);
ir.MIRInfo.gcIRMap.insertTwin(p,cmp);
}
thisBlock.appendInstruction(cmp);
thisBlock.appendInstruction(MIR_CondBranch.create(IA32_JCC,MIR_TrapIf.getCond(p),trap.makeJumpTarget(),null));
ir.cfg.addLastInCodeOrder(trap);
if (tc.isArrayBounds()) {
OPT_Operand index=MIR_TrapIf.getVal2(p);
if (!(index instanceof OPT_RegisterOperand || index instanceof OPT_IntConstantOperand)) {
  index=IC(0xdeadbeef);
}
OPT_MemoryOperand mo=OPT_MemoryOperand.BD(new OPT_RegisterOperand(phys.getPR(),VM_TypeReference.Int),VM_Entrypoints.arrayIndexTrapParamField.getOffset(),(byte)4,null,null);
trap.appendInstruction(MIR_Move.create(IA32_MOV,mo,index.copy()));
}
trap.appendInstruction(MIR_Trap.mutate(p,IA32_INT,null,tc));
ir.MIRInfo.gcIRMap.moveToEnd(p);
if (tc.isStackOverflow()) {
trap.appendInstruction(MIR_Branch.create(IA32_JMP,nextBlock.makeJumpTarget()));
}
}
break;
case IA32_FMOV_ENDING_LIVE_RANGE_opcode:
OPT_Operand result=MIR_Move.getResult(p);
OPT_Operand value=MIR_Move.getValue(p);
if (result.isRegister() && value.isRegister()) {
if (result.similar(value)) {
p.remove();
}
 else {
int i=OPT_PhysicalRegisterSet.getFPRIndex(result.asRegister().register);
int j=OPT_PhysicalRegisterSet.getFPRIndex(value.asRegister().register);
if (i == 0) {
MIR_XChng.mutate(p,IA32_FXCH,result,value);
}
 else if (j == 0) {
MIR_XChng.mutate(p,IA32_FXCH,value,result);
}
 else {
expandFmov(p,phys);
}
}
}
 else {
expandFmov(p,phys);
}
break;
case DUMMY_DEF_opcode:
case DUMMY_USE_opcode:
case REQUIRE_ESP_opcode:
case ADVISE_ESP_opcode:
p.remove();
break;
case IA32_FMOV_opcode:
expandFmov(p,phys);
break;
case IA32_FCLEAR_opcode:
expandFClear(p,ir);
break;
case IA32_JCC2_opcode:
p.insertBefore(MIR_CondBranch.create(IA32_JCC,MIR_CondBranch2.getCond1(p),MIR_CondBranch2.getTarget1(p),MIR_CondBranch2.getBranchProfile1(p)));
MIR_CondBranch.mutate(p,IA32_JCC,MIR_CondBranch2.getCond2(p),MIR_CondBranch2.getTarget2(p),MIR_CondBranch2.getBranchProfile2(p));
break;
case CALL_SAVE_VOLATILE_opcode:
p.operator=IA32_CALL;
break;
case IA32_LOCK_CMPXCHG_opcode:
p.insertBefore(MIR_Empty.create(IA32_LOCK));
p.operator=IA32_CMPXCHG;
break;
case YIELDPOINT_PROLOGUE_opcode:
expandYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromPrologueMethod,OPT_IA32ConditionOperand.NE());
break;
case YIELDPOINT_EPILOGUE_opcode:
expandYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromEpilogueMethod,OPT_IA32ConditionOperand.NE());
break;
case YIELDPOINT_BACKEDGE_opcode:
expandYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromBackedgeMethod,OPT_IA32ConditionOperand.GT());
break;
case YIELDPOINT_OSR_opcode:
expandUnconditionalYieldpoint(p,ir,VM_Entrypoints.optThreadSwitchFromOsrOptMethod);
break;
}
}
return 0;
}",0.9925155166119022
149975,"/** 
 * Insert the prologue for a normal method.   Assume we are inserting the prologue for method B called from method A.   <ul> <li> Perform a stack overflow check. <li> Store a back pointer to A's frame <li> Store B's compiled method id <li> Adjust frame pointer to point to B's frame <li> Save any used non-volatile registers </ul>
 */
void insertNormalPrologue(){
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  OPT_Register ESP=phys.getESP();
  OPT_Register PR=phys.getPR();
  OPT_MemoryOperand fpHome=OPT_MemoryOperand.BD(new OPT_RegisterOperand(PR,VM_TypeReference.Int),VM_Entrypoints.framePointerField.getOffset(),(byte)WORDSIZE,null,null);
  OPT_Instruction inst=ir.firstInstructionInCodeOrder().nextInstructionInCodeOrder().nextInstructionInCodeOrder();
  OPT_Instruction plg=inst.getPrev();
  int frameFixedSize=getFrameFixedSize();
  ir.compiledMethod.setFrameFixedSize(frameFixedSize);
  if (frameFixedSize >= 256) {
    insertBigFrameStackOverflowCheck(plg);
    inst.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,fpHome));
    inst.insertBefore(MIR_Move.create(IA32_MOV,fpHome.copy(),new OPT_RegisterOperand(ESP,VM_TypeReference.Int)));
    int cmid=ir.compiledMethod.getId();
    inst.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,IC(cmid)));
  }
 else {
    inst.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,fpHome));
    inst.insertBefore(MIR_Move.create(IA32_MOV,fpHome.copy(),new OPT_RegisterOperand(ESP,VM_TypeReference.Int)));
    int cmid=ir.compiledMethod.getId();
    inst.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,IC(cmid)));
    insertNormalStackOverflowCheck(plg);
  }
  if (ir.compiledMethod.isSaveVolatile()) {
    saveVolatiles(inst);
    saveFloatingPointState(inst);
  }
  saveNonVolatiles(inst);
  inst.insertBefore(Empty.create(IR_ENDPROLOGUE));
}","/** 
 * Insert the prologue for a normal method.   Assume we are inserting the prologue for method B called from method A.   <ul> <li> Perform a stack overflow check. <li> Store a back pointer to A's frame <li> Store B's compiled method id <li> Adjust frame pointer to point to B's frame <li> Save any used non-volatile registers </ul>
 */
void insertNormalPrologue(){
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  OPT_Register ESP=phys.getESP();
  OPT_Register PR=phys.getPR();
  OPT_MemoryOperand fpHome=OPT_MemoryOperand.BD(new OPT_RegisterOperand(PR,VM_TypeReference.Int),VM_Entrypoints.framePointerField.getOffset(),(byte)WORDSIZE,null,null);
  OPT_Instruction inst=ir.firstInstructionInCodeOrder().nextInstructionInCodeOrder().nextInstructionInCodeOrder();
  OPT_Instruction plg=inst.getPrev();
  int frameFixedSize=getFrameFixedSize();
  ir.compiledMethod.setFrameFixedSize(frameFixedSize);
  if (frameFixedSize >= 256) {
    insertBigFrameStackOverflowCheck(plg);
    inst.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,fpHome));
    inst.insertBefore(MIR_Move.create(IA32_MOV,fpHome.copy(),new OPT_RegisterOperand(ESP,VM_TypeReference.Int)));
    int cmid=ir.compiledMethod.getId();
    inst.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,IC(cmid)));
  }
 else {
    inst.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,fpHome));
    inst.insertBefore(MIR_Move.create(IA32_MOV,fpHome.copy(),new OPT_RegisterOperand(ESP,VM_TypeReference.Int)));
    int cmid=ir.compiledMethod.getId();
    inst.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,IC(cmid)));
    insertNormalStackOverflowCheck(plg);
  }
  if (ir.compiledMethod.isSaveVolatile()) {
    saveVolatiles(inst);
    saveFloatingPointState(inst);
  }
  saveNonVolatiles(inst);
}",0.9856781802864364
149976,"/** 
 * @param ir the IR to expand
 * @return upperbound on number of machine code instructions that will be generated for this IR
 */
public final static int expand(OPT_IR ir){
  int instructionCount=0;
  int conditionalBranchCount=0;
  int machinecodeLength=0;
  boolean frameCreated=false;
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  for (OPT_Instruction p=ir.firstInstructionInCodeOrder(); p != null; p=p.nextInstructionInCodeOrder()) {
    p.setmcOffset(-1);
    p.scratchObject=null;
switch (p.getOpcode()) {
case MIR_LOWTABLESWITCH_opcode:
{
        OPT_BasicBlock tableBlock=p.getBasicBlock();
        OPT_BasicBlock nextBlock=tableBlock.splitNodeWithLinksAt(p.prevInstructionInCodeOrder(),ir);
        nextBlock.firstInstruction().setmcOffset(-1);
        OPT_Register regI=MIR_LowTableSwitch.getIndex(p).register;
        int NumTargets=MIR_LowTableSwitch.getNumberOfTargets(p);
        tableBlock.appendInstruction(MIR_Call.create0(PPC_BL,null,null,nextBlock.makeJumpTarget()));
        for (int i=0; i < NumTargets; i++) {
          tableBlock.appendInstruction(MIR_DataLabel.create(PPC_DATA_LABEL,MIR_LowTableSwitch.getClearTarget(p,i)));
        }
        OPT_Register temp=phys.getGPR(0);
        p.insertBack(MIR_Move.create(PPC_MFSPR,A(temp),A(phys.getLR())));
        p.insertBack(MIR_Binary.create(PPC_SLWI,I(regI),I(regI),IC(2)));
        p.insertBack(MIR_LoadUpdate.create(PPC_LIntUX,I(temp),I(regI),A(temp)));
        p.insertBack(MIR_Binary.create(PPC_ADD,A(regI),A(regI),I(temp)));
        p.insertBack(MIR_Move.create(PPC_MTSPR,A(phys.getCTR()),A(regI)));
        MIR_Branch.mutate(p,PPC_BCTR);
        instructionCount+=NumTargets + 7;
      }
    break;
case PPC_BCOND2_opcode:
{
    OPT_RegisterOperand cond=MIR_CondBranch2.getClearValue(p);
    p.insertFront(MIR_CondBranch.create(PPC_BCOND,cond.copyU2U(),MIR_CondBranch2.getClearCond2(p),MIR_CondBranch2.getClearTarget2(p),MIR_CondBranch2.getClearBranchProfile2(p)));
    MIR_CondBranch.mutate(p,PPC_BCOND,cond,MIR_CondBranch2.getClearCond1(p),MIR_CondBranch2.getClearTarget1(p),MIR_CondBranch2.getClearBranchProfile1(p));
    conditionalBranchCount++;
  }
break;
case PPC_BLRL_opcode:
case PPC_BCTRL_opcode:
{
if (VM.BuildForIMTInterfaceInvocation) {
  if (MIR_Call.hasMethod(p)) {
    OPT_MethodOperand mo=MIR_Call.getMethod(p);
    if (mo.isInterface()) {
      VM_InterfaceMethodSignature sig=VM_InterfaceMethodSignature.findOrCreate(mo.getMemberRef());
      int signatureId=sig.getId();
      OPT_Instruction s;
      if (OPT_Bits.fits(signatureId,16)) {
        s=MIR_Unary.create(PPC_LDI,I(phys.getGPR(LAST_SCRATCH_GPR)),IC(signatureId));
        p.insertBack(s);
        instructionCount++;
      }
 else {
        s=MIR_Unary.create(PPC_LDIS,I(phys.getGPR(LAST_SCRATCH_GPR)),IC(OPT_Bits.PPCMaskUpper16(signatureId)));
        p.insertBack(s);
        s=MIR_Binary.create(PPC_ADDI,I(phys.getGPR(LAST_SCRATCH_GPR)),I(phys.getGPR(LAST_SCRATCH_GPR)),IC(OPT_Bits.PPCMaskLower16(signatureId)));
        p.insertBack(s);
        instructionCount+=2;
      }
    }
  }
}
instructionCount++;
}
break;
case LABEL_opcode:
case BBEND_opcode:
case UNINT_BEGIN_opcode:
case UNINT_END_opcode:
break;
case RESOLVE_opcode:
{
OPT_Register zero=phys.getGPR(0);
OPT_Register JTOC=phys.getJTOC();
OPT_Register CTR=phys.getCTR();
if (VM.VerifyAssertions) VM._assert(p.bcIndex >= 0 && p.position != null);
Offset offset=VM_Entrypoints.optResolveMethod.getOffset();
if (OPT_Bits.fits(offset,16)) {
p.insertBefore(MIR_Load.create(PPC_LAddr,A(zero),A(JTOC),IC(OPT_Bits.PPCMaskLower16(offset))));
}
 else {
if (VM.VerifyAssertions) VM._assert(OPT_Bits.fits(offset,32));
p.insertBefore(MIR_Binary.create(PPC_ADDIS,A(zero),A(JTOC),IC(OPT_Bits.PPCMaskUpper16(offset))));
p.insertBefore(MIR_Load.create(PPC_LAddr,A(zero),A(zero),IC(OPT_Bits.PPCMaskLower16(offset))));
instructionCount+=1;
}
p.insertBefore(MIR_Move.create(PPC_MTSPR,A(CTR),A(zero)));
instructionCount+=3;
MIR_Call.mutate0(p,PPC_BCTRL,null,null);
break;
}
case YIELDPOINT_PROLOGUE_opcode:
{
OPT_Register TSR=phys.getTSR();
OPT_BasicBlock yieldpoint=findOrCreateYieldpointBlock(ir,VM_Thread.PROLOGUE);
MIR_CondCall.mutate0(p,PPC_BCL,null,null,I(TSR),OPT_PowerPCConditionOperand.NOT_EQUAL(),yieldpoint.makeJumpTarget());
p.getBasicBlock().insertOut(yieldpoint);
conditionalBranchCount++;
}
break;
case YIELDPOINT_BACKEDGE_opcode:
{
OPT_BasicBlock yieldpoint=findOrCreateYieldpointBlock(ir,VM_Thread.BACKEDGE);
OPT_Register zero=phys.getGPR(0);
OPT_Register TSR=phys.getTSR();
OPT_Register PR=phys.getPR();
Offset offset=VM_Entrypoints.takeYieldpointField.getOffset();
if (VM.VerifyAssertions) VM._assert(OPT_Bits.fits(offset,16));
p.insertBefore(MIR_Load.create(PPC_LInt,I(zero),A(PR),IC(OPT_Bits.PPCMaskLower16(offset))));
p.insertBefore(MIR_Binary.create(PPC_CMPI,I(TSR),I(zero),IC(0)));
instructionCount+=2;
MIR_CondCall.mutate0(p,PPC_BCL,null,null,I(TSR),OPT_PowerPCConditionOperand.GREATER(),yieldpoint.makeJumpTarget());
p.getBasicBlock().insertOut(yieldpoint);
conditionalBranchCount++;
}
break;
case YIELDPOINT_EPILOGUE_opcode:
{
OPT_BasicBlock yieldpoint=findOrCreateYieldpointBlock(ir,VM_Thread.EPILOGUE);
OPT_Register zero=phys.getGPR(0);
OPT_Register TSR=phys.getTSR();
OPT_Register PR=phys.getPR();
Offset offset=VM_Entrypoints.takeYieldpointField.getOffset();
if (VM.VerifyAssertions) VM._assert(OPT_Bits.fits(offset,16));
p.insertBefore(MIR_Load.create(PPC_LInt,I(zero),A(PR),IC(OPT_Bits.PPCMaskLower16(offset))));
p.insertBefore(MIR_Binary.create(PPC_CMPI,I(TSR),I(zero),IC(0)));
instructionCount+=2;
MIR_CondCall.mutate0(p,PPC_BCL,null,null,I(TSR),OPT_PowerPCConditionOperand.NOT_EQUAL(),yieldpoint.makeJumpTarget());
p.getBasicBlock().insertOut(yieldpoint);
conditionalBranchCount++;
}
break;
case YIELDPOINT_OSR_opcode:
{
OPT_BasicBlock yieldpoint=findOrCreateYieldpointBlock(ir,VM_Thread.OSROPT);
MIR_Call.mutate0(p,PPC_BL,null,null,yieldpoint.makeJumpTarget());
p.getBasicBlock().insertOut(yieldpoint);
}
instructionCount++;
break;
case IR_ENDPROLOGUE_opcode:
{
OPT_Instruction next=p.nextInstructionInCodeOrder();
ir.MIRInfo.instAfterPrologue=next;
p.remove();
p=next.prevInstructionInCodeOrder();
}
break;
default :
if (p.operator().isConditionalBranch()) conditionalBranchCount++;
 else instructionCount++;
break;
}
}
if ((instructionCount + conditionalBranchCount) > OPT_Assembler.MAX_COND_DISPL) machinecodeLength=instructionCount + 2 * conditionalBranchCount;
 else machinecodeLength=instructionCount + conditionalBranchCount;
if ((machinecodeLength & ~OPT_Assembler.MAX_24_BITS) != 0) throw new OPT_OptimizingCompilerException(""String_Node_Str"",""String_Node_Str"",OPT_Assembler.MAX_24_BITS);
return machinecodeLength;
}","/** 
 * @param ir the IR to expand
 * @return upperbound on number of machine code instructions that will be generated for this IR
 */
public final static int expand(OPT_IR ir){
  int instructionCount=0;
  int conditionalBranchCount=0;
  int machinecodeLength=0;
  boolean frameCreated=false;
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  for (OPT_Instruction p=ir.firstInstructionInCodeOrder(); p != null; p=p.nextInstructionInCodeOrder()) {
    p.setmcOffset(-1);
    p.scratchObject=null;
switch (p.getOpcode()) {
case MIR_LOWTABLESWITCH_opcode:
{
        OPT_BasicBlock tableBlock=p.getBasicBlock();
        OPT_BasicBlock nextBlock=tableBlock.splitNodeWithLinksAt(p.prevInstructionInCodeOrder(),ir);
        nextBlock.firstInstruction().setmcOffset(-1);
        OPT_Register regI=MIR_LowTableSwitch.getIndex(p).register;
        int NumTargets=MIR_LowTableSwitch.getNumberOfTargets(p);
        tableBlock.appendInstruction(MIR_Call.create0(PPC_BL,null,null,nextBlock.makeJumpTarget()));
        for (int i=0; i < NumTargets; i++) {
          tableBlock.appendInstruction(MIR_DataLabel.create(PPC_DATA_LABEL,MIR_LowTableSwitch.getClearTarget(p,i)));
        }
        OPT_Register temp=phys.getGPR(0);
        p.insertBack(MIR_Move.create(PPC_MFSPR,A(temp),A(phys.getLR())));
        p.insertBack(MIR_Binary.create(PPC_SLWI,I(regI),I(regI),IC(2)));
        p.insertBack(MIR_LoadUpdate.create(PPC_LIntUX,I(temp),I(regI),A(temp)));
        p.insertBack(MIR_Binary.create(PPC_ADD,A(regI),A(regI),I(temp)));
        p.insertBack(MIR_Move.create(PPC_MTSPR,A(phys.getCTR()),A(regI)));
        MIR_Branch.mutate(p,PPC_BCTR);
        instructionCount+=NumTargets + 7;
      }
    break;
case PPC_BCOND2_opcode:
{
    OPT_RegisterOperand cond=MIR_CondBranch2.getClearValue(p);
    p.insertFront(MIR_CondBranch.create(PPC_BCOND,cond.copyU2U(),MIR_CondBranch2.getClearCond2(p),MIR_CondBranch2.getClearTarget2(p),MIR_CondBranch2.getClearBranchProfile2(p)));
    MIR_CondBranch.mutate(p,PPC_BCOND,cond,MIR_CondBranch2.getClearCond1(p),MIR_CondBranch2.getClearTarget1(p),MIR_CondBranch2.getClearBranchProfile1(p));
    conditionalBranchCount++;
  }
break;
case PPC_BLRL_opcode:
case PPC_BCTRL_opcode:
{
if (VM.BuildForIMTInterfaceInvocation) {
  if (MIR_Call.hasMethod(p)) {
    OPT_MethodOperand mo=MIR_Call.getMethod(p);
    if (mo.isInterface()) {
      VM_InterfaceMethodSignature sig=VM_InterfaceMethodSignature.findOrCreate(mo.getMemberRef());
      int signatureId=sig.getId();
      OPT_Instruction s;
      if (OPT_Bits.fits(signatureId,16)) {
        s=MIR_Unary.create(PPC_LDI,I(phys.getGPR(LAST_SCRATCH_GPR)),IC(signatureId));
        p.insertBack(s);
        instructionCount++;
      }
 else {
        s=MIR_Unary.create(PPC_LDIS,I(phys.getGPR(LAST_SCRATCH_GPR)),IC(OPT_Bits.PPCMaskUpper16(signatureId)));
        p.insertBack(s);
        s=MIR_Binary.create(PPC_ADDI,I(phys.getGPR(LAST_SCRATCH_GPR)),I(phys.getGPR(LAST_SCRATCH_GPR)),IC(OPT_Bits.PPCMaskLower16(signatureId)));
        p.insertBack(s);
        instructionCount+=2;
      }
    }
  }
}
instructionCount++;
}
break;
case LABEL_opcode:
case BBEND_opcode:
case UNINT_BEGIN_opcode:
case UNINT_END_opcode:
break;
case RESOLVE_opcode:
{
OPT_Register zero=phys.getGPR(0);
OPT_Register JTOC=phys.getJTOC();
OPT_Register CTR=phys.getCTR();
if (VM.VerifyAssertions) VM._assert(p.bcIndex >= 0 && p.position != null);
Offset offset=VM_Entrypoints.optResolveMethod.getOffset();
if (OPT_Bits.fits(offset,16)) {
p.insertBefore(MIR_Load.create(PPC_LAddr,A(zero),A(JTOC),IC(OPT_Bits.PPCMaskLower16(offset))));
}
 else {
if (VM.VerifyAssertions) VM._assert(OPT_Bits.fits(offset,32));
p.insertBefore(MIR_Binary.create(PPC_ADDIS,A(zero),A(JTOC),IC(OPT_Bits.PPCMaskUpper16(offset))));
p.insertBefore(MIR_Load.create(PPC_LAddr,A(zero),A(zero),IC(OPT_Bits.PPCMaskLower16(offset))));
instructionCount+=1;
}
p.insertBefore(MIR_Move.create(PPC_MTSPR,A(CTR),A(zero)));
instructionCount+=3;
MIR_Call.mutate0(p,PPC_BCTRL,null,null);
break;
}
case YIELDPOINT_PROLOGUE_opcode:
{
OPT_Register TSR=phys.getTSR();
OPT_BasicBlock yieldpoint=findOrCreateYieldpointBlock(ir,VM_Thread.PROLOGUE);
MIR_CondCall.mutate0(p,PPC_BCL,null,null,I(TSR),OPT_PowerPCConditionOperand.NOT_EQUAL(),yieldpoint.makeJumpTarget());
p.getBasicBlock().insertOut(yieldpoint);
conditionalBranchCount++;
}
break;
case YIELDPOINT_BACKEDGE_opcode:
{
OPT_BasicBlock yieldpoint=findOrCreateYieldpointBlock(ir,VM_Thread.BACKEDGE);
OPT_Register zero=phys.getGPR(0);
OPT_Register TSR=phys.getTSR();
OPT_Register PR=phys.getPR();
Offset offset=VM_Entrypoints.takeYieldpointField.getOffset();
if (VM.VerifyAssertions) VM._assert(OPT_Bits.fits(offset,16));
p.insertBefore(MIR_Load.create(PPC_LInt,I(zero),A(PR),IC(OPT_Bits.PPCMaskLower16(offset))));
p.insertBefore(MIR_Binary.create(PPC_CMPI,I(TSR),I(zero),IC(0)));
instructionCount+=2;
MIR_CondCall.mutate0(p,PPC_BCL,null,null,I(TSR),OPT_PowerPCConditionOperand.GREATER(),yieldpoint.makeJumpTarget());
p.getBasicBlock().insertOut(yieldpoint);
conditionalBranchCount++;
}
break;
case YIELDPOINT_EPILOGUE_opcode:
{
OPT_BasicBlock yieldpoint=findOrCreateYieldpointBlock(ir,VM_Thread.EPILOGUE);
OPT_Register zero=phys.getGPR(0);
OPT_Register TSR=phys.getTSR();
OPT_Register PR=phys.getPR();
Offset offset=VM_Entrypoints.takeYieldpointField.getOffset();
if (VM.VerifyAssertions) VM._assert(OPT_Bits.fits(offset,16));
p.insertBefore(MIR_Load.create(PPC_LInt,I(zero),A(PR),IC(OPT_Bits.PPCMaskLower16(offset))));
p.insertBefore(MIR_Binary.create(PPC_CMPI,I(TSR),I(zero),IC(0)));
instructionCount+=2;
MIR_CondCall.mutate0(p,PPC_BCL,null,null,I(TSR),OPT_PowerPCConditionOperand.NOT_EQUAL(),yieldpoint.makeJumpTarget());
p.getBasicBlock().insertOut(yieldpoint);
conditionalBranchCount++;
}
break;
case YIELDPOINT_OSR_opcode:
{
OPT_BasicBlock yieldpoint=findOrCreateYieldpointBlock(ir,VM_Thread.OSROPT);
MIR_Call.mutate0(p,PPC_BL,null,null,yieldpoint.makeJumpTarget());
p.getBasicBlock().insertOut(yieldpoint);
}
instructionCount++;
break;
default :
if (p.operator().isConditionalBranch()) conditionalBranchCount++;
 else instructionCount++;
break;
}
}
if ((instructionCount + conditionalBranchCount) > OPT_Assembler.MAX_COND_DISPL) machinecodeLength=instructionCount + 2 * conditionalBranchCount;
 else machinecodeLength=instructionCount + conditionalBranchCount;
if ((machinecodeLength & ~OPT_Assembler.MAX_24_BITS) != 0) throw new OPT_OptimizingCompilerException(""String_Node_Str"",""String_Node_Str"",OPT_Assembler.MAX_24_BITS);
return machinecodeLength;
}",0.9193157735392068
149977,"/** 
 * Schedule prologue for 'normal' case (see above)
 */
final void insertNormalPrologue(){
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  OPT_Register FP=phys.getFP();
  OPT_Register PR=phys.getPR();
  OPT_Register TSR=phys.getTSR();
  OPT_Register R0=phys.getTemp();
  OPT_Register S0=phys.getGPR(FIRST_SCRATCH_GPR);
  OPT_Register S1=phys.getGPR(LAST_SCRATCH_GPR);
  boolean interruptible=ir.method.isInterruptible();
  boolean stackOverflow=interruptible;
  boolean yp=hasPrologueYieldpoint();
  int frameFixedSize=getFrameFixedSize();
  ir.compiledMethod.setFrameFixedSize(frameFixedSize);
  if (frameFixedSize >= STACK_SIZE_GUARD || ir.compiledMethod.isSaveVolatile()) {
    insertExceptionalPrologue();
    return;
  }
  OPT_Instruction ptr=ir.firstInstructionInCodeOrder().nextInstructionInCodeOrder();
  if (VM.VerifyAssertions)   VM._assert(ptr.getOpcode() == IR_PROLOGUE_opcode);
  ptr.insertBefore(MIR_Move.create(PPC_MFSPR,A(R0),A(phys.getLR())));
  if (yp) {
    Offset offset=VM_Entrypoints.takeYieldpointField.getOffset();
    if (VM.VerifyAssertions)     VM._assert(OPT_Bits.fits(offset,16));
    ptr.insertBefore(MIR_Load.create(PPC_LInt,I(S1),A(PR),IC(OPT_Bits.PPCMaskLower16(offset))));
  }
  ptr.insertBefore(MIR_StoreUpdate.create(PPC_STAddrU,A(FP),A(FP),IC(-frameSize)));
  if (stackOverflow) {
    Offset offset=VM_Entrypoints.activeThreadStackLimitField.getOffset();
    if (VM.VerifyAssertions)     VM._assert(OPT_Bits.fits(offset,16));
    ptr.insertBefore(MIR_Load.create(PPC_LAddr,A(S0),A(phys.getPR()),IC(OPT_Bits.PPCMaskLower16(offset))));
  }
  saveNonVolatiles(ptr);
  if (yp) {
    ptr.insertBefore(MIR_Binary.create(PPC_CMPI,I(TSR),I(S1),IC(0)));
  }
  int cmid=ir.compiledMethod.getId();
  if (cmid <= 0x7fff) {
    ptr.insertBefore(MIR_Unary.create(PPC_LDI,I(S1),IC(cmid)));
  }
 else {
    ptr.insertBefore(MIR_Unary.create(PPC_LDIS,I(S1),IC(cmid >>> 16)));
    ptr.insertBefore(MIR_Binary.create(PPC_ORI,I(S1),I(S1),IC(cmid & 0xffff)));
  }
  ptr.insertBefore(MIR_Store.create(PPC_STAddr,A(R0),A(FP),IC(frameSize + STACKFRAME_NEXT_INSTRUCTION_OFFSET)));
  ptr.insertBefore(MIR_Store.create(PPC_STW,I(S1),A(FP),IC(STACKFRAME_METHOD_ID_OFFSET)));
  ptr.insertBefore(Empty.create(IR_ENDPROLOGUE));
  if (stackOverflow) {
    MIR_Trap.mutate(ptr,PPC_TAddr,OPT_PowerPCTrapOperand.GREATER(),A(S0),A(FP),OPT_TrapCodeOperand.StackOverflow());
  }
 else {
    ptr.remove();
  }
}","/** 
 * Schedule prologue for 'normal' case (see above)
 */
final void insertNormalPrologue(){
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  OPT_Register FP=phys.getFP();
  OPT_Register PR=phys.getPR();
  OPT_Register TSR=phys.getTSR();
  OPT_Register R0=phys.getTemp();
  OPT_Register S0=phys.getGPR(FIRST_SCRATCH_GPR);
  OPT_Register S1=phys.getGPR(LAST_SCRATCH_GPR);
  boolean interruptible=ir.method.isInterruptible();
  boolean stackOverflow=interruptible;
  boolean yp=hasPrologueYieldpoint();
  int frameFixedSize=getFrameFixedSize();
  ir.compiledMethod.setFrameFixedSize(frameFixedSize);
  if (frameFixedSize >= STACK_SIZE_GUARD || ir.compiledMethod.isSaveVolatile()) {
    insertExceptionalPrologue();
    return;
  }
  OPT_Instruction ptr=ir.firstInstructionInCodeOrder().nextInstructionInCodeOrder();
  if (VM.VerifyAssertions)   VM._assert(ptr.getOpcode() == IR_PROLOGUE_opcode);
  ptr.insertBefore(MIR_Move.create(PPC_MFSPR,A(R0),A(phys.getLR())));
  if (yp) {
    Offset offset=VM_Entrypoints.takeYieldpointField.getOffset();
    if (VM.VerifyAssertions)     VM._assert(OPT_Bits.fits(offset,16));
    ptr.insertBefore(MIR_Load.create(PPC_LInt,I(S1),A(PR),IC(OPT_Bits.PPCMaskLower16(offset))));
  }
  ptr.insertBefore(MIR_StoreUpdate.create(PPC_STAddrU,A(FP),A(FP),IC(-frameSize)));
  if (stackOverflow) {
    Offset offset=VM_Entrypoints.activeThreadStackLimitField.getOffset();
    if (VM.VerifyAssertions)     VM._assert(OPT_Bits.fits(offset,16));
    ptr.insertBefore(MIR_Load.create(PPC_LAddr,A(S0),A(phys.getPR()),IC(OPT_Bits.PPCMaskLower16(offset))));
  }
  saveNonVolatiles(ptr);
  if (yp) {
    ptr.insertBefore(MIR_Binary.create(PPC_CMPI,I(TSR),I(S1),IC(0)));
  }
  int cmid=ir.compiledMethod.getId();
  if (cmid <= 0x7fff) {
    ptr.insertBefore(MIR_Unary.create(PPC_LDI,I(S1),IC(cmid)));
  }
 else {
    ptr.insertBefore(MIR_Unary.create(PPC_LDIS,I(S1),IC(cmid >>> 16)));
    ptr.insertBefore(MIR_Binary.create(PPC_ORI,I(S1),I(S1),IC(cmid & 0xffff)));
  }
  ptr.insertBefore(MIR_Store.create(PPC_STAddr,A(R0),A(FP),IC(frameSize + STACKFRAME_NEXT_INSTRUCTION_OFFSET)));
  ptr.insertBefore(MIR_Store.create(PPC_STW,I(S1),A(FP),IC(STACKFRAME_METHOD_ID_OFFSET)));
  if (stackOverflow) {
    MIR_Trap.mutate(ptr,PPC_TAddr,OPT_PowerPCTrapOperand.GREATER(),A(S0),A(FP),OPT_TrapCodeOperand.StackOverflow());
  }
 else {
    ptr.remove();
  }
}",0.9896265560165975
149978,"/** 
 * prologue for the exceptional case. (1) R0 is the only available scratch register. (2) stack overflow check has to come first.
 */
final void insertExceptionalPrologue(){
  if (frameSize >= 0x7ff0) {
    throw new OPT_OptimizingCompilerException(""String_Node_Str"");
  }
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  OPT_Register FP=phys.getFP();
  OPT_Register PR=phys.getPR();
  OPT_Register TSR=phys.getTSR();
  OPT_Register R0=phys.getTemp();
  OPT_Register S1=phys.getGPR(LAST_SCRATCH_GPR);
  boolean interruptible=ir.method.isInterruptible();
  boolean stackOverflow=interruptible;
  boolean yp=hasPrologueYieldpoint();
  OPT_Instruction ptr=ir.firstInstructionInCodeOrder().nextInstructionInCodeOrder();
  if (VM.VerifyAssertions)   VM._assert(ptr.getOpcode() == IR_PROLOGUE_opcode);
  if (stackOverflow) {
    ptr.insertBefore(MIR_Store.create(PPC_STAddr,A(S1),A(FP),IC(STACKFRAME_NEXT_INSTRUCTION_OFFSET)));
    Offset offset=VM_Entrypoints.activeThreadStackLimitField.getOffset();
    if (VM.VerifyAssertions)     VM._assert(OPT_Bits.fits(offset,16));
    ptr.insertBefore(MIR_Load.create(PPC_LAddr,A(S1),A(phys.getPR()),IC(OPT_Bits.PPCMaskLower16(offset))));
    ptr.insertBefore(MIR_Binary.create(PPC_ADDI,A(R0),A(S1),IC(frameSize)));
    ptr.insertBefore(MIR_Load.create(PPC_LAddr,A(S1),A(FP),IC(STACKFRAME_NEXT_INSTRUCTION_OFFSET)));
    MIR_Trap.mutate(ptr,PPC_TAddr,OPT_PowerPCTrapOperand.LESS(),A(FP),A(R0),OPT_TrapCodeOperand.StackOverflow());
    ptr=ptr.nextInstructionInCodeOrder();
  }
 else {
    OPT_Instruction next=ptr.nextInstructionInCodeOrder();
    ptr.remove();
    ptr=next;
  }
  ptr.insertBefore(MIR_Move.create(PPC_MFSPR,A(R0),A(phys.getLR())));
  ptr.insertBefore(MIR_StoreUpdate.create(PPC_STAddrU,A(FP),A(FP),IC(-frameSize)));
  ptr.insertBefore(MIR_Store.create(PPC_STAddr,A(R0),A(FP),IC(frameSize + STACKFRAME_NEXT_INSTRUCTION_OFFSET)));
  int cmid=ir.compiledMethod.getId();
  if (cmid <= 0x7fff) {
    ptr.insertBefore(MIR_Unary.create(PPC_LDI,I(R0),IC(cmid)));
  }
 else {
    ptr.insertBefore(MIR_Unary.create(PPC_LDIS,I(R0),IC(cmid >>> 16)));
    ptr.insertBefore(MIR_Binary.create(PPC_ORI,I(R0),I(R0),IC(cmid & 0xffff)));
  }
  ptr.insertBefore(MIR_Store.create(PPC_STW,I(R0),A(FP),IC(STACKFRAME_METHOD_ID_OFFSET)));
  if (ir.compiledMethod.isSaveVolatile()) {
    saveVolatiles(ptr);
  }
  saveNonVolatiles(ptr);
  if (yp) {
    Offset offset=VM_Entrypoints.takeYieldpointField.getOffset();
    if (VM.VerifyAssertions)     VM._assert(OPT_Bits.fits(offset,16));
    ptr.insertBefore(MIR_Load.create(PPC_LInt,I(R0),A(PR),IC(OPT_Bits.PPCMaskLower16(offset))));
    ptr.insertBefore(MIR_Binary.create(PPC_CMPI,I(TSR),I(R0),IC(0)));
  }
  ptr.insertBefore(Empty.create(IR_ENDPROLOGUE));
}","/** 
 * prologue for the exceptional case. (1) R0 is the only available scratch register. (2) stack overflow check has to come first.
 */
final void insertExceptionalPrologue(){
  if (frameSize >= 0x7ff0) {
    throw new OPT_OptimizingCompilerException(""String_Node_Str"");
  }
  OPT_PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();
  OPT_Register FP=phys.getFP();
  OPT_Register PR=phys.getPR();
  OPT_Register TSR=phys.getTSR();
  OPT_Register R0=phys.getTemp();
  OPT_Register S1=phys.getGPR(LAST_SCRATCH_GPR);
  boolean interruptible=ir.method.isInterruptible();
  boolean stackOverflow=interruptible;
  boolean yp=hasPrologueYieldpoint();
  OPT_Instruction ptr=ir.firstInstructionInCodeOrder().nextInstructionInCodeOrder();
  if (VM.VerifyAssertions)   VM._assert(ptr.getOpcode() == IR_PROLOGUE_opcode);
  if (stackOverflow) {
    ptr.insertBefore(MIR_Store.create(PPC_STAddr,A(S1),A(FP),IC(STACKFRAME_NEXT_INSTRUCTION_OFFSET)));
    Offset offset=VM_Entrypoints.activeThreadStackLimitField.getOffset();
    if (VM.VerifyAssertions)     VM._assert(OPT_Bits.fits(offset,16));
    ptr.insertBefore(MIR_Load.create(PPC_LAddr,A(S1),A(phys.getPR()),IC(OPT_Bits.PPCMaskLower16(offset))));
    ptr.insertBefore(MIR_Binary.create(PPC_ADDI,A(R0),A(S1),IC(frameSize)));
    ptr.insertBefore(MIR_Load.create(PPC_LAddr,A(S1),A(FP),IC(STACKFRAME_NEXT_INSTRUCTION_OFFSET)));
    MIR_Trap.mutate(ptr,PPC_TAddr,OPT_PowerPCTrapOperand.LESS(),A(FP),A(R0),OPT_TrapCodeOperand.StackOverflow());
    ptr=ptr.nextInstructionInCodeOrder();
  }
 else {
    OPT_Instruction next=ptr.nextInstructionInCodeOrder();
    ptr.remove();
    ptr=next;
  }
  ptr.insertBefore(MIR_Move.create(PPC_MFSPR,A(R0),A(phys.getLR())));
  ptr.insertBefore(MIR_StoreUpdate.create(PPC_STAddrU,A(FP),A(FP),IC(-frameSize)));
  ptr.insertBefore(MIR_Store.create(PPC_STAddr,A(R0),A(FP),IC(frameSize + STACKFRAME_NEXT_INSTRUCTION_OFFSET)));
  int cmid=ir.compiledMethod.getId();
  if (cmid <= 0x7fff) {
    ptr.insertBefore(MIR_Unary.create(PPC_LDI,I(R0),IC(cmid)));
  }
 else {
    ptr.insertBefore(MIR_Unary.create(PPC_LDIS,I(R0),IC(cmid >>> 16)));
    ptr.insertBefore(MIR_Binary.create(PPC_ORI,I(R0),I(R0),IC(cmid & 0xffff)));
  }
  ptr.insertBefore(MIR_Store.create(PPC_STW,I(R0),A(FP),IC(STACKFRAME_METHOD_ID_OFFSET)));
  if (ir.compiledMethod.isSaveVolatile()) {
    saveVolatiles(ptr);
  }
  saveNonVolatiles(ptr);
  if (yp) {
    Offset offset=VM_Entrypoints.takeYieldpointField.getOffset();
    if (VM.VerifyAssertions)     VM._assert(OPT_Bits.fits(offset,16));
    ptr.insertBefore(MIR_Load.create(PPC_LInt,I(R0),A(PR),IC(OPT_Bits.PPCMaskLower16(offset))));
    ptr.insertBefore(MIR_Binary.create(PPC_CMPI,I(TSR),I(R0),IC(0)));
  }
}",0.9908625730994152
149979,"/** 
 * Mark the compiled method as obsolete (ie a candidate for eventual GC)
 */
public final void setObsolete(boolean sense) throws UninterruptiblePragma {
  if (sense) {
    bitField1|=OBSOLETE;
  }
 else {
    bitField1&=~OBSOLETE;
  }
}","/** 
 * Mark the compiled method as obsolete (ie a candidate for eventual GC)
 */
public final void setObsolete() throws UninterruptiblePragma {
  bitField1|=OBSOLETE;
}",0.824390243902439
149980,"public static synchronized void setCompiledMethodObsolete(VM_CompiledMethod compiledMethod){
  if (compiledMethod.isObsolete())   return;
  int cmid=compiledMethod.getId();
  if (compiledMethod.getMethod().getDeclaringClass().isJavaLangObjectType())   return;
  if (VM.VerifyAssertions)   VM._assert(compiledMethods[cmid] != null);
  if (obsoleteMethods == null) {
    obsoleteMethods=new int[100];
  }
 else   if (obsoleteMethodCount >= obsoleteMethods.length) {
    int newArray[]=new int[obsoleteMethods.length * 2];
    VM.disableGC();
    for (int i=0, n=obsoleteMethods.length; i < n; ++i) {
      newArray[i]=obsoleteMethods[i];
    }
    VM.enableGC();
    obsoleteMethods=newArray;
  }
  compiledMethod.setObsolete(true);
  obsoleteMethods[obsoleteMethodCount++]=cmid;
}","public static void setCompiledMethodObsolete(VM_CompiledMethod compiledMethod){
  if (compiledMethod.getMethod().getDeclaringClass().isJavaLangObjectType())   return;
  compiledMethod.setObsolete();
  VM_Magic.sync();
  scanForObsoleteMethods=true;
}",0.3401360544217687
149981,"public synchronized static void snipObsoleteCompiledMethods(){
  if (obsoleteMethods == null)   return;
  int oldCount=obsoleteMethodCount;
  obsoleteMethodCount=0;
  for (int i=0; i < oldCount; i++) {
    int currCM=obsoleteMethods[i];
    if (compiledMethods[currCM].isObsolete()) {
      compiledMethods[currCM]=null;
    }
 else {
      obsoleteMethods[obsoleteMethodCount++]=currCM;
      compiledMethods[currCM].setObsolete(true);
    }
  }
}","public static void snipObsoleteCompiledMethods(){
  VM_Magic.isync();
  if (!scanForObsoleteMethods)   return;
  scanForObsoleteMethods=false;
  VM_Magic.sync();
  int max=numCompiledMethods();
  for (int i=0; i < numCompiledMethods(); i++) {
    VM_CompiledMethod cm=compiledMethods[i];
    if (cm != null) {
      if (cm.isActiveOnStack()) {
        if (cm.isObsolete()) {
          scanForObsoleteMethods=true;
          VM_Magic.sync();
        }
        cm.clearActiveOnStack();
      }
 else {
        if (cm.isObsolete()) {
          compiledMethods[i]=null;
        }
      }
    }
  }
}",0.1553211888782358
149982,"/** 
 * Scan the current stack frame.<p> First the various iterators are set up, then the frame is scanned for regular pointers, before scanning for code pointers.  The iterators are then cleaned up, and native frames skipped if necessary.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private Address scanFrame(int verbosity){
  if (!setUpFrame(verbosity))   return fp;
  scanFrameForObjects(verbosity);
  if (processCodeLocations)   processFrameForCode(verbosity);
  iterator.cleanupPointers();
  if (compiledMethod.getMethod().getDeclaringClass().isBridgeFromNative()) {
    fp=VM_Runtime.unwindNativeStackFrameForGC(fp);
    if (verbosity >= 1)     Log.write(""String_Node_Str"");
  }
  return fp;
}","/** 
 * Scan the current stack frame.<p> First the various iterators are set up, then the frame is scanned for regular pointers, before scanning for code pointers.  The iterators are then cleaned up, and native frames skipped if necessary.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private Address scanFrame(int verbosity){
  if (!setUpFrame(verbosity))   return fp;
  scanFrameForObjects(verbosity);
  if (processCodeLocations && compiledMethodType != VM_CompiledMethod.TRAP)   processFrameForCode(verbosity);
  iterator.cleanupPointers();
  if (compiledMethodType != VM_CompiledMethod.TRAP && compiledMethod.getMethod().getDeclaringClass().isBridgeFromNative()) {
    fp=VM_Runtime.unwindNativeStackFrameForGC(fp);
    if (verbosity >= 1)     Log.write(""String_Node_Str"");
  }
  return fp;
}",0.9147582697201018
149983,"/** 
 * Check that a reference encountered during scanning is valid.  If the reference is invalid, dump stack and die.
 * @param refaddr The address of the reference in question.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void checkReference(Address refaddr,int verbosity){
  ObjectReference ref=refaddr.loadObjectReference();
  if (!MM_Interface.validRef(ref)) {
    Log.write(""String_Node_Str"");
    printMethodHeader();
    Log.write(refaddr);
    Log.write(""String_Node_Str"");
    MM_Interface.dumpRef(ref);
    dumpStackFrame(verbosity);
    Log.write(""String_Node_Str"");
    VM_Scheduler.dumpStack(ip,fp);
    Address top_ip=thread.contextRegisters.getInnermostInstructionAddress();
    Address top_fp=thread.contextRegisters.getInnermostFramePointer();
    VM_Scheduler.dumpStack(top_ip,top_fp);
    VM.sysFail(""String_Node_Str"");
  }
}","/** 
 * Check that a reference encountered during scanning is valid.  If the reference is invalid, dump stack and die.
 * @param refaddr The address of the reference in question.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void checkReference(Address refaddr,int verbosity){
  ObjectReference ref=refaddr.loadObjectReference();
  if (!MM_Interface.validRef(ref)) {
    Log.writeln();
    Log.writeln(""String_Node_Str"");
    printMethodHeader();
    Log.write(refaddr);
    Log.write(""String_Node_Str"");
    Log.flush();
    MM_Interface.dumpRef(ref);
    dumpStackFrame(verbosity);
    Log.writeln();
    Log.writeln(""String_Node_Str"");
    VM_Scheduler.dumpStack(ip,fp);
    Address top_ip=thread.contextRegisters.getInnermostInstructionAddress();
    Address top_fp=thread.contextRegisters.getInnermostFramePointer();
    VM_Scheduler.dumpStack(top_ip,top_fp);
    VM.sysFail(""String_Node_Str"");
  }
}",0.9679521998913634
149984,"/** 
 * Dump the contents of a stack frame. Attempts to interpret each word as an object reference
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void dumpStackFrame(int verbosity){
  Address start, end;
  if (VM.BuildForIA32) {
    if (prevFp.isZero()) {
      start=fp.minus(20 * BYTES_IN_ADDRESS);
      Log.writeln(""String_Node_Str"",fp);
    }
 else {
      start=prevFp;
    }
    end=fp;
  }
 else {
    start=fp;
    end=fp.loadAddress();
  }
  for (Address loc=start; loc.LT(end); loc=loc.plus(BYTES_IN_ADDRESS)) {
    Log.write(loc);
    Log.write(""String_Node_Str"");
    Log.write(loc.diff(start));
    Log.write(""String_Node_Str"");
    ObjectReference value=loc.loadObjectReference();
    Log.write(value);
    Log.write(""String_Node_Str"");
    Log.flush();
    if (verbosity >= 3 && MM_Interface.objectInVM(value) && loc.NE(start) && loc.NE(end))     MM_Interface.dumpRef(value);
 else     Log.write(""String_Node_Str"");
  }
  Log.write(""String_Node_Str"");
}","/** 
 * Dump the contents of a stack frame. Attempts to interpret each word as an object reference
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void dumpStackFrame(int verbosity){
  Address start, end;
  if (VM.BuildForIA32) {
    if (prevFp.isZero()) {
      start=fp.minus(20 * BYTES_IN_ADDRESS);
      Log.writeln(""String_Node_Str"",fp);
    }
 else {
      start=prevFp;
    }
    end=fp;
  }
 else {
    start=fp;
    end=fp.loadAddress();
  }
  for (Address loc=start; loc.LT(end); loc=loc.plus(BYTES_IN_ADDRESS)) {
    Log.write(loc);
    Log.write(""String_Node_Str"");
    Log.write(loc.diff(start));
    Log.write(""String_Node_Str"");
    ObjectReference value=loc.loadObjectReference();
    Log.write(value);
    Log.write(""String_Node_Str"");
    Log.flush();
    if (verbosity >= 3 && MM_Interface.objectInVM(value) && loc.NE(start) && loc.NE(end))     MM_Interface.dumpRef(value);
 else     Log.writeln();
  }
  Log.writeln();
}",0.9789579158316634
149985,"/** 
 * Set up to scan the current stack frame.  This means examining the frame to discover the method being invoked and then retrieving the associated metadata (stack maps etc).  Certain frames should not be scanned---these are identified and skipped.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 * @return True if the frame should be scanned, false if it shouldbe skipped.
 */
private boolean setUpFrame(int verbosity){
  int compiledMethodId=VM_Magic.getCompiledMethodID(fp);
  if (compiledMethodId == VM_Constants.INVISIBLE_METHOD_ID) {
    if (verbosity >= 1)     Log.writeln(""String_Node_Str"");
    return false;
  }
  compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethodId);
  compiledMethod.setObsolete(false);
  compiledMethodType=compiledMethod.getCompilerType();
  if (verbosity >= 1)   printMethodHeader();
  if (compiledMethodType == VM_CompiledMethod.TRAP)   return false;
  Offset offset=compiledMethod.getInstructionOffset(ip);
  iterator=iteratorGroup.selectIterator(compiledMethod);
  iterator.setupIterator(compiledMethod,offset,fp);
  if (verbosity >= 2)   dumpStackFrame(verbosity);
  if (verbosity >= 3)   Log.writeln(""String_Node_Str"");
  return true;
}","/** 
 * Set up to scan the current stack frame.  This means examining the frame to discover the method being invoked and then retrieving the associated metadata (stack maps etc).  Certain frames should not be scanned---these are identified and skipped.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 * @return True if the frame should be scanned, false if it shouldbe skipped.
 */
private boolean setUpFrame(int verbosity){
  int compiledMethodId=VM_Magic.getCompiledMethodID(fp);
  if (compiledMethodId == VM_Constants.INVISIBLE_METHOD_ID) {
    if (verbosity >= 1)     Log.writeln(""String_Node_Str"");
    return false;
  }
  compiledMethod=VM_CompiledMethods.getCompiledMethod(compiledMethodId);
  compiledMethod.setObsolete(false);
  compiledMethodType=compiledMethod.getCompilerType();
  if (verbosity >= 1)   printMethodHeader();
  Offset offset=compiledMethod.getInstructionOffset(ip);
  iterator=iteratorGroup.selectIterator(compiledMethod);
  iterator.setupIterator(compiledMethod,offset,fp);
  if (verbosity >= 2)   dumpStackFrame(verbosity);
  if (verbosity >= 3)   Log.writeln(""String_Node_Str"");
  return true;
}",0.9714525608732156
149986,"public Address getNextReturnAddressAddress(){
  if (mapId >= 0) {
    if (VM.TraceStkMaps) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(mapId);
      VM.sysWrite(""String_Node_Str"");
    }
    return Address.zero();
  }
  mapIndex=maps.getNextJSRReturnAddrIndex(mapIndex);
  if (VM.TraceStkMaps) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(mapIndex);
    VM.sysWrite(""String_Node_Str"");
  }
  if (mapIndex == VM_QuickReferenceMaps.NOMORE) {
    return Address.zero();
  }
 else {
    int location=maps.getLocation(mapId,mapIndex);
    if (VM.TraceStkMaps) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(location);
      VM.sysWriteln();
    }
    if (VM_QuickCompiler.isRegister(location))     return registerLocations.get(VM_QuickCompiler.locationToRegister(location)).toAddress();
 else     return framePtr.add(VM_QuickCompiler.locationToOffset(location));
  }
}","public Address getNextReturnAddressAddress(){
  if (mapId >= 0) {
    if (VM.TraceStkMaps) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(mapId);
      VM.sysWrite(""String_Node_Str"");
    }
    return Address.zero();
  }
  mapIndex=maps.getNextJSRReturnAddrIndex(mapIndex);
  if (VM.TraceStkMaps) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(mapIndex);
    VM.sysWrite(""String_Node_Str"");
  }
  if (mapIndex == VM_QuickReferenceMaps.NOMORE) {
    return Address.zero();
  }
 else {
    int location=maps.getLocation(mapId,mapIndex);
    if (VM.TraceStkMaps) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(location);
      VM.sysWriteln();
    }
    if (VM_QuickCompiler.isRegister(location))     return registerLocations.get(VM_QuickCompiler.locationToRegister(location)).toAddress();
 else     return framePtr.plus(VM_QuickCompiler.locationToOffset(location));
  }
}",0.996100278551532
149987,"private void updateCallerRegisterLocations(){
  Address addr=framePtr.add(VM_QuickCompiler.getCallerSaveOffset(currentMethod));
  for (int i=VM_QuickCompiler.min(maps.firstFixedLocalRegister,maps.firstFixedStackRegister); i <= VM_QuickCompiler.max(maps.lastFixedLocalRegister,maps.lastFixedStackRegister); i++) {
    registerLocations.set(i,addr);
    addr=addr.sub(4);
  }
  registerLocations.set(S1,addr);
  addr=addr.sub(4);
  registerLocations.set(S0,addr);
}","private void updateCallerRegisterLocations(){
  Address addr=framePtr.plus(VM_QuickCompiler.getCallerSaveOffset(currentMethod));
  for (int i=VM_QuickCompiler.min(maps.firstFixedLocalRegister,maps.firstFixedStackRegister); i <= VM_QuickCompiler.max(maps.lastFixedLocalRegister,maps.lastFixedStackRegister); i++) {
    registerLocations.set(i,addr);
    addr=addr.minus(4);
  }
  registerLocations.set(S1,addr);
  addr=addr.minus(4);
  registerLocations.set(S0,addr);
}",0.9752953813104188
149988,"public Address getNextReferenceAddress(){
  int location=-1;
  if (state == CHECK_REFERENCE_STATE) {
    do {
      if (mapId < 0)       mapIndex=maps.getNextJSRRefIndex(mapIndex);
 else       mapIndex=maps.getNextRefIndex(mapIndex,mapId);
      if (mapIndex == VM_QuickReferenceMaps.NOMORE) {
        state+=1;
        break;
      }
 else {
        location=maps.getLocation(mapId,mapIndex);
      }
    }
 while (location == EMPTY_SLOT);
    if (location == INVALID_SLOT) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(mapIndex);
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(mapId);
      VM.sysWrite(""String_Node_Str"");
      return Address.max();
    }
    if (VM.TraceStkMaps) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(mapIndex);
      VM.sysWrite(""String_Node_Str"");
      if (mapId < 0)       VM.sysWrite(""String_Node_Str"");
    }
  }
  if (state == CHECK_REFERENCE_STATE) {
    if (VM.TraceStkMaps) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(location);
    }
    if (location > 0) {
      if (VM.TraceStkMaps) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(location);
        VM.sysWrite(""String_Node_Str"");
      }
      return registerLocations.get(location).toAddress();
    }
 else {
      int offset=maps.locationToOffset(mapIndex);
      if (VM.TraceStkMaps) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWriteHex(offset);
        VM.sysWrite(""String_Node_Str"");
      }
      return (framePtr.add(offset));
    }
  }
 else   if (state == CHECK_THIS_PTR_STATE) {
    state+=1;
    if (checkSavedThisPtr && maps.getSavedThisPtrOffset() >= 0) {
      if (VM.TraceStkMaps) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(maps.getSavedThisPtrOffset());
        VM.sysWrite(""String_Node_Str"");
      }
      checkSavedThisPtr=false;
      return framePtr.add(maps.getSavedThisPtrOffset());
    }
  }
 else   if (state == CHECK_BRIDGE_REFERENCE_STATE && bridgeParameterMappingRequired) {
    if (VM.TraceStkMaps) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(bridgeTarget);
      VM.sysWrite(""String_Node_Str"");
    }
    if (!bridgeRegistersLocationUpdated) {
      Address addr=framePtr.add(VM_Compiler.getFrameSize(currentMethod));
      addr=addr.sub((LAST_NONVOLATILE_FPR - FIRST_VOLATILE_FPR + 1) * BYTES_IN_DOUBLE);
      for (int i=LAST_NONVOLATILE_GPR; i >= FIRST_VOLATILE_GPR; --i) {
        addr=addr.sub(BYTES_IN_ADDRESS);
        registerLocations.set(i,addr);
      }
      bridgeRegistersLocationUpdated=true;
    }
    if (bridgeParameterIndex == -1) {
      bridgeParameterIndex+=1;
      bridgeRegisterIndex+=1;
      bridgeRegisterLocation=bridgeRegisterLocation.add(4);
      return bridgeRegisterLocation.sub(4);
    }
    while (true) {
      if (bridgeParameterIndex == bridgeParameterTypes.length || bridgeRegisterIndex > LAST_VOLATILE_GPR) {
        bridgeParameterMappingRequired=false;
        state+=1;
        break;
      }
      VM_TypeReference bridgeParameterType=bridgeParameterTypes[bridgeParameterIndex++];
      if (bridgeParameterType.isReferenceType()) {
        bridgeRegisterIndex+=1;
        bridgeRegisterLocation=bridgeRegisterLocation.add(4);
        return bridgeRegisterLocation.sub(4);
      }
 else       if (bridgeParameterType.isLongType()) {
        bridgeRegisterIndex+=2;
        bridgeRegisterLocation=bridgeRegisterLocation.add(8);
      }
 else       if (bridgeParameterType.isDoubleType() || bridgeParameterType.isFloatType()) {
      }
 else {
        bridgeRegisterIndex+=1;
        bridgeRegisterLocation=bridgeRegisterLocation.add(4);
      }
    }
  }
  return Address.zero();
}","public Address getNextReferenceAddress(){
  int location=-1;
  if (state == CHECK_REFERENCE_STATE) {
    do {
      if (mapId < 0)       mapIndex=maps.getNextJSRRefIndex(mapIndex);
 else       mapIndex=maps.getNextRefIndex(mapIndex,mapId);
      if (mapIndex == VM_QuickReferenceMaps.NOMORE) {
        state+=1;
        break;
      }
 else {
        location=maps.getLocation(mapId,mapIndex);
      }
    }
 while (location == EMPTY_SLOT);
    if (location == INVALID_SLOT) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(mapIndex);
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(mapId);
      VM.sysWrite(""String_Node_Str"");
      return Address.max();
    }
    if (VM.TraceStkMaps) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(mapIndex);
      VM.sysWrite(""String_Node_Str"");
      if (mapId < 0)       VM.sysWrite(""String_Node_Str"");
    }
  }
  if (state == CHECK_REFERENCE_STATE) {
    if (VM.TraceStkMaps) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(location);
    }
    if (location > 0) {
      if (VM.TraceStkMaps) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(location);
        VM.sysWrite(""String_Node_Str"");
      }
      return registerLocations.get(location).toAddress();
    }
 else {
      int offset=maps.locationToOffset(mapIndex);
      if (VM.TraceStkMaps) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWriteHex(offset);
        VM.sysWrite(""String_Node_Str"");
      }
      return (framePtr.plus(offset));
    }
  }
 else   if (state == CHECK_THIS_PTR_STATE) {
    state+=1;
    if (checkSavedThisPtr && maps.getSavedThisPtrOffset() >= 0) {
      if (VM.TraceStkMaps) {
        VM.sysWrite(""String_Node_Str"");
        VM.sysWrite(maps.getSavedThisPtrOffset());
        VM.sysWrite(""String_Node_Str"");
      }
      checkSavedThisPtr=false;
      return framePtr.plus(maps.getSavedThisPtrOffset());
    }
  }
 else   if (state == CHECK_BRIDGE_REFERENCE_STATE && bridgeParameterMappingRequired) {
    if (VM.TraceStkMaps) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(bridgeTarget);
      VM.sysWrite(""String_Node_Str"");
    }
    if (!bridgeRegistersLocationUpdated) {
      Address addr=framePtr.plus(VM_Compiler.getFrameSize(currentMethod));
      addr=addr.minus((LAST_NONVOLATILE_FPR - FIRST_VOLATILE_FPR + 1) * BYTES_IN_DOUBLE);
      for (int i=LAST_NONVOLATILE_GPR; i >= FIRST_VOLATILE_GPR; --i) {
        addr=addr.minus(BYTES_IN_ADDRESS);
        registerLocations.set(i,addr);
      }
      bridgeRegistersLocationUpdated=true;
    }
    if (bridgeParameterIndex == -1) {
      bridgeParameterIndex+=1;
      bridgeRegisterIndex+=1;
      bridgeRegisterLocation=bridgeRegisterLocation.plus(4);
      return bridgeRegisterLocation.minus(4);
    }
    while (true) {
      if (bridgeParameterIndex == bridgeParameterTypes.length || bridgeRegisterIndex > LAST_VOLATILE_GPR) {
        bridgeParameterMappingRequired=false;
        state+=1;
        break;
      }
      VM_TypeReference bridgeParameterType=bridgeParameterTypes[bridgeParameterIndex++];
      if (bridgeParameterType.isReferenceType()) {
        bridgeRegisterIndex+=1;
        bridgeRegisterLocation=bridgeRegisterLocation.plus(4);
        return bridgeRegisterLocation.minus(4);
      }
 else       if (bridgeParameterType.isLongType()) {
        bridgeRegisterIndex+=2;
        bridgeRegisterLocation=bridgeRegisterLocation.plus(8);
      }
 else       if (bridgeParameterType.isDoubleType() || bridgeParameterType.isFloatType()) {
      }
 else {
        bridgeRegisterIndex+=1;
        bridgeRegisterLocation=bridgeRegisterLocation.plus(4);
      }
    }
  }
  return Address.zero();
}",0.99003140789294
149989,"public void reset(){
  mapIndex=VM_QuickReferenceMaps.STARTINDEX;
  state=CHECK_REFERENCE_STATE;
  checkSavedThisPtr=true;
  if (bridgeTarget != null) {
    bridgeParameterMappingRequired=true;
    bridgeParameterIndex=bridgeParameterInitialIndex;
    bridgeRegisterIndex=FIRST_VOLATILE_GPR;
    bridgeRegisterLocation=framePtr.loadAddress();
    bridgeRegisterLocation=bridgeRegisterLocation.sub(8 * (LAST_NONVOLATILE_FPR - FIRST_VOLATILE_FPR + 1) + 4 * (LAST_NONVOLATILE_GPR - FIRST_VOLATILE_GPR + 1));
  }
}","public void reset(){
  mapIndex=VM_QuickReferenceMaps.STARTINDEX;
  state=CHECK_REFERENCE_STATE;
  checkSavedThisPtr=true;
  if (bridgeTarget != null) {
    bridgeParameterMappingRequired=true;
    bridgeParameterIndex=bridgeParameterInitialIndex;
    bridgeRegisterIndex=FIRST_VOLATILE_GPR;
    bridgeRegisterLocation=framePtr.loadAddress();
    bridgeRegisterLocation=bridgeRegisterLocation.minus(8 * (LAST_NONVOLATILE_FPR - FIRST_VOLATILE_FPR + 1) + 4 * (LAST_NONVOLATILE_GPR - FIRST_VOLATILE_GPR + 1));
  }
}",0.9921722113502937
149990,"/** 
 * Generate call and return sequence to invoke a C function through the boot record field specificed by target.  Caller handles parameter passing and expression stack  (setting up args, pushing return, adjusting stack height). <pre> Create a linkage area that's compatible with RS6000 ""C"" calling conventions. Just before the call, the stack looks like this: hi-mem +-------------------------+  . . . . . . . . |          ...            |                  \ +-------------------------+                   | |          ...            |    \              | +-------------------------+     |             | |       (int val0)        |     |  java       |- java +-------------------------+     |-  operand   |   stack |       (int val1)        |     |    stack    |    frame +-------------------------+     |             | |          ...            |     |             | +-------------------------+     |             | |      (int valN-1)       |     |             | +-------------------------+    /              | |          ...            |                   | +-------------------------+                   | |                         | <-- spot for this frame's callee's return address +-------------------------+                   | |          MI             | <-- this frame's method id +-------------------------+                   | |       saved FP          | <-- this frame's caller's frame +-------------------------+  . . . . . . . . / |      saved JTOC         | +-------------------------+  . . . . . . . . . . . . . . | parameterN-1 save area  | +  \                         \ +-------------------------+     |                         | |          ...            | +   |                         | +-------------------------+     |- register save area for | |  parameter1 save area   | +   |    use by callee        | +-------------------------+     |                         | |  parameter0 save area   | +  /                          |  rs6000 +-------------------------+                               |-  linkage +20 |       TOC save area     | +                             |    area +-------------------------+                               | +16 |       (reserved)        | -    + == used by callee      | +-------------------------+      - == ignored by callee   | +12 |       (reserved)        | -                             | +-------------------------+                               | +8 |       LR save area      | +                             | +-------------------------+                               | +4 |       CR save area      | +                             | +-------------------------+                               | FP ->  +0 |       (backlink)        | -                             | +-------------------------+  . . . . . . . . . . . . . . / Notes: 1. parameters are according to host OS calling convention. 2. space is also reserved on the stack for use by callee as parameter save area 3. parameters are pushed on the java operand stack left to right java conventions) but if callee saves them, they will appear in the parameter save area right to left (C conventions)
 */
private void generateSysCall(int parametersSize,VM_Field target){
  int linkageAreaSize=parametersSize + BYTES_IN_STACKSLOT + (6 * BYTES_IN_STACKSLOT);
  if (VM.BuildFor32Addr) {
    asm.emitSTWU(FP,-linkageAreaSize,FP);
  }
 else {
    asm.emitSTDU(FP,-linkageAreaSize,FP);
  }
  asm.emitSTAddr(JTOC,linkageAreaSize - BYTES_IN_STACKSLOT,FP);
  asm.emitLAddrToc(S0,VM_Entrypoints.the_boot_recordField.getOffset());
  asm.emitLAddrOffset(0,S0,target.getOffset());
  asm.emitLAddrOffset(JTOC,0,BYTES_IN_STACKSLOT);
  asm.emitLAddrOffset(0,0,0);
  asm.emitMTCTR(0);
  asm.emitBCCTRL();
  asm.emitLAddr(JTOC,linkageAreaSize - BYTES_IN_STACKSLOT,FP);
  asm.emitADDI(FP,linkageAreaSize,FP);
}","/** 
 * Generate call and return sequence to invoke a C function through the boot record field specificed by target.  Caller handles parameter passing and expression stack  (setting up args, pushing return, adjusting stack height). <pre> Create a linkage area that's compatible with RS6000 ""C"" calling conventions. Just before the call, the stack looks like this: hi-mem +-------------------------+  . . . . . . . . |          ...            |                  \ +-------------------------+                   | |          ...            |    \              | +-------------------------+     |             | |       (int val0)        |     |  java       |- java +-------------------------+     |-  operand   |   stack |       (int val1)        |     |    stack    |    frame +-------------------------+     |             | |          ...            |     |             | +-------------------------+     |             | |      (int valN-1)       |     |             | +-------------------------+    /              | |          ...            |                   | +-------------------------+                   | |                         | <-- spot for this frame's callee's return address +-------------------------+                   | |          MI             | <-- this frame's method id +-------------------------+                   | |       saved FP          | <-- this frame's caller's frame +-------------------------+  . . . . . . . . / |      saved JTOC         | +-------------------------+  . . . . . . . . . . . . . . | parameterN-1 save area  | +  \                         \ +-------------------------+     |                         | |          ...            | +   |                         | +-------------------------+     |- register save area for | |  parameter1 save area   | +   |    use by callee        | +-------------------------+     |                         | |  parameter0 save area   | +  /                          |  rs6000 +-------------------------+                               |-  linkage +20 |       TOC save area     | +                             |    area +-------------------------+                               | +16 |       (reserved)        | -    + == used by callee      | +-------------------------+      - == ignored by callee   | +12 |       (reserved)        | -                             | +-------------------------+                               | +8 |       LR save area      | +                             | +-------------------------+                               | +4 |       CR save area      | +                             | +-------------------------+                               | FP ->  +0 |       (backlink)        | -                             | +-------------------------+  . . . . . . . . . . . . . . / Notes: 1. parameters are according to host OS calling convention. 2. space is also reserved on the stack for use by callee as parameter save area 3. parameters are pushed on the java operand stack left to right java conventions) but if callee saves them, they will appear in the parameter save area right to left (C conventions)
 */
private void generateSysCall(int parametersSize,VM_Field target){
  int linkageAreaSize=parametersSize + BYTES_IN_STACKSLOT + (6 * BYTES_IN_STACKSLOT);
  if (VM.BuildFor32Addr) {
    asm.emitSTWU(FP,-linkageAreaSize,FP);
  }
 else {
    asm.emitSTDU(FP,-linkageAreaSize,FP);
  }
  asm.emitSTAddr(JTOC,linkageAreaSize - BYTES_IN_STACKSLOT,FP);
  asm.emitLAddrToc(S0,VM_Entrypoints.the_boot_recordField.getOffset());
  asm.emitLAddrOffset(0,S0,target.getOffset());
  asm.emitLAddrOffset(JTOC,0,Offset.fromInt(BYTES_IN_STACKSLOT));
  asm.emitLAddrOffset(0,0,Offset.fromInt(0));
  asm.emitMTCTR(0);
  asm.emitBCCTRL();
  asm.emitLAddr(JTOC,linkageAreaSize - BYTES_IN_STACKSLOT,FP);
  asm.emitADDI(FP,linkageAreaSize,FP);
}",0.995809324253536
149991,"/** 
 * Unwind a stackframe.
 */
public void unwindStackFrame(VM_CompiledMethod compiledMethod,VM_Registers registers){
  VM_NormalMethod method=(VM_NormalMethod)compiledMethod.getMethod();
  VM_QuickCompiledMethod qcm=(VM_QuickCompiledMethod)compiledMethod;
  if (method.isSynchronized()) {
    Address ip=registers.getInnermostInstructionAddress();
    Offset instr=compiledMethod.getInstructionOffset(ip);
    Offset lockOffset=((VM_QuickCompiledMethod)compiledMethod).getLockAcquisitionOffset();
    if (instr.sGT(lockOffset)) {
      Object lock;
      if (method.isStatic()) {
        lock=method.getDeclaringClass().getClassForType();
      }
 else {
        Address fp=registers.getInnermostFramePointer();
        int offset=VM_QuickCompiler.getThisPtrSaveAreaOffset(method);
        lock=VM_Magic.addressAsObject(fp.add(offset).loadAddress());
      }
      VM_ObjectModel.genericUnlock(lock);
    }
  }
  Address fp=registers.getInnermostFramePointer();
  Offset frameOffset=Offset.fromIntSignExtend(VM_QuickCompiler.getCallerSaveOffset(method));
  int limit;
  for (int i=qcm.firstGPR; i <= qcm.lastGPR; i++, frameOffset=frameOffset.sub(BYTES_IN_ADDRESS)) {
    registers.gprs.set(i,fp.loadWord(frameOffset));
  }
  registers.gprs.set(VM_QuickCompiler.S1,fp.loadWord(frameOffset));
  frameOffset=frameOffset.sub(BYTES_IN_ADDRESS);
  registers.gprs.set(VM_QuickCompiler.S0,fp.loadWord(frameOffset));
  frameOffset=frameOffset.sub(BYTES_IN_ADDRESS);
  for (int i=qcm.firstFPR; i <= qcm.lastFPR; i++, frameOffset=frameOffset.sub(BYTES_IN_DOUBLE)) {
    long temp=VM_Magic.getLongAtOffset(VM_Magic.addressAsObject(fp),frameOffset);
    registers.fprs[i]=VM_Magic.longBitsAsDouble(temp);
  }
  long temp=VM_Magic.getLongAtOffset(VM_Magic.addressAsObject(fp),frameOffset);
  frameOffset=frameOffset.sub(BYTES_IN_DOUBLE);
  registers.fprs[VM_QuickCompiler.SF0]=VM_Magic.longBitsAsDouble(temp);
  registers.unwindStackFrame();
}","/** 
 * Unwind a stackframe.
 */
public void unwindStackFrame(VM_CompiledMethod compiledMethod,VM_Registers registers){
  VM_NormalMethod method=(VM_NormalMethod)compiledMethod.getMethod();
  VM_QuickCompiledMethod qcm=(VM_QuickCompiledMethod)compiledMethod;
  if (method.isSynchronized()) {
    Address ip=registers.getInnermostInstructionAddress();
    Offset instr=compiledMethod.getInstructionOffset(ip);
    Offset lockOffset=((VM_QuickCompiledMethod)compiledMethod).getLockAcquisitionOffset();
    if (instr.sGT(lockOffset)) {
      Object lock;
      if (method.isStatic()) {
        lock=method.getDeclaringClass().getClassForType();
      }
 else {
        Address fp=registers.getInnermostFramePointer();
        int offset=VM_QuickCompiler.getThisPtrSaveAreaOffset(method);
        lock=VM_Magic.addressAsObject(fp.plus(offset).loadAddress());
      }
      VM_ObjectModel.genericUnlock(lock);
    }
  }
  Address fp=registers.getInnermostFramePointer();
  Offset frameOffset=Offset.fromIntSignExtend(VM_QuickCompiler.getCallerSaveOffset(method));
  int limit;
  for (int i=qcm.firstGPR; i <= qcm.lastGPR; i++, frameOffset=frameOffset.minus(BYTES_IN_ADDRESS)) {
    registers.gprs.set(i,fp.loadWord(frameOffset));
  }
  registers.gprs.set(VM_QuickCompiler.S1,fp.loadWord(frameOffset));
  frameOffset=frameOffset.minus(BYTES_IN_ADDRESS);
  registers.gprs.set(VM_QuickCompiler.S0,fp.loadWord(frameOffset));
  frameOffset=frameOffset.minus(BYTES_IN_ADDRESS);
  for (int i=qcm.firstFPR; i <= qcm.lastFPR; i++, frameOffset=frameOffset.minus(BYTES_IN_DOUBLE)) {
    long temp=VM_Magic.getLongAtOffset(VM_Magic.addressAsObject(fp),frameOffset);
    registers.fprs[i]=VM_Magic.longBitsAsDouble(temp);
  }
  long temp=VM_Magic.getLongAtOffset(VM_Magic.addressAsObject(fp),frameOffset);
  frameOffset=frameOffset.minus(BYTES_IN_DOUBLE);
  registers.fprs[VM_QuickCompiler.SF0]=VM_Magic.longBitsAsDouble(temp);
  registers.unwindStackFrame();
}",0.9878709677419356
149992,"/** 
 * Pass control to a catch block.
 */
public void deliverException(VM_CompiledMethod compiledMethod,Address catchBlockInstructionAddress,Throwable exceptionObject,VM_Registers registers){
  Address fp=registers.getInnermostFramePointer();
  VM_NormalMethod method=(VM_NormalMethod)compiledMethod.getMethod();
  Address exceptionSlot=fp.add(VM_QuickCompiler.getExceptionObjectOffset(method));
  exceptionSlot.store(VM_Magic.objectAsAddress(exceptionObject));
  registers.ip=catchBlockInstructionAddress;
  VM.enableGC();
  if (VM.VerifyAssertions)   VM._assert(registers.inuse == true);
  registers.inuse=false;
  VM_Magic.restoreHardwareExceptionState(registers);
  if (VM.VerifyAssertions)   VM._assert(NOT_REACHED);
}","/** 
 * Pass control to a catch block.
 */
public void deliverException(VM_CompiledMethod compiledMethod,Address catchBlockInstructionAddress,Throwable exceptionObject,VM_Registers registers){
  Address fp=registers.getInnermostFramePointer();
  VM_NormalMethod method=(VM_NormalMethod)compiledMethod.getMethod();
  Address exceptionSlot=fp.plus(VM_QuickCompiler.getExceptionObjectOffset(method));
  exceptionSlot.store(VM_Magic.objectAsAddress(exceptionObject));
  registers.ip=catchBlockInstructionAddress;
  VM.enableGC();
  if (VM.VerifyAssertions)   VM._assert(registers.inuse == true);
  registers.inuse=false;
  VM_Magic.restoreHardwareExceptionState(registers);
  if (VM.VerifyAssertions)   VM._assert(NOT_REACHED);
}",0.9951690821256038
149993,"/** 
 * When an exception occurs, registers are saved temporarily.  If the stack being scanned is in this state, we need to scan those registers for code pointers.  If the codeLocations deque is null, then scanning for code pointers is not required, so we don't need to do anything. (SB: Why only code pointers?)
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void getHWExceptionRegisters(int verbosity){
  if (processCodeLocations && thread.hardwareExceptionRegisters.inuse) {
    Address ip=thread.hardwareExceptionRegisters.ip;
    VM_CompiledMethod compiledMethod=VM_CompiledMethods.findMethodForInstruction(ip);
    if (VM.VerifyAssertions)     VM._assert(compiledMethod != null);
    compiledMethod.setObsolete(false);
    ObjectReference code=ObjectReference.fromObject(compiledMethod.getEntryCodeArray());
    Address ipLoc=thread.hardwareExceptionRegisters.getIPLocation();
    codeLocationsPush(code,ipLoc);
  }
}","/** 
 * When an exception occurs, registers are saved temporarily.  If the stack being scanned is in this state, we need to scan those registers for code pointers.  If the codeLocations deque is null, then scanning for code pointers is not required, so we don't need to do anything. (SB: Why only code pointers?)
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void getHWExceptionRegisters(int verbosity){
  if (processCodeLocations && thread.hardwareExceptionRegisters.inuse) {
    Address ip=thread.hardwareExceptionRegisters.ip;
    VM_CompiledMethod compiledMethod=VM_CompiledMethods.findMethodForInstruction(ip);
    if (VM.VerifyAssertions) {
      VM._assert(compiledMethod != null);
      VM._assert(compiledMethod.containsReturnAddress(ip));
    }
    compiledMethod.setObsolete(false);
    ObjectReference code=ObjectReference.fromObject(compiledMethod.getEntryCodeArray());
    Address ipLoc=thread.hardwareExceptionRegisters.getIPLocation();
    if (VM.VerifyAssertions)     VM._assert(ip == ipLoc.loadAddress());
    codeLocationsPush(code,ipLoc);
  }
}",0.9315992292870906
149994,"/** 
 * Find the method whose machine code contains the specified instruction. Assumption: caller has disabled gc (otherwise collector could move objects without fixing up the raw <code>ip</code> pointer) Note: this method is highly inefficient. Normally you should use the following instead:  <code> VM_ClassLoader.getCompiledMethod(VM_Magic.getCompiledMethodID(fp)) </code>
 * @param ip  instruction addressUsage note: <code>ip</code> must point to the instruction *following* the actual instruction whose method is sought. This allows us to properly handle the case where the only address we have to work with is a return address (ie. from a stackframe) or an exception address (ie. from a null pointer dereference, array bounds check, or divide by zero) on a machine architecture with variable length instructions.  In such situations we'd have no idea how far to back up the instruction pointer to point to the ""call site"" or ""exception site"".
 * @return method (<code>null</code> --> not found)
 */
public static VM_CompiledMethod findMethodForInstruction(Address ip) throws UninterruptiblePragma {
  for (int i=0, n=numCompiledMethods(); i < n; ++i) {
    VM_CompiledMethod compiledMethod=compiledMethods[i];
    if (compiledMethod == null || !compiledMethod.isCompiled())     continue;
    if (compiledMethod.containsReturnAddress(ip))     return compiledMethod;
    return compiledMethod;
  }
  return null;
}","/** 
 * Find the method whose machine code contains the specified instruction. Assumption: caller has disabled gc (otherwise collector could move objects without fixing up the raw <code>ip</code> pointer) Note: this method is highly inefficient. Normally you should use the following instead:  <code> VM_ClassLoader.getCompiledMethod(VM_Magic.getCompiledMethodID(fp)) </code>
 * @param ip  instruction addressUsage note: <code>ip</code> must point to the instruction *following* the actual instruction whose method is sought. This allows us to properly handle the case where the only address we have to work with is a return address (ie. from a stackframe) or an exception address (ie. from a null pointer dereference, array bounds check, or divide by zero) on a machine architecture with variable length instructions.  In such situations we'd have no idea how far to back up the instruction pointer to point to the ""call site"" or ""exception site"".
 * @return method (<code>null</code> --> not found)
 */
public static VM_CompiledMethod findMethodForInstruction(Address ip) throws UninterruptiblePragma {
  for (int i=0, n=numCompiledMethods(); i < n; ++i) {
    VM_CompiledMethod compiledMethod=compiledMethods[i];
    if (compiledMethod == null || !compiledMethod.isCompiled())     continue;
    if (compiledMethod.containsReturnAddress(ip))     return compiledMethod;
  }
  return null;
}",0.9903880384478462
149995,"/** 
 * Setup a map  within a JSR Subroutine. This requires using up one of the unusual maps. This routine is called when the caller gets a negative mapindex value return from locateGCPoint. This routine searches the map tables and uses its stack frameAddress input to build reference and returnAddress maps. The caller uses the getNext... routines to scan these maps for offsets in the frame of the related references.
 * @param frameAddr         address of stack frame being scanned
 * @param mapid             index of map of instruction where map is required( this value was returned by locateGCpoint) steps for this routine use the mapid to get index of the Unusual Map from the unusual map and the frame - get the location of the jsr invoker from the invoker address and the code base address - get the machine code offset from the machine code offset locate the map for that instruction if the invoker was itself in a jsr- merge the delta maps of each jsr and compute the new total delta maps else the invoker was not already in a jsr merge the unusual map differences with the invoker map
 */
public void setupJSRSubroutineMap(Address frameAddress,int mapid,WordArray registerLocations,VM_CompiledMethod compiledMethod){
  int j=extraUnusualMap.getReferenceMapIndex();
  int k=extraUnusualMap.getNonReferenceMapIndex();
  int l=extraUnusualMap.getReturnAddressMapIndex();
  for (int i=0; i < bytesPerMap; i++) {
    unusualReferenceMaps[j + i]=0;
    unusualReferenceMaps[k + i]=0;
    unusualReferenceMaps[l + i]=0;
  }
  if (VM.TraceStkMaps) {
    VM.sysWriteln(""String_Node_Str"",mapid,""String_Node_Str"",-mapid);
    VM.sysWriteln(""String_Node_Str"",referenceMaps[(-mapid) * bytesPerMap]);
    VM.sysWriteln(""String_Node_Str"",referenceMaps[(-mapid) * bytesPerMap] & JSR_INDEX_MASK);
  }
  int unusualMapid=(referenceMaps[(-mapid) * bytesPerMap] & JSR_INDEX_MASK);
  if (unusualMapid == JSR_INDEX_MASK) {
    unusualMapid=findUnusualMap(-mapid);
  }
  VM_QuickUnusualMaps unusualMap=unusualMaps[unusualMapid];
  unusualMapcopy(unusualMap);
  int jsrAddressLocation=unusualMap.getReturnAddressLocation();
  Address jsrAddressAddress=null;
  if (VM_QuickCompiler.isRegister(jsrAddressLocation))   jsrAddressAddress=registerLocations.get(VM_QuickCompiler.locationToRegister(jsrAddressLocation)).toAddress();
 else   jsrAddressAddress=frameAddress.add(VM_QuickCompiler.locationToOffset(jsrAddressLocation));
  Address callerAddress=jsrAddressAddress.loadAddress();
  Offset machineCodeOffset=compiledMethod.getInstructionOffset(callerAddress);
  if (VM.TraceStkMaps) {
    VM.sysWriteln(""String_Node_Str"",mapid);
    VM.sysWriteln(""String_Node_Str"",jsrAddressLocation);
    VM.sysWriteln(""String_Node_Str"",callerAddress);
    VM.sysWriteln(""String_Node_Str"",machineCodeOffset);
    if (machineCodeOffset.sLT(Offset.zero()))     VM.sysWriteln(""String_Node_Str"");
  }
  int jsrMapid=locateGCPoint(machineCodeOffset,compiledMethod.getMethod());
  if (VM.TraceStkMaps) {
    VM.sysWriteln(""String_Node_Str"",jsrMapid);
  }
  while (jsrMapid < 0) {
    jsrMapid=-jsrMapid;
    if (VM.TraceStkMaps) {
      VM.sysWriteln(""String_Node_Str"",jsrMapid,""String_Node_Str"",referenceMaps[jsrMapid]);
    }
    int unusualMapIndex=JSR_INDEX_MASK & referenceMaps[jsrMapid * bytesPerMap];
    if (unusualMapIndex == JSR_INDEX_MASK) {
      unusualMapIndex=findUnusualMap(jsrMapid);
    }
    extraUnusualMap=combineDeltaMaps(unusualMapIndex);
    VM_QuickUnusualMaps thisMap=unusualMaps[unusualMapIndex];
    int thisJsrAddressLocation=thisMap.getReturnAddressLocation();
    Address thisJsrAddressAddress=null;
    if (VM_QuickCompiler.isRegister(thisJsrAddressLocation))     thisJsrAddressAddress=registerLocations.get(VM_QuickCompiler.locationToRegister(thisJsrAddressLocation)).toAddress();
 else     thisJsrAddressAddress=frameAddress.add(VM_QuickCompiler.locationToOffset(thisJsrAddressLocation));
    Address nextCallerAddress=thisJsrAddressAddress.loadAddress();
    Offset nextMachineCodeOffset=compiledMethod.getInstructionOffset(nextCallerAddress);
    jsrMapid=locateGCPoint(nextMachineCodeOffset,compiledMethod.getMethod());
    if (VM.TraceStkMaps) {
      VM.sysWriteln(""String_Node_Str"");
      extraUnusualMap.showInfo();
      VM.sysWriteln();
      VM.sysWriteln(""String_Node_Str"");
      thisMap.showInfo();
      VM.sysWriteln();
      VM.sysWriteln(""String_Node_Str"");
      VM.sysWriteln(""String_Node_Str"",thisJsrAddressLocation);
      VM.sysWriteln(""String_Node_Str"",nextCallerAddress);
      VM.sysWriteln(""String_Node_Str"",nextMachineCodeOffset);
    }
  }
  finalMergeMaps((jsrMapid * bytesPerMap),extraUnusualMap);
  if (VM.TraceStkMaps) {
    VM.sysWriteln(""String_Node_Str"");
    extraUnusualMap.showInfo();
    VM.sysWriteln();
    VM.sysWriteln(""String_Node_Str"",mergedReferenceMap);
    VM.sysWrite(""String_Node_Str"");
    showAnUnusualMap(mergedReferenceMap);
    VM.sysWriteln(unusualReferenceMaps[mergedReferenceMap]);
    VM.sysWriteln(""String_Node_Str"",mergedReturnAddressMap);
    VM.sysWriteln(""String_Node_Str"",unusualReferenceMaps[mergedReturnAddressMap]);
    showInfo();
    showUnusualMapInfo();
  }
}","/** 
 * Setup a map  within a JSR Subroutine. This requires using up one of the unusual maps. This routine is called when the caller gets a negative mapindex value return from locateGCPoint. This routine searches the map tables and uses its stack frameAddress input to build reference and returnAddress maps. The caller uses the getNext... routines to scan these maps for offsets in the frame of the related references.
 * @param frameAddr         address of stack frame being scanned
 * @param mapid             index of map of instruction where map is required( this value was returned by locateGCpoint) steps for this routine use the mapid to get index of the Unusual Map from the unusual map and the frame - get the location of the jsr invoker from the invoker address and the code base address - get the machine code offset from the machine code offset locate the map for that instruction if the invoker was itself in a jsr- merge the delta maps of each jsr and compute the new total delta maps else the invoker was not already in a jsr merge the unusual map differences with the invoker map
 */
public void setupJSRSubroutineMap(Address frameAddress,int mapid,WordArray registerLocations,VM_CompiledMethod compiledMethod){
  int j=extraUnusualMap.getReferenceMapIndex();
  int k=extraUnusualMap.getNonReferenceMapIndex();
  int l=extraUnusualMap.getReturnAddressMapIndex();
  for (int i=0; i < bytesPerMap; i++) {
    unusualReferenceMaps[j + i]=0;
    unusualReferenceMaps[k + i]=0;
    unusualReferenceMaps[l + i]=0;
  }
  if (VM.TraceStkMaps) {
    VM.sysWriteln(""String_Node_Str"",mapid,""String_Node_Str"",-mapid);
    VM.sysWriteln(""String_Node_Str"",referenceMaps[(-mapid) * bytesPerMap]);
    VM.sysWriteln(""String_Node_Str"",referenceMaps[(-mapid) * bytesPerMap] & JSR_INDEX_MASK);
  }
  int unusualMapid=(referenceMaps[(-mapid) * bytesPerMap] & JSR_INDEX_MASK);
  if (unusualMapid == JSR_INDEX_MASK) {
    unusualMapid=findUnusualMap(-mapid);
  }
  VM_QuickUnusualMaps unusualMap=unusualMaps[unusualMapid];
  unusualMapcopy(unusualMap);
  int jsrAddressLocation=unusualMap.getReturnAddressLocation();
  Address jsrAddressAddress=null;
  if (VM_QuickCompiler.isRegister(jsrAddressLocation))   jsrAddressAddress=registerLocations.get(VM_QuickCompiler.locationToRegister(jsrAddressLocation)).toAddress();
 else   jsrAddressAddress=frameAddress.plus(VM_QuickCompiler.locationToOffset(jsrAddressLocation));
  Address callerAddress=jsrAddressAddress.loadAddress();
  Offset machineCodeOffset=compiledMethod.getInstructionOffset(callerAddress);
  if (VM.TraceStkMaps) {
    VM.sysWriteln(""String_Node_Str"",mapid);
    VM.sysWriteln(""String_Node_Str"",jsrAddressLocation);
    VM.sysWriteln(""String_Node_Str"",callerAddress);
    VM.sysWriteln(""String_Node_Str"",machineCodeOffset);
    if (machineCodeOffset.sLT(Offset.zero()))     VM.sysWriteln(""String_Node_Str"");
  }
  int jsrMapid=locateGCPoint(machineCodeOffset,compiledMethod.getMethod());
  if (VM.TraceStkMaps) {
    VM.sysWriteln(""String_Node_Str"",jsrMapid);
  }
  while (jsrMapid < 0) {
    jsrMapid=-jsrMapid;
    if (VM.TraceStkMaps) {
      VM.sysWriteln(""String_Node_Str"",jsrMapid,""String_Node_Str"",referenceMaps[jsrMapid]);
    }
    int unusualMapIndex=JSR_INDEX_MASK & referenceMaps[jsrMapid * bytesPerMap];
    if (unusualMapIndex == JSR_INDEX_MASK) {
      unusualMapIndex=findUnusualMap(jsrMapid);
    }
    extraUnusualMap=combineDeltaMaps(unusualMapIndex);
    VM_QuickUnusualMaps thisMap=unusualMaps[unusualMapIndex];
    int thisJsrAddressLocation=thisMap.getReturnAddressLocation();
    Address thisJsrAddressAddress=null;
    if (VM_QuickCompiler.isRegister(thisJsrAddressLocation))     thisJsrAddressAddress=registerLocations.get(VM_QuickCompiler.locationToRegister(thisJsrAddressLocation)).toAddress();
 else     thisJsrAddressAddress=frameAddress.plus(VM_QuickCompiler.locationToOffset(thisJsrAddressLocation));
    Address nextCallerAddress=thisJsrAddressAddress.loadAddress();
    Offset nextMachineCodeOffset=compiledMethod.getInstructionOffset(nextCallerAddress);
    jsrMapid=locateGCPoint(nextMachineCodeOffset,compiledMethod.getMethod());
    if (VM.TraceStkMaps) {
      VM.sysWriteln(""String_Node_Str"");
      extraUnusualMap.showInfo();
      VM.sysWriteln();
      VM.sysWriteln(""String_Node_Str"");
      thisMap.showInfo();
      VM.sysWriteln();
      VM.sysWriteln(""String_Node_Str"");
      VM.sysWriteln(""String_Node_Str"",thisJsrAddressLocation);
      VM.sysWriteln(""String_Node_Str"",nextCallerAddress);
      VM.sysWriteln(""String_Node_Str"",nextMachineCodeOffset);
    }
  }
  finalMergeMaps((jsrMapid * bytesPerMap),extraUnusualMap);
  if (VM.TraceStkMaps) {
    VM.sysWriteln(""String_Node_Str"");
    extraUnusualMap.showInfo();
    VM.sysWriteln();
    VM.sysWriteln(""String_Node_Str"",mergedReferenceMap);
    VM.sysWrite(""String_Node_Str"");
    showAnUnusualMap(mergedReferenceMap);
    VM.sysWriteln(unusualReferenceMaps[mergedReferenceMap]);
    VM.sysWriteln(""String_Node_Str"",mergedReturnAddressMap);
    VM.sysWriteln(""String_Node_Str"",unusualReferenceMaps[mergedReturnAddressMap]);
    showInfo();
    showUnusualMapInfo();
  }
}",0.9986365407089988
149996,"/** 
 * Given a machine code instruction offset, return an index to identify the stack map closest to the offset ( but not beyond) Usage note: ""machCodeOffset"" must point to the instruction *following the actual instruction whose stack map is sought. This allows us to properly handle the case where the only address we have to work with is a return address (ie. from a stackframe) or an exception address (ie. from a null pointer dereference, array bounds check, or divide by zero) on a machine architecture with variable length instructions. In such situations we'd have no idea how far to back up the instruction pointer to point to the ""call site"" or ""exception site"". If the located site is within the scope of a jsr subroutine the index value returned is a negative number
 */
public int locateGCPoint(Offset machCodeOffset,VM_Method method){
  machCodeOffset=machCodeOffset.sub(1 << VM.LG_INSTRUCTION_WIDTH);
  if (VM.TraceStkMaps) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(machCodeOffset);
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(method.getName());
    VM.sysWrite(""String_Node_Str"");
  }
  Offset distance=Offset.zero();
  int index=0;
  for (int i=0; i < mapCount; i++) {
    distance=machCodeOffset.sub(MCSites[i]);
    if (distance.sGE(Offset.zero())) {
      index=i;
      break;
    }
  }
  for (int i=index + 1; i < mapCount; i++) {
    Offset dist=machCodeOffset.sub(MCSites[i]);
    if (dist.sLT(Offset.zero()))     continue;
    if (dist.sLE(distance)) {
      index=i;
      distance=dist;
    }
  }
  if (VM.TraceStkMaps) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(index);
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(referenceMaps[index]);
    VM.sysWrite(""String_Node_Str"");
    if (index - 1 >= 0) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(machCodeOffset.sub(MCSites[index - 1]));
      VM.sysWrite(""String_Node_Str"");
    }
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(machCodeOffset.sub(MCSites[index]));
    VM.sysWrite(""String_Node_Str"");
    if (index + 1 < MCSites.length) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(machCodeOffset.sub(MCSites[index + 1]));
      VM.sysWrite(""String_Node_Str"");
    }
  }
  if ((0x000000FF & (referenceMaps[index * bytesPerMap] & JSR_MASK)) == (0x000000FF & JSR_MASK)) {
    index=-index;
    if (VM.TraceStkMaps) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(-index);
      VM.sysWrite(""String_Node_Str"");
    }
  }
  if (VM.TraceStkMaps) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(machCodeOffset);
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(index);
    VM.sysWrite(""String_Node_Str"");
  }
  return index;
}","/** 
 * Given a machine code instruction offset, return an index to identify the stack map closest to the offset ( but not beyond) Usage note: ""machCodeOffset"" must point to the instruction *following the actual instruction whose stack map is sought. This allows us to properly handle the case where the only address we have to work with is a return address (ie. from a stackframe) or an exception address (ie. from a null pointer dereference, array bounds check, or divide by zero) on a machine architecture with variable length instructions. In such situations we'd have no idea how far to back up the instruction pointer to point to the ""call site"" or ""exception site"". If the located site is within the scope of a jsr subroutine the index value returned is a negative number
 */
public int locateGCPoint(Offset machCodeOffset,VM_Method method){
  machCodeOffset=machCodeOffset.minus(1 << VM.LG_INSTRUCTION_WIDTH);
  if (VM.TraceStkMaps) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(machCodeOffset);
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(method.getName());
    VM.sysWrite(""String_Node_Str"");
  }
  Offset distance=Offset.zero();
  int index=0;
  for (int i=0; i < mapCount; i++) {
    distance=machCodeOffset.minus(MCSites[i]);
    if (distance.sGE(Offset.zero())) {
      index=i;
      break;
    }
  }
  for (int i=index + 1; i < mapCount; i++) {
    Offset dist=machCodeOffset.minus(MCSites[i]);
    if (dist.sLT(Offset.zero()))     continue;
    if (dist.sLE(distance)) {
      index=i;
      distance=dist;
    }
  }
  if (VM.TraceStkMaps) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(index);
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(referenceMaps[index]);
    VM.sysWrite(""String_Node_Str"");
    if (index - 1 >= 0) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(machCodeOffset.minus(MCSites[index - 1]));
      VM.sysWrite(""String_Node_Str"");
    }
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(machCodeOffset.minus(MCSites[index]));
    VM.sysWrite(""String_Node_Str"");
    if (index + 1 < MCSites.length) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(machCodeOffset.minus(MCSites[index + 1]));
      VM.sysWrite(""String_Node_Str"");
    }
  }
  if ((0x000000FF & (referenceMaps[index * bytesPerMap] & JSR_MASK)) == (0x000000FF & JSR_MASK)) {
    index=-index;
    if (VM.TraceStkMaps) {
      VM.sysWrite(""String_Node_Str"");
      VM.sysWrite(-index);
      VM.sysWrite(""String_Node_Str"");
    }
  }
  if (VM.TraceStkMaps) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(machCodeOffset);
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(index);
    VM.sysWrite(""String_Node_Str"");
  }
  return index;
}",0.991074748977315
149997,"/** 
 * Complete the task of booting Jikes RVM. Done in a secondary method mainly because this code doesn't have to be uninterruptible and this is the cleanest way to make that distinction.
 */
private static void finishBooting() throws InterruptiblePragma {
  if (!singleVirtualProcessor) {
    VM_SysCall.sysPthreadSetupSignalHandling();
    VM_Processor.getCurrentProcessor().pthread_id=VM_SysCall.sysPthreadSelf();
  }
  VM_Thread.boot();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  MM_Interface.setupProcessor(VM_Processor.getCurrentProcessor());
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"",VM_Magic.objectAsAddress(VM_BootRecord.the_boot_record));
  MM_Interface.boot(VM_BootRecord.the_boot_record);
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_Time.bootStageOne();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_BaselineCompiler.initOptions();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_QuickCompiler.initOptions();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  createClassObjects();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_CommandLineArgs.fetchCommandLineArguments();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_CommandLineArgs.earlyProcessCommandLineArguments();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  MM_Interface.postBoot();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  String bootstrapClasses=VM_CommandLineArgs.getBootstrapClasses();
  VM_ClassLoader.boot();
  VM_BootstrapClassLoader.boot(bootstrapClasses);
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_Time.bootStageTwo();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  VM.safeToAllocateJavaThread=true;
  VM_Scheduler.giveBootVM_ThreadAJavaLangThread();
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_Lock.boot();
  if (BuildForHPM) {
    if (VM_HardwarePerformanceMonitors.enabled()) {
      if (VM_HardwarePerformanceMonitors.verbose >= 2)       VM.sysWriteln(""String_Node_Str"");
      VM_HardwarePerformanceMonitors.boot();
    }
  }
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_Scheduler.boot();
  VM_DynamicLibrary.boot();
  VM.dynamicClassLoadingEnabled=true;
  com.ibm.JikesRVM.jni.VM_JNIEnvironment.boot();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_Thread.getCurrentThread().initializeJNIEnv();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  System.loadLibrary(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  VM_HardwarePerformanceMonitors.setUpHPMinfo();
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  VM_FileSystem.initializeStandardStreams();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM.fullyBooted=true;
  MM_Interface.fullyBootedVM();
  VM_BaselineCompiler.fullyBootedVM();
  VM_QuickCompiler.fullyBootedVM();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_RuntimeCompiler.boot();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  String[] applicationArguments=VM_CommandLineArgs.lateProcessCommandLineArguments();
  if (VM.verboseClassLoading || verboseBoot >= 1)   VM.sysWrite(""String_Node_Str"");
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  JikesRVMSocketImpl.boot();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  com.ibm.JikesRVM.adaptive.VM_Controller.boot();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  if (applicationArguments.length == 0) {
    pleaseSpecifyAClass();
  }
  if (applicationArguments.length > 0 && !VM_TypeDescriptorParsing.isJavaClassName(applicationArguments[0])) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(applicationArguments[0]);
    VM.sysWrite(""String_Node_Str"");
    pleaseSpecifyAClass();
  }
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_ClassLoader.getApplicationClassLoader();
  VM_ClassLoader.declareApplicationClassLoaderIsReady();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  VM_EdgeCounts.boot();
  VM_CompilerAdvice.postBoot();
  if (verboseBoot >= 2)   VM.sysWriteln(""String_Node_Str"");
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  Thread mainThread=new MainThread(applicationArguments);
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  mainThread.start();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_Thread t=new DebuggerThread();
  t.start(VM_Scheduler.debuggerQueue);
  if (VM_HardwarePerformanceMonitors.enabled()) {
    if (!VM_HardwarePerformanceMonitors.thread_group) {
      if (VM_HardwarePerformanceMonitors.verbose >= 2)       VM.sysWrite(""String_Node_Str"");
      VM_SysCall.sysHPMresetMyThread();
    }
  }
  if (VM.TraceThreads)   VM_Scheduler.trace(""String_Node_Str"",""String_Node_Str"");
  if (verboseBoot >= 2)   VM.sysWriteln(""String_Node_Str"");
  VM_Thread.terminate();
  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);
}","/** 
 * Complete the task of booting Jikes RVM. Done in a secondary method mainly because this code doesn't have to be uninterruptible and this is the cleanest way to make that distinction.
 */
private static void finishBooting() throws InterruptiblePragma {
  if (!singleVirtualProcessor) {
    VM_SysCall.sysPthreadSetupSignalHandling();
    VM_Processor.getCurrentProcessor().pthread_id=VM_SysCall.sysPthreadSelf();
  }
  VM_Thread.boot();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  MM_Interface.setupProcessor(VM_Processor.getCurrentProcessor());
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"",VM_Magic.objectAsAddress(VM_BootRecord.the_boot_record));
  MM_Interface.boot(VM_BootRecord.the_boot_record);
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_Time.bootStageOne();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_BaselineCompiler.initOptions();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_QuickCompiler.initOptions();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  createClassObjects();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_CommandLineArgs.fetchCommandLineArguments();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_CommandLineArgs.earlyProcessCommandLineArguments();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  MM_Interface.postBoot();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  String bootstrapClasses=VM_CommandLineArgs.getBootstrapClasses();
  VM_ClassLoader.boot();
  VM_BootstrapClassLoader.boot(bootstrapClasses);
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_Time.bootStageTwo();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  VM.safeToAllocateJavaThread=true;
  VM_Scheduler.giveBootVM_ThreadAJavaLangThread();
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_Lock.boot();
  if (BuildForHPM) {
    if (VM_HardwarePerformanceMonitors.enabled()) {
      if (VM_HardwarePerformanceMonitors.verbose >= 2)       VM.sysWriteln(""String_Node_Str"");
      VM_HardwarePerformanceMonitors.boot();
    }
  }
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_Scheduler.boot();
  VM_DynamicLibrary.boot();
  VM.dynamicClassLoadingEnabled=true;
  com.ibm.JikesRVM.jni.VM_JNIEnvironment.boot();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_Thread.getCurrentThread().initializeJNIEnv();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  System.loadLibrary(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  VM_HardwarePerformanceMonitors.setUpHPMinfo();
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  VM_FileSystem.initializeStandardStreams();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM.fullyBooted=true;
  MM_Interface.fullyBootedVM();
  VM_BaselineCompiler.fullyBootedVM();
  VM_QuickCompiler.fullyBootedVM();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_RuntimeCompiler.boot();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  String[] applicationArguments=VM_CommandLineArgs.lateProcessCommandLineArguments();
  if (VM.verboseClassLoading || verboseBoot >= 1)   VM.sysWrite(""String_Node_Str"");
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  JikesRVMSocketImpl.boot();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  com.ibm.JikesRVM.adaptive.VM_Controller.boot();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  if (applicationArguments.length == 0) {
    pleaseSpecifyAClass();
  }
  if (applicationArguments.length > 0 && !VM_TypeDescriptorParsing.isJavaClassName(applicationArguments[0])) {
    VM.sysWrite(""String_Node_Str"");
    VM.sysWrite(applicationArguments[0]);
    VM.sysWrite(""String_Node_Str"");
    pleaseSpecifyAClass();
  }
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_ClassLoader.getApplicationClassLoader();
  VM_ClassLoader.declareApplicationClassLoaderIsReady();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  runClassInitializer(""String_Node_Str"");
  VM_EdgeCounts.boot();
  VM_CompilerAdvice.postBoot();
  if (verboseBoot >= 2)   VM.sysWriteln(""String_Node_Str"");
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  Thread mainThread=new MainThread(applicationArguments);
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  mainThread.start();
  if (verboseBoot >= 1)   VM.sysWriteln(""String_Node_Str"");
  VM_Thread t=new DebuggerThread();
  t.start(VM_Scheduler.debuggerQueue);
  if (VM_HardwarePerformanceMonitors.enabled()) {
    if (!VM_HardwarePerformanceMonitors.thread_group) {
      if (VM_HardwarePerformanceMonitors.verbose >= 2)       VM.sysWrite(""String_Node_Str"");
      VM_SysCall.sysHPMresetMyThread();
    }
  }
  if (VM.TraceThreads)   VM_Scheduler.trace(""String_Node_Str"",""String_Node_Str"");
  if (verboseBoot >= 2)   VM.sysWriteln(""String_Node_Str"");
  VM_Thread.terminate();
  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);
}",0.9733952702702704
149998,"public static void main(String args[]) throws Exception {
  tField t=new tField();
  Class tf_type=Class.forName(""String_Node_Str"");
  Field fields[]=tf_type.getFields();
  Arrays.sort(fields,new Comparator(){
    public int compare(    Object x,    Object y){
      return x.toString().compareTo(y.toString());
    }
  }
);
  t.printFields(fields);
  t.testBoolean(fields);
  t.testByte(fields);
  t.testShort(fields);
  t.testInt(fields);
  t.testLong(fields);
  t.testFloat(fields);
  t.testDouble(fields);
  t.printFields(fields);
}","public static void main(String args[]) throws Exception {
  tField t=new tField();
  Class tf_type=Class.forName(""String_Node_Str"");
  Field fields[]=tf_type.getFields();
  Arrays.sort(fields,new Comparator(){
    public int compare(    Object x,    Object y){
      return x.toString().compareTo(y.toString());
    }
  }
);
  t.printFields(fields);
  t.testBoolean(fields);
  t.testByte(fields);
  t.testShort(fields);
  t.testInt(fields);
  t.testLong(fields);
  t.testFloat(fields);
  t.testDouble(fields);
  t.printFields(fields);
  t.testType(""String_Node_Str"",boolean.class);
  t.testType(""String_Node_Str"",byte.class);
  t.testType(""String_Node_Str"",short.class);
  t.testType(""String_Node_Str"",int.class);
  t.testType(""String_Node_Str"",long.class);
  t.testType(""String_Node_Str"",float.class);
  t.testType(""String_Node_Str"",double.class);
  t.testType(""String_Node_Str"",boolean.class);
  t.testType(""String_Node_Str"",byte.class);
  t.testType(""String_Node_Str"",short.class);
  t.testType(""String_Node_Str"",int.class);
  t.testType(""String_Node_Str"",long.class);
  t.testType(""String_Node_Str"",float.class);
  t.testType(""String_Node_Str"",double.class);
}",0.6305882352941177
149999,"/** 
 * Push the instruction pointer associated with this frame onto the code locations deque.<p> A stack frame represents an execution context, and thus has an instruction pointer associated with it.  In the case of the top frame, the instruction pointer is captured by the IP register, which is preseved in the thread data structure at thread switch time.  In the case of all non-top frames, the next instruction pointer is stored as the return address for the <i>previous</i> frame.<p>  The address of the code pointer is pushed onto the code locations deque along with the address of the code object into which it points (both are required since the former is an internal pointer).<p> The code pointers are updated later (after stack scanning) when the code locations deque is processed. The pointer from VM_Method to the code object is not updated until after stack scanning, so the pointer to the (uncopied) code object is available throughout the stack scanning process, which enables interior pointer offsets to be correctly computed.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void pushFrameIP(ObjectReference code,int verbosity){
  if (prevFp.isZero()) {
    if (verbosity >= 2) {
      Log.write(""String_Node_Str"");
      Log.writeln(thread.contextRegisters.ip);
      Log.write(""String_Node_Str"");
      Log.writeln(thread.contextRegisters.getIPLocation().loadAddress());
    }
    if (compiledMethodType != VM_CompiledMethod.JNI) {
      codeLocationsPush(code,initialIPLoc);
    }
 else     if (verbosity >= 3) {
      Log.writeln(""String_Node_Str"");
    }
  }
 else {
    Address returnAddressLoc=VM_Magic.getReturnAddressLocation(prevFp);
    Address returnAddress=returnAddressLoc.loadAddress();
    if (verbosity >= 3) {
      Log.write(""String_Node_Str"");
      Log.write(returnAddress);
      Log.write(""String_Node_Str"");
      Log.writeln(returnAddressLoc);
    }
    if (!DebugUtil.addrInBootImage(returnAddress))     codeLocationsPush(code,returnAddressLoc);
  }
}","/** 
 * Push the instruction pointer associated with this frame onto the code locations deque.<p> A stack frame represents an execution context, and thus has an instruction pointer associated with it.  In the case of the top frame, the instruction pointer is captured by the IP register, which is preseved in the thread data structure at thread switch time.  In the case of all non-top frames, the next instruction pointer is stored as the return address for the <i>previous</i> frame.<p>  The address of the code pointer is pushed onto the code locations deque along with the address of the code object into which it points (both are required since the former is an internal pointer).<p> The code pointers are updated later (after stack scanning) when the code locations deque is processed. The pointer from VM_Method to the code object is not updated until after stack scanning, so the pointer to the (uncopied) code object is available throughout the stack scanning process, which enables interior pointer offsets to be correctly computed.
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void pushFrameIP(ObjectReference code,int verbosity){
  if (prevFp.isZero()) {
    if (verbosity >= 2) {
      Log.write(""String_Node_Str"");
      Log.writeln(thread.contextRegisters.ip);
      Log.write(""String_Node_Str"");
      Log.writeln(thread.contextRegisters.getIPLocation().loadAddress());
    }
    if (compiledMethodType != VM_CompiledMethod.JNI)     codeLocationsPush(code,initialIPLoc);
 else     if (verbosity >= 3) {
      Log.writeln(""String_Node_Str"");
    }
  }
 else {
    Address returnAddressLoc=VM_Magic.getReturnAddressLocation(prevFp);
    Address returnAddress=returnAddressLoc.loadAddress();
    if (verbosity >= 3) {
      Log.write(""String_Node_Str"");
      Log.write(returnAddress);
      Log.write(""String_Node_Str"");
      Log.writeln(returnAddressLoc);
    }
    if (!DebugUtil.addrInBootImage(returnAddress))     codeLocationsPush(code,returnAddressLoc);
  }
}",0.99753815854259
150000,"/** 
 * Dump the contents of a stack frame. Attempts to interpret each word as an object reference
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void dumpStackFrame(int verbosity){
  Address start, end;
  if (VM.BuildForIA32) {
    if (prevFp.isZero()) {
      start=fp.minus(20 * BYTES_IN_ADDRESS);
      Log.writeln(""String_Node_Str"",fp);
    }
 else {
      start=prevFp;
    }
    end=fp;
  }
 else {
    start=fp;
    end=fp.loadAddress();
  }
  for (Address loc=start; loc.LT(end); loc=loc.plus(BYTES_IN_ADDRESS)) {
    Log.write(loc);
    Log.write(""String_Node_Str"");
    Log.write(loc.diff(start));
    ObjectReference value=loc.loadObjectReference();
    Log.write(""String_Node_Str"");
    Log.write(value);
    Log.write(""String_Node_Str"");
    if (verbosity >= 3 && MM_Interface.objectInVM(value) && loc.NE(start) && loc.NE(end))     MM_Interface.dumpRef(value);
 else     Log.write(""String_Node_Str"");
  }
  Log.write(""String_Node_Str"");
}","/** 
 * Dump the contents of a stack frame. Attempts to interpret each word as an object reference
 * @param verbosity The level of verbosity to be used whenperforming the scan.
 */
private void dumpStackFrame(int verbosity){
  Address start, end;
  if (VM.BuildForIA32) {
    if (prevFp.isZero()) {
      start=fp.minus(20 * BYTES_IN_ADDRESS);
      Log.writeln(""String_Node_Str"",fp);
    }
 else {
      start=prevFp;
    }
    end=fp;
  }
 else {
    start=fp;
    end=fp.loadAddress();
  }
  for (Address loc=start; loc.LT(end); loc=loc.plus(BYTES_IN_ADDRESS)) {
    Log.write(loc);
    Log.write(""String_Node_Str"");
    Log.write(loc.diff(start));
    Log.write(""String_Node_Str"");
    ObjectReference value=loc.loadObjectReference();
    Log.write(value);
    Log.write(""String_Node_Str"");
    Log.flush();
    if (verbosity >= 3 && MM_Interface.objectInVM(value) && loc.NE(start) && loc.NE(end))     MM_Interface.dumpRef(value);
 else     Log.write(""String_Node_Str"");
  }
  Log.write(""String_Node_Str"");
}",0.9467396714783476
