record_number,buggy_code,fixed_code,code_similarity
34001,"public AccountNavAdapter(Context context,int resource,int textViewResourceId,ArrayList<AppUser> appUsers){
  super(context,resource,textViewResourceId,appUsers);
  updateUserList(appUsers);
  this.mContext=context;
  this.mLayoutId=resource;
}","public AccountNavAdapter(Context context,int resource,int textViewResourceId,ArrayList<AppUser> appUsers){
  super(context,resource,textViewResourceId,appUsers);
  this.mAppUsers=appUsers;
  this.mContext=context;
  this.mLayoutId=resource;
}",0.9030927835051548
34002,"public String getModelIdFromSpinner(){
  String modelName=modelSpinner.getSelectedItem().toString();
  if (modelName.equals(getString(R.string.select_model))) {
    return ""String_Node_Str"";
  }
 else {
    for (    Map.Entry<String,String> entry : modelMap.entrySet()) {
      if (entry.getValue().equals(modelName)) {
        return entry.getKey();
      }
    }
  }
  return ""String_Node_Str"";
}","public String getModelIdFromSpinner(){
  if (modelSpinner.getSelectedItem() != null) {
    String modelName=modelSpinner.getSelectedItem().toString();
    if (modelName.equals(getString(R.string.select_model))) {
      return ""String_Node_Str"";
    }
 else {
      for (      Map.Entry<String,String> entry : modelMap.entrySet()) {
        if (entry.getValue().equals(modelName)) {
          return entry.getKey();
        }
      }
    }
  }
  return ""String_Node_Str"";
}",0.9149425287356322
34003,"private void initialPageElements(){
  imageViewLayout=(RelativeLayout)this.findViewById(R.id.camera_view_layout);
  imageView=(ImageView)this.findViewById(R.id.jpg_image_view);
  playPauseImageView=(ImageView)this.findViewById(R.id.play_pause_image_view);
  snapshotMenuView=(ImageView)this.findViewById(R.id.player_savesnapshot);
  surfaceView=(SurfaceView)findViewById(R.id.surface_view);
  surfaceHolder=surfaceView.getHolder();
  surfaceHolder.addCallback(this);
  progressView=((ProgressView)imageViewLayout.findViewById(R.id.live_progress_view));
  progressView.setMinimumWidth(playPauseImageView.getWidth());
  progressView.setMinimumHeight(playPauseImageView.getHeight());
  progressView.canvasColor=Color.TRANSPARENT;
  progressView.setVisibility(View.VISIBLE);
  offlineTextView=(TextView)findViewById(R.id.offline_text_view);
  timeCountTextView=(TextView)findViewById(R.id.time_text_view);
  ImageView ptzLeftImageView=(ImageView)findViewById(R.id.arrow_left);
  ImageView ptzRightImageView=(ImageView)findViewById(R.id.arrow_right);
  ImageView ptzUpImageView=(ImageView)findViewById(R.id.arrow_up);
  ImageView ptzDownImageView=(ImageView)findViewById(R.id.arrow_down);
  ImageView ptzHomeImageView=(ImageView)findViewById(R.id.ptz_home);
  ImageView ptzZoomInImageView=(ImageView)findViewById(R.id.zoom_in_image_view);
  ImageView ptzZoomOutImageView=(ImageView)findViewById(R.id.zoom_out_image_view);
  ImageView presetsImageView=(ImageView)findViewById(R.id.presets_image_view);
  ptzZoomLayout=(RelativeLayout)findViewById(R.id.ptz_zoom_control_layout);
  ptzMoveLayout=(RelativeLayout)findViewById(R.id.ptz_move_control_layout);
  ptzLeftImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      PTZMoveTask.launch(new PTZRelativeBuilder(evercamCamera.getCameraId()).left(4).build());
    }
  }
);
  ptzRightImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      PTZMoveTask.launch(new PTZRelativeBuilder(evercamCamera.getCameraId()).right(4).build());
    }
  }
);
  ptzUpImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      PTZMoveTask.launch(new PTZRelativeBuilder(evercamCamera.getCameraId()).up(3).build());
    }
  }
);
  ptzDownImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      PTZMoveTask.launch(new PTZRelativeBuilder(evercamCamera.getCameraId()).down(3).build());
    }
  }
);
  ptzHomeImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      PTZMoveTask.launch(new PTZHome(evercamCamera.getCameraId()));
    }
  }
);
  ptzZoomInImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      PTZMoveTask.launch(new PTZRelativeBuilder(evercamCamera.getCameraId()).zoom(1).build());
    }
  }
);
  ptzZoomOutImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      PTZMoveTask.launch(new PTZRelativeBuilder(evercamCamera.getCameraId()).zoom(-1).build());
    }
  }
);
  presetsImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (presetList.size() > 0) {
        final AlertDialog listDialog=new AlertDialog.Builder(VideoActivity.this).setNegativeButton(R.string.cancel,null).create();
        LayoutInflater mInflater=LayoutInflater.from(getApplicationContext());
        final View view=mInflater.inflate(R.layout.dialog_preset_list,null);
        ListView listView=(ListView)view.findViewById(R.id.presets_list_view);
        View header=getLayoutInflater().inflate(R.layout.header_preset_list,null);
        listView.addHeaderView(header);
        listDialog.setView(view);
        listView.setAdapter(new PresetsListAdapter(getApplicationContext(),R.layout.item_preset_list,presetList));
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
          @Override public void onItemClick(          AdapterView<?> parent,          View view,          int position,          long id){
            if (position == 0) {
              CustomedDialog.getCreatePresetDialog(VideoActivity.this,evercamCamera.getCameraId()).show();
            }
 else {
              PTZPreset preset=presetList.get(position - 1);
              PTZMoveTask.launch(new PTZPresetControl(evercamCamera.getCameraId(),preset.getToken()));
            }
            listDialog.cancel();
          }
        }
);
        listDialog.show();
      }
    }
  }
);
  playPauseImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (end) {
        Toast.makeText(VideoActivity.this,R.string.msg_try_again,Toast.LENGTH_SHORT).show();
        return;
      }
      if (isProgressViewVisible())       return;
      if (paused) {
        timeCountTextView.setVisibility(View.VISIBLE);
        showProgressView(true);
        playPauseImageView.setImageBitmap(null);
        showAllControlMenus(true);
        playPauseImageView.setImageResource(R.drawable.ic_pause);
        startMediaPlayerAnimation();
        if (evercamCamera != null && !evercamCamera.getExternalRtspUrl().isEmpty()) {
          restartPlay();
        }
 else {
          showJpgView=true;
          loadJpgView();
        }
        paused=false;
      }
 else {
        timeCountTextView.setVisibility(View.INVISIBLE);
        clearControlMenuAnimation();
        if (fadeInAnimation != null && fadeInAnimation.hasStarted() && !fadeInAnimation.hasEnded()) {
          fadeInAnimation.cancel();
          fadeInAnimation.reset();
        }
        showAllControlMenus(true);
        playPauseImageView.setImageBitmap(null);
        playPauseImageView.setImageResource(R.drawable.ic_play);
        pausePlayer();
        paused=true;
        disconnectJpgView();
      }
    }
  }
);
  imageViewLayout.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (end) {
        Toast.makeText(VideoActivity.this,R.string.msg_try_again,Toast.LENGTH_SHORT).show();
        return;
      }
      if (isProgressViewVisible())       return;
      if (!paused && !end) {
        if (playPauseImageView.getVisibility() == View.VISIBLE) {
          showAllControlMenus(false);
          clearControlMenuAnimation();
          fadeInAnimation.reset();
        }
 else {
          showToolbar();
          playPauseImageView.setImageResource(R.drawable.ic_pause);
          showAllControlMenus(true);
          startMediaPlayerAnimation();
        }
      }
    }
  }
);
  snapshotMenuView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!paused) {
        showAllControlMenus(false);
        clearControlMenuAnimation();
        fadeInAnimation.reset();
      }
      if (imageView.getVisibility() == View.VISIBLE) {
        Bitmap bitmap=getBitmapFromImageView(imageView);
        processSnapshot(bitmap,FileType.JPG);
      }
 else       if (surfaceView.getVisibility() == View.VISIBLE) {
        nativeRequestSample(""String_Node_Str"");
      }
    }
  }
);
}","private void initialPageElements(){
  imageViewLayout=(RelativeLayout)this.findViewById(R.id.camera_view_layout);
  imageView=(ImageView)this.findViewById(R.id.jpg_image_view);
  playPauseImageView=(ImageView)this.findViewById(R.id.play_pause_image_view);
  snapshotMenuView=(ImageView)this.findViewById(R.id.player_savesnapshot);
  surfaceView=(SurfaceView)findViewById(R.id.surface_view);
  surfaceHolder=surfaceView.getHolder();
  surfaceHolder.addCallback(this);
  progressView=((ProgressView)imageViewLayout.findViewById(R.id.live_progress_view));
  progressView.setMinimumWidth(playPauseImageView.getWidth());
  progressView.setMinimumHeight(playPauseImageView.getHeight());
  progressView.canvasColor=Color.TRANSPARENT;
  progressView.setVisibility(View.VISIBLE);
  offlineTextView=(TextView)findViewById(R.id.offline_text_view);
  timeCountTextView=(TextView)findViewById(R.id.time_text_view);
  ImageView ptzLeftImageView=(ImageView)findViewById(R.id.arrow_left);
  ImageView ptzRightImageView=(ImageView)findViewById(R.id.arrow_right);
  ImageView ptzUpImageView=(ImageView)findViewById(R.id.arrow_up);
  ImageView ptzDownImageView=(ImageView)findViewById(R.id.arrow_down);
  ImageView ptzHomeImageView=(ImageView)findViewById(R.id.ptz_home);
  ImageView ptzZoomInImageView=(ImageView)findViewById(R.id.zoom_in_image_view);
  ImageView ptzZoomOutImageView=(ImageView)findViewById(R.id.zoom_out_image_view);
  ImageView presetsImageView=(ImageView)findViewById(R.id.presets_image_view);
  ptzZoomLayout=(RelativeLayout)findViewById(R.id.ptz_zoom_control_layout);
  ptzMoveLayout=(RelativeLayout)findViewById(R.id.ptz_move_control_layout);
  ptzLeftImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      PTZMoveTask.launch(new PTZRelativeBuilder(evercamCamera.getCameraId()).left(4).build());
    }
  }
);
  ptzRightImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      PTZMoveTask.launch(new PTZRelativeBuilder(evercamCamera.getCameraId()).right(4).build());
    }
  }
);
  ptzUpImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      PTZMoveTask.launch(new PTZRelativeBuilder(evercamCamera.getCameraId()).up(3).build());
    }
  }
);
  ptzDownImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      PTZMoveTask.launch(new PTZRelativeBuilder(evercamCamera.getCameraId()).down(3).build());
    }
  }
);
  ptzHomeImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      PTZMoveTask.launch(new PTZHome(evercamCamera.getCameraId()));
    }
  }
);
  ptzZoomInImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      PTZMoveTask.launch(new PTZRelativeBuilder(evercamCamera.getCameraId()).zoom(1).build());
    }
  }
);
  ptzZoomOutImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      PTZMoveTask.launch(new PTZRelativeBuilder(evercamCamera.getCameraId()).zoom(-1).build());
    }
  }
);
  presetsImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (presetList.size() > 0) {
        final AlertDialog listDialog=new AlertDialog.Builder(VideoActivity.this).setNegativeButton(R.string.cancel,null).create();
        LayoutInflater mInflater=LayoutInflater.from(getApplicationContext());
        final View view=mInflater.inflate(R.layout.dialog_preset_list,null);
        ListView listView=(ListView)view.findViewById(R.id.presets_list_view);
        View header=getLayoutInflater().inflate(R.layout.header_preset_list,null);
        listView.addHeaderView(header);
        listDialog.setView(view);
        listView.setAdapter(new PresetsListAdapter(getApplicationContext(),R.layout.item_preset_list,presetList));
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
          @Override public void onItemClick(          AdapterView<?> parent,          View view,          int position,          long id){
            if (position == 0) {
              CustomedDialog.getCreatePresetDialog(VideoActivity.this,evercamCamera.getCameraId()).show();
            }
 else {
              PTZPreset preset=presetList.get(position - 1);
              PTZMoveTask.launch(new PTZPresetControl(evercamCamera.getCameraId(),preset.getToken()));
            }
            listDialog.cancel();
          }
        }
);
        listDialog.show();
      }
    }
  }
);
  playPauseImageView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (end) {
        Toast.makeText(VideoActivity.this,R.string.msg_try_again,Toast.LENGTH_SHORT).show();
        return;
      }
      if (isProgressViewVisible())       return;
      if (paused) {
        timeCountTextView.setVisibility(View.VISIBLE);
        showProgressView(true);
        playPauseImageView.setImageBitmap(null);
        showAllControlMenus(true);
        playPauseImageView.setImageResource(R.drawable.ic_pause);
        startMediaPlayerAnimation();
        if (evercamCamera != null && !evercamCamera.getExternalRtspUrl().isEmpty()) {
          restartPlay();
        }
 else {
          showJpgView=true;
          loadJpgView();
        }
        paused=false;
      }
 else {
        timeCountTextView.setVisibility(View.INVISIBLE);
        clearControlMenuAnimation();
        if (fadeInAnimation != null && fadeInAnimation.hasStarted() && !fadeInAnimation.hasEnded()) {
          fadeInAnimation.cancel();
          fadeInAnimation.reset();
        }
        showAllControlMenus(true);
        playPauseImageView.setImageBitmap(null);
        playPauseImageView.setImageResource(R.drawable.ic_play);
        pausePlayer();
        paused=true;
        disconnectJpgView();
      }
    }
  }
);
  imageViewLayout.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (end) {
        Toast.makeText(VideoActivity.this,R.string.msg_try_again,Toast.LENGTH_SHORT).show();
        return;
      }
      if (isProgressViewVisible())       return;
      if (!paused && !end && offlineTextView.getVisibility() != View.VISIBLE) {
        if (playPauseImageView.getVisibility() == View.VISIBLE) {
          showAllControlMenus(false);
          clearControlMenuAnimation();
          fadeInAnimation.reset();
        }
 else {
          showToolbar();
          playPauseImageView.setImageResource(R.drawable.ic_pause);
          showAllControlMenus(true);
          startMediaPlayerAnimation();
        }
      }
    }
  }
);
  snapshotMenuView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!paused) {
        showAllControlMenus(false);
        clearControlMenuAnimation();
        fadeInAnimation.reset();
      }
      if (imageView.getVisibility() == View.VISIBLE) {
        Bitmap bitmap=getBitmapFromImageView(imageView);
        processSnapshot(bitmap,FileType.JPG);
      }
 else       if (surfaceView.getVisibility() == View.VISIBLE) {
        nativeRequestSample(""String_Node_Str"");
      }
    }
  }
);
}",0.9110601957925432
34004,"private void onActionZoom(View view){
  int originalWidth=view.getWidth();
  int originalHeight=view.getHeight();
  long currentTime=System.nanoTime();
  if (time != 0 && (currentTime - time) > 10000000) {
    int leftOffset=(int)(originalWidth - (originalWidth * scaleListener.scaleFactor));
    int topOffset=(int)(originalHeight - (originalHeight * scaleListener.scaleFactor));
    Log.e(TAG,""String_Node_Str"" + leftOffset + ""String_Node_Str""+ topOffset);
    RelativeLayout.LayoutParams layoutParams=(RelativeLayout.LayoutParams)view.getLayoutParams();
    layoutParams.setMargins(leftOffset,topOffset,leftOffset,topOffset);
    view.setLayoutParams(layoutParams);
    if (view.getX() >= 0) {
      view.setX(0);
    }
    if (view.getX() + view.getWidth() <= screenWidth) {
      view.setX(screenWidth - view.getWidth());
    }
  }
  time=System.nanoTime();
}","private void onActionZoom(View view){
  int originalWidth=view.getWidth();
  int originalHeight=view.getHeight();
  long currentTime=System.nanoTime();
  if (time != 0 && (currentTime - time) > 10000000) {
    int leftOffset=(int)(originalWidth - (originalWidth * scaleListener.scaleFactor));
    int topOffset=(int)(originalHeight - (originalHeight * scaleListener.scaleFactor));
    Log.e(TAG,""String_Node_Str"" + leftOffset + ""String_Node_Str""+ topOffset);
    RelativeLayout.LayoutParams layoutParams=(RelativeLayout.LayoutParams)view.getLayoutParams();
    layoutParams.setMargins(leftOffset,topOffset,leftOffset,topOffset);
    view.setLayoutParams(layoutParams);
    if (view.getX() >= 0) {
      view.setX(0);
    }
    if (view.getX() + view.getWidth() <= getScreenWidth()) {
      view.setX(getScreenWidth() - view.getWidth());
    }
  }
  time=System.nanoTime();
}",0.9919447640966628
34005,"@Override public boolean onTouch(View view,MotionEvent event){
  if (gestureDetector != null) {
    gestureDetector.onTouchEvent(event);
  }
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    lastX=event.getX();
  lastY=event.getY();
break;
case MotionEvent.ACTION_UP:
float upX=event.getX();
float upY=event.getY();
if (lastX == upX && lastY == upY) {
onClick();
}
lastX=-1;
lastY=-1;
break;
case MotionEvent.ACTION_MOVE:
if (scaleListener != null) {
if (scaleListener.zoom) {
if (scaleListener.getOriginalScaleFactor() < 1.0 || view.getHeight() < screenHeight) {
onActionZoom(view);
}
}
 else {
onActionMove(event,view);
}
}
lastX=event.getX();
lastY=event.getY();
break;
}
return true;
}","@Override public boolean onTouch(View view,MotionEvent event){
  if (gestureDetector != null) {
    gestureDetector.onTouchEvent(event);
  }
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    lastX=event.getX();
  lastY=event.getY();
break;
case MotionEvent.ACTION_UP:
float upX=event.getX();
float upY=event.getY();
if (lastX == upX && lastY == upY) {
onClick();
}
lastX=-1;
lastY=-1;
break;
case MotionEvent.ACTION_MOVE:
if (scaleListener != null) {
if (scaleListener.zoom) {
if (scaleListener.getOriginalScaleFactor() < 1.0 || view.getHeight() < getScreenHeight()) {
onActionZoom(view);
}
}
 else {
onActionMove(event,view);
}
}
lastX=event.getX();
lastY=event.getY();
break;
}
return true;
}",0.9950319375443576
34006,"private void onActionMove(MotionEvent event,View view){
  if (lastX >= 0 && lastY > 0) {
    float newX=event.getX();
    float newY=event.getY();
    int xDiffInt=(int)(newX - lastX);
    int yDiffInt=(int)(newY - lastY);
    Log.d(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ lastX+ ""String_Node_Str""+ xDiffInt+ ""String_Node_Str""+ newY+ ""String_Node_Str""+ lastY+ ""String_Node_Str""+ yDiffInt);
    RelativeLayout.LayoutParams layoutParams=(RelativeLayout.LayoutParams)view.getLayoutParams();
    if (xDiffInt > 0) {
      if (layoutParams.leftMargin < 0) {
        if (view.getX() >= 0) {
          view.setX(0);
        }
 else {
          view.setX(view.getX() + xDiffInt);
        }
      }
    }
 else     if (xDiffInt < 0) {
      if (layoutParams.rightMargin < 0) {
        if (view.getX() + view.getWidth() <= screenWidth) {
          view.setX(screenWidth - view.getWidth());
        }
 else {
          view.setX(view.getX() + xDiffInt);
        }
      }
    }
  }
}","private void onActionMove(MotionEvent event,View view){
  if (lastX >= 0 && lastY > 0) {
    float newX=event.getX();
    float newY=event.getY();
    int xDiffInt=(int)(newX - lastX);
    int yDiffInt=(int)(newY - lastY);
    Log.d(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ lastX+ ""String_Node_Str""+ xDiffInt+ ""String_Node_Str""+ newY+ ""String_Node_Str""+ lastY+ ""String_Node_Str""+ yDiffInt);
    RelativeLayout.LayoutParams layoutParams=(RelativeLayout.LayoutParams)view.getLayoutParams();
    if (xDiffInt > 0) {
      if (layoutParams.leftMargin < 0) {
        if (view.getX() >= 0) {
          view.setX(0);
        }
 else {
          view.setX(view.getX() + xDiffInt);
        }
      }
    }
 else     if (xDiffInt < 0) {
      if (layoutParams.rightMargin < 0) {
        if (view.getX() + view.getWidth() <= getScreenWidth()) {
          view.setX(getScreenWidth() - view.getWidth());
        }
 else {
          view.setX(view.getX() + xDiffInt);
        }
      }
    }
  }
}",0.9929078014184396
34007,"@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  int orientation=newConfig.orientation;
  if (orientation == Configuration.ORIENTATION_PORTRAIT) {
    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN,WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
    showToolbar();
    setOpaqueTitleBackground();
  }
 else {
    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
    setGradientTitleBackground();
    if (!paused && !end && !isProgressViewVisible())     hideToolbar();
 else     showToolbar();
  }
  this.invalidateOptionsMenu();
}","@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  int orientation=newConfig.orientation;
  if (orientation == Configuration.ORIENTATION_PORTRAIT) {
    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN,WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
    showToolbar();
    adoptSwipeListenerToLandscape(false);
  }
 else {
    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
    setGradientTitleBackground();
    adoptSwipeListenerToLandscape(true);
    if (!paused && !end && !isProgressViewVisible())     hideToolbar();
 else     showToolbar();
  }
  this.invalidateOptionsMenu();
}",0.7847663012117715
34008,"@Override public void onCreate(Bundle savedInstanceState){
  try {
    super.onCreate(savedInstanceState);
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    initAnalyticsObjects();
    readShortcutCameraId();
    if (!liveViewCameraId.isEmpty()) {
      startingCameraID=liveViewCameraId;
      liveViewCameraId=""String_Node_Str"";
    }
    launchSleepTimer();
    setDisplayOrientation();
    setContentView(R.layout.activity_video);
    mToolbar=(Toolbar)findViewById(R.id.spinner_tool_bar);
    setOpaqueTitleBackground();
    setSupportActionBar(mToolbar);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    mCameraListSpinner=(Spinner)findViewById(R.id.spinner_camera_list);
    initialPageElements();
    checkIsShortcutCameraExists();
    startPlay();
    if (showCameraCreated) {
      CustomSnackbar.showLong(this,R.string.create_success);
      showCameraCreated=false;
    }
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  try {
    super.onCreate(savedInstanceState);
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    initAnalyticsObjects();
    readShortcutCameraId();
    if (!liveViewCameraId.isEmpty()) {
      startingCameraID=liveViewCameraId;
      liveViewCameraId=""String_Node_Str"";
    }
    launchSleepTimer();
    setDisplayOrientation();
    setContentView(R.layout.activity_video);
    mToolbar=(Toolbar)findViewById(R.id.spinner_tool_bar);
    setGradientTitleBackground();
    setSupportActionBar(mToolbar);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    mCameraListSpinner=(Spinner)findViewById(R.id.spinner_camera_list);
    initialPageElements();
    checkIsShortcutCameraExists();
    startPlay();
    if (showCameraCreated) {
      CustomSnackbar.showLong(this,R.string.create_success);
      showCameraCreated=false;
    }
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
  }
}",0.9933078393881452
34009,"/** 
 * TextureView.SurfaceTextureListener
 */
@Override public void onSurfaceTextureAvailable(SurfaceTexture surface,int width,int height){
  playIntro();
}","/** 
 * TextureView.SurfaceTextureListener
 */
@Override public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture,int width,int height){
  playIntro(surfaceTexture);
}",0.9373134328358208
34010,"private void playIntro(){
  if (player != null) {
    player.release();
    player=null;
  }
  try {
    player=new MediaPlayer();
    AssetFileDescriptor afd=getResources().openRawResourceFd(R.raw.gpoview);
    player.setDataSource(afd.getFileDescriptor(),afd.getStartOffset(),afd.getDeclaredLength());
    player.setOnPreparedListener(this);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  player.setOnVideoSizeChangedListener(new MediaPlayer.OnVideoSizeChangedListener(){
    @Override public void onVideoSizeChanged(    MediaPlayer mp,    int width,    int height){
      mVideoWidth=width;
      mVideoHeight=height;
      updateTextureViewSize();
    }
  }
);
  player.prepareAsync();
}","private void playIntro(SurfaceTexture surfaceTexture){
  if (player != null) {
    player.release();
    player=null;
  }
  try {
    player=new MediaPlayer();
    AssetFileDescriptor afd=getResources().openRawResourceFd(R.raw.gpoview);
    player.setDataSource(afd.getFileDescriptor(),afd.getStartOffset(),afd.getDeclaredLength());
    player.setOnPreparedListener(this);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  player.setSurface(new Surface(surfaceTexture));
  player.setOnVideoSizeChangedListener(new MediaPlayer.OnVideoSizeChangedListener(){
    @Override public void onVideoSizeChanged(    MediaPlayer mp,    int width,    int height){
      mVideoWidth=width;
      mVideoHeight=height;
      updateTextureViewSize();
    }
  }
);
  player.prepareAsync();
}",0.9470154258886652
34011,"/** 
 * MediaPlayer.OnPreparedListener Callback for player.prepareAsync();
 */
@Override public void onPrepared(MediaPlayer mp){
  mp.setSurface(new Surface(getSurfaceTexture()));
  mp.setLooping(true);
  mp.start();
}","/** 
 * MediaPlayer.OnPreparedListener Callback for player.prepareAsync();
 */
@Override public void onPrepared(MediaPlayer mp){
  mp.setLooping(true);
  mp.start();
}",0.8675324675324675
34012,"@Override public void onClick(DialogInterface dialog,int which){
  launchTestSnapshot();
}","@Override public void onClick(View v){
  String externalHost=externalHostEdit.getText().toString();
  if (Commons.isLocalIp(externalHost)) {
    showLocalIpWarning();
  }
 else {
    launchTestSnapshot();
  }
}",0.3933333333333333
34013,"private void initialScreen(){
  FragmentManager fragmentManager=getSupportFragmentManager();
  modelSelectorFragment=(ModelSelectorFragment)fragmentManager.findFragmentById(R.id.model_selector_fragment);
  cameraIdLayout=(LinearLayout)findViewById(R.id.add_camera_id_layout);
  cameraIdTextView=(TextView)findViewById(R.id.add_id_txt_view);
  cameraNameEdit=(EditText)findViewById(R.id.add_name_edit);
  ImageView externalIpExplainationImageButton=(ImageView)findViewById(R.id.ip_explanation_btn);
  ImageView httpExplainationImageButton=(ImageView)findViewById(R.id.http_explanation_btn);
  ImageView jpgExplainationImageButton=(ImageView)findViewById(R.id.jpg_explanation_btn);
  ImageView rtspPortExplainationImageButton=(ImageView)findViewById(R.id.rtsp_port_explanation_btn);
  ImageView rtspUrlExplainationImageButton=(ImageView)findViewById(R.id.rtsp_url_explanation_btn);
  usernameEdit=(EditText)findViewById(R.id.add_username_edit);
  passwordEdit=(EditText)findViewById(R.id.add_password_edit);
  externalHostEdit=(PortCheckEditText)findViewById(R.id.add_external_host_edit);
  externalHttpEdit=(PortCheckEditText)findViewById(R.id.add_external_http_edit);
  externalRtspEdit=(PortCheckEditText)findViewById(R.id.add_external_rtsp_edit);
  jpgUrlEdit=(EditText)findViewById(R.id.add_jpg_edit);
  rtspUrlEdit=(EditText)findViewById(R.id.add_rtsp_edit);
  mHttpStatusTextView=(TextView)findViewById(R.id.port_status_text_http);
  mRtspStatusTextView=(TextView)findViewById(R.id.port_status_text_rtsp);
  mHttpProgressBar=(ProgressBar)findViewById(R.id.progress_bar_http);
  mRtspProgressBar=(ProgressBar)findViewById(R.id.progress_bar_rtsp);
  jpgUrlLayout=(LinearLayout)findViewById(R.id.add_jpg_url_layout);
  rtspUrlLayout=(LinearLayout)findViewById(R.id.add_rtsp_url_layout);
  addEditButton=(Button)findViewById(R.id.button_add_edit_camera);
  Button testButton=(Button)findViewById(R.id.button_test_snapshot);
  mValidateHostInput=new ValidateHostInput(externalHostEdit,externalHttpEdit,externalRtspEdit){
    @Override public void onHostEmpty(){
      CustomToast.showInCenter(AddEditCameraActivity.this,getString(R.string.host_required));
    }
    @Override public void onHttpEmpty(){
      CustomToast.showInCenter(AddEditCameraActivity.this,getString(R.string.external_http_required));
    }
    @Override public void onInvalidHttpPort(){
      CustomToast.showInCenter(AddEditCameraActivity.this,getString(R.string.msg_port_range_error));
    }
    @Override public void onInvalidRtspPort(){
      CustomToast.showInCenter(AddEditCameraActivity.this,getString(R.string.msg_port_range_error));
    }
  }
;
  if (cameraEdit != null) {
    addEditButton.setText(getString(R.string.save_changes));
    cameraIdLayout.setVisibility(View.VISIBLE);
  }
 else {
    cameraIdLayout.setVisibility(View.GONE);
    addEditButton.setText(getString(R.string.finish_and_add));
  }
  externalIpExplainationImageButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      CustomedDialog.showMessageDialogWithTitle(AddEditCameraActivity.this,R.string.msg_ip_explanation_title,R.string.msg_ip_explanation);
    }
  }
);
  jpgExplainationImageButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      CustomedDialog.showMessageDialogWithTitle(AddEditCameraActivity.this,R.string.msg_jpg_explanation_title,R.string.msg_jpg_explanation);
    }
  }
);
  httpExplainationImageButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      CustomedDialog.showMessageDialogWithTitle(AddEditCameraActivity.this,R.string.msg_http_explanation_title,R.string.msg_http_explanation);
    }
  }
);
  rtspPortExplainationImageButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      CustomedDialog.showMessageDialogWithTitle(AddEditCameraActivity.this,R.string.msg_rtsp_port_explanation_title,R.string.msg_rtsp_port_explanation);
    }
  }
);
  rtspUrlExplainationImageButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      CustomedDialog.showMessageDialogWithTitle(AddEditCameraActivity.this,R.string.msg_rtsp_url_explanation_title,R.string.msg_rtsp_url_explanation);
    }
  }
);
  externalHttpEdit.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        externalHttpEdit.hideStatusViewsOnTextChange(mHttpStatusTextView);
      }
 else {
        checkPort(PortCheckTask.PortType.HTTP);
      }
    }
  }
);
  externalRtspEdit.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        externalRtspEdit.hideStatusViewsOnTextChange(mRtspStatusTextView);
      }
 else {
        checkPort(PortCheckTask.PortType.RTSP);
      }
    }
  }
);
  externalHostEdit.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        externalHostEdit.hideStatusViewsOnTextChange(mRtspStatusTextView,mHttpStatusTextView);
      }
 else {
        checkPort(PortCheckTask.PortType.HTTP);
        checkPort(PortCheckTask.PortType.RTSP);
      }
    }
  }
);
  jpgUrlEdit.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!jpgUrlEdit.isFocusable()) {
        CustomedDialog.getMessageDialog(AddEditCameraActivity.this,R.string.msg_url_ending_not_editable).show();
      }
    }
  }
);
  addEditButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      String externalHost=externalHostEdit.getText().toString();
      if (Commons.isLocalIp(externalHost)) {
        CustomedDialog.getStandardAlertDialog(AddEditCameraActivity.this,new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            performAddEdit();
          }
        }
,R.string.msg_local_ip_warning).show();
      }
 else {
        performAddEdit();
      }
    }
  }
);
  testButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      String externalHost=externalHostEdit.getText().toString();
      if (Commons.isLocalIp(externalHost)) {
        CustomedDialog.getStandardAlertDialog(AddEditCameraActivity.this,new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            launchTestSnapshot();
          }
        }
,R.string.msg_local_ip_warning).show();
      }
 else {
        launchTestSnapshot();
      }
    }
  }
);
}","private void initialScreen(){
  FragmentManager fragmentManager=getSupportFragmentManager();
  modelSelectorFragment=(ModelSelectorFragment)fragmentManager.findFragmentById(R.id.model_selector_fragment);
  cameraIdLayout=(LinearLayout)findViewById(R.id.add_camera_id_layout);
  cameraIdTextView=(TextView)findViewById(R.id.add_id_txt_view);
  cameraNameEdit=(EditText)findViewById(R.id.add_name_edit);
  ImageView externalIpExplainationImageButton=(ImageView)findViewById(R.id.ip_explanation_btn);
  ImageView httpExplainationImageButton=(ImageView)findViewById(R.id.http_explanation_btn);
  ImageView jpgExplainationImageButton=(ImageView)findViewById(R.id.jpg_explanation_btn);
  ImageView rtspPortExplainationImageButton=(ImageView)findViewById(R.id.rtsp_port_explanation_btn);
  ImageView rtspUrlExplainationImageButton=(ImageView)findViewById(R.id.rtsp_url_explanation_btn);
  usernameEdit=(EditText)findViewById(R.id.add_username_edit);
  passwordEdit=(EditText)findViewById(R.id.add_password_edit);
  externalHostEdit=(PortCheckEditText)findViewById(R.id.add_external_host_edit);
  externalHttpEdit=(PortCheckEditText)findViewById(R.id.add_external_http_edit);
  externalRtspEdit=(PortCheckEditText)findViewById(R.id.add_external_rtsp_edit);
  jpgUrlEdit=(EditText)findViewById(R.id.add_jpg_edit);
  rtspUrlEdit=(EditText)findViewById(R.id.add_rtsp_edit);
  mHttpStatusTextView=(TextView)findViewById(R.id.port_status_text_http);
  mRtspStatusTextView=(TextView)findViewById(R.id.port_status_text_rtsp);
  mHttpProgressBar=(ProgressBar)findViewById(R.id.progress_bar_http);
  mRtspProgressBar=(ProgressBar)findViewById(R.id.progress_bar_rtsp);
  jpgUrlLayout=(LinearLayout)findViewById(R.id.add_jpg_url_layout);
  rtspUrlLayout=(LinearLayout)findViewById(R.id.add_rtsp_url_layout);
  addEditButton=(Button)findViewById(R.id.button_add_edit_camera);
  Button testButton=(Button)findViewById(R.id.button_test_snapshot);
  mValidateHostInput=new ValidateHostInput(externalHostEdit,externalHttpEdit,externalRtspEdit){
    @Override public void onLocalIp(){
      externalHostEdit.requestFocus();
      showLocalIpWarning();
    }
    @Override public void onHostEmpty(){
      CustomToast.showInCenter(AddEditCameraActivity.this,getString(R.string.host_required));
    }
    @Override public void onHttpEmpty(){
      CustomToast.showInCenter(AddEditCameraActivity.this,getString(R.string.external_http_required));
    }
    @Override public void onInvalidHttpPort(){
      CustomToast.showInCenter(AddEditCameraActivity.this,getString(R.string.msg_port_range_error));
    }
    @Override public void onInvalidRtspPort(){
      CustomToast.showInCenter(AddEditCameraActivity.this,getString(R.string.msg_port_range_error));
    }
  }
;
  if (cameraEdit != null) {
    addEditButton.setText(getString(R.string.save_changes));
    cameraIdLayout.setVisibility(View.VISIBLE);
  }
 else {
    cameraIdLayout.setVisibility(View.GONE);
    addEditButton.setText(getString(R.string.finish_and_add));
  }
  externalIpExplainationImageButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      CustomedDialog.showMessageDialogWithTitle(AddEditCameraActivity.this,R.string.msg_ip_explanation_title,R.string.msg_ip_explanation);
    }
  }
);
  jpgExplainationImageButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      CustomedDialog.showMessageDialogWithTitle(AddEditCameraActivity.this,R.string.msg_jpg_explanation_title,R.string.msg_jpg_explanation);
    }
  }
);
  httpExplainationImageButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      CustomedDialog.showMessageDialogWithTitle(AddEditCameraActivity.this,R.string.msg_http_explanation_title,R.string.msg_http_explanation);
    }
  }
);
  rtspPortExplainationImageButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      CustomedDialog.showMessageDialogWithTitle(AddEditCameraActivity.this,R.string.msg_rtsp_port_explanation_title,R.string.msg_rtsp_port_explanation);
    }
  }
);
  rtspUrlExplainationImageButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      CustomedDialog.showMessageDialogWithTitle(AddEditCameraActivity.this,R.string.msg_rtsp_url_explanation_title,R.string.msg_rtsp_url_explanation);
    }
  }
);
  externalHttpEdit.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        externalHttpEdit.hideStatusViewsOnTextChange(mHttpStatusTextView);
      }
 else {
        checkPort(PortCheckTask.PortType.HTTP);
      }
    }
  }
);
  externalRtspEdit.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        externalRtspEdit.hideStatusViewsOnTextChange(mRtspStatusTextView);
      }
 else {
        checkPort(PortCheckTask.PortType.RTSP);
      }
    }
  }
);
  externalHostEdit.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        externalHostEdit.hideStatusViewsOnTextChange(mRtspStatusTextView,mHttpStatusTextView);
      }
 else {
        checkPort(PortCheckTask.PortType.HTTP);
        checkPort(PortCheckTask.PortType.RTSP);
      }
    }
  }
);
  jpgUrlEdit.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!jpgUrlEdit.isFocusable()) {
        CustomedDialog.getMessageDialog(AddEditCameraActivity.this,R.string.msg_url_ending_not_editable).show();
      }
    }
  }
);
  addEditButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      String externalHost=externalHostEdit.getText().toString();
      if (Commons.isLocalIp(externalHost)) {
        showLocalIpWarning();
      }
 else {
        performAddEdit();
      }
    }
  }
);
  testButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      String externalHost=externalHostEdit.getText().toString();
      if (Commons.isLocalIp(externalHost)) {
        showLocalIpWarning();
      }
 else {
        launchTestSnapshot();
      }
    }
  }
);
}",0.9059127526979784
34014,"private void initConnectCameraUI(){
  mPublicIpEditText=(PortCheckEditText)findViewById(R.id.external_ip_float_edit_text);
  mHttpEditText=(PortCheckEditText)findViewById(R.id.http_float_edit_text);
  mRtspEditText=(PortCheckEditText)findViewById(R.id.rtsp_float_edit_text);
  mHttpStatusText=(TextView)findViewById(R.id.port_status_text_http);
  mRtspStatusText=(TextView)findViewById(R.id.port_status_text_rtsp);
  mHttpProgressBar=(ProgressBar)findViewById(R.id.progress_bar_http);
  mRtspProgressBar=(ProgressBar)findViewById(R.id.progress_bar_rtsp);
  mConnectExplainView=(ExplanationView)findViewById(R.id.explanation_view_layout);
  mAuthCheckBox=(CheckBox)findViewById(R.id.auth_check_box);
  mAuthLayout=(LinearLayout)findViewById(R.id.auth_layout);
  TextView requiredAuthText=(TextView)findViewById(R.id.required_auth_text);
  mCamUsernameEditText=(EditText)findViewById(R.id.cam_username_float_edit_text);
  mCamPasswordEditText=(EditText)findViewById(R.id.cam_password_float_edit_text);
  mCheckSnapshotButton=(Button)findViewById(R.id.check_snapshot_button);
  TextView liveSupportLink=(TextView)findViewById(R.id.live_support_text_link);
  ImageView editModelImageButton=(ImageView)findViewById(R.id.edit_model_image_view);
  mSelectedModelTextView=(TextView)findViewById(R.id.selected_model_text);
  ImageView clearHostImageButton=(ImageView)findViewById(R.id.clear_host_image_button);
  mButtonIndicatorLayout=(RelativeLayout)findViewById(R.id.snapshot_button_indicator_layout);
  mConnectFormLayout=(LinearLayout)findViewById(R.id.connect_form_layout);
  mSnapshotPathLayout=(LinearLayout)findViewById(R.id.snapshot_path_layout);
  mRtspPathLayout=(LinearLayout)findViewById(R.id.rtsp_path_layout);
  mSnapshotPathEditText=(EditText)findViewById(R.id.snapshot_path_float_edit_text);
  mRtspPathEditText=(EditText)findViewById(R.id.rtsp_path_float_edit_text);
  clearHostImageButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mPublicIpEditText.requestFocus();
      mPublicIpEditText.setText(""String_Node_Str"");
    }
  }
);
  editModelImageButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showModelSelectorView();
    }
  }
);
  liveSupportLink.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intercom.client().displayConversationsList();
    }
  }
);
  mCheckSnapshotButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mValidateHostInput.passed()) {
        final String username=mCamUsernameEditText.getText().toString();
        final String password=mCamPasswordEditText.getText().toString();
        final String externalHost=mPublicIpEditText.getText().toString();
        final String externalHttp=mHttpEditText.getText().toString();
        String jpgUrl=""String_Node_Str"";
        if (mSelectedModel != null) {
          if (!mSelectedModel.isUnknown()) {
            jpgUrl=AddEditCameraActivity.buildUrlEndingWithSlash(mSelectedModel.getDefaultJpgUrl());
          }
 else {
            final String jpgPath=mSnapshotPathEditText.getText().toString();
            jpgUrl=AddEditCameraActivity.buildUrlEndingWithSlash(jpgPath);
          }
        }
        String externalUrl=getString(R.string.prefix_http) + externalHost + ""String_Node_Str""+ externalHttp;
        new TestSnapshotTask(externalUrl,jpgUrl,username,password,AddCameraActivity.this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
      }
    }
  }
);
  View.OnFocusChangeListener showAuthTextListener=new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      showAuthExplanation();
    }
  }
;
  mCamUsernameEditText.setOnFocusChangeListener(showAuthTextListener);
  mCamPasswordEditText.setOnFocusChangeListener(showAuthTextListener);
  mAuthCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      onAuthCheckedChange(isChecked);
    }
  }
);
  requiredAuthText.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mAuthCheckBox.setChecked(!mAuthCheckBox.isChecked());
      onAuthCheckedChange(mAuthCheckBox.isChecked());
    }
  }
);
  mHttpEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        mHttpEditText.hideStatusViewsOnTextChange(mHttpStatusText);
        updateMessage(mConnectExplainView,0,R.string.connect_camera_http_message);
      }
 else {
        checkPort(PortCheckTask.PortType.HTTP);
      }
    }
  }
);
  mRtspEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        mRtspEditText.hideStatusViewsOnTextChange(mRtspStatusText);
        updateMessage(mConnectExplainView,0,R.string.connect_camera_rtsp_message);
      }
 else {
        checkPort(PortCheckTask.PortType.RTSP);
      }
    }
  }
);
  mPublicIpEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        mPublicIpEditText.hideStatusViewsOnTextChange(mHttpStatusText,mRtspStatusText);
        updateMessage(mConnectExplainView,0,R.string.connect_camera_ip_message);
      }
 else {
        checkPort(PortCheckTask.PortType.HTTP);
        checkPort(PortCheckTask.PortType.RTSP);
      }
    }
  }
);
  mSnapshotPathEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        updateMessage(mConnectExplainView,0,R.string.connect_camera_snapshot_path_message);
      }
    }
  }
);
  mRtspPathEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        updateMessage(mConnectExplainView,0,R.string.connect_camera_rtsp_path_message);
      }
    }
  }
);
  mValidateHostInput=new ValidateHostInput(mPublicIpEditText,mHttpEditText,mRtspEditText){
    @Override public void onHostEmpty(){
      mPublicIpEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.host_required));
    }
    @Override public void onHttpEmpty(){
      mHttpEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.external_http_required));
    }
    @Override public void onInvalidHttpPort(){
      mHttpEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.msg_port_range_error));
    }
    @Override public void onInvalidRtspPort(){
      mRtspEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.msg_port_range_error));
    }
  }
;
}","private void initConnectCameraUI(){
  mPublicIpEditText=(PortCheckEditText)findViewById(R.id.external_ip_float_edit_text);
  mHttpEditText=(PortCheckEditText)findViewById(R.id.http_float_edit_text);
  mRtspEditText=(PortCheckEditText)findViewById(R.id.rtsp_float_edit_text);
  mHttpStatusText=(TextView)findViewById(R.id.port_status_text_http);
  mRtspStatusText=(TextView)findViewById(R.id.port_status_text_rtsp);
  mHttpProgressBar=(ProgressBar)findViewById(R.id.progress_bar_http);
  mRtspProgressBar=(ProgressBar)findViewById(R.id.progress_bar_rtsp);
  mConnectExplainView=(ExplanationView)findViewById(R.id.explanation_view_layout);
  mAuthCheckBox=(CheckBox)findViewById(R.id.auth_check_box);
  mAuthLayout=(LinearLayout)findViewById(R.id.auth_layout);
  TextView requiredAuthText=(TextView)findViewById(R.id.required_auth_text);
  mCamUsernameEditText=(EditText)findViewById(R.id.cam_username_float_edit_text);
  mCamPasswordEditText=(EditText)findViewById(R.id.cam_password_float_edit_text);
  mCheckSnapshotButton=(Button)findViewById(R.id.check_snapshot_button);
  TextView liveSupportLink=(TextView)findViewById(R.id.live_support_text_link);
  ImageView editModelImageButton=(ImageView)findViewById(R.id.edit_model_image_view);
  mSelectedModelTextView=(TextView)findViewById(R.id.selected_model_text);
  ImageView clearHostImageButton=(ImageView)findViewById(R.id.clear_host_image_button);
  mButtonIndicatorLayout=(RelativeLayout)findViewById(R.id.snapshot_button_indicator_layout);
  mConnectFormLayout=(LinearLayout)findViewById(R.id.connect_form_layout);
  mSnapshotPathLayout=(LinearLayout)findViewById(R.id.snapshot_path_layout);
  mRtspPathLayout=(LinearLayout)findViewById(R.id.rtsp_path_layout);
  mSnapshotPathEditText=(EditText)findViewById(R.id.snapshot_path_float_edit_text);
  mRtspPathEditText=(EditText)findViewById(R.id.rtsp_path_float_edit_text);
  clearHostImageButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mPublicIpEditText.requestFocus();
      mPublicIpEditText.setText(""String_Node_Str"");
    }
  }
);
  editModelImageButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showModelSelectorView();
    }
  }
);
  liveSupportLink.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intercom.client().displayConversationsList();
    }
  }
);
  mCheckSnapshotButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mValidateHostInput.passed()) {
        final String username=mCamUsernameEditText.getText().toString();
        final String password=mCamPasswordEditText.getText().toString();
        final String externalHost=mPublicIpEditText.getText().toString();
        final String externalHttp=mHttpEditText.getText().toString();
        String jpgUrl=""String_Node_Str"";
        if (mSelectedModel != null) {
          if (!mSelectedModel.isUnknown()) {
            jpgUrl=AddEditCameraActivity.buildUrlEndingWithSlash(mSelectedModel.getDefaultJpgUrl());
          }
 else {
            final String jpgPath=mSnapshotPathEditText.getText().toString();
            jpgUrl=AddEditCameraActivity.buildUrlEndingWithSlash(jpgPath);
          }
        }
        String externalUrl=getString(R.string.prefix_http) + externalHost + ""String_Node_Str""+ externalHttp;
        new TestSnapshotTask(externalUrl,jpgUrl,username,password,AddCameraActivity.this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
      }
    }
  }
);
  View.OnFocusChangeListener showAuthTextListener=new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      showAuthExplanation();
    }
  }
;
  mCamUsernameEditText.setOnFocusChangeListener(showAuthTextListener);
  mCamPasswordEditText.setOnFocusChangeListener(showAuthTextListener);
  mAuthCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      onAuthCheckedChange(isChecked);
    }
  }
);
  requiredAuthText.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mAuthCheckBox.setChecked(!mAuthCheckBox.isChecked());
      onAuthCheckedChange(mAuthCheckBox.isChecked());
    }
  }
);
  mHttpEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        mHttpEditText.hideStatusViewsOnTextChange(mHttpStatusText);
        updateMessage(mConnectExplainView,0,R.string.connect_camera_http_message);
      }
 else {
        checkPort(PortCheckTask.PortType.HTTP);
      }
    }
  }
);
  mRtspEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        mRtspEditText.hideStatusViewsOnTextChange(mRtspStatusText);
        updateMessage(mConnectExplainView,0,R.string.connect_camera_rtsp_message);
      }
 else {
        checkPort(PortCheckTask.PortType.RTSP);
      }
    }
  }
);
  mPublicIpEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        mPublicIpEditText.hideStatusViewsOnTextChange(mHttpStatusText,mRtspStatusText);
        updateMessage(mConnectExplainView,0,R.string.connect_camera_ip_message);
      }
 else {
        checkPort(PortCheckTask.PortType.HTTP);
        checkPort(PortCheckTask.PortType.RTSP);
      }
    }
  }
);
  mSnapshotPathEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        updateMessage(mConnectExplainView,0,R.string.connect_camera_snapshot_path_message);
      }
    }
  }
);
  mRtspPathEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        updateMessage(mConnectExplainView,0,R.string.connect_camera_rtsp_path_message);
      }
    }
  }
);
  mValidateHostInput=new ValidateHostInput(mPublicIpEditText,mHttpEditText,mRtspEditText){
    @Override public void onLocalIp(){
      mPublicIpEditText.requestFocus();
      showLocalIpWarning();
    }
    @Override public void onHostEmpty(){
      mPublicIpEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.host_required));
    }
    @Override public void onHttpEmpty(){
      mHttpEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.external_http_required));
    }
    @Override public void onInvalidHttpPort(){
      mHttpEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.msg_port_range_error));
    }
    @Override public void onInvalidRtspPort(){
      mRtspEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.msg_port_range_error));
    }
  }
;
}",0.9505490662376722
34015,"public boolean passed(){
  String externalHost=mIpEditText.getText().toString();
  if (externalHost.isEmpty()) {
    onHostEmpty();
    return false;
  }
 else {
    String httpPort=mHttpPortEditText.getText().toString();
    String rtspPort=mRtspPortEditText.getText().toString();
    if (httpPort.isEmpty()) {
      onHttpEmpty();
      return false;
    }
 else {
      if (!mHttpPortEditText.isPortStringValid()) {
        onInvalidHttpPort();
        return false;
      }
    }
    if (!rtspPort.isEmpty() && !mRtspPortEditText.isPortStringValid()) {
      onInvalidRtspPort();
      return false;
    }
  }
  return true;
}","public boolean passed(){
  String externalHost=mIpEditText.getText().toString();
  if (externalHost.isEmpty()) {
    onHostEmpty();
    return false;
  }
 else {
    if (Commons.isLocalIp(externalHost)) {
      onLocalIp();
      return false;
    }
 else {
      String httpPort=mHttpPortEditText.getText().toString();
      String rtspPort=mRtspPortEditText.getText().toString();
      if (httpPort.isEmpty()) {
        onHttpEmpty();
        return false;
      }
 else {
        if (!mHttpPortEditText.isPortStringValid()) {
          onInvalidHttpPort();
          return false;
        }
      }
      if (!rtspPort.isEmpty() && !mRtspPortEditText.isPortStringValid()) {
        onInvalidRtspPort();
        return false;
      }
    }
  }
  return true;
}",0.8793103448275862
34016,"private void updatePortStatus(boolean isPortOpen){
  if (mStatusViewReference != null) {
    TextView statusView=mStatusViewReference.get();
    statusView.setVisibility(View.VISIBLE);
    statusView.setText(isPortOpen ? R.string.port_is_open : R.string.port_is_closed);
    statusView.setTextColor(isPortOpen ? mContext.getResources().getColor(R.color.mint_green) : mContext.getResources().getColor(R.color.orange_red));
  }
}","private void updatePortStatus(boolean isPortOpen){
  if (mStatusViewReference != null) {
    TextView statusView=mStatusViewReference.get();
    if (statusView != null) {
      statusView.setVisibility(View.VISIBLE);
      statusView.setText(isPortOpen ? R.string.port_is_open : R.string.port_is_closed);
      statusView.setTextColor(isPortOpen ? mContext.getResources().getColor(R.color.mint_green) : mContext.getResources().getColor(R.color.orange_red));
    }
  }
}",0.953125
34017,"public void show(String message){
  progressDialog.setMessage(message);
  progressDialog.setCanceledOnTouchOutside(false);
  progressDialog.show();
}","public void show(String message){
  progressDialog.setMessage(message);
  progressDialog.setCanceledOnTouchOutside(false);
  if (!activity.isFinishing()) {
    progressDialog.show();
  }
}",0.884272997032641
34018,"private void loadCamerasToActionBar(){
  String[] cameraNames;
  final ArrayList<EvercamCamera> onlineCameraList=new ArrayList<>();
  final ArrayList<EvercamCamera> cameraList;
  if (PrefsManager.showOfflineCameras(VideoActivity.this)) {
    cameraList=AppData.evercamCameraList;
  }
 else {
    for (    EvercamCamera evercamCamera : AppData.evercamCameraList) {
      if (!evercamCamera.isOffline()) {
        onlineCameraList.add(evercamCamera);
      }
    }
    cameraList=onlineCameraList;
  }
  cameraNames=getCameraNameArray(cameraList);
  CameraListAdapter adapter=new CameraListAdapter(VideoActivity.this,R.layout.live_view_spinner,R.id.spinner_camera_name_text,cameraNames,cameraList);
  mCameraListSpinner.setAdapter(adapter);
  mCameraListSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      if (timeCounter != null) {
        timeCounter.stop();
        timeCounter=null;
      }
      if (browseJpgTask != null && browseJpgTask.getStatus() != AsyncTask.Status.RUNNING) {
        browseJpgTask.cancel(true);
      }
      browseJpgTask=null;
      showImagesVideo=false;
      evercamCamera=cameraList.get(position);
      showPtzControl(false);
      if (evercamCamera.isOffline()) {
        offlineTextView.setVisibility(View.VISIBLE);
        progressView.setVisibility(View.GONE);
        surfaceView.setVisibility(View.GONE);
        imageView.setVisibility(View.GONE);
      }
 else {
        offlineTextView.setVisibility(View.GONE);
        setCameraForPlaying(cameraList.get(position));
        createPlayer(evercamCamera);
        if (evercamCamera.hasModel()) {
          new CheckOnvifTask(VideoActivity.this,evercamCamera).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
        }
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mCameraListSpinner.setSelection(defaultCameraIndex);
}","private void loadCamerasToActionBar(){
  String[] cameraNames;
  final ArrayList<EvercamCamera> onlineCameraList=new ArrayList<>();
  final ArrayList<EvercamCamera> cameraList;
  if (PrefsManager.showOfflineCameras(VideoActivity.this)) {
    cameraList=AppData.evercamCameraList;
  }
 else {
    for (    EvercamCamera evercamCamera : AppData.evercamCameraList) {
      if (!evercamCamera.isOffline()) {
        onlineCameraList.add(evercamCamera);
      }
    }
    cameraList=onlineCameraList;
  }
  cameraNames=getCameraNameArray(cameraList);
  CameraListAdapter adapter=new CameraListAdapter(VideoActivity.this,R.layout.live_view_spinner,R.id.spinner_camera_name_text,cameraNames,cameraList);
  mCameraListSpinner.setAdapter(adapter);
  mCameraListSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      if (timeCounter != null) {
        timeCounter.stop();
        timeCounter=null;
      }
      if (browseJpgTask != null && browseJpgTask.getStatus() != AsyncTask.Status.RUNNING) {
        browseJpgTask.cancel(true);
      }
      browseJpgTask=null;
      showImagesVideo=false;
      evercamCamera=cameraList.get(position);
      startingCameraID=evercamCamera.getCameraId();
      showPtzControl(false);
      if (evercamCamera.isOffline()) {
        offlineTextView.setVisibility(View.VISIBLE);
        progressView.setVisibility(View.GONE);
        surfaceView.setVisibility(View.GONE);
        imageView.setVisibility(View.GONE);
      }
 else {
        offlineTextView.setVisibility(View.GONE);
        setCameraForPlaying(cameraList.get(position));
        createPlayer(evercamCamera);
        if (evercamCamera.hasModel()) {
          new CheckOnvifTask(VideoActivity.this,evercamCamera).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
        }
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mCameraListSpinner.setSelection(defaultCameraIndex);
}",0.9872110181997048
34019,"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  if (timeCounter != null) {
    timeCounter.stop();
    timeCounter=null;
  }
  if (browseJpgTask != null && browseJpgTask.getStatus() != AsyncTask.Status.RUNNING) {
    browseJpgTask.cancel(true);
  }
  browseJpgTask=null;
  showImagesVideo=false;
  evercamCamera=cameraList.get(position);
  showPtzControl(false);
  if (evercamCamera.isOffline()) {
    offlineTextView.setVisibility(View.VISIBLE);
    progressView.setVisibility(View.GONE);
    surfaceView.setVisibility(View.GONE);
    imageView.setVisibility(View.GONE);
  }
 else {
    offlineTextView.setVisibility(View.GONE);
    setCameraForPlaying(cameraList.get(position));
    createPlayer(evercamCamera);
    if (evercamCamera.hasModel()) {
      new CheckOnvifTask(VideoActivity.this,evercamCamera).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    }
  }
}","@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  if (timeCounter != null) {
    timeCounter.stop();
    timeCounter=null;
  }
  if (browseJpgTask != null && browseJpgTask.getStatus() != AsyncTask.Status.RUNNING) {
    browseJpgTask.cancel(true);
  }
  browseJpgTask=null;
  showImagesVideo=false;
  evercamCamera=cameraList.get(position);
  startingCameraID=evercamCamera.getCameraId();
  showPtzControl(false);
  if (evercamCamera.isOffline()) {
    offlineTextView.setVisibility(View.VISIBLE);
    progressView.setVisibility(View.GONE);
    surfaceView.setVisibility(View.GONE);
    imageView.setVisibility(View.GONE);
  }
 else {
    offlineTextView.setVisibility(View.GONE);
    setCameraForPlaying(cameraList.get(position));
    createPlayer(evercamCamera);
    if (evercamCamera.hasModel()) {
      new CheckOnvifTask(VideoActivity.this,evercamCamera).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    }
  }
}",0.9744952178533476
34020,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_add_camera);
  setUpDefaultToolbar();
  setHomeIconAsCancel();
  mViewFlipper=(ViewFlipper)findViewById(R.id.add_camera_view_flipper);
  mProgressBar=(ProgressBar)findViewById(R.id.add_camera_progress_bar);
  mProgressBar.getProgressDrawable().setColorFilter(getResources().getColor(R.color.orange_red),PorterDuff.Mode.SRC_IN);
  mProgressBar.setProgress(33);
  if (savedInstanceState != null) {
    mSelectedModel=(SelectedModel)savedInstanceState.get(KEY_SELECTED_MODEL);
  }
  initModelSelectorUI();
  initConnectCameraUI();
  initCameraNameView();
  if (savedInstanceState != null) {
    int flipperPosition=savedInstanceState.getInt(KEY_FLIPPER_POSITION);
    if (flipperPosition == 0) {
      showModelSelectorView();
    }
 else     if (flipperPosition == 1) {
      showConnectCameraView();
    }
 else     if (flipperPosition == 2) {
      showCameraNameView();
    }
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_add_camera);
  setUpDefaultToolbar();
  setHomeIconAsCancel();
  mViewFlipper=(ViewFlipper)findViewById(R.id.add_camera_view_flipper);
  mProgressBar=(ProgressBar)findViewById(R.id.add_camera_progress_bar);
  mProgressBar.getProgressDrawable().setColorFilter(getResources().getColor(R.color.orange_red),PorterDuff.Mode.SRC_IN);
  mProgressBar.setProgress(33);
  if (savedInstanceState != null) {
    mSelectedModel=(SelectedModel)savedInstanceState.get(KEY_SELECTED_MODEL);
  }
  mHandler=new Handler();
  initModelSelectorUI();
  initConnectCameraUI();
  initCameraNameView();
  if (savedInstanceState != null) {
    int flipperPosition=savedInstanceState.getInt(KEY_FLIPPER_POSITION);
    if (flipperPosition == 0) {
      showModelSelectorView();
    }
 else     if (flipperPosition == 1) {
      showConnectCameraView();
    }
 else     if (flipperPosition == 2) {
      showCameraNameView();
    }
  }
}",0.987378640776699
34021,"private void quitAddCamera(){
  int currentPosition=mViewFlipper.getDisplayedChild();
  if (currentPosition == 0) {
    finish();
  }
 else {
    CustomedDialog.getConfirmCancelAddCameraDialog(this).show();
  }
}","private void quitAddCamera(){
  CustomedDialog.getConfirmCancelAddCameraDialog(this).show();
}",0.6143790849673203
34022,"private void showConnectCameraView(){
  mViewFlipper.setDisplayedChild(1);
  mProgressBar.setProgress(67);
  setTitle(R.string.title_connect_camera);
  updateMessage(mConnectExplainView,0,R.string.connect_camera_explain_message);
  populateSelectedModel(mSelectedModelTextView,mSelectedModel);
  autoPopulateExternalIP(mPublicIpEditText);
}","private void showConnectCameraView(){
  mViewFlipper.setDisplayedChild(1);
  mProgressBar.setProgress(67);
  setTitle(R.string.title_connect_camera);
  updateMessage(mConnectExplainView,0,R.string.connect_camera_explain_message);
  populateSelectedModel(mSelectedModelTextView,mSelectedModel);
  mHandler.postDelayed(new Runnable(){
    @Override public void run(){
      autoPopulateExternalIP(mPublicIpEditText);
    }
  }
,100);
}",0.8796895213454075
34023,"private void initConnectCameraUI(){
  mPublicIpEditText=(PortCheckEditText)findViewById(R.id.external_ip_float_edit_text);
  mHttpEditText=(PortCheckEditText)findViewById(R.id.http_float_edit_text);
  mRtspEditText=(PortCheckEditText)findViewById(R.id.rtsp_float_edit_text);
  mHttpStatusText=(TextView)findViewById(R.id.port_status_text_http);
  mRtspStatusText=(TextView)findViewById(R.id.port_status_text_rtsp);
  mHttpProgressBar=(ProgressBar)findViewById(R.id.progress_bar_http);
  mRtspProgressBar=(ProgressBar)findViewById(R.id.progress_bar_rtsp);
  mConnectExplainView=(ExplanationView)findViewById(R.id.explanation_view_layout);
  mAuthCheckBox=(CheckBox)findViewById(R.id.auth_check_box);
  mAuthLayout=(LinearLayout)findViewById(R.id.auth_layout);
  TextView requiredAuthText=(TextView)findViewById(R.id.required_auth_text);
  mCamUsernameEditText=(EditText)findViewById(R.id.cam_username_float_edit_text);
  mCamPasswordEditText=(EditText)findViewById(R.id.cam_password_float_edit_text);
  mCheckSnapshotButton=(Button)findViewById(R.id.check_snapshot_button);
  mConnectCameraNextButton=(Button)findViewById(R.id.connect_camera_next_button);
  TextView liveSupportLink=(TextView)findViewById(R.id.live_support_text_link);
  ImageView editModelImageButton=(ImageView)findViewById(R.id.edit_model_image_view);
  mSelectedModelTextView=(TextView)findViewById(R.id.selected_model_text);
  ImageView clearHostImageButton=(ImageView)findViewById(R.id.clear_host_image_button);
  clearHostImageButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mPublicIpEditText.setText(""String_Node_Str"");
    }
  }
);
  editModelImageButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showModelSelectorView();
    }
  }
);
  liveSupportLink.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intercom.client().displayConversationsList();
    }
  }
);
  mConnectCameraNextButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showCameraNameView();
    }
  }
);
  mCheckSnapshotButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mValidateHostInput.passed()) {
        final String username=mCamUsernameEditText.getText().toString();
        final String password=mCamPasswordEditText.getText().toString();
        final String externalHost=mPublicIpEditText.getText().toString();
        final String externalHttp=mHttpEditText.getText().toString();
        String jpgUrl=""String_Node_Str"";
        if (mSelectedModel != null) {
          jpgUrl=AddEditCameraActivity.buildUrlEndingWithSlash(mSelectedModel.getDefaultJpgUrl());
        }
        String externalUrl=getString(R.string.prefix_http) + externalHost + ""String_Node_Str""+ externalHttp;
        new TestSnapshotTask(externalUrl,jpgUrl,username,password,AddCameraActivity.this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
      }
    }
  }
);
  View.OnFocusChangeListener showAuthTextListener=new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      showAuthExplanation();
    }
  }
;
  mCamUsernameEditText.setOnFocusChangeListener(showAuthTextListener);
  mCamPasswordEditText.setOnFocusChangeListener(showAuthTextListener);
  mAuthCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      onAuthCheckedChange(isChecked);
    }
  }
);
  requiredAuthText.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mAuthCheckBox.setChecked(!mAuthCheckBox.isChecked());
      onAuthCheckedChange(mAuthCheckBox.isChecked());
    }
  }
);
  mHttpEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        mHttpEditText.hideStatusViewsOnTextChange(mHttpStatusText);
        updateMessage(mConnectExplainView,0,R.string.connect_camera_http_message);
      }
 else {
        checkPort(PortCheckTask.PortType.HTTP);
      }
    }
  }
);
  mRtspEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        mRtspEditText.hideStatusViewsOnTextChange(mRtspStatusText);
        updateMessage(mConnectExplainView,0,R.string.connect_camera_rtsp_message);
      }
 else {
        checkPort(PortCheckTask.PortType.RTSP);
      }
    }
  }
);
  mPublicIpEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        mPublicIpEditText.hideStatusViewsOnTextChange(mHttpStatusText,mRtspStatusText);
        updateMessage(mConnectExplainView,0,R.string.connect_camera_ip_message);
      }
 else {
        checkPort(PortCheckTask.PortType.HTTP);
        checkPort(PortCheckTask.PortType.RTSP);
      }
    }
  }
);
  mValidateHostInput=new ValidateHostInput(mPublicIpEditText,mHttpEditText,mRtspEditText){
    @Override public void onHostEmpty(){
      mPublicIpEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.host_required));
    }
    @Override public void onHttpEmpty(){
      mHttpEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.external_http_required));
    }
    @Override public void onInvalidHttpPort(){
      mHttpEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.msg_port_range_error));
    }
    @Override public void onInvalidRtspPort(){
      mRtspEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.msg_port_range_error));
    }
  }
;
}","private void initConnectCameraUI(){
  mPublicIpEditText=(PortCheckEditText)findViewById(R.id.external_ip_float_edit_text);
  mHttpEditText=(PortCheckEditText)findViewById(R.id.http_float_edit_text);
  mRtspEditText=(PortCheckEditText)findViewById(R.id.rtsp_float_edit_text);
  mHttpStatusText=(TextView)findViewById(R.id.port_status_text_http);
  mRtspStatusText=(TextView)findViewById(R.id.port_status_text_rtsp);
  mHttpProgressBar=(ProgressBar)findViewById(R.id.progress_bar_http);
  mRtspProgressBar=(ProgressBar)findViewById(R.id.progress_bar_rtsp);
  mConnectExplainView=(ExplanationView)findViewById(R.id.explanation_view_layout);
  mAuthCheckBox=(CheckBox)findViewById(R.id.auth_check_box);
  mAuthLayout=(LinearLayout)findViewById(R.id.auth_layout);
  TextView requiredAuthText=(TextView)findViewById(R.id.required_auth_text);
  mCamUsernameEditText=(EditText)findViewById(R.id.cam_username_float_edit_text);
  mCamPasswordEditText=(EditText)findViewById(R.id.cam_password_float_edit_text);
  mCheckSnapshotButton=(Button)findViewById(R.id.check_snapshot_button);
  TextView liveSupportLink=(TextView)findViewById(R.id.live_support_text_link);
  ImageView editModelImageButton=(ImageView)findViewById(R.id.edit_model_image_view);
  mSelectedModelTextView=(TextView)findViewById(R.id.selected_model_text);
  ImageView clearHostImageButton=(ImageView)findViewById(R.id.clear_host_image_button);
  mButtonIndicatorLayout=(RelativeLayout)findViewById(R.id.snapshot_button_indicator_layout);
  clearHostImageButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mPublicIpEditText.requestFocus();
      mPublicIpEditText.setText(""String_Node_Str"");
    }
  }
);
  editModelImageButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showModelSelectorView();
    }
  }
);
  liveSupportLink.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intercom.client().displayConversationsList();
    }
  }
);
  mCheckSnapshotButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mValidateHostInput.passed()) {
        final String username=mCamUsernameEditText.getText().toString();
        final String password=mCamPasswordEditText.getText().toString();
        final String externalHost=mPublicIpEditText.getText().toString();
        final String externalHttp=mHttpEditText.getText().toString();
        String jpgUrl=""String_Node_Str"";
        if (mSelectedModel != null) {
          jpgUrl=AddEditCameraActivity.buildUrlEndingWithSlash(mSelectedModel.getDefaultJpgUrl());
        }
        String externalUrl=getString(R.string.prefix_http) + externalHost + ""String_Node_Str""+ externalHttp;
        new TestSnapshotTask(externalUrl,jpgUrl,username,password,AddCameraActivity.this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
      }
    }
  }
);
  View.OnFocusChangeListener showAuthTextListener=new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      showAuthExplanation();
    }
  }
;
  mCamUsernameEditText.setOnFocusChangeListener(showAuthTextListener);
  mCamPasswordEditText.setOnFocusChangeListener(showAuthTextListener);
  mAuthCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      onAuthCheckedChange(isChecked);
    }
  }
);
  requiredAuthText.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mAuthCheckBox.setChecked(!mAuthCheckBox.isChecked());
      onAuthCheckedChange(mAuthCheckBox.isChecked());
    }
  }
);
  mHttpEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        mHttpEditText.hideStatusViewsOnTextChange(mHttpStatusText);
        updateMessage(mConnectExplainView,0,R.string.connect_camera_http_message);
      }
 else {
        checkPort(PortCheckTask.PortType.HTTP);
      }
    }
  }
);
  mRtspEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        mRtspEditText.hideStatusViewsOnTextChange(mRtspStatusText);
        updateMessage(mConnectExplainView,0,R.string.connect_camera_rtsp_message);
      }
 else {
        checkPort(PortCheckTask.PortType.RTSP);
      }
    }
  }
);
  mPublicIpEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        mPublicIpEditText.hideStatusViewsOnTextChange(mHttpStatusText,mRtspStatusText);
        updateMessage(mConnectExplainView,0,R.string.connect_camera_ip_message);
      }
 else {
        checkPort(PortCheckTask.PortType.HTTP);
        checkPort(PortCheckTask.PortType.RTSP);
      }
    }
  }
);
  mValidateHostInput=new ValidateHostInput(mPublicIpEditText,mHttpEditText,mRtspEditText){
    @Override public void onHostEmpty(){
      mPublicIpEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.host_required));
    }
    @Override public void onHttpEmpty(){
      mHttpEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.external_http_required));
    }
    @Override public void onInvalidHttpPort(){
      mHttpEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.msg_port_range_error));
    }
    @Override public void onInvalidRtspPort(){
      mRtspEditText.requestFocus();
      CustomToast.showInCenter(AddCameraActivity.this,getString(R.string.msg_port_range_error));
    }
  }
;
}",0.9370699781842592
34024,"private void showCameraNameView(){
  mViewFlipper.setDisplayedChild(2);
  mProgressBar.setProgress(100);
  setTitle(R.string.title_name_camera);
}","public void showCameraNameView(){
  mViewFlipper.setDisplayedChild(2);
  mProgressBar.setProgress(100);
  setTitle(R.string.title_name_camera);
}",0.9690721649484536
34025,"/** 
 * Return a pop up dialog that shows camera snapshot.
 * @param drawable the image drawable returned to show in pop up dialog
 */
public static AlertDialog getSnapshotDialog(Activity activity,Drawable drawable){
  AlertDialog snapshotDialog=new AlertDialog.Builder(activity).create();
  LayoutInflater mInflater=LayoutInflater.from(activity);
  final View snapshotView=mInflater.inflate(R.layout.test_snapshot_dialog,null);
  ImageView snapshotImageView=(ImageView)snapshotView.findViewById(R.id.test_snapshot_image);
  snapshotImageView.setImageDrawable(drawable);
  snapshotDialog.setView(snapshotView);
  Window window=snapshotDialog.getWindow();
  WindowManager.LayoutParams layoutParams=window.getAttributes();
  layoutParams.y=-CamerasActivity.readScreenHeight(activity) / 9;
  window.setAttributes(layoutParams);
  return snapshotDialog;
}","/** 
 * Return a pop up dialog that shows camera snapshot.
 * @param drawable the image drawable returned to show in pop up dialog
 */
public static AlertDialog getSnapshotDialog(final Activity activity,Drawable drawable){
  Builder builder=new AlertDialog.Builder(activity);
  final AlertDialog snapshotDialog=builder.create();
  snapshotDialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);
  LayoutInflater mInflater=LayoutInflater.from(activity);
  final View snapshotView=mInflater.inflate(R.layout.test_snapshot_dialog,null);
  Button nextButton=(Button)snapshotView.findViewById(R.id.connect_camera_next_button);
  if (activity instanceof AddCameraActivity) {
    nextButton.setVisibility(View.VISIBLE);
    nextButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        ((AddCameraActivity)activity).showCameraNameView();
        snapshotDialog.dismiss();
      }
    }
);
  }
  ImageView snapshotImageView=(ImageView)snapshotView.findViewById(R.id.test_snapshot_image);
  snapshotImageView.setImageDrawable(drawable);
  snapshotDialog.setView(snapshotView);
  return snapshotDialog;
}",0.4468610973801285
34026,"@Override protected void onPreExecute(){
  customProgressDialog=new CustomProgressDialog(activity);
  customProgressDialog.show(activity.getString(R.string.retrieving_snapshot));
}","@Override protected void onPreExecute(){
  if (activity instanceof AddEditCameraActivity) {
    customProgressDialog=new CustomProgressDialog(activity);
    customProgressDialog.show(activity.getString(R.string.retrieving_snapshot));
  }
 else   if (activity instanceof AddCameraActivity) {
    ((AddCameraActivity)activity).showTestSnapshotProgress(true);
  }
}",0.6642066420664207
34027,"@Override protected void onPostExecute(Drawable drawable){
  customProgressDialog.dismiss();
  KeenClient client=KeenHelper.getClient(activity);
  if (drawable != null) {
    if (activity instanceof AddCameraActivity) {
      ((AddCameraActivity)activity).showConnectCameraNextButton(true);
    }
    CustomedDialog.getSnapshotDialog(activity,drawable).show();
    new TestSnapshotFeedbackItem(activity,AppData.defaultUser.getUsername(),true,true).setSnapshot_url(url).setCam_username(username).setCam_password(password).sendToKeenIo(client);
  }
 else {
    String username=""String_Node_Str"";
    if (AppData.defaultUser != null) {
      username=AppData.defaultUser.getUsername();
    }
    if (errorMessage == null) {
      CustomToast.showInCenterLong(activity,R.string.snapshot_test_failed);
      new TestSnapshotFeedbackItem(activity,username,false,true).setSnapshot_url(url).setCam_username(username).setCam_password(password).sendToKeenIo(client);
    }
 else {
      CustomToast.showInCenterLong(activity,errorMessage);
      new TestSnapshotFeedbackItem(activity,username,false,false).setSnapshot_url(url).setCam_username(username).setCam_password(password).sendToKeenIo(client);
    }
  }
}","@Override protected void onPostExecute(Drawable drawable){
  if (activity instanceof AddEditCameraActivity) {
    customProgressDialog.dismiss();
  }
 else   if (activity instanceof AddCameraActivity) {
    ((AddCameraActivity)activity).showTestSnapshotProgress(false);
  }
  KeenClient client=KeenHelper.getClient(activity);
  if (drawable != null) {
    CustomedDialog.getSnapshotDialog(activity,drawable).show();
    new TestSnapshotFeedbackItem(activity,AppData.defaultUser.getUsername(),true,true).setSnapshot_url(url).setCam_username(username).setCam_password(password).sendToKeenIo(client);
  }
 else {
    String username=""String_Node_Str"";
    if (AppData.defaultUser != null) {
      username=AppData.defaultUser.getUsername();
    }
    if (errorMessage == null) {
      CustomToast.showInCenterLong(activity,R.string.snapshot_test_failed);
      new TestSnapshotFeedbackItem(activity,username,false,true).setSnapshot_url(url).setCam_username(username).setCam_password(password).sendToKeenIo(client);
    }
 else {
      CustomToast.showInCenterLong(activity,errorMessage);
      new TestSnapshotFeedbackItem(activity,username,false,false).setSnapshot_url(url).setCam_username(username).setCam_password(password).sendToKeenIo(client);
    }
  }
}",0.8751525010166734
34028,"public void attemptLogin(){
  if (loginTask != null) {
    return;
  }
  usernameEdit.setError(null);
  passwordEdit.setError(null);
  username=usernameEdit.getText().toString();
  password=passwordEdit.getText().toString();
  boolean cancel=false;
  View focusView=null;
  if (TextUtils.isEmpty(username)) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_username_required);
    focusView=usernameEdit;
    cancel=true;
  }
 else   if (!username.contains(""String_Node_Str"") && !username.matches(Constants.REGULAR_EXPRESSION_USERNAME)) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_invalid_username);
    focusView=usernameEdit;
    cancel=true;
  }
 else   if (TextUtils.isEmpty(password)) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_password_required);
    focusView=passwordEdit;
    cancel=true;
  }
 else   if (password.contains(""String_Node_Str"")) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_invalid_password);
    focusView=passwordEdit;
    cancel=true;
  }
  if (cancel) {
    focusView.requestFocus();
  }
 else {
    customProgressDialog.show(getString(R.string.login_progress_signing_in));
    InputMethodManager inputMethodManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
    if (getCurrentFocus() != null) {
      inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(),0);
    }
    loginTask=new LoginTask();
    loginTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
}","public void attemptLogin(){
  if (loginTask != null) {
    return;
  }
  usernameEdit.setError(null);
  passwordEdit.setError(null);
  username=usernameEdit.getText().toString().replace(""String_Node_Str"",""String_Node_Str"");
  password=passwordEdit.getText().toString();
  boolean cancel=false;
  View focusView=null;
  if (TextUtils.isEmpty(username)) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_username_required);
    focusView=usernameEdit;
    cancel=true;
  }
 else   if ((!username.contains(""String_Node_Str"") && !username.matches(Constants.REGULAR_EXPRESSION_USERNAME))) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_invalid_username);
    focusView=usernameEdit;
    cancel=true;
  }
 else   if (TextUtils.isEmpty(password)) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_password_required);
    focusView=passwordEdit;
    cancel=true;
  }
 else   if (password.contains(""String_Node_Str"")) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_invalid_password);
    focusView=passwordEdit;
    cancel=true;
  }
  if (cancel) {
    focusView.requestFocus();
  }
 else {
    customProgressDialog.show(getString(R.string.login_progress_signing_in));
    InputMethodManager inputMethodManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
    if (getCurrentFocus() != null) {
      inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(),0);
    }
    loginTask=new LoginTask();
    loginTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
}",0.9849792265899648
34029,"@Override protected void onPostExecute(Boolean isExpired){
  if (isExpired) {
    new EvercamAccount(MainActivity.this).remove(AppData.defaultUser.getEmail(),null);
    finish();
    Intent slideIntent=new Intent(MainActivity.this,SlideActivity.class);
    startActivity(slideIntent);
  }
 else {
    finish();
    startCamerasActivity();
  }
}","@Override protected void onPostExecute(Boolean isExpired){
  if (isExpired) {
    new EvercamAccount(MainActivity.this).remove(AppData.defaultUser.getEmail(),null);
    finish();
    Intent slideIntent=new Intent(MainActivity.this,SlideActivity.class);
    startActivity(slideIntent);
  }
 else {
    registerUserWithIntercom(AppData.defaultUser);
    finish();
    startCamerasActivity();
  }
}",0.9309878213802436
34030,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  View headerView=getActivity().getLayoutInflater().inflate(R.layout.share_list_header,getListView(),false);
  mShareAdapter=new ShareListArrayAdapter(getActivity(),R.layout.share_list_item,mShareList);
  getListView().addHeaderView(headerView);
  getListView().setDivider(null);
  setListAdapter(mShareAdapter);
  mSharingStatusImageView=(ImageView)headerView.findViewById(R.id.share_status_icon_image_view);
  mSharingStatusTextView=(TextView)headerView.findViewById(R.id.sharing_status_text_view);
  mSharingStatusDetailTextView=(TextView)headerView.findViewById(R.id.sharing_status_detail_text_view);
  retrieveSharingStatusFromCamera();
  FetchShareListTask.launch(SharingActivity.evercamCamera.getCameraId(),getActivity());
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  View headerView=getActivity().getLayoutInflater().inflate(R.layout.share_list_header,getListView(),false);
  mShareAdapter=new ShareListArrayAdapter(getActivity(),R.layout.share_list_item,mShareList);
  getListView().addHeaderView(headerView);
  getListView().setDivider(null);
  setListAdapter(mShareAdapter);
  mSharingStatusImageView=(ImageView)headerView.findViewById(R.id.share_status_icon_image_view);
  mSharingStatusTextView=(TextView)headerView.findViewById(R.id.sharing_status_text_view);
  mSharingStatusDetailTextView=(TextView)headerView.findViewById(R.id.sharing_status_detail_text_view);
  retrieveSharingStatusFromCamera();
  if (SharingActivity.evercamCamera != null) {
    FetchShareListTask.launch(SharingActivity.evercamCamera.getCameraId(),getActivity());
  }
}",0.9696275071633238
34031,"/** 
 * Return '3G' or 'WiFi'
 */
public String getNetworkString(){
  if (isConnectedWifi()) {
    return mContext.getString(R.string.wifi);
  }
 else   if (isConnectedMobile()) {
    return mContext.getString(R.string.three_g);
  }
  return mContext.getString(R.string.unknown);
}","/** 
 * Return '3G' or 'WiFi'
 */
public String getNetworkString(){
  if (mContext != null) {
    if (isConnectedWifi()) {
      return mContext.getString(R.string.wifi);
    }
 else     if (isConnectedMobile()) {
      return mContext.getString(R.string.three_g);
    }
    return mContext.getString(R.string.unknown);
  }
 else {
    return ""String_Node_Str"";
  }
}",0.8364197530864198
34032,"private void buildModelSpinner(ArrayList<Model> modelList,String selectedModel){
  if (selectedModel != null && !selectedModel.isEmpty()) {
    selectedModel=selectedModel.toLowerCase(Locale.UK);
  }
  if (modelMap == null) {
    modelMap=new TreeMap<>();
  }
  modelMap.clear();
  if (modelList == null) {
    modelSpinner.setEnabled(false);
  }
 else {
    if (modelList.size() == 0) {
      modelSpinner.setEnabled(false);
    }
 else {
      modelSpinner.setEnabled(true);
      for (      Model model : modelList) {
        try {
          modelMap.put(model.getId(),model.getName());
        }
 catch (        EvercamException e) {
          Log.e(TAG,e.toString());
        }
      }
    }
  }
  Collection<String> modelNameCollection=modelMap.values();
  String[] fullModelArray=Commons.joinStringArray(new String[]{getResources().getString(R.string.select_model)},modelNameCollection.toArray(new String[0]));
  ArrayAdapter<String> spinnerArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,fullModelArray);
  spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner);
  modelSpinner.setAdapter(spinnerArrayAdapter);
  int selectedPosition=0;
  if (selectedModel != null) {
    if (modelMap.get(selectedModel) != null) {
      String selectedModelName=modelMap.get(selectedModel);
      selectedPosition=spinnerArrayAdapter.getPosition(selectedModelName);
    }
  }
  if (selectedPosition != 0) {
    modelSpinner.setSelection(selectedPosition);
  }
 else   if (modelSavedSelectedPosition != 0 && modelSpinner.getCount() > 1) {
    modelSpinner.setSelection(modelSavedSelectedPosition);
    modelSavedSelectedPosition=0;
  }
 else {
    modelSpinner.setSelection(spinnerArrayAdapter.getPosition(getString(R.string.model_default)));
  }
}","private void buildModelSpinner(ArrayList<Model> modelList,String selectedModel){
  if (selectedModel != null && !selectedModel.isEmpty()) {
    selectedModel=selectedModel.toLowerCase(Locale.UK);
  }
  if (modelMap == null) {
    modelMap=new TreeMap<>();
  }
  modelMap.clear();
  if (modelList == null) {
    modelSpinner.setEnabled(false);
  }
 else {
    if (modelList.size() == 0) {
      modelSpinner.setEnabled(false);
    }
 else {
      modelSpinner.setEnabled(true);
      for (      Model model : modelList) {
        try {
          modelMap.put(model.getId(),model.getName());
        }
 catch (        EvercamException e) {
          Log.e(TAG,e.toString());
        }
      }
    }
  }
  Collection<String> modelNameCollection=modelMap.values();
  String[] fullModelArray=Commons.joinStringArray(new String[]{getResources().getString(R.string.select_model)},modelNameCollection.toArray(new String[0]));
  ArrayAdapter<String> spinnerArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,fullModelArray);
  spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner);
  modelSpinner.setAdapter(spinnerArrayAdapter);
  int selectedPosition=0;
  if (selectedModel != null) {
    if (modelMap.get(selectedModel) != null) {
      String selectedModelName=modelMap.get(selectedModel);
      selectedPosition=spinnerArrayAdapter.getPosition(selectedModelName);
    }
  }
  if (selectedPosition != 0) {
    modelSpinner.setSelection(selectedPosition);
  }
 else   if (modelSavedSelectedPosition != 0 && modelSpinner.getCount() > 1 && modelSavedSelectedPosition < modelSpinner.getCount()) {
    modelSpinner.setSelection(modelSavedSelectedPosition);
    modelSavedSelectedPosition=0;
  }
 else {
    modelSpinner.setSelection(spinnerArrayAdapter.getPosition(getString(R.string.model_default)));
  }
}",0.9844961240310076
34033,"private void buildVendorSpinner(ArrayList<Vendor> vendorList,String selectedVendor){
  if (vendorMap == null) {
    vendorMap=new TreeMap<>();
  }
  if (vendorMapIdAsKey == null) {
    vendorMapIdAsKey=new TreeMap<>();
  }
  if (vendorList != null) {
    for (    Vendor vendor : vendorList) {
      try {
        vendorMap.put(vendor.getName(),vendor.getId());
        vendorMapIdAsKey.put(vendor.getId(),vendor.getName());
      }
 catch (      EvercamException e) {
        Log.e(TAG,e.toString());
      }
    }
  }
  Set<String> set=vendorMap.keySet();
  String[] vendorArray=Commons.joinStringArray(new String[]{getResources().getString(R.string.select_vendor)},set.toArray(new String[0]));
  ArrayAdapter<String> spinnerArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,vendorArray);
  spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner);
  int selectedPosition=0;
  if (discoveredCamera != null) {
    if (discoveredCamera.hasVendor()) {
      String vendorId=discoveredCamera.getVendor();
      String vendorName=vendorMapIdAsKey.get(vendorId);
      selectedPosition=spinnerArrayAdapter.getPosition(vendorName);
    }
  }
  if (selectedVendor != null) {
    selectedPosition=spinnerArrayAdapter.getPosition(selectedVendor);
  }
  vendorSpinner.setAdapter(spinnerArrayAdapter);
  if (selectedPosition != 0) {
    vendorSpinner.setSelection(selectedPosition);
  }
 else   if (vendorSavedSelectedPosition != 0) {
    vendorSpinner.setSelection(vendorSavedSelectedPosition);
    vendorSavedSelectedPosition=0;
  }
}","private void buildVendorSpinner(ArrayList<Vendor> vendorList,String selectedVendor){
  if (vendorMap == null) {
    vendorMap=new TreeMap<>();
  }
  if (vendorMapIdAsKey == null) {
    vendorMapIdAsKey=new TreeMap<>();
  }
  if (vendorList != null) {
    for (    Vendor vendor : vendorList) {
      try {
        vendorMap.put(vendor.getName(),vendor.getId());
        vendorMapIdAsKey.put(vendor.getId(),vendor.getName());
      }
 catch (      EvercamException e) {
        Log.e(TAG,e.toString());
      }
    }
  }
  Set<String> set=vendorMap.keySet();
  String[] vendorArray=Commons.joinStringArray(new String[]{getResources().getString(R.string.select_vendor)},set.toArray(new String[0]));
  ArrayAdapter<String> spinnerArrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,vendorArray);
  spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner);
  int selectedPosition=0;
  if (discoveredCamera != null) {
    if (discoveredCamera.hasVendor()) {
      String vendorId=discoveredCamera.getVendor();
      String vendorName=vendorMapIdAsKey.get(vendorId);
      selectedPosition=spinnerArrayAdapter.getPosition(vendorName);
    }
  }
  if (selectedVendor != null) {
    selectedPosition=spinnerArrayAdapter.getPosition(selectedVendor);
  }
  vendorSpinner.setAdapter(spinnerArrayAdapter);
  if (selectedPosition != 0) {
    vendorSpinner.setSelection(selectedPosition);
  }
 else   if (vendorSavedSelectedPosition != 0 && vendorSpinner.getCount() > 1 && vendorSavedSelectedPosition < vendorSpinner.getCount()) {
    vendorSpinner.setSelection(vendorSavedSelectedPosition);
    vendorSavedSelectedPosition=0;
  }
}",0.9719800747198007
34034,"public void addNonCameraDevice(Device device){
  nonCameraDevices.add(device);
}","public void addNonCameraDevice(final Device device){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      nonCameraDevices.add(device);
    }
  }
);
}",0.6451612903225806
34035,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_scan);
  setUpDefaultToolbar();
  setActivityBackgroundColor(Color.WHITE);
  scanProgressView=findViewById(R.id.scan_status_layout);
  scanResultListView=findViewById(R.id.scan_result_layout);
  scanResultNoCameraView=findViewById(R.id.scan_result_no_camera_layout);
  progressBar=(ProgressBar)findViewById(R.id.horizontal_progress_bar);
  progressBar.getProgressDrawable().setColorFilter(getResources().getColor(R.color.orange_red),PorterDuff.Mode.SRC_IN);
  cameraListView=(ListView)findViewById(R.id.scan_result_list);
  Button addManuallyButton=(Button)findViewById(R.id.button_add_camera_manually);
  Button showAllDeviceButton=(Button)findViewById(R.id.button_show_all_devices);
  View footerView=getLayoutInflater().inflate(R.layout.scan_list_footer,cameraListView,false);
  showAllDeviceButton=(Button)footerView.findViewById(R.id.button_all_devices_in_list);
  cameraListView.addFooterView(footerView);
  deviceAdapter=new ScanResultAdapter(this,R.layout.scan_list_layout,discoveredCameras,drawableArray);
  cameraListView.setAdapter(deviceAdapter);
  cameraListView.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> arg0,    View arg1,    int position,    long arg3){
      final DiscoveredCamera cameraInList=(DiscoveredCamera)cameraListView.getItemAtPosition(position);
      if (cameraInList != null) {
        if (isCameraAdded(cameraInList)) {
          CustomedDialog.getStandardAlertDialog(ScanActivity.this,new Dialog.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              launchAddCameraPage(cameraInList);
            }
          }
,R.string.msg_camera_has_been_added).show();
        }
 else {
          launchAddCameraPage(cameraInList);
        }
      }
    }
  }
);
  showAllDeviceButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      AllDevicesActivity.showAllDevices(ScanActivity.this,nonCameraDevices);
    }
  }
);
  addManuallyButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivityForResult(new Intent(ScanActivity.this,AddEditCameraActivity.class),Constants.REQUEST_CODE_ADD_CAMERA);
    }
  }
);
  showAllDeviceButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      AllDevicesActivity.showAllDevices(ScanActivity.this,nonCameraDevices);
    }
  }
);
  new ScanCheckInternetTask(this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_scan);
  setUpDefaultToolbar();
  setActivityBackgroundColor(Color.WHITE);
  scanProgressView=findViewById(R.id.scan_status_layout);
  scanResultListView=findViewById(R.id.scan_result_layout);
  scanResultNoCameraView=findViewById(R.id.scan_result_no_camera_layout);
  progressBar=(ProgressBar)findViewById(R.id.horizontal_progress_bar);
  progressBar.getProgressDrawable().setColorFilter(getResources().getColor(R.color.orange_red),PorterDuff.Mode.SRC_IN);
  cameraListView=(ListView)findViewById(R.id.scan_result_list);
  Button addManuallyButton=(Button)findViewById(R.id.button_add_camera_manually);
  Button showAllDeviceButton=(Button)findViewById(R.id.button_show_all_devices);
  View footerView=getLayoutInflater().inflate(R.layout.scan_list_footer,cameraListView,false);
  Button showAllDeviceFooterButton=(Button)footerView.findViewById(R.id.button_all_devices_in_list);
  cameraListView.addFooterView(footerView);
  deviceAdapter=new ScanResultAdapter(this,R.layout.scan_list_layout,discoveredCameras,drawableArray);
  cameraListView.setAdapter(deviceAdapter);
  cameraListView.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> arg0,    View arg1,    int position,    long arg3){
      final DiscoveredCamera cameraInList=(DiscoveredCamera)cameraListView.getItemAtPosition(position);
      if (cameraInList != null) {
        if (isCameraAdded(cameraInList)) {
          CustomedDialog.getStandardAlertDialog(ScanActivity.this,new Dialog.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              launchAddCameraPage(cameraInList);
            }
          }
,R.string.msg_camera_has_been_added).show();
        }
 else {
          launchAddCameraPage(cameraInList);
        }
      }
    }
  }
);
  showAllDeviceFooterButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      AllDevicesActivity.showAllDevices(ScanActivity.this,nonCameraDevices);
    }
  }
);
  addManuallyButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivityForResult(new Intent(ScanActivity.this,AddEditCameraActivity.class),Constants.REQUEST_CODE_ADD_CAMERA);
    }
  }
);
  showAllDeviceButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      AllDevicesActivity.showAllDevices(ScanActivity.this,nonCameraDevices);
    }
  }
);
  new ScanCheckInternetTask(this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.9964834351286322
34036,"@Override public void run(){
  String modelName=String.valueOf(input);
  String message=""String_Node_Str"" + device.toString() + ""String_Node_Str""+ modelName;
  IntercomSendMessageTask.launch(context,AppData.defaultUser.getUsername(),message);
}","@Override public void run(){
  if (AppData.defaultUser != null) {
    String modelName=String.valueOf(input);
    String message=""String_Node_Str"" + device.toString() + ""String_Node_Str""+ modelName;
    IntercomSendMessageTask.launch(context,AppData.defaultUser.getUsername(),message);
  }
}",0.8523364485981308
34037,"public static void showReportCameraModelDialog(final Context context,final Device device){
  new MaterialDialog.Builder(context).title(R.string.msg_specify_camera_model).content(R.string.msg_report_camera_model).negativeText(R.string.cancel).positiveText(R.string.report).input(R.string.hint_camera_model,R.string.empty,new MaterialDialog.InputCallback(){
    @Override public void onInput(    MaterialDialog dialog,    final CharSequence input){
      new Thread(new Runnable(){
        @Override public void run(){
          String modelName=String.valueOf(input);
          String message=""String_Node_Str"" + device.toString() + ""String_Node_Str""+ modelName;
          IntercomSendMessageTask.launch(context,AppData.defaultUser.getUsername(),message);
        }
      }
).start();
    }
  }
).show();
}","public static void showReportCameraModelDialog(final Context context,final Device device){
  new MaterialDialog.Builder(context).title(R.string.msg_specify_camera_model).content(R.string.msg_report_camera_model).negativeText(R.string.cancel).positiveText(R.string.report).input(R.string.hint_camera_model,R.string.empty,new MaterialDialog.InputCallback(){
    @Override public void onInput(    MaterialDialog dialog,    final CharSequence input){
      new Thread(new Runnable(){
        @Override public void run(){
          if (AppData.defaultUser != null) {
            String modelName=String.valueOf(input);
            String message=""String_Node_Str"" + device.toString() + ""String_Node_Str""+ modelName;
            IntercomSendMessageTask.launch(context,AppData.defaultUser.getUsername(),message);
          }
        }
      }
).start();
    }
  }
).show();
}",0.9623430962343096
34038,"@Override public void onInput(MaterialDialog dialog,final CharSequence input){
  new Thread(new Runnable(){
    @Override public void run(){
      String modelName=String.valueOf(input);
      String message=""String_Node_Str"" + device.toString() + ""String_Node_Str""+ modelName;
      IntercomSendMessageTask.launch(context,AppData.defaultUser.getUsername(),message);
    }
  }
).start();
}","@Override public void onInput(MaterialDialog dialog,final CharSequence input){
  new Thread(new Runnable(){
    @Override public void run(){
      if (AppData.defaultUser != null) {
        String modelName=String.valueOf(input);
        String message=""String_Node_Str"" + device.toString() + ""String_Node_Str""+ modelName;
        IntercomSendMessageTask.launch(context,AppData.defaultUser.getUsername(),message);
      }
    }
  }
).start();
}",0.9339735894357744
34039,"@Override public void onListItemClick(ListView listView,View view,int position,long id){
  if (position == 0) {
    SharingStatus status=new SharingStatus(SharingActivity.evercamCamera.isDiscoverable(),SharingActivity.evercamCamera.isPublic());
    String selectedItem=getString(status.getStatusStringId());
    CustomedDialog.getShareStatusDialog(this,selectedItem).show();
  }
 else {
    CameraShareInterface shareInterface=mShareList.get(position - 1);
    CustomedDialog.getRightsStatusDialog(this,shareInterface).show();
  }
}","@Override public void onListItemClick(ListView listView,View view,int position,long id){
  if (position == 0 && SharingActivity.evercamCamera != null) {
    SharingStatus status=new SharingStatus(SharingActivity.evercamCamera.isDiscoverable(),SharingActivity.evercamCamera.isPublic());
    String selectedItem=getString(status.getStatusStringId());
    CustomedDialog.getShareStatusDialog(this,selectedItem).show();
  }
 else {
    CameraShareInterface shareInterface=mShareList.get(position - 1);
    CustomedDialog.getRightsStatusDialog(this,shareInterface).show();
  }
}",0.96289592760181
34040,"@Override public void onCreate(Bundle savedInstanceState){
  try {
    super.onCreate(savedInstanceState);
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    initAnalyticsObjects();
    readShortcutCameraId();
    if (!liveViewCameraId.isEmpty()) {
      startingCameraID=liveViewCameraId;
      liveViewCameraId=""String_Node_Str"";
    }
    launchSleepTimer();
    setDisplayOriention();
    try {
      GStreamer.init(this);
    }
 catch (    Exception e) {
      Log.e(TAG,e.getLocalizedMessage());
      EvercamPlayApplication.sendCaughtException(this,e);
      finish();
      return;
    }
    nativeInit();
    setContentView(R.layout.video_activity_layout);
    mToolbar=(Toolbar)findViewById(R.id.spinner_tool_bar);
    setOpaqueTitleBackground();
    setSupportActionBar(mToolbar);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    mCameraListSpinner=(Spinner)findViewById(R.id.spinner_camera_list);
    initialPageElements();
    checkIsShortcutCameraExists();
    startPlay();
    if (showCameraCreated) {
      CustomSnackbar.showLong(this,R.string.create_success);
      showCameraCreated=false;
    }
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  try {
    super.onCreate(savedInstanceState);
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    initAnalyticsObjects();
    readShortcutCameraId();
    if (!liveViewCameraId.isEmpty()) {
      startingCameraID=liveViewCameraId;
      liveViewCameraId=""String_Node_Str"";
    }
    launchSleepTimer();
    setDisplayOrientation();
    try {
      GStreamer.init(this);
    }
 catch (    Exception e) {
      Log.e(TAG,e.getLocalizedMessage());
      EvercamPlayApplication.sendCaughtException(this,e);
      finish();
      return;
    }
    nativeInit();
    setContentView(R.layout.video_activity_layout);
    mToolbar=(Toolbar)findViewById(R.id.spinner_tool_bar);
    setOpaqueTitleBackground();
    setSupportActionBar(mToolbar);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    mCameraListSpinner=(Spinner)findViewById(R.id.spinner_camera_list);
    initialPageElements();
    checkIsShortcutCameraExists();
    startPlay();
    if (showCameraCreated) {
      CustomSnackbar.showLong(this,R.string.create_success);
      showCameraCreated=false;
    }
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
  }
}",0.9992163009404388
34041,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == Constants.REQUEST_CODE_PATCH_CAMERA || requestCode == Constants.REQUEST_CODE_VIEW_CAMERA) {
    if (resultCode == Constants.RESULT_TRUE) {
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          CustomSnackbar.showLong(VideoActivity.this,R.string.patch_success);
        }
      }
,1000);
      startPlay();
    }
 else     if (resultCode == Constants.RESULT_FALSE) {
      startPlay();
    }
  }
 else {
    if (resultCode == Constants.RESULT_DELETED) {
      setResult(Constants.RESULT_TRUE);
      finish();
    }
 else     if (resultCode == Constants.RESULT_TRANSFERRED) {
      setResult(Constants.RESULT_TRANSFERRED);
      finish();
    }
 else     if (resultCode == Constants.RESULT_ACCESS_REMOVED) {
      setResult(Constants.RESULT_ACCESS_REMOVED);
      finish();
    }
 else     if (resultCode == Constants.RESULT_NO_ACCESS) {
      setResult(Constants.RESULT_NO_ACCESS);
      finish();
    }
 else {
      startPlay();
    }
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == Constants.REQUEST_CODE_PATCH_CAMERA || requestCode == Constants.REQUEST_CODE_VIEW_CAMERA) {
    if (resultCode == Constants.RESULT_TRUE) {
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          CustomSnackbar.showLong(VideoActivity.this,R.string.patch_success);
        }
      }
,1000);
      startPlay();
    }
 else     if (resultCode == Constants.RESULT_FALSE) {
      startPlay();
    }
 else     if (resultCode == Constants.RESULT_DELETED) {
      setResult(Constants.RESULT_TRUE);
      finish();
    }
  }
 else {
    if (resultCode == Constants.RESULT_TRANSFERRED) {
      setResult(Constants.RESULT_TRANSFERRED);
      finish();
    }
 else     if (resultCode == Constants.RESULT_ACCESS_REMOVED) {
      setResult(Constants.RESULT_ACCESS_REMOVED);
      finish();
    }
 else     if (resultCode == Constants.RESULT_NO_ACCESS) {
      setResult(Constants.RESULT_NO_ACCESS);
      finish();
    }
 else {
      startPlay();
    }
  }
}",0.9853345554537122
34042,"private void onVideoLoadFailed(){
  Log.d(TAG,""String_Node_Str"");
  runOnUiThread(new Runnable(){
    public void run(){
      EvercamPlayApplication.sendEventAnalytics(VideoActivity.this,R.string.category_streaming_rtsp,R.string.action_streaming_rtsp_failed,R.string.label_streaming_rtsp_failed);
      StreamFeedbackItem failedItem=new StreamFeedbackItem(VideoActivity.this,AppData.defaultUser.getUsername(),false);
      failedItem.setCameraId(evercamCamera.getCameraId());
      failedItem.setUrl(createUri(evercamCamera));
      failedItem.setType(StreamFeedbackItem.TYPE_RTSP);
      sendToLogentries(logger,failedItem.toJson());
      failedItem.sendToKeenIo(client);
      isPlayingJpg=true;
      CustomSnackbar.showShort(VideoActivity.this,R.string.msg_switch_to_jpg);
      showImagesVideo=true;
      createBrowseJpgTask();
    }
  }
);
}","private void onVideoLoadFailed(){
  Log.d(TAG,""String_Node_Str"");
  runOnUiThread(new Runnable(){
    public void run(){
      EvercamPlayApplication.sendEventAnalytics(VideoActivity.this,R.string.category_streaming_rtsp,R.string.action_streaming_rtsp_failed,R.string.label_streaming_rtsp_failed);
      StreamFeedbackItem failedItem=new StreamFeedbackItem(VideoActivity.this,AppData.defaultUser.getUsername(),false);
      failedItem.setCameraId(evercamCamera.getCameraId());
      failedItem.setUrl(createUri(evercamCamera));
      failedItem.setType(StreamFeedbackItem.TYPE_RTSP);
      sendToLogentries(logger,failedItem.toJson());
      failedItem.sendToKeenIo(client);
      CustomSnackbar.showShort(VideoActivity.this,R.string.msg_switch_to_jpg);
      showImagesVideo=true;
      createBrowseJpgTask();
    }
  }
);
}",0.9850746268656716
34043,"private void onVideoLoaded(){
  Log.d(TAG,""String_Node_Str"");
  runOnUiThread(new Runnable(){
    public void run(){
      isPlayingJpg=false;
      hideProgressView();
      surfaceView.setVisibility(View.VISIBLE);
      imageView.setVisibility(View.GONE);
      startTimeCounter();
      EvercamPlayApplication.sendEventAnalytics(VideoActivity.this,R.string.category_streaming_rtsp,R.string.action_streaming_rtsp_success,R.string.label_streaming_rtsp_success);
      StreamFeedbackItem successItem=new StreamFeedbackItem(VideoActivity.this,AppData.defaultUser.getUsername(),true);
      successItem.setCameraId(evercamCamera.getCameraId());
      successItem.setUrl(createUri(evercamCamera));
      successItem.setType(StreamFeedbackItem.TYPE_RTSP);
      if (startTime != null) {
        float timeDifferenceFloat=Commons.calculateTimeDifferenceFrom(startTime);
        Log.d(TAG,""String_Node_Str"" + timeDifferenceFloat + ""String_Node_Str"");
        successItem.setLoadTime(timeDifferenceFloat);
        startTime=null;
      }
      sendToLogentries(logger,successItem.toJson());
      successItem.sendToKeenIo(client);
    }
  }
);
}","private void onVideoLoaded(){
  Log.d(TAG,""String_Node_Str"");
  runOnUiThread(new Runnable(){
    public void run(){
      hideProgressView();
      surfaceView.setVisibility(View.VISIBLE);
      imageView.setVisibility(View.GONE);
      startTimeCounter();
      EvercamPlayApplication.sendEventAnalytics(VideoActivity.this,R.string.category_streaming_rtsp,R.string.action_streaming_rtsp_success,R.string.label_streaming_rtsp_success);
      StreamFeedbackItem successItem=new StreamFeedbackItem(VideoActivity.this,AppData.defaultUser.getUsername(),true);
      successItem.setCameraId(evercamCamera.getCameraId());
      successItem.setUrl(createUri(evercamCamera));
      successItem.setType(StreamFeedbackItem.TYPE_RTSP);
      if (startTime != null) {
        float timeDifferenceFloat=Commons.calculateTimeDifferenceFrom(startTime);
        Log.d(TAG,""String_Node_Str"" + timeDifferenceFloat + ""String_Node_Str"");
        successItem.setLoadTime(timeDifferenceFloat);
        startTime=null;
      }
      sendToLogentries(logger,successItem.toJson());
      successItem.sendToKeenIo(client);
    }
  }
);
}",0.9884444444444443
34044,"public void retrieveSharingStatusFromCamera(){
  SharingStatus status=new SharingStatus(SharingActivity.evercamCamera.isDiscoverable(),SharingActivity.evercamCamera.isPublic());
  updateSharingStatusUi(status);
}","public void retrieveSharingStatusFromCamera(){
  if (SharingActivity.evercamCamera != null) {
    SharingStatus status=new SharingStatus(SharingActivity.evercamCamera.isDiscoverable(),SharingActivity.evercamCamera.isPublic());
    updateSharingStatusUi(status);
  }
}",0.8016701461377871
34045,"/** 
 * Get the network info
 */
private NetworkInfo getNetworkInfo(){
  ConnectivityManager connectivityManager=(ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
  return connectivityManager.getActiveNetworkInfo();
}","/** 
 * Get the network info
 */
private NetworkInfo getNetworkInfo(){
  if (mContext != null) {
    ConnectivityManager connectivityManager=(ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
    return connectivityManager.getActiveNetworkInfo();
  }
  return null;
}",0.9090909090909092
34046,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == Constants.REQUEST_CODE_ADD_CAMERA) {
    reloadCameraList=(resultCode == Constants.RESULT_TRUE);
  }
 else   if (requestCode == Constants.REQUEST_CODE_DELETE_CAMERA) {
    if (resultCode == Constants.RESULT_TRUE) {
      reloadCameraList=true;
    }
  }
 else   if (requestCode == Constants.REQUEST_CODE_MANAGE_ACCOUNT) {
    reloadCameraList=(resultCode == Constants.RESULT_ACCOUNT_CHANGED);
  }
  if (resultCode == Constants.RESULT_TRANSFERRED) {
    reloadCameraList=true;
    CustomSnackbar.showMultiLine(activity,R.string.msg_transfer_success);
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == Constants.REQUEST_CODE_ADD_CAMERA) {
    reloadCameraList=(resultCode == Constants.RESULT_TRUE);
  }
 else   if (requestCode == Constants.REQUEST_CODE_DELETE_CAMERA) {
    if (resultCode == Constants.RESULT_TRUE) {
      reloadCameraList=true;
    }
  }
 else   if (requestCode == Constants.REQUEST_CODE_MANAGE_ACCOUNT) {
    reloadCameraList=(resultCode == Constants.RESULT_ACCOUNT_CHANGED);
  }
  if (resultCode == Constants.RESULT_TRANSFERRED) {
    reloadCameraList=true;
    CustomSnackbar.showMultiLine(activity,R.string.msg_transfer_success);
  }
 else   if (resultCode == Constants.RESULT_ACCESS_REMOVED) {
    reloadCameraList=true;
    CustomSnackbar.show(activity,R.string.msg_share_updated);
  }
}",0.8959459459459459
34047,"public static AlertDialog getConfirmRemoveShareDialog(Activity activity,final CameraShareInterface shareInterface,final RightsStatus newRightStatus){
  int positiveButtonTextId=R.string.remove;
  int messageTextId=R.string.msg_confirm_remove_share;
  if (shareInterface instanceof CameraShareRequest) {
    positiveButtonTextId=R.string.revoke;
    messageTextId=R.string.msg_confirm_revoke_share_request;
  }
  return getConfirmDialog(activity,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      newRightStatus.updateOnShare(shareInterface);
    }
  }
,messageTextId,positiveButtonTextId);
}","public static AlertDialog getConfirmRemoveShareDialog(Activity activity,final CameraShareInterface shareInterface,final RightsStatus newRightStatus){
  int positiveButtonTextId=R.string.remove;
  int messageTextId=R.string.msg_confirm_remove_share;
  if (shareInterface instanceof CameraShareRequest) {
    positiveButtonTextId=R.string.revoke;
    messageTextId=R.string.msg_confirm_revoke_share_request;
  }
 else   if (shareInterface instanceof CameraShare) {
    if (((CameraShare)shareInterface).getUserId().equals(AppData.defaultUser.getUsername())) {
      messageTextId=R.string.msg_confirm_remove_self;
    }
  }
  return getConfirmDialog(activity,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      newRightStatus.updateOnShare(shareInterface);
    }
  }
,messageTextId,positiveButtonTextId);
}",0.8619791666666666
34048,"public static AlertDialog getSelectNewOwnerDialog(final Activity activity,ArrayList<String> usernameList){
  CharSequence[] listCharArray=usernameList.toArray(new CharSequence[usernameList.size()]);
  return new AlertDialog.Builder(activity).setTitle(R.string.transfer_select_title).setSingleChoiceItems(listCharArray,0,null).setPositiveButton(R.string.transfer,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      ListView listView=((AlertDialog)dialog).getListView();
      Object checkedItem=listView.getAdapter().getItem(listView.getCheckedItemPosition());
      String selectedUsername=checkedItem.toString();
      if (activity instanceof SharingActivity) {
        TransferOwnershipTask.launch(activity,SharingActivity.evercamCamera.getCameraId(),selectedUsername);
      }
    }
  }
).setNegativeButton(R.string.cancel,null).create();
}","public static AlertDialog getSelectNewOwnerDialog(final Activity activity,final ArrayList<String> usernameList){
  CharSequence[] listCharArray=usernameList.toArray(new CharSequence[usernameList.size()]);
  Builder dialogBuilder=new AlertDialog.Builder(activity).setNegativeButton(R.string.cancel,null);
  if (usernameList.size() > 0) {
    dialogBuilder.setSingleChoiceItems(listCharArray,0,null).setPositiveButton(R.string.transfer,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        ListView listView=((AlertDialog)dialog).getListView();
        Object checkedItem=listView.getAdapter().getItem(listView.getCheckedItemPosition());
        String selectedUsername=checkedItem.toString();
        if (activity instanceof SharingActivity) {
          TransferOwnershipTask.launch(activity,SharingActivity.evercamCamera.getCameraId(),selectedUsername);
        }
      }
    }
).setTitle(R.string.transfer_select_title);
  }
 else {
    dialogBuilder.setMessage(R.string.msg_share_before_transfer);
  }
  return dialogBuilder.create();
}",0.8367044893931919
34049,"public static KeenClient getClient(Context context){
  try {
    PropertyReader propertyReader=new PropertyReader(context);
    KeenClient client=new AndroidKeenClientBuilder(context).build();
    KeenProject keenProject=new KeenProject(propertyReader.getPropertyStr(PropertyReader.KEY_KEEN_PROJECT_ID),propertyReader.getPropertyStr(PropertyReader.KEY_KEEN_WRITE_KEY),propertyReader.getPropertyStr(PropertyReader.KEY_KEEN_READ_KEY));
    client.setDefaultProject(keenProject);
    return client;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","public static KeenClient getClient(Context context){
  PropertyReader propertyReader=new PropertyReader(context);
  if (propertyReader.isPropertyExist(PropertyReader.KEY_KEEN_PROJECT_ID)) {
    try {
      KeenClient client=new AndroidKeenClientBuilder(context).build();
      KeenProject keenProject=new KeenProject(propertyReader.getPropertyStr(PropertyReader.KEY_KEEN_PROJECT_ID),propertyReader.getPropertyStr(PropertyReader.KEY_KEEN_WRITE_KEY),propertyReader.getPropertyStr(PropertyReader.KEY_KEEN_READ_KEY));
      client.setDefaultProject(keenProject);
      return client;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return null;
}",0.8220064724919094
34050,"protected boolean deleteShare(){
  try {
    if (shareInterface instanceof CameraShare) {
      String cameraId=((CameraShare)shareInterface).getCameraId();
      String userEmail=((CameraShare)shareInterface).getUserEmail();
      return CameraShare.delete(cameraId,userEmail);
    }
 else     if (shareInterface instanceof CameraShareRequest) {
      String cameraId=((CameraShareRequest)shareInterface).getCameraId();
      String userEmail=((CameraShareRequest)shareInterface).getEmail();
      return CameraShareRequest.delete(cameraId,userEmail);
    }
  }
 catch (  EvercamException e) {
    errorMessage=e.getMessage();
  }
  return false;
}","protected boolean deleteShare(){
  try {
    if (shareInterface instanceof CameraShare) {
      String cameraId=((CameraShare)shareInterface).getCameraId();
      String userEmail=((CameraShare)shareInterface).getUserEmail();
      boolean isDeleted=CameraShare.delete(cameraId,userEmail);
      if (((CameraShare)shareInterface).getUserId().equals(AppData.defaultUser.getUsername())) {
        userDeletedSelf=true;
      }
      return isDeleted;
    }
 else     if (shareInterface instanceof CameraShareRequest) {
      String cameraId=((CameraShareRequest)shareInterface).getCameraId();
      String userEmail=((CameraShareRequest)shareInterface).getEmail();
      return CameraShareRequest.delete(cameraId,userEmail);
    }
  }
 catch (  EvercamException e) {
    errorMessage=e.getMessage();
  }
  return false;
}",0.8746594005449592
34051,"@Override protected void onPostExecute(Boolean isSuccess){
  customProgressDialog.dismiss();
  if (isSuccess) {
    CustomSnackbar.show(activity,R.string.msg_share_updated);
    FetchShareListTask.launch(SharingActivity.evercamCamera.getCameraId(),activity);
  }
 else {
    CustomToast.showInCenterLong(activity,errorMessage);
  }
}","@Override protected void onPostExecute(Boolean isSuccess){
  customProgressDialog.dismiss();
  if (isSuccess) {
    if (!userDeletedSelf) {
      CustomSnackbar.show(activity,R.string.msg_share_updated);
      FetchShareListTask.launch(SharingActivity.evercamCamera.getCameraId(),activity);
    }
 else {
      if (activity instanceof SharingActivity) {
        activity.setResult(Constants.RESULT_ACCESS_REMOVED);
        activity.finish();
      }
    }
  }
 else {
    CustomToast.showInCenterLong(activity,errorMessage);
  }
}",0.7717265353418308
34052,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == Constants.REQUEST_CODE_PATCH_CAMERA) {
    if (resultCode == Constants.RESULT_TRUE) {
      startPlay();
    }
 else     if (resultCode == Constants.RESULT_FALSE) {
      startPlay();
    }
  }
 else {
    if (resultCode == Constants.RESULT_DELETED) {
      setResult(Constants.RESULT_TRUE);
      finish();
    }
 else     if (resultCode == Constants.RESULT_TRANSFERRED) {
      setResult(Constants.RESULT_TRANSFERRED);
      finish();
    }
 else {
      startPlay();
    }
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == Constants.REQUEST_CODE_PATCH_CAMERA) {
    if (resultCode == Constants.RESULT_TRUE) {
      startPlay();
    }
 else     if (resultCode == Constants.RESULT_FALSE) {
      startPlay();
    }
  }
 else {
    if (resultCode == Constants.RESULT_DELETED) {
      setResult(Constants.RESULT_TRUE);
      finish();
    }
 else     if (resultCode == Constants.RESULT_TRANSFERRED) {
      setResult(Constants.RESULT_TRANSFERRED);
      finish();
    }
 else     if (resultCode == Constants.RESULT_ACCESS_REMOVED) {
      setResult(Constants.RESULT_ACCESS_REMOVED);
      finish();
    }
 else {
      startPlay();
    }
  }
}",0.8971820258948972
34053,"public void testGetLatestFileName(){
  assertEquals(""String_Node_Str"",SnapshotManager.getLatestFileName(ALL_FILES_ARRAY));
}","public void testGetLatestFileName(){
}",0.4691358024691358
34054,"public boolean isScanning(){
  if (cancelMenuItem.isVisible()) {
    return true;
  }
  return false;
}","public boolean isScanning(){
  return cancelMenuItem != null && cancelMenuItem.isVisible();
}",0.6224489795918368
34055,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int itemId=item.getItemId();
  try {
    if (itemId == R.id.video_menu_camera_settings) {
      editStarted=true;
      Intent viewIntent=new Intent(VideoActivity.this,ViewCameraActivity.class);
      startActivityForResult(viewIntent,Constants.REQUEST_CODE_VIEW_CAMERA);
    }
 else     if (itemId == android.R.id.home) {
      navigateBackToCameraList();
    }
 else     if (itemId == R.id.video_menu_share) {
      startActivity(new Intent(VideoActivity.this,SharingActivity.class));
    }
 else     if (itemId == R.id.video_menu_feedback) {
      feedbackStarted=true;
      Intent feedbackIntent=new Intent(VideoActivity.this,FeedbackActivity.class);
      feedbackIntent.putExtra(Constants.BUNDLE_KEY_CAMERA_ID,evercamCamera.getCameraId());
      startActivityForResult(feedbackIntent,Constants.REQUEST_CODE_FEEDBACK);
    }
 else     if (itemId == R.id.video_menu_view_snapshots) {
      SnapshotManager.showSnapshotsForCamera(this,evercamCamera.getCameraId());
    }
 else     if (itemId == R.id.video_menu_create_shortcut) {
      if (evercamCamera != null) {
        Bitmap bitmap=getBitmapFromImageView(imageView);
        HomeShortcut.create(getApplicationContext(),evercamCamera,bitmap);
        CustomToast.showSuperToastShort(this,R.string.msg_shortcut_created);
        EvercamPlayApplication.sendEventAnalytics(this,R.string.category_shortcut,R.string.action_shortcut_create,R.string.label_shortcut_create);
        new ShortcutFeedbackItem(this,AppData.defaultUser.getUsername(),evercamCamera.getCameraId(),ShortcutFeedbackItem.ACTION_TYPE_CREATE,ShortcutFeedbackItem.RESULT_TYPE_SUCCESS).sendToKeenIo(client);
        getMixpanel().sendEvent(R.string.mixpanel_event_create_shortcut,new JSONObject().put(""String_Node_Str"",evercamCamera.getCameraId()));
      }
    }
 else     if (itemId == R.id.video_menu_view_recordings) {
      if (evercamCamera != null) {
        recordingsStarted=true;
        Intent recordingIntent=new Intent(this,RecordingWebActivity.class);
        recordingIntent.putExtra(Constants.BUNDLE_KEY_CAMERA_ID,evercamCamera.getCameraId());
        startActivityForResult(recordingIntent,Constants.REQUEST_CODE_RECORDING);
      }
    }
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
  }
catch (  Exception e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    sendToMint(e);
  }
  return true;
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int itemId=item.getItemId();
  try {
    if (itemId == R.id.video_menu_camera_settings) {
      editStarted=true;
      Intent viewIntent=new Intent(VideoActivity.this,ViewCameraActivity.class);
      startActivityForResult(viewIntent,Constants.REQUEST_CODE_VIEW_CAMERA);
    }
 else     if (itemId == android.R.id.home) {
      navigateBackToCameraList();
    }
 else     if (itemId == R.id.video_menu_share) {
      startActivity(new Intent(VideoActivity.this,SharingActivity.class));
    }
 else     if (itemId == R.id.video_menu_feedback) {
      feedbackStarted=true;
      Intent feedbackIntent=new Intent(VideoActivity.this,FeedbackActivity.class);
      if (evercamCamera != null) {
        feedbackIntent.putExtra(Constants.BUNDLE_KEY_CAMERA_ID,evercamCamera.getCameraId());
      }
      startActivityForResult(feedbackIntent,Constants.REQUEST_CODE_FEEDBACK);
    }
 else     if (itemId == R.id.video_menu_view_snapshots) {
      SnapshotManager.showSnapshotsForCamera(this,evercamCamera.getCameraId());
    }
 else     if (itemId == R.id.video_menu_create_shortcut) {
      if (evercamCamera != null) {
        Bitmap bitmap=getBitmapFromImageView(imageView);
        HomeShortcut.create(getApplicationContext(),evercamCamera,bitmap);
        CustomToast.showSuperToastShort(this,R.string.msg_shortcut_created);
        EvercamPlayApplication.sendEventAnalytics(this,R.string.category_shortcut,R.string.action_shortcut_create,R.string.label_shortcut_create);
        new ShortcutFeedbackItem(this,AppData.defaultUser.getUsername(),evercamCamera.getCameraId(),ShortcutFeedbackItem.ACTION_TYPE_CREATE,ShortcutFeedbackItem.RESULT_TYPE_SUCCESS).sendToKeenIo(client);
        getMixpanel().sendEvent(R.string.mixpanel_event_create_shortcut,new JSONObject().put(""String_Node_Str"",evercamCamera.getCameraId()));
      }
    }
 else     if (itemId == R.id.video_menu_view_recordings) {
      if (evercamCamera != null) {
        recordingsStarted=true;
        Intent recordingIntent=new Intent(this,RecordingWebActivity.class);
        recordingIntent.putExtra(Constants.BUNDLE_KEY_CAMERA_ID,evercamCamera.getCameraId());
        startActivityForResult(recordingIntent,Constants.REQUEST_CODE_RECORDING);
      }
    }
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
  }
catch (  Exception e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    sendToMint(e);
  }
  return true;
}",0.991083812165643
34056,"private void fillDiscoveredCameraDetails(DiscoveredCamera camera){
  if (camera != null) {
    if (camera.hasExternalIp()) {
      externalHostEdit.setText(camera.getExternalIp());
    }
    if (camera.hasExternalHttp()) {
      externalHttpEdit.setText(String.valueOf(camera.getExthttp()));
    }
    if (camera.hasExternalRtsp()) {
      externalRtspEdit.setText(String.valueOf(camera.getExtrtsp()));
    }
    if (camera.hasName()) {
      cameraNameEdit.setText(camera.getName());
    }
 else {
      cameraNameEdit.setText((camera.getVendor() + ""String_Node_Str"" + camera.getModel()).toUpperCase());
    }
  }
}","private void fillDiscoveredCameraDetails(DiscoveredCamera camera){
  if (camera != null) {
    Log.d(TAG,camera.toString());
    if (camera.hasExternalIp()) {
      externalHostEdit.setText(camera.getExternalIp());
    }
    if (camera.hasExternalHttp()) {
      externalHttpEdit.setText(String.valueOf(camera.getExthttp()));
    }
    if (camera.hasExternalRtsp()) {
      externalRtspEdit.setText(String.valueOf(camera.getExtrtsp()));
    }
    if (camera.hasName()) {
      String cameraName=camera.getName();
      if (cameraName.length() > 24) {
        cameraName=cameraName.substring(0,23);
      }
      cameraNameEdit.setText(cameraName);
    }
 else {
      cameraNameEdit.setText((camera.getVendor() + ""String_Node_Str"" + camera.getModel()).toUpperCase());
    }
  }
}",0.8688172043010752
34057,"private void fillDefaults(Model model){
  try {
    Defaults defaults=model.getDefaults();
    Auth basicAuth=defaults.getAuth(Auth.TYPE_BASIC);
    if (basicAuth != null) {
      usernameEdit.setText(basicAuth.getUsername());
      passwordEdit.setText(basicAuth.getPassword());
    }
    jpgUrlEdit.setText(defaults.getJpgURL());
    if (!model.getName().equals(Model.DEFAULT_MODEL_NAME)) {
      jpgUrlEdit.setFocusable(false);
      jpgUrlEdit.setClickable(true);
    }
 else {
      jpgUrlEdit.setFocusable(true);
      jpgUrlEdit.setClickable(true);
    }
  }
 catch (  EvercamException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
}","private void fillDefaults(Model model){
  try {
    Defaults defaults=model.getDefaults();
    Auth basicAuth=defaults.getAuth(Auth.TYPE_BASIC);
    if (basicAuth != null) {
      usernameEdit.setText(basicAuth.getUsername());
      passwordEdit.setText(basicAuth.getPassword());
    }
    jpgUrlEdit.setText(defaults.getJpgURL());
    if (!model.getName().equals(Model.DEFAULT_MODEL_NAME) && !jpgUrlEdit.getText().toString().isEmpty()) {
      jpgUrlEdit.setFocusable(false);
      jpgUrlEdit.setClickable(true);
    }
 else {
      jpgUrlEdit.setFocusable(true);
      jpgUrlEdit.setClickable(true);
      jpgUrlEdit.setFocusableInTouchMode(true);
    }
  }
 catch (  EvercamException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
}",0.932761087267525
34058,"private void clearDefaults(){
  usernameEdit.setText(""String_Node_Str"");
  passwordEdit.setText(""String_Node_Str"");
  jpgUrlEdit.setText(""String_Node_Str"");
}","private void clearDefaults(){
  usernameEdit.setText(""String_Node_Str"");
  passwordEdit.setText(""String_Node_Str"");
  jpgUrlEdit.setText(""String_Node_Str"");
  jpgUrlEdit.setFocusable(true);
  jpgUrlEdit.setClickable(true);
  jpgUrlEdit.setFocusableInTouchMode(true);
}",0.7417840375586855
34059,"public void onScanningFinished(){
  updateScanPercentage(null);
  showTextProgress(false);
  showHorizontalProgress(false);
}","public void onScanningFinished(){
  updateScanPercentage(null);
  showTextProgress(false);
  showHorizontalProgress(false);
  showCancelButton(false);
}",0.9025270758122744
34060,"public void onScanningStarted(){
  showHorizontalProgress(true);
  showTextProgress(true);
}","public void onScanningStarted(){
  showHorizontalProgress(true);
  showTextProgress(true);
  showCancelButton(true);
}",0.8761904761904762
34061,"@Override public void onActiveIp(String ip){
  if (!pool.isShutdown()) {
    pool.execute(new IpScanRunnable(ip));
  }
}","@Override public void onActiveIp(String ip){
  if (!pool.isShutdown() && !isCancelled()) {
    pool.execute(new IpScanRunnable(ip));
  }
}",0.9302325581395348
34062,"@Override public void run(){
  try {
    GatewayDevice gatewayDevice=new GatewayDevice(routerIp);
    ArrayList<NatMapEntry> mapEntries=gatewayDevice.getNatTableArray();
    if (mapEntries.size() > 0) {
      for (      NatMapEntry mapEntry : mapEntries) {
        String natIp=mapEntry.getIpAddress();
        for (        DiscoveredCamera discoveredCamera : cameraList) {
          if (discoveredCamera.getIP().equals(natIp)) {
            int natInternalPort=mapEntry.getInternalPort();
            int natExternalPort=mapEntry.getExternalPort();
            DiscoveredCamera publishCamera=new DiscoveredCamera(natIp);
            if (discoveredCamera.getHttp() == natInternalPort) {
              publishCamera.setExthttp(natExternalPort);
            }
            if (discoveredCamera.getRtsp() == natInternalPort) {
              publishCamera.setExtrtsp(natExternalPort);
            }
            publishProgress(publishCamera);
            break;
          }
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  natDone=true;
  scanPercentage+=PER__DISCOVERY_METHOD_PERCENT;
  getScanActivity().updateScanPercentage(scanPercentage);
}","@Override public void run(){
  try {
    GatewayDevice gatewayDevice=new GatewayDevice(routerIp);
    ArrayList<NatMapEntry> mapEntries=gatewayDevice.getNatTableArray();
    if (mapEntries.size() > 0) {
      for (      NatMapEntry mapEntry : mapEntries) {
        String natIp=mapEntry.getIpAddress();
        for (        DiscoveredCamera discoveredCamera : cameraList) {
          if (discoveredCamera.getIP().equals(natIp)) {
            int natInternalPort=mapEntry.getInternalPort();
            int natExternalPort=mapEntry.getExternalPort();
            DiscoveredCamera publishCamera=new DiscoveredCamera(natIp);
            if (discoveredCamera.getHttp() == natInternalPort) {
              publishCamera.setExthttp(natExternalPort);
            }
            if (discoveredCamera.getRtsp() == natInternalPort) {
              publishCamera.setExtrtsp(natExternalPort);
            }
            publishProgress(publishCamera);
            break;
          }
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  natDone=true;
  scanPercentage+=PER__DISCOVERY_METHOD_PERCENT;
  updatePercentageOnActivity(scanPercentage);
}",0.9803250641573996
34063,"@Override protected void onProgressUpdate(DiscoveredCamera... discoveredCameras){
  getScanActivity().addNewCameraToResultList(discoveredCameras[0]);
}","@Override protected void onProgressUpdate(DiscoveredCamera... discoveredCameras){
  if (getScanActivity() != null) {
    getScanActivity().addNewCameraToResultList(discoveredCameras[0]);
  }
}",0.880466472303207
34064,"@Override public void onIpScanned(String ip){
  scanPercentage+=getPerDevicePercent();
  getScanActivity().updateScanPercentage(scanPercentage);
}","@Override public void onIpScanned(String ip){
  scanPercentage+=getPerDevicePercent();
  updatePercentageOnActivity(scanPercentage);
}",0.8857142857142857
34065,"public ScanForCameraTask(ScanActivity scanActivity){
  this.scanActivityReference=new WeakReference<>(scanActivity);
  netInfo=new NetInfo(scanActivity);
  pool=Executors.newFixedThreadPool(EvercamDiscover.DEFAULT_FIXED_POOL);
  cameraList=new ArrayList<>();
}","public ScanForCameraTask(ScanActivity scanActivity){
  this.scanActivityReference=new WeakReference<>(scanActivity);
  netInfo=new NetInfo(scanActivity);
  pool=Executors.newFixedThreadPool(EvercamDiscover.DEFAULT_FIXED_POOL);
  cameraList=new ArrayList<>();
  upnpDeviceList=new ArrayList<>();
}",0.935251798561151
34066,"@Override protected ArrayList<DiscoveredCamera> doInBackground(Void... params){
  startTime=new Date();
  try {
    ScanRange scanRange=new ScanRange(netInfo.getGatewayIp(),netInfo.getNetmaskIp());
    totalDevices=scanRange.size();
    externalIp=NetworkInfo.getExternalIP();
    if (!pool.isShutdown()) {
      pool.execute(new OnvifRunnable());
      pool.execute(new UpnpRunnable());
      pool.execute(new NatRunnable(netInfo.getGatewayIp()));
    }
    IpScan ipScan=new IpScan(new ScanResult(){
      @Override public void onActiveIp(      String ip){
        if (!pool.isShutdown()) {
          pool.execute(new IpScanRunnable(ip));
        }
      }
      @Override public void onIpScanned(      String ip){
        scanPercentage+=getPerDevicePercent();
        getScanActivity().updateScanPercentage(scanPercentage);
      }
    }
);
    ipScan.scanAll(scanRange);
  }
 catch (  Exception e) {
    Log.e(TAG,e.getLocalizedMessage());
    e.printStackTrace();
  }
  int loopCount=0;
  while (!onvifDone && !upnpDone || !natDone || singleIpStartedCount != singleIpEndedCount) {
    loopCount++;
    if (loopCount > 20)     break;
    if (isCancelled())     break;
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  return cameraList;
}","@Override protected ArrayList<DiscoveredCamera> doInBackground(Void... params){
  startTime=new Date();
  try {
    final ScanRange scanRange=new ScanRange(netInfo.getGatewayIp(),netInfo.getNetmaskIp());
    totalDevices=scanRange.size();
    externalIp=NetworkInfo.getExternalIP();
    if (!pool.isShutdown() && !isCancelled()) {
      pool.execute(new OnvifRunnable());
      pool.execute(new UpnpRunnable());
      pool.execute(new NatRunnable(netInfo.getGatewayIp()));
    }
    IpScan ipScan=new IpScan(new ScanResult(){
      @Override public void onActiveIp(      String ip){
        if (!pool.isShutdown() && !isCancelled()) {
          pool.execute(new IpScanRunnable(ip));
        }
      }
      @Override public void onIpScanned(      String ip){
        scanPercentage+=getPerDevicePercent();
        updatePercentageOnActivity(scanPercentage);
      }
    }
);
    ipScan.scanAll(scanRange);
  }
 catch (  Exception e) {
    Log.e(TAG,e.getLocalizedMessage());
    e.printStackTrace();
  }
  int loopCount=0;
  while (!onvifDone && !upnpDone || !natDone || singleIpStartedCount != singleIpEndedCount) {
    loopCount++;
    if (loopCount > 20)     break;
    if (isCancelled())     break;
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  return cameraList;
}",0.9668174962292608
34067,"@Override protected void onPostExecute(ArrayList<DiscoveredCamera> cameraList){
  getScanActivity().showScanResults(cameraList);
  getScanActivity().onScanningFinished();
  pool.shutdown();
  Float scanningTime=Commons.calculateTimeDifferenceFrom(startTime);
  Log.d(TAG,""String_Node_Str"" + scanningTime);
  String username=""String_Node_Str"";
  if (AppData.defaultUser != null) {
    username=AppData.defaultUser.getUsername();
  }
  new ScanFeedbackItem(getScanActivity(),username,scanningTime,cameraList).sendToKeenIo();
}","@Override protected void onPostExecute(ArrayList<DiscoveredCamera> cameraList){
  if (getScanActivity() != null) {
    getScanActivity().showScanResults(cameraList);
    getScanActivity().onScanningFinished();
  }
  pool.shutdown();
  Float scanningTime=Commons.calculateTimeDifferenceFrom(startTime);
  Log.d(TAG,""String_Node_Str"" + scanningTime);
  String username=""String_Node_Str"";
  if (AppData.defaultUser != null) {
    username=AppData.defaultUser.getUsername();
  }
  new ScanFeedbackItem(getScanActivity(),username,scanningTime,cameraList).sendToKeenIo();
}",0.9605866177818516
34068,"@Override public void onUpnpDeviceFound(UpnpDevice upnpDevice){
  String ipFromUpnp=upnpDevice.getIp();
  if (ipFromUpnp != null && !ipFromUpnp.isEmpty()) {
    for (    DiscoveredCamera discoveredCamera : cameraList) {
      if (discoveredCamera.getIP().equals(upnpDevice.getIp())) {
        DiscoveredCamera publishCamera=new DiscoveredCamera(discoveredCamera.getIP());
        int port=upnpDevice.getPort();
        String model=upnpDevice.getModel();
        if (port != 0) {
          publishCamera.setHttp(port);
        }
        publishCamera.setModel(model);
        publishProgress(publishCamera);
        break;
      }
    }
  }
}","@Override public void onUpnpDeviceFound(UpnpDevice upnpDevice){
  Log.d(TAG,""String_Node_Str"" + upnpDevice.toString());
  upnpDeviceList.add(upnpDevice);
  String ipFromUpnp=upnpDevice.getIp();
  if (ipFromUpnp != null && !ipFromUpnp.isEmpty()) {
    for (    DiscoveredCamera discoveredCamera : cameraList) {
      if (discoveredCamera.getIP().equals(upnpDevice.getIp())) {
        DiscoveredCamera publishCamera=new DiscoveredCamera(discoveredCamera.getIP());
        mergeUpnpDeviceToCamera(upnpDevice,publishCamera);
        publishProgress(publishCamera);
        break;
      }
    }
  }
}",0.7599029911075182
34069,"private void play(EvercamCamera camera){
  nativeSetUsername(camera.getUsername());
  nativeSetPassword(camera.getPassword());
  nativePlay();
}","private void play(EvercamCamera camera){
  nativePlay();
}",0.5742574257425742
34070,"/** 
 * * Player 
 */
private void createPlayer(EvercamCamera camera){
  startTime=new Date();
  if (evercamCamera.hasRtspUrl()) {
    nativeSetUri(camera.getExternalRtspUrl());
    play(camera);
    surfaceView.setVisibility(View.VISIBLE);
    imageView.setVisibility(View.GONE);
    hideProgressView();
  }
 else {
    showImagesVideo=true;
    createBrowseJpgTask();
  }
}","private void createPlayer(EvercamCamera camera){
  startTime=new Date();
  if (evercamCamera.hasRtspUrl()) {
    Log.e(TAG,""String_Node_Str"" + createUri(camera));
    nativeSetUri(createUri(camera));
    play(camera);
    surfaceView.setVisibility(View.VISIBLE);
    imageView.setVisibility(View.GONE);
    hideProgressView();
  }
 else {
    showImagesVideo=true;
    createBrowseJpgTask();
  }
}",0.8549222797927462
34071,"private void initialPageElements(){
  imageViewLayout=(RelativeLayout)this.findViewById(R.id.camera_view_layout);
  imageView=(ImageView)this.findViewById(R.id.img_camera1);
  mediaPlayerView=(ImageView)this.findViewById(R.id.ivmediaplayer1);
  snapshotMenuView=(ImageView)this.findViewById(R.id.player_savesnapshot);
  surfaceView=(SurfaceView)findViewById(R.id.surface_view);
  surfaceHolder=surfaceView.getHolder();
  surfaceHolder.addCallback(this);
  progressView=((ProgressView)imageViewLayout.findViewById(R.id.ivprogressspinner1));
  progressView.setMinimumWidth(mediaPlayerView.getWidth());
  progressView.setMinimumHeight(mediaPlayerView.getHeight());
  progressView.canvasColor=Color.TRANSPARENT;
  isProgressShowing=true;
  progressView.setVisibility(View.VISIBLE);
  offlineTextView=(TextView)findViewById(R.id.offline_text_view);
  timeCountTextView=(TextView)findViewById(R.id.time_text_view);
  mediaPlayerView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (end) {
        Toast.makeText(VideoActivity.this,R.string.msg_try_again,Toast.LENGTH_SHORT).show();
        return;
      }
      if (isProgressShowing)       return;
      if (paused) {
        timeCountTextView.setVisibility(View.VISIBLE);
        showProgressView();
        mediaPlayerView.setImageBitmap(null);
        mediaPlayerView.setVisibility(View.VISIBLE);
        snapshotMenuView.setVisibility(View.VISIBLE);
        mediaPlayerView.setImageResource(android.R.drawable.ic_media_pause);
        startMediaPlayerAnimation();
        if (evercamCamera != null && !evercamCamera.getExternalRtspUrl().isEmpty()) {
          restartPlay(evercamCamera);
        }
 else {
        }
        paused=false;
      }
 else {
        timeCountTextView.setVisibility(View.GONE);
        mediaPlayerView.clearAnimation();
        snapshotMenuView.clearAnimation();
        if (fadeInAnimation != null && fadeInAnimation.hasStarted() && !fadeInAnimation.hasEnded()) {
          fadeInAnimation.cancel();
          fadeInAnimation.reset();
        }
        mediaPlayerView.setVisibility(View.VISIBLE);
        snapshotMenuView.setVisibility(View.VISIBLE);
        if (surfaceView.getVisibility() == View.VISIBLE) {
          snapshotMenuView.setVisibility(View.GONE);
        }
        mediaPlayerView.setImageBitmap(null);
        mediaPlayerView.setImageResource(android.R.drawable.ic_media_play);
        pausePlayer();
        paused=true;
      }
    }
  }
);
  imageViewLayout.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (end) {
        Toast.makeText(VideoActivity.this,R.string.msg_try_again,Toast.LENGTH_SHORT).show();
        return;
      }
      if (isProgressShowing)       return;
      if (!paused && !end) {
        if (mediaPlayerView.getVisibility() == View.VISIBLE) {
          mediaPlayerView.setVisibility(View.GONE);
          snapshotMenuView.setVisibility(View.GONE);
          mediaPlayerView.clearAnimation();
          snapshotMenuView.clearAnimation();
          fadeInAnimation.reset();
        }
 else {
          VideoActivity.this.getActionBar().show();
          mediaPlayerView.setImageResource(android.R.drawable.ic_media_pause);
          mediaPlayerView.setVisibility(View.VISIBLE);
          snapshotMenuView.setVisibility(View.VISIBLE);
          startMediaPlayerAnimation();
        }
      }
    }
  }
);
  snapshotMenuView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!paused) {
        mediaPlayerView.setVisibility(View.GONE);
        snapshotMenuView.setVisibility(View.GONE);
        mediaPlayerView.clearAnimation();
        snapshotMenuView.clearAnimation();
        fadeInAnimation.reset();
      }
      if (imageView.getVisibility() == View.VISIBLE) {
        final Bitmap bitmap;
        if (imageView.getDrawable() instanceof BitmapDrawable) {
          bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap();
        }
 else {
          Drawable drawable=imageView.getDrawable();
          bitmap=Bitmap.createBitmap(drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);
          Canvas canvas=new Canvas(bitmap);
          drawable.draw(canvas);
        }
        if (bitmap != null) {
          CustomedDialog.getConfirmSnapshotDialog(VideoActivity.this,bitmap,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              String path=SnapshotManager.createFilePath(evercamCamera.getCameraId(),FileType.JPG);
              new Thread(new CaptureSnapshotRunnable(VideoActivity.this,path,bitmap)).start();
            }
          }
).show();
        }
      }
 else       if (surfaceView.getVisibility() == View.VISIBLE) {
        nativeRequestSample();
      }
    }
  }
);
}","private void initialPageElements(){
  imageViewLayout=(RelativeLayout)this.findViewById(R.id.camera_view_layout);
  imageView=(ImageView)this.findViewById(R.id.img_camera1);
  mediaPlayerView=(ImageView)this.findViewById(R.id.ivmediaplayer1);
  snapshotMenuView=(ImageView)this.findViewById(R.id.player_savesnapshot);
  surfaceView=(SurfaceView)findViewById(R.id.surface_view);
  surfaceHolder=surfaceView.getHolder();
  surfaceHolder.addCallback(this);
  progressView=((ProgressView)imageViewLayout.findViewById(R.id.ivprogressspinner1));
  progressView.setMinimumWidth(mediaPlayerView.getWidth());
  progressView.setMinimumHeight(mediaPlayerView.getHeight());
  progressView.canvasColor=Color.TRANSPARENT;
  isProgressShowing=true;
  progressView.setVisibility(View.VISIBLE);
  offlineTextView=(TextView)findViewById(R.id.offline_text_view);
  timeCountTextView=(TextView)findViewById(R.id.time_text_view);
  mediaPlayerView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (end) {
        Toast.makeText(VideoActivity.this,R.string.msg_try_again,Toast.LENGTH_SHORT).show();
        return;
      }
      if (isProgressShowing)       return;
      if (paused) {
        timeCountTextView.setVisibility(View.VISIBLE);
        showProgressView();
        mediaPlayerView.setImageBitmap(null);
        mediaPlayerView.setVisibility(View.VISIBLE);
        snapshotMenuView.setVisibility(View.VISIBLE);
        mediaPlayerView.setImageResource(android.R.drawable.ic_media_pause);
        startMediaPlayerAnimation();
        if (evercamCamera != null && !evercamCamera.getExternalRtspUrl().isEmpty()) {
          restartPlay(evercamCamera);
        }
 else {
        }
        paused=false;
      }
 else {
        timeCountTextView.setVisibility(View.GONE);
        mediaPlayerView.clearAnimation();
        snapshotMenuView.clearAnimation();
        if (fadeInAnimation != null && fadeInAnimation.hasStarted() && !fadeInAnimation.hasEnded()) {
          fadeInAnimation.cancel();
          fadeInAnimation.reset();
        }
        mediaPlayerView.setVisibility(View.VISIBLE);
        snapshotMenuView.setVisibility(View.VISIBLE);
        if (surfaceView.getVisibility() == View.VISIBLE) {
          snapshotMenuView.setVisibility(View.GONE);
        }
        mediaPlayerView.setImageBitmap(null);
        mediaPlayerView.setImageResource(android.R.drawable.ic_media_play);
        pausePlayer();
        paused=true;
      }
    }
  }
);
  imageViewLayout.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (end) {
        Toast.makeText(VideoActivity.this,R.string.msg_try_again,Toast.LENGTH_SHORT).show();
        return;
      }
      if (isProgressShowing)       return;
      if (!paused && !end) {
        if (mediaPlayerView.getVisibility() == View.VISIBLE) {
          mediaPlayerView.setVisibility(View.GONE);
          snapshotMenuView.setVisibility(View.GONE);
          mediaPlayerView.clearAnimation();
          snapshotMenuView.clearAnimation();
          fadeInAnimation.reset();
        }
 else {
          VideoActivity.this.getActionBar().show();
          mediaPlayerView.setImageResource(android.R.drawable.ic_media_pause);
          mediaPlayerView.setVisibility(View.VISIBLE);
          snapshotMenuView.setVisibility(View.VISIBLE);
          startMediaPlayerAnimation();
        }
      }
    }
  }
);
  snapshotMenuView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!paused) {
        mediaPlayerView.setVisibility(View.GONE);
        snapshotMenuView.setVisibility(View.GONE);
        mediaPlayerView.clearAnimation();
        snapshotMenuView.clearAnimation();
        fadeInAnimation.reset();
      }
      if (imageView.getVisibility() == View.VISIBLE) {
        final Bitmap bitmap;
        if (imageView.getDrawable() instanceof BitmapDrawable) {
          bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap();
        }
 else {
          Drawable drawable=imageView.getDrawable();
          bitmap=Bitmap.createBitmap(drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);
          Canvas canvas=new Canvas(bitmap);
          drawable.draw(canvas);
        }
        if (bitmap != null) {
          CustomedDialog.getConfirmSnapshotDialog(VideoActivity.this,bitmap,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              String path=SnapshotManager.createFilePath(evercamCamera.getCameraId(),FileType.JPG);
              new Thread(new CaptureSnapshotRunnable(VideoActivity.this,path,bitmap)).start();
            }
          }
).show();
        }
      }
 else       if (surfaceView.getVisibility() == View.VISIBLE) {
        nativeRequestSample(""String_Node_Str"");
      }
    }
  }
);
}",0.998265483113968
34072,"@Override public void onCreate(Bundle savedInstanceState){
  try {
    super.onCreate(savedInstanceState);
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    initAnalyticsObjects();
    readShortcutCameraId();
    if (!liveViewCameraId.isEmpty()) {
      startingCameraID=liveViewCameraId;
      liveViewCameraId=""String_Node_Str"";
    }
    launchSleepTimer();
    setDisplayOriention();
    if (this.getActionBar() != null) {
      this.getActionBar().setDisplayHomeAsUpEnabled(true);
    }
    try {
      GStreamer.init(this);
    }
 catch (    Exception e) {
      Log.e(TAG,e.getLocalizedMessage());
      EvercamPlayApplication.sendCaughtException(this,e);
      finish();
      return;
    }
    nativeInit();
    nativeSetTcpTimeout(TCP_TIMEOUT);
    setContentView(R.layout.video_activity_layout);
    initialPageElements();
    checkIsShortcutCameraExists();
    startPlay();
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  try {
    super.onCreate(savedInstanceState);
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    initAnalyticsObjects();
    readShortcutCameraId();
    if (!liveViewCameraId.isEmpty()) {
      startingCameraID=liveViewCameraId;
      liveViewCameraId=""String_Node_Str"";
    }
    launchSleepTimer();
    setDisplayOriention();
    if (this.getActionBar() != null) {
      this.getActionBar().setDisplayHomeAsUpEnabled(true);
    }
    try {
      GStreamer.init(this);
    }
 catch (    Exception e) {
      Log.e(TAG,e.getLocalizedMessage());
      EvercamPlayApplication.sendCaughtException(this,e);
      finish();
      return;
    }
    nativeInit();
    setContentView(R.layout.video_activity_layout);
    initialPageElements();
    checkIsShortcutCameraExists();
    startPlay();
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
  }
}",0.9812623274161736
34073,"@Override protected void onDestroy(){
  Log.d(TAG,""String_Node_Str"");
  super.onDestroy();
  nativeStop();
  nativeFinalize();
  nativeSurfaceFinalize();
}","@Override protected void onDestroy(){
  nativeFinalize();
  super.onDestroy();
}",0.5872340425531914
34074,private native void nativeRequestSample();,private native void nativeRequestSample(String fileName);,0.8484848484848485
34075,"private void setMessage(final String message){
}","private void setMessage(final String message){
  Log.d(TAG,""String_Node_Str"" + message);
}",0.6956521739130435
34076,"private void onVideoLoaded(){
  Log.d(TAG,""String_Node_Str"");
  isPlayingJpg=false;
  startTimeCounter();
}","private void onVideoLoaded(){
  runOnUiThread(new Runnable(){
    public void run(){
      Log.d(TAG,""String_Node_Str"");
      isPlayingJpg=false;
      startTimeCounter();
    }
  }
);
}",0.7278911564625851
34077,"/** 
 * Calculate how long it takes for the user to see the camera list
 */
public void calculateLoadingTimeAndSend(){
  if (startTime != null) {
    float timeDifferenceFloat=Commons.calculateTimeDifferenceFrom(startTime);
    Log.d(TAG,""String_Node_Str"" + databaseLoadTime + ""String_Node_Str""+ timeDifferenceFloat+ ""String_Node_Str""+ ""String_Node_Str"");
    startTime=null;
    LoadTimeFeedbackItem feedbackItem=new LoadTimeFeedbackItem(this,AppData.defaultUser.getUsername(),databaseLoadTime,timeDifferenceFloat);
    databaseLoadTime=0;
    logger.info(feedbackItem.toJson());
    feedbackItem.sendToKeenIo(client);
  }
}","/** 
 * Calculate how long it takes for the user to see the camera list
 */
public void calculateLoadingTimeAndSend(){
  if (startTime != null) {
    float timeDifferenceFloat=Commons.calculateTimeDifferenceFrom(startTime);
    Log.d(TAG,""String_Node_Str"" + databaseLoadTime + ""String_Node_Str""+ timeDifferenceFloat+ ""String_Node_Str""+ ""String_Node_Str"");
    startTime=null;
    String username=""String_Node_Str"";
    if (AppData.defaultUser != null) {
      username=AppData.defaultUser.getUsername();
    }
    LoadTimeFeedbackItem feedbackItem=new LoadTimeFeedbackItem(this,username,databaseLoadTime,timeDifferenceFloat);
    databaseLoadTime=0;
    logger.info(feedbackItem.toJson());
    feedbackItem.sendToKeenIo(client);
  }
}",0.8153053715967623
34078,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  customProgressDialog=new CustomProgressDialog(this);
  getWindow().requestFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.login);
  setUnderLine();
  Button btnLogin=(Button)findViewById(R.id.btnLogin);
  usernameEdit=(EditText)findViewById(R.id.editUsername);
  passwordEdit=(EditText)findViewById(R.id.editPassword);
  btnLogin.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      new LoginCheckInternetTask(LoginActivity.this,InternetCheckType.LOGIN).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    }
  }
);
  signUpLink.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      new LoginCheckInternetTask(LoginActivity.this,InternetCheckType.SIGNUP).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    }
  }
);
  hideLogoIfNecessary();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  customProgressDialog=new CustomProgressDialog(this);
  getWindow().requestFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.login);
  Button btnLogin=(Button)findViewById(R.id.btnLogin);
  TextView signUpLink=(TextView)findViewById(R.id.signupLink);
  usernameEdit=(EditText)findViewById(R.id.editUsername);
  passwordEdit=(EditText)findViewById(R.id.editPassword);
  btnLogin.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      new LoginCheckInternetTask(LoginActivity.this,InternetCheckType.LOGIN).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    }
  }
);
  signUpLink.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      new LoginCheckInternetTask(LoginActivity.this,InternetCheckType.SIGNUP).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    }
  }
);
  hideLogoIfNecessary();
}",0.917914300464636
34079,"public void attemptLogin(){
  if (loginTask != null) {
    return;
  }
  usernameEdit.setError(null);
  passwordEdit.setError(null);
  username=usernameEdit.getText().toString();
  password=passwordEdit.getText().toString();
  boolean cancel=false;
  View focusView=null;
  if (TextUtils.isEmpty(username)) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_username_required);
    focusView=usernameEdit;
    cancel=true;
  }
 else   if (username.contains(""String_Node_Str"")) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_invalid_username);
    focusView=usernameEdit;
    cancel=true;
  }
 else   if (TextUtils.isEmpty(password)) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_password_required);
    focusView=passwordEdit;
    cancel=true;
  }
 else   if (password.contains(""String_Node_Str"")) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_invalid_password);
    focusView=passwordEdit;
    cancel=true;
  }
  if (cancel) {
    focusView.requestFocus();
  }
 else {
    customProgressDialog.show(getString(R.string.login_progress_signing_in));
    InputMethodManager inputMethodManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
    if (getCurrentFocus() != null) {
      inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(),0);
    }
    loginTask=new LoginTask();
    loginTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
}","public void attemptLogin(){
  if (loginTask != null) {
    return;
  }
  usernameEdit.setError(null);
  passwordEdit.setError(null);
  username=usernameEdit.getText().toString();
  password=passwordEdit.getText().toString();
  boolean cancel=false;
  View focusView=null;
  if (TextUtils.isEmpty(username)) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_username_required);
    focusView=usernameEdit;
    cancel=true;
  }
 else   if (!username.matches(Constants.REGULAR_EXPRESSION_USERNAME)) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_invalid_username);
    focusView=usernameEdit;
    cancel=true;
  }
 else   if (TextUtils.isEmpty(password)) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_password_required);
    focusView=passwordEdit;
    cancel=true;
  }
 else   if (password.contains(""String_Node_Str"")) {
    CustomToast.showInCenter(getApplicationContext(),R.string.error_invalid_password);
    focusView=passwordEdit;
    cancel=true;
  }
  if (cancel) {
    focusView.requestFocus();
  }
 else {
    customProgressDialog.show(getString(R.string.login_progress_signing_in));
    InputMethodManager inputMethodManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
    if (getCurrentFocus() != null) {
      inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(),0);
    }
    loginTask=new LoginTask();
    loginTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
}",0.9718120805369128
34080,"private void readShortcutCameraId(){
  Intent liveViewIntent=this.getIntent();
  if (liveViewIntent != null && liveViewIntent.getExtras() != null) {
    EvercamPlayApplication.sendEventAnalytics(this,R.string.category_shortcut,R.string.action_shortcut_use,R.string.label_shortcut_use);
    try {
      getMixpanel().sendEvent(R.string.mixpanel_event_use_shortcut,new JSONObject().put(""String_Node_Str"",evercamCamera.getCameraId()));
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
    liveViewCameraId=liveViewIntent.getExtras().getString(HomeShortcut.KEY_CAMERA_ID,""String_Node_Str"");
  }
}","private void readShortcutCameraId(){
  Intent liveViewIntent=this.getIntent();
  if (liveViewIntent != null && liveViewIntent.getExtras() != null) {
    EvercamPlayApplication.sendEventAnalytics(this,R.string.category_shortcut,R.string.action_shortcut_use,R.string.label_shortcut_use);
    try {
      if (evercamCamera != null) {
        getMixpanel().sendEvent(R.string.mixpanel_event_use_shortcut,new JSONObject().put(""String_Node_Str"",evercamCamera.getCameraId()));
      }
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
    liveViewCameraId=liveViewIntent.getExtras().getString(HomeShortcut.KEY_CAMERA_ID,""String_Node_Str"");
  }
}",0.964594807238395
34081,"private static Bitmap getIconForShortcut(EvercamCamera evercamCamera,Context context){
  Bitmap bitmap=null;
  try {
    bitmap=getThumbnailFor(context,evercamCamera);
    if (bitmap == null) {
      bitmap=BitmapFactory.decodeResource(context.getResources(),R.drawable.icon_evercam);
      return Bitmap.createScaledBitmap(bitmap,192,192,false);
    }
    bitmap=Bitmap.createScaledBitmap(bitmap,192,192,false);
    bitmap=getRoundedCornerBitmap(bitmap);
    bitmap=addBorder(bitmap,3,3,3,3,Color.GRAY);
    bitmap=getRoundedCornerBitmap(bitmap);
    bitmap=addBorder(bitmap,0,30,20,30,Color.TRANSPARENT);
    Bitmap logoBitmap=BitmapFactory.decodeResource(context.getResources(),R.drawable.icon_40x40);
    appendOverlay(bitmap,logoBitmap);
  }
 catch (  EvercamException e) {
    Log.e(TAG,e.getMessage());
  }
  return bitmap;
}","private static Bitmap getIconForShortcut(EvercamCamera evercamCamera,Context context){
  Bitmap bitmap=null;
  try {
    bitmap=getThumbnailFor(context,evercamCamera);
    if (bitmap == null) {
      bitmap=BitmapFactory.decodeResource(context.getResources(),R.drawable.icon_evercam);
      return Bitmap.createScaledBitmap(bitmap,192,192,false);
    }
    bitmap=Bitmap.createScaledBitmap(bitmap,192,192,false);
    bitmap=getRoundedCornerBitmap(bitmap);
    bitmap=addBorder(bitmap,3,3,3,3,Color.GRAY);
    bitmap=getRoundedCornerBitmap(bitmap);
    bitmap=addBorder(bitmap,0,30,20,30,Color.TRANSPARENT);
    Bitmap logoBitmap=BitmapFactory.decodeResource(context.getResources(),R.drawable.icon_50x50);
    logoBitmap=Bitmap.createScaledBitmap(logoBitmap,80,80,false);
    appendOverlay(bitmap,logoBitmap);
  }
 catch (  EvercamException e) {
    Log.e(TAG,e.getMessage());
  }
  return bitmap;
}",0.9595375722543352
34082,"private static Bitmap getThumbnailFor(Context context,EvercamCamera evercamCamera) throws EvercamException {
  if (evercamCamera.camera != null) {
    byte[] snapshotByte=evercamCamera.camera.getThumbnailData();
    return BitmapFactory.decodeByteArray(snapshotByte,0,snapshotByte.length);
  }
 else {
    return EvercamFile.loadBitmapForCamera(context,evercamCamera.getCameraId());
  }
}","private static Bitmap getThumbnailFor(Context context,EvercamCamera evercamCamera) throws EvercamException {
  return EvercamFile.loadBitmapForCamera(context,evercamCamera.getCameraId());
}",0.6551126516464472
34083,"private void setScrollStopListenerFor(final CustomScrollView scrollView){
  scrollView.setOnTouchListener(new OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        scrollView.startScrollerTask();
      }
      return false;
    }
  }
);
  scrollView.setOnScrollStoppedListener(new OnScrollStoppedListener(){
    @Override public void onScrollStopped(){
      Log.d(TAG,""String_Node_Str"");
      onScreenScrolled();
    }
  }
);
}","private void setScrollStopListenerFor(final CustomScrollView scrollView){
  scrollView.setOnTouchListener(new OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        scrollView.startScrollerTask();
      }
      return false;
    }
  }
);
  scrollView.setOnScrollStoppedListener(new OnScrollStoppedListener(){
    @Override public void onScrollStopped(){
      onScreenScrolled();
    }
  }
);
}",0.91796875
34084,"@Override public void onScrollStopped(){
  Log.d(TAG,""String_Node_Str"");
  onScreenScrolled();
}","@Override public void onScrollStopped(){
  onScreenScrolled();
}",0.8
34085,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Constants.isAppTrackingEnabled) {
    BugSenseHandler.initAndStartSession(this,Constants.bugsense_ApiKey);
  }
  setContentView(R.layout.activity_recording_web);
  Bundle bundle=getIntent().getExtras();
  String cameraId=bundle.getString(Constants.BUNDLE_KEY_CAMERA_ID);
  progressDialog=new CustomProgressDialog(this);
  RecordingWebView webView=(RecordingWebView)findViewById(R.id.recordings_webview);
  webView.loadRecordingWidget(cameraId);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Constants.isAppTrackingEnabled) {
    BugSenseHandler.initAndStartSession(this,Constants.bugsense_ApiKey);
  }
  setContentView(R.layout.activity_recording_web);
  Bundle bundle=getIntent().getExtras();
  if (bundle != null) {
    String cameraId=bundle.getString(Constants.BUNDLE_KEY_CAMERA_ID);
    progressDialog=new CustomProgressDialog(this);
    RecordingWebView webView=(RecordingWebView)findViewById(R.id.recordings_webview);
    webView.loadRecordingWidget(cameraId);
  }
 else {
    finish();
  }
}",0.9468267581475128
34086,"/** 
 * Add all camera views to the main grid page
 * @param reloadImages   reload camera images or not
 * @param showThumbnails show thumbnails that returned by Evercam or not, if trueand if thumbnail not available, it will request latest snapshot instead. If false, it will request neither thumbnail nor latest snapshot.
 */
public boolean addAllCameraViews(final boolean reloadImages,final boolean showThumbnails){
  try {
    camerasPerRow=recalculateCameraPerRow();
    final CustomScrollView scrollView=(CustomScrollView)this.findViewById(R.id.cameras_scroll_view);
    io.evercam.androidapp.custom.FlowLayout camsLineView=(io.evercam.androidapp.custom.FlowLayout)this.findViewById(R.id.cameras_flow_layout);
    final Rect bounds=readLiveBoundsOfScrollView();
    int screen_width=readScreenWidth(this);
    int index=0;
    for (    final EvercamCamera evercamCamera : AppData.evercamCameraList) {
      final LinearLayout cameraListLayout=new LinearLayout(this);
      int indexPlus=index + 1;
      if (reloadImages)       evercamCamera.loadingStatus=ImageLoadingStatus.not_started;
      final CameraLayout cameraLayout=new CameraLayout(this,evercamCamera,showThumbnails);
      LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT,android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
      params.width=((indexPlus % camerasPerRow == 0) ? (screen_width - (index % camerasPerRow) * (screen_width / camerasPerRow)) : screen_width / camerasPerRow);
      params.width=params.width - 1;
      params.height=(int)(params.width / (1.25));
      params.setMargins(0,0,0,0);
      cameraLayout.setLayoutParams(params);
      cameraListLayout.addView(cameraLayout);
      camsLineView.addView(cameraListLayout,new io.evercam.androidapp.custom.FlowLayout.LayoutParams(0,0));
      index++;
      if (reloadImages) {
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            Rect cameraBounds=new Rect();
            cameraListLayout.getHitRect(cameraBounds);
            if (Rect.intersects(cameraBounds,bounds)) {
              cameraLayout.loadImage();
            }
          }
        }
,300);
      }
    }
    if (this.getActionBar() != null)     this.getActionBar().setHomeButtonEnabled(true);
    if (refresh != null)     refresh.setActionView(null);
    if (reloadImages) {
      setScrollStopListenerFor(scrollView);
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
    EvercamPlayApplication.sendCaughtException(this,e);
    CustomedDialog.showUnexpectedErrorDialog(CamerasActivity.this);
  }
  return false;
}","/** 
 * Add all camera views to the main grid page
 * @param reloadImages   reload camera images or not
 * @param showThumbnails show thumbnails that returned by Evercam or not, if trueand if thumbnail not available, it will request latest snapshot instead. If false, it will request neither thumbnail nor latest snapshot.
 */
public boolean addAllCameraViews(final boolean reloadImages,final boolean showThumbnails){
  try {
    camerasPerRow=recalculateCameraPerRow();
    final CustomScrollView scrollView=(CustomScrollView)this.findViewById(R.id.cameras_scroll_view);
    io.evercam.androidapp.custom.FlowLayout camsLineView=(io.evercam.androidapp.custom.FlowLayout)this.findViewById(R.id.cameras_flow_layout);
    final Rect bounds=readLiveBoundsOfScrollView();
    int screen_width=readScreenWidth(this);
    int index=0;
    for (    final EvercamCamera evercamCamera : AppData.evercamCameraList) {
      final LinearLayout cameraListLayout=new LinearLayout(this);
      int indexPlus=index + 1;
      if (reloadImages)       evercamCamera.loadingStatus=ImageLoadingStatus.not_started;
      final CameraLayout cameraLayout=new CameraLayout(this,evercamCamera,showThumbnails);
      LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT,android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
      params.width=((indexPlus % camerasPerRow == 0) ? (screen_width - (index % camerasPerRow) * (screen_width / camerasPerRow)) : screen_width / camerasPerRow);
      params.width=params.width - 1;
      params.height=(int)(params.width / (1.25));
      params.setMargins(0,0,0,0);
      cameraLayout.setLayoutParams(params);
      cameraListLayout.addView(cameraLayout);
      camsLineView.addView(cameraListLayout,new io.evercam.androidapp.custom.FlowLayout.LayoutParams(0,0));
      index++;
      if (reloadImages) {
        evercamCamera.loadingStatus=ImageLoadingStatus.not_started;
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            Rect cameraBounds=new Rect();
            cameraListLayout.getHitRect(cameraBounds);
            if (Rect.intersects(cameraBounds,bounds)) {
              cameraLayout.loadImage();
            }
          }
        }
,300);
      }
    }
    if (this.getActionBar() != null)     this.getActionBar().setHomeButtonEnabled(true);
    if (refresh != null)     refresh.setActionView(null);
    if (reloadImages) {
      setScrollStopListenerFor(scrollView);
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
    EvercamPlayApplication.sendCaughtException(this,e);
    CustomedDialog.showUnexpectedErrorDialog(CamerasActivity.this);
  }
  return false;
}",0.9877653832313782
34087,"private EvercamCamera getCameraFromCursor(Cursor cursor,EvercamCamera evercamCamera){
  evercamCamera.setId(Integer.parseInt(cursor.getString(0)));
  evercamCamera.setCameraId(cursor.getString(1));
  evercamCamera.setName(cursor.getString(2));
  evercamCamera.setOwner(cursor.getString(3));
  evercamCamera.setUsername(cursor.getString(4));
  evercamCamera.setPassword(cursor.getString(5));
  evercamCamera.setTimezone(cursor.getString(6));
  evercamCamera.setVendor(cursor.getString(7));
  evercamCamera.setModel(cursor.getString(8));
  evercamCamera.setMac(cursor.getString(9));
  evercamCamera.setExternalSnapshotUrl(cursor.getString(10));
  evercamCamera.setInternalSnapshotUrl(cursor.getString(11));
  evercamCamera.setExternalRtspUrl(cursor.getString(12));
  evercamCamera.setInternalRtspUrl(cursor.getString(13));
  evercamCamera.setStatus(cursor.getString(14));
  evercamCamera.setHasCredentials(cursor.getInt(15) == 1);
  evercamCamera.setInternalHost(cursor.getString(16));
  evercamCamera.setExternalHost(cursor.getString(17));
  evercamCamera.setInternalHttp(cursor.getInt(18));
  evercamCamera.setExternalHttp(cursor.getInt(19));
  evercamCamera.setInternalRtsp(cursor.getInt(20));
  evercamCamera.setExternalRtsp(cursor.getInt(21));
  evercamCamera.setRealOwner(cursor.getString(22));
  evercamCamera.setCanEdit(cursor.getInt(23) == 1);
  evercamCamera.setCanDelete(cursor.getInt(24) == 1);
  return evercamCamera;
}","private EvercamCamera getCameraFromCursor(Cursor cursor,EvercamCamera evercamCamera){
  evercamCamera.setId(Integer.parseInt(cursor.getString(0)));
  evercamCamera.setCameraId(cursor.getString(1));
  evercamCamera.setName(cursor.getString(2));
  evercamCamera.setOwner(cursor.getString(3));
  evercamCamera.setUsername(cursor.getString(4));
  evercamCamera.setPassword(cursor.getString(5));
  evercamCamera.setTimezone(cursor.getString(6));
  evercamCamera.setVendor(cursor.getString(7));
  evercamCamera.setModel(cursor.getString(8));
  evercamCamera.setMac(cursor.getString(9));
  evercamCamera.setExternalSnapshotUrl(cursor.getString(10));
  evercamCamera.setInternalSnapshotUrl(cursor.getString(11));
  evercamCamera.setExternalRtspUrl(cursor.getString(12));
  evercamCamera.setInternalRtspUrl(cursor.getString(13));
  evercamCamera.setStatus(cursor.getString(14));
  evercamCamera.setHasCredentials(cursor.getInt(15) == 1);
  evercamCamera.setInternalHost(cursor.getString(16));
  evercamCamera.setExternalHost(cursor.getString(17));
  evercamCamera.setInternalHttp(cursor.getInt(18));
  evercamCamera.setExternalHttp(cursor.getInt(19));
  evercamCamera.setInternalRtsp(cursor.getInt(20));
  evercamCamera.setExternalRtsp(cursor.getInt(21));
  evercamCamera.setThumbnailUrl(cursor.getString(22));
  evercamCamera.setRealOwner(cursor.getString(23));
  evercamCamera.setCanEdit(cursor.getInt(24) == 1);
  evercamCamera.setCanDelete(cursor.getInt(25) == 1);
  return evercamCamera;
}",0.979073756432247
34088,"public void onCreateCustom(SQLiteDatabase db){
  String CREATE_TABLE_Cameras=""String_Node_Str"" + TABLE_CAMERA + ""String_Node_Str""+ KEY_ID+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_CAMERA_ID+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_CAMERA_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_OWNER+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_USERNAME+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_PASSWORD+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_TIMEZONE+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_VENDOR+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_MODEL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_MAC+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_EXTERNAL_JPG_URL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_INTERNAL_JPG_URL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_EXTERNAL_RTSP_URL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_INTERNAL_RTSP_URL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_HAS_CREDENTIAL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_INTERNAL_HOST+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_EXTERNAL_HOST+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_INTERNAL_HTTP+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_EXTERNAL_HTTP+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_INTERNAL_RTSP+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_EXTERNAL_RTSP+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_REAL_OWNER+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_CAN_EDIT+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_CAN_DELETE+ ""String_Node_Str""+ ""String_Node_Str"";
  db.execSQL(CREATE_TABLE_Cameras);
}","public void onCreateCustom(SQLiteDatabase db){
  String CREATE_TABLE_Cameras=""String_Node_Str"" + TABLE_CAMERA + ""String_Node_Str""+ KEY_ID+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_CAMERA_ID+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_CAMERA_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_OWNER+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_USERNAME+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_PASSWORD+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_TIMEZONE+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_VENDOR+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_MODEL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_MAC+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_EXTERNAL_JPG_URL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_INTERNAL_JPG_URL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_EXTERNAL_RTSP_URL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_INTERNAL_RTSP_URL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_HAS_CREDENTIAL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_INTERNAL_HOST+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_EXTERNAL_HOST+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_INTERNAL_HTTP+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_EXTERNAL_HTTP+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_INTERNAL_RTSP+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_EXTERNAL_RTSP+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_THUMBNAIL_URL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_REAL_OWNER+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_CAN_EDIT+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_CAN_DELETE+ ""String_Node_Str""+ ""String_Node_Str"";
  db.execSQL(CREATE_TABLE_Cameras);
}",0.9841710635934464
34089,"private ContentValues getContentValueFrom(EvercamCamera evercamCamera){
  ContentValues values=new ContentValues();
  values.put(KEY_CAMERA_ID,evercamCamera.getCameraId());
  if (AppData.defaultUser != null) {
    values.put(KEY_OWNER,AppData.defaultUser.getUsername());
  }
 else {
    values.put(KEY_OWNER,""String_Node_Str"");
  }
  values.put(KEY_CAMERA_NAME,evercamCamera.getName());
  values.put(KEY_USERNAME,evercamCamera.getUsername());
  values.put(KEY_PASSWORD,evercamCamera.getPassword());
  values.put(KEY_VENDOR,evercamCamera.getVendor());
  values.put(KEY_MODEL,evercamCamera.getModel());
  values.put(KEY_TIMEZONE,evercamCamera.getTimezone());
  values.put(KEY_MAC,evercamCamera.getMac());
  values.put(KEY_STATUS,evercamCamera.getStatus());
  values.put(KEY_INTERNAL_JPG_URL,evercamCamera.getInternalSnapshotUrl());
  values.put(KEY_EXTERNAL_JPG_URL,evercamCamera.getExternalSnapshotUrl());
  values.put(KEY_EXTERNAL_RTSP_URL,evercamCamera.getExternalRtspUrl());
  values.put(KEY_INTERNAL_RTSP_URL,evercamCamera.getInternalRtspUrl());
  values.put(KEY_HAS_CREDENTIAL,evercamCamera.getHasCredentialsInt());
  values.put(KEY_INTERNAL_HOST,evercamCamera.getInternalHost());
  values.put(KEY_EXTERNAL_HOST,evercamCamera.getExternalHost());
  values.put(KEY_INTERNAL_HTTP,evercamCamera.getInternalHttp());
  values.put(KEY_EXTERNAL_HTTP,evercamCamera.getExternalHttp());
  values.put(KEY_INTERNAL_RTSP,evercamCamera.getInternalRtsp());
  values.put(KEY_EXTERNAL_RTSP,evercamCamera.getExternalRtsp());
  values.put(KEY_REAL_OWNER,evercamCamera.getRealOwner());
  values.put(KEY_CAN_EDIT,evercamCamera.getCanEditInt());
  values.put(KEY_CAN_DELETE,evercamCamera.getCanDeleteInt());
  return values;
}","private ContentValues getContentValueFrom(EvercamCamera evercamCamera){
  ContentValues values=new ContentValues();
  values.put(KEY_CAMERA_ID,evercamCamera.getCameraId());
  if (AppData.defaultUser != null) {
    values.put(KEY_OWNER,AppData.defaultUser.getUsername());
  }
 else {
    values.put(KEY_OWNER,""String_Node_Str"");
  }
  values.put(KEY_CAMERA_NAME,evercamCamera.getName());
  values.put(KEY_USERNAME,evercamCamera.getUsername());
  values.put(KEY_PASSWORD,evercamCamera.getPassword());
  values.put(KEY_VENDOR,evercamCamera.getVendor());
  values.put(KEY_MODEL,evercamCamera.getModel());
  values.put(KEY_TIMEZONE,evercamCamera.getTimezone());
  values.put(KEY_MAC,evercamCamera.getMac());
  values.put(KEY_STATUS,evercamCamera.getStatus());
  values.put(KEY_INTERNAL_JPG_URL,evercamCamera.getInternalSnapshotUrl());
  values.put(KEY_EXTERNAL_JPG_URL,evercamCamera.getExternalSnapshotUrl());
  values.put(KEY_EXTERNAL_RTSP_URL,evercamCamera.getExternalRtspUrl());
  values.put(KEY_INTERNAL_RTSP_URL,evercamCamera.getInternalRtspUrl());
  values.put(KEY_HAS_CREDENTIAL,evercamCamera.getHasCredentialsInt());
  values.put(KEY_INTERNAL_HOST,evercamCamera.getInternalHost());
  values.put(KEY_EXTERNAL_HOST,evercamCamera.getExternalHost());
  values.put(KEY_INTERNAL_HTTP,evercamCamera.getInternalHttp());
  values.put(KEY_EXTERNAL_HTTP,evercamCamera.getExternalHttp());
  values.put(KEY_INTERNAL_RTSP,evercamCamera.getInternalRtsp());
  values.put(KEY_EXTERNAL_RTSP,evercamCamera.getExternalRtsp());
  values.put(KEY_THUMBNAIL_URL,evercamCamera.getThumbnailUrl());
  values.put(KEY_REAL_OWNER,evercamCamera.getRealOwner());
  values.put(KEY_CAN_EDIT,evercamCamera.getCanEditInt());
  values.put(KEY_CAN_DELETE,evercamCamera.getCanDeleteInt());
  return values;
}",0.9813164702500718
34090,"public EvercamCamera getCamera(int id){
  EvercamCamera evercamCamera=null;
  SQLiteDatabase db=this.getReadableDatabase();
  Cursor cursor=db.query(TABLE_CAMERA,new String[]{KEY_ID,KEY_CAMERA_ID,KEY_CAMERA_NAME,KEY_OWNER,KEY_USERNAME,KEY_PASSWORD,KEY_TIMEZONE,KEY_VENDOR,KEY_MODEL,KEY_MAC,KEY_EXTERNAL_JPG_URL,KEY_INTERNAL_JPG_URL,KEY_EXTERNAL_RTSP_URL,KEY_INTERNAL_RTSP_URL,KEY_STATUS,KEY_HAS_CREDENTIAL,KEY_INTERNAL_HOST,KEY_EXTERNAL_HOST,KEY_INTERNAL_HTTP,KEY_EXTERNAL_HTTP,KEY_INTERNAL_RTSP,KEY_EXTERNAL_RTSP,KEY_REAL_OWNER,KEY_CAN_EDIT,KEY_CAN_DELETE},KEY_ID + ""String_Node_Str"",new String[]{String.valueOf(id)},null,null,null,null);
  if (cursor != null) {
    if (cursor.moveToFirst()) {
      evercamCamera=new EvercamCamera();
      evercamCamera=getCameraFromCursor(cursor,evercamCamera);
    }
    cursor.close();
  }
  db.close();
  return evercamCamera;
}","public EvercamCamera getCamera(int id){
  EvercamCamera evercamCamera=null;
  SQLiteDatabase db=this.getReadableDatabase();
  Cursor cursor=db.query(TABLE_CAMERA,new String[]{KEY_ID,KEY_CAMERA_ID,KEY_CAMERA_NAME,KEY_OWNER,KEY_USERNAME,KEY_PASSWORD,KEY_TIMEZONE,KEY_VENDOR,KEY_MODEL,KEY_MAC,KEY_EXTERNAL_JPG_URL,KEY_INTERNAL_JPG_URL,KEY_EXTERNAL_RTSP_URL,KEY_INTERNAL_RTSP_URL,KEY_STATUS,KEY_HAS_CREDENTIAL,KEY_INTERNAL_HOST,KEY_EXTERNAL_HOST,KEY_INTERNAL_HTTP,KEY_EXTERNAL_HTTP,KEY_INTERNAL_RTSP,KEY_EXTERNAL_RTSP,KEY_THUMBNAIL_URL,KEY_REAL_OWNER,KEY_CAN_EDIT,KEY_CAN_DELETE},KEY_ID + ""String_Node_Str"",new String[]{String.valueOf(id)},null,null,null,null);
  if (cursor != null) {
    if (cursor.moveToFirst()) {
      evercamCamera=new EvercamCamera();
      evercamCamera=getCameraFromCursor(cursor,evercamCamera);
    }
    cursor.close();
  }
  db.close();
  return evercamCamera;
}",0.989749430523918
34091,"@Override public void run(){
  try {
    if (end)     return;
    if (evercamCamera.loadingStatus == ImageLoadingStatus.not_started) {
      if (evercamCamera.isActive()) {
        showAndSaveLiveSnapshot();
      }
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.live_received) {
      setLayoutForLiveImageReceived();
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.live_not_received) {
      setLayoutForNoImageReceived();
    }
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    handler.postDelayed(LoadImageRunnable,5000);
    return;
  }
catch (  Exception e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    if (!end) {
      handler.postDelayed(LoadImageRunnable,5000);
    }
  }
}","@Override public void run(){
  try {
    if (end)     return;
    if (evercamCamera.loadingStatus == ImageLoadingStatus.not_started) {
      if (evercamCamera.isActive()) {
        showAndSaveLiveSnapshot();
      }
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.live_received) {
      setLayoutForLiveImageReceived();
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.live_not_received) {
      setLayoutForNoImageReceived();
    }
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    handler.postDelayed(LoadImageRunnable,5000);
  }
catch (  Exception e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    if (!end) {
      handler.postDelayed(LoadImageRunnable,5000);
    }
  }
}",0.9927623642943304
34092,"private void showAndSaveLiveSnapshot(){
  Target liveSnapshotTarget=new Target(){
    @Override public void onBitmapLoaded(    final Bitmap bitmap,    Picasso.LoadedFrom from){
      snapshotImageView.setImageBitmap(bitmap);
      CameraLayout.this.evercamCamera.loadingStatus=ImageLoadingStatus.live_received;
      handler.postDelayed(LoadImageRunnable,0);
      new Thread(new SaveImageRunnable(context,bitmap,evercamCamera.getCameraId())).start();
    }
    @Override public void onBitmapFailed(    Drawable errorDrawable){
      if (errorDrawable == null) {
        CameraLayout.this.evercamCamera.loadingStatus=ImageLoadingStatus.live_not_received;
        handler.postDelayed(LoadImageRunnable,0);
      }
    }
    @Override public void onPrepareLoad(    Drawable placeHolderDrawable){
    }
  }
;
  try {
    final String snapshotUrl=API.generateSnapshotUrlForCamera(evercamCamera.getCameraId());
    Picasso.with(context).load(snapshotUrl).into(liveSnapshotTarget);
  }
 catch (  EvercamException e) {
    e.printStackTrace();
  }
}","private void showAndSaveLiveSnapshot(){
  DownloadLiveSnapshotTask downloadLiveSnapshotTask=new DownloadLiveSnapshotTask(evercamCamera.getCameraId());
  downloadLiveSnapshotTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.0880503144654088
34093,"public SaveImageRunnable(Context context,Bitmap bitmap,String cameraId){
  this.context=context;
  this.bitmap=bitmap;
  SaveImageRunnable.cameraId=cameraId;
}","public SaveImageRunnable(Context context,Bitmap bitmap,String cameraId){
  this.context=context;
  this.bitmap=bitmap;
  this.cameraId=cameraId;
}",0.9311475409836064
34094,"public static void saveImage(Context context,Bitmap bitmap,String cameraId){
  try {
    File externalFile=EvercamFile.getExternalFile(context,cameraId);
    createFile(externalFile,bitmap);
    checkFile(externalFile);
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + Log.getStackTraceString(e));
  }
  try {
    File cacheFile=EvercamFile.getCacheFileRelative(context,cameraId);
    createFile(cacheFile,bitmap);
    checkFile(cacheFile);
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + Log.getStackTraceString(e));
  }
}","public void saveImage(Context context,Bitmap bitmap,String cameraId){
  try {
    File externalFile=EvercamFile.getExternalFile(context,cameraId);
    createFile(externalFile,bitmap);
    checkFile(externalFile);
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + Log.getStackTraceString(e));
  }
  try {
    File cacheFile=EvercamFile.getCacheFileRelative(context,cameraId);
    createFile(cacheFile,bitmap);
    checkFile(cacheFile);
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + Log.getStackTraceString(e));
  }
}",0.9936651583710407
34095,"private static void checkFile(File file){
  if (file.exists()) {
    if (file.length() > 0) {
    }
 else {
      file.delete();
      Log.e(TAG,cameraId + ""String_Node_Str"");
    }
  }
 else {
    Log.e(TAG,""String_Node_Str"" + cameraId);
  }
}","private void checkFile(File file){
  if (file.exists()) {
    if (file.length() > 0) {
    }
 else {
      file.delete();
      Log.e(TAG,cameraId + ""String_Node_Str"");
    }
  }
 else {
    Log.e(TAG,""String_Node_Str"" + cameraId);
  }
}",0.9854469854469856
34096,"@Override protected void onPostExecute(Drawable result){
  try {
    if (!showImagesVideo)     return;
    Log.d(TAG,""String_Node_Str"" + successiveFailureCount);
    if (!paused && !end) {
      if (result != null) {
        Log.d(TAG,""String_Node_Str"");
        if (result.getIntrinsicWidth() > 0 && result.getIntrinsicHeight() > 0) {
          if (myStartImageTime >= latestStartImageTime) {
            latestStartImageTime=myStartImageTime;
            if (mediaPlayerView.getVisibility() != View.VISIBLE && VideoActivity.this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE)             VideoActivity.this.getActionBar().hide();
            if (showImagesVideo && cameraId.equals(evercamCamera.getCameraId())) {
              imageView.setImageDrawable(result);
            }
            hideProgressView();
            startTimeCounter();
            if (!isJpgSuccessful) {
              isJpgSuccessful=true;
              EvercamPlayApplication.sendEventAnalytics(VideoActivity.this,R.string.category_streaming_jpg,R.string.action_streaming_jpg_success,R.string.label_streaming_jpg_success);
              StreamFeedbackItem successItem=new StreamFeedbackItem(VideoActivity.this,AppData.defaultUser.getUsername(),true);
              successItem.setCameraId(evercamCamera.getCameraId());
              successItem.setUrl(successUrl);
              successItem.setType(StreamFeedbackItem.TYPE_JPG);
              logger.info(successItem.toJson());
              successItem.sendToKeenIo(client);
            }
 else {
            }
          }
 else {
            if (enableLogs)             Log.i(TAG,""String_Node_Str"");
          }
        }
      }
 else {
        Log.d(TAG,""String_Node_Str"");
        if (successiveFailureCount > 10 && !isShowingFailureMessage) {
          Log.d(TAG,""String_Node_Str"");
          if (myStartImageTime >= latestStartImageTime) {
            Log.d(TAG,""String_Node_Str"");
            showMediaFailureDialog();
            browseJpgTask.cancel(true);
            EvercamPlayApplication.sendEventAnalytics(VideoActivity.this,R.string.category_streaming_jpg,R.string.action_streaming_jpg_failed,R.string.label_streaming_jpg_failed);
            StreamFeedbackItem failedItem=new StreamFeedbackItem(VideoActivity.this,AppData.defaultUser.getUsername(),false);
            failedItem.setCameraId(evercamCamera.getCameraId());
            failedItem.setUrl(evercamCamera.getExternalSnapshotUrl());
            failedItem.setType(StreamFeedbackItem.TYPE_JPG);
            logger.info(failedItem.toJson());
            failedItem.sendToKeenIo(client);
          }
        }
      }
    }
 else {
      Log.d(TAG,""String_Node_Str"");
    }
  }
 catch (  OutOfMemoryError e) {
    if (enableLogs)     Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
  }
catch (  Exception e) {
    if (enableLogs)     Log.e(TAG,e.toString());
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
  }
  startDownloading=true;
}","@Override protected void onPostExecute(Drawable result){
  try {
    if (!showImagesVideo)     return;
    Log.d(TAG,""String_Node_Str"" + successiveFailureCount);
    if (!paused && !end) {
      if (result != null) {
        Log.d(TAG,""String_Node_Str"");
        if (result.getIntrinsicWidth() > 0 && result.getIntrinsicHeight() > 0) {
          if (myStartImageTime >= latestStartImageTime) {
            latestStartImageTime=myStartImageTime;
            if (mediaPlayerView.getVisibility() != View.VISIBLE && VideoActivity.this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE)             VideoActivity.this.getActionBar().hide();
            if (showImagesVideo && cameraId.equals(evercamCamera.getCameraId())) {
              imageView.setImageDrawable(result);
            }
 else             if (!cameraId.equals(evercamCamera.getCameraId())) {
              Log.e(TAG,""String_Node_Str"");
            }
            hideProgressView();
            startTimeCounter();
            if (!isJpgSuccessful) {
              isJpgSuccessful=true;
              EvercamPlayApplication.sendEventAnalytics(VideoActivity.this,R.string.category_streaming_jpg,R.string.action_streaming_jpg_success,R.string.label_streaming_jpg_success);
              StreamFeedbackItem successItem=new StreamFeedbackItem(VideoActivity.this,AppData.defaultUser.getUsername(),true);
              successItem.setCameraId(evercamCamera.getCameraId());
              successItem.setUrl(successUrl);
              successItem.setType(StreamFeedbackItem.TYPE_JPG);
              logger.info(successItem.toJson());
              successItem.sendToKeenIo(client);
            }
 else {
            }
          }
 else {
            if (enableLogs)             Log.i(TAG,""String_Node_Str"");
          }
        }
      }
 else {
        Log.d(TAG,""String_Node_Str"");
        if (successiveFailureCount > 10 && !isShowingFailureMessage) {
          Log.d(TAG,""String_Node_Str"");
          if (myStartImageTime >= latestStartImageTime) {
            Log.d(TAG,""String_Node_Str"");
            showMediaFailureDialog();
            browseJpgTask.cancel(true);
            EvercamPlayApplication.sendEventAnalytics(VideoActivity.this,R.string.category_streaming_jpg,R.string.action_streaming_jpg_failed,R.string.label_streaming_jpg_failed);
            StreamFeedbackItem failedItem=new StreamFeedbackItem(VideoActivity.this,AppData.defaultUser.getUsername(),false);
            failedItem.setCameraId(evercamCamera.getCameraId());
            failedItem.setUrl(evercamCamera.getExternalSnapshotUrl());
            failedItem.setType(StreamFeedbackItem.TYPE_JPG);
            logger.info(failedItem.toJson());
            failedItem.sendToKeenIo(client);
          }
        }
      }
    }
 else {
      Log.d(TAG,""String_Node_Str"");
    }
  }
 catch (  OutOfMemoryError e) {
    if (enableLogs)     Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
  }
catch (  Exception e) {
    if (enableLogs)     Log.e(TAG,e.toString());
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
  }
  startDownloading=true;
}",0.9792303976815327
34097,"private void setCameraForPlaying(EvercamCamera evercamCamera){
  try {
    VideoActivity.evercamCamera=evercamCamera;
    showImagesVideo=false;
    downloadStartCount=0;
    downloadEndCount=0;
    isProgressShowing=false;
    startDownloading=false;
    latestStartImageTime=0;
    successiveFailureCount=0;
    isShowingFailureMessage=false;
    optionsActivityStarted=false;
    mediaPlayerView.setVisibility(View.GONE);
    snapshotMenuView.setVisibility(View.GONE);
    paused=false;
    end=false;
    surfaceView.setVisibility(View.GONE);
    imageView.setVisibility(View.VISIBLE);
    showProgressView();
    loadImageFromCache(evercamCamera.getCameraId());
    if (!evercamCamera.isOffline()) {
      startDownloading=true;
    }
    showProgressView();
    mrlPlaying=evercamCamera.getExternalRtspUrl();
    mediaUrls=new ArrayList<>();
    mrlIndex=-1;
    if (mrlPlaying != null) {
      addUrlIfValid(mrlPlaying);
      mrlIndex=0;
      mrlPlaying=null;
    }
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    BugSenseHandler.sendException(e);
    EvercamPlayApplication.sendCaughtException(this,e);
    CustomedDialog.showUnexpectedErrorDialog(VideoActivity.this);
  }
}","private void setCameraForPlaying(EvercamCamera evercamCamera){
  try {
    VideoActivity.evercamCamera=evercamCamera;
    showImagesVideo=false;
    downloadStartCount=0;
    downloadEndCount=0;
    isProgressShowing=false;
    startDownloading=false;
    latestStartImageTime=0;
    successiveFailureCount=0;
    isShowingFailureMessage=false;
    optionsActivityStarted=false;
    mediaPlayerView.setVisibility(View.GONE);
    snapshotMenuView.setVisibility(View.GONE);
    paused=false;
    end=false;
    surfaceView.setVisibility(View.GONE);
    imageView.setVisibility(View.VISIBLE);
    showProgressView();
    loadImageFromCache(VideoActivity.evercamCamera.getCameraId());
    if (!evercamCamera.isOffline()) {
      startDownloading=true;
    }
    showProgressView();
    mrlPlaying=evercamCamera.getExternalRtspUrl();
    mediaUrls=new ArrayList<>();
    mrlIndex=-1;
    if (mrlPlaying != null) {
      addUrlIfValid(mrlPlaying);
      mrlIndex=0;
      mrlPlaying=null;
    }
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    BugSenseHandler.sendException(e);
    EvercamPlayApplication.sendCaughtException(this,e);
    CustomedDialog.showUnexpectedErrorDialog(VideoActivity.this);
  }
}",0.9944178628389154
34098,"private void setlayoutForLatestImageReceived(){
  if (cameraRelativeLayout.indexOfChild(loadingAnimation) >= 0) {
    loadingAnimation.setVisibility(View.GONE);
    cameraRelativeLayout.removeView(loadingAnimation);
  }
 else {
    greyImageShown();
    gradientLayout.showOfflineImage(true);
    offlineImage.setVisibility(View.INVISIBLE);
  }
  gradientLayout.removeGradientShadow();
  handler.removeCallbacks(LoadImageRunnable);
}","private void setlayoutForLatestImageReceived(){
  if (cameraRelativeLayout.indexOfChild(loadingAnimation) >= 0) {
    loadingAnimation.setVisibility(View.GONE);
    cameraRelativeLayout.removeView(loadingAnimation);
  }
  if (!evercamCamera.isActive()) {
    greyImageShown();
    gradientLayout.showOfflineImage(true);
    offlineImage.setVisibility(View.INVISIBLE);
  }
  gradientLayout.removeGradientShadow();
  handler.removeCallbacks(LoadImageRunnable);
}",0.9608062709966404
34099,"/** 
 * Add all camera views to the main grid page
 * @param reloadImages reload camera images or not
 * @param showThumbnails show thumbnails that returned by Evercam or not, if trueand if thumbnail not available, it will request latest snapshot instead. If false, it will request neither thumbnail nor latest snapshot.
 */
public boolean addAllCameraViews(final boolean reloadImages,final boolean showThumbnails){
  try {
    camerasPerRow=recalculateCameraPerRow();
    final CustomScrollView scrollView=(CustomScrollView)this.findViewById(R.id.cameras_scroll_view);
    io.evercam.androidapp.custom.FlowLayout camsLineView=(io.evercam.androidapp.custom.FlowLayout)this.findViewById(R.id.cameras_flow_layout);
    final Rect bounds=readLiveBoundsOfScrollView();
    int screen_width=readScreenWidth(this);
    int index=0;
    totalCamerasInGrid=0;
    for (    EvercamCamera evercamCamera : AppData.evercamCameraList) {
      final LinearLayout cameraListLayout=new LinearLayout(this);
      int indexPlus=index + 1;
      if (reloadImages)       evercamCamera.loadingStatus=ImageLoadingStatus.not_started;
      final CameraLayout cameraLayout=new CameraLayout(this,evercamCamera,showThumbnails);
      LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT,android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
      params.width=((indexPlus % camerasPerRow == 0) ? (screen_width - (index % camerasPerRow) * (screen_width / camerasPerRow)) : screen_width / camerasPerRow);
      params.width=params.width - 1;
      params.height=(int)(params.width / (1.25));
      params.setMargins(1,1,0,0);
      cameraLayout.setLayoutParams(params);
      cameraListLayout.addView(cameraLayout);
      camsLineView.addView(cameraListLayout,new io.evercam.androidapp.custom.FlowLayout.LayoutParams(0,0));
      index++;
      if (reloadImages) {
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            Rect cameraBounds=new Rect();
            cameraListLayout.getHitRect(cameraBounds);
            if (Rect.intersects(cameraBounds,bounds)) {
              cameraLayout.loadImage();
            }
          }
        }
,300);
      }
      totalCamerasInGrid++;
    }
    if (this.getActionBar() != null)     this.getActionBar().setHomeButtonEnabled(true);
    if (refresh != null)     refresh.setActionView(null);
    if (reloadImages) {
      setScrollStopListenerFor(scrollView);
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
    EvercamPlayApplication.sendEventAnalytics(this,R.string.category_error,R.string.action_error_camera_list,R.string.label_error_add_cameras);
    EvercamPlayApplication.sendCaughtException(this,e);
    CustomedDialog.showUnexpectedErrorDialog(CamerasActivity.this);
  }
  return false;
}","/** 
 * Add all camera views to the main grid page
 * @param reloadImages reload camera images or not
 * @param showThumbnails show thumbnails that returned by Evercam or not, if trueand if thumbnail not available, it will request latest snapshot instead. If false, it will request neither thumbnail nor latest snapshot.
 */
public boolean addAllCameraViews(final boolean reloadImages,final boolean showThumbnails){
  try {
    camerasPerRow=recalculateCameraPerRow();
    final CustomScrollView scrollView=(CustomScrollView)this.findViewById(R.id.cameras_scroll_view);
    io.evercam.androidapp.custom.FlowLayout camsLineView=(io.evercam.androidapp.custom.FlowLayout)this.findViewById(R.id.cameras_flow_layout);
    final Rect bounds=readLiveBoundsOfScrollView();
    int screen_width=readScreenWidth(this);
    int index=0;
    totalCamerasInGrid=0;
    Log.d(TAG,""String_Node_Str"" + AppData.evercamCameraList.size());
    for (    EvercamCamera evercamCamera : AppData.evercamCameraList) {
      final LinearLayout cameraListLayout=new LinearLayout(this);
      int indexPlus=index + 1;
      if (reloadImages)       evercamCamera.loadingStatus=ImageLoadingStatus.not_started;
      final CameraLayout cameraLayout=new CameraLayout(this,evercamCamera,showThumbnails);
      LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT,android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
      params.width=((indexPlus % camerasPerRow == 0) ? (screen_width - (index % camerasPerRow) * (screen_width / camerasPerRow)) : screen_width / camerasPerRow);
      params.width=params.width - 1;
      params.height=(int)(params.width / (1.25));
      params.setMargins(1,1,0,0);
      cameraLayout.setLayoutParams(params);
      cameraListLayout.addView(cameraLayout);
      camsLineView.addView(cameraListLayout,new io.evercam.androidapp.custom.FlowLayout.LayoutParams(0,0));
      index++;
      if (reloadImages) {
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            Rect cameraBounds=new Rect();
            cameraListLayout.getHitRect(cameraBounds);
            if (Rect.intersects(cameraBounds,bounds)) {
              cameraLayout.loadImage();
            }
          }
        }
,300);
      }
      totalCamerasInGrid++;
    }
    if (this.getActionBar() != null)     this.getActionBar().setHomeButtonEnabled(true);
    if (refresh != null)     refresh.setActionView(null);
    if (reloadImages) {
      setScrollStopListenerFor(scrollView);
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
    EvercamPlayApplication.sendEventAnalytics(this,R.string.category_error,R.string.action_error_camera_list,R.string.label_error_add_cameras);
    EvercamPlayApplication.sendCaughtException(this,e);
    CustomedDialog.showUnexpectedErrorDialog(CamerasActivity.this);
  }
  return false;
}",0.9883818824717966
34100,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Constants.isAppTrackingEnabled) {
    BugSenseHandler.initAndStartSession(this,Constants.bugsense_ApiKey);
  }
  EvercamPlayApplication.sendScreenAnalytics(this,getString(R.string.screen_camera_list));
  if (this.getActionBar() != null) {
    this.getActionBar().setHomeButtonEnabled(true);
    this.getActionBar().setDisplayShowTitleEnabled(false);
    this.getActionBar().setIcon(R.drawable.evercam_play_192x192);
  }
  setContentView(R.layout.camslayoutwithslide);
  activity=this;
  checkUser();
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      addAllCameraViews(false,false);
    }
  }
,500);
  new CamerasCheckInternetTask(CamerasActivity.this,InternetCheckType.START).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Constants.isAppTrackingEnabled) {
    BugSenseHandler.initAndStartSession(this,Constants.bugsense_ApiKey);
  }
  EvercamPlayApplication.sendScreenAnalytics(this,getString(R.string.screen_camera_list));
  if (this.getActionBar() != null) {
    this.getActionBar().setHomeButtonEnabled(true);
    this.getActionBar().setDisplayShowTitleEnabled(false);
    this.getActionBar().setIcon(R.drawable.evercam_play_192x192);
  }
  setContentView(R.layout.camslayoutwithslide);
  activity=this;
  checkUser();
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      io.evercam.androidapp.custom.FlowLayout camsLineView=(io.evercam.androidapp.custom.FlowLayout)CamerasActivity.this.findViewById(R.id.cameras_flow_layout);
      if (!(camsLineView.getChildCount() > 0)) {
        addAllCameraViews(false,false);
      }
    }
  }
,500);
  new CamerasCheckInternetTask(CamerasActivity.this,InternetCheckType.START).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.8870636550308009
34101,"public void updateTitleIfdifferent(){
  for (  EvercamCamera camera : AppData.evercamCameraList) {
    if (evercamCamera.getCameraId().equals(camera.getCameraId())) {
      titleText.setText(camera.getName());
    }
  }
}","public void updateTitleIfdifferent(){
  for (  EvercamCamera camera : AppData.evercamCameraList) {
    if (evercamCamera.getCameraId().equals(camera.getCameraId())) {
      gradientLayout.setTitle(camera.getName());
    }
  }
}",0.9151785714285714
34102,"public DeleteCameraTask(String cameraId,Activity activity){
  this.cameraId=cameraId;
  this.activity=activity;
}","public DeleteCameraTask(String cameraId,Activity activity,DeleteType type){
  this.cameraId=cameraId;
  this.activity=activity;
}",0.9338842975206612
34103,"@Override public boolean onOptionsItemSelected(MenuItem item){
  try {
switch (item.getItemId()) {
case R.id.video_menu_delete_camera:
      CustomedDialog.getConfirmRemoveDialog(VideoActivity.this,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface warningDialog,        int which){
          new DeleteCameraTask(evercamCamera.getCameraId(),VideoActivity.this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
        }
      }
,R.string.msg_confirm_remove_camera).show();
    return true;
case R.id.video_menu_view_camera:
  editStarted=true;
Intent viewIntent=new Intent(VideoActivity.this,ViewCameraActivity.class);
startActivityForResult(viewIntent,Constants.REQUEST_CODE_VIEW_CAMERA);
return true;
case R.id.video_menu_edit_camera:
editStarted=true;
Intent editIntent=new Intent(VideoActivity.this,AddEditCameraActivity.class);
editIntent.putExtra(Constants.KEY_IS_EDIT,true);
startActivityForResult(editIntent,Constants.REQUEST_CODE_PATCH_CAMERA);
return true;
case android.R.id.home:
this.finish();
return true;
default :
return true;
}
}
 catch (OutOfMemoryError e) {
Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
return true;
}
catch (Exception e) {
Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
if (Constants.isAppTrackingEnabled) {
BugSenseHandler.sendException(e);
}
return true;
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  try {
switch (item.getItemId()) {
case R.id.video_menu_delete_camera:
      CustomedDialog.getConfirmRemoveDialog(VideoActivity.this,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface warningDialog,        int which){
          new DeleteCameraTask(evercamCamera.getCameraId(),VideoActivity.this,DeleteType.DELETE_OWNED).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
        }
      }
,R.string.msg_confirm_remove_camera).show();
    return true;
case R.id.video_menu_view_camera:
  editStarted=true;
Intent viewIntent=new Intent(VideoActivity.this,ViewCameraActivity.class);
startActivityForResult(viewIntent,Constants.REQUEST_CODE_VIEW_CAMERA);
return true;
case R.id.video_menu_edit_camera:
editStarted=true;
Intent editIntent=new Intent(VideoActivity.this,AddEditCameraActivity.class);
editIntent.putExtra(Constants.KEY_IS_EDIT,true);
startActivityForResult(editIntent,Constants.REQUEST_CODE_PATCH_CAMERA);
return true;
case android.R.id.home:
this.finish();
return true;
default :
return true;
}
}
 catch (OutOfMemoryError e) {
Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
return true;
}
catch (Exception e) {
Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
if (Constants.isAppTrackingEnabled) {
BugSenseHandler.sendException(e);
}
return true;
}
}",0.9915254237288136
34104,"/** 
 * Read and validate user input for edit camera.
 */
private PatchCameraBuilder buildPatchCameraWithLocalCheck(){
  PatchCameraBuilder patchCameraBuilder=null;
  try {
    patchCameraBuilder=new PatchCameraBuilder(cameraEdit.getCameraId());
  }
 catch (  EvercamException e) {
    Log.e(TAG,e.toString());
  }
  String cameraName=cameraNameEdit.getText().toString();
  if (cameraName.isEmpty()) {
    CustomToast.showInCenter(this,getString(R.string.name_required));
    return null;
  }
 else   if (!cameraName.equals(cameraEdit.getName())) {
    patchCameraBuilder.setName(cameraName);
  }
  String vendorId=getVendorIdFromSpinner();
  patchCameraBuilder.setVendor(vendorId);
  String modelName=getModelNameFromSpinner();
  patchCameraBuilder.setModel(modelName);
  String username=usernameEdit.getText().toString();
  String password=passwordEdit.getText().toString();
  if (!username.equals(cameraEdit.getUsername()) || !password.equals(cameraEdit.getPassword())) {
    patchCameraBuilder.setCameraUsername(username);
    patchCameraBuilder.setCameraPassword(password);
  }
  String externalHost=externalHostEdit.getText().toString();
  String internalHost=internalHostEdit.getText().toString();
  if (externalHost.isEmpty() && internalHost.isEmpty()) {
    CustomToast.showInCenter(this,getString(R.string.host_required));
    return null;
  }
 else {
    patchCameraBuilder.setInternalHost(internalHost);
    String internalHttp=internalHttpEdit.getText().toString();
    if (!internalHttp.isEmpty()) {
      int internalHttpInt=Integer.valueOf(internalHttp);
      patchCameraBuilder.setInternalHttpPort(internalHttpInt);
    }
    String internalRtsp=internalRtspEdit.getText().toString();
    if (!internalRtsp.isEmpty()) {
      int internalRtspInt=Integer.valueOf(internalRtsp);
      patchCameraBuilder.setInternalRtspPort(internalRtspInt);
    }
    patchCameraBuilder.setExternalHost(externalHost);
    String externalHttp=externalHttpEdit.getText().toString();
    if (!externalHttp.isEmpty()) {
      int externalHttpInt=Integer.valueOf(externalHttp);
      patchCameraBuilder.setExternalHttpPort(externalHttpInt);
    }
    String externalRtsp=externalRtspEdit.getText().toString();
    if (!externalRtsp.isEmpty()) {
      int externalRtspInt=Integer.valueOf(externalRtsp);
      patchCameraBuilder.setExternalRtspPort(externalRtspInt);
    }
  }
  String jpgUrl=buildJpgUrlWithSlash(jpgUrlEdit.getText().toString());
  if (jpgUrl.equals(cameraEdit.getJpgPath())) {
    patchCameraBuilder.setJpgUrl(jpgUrl);
  }
  return patchCameraBuilder;
}","/** 
 * Read and validate user input for edit camera.
 */
private PatchCameraBuilder buildPatchCameraWithLocalCheck(){
  PatchCameraBuilder patchCameraBuilder=null;
  try {
    patchCameraBuilder=new PatchCameraBuilder(cameraEdit.getCameraId());
  }
 catch (  EvercamException e) {
    Log.e(TAG,e.toString());
  }
  String cameraName=cameraNameEdit.getText().toString();
  if (cameraName.isEmpty()) {
    CustomToast.showInCenter(this,getString(R.string.name_required));
    return null;
  }
 else   if (!cameraName.equals(cameraEdit.getName())) {
    patchCameraBuilder.setName(cameraName);
  }
  String vendorId=getVendorIdFromSpinner();
  patchCameraBuilder.setVendor(vendorId);
  String modelName=getModelIdFromSpinner();
  patchCameraBuilder.setModel(modelName);
  String username=usernameEdit.getText().toString();
  String password=passwordEdit.getText().toString();
  if (!username.equals(cameraEdit.getUsername()) || !password.equals(cameraEdit.getPassword())) {
    patchCameraBuilder.setCameraUsername(username);
    patchCameraBuilder.setCameraPassword(password);
  }
  String externalHost=externalHostEdit.getText().toString();
  String internalHost=internalHostEdit.getText().toString();
  if (externalHost.isEmpty() && internalHost.isEmpty()) {
    CustomToast.showInCenter(this,getString(R.string.host_required));
    return null;
  }
 else {
    patchCameraBuilder.setInternalHost(internalHost);
    String internalHttp=internalHttpEdit.getText().toString();
    if (!internalHttp.isEmpty()) {
      int internalHttpInt=Integer.valueOf(internalHttp);
      patchCameraBuilder.setInternalHttpPort(internalHttpInt);
    }
    String internalRtsp=internalRtspEdit.getText().toString();
    if (!internalRtsp.isEmpty()) {
      int internalRtspInt=Integer.valueOf(internalRtsp);
      patchCameraBuilder.setInternalRtspPort(internalRtspInt);
    }
    patchCameraBuilder.setExternalHost(externalHost);
    String externalHttp=externalHttpEdit.getText().toString();
    if (!externalHttp.isEmpty()) {
      int externalHttpInt=Integer.valueOf(externalHttp);
      patchCameraBuilder.setExternalHttpPort(externalHttpInt);
    }
    String externalRtsp=externalRtspEdit.getText().toString();
    if (!externalRtsp.isEmpty()) {
      int externalRtspInt=Integer.valueOf(externalRtsp);
      patchCameraBuilder.setExternalRtspPort(externalRtspInt);
    }
  }
  String jpgUrl=buildJpgUrlWithSlash(jpgUrlEdit.getText().toString());
  if (jpgUrl.equals(cameraEdit.getJpgPath())) {
    patchCameraBuilder.setJpgUrl(jpgUrl);
  }
  return patchCameraBuilder;
}",0.998829953198128
34105,"private EvercamCamera createCamera(CameraDetail detail){
  try {
    Camera.create(detail);
    Camera camera=Camera.getById(detail.getId(),false);
    EvercamCamera evercamCamera=new EvercamCamera().convertFromEvercam(camera);
    if (isReachableExternally || isReachableInternally) {
      evercamCamera.setStatus(CameraStatus.ACTIVE);
    }
    DbCamera dbCamera=new DbCamera(activity);
    dbCamera.addCamera(evercamCamera);
    AppData.evercamCameraList.add(evercamCamera);
    return evercamCamera;
  }
 catch (  EvercamException e) {
    errorMessage=e.getMessage();
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
    return null;
  }
}","private EvercamCamera createCamera(CameraDetail detail){
  try {
    Camera camera=Camera.create(detail);
    EvercamCamera evercamCamera=new EvercamCamera().convertFromEvercam(camera);
    if (isReachableExternally || isReachableInternally) {
      evercamCamera.setStatus(CameraStatus.ACTIVE);
    }
    DbCamera dbCamera=new DbCamera(activity);
    dbCamera.addCamera(evercamCamera);
    AppData.evercamCameraList.add(evercamCamera);
    return evercamCamera;
  }
 catch (  EvercamException e) {
    errorMessage=e.getMessage();
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
    return null;
  }
}",0.9456869009584664
34106,"private EvercamCamera patchCamera(CameraDetail detail){
  try {
    Camera patchedCamera=Camera.patch(detail);
    if (patchedCamera != null) {
      Camera camera=Camera.getById(detail.getId(),false);
      EvercamCamera evercamCamera=new EvercamCamera().convertFromEvercam(camera);
      DbCamera dbCamera=new DbCamera(activity);
      dbCamera.deleteCamera(evercamCamera.getCameraId());
      for (int index=0; index < AppData.evercamCameraList.size(); index++) {
        if (AppData.evercamCameraList.get(index).getCameraId().equals(camera.getId())) {
          AppData.evercamCameraList.remove(index);
        }
      }
      dbCamera.addCamera(evercamCamera);
      AppData.evercamCameraList.add(evercamCamera);
      return evercamCamera;
    }
 else {
      Log.e(TAG,""String_Node_Str"");
      return null;
    }
  }
 catch (  EvercamException e) {
    errorMessage=e.getMessage();
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
    return null;
  }
}","private EvercamCamera patchCamera(CameraDetail detail){
  try {
    Camera patchedCamera=Camera.patch(detail);
    if (patchedCamera != null) {
      Camera camera=patchedCamera;
      EvercamCamera evercamCamera=new EvercamCamera().convertFromEvercam(camera);
      DbCamera dbCamera=new DbCamera(activity);
      dbCamera.deleteCamera(evercamCamera.getCameraId());
      for (int index=0; index < AppData.evercamCameraList.size(); index++) {
        if (AppData.evercamCameraList.get(index).getCameraId().equals(camera.getId())) {
          AppData.evercamCameraList.remove(index);
        }
      }
      dbCamera.addCamera(evercamCamera);
      AppData.evercamCameraList.add(evercamCamera);
      return evercamCamera;
    }
 else {
      Log.e(TAG,""String_Node_Str"");
      return null;
    }
  }
 catch (  EvercamException e) {
    errorMessage=e.getMessage();
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
    return null;
  }
}",0.974251182343668
34107,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menurefresh:
    EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_refresh,R.string.label_list_refresh);
  if (refresh != null)   refresh.setActionView(R.layout.actionbar_indeterminate_progress);
startCameraLoadingTask();
return true;
case R.id.menu_add_camera:
showAddCameraOptionsDialog();
return true;
case R.id.menu_settings:
EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_settings,R.string.label_settings);
startActivity(new Intent(CamerasActivity.this,CameraPrefsActivity.class));
return true;
case R.id.menu_manage_accounts:
EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_manage_account,R.string.label_account);
startActivityForResult(new Intent(CamerasActivity.this,ManageAccountsActivity.class),Constants.REQUEST_CODE_MANAGE_ACCOUNT);
stopImageLoading=true;
return true;
case R.id.menu_about:
EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_about,R.string.label_about);
startActivity(new Intent(CamerasActivity.this,AboutDialog.class));
return true;
case R.id.menu_logout:
showSignOutDialog();
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menurefresh:
    EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_refresh,R.string.label_list_refresh);
  if (refresh != null)   refresh.setActionView(R.layout.actionbar_indeterminate_progress);
startCameraLoadingTask();
return true;
case R.id.menu_add_camera:
showAddCameraOptionsDialog();
return true;
case R.id.menu_settings:
EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_settings,R.string.label_settings);
startActivity(new Intent(CamerasActivity.this,CameraPrefsActivity.class));
return true;
case R.id.menu_manage_accounts:
EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_manage_account,R.string.label_account);
startActivityForResult(new Intent(CamerasActivity.this,ManageAccountsActivity.class),Constants.REQUEST_CODE_MANAGE_ACCOUNT);
return true;
case R.id.menu_about:
EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_about,R.string.label_about);
startActivity(new Intent(CamerasActivity.this,AboutDialog.class));
return true;
case R.id.menu_logout:
showSignOutDialog();
return true;
default :
return super.onOptionsItemSelected(item);
}
}",0.9912380952380953
34108,"private void startLoadingCameras(){
  stopImageLoading=false;
  reloadProgressDialog=new CustomProgressDialog(this);
  if (reloadCameraList) {
    reloadProgressDialog.show(getString(R.string.loading_cameras));
  }
  startCameraLoadingTask();
}","private void startLoadingCameras(){
  reloadProgressDialog=new CustomProgressDialog(this);
  if (reloadCameraList) {
    reloadProgressDialog.show(getString(R.string.loading_cameras));
  }
  startCameraLoadingTask();
}",0.9437229437229436
34109,"/** 
 * Return bounds with bottom value + 300 in order to load more cameras
 */
private Rect readLiveBoundsOfScrollView(){
  Rect scrollViewBounds=new Rect();
  CustomScrollView scrollView=(CustomScrollView)CamerasActivity.this.findViewById(R.id.cameras_scroll_view);
  scrollView.getDrawingRect(scrollViewBounds);
  Log.d(TAG,scrollViewBounds.top + ""String_Node_Str"" + scrollViewBounds.bottom+ ""String_Node_Str""+ scrollViewBounds.left+ ""String_Node_Str""+ scrollViewBounds.right);
  Rect rectWithExtension=new Rect(scrollViewBounds.left,scrollViewBounds.top,scrollViewBounds.right,scrollViewBounds.bottom + 300);
  Log.d(TAG,""String_Node_Str"" + rectWithExtension.top + ""String_Node_Str""+ rectWithExtension.bottom+ ""String_Node_Str""+ rectWithExtension.left+ ""String_Node_Str""+ rectWithExtension.right);
  return rectWithExtension;
}","private Rect readLiveBoundsOfScrollView(){
  CustomScrollView scrollView=(CustomScrollView)CamerasActivity.this.findViewById(R.id.cameras_scroll_view);
  return scrollView.getLiveBoundsRect();
}",0.3609756097560975
34110,"@Override public void run(){
  try {
    if (end)     return;
    if (CamerasActivity.stopImageLoading) {
      return;
    }
    if (evercamCamera.loadingStatus == ImageLoadingStatus.not_started) {
      liveImageTask=new DownloadLiveImageTask();
      liveImageTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.live_received) {
      setlayoutForLiveImageReceived();
      return;
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.live_not_received) {
      latestTask=new DownloadLatestTask(evercamCamera.getCameraId(),CameraLayout.this);
      latestTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
      setlayoutForNoImageReceived();
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.camba_image_received) {
      setlayoutForLatestImageReceived();
      return;
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.camba_not_received) {
      setlayoutForNoImageReceived();
    }
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    handler.postDelayed(LoadImageRunnable,5000);
    return;
  }
catch (  Exception e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    if (!end) {
      handler.postDelayed(LoadImageRunnable,5000);
    }
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
  }
}","@Override public void run(){
  try {
    if (end)     return;
    if (evercamCamera.loadingStatus == ImageLoadingStatus.not_started) {
      liveImageTask=new DownloadLiveImageTask();
      liveImageTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.live_received) {
      setlayoutForLiveImageReceived();
      return;
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.live_not_received) {
      latestTask=new DownloadLatestTask(evercamCamera.getCameraId(),CameraLayout.this);
      latestTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
      setlayoutForNoImageReceived();
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.camba_image_received) {
      setlayoutForLatestImageReceived();
      return;
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.camba_not_received) {
      setlayoutForNoImageReceived();
    }
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    handler.postDelayed(LoadImageRunnable,5000);
    return;
  }
catch (  Exception e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    if (!end) {
      handler.postDelayed(LoadImageRunnable,5000);
    }
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
  }
}",0.9778085991678224
34111,"public void loadImage(){
  isImageLoadedFromCache=loadImageFromCache();
  if (!end) {
    handler.postDelayed(LoadImageRunnable,0);
  }
}","public void loadImage(){
  if (!end) {
    handler.postDelayed(LoadImageRunnable,0);
  }
}",0.7929515418502202
34112,"@Override protected Drawable doInBackground(Void... params){
  if (CamerasActivity.stopImageLoading) {
    this.cancel(true);
  }
  try {
    ArrayList<Cookie> cookies=new ArrayList<Cookie>();
    Drawable drawable=null;
    String externalJpgUrl=evercamCamera.getExternalSnapshotUrl();
    String internalJpgUrl=null;
    if (evercamCamera.hasCredentials()) {
      if (!evercamCamera.getExternalHost().isEmpty()) {
        if (evercamCamera.getStatus().equals(CameraStatus.ACTIVE)) {
          drawable=Commons.getDrawablefromUrlAuthenticated(externalJpgUrl,evercamCamera.getUsername(),evercamCamera.getPassword(),cookies,3000);
        }
        if (drawable == null) {
          if (!evercamCamera.getInternalHost().isEmpty()) {
            internalJpgUrl=evercamCamera.getInternalSnapshotUrl();
            drawable=Commons.getDrawablefromUrlAuthenticated(internalJpgUrl,evercamCamera.getUsername(),evercamCamera.getPassword(),cookies,3000);
          }
        }
      }
 else {
        drawable=Commons.getDrawablefromUrlAuthenticated(internalJpgUrl,evercamCamera.getUsername(),evercamCamera.getPassword(),cookies,3000);
      }
    }
 else {
      if (evercamCamera.camera != null) {
        if (evercamCamera.camera.isOnline()) {
          InputStream stream=evercamCamera.camera.getSnapshotFromEvercam();
          drawable=Drawable.createFromStream(stream,""String_Node_Str"");
        }
      }
 else {
        Log.e(TAG,""String_Node_Str"");
      }
    }
    if (cookies.size() > 0) {
      evercamCamera.cookies=cookies;
    }
    return drawable;
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    return null;
  }
catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
  }
  return null;
}","@Override protected Drawable doInBackground(Void... params){
  try {
    ArrayList<Cookie> cookies=new ArrayList<Cookie>();
    Drawable drawable=null;
    String externalJpgUrl=evercamCamera.getExternalSnapshotUrl();
    String internalJpgUrl=null;
    if (evercamCamera.hasCredentials()) {
      if (!evercamCamera.getExternalHost().isEmpty()) {
        if (evercamCamera.getStatus().equals(CameraStatus.ACTIVE)) {
          drawable=Commons.getDrawablefromUrlAuthenticated(externalJpgUrl,evercamCamera.getUsername(),evercamCamera.getPassword(),cookies,3000);
        }
        if (drawable == null) {
          if (!evercamCamera.getInternalHost().isEmpty()) {
            internalJpgUrl=evercamCamera.getInternalSnapshotUrl();
            drawable=Commons.getDrawablefromUrlAuthenticated(internalJpgUrl,evercamCamera.getUsername(),evercamCamera.getPassword(),cookies,3000);
          }
        }
      }
 else {
        drawable=Commons.getDrawablefromUrlAuthenticated(internalJpgUrl,evercamCamera.getUsername(),evercamCamera.getPassword(),cookies,3000);
      }
    }
 else {
      if (evercamCamera.camera != null) {
        if (evercamCamera.camera.isOnline()) {
          InputStream stream=evercamCamera.camera.getSnapshotFromEvercam();
          drawable=Drawable.createFromStream(stream,""String_Node_Str"");
        }
      }
 else {
        Log.e(TAG,""String_Node_Str"");
      }
    }
    if (cookies.size() > 0) {
      evercamCamera.cookies=cookies;
    }
    return drawable;
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    return null;
  }
catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
  }
  return null;
}",0.9803362781419208
34113,"private void showThumbnail(){
  Drawable thumbnail=getThumbnailFromCamera(evercamCamera);
  if (thumbnail != null) {
    loadingAnimation.setVisibility(View.GONE);
    cameraRelativeLayout.removeView(loadingAnimation);
    cameraRelativeLayout.setBackgroundDrawable(thumbnail);
  }
}","private boolean showThumbnail(){
  Drawable thumbnail=getThumbnailFromCamera(evercamCamera);
  if (thumbnail != null) {
    loadingAnimation.setVisibility(View.GONE);
    cameraRelativeLayout.removeView(loadingAnimation);
    cameraRelativeLayout.setBackgroundDrawable(thumbnail);
    return true;
  }
  return false;
}",0.9269102990033222
34114,"public CustomScrollView(Context context,AttributeSet attrs){
  super(context,attrs);
  scrollerTask=new Runnable(){
    public void run(){
      int newPosition=getScrollY();
      if (initialPosition - newPosition == 0) {
        if (onScrollStoppedListener != null) {
          onScrollStoppedListener.onScrollStopped();
        }
      }
 else {
        initialPosition=getScrollY();
        CustomScrollView.this.postDelayed(scrollerTask,newCheck);
      }
    }
  }
;
}","public CustomScrollView(Context context,AttributeSet attrs){
  super(context,attrs);
  scrollerTask=new Runnable(){
    public void run(){
      int newPosition=getScrollY();
      if (initialPosition - newPosition == 0) {
        if (onScrollStoppedListener != null) {
          onScrollStoppedListener.onScrollStopped();
        }
      }
 else {
        initialPosition=getScrollY();
        CustomScrollView.this.postDelayed(scrollerTask,100);
      }
    }
  }
;
}",0.9374337221633086
34115,"public void run(){
  int newPosition=getScrollY();
  if (initialPosition - newPosition == 0) {
    if (onScrollStoppedListener != null) {
      onScrollStoppedListener.onScrollStopped();
    }
  }
 else {
    initialPosition=getScrollY();
    CustomScrollView.this.postDelayed(scrollerTask,newCheck);
  }
}","public void run(){
  int newPosition=getScrollY();
  if (initialPosition - newPosition == 0) {
    if (onScrollStoppedListener != null) {
      onScrollStoppedListener.onScrollStopped();
    }
  }
 else {
    initialPosition=getScrollY();
    CustomScrollView.this.postDelayed(scrollerTask,100);
  }
}",0.9818780889621088
34116,"public void startScrollerTask(){
  initialPosition=getScrollY();
  CustomScrollView.this.postDelayed(scrollerTask,newCheck);
}","public void startScrollerTask(){
  initialPosition=getScrollY();
  CustomScrollView.this.postDelayed(scrollerTask,100);
}",0.9554655870445344
34117,"public MyPreferenceFragment(){
  super();
}","public MyPreferenceFragment(){
}",0.8533333333333334
34118,"public boolean addAllCameraViews(boolean reloadImages){
  try {
    SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
    camerasPerRow=PrefsManager.getCameraPerRow(sharedPrefs,camerasPerRow);
    io.evercam.androidapp.custom.FlowLayout camsLineView=(io.evercam.androidapp.custom.FlowLayout)this.findViewById(R.id.camsLV);
    int screen_width=readScreenWidth(this);
    int index=0;
    totalCamerasInGrid=0;
    for (    EvercamCamera evercamCamera : AppData.evercamCameraList) {
      LinearLayout cameraListLayout=new LinearLayout(this);
      int indexPlus=index + 1;
      if (reloadImages)       evercamCamera.loadingStatus=ImageLoadingStatus.not_started;
      CameraLayout cameraLayout=new CameraLayout(this,evercamCamera);
      LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT,android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
      params.width=((indexPlus % camerasPerRow == 0) ? (screen_width - (index % camerasPerRow) * (screen_width / camerasPerRow)) : screen_width / camerasPerRow);
      params.height=(int)(params.width / (1.25));
      cameraLayout.setLayoutParams(params);
      cameraListLayout.addView(cameraLayout);
      camsLineView.addView(cameraListLayout,new io.evercam.androidapp.custom.FlowLayout.LayoutParams(0,0));
      index++;
      totalCamerasInGrid++;
    }
    if (this.getActionBar() != null)     this.getActionBar().setHomeButtonEnabled(true);
    if (refresh != null)     refresh.setActionView(null);
    return true;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
    EvercamPlayApplication.sendEventAnalytics(this,R.string.category_error,R.string.action_error_camera_list,R.string.label_error_add_cameras);
    EvercamPlayApplication.sendCaughtException(this,e);
    CustomedDialog.showUnexpectedErrorDialog(CamerasActivity.this);
  }
  return false;
}","public boolean addAllCameraViews(boolean reloadImages){
  try {
    camerasPerRow=recalculateCameraPerRow();
    io.evercam.androidapp.custom.FlowLayout camsLineView=(io.evercam.androidapp.custom.FlowLayout)this.findViewById(R.id.camsLV);
    int screen_width=readScreenWidth(this);
    int index=0;
    totalCamerasInGrid=0;
    for (    EvercamCamera evercamCamera : AppData.evercamCameraList) {
      LinearLayout cameraListLayout=new LinearLayout(this);
      int indexPlus=index + 1;
      if (reloadImages)       evercamCamera.loadingStatus=ImageLoadingStatus.not_started;
      CameraLayout cameraLayout=new CameraLayout(this,evercamCamera);
      LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT,android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
      params.width=((indexPlus % camerasPerRow == 0) ? (screen_width - (index % camerasPerRow) * (screen_width / camerasPerRow)) : screen_width / camerasPerRow);
      params.height=(int)(params.width / (1.25));
      cameraLayout.setLayoutParams(params);
      cameraListLayout.addView(cameraLayout);
      camsLineView.addView(cameraListLayout,new io.evercam.androidapp.custom.FlowLayout.LayoutParams(0,0));
      index++;
      totalCamerasInGrid++;
    }
    if (this.getActionBar() != null)     this.getActionBar().setHomeButtonEnabled(true);
    if (refresh != null)     refresh.setActionView(null);
    return true;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
    EvercamPlayApplication.sendEventAnalytics(this,R.string.category_error,R.string.action_error_camera_list,R.string.label_error_add_cameras);
    EvercamPlayApplication.sendCaughtException(this,e);
    CustomedDialog.showUnexpectedErrorDialog(CamerasActivity.this);
  }
  return false;
}",0.9537825974696618
34119,"@Override protected void onPostExecute(Boolean hasNetwork){
  if (hasNetwork) {
    if (type == InternetCheckType.START) {
      startLoadingCameras();
    }
 else     if (type == InternetCheckType.RESTART) {
      if (reloadCameraList) {
        removeAllCameraViews();
        startLoadingCameras();
        reloadCameraList=false;
      }
 else {
        int camsOldValue=camerasPerRow;
        SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(CamerasActivity.this);
        camerasPerRow=PrefsManager.getCameraPerRow(sharedPrefs,2);
        if (camsOldValue != camerasPerRow) {
          removeAllCameraViews();
          addAllCameraViews(false);
        }
      }
    }
  }
 else {
    CustomedDialog.showInternetNotConnectDialog(CamerasActivity.this);
  }
}","@Override protected void onPostExecute(Boolean hasNetwork){
  if (hasNetwork) {
    if (type == InternetCheckType.START) {
      startLoadingCameras();
    }
 else     if (type == InternetCheckType.RESTART) {
      if (reloadCameraList) {
        removeAllCameraViews();
        startLoadingCameras();
        reloadCameraList=false;
      }
 else {
        int camsOldValue=camerasPerRow;
        camerasPerRow=recalculateCameraPerRow();
        if (camsOldValue != camerasPerRow) {
          removeAllCameraViews();
          addAllCameraViews(false);
        }
      }
    }
  }
 else {
    CustomedDialog.showInternetNotConnectDialog(CamerasActivity.this);
  }
}",0.5847632120796157
34120,"boolean resizeCameras(){
  try {
    int screen_width=readScreenWidth(this);
    io.evercam.androidapp.custom.FlowLayout camsLineView=(io.evercam.androidapp.custom.FlowLayout)this.findViewById(R.id.camsLV);
    for (int i=0; i < camsLineView.getChildCount(); i++) {
      LinearLayout pview=(LinearLayout)camsLineView.getChildAt(i);
      CameraLayout cameraLayout=(CameraLayout)pview.getChildAt(0);
      LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT,android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
      params.width=((i + 1 % camerasPerRow == 0) ? (screen_width - (i % camerasPerRow) * (screen_width / camerasPerRow)) : screen_width / camerasPerRow);
      params.height=(int)(params.width / (1.25));
      cameraLayout.setLayoutParams(params);
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
    EvercamPlayApplication.sendEventAnalytics(this,R.string.category_error,R.string.action_error_camera_list,R.string.label_error_resize);
    EvercamPlayApplication.sendCaughtException(this,e);
    CustomedDialog.showUnexpectedErrorDialog(CamerasActivity.this);
  }
  return false;
}","boolean resizeCameras(){
  try {
    int screen_width=readScreenWidth(this);
    camerasPerRow=recalculateCameraPerRow();
    io.evercam.androidapp.custom.FlowLayout camsLineView=(io.evercam.androidapp.custom.FlowLayout)this.findViewById(R.id.camsLV);
    for (int i=0; i < camsLineView.getChildCount(); i++) {
      LinearLayout pview=(LinearLayout)camsLineView.getChildAt(i);
      CameraLayout cameraLayout=(CameraLayout)pview.getChildAt(0);
      LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT,android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
      params.width=((i + 1 % camerasPerRow == 0) ? (screen_width - (i % camerasPerRow) * (screen_width / camerasPerRow)) : screen_width / camerasPerRow);
      params.height=(int)(params.width / (1.25));
      cameraLayout.setLayoutParams(params);
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
    EvercamPlayApplication.sendEventAnalytics(this,R.string.category_error,R.string.action_error_camera_list,R.string.label_error_resize);
    EvercamPlayApplication.sendCaughtException(this,e);
    CustomedDialog.showUnexpectedErrorDialog(CamerasActivity.this);
  }
  return false;
}",0.983227730152814
34121,"@Override public void onConfigurationChanged(Configuration newConfig){
  try {
    super.onConfigurationChanged(newConfig);
    resizeCameras();
  }
 catch (  Exception e) {
    if (Constants.isAppTrackingEnabled)     BugSenseHandler.sendException(e);
  }
}","@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  resizeCameras();
}",0.6854219948849105
34122,"public static int getCameraPerRow(SharedPreferences sharedPrefs,int oldNumber){
  return Integer.parseInt(sharedPrefs.getString(KEY_CAMERA_PER_ROW,""String_Node_Str"" + oldNumber));
}","public static int getCameraPerRow(Context context,int oldNumber){
  SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(context);
  return Integer.parseInt(sharedPrefs.getString(KEY_CAMERA_PER_ROW,""String_Node_Str"" + oldNumber));
}",0.6972477064220184
34123,"@Override protected void onPostExecute(Boolean hasNetwork){
  if (hasNetwork) {
    if (type == InternetCheckType.START) {
      startLoadingCameras();
    }
 else     if (type == InternetCheckType.RESTART) {
      int camsOldValue=camerasPerRow;
      SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(CamerasActivity.this);
      camerasPerRow=PrefsManager.getCameraPerRow(sharedPrefs,2);
      if (camsOldValue != camerasPerRow) {
        removeAllCameraViews();
        addAllCameraViews(false);
      }
    }
  }
 else {
    CustomedDialog.showInternetNotConnectDialog(CamerasActivity.this);
  }
}","@Override protected void onPostExecute(Boolean hasNetwork){
  if (hasNetwork) {
    if (type == InternetCheckType.START) {
      startLoadingCameras();
    }
 else     if (type == InternetCheckType.RESTART) {
      if (reloadCameraList) {
        removeAllCameraViews();
        startLoadingCameras();
        reloadCameraList=false;
      }
 else {
        int camsOldValue=camerasPerRow;
        SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(CamerasActivity.this);
        camerasPerRow=PrefsManager.getCameraPerRow(sharedPrefs,2);
        if (camsOldValue != camerasPerRow) {
          removeAllCameraViews();
          addAllCameraViews(false);
        }
      }
    }
  }
 else {
    CustomedDialog.showInternetNotConnectDialog(CamerasActivity.this);
  }
}",0.8851303735024665
34124,"@Override public void onRestart(){
  super.onRestart();
  if (reloadCameraList) {
    removeAllCameraViews();
    startLoadingCameras();
    reloadCameraList=false;
  }
 else {
    try {
      new CamerasCheckInternetTask(CamerasActivity.this,InternetCheckType.RESTART).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    }
 catch (    RejectedExecutionException e) {
      EvercamPlayApplication.sendCaughtExceptionNotImportant(activity,e);
    }
  }
}","@Override public void onRestart(){
  super.onRestart();
  try {
    new CamerasCheckInternetTask(CamerasActivity.this,InternetCheckType.RESTART).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
 catch (  RejectedExecutionException e) {
    EvercamPlayApplication.sendCaughtExceptionNotImportant(activity,e);
  }
}",0.8154838709677419
34125,"private void logOutUser(){
  try {
    SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
    PrefsManager.removeUserEmail(sharedPrefs);
    DbAppUser dbUser=new DbAppUser(this);
    dbUser.deleteAppUserByEmail(AppData.defaultUser.getEmail());
    AppData.defaultUser=null;
    AppData.appUsers.clear();
    AppData.evercamCameraList.clear();
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  startActivity(new Intent(this,MainActivity.class));
}","private void logOutUser(){
  try {
    SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
    PrefsManager.removeUserEmail(sharedPrefs);
    DbAppUser dbUser=new DbAppUser(this);
    dbUser.deleteAppUserByEmail(AppData.defaultUser.getEmail());
    AppData.defaultUser=null;
    AppData.appUsers.clear();
    AppData.evercamCameraList.clear();
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  finish();
  startActivity(new Intent(this,SlideActivity.class));
}",0.9797492767598844
34126,"@Override protected void onPostExecute(Boolean hasNetwork){
  if (hasNetwork) {
    if (isUserLogged()) {
      startCamerasActivity();
    }
 else {
      Intent slideIntent=new Intent(MainActivity.this,SlideActivity.class);
      startActivity(slideIntent);
    }
  }
 else {
    CustomedDialog.showInternetNotConnectDialog(MainActivity.this);
  }
}","@Override protected void onPostExecute(Boolean hasNetwork){
  if (hasNetwork) {
    if (isUserLogged()) {
      finish();
      startCamerasActivity();
    }
 else {
      finish();
      Intent slideIntent=new Intent(MainActivity.this,SlideActivity.class);
      startActivity(slideIntent);
    }
  }
 else {
    CustomedDialog.showInternetNotConnectDialog(MainActivity.this);
  }
}",0.9564032697547684
34127,"private void logOutUser(){
  try {
    SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
    PrefsManager.removeUserEmail(sharedPrefs);
    AppData.defaultUser=null;
    AppData.appUsers.clear();
    AppData.evercamCameraList.clear();
    DbAppUser dbUser=new DbAppUser(this);
    List<AppUser> list=dbUser.getAllAppUsers(10000);
    if (list != null && list.size() > 0) {
      for (      AppUser user : list) {
        dbUser.deleteAppUserByEmail(user.getEmail());
      }
    }
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  startActivity(new Intent(this,MainActivity.class));
}","private void logOutUser(){
  try {
    SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
    PrefsManager.removeUserEmail(sharedPrefs);
    DbAppUser dbUser=new DbAppUser(this);
    dbUser.deleteAppUserByEmail(AppData.defaultUser.getEmail());
    AppData.defaultUser=null;
    AppData.appUsers.clear();
    AppData.evercamCameraList.clear();
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  startActivity(new Intent(this,MainActivity.class));
}",0.6552020636285468
34128,"@Override public boolean onOptionsItemSelected(MenuItem item){
  try {
switch (item.getItemId()) {
case R.id.menurefresh:
      EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_refresh,R.string.label_list_refresh);
    if (refresh != null)     refresh.setActionView(R.layout.actionbar_indeterminate_progress);
  LoadCameraListTask loadTask=new LoadCameraListTask(AppData.defaultUser,CamerasActivity.this);
loadTask.reload=true;
loadTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
return true;
case R.id.menu_add_camera:
showAddCameraOptionsDialog();
return true;
case R.id.menu_settings:
EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_settings,R.string.label_settings);
startActivity(new Intent(CamerasActivity.this,CameraPrefsActivity.class));
return true;
case R.id.menu_manage_accounts:
EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_manage_account,R.string.label_account);
startActivity(new Intent(CamerasActivity.this,ManageAccountsActivity.class));
isUsersAccountsActivityStarted=true;
return true;
case R.id.menu_about:
EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_about,R.string.label_about);
startActivity(new Intent(CamerasActivity.this,AboutDialog.class));
return true;
case R.id.menu_logout:
showSignOutDialog();
return true;
default :
return super.onOptionsItemSelected(item);
}
}
 catch (Exception e) {
Log.e(TAG,e.toString(),e);
CustomedDialog.showUnexpectedErrorDialog(this);
if (Constants.isAppTrackingEnabled) BugSenseHandler.sendException(e);
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  try {
switch (item.getItemId()) {
case R.id.menurefresh:
      EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_refresh,R.string.label_list_refresh);
    if (refresh != null)     refresh.setActionView(R.layout.actionbar_indeterminate_progress);
  LoadCameraListTask loadTask=new LoadCameraListTask(AppData.defaultUser,CamerasActivity.this);
loadTask.reload=true;
loadTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
return true;
case R.id.menu_add_camera:
showAddCameraOptionsDialog();
return true;
case R.id.menu_settings:
EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_settings,R.string.label_settings);
startActivity(new Intent(CamerasActivity.this,CameraPrefsActivity.class));
return true;
case R.id.menu_manage_accounts:
EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_manage_account,R.string.label_account);
startActivity(new Intent(CamerasActivity.this,ManageAccountsActivity.class));
isUsersAccountsActivityStarted=true;
stopImageLoading=true;
return true;
case R.id.menu_about:
EvercamPlayApplication.sendEventAnalytics(this,R.string.category_menu,R.string.action_about,R.string.label_about);
startActivity(new Intent(CamerasActivity.this,AboutDialog.class));
return true;
case R.id.menu_logout:
showSignOutDialog();
return true;
default :
return super.onOptionsItemSelected(item);
}
}
 catch (Exception e) {
Log.e(TAG,e.toString(),e);
CustomedDialog.showUnexpectedErrorDialog(this);
if (Constants.isAppTrackingEnabled) BugSenseHandler.sendException(e);
}
return super.onOptionsItemSelected(item);
}",0.9931649331352156
34129,"private void startLoadingCameras(){
  LoadCameraListTask loadTask=new LoadCameraListTask(AppData.defaultUser,CamerasActivity.this);
  loadTask.reload=true;
  loadTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}","private void startLoadingCameras(){
  stopImageLoading=false;
  LoadCameraListTask loadTask=new LoadCameraListTask(AppData.defaultUser,CamerasActivity.this);
  loadTask.reload=true;
  loadTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.9439655172413792
34130,"private void launchLogin(View view){
  boolean isDefault=false;
  EditText usernameEdit=(EditText)view.findViewById(R.id.username_edit);
  EditText passwordEdit=(EditText)view.findViewById(R.id.user_password);
  String username=usernameEdit.getText().toString();
  String password=passwordEdit.getText().toString();
  if (TextUtils.isEmpty(username)) {
    CustomToast.showInCenter(this,R.string.error_username_required);
    return;
  }
 else   if (username.contains(""String_Node_Str"")) {
    CustomToast.showInCenter(this,R.string.error_invalid_username);
    return;
  }
  if (TextUtils.isEmpty(password)) {
    CustomToast.showInCenter(this,R.string.error_password_required);
    return;
  }
 else   if (password.contains(""String_Node_Str"")) {
    CustomToast.showInCenter(this,R.string.error_invalid_password);
    return;
  }
  ProgressBar progressBar=(ProgressBar)alertDialog.findViewById(R.id.pb_loadinguser);
  progressBar.setVisibility(View.VISIBLE);
  AddAccountTask task=new AddAccountTask(username,password,isDefault,alertDialog);
  task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}","private void launchLogin(View view){
  boolean isDefault=false;
  EditText usernameEdit=(EditText)view.findViewById(R.id.username_edit);
  EditText passwordEdit=(EditText)view.findViewById(R.id.user_password);
  String username=usernameEdit.getText().toString();
  String password=passwordEdit.getText().toString();
  if (TextUtils.isEmpty(username)) {
    CustomToast.showInCenter(this,R.string.error_username_required);
    return;
  }
 else   if (username.contains(""String_Node_Str"")) {
    CustomToast.showInCenter(this,R.string.error_invalid_username);
    return;
  }
  if (TextUtils.isEmpty(password)) {
    CustomToast.showInCenter(this,R.string.error_password_required);
    return;
  }
 else   if (password.contains(""String_Node_Str"")) {
    CustomToast.showInCenter(this,R.string.error_invalid_password);
    return;
  }
  AddAccountTask task=new AddAccountTask(username,password,isDefault,alertDialog);
  task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.9378911892152144
34131,"@Override protected void onPostExecute(Boolean hasNetwork){
  if (hasNetwork) {
    launchLogin(dialogView);
  }
 else {
    CustomedDialog.showInternetNotConnectDialog(ManageAccountsActivity.this);
  }
}","@Override protected void onPostExecute(Boolean hasNetwork){
  if (hasNetwork) {
    Log.d(TAG,""String_Node_Str"");
    launchLogin(dialogView);
  }
 else {
    CustomedDialog.showInternetNotConnectDialog(ManageAccountsActivity.this);
  }
}",0.9230769230769232
34132,"@Override public void run(){
  try {
    if (end)     return;
    if (evercamCamera.loadingStatus == ImageLoadingStatus.not_started) {
      String internalJpgUrl=evercamCamera.getInternalSnapshotUrl();
      liveImageTaskLocal=new DownloadLiveImageTask();
      liveImageTaskLocal.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,new String[]{internalJpgUrl});
      liveImageTask=new DownloadLiveImageTask();
      String externalJpgUrl=evercamCamera.getExternalSnapshotUrl();
      liveImageTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,new String[]{externalJpgUrl});
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.live_received) {
      setlayoutForLiveImageReceived();
      return;
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.live_not_received) {
      latestTask=new DownloadLatestTask(evercamCamera.getCameraId(),CameraLayout.this);
      latestTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
      setlayoutForNoImageReceived();
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.camba_image_received) {
      setlayoutForLatestImageReceived();
      return;
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.camba_not_received) {
      setlayoutForNoImageReceived();
    }
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    handler.postDelayed(LoadImageRunnable,5000);
    return;
  }
catch (  Exception e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    if (!end) {
      handler.postDelayed(LoadImageRunnable,5000);
    }
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
  }
}","@Override public void run(){
  try {
    if (end)     return;
    if (CamerasActivity.stopImageLoading) {
      return;
    }
    if (evercamCamera.loadingStatus == ImageLoadingStatus.not_started) {
      String internalJpgUrl=evercamCamera.getInternalSnapshotUrl();
      liveImageTaskLocal=new DownloadLiveImageTask();
      liveImageTaskLocal.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,new String[]{internalJpgUrl});
      liveImageTask=new DownloadLiveImageTask();
      String externalJpgUrl=evercamCamera.getExternalSnapshotUrl();
      liveImageTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,new String[]{externalJpgUrl});
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.live_received) {
      setlayoutForLiveImageReceived();
      return;
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.live_not_received) {
      latestTask=new DownloadLatestTask(evercamCamera.getCameraId(),CameraLayout.this);
      latestTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
      setlayoutForNoImageReceived();
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.camba_image_received) {
      setlayoutForLatestImageReceived();
      return;
    }
 else     if (evercamCamera.loadingStatus == ImageLoadingStatus.camba_not_received) {
      setlayoutForNoImageReceived();
    }
  }
 catch (  OutOfMemoryError e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    handler.postDelayed(LoadImageRunnable,5000);
    return;
  }
catch (  Exception e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    if (!end) {
      handler.postDelayed(LoadImageRunnable,5000);
    }
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
  }
}",0.9818799546998868
34133,"@Override protected Drawable doInBackground(String... urls){
  for (  String url : urls) {
    try {
      ArrayList<Cookie> cookies=new ArrayList<Cookie>();
      Drawable drawable=null;
      if (evercamCamera.hasCredentials()) {
        if (!url.isEmpty()) {
          drawable=Commons.getDrawablefromUrlAuthenticated(url,evercamCamera.getUsername(),evercamCamera.getPassword(),cookies,3000);
        }
      }
 else {
        Camera camera=Camera.getById(evercamCamera.getCameraId());
        if (camera != null) {
          InputStream stream=camera.getSnapshotFromEvercam();
          drawable=Drawable.createFromStream(stream,""String_Node_Str"");
        }
      }
      if (cookies.size() > 0) {
        evercamCamera.cookies=cookies;
      }
      return drawable;
    }
 catch (    OutOfMemoryError e) {
      Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
      return null;
    }
catch (    Exception e) {
      Log.e(TAG,""String_Node_Str"" + e.getMessage());
    }
  }
  return null;
}","@Override protected Drawable doInBackground(String... urls){
  for (  String url : urls) {
    if (CamerasActivity.stopImageLoading) {
      this.cancel(true);
    }
    try {
      ArrayList<Cookie> cookies=new ArrayList<Cookie>();
      Drawable drawable=null;
      if (evercamCamera.hasCredentials()) {
        if (!url.isEmpty()) {
          drawable=Commons.getDrawablefromUrlAuthenticated(url,evercamCamera.getUsername(),evercamCamera.getPassword(),cookies,3000);
        }
      }
 else {
        Camera camera=Camera.getById(evercamCamera.getCameraId());
        if (camera != null) {
          InputStream stream=camera.getSnapshotFromEvercam();
          drawable=Drawable.createFromStream(stream,""String_Node_Str"");
        }
      }
      if (cookies.size() > 0) {
        evercamCamera.cookies=cookies;
      }
      return drawable;
    }
 catch (    OutOfMemoryError e) {
      Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
      return null;
    }
catch (    Exception e) {
      Log.e(TAG,""String_Node_Str"" + e.getMessage());
    }
  }
  return null;
}",0.9646393210749646
34134,"private void greyImageShown(){
  this.setBackgroundColor(Color.GRAY);
  cameraRelativeLayout.getBackground().setAlpha(70);
}","private void greyImageShown(){
  try {
    this.setBackgroundColor(Color.GRAY);
    cameraRelativeLayout.getBackground().setAlpha(70);
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
}",0.7251461988304093
34135,"@Override protected void onPostExecute(Boolean hasNetwork){
  if (hasNetwork) {
    if (type == InternetCheckType.START) {
      startLoadingCameras();
    }
 else     if (type == InternetCheckType.RESTART) {
      try {
        if (isUsersAccountsActivityStarted) {
          isUsersAccountsActivityStarted=false;
          startLoadingCameras();
        }
        int camsOldValue=camerasPerRow;
        SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(CamerasActivity.this);
        camerasPerRow=PrefsManager.getCameraPerRow(sharedPrefs,2);
        if (camsOldValue != camerasPerRow) {
          removeAllCameraViews();
          addAllCameraViews(false);
        }
      }
 catch (      Exception e) {
        if (Constants.isAppTrackingEnabled)         BugSenseHandler.sendException(e);
      }
    }
  }
 else {
    showInternetNotConnectDialog();
  }
}","@Override protected void onPostExecute(Boolean hasNetwork){
  if (hasNetwork) {
    if (type == InternetCheckType.START) {
      startLoadingCameras();
    }
 else     if (type == InternetCheckType.RESTART) {
      try {
        if (isUsersAccountsActivityStarted) {
          isUsersAccountsActivityStarted=false;
          startLoadingCameras();
        }
        int camsOldValue=camerasPerRow;
        SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(CamerasActivity.this);
        camerasPerRow=PrefsManager.getCameraPerRow(sharedPrefs,2);
        if (camsOldValue != camerasPerRow) {
          removeAllCameraViews();
          addAllCameraViews(false);
        }
      }
 catch (      Exception e) {
        if (Constants.isAppTrackingEnabled)         BugSenseHandler.sendException(e);
      }
    }
  }
 else {
    CustomedDialog.showInternetNotConnectDialog(CamerasActivity.this);
  }
}",0.98065229408513
34136,"@Override public void onClick(DialogInterface dialog,int which){
  dialog.dismiss();
  finish();
}","@Override public void onClick(View v){
  new LoginCheckInternetTask(LoginActivity.this,InternetCheckType.SIGNUP).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.4106463878326996
34137,"@Override protected void onPostExecute(Boolean hasNetwork){
  if (hasNetwork) {
    if (type == InternetCheckType.LOGIN) {
      attemptLogin();
    }
 else     if (type == InternetCheckType.SIGNUP) {
      Intent signupIntent=new Intent(LoginActivity.this,SignUpActivity.class);
      startActivity(signupIntent);
    }
  }
 else {
    showInternetNotConnectDialog();
  }
}","@Override protected void onPostExecute(Boolean hasNetwork){
  if (hasNetwork) {
    if (type == InternetCheckType.LOGIN) {
      attemptLogin();
    }
 else     if (type == InternetCheckType.SIGNUP) {
      Intent signupIntent=new Intent(LoginActivity.this,SignUpActivity.class);
      startActivity(signupIntent);
    }
  }
 else {
    CustomedDialog.showInternetNotConnectDialog(LoginActivity.this);
  }
}",0.9577464788732394
34138,"@Override protected void onPostExecute(Boolean hasNetwork){
  try {
    if (hasNetwork) {
      if (isUserLogged()) {
        startCamerasActivity();
      }
 else {
        Intent slideIntent=new Intent(MainActivity.this,SlideActivity.class);
        startActivity(slideIntent);
      }
    }
 else {
      showInternetNotConnectDialog();
    }
  }
 catch (  Exception e) {
    BugSenseHandler.sendException(e);
    CustomedDialog.getAlertDialog(MainActivity.this,""String_Node_Str"",e.toString()).show();
    Log.e(TAG,Log.getStackTraceString(e));
  }
}","@Override protected void onPostExecute(Boolean hasNetwork){
  try {
    if (hasNetwork) {
      if (isUserLogged()) {
        startCamerasActivity();
      }
 else {
        Intent slideIntent=new Intent(MainActivity.this,SlideActivity.class);
        startActivity(slideIntent);
      }
    }
 else {
      CustomedDialog.showInternetNotConnectDialog(MainActivity.this);
    }
  }
 catch (  Exception e) {
    BugSenseHandler.sendException(e);
    CustomedDialog.getAlertDialog(MainActivity.this,""String_Node_Str"",e.toString()).show();
    Log.e(TAG,Log.getStackTraceString(e));
  }
}",0.9718804920913884
34139,"private void logOutUser(){
  try {
    SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
    PrefsManager.removeUserEmail(sharedPrefs);
    AppData.defaultUser=null;
    AppData.evercamCameraList.clear();
    DbAppUser dbUser=new DbAppUser(this);
    List<AppUser> list=dbUser.getAllAppUsers(10000);
    if (list != null && list.size() > 0) {
      for (      AppUser user : list) {
        dbUser.deleteAppUserByEmail(user.getEmail());
      }
    }
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  startActivity(new Intent(this,MainActivity.class));
}","private void logOutUser(){
  try {
    SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
    PrefsManager.removeUserEmail(sharedPrefs);
    AppData.defaultUser=null;
    AppData.appUsers.clear();
    AppData.evercamCameraList.clear();
    DbAppUser dbUser=new DbAppUser(this);
    List<AppUser> list=dbUser.getAllAppUsers(10000);
    if (list != null && list.size() > 0) {
      for (      AppUser user : list) {
        dbUser.deleteAppUserByEmail(user.getEmail());
      }
    }
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  startActivity(new Intent(this,MainActivity.class));
}",0.9764150943396226
34140,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Constants.isAppTrackingEnabled) {
    BugSenseHandler.initAndStartSession(this,Constants.bugsense_ApiKey);
  }
  EvercamPlayApplication.sendScreenAnalytics(this,getString(R.string.screen_manage_account));
  if (this.getActionBar() != null) {
    this.getActionBar().setHomeButtonEnabled(true);
    this.getActionBar().setTitle(R.string.accounts);
    this.getActionBar().setIcon(R.drawable.ic_navigation_back);
  }
  setContentView(R.layout.manage_account_activity);
  ListView listview=(ListView)findViewById(R.id.email_list);
  if (AppData.appUsers != null) {
    ListAdapter listAdapter=new CustomAdapter(ManageAccountsActivity.this,R.layout.manageaccountsactivity_listitem,R.layout.manageaccountsactivity_listitem_add_new_user_account,R.id.manageactivity_listitemtextvie,(ArrayList<AppUser>)AppData.appUsers);
    listview.setAdapter(listAdapter);
  }
 else {
    showAllAccounts();
  }
  listview.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      ListView listview=(ListView)findViewById(R.id.email_list);
      final AppUser user=(AppUser)listview.getItemAtPosition(position);
      if (user.getId() < 0) {
        showAddUserDialogue(null,null,false);
        return;
      }
      final View ed_dialog_layout=getLayoutInflater().inflate(R.layout.manage_account_option_list,null);
      final AlertDialog dialog=CustomedDialog.getAlertDialogNoTitleNoButton(ManageAccountsActivity.this,ed_dialog_layout);
      dialog.show();
      Button cancel=(Button)ed_dialog_layout.findViewById(R.id.btn_cancel);
      Button openDefault=(Button)ed_dialog_layout.findViewById(R.id.btn_open_account);
      Button setDefault=(Button)ed_dialog_layout.findViewById(R.id.btn_set_default_account);
      Button delete=(Button)ed_dialog_layout.findViewById(R.id.btn_delete_account);
      cancel.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          dialog.dismiss();
        }
      }
);
      if (user.getIsDefault()) {
        openDefault.setVisibility(View.GONE);
        setDefault.setVisibility(View.GONE);
      }
 else {
        openDefault.setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View v){
            setDefaultUser(user.getId() + ""String_Node_Str"",true,dialog);
            ed_dialog_layout.setEnabled(false);
            ed_dialog_layout.setClickable(false);
          }
        }
);
        setDefault.setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View v){
            setDefaultUser(user.getId() + ""String_Node_Str"",false,dialog);
            ed_dialog_layout.setEnabled(false);
            ed_dialog_layout.setClickable(false);
          }
        }
);
      }
      delete.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          CustomedDialog.getConfirmRemoveDialog(ManageAccountsActivity.this,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface warningDialog,            int which){
              try {
                DbAppUser users=new DbAppUser(ManageAccountsActivity.this);
                users.deleteAppUserByEmail(user.getEmail());
                if (users.getDefaultUsersCount() == 0 && users.getAppUsersCount() > 0) {
                  int maxid=users.getMaxID();
                  AppUser user=users.getAppUserByID(maxid);
                  user.setIsDefault(true);
                  users.updateAppUser(user);
                  PrefsManager.saveUserEmail(PreferenceManager.getDefaultSharedPreferences(ManageAccountsActivity.this),user.getEmail());
                  AppData.defaultUser=user;
                }
                showAllAccounts();
                dialog.dismiss();
              }
 catch (              Exception e) {
                if (Constants.isAppTrackingEnabled) {
                  BugSenseHandler.sendException(e);
                }
              }
            }
          }
).show();
        }
      }
);
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Constants.isAppTrackingEnabled) {
    BugSenseHandler.initAndStartSession(this,Constants.bugsense_ApiKey);
  }
  EvercamPlayApplication.sendScreenAnalytics(this,getString(R.string.screen_manage_account));
  if (this.getActionBar() != null) {
    this.getActionBar().setHomeButtonEnabled(true);
    this.getActionBar().setTitle(R.string.accounts);
    this.getActionBar().setIcon(R.drawable.ic_navigation_back);
  }
  setContentView(R.layout.manage_account_activity);
  ListView listview=(ListView)findViewById(R.id.email_list);
  if (AppData.appUsers != null && AppData.appUsers.size() != 0) {
    ListAdapter listAdapter=new CustomAdapter(ManageAccountsActivity.this,R.layout.manageaccountsactivity_listitem,R.layout.manageaccountsactivity_listitem_add_new_user_account,R.id.manageactivity_listitemtextvie,(ArrayList<AppUser>)AppData.appUsers);
    listview.setAdapter(listAdapter);
  }
 else {
    showAllAccounts();
  }
  listview.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      ListView listview=(ListView)findViewById(R.id.email_list);
      final AppUser user=(AppUser)listview.getItemAtPosition(position);
      if (user.getId() < 0) {
        showAddUserDialogue(null,null,false);
        return;
      }
      final View ed_dialog_layout=getLayoutInflater().inflate(R.layout.manage_account_option_list,null);
      final AlertDialog dialog=CustomedDialog.getAlertDialogNoTitleNoButton(ManageAccountsActivity.this,ed_dialog_layout);
      dialog.show();
      Button cancel=(Button)ed_dialog_layout.findViewById(R.id.btn_cancel);
      Button openDefault=(Button)ed_dialog_layout.findViewById(R.id.btn_open_account);
      Button setDefault=(Button)ed_dialog_layout.findViewById(R.id.btn_set_default_account);
      Button delete=(Button)ed_dialog_layout.findViewById(R.id.btn_delete_account);
      cancel.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          dialog.dismiss();
        }
      }
);
      if (user.getIsDefault()) {
        openDefault.setEnabled(false);
        setDefault.setEnabled(false);
      }
 else {
        openDefault.setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View v){
            setDefaultUser(user.getId() + ""String_Node_Str"",true,dialog);
            ed_dialog_layout.setEnabled(false);
            ed_dialog_layout.setClickable(false);
          }
        }
);
        setDefault.setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View v){
            setDefaultUser(user.getId() + ""String_Node_Str"",false,dialog);
            ed_dialog_layout.setEnabled(false);
            ed_dialog_layout.setClickable(false);
          }
        }
);
      }
      if (AppData.appUsers != null && AppData.appUsers.size() == 2) {
        delete.setEnabled(false);
      }
 else {
        delete.setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View v){
            CustomedDialog.getConfirmRemoveDialog(ManageAccountsActivity.this,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface warningDialog,              int which){
                try {
                  DbAppUser users=new DbAppUser(ManageAccountsActivity.this);
                  users.deleteAppUserByEmail(user.getEmail());
                  if (users.getDefaultUsersCount() == 0 && users.getAppUsersCount() > 0) {
                    int maxid=users.getMaxID();
                    AppUser user=users.getAppUserByID(maxid);
                    user.setIsDefault(true);
                    users.updateAppUser(user);
                    PrefsManager.saveUserEmail(PreferenceManager.getDefaultSharedPreferences(ManageAccountsActivity.this),user.getEmail());
                    AppData.defaultUser=user;
                  }
                  showAllAccounts();
                  dialog.dismiss();
                }
 catch (                Exception e) {
                  if (Constants.isAppTrackingEnabled) {
                    BugSenseHandler.sendException(e);
                  }
                }
              }
            }
).show();
          }
        }
);
      }
    }
  }
);
}",0.9613081529249194
34141,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  ListView listview=(ListView)findViewById(R.id.email_list);
  final AppUser user=(AppUser)listview.getItemAtPosition(position);
  if (user.getId() < 0) {
    showAddUserDialogue(null,null,false);
    return;
  }
  final View ed_dialog_layout=getLayoutInflater().inflate(R.layout.manage_account_option_list,null);
  final AlertDialog dialog=CustomedDialog.getAlertDialogNoTitleNoButton(ManageAccountsActivity.this,ed_dialog_layout);
  dialog.show();
  Button cancel=(Button)ed_dialog_layout.findViewById(R.id.btn_cancel);
  Button openDefault=(Button)ed_dialog_layout.findViewById(R.id.btn_open_account);
  Button setDefault=(Button)ed_dialog_layout.findViewById(R.id.btn_set_default_account);
  Button delete=(Button)ed_dialog_layout.findViewById(R.id.btn_delete_account);
  cancel.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      dialog.dismiss();
    }
  }
);
  if (user.getIsDefault()) {
    openDefault.setVisibility(View.GONE);
    setDefault.setVisibility(View.GONE);
  }
 else {
    openDefault.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        setDefaultUser(user.getId() + ""String_Node_Str"",true,dialog);
        ed_dialog_layout.setEnabled(false);
        ed_dialog_layout.setClickable(false);
      }
    }
);
    setDefault.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        setDefaultUser(user.getId() + ""String_Node_Str"",false,dialog);
        ed_dialog_layout.setEnabled(false);
        ed_dialog_layout.setClickable(false);
      }
    }
);
  }
  delete.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      CustomedDialog.getConfirmRemoveDialog(ManageAccountsActivity.this,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface warningDialog,        int which){
          try {
            DbAppUser users=new DbAppUser(ManageAccountsActivity.this);
            users.deleteAppUserByEmail(user.getEmail());
            if (users.getDefaultUsersCount() == 0 && users.getAppUsersCount() > 0) {
              int maxid=users.getMaxID();
              AppUser user=users.getAppUserByID(maxid);
              user.setIsDefault(true);
              users.updateAppUser(user);
              PrefsManager.saveUserEmail(PreferenceManager.getDefaultSharedPreferences(ManageAccountsActivity.this),user.getEmail());
              AppData.defaultUser=user;
            }
            showAllAccounts();
            dialog.dismiss();
          }
 catch (          Exception e) {
            if (Constants.isAppTrackingEnabled) {
              BugSenseHandler.sendException(e);
            }
          }
        }
      }
).show();
    }
  }
);
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  ListView listview=(ListView)findViewById(R.id.email_list);
  final AppUser user=(AppUser)listview.getItemAtPosition(position);
  if (user.getId() < 0) {
    showAddUserDialogue(null,null,false);
    return;
  }
  final View ed_dialog_layout=getLayoutInflater().inflate(R.layout.manage_account_option_list,null);
  final AlertDialog dialog=CustomedDialog.getAlertDialogNoTitleNoButton(ManageAccountsActivity.this,ed_dialog_layout);
  dialog.show();
  Button cancel=(Button)ed_dialog_layout.findViewById(R.id.btn_cancel);
  Button openDefault=(Button)ed_dialog_layout.findViewById(R.id.btn_open_account);
  Button setDefault=(Button)ed_dialog_layout.findViewById(R.id.btn_set_default_account);
  Button delete=(Button)ed_dialog_layout.findViewById(R.id.btn_delete_account);
  cancel.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      dialog.dismiss();
    }
  }
);
  if (user.getIsDefault()) {
    openDefault.setEnabled(false);
    setDefault.setEnabled(false);
  }
 else {
    openDefault.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        setDefaultUser(user.getId() + ""String_Node_Str"",true,dialog);
        ed_dialog_layout.setEnabled(false);
        ed_dialog_layout.setClickable(false);
      }
    }
);
    setDefault.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        setDefaultUser(user.getId() + ""String_Node_Str"",false,dialog);
        ed_dialog_layout.setEnabled(false);
        ed_dialog_layout.setClickable(false);
      }
    }
);
  }
  if (AppData.appUsers != null && AppData.appUsers.size() == 2) {
    delete.setEnabled(false);
  }
 else {
    delete.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        CustomedDialog.getConfirmRemoveDialog(ManageAccountsActivity.this,new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface warningDialog,          int which){
            try {
              DbAppUser users=new DbAppUser(ManageAccountsActivity.this);
              users.deleteAppUserByEmail(user.getEmail());
              if (users.getDefaultUsersCount() == 0 && users.getAppUsersCount() > 0) {
                int maxid=users.getMaxID();
                AppUser user=users.getAppUserByID(maxid);
                user.setIsDefault(true);
                users.updateAppUser(user);
                PrefsManager.saveUserEmail(PreferenceManager.getDefaultSharedPreferences(ManageAccountsActivity.this),user.getEmail());
                AppData.defaultUser=user;
              }
              showAllAccounts();
              dialog.dismiss();
            }
 catch (            Exception e) {
              if (Constants.isAppTrackingEnabled) {
                BugSenseHandler.sendException(e);
              }
            }
          }
        }
).show();
      }
    }
);
  }
}",0.9535593220338984
34142,"private void restartPlay(String media){
  if (libvlc == null)   return;
  try {
    libvlc.stop();
    if (media.length() > 0) {
      showToast(getString(R.string.reconnecting) + media);
    }
    libvlc.getMediaList().clear();
    libvlc.playMRL(media);
  }
 catch (  Exception e) {
    Toast.makeText(this,""String_Node_Str"" + media + ""String_Node_Str""+ e.getMessage(),Toast.LENGTH_LONG).show();
  }
}","private void restartPlay(String media){
  if (libvlc == null)   return;
  try {
    libvlc.stop();
    if (media.length() > 0) {
      showToast(getString(R.string.reconnecting) + media);
    }
    libvlc.getMediaList().clear();
    libvlc.playMRL(media);
  }
 catch (  Exception e) {
    if (!isPlayingJpg) {
      Toast.makeText(this,""String_Node_Str"" + media + ""String_Node_Str""+ e.getMessage(),Toast.LENGTH_LONG).show();
    }
  }
}",0.9606674612634089
34143,"@Override public void handleMessage(Message msg){
  try {
    VideoActivity player=videoActivity.get();
    if (msg.what == videoSizeChanged) {
      player.setSize(msg.arg1,msg.arg2);
      return;
    }
    Bundle bundle=msg.getData();
    int event=bundle.getInt(""String_Node_Str"");
switch (event) {
case EventHandler.MediaPlayerEndReached:
      player.restartPlay(player.mrlPlaying);
    break;
case EventHandler.MediaPlayerPlaying:
  player.surfaceView.setVisibility(View.VISIBLE);
player.imageView.setVisibility(View.GONE);
player.mrlPlaying=player.getCurrentMRL();
break;
case EventHandler.MediaPlayerPaused:
break;
case EventHandler.MediaPlayerStopped:
break;
case EventHandler.MediaPlayerEncounteredError:
Log.v(TAG,""String_Node_Str"");
if (evercamCamera != null) {
player.loadImageFromCache(evercamCamera.getCameraId());
}
if (player.mrlPlaying == null && player.isNextMRLValid()) {
player.restartPlay(player.getNextMRL());
}
 else if (player.mrlPlaying != null) {
player.restartPlay(player.mrlPlaying);
}
 else {
player.showToast(videoActivity.get().getString(R.string.msg_switch_to_jpg));
player.showImagesVideo=true;
player.createNewImageThread();
}
break;
case EventHandler.MediaPlayerVout:
Log.v(TAG,""String_Node_Str"");
player.hideProgressView();
try {
if (VideoActivity.mediaUrls.get(mrlIndex).isLocalNetwork == false) {
SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(player);
SharedPreferences.Editor editor=sharedPrefs.edit();
editor.putString(""String_Node_Str"" + evercamCamera.getCameraId(),player.mrlPlaying);
editor.commit();
}
}
 catch (Exception ex) {
}
break;
default :
break;
}
}
 catch (Exception e) {
Log.e(TAG,e.getMessage());
}
}","@Override public void handleMessage(Message msg){
  try {
    VideoActivity player=videoActivity.get();
    if (msg.what == videoSizeChanged) {
      player.setSize(msg.arg1,msg.arg2);
      return;
    }
    Bundle bundle=msg.getData();
    int event=bundle.getInt(""String_Node_Str"");
switch (event) {
case EventHandler.MediaPlayerEndReached:
      player.restartPlay(player.mrlPlaying);
    break;
case EventHandler.MediaPlayerPlaying:
  isPlayingJpg=false;
player.surfaceView.setVisibility(View.VISIBLE);
player.imageView.setVisibility(View.GONE);
player.mrlPlaying=player.getCurrentMRL();
break;
case EventHandler.MediaPlayerPaused:
break;
case EventHandler.MediaPlayerStopped:
break;
case EventHandler.MediaPlayerEncounteredError:
Log.v(TAG,""String_Node_Str"");
if (evercamCamera != null) {
player.loadImageFromCache(evercamCamera.getCameraId());
}
if (player.mrlPlaying == null && player.isNextMRLValid()) {
player.restartPlay(player.getNextMRL());
}
 else if (player.mrlPlaying != null) {
player.restartPlay(player.mrlPlaying);
}
 else {
isPlayingJpg=true;
player.showToast(videoActivity.get().getString(R.string.msg_switch_to_jpg));
player.showImagesVideo=true;
player.createNewImageThread();
}
break;
case EventHandler.MediaPlayerVout:
Log.v(TAG,""String_Node_Str"");
player.hideProgressView();
try {
if (VideoActivity.mediaUrls.get(mrlIndex).isLocalNetwork == false) {
SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(player);
SharedPreferences.Editor editor=sharedPrefs.edit();
editor.putString(""String_Node_Str"" + evercamCamera.getCameraId(),player.mrlPlaying);
editor.commit();
}
}
 catch (Exception ex) {
}
break;
default :
break;
}
}
 catch (Exception e) {
Log.e(TAG,e.getMessage());
}
}",0.9885731028420744
34144,"public boolean addAllCameraViews(boolean reloadImages){
  try {
    SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
    camerasPerRow=PrefsManager.getCameraPerRow(sharedPrefs,camerasPerRow);
    io.evercam.androidapp.custom.FlowLayout camsLineView=(io.evercam.androidapp.custom.FlowLayout)this.findViewById(R.id.camsLV);
    Display display=getWindowManager().getDefaultDisplay();
    int screen_width=display.getWidth();
    int index=0;
    totalCamerasInGrid=0;
    for (    EvercamCamera evercamCamera : AppData.evercamCameraList) {
      LinearLayout cameraListLayout=new LinearLayout(this);
      int indexPlus=index + 1;
      if (reloadImages)       evercamCamera.loadingStatus=ImageLoadingStatus.not_started;
      CameraLayout cameraLayout=new CameraLayout(this,evercamCamera);
      LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT,android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
      params.width=((indexPlus % camerasPerRow == 0) ? (screen_width - (index % camerasPerRow) * (screen_width / camerasPerRow)) : screen_width / camerasPerRow);
      params.height=(int)(params.width / (1.25));
      cameraLayout.setLayoutParams(params);
      cameraListLayout.addView(cameraLayout);
      camsLineView.addView(cameraListLayout,new io.evercam.androidapp.custom.FlowLayout.LayoutParams(0,0));
      index++;
      totalCamerasInGrid++;
    }
    if (this.getActionBar() != null)     this.getActionBar().setHomeButtonEnabled(true);
    startgCMRegisterActions();
    if (refresh != null)     refresh.setActionView(null);
    return true;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    UIUtils.GetAlertDialog(CamerasActivity.this,""String_Node_Str"",Constants.ErrorMessageGeneric).show();
    if (Constants.isAppTrackingEnabled)     BugSenseHandler.sendException(e);
  }
  return false;
}","public boolean addAllCameraViews(boolean reloadImages){
  try {
    SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
    camerasPerRow=PrefsManager.getCameraPerRow(sharedPrefs,camerasPerRow);
    io.evercam.androidapp.custom.FlowLayout camsLineView=(io.evercam.androidapp.custom.FlowLayout)this.findViewById(R.id.camsLV);
    Display display=getWindowManager().getDefaultDisplay();
    int screen_width=display.getWidth();
    int index=0;
    totalCamerasInGrid=0;
    for (    EvercamCamera evercamCamera : AppData.evercamCameraList) {
      LinearLayout cameraListLayout=new LinearLayout(this);
      int indexPlus=index + 1;
      if (reloadImages)       evercamCamera.loadingStatus=ImageLoadingStatus.not_started;
      CameraLayout cameraLayout=new CameraLayout(this,evercamCamera);
      LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT,android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
      params.width=((indexPlus % camerasPerRow == 0) ? (screen_width - (index % camerasPerRow) * (screen_width / camerasPerRow)) : screen_width / camerasPerRow);
      params.height=(int)(params.width / (1.25));
      cameraLayout.setLayoutParams(params);
      cameraListLayout.addView(cameraLayout);
      camsLineView.addView(cameraListLayout,new io.evercam.androidapp.custom.FlowLayout.LayoutParams(0,0));
      index++;
      totalCamerasInGrid++;
    }
    if (this.getActionBar() != null)     this.getActionBar().setHomeButtonEnabled(true);
    if (refresh != null)     refresh.setActionView(null);
    return true;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    UIUtils.GetAlertDialog(CamerasActivity.this,""String_Node_Str"",Constants.ErrorMessageGeneric).show();
    if (Constants.isAppTrackingEnabled)     BugSenseHandler.sendException(e);
  }
  return false;
}",0.9918184217471628
34145,"@Override protected String doInBackground(String... usernames){
  String message=""String_Node_Str"";
  String TAG=""String_Node_Str"";
  try {
    GCMRegistrar.checkDevice(CamerasActivity.this);
    Log.i(TAG,""String_Node_Str"");
    GCMRegistrar.checkManifest(CamerasActivity.this);
    Log.i(TAG,""String_Node_Str"");
    String regId=GCMRegistrar.getRegistrationId(CamerasActivity.this);
    String AppUserEmail=null;
    String AppUserPassword=null;
    String Operation=null;
    String Manufacturer=null;
    String Model=null;
    String SerialNo=null;
    String ImeiNo=null;
    String Fingureprint=null;
    String MacAddress=null;
    String BlueToothName=null;
    String AppVersion=null;
    try {
      SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(CamerasActivity.this);
      AppUserEmail=sharedPrefs.getString(""String_Node_Str"",null);
      AppUserPassword=sharedPrefs.getString(""String_Node_Str"",null);
      Operation=""String_Node_Str"";
      Manufacturer=android.os.Build.MANUFACTURER;
      Model=android.os.Build.MODEL;
      SerialNo=android.os.Build.SERIAL;
      ImeiNo=((android.telephony.TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE)).getDeviceId();
      Fingureprint=android.os.Build.FINGERPRINT;
      WifiManager manager=(WifiManager)getSystemService(Context.WIFI_SERVICE);
      WifiInfo info=manager.getConnectionInfo();
      MacAddress=info.getMacAddress();
      BlueToothName=BluetoothAdapter.getDefaultAdapter().getName();
      AppVersion=(getPackageManager().getPackageInfo(getPackageName(),0)).versionName;
    }
 catch (    Exception ee) {
    }
    Log.i(TAG,""String_Node_Str"" + regId + ""String_Node_Str"");
    if (regId.equals(""String_Node_Str"")) {
      GCMRegistrar.register(CamerasActivity.this,Constants.GCM_SENDER_ID);
      return ""String_Node_Str"";
    }
 else     if (!GCMRegistrar.isRegisteredOnServer(CamerasActivity.this)) {
    }
 else {
      GCMRegistrar.setRegisteredOnServer(CamerasActivity.this,true);
      return regId;
    }
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
    message=e.toString();
    if (Constants.isAppTrackingEnabled)     BugSenseHandler.sendException(e);
  }
catch (  Error e) {
    if (Constants.isAppTrackingEnabled)     BugSenseHandler.sendExceptionMessage(TAG,""String_Node_Str"",new Exception(Log.getStackTraceString(e)));
  }
  return message;
}","@Override protected String[] doInBackground(String... arg0){
  try {
    DbAppUser dbUser=new DbAppUser(CamerasActivity.this);
    AppData.appUsers=dbUser.getAllAppUsers(1000);
    final String[] userEmailArray=new String[AppData.appUsers.size()];
    for (int count=0; count < AppData.appUsers.size(); count++) {
      userEmailArray[count]=AppData.appUsers.get(count).getEmail();
      if (AppData.appUsers.get(count).getIsDefault()) {
        defaultUserIndex=count;
      }
    }
    return userEmailArray;
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
  }
  return null;
}",0.0661528580603725
34146,"@Override protected String doInBackground(String... urls){
  for (  String url : urls) {
    try {
      ArrayList<Cookie> cookies=new ArrayList<Cookie>();
      Drawable drawable=Commons.getDrawablefromUrlAuthenticated1(url,evercamCamera.getUsername(),evercamCamera.getPassword(),cookies,15000);
      if (cookies.size() > 0) {
        evercamCamera.cookies=cookies;
      }
      try {
        String extCachePath=context.getExternalFilesDir(null) + ""String_Node_Str"" + evercamCamera.getCameraId()+ ""String_Node_Str"";
        File extfile=new File(extCachePath);
        if (drawable != null) {
          Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();
          if (extfile.exists()) {
            extfile.delete();
          }
          extfile.createNewFile();
          FileOutputStream fos=new FileOutputStream(extfile);
          bitmap.compress(CompressFormat.PNG,0,fos);
          fos.close();
        }
      }
 catch (      Exception e) {
        Log.e(TAG,Log.getStackTraceString(e));
      }
      String pathString=context.getCacheDir() + ""String_Node_Str"" + evercamCamera.getCameraId()+ ""String_Node_Str"";
      File file=new File(pathString);
      if (drawable != null) {
        Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();
        if (file.exists()) {
          file.delete();
        }
        file.createNewFile();
        FileOutputStream fos=new FileOutputStream(file);
        bitmap.compress(CompressFormat.PNG,0,fos);
        fos.close();
      }
      if (file.exists() && file.length() > 0) {
        return pathString;
      }
 else       if (file.exists()) {
        file.delete();
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + evercamCamera.getCameraId() + ""String_Node_Str""+ evercamCamera.getName()+ ""String_Node_Str"");
        return null;
      }
 else {
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + evercamCamera.getCameraId() + ""String_Node_Str""+ evercamCamera.getName()+ ""String_Node_Str"");
        return null;
      }
    }
 catch (    OutOfMemoryError e) {
      Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
      return null;
    }
catch (    Exception e) {
      if (Constants.isAppTrackingEnabled) {
        BugSenseHandler.sendException(e);
      }
    }
  }
  return null;
}","@Override protected String doInBackground(String... urls){
  for (  String url : urls) {
    try {
      ArrayList<Cookie> cookies=new ArrayList<Cookie>();
      Drawable drawable=Commons.getDrawablefromUrlAuthenticated1(url,evercamCamera.getUsername(),evercamCamera.getPassword(),cookies,15000);
      if (cookies.size() > 0) {
        evercamCamera.cookies=cookies;
      }
      try {
        String extCachePath=context.getExternalFilesDir(null) + ""String_Node_Str"" + evercamCamera.getCameraId()+ ""String_Node_Str"";
        File extfile=new File(extCachePath);
        if (drawable != null) {
          Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();
          if (extfile.exists()) {
            extfile.delete();
          }
          extfile.createNewFile();
          FileOutputStream fos=new FileOutputStream(extfile);
          bitmap.compress(CompressFormat.PNG,0,fos);
          fos.close();
        }
      }
 catch (      Exception e) {
        Log.e(TAG,Log.getStackTraceString(e));
      }
      String pathString=context.getCacheDir() + ""String_Node_Str"" + evercamCamera.getCameraId()+ ""String_Node_Str"";
      File file=new File(pathString);
      if (drawable != null) {
        Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();
        if (file.exists()) {
          file.delete();
        }
        file.createNewFile();
        FileOutputStream fos=new FileOutputStream(file);
        bitmap.compress(CompressFormat.PNG,0,fos);
        fos.close();
      }
      if (file.exists() && file.length() > 0) {
        return pathString;
      }
 else       if (file.exists()) {
        file.delete();
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + evercamCamera.getCameraId() + ""String_Node_Str""+ evercamCamera.getName()+ ""String_Node_Str"");
        return null;
      }
 else {
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + evercamCamera.getCameraId() + ""String_Node_Str""+ evercamCamera.getName()+ ""String_Node_Str"");
        return null;
      }
    }
 catch (    OutOfMemoryError e) {
      Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
      return null;
    }
catch (    Exception e) {
      Log.e(TAG,e.toString());
    }
  }
  return null;
}",0.9701849836779108
34147,"@Override public boolean onNavigationItemSelected(int itemPosition,long itemId){
  try {
    for (    AppUser user : AppData.appUsers) {
      user.setIsDefault(false);
    }
    DbAppUser dbUser=new DbAppUser(CamerasActivity.this);
    dbUser.updateAllIsDefaultFalse();
    AppUser user=AppData.appUsers.get(itemPosition);
    user.setIsDefault(true);
    dbUser.updateAppUser(user);
    AppData.defaultUser=user;
    AppData.evercamCameraList=new DbCamera(CamerasActivity.this).getCamerasByOwner(user.getUsername(),500);
    removeAllCameraViews();
    addAllCameraViews(true);
    new LoadCameraListTask(AppData.defaultUser,CamerasActivity.this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    if (totalCamerasInGrid == 0 && refresh != null) {
      refresh.setActionView(null);
      refresh.setActionView(R.layout.actionbar_indeterminate_progress);
    }
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
  }
  return false;
}","@Override public boolean onNavigationItemSelected(int itemPosition,long itemId){
  try {
    for (    AppUser user : AppData.appUsers) {
      user.setIsDefault(false);
    }
    DbAppUser dbUser=new DbAppUser(CamerasActivity.this);
    dbUser.updateAllIsDefaultFalse();
    AppUser user=AppData.appUsers.get(itemPosition);
    user.setIsDefault(true);
    dbUser.updateAppUser(user);
    AppData.defaultUser=user;
    AppData.evercamCameraList=new DbCamera(CamerasActivity.this).getCamerasByOwner(user.getUsername(),500);
    Log.d(TAG,""String_Node_Str"" + AppData.evercamCameraList.size());
    removeAllCameraViews();
    addAllCameraViews(true);
    new LoadCameraListTask(AppData.defaultUser,CamerasActivity.this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    if (totalCamerasInGrid == 0 && refresh != null) {
      refresh.setActionView(null);
      refresh.setActionView(R.layout.actionbar_indeterminate_progress);
    }
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
    if (Constants.isAppTrackingEnabled) {
      BugSenseHandler.sendException(e);
    }
  }
  return false;
}",0.967832167832168
34148,"@Override protected void onPostExecute(String[] userEmailArray){
  try {
    ArrayAdapter<String> dropdownListAdapter=new ArrayAdapter<String>(CamerasActivity.this,android.R.layout.simple_spinner_dropdown_item,userEmailArray);
    CamerasActivity.this.getActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
    OnNavigationListener navigationListener=new OnNavigationListener(){
      @Override public boolean onNavigationItemSelected(      int itemPosition,      long itemId){
        try {
          for (          AppUser user : AppData.appUsers) {
            user.setIsDefault(false);
          }
          DbAppUser dbUser=new DbAppUser(CamerasActivity.this);
          dbUser.updateAllIsDefaultFalse();
          AppUser user=AppData.appUsers.get(itemPosition);
          user.setIsDefault(true);
          dbUser.updateAppUser(user);
          AppData.defaultUser=user;
          AppData.evercamCameraList=new DbCamera(CamerasActivity.this).getCamerasByOwner(user.getUsername(),500);
          removeAllCameraViews();
          addAllCameraViews(true);
          new LoadCameraListTask(AppData.defaultUser,CamerasActivity.this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
          if (totalCamerasInGrid == 0 && refresh != null) {
            refresh.setActionView(null);
            refresh.setActionView(R.layout.actionbar_indeterminate_progress);
          }
        }
 catch (        Exception e) {
          Log.e(TAG,e.getMessage(),e);
          if (Constants.isAppTrackingEnabled) {
            BugSenseHandler.sendException(e);
          }
        }
        return false;
      }
    }
;
    getActionBar().setListNavigationCallbacks(dropdownListAdapter,navigationListener);
    getActionBar().setSelectedNavigationItem(defaultUserIndex);
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
    if (Constants.isAppTrackingEnabled)     BugSenseHandler.sendException(e);
  }
}","@Override protected void onPostExecute(String[] userEmailArray){
  try {
    ArrayAdapter<String> dropdownListAdapter=new ArrayAdapter<String>(CamerasActivity.this,android.R.layout.simple_spinner_dropdown_item,userEmailArray);
    CamerasActivity.this.getActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
    OnNavigationListener navigationListener=new OnNavigationListener(){
      @Override public boolean onNavigationItemSelected(      int itemPosition,      long itemId){
        try {
          for (          AppUser user : AppData.appUsers) {
            user.setIsDefault(false);
          }
          DbAppUser dbUser=new DbAppUser(CamerasActivity.this);
          dbUser.updateAllIsDefaultFalse();
          AppUser user=AppData.appUsers.get(itemPosition);
          user.setIsDefault(true);
          dbUser.updateAppUser(user);
          AppData.defaultUser=user;
          AppData.evercamCameraList=new DbCamera(CamerasActivity.this).getCamerasByOwner(user.getUsername(),500);
          Log.d(TAG,""String_Node_Str"" + AppData.evercamCameraList.size());
          removeAllCameraViews();
          addAllCameraViews(true);
          new LoadCameraListTask(AppData.defaultUser,CamerasActivity.this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
          if (totalCamerasInGrid == 0 && refresh != null) {
            refresh.setActionView(null);
            refresh.setActionView(R.layout.actionbar_indeterminate_progress);
          }
        }
 catch (        Exception e) {
          Log.e(TAG,e.getMessage(),e);
          if (Constants.isAppTrackingEnabled) {
            BugSenseHandler.sendException(e);
          }
        }
        return false;
      }
    }
;
    getActionBar().setListNavigationCallbacks(dropdownListAdapter,navigationListener);
    getActionBar().setSelectedNavigationItem(defaultUserIndex);
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
    if (Constants.isAppTrackingEnabled)     BugSenseHandler.sendException(e);
  }
}",0.980833120368004
34149,"public void onCreateCustom(SQLiteDatabase db){
  String CREATE_TABLE_Cameras=""String_Node_Str"" + TABLE_CAMERA + ""String_Node_Str""+ KEY_ID+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_CAMERA_ID+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_CAMERA_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_OWNER+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_USERNAME+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_PASSWORD+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_TIMEZONE+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_VENDOR+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_MODEL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_MAC+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_EXTERNAL_JPG_URL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_INTERNAL_JPG_URL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_EXTERNAL_RTSP_URL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_INTERNAL_RTSP_URL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_HAS_CREDENTIAL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_CAMERA_ID+ ""String_Node_Str""+ ""String_Node_Str"";
  db.execSQL(CREATE_TABLE_Cameras);
}","public void onCreateCustom(SQLiteDatabase db){
  String CREATE_TABLE_Cameras=""String_Node_Str"" + TABLE_CAMERA + ""String_Node_Str""+ KEY_ID+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_CAMERA_ID+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_CAMERA_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_OWNER+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_USERNAME+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_PASSWORD+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_TIMEZONE+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_VENDOR+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_MODEL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_MAC+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_EXTERNAL_JPG_URL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_INTERNAL_JPG_URL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_EXTERNAL_RTSP_URL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_INTERNAL_RTSP_URL+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_HAS_CREDENTIAL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_CAMERA_ID+ ""String_Node_Str""+ KEY_OWNER+ ""String_Node_Str""+ ""String_Node_Str"";
  db.execSQL(CREATE_TABLE_Cameras);
}",0.9864864864864864
34150,"@Override public String toString(){
  return ""String_Node_Str"" + loadingStatus + ""String_Node_Str""+ cookies+ ""String_Node_Str""+ isLocal+ ""String_Node_Str""+ camera+ ""String_Node_Str""+ id+ ""String_Node_Str""+ cameraId+ ""String_Node_Str""+ name+ ""String_Node_Str""+ owner+ ""String_Node_Str""+ username+ ""String_Node_Str""+ password+ ""String_Node_Str""+ timezone+ ""String_Node_Str""+ vendor+ ""String_Node_Str""+ model+ ""String_Node_Str""+ mac+ ""String_Node_Str""+ externalSnapshotUrl+ ""String_Node_Str""+ internalSnapshotUrl+ ""String_Node_Str""+ externalRtspUrl+ ""String_Node_Str""+ internalRtspUrl+ ""String_Node_Str""+ status+ ""String_Node_Str""+ hasCredentials+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + loadingStatus + ""String_Node_Str""+ cookies+ ""String_Node_Str""+ isLocal+ ""String_Node_Str""+ id+ ""String_Node_Str""+ cameraId+ ""String_Node_Str""+ name+ ""String_Node_Str""+ owner+ ""String_Node_Str""+ username+ ""String_Node_Str""+ password+ ""String_Node_Str""+ timezone+ ""String_Node_Str""+ vendor+ ""String_Node_Str""+ model+ ""String_Node_Str""+ mac+ ""String_Node_Str""+ externalSnapshotUrl+ ""String_Node_Str""+ internalSnapshotUrl+ ""String_Node_Str""+ externalRtspUrl+ ""String_Node_Str""+ internalRtspUrl+ ""String_Node_Str""+ status+ ""String_Node_Str""+ hasCredentials+ ""String_Node_Str"";
}",0.9792785878741366
34151,"@Override protected Boolean doInBackground(Void... params){
  try {
    boolean updateDB=false;
    Log.d(TAG,""String_Node_Str"");
    ArrayList<Camera> cameras=User.getCameras(user.getUsername(),true);
    ArrayList<EvercamCamera> evercamCameras=new ArrayList<EvercamCamera>();
    for (    io.evercam.Camera camera : cameras) {
      evercamCameras.add(new EvercamCamera().convertFromEvercam(camera));
    }
    Log.d(TAG,""String_Node_Str"");
    for (    EvercamCamera camera : evercamCameras) {
      if (!AppData.evercamCameraList.contains(camera)) {
        updateDB=true;
        break;
      }
    }
    Log.d(TAG,""String_Node_Str"");
    if (!updateDB) {
      for (      EvercamCamera camera : AppData.evercamCameraList) {
        if (!evercamCameras.contains(camera)) {
          updateDB=true;
          break;
        }
      }
    }
    Log.d(TAG,""String_Node_Str"");
    if (updateDB) {
      reload=true;
      AppData.evercamCameraList=evercamCameras;
      DbCamera dbCamera=new DbCamera(camerasActivity);
      dbCamera.deleteCameraByOwner(user.getUsername());
      for (      EvercamCamera camera : AppData.evercamCameraList) {
        dbCamera.addCamera(camera);
      }
    }
    return true;
  }
 catch (  EvercamException e) {
    Log.e(TAG,e.getMessage());
  }
  return false;
}","@Override protected Boolean doInBackground(Void... params){
  try {
    boolean updateDB=false;
    Log.d(TAG,""String_Node_Str"");
    ArrayList<Camera> cameras=User.getCameras(user.getUsername(),true);
    ArrayList<EvercamCamera> evercamCameras=new ArrayList<EvercamCamera>();
    for (    io.evercam.Camera camera : cameras) {
      evercamCameras.add(new EvercamCamera().convertFromEvercam(camera));
    }
    Log.d(TAG,""String_Node_Str"");
    for (    EvercamCamera camera : evercamCameras) {
      if (!AppData.evercamCameraList.contains(camera)) {
        updateDB=true;
        break;
      }
    }
    Log.d(TAG,""String_Node_Str"");
    if (!updateDB) {
      for (      EvercamCamera camera : AppData.evercamCameraList) {
        if (!evercamCameras.contains(camera)) {
          updateDB=true;
          break;
        }
      }
    }
    Log.d(TAG,""String_Node_Str"");
    if (updateDB) {
      reload=true;
      AppData.evercamCameraList=evercamCameras;
      DbCamera dbCamera=new DbCamera(camerasActivity);
      dbCamera.deleteCameraByOwner(user.getUsername());
      Iterator<EvercamCamera> iterator=AppData.evercamCameraList.iterator();
      while (iterator.hasNext()) {
        dbCamera.addCamera(iterator.next());
      }
    }
    return true;
  }
 catch (  EvercamException e) {
    Log.e(TAG,e.getMessage());
  }
  return false;
}",0.9600301659125188
34152,"@Override public void onSlideMenuItemClick(int itemId){
  try {
switch (itemId) {
case R.id.slidemenu_logout:
      new LogoutTask(CamerasActivity.this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    break;
case R.id.slidemenu_about:
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      startActivity(new Intent(CamerasActivity.this,AboutDialog.class));
    }
  }
,slideoutMenuAnimationTime);
break;
case R.id.slidemenu_settings:
new Handler().postDelayed(new Runnable(){
@Override public void run(){
  startActivity(new Intent(CamerasActivity.this,CameraPrefsActivity.class));
}
}
,slideoutMenuAnimationTime);
break;
case R.id.slidemenu_manage:
new Handler().postDelayed(new Runnable(){
@Override public void run(){
startActivity(new Intent(CamerasActivity.this,ManageAccountsActivity.class));
isUsersAccountsActivityStarted=true;
}
}
,slideoutMenuAnimationTime);
break;
}
}
 catch (Exception e) {
Log.e(TAG,e.toString(),e);
UIUtils.getAlertDialog(this,""String_Node_Str"",""String_Node_Str"" + e.toString());
}
}","@Override public void onSlideMenuItemClick(int itemId){
  try {
    if (slideMenu.isShown()) {
      slideMenu.hide();
    }
switch (itemId) {
case R.id.slidemenu_logout:
      logOutUser();
    break;
case R.id.slidemenu_about:
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      startActivity(new Intent(CamerasActivity.this,AboutDialog.class));
    }
  }
,slideoutMenuAnimationTime);
break;
case R.id.slidemenu_settings:
new Handler().postDelayed(new Runnable(){
@Override public void run(){
  startActivity(new Intent(CamerasActivity.this,CameraPrefsActivity.class));
}
}
,slideoutMenuAnimationTime);
break;
case R.id.slidemenu_manage:
new Handler().postDelayed(new Runnable(){
@Override public void run(){
startActivity(new Intent(CamerasActivity.this,ManageAccountsActivity.class));
isUsersAccountsActivityStarted=true;
}
}
,slideoutMenuAnimationTime);
break;
}
}
 catch (Exception e) {
Log.e(TAG,e.toString(),e);
UIUtils.getAlertDialog(this,""String_Node_Str"",""String_Node_Str"" + e.toString());
}
}",0.9227076332213154
34153,"@Override protected Boolean doInBackground(Void... params){
  try {
    ApiKeyPair userKeyPair=API.requestUserKeyPairFromEvercam(username,password);
    String userApiKey=userKeyPair.getApiKey();
    String userApiId=userKeyPair.getApiId();
    API.setUserKeyPair(userApiKey,userApiId);
    User evercamUser=new User(username);
    newUser=new AppUser();
    newUser.setUsername(username);
    newUser.setPassword(password);
    newUser.setIsDefault(true);
    newUser.setCountry(evercamUser.getCountry());
    newUser.setEmail(evercamUser.getEmail());
    newUser.setApiKey(userApiKey);
    newUser.setApiId(userApiId);
    return true;
  }
 catch (  EvercamException e) {
    Log.e(TAG,e.toString());
    errorMessage=e.getMessage();
  }
  return false;
}","@Override protected Boolean doInBackground(Void... params){
  Log.v(TAG,""String_Node_Str"");
  try {
    ApiKeyPair userKeyPair=API.requestUserKeyPairFromEvercam(username,password);
    String userApiKey=userKeyPair.getApiKey();
    String userApiId=userKeyPair.getApiId();
    API.setUserKeyPair(userApiKey,userApiId);
    Log.v(TAG,""String_Node_Str"");
    User evercamUser=new User(username);
    Log.v(TAG,""String_Node_Str"");
    newUser=new AppUser();
    newUser.setUsername(username);
    newUser.setPassword(password);
    newUser.setIsDefault(true);
    newUser.setCountry(evercamUser.getCountry());
    newUser.setEmail(evercamUser.getEmail());
    newUser.setApiKey(userApiKey);
    newUser.setApiId(userApiId);
    Log.v(TAG,""String_Node_Str"");
    return true;
  }
 catch (  EvercamException e) {
    Log.e(TAG,e.toString());
    errorMessage=e.getMessage();
  }
  return false;
}",0.9186893203883496
34154,"public void attemptLogin(){
  if (loginTask != null) {
    return;
  }
  usernameEdit.setError(null);
  passwordEdit.setError(null);
  username=usernameEdit.getText().toString();
  password=passwordEdit.getText().toString();
  boolean cancel=false;
  View focusView=null;
  if (TextUtils.isEmpty(password)) {
    passwordEdit.setError(getString(R.string.error_password_required));
    focusView=passwordEdit;
    cancel=true;
  }
 else   if (password.contains(""String_Node_Str"")) {
    passwordEdit.setError(getString(R.string.error_invalid_password));
    focusView=passwordEdit;
    cancel=true;
  }
  if (TextUtils.isEmpty(username)) {
    usernameEdit.setError(getString(R.string.error_username_required));
    focusView=usernameEdit;
    cancel=true;
  }
 else   if (username.contains(""String_Node_Str"")) {
    usernameEdit.setError(getString(R.string.please_use_username));
    focusView=usernameEdit;
    cancel=true;
  }
 else   if (username.contains(""String_Node_Str"")) {
    usernameEdit.setError(getString(R.string.error_invalid_username));
    focusView=usernameEdit;
    cancel=true;
  }
  if (cancel) {
    focusView.requestFocus();
  }
 else {
    showProgressDialog();
    loginTask=new LoginTask();
    loginTask.execute();
  }
}","public void attemptLogin(){
  if (loginTask != null) {
    return;
  }
  usernameEdit.setError(null);
  passwordEdit.setError(null);
  username=usernameEdit.getText().toString();
  password=passwordEdit.getText().toString();
  boolean cancel=false;
  View focusView=null;
  if (TextUtils.isEmpty(password)) {
    passwordEdit.setError(getString(R.string.error_password_required));
    focusView=passwordEdit;
    cancel=true;
  }
 else   if (password.contains(""String_Node_Str"")) {
    passwordEdit.setError(getString(R.string.error_invalid_password));
    focusView=passwordEdit;
    cancel=true;
  }
  if (TextUtils.isEmpty(username)) {
    usernameEdit.setError(getString(R.string.error_username_required));
    focusView=usernameEdit;
    cancel=true;
  }
 else   if (username.contains(""String_Node_Str"")) {
    usernameEdit.setError(getString(R.string.please_use_username));
    focusView=usernameEdit;
    cancel=true;
  }
 else   if (username.contains(""String_Node_Str"")) {
    usernameEdit.setError(getString(R.string.error_invalid_username));
    focusView=usernameEdit;
    cancel=true;
  }
  if (cancel) {
    focusView.requestFocus();
  }
 else {
    showProgressDialog();
    Log.v(TAG,""String_Node_Str"");
    loginTask=new LoginTask();
    loginTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
}",0.9664848012470773
34155,"@Override protected void onPostExecute(final Boolean success){
  loginTask=null;
  dismissProgressDialog();
  if (success) {
    DbAppUser dbUser=new DbAppUser(LoginActivity.this);
    if (dbUser.getAppUserByUsername(newUser.getUsername()) != null) {
      dbUser.deleteAppUserByUsername(newUser.getUsername());
    }
    dbUser.updateAllIsDefaultFalse();
    dbUser.addAppUser(newUser);
    AppData.defaultUser=newUser;
    PrefsManager.saveUserEmail(sharedPrefs,newUser.getEmail());
    startCamerasActivity();
  }
 else {
    Toast toast=Toast.makeText(getApplicationContext(),errorMessage,Toast.LENGTH_SHORT);
    toast.setGravity(Gravity.CENTER,0,0);
    toast.show();
    passwordEdit.setText(null);
  }
}","@Override protected void onPostExecute(final Boolean success){
  Log.v(TAG,""String_Node_Str"");
  loginTask=null;
  dismissProgressDialog();
  if (success) {
    DbAppUser dbUser=new DbAppUser(LoginActivity.this);
    if (dbUser.getAppUserByUsername(newUser.getUsername()) != null) {
      dbUser.deleteAppUserByUsername(newUser.getUsername());
    }
    dbUser.updateAllIsDefaultFalse();
    dbUser.addAppUser(newUser);
    AppData.defaultUser=newUser;
    PrefsManager.saveUserEmail(sharedPrefs,newUser.getEmail());
    startCamerasActivity();
  }
 else {
    Toast toast=Toast.makeText(getApplicationContext(),errorMessage,Toast.LENGTH_SHORT);
    toast.setGravity(Gravity.CENTER,0,0);
    toast.show();
    passwordEdit.setText(null);
  }
}",0.9779917469050894
34156,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Constants.isAppTrackingEnabled) {
    BugSenseHandler.initAndStartSession(SignUpActivity.this,Constants.bugsense_ApiKey);
  }
  setContentView(R.layout.activity_sign_up);
  initialPage();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Constants.isAppTrackingEnabled) {
    BugSenseHandler.initAndStartSession(SignUpActivity.this,Constants.bugsense_ApiKey);
  }
  setContentView(R.layout.activity_sign_up);
  setEvercamDeveloperKeypair();
  initialPage();
}",0.9485530546623794
34157,"@Override protected String doInBackground(String... urls){
  for (  String url : urls) {
    try {
      ArrayList<Cookie> cookies=new ArrayList<Cookie>();
      Drawable drawable=null;
      if (evercamCamera.camera.hasCredentials()) {
        Log.d(TAG,""String_Node_Str"" + evercamCamera.getCameraId() + ""String_Node_Str""+ url);
        drawable=Commons.getDrawablefromUrlAuthenticated1(url,evercamCamera.getUsername(),evercamCamera.getPassword(),cookies,15000);
      }
 else {
        Log.d(TAG,""String_Node_Str"" + evercamCamera.getCameraId());
        Camera camera=evercamCamera.camera;
        if (camera != null) {
          InputStream stream=camera.getSnapshotFromEvercam();
          drawable=Drawable.createFromStream(stream,""String_Node_Str"");
        }
      }
      if (cookies.size() > 0) {
        evercamCamera.cookies=cookies;
      }
      try {
        String extCachePath=context.getExternalFilesDir(null) + ""String_Node_Str"" + evercamCamera.getCameraId()+ ""String_Node_Str"";
        File extfile=new File(extCachePath);
        if (drawable != null) {
          Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();
          if (extfile.exists()) {
            extfile.delete();
          }
          extfile.createNewFile();
          FileOutputStream fos=new FileOutputStream(extfile);
          bitmap.compress(CompressFormat.PNG,0,fos);
          fos.close();
        }
      }
 catch (      Exception e) {
        Log.e(TAG,Log.getStackTraceString(e));
      }
      String pathString=context.getCacheDir() + ""String_Node_Str"" + evercamCamera.getCameraId()+ ""String_Node_Str"";
      File file=new File(pathString);
      if (drawable != null) {
        Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();
        if (file.exists()) {
          file.delete();
        }
        file.createNewFile();
        FileOutputStream fos=new FileOutputStream(file);
        bitmap.compress(CompressFormat.PNG,0,fos);
        fos.close();
      }
      if (file.exists() && file.length() > 0) {
        return pathString;
      }
 else       if (file.exists()) {
        file.delete();
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + evercamCamera.getCameraId() + ""String_Node_Str""+ evercamCamera.getName()+ ""String_Node_Str"");
        return null;
      }
 else {
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + evercamCamera.getCameraId() + ""String_Node_Str""+ evercamCamera.getName()+ ""String_Node_Str"");
        return null;
      }
    }
 catch (    OutOfMemoryError e) {
      Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
      return null;
    }
catch (    Exception e) {
      Log.e(TAG,e.toString());
    }
  }
  return null;
}","@Override protected String doInBackground(String... urls){
  for (  String url : urls) {
    try {
      ArrayList<Cookie> cookies=new ArrayList<Cookie>();
      Drawable drawable=null;
      if (evercamCamera.hasCredentials()) {
        drawable=Commons.getDrawablefromUrlAuthenticated1(url,evercamCamera.getUsername(),evercamCamera.getPassword(),cookies,15000);
      }
 else {
        Camera camera=Camera.getById(evercamCamera.getCameraId());
        if (camera != null) {
          InputStream stream=camera.getSnapshotFromEvercam();
          drawable=Drawable.createFromStream(stream,""String_Node_Str"");
        }
      }
      if (cookies.size() > 0) {
        evercamCamera.cookies=cookies;
      }
      try {
        String extCachePath=context.getExternalFilesDir(null) + ""String_Node_Str"" + evercamCamera.getCameraId()+ ""String_Node_Str"";
        File extfile=new File(extCachePath);
        if (drawable != null) {
          Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();
          if (extfile.exists()) {
            extfile.delete();
          }
          extfile.createNewFile();
          FileOutputStream fos=new FileOutputStream(extfile);
          bitmap.compress(CompressFormat.PNG,0,fos);
          fos.close();
        }
      }
 catch (      Exception e) {
        Log.e(TAG,Log.getStackTraceString(e));
      }
      String pathString=context.getCacheDir() + ""String_Node_Str"" + evercamCamera.getCameraId()+ ""String_Node_Str"";
      File file=new File(pathString);
      if (drawable != null) {
        Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();
        if (file.exists()) {
          file.delete();
        }
        file.createNewFile();
        FileOutputStream fos=new FileOutputStream(file);
        bitmap.compress(CompressFormat.PNG,0,fos);
        fos.close();
      }
      if (file.exists() && file.length() > 0) {
        return pathString;
      }
 else       if (file.exists()) {
        file.delete();
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + evercamCamera.getCameraId() + ""String_Node_Str""+ evercamCamera.getName()+ ""String_Node_Str"");
        return null;
      }
 else {
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + evercamCamera.getCameraId() + ""String_Node_Str""+ evercamCamera.getName()+ ""String_Node_Str"");
        return null;
      }
    }
 catch (    OutOfMemoryError e) {
      Log.e(TAG,e.toString() + ""String_Node_Str"" + Log.getStackTraceString(e));
      return null;
    }
catch (    Exception e) {
      Log.e(TAG,""String_Node_Str"" + Log.getStackTraceString(e));
    }
  }
  return null;
}",0.951813953488372
34158,"@Override public void nextTuple(){
  if (!loaded || pauseBetweenLoads > -1) {
    collector.emit(FLOW_LOADER_STREAM,new Values(flows));
    if (pauseBetweenLoads > -1) {
      try {
        Thread.sleep(pauseBetweenLoads);
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
  }
}","@Override public void nextTuple(){
  if (!loaded || pauseBetweenLoads > -1) {
    collector.emit(FLOW_LOADER_STREAM,new Values(flows));
    loaded=true;
    if (pauseBetweenLoads > -1) {
      try {
        Thread.sleep(pauseBetweenLoads);
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
  }
}",0.9748148148148148
34159,"public static void main(String args[]) throws AlreadyAliveException, InvalidTopologyException, IllegalAccessException, InstantiationException {
  Rule rule=new Rule(""String_Node_Str"").setCriteria(new Criteria(){
    @Override public boolean matches(    Event event){
      return event.get(""String_Node_Str"").getValue().equals(""String_Node_Str"");
    }
  }
).setEnabled(true).setExpirationPolicy(Policy.COUNT).setExpirationThreshold(1).setGroupBy(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""})).setTriggerPolicy(Policy.COUNT).setTriggerThreshold(1).setTriggerFunction(""String_Node_Str"");
  TopologyBuilder builder=new TopologyBuilder();
  builder.setSpout(""String_Node_Str"",new MockEventGeneratorSpout(10));
  builder.setSpout(""String_Node_Str"",new RuleLoaderSpout(rule,RULE_STREAM));
  builder.setBolt(""String_Node_Str"",new GroupingBolt(RULE_STREAM)).shuffleGrouping(""String_Node_Str"").allGrouping(""String_Node_Str"",RULE_STREAM);
  builder.setBolt(""String_Node_Str"",new WindowingAlertingBolt(RULE_STREAM)).fieldsGrouping(""String_Node_Str"",new Fields(""String_Node_Str"")).allGrouping(""String_Node_Str"",RULE_STREAM);
  StormTopology topology=builder.createTopology();
  Config conf=new Config();
  conf.setNumWorkers(20);
  conf.setMaxSpoutPending(5000);
  conf.setDebug(false);
  LocalCluster cluster=new LocalCluster();
  cluster.submitTopology(""String_Node_Str"",conf,topology);
}","public static void main(String args[]) throws AlreadyAliveException, InvalidTopologyException, IllegalAccessException, InstantiationException {
  Rule rule=new Rule(""String_Node_Str"").setCriteria(new Criteria(){
    @Override public boolean matches(    Event event){
      return event.get(""String_Node_Str"").getValue().equals(""String_Node_Str"");
    }
  }
).setEnabled(true).setEvictionPolicy(Policy.TIME).setEvictionThreshold(5).setGroupBy(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""})).setTriggerPolicy(Policy.COUNT).setTriggerThreshold(10).setTriggerFunction(""String_Node_Str"");
  TopologyBuilder builder=new TopologyBuilder();
  builder.setSpout(""String_Node_Str"",new MockEventGeneratorSpout(10));
  builder.setSpout(""String_Node_Str"",new RuleLoaderSpout(rule,RULE_STREAM));
  builder.setBolt(""String_Node_Str"",new GroupingBolt(RULE_STREAM)).shuffleGrouping(""String_Node_Str"").allGrouping(""String_Node_Str"",RULE_STREAM);
  builder.setBolt(""String_Node_Str"",new WindowingAlertingBolt(RULE_STREAM)).fieldsGrouping(""String_Node_Str"",new Fields(""String_Node_Str"")).allGrouping(""String_Node_Str"",RULE_STREAM);
  StormTopology topology=builder.createTopology();
  Config conf=new Config();
  conf.setNumWorkers(20);
  conf.setMaxSpoutPending(5000);
  conf.setDebug(false);
  LocalCluster cluster=new LocalCluster();
  cluster.submitTopology(""String_Node_Str"",conf,topology);
}",0.8939828080229226
34160,"@Override public void execute(Tuple tuple){
  if (ruleStream.equals(tuple.getSourceStreamId())) {
    Set<Rule> rules=(Set<Rule>)tuple.getValue(0);
    Set<String> rulesToRemove=new HashSet<String>();
    for (    Rule rule : rulesMap.values()) {
      if (!rules.contains(rule))       rulesToRemove.add(rule.getId());
    }
    for (    String ruleId : rulesToRemove) {
      rulesMap.remove(ruleId);
      buffers.remove(ruleId);
    }
    for (    Rule rule : rules) {
      if (rulesMap.get(rule.getId()) != null && !rulesMap.get(rule.getId()).equals(rule) || !rulesMap.containsKey(rule.getId())) {
        rulesMap.put(rule.getId(),rule);
        rule.initTriggerFunction();
        buffers.remove(rule.getId());
      }
    }
  }
 else   if (""String_Node_Str"".equals(tuple.getSourceComponent()) && ""String_Node_Str"".equals(tuple.getSourceStreamId())) {
    if (rulesMap.size() > 0) {
      for (      Rule rule : rulesMap.values()) {
        if (rule.getExpirationPolicy() == Policy.TIME) {
          for (          SlidingWindowBuffer buffer : buffers.get(rule.getId()).values())           buffer.ageExpire(rule.getExpirationThreshold());
        }
        if (rule.getTriggerPolicy() == Policy.TIME) {
          Map<String,SlidingWindowBuffer> buffersForRule=buffers.get(rule.getId());
          if (buffersForRule != null) {
            for (            SlidingWindowBuffer buffer : buffersForRule.values()) {
              if (buffer.getTriggerTicks() == rule.getTriggerThreshold() && (Boolean)rule.invokeTriggerFunction(buffer.getEvents())) {
                collector.emit(new Values(rule.getId(),buffer));
                System.out.println(""String_Node_Str"" + buffer);
                buffer.resetTriggerTicks();
              }
 else {
                buffer.incTriggerTicks();
              }
            }
          }
        }
      }
    }
  }
 else {
    if (rulesMap.size() > 0) {
      String ruleId=tuple.getString(0);
      String hash=tuple.getString(1);
      Event event=(Event)tuple.getValue(2);
      Rule rule=rulesMap.get(ruleId);
      Map<String,SlidingWindowBuffer> buffersForRule=buffers.get(rule.getId());
      SlidingWindowBuffer buffer;
      if (buffersForRule != null) {
        buffer=buffersForRule.get(hash);
        if (buffer != null) {
          if (rule.getExpirationPolicy() == Policy.COUNT) {
            if (buffer.size() == rule.getExpirationThreshold())             buffer.expire();
          }
        }
      }
 else {
        buffersForRule=new HashMap<String,SlidingWindowBuffer>();
        buffer=new SlidingWindowBuffer(hash);
        buffersForRule.put(hash,buffer);
        buffers.put(rule.getId(),buffersForRule);
      }
      buffer.add(event);
      if (rule.getTriggerPolicy() == Policy.COUNT && buffer.size() >= rule.getTriggerThreshold())       if ((Boolean)rule.invokeTriggerFunction(buffer.getEvents())) {
        collector.emit(new Values(ruleId,buffer));
        System.out.println(""String_Node_Str"" + buffer);
      }
    }
  }
}","@Override public void execute(Tuple tuple){
  if (ruleStream.equals(tuple.getSourceStreamId())) {
    Set<Rule> rules=(Set<Rule>)tuple.getValue(0);
    Set<String> rulesToRemove=new HashSet<String>();
    for (    Rule rule : rulesMap.values()) {
      if (!rules.contains(rule))       rulesToRemove.add(rule.getId());
    }
    for (    String ruleId : rulesToRemove) {
      rulesMap.remove(ruleId);
      buffers.remove(ruleId);
    }
    for (    Rule rule : rules) {
      if (rulesMap.get(rule.getId()) != null && !rulesMap.get(rule.getId()).equals(rule) || !rulesMap.containsKey(rule.getId())) {
        rulesMap.put(rule.getId(),rule);
        rule.initTriggerFunction();
        buffers.remove(rule.getId());
      }
    }
  }
 else   if (""String_Node_Str"".equals(tuple.getSourceComponent()) && ""String_Node_Str"".equals(tuple.getSourceStreamId())) {
    if (rulesMap.size() > 0) {
      for (      Rule rule : rulesMap.values()) {
        if (rule.getEvictionPolicy() == Policy.TIME) {
          for (          SlidingWindowBuffer buffer : buffers.get(rule.getId()).values())           buffer.timeEvict(rule.getEvictionThreshold());
        }
        if (rule.getTriggerPolicy() == Policy.TIME) {
          Map<String,SlidingWindowBuffer> buffersForRule=buffers.get(rule.getId());
          if (buffersForRule != null) {
            for (            SlidingWindowBuffer buffer : buffersForRule.values()) {
              if (buffer.getEvictionTicks() == rule.getTriggerThreshold() && (Boolean)rule.invokeTriggerFunction(buffer.getEvents())) {
                collector.emit(new Values(rule.getId(),buffer));
                System.out.println(""String_Node_Str"" + buffer);
                buffer.resetEvictionTicks();
              }
 else {
                buffer.incrEvictionTick();
              }
            }
          }
        }
      }
    }
  }
 else {
    if (rulesMap.size() > 0) {
      String ruleId=tuple.getString(0);
      String hash=tuple.getString(1);
      Event event=(Event)tuple.getValue(2);
      Rule rule=rulesMap.get(ruleId);
      Map<String,SlidingWindowBuffer> buffersForRule=buffers.get(rule.getId());
      SlidingWindowBuffer buffer;
      if (buffersForRule != null) {
        buffer=buffersForRule.get(hash);
        if (buffer != null) {
          if (rule.getEvictionPolicy() == Policy.COUNT) {
            if (buffer.size() == rule.getEvictionThreshold())             buffer.expire();
          }
        }
      }
 else {
        buffersForRule=new HashMap<String,SlidingWindowBuffer>();
        buffer=new SlidingWindowBuffer(hash);
        buffersForRule.put(hash,buffer);
        buffers.put(rule.getId(),buffersForRule);
      }
      buffer.add(event);
      if (rule.getTriggerPolicy() == Policy.COUNT)       buffer.incrTriggerTicks();
      if (buffer.getTriggerTicks() == rule.getTriggerThreshold()) {
        if ((Boolean)rule.invokeTriggerFunction(buffer.getEvents())) {
          collector.emit(new Values(ruleId,buffer));
          System.out.println(""String_Node_Str"" + buffer);
          buffer.resetTriggerTicks();
        }
      }
    }
  }
}",0.9418890162055984
34161,"public Rule setTriggerFunction(String groovyTriggerFunction){
  this.groovyTriggerFunction=TRIGGER_WRAPPER_BEGIN + ""String_Node_Str"" + id+ ""String_Node_Str""+ groovyTriggerFunction+ ""String_Node_Str"";
  return this;
}","public Rule setTriggerFunction(String groovyTriggerFunction){
  this.groovyTriggerFunction=TRIGGER_WRAPPER_BEGIN + ""String_Node_Str"" + id+ ""String_Node_Str""+ ""String_Node_Str""+ groovyTriggerFunction+ ""String_Node_Str"";
  return this;
}",0.9578713968957872
34162,"public Object invokeTriggerFunction(List<WindowBufferItem> events){
  return triggerFunction.invokeMethod(""String_Node_Str"",events);
}","public Object invokeTriggerFunction(List<WindowBufferItem> events){
  return triggerFunction.trigger(events);
}",0.889795918367347
34163,"public void initTriggerFunction(){
  ClassLoader parent=Thread.currentThread().getContextClassLoader();
  GroovyClassLoader loader=new GroovyClassLoader(parent);
  Class groovyClass=loader.parseClass(groovyTriggerFunction);
  try {
    triggerFunction=(GroovyObject)groovyClass.newInstance();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","public void initTriggerFunction(){
  ClassLoader parent=Thread.currentThread().getContextClassLoader();
  GroovyClassLoader loader=new GroovyClassLoader(parent);
  Class groovyClass=loader.parseClass(groovyTriggerFunction);
  try {
    triggerFunction=(TriggerFunction)groovyClass.newInstance();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9628610729023384
34164,"@Override public int hashCode(){
  int result=id != null ? id.hashCode() : 0;
  result=31 * result + (criteria != null ? criteria.hashCode() : 0);
  result=31 * result + (enabled ? 1 : 0);
  result=31 * result + (triggerPolicy != null ? triggerPolicy.hashCode() : 0);
  result=31 * result + (expirationPolicy != null ? expirationPolicy.hashCode() : 0);
  result=31 * result + triggerThreshold;
  result=31 * result + expirationThreshold;
  result=31 * result + (groupBy != null ? groupBy.hashCode() : 0);
  result=31 * result + (triggerFunction != null ? triggerFunction.hashCode() : 0);
  return result;
}","@Override public int hashCode(){
  int result=id != null ? id.hashCode() : 0;
  result=31 * result + (criteria != null ? criteria.hashCode() : 0);
  result=31 * result + (enabled ? 1 : 0);
  result=31 * result + (triggerPolicy != null ? triggerPolicy.hashCode() : 0);
  result=31 * result + (evictionPolicy != null ? evictionPolicy.hashCode() : 0);
  result=31 * result + triggerThreshold;
  result=31 * result + evictionThreshold;
  result=31 * result + (groupBy != null ? groupBy.hashCode() : 0);
  result=31 * result + (triggerFunction != null ? triggerFunction.hashCode() : 0);
  return result;
}",0.9800995024875622
34165,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Rule rule=(Rule)o;
  if (enabled != rule.enabled)   return false;
  if (expirationThreshold != rule.expirationThreshold)   return false;
  if (triggerThreshold != rule.triggerThreshold)   return false;
  if (criteria != null ? !criteria.equals(rule.criteria) : rule.criteria != null)   return false;
  if (expirationPolicy != rule.expirationPolicy)   return false;
  if (groupBy != null ? !groupBy.equals(rule.groupBy) : rule.groupBy != null)   return false;
  if (id != null ? !id.equals(rule.id) : rule.id != null)   return false;
  if (triggerFunction != null ? !triggerFunction.equals(rule.triggerFunction) : rule.triggerFunction != null)   return false;
  if (triggerPolicy != rule.triggerPolicy)   return false;
  return true;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Rule rule=(Rule)o;
  if (enabled != rule.enabled)   return false;
  if (evictionThreshold != rule.evictionThreshold)   return false;
  if (triggerThreshold != rule.triggerThreshold)   return false;
  if (criteria != null ? !criteria.equals(rule.criteria) : rule.criteria != null)   return false;
  if (evictionPolicy != rule.evictionPolicy)   return false;
  if (groupBy != null ? !groupBy.equals(rule.groupBy) : rule.groupBy != null)   return false;
  if (id != null ? !id.equals(rule.id) : rule.id != null)   return false;
  if (triggerFunction != null ? !triggerFunction.equals(rule.triggerFunction) : rule.triggerFunction != null)   return false;
  if (triggerPolicy != rule.triggerPolicy)   return false;
  return true;
}",0.9816091954022989
34166,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + id + '\''+ ""String_Node_Str""+ criteria+ ""String_Node_Str""+ enabled+ ""String_Node_Str""+ triggerPolicy+ ""String_Node_Str""+ expirationPolicy+ ""String_Node_Str""+ triggerThreshold+ ""String_Node_Str""+ expirationThreshold+ ""String_Node_Str""+ groupBy+ ""String_Node_Str""+ triggerFunction+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + id + '\''+ ""String_Node_Str""+ criteria+ ""String_Node_Str""+ enabled+ ""String_Node_Str""+ triggerPolicy+ ""String_Node_Str""+ evictionPolicy+ ""String_Node_Str""+ triggerThreshold+ ""String_Node_Str""+ evictionThreshold+ ""String_Node_Str""+ groupBy+ ""String_Node_Str""+ triggerFunction+ '}';
}",0.978319783197832
34167,"public GroovyObject getTriggerFunctionGroovy(){
  return triggerFunction;
}","public TriggerFunction getTriggerFunctionGroovy(){
  return triggerFunction;
}",0.8758169934640523
34168,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + groupedIndex + '\''+ ""String_Node_Str""+ events.size()+ ""String_Node_Str""+ events+ ""String_Node_Str""+ expirationTicks+ ""String_Node_Str""+ triggerTicks+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + groupedIndex + '\''+ ""String_Node_Str""+ events.size()+ ""String_Node_Str""+ events+ ""String_Node_Str""+ evictionTicks+ ""String_Node_Str""+ evictionTicks+ '}';
}",0.9523809523809524
34169,"public void testGetSummoners() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getSummoners(SUMMONER_NAME_1,SUMMONER_NAME_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetSummoners() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getSummoners(SUMMONER_NAME_1,SUMMONER_NAME_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8621291448516579
34170,"public void testGetMaps() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getMaps().get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetMaps() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getMaps().get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8391038696537678
34171,"public void testGetSummonerSpell() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getSummonerSpell(1,SpellData.ALL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetSummonerSpell() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getSummonerSpell(1,SpellData.ALL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8581687612208259
34172,"public void testGetMastery() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getMastery(4353,MasteryData.SANITIZED_DESCRIPTION).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetMastery() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getMastery(4353,MasteryData.SANITIZED_DESCRIPTION).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8635578583765112
34173,"public void testGetMatchDetails() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getMatch(handler.getMatchHistory(SUMMONER_ID_2).get(1,MINUTES).get(0).getMatchId()).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetMatchDetails() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getMatch(handler.getMatchHistory(SUMMONER_ID_2).get(1,MINUTES).get(0).getMatchId()).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8793893129770992
34174,"public void testGetStatSummary() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getStatsSummary(SUMMONER_ID_1,Season.SEASON3).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetStatSummary() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getStatsSummary(SUMMONER_ID_1,Season.SEASON3).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8630849220103987
34175,"public void testGetRunePages() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getRunePages(SUMMONER_ID_2).get(1,MINUTES);
    handler.getRunePagesMultipleUsers(SUMMONER_ID_2,SUMMONER_ID_1).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetRunePages() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getRunePages(SUMMONER_ID_2).get(1,MINUTES);
    handler.getRunePagesMultipleUsers(SUMMONER_ID_2,SUMMONER_ID_1).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.887624466571835
34176,"public void testGetChampions() throws Exception {
  try {
    handler.getChampions(ChampData.ALL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetChampions() throws Exception {
  try {
    handler.getChampions(ChampData.ALL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8337129840546698
34177,"public void testGetMasteries() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getMasteries(MasteryData.ALL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetMasteries() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getMasteries(MasteryData.ALL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8539741219963032
34178,"public void testGetItem() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getItem(2003,ItemData.CONSUME_ON_FULL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetItem() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getItem(2003,ItemData.CONSUME_ON_FULL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8561020036429873
34179,"public void testGetChampion() throws Exception {
  try {
    handler.getChampion(1,ChampData.ALL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetChampion() throws Exception {
  try {
    handler.getChampion(1,ChampData.ALL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8337129840546698
34180,"public void testGetItems() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getItemList(ItemData.ALL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetItems() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getItemList(ItemData.ALL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8495238095238096
34181,"public void testGetMasteryPages() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getMasteryPages(SUMMONER_ID_1).get(1,MINUTES);
    handler.getMasteryPagesMultipleUsers(SUMMONER_ID_1,SUMMONER_ID_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetMasteryPages() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getMasteryPages(SUMMONER_ID_1).get(1,MINUTES);
    handler.getMasteryPagesMultipleUsers(SUMMONER_ID_1,SUMMONER_ID_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8904299583911235
34182,"public void testGetChallenger() throws Exception {
  try {
    handler.getChallenger(QueueType.RANKED_SOLO_5x5).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetChallenger() throws Exception {
  try {
    handler.getChallenger(QueueType.RANKED_SOLO_5x5).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8394004282655246
34183,"public void testGetRunes() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getRuneList(ItemData.ALL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetRunes() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getRuneList(ItemData.ALL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8495238095238096
34184,"public void testGetBasicChampData() throws Exception {
  try {
    List<BasicChampData> euwBasicChampDatas=handler.getBasicChampData().get(1,MINUTES);
    assertNotNull(euwBasicChampDatas);
    assertFalse(euwBasicChampDatas.isEmpty());
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetBasicChampData() throws Exception {
  try {
    List<BasicChampData> euwBasicChampDatas=handler.getBasicChampData().get(1,MINUTES);
    assertNotNull(euwBasicChampDatas);
    assertFalse(euwBasicChampDatas.isEmpty());
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8905109489051095
34185,"public void testGetLeagues() throws Exception {
  try {
    handler.getLeagues(SUMMONER_ID_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetLeagues() throws Exception {
  try {
    handler.getLeagues(SUMMONER_ID_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8306264501160093
34186,"public void testGetRune() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getRune(5235,ItemData.HIDE_FROM_ALL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetRune() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getRune(5235,ItemData.HIDE_FROM_ALL).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8550458715596331
34187,"public void testGetRecentGames() throws Exception {
  try {
    handler.getRecentGames(SUMMONER_ID_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetRecentGames() throws Exception {
  try {
    handler.getRecentGames(SUMMONER_ID_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8322147651006712
34188,"public void testGetLeagueEntries() throws Exception {
  try {
    handler.getLeagueEntries(SUMMONER_ID_1).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetLeagueEntries() throws Exception {
  try {
    handler.getLeagueEntries(SUMMONER_ID_1).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8351648351648352
34189,"public void testGetLeagueEntriesByTeam() throws Exception {
  try {
    handler.getLeagueEntries(TEAM_ID).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetLeagueEntriesByTeam() throws Exception {
  try {
    handler.getLeagueEntries(TEAM_ID).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8351648351648352
34190,"public void testGetVersions() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getVersions().get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetVersions() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getVersions().get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8441814595660749
34191,"public void testGetFeaturedGames(){
  handler.featuredGamesHandler.getFeaturedGames();
}","public void testGetFeaturedGames(){
  try {
    handler.featuredGamesHandler.getFeaturedGames();
  }
 catch (  RuntimeException ex) {
    if (throwForward(ex)) {
      throw ex;
    }
  }
}",0.6353790613718412
34192,"public void testGetNames() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getSummonerName(SUMMONER_ID_2).get(1,MINUTES);
    handler.getSummonerNames(SUMMONER_ID_1,SUMMONER_ID_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetNames() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getSummonerName(SUMMONER_ID_2).get(1,MINUTES);
    handler.getSummonerNames(SUMMONER_ID_1,SUMMONER_ID_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8843338213762811
34193,"public void testGetLeaguesByTeam() throws Exception {
  try {
    handler.getLeagues(TEAM_ID).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetLeaguesByTeam() throws Exception {
  try {
    handler.getLeagues(TEAM_ID).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8306264501160093
34194,"public void testGetRealm() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getRealm().get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetRealm() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getRealm().get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8404040404040404
34195,"public void testGetLocalizedMessages() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getLocalizedMessages().get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetLocalizedMessages() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getLocalizedMessages().get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.85451197053407
34196,"public void testGetRankedStats() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getRankedStats(SUMMONER_ID_1).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetRankedStats() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getRankedStats(SUMMONER_ID_1).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8550458715596331
34197,"public void testGetTeams() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getTeams(SUMMONER_ID_1).get(1,MINUTES);
    handler.getTeams(TEAM_ID).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetTeams() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getTeams(SUMMONER_ID_1).get(1,MINUTES);
    handler.getTeams(TEAM_ID).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8711256117455138
34198,"public void testGetSummoner() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getSummoner(SUMMONER_NAME_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetSummoner() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getSummoner(SUMMONER_NAME_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8528864059590316
34199,"public void testGetSummonerSpells() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getSummonerSpells(SpellData.COOLDOWN_BURN).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetSummonerSpells() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getSummonerSpells(SpellData.COOLDOWN_BURN).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8630849220103987
34200,"public void testGetFreeToPlayChampions() throws Exception {
  try {
    Future<List<BasicChampData>> ftpChamps=handler.getFreeToPlayChampions();
    assertNotNull(ftpChamps.get(1,MINUTES));
    assertEquals((ftpChamps.get()).size(),10);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetFreeToPlayChampions() throws Exception {
  try {
    Future<List<BasicChampData>> ftpChamps=handler.getFreeToPlayChampions();
    assertNotNull(ftpChamps.get(1,MINUTES));
    assertEquals((ftpChamps.get()).size(),10);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8905109489051095
34201,"public void testGetSummonersById() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getSummoners(SUMMONER_ID_1,SUMMONER_ID_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetSummonersById() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getSummoners(SUMMONER_ID_1,SUMMONER_ID_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8621291448516579
34202,"public void testGetMatchHistory() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getMatchHistory(SUMMONER_ID_1).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetMatchHistory() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getMatchHistory(SUMMONER_ID_1).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8561020036429873
34203,"public void testGetChampionBasicData() throws Exception {
  try {
    handler.getBasicChampData(1).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetChampionBasicData() throws Exception {
  try {
    handler.getBasicChampData(1).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8299319727891157
34204,"public void testGetSummonerById() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getSummoner(SUMMONER_ID_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetSummonerById() throws InterruptedException, TimeoutException, ExecutionException {
  try {
    handler.getSummoner(SUMMONER_ID_2).get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8539741219963032
34205,"public void testGetShards() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getShards().get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetShards() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getShards().get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8416833667334669
34206,"public void testGetLocales() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getLocales().get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (ex.getErrorType().code < 500 || ex.getErrorType().code > 599)     throw ex;
  }
}","public void testGetLocales() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    handler.getLocales().get(1,MINUTES);
  }
 catch (  RequestException ex) {
    if (isNotServerside(ex))     throw ex;
  }
}",0.8429423459244533
34207,"/** 
 * Open the request to the web target and returns an InputStreamReader for the message body
 * @param target the web target to access
 * @return the reader for the message body
 */
@SneakyThrows(IOException.class) private InputStreamReader $(WebTarget target){
  Response response=target.request().accept(MediaType.APPLICATION_JSON_TYPE).acceptEncoding(""String_Node_Str"").get();
  if (response.getStatus() != 200) {
    throw new RequestException(response.getStatus(),RequestException.ErrorType.getByCode(response.getStatus()));
  }
  if (response.getHeaderString(""String_Node_Str"").equals(""String_Node_Str"")) {
    return new InputStreamReader(new GZIPInputStream((java.io.InputStream)response.getEntity()));
  }
 else {
    return new InputStreamReader((java.io.InputStream)response.getEntity());
  }
}","/** 
 * Open the request to the web target and returns an InputStreamReader for the message body
 * @param target the web target to access
 * @return the reader for the message body
 */
@SneakyThrows(IOException.class) private InputStreamReader $(WebTarget target){
  Response response=target.request().accept(MediaType.APPLICATION_JSON_TYPE).acceptEncoding(""String_Node_Str"").get();
  if (response.getStatus() != 200) {
    throw new RequestException(response.getStatus(),RequestException.ErrorType.getByCode(response.getStatus()));
  }
  String encoding=response.getHeaderString(""String_Node_Str"");
  if (encoding != null && encoding.equals(""String_Node_Str"")) {
    return new InputStreamReader(new GZIPInputStream((java.io.InputStream)response.getEntity()));
  }
 else {
    return new InputStreamReader((java.io.InputStream)response.getEntity());
  }
}",0.9663865546218487
34208,"public List<Object> getPendingInvitations(){
  return client.sendRpcAndWait(SERVICE,""String_Node_Str"");
}","/** 
 * Retrieve all currently pending invitations. Invitations are pending if the user has neither accepted nor declined.
 * @return The pending invitations
 */
public List<Object> getPendingInvitations(){
  return client.sendRpcAndWait(SERVICE,""String_Node_Str"");
}",0.5645161290322581
34209,"public LobbyStatus getLobbyStatus(){
  return client.sendRpcAndWait(SERVICE,""String_Node_Str"");
}","/** 
 * Retrieve the lobby status for the current team lobby
 * @return The lobby status
 */
public LobbyStatus getLobbyStatus(){
  return client.sendRpcAndWait(SERVICE,""String_Node_Str"");
}",0.6759581881533101
34210,"public void leave(){
  client.sendRpc(SERVICE,""String_Node_Str"");
}","/** 
 * Leave the current lobby.
 */
public void leave(){
  client.sendRpc(SERVICE,""String_Node_Str"");
}",0.783625730994152
34211,"public LobbyStatus createArrangedBotTeamLobby(double queueId,BotDifficulty difficulty){
  return client.sendRpcAndWait(SERVICE,""String_Node_Str"",difficulty);
}","/** 
 * Create a premade team lobby for bot games
 * @param queueId The target queue
 * @param difficulty The difficulty of the bots
 * @return The lobby status
 */
public LobbyStatus createArrangedBotTeamLobby(long queueId,BotDifficulty difficulty){
  return client.sendRpcAndWait(SERVICE,""String_Node_Str"",queueId,difficulty);
}",0.6257668711656442
34212,"public void decline(String inviteId){
  client.sendRpc(SERVICE,""String_Node_Str"",inviteId);
}","/** 
 * Decline an invitation
 * @param inviteId The id of the invitation (transmitted via {@link net.boreeas.riotapi.com.riotgames.platform.gameinvite.contract.InvitationRequest})
 */
public void decline(String inviteId){
  client.sendRpc(SERVICE,""String_Node_Str"",inviteId);
}",0.5013477088948787
34213,"public void transferOwnership(double summonerId){
  client.sendRpc(SERVICE,""String_Node_Str"",summonerId);
}","/** 
 * Transfer lobby ownership to the target user
 * @param summonerId The id of the summoner
 */
public void transferOwnership(long summonerId){
  client.sendRpc(SERVICE,""String_Node_Str"",summonerId);
}",0.6474358974358975
34214,"public void invite(double summonerId){
  client.sendRpc(SERVICE,""String_Node_Str"",summonerId);
}","/** 
 * Invite the target user to the current lobby.
 * @param summonerId The id of the summoner
 */
public void invite(long summonerId){
  client.sendRpc(SERVICE,""String_Node_Str"",summonerId);
}",0.6254295532646048
34215,"public LobbyStatus createGroupFinderLobby(double gameMode,String uuid){
  return client.sendRpcAndWait(SERVICE,""String_Node_Str"",gameMode,uuid);
}","/** 
 * Create a groupfinder lobby
 * @param queueId The target queue
 * @param uuid The uuid for this lobby
 * @return The lobby status
 */
public LobbyStatus createGroupFinderLobby(long queueId,String uuid){
  return client.sendRpcAndWait(SERVICE,""String_Node_Str"",queueId,uuid);
}",0.5734265734265734
34216,"public LobbyStatus createArrangedTeamLobby(double queueId){
  return client.sendRpcAndWait(SERVICE,""String_Node_Str"",queueId);
}","/** 
 * Create a premade team lobby
 * @param queueId The target queue
 * @return The lobby status
 */
public LobbyStatus createArrangedTeamLobby(long queueId){
  return client.sendRpcAndWait(SERVICE,""String_Node_Str"",queueId);
}",0.6834733893557423
34217,"public void grantInvitePrivileges(double summonerId){
  client.sendRpc(SERVICE,""String_Node_Str"",summonerId);
}","/** 
 * Grant invite privileges to the target summoner
 * @param summonerId The id of the summoner
 */
public void grantInvitePrivileges(long summonerId){
  client.sendRpc(SERVICE,""String_Node_Str"",summonerId);
}",0.6501547987616099
34218,"public LobbyStatus accept(String inviteId){
  return client.sendRpcAndWait(SERVICE,""String_Node_Str"",inviteId);
}","/** 
 * Accept a game invitation.
 * @param inviteId The id of the invitation (transmitted via {@link net.boreeas.riotapi.com.riotgames.platform.gameinvite.contract.InvitationRequest})
 * @return The lobby status
 */
public LobbyStatus accept(String inviteId){
  return client.sendRpcAndWait(SERVICE,""String_Node_Str"",inviteId);
}",0.510158013544018
34219,"public RequestException(int responseCode,ErrorType error){
  super(responseCode + ""String_Node_Str"" + error+ ""String_Node_Str"");
  this.error=error;
  this.code=code;
}","public RequestException(int responseCode,ErrorType error){
  super(responseCode + ""String_Node_Str"" + error+ ""String_Node_Str"");
  this.error=error;
  this.code=responseCode;
}",0.9709302325581396
34220,"/** 
 * <p> Retrieves detailed information about the specified shard. </p><br> This method does not count towards your rate limit.
 * @param shard The target region
 * @return A list of shard infomation.
 * @see <a href=""https://developer.riotgames.com/api/methods#!/835/2938"">Official API Documentation</a>
 */
public ShardStatus getShardStatus(Shard shard){
  WebTarget tgt=statusTarget.path(shard.name);
  return gson.fromJson($(tgt),ShardStatus.class);
}","/** 
 * <p> Retrieves detailed information about the specified shard. </p><br> This method does not count towards your rate limit.
 * @param shard The target region
 * @return A list of shard infomation.
 * @see <a href=""https://developer.riotgames.com/api/methods#!/835/2938"">Official API Documentation</a>
 */
public ShardStatus getShardStatus(Shard shard){
  System.out.println(""String_Node_Str"" + shard.name);
  WebTarget tgt=statusTarget.path(shard.name);
  return gson.fromJson($(tgt),ShardStatus.class);
}",0.9443298969072164
34221,"public void testGetShardStatus() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    List<ShardData> shardDatas=handler.getShards().get(1,MINUTES);
    for (    ShardData data : shardDatas) {
      handler.getShardStatus(Shard.get(data.getSlug()));
    }
  }
 catch (  RequestException ex) {
    if (ex.getErrorType() == null)     System.out.println(ex.getErrorCode());
    if (ex.getErrorCode() < 500 || ex.getErrorCode() > 599)     throw ex;
  }
}","public void testGetShardStatus() throws InterruptedException, ExecutionException, TimeoutException {
  try {
    List<ShardData> shardDatas=handler.getShards().get(1,MINUTES);
    for (    ShardData data : shardDatas) {
      System.out.println(data);
      handler.getShardStatus(Shard.get(data.getSlug()));
    }
  }
 catch (  RequestException ex) {
    if (ex.getErrorType() == null)     System.out.println(""String_Node_Str"" + ex.getErrorCode());
    if (ex.getErrorCode() < 500 || ex.getErrorCode() > 599)     throw ex;
  }
}",0.94831013916501
34222,"@Override public void serialize(String val,DataOutputStream out) throws IOException {
  writer.serializeAmf3(val.length() << 1 | 1);
  out.write(val.getBytes(""String_Node_Str""));
}","@Override public void serialize(String val,DataOutputStream out) throws IOException {
  byte[] data=val.getBytes(""String_Node_Str"");
  writer.serializeAmf3(data.length << 1 | 1);
  out.write(data);
}",0.6701846965699209
34223,"public GameUpdateTask submit(InProgressGame game,Consumer<Exception> errorCallback){
  GameUpdateTask task=new GameUpdateTask(game,errorCallback);
  pool.schedule(() -> task.run(),10,TimeUnit.MILLISECONDS);
  ScheduledFuture<?> self=pool.scheduleAtFixedRate(task,game.getLastChunkInfo().getNextAvailableChunk(),game.getChunkInterval(),TimeUnit.MILLISECONDS);
  task.setSelf(self);
  return task;
}","public GameUpdateTask submit(InProgressGame game,Consumer<Exception> errorCallback){
  GameUpdateTask task=new GameUpdateTask(game,errorCallback);
  pool.schedule(() -> task.run(),0,TimeUnit.MILLISECONDS);
  ScheduledFuture<?> self=pool.scheduleAtFixedRate(task,game.getLastChunkInfo().getNextAvailableChunk(),game.getChunkInterval(),TimeUnit.MILLISECONDS);
  task.setSelf(self);
  return task;
}",0.9987389659520808
34224,"private void pullNewChunks(int maxId){
  log.debug(""String_Node_Str"" + game.getGameId() + ""String_Node_Str""+ (maxId - game.getLastAvailableChunk())+ ""String_Node_Str""+ (game.getLastAvailableChunk() + 1)+ ""String_Node_Str""+ maxId+ ""String_Node_Str"");
  for (int id=game.getLastAvailableChunk() + 1; id <= maxId; id++) {
    pullChunk(id);
  }
}","private void pullNewChunks(int maxId){
  for (int id=game.getLastAvailableChunk() + 1; id <= maxId; id++) {
    pullChunk(id);
  }
}",0.5557894736842105
34225,"private void doRetriesChunk(){
  Set<Integer> retriesExceeded=new HashSet<>();
  Set<Integer> retrySuccessful=new HashSet<>();
  for (  Map.Entry<Integer,Integer> retryData : retriesChunks.entrySet()) {
    retryChunk(retriesExceeded,retrySuccessful,retryData.getKey(),retryData.getValue());
  }
  if (!retriesExceeded.isEmpty()) {
    for (    int i : retriesExceeded) {
      retriesChunks.remove(i);
      if (onChunkFailed != null) {
        onChunkFailed.accept(i);
      }
    }
    throw new RequestException(""String_Node_Str"" + retriesExceeded);
  }
  if (!retrySuccessful.isEmpty()) {
    retrySuccessful.forEach(retriesChunks::remove);
  }
}","private void doRetriesChunk(){
  Set<Integer> retriesExceeded=new HashSet<>();
  Set<Integer> retrySuccessful=new HashSet<>();
  for (  Map.Entry<Integer,Integer> retryData : retriesChunks.entrySet()) {
    retryChunk(retriesExceeded,retrySuccessful,retryData.getKey(),retryData.getValue());
  }
  if (!retriesExceeded.isEmpty()) {
    for (    int i : retriesExceeded) {
      retriesChunks.remove(i);
      if (onChunkFailed != null) {
        onChunkFailed.accept(i);
      }
    }
  }
  if (!retrySuccessful.isEmpty()) {
    retrySuccessful.forEach(retriesChunks::remove);
  }
}",0.9440389294403893
34226,"private void doRetriesKeyframes(){
  Set<Integer> retriesExceeded=new HashSet<>();
  Set<Integer> retrySuccessful=new HashSet<>();
  for (  Map.Entry<Integer,Integer> retryData : retriesKeyframes.entrySet()) {
    retryKeyframe(retriesExceeded,retrySuccessful,retryData.getKey(),retryData.getValue());
  }
  if (!retriesExceeded.isEmpty()) {
    for (    int i : retriesExceeded) {
      retriesKeyframes.remove(i);
      if (onKeyframePulled != null) {
        onKeyframeFailed.accept(i);
      }
    }
    throw new RequestException(""String_Node_Str"" + retriesExceeded);
  }
  if (!retrySuccessful.isEmpty()) {
    retrySuccessful.forEach(retriesKeyframes::remove);
  }
}","private void doRetriesKeyframes(){
  Set<Integer> retriesExceeded=new HashSet<>();
  Set<Integer> retrySuccessful=new HashSet<>();
  for (  Map.Entry<Integer,Integer> retryData : retriesKeyframes.entrySet()) {
    retryKeyframe(retriesExceeded,retrySuccessful,retryData.getKey(),retryData.getValue());
  }
  if (!retriesExceeded.isEmpty()) {
    for (    int i : retriesExceeded) {
      retriesKeyframes.remove(i);
      if (onKeyframePulled != null) {
        onKeyframeFailed.accept(i);
      }
    }
  }
  if (!retrySuccessful.isEmpty()) {
    retrySuccessful.forEach(retriesKeyframes::remove);
  }
}",0.9459671104150352
34227,"public static ErrorType getByCode(int code){
switch (code) {
case 400:
    return BAD_REQUEST;
case 401:
  return UNAUTHORIZED;
case 404:
return NOT_FOUND;
case 429:
return RATE_LIMIT_EXCEEDED;
case 500:
return INTERNAL_SERVER_ERROR;
case 503:
return SERVICE_UNAVAILABLE;
default :
return null;
}
}","public static ErrorType getByCode(int code){
  for (  ErrorType type : values()) {
    if (type.code == code) {
      return type;
    }
  }
  return null;
}",0.4
34228,"public long getPosition(){
  return result.getPosition();
}","public long getPosition(){
  if (result != null) {
    return result.getPosition();
  }
  throw new IllegalStateException(""String_Node_Str"");
}",0.5841584158415841
34229,"public void run(){
  while (latch.getCount() > 0) {
    try {
      result=loginQueue.getAuthToken(user,password);
      if (result.getStatus() == AuthResult.Status.OK) {
        latch.countDown();
      }
 else {
        try {
          Thread.sleep(overrideDelay > 0 ? overrideDelay : result.getDelay());
        }
 catch (        InterruptedException ex) {
          throw new AccountManagementException(""String_Node_Str"",ex);
        }
      }
    }
 catch (    AccountManagementException ex) {
      this.ex=ex;
      isError=true;
      latch.countDown();
    }
  }
}","public void run(){
  while (latch.getCount() > 0) {
    try {
      result=loginQueue.getAuthToken(user,password);
      if (result.getStatus() == AuthResult.Status.OK) {
        latch.countDown();
      }
 else {
        try {
          Thread.sleep(overrideDelay > 0 ? overrideDelay : result.getDelay());
        }
 catch (        InterruptedException ex) {
          throw new AccountManagementException(""String_Node_Str"",ex);
        }
      }
    }
 catch (    AccountManagementException ex) {
      this.ex=ex;
      isError=true;
      latch.countDown();
    }
catch (    RequestException ex) {
      int type=ex.getErrorType().code;
      if ((type >= RequestException.ErrorType.CLOUDFLARE_GENERIC.code && type <= RequestException.ErrorType.CLOUDFLARE_SSL_HANDSHAKE_FAILED.code) && cloudflareErrorCounter < MAX_CLOUDFLARE_ERROR_RETRY) {
        cloudflareErrorCounter++;
        log.warn(""String_Node_Str"" + type + ""String_Node_Str""+ cloudflareErrorCounter+ ""String_Node_Str""+ MAX_CLOUDFLARE_ERROR_RETRY+ ""String_Node_Str"");
      }
 else {
        this.ex=ex;
        isError=true;
        latch.countDown();
      }
    }
  }
}",0.6701754385964912
34230,"public long getCurrentDelay(){
  return overrideDelay > 0 ? overrideDelay : result.getDelay();
}","public long getCurrentDelay(){
  if (overrideDelay > 0) {
    return overrideDelay;
  }
  if (result != null) {
    return result.getDelay();
  }
  throw new IllegalStateException(""String_Node_Str"");
}",0.5656565656565656
34231,"/** 
 * Serializes the specified object to amf3
 * @param obj The object to serialize
 * @param marker The type of the object to check for referencability
 * @throws IOException
 */
@SneakyThrows(value={InstantiationException.class,IllegalAccessException.class}) public void serializeAmf3(Object obj,Amf3Type marker) throws IOException {
  if (checkReferenceable(obj,marker)) {
    return;
  }
  Serialization context;
  if (amf3Serializers.containsKey(obj.getClass())) {
    amf3Serializers.get(obj.getClass()).serialize(obj,out);
  }
 else   if ((context=Util.searchClassHierarchy(obj.getClass(),Serialization.class)) != null) {
    Amf3ObjectSerializer serializer=context.amf3Serializer().newInstance();
    serializer.setTraitRefTable(traitRefTable);
    serializer.setTraitDefCache(traitDefCache);
    serializer.setWriter(this);
    serializer.serialize(obj,out);
  }
 else   if (obj.getClass().isArray()) {
    serializeArrayAmf3(obj);
  }
 else   if (obj instanceof Enum) {
    serializeAmf3(((Enum)obj).name());
  }
 else {
    Amf3ObjectSerializer serializer=new Amf3ObjectSerializer();
    serializer.setTraitRefTable(traitRefTable);
    serializer.setTraitDefCache(traitDefCache);
    serializer.setWriter(this);
    serializer.serialize(obj,out);
  }
  out.flush();
}","/** 
 * Serializes the specified object to amf3
 * @param obj The object to serialize
 * @param marker The type of the object to check for referencability
 * @throws IOException
 */
@SneakyThrows(value={InstantiationException.class,IllegalAccessException.class}) public void serializeAmf3(Object obj,Amf3Type marker) throws IOException {
  if (checkReferenceable(obj,marker)) {
    return;
  }
  Serialization context;
  if (amf3Serializers.containsKey(obj.getClass())) {
    amf3Serializers.get(obj.getClass()).serialize(obj,out);
  }
 else   if ((context=Util.searchClassHierarchy(obj.getClass(),Serialization.class)) != null && !context.deserializeOnly()) {
    Amf3ObjectSerializer serializer=context.amf3Serializer().newInstance();
    serializer.setTraitRefTable(traitRefTable);
    serializer.setTraitDefCache(traitDefCache);
    serializer.setWriter(this);
    serializer.serialize(obj,out);
  }
 else   if (obj.getClass().isArray()) {
    serializeArrayAmf3(obj);
  }
 else   if (obj instanceof Enum) {
    serializeAmf3(((Enum)obj).name());
  }
 else {
    Amf3ObjectSerializer serializer=new Amf3ObjectSerializer();
    serializer.setTraitRefTable(traitRefTable);
    serializer.setTraitDefCache(traitDefCache);
    serializer.setWriter(this);
    serializer.serialize(obj,out);
  }
  out.flush();
}",0.9884169884169884
34232,"@Override @SneakyThrows({NoSuchFieldException.class,IllegalAccessException.class}) public void serialize(Object o,DataOutputStream out) throws IOException {
  TraitDefinition traitDef;
  if ((traitDef=getCachedTraitDef(o)) != null) {
    writer.serializeAmf3(traitRefTable.get(traitDef) << 2 | 1);
  }
 else {
    traitDef=getTraitDefiniton(o);
    cacheTraitDef(o,traitDef);
    traitRefTable.put(traitDef,traitRefTable.size());
    writer.serializeAmf3(traitDef.getHeader());
    writer.serializeAmf3(traitDef.getName());
    for (    FieldRef field : traitDef.getStaticFields()) {
      writer.serializeAmf3(field.getSerializedName());
    }
  }
  if (traitDef.isExternalizable()) {
    System.out.println(""String_Node_Str"" + traitDef);
  }
  if (o instanceof Externalizable) {
    ((Externalizable)o).writeExternal(writer);
    return;
  }
 else   if (traitDef.isExternalizable()) {
    log.warn(""String_Node_Str"" + traitDef.getName() + ""String_Node_Str"");
  }
  for (  FieldRef ref : traitDef.getStaticFields()) {
    writer.encodeAmf3(getStaticField(o,ref));
  }
  if (traitDef.isDynamic()) {
    for (    FieldRef ref : traitDef.getDynamicFields()) {
      writer.serializeAmf3(ref.getSerializedName());
      writer.encodeAmf3(getDynamicField(o,ref));
    }
    writer.serializeAmf3(""String_Node_Str"");
  }
}","@Override @SneakyThrows({NoSuchFieldException.class,IllegalAccessException.class}) public void serialize(Object o,DataOutputStream out) throws IOException {
  TraitDefinition traitDef;
  if ((traitDef=getCachedTraitDef(o)) != null) {
    writer.serializeAmf3(traitRefTable.get(traitDef) << 2 | 1);
  }
 else {
    traitDef=getTraitDefiniton(o);
    cacheTraitDef(o,traitDef);
    traitRefTable.put(traitDef,traitRefTable.size());
    writer.serializeAmf3(traitDef.getHeader());
    writer.serializeAmf3(traitDef.getName());
    for (    FieldRef field : traitDef.getStaticFields()) {
      writer.serializeAmf3(field.getSerializedName());
    }
  }
  if (o instanceof Externalizable) {
    ((Externalizable)o).writeExternal(writer);
    return;
  }
 else   if (traitDef.isExternalizable()) {
    log.warn(""String_Node_Str"" + traitDef.getName() + ""String_Node_Str"");
  }
  for (  FieldRef ref : traitDef.getStaticFields()) {
    writer.encodeAmf3(getStaticField(o,ref));
  }
  if (traitDef.isDynamic()) {
    for (    FieldRef ref : traitDef.getDynamicFields()) {
      writer.serializeAmf3(ref.getSerializedName());
      writer.encodeAmf3(getDynamicField(o,ref));
    }
    writer.serializeAmf3(""String_Node_Str"");
  }
}",0.5959795033504138
34233,"public static ErrorType getByCode(int code){
switch (code) {
case 400:
    return BAD_REQUEST;
case 401:
  return UNAUTHORIZED;
case 404:
return NOT_FOUND;
case 421:
return RATE_LIMIT_EXCEEDED;
case 500:
return INTERNAL_SERVER_ERROR;
case 503:
return SERVICE_UNAVAILABLE;
default :
return null;
}
}","public static ErrorType getByCode(int code){
switch (code) {
case 400:
    return BAD_REQUEST;
case 401:
  return UNAUTHORIZED;
case 404:
return NOT_FOUND;
case 429:
return RATE_LIMIT_EXCEEDED;
case 500:
return INTERNAL_SERVER_ERROR;
case 503:
return SERVICE_UNAVAILABLE;
default :
return null;
}
}",0.9966442953020134
34234,"public RequestException(ErrorType error){
  super(error + ""String_Node_Str"");
  this.error=error;
}","public RequestException(int responseCode,ErrorType error){
  super(responseCode + ""String_Node_Str"" + error+ ""String_Node_Str"");
  this.error=error;
}",0.7871485943775101
34235,"public void testGetSummoners() throws InterruptedException {
  Thread.sleep(1500);
  handler.getSummoners(SUMMONER_NAME_1,SUMMONER_NAME_2);
}","public void testGetSummoners() throws InterruptedException {
  try {
    Thread.sleep(1500);
    handler.getSummoners(SUMMONER_NAME_1,SUMMONER_NAME_2);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.698019801980198
34236,"public void testGetSummonerSpell(){
  handler.getSummonerSpell(1,SpellData.ALL);
}","public void testGetSummonerSpell(){
  try {
    handler.getSummonerSpell(1,SpellData.ALL);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.5774647887323944
34237,"public void testGetMastery(){
  handler.getMastery(4353,MasteryData.SANITIZED_DESCRIPTION);
}","public void testGetMastery(){
  try {
    handler.getMastery(4353,MasteryData.SANITIZED_DESCRIPTION);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.6078431372549019
34238,"public void testGetStatSummary() throws InterruptedException {
  Thread.sleep(1500);
  handler.getStatsSummary(SUMMONER_ID_1,Season.SEASON3);
}","public void testGetStatSummary() throws InterruptedException {
  try {
    Thread.sleep(1500);
    handler.getStatsSummary(SUMMONER_ID_1,Season.SEASON3);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.7009803921568627
34239,"public void testGetRunePages() throws InterruptedException {
  Thread.sleep(1500);
  handler.getRunePages(SUMMONER_ID_2);
  handler.getRunePagesMultipleUsers(SUMMONER_ID_2,SUMMONER_ID_1);
}","public void testGetRunePages() throws InterruptedException {
  try {
    Thread.sleep(1500);
    handler.getRunePages(SUMMONER_ID_2);
    handler.getRunePagesMultipleUsers(SUMMONER_ID_2,SUMMONER_ID_1);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.7529880478087649
34240,"public void testGetChampions() throws Exception {
  handler.getChampions(ChampData.ALL);
}","public void testGetChampions() throws Exception {
  try {
    handler.getChampions(ChampData.ALL);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.6
34241,"public void testGetMasteries(){
  handler.getMasteries(MasteryData.ALL);
}","public void testGetMasteries(){
  try {
    handler.getMasteries(MasteryData.ALL);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.5522388059701493
34242,"public void testGetItem(){
  handler.getItem(2003,ItemData.CONSUME_ON_FULL);
}","public void testGetItem(){
  try {
    handler.getItem(2003,ItemData.CONSUME_ON_FULL);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.5652173913043478
34243,"public void testGetChampion() throws Exception {
  handler.getChampion(1,ChampData.ALL);
}","public void testGetChampion() throws Exception {
  try {
    handler.getChampion(1,ChampData.ALL);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.6
34244,"public void testGetItems(){
  handler.getItemList(ItemData.ALL);
}","public void testGetItems(){
  try {
    handler.getItemList(ItemData.ALL);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.5238095238095238
34245,"public void testGetMasteryPages() throws InterruptedException {
  Thread.sleep(1500);
  handler.getMasteryPages(SUMMONER_ID_1);
  handler.getMasteryPagesMultipleUsers(SUMMONER_ID_1,SUMMONER_ID_2);
}","public void testGetMasteryPages() throws InterruptedException {
  try {
    Thread.sleep(1500);
    handler.getMasteryPages(SUMMONER_ID_1);
    handler.getMasteryPagesMultipleUsers(SUMMONER_ID_1,SUMMONER_ID_2);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.7615384615384615
34246,"public void testGetChallenger() throws Exception {
  Thread.sleep(1500);
  handler.getChallenger(Queue.RANKED_SOLO_5v5);
}","public void testGetChallenger() throws Exception {
  try {
    Thread.sleep(1500);
    handler.getChallenger(Queue.RANKED_SOLO_5v5);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.6666666666666666
34247,"public void testGetRunes(){
  handler.getRuneList(ItemData.ALL);
}","public void testGetRunes(){
  try {
    handler.getRuneList(ItemData.ALL);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.5238095238095238
34248,"public void testGetBasicChampData() throws Exception {
  Thread.sleep(1500);
  List<BasicChampData> euwBasicChampDatas=handler.getBasicChampData();
  assertNotNull(euwBasicChampDatas);
  assertFalse(euwBasicChampDatas.isEmpty());
}","public void testGetBasicChampData() throws Exception {
  try {
    Thread.sleep(1500);
    List<BasicChampData> euwBasicChampDatas=handler.getBasicChampData();
    assertNotNull(euwBasicChampDatas);
    assertFalse(euwBasicChampDatas.isEmpty());
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.7857142857142857
34249,"public void testGetLeagues() throws Exception {
  Thread.sleep(1500);
  handler.getLeagues(SUMMONER_ID_2);
}","public void testGetLeagues() throws Exception {
  try {
    Thread.sleep(1500);
    handler.getLeagues(SUMMONER_ID_2);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.6390532544378699
34250,"public void testGetRune(){
  handler.getRune(5235,ItemData.HIDE_FROM_ALL);
}","public void testGetRune(){
  try {
    handler.getRune(5235,ItemData.HIDE_FROM_ALL);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.5588235294117647
34251,"public void testGetRecentGames() throws Exception {
  Thread.sleep(1500);
  handler.getRecentGames(SUMMONER_ID_2);
}","public void testGetRecentGames() throws Exception {
  try {
    Thread.sleep(1500);
    handler.getRecentGames(SUMMONER_ID_2);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.655367231638418
34252,"public void testGetLeagueEntries() throws Exception {
  Thread.sleep(1500);
  handler.getLeagueEntries(SUMMONER_ID_1);
}","public void testGetLeagueEntries() throws Exception {
  try {
    Thread.sleep(1500);
    handler.getLeagueEntries(SUMMONER_ID_1);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.6629834254143646
34253,"public void testGetLeagueEntriesByTeam() throws Exception {
  Thread.sleep(1500);
  handler.getLeagueEntriesByTeam(TEAM_ID);
}","public void testGetLeagueEntriesByTeam() throws Exception {
  try {
    Thread.sleep(1500);
    handler.getLeagueEntriesByTeam(TEAM_ID);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.6737967914438503
34254,"public void testGetNames() throws InterruptedException {
  Thread.sleep(1500);
  handler.getSummonerName(SUMMONER_ID_2);
  handler.getSummonerNames(SUMMONER_ID_1,SUMMONER_ID_2);
}","public void testGetNames() throws InterruptedException {
  try {
    Thread.sleep(1500);
    handler.getSummonerName(SUMMONER_ID_2);
    handler.getSummonerNames(SUMMONER_ID_1,SUMMONER_ID_2);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.7427385892116183
34255,"public void testGetLeaguesByTeam() throws Exception {
  Thread.sleep(1500);
  handler.getLeaguesByTeam(TEAM_ID);
}","public void testGetLeaguesByTeam() throws Exception {
  try {
    Thread.sleep(1500);
    handler.getLeaguesByTeam(TEAM_ID);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.6514285714285715
34256,"public void testGetRealm(){
  handler.getRealm();
}","public void testGetRealm(){
  try {
    handler.getRealm();
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.4594594594594595
34257,"public void testGetRankedStats() throws InterruptedException {
  Thread.sleep(1500);
  handler.getRankedStats(SUMMONER_ID_1);
}","public void testGetRankedStats() throws InterruptedException {
  try {
    Thread.sleep(1500);
    handler.getRankedStats(SUMMONER_ID_1);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.675531914893617
34258,"public void testGetTeams() throws InterruptedException {
  Thread.sleep(1500);
  handler.getTeams(SUMMONER_ID_1);
  handler.getTeams(TEAM_ID);
}","public void testGetTeams() throws InterruptedException {
  try {
    Thread.sleep(1500);
    handler.getTeams(SUMMONER_ID_1);
    handler.getTeams(TEAM_ID);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    System.out.println(ex.getMessage());
  }
}",0.6744730679156908
34259,"public void testGetSummoner() throws InterruptedException {
  Thread.sleep(1500);
  handler.getSummoner(SUMMONER_NAME_2);
}","public void testGetSummoner() throws InterruptedException {
  try {
    Thread.sleep(1500);
    handler.getSummoner(SUMMONER_NAME_2);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.6684782608695652
34260,"public void testGetSummonerSpells(){
  handler.getSummonerSpells(SpellData.COOLDOWN_BURN);
}","public void testGetSummonerSpells(){
  try {
    handler.getSummonerSpells(SpellData.COOLDOWN_BURN);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.6052631578947368
34261,"public void testGetFreeToPlayChampions() throws Exception {
  Thread.sleep(1500);
  assertNotNull(handler.getFreeToPlayChampions());
  assertEquals(handler.getFreeToPlayChampions().size(),10);
}","public void testGetFreeToPlayChampions() throws Exception {
  try {
    Thread.sleep(1500);
    assertNotNull(handler.getFreeToPlayChampions());
    assertEquals(handler.getFreeToPlayChampions().size(),10);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.7578125
34262,"public void testGetSummonersById() throws InterruptedException {
  Thread.sleep(1500);
  handler.getSummoners(SUMMONER_ID_1,SUMMONER_ID_2);
}","public void testGetSummonersById() throws InterruptedException {
  try {
    Thread.sleep(1500);
    handler.getSummoners(SUMMONER_ID_1,SUMMONER_ID_2);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.698019801980198
34263,"public void testGetChampionBasicData() throws Exception {
  Thread.sleep(1500);
  handler.getBasicChampData(1);
}","public void testGetChampionBasicData() throws Exception {
  try {
    Thread.sleep(1500);
    handler.getBasicChampData(1);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.6494252873563219
34264,"public void testGetSummonerById() throws InterruptedException {
  Thread.sleep(1500);
  handler.getSummoner(SUMMONER_ID_2);
}","public void testGetSummonerById() throws InterruptedException {
  try {
    Thread.sleep(1500);
    handler.getSummoner(SUMMONER_ID_2);
  }
 catch (  RequestException ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
  }
}",0.6720430107526881
34265,"public int describeContents(){
  return baseDescribeContents();
}","public int describeContents(){
  return 0;
}",0.7889908256880734
34266,"@Test public void testGet2() throws NoIdAnnotationFoundException, NoColumnAnnotationFoundException, IOException, SQLException {
  build();
  JdbcTemplateTool jtt=super.applicationContext.getBean(""String_Node_Str"",JdbcTemplateTool.class);
  Employee e=jtt.get(Person.class,1);
  assertThat(e.getName(),is(""String_Node_Str""));
}","@Test public void testGet2() throws NoIdAnnotationFoundException, NoColumnAnnotationFoundException, IOException, SQLException {
  build();
  JdbcTemplateTool jtt=super.applicationContext.getBean(""String_Node_Str"",JdbcTemplateTool.class);
  Person e=jtt.get(Person.class,1);
  assertThat(e.getName(),is(""String_Node_Str""));
}",0.9784615384615384
34267,"private boolean postBatchEvents(List<ByteArrayEntity> batch){
  final long NANOS_PER_SECOND=1000L * 1000L * 1000L;
  final long NANOS_PER_MILLI_SECOND=1000L * 1000L;
  int pickedUrlIdx;
  try (Timer.Context ctx=postTime.time()){
    long timeBeforePost=System.nanoTime();
    postCount.inc();
    if (roundRobin) {
      pickedUrlIdx=currentUrl;
    }
 else {
      pickedUrlIdx=leastResponseIdx(responseTime);
    }
    HttpPost post=new HttpPost(urls.get(pickedUrlIdx));
    if (roundRobin) {
      currentUrl=(currentUrl + 1) % urls.size();
    }
    post.setHeader(""String_Node_Str"",""String_Node_Str"");
    if (batchSize == 1 && batch.size() == 1) {
      post.setEntity(batch.get(0));
      batch.clear();
    }
 else {
      try {
        ByteArrayEntity packedEntities=ListSerializer.toByteArrayEntity(batch);
        post.setEntity(packedEntities);
        batch.clear();
      }
 catch (      InvalidMessageSizeException ex) {
        postFailure.inc();
        batch.clear();
        return false;
      }
    }
    CloseableHttpResponse response=client.execute(post);
    int statusCode=response.getStatusLine().getStatusCode();
    long timeAfterPost=System.nanoTime();
    if (statusCode >= 200 && statusCode < 300) {
      postSuccess.inc();
    }
 else {
      postFailure.inc();
    }
    responseTimestamp[pickedUrlIdx]=timeAfterPost;
    responseTime[pickedUrlIdx]=(timeAfterPost - timeBeforePost) + 2 * NANOS_PER_MILLI_SECOND;
    for (int i=0; i < responseTimestamp.length; ++i) {
      if ((timeAfterPost - responseTimestamp[i]) > responseDecayingHalflife * NANOS_PER_SECOND) {
        responseTimestamp[i]=timeAfterPost;
        responseTime[i]=responseTime[i] / 2;
      }
    }
    long currentTime=new Date().getTime();
    if (currentTime - lastReconnect > 10000) {
      lastReconnect=currentTime;
      response.close();
    }
 else {
      EntityUtils.consume(response.getEntity());
    }
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    postFailure.inc();
    return false;
  }
  return true;
}","private boolean postBatchEvents(List<ByteArrayEntity> batch){
  final long NANOS_PER_SECOND=1000L * 1000L * 1000L;
  final long NANOS_PER_MILLI_SECOND=1000L * 1000L;
  int pickedUrlIdx;
  try (Timer.Context ctx=postTime.time()){
    long timeBeforePost=System.nanoTime();
    postCount.inc();
    if (roundRobin) {
      pickedUrlIdx=currentUrl;
    }
 else {
      pickedUrlIdx=leastResponseIdx(responseTime);
    }
    HttpPost post=new HttpPost(urls.get(pickedUrlIdx));
    if (roundRobin) {
      currentUrl=(currentUrl + 1) % urls.size();
    }
    post.setHeader(""String_Node_Str"",""String_Node_Str"");
    responseTimestamp[pickedUrlIdx]=System.nanoTime();
    responseTime[pickedUrlIdx]=5 * NANOS_PER_SECOND;
    if (batchSize == 1 && batch.size() == 1) {
      post.setEntity(batch.get(0));
      batch.clear();
    }
 else {
      try {
        ByteArrayEntity packedEntities=ListSerializer.toByteArrayEntity(batch);
        post.setEntity(packedEntities);
        batch.clear();
      }
 catch (      InvalidMessageSizeException ex) {
        postFailure.inc();
        batch.clear();
        return false;
      }
    }
    CloseableHttpResponse response=client.execute(post);
    int statusCode=response.getStatusLine().getStatusCode();
    long timeAfterPost=System.nanoTime();
    if (statusCode >= 200 && statusCode < 300) {
      postSuccess.inc();
      responseTimestamp[pickedUrlIdx]=timeAfterPost;
      responseTime[pickedUrlIdx]=(timeAfterPost - timeBeforePost) + 2 * NANOS_PER_MILLI_SECOND;
    }
 else {
      postFailure.inc();
      responseTimestamp[pickedUrlIdx]=timeAfterPost;
      responseTime[pickedUrlIdx]=(timeAfterPost - timeBeforePost) + 5 * NANOS_PER_SECOND;
    }
    for (int i=0; i < responseTimestamp.length; ++i) {
      if ((timeAfterPost - responseTimestamp[i]) > responseDecayingHalflife * NANOS_PER_SECOND) {
        responseTimestamp[i]=timeAfterPost;
        responseTime[i]=responseTime[i] / 2;
      }
    }
    long currentTime=new Date().getTime();
    if (currentTime - lastReconnect > 10000) {
      lastReconnect=currentTime;
      response.close();
    }
 else {
      EntityUtils.consume(response.getEntity());
    }
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    postFailure.inc();
    return false;
  }
  return true;
}",0.8814327816821582
34268,"public static void main(String[] args) throws Exception {
  KafkaArgs spraynozzleArgs;
  try {
    spraynozzleArgs=CliFactory.parseArguments(KafkaArgs.class,args);
  }
 catch (  ArgumentValidationException e) {
    System.err.println(e.getMessage());
    return;
  }
  String zk=spraynozzleArgs.getZk();
  ZkClient zkClient=new ZkClient(zk,10000);
  Boolean spraynozzleHA=spraynozzleArgs.getIsHighlyAvailable();
  boolean buffering=spraynozzleArgs.getBuffering();
  String topic=spraynozzleArgs.getTopic();
  final List<String> urls=spraynozzleArgs.getUrls();
  final String cleanedUrl=url.get(0).replaceAll(""String_Node_Str"",""String_Node_Str"");
  final int threadCount=spraynozzleArgs.getThreadCount();
  final int partitionCount=spraynozzleArgs.getPartitionCount();
  final String filterClass=spraynozzleArgs.getFilterClass();
  final String filterClasspath=spraynozzleArgs.getFilterClasspath();
  final String filterClassArgs=spraynozzleArgs.getFilterClassArgs();
  final String statsClass=spraynozzleArgs.getStatsClass();
  final String statsClasspath=spraynozzleArgs.getStatsClasspath();
  final String statsClassArgs=spraynozzleArgs.getStatsClassArgs();
  String[] topics=topic.split(""String_Node_Str"");
  if (topics.length == 1) {
    System.out.println(""String_Node_Str"" + topic + ""String_Node_Str""+ zk+ ""String_Node_Str""+ urls);
  }
 else {
    System.out.println(""String_Node_Str"" + topic + ""String_Node_Str""+ zk+ ""String_Node_Str""+ urls);
  }
  if (spraynozzleHA) {
    String zkLeaderLatchFolderPath=""String_Node_Str"" + topics[0] + cleanedUrl;
    System.out.println(""String_Node_Str"");
    String spraynozzleName=""String_Node_Str"" + UUID.randomUUID();
    SpraynozzleLeaderLatch curatorClient=new SpraynozzleLeaderLatch(zk,zkLeaderLatchFolderPath,spraynozzleName);
    curatorClient.start();
    curatorClient.blockUntilisLeader();
    System.out.println(""String_Node_Str"" + spraynozzleName + ""String_Node_Str"");
  }
  if (!buffering) {
    clearZkPath(zkClient,""String_Node_Str"" + topics[0] + cleanedUrls);
  }
  Properties kafkaProps=new Properties();
  kafkaProps.put(""String_Node_Str"",zk);
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"" + topics[0] + cleanedUrl);
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProps.put(""String_Node_Str"",String.valueOf(2 * 1024 * 1024));
  ConsumerConfig consumerConfig=new ConsumerConfig(kafkaProps);
  ConsumerConnector consumerConnector=Consumer.createJavaConsumerConnector(consumerConfig);
  HashMap<String,Integer> topicParallelism=new HashMap<String,Integer>();
  for (int i=0; i < topics.length; i++) {
    topicParallelism.put(topics[i],partitionCount);
  }
  Map<String,List<KafkaStream<Message>>> topicMessageStreams=consumerConnector.createMessageStreams(topicParallelism);
  ArrayList<List<KafkaStream<Message>>> streams=new ArrayList<List<KafkaStream<Message>>>();
  for (int i=0; i < topics.length; i++) {
    List<KafkaStream<Message>> stream=topicMessageStreams.get(topics[i]);
    streams.add(stream);
  }
  ExecutorService executor=Executors.newFixedThreadPool(threadCount + (partitionCount * topics.length) + 1);
  final PoolingHttpClientConnectionManager cm=new PoolingHttpClientConnectionManager();
  cm.setMaxTotal(threadCount);
  cm.setDefaultMaxPerRoute(threadCount);
  final ConcurrentLinkedQueue<ByteArrayEntity> queue=new ConcurrentLinkedQueue<ByteArrayEntity>();
  final ConcurrentLinkedQueue<String> logQueue=new ConcurrentLinkedQueue<String>();
  StatsReporter statsReporter=getStatsReporter(statsClasspath,statsClass,statsClassArgs);
  executor.submit(new KafkaLog(logQueue,statsReporter,topic,urls));
  for (  final List<KafkaStream<Message>> streamList : streams) {
    for (    final KafkaStream<Message> stream : streamList) {
      executor.submit(new KafkaReader(queue,stream,logQueue));
    }
  }
  for (int i=0; i < threadCount; i++) {
    KafkaFilter messageFilter=getKafkaFilter(filterClass,filterClasspath,filterClassArgs);
    executor.submit(new KafkaPoster(queue,cm,urls,logQueue,messageFilter));
  }
}","public static void main(String[] args) throws Exception {
  KafkaArgs spraynozzleArgs;
  try {
    spraynozzleArgs=CliFactory.parseArguments(KafkaArgs.class,args);
  }
 catch (  ArgumentValidationException e) {
    System.err.println(e.getMessage());
    return;
  }
  String zk=spraynozzleArgs.getZk();
  ZkClient zkClient=new ZkClient(zk,10000);
  Boolean spraynozzleHA=spraynozzleArgs.getIsHighlyAvailable();
  boolean buffering=spraynozzleArgs.getBuffering();
  String topic=spraynozzleArgs.getTopic();
  final List<String> urls=spraynozzleArgs.getUrls();
  final String cleanedUrl=urls.get(0).replaceAll(""String_Node_Str"",""String_Node_Str"");
  final int threadCount=spraynozzleArgs.getThreadCount();
  final int partitionCount=spraynozzleArgs.getPartitionCount();
  final String filterClass=spraynozzleArgs.getFilterClass();
  final String filterClasspath=spraynozzleArgs.getFilterClasspath();
  final String filterClassArgs=spraynozzleArgs.getFilterClassArgs();
  final String statsClass=spraynozzleArgs.getStatsClass();
  final String statsClasspath=spraynozzleArgs.getStatsClasspath();
  final String statsClassArgs=spraynozzleArgs.getStatsClassArgs();
  String[] topics=topic.split(""String_Node_Str"");
  if (topics.length == 1) {
    System.out.println(""String_Node_Str"" + topic + ""String_Node_Str""+ zk+ ""String_Node_Str""+ urls);
  }
 else {
    System.out.println(""String_Node_Str"" + topic + ""String_Node_Str""+ zk+ ""String_Node_Str""+ urls);
  }
  if (spraynozzleHA) {
    String zkLeaderLatchFolderPath=""String_Node_Str"" + topics[0] + cleanedUrl;
    System.out.println(""String_Node_Str"");
    String spraynozzleName=""String_Node_Str"" + UUID.randomUUID();
    SpraynozzleLeaderLatch curatorClient=new SpraynozzleLeaderLatch(zk,zkLeaderLatchFolderPath,spraynozzleName);
    curatorClient.start();
    curatorClient.blockUntilisLeader();
    System.out.println(""String_Node_Str"" + spraynozzleName + ""String_Node_Str"");
  }
  if (!buffering) {
    clearZkPath(zkClient,""String_Node_Str"" + topics[0] + cleanedUrl);
  }
  Properties kafkaProps=new Properties();
  kafkaProps.put(""String_Node_Str"",zk);
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"" + topics[0] + cleanedUrl);
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProps.put(""String_Node_Str"",String.valueOf(2 * 1024 * 1024));
  ConsumerConfig consumerConfig=new ConsumerConfig(kafkaProps);
  ConsumerConnector consumerConnector=Consumer.createJavaConsumerConnector(consumerConfig);
  HashMap<String,Integer> topicParallelism=new HashMap<String,Integer>();
  for (int i=0; i < topics.length; i++) {
    topicParallelism.put(topics[i],partitionCount);
  }
  Map<String,List<KafkaStream<Message>>> topicMessageStreams=consumerConnector.createMessageStreams(topicParallelism);
  ArrayList<List<KafkaStream<Message>>> streams=new ArrayList<List<KafkaStream<Message>>>();
  for (int i=0; i < topics.length; i++) {
    List<KafkaStream<Message>> stream=topicMessageStreams.get(topics[i]);
    streams.add(stream);
  }
  ExecutorService executor=Executors.newFixedThreadPool(threadCount + (partitionCount * topics.length) + 1);
  final PoolingHttpClientConnectionManager cm=new PoolingHttpClientConnectionManager();
  cm.setMaxTotal(threadCount);
  cm.setDefaultMaxPerRoute(threadCount);
  final ConcurrentLinkedQueue<ByteArrayEntity> queue=new ConcurrentLinkedQueue<ByteArrayEntity>();
  final ConcurrentLinkedQueue<String> logQueue=new ConcurrentLinkedQueue<String>();
  StatsReporter statsReporter=getStatsReporter(statsClasspath,statsClass,statsClassArgs);
  executor.submit(new KafkaLog(logQueue,statsReporter,topic,urls));
  for (  final List<KafkaStream<Message>> streamList : streams) {
    for (    final KafkaStream<Message> stream : streamList) {
      executor.submit(new KafkaReader(queue,stream,logQueue));
    }
  }
  for (int i=0; i < threadCount; i++) {
    KafkaFilter messageFilter=getKafkaFilter(filterClass,filterClasspath,filterClassArgs);
    executor.submit(new KafkaPoster(queue,cm,urls,logQueue,messageFilter));
  }
}",0.999754601226994
34269,"private boolean postBatchEvents(List<ByteArrayEntity> batch){
  final long NANOS_PER_SECOND=1000L * 1000L * 1000L;
  final long NANOS_PER_MILLI_SECOND=1000L * 1000L;
  int pickedUrlIdx;
  try (Timer.Context ctx=postTime.time()){
    long timeBeforePost=System.nanoTime();
    postCount.inc();
    if (roundRobin) {
      pickedUrlIdx=currentUrl;
    }
 else {
      pickedUrlIdx=leastResponseIdx(responseTime);
    }
    HttpPost post=new HttpPost(urls.get(pickedUrlIdx));
    if (roundRobin) {
      currentUrl=(currentUrl + 1) % urls.size();
    }
    post.setHeader(""String_Node_Str"",""String_Node_Str"");
    if (batchSize == 1 && batch.size() == 1) {
      post.setEntity(batch.get(0));
      batch.clear();
    }
 else {
      try {
        ByteArrayEntity packedEntities=ListSerializer.toByteArrayEntity(batch);
        post.setEntity(packedEntities);
        batch.clear();
      }
 catch (      InvalidMessageSizeException ex) {
        postFailure.inc();
        batch.clear();
        return false;
      }
    }
    CloseableHttpResponse response=client.execute(post);
    int statusCode=response.getStatusLine().getStatusCode();
    long timeAfterPost=System.nanoTime();
    if (statusCode >= 200 && statusCode < 300) {
      postSuccess.inc();
    }
 else {
      postFailure.inc();
    }
    responseTimestamp[pickedUrlIdx]=timeAfterPost;
    responseTime[pickedUrlIdx]=(timeAfterPost - timeBeforePost) + 2 * NANOS_PER_MILLI_SECOND;
    for (int i=0; i < responseTimestamp.length; ++i) {
      if ((timeAfterPost - responseTimestamp[i]) > responseDecayingHalflife * NANOS_PER_SECOND) {
        responseTimestamp[i]=timeAfterPost;
        responseTime[i]=responseTime[i] / 2;
      }
    }
    long currentTime=new Date().getTime();
    if (currentTime - lastReconnect > 10000) {
      lastReconnect=currentTime;
      response.close();
    }
 else {
      EntityUtils.consume(response.getEntity());
    }
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    postFailure.inc();
    return false;
  }
  return true;
}","private boolean postBatchEvents(List<ByteArrayEntity> batch){
  final long NANOS_PER_SECOND=1000L * 1000L * 1000L;
  final long NANOS_PER_MILLI_SECOND=1000L * 1000L;
  int pickedUrlIdx=currentUrl;
  try (Timer.Context ctx=postTime.time()){
    long timeBeforePost=System.nanoTime();
    postCount.inc();
    if (roundRobin) {
      pickedUrlIdx=currentUrl;
    }
 else {
      pickedUrlIdx=leastResponseIdx(responseTime);
    }
    HttpPost post=new HttpPost(urls.get(pickedUrlIdx));
    if (roundRobin) {
      currentUrl=(currentUrl + 1) % urls.size();
    }
    post.setHeader(""String_Node_Str"",""String_Node_Str"");
    responseTimestamp[pickedUrlIdx]=System.nanoTime();
    responseTime[pickedUrlIdx]=5 * NANOS_PER_SECOND;
    if (batchSize == 1 && batch.size() == 1) {
      post.setEntity(batch.get(0));
      batch.clear();
    }
 else {
      try {
        ByteArrayEntity packedEntities=ListSerializer.toByteArrayEntity(batch);
        post.setEntity(packedEntities);
        batch.clear();
      }
 catch (      InvalidMessageSizeException ex) {
        postFailure.inc();
        batch.clear();
        return false;
      }
    }
    CloseableHttpResponse response=client.execute(post);
    int statusCode=response.getStatusLine().getStatusCode();
    long timeAfterPost=System.nanoTime();
    if (statusCode >= 200 && statusCode < 300) {
      postSuccess.inc();
      responseTimestamp[pickedUrlIdx]=timeAfterPost;
      responseTime[pickedUrlIdx]=(timeAfterPost - timeBeforePost) + 2 * NANOS_PER_MILLI_SECOND;
    }
 else {
      postFailure.inc();
      responseTimestamp[pickedUrlIdx]=timeAfterPost;
      responseTime[pickedUrlIdx]=(timeAfterPost - timeBeforePost) + 5 * NANOS_PER_SECOND;
    }
    for (int i=0; i < responseTimestamp.length; ++i) {
      if ((timeAfterPost - responseTimestamp[i]) > responseDecayingHalflife * NANOS_PER_SECOND) {
        responseTimestamp[i]=timeAfterPost;
        responseTime[i]=responseTime[i] / 2;
      }
    }
    long currentTime=new Date().getTime();
    if (currentTime - lastReconnect > 10000) {
      lastReconnect=currentTime;
      response.close();
    }
 else {
      EntityUtils.consume(response.getEntity());
    }
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    postFailure.inc();
    responseTimestamp[pickedUrlIdx]=System.nanoTime();
    responseTime[pickedUrlIdx]=5 * NANOS_PER_SECOND;
    return false;
  }
  return true;
}",0.8984547461368654
34270,"public static void main(String[] args){
  KafkaArgs spraynozzleArgs;
  try {
    spraynozzleArgs=CliFactory.parseArguments(KafkaArgs.class,args);
  }
 catch (  ArgumentValidationException e) {
    System.err.println(e.getMessage());
    return;
  }
  String topic=spraynozzleArgs.getTopic();
  final String url=spraynozzleArgs.getUrl();
  String cleanedUrl=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String zk=spraynozzleArgs.getZk();
  final int threadCount=spraynozzleArgs.getThreadCount();
  final int partitionCount=spraynozzleArgs.getPartitionCount();
  boolean buffering=spraynozzleArgs.getBuffering();
  final String filterClass=spraynozzleArgs.getFilterClass();
  final String filterClasspath=spraynozzleArgs.getFilterClasspath();
  final String filterClassArgs=spraynozzleArgs.getFilterClassArgs();
  final String statsClass=spraynozzleArgs.getStatsClass();
  final String statsClasspath=spraynozzleArgs.getStatsClasspath();
  final String statsClassArgs=spraynozzleArgs.getStatsClassArgs();
  String[] topics=string.split(""String_Node_Str"");
  if (topics.length == 1) {
    System.out.println(""String_Node_Str"" + topic + ""String_Node_Str""+ zk+ ""String_Node_Str""+ url);
  }
 else {
    System.out.println(""String_Node_Str"" + topic + ""String_Node_Str""+ zk+ ""String_Node_Str""+ url);
  }
  if (!buffering) {
    ZkClient zkClient=new ZkClient(zk,10000);
    ZkUtils.deletePathRecursive(zkClient,""String_Node_Str"" + topic + cleanedUrl);
    while (ZkUtils.pathExists(zkClient,""String_Node_Str"" + topic + cleanedUrl)) {
      try {
        Thread.sleep(250);
      }
 catch (      java.lang.InterruptedException e) {
        System.out.println(""String_Node_Str"");
        e.printStackTrace();
      }
    }
  }
  Properties kafkaProps=new Properties();
  kafkaProps.put(""String_Node_Str"",zk);
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"" + topic + cleanedUrl);
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProps.put(""String_Node_Str"",String.valueOf(2 * 1024 * 1024));
  ConsumerConfig consumerConfig=new ConsumerConfig(kafkaProps);
  ConsumerConnector consumerConnector=Consumer.createJavaConsumerConnector(consumerConfig);
  HashMap<String,Integer> topicParallelism=new HashMap<String,Integer>();
  topicParallelism.put(topic,partitionCount);
  Map<String,List<KafkaStream<Message>>> topicMessageStreams=consumerConnector.createMessageStreams(topicParallelism);
  List<KafkaStream<Message>>[] streams=new List<KafkaStream<Message>>[topics.length];
  for (int i=0; i < topics.length; i++) {
    List<KafkaStream<Message>> streams=topicMessageStreams.get(topics[i]);
  }
  ExecutorService executor=Executors.newFixedThreadPool(threadCount + (partitionCount * topics.length) + 1);
  final PoolingHttpClientConnectionManager cm=new PoolingHttpClientConnectionManager();
  cm.setMaxTotal(threadCount);
  cm.setDefaultMaxPerRoute(threadCount);
  final ConcurrentLinkedQueue<ByteArrayEntity> queue=new ConcurrentLinkedQueue<ByteArrayEntity>();
  final ConcurrentLinkedQueue<String> logQueue=new ConcurrentLinkedQueue<String>();
  StatsReporter statsReporter=getStatsReporter(statsClasspath,statsClass,statsClassArgs);
  executor.submit(new KafkaLog(logQueue,statsReporter,topic,url));
  for (int i=0; i < topics.length; i++) {
    for (    final KafkaStream<Message> stream : streams[i]) {
      executor.submit(new KafkaReader(queue,stream,logQueue));
    }
  }
  for (int i=0; i < threadCount; i++) {
    KafkaFilter messageFilter=getKafkaFilter(filterClass,filterClasspath,filterClassArgs);
    executor.submit(new KafkaPoster(queue,cm,url,logQueue,messageFilter));
  }
}","public static void main(String[] args){
  KafkaArgs spraynozzleArgs;
  try {
    spraynozzleArgs=CliFactory.parseArguments(KafkaArgs.class,args);
  }
 catch (  ArgumentValidationException e) {
    System.err.println(e.getMessage());
    return;
  }
  String topic=spraynozzleArgs.getTopic();
  final String url=spraynozzleArgs.getUrl();
  String cleanedUrl=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String zk=spraynozzleArgs.getZk();
  final int threadCount=spraynozzleArgs.getThreadCount();
  final int partitionCount=spraynozzleArgs.getPartitionCount();
  boolean buffering=spraynozzleArgs.getBuffering();
  final String filterClass=spraynozzleArgs.getFilterClass();
  final String filterClasspath=spraynozzleArgs.getFilterClasspath();
  final String filterClassArgs=spraynozzleArgs.getFilterClassArgs();
  final String statsClass=spraynozzleArgs.getStatsClass();
  final String statsClasspath=spraynozzleArgs.getStatsClasspath();
  final String statsClassArgs=spraynozzleArgs.getStatsClassArgs();
  String[] topics=topic.split(""String_Node_Str"");
  if (topics.length == 1) {
    System.out.println(""String_Node_Str"" + topic + ""String_Node_Str""+ zk+ ""String_Node_Str""+ url);
  }
 else {
    System.out.println(""String_Node_Str"" + topic + ""String_Node_Str""+ zk+ ""String_Node_Str""+ url);
  }
  if (!buffering) {
    ZkClient zkClient=new ZkClient(zk,10000);
    ZkUtils.deletePathRecursive(zkClient,""String_Node_Str"" + topic + cleanedUrl);
    while (ZkUtils.pathExists(zkClient,""String_Node_Str"" + topic + cleanedUrl)) {
      try {
        Thread.sleep(250);
      }
 catch (      java.lang.InterruptedException e) {
        System.out.println(""String_Node_Str"");
        e.printStackTrace();
      }
    }
  }
  Properties kafkaProps=new Properties();
  kafkaProps.put(""String_Node_Str"",zk);
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"" + topic + cleanedUrl);
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProps.put(""String_Node_Str"",String.valueOf(2 * 1024 * 1024));
  ConsumerConfig consumerConfig=new ConsumerConfig(kafkaProps);
  ConsumerConnector consumerConnector=Consumer.createJavaConsumerConnector(consumerConfig);
  HashMap<String,Integer> topicParallelism=new HashMap<String,Integer>();
  topicParallelism.put(topic,partitionCount);
  Map<String,List<KafkaStream<Message>>> topicMessageStreams=consumerConnector.createMessageStreams(topicParallelism);
  ArrayList<List<KafkaStream<Message>>> streams=new ArrayList<List<KafkaStream<Message>>>();
  for (int i=0; i < topics.length; i++) {
    streams.add(topicMessageStreams.get(topics[i]));
  }
  ExecutorService executor=Executors.newFixedThreadPool(threadCount + (partitionCount * topics.length) + 1);
  final PoolingHttpClientConnectionManager cm=new PoolingHttpClientConnectionManager();
  cm.setMaxTotal(threadCount);
  cm.setDefaultMaxPerRoute(threadCount);
  final ConcurrentLinkedQueue<ByteArrayEntity> queue=new ConcurrentLinkedQueue<ByteArrayEntity>();
  final ConcurrentLinkedQueue<String> logQueue=new ConcurrentLinkedQueue<String>();
  StatsReporter statsReporter=getStatsReporter(statsClasspath,statsClass,statsClassArgs);
  executor.submit(new KafkaLog(logQueue,statsReporter,topic,url));
  for (  List<KafkaStream<Message>> streamList : streams) {
    for (    final KafkaStream<Message> stream : streamList) {
      executor.submit(new KafkaReader(queue,stream,logQueue));
    }
  }
  for (int i=0; i < threadCount; i++) {
    KafkaFilter messageFilter=getKafkaFilter(filterClass,filterClasspath,filterClassArgs);
    executor.submit(new KafkaPoster(queue,cm,url,logQueue,messageFilter));
  }
}",0.9315143246930424
34271,"public static void main(String[] args){
  String topic=args[0];
  final String url=args[1];
  String zk=args[2];
  System.out.println(""String_Node_Str"" + topic + ""String_Node_Str""+ zk+ ""String_Node_Str""+ url+ ""String_Node_Str"");
  final HttpClient client=HttpClientBuilder.create().build();
  Properties kafkaProps=new Properties();
  kafkaProps.put(""String_Node_Str"",zk);
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"");
  ConsumerConfig consumerConfig=new ConsumerConfig(kafkaProps);
  ConsumerConnector consumerConnector=Consumer.createJavaConsumerConnector(consumerConfig);
  HashMap<String,Integer> topicParallelism=new HashMap<String,Integer>();
  topicParallelism.put(topic,4);
  Map<String,List<KafkaStream<Message>>> topicMessageStreams=consumerConnector.createMessageStreams(topicParallelism);
  List<KafkaStream<Message>> streams=topicMessageStreams.get(topic);
  ExecutorService executor=Executors.newFixedThreadPool(4);
  for (  final KafkaStream<Message> stream : streams) {
    executor.submit(new Runnable(){
      public void run(){
        for (        MessageAndMetadata msgAndMessageData : stream) {
          HttpPost post=new HttpPost(url);
          post.setHeader(""String_Node_Str"",""String_Node_Str"");
          StringEntity fakeJsonEntity=new StringEntity(""String_Node_Str"",ContentType.APPLICATION_JSON);
          post.setEntity(fakeJsonEntity);
          try {
            HttpResponse response=client.execute(post);
            System.out.println(""String_Node_Str"" + response.getStatusLine().getStatusCode());
          }
 catch (          java.io.IOException e) {
            e.printStackTrace();
          }
        }
      }
    }
);
  }
}","public static void main(String[] args){
  String topic=args[0];
  final String url=args[1];
  String zk=args[2];
  System.out.println(""String_Node_Str"" + topic + ""String_Node_Str""+ zk+ ""String_Node_Str""+ url+ ""String_Node_Str"");
  final HttpClient client=HttpClientBuilder.create().build();
  Properties kafkaProps=new Properties();
  kafkaProps.put(""String_Node_Str"",zk);
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProps.put(""String_Node_Str"",""String_Node_Str"");
  ConsumerConfig consumerConfig=new ConsumerConfig(kafkaProps);
  ConsumerConnector consumerConnector=Consumer.createJavaConsumerConnector(consumerConfig);
  HashMap<String,Integer> topicParallelism=new HashMap<String,Integer>();
  topicParallelism.put(topic,4);
  Map<String,List<KafkaStream<Message>>> topicMessageStreams=consumerConnector.createMessageStreams(topicParallelism);
  List<KafkaStream<Message>> streams=topicMessageStreams.get(topic);
  ExecutorService executor=Executors.newFixedThreadPool(4);
  for (  final KafkaStream<Message> stream : streams) {
    executor.submit(new Runnable(){
      public void run(){
        for (        MessageAndMetadata msgAndMetadata : stream) {
          HttpPost post=new HttpPost(url);
          post.setHeader(""String_Node_Str"",""String_Node_Str"");
          try {
            StringEntity jsonEntity=new StringEntity(new String(((Message)msgAndMetadata.message()).payload().array(),""String_Node_Str""),ContentType.APPLICATION_JSON);
            post.setEntity(jsonEntity);
            HttpResponse response=client.execute(post);
            System.out.println(""String_Node_Str"" + response.getStatusLine().getStatusCode());
          }
 catch (          java.io.UnsupportedEncodingException e) {
            e.printStackTrace();
          }
catch (          java.io.IOException e) {
            e.printStackTrace();
          }
        }
      }
    }
);
  }
}",0.8496551724137931
34272,"public void run(){
  for (  MessageAndMetadata msgAndMessageData : stream) {
    HttpPost post=new HttpPost(url);
    post.setHeader(""String_Node_Str"",""String_Node_Str"");
    StringEntity fakeJsonEntity=new StringEntity(""String_Node_Str"",ContentType.APPLICATION_JSON);
    post.setEntity(fakeJsonEntity);
    try {
      HttpResponse response=client.execute(post);
      System.out.println(""String_Node_Str"" + response.getStatusLine().getStatusCode());
    }
 catch (    java.io.IOException e) {
      e.printStackTrace();
    }
  }
}","public void run(){
  for (  MessageAndMetadata msgAndMetadata : stream) {
    HttpPost post=new HttpPost(url);
    post.setHeader(""String_Node_Str"",""String_Node_Str"");
    try {
      StringEntity jsonEntity=new StringEntity(new String(((Message)msgAndMetadata.message()).payload().array(),""String_Node_Str""),ContentType.APPLICATION_JSON);
      post.setEntity(jsonEntity);
      HttpResponse response=client.execute(post);
      System.out.println(""String_Node_Str"" + response.getStatusLine().getStatusCode());
    }
 catch (    java.io.UnsupportedEncodingException e) {
      e.printStackTrace();
    }
catch (    java.io.IOException e) {
      e.printStackTrace();
    }
  }
}",0.5490519373454246
34273,"public MapStateListener(GoogleMap map,TouchableMapFragment touchableMapFragment,Activity activity){
  this.mMap=map;
  this.mActivity=activity;
  map.setOnCameraChangeListener(new GoogleMap.OnCameraChangeListener(){
    @Override public void onCameraChange(    CameraPosition cameraPosition){
      unsettleMap();
      if (!mMapTouched) {
        runSettleTimer();
      }
    }
  }
);
  touchableMapFragment.setTouchListener(new TouchableMapFragment.OnTouchListener(){
    @Override public void onTouch(){
      touchMap();
      unsettleMap();
    }
    @Override public void onRelease(){
      releaseMap();
      runSettleTimer();
    }
  }
);
}","public MapStateListener(GoogleMap map,TouchableMapFragment touchableMapFragment,Activity activity){
  this.mMap=map;
  this.mActivity=activity;
  map.setOnCameraChangeListener(new GoogleMap.OnCameraChangeListener(){
    @Override public void onCameraChange(    CameraPosition cameraPosition){
      unsettleMap();
      if (!mMapTouched) {
        runSettleTimer();
      }
    }
  }
);
  touchableMapFragment.setTouchListener(new TouchableWrapper.OnTouchListener(){
    @Override public void onTouch(){
      touchMap();
      unsettleMap();
    }
    @Override public void onRelease(){
      releaseMap();
      runSettleTimer();
    }
  }
);
}",0.9861111111111112
34274,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup parent,Bundle savedInstanceState){
  mOriginalContentView=super.onCreateView(inflater,parent,savedInstanceState);
  mTouchView=new FrameLayout(getActivity());
  mTouchView.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
        if (!isTouched) {
          if (onTouchListener != null) {
            onTouchListener.onTouch();
          }
        }
      isTouched=true;
    break;
case MotionEvent.ACTION_UP:
  isTouched=false;
if (onTouchListener != null) {
  onTouchListener.onRelease();
}
break;
}
return false;
}
}
);
mTouchView.addView(mOriginalContentView);
return mTouchView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup parent,Bundle savedInstanceState){
  mOriginalContentView=super.onCreateView(inflater,parent,savedInstanceState);
  mTouchView=new TouchableWrapper(getActivity());
  mTouchView.addView(mOriginalContentView);
  return mTouchView;
}",0.3752310536044362
34275,"public void setTouchListener(OnTouchListener onTouchListener){
  this.onTouchListener=onTouchListener;
}","public void setTouchListener(TouchableWrapper.OnTouchListener onTouchListener){
  mTouchView.setTouchListener(onTouchListener);
}",0.7467811158798283
34276,"public void loadConfig(){
  File conffile=new File(SkinsRestorer.getInstance().getDataFolder(),""String_Node_Str"");
  FileConfiguration conf=YamlConfiguration.loadConfiguration(conffile);
  ServerVersion version=ServerVersion.valueOf(conf.getString(""String_Node_Str"",serverversion.toString()));
  debug=conf.getBoolean(""String_Node_Str"",debug);
  if (version != null) {
    serverversion=version;
  }
  conf=new YamlConfiguration();
  conf.set(""String_Node_Str"",serverversion.toString());
  conf.set(""String_Node_Str"",allPossibleVersions);
  conf.set(""String_Node_Str"",debug);
  try {
    conf.save(conffile);
  }
 catch (  IOException e) {
  }
}","public void loadConfig(){
  File conffile=new File(SkinsRestorer.getInstance().getDataFolder(),""String_Node_Str"");
  FileConfiguration conf=YamlConfiguration.loadConfiguration(conffile);
  ServerVersion version=ServerVersion.valueOf(conf.getString(""String_Node_Str"",serverversion.toString()));
  if (version != null) {
    serverversion=version;
  }
  conf=new YamlConfiguration();
  conf.set(""String_Node_Str"",serverversion.toString());
  conf.set(""String_Node_Str"",allPossibleVersions);
  try {
    conf.save(conffile);
  }
 catch (  IOException e) {
  }
}",0.9276807980049876
34277,"@Override public void onPacketSending(PacketEvent event){
  StructureModifier<GameProfile> profiles=event.getPacket().getSpecificModifier(GameProfile.class);
  GameProfile profile=profiles.read(0);
  String name=profile.getName();
  SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + name);
  if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
    SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + name);
    SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
    profiles.write(0,ProfileUtils.recreateProfile(profile,skinprofile));
  }
}","@Override public void onPacketSending(PacketEvent event){
  StructureModifier<GameProfile> profiles=event.getPacket().getSpecificModifier(GameProfile.class);
  GameProfile profile=profiles.read(0);
  String name=profile.getName();
  if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
    SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
    profiles.write(0,ProfileUtils.recreateProfile(profile,skinprofile));
  }
}",0.8170289855072463
34278,"private void registerPlayerSkinListener(){
  listener=new PacketAdapter(PacketAdapter.params(SkinsRestorer.getInstance(),PacketType.Play.Server.NAMED_ENTITY_SPAWN).listenerPriority(ListenerPriority.HIGHEST)){
    @Override public void onPacketSending(    PacketEvent event){
      StructureModifier<GameProfile> profiles=event.getPacket().getSpecificModifier(GameProfile.class);
      GameProfile profile=profiles.read(0);
      String name=profile.getName();
      SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + name);
      if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
        SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + name);
        SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
        profiles.write(0,ProfileUtils.recreateProfile(profile,skinprofile));
      }
    }
  }
;
  ProtocolLibrary.getProtocolManager().addPacketListener(listener);
}","private void registerPlayerSkinListener(){
  listener=new PacketAdapter(PacketAdapter.params(SkinsRestorer.getInstance(),PacketType.Play.Server.NAMED_ENTITY_SPAWN).listenerPriority(ListenerPriority.HIGHEST)){
    @Override public void onPacketSending(    PacketEvent event){
      StructureModifier<GameProfile> profiles=event.getPacket().getSpecificModifier(GameProfile.class);
      GameProfile profile=profiles.read(0);
      String name=profile.getName();
      if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
        SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
        profiles.write(0,ProfileUtils.recreateProfile(profile,skinprofile));
      }
    }
  }
;
  ProtocolLibrary.getProtocolManager().addPacketListener(listener);
}",0.8762769580022701
34279,"public static GameProfile recreateProfile(GameProfile oldprofile,SkinProfile skinprofile,boolean keepUUID){
  GameProfile newProfile=new GameProfile(keepUUID ? oldprofile.getId() : skinprofile.getUUID(),oldprofile.getName());
  newProfile.getProperties().putAll(oldprofile.getProperties());
  PropertyMap properties=oldprofile.getProperties();
  Property skinProperty=convertProperty(skinprofile.getPlayerSkinProperty());
  if (!properties.containsKey(skinProperty.getName())) {
    properties.put(skinProperty.getName(),skinProperty);
  }
  return newProfile;
}","public static GameProfile recreateProfile(GameProfile oldprofile,SkinProfile skinprofile){
  GameProfile newProfile=new GameProfile(skinprofile.getUUID(),oldprofile.getName());
  newProfile.getProperties().putAll(oldprofile.getProperties());
  PropertyMap properties=oldprofile.getProperties();
  Property skinProperty=convertProperty(skinprofile.getPlayerSkinProperty());
  if (!properties.containsKey(skinProperty.getName())) {
    properties.put(skinProperty.getName(),skinProperty);
  }
  return newProfile;
}",0.8446511627906976
34280,"@Override public void unregister(){
  ProtocolLibrary.getProtocolManager().removePacketListener(spawnListener);
  ProtocolLibrary.getProtocolManager().removePacketListener(tablistListener);
  HandlerList.unregisterAll(this);
}","@Override public void unregister(){
  for (  PacketListener listener : listeners) {
    ProtocolLibrary.getProtocolManager().removePacketListener(listener);
  }
  listeners.clear();
  HandlerList.unregisterAll(this);
}",0.6621621621621622
34281,"private void fixHeadSkin(ItemStack itemstack){
  try {
    SkullMeta meta=(SkullMeta)itemstack.getItemMeta();
    if (meta == null) {
      meta=(SkullMeta)Bukkit.getItemFactory().getItemMeta(Material.SKULL_ITEM);
    }
    if (meta.hasOwner()) {
      String name=meta.getOwner();
      if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
        SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
        Field profileField=meta.getClass().getDeclaredField(""String_Node_Str"");
        profileField.setAccessible(true);
        profileField.set(meta,ProfileUtils.recreateProfile((GameProfile)profileField.get(meta),skinprofile,false));
        itemstack.setItemMeta(meta);
      }
    }
  }
 catch (  Exception e) {
  }
}","private void fixHeadSkin(ItemStack itemstack){
  try {
    SkullMeta meta=(SkullMeta)itemstack.getItemMeta();
    if (meta == null) {
      meta=(SkullMeta)Bukkit.getItemFactory().getItemMeta(Material.SKULL_ITEM);
    }
    if (meta.hasOwner()) {
      String name=meta.getOwner();
      if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
        SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
        Field profileField=meta.getClass().getDeclaredField(""String_Node_Str"");
        profileField.setAccessible(true);
        profileField.set(meta,ProfileUtils.recreateProfile((GameProfile)profileField.get(meta),skinprofile));
        itemstack.setItemMeta(meta);
      }
    }
  }
 catch (  Exception e) {
  }
}",0.9961832061068704
34282,"private void registerTabListItemSkinlistener(){
  tablistListener=new PacketAdapter(PacketAdapter.params(SkinsRestorer.getInstance(),PacketType.Play.Server.PLAYER_INFO).listenerPriority(ListenerPriority.HIGHEST)){
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void onPacketSending(    PacketEvent event){
      StructureModifier<List> lists=event.getPacket().getSpecificModifier(List.class);
      List<PlayerInfoData> datas=lists.read(0);
      List<PlayerInfoData> newdatas=new ArrayList<PlayerInfoData>();
      for (      PlayerInfoData data : datas) {
        String name=data.a().getName();
        SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + name);
        if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
          SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + name);
          SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
          PlayerInfoData newdata=new PlayerInfoData((PacketPlayOutPlayerInfo)event.getPacket().getHandle(),ProfileUtils.recreateProfile(data.a(),skinprofile,name.equals(event.getPlayer().getName())),data.b(),data.c(),data.d());
          newdatas.add(newdata);
        }
 else {
          newdatas.add(data);
        }
      }
      lists.write(0,newdatas);
    }
  }
;
  ProtocolLibrary.getProtocolManager().addPacketListener(tablistListener);
}","private void registerTabListItemSkinlistener(){
  PacketListener tablistListener=new PacketAdapter(PacketAdapter.params(SkinsRestorer.getInstance(),PacketType.Play.Server.PLAYER_INFO).listenerPriority(ListenerPriority.HIGHEST)){
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void onPacketSending(    PacketEvent event){
      StructureModifier<List> lists=event.getPacket().getSpecificModifier(List.class);
      List<PlayerInfoData> datas=lists.read(0);
      List<PlayerInfoData> newdatas=new ArrayList<PlayerInfoData>();
      for (      PlayerInfoData data : datas) {
        String name=data.a().getName();
        if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
          SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
          PlayerInfoData newdata=new PlayerInfoData((PacketPlayOutPlayerInfo)event.getPacket().getHandle(),ProfileUtils.recreateProfile(data.a(),skinprofile),data.b(),data.c(),data.d());
          newdatas.add(newdata);
        }
 else {
          newdatas.add(data);
        }
      }
      lists.write(0,newdatas);
    }
  }
;
  ProtocolLibrary.getProtocolManager().addPacketListener(tablistListener);
}",0.8949357520786092
34283,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void onPacketSending(PacketEvent event){
  StructureModifier<List> lists=event.getPacket().getSpecificModifier(List.class);
  List<PlayerInfoData> datas=lists.read(0);
  List<PlayerInfoData> newdatas=new ArrayList<PlayerInfoData>();
  for (  PlayerInfoData data : datas) {
    String name=data.a().getName();
    SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + name);
    if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
      SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + name);
      SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
      PlayerInfoData newdata=new PlayerInfoData((PacketPlayOutPlayerInfo)event.getPacket().getHandle(),ProfileUtils.recreateProfile(data.a(),skinprofile,name.equals(event.getPlayer().getName())),data.b(),data.c(),data.d());
      newdatas.add(newdata);
    }
 else {
      newdatas.add(data);
    }
  }
  lists.write(0,newdatas);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void onPacketSending(PacketEvent event){
  StructureModifier<List> lists=event.getPacket().getSpecificModifier(List.class);
  List<PlayerInfoData> datas=lists.read(0);
  List<PlayerInfoData> newdatas=new ArrayList<PlayerInfoData>();
  for (  PlayerInfoData data : datas) {
    String name=data.a().getName();
    if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
      SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
      PlayerInfoData newdata=new PlayerInfoData((PacketPlayOutPlayerInfo)event.getPacket().getHandle(),ProfileUtils.recreateProfile(data.a(),skinprofile),data.b(),data.c(),data.d());
      newdatas.add(newdata);
    }
 else {
      newdatas.add(data);
    }
  }
  lists.write(0,newdatas);
}",0.8647214854111406
34284,"private void registerPlayerSkinListener(){
  spawnListener=new PacketAdapter(PacketAdapter.params(SkinsRestorer.getInstance(),PacketType.Play.Server.NAMED_ENTITY_SPAWN).listenerPriority(ListenerPriority.HIGHEST)){
    @Override public void onPacketSending(    PacketEvent event){
      StructureModifier<UUID> uuids=event.getPacket().getSpecificModifier(UUID.class);
      UUID uuid=uuids.read(0);
      Player player=Bukkit.getPlayer(uuid);
      SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + player.getName());
      if (player != null && SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(player.getName())) {
        SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + player.getName());
        SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(player.getName());
        uuids.write(0,skinprofile.getUUID());
      }
    }
  }
;
  ProtocolLibrary.getProtocolManager().addPacketListener(spawnListener);
}","private void registerPlayerSkinListener(){
  PacketListener spawnListener=new PacketAdapter(PacketAdapter.params(SkinsRestorer.getInstance(),PacketType.Play.Server.NAMED_ENTITY_SPAWN).listenerPriority(ListenerPriority.HIGHEST)){
    @Override public void onPacketSending(    PacketEvent event){
      StructureModifier<UUID> uuids=event.getPacket().getSpecificModifier(UUID.class);
      UUID uuid=uuids.read(0);
      Player player=Bukkit.getPlayer(uuid);
      if (player != null && SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(player.getName())) {
        SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(player.getName());
        uuids.write(0,skinprofile.getUUID());
      }
    }
  }
;
  ProtocolLibrary.getProtocolManager().addPacketListener(spawnListener);
}",0.899276572064552
34285,"@Override public void register(){
  Bukkit.getPluginManager().registerEvents(this,SkinsRestorer.getInstance());
  registerPlayerSkinListener();
  registerTabListItemSkinlistener();
}","@Override public void register(){
  Bukkit.getPluginManager().registerEvents(this,SkinsRestorer.getInstance());
  registerLoginOutSuccUUIDListener();
  registerPlayerSkinListener();
  registerTabListItemSkinlistener();
}",0.9054726368159204
34286,"public static GameProfile recreateProfile(GameProfile oldprofile,SkinProfile skinprofile,boolean keepUUID){
  GameProfile newProfile=new GameProfile(keepUUID ? oldprofile.getId() : skinprofile.getUUID(),oldprofile.getName());
  newProfile.getProperties().putAll(oldprofile.getProperties());
  PropertyMap properties=oldprofile.getProperties();
  Property skinProperty=convertProperty(skinprofile.getPlayerSkinProperty());
  if (!properties.containsKey(skinProperty.getName())) {
    properties.put(skinProperty.getName(),skinProperty);
  }
  return newProfile;
}","public static GameProfile recreateProfile(GameProfile oldprofile,SkinProfile skinprofile){
  GameProfile newProfile=new GameProfile(skinprofile.getUUID(),oldprofile.getName());
  newProfile.getProperties().putAll(oldprofile.getProperties());
  PropertyMap properties=oldprofile.getProperties();
  Property skinProperty=convertProperty(skinprofile.getPlayerSkinProperty());
  if (!properties.containsKey(skinProperty.getName())) {
    properties.put(skinProperty.getName(),skinProperty);
  }
  return newProfile;
}",0.8446511627906976
34287,"@Override public void unregister(){
  ProtocolLibrary.getProtocolManager().removePacketListener(spawnListener);
  ProtocolLibrary.getProtocolManager().removePacketListener(tablistListener);
  HandlerList.unregisterAll(this);
}","@Override public void unregister(){
  for (  PacketListener listener : listeners) {
    ProtocolLibrary.getProtocolManager().removePacketListener(listener);
  }
  listeners.clear();
  HandlerList.unregisterAll(this);
}",0.6621621621621622
34288,"private void fixHeadSkin(ItemStack itemstack){
  try {
    SkullMeta meta=(SkullMeta)itemstack.getItemMeta();
    if (meta == null) {
      meta=(SkullMeta)Bukkit.getItemFactory().getItemMeta(Material.SKULL_ITEM);
    }
    if (meta.hasOwner()) {
      String name=meta.getOwner();
      if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
        SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
        Field profileField=meta.getClass().getDeclaredField(""String_Node_Str"");
        profileField.setAccessible(true);
        profileField.set(meta,ProfileUtils.recreateProfile((GameProfile)profileField.get(meta),skinprofile,false));
        itemstack.setItemMeta(meta);
      }
    }
  }
 catch (  Exception e) {
  }
}","private void fixHeadSkin(ItemStack itemstack){
  try {
    SkullMeta meta=(SkullMeta)itemstack.getItemMeta();
    if (meta == null) {
      meta=(SkullMeta)Bukkit.getItemFactory().getItemMeta(Material.SKULL_ITEM);
    }
    if (meta.hasOwner()) {
      String name=meta.getOwner();
      if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
        SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
        Field profileField=meta.getClass().getDeclaredField(""String_Node_Str"");
        profileField.setAccessible(true);
        profileField.set(meta,ProfileUtils.recreateProfile((GameProfile)profileField.get(meta),skinprofile));
        itemstack.setItemMeta(meta);
      }
    }
  }
 catch (  Exception e) {
  }
}",0.9961832061068704
34289,"private void registerTabListItemSkinlistener(){
  tablistListener=new PacketAdapter(PacketAdapter.params(SkinsRestorer.getInstance(),PacketType.Play.Server.PLAYER_INFO).listenerPriority(ListenerPriority.HIGHEST)){
    @Override public void onPacketSending(    PacketEvent event){
      StructureModifier<GameProfile> profiles=event.getPacket().getSpecificModifier(GameProfile.class);
      GameProfile profile=profiles.read(0);
      String name=profile.getName();
      SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + name);
      if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
        SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + name);
        SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
        profiles.write(0,ProfileUtils.recreateProfile(profile,skinprofile,name.equals(event.getPlayer().getName())));
      }
    }
  }
;
  ProtocolLibrary.getProtocolManager().addPacketListener(tablistListener);
}","private void registerTabListItemSkinlistener(){
  PacketListener tablistListener=new PacketAdapter(PacketAdapter.params(SkinsRestorer.getInstance(),PacketType.Play.Server.PLAYER_INFO).listenerPriority(ListenerPriority.HIGHEST)){
    @Override public void onPacketSending(    PacketEvent event){
      StructureModifier<GameProfile> profiles=event.getPacket().getSpecificModifier(GameProfile.class);
      GameProfile profile=profiles.read(0);
      String name=profile.getName();
      if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
        SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
        profiles.write(0,ProfileUtils.recreateProfile(profile,skinprofile));
      }
    }
  }
;
  ProtocolLibrary.getProtocolManager().addPacketListener(tablistListener);
  listeners.add(tablistListener);
}",0.7366737739872068
34290,"@Override public void onPacketSending(PacketEvent event){
  StructureModifier<GameProfile> profiles=event.getPacket().getSpecificModifier(GameProfile.class);
  GameProfile profile=profiles.read(0);
  String name=profile.getName();
  SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + name);
  if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
    SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + name);
    SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
    profiles.write(0,ProfileUtils.recreateProfile(profile,skinprofile,name.equals(event.getPlayer().getName())));
  }
}","@Override public void onPacketSending(PacketEvent event){
  StructureModifier<GameProfile> profiles=event.getPacket().getSpecificModifier(GameProfile.class);
  GameProfile profile=profiles.read(0);
  String name=profile.getName();
  if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
    SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
    profiles.write(0,ProfileUtils.recreateProfile(profile,skinprofile));
  }
}",0.7877729257641921
34291,"private void registerPlayerSkinListener(){
  spawnListener=new PacketAdapter(PacketAdapter.params(SkinsRestorer.getInstance(),PacketType.Play.Server.NAMED_ENTITY_SPAWN).listenerPriority(ListenerPriority.HIGHEST)){
    @Override public void onPacketSending(    PacketEvent event){
      StructureModifier<GameProfile> profiles=event.getPacket().getSpecificModifier(GameProfile.class);
      GameProfile profile=profiles.read(0);
      String name=profile.getName();
      SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + name);
      if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
        SkinsRestorer.getInstance().logDebug(""String_Node_Str"" + name);
        SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
        profiles.write(0,ProfileUtils.recreateProfile(profile,skinprofile,false));
      }
    }
  }
;
  ProtocolLibrary.getProtocolManager().addPacketListener(spawnListener);
}","private void registerPlayerSkinListener(){
  PacketListener spawnListener=new PacketAdapter(PacketAdapter.params(SkinsRestorer.getInstance(),PacketType.Play.Server.NAMED_ENTITY_SPAWN).listenerPriority(ListenerPriority.HIGHEST)){
    @Override public void onPacketSending(    PacketEvent event){
      StructureModifier<GameProfile> profiles=event.getPacket().getSpecificModifier(GameProfile.class);
      GameProfile profile=profiles.read(0);
      String name=profile.getName();
      if (SkinsRestorer.getInstance().getSkinStorage().hasLoadedSkinData(name)) {
        SkinProfile skinprofile=SkinsRestorer.getInstance().getSkinStorage().getLoadedSkinData(name);
        profiles.write(0,ProfileUtils.recreateProfile(profile,skinprofile));
      }
    }
  }
;
  ProtocolLibrary.getProtocolManager().addPacketListener(spawnListener);
  listeners.add(spawnListener);
}",0.852316076294278
34292,"@Override public void register(){
  Bukkit.getPluginManager().registerEvents(this,SkinsRestorer.getInstance());
  registerPlayerSkinListener();
  registerTabListItemSkinlistener();
}","@Override public void register(){
  Bukkit.getPluginManager().registerEvents(this,SkinsRestorer.getInstance());
  registerLoginOutSuccUUIDListener();
  registerPlayerSkinListener();
  registerTabListItemSkinlistener();
}",0.9054726368159204
34293,"@Override public void visitNewIndividual(NewIndividual individual){
  URI path=individual.path();
  this.hasSelf=this.hasSelf || path.equals(SELF);
  this.newIds.add(path);
}","@Override public void visitNewIndividual(final NewIndividual individual){
  final URI path=individual.path();
  this.hasSelf=this.hasSelf || path.equals(SELF);
  this.newIds.add(path);
}",0.9666666666666668
34294,"/** 
 * {@inheritDoc}
 */
@Override public IndividualHelper managedIndividual(Name<?> name,String managerId){
  ManagedIndividualId individualId=ManagedIndividualId.createId(name,managerId);
  ManagedIndividual individual=this.dataSet.individual(individualId,ManagedIndividual.class);
  return new IndividualHelperImpl(individual);
}","/** 
 * {@inheritDoc}
 */
@Override public IndividualHelper managedIndividual(final Name<?> name,final String managerId){
  final ManagedIndividualId individualId=ManagedIndividualId.createId(name,managerId);
  final ManagedIndividual individual=this.dataSet.individual(individualId,ManagedIndividual.class);
  return new IndividualHelperImpl(individual);
}",0.9652173913043478
34295,"@Override public void visitLocalIndividual(LocalIndividual individual){
}","@Override public void visitLocalIndividual(final LocalIndividual individual){
}",0.9605263157894736
34296,"/** 
 * {@inheritDoc}
 */
@Override public IndividualHelper externalIndividual(URI uri){
  Individual<?,?> individual=null;
  if (uri.isAbsolute()) {
    individual=this.dataSet.individual(uri,ExternalIndividual.class);
  }
 else {
    individual=this.dataSet.individual(uri,NewIndividual.class);
  }
  return new IndividualHelperImpl(individual);
}","/** 
 * {@inheritDoc}
 */
@Override public IndividualHelper externalIndividual(final URI uri){
  Individual<?,?> individual=null;
  if (uri.isAbsolute()) {
    individual=this.dataSet.individual(uri,ExternalIndividual.class);
  }
 else {
    individual=this.dataSet.individual(uri,NewIndividual.class);
  }
  return new IndividualHelperImpl(individual);
}",0.9914772727272728
34297,"@Override public void visitIndividual(Individual<?,?> value){
  this.consumer.consume(this.individual,this.predicate,value);
}","@Override public void visitIndividual(final Individual<?,?> value){
  this.consumer.consume(this.individual,this.predicate,value);
}",0.9767441860465116
34298,"@Override public <T extends Serializable,S extends Individual<T,S>>S replace(Serializable from,T to,Class<? extends S> clazz){
  S target=null;
  Individual<?,?> src=this.dataSet.individualOfId(from);
  if (src != null) {
    target=this.dataSet.individual(to,clazz);
    rename(src,target);
  }
  return target;
}","@Override public <T extends Serializable,S extends Individual<T,S>>S replace(final Serializable from,final T to,final Class<? extends S> clazz){
  S target=null;
  final Individual<?,?> src=this.dataSet.individualOfId(from);
  if (src != null) {
    target=this.dataSet.individual(to,clazz);
    rename(src,target);
  }
  return target;
}",0.9631901840490796
34299,"@Override public void consume(Individual<?,?> subject,URI predicate,Individual<?,?> object){
  if (subject == this.from) {
    Value value=object;
    if (value == this.from) {
      value=this.to;
    }
    this.to.addValue(predicate,value);
  }
 else   if (subject != this.to && object == this.from) {
    subject.removeValue(predicate,object);
    subject.addValue(predicate,this.to);
  }
}","@Override public void consume(final Individual<?,?> subject,final URI predicate,final Individual<?,?> object){
  if (subject == this.from) {
    Value value=object;
    if (value == this.from) {
      value=this.to;
    }
    this.to.addValue(predicate,value);
  }
 else   if (subject != this.to && object == this.from) {
    subject.removeValue(predicate,object);
    subject.addValue(predicate,this.to);
  }
}",0.9776119402985076
34300,"private IndividualRenamer(Individual<?,?> from,Individual<?,?> to){
  this.from=from;
  this.to=to;
}","private IndividualRenamer(final Individual<?,?> from,final Individual<?,?> to){
  this.from=from;
  this.to=to;
}",0.9439252336448598
34301,"private TripleConsumerAdapter(Property property,Individual<?,?> individual,DataSetHelperImpl.TripleConsumer consumer){
  this.predicate=property.predicate();
  this.individual=individual;
  this.consumer=consumer;
}","private TripleConsumerAdapter(final Property property,final Individual<?,?> individual,final DataSetHelperImpl.TripleConsumer consumer){
  this.predicate=property.predicate();
  this.individual=individual;
  this.consumer=consumer;
}",0.9598214285714286
34302,"private NewIndividualIdCollector(ManagedIndividualId id){
  this.id=id;
}","private NewIndividualIdCollector(final ManagedIndividualId id){
  this.id=id;
}",0.9605263157894736
34303,"/** 
 * {@inheritDoc}
 */
@Override public IndividualHelper relativeIndividual(Name<?> name,String managerId,URI path){
  ManagedIndividualId parentId=ManagedIndividualId.createId(name,managerId);
  RelativeIndividualId individualId=RelativeIndividualId.createId(parentId,path);
  RelativeIndividual individual=this.dataSet.individual(individualId,RelativeIndividual.class);
  return new IndividualHelperImpl(individual);
}","/** 
 * {@inheritDoc}
 */
@Override public IndividualHelper relativeIndividual(final Name<?> name,final String managerId,final URI path){
  final ManagedIndividualId parentId=ManagedIndividualId.createId(name,managerId);
  final RelativeIndividualId individualId=RelativeIndividualId.createId(parentId,path);
  final RelativeIndividual individual=this.dataSet.individual(individualId,RelativeIndividual.class);
  return new IndividualHelperImpl(individual);
}",0.9591836734693876
34304,"void iterate(DataSetHelperImpl.TripleConsumer processor){
  for (  Individual<?,?> individual : this.dataSet) {
    for (    Property property : individual) {
      DataSetIterator.TripleConsumerAdapter visitor=new TripleConsumerAdapter(property,individual,processor);
      for (      Value value : property) {
        value.accept(visitor);
      }
    }
  }
}","void iterate(final DataSetHelperImpl.TripleConsumer processor){
  for (  final Individual<?,?> individual : this.dataSet) {
    for (    final Property property : individual) {
      final DataSetIterator.TripleConsumerAdapter visitor=new TripleConsumerAdapter(property,individual,processor);
      for (      final Value value : property) {
        value.accept(visitor);
      }
    }
  }
}",0.960212201591512
34305,"/** 
 * {@inheritDoc}
 */
@Override public IndividualHelper localIndividual(Name<?> name){
  @SuppressWarnings(""String_Node_Str"") LocalIndividual individual=this.dataSet.individual((Name)name,LocalIndividual.class);
  return new IndividualHelperImpl(individual);
}","/** 
 * {@inheritDoc}
 */
@Override public IndividualHelper localIndividual(final Name<?> name){
  @SuppressWarnings(""String_Node_Str"") final LocalIndividual individual=this.dataSet.individual((Name)name,LocalIndividual.class);
  return new IndividualHelperImpl(individual);
}",0.9777777777777776
34306,"@Override public void visitRelativeIndividual(RelativeIndividual individual){
}","@Override public void visitRelativeIndividual(final RelativeIndividual individual){
}",0.9634146341463414
34307,"@Override public void visitExternalIndividual(ExternalIndividual individual){
}","@Override public void visitExternalIndividual(final ExternalIndividual individual){
}",0.9634146341463414
34308,"DataSetHelperImpl(DataSet dataSet){
  this.dataSet=dataSet;
}","DataSetHelperImpl(final DataSet dataSet){
  this.dataSet=dataSet;
}",0.953125
34309,"@Override public ManagedIndividual manage(final ManagedIndividualId id) throws DataSetModificationException {
  List<URI> newIds=getNewIds(id);
  newIds.remove(SELF);
  ManagedIndividual self=replace(SELF,id,ManagedIndividual.class);
  for (  URI newId : newIds) {
    RelativeIndividualId relativeId=RelativeIndividualId.createId(id,newId);
    replace(newId,relativeId,RelativeIndividual.class);
  }
  return self;
}","@Override public ManagedIndividual manage(final ManagedIndividualId id) throws DataSetModificationException {
  final List<URI> newIds=getNewIds(id);
  newIds.remove(SELF);
  final ManagedIndividual self=replace(SELF,id,ManagedIndividual.class);
  for (  final URI newId : newIds) {
    final RelativeIndividualId relativeId=RelativeIndividualId.createId(id,newId);
    replace(newId,relativeId,RelativeIndividual.class);
  }
  return self;
}",0.972093023255814
34310,"private void rename(final Individual<?,?> from,final Individual<?,?> to){
  DataSetIterator iterator=new DataSetIterator(this.dataSet);
  TripleConsumer consumer=new IndividualRenamer(from,to);
  iterator.iterate(consumer);
  this.dataSet.remove(from);
}","private void rename(final Individual<?,?> from,final Individual<?,?> to){
  final DataSetIterator iterator=new DataSetIterator(this.dataSet);
  final TripleConsumer consumer=new IndividualRenamer(from,to);
  iterator.iterate(consumer);
  this.dataSet.remove(from);
}",0.9769230769230768
34311,"@Override public <T extends Individual<URI,T>>T self(){
  return relative(SELF);
}","@SuppressWarnings(""String_Node_Str"") @Override public <T extends Individual<URI,T>>T self(){
  return (T)relative(SELF);
}",0.803921568627451
34312,"@Override public void visitLiteral(Literal<?> value){
  this.consumer.consume(this.individual,this.predicate,value);
}","@Override public void visitLiteral(final Literal<?> value){
  this.consumer.consume(this.individual,this.predicate,value);
}",0.975206611570248
34313,"@Override public void visitManagedIndividual(ManagedIndividual individual){
  this.idInUse=this.id.equals(individual.id());
}","@Override public void visitManagedIndividual(final ManagedIndividual individual){
  this.idInUse=this.id.equals(individual.id());
}",0.9765625
34314,"private List<URI> getNewIds(ManagedIndividualId id) throws DataSetModificationException {
  NewIndividualIdCollector collector=new NewIndividualIdCollector(id);
  for (  Individual<?,?> individual : this.dataSet) {
    collector.collect(individual);
  }
  return collector.getCollectedIds();
}","private List<URI> getNewIds(final ManagedIndividualId id) throws DataSetModificationException {
  final NewIndividualIdCollector collector=new NewIndividualIdCollector(id);
  for (  final Individual<?,?> individual : this.dataSet) {
    collector.collect(individual);
  }
  return collector.getCollectedIds();
}",0.9701986754966888
34315,"void collect(Individual<?,?> individual) throws DataSetModificationException {
  individual.accept(this);
  if (this.idInUse) {
    throw new DataSetModificationException(""String_Node_Str"" + this.id + ""String_Node_Str"");
  }
}","void collect(final Individual<?,?> individual) throws DataSetModificationException {
  individual.accept(this);
  if (this.idInUse) {
    throw new DataSetModificationException(""String_Node_Str"" + this.id + ""String_Node_Str"");
  }
}",0.9868995633187772
34316,"private DataSetIterator(DataSet dataSet){
  this.dataSet=dataSet;
}","private DataSetIterator(final DataSet dataSet){
  this.dataSet=dataSet;
}",0.9571428571428572
34317,"@SuppressWarnings(""String_Node_Str"") @Override public <T extends Individual<URI,T>>T relative(URI path){
  return (T)this.dataSet.individualOfId(path);
}","@SuppressWarnings(""String_Node_Str"") @Override public <T extends Individual<URI,T>>T relative(final URI path){
  return (T)this.dataSet.individualOfId(path);
}",0.9807692307692308
34318,"private static boolean areCompatibleMediaTypes(final MediaType one,final MediaType other,boolean symmetric){
  requireNonNull(one,REFERENCE_MEDIA_TYPE_CANNOT_BE_NULL);
  if (other == null) {
    return false;
  }
  if (!equalsIgnoreCase(one.suffix(),other.suffix())) {
    return false;
  }
  return haveCompatibleMediaRange(one,other,symmetric);
}","private static boolean areCompatibleMediaTypes(final MediaType one,final MediaType other,boolean symmetric){
  requireNonNull(one,REFERENCE_MEDIA_TYPE_CANNOT_BE_NULL);
  if (other == null) {
    return false;
  }
  return haveCompatibleMediaRange(one,other,symmetric);
}",0.7087378640776699
34319,"private static boolean haveCompatibleMediaRange(final MediaType one,final MediaType other,boolean symmetric){
  if (isWildcardType(one)) {
    return true;
  }
  if (symmetric && isWildcardType(other)) {
    return true;
  }
  return one.type().equalsIgnoreCase(other.type()) && haveCompatibleSubtype(one,other,symmetric);
}","private static boolean haveCompatibleMediaRange(final MediaType one,final MediaType other,boolean symmetric){
  if (isWildcardType(one)) {
    return true;
  }
  if (symmetric && isWildcardType(other)) {
    return true;
  }
  if (!equalsIgnoreCase(one.suffix(),other.suffix())) {
    return false;
  }
  return one.type().equalsIgnoreCase(other.type()) && haveCompatibleSubtype(one,other,symmetric);
}",0.8429752066115702
34320,"@Test public void testGetDeclaredPrefixes() throws Exception {
  assertThat(this.sut.getDeclaredPrefixes(),contains(DEFAULT_PR1,DEFAULT_PR2));
}","@Test public void testGetDeclaredPrefixes() throws Exception {
  assertThat(this.sut.getDeclaredPrefixes(),containsInAnyOrder(DEFAULT_PR1,DEFAULT_PR2));
}",0.9664429530201344
34321,"@Test public void testGetPrefixes$found() throws Exception {
  assertThat(this.sut.getPrefixes(DEFAULT_NAMESPACE),contains(DEFAULT_PR1,DEFAULT_PR2));
}","@Test public void testGetPrefixes$found() throws Exception {
  assertThat(this.sut.getPrefixes(DEFAULT_NAMESPACE),containsInAnyOrder(DEFAULT_PR1,DEFAULT_PR2));
}",0.967948717948718
34322,"@Test public void testWithPrefix$valid() throws Exception {
  ImmutableNamespaces ns=this.sut.withPrefix(NS1,VALID_NAMESPACE);
  assertThat(ns,not(sameInstance(this.sut)));
  assertThat(ns.getDeclaredPrefixes(),contains(NS1,DEFAULT_PR1,DEFAULT_PR2));
  assertThat(ns.getNamespaceURI(NS1),equalTo(VALID_NAMESPACE));
  assertThat(ns.getPrefix(VALID_NAMESPACE),equalTo(NS1));
  assertThat(ns.getPrefixes(VALID_NAMESPACE),contains(NS1));
}","@Test public void testWithPrefix$valid() throws Exception {
  final ImmutableNamespaces ns=this.sut.withPrefix(NS1,VALID_NAMESPACE);
  assertThat(ns,not(sameInstance(this.sut)));
  assertThat(ns.getDeclaredPrefixes(),containsInAnyOrder(NS1,DEFAULT_PR1,DEFAULT_PR2));
  assertThat(ns.getNamespaceURI(NS1),equalTo(VALID_NAMESPACE));
  assertThat(ns.getPrefix(VALID_NAMESPACE),equalTo(NS1));
  assertThat(ns.getPrefixes(VALID_NAMESPACE),contains(NS1));
}",0.981941309255079
34323,"@Test public void testWithoutPrefix() throws Exception {
  ImmutableNamespaces ns=this.sut.withoutPrefix(DEFAULT_PR1,DEFAULT_PR2);
  assertThat(ns,not(sameInstance(this.sut)));
  assertThat(ns.getDeclaredPrefixes(),hasSize(0));
}","@Test public void testWithoutPrefix() throws Exception {
  final ImmutableNamespaces ns=this.sut.withoutPrefix(DEFAULT_PR1,DEFAULT_PR2);
  assertThat(ns,not(sameInstance(this.sut)));
  assertThat(ns.getDeclaredPrefixes(),hasSize(0));
}",0.9870689655172412
34324,"@Test public void testToString$empty() throws Exception {
  ImmutableNamespaces ns=new ImmutableNamespaces();
  assertThat(ns.toString(),not(equalTo(Utils.defaultToString(ns))));
}","@Test public void testToString$empty() throws Exception {
  final ImmutableNamespaces ns=new ImmutableNamespaces();
  assertThat(ns.toString(),not(equalTo(Utils.defaultToString(ns))));
}",0.9836065573770492
34325,"private static boolean isRoot(URI base){
  return base.getPath().equals(""String_Node_Str"");
}","private static boolean isRoot(URI base){
  return base.getPath().equals(""String_Node_Str"") || base.getPath().equals(""String_Node_Str"");
}",0.808695652173913
34326,"private Resource<?> toResource(Individual<?,?> individual){
  final AtomicReference<Resource<?>> result=new AtomicReference<Resource<?>>();
  individual.accept(new IndividualVisitor(){
    @Override public void visitManagedIndividual(    ManagedIndividual individual){
      ManagedIndividualId id=individual.id();
      URI indirectId=id.indirectId();
      if (indirectId == null) {
        id=ManagedIndividualId.createId(id.name(),id.managerId());
      }
      URI path=resourceResolver.resolveResource(id);
      if (path == null) {
        throw new IllegalStateException(""String_Node_Str"" + id + ""String_Node_Str"");
      }
 else       if (indirectId != null) {
        path=path.resolve(indirectId);
      }
      result.set(uriRef(base.resolve(path)));
    }
    @Override public void visitLocalIndividual(    LocalIndividual individual){
      result.set(toSessionResource(individual.name()));
    }
    @Override public void visitExternalIndividual(    ExternalIndividual individual){
      result.set(uriRef(individual.id()));
    }
  }
);
  return result.get();
}","private Resource<?> toResource(Individual<?,?> individual){
  final AtomicReference<Resource<?>> result=new AtomicReference<Resource<?>>();
  individual.accept(new IndividualVisitor(){
    @Override public void visitManagedIndividual(    ManagedIndividual individual){
      ManagedIndividualId id=individual.id();
      URI indirectId=id.indirectId();
      if (indirectId != null) {
        id=ManagedIndividualId.createId(id.name(),id.managerId());
      }
      URI path=resourceResolver.resolveResource(id);
      if (path == null) {
        throw new IllegalStateException(""String_Node_Str"" + id + ""String_Node_Str"");
      }
 else       if (indirectId != null) {
        path=path.resolve(indirectId);
      }
      result.set(uriRef(base.resolve(path)));
    }
    @Override public void visitLocalIndividual(    LocalIndividual individual){
      result.set(toSessionResource(individual.name()));
    }
    @Override public void visitExternalIndividual(    ExternalIndividual individual){
      result.set(uriRef(individual.id()));
    }
  }
);
  return result.get();
}",0.999071494893222
34327,"@Override public void visitManagedIndividual(ManagedIndividual individual){
  ManagedIndividualId id=individual.id();
  URI indirectId=id.indirectId();
  if (indirectId == null) {
    id=ManagedIndividualId.createId(id.name(),id.managerId());
  }
  URI path=resourceResolver.resolveResource(id);
  if (path == null) {
    throw new IllegalStateException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
 else   if (indirectId != null) {
    path=path.resolve(indirectId);
  }
  result.set(uriRef(base.resolve(path)));
}","@Override public void visitManagedIndividual(ManagedIndividual individual){
  ManagedIndividualId id=individual.id();
  URI indirectId=id.indirectId();
  if (indirectId != null) {
    id=ManagedIndividualId.createId(id.name(),id.managerId());
  }
  URI path=resourceResolver.resolveResource(id);
  if (path == null) {
    throw new IllegalStateException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
 else   if (indirectId != null) {
    path=path.resolve(indirectId);
  }
  result.set(uriRef(base.resolve(path)));
}",0.9980732177263968
34328,"@Before public void setUp() throws Exception {
  sut=DataTransformator.create(uri(""String_Node_Str"")).mediaType(new MediaType(""String_Node_Str"",""String_Node_Str"")).permanentEndpoint(uri(""String_Node_Str"")).enableResolution(new ResourceResolver(){
    @Override public URI resolveResource(    ManagedIndividualId id){
      if (id.equals(NANDANA_ID)) {
        return NANDANA_LOCATION;
      }
      return null;
    }
    @Override public ManagedIndividualId resolveLocation(    URI path){
      if (path.equals(NANDANA_LOCATION)) {
        return NANDANA_ID;
      }
      return null;
    }
  }
);
}","@Before public void setUp() throws Exception {
  sut=DataTransformator.create(APPLICATION_BASE).mediaType(new MediaType(""String_Node_Str"",""String_Node_Str"")).permanentEndpoint(NANDANA_ENDPOINT).enableResolution(new ResourceResolver(){
    @Override public URI resolveResource(    ManagedIndividualId id){
      if (id.equals(NANDANA_ID)) {
        return NANDANA_LOCATION;
      }
      return null;
    }
    @Override public ManagedIndividualId resolveLocation(    URI path){
      if (path.equals(NANDANA_LOCATION)) {
        return NANDANA_ID;
      }
      return null;
    }
  }
);
}",0.9378151260504202
34329,"@Test public void testUnmarshall() throws Exception {
  DataSet dataSet=sut.unmarshall(loadResource(""String_Node_Str""));
  sut.marshall(dataSet);
}","@Test public void testUnmarshall() throws Exception {
  DataSet dataSet=sut.unmarshall(loadResource(""String_Node_Str""));
  assertThat(dataSet.numberOfIndividuals(),greaterThan(2));
  assertThat(dataSet.individualOfId(NANDANA_ID),notNullValue());
  assertThat(dataSet.individualOfId(NANDANA_ME_ID),notNullValue());
  sut.marshall(dataSet);
}",0.5872689938398358
34330,"public ContentPreferencesBuilder withOmit(Preference preference){
  this.contentPreferences.omit(preference);
  return this;
}","public ContentPreferencesBuilder withOmit(Preference preference){
  this.contentPreferences.omit(normalize(preference));
  return this;
}",0.9581749049429658
34331,"public ContentPreferencesBuilder withInclude(Preference preference){
  this.contentPreferences.include(preference);
  return this;
}","public ContentPreferencesBuilder withInclude(Preference preference){
  this.contentPreferences.include(normalize(preference));
  return this;
}",0.96
34332,"public PublicResource createResource(DataSet dataSet) throws ApplicationExecutionException {
  Resource resource=applicationContext().createResource(endpoint(),dataSet);
  return createResource(resource.id());
}","public PublicResource createResource(DataSet dataSet,InteractionModel interactionModel) throws ApplicationExecutionException {
  Resource resource=applicationContext().createResource(endpoint(),dataSet);
  return createResource(resource.id());
}",0.925438596491228
34333,"@Override protected final DataSet resourceData(ContentPreferences contentPreferences) throws ApplicationExecutionException {
  DataSet dataSet=super.resourceData(contentPreferences);
  if (contentPreferences.isRequired(Preference.MINIMAL_CONTAINER) || contentPreferences.isRequired(Preference.EMPTY_CONTAINER)) {
    List<Individual<?,?>> toClean=new ArrayList<Individual<?,?>>();
    for (    Individual<?,?> individual : dataSet) {
      individual.accept(new IndividualFilter(toClean));
    }
    for (    Individual<?,?> individual : toClean) {
      cleanIndividual(individual);
    }
  }
  return dataSet;
}","@Override protected final DataSet resourceData(ContentPreferences contentPreferences) throws ApplicationExecutionException {
  DataSet dataSet=super.resourceData(contentPreferences);
  if (contentPreferences.isMinimalInclusionRequired()) {
    List<Individual<?,?>> toClean=new ArrayList<Individual<?,?>>();
    for (    Individual<?,?> individual : dataSet) {
      individual.accept(new IndividualFilter(toClean));
    }
    for (    Individual<?,?> individual : toClean) {
      cleanIndividual(individual);
    }
  }
  return dataSet;
}",0.9089332176929747
34334,"@Override protected void fillInMetadata(ContentPreferences contentPreferences,Individual<?,?> individual,Context ctx){
  super.fillInMetadata(contentPreferences,individual,ctx);
  individual.addValue(ctx.property(RDF.TYPE),ctx.reference(LDP.CONTAINER));
  if (contentPreferences.isRequired(Preference.CONTAINMENT_TRIPLES)) {
    for (    PublicResource member : members()) {
      individual.addValue(ctx.property(LDP.CONTAINS),ctx.newIndividual(member));
    }
  }
}","@Override protected void fillInMetadata(ContentPreferences contentPreferences,Individual<?,?> individual,Context ctx){
  super.fillInMetadata(contentPreferences,individual,ctx);
  individual.addValue(ctx.property(RDF.TYPE),ctx.reference(LDP.CONTAINER));
  if (contentPreferences.mayInclude(Preference.CONTAINMENT_TRIPLES)) {
    for (    PublicResource member : members()) {
      individual.addValue(ctx.property(LDP.CONTAINS),ctx.newIndividual(member));
    }
  }
}",0.9785867237687366
34335,"final void fillInMemberMetadata(ContentPreferences contentPreferences,Individual<?,?> individual,Context ctx){
  if (!contentPreferences.isRequired(Preference.MEMBERSHIP_TRIPLES)) {
    return;
  }
  URI predicate=containerTemplate().membershipPredicate();
switch (containerTemplate().membershipRelation()) {
case HAS_MEMBER:
    populateHasMember(individual,ctx,predicate);
  break;
case IS_MEMBER_OF:
populateIsMemberOf(individual,ctx,predicate);
break;
}
}","final void fillInMemberMetadata(ContentPreferences contentPreferences,Individual<?,?> individual,Context ctx){
  if (!contentPreferences.mayInclude(Preference.MEMBERSHIP_TRIPLES)) {
    return;
  }
  URI predicate=containerTemplate().membershipPredicate();
switch (containerTemplate().membershipRelation()) {
case HAS_MEMBER:
    populateHasMember(individual,ctx,predicate);
  break;
case IS_MEMBER_OF:
populateIsMemberOf(individual,ctx,predicate);
break;
}
}",0.9782135076252724
34336,"@Override protected void fillInMetadata(ContentPreferences contentPreferences,Individual<?,?> individual,Context ctx){
  super.fillInMetadata(contentPreferences,individual,ctx);
  T template=containerTemplate();
  individual.addValue(ctx.property(RDF.TYPE),ctx.reference(containerType())).addValue(ctx.property(template.membershipRelation().term()),ctx.value(template.membershipPredicate()));
  if (!isRoot()) {
    individual.addValue(ctx.property(LDP.MEMBERSHIP_RESOURCE),ctx.newIndividual(parent()));
  }
}","@Override protected void fillInMetadata(ContentPreferences contentPreferences,Individual<?,?> individual,Context ctx){
  super.fillInMetadata(contentPreferences,individual,ctx);
  T template=containerTemplate();
  individual.addValue(ctx.property(RDF.TYPE),ctx.reference(containerType())).addValue(ctx.property(template.membershipRelation().term()),ctx.reference(template.membershipPredicate()));
  Individual<?,?> membershipResource=null;
  if (!isRoot()) {
    membershipResource=ctx.newIndividual(parent());
  }
 else {
    membershipResource=ctx.reference(LDP.MEMBER_SUBJECT);
  }
  individual.addValue(ctx.property(LDP.MEMBERSHIP_RESOURCE),membershipResource);
  if (contentPreferences.mayInclude(Preference.MEMBERSHIP_TRIPLES)) {
    fillInMemberMetadata(contentPreferences,membershipResource,ctx);
  }
}",0.6899166034874905
34337,"public Value reference(Term term){
  return reference(term.as(URI.class));
}","public Individual<?,?> reference(Term term){
  return reference(term.as(URI.class));
}",0.9012345679012346
34338,"protected void configureValidationConstraints(ValidatorBuilder builder,Individual<?,?> individual,DataSet metadata){
  builder.withPropertyConstraint(ValidationConstraintFactory.mandatoryPropertyValues(individual.property(RDF.TYPE.as(URI.class))));
  for (  AttachedTemplate attachedTemplate : template().attachedTemplates()) {
    URI propertyId=attachedTemplate.predicate().or(HAS_ATTACHMENT);
    Property property=individual.property(propertyId);
    if (property != null) {
      builder.withPropertyConstraint(ValidationConstraintFactory.readOnlyProperty(individual.property(propertyId)));
      configureAdditionalValidationConstraints(builder,individual,metadata,attachments().get(attachedTemplate.id()));
    }
 else {
      builder.withPropertyConstraint(ValidationConstraintFactory.readOnlyProperty(individual.id(),propertyId));
    }
  }
}","protected void configureValidationConstraints(ValidatorBuilder builder,Individual<?,?> individual,DataSet metadata){
  builder.withPropertyConstraint(ValidationConstraintFactory.mandatoryPropertyValues(individual.property(RDF.TYPE.as(URI.class))));
  Set<URI> properties=Sets.newHashSet();
  for (  AttachedTemplate attachedTemplate : template().attachedTemplates()) {
    URI propertyId=attachedTemplate.predicate().or(HAS_ATTACHMENT);
    if (!properties.contains(propertyId)) {
      Property property=individual.property(propertyId);
      if (property != null) {
        builder.withPropertyConstraint(ValidationConstraintFactory.readOnlyProperty(property));
        configureAdditionalValidationConstraints(builder,individual,metadata,attachments().get(attachedTemplate.id()));
      }
 else {
        builder.withPropertyConstraint(ValidationConstraintFactory.readOnlyProperty(individual.id(),propertyId));
      }
      properties.add(propertyId);
    }
  }
}",0.902090209020902
34339,"@Override public boolean mustBeChecked(){
  return this.predicate != null;
}","@Override public boolean mustBeChecked(){
  return this.individualId != null && !this.values.isEmpty();
}",0.7734806629834254
34340,"static void enforceConsistency(Name<?> resourceName,String managerId,DataSet newState,DataSet currentState) throws InvalidContentException {
  ManagedIndividualId id=ManagedIndividualId.createId(resourceName,managerId);
  LOGGER.debug(""String_Node_Str"",format(id));
  LOGGER.trace(""String_Node_Str"",currentState);
  LOGGER.trace(""String_Node_Str"",newState);
  ManagedIndividual stateIndividual=currentState.individual(id,ManagedIndividual.class);
  Property stateProperty=stateIndividual.property(READ_ONLY_PROPERTY);
  ManagedIndividual inIndividual=newState.individual(id,ManagedIndividual.class);
  Property inProperty=inIndividual.property(READ_ONLY_PROPERTY);
  if (stateProperty == null && inProperty == null) {
    LOGGER.debug(""String_Node_Str"",READ_ONLY_PROPERTY);
    return;
  }
  if (stateProperty == null && inProperty != null) {
    LOGGER.error(""String_Node_Str"",READ_ONLY_PROPERTY);
    throw new InvalidContentException(""String_Node_Str"" + READ_ONLY_PROPERTY + ""String_Node_Str"");
  }
  if (stateProperty != null && inProperty == null) {
    LOGGER.error(""String_Node_Str"",READ_ONLY_PROPERTY);
    throw new InvalidContentException(""String_Node_Str"" + READ_ONLY_PROPERTY + ""String_Node_Str"");
  }
  for (  Value value : inProperty) {
    LOGGER.debug(""String_Node_Str"",READ_ONLY_PROPERTY,format(value));
    if (DataSetUtils.hasValue(value,stateProperty)) {
      LOGGER.error(""String_Node_Str"",format(value),READ_ONLY_PROPERTY);
      throw new InvalidContentException(""String_Node_Str"" + format(value) + ""String_Node_Str""+ READ_ONLY_PROPERTY+ ""String_Node_Str"");
    }
  }
  for (  Value value : stateProperty) {
    LOGGER.debug(""String_Node_Str"",READ_ONLY_PROPERTY,format(value));
    if (!DataSetUtils.hasValue(value,inProperty)) {
      LOGGER.error(""String_Node_Str"",format(value),READ_ONLY_PROPERTY);
      throw new InvalidContentException(""String_Node_Str"" + value + ""String_Node_Str""+ READ_ONLY_PROPERTY+ ""String_Node_Str"");
    }
  }
}","static void enforceConsistency(Name<?> resourceName,String managerId,DataSet newState,DataSet currentState) throws InvalidContentException {
  ManagedIndividualId id=ManagedIndividualId.createId(resourceName,managerId);
  LOGGER.debug(""String_Node_Str"",format(id));
  LOGGER.trace(""String_Node_Str"",currentState);
  LOGGER.trace(""String_Node_Str"",newState);
  ManagedIndividual stateIndividual=currentState.individual(id,ManagedIndividual.class);
  Property stateProperty=stateIndividual.property(READ_ONLY_PROPERTY);
  ManagedIndividual inIndividual=newState.individual(id,ManagedIndividual.class);
  Property inProperty=inIndividual.property(READ_ONLY_PROPERTY);
  if (stateProperty == null && inProperty == null) {
    LOGGER.debug(""String_Node_Str"",READ_ONLY_PROPERTY);
    return;
  }
  if (stateProperty == null && inProperty != null) {
    LOGGER.error(""String_Node_Str"",READ_ONLY_PROPERTY);
    throw new InvalidContentException(""String_Node_Str"" + READ_ONLY_PROPERTY + ""String_Node_Str"");
  }
  if (stateProperty != null && inProperty == null) {
    LOGGER.error(""String_Node_Str"",READ_ONLY_PROPERTY);
    throw new InvalidContentException(""String_Node_Str"" + READ_ONLY_PROPERTY + ""String_Node_Str"");
  }
  for (  Value value : inProperty) {
    LOGGER.debug(""String_Node_Str"",READ_ONLY_PROPERTY,format(value));
    if (!DataSetUtils.hasValue(value,stateProperty)) {
      LOGGER.error(""String_Node_Str"",format(value),READ_ONLY_PROPERTY);
      throw new InvalidContentException(""String_Node_Str"" + format(value) + ""String_Node_Str""+ READ_ONLY_PROPERTY+ ""String_Node_Str"");
    }
  }
  for (  Value value : stateProperty) {
    LOGGER.debug(""String_Node_Str"",READ_ONLY_PROPERTY,format(value));
    if (!DataSetUtils.hasValue(value,inProperty)) {
      LOGGER.error(""String_Node_Str"",format(value),READ_ONLY_PROPERTY);
      throw new InvalidContentException(""String_Node_Str"" + value + ""String_Node_Str""+ READ_ONLY_PROPERTY+ ""String_Node_Str"");
    }
  }
}",0.9997454823110206
34341,"@Override public void visitIndividual(Individual<?,?> value){
  builder.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(value.id()).append(NL);
}","@Override public void visitIndividual(Individual<?,?> value){
  builder.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(FormatUtils.formatId(value)).append(NL);
}",0.9191685912240184
34342,"@Override public String toString(){
  final StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"").append(name).append(""String_Node_Str"").append(NL);
  for (  Individual<?,?> individual : this) {
    if (individual.hasProperties()) {
      builder.append(""String_Node_Str"").append(""String_Node_Str"").append(individual.id()).append(""String_Node_Str"").append(NL);
      for (      Property property : individual) {
        builder.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(property.predicate()).append(""String_Node_Str"").append(NL);
        for (        Value value : property) {
          value.accept(new ValueVisitor(){
            @Override public void visitLiteral(            Literal<?> value){
              builder.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(value.get()).append(NL);
            }
            @Override public void visitIndividual(            Individual<?,?> value){
              builder.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(value.id()).append(NL);
            }
          }
);
        }
        builder.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(NL);
      }
      builder.append(""String_Node_Str"").append(""String_Node_Str"").append(NL);
    }
  }
  builder.append(""String_Node_Str"");
  return builder.toString();
}","@Override public String toString(){
  final StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"").append(FormatUtils.formatName(name)).append(""String_Node_Str"").append(NL);
  for (  Individual<?,?> individual : this) {
    if (individual.hasProperties()) {
      builder.append(""String_Node_Str"").append(""String_Node_Str"").append(FormatUtils.formatId(individual)).append(""String_Node_Str"").append(NL);
      for (      Property property : individual) {
        builder.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(property.predicate()).append(""String_Node_Str"").append(NL);
        for (        Value value : property) {
          value.accept(new ValueVisitor(){
            @Override public void visitLiteral(            Literal<?> value){
              Object rawValue=value.get();
              builder.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(rawValue).append(""String_Node_Str"").append(rawValue.getClass().getCanonicalName()).append(""String_Node_Str"").append(NL);
            }
            @Override public void visitIndividual(            Individual<?,?> value){
              builder.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(FormatUtils.formatId(value)).append(NL);
            }
          }
);
        }
        builder.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(NL);
      }
      builder.append(""String_Node_Str"").append(""String_Node_Str"").append(NL);
    }
  }
  builder.append(""String_Node_Str"");
  return builder.toString();
}",0.8403149606299213
34343,"@Override public void visitLiteral(Literal<?> value){
  builder.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(value.get()).append(NL);
}","@Override public void visitLiteral(Literal<?> value){
  Object rawValue=value.get();
  builder.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(rawValue).append(""String_Node_Str"").append(rawValue.getClass().getCanonicalName()).append(""String_Node_Str"").append(NL);
}",0.2722117202268431
34344,"public Response options(OperationContext context){
  Capabilities capabilities=context.resource().capabilities();
  ResponseBuilder builder=Response.ok();
  EndpointControllerUtils.populateAllowedHeaders(builder,capabilities);
  addRequiredHeaders(context,builder);
  return builder.build();
}","public Response options(OperationContext context){
  Capabilities capabilities=context.resource().capabilities();
  ResponseBuilder builder=Response.ok();
  EndpointControllerUtils.populateAllowedHeaders(builder,capabilities);
  addRequiredHeaders(context,builder);
  addAcceptPostHeaders(context,builder);
  return builder.build();
}",0.934609250398724
34345,"private Response doGet(OperationContext context,boolean includeEntity){
  Variant variant=context.expectedVariant();
  context.checkOperationSupport().checkPreconditions();
  ResponseBuilder builder=Response.serverError();
  String body=null;
  Status status=null;
  try {
    PublicResource resource=context.applicationContext().findResource(endpoint());
    DataSet entity=resource.entity();
    body=context.serializeResource(entity,variant.getMediaType());
    status=Status.OK;
    builder.variant(variant);
  }
 catch (  ApplicationExecutionException e) {
    status=Status.INTERNAL_SERVER_ERROR;
    body=Throwables.getStackTraceAsString(e);
    builder.type(MediaType.TEXT_PLAIN).language(Locale.ENGLISH);
  }
  addRequiredHeaders(context,builder);
  builder.status(status.getStatusCode()).header(ExistingEndpointController.CONTENT_LENGTH_HEADER,body.length());
  if (includeEntity) {
    builder.entity(body);
  }
  return builder.build();
}","private Response doGet(OperationContext context,boolean includeEntity){
  Variant variant=context.expectedVariant();
  context.checkOperationSupport().checkPreconditions();
  ResponseBuilder builder=Response.serverError();
  String body=null;
  Status status=null;
  try {
    PublicResource resource=context.applicationContext().findResource(endpoint());
    DataSet entity=resource.entity();
    LOGGER.trace(""String_Node_Str"",entity);
    body=context.serializeResource(entity,variant.getMediaType());
    status=Status.OK;
    builder.variant(variant);
  }
 catch (  ApplicationExecutionException e) {
    status=Status.INTERNAL_SERVER_ERROR;
    body=Throwables.getStackTraceAsString(e);
    builder.type(MediaType.TEXT_PLAIN).language(Locale.ENGLISH);
  }
  addRequiredHeaders(context,builder);
  builder.status(status.getStatusCode()).header(ExistingEndpointController.CONTENT_LENGTH_HEADER,body.length());
  if (includeEntity) {
    builder.entity(body);
  }
  return builder.build();
}",0.977366255144033
34346,"@Override public DataSet dataSet(){
  if (this.dataSet == null) {
    MediaType mediaType=contentVariant().getMediaType();
    IMediaTypeProvider provider=RuntimeInstance.getInstance().getMediaTypeProvider(mediaType);
    if (provider == null) {
      throw new UnsupportedContentException(endpoint,this,contentVariant());
    }
    Unmarshaller unmarshaller=provider.newUnmarshaller(ImmutableContext.newInstance(base().resolve(endpoint.path()),resourceResolver()));
    try {
      this.dataSet=unmarshaller.unmarshall(this.entity,mediaType);
    }
 catch (    ContentTransformationException e) {
      throw new ContentProcessingException(""String_Node_Str"" + mediaType + ""String_Node_Str"",endpoint,this);
    }
  }
  return this.dataSet;
}","@Override public DataSet dataSet(){
  if (this.dataSet == null) {
    LOGGER.trace(""String_Node_Str"",this.entity);
    MediaType mediaType=contentVariant().getMediaType();
    IMediaTypeProvider provider=RuntimeInstance.getInstance().getMediaTypeProvider(mediaType);
    if (provider == null) {
      throw new UnsupportedContentException(endpoint,this,contentVariant());
    }
    Unmarshaller unmarshaller=provider.newUnmarshaller(ImmutableContext.newInstance(base().resolve(endpoint.path()),resourceResolver()));
    try {
      this.dataSet=unmarshaller.unmarshall(this.entity,mediaType);
    }
 catch (    ContentTransformationException e) {
      throw new ContentProcessingException(""String_Node_Str"" + mediaType + ""String_Node_Str"",endpoint,this);
    }
  }
  return this.dataSet;
}",0.9679947746570868
34347,"public static URI resolve(URI base,URI target){
  if (!base.getScheme().equals(target.getScheme()) || !base.getAuthority().equals(target.getAuthority())) {
    return target;
  }
  return walkthrough(base.normalize(),target.normalize());
}","public static URI resolve(URI base,URI target){
  if (!base.getScheme().equals(target.getScheme()) || !base.getAuthority().equals(target.getAuthority())) {
    return target;
  }
  URI result=walkthrough(base.normalize(),target.normalize());
  System.out.printf(""String_Node_Str"",base,target,result);
  System.out.flush();
  return result;
}",0.8
34348,"private static URI walkthrough(URI base,URI target){
  String[] basePath=base.getPath().split(""String_Node_Str"");
  String[] targetPath=target.getPath().split(""String_Node_Str"");
  int common=findCommons(basePath,targetPath);
  List<String> segments=getSegments(targetPath,common,basePath.length - common);
  return recreateFromSegments(segments,target);
}","private static URI walkthrough(URI base,URI target){
  System.out.printf(""String_Node_Str"",base,target);
  String[] basePath=base.getPath().split(""String_Node_Str"");
  String[] targetPath=target.getPath().split(""String_Node_Str"");
  int common=findCommons(basePath,targetPath);
  System.out.printf(""String_Node_Str"",base.getPath());
  System.out.printf(""String_Node_Str"",Arrays.toString(basePath));
  System.out.printf(""String_Node_Str"",base.getPath());
  System.out.printf(""String_Node_Str"",Arrays.toString(basePath));
  System.out.printf(""String_Node_Str"",common);
  if (targetPath.length == common) {
    URI result=null;
    if (base.getPath().endsWith(""String_Node_Str"") && !target.getPath().endsWith(""String_Node_Str"")) {
      result=URI.create(""String_Node_Str"" + basePath[common - 1]);
    }
 else     if (!base.getPath().endsWith(""String_Node_Str"") && target.getPath().endsWith(""String_Node_Str"")) {
      result=URI.create(""String_Node_Str"" + basePath[common - 1] + ""String_Node_Str"");
    }
 else     if (base.getPath().equals(target.getPath())) {
      result=URI.create(""String_Node_Str"");
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
    return result;
  }
 else {
    List<String> segments=getSegments(targetPath,common,basePath.length - common);
    return recreateFromSegments(segments,target);
  }
}",0.3655536028119508
34349,"private void verifyResolution(String base,String target,String resolution,boolean query,boolean fragment){
  String extendedTarget=extend(target,query,fragment);
  String extendedResolution=extend(resolution,query,fragment);
  URI baseURI=URI.create(base);
  URI targetURI=URI.create(extendedTarget);
  URI resolutionURI=URI.create(extendedResolution);
  assertThat(URIUtils.resolve(baseURI,targetURI),equalTo(resolutionURI));
  assertThat(baseURI.resolve(resolutionURI),equalTo(targetURI));
}","private void verifyResolution(String base,String target,String resolution,boolean query,boolean fragment){
  assertThat(URI.create(base).resolve(URI.create(resolution)),equalTo(URI.create(target)));
  String extendedTarget=extend(target,query,fragment);
  String extendedResolution=extend(resolution,query,fragment);
  URI baseURI=URI.create(base);
  URI targetURI=URI.create(extendedTarget);
  URI resolutionURI=URI.create(extendedResolution);
  URI relative=URIUtils.resolve(baseURI,targetURI);
  assertThat(relative,equalTo(resolutionURI));
  assertThat(baseURI.resolve(resolutionURI),equalTo(targetURI));
  assertThat(baseURI.resolve(relative),equalTo(targetURI));
}",0.7876182287188306
34350,"@Test public void testResolve$siblings$targetBigger(){
  String base=""String_Node_Str"";
  String target=""String_Node_Str"";
  String resolution=""String_Node_Str"";
  verifyResolution(base,target,resolution,false,false);
  verifyResolution(base,target,resolution,false,true);
  verifyResolution(base,target,resolution,true,false);
  verifyResolution(base,target,resolution,true,true);
}","@Test public void testResolve$siblings$targetBigger(){
  String base=""String_Node_Str"";
  String target=""String_Node_Str"";
  String resolution=""String_Node_Str"";
  assertThat(URI.create(base).resolve(URI.create(resolution)),equalTo(URI.create(target)));
  verifyResolution(base,target,resolution,false,false);
  verifyResolution(base,target,resolution,false,true);
  verifyResolution(base,target,resolution,true,false);
  verifyResolution(base,target,resolution,true,true);
}",0.8927738927738927
34351,"private String writeURI(URI uri){
  String result=null;
  String prefix=namespaceTable.get(uri.getNamespace());
  if (prefix != null) {
    result=String.format(""String_Node_Str"",prefix,uri.getLocalName());
  }
 else {
    result=String.format(""String_Node_Str"",TurtleUtil.encodeURIString(resolve(uri).toString()));
  }
  return result;
}","private String writeURI(URI uri){
  String result=null;
  String prefix=namespaceTable.get(uri.getNamespace());
  if (prefix != null) {
    result=String.format(""String_Node_Str"",prefix,uri.getLocalName());
  }
 else {
    result=String.format(""String_Node_Str"",TurtleUtil.encodeURIString(uri.toString()));
  }
  return result;
}",0.9775112443778112
34352,"@Test public void testToString$sameAsBase() throws Exception {
  System.out.println(sut.toString(vf.createURI(BASE)));
}","@Test public void testToString$sameAsBase() throws Exception {
  System.out.println(""String_Node_Str"" + sut.toString(vf.createURI(BASE)));
}",0.9230769230769232
34353,"@Test public void testToString$child() throws Exception {
  System.out.println(sut.toString(vf.createURI(BASE + ""String_Node_Str"")));
}","@Test public void testToString$child() throws Exception {
  System.out.println(""String_Node_Str"" + sut.toString(vf.createURI(BASE + ""String_Node_Str"")));
}",0.9310344827586208
34354,"@Test public void testToString$baseAsResource() throws Exception {
  System.out.println(sut.toString(vf.createURI(BASE.substring(0,BASE.length() - 1))));
}","@Test public void testToString$baseAsResource() throws Exception {
  System.out.println(""String_Node_Str"" + sut.toString(vf.createURI(BASE.substring(0,BASE.length() - 1))));
}",0.9393939393939394
34355,"@Test public void testToString$ancestor() throws Exception {
  System.out.println(sut.toString(vf.createURI(BASE + ""String_Node_Str"")));
}","@Test public void testToString$ancestor() throws Exception {
  System.out.println(""String_Node_Str"" + sut.toString(vf.createURI(BASE + ""String_Node_Str"")));
}",0.9324324324324323
34356,"@Test public void testToString$self() throws Exception {
  System.out.println(sut.toString(vf.createURI(BASE.concat(""String_Node_Str""))));
}","@Test public void testToString$self() throws Exception {
  System.out.println(""String_Node_Str"" + sut.toString(vf.createURI(BASE.concat(""String_Node_Str""))));
}",0.9333333333333332
34357,"@Override public Binary put(Binary key,Binary value){
  final byte[] keyData=key.getValue();
  final int keySize=keyData.length;
  final int hash=Math.abs(hashFunction.apply(keyData));
  final long offset=hash % partitionCount;
  long locationAddress=unsafe.getAddress(partitionAddress + (offset * addressSize));
  int entryCount=locationAddress == 0 ? 0 : unsafe.getInt(locationAddress);
  locationAddress+=Integer.BYTES;
  for (long locationOffset=0; locationOffset < entryCount; locationOffset++) {
    long keyAddress=unsafe.getAddress(locationAddress + (locationOffset * addressSize * 2));
    int size=unsafe.getInt(keyAddress);
    if (size != keySize)     continue;
    keyAddress+=Integer.BYTES;
    boolean isEqual=true;
    for (int keyOffset=0; keyOffset < keySize; keyOffset++) {
      if (keyData[keyOffset] != unsafe.getByte(keyAddress + keyOffset)) {
        isEqual=false;
        break;
      }
    }
    if (isEqual) {
      long valueAddress=unsafe.getAddress(locationAddress + (locationOffset * addressSize * 2) + addressSize);
      Binary oldValue=null;
      if (valueAddress != 0) {
        int valueSize=unsafe.getInt(valueAddress);
        byte[] valueData=new byte[valueSize];
        valueAddress+=Integer.BYTES;
        for (int valueOffset=0; valueOffset < valueSize; valueOffset++) {
          valueData[valueOffset]=unsafe.getByte(valueAddress + valueOffset);
        }
        oldValue=new Binary(valueData);
        valueAddress-=Integer.BYTES;
        unsafe.freeMemory(valueAddress);
      }
      if (value != null) {
        byte[] valueData=value.getValue();
        int valueSize=valueData.length;
        valueAddress=allocate(Integer.BYTES + valueSize,false);
        unsafe.putInt(valueAddress,valueSize);
        for (int valueOffset=0; valueOffset < valueSize; valueOffset++) {
          unsafe.putByte(valueAddress + valueOffset + Integer.BYTES,valueData[valueOffset]);
        }
      }
 else {
        valueAddress=0;
      }
      unsafe.putAddress(locationAddress + (locationOffset * addressSize * 2) + addressSize,valueAddress);
      return oldValue;
    }
  }
  itemCount++;
  locationAddress-=Integer.BYTES;
  long keyAddress=allocate(Integer.BYTES + keySize,false);
  unsafe.putInt(keyAddress,keySize);
  for (int keyOffset=0; keyOffset < keySize; keyOffset++) {
    unsafe.putByte(keyAddress + Integer.BYTES + keyOffset,keyData[keyOffset]);
  }
  long valueAddress=0;
  if (value != null) {
    byte[] valueData=value.getValue();
    int valueSize=valueData.length;
    valueAddress=allocate(Integer.BYTES + valueSize,false);
    unsafe.putInt(valueAddress,valueSize);
    for (int valueOffset=0; valueOffset < valueSize; valueOffset++) {
      unsafe.putByte(valueAddress + Integer.BYTES + valueOffset,valueData[valueOffset]);
    }
  }
  if (locationAddress == 0) {
    locationAddress=allocate(Integer.BYTES + addressSize + addressSize,false);
  }
 else {
    locationAddress=unsafe.reallocateMemory(locationAddress,Integer.BYTES + (addressSize * 2 * (entryCount + 1)));
  }
  unsafe.putAddress(locationAddress + Integer.BYTES + (addressSize * 2 * entryCount),keyAddress);
  unsafe.putAddress(locationAddress + Integer.BYTES + (addressSize * 2 * entryCount)+ addressSize,valueAddress);
  unsafe.putInt(locationAddress,entryCount + 1);
  unsafe.putAddress(partitionAddress + (offset * addressSize),locationAddress);
  return null;
}","@Override public Binary put(Binary key,Binary value){
  final byte[] keyData=key.getValue();
  final int keySize=keyData.length;
  final long offset=getPartitionOffset(keyData);
  long locationAddress=unsafe.getAddress(partitionAddress + (offset * addressSize));
  int entryCount=locationAddress == 0 ? 0 : unsafe.getInt(locationAddress);
  locationAddress+=Integer.BYTES;
  for (long locationOffset=0; locationOffset < entryCount; locationOffset++) {
    long keyAddress=unsafe.getAddress(locationAddress + (locationOffset * addressSize * 2));
    int size=unsafe.getInt(keyAddress);
    if (size != keySize)     continue;
    keyAddress+=Integer.BYTES;
    boolean isEqual=true;
    for (int keyOffset=0; keyOffset < keySize; keyOffset++) {
      if (keyData[keyOffset] != unsafe.getByte(keyAddress + keyOffset)) {
        isEqual=false;
        break;
      }
    }
    if (isEqual) {
      long valueAddress=unsafe.getAddress(locationAddress + (locationOffset * addressSize * 2) + addressSize);
      Binary oldValue=null;
      if (valueAddress != 0) {
        int valueSize=unsafe.getInt(valueAddress);
        byte[] valueData=new byte[valueSize];
        valueAddress+=Integer.BYTES;
        for (int valueOffset=0; valueOffset < valueSize; valueOffset++) {
          valueData[valueOffset]=unsafe.getByte(valueAddress + valueOffset);
        }
        oldValue=new Binary(valueData);
        valueAddress-=Integer.BYTES;
        unsafe.freeMemory(valueAddress);
      }
      if (value != null) {
        byte[] valueData=value.getValue();
        int valueSize=valueData.length;
        valueAddress=allocate(Integer.BYTES + valueSize,false);
        unsafe.putInt(valueAddress,valueSize);
        for (int valueOffset=0; valueOffset < valueSize; valueOffset++) {
          unsafe.putByte(valueAddress + valueOffset + Integer.BYTES,valueData[valueOffset]);
        }
      }
 else {
        valueAddress=0;
      }
      unsafe.putAddress(locationAddress + (locationOffset * addressSize * 2) + addressSize,valueAddress);
      return oldValue;
    }
  }
  itemCount++;
  locationAddress-=Integer.BYTES;
  long keyAddress=allocate(Integer.BYTES + keySize,false);
  unsafe.putInt(keyAddress,keySize);
  for (int keyOffset=0; keyOffset < keySize; keyOffset++) {
    unsafe.putByte(keyAddress + Integer.BYTES + keyOffset,keyData[keyOffset]);
  }
  long valueAddress=0;
  if (value != null) {
    byte[] valueData=value.getValue();
    int valueSize=valueData.length;
    valueAddress=allocate(Integer.BYTES + valueSize,false);
    unsafe.putInt(valueAddress,valueSize);
    for (int valueOffset=0; valueOffset < valueSize; valueOffset++) {
      unsafe.putByte(valueAddress + Integer.BYTES + valueOffset,valueData[valueOffset]);
    }
  }
  if (locationAddress == 0) {
    locationAddress=allocate(Integer.BYTES + addressSize + addressSize,false);
  }
 else {
    locationAddress=unsafe.reallocateMemory(locationAddress,Integer.BYTES + (addressSize * 2 * (entryCount + 1)));
  }
  unsafe.putAddress(locationAddress + Integer.BYTES + (addressSize * 2 * entryCount),keyAddress);
  unsafe.putAddress(locationAddress + Integer.BYTES + (addressSize * 2 * entryCount)+ addressSize,valueAddress);
  unsafe.putInt(locationAddress,entryCount + 1);
  unsafe.putAddress(partitionAddress + (offset * addressSize),locationAddress);
  return null;
}",0.9836601307189542
34358,"@Override public Binary get(Object key){
  if (!(key instanceof Binary))   return null;
  final Binary bKey=(Binary)key;
  final byte[] keyData=bKey.getValue();
  final int keySize=keyData.length;
  final int hash=Math.abs(hashFunction.apply(keyData));
  final long offset=hash % partitionCount;
  long locationAddress=unsafe.getAddress(partitionAddress + (offset * addressSize));
  if (locationAddress == 0)   return null;
  int entryCount=unsafe.getInt(locationAddress);
  locationAddress+=Integer.BYTES;
  for (long locationOffset=0; locationOffset < entryCount; locationOffset++) {
    long keyAddress=unsafe.getAddress(locationAddress + (locationOffset * addressSize * 2));
    int size=unsafe.getInt(keyAddress);
    if (size != keySize)     continue;
    keyAddress+=Integer.BYTES;
    boolean isEqual=true;
    for (int keyOffset=0; keyOffset < keySize; keyOffset++) {
      if (keyData[keyOffset] != unsafe.getByte(keyAddress + keyOffset)) {
        isEqual=false;
        break;
      }
    }
    if (isEqual) {
      long valueAddress=unsafe.getAddress(locationAddress + (locationOffset * addressSize * 2) + addressSize);
      if (valueAddress == 0)       return null;
      int valueSize=unsafe.getInt(valueAddress);
      byte[] valueData=new byte[valueSize];
      valueAddress+=Integer.BYTES;
      for (int valueOffset=0; valueOffset < valueSize; valueOffset++) {
        valueData[valueOffset]=unsafe.getByte(valueAddress + valueOffset);
      }
      return new Binary(valueData);
    }
  }
  return null;
}","@Override public Binary get(Object key){
  if (!(key instanceof Binary))   return null;
  final Binary bKey=(Binary)key;
  final byte[] keyData=bKey.getValue();
  final int keySize=keyData.length;
  final long offset=getPartitionOffset(keyData);
  long locationAddress=unsafe.getAddress(partitionAddress + (offset * addressSize));
  if (locationAddress == 0)   return null;
  int entryCount=unsafe.getInt(locationAddress);
  locationAddress+=Integer.BYTES;
  for (long locationOffset=0; locationOffset < entryCount; locationOffset++) {
    long keyAddress=unsafe.getAddress(locationAddress + (locationOffset * addressSize * 2));
    int size=unsafe.getInt(keyAddress);
    if (size != keySize)     continue;
    keyAddress+=Integer.BYTES;
    boolean isEqual=true;
    for (int keyOffset=0; keyOffset < keySize; keyOffset++) {
      if (keyData[keyOffset] != unsafe.getByte(keyAddress + keyOffset)) {
        isEqual=false;
        break;
      }
    }
    if (isEqual) {
      long valueAddress=unsafe.getAddress(locationAddress + (locationOffset * addressSize * 2) + addressSize);
      if (valueAddress == 0)       return null;
      int valueSize=unsafe.getInt(valueAddress);
      byte[] valueData=new byte[valueSize];
      valueAddress+=Integer.BYTES;
      for (int valueOffset=0; valueOffset < valueSize; valueOffset++) {
        valueData[valueOffset]=unsafe.getByte(valueAddress + valueOffset);
      }
      return new Binary(valueData);
    }
  }
  return null;
}",0.9633577614923384
34359,"@Override public boolean containsKey(Object key){
  if (!(key instanceof Binary))   return false;
  final Binary bKey=(Binary)key;
  final byte[] keyData=bKey.getValue();
  final int keySize=keyData.length;
  final int hash=Math.abs(hashFunction.apply(keyData));
  final long offset=hash % partitionCount;
  long locationAddress=unsafe.getAddress(partitionAddress + (offset * addressSize));
  if (locationAddress == 0)   return false;
  int entryCount=unsafe.getInt(locationAddress);
  locationAddress+=Integer.BYTES;
  for (long locationOffset=0; locationOffset < entryCount; locationOffset++) {
    long keyAddress=unsafe.getAddress(locationAddress + (locationOffset * addressSize * 2));
    int size=unsafe.getInt(keyAddress);
    if (size != keySize)     continue;
    keyAddress+=Integer.BYTES;
    boolean isEqual=true;
    for (int keyOffset=0; keyOffset < keySize; keyOffset++) {
      if (keyData[keyOffset] != unsafe.getByte(keyAddress + keyOffset)) {
        isEqual=false;
        break;
      }
    }
    if (isEqual)     return true;
  }
  return false;
}","@Override public boolean containsKey(Object key){
  if (!(key instanceof Binary))   return false;
  final Binary bKey=(Binary)key;
  final byte[] keyData=bKey.getValue();
  final int keySize=keyData.length;
  final long offset=getPartitionOffset(keyData);
  long locationAddress=unsafe.getAddress(partitionAddress + (offset * addressSize));
  if (locationAddress == 0)   return false;
  int entryCount=unsafe.getInt(locationAddress);
  locationAddress+=Integer.BYTES;
  for (long locationOffset=0; locationOffset < entryCount; locationOffset++) {
    long keyAddress=unsafe.getAddress(locationAddress + (locationOffset * addressSize * 2));
    int size=unsafe.getInt(keyAddress);
    if (size != keySize)     continue;
    keyAddress+=Integer.BYTES;
    boolean isEqual=true;
    for (int keyOffset=0; keyOffset < keySize; keyOffset++) {
      if (keyData[keyOffset] != unsafe.getByte(keyAddress + keyOffset)) {
        isEqual=false;
        break;
      }
    }
    if (isEqual)     return true;
  }
  return false;
}",0.9473180076628352
34360,"@Override public boolean containsValue(Object value){
  if (value != null && !(value instanceof Binary))   return false;
  final Binary bValue=(Binary)value;
  final byte[] valueData=bValue == null ? null : bValue.getValue();
  final int valueSize=valueData == null ? -1 : valueData.length;
  for (long offset=0; offset < partitionCount; offset++) {
    long locationAddress=unsafe.getAddress(partitionAddress + (offset * addressSize));
    if (locationAddress == 0)     continue;
    int entryCount=unsafe.getInt(locationAddress);
    locationAddress+=Integer.BYTES;
    locationAddress+=Long.BYTES;
    for (long locationOffset=0; locationOffset < entryCount; locationOffset++) {
      long valueAddress=unsafe.getAddress(locationAddress + (locationOffset * addressSize * 2));
      if (valueAddress == 0) {
        if (bValue == null)         return true;
 else         continue;
      }
      int size=unsafe.getInt(valueAddress);
      if (size != valueSize)       continue;
      valueAddress+=Integer.BYTES;
      boolean isEqual=true;
      for (int valueOffset=0; valueOffset < valueSize; valueOffset++) {
        if (valueData[valueOffset] != unsafe.getByte(valueAddress + valueOffset)) {
          isEqual=false;
          break;
        }
      }
      if (isEqual)       return true;
    }
  }
  return false;
}","@Override public boolean containsValue(Object value){
  if (value != null && !(value instanceof Binary))   return false;
  final Binary bValue=(Binary)value;
  final byte[] valueData=bValue == null ? null : bValue.getValue();
  final int valueSize=valueData == null ? -1 : valueData.length;
  for (long offset=0; offset < partitionCount; offset++) {
    long locationAddress=unsafe.getAddress(partitionAddress + (offset * addressSize));
    if (locationAddress == 0)     continue;
    int entryCount=unsafe.getInt(locationAddress);
    locationAddress+=Integer.BYTES;
    locationAddress+=addressSize;
    for (long locationOffset=0; locationOffset < entryCount; locationOffset++) {
      long valueAddress=unsafe.getAddress(locationAddress + (locationOffset * addressSize * 2));
      if (valueAddress == 0) {
        if (bValue == null)         return true;
 else         continue;
      }
      int size=unsafe.getInt(valueAddress);
      if (size != valueSize)       continue;
      valueAddress+=Integer.BYTES;
      boolean isEqual=true;
      for (int valueOffset=0; valueOffset < valueSize; valueOffset++) {
        if (valueData[valueOffset] != unsafe.getByte(valueAddress + valueOffset)) {
          isEqual=false;
          break;
        }
      }
      if (isEqual)       return true;
    }
  }
  return false;
}",0.5345413363533409
34361,"@Override public Entry<Binary,Binary> next(){
  if (offset >= map.partitionCount)   throw new NoSuchElementException();
  long locationAddress=map.unsafe.getAddress(map.partitionAddress + (offset * map.addressSize));
  if (locationAddress == 0) {
    offset++;
    return next();
  }
  int entryCount=map.unsafe.getInt(locationAddress);
  locationAddress+=Integer.BYTES;
  long keyAddress=map.unsafe.getAddress(locationAddress + (locationOffset * map.addressSize * 2));
  long valueAddress=map.unsafe.getAddress(locationAddress + (locationOffset * map.addressSize * 2) + map.addressSize);
  locationOffset++;
  if (locationOffset >= entryCount) {
    locationOffset=0;
    offset++;
  }
  int keyDataSize=map.unsafe.getInt(keyAddress);
  keyAddress+=Integer.BYTES;
  byte[] keyData=new byte[keyDataSize];
  for (int keyOffset=0; keyOffset < keyDataSize; keyOffset++) {
    keyData[keyOffset]=map.unsafe.getByte(keyAddress + keyOffset);
  }
  final Binary key=new Binary(keyData);
  if (valueAddress == 0) {
    return new Map.Entry<Binary,Binary>(){
      @Override public Binary getKey(){
        return key;
      }
      @Override public Binary getValue(){
        return null;
      }
      @Override public Binary setValue(      Binary value){
        throw new UnsupportedOperationException();
      }
    }
;
  }
  int valueDataSize=map.unsafe.getInt(valueAddress);
  valueAddress+=Integer.BYTES;
  byte[] valueData=new byte[valueDataSize];
  for (int valueOffset=0; valueOffset < valueDataSize; valueOffset++) {
    valueData[valueOffset]=map.unsafe.getByte(valueAddress + valueOffset);
  }
  final Binary value=new Binary(valueData);
  return new Map.Entry<Binary,Binary>(){
    @Override public Binary getKey(){
      return key;
    }
    @Override public Binary getValue(){
      return value;
    }
    @Override public Binary setValue(    Binary value){
      throw new UnsupportedOperationException();
    }
  }
;
}","@Override public Entry<Binary,Binary> next(){
  if (offset >= map.partitionCount)   throw new NoSuchElementException();
  long locationAddress=map.unsafe.getAddress(map.partitionAddress + (offset * map.addressSize));
  while (locationAddress == 0) {
    offset++;
    if (offset >= map.partitionCount)     throw new NoSuchElementException();
    locationAddress=map.unsafe.getAddress(map.partitionAddress + (offset * map.addressSize));
  }
  int entryCount=map.unsafe.getInt(locationAddress);
  locationAddress+=Integer.BYTES;
  long keyAddress=map.unsafe.getAddress(locationAddress + (locationOffset * map.addressSize * 2));
  long valueAddress=map.unsafe.getAddress(locationAddress + (locationOffset * map.addressSize * 2) + map.addressSize);
  locationOffset++;
  if (locationOffset >= entryCount) {
    locationOffset=0;
    offset++;
  }
  int keyDataSize=map.unsafe.getInt(keyAddress);
  keyAddress+=Integer.BYTES;
  byte[] keyData=new byte[keyDataSize];
  for (int keyOffset=0; keyOffset < keyDataSize; keyOffset++) {
    keyData[keyOffset]=map.unsafe.getByte(keyAddress + keyOffset);
  }
  final Binary key=new Binary(keyData);
  if (valueAddress == 0) {
    return new Map.Entry<Binary,Binary>(){
      @Override public Binary getKey(){
        return key;
      }
      @Override public Binary getValue(){
        return null;
      }
      @Override public Binary setValue(      Binary value){
        throw new UnsupportedOperationException();
      }
    }
;
  }
  int valueDataSize=map.unsafe.getInt(valueAddress);
  valueAddress+=Integer.BYTES;
  byte[] valueData=new byte[valueDataSize];
  for (int valueOffset=0; valueOffset < valueDataSize; valueOffset++) {
    valueData[valueOffset]=map.unsafe.getByte(valueAddress + valueOffset);
  }
  final Binary value=new Binary(valueData);
  return new Map.Entry<Binary,Binary>(){
    @Override public Binary getKey(){
      return key;
    }
    @Override public Binary getValue(){
      return value;
    }
    @Override public Binary setValue(    Binary value){
      throw new UnsupportedOperationException();
    }
  }
;
}",0.9546812749003984
34362,"@Override public boolean hasNext(){
  long locationAddress=map.unsafe.getAddress(map.partitionAddress + (offset * map.addressSize));
  if (locationAddress == 0) {
    offset++;
    return hasNext();
  }
  return offset < map.partitionCount;
}","@Override public boolean hasNext(){
  while (offset < map.partitionCount) {
    long locationAddress=map.unsafe.getAddress(map.partitionAddress + (offset * map.addressSize));
    if (locationAddress == 0) {
      offset++;
      continue;
    }
    break;
  }
  return offset < map.partitionCount;
}",0.8280961182994455
34363,"static SSLSocketFactory getSocketFactory(final String caCrtFile,final String crtFile,final String keyFile,final String password) throws Exception {
  Security.addProvider(new BouncyCastleProvider());
  X509Certificate caCert=null;
  if (caCrtFile != null) {
    PEMReader reader=new PEMReader(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(caCrtFile)))));
    caCert=(X509Certificate)reader.readObject();
    reader.close();
  }
  PEMReader reader=new PEMReader(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(crtFile)))));
  X509Certificate cert=(X509Certificate)reader.readObject();
  reader.close();
  reader=new PEMReader(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(keyFile)))));
  KeyPair key=(KeyPair)reader.readObject();
  reader.close();
  TrustManagerFactory tmf=null;
  if (caCert != null) {
    KeyStore caKs=KeyStore.getInstance(""String_Node_Str"");
    caKs.load(null,null);
    caKs.setCertificateEntry(""String_Node_Str"",caCert);
    tmf=TrustManagerFactory.getInstance(""String_Node_Str"");
    tmf.init(caKs);
  }
  KeyStore ks=KeyStore.getInstance(""String_Node_Str"");
  ks.load(null,null);
  ks.setCertificateEntry(""String_Node_Str"",cert);
  ks.setKeyEntry(""String_Node_Str"",key.getPrivate(),password.toCharArray(),new java.security.cert.Certificate[]{cert});
  KeyManagerFactory kmf=KeyManagerFactory.getInstance(""String_Node_Str"");
  kmf.init(ks,password.toCharArray());
  SSLContext context=SSLContext.getInstance(""String_Node_Str"");
  if (tmf != null) {
    context.init(kmf.getKeyManagers(),tmf.getTrustManagers(),null);
  }
 else {
    context.init(kmf.getKeyManagers(),null,null);
  }
  return context.getSocketFactory();
}","static SSLSocketFactory getSocketFactory(final String caCrtFile,final String crtFile,final String keyFile,final String password) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, UnrecoverableKeyException, KeyManagementException {
  Security.addProvider(new BouncyCastleProvider());
  X509Certificate caCert=null;
  if (caCrtFile != null) {
    PEMReader reader=new PEMReader(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(caCrtFile)))));
    caCert=(X509Certificate)reader.readObject();
    reader.close();
  }
 else {
    ClassLoader classLoader=AbstractClient.class.getClassLoader();
    PEMReader reader=new PEMReader(new InputStreamReader(classLoader.getResource(SERVER_MESSAGING_PEM).openStream()));
    caCert=(X509Certificate)reader.readObject();
    reader.close();
  }
  PEMReader reader=new PEMReader(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(crtFile)))));
  X509Certificate cert=(X509Certificate)reader.readObject();
  reader.close();
  reader=new PEMReader(new InputStreamReader(new ByteArrayInputStream(Files.readAllBytes(Paths.get(keyFile)))));
  KeyPair key=(KeyPair)reader.readObject();
  reader.close();
  TrustManagerFactory tmf=null;
  if (caCert != null) {
    KeyStore caKs=KeyStore.getInstance(""String_Node_Str"");
    caKs.load(null,null);
    caKs.setCertificateEntry(""String_Node_Str"",caCert);
    tmf=TrustManagerFactory.getInstance(""String_Node_Str"");
    tmf.init(caKs);
  }
  KeyStore ks=KeyStore.getInstance(""String_Node_Str"");
  ks.load(null,null);
  ks.setCertificateEntry(""String_Node_Str"",cert);
  ks.setKeyEntry(""String_Node_Str"",key.getPrivate(),password.toCharArray(),new java.security.cert.Certificate[]{cert});
  KeyManagerFactory kmf=KeyManagerFactory.getInstance(""String_Node_Str"");
  kmf.init(ks,password.toCharArray());
  SSLContext context=SSLContext.getInstance(""String_Node_Str"");
  if (tmf != null) {
    context.init(kmf.getKeyManagers(),tmf.getTrustManagers(),null);
  }
 else {
    context.init(kmf.getKeyManagers(),null,null);
  }
  return context.getSocketFactory();
}",0.8652997664157799
34364,"/** 
 * Call to the connectUsingCertificate() method is made, when the User chooses to connect to the Watson IoT Platform using Client Certificate as the preferred Authentication mechanism. The Device Properties file allows you enable either Token based or Certificate based or both mechanisms to authenticate. However, setting the value to either 'True' or 'False' against the parameter 'Use-Secure-Certificate', facilitates usage of Certificates for authentication or not, respectively. Setting the value of parameter 'Use-Secure-Certificate' to 'True' in the Device.Properties file will make a call to the following method. 
 */
private void connectUsingCertificate(){
  final String METHOD=""String_Node_Str"";
  String protocol=null;
  int port=getPortNumber();
  if (isWebSocket()) {
    protocol=""String_Node_Str"";
    if (port == -1) {
      port=WSS_PORT;
    }
  }
 else {
    protocol=""String_Node_Str"";
    if (port == -1) {
      port=MQTTS_PORT;
    }
  }
  String mqttServer=getMQTTServer();
  if (mqttServer != null) {
    serverURI=protocol + mqttServer + ""String_Node_Str""+ port;
  }
 else {
    serverURI=protocol + getOrgId() + ""String_Node_Str""+ MESSAGING+ ""String_Node_Str""+ this.getDomain()+ ""String_Node_Str""+ port;
  }
  try {
    mqttAsyncClient=new MqttAsyncClient(serverURI,clientId,DATA_STORE);
    mqttAsyncClient.setCallback(mqttCallback);
    mqttClientOptions=new MqttConnectOptions();
    if (clientUsername != null) {
      mqttClientOptions.setUserName(clientUsername);
    }
    if (clientPassword != null) {
      mqttClientOptions.setPassword(clientPassword.toCharArray());
    }
    mqttClientOptions.setCleanSession(this.isCleanSession());
    if (this.keepAliveInterval != -1) {
      mqttClientOptions.setKeepAliveInterval(this.keepAliveInterval);
    }
    mqttClientOptions.setMaxInflight(getMaxInflight());
    mqttClientOptions.setAutomaticReconnect(isAutomaticReconnect());
    SSLContext sslContext=SSLContext.getInstance(""String_Node_Str"");
    sslContext.init(null,null,null);
    if (trimedValue(options.getProperty(""String_Node_Str"")) != null) {
      if (trimedValue(options.getProperty(""String_Node_Str"")).contains(""String_Node_Str"") || trimedValue(options.getProperty(""String_Node_Str"")).contains(""String_Node_Str"") || trimedValue(options.getProperty(""String_Node_Str"")).contains(""String_Node_Str"")) {
        serverCert=trimedValue(options.getProperty(""String_Node_Str""));
      }
 else {
        LoggerUtility.log(Level.SEVERE,CLASS_NAME,METHOD,""String_Node_Str"");
        return;
      }
    }
 else {
      LoggerUtility.log(Level.SEVERE,CLASS_NAME,METHOD,""String_Node_Str"");
      return;
    }
    if (trimedValue(options.getProperty(""String_Node_Str"")) != null) {
      if (trimedValue(options.getProperty(""String_Node_Str"")).contains(""String_Node_Str"") || trimedValue(options.getProperty(""String_Node_Str"")).contains(""String_Node_Str"") || trimedValue(options.getProperty(""String_Node_Str"")).contains(""String_Node_Str"")) {
        clientCert=trimedValue(options.getProperty(""String_Node_Str""));
      }
 else {
        LoggerUtility.log(Level.SEVERE,CLASS_NAME,METHOD,""String_Node_Str"");
        return;
      }
    }
 else {
      LoggerUtility.log(Level.SEVERE,CLASS_NAME,METHOD,""String_Node_Str"");
      return;
    }
    if (trimedValue(options.getProperty(""String_Node_Str"")) != null) {
      if (trimedValue(options.getProperty(""String_Node_Str"")).contains(""String_Node_Str"")) {
        clientCertKey=trimedValue(options.getProperty(""String_Node_Str""));
      }
 else {
        LoggerUtility.log(Level.SEVERE,CLASS_NAME,METHOD,""String_Node_Str"");
        return;
      }
    }
 else {
      LoggerUtility.log(Level.SEVERE,CLASS_NAME,METHOD,""String_Node_Str"");
      return;
    }
    try {
      if (trimedValue(options.getProperty(""String_Node_Str"")) != null) {
        certPassword=trimedValue(options.getProperty(""String_Node_Str""));
      }
 else {
        certPassword=""String_Node_Str"";
      }
    }
 catch (    Exception e) {
      LoggerUtility.log(Level.SEVERE,CLASS_NAME,METHOD,""String_Node_Str"",e);
      e.printStackTrace();
      throw e;
    }
    mqttClientOptions.setSocketFactory(getSocketFactory(serverCert,clientCert,clientCertKey,certPassword));
  }
 catch (  Exception e) {
    LoggerUtility.warn(CLASS_NAME,METHOD,""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}","/** 
 * Call to the connectUsingCertificate() method is made, when the User chooses to connect to the Watson IoT Platform using Client Certificate as the preferred Authentication mechanism. The Device Properties file allows you enable either Token based or Certificate based or both mechanisms to authenticate. However, setting the value to either 'True' or 'False' against the parameter 'Use-Secure-Certificate', facilitates usage of Certificates for authentication or not, respectively. Setting the value of parameter 'Use-Secure-Certificate' to 'True' in the Device.Properties file will make a call to the following method. 
 */
private void connectUsingCertificate(){
  final String METHOD=""String_Node_Str"";
  String protocol=null;
  int port=getPortNumber();
  if (isWebSocket()) {
    protocol=""String_Node_Str"";
    if (port == -1) {
      port=WSS_PORT;
    }
  }
 else {
    protocol=""String_Node_Str"";
    if (port == -1) {
      port=MQTTS_PORT;
    }
  }
  String mqttServer=getMQTTServer();
  if (mqttServer != null) {
    serverURI=protocol + mqttServer + ""String_Node_Str""+ port;
  }
 else {
    serverURI=protocol + getOrgId() + ""String_Node_Str""+ MESSAGING+ ""String_Node_Str""+ this.getDomain()+ ""String_Node_Str""+ port;
  }
  try {
    mqttAsyncClient=new MqttAsyncClient(serverURI,clientId,DATA_STORE);
    mqttAsyncClient.setCallback(mqttCallback);
    mqttClientOptions=new MqttConnectOptions();
    if (clientUsername != null) {
      mqttClientOptions.setUserName(clientUsername);
    }
    if (clientPassword != null) {
      mqttClientOptions.setPassword(clientPassword.toCharArray());
    }
    mqttClientOptions.setCleanSession(this.isCleanSession());
    if (this.keepAliveInterval != -1) {
      mqttClientOptions.setKeepAliveInterval(this.keepAliveInterval);
    }
    mqttClientOptions.setMaxInflight(getMaxInflight());
    mqttClientOptions.setAutomaticReconnect(isAutomaticReconnect());
    SSLContext sslContext=SSLContext.getInstance(""String_Node_Str"");
    sslContext.init(null,null,null);
    String serverCert=null;
    String clientCert=null;
    String clientCertKey=null;
    String certPassword=null;
    if (trimedValue(options.getProperty(""String_Node_Str"")) != null) {
      if (trimedValue(options.getProperty(""String_Node_Str"")).contains(""String_Node_Str"") || trimedValue(options.getProperty(""String_Node_Str"")).contains(""String_Node_Str"") || trimedValue(options.getProperty(""String_Node_Str"")).contains(""String_Node_Str"")) {
        serverCert=trimedValue(options.getProperty(""String_Node_Str""));
      }
 else {
        LoggerUtility.log(Level.SEVERE,CLASS_NAME,METHOD,""String_Node_Str"");
        throw new RuntimeException(""String_Node_Str"");
      }
    }
 else {
      LoggerUtility.log(Level.SEVERE,CLASS_NAME,METHOD,""String_Node_Str"");
    }
    if (trimedValue(options.getProperty(""String_Node_Str"")) != null) {
      if (trimedValue(options.getProperty(""String_Node_Str"")).contains(""String_Node_Str"") || trimedValue(options.getProperty(""String_Node_Str"")).contains(""String_Node_Str"") || trimedValue(options.getProperty(""String_Node_Str"")).contains(""String_Node_Str"")) {
        clientCert=trimedValue(options.getProperty(""String_Node_Str""));
      }
 else {
        LoggerUtility.log(Level.SEVERE,CLASS_NAME,METHOD,""String_Node_Str"");
        throw new RuntimeException(""String_Node_Str"");
      }
    }
 else {
      LoggerUtility.log(Level.SEVERE,CLASS_NAME,METHOD,""String_Node_Str"");
      throw new RuntimeException(""String_Node_Str"");
    }
    if (trimedValue(options.getProperty(""String_Node_Str"")) != null) {
      if (trimedValue(options.getProperty(""String_Node_Str"")).contains(""String_Node_Str"")) {
        clientCertKey=trimedValue(options.getProperty(""String_Node_Str""));
      }
 else {
        LoggerUtility.log(Level.SEVERE,CLASS_NAME,METHOD,""String_Node_Str"");
        return;
      }
    }
 else {
      LoggerUtility.log(Level.SEVERE,CLASS_NAME,METHOD,""String_Node_Str"");
      return;
    }
    try {
      if (trimedValue(options.getProperty(""String_Node_Str"")) != null) {
        certPassword=trimedValue(options.getProperty(""String_Node_Str""));
      }
 else {
        certPassword=""String_Node_Str"";
      }
    }
 catch (    RuntimeException e) {
      LoggerUtility.log(Level.SEVERE,CLASS_NAME,METHOD,""String_Node_Str"",e);
      throw e;
    }
    mqttClientOptions.setSocketFactory(getSocketFactory(serverCert,clientCert,clientCertKey,certPassword));
  }
 catch (  Exception e) {
    LoggerUtility.warn(CLASS_NAME,METHOD,""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    throw new RuntimeException(e.getMessage());
  }
}",0.9592880978865406
34365,"/** 
 * @param msg MqttMessage
 * @param format an object of String which contains format such as json
 * @throws UnsupportedEncodingException if encoding is other than UTF-8
 */
public Message(MqttMessage msg,String format) throws UnsupportedEncodingException {
  final String METHOD=""String_Node_Str"";
  this.rawPayload=msg.getPayload();
  this.payloadInString=new String(msg.getPayload(),""String_Node_Str"");
  this.payload=msg.getPayload();
  if (""String_Node_Str"".equalsIgnoreCase(format)) {
    try {
      JsonObject payloadJson=JSON_PARSER.parse(payloadInString).getAsJsonObject();
      if (payloadJson.has(""String_Node_Str"")) {
        try {
          timestamp=DT_PARSER.parseDateTime(payloadJson.get(""String_Node_Str"").getAsString());
        }
 catch (        IllegalArgumentException e) {
          timestamp=DateTime.now();
        }
      }
 else {
        timestamp=DateTime.now();
      }
    }
 catch (    JsonSyntaxException e) {
      LoggerUtility.warn(CLASS_NAME,METHOD,""String_Node_Str"");
    }
catch (    JsonParseException jpe) {
      LoggerUtility.warn(CLASS_NAME,METHOD,""String_Node_Str"");
    }
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(format)) {
    timestamp=DateTime.now();
  }
 else {
    this.payload=this.payloadInString;
    timestamp=DateTime.now();
  }
}","/** 
 * @param msg MqttMessage
 * @param format an object of String which contains format such as json
 * @throws UnsupportedEncodingException if encoding is other than UTF-8
 */
public Message(MqttMessage msg,String format) throws UnsupportedEncodingException {
  final String METHOD=""String_Node_Str"";
  this.rawPayload=msg.getPayload();
  this.payloadInString=new String(msg.getPayload(),""String_Node_Str"");
  this.payload=msg.getPayload();
  if (""String_Node_Str"".equalsIgnoreCase(format)) {
    try {
      JsonObject payloadJson=JSON_PARSER.parse(payloadInString).getAsJsonObject();
      if (payloadJson.has(""String_Node_Str"")) {
        try {
          timestamp=DT_PARSER.parseDateTime(payloadJson.get(""String_Node_Str"").getAsString());
        }
 catch (        IllegalArgumentException e) {
          timestamp=DateTime.now();
        }
      }
 else {
        timestamp=DateTime.now();
      }
      this.payload=payloadJson;
    }
 catch (    JsonSyntaxException e) {
      LoggerUtility.warn(CLASS_NAME,METHOD,""String_Node_Str"");
    }
catch (    JsonParseException jpe) {
      LoggerUtility.warn(CLASS_NAME,METHOD,""String_Node_Str"");
    }
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(format)) {
    timestamp=DateTime.now();
  }
 else {
    this.payload=this.payloadInString;
    timestamp=DateTime.now();
  }
}",0.9878603945371776
34366,"/** 
 * Initiates a device management request, such as reboot.
 * @param request JSON object containing the management request
 * @return JSON object containing the response from Watson IoT Platform
 * @throws IoTFCReSTException Failure in initiating a DM request
 */
public JsonObject initiateDMRequest(JsonObject request) throws IoTFCReSTException {
  final String METHOD=""String_Node_Str"";
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(orgId).append('.').append(this.domain).append(BASIC_API_V0002_URL).append(""String_Node_Str"");
  int code=0;
  HttpResponse response=null;
  JsonElement jsonResponse=null;
  String method=""String_Node_Str"";
  IoTFCReSTException ex=null;
  try {
    response=connect(method,sb.toString(),request.toString(),null);
    code=response.getStatusLine().getStatusCode();
switch (code) {
case 202:
      String result=this.readContent(response,METHOD);
    jsonResponse=new JsonParser().parse(result);
  break;
case 500:
ex=new IoTFCReSTException(method,sb.toString(),request.toString(),code,IoTFCReSTException.HTTP_INITIATE_DM_REQUEST_ERR_500,null);
break;
default :
ex=new IoTFCReSTException(method,sb.toString(),request.toString(),code,IoTFCReSTException.HTTP_ERR_UNEXPECTED,null);
}
}
 catch (Exception e) {
ex=new IoTFCReSTException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
ex.initCause(e);
}
if (jsonResponse != null) {
return jsonResponse.getAsJsonObject();
}
 else {
if (ex != null) {
throw ex;
}
return null;
}
}","/** 
 * Initiates a device management request, such as reboot.
 * @param request JSON object containing the management request
 * @return JSON object containing the response from Watson IoT Platform
 * @throws IoTFCReSTException Failure in initiating a DM request
 */
public JsonObject initiateDMRequest(JsonObject request) throws IoTFCReSTException {
  final String METHOD=""String_Node_Str"";
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(orgId).append('.').append(this.domain).append(BASIC_API_V0002_URL).append(""String_Node_Str"");
  int code=0;
  HttpResponse response=null;
  JsonElement jsonResponse=null;
  String method=""String_Node_Str"";
  IoTFCReSTException ex=null;
  try {
    response=connect(method,sb.toString(),request.toString(),null);
    code=response.getStatusLine().getStatusCode();
switch (code) {
case 202:
      String result=this.readContent(response,METHOD);
    jsonResponse=new JsonParser().parse(result);
  break;
case 400:
ex=new IoTFCReSTException(method,sb.toString(),request.toString(),code,IoTFCReSTException.HTTP_INITIATE_DM_REQUEST_ERR_400,null);
break;
case 401:
ex=new IoTFCReSTException(method,sb.toString(),request.toString(),code,IoTFCReSTException.HTTP_INITIATE_DM_REQUEST_ERR_401,null);
break;
case 403:
ex=new IoTFCReSTException(method,sb.toString(),request.toString(),code,IoTFCReSTException.HTTP_INITIATE_DM_REQUEST_ERR_403,null);
break;
case 404:
ex=new IoTFCReSTException(method,sb.toString(),request.toString(),code,IoTFCReSTException.HTTP_INITIATE_DM_REQUEST_ERR_404,null);
break;
case 500:
ex=new IoTFCReSTException(method,sb.toString(),request.toString(),code,IoTFCReSTException.HTTP_INITIATE_DM_REQUEST_ERR_500,null);
break;
default :
ex=new IoTFCReSTException(method,sb.toString(),request.toString(),code,IoTFCReSTException.HTTP_ERR_UNEXPECTED,null);
}
}
 catch (Exception e) {
ex=new IoTFCReSTException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
ex.initCause(e);
}
if (jsonResponse != null) {
return jsonResponse.getAsJsonObject();
}
 else {
if (ex != null) {
throw ex;
}
return null;
}
}",0.8352017937219731
34367,"public String getGWDeviceId(){
  String id;
  id=options.getProperty(""String_Node_Str"");
  if (id == null) {
    return getDeviceId();
  }
  return trimedValue(id);
}","public String getGWDeviceId(){
  String id;
  id=options.getProperty(""String_Node_Str"");
  if (id == null) {
    return super.getDeviceId();
  }
  return trimedValue(id);
}",0.9822485207100592
34368,"private void configureConnOptions(){
  final String METHOD=""String_Node_Str"";
  String protocol=null;
  int port=0;
  if (isWebSocket()) {
    protocol=""String_Node_Str"";
    port=WSS_PORT;
  }
 else {
    protocol=""String_Node_Str"";
    port=MQTTS_PORT;
  }
  String serverURI=protocol + getOrgId() + ""String_Node_Str""+ MESSAGING+ ""String_Node_Str""+ this.getDomain()+ ""String_Node_Str""+ port;
  try {
    mqttAsyncClient=new MqttAsyncClient(serverURI,clientId,DATA_STORE);
    mqttAsyncClient.setCallback(mqttCallback);
    mqttClientOptions=new MqttConnectOptions();
    if (clientUsername != null) {
      mqttClientOptions.setUserName(clientUsername);
    }
    if (clientPassword != null) {
      mqttClientOptions.setPassword(clientPassword.toCharArray());
    }
    mqttClientOptions.setCleanSession(this.isCleanSession());
    if (this.keepAliveInterval != -1) {
      mqttClientOptions.setKeepAliveInterval(this.keepAliveInterval);
    }
    mqttClientOptions.setMaxInflight(getMaxInflight());
    mqttClientOptions.setAutomaticReconnect(isAutomaticReconnect());
    SSLContext sslContext=SSLContext.getInstance(""String_Node_Str"");
    sslContext.init(null,null,null);
    mqttClientOptions.setSocketFactory(sslContext.getSocketFactory());
  }
 catch (  MqttException|GeneralSecurityException e) {
    LoggerUtility.warn(CLASS_NAME,METHOD,""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}","private void configureConnOptions(){
  final String METHOD=""String_Node_Str"";
  String protocol=null;
  int port=getPortNumber();
  if (isWebSocket()) {
    protocol=""String_Node_Str"";
    if (port == -1) {
      port=WSS_PORT;
    }
  }
 else {
    protocol=""String_Node_Str"";
    if (port == -1) {
      port=MQTTS_PORT;
    }
  }
  String serverURI=protocol + getOrgId() + ""String_Node_Str""+ MESSAGING+ ""String_Node_Str""+ this.getDomain()+ ""String_Node_Str""+ port;
  try {
    mqttAsyncClient=new MqttAsyncClient(serverURI,clientId,DATA_STORE);
    mqttAsyncClient.setCallback(mqttCallback);
    mqttClientOptions=new MqttConnectOptions();
    if (clientUsername != null) {
      mqttClientOptions.setUserName(clientUsername);
    }
    if (clientPassword != null) {
      mqttClientOptions.setPassword(clientPassword.toCharArray());
    }
    mqttClientOptions.setCleanSession(this.isCleanSession());
    if (this.keepAliveInterval != -1) {
      mqttClientOptions.setKeepAliveInterval(this.keepAliveInterval);
    }
    mqttClientOptions.setMaxInflight(getMaxInflight());
    mqttClientOptions.setAutomaticReconnect(isAutomaticReconnect());
    SSLContext sslContext=SSLContext.getInstance(""String_Node_Str"");
    sslContext.init(null,null,null);
    mqttClientOptions.setSocketFactory(sslContext.getSocketFactory());
  }
 catch (  MqttException|GeneralSecurityException e) {
    LoggerUtility.warn(CLASS_NAME,METHOD,""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}",0.9738292011019284
34369,"private void configureMqtt(){
  String protocol=null;
  int port;
  if (isWebSocket()) {
    protocol=""String_Node_Str"";
    port=WS_PORT;
  }
 else {
    protocol=""String_Node_Str"";
    port=MQTT_PORT;
  }
  String serverURI=protocol + getOrgId() + ""String_Node_Str""+ MESSAGING+ ""String_Node_Str""+ this.getDomain()+ ""String_Node_Str""+ port;
  try {
    persistence=new MemoryPersistence();
    mqttAsyncClient=new MqttAsyncClient(serverURI,clientId,persistence);
    mqttAsyncClient.setCallback(mqttCallback);
    mqttClientOptions=new MqttConnectOptions();
    if (clientUsername != null) {
      mqttClientOptions.setUserName(clientUsername);
    }
    if (clientPassword != null) {
      mqttClientOptions.setPassword(clientPassword.toCharArray());
    }
    mqttClientOptions.setCleanSession(this.isCleanSession());
    if (this.keepAliveInterval != -1) {
      mqttClientOptions.setKeepAliveInterval(this.keepAliveInterval);
    }
    mqttClientOptions.setMaxInflight(getMaxInflight());
  }
 catch (  MqttException e) {
    e.printStackTrace();
  }
}","private void configureMqtt(){
  String protocol=null;
  int port=getPortNumber();
  if (isWebSocket()) {
    protocol=""String_Node_Str"";
    if (port == -1) {
      port=WS_PORT;
    }
  }
 else {
    protocol=""String_Node_Str"";
    if (port == -1) {
      port=MQTT_PORT;
    }
  }
  String serverURI=protocol + getOrgId() + ""String_Node_Str""+ MESSAGING+ ""String_Node_Str""+ this.getDomain()+ ""String_Node_Str""+ port;
  try {
    persistence=new MemoryPersistence();
    mqttAsyncClient=new MqttAsyncClient(serverURI,clientId,persistence);
    mqttAsyncClient.setCallback(mqttCallback);
    mqttClientOptions=new MqttConnectOptions();
    if (clientUsername != null) {
      mqttClientOptions.setUserName(clientUsername);
    }
    if (clientPassword != null) {
      mqttClientOptions.setPassword(clientPassword.toCharArray());
    }
    mqttClientOptions.setCleanSession(this.isCleanSession());
    if (this.keepAliveInterval != -1) {
      mqttClientOptions.setKeepAliveInterval(this.keepAliveInterval);
    }
    mqttClientOptions.setMaxInflight(getMaxInflight());
  }
 catch (  MqttException e) {
    e.printStackTrace();
  }
}",0.9652650822669104
34370,"/** 
 * Returns the payload sent by the Watson IoT Platform in byte[] format
 * @return
 */
public byte[] getRawPayload(){
  return this.rawPayload;
}","/** 
 * Returns the payload sent by the Watson IoT Platform in byte[] format
 * @return Raw payload in byte[]
 */
public byte[] getRawPayload(){
  return this.rawPayload;
}",0.9316770186335404
34371,"/** 
 * @return the domain
 */
protected String getDomain(Properties options){
  String domain;
  domain=options.getProperty(""String_Node_Str"");
  if (domain == null) {
    domain=options.getProperty(""String_Node_Str"");
  }
  domain=trimedValue(domain);
  if (domain != null && !(""String_Node_Str"".equals(domain))) {
    return domain;
  }
 else {
    return AbstractClient.DEFAULT_DOMAIN;
  }
}","/** 
 * @param options List of properties 
 * @return the domain
 */
protected String getDomain(Properties options){
  String domain;
  domain=options.getProperty(""String_Node_Str"");
  if (domain == null) {
    domain=options.getProperty(""String_Node_Str"");
  }
  domain=trimedValue(domain);
  if (domain != null && !(""String_Node_Str"".equals(domain))) {
    return domain;
  }
 else {
    return AbstractClient.DEFAULT_DOMAIN;
  }
}",0.9541062801932368
34372,"/** 
 * Get a specific registered device management extension.
 * @param bundleId
 * @return If successful, JsonObject response from Watson IoT Platform.
 * @throws IoTFCReSTException if failed.
 * @see IoTFCReSTException
 */
public JsonObject getDeviceManagementExtension(String bundleId) throws IoTFCReSTException {
  final String METHOD=""String_Node_Str"";
  HttpResponse response=null;
  JsonElement jsonResponse=null;
  int code=0;
  try {
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    sb.append(orgId).append('.').append(this.domain).append(BASIC_API_V0002_URL).append(""String_Node_Str"" + bundleId);
    response=connect(""String_Node_Str"",sb.toString(),null,null);
    code=response.getStatusLine().getStatusCode();
    if (code == 200 || code == 400 || code == 401 || code == 403 || code == 404 || code == 500) {
      String result=this.readContent(response,METHOD);
      jsonResponse=new JsonParser().parse(result);
      if (code == 200) {
        return jsonResponse.getAsJsonObject();
      }
 else {
        String reason=null;
switch (code) {
case 400:
          reason=new String(""String_Node_Str"");
        break;
case 401:
      reason=new String(""String_Node_Str"");
    break;
case 403:
  reason=new String(""String_Node_Str"");
break;
case 404:
reason=new String(""String_Node_Str"");
break;
case 500:
reason=new String(""String_Node_Str"");
break;
}
throw new IoTFCReSTException(code,reason,jsonResponse);
}
}
 else {
throw new IoTFCReSTException(code,""String_Node_Str"");
}
}
 catch (Exception e) {
IoTFCReSTException ex=new IoTFCReSTException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
ex.initCause(e);
throw ex;
}
}","/** 
 * Get a specific registered device management extension.
 * @param bundleId bundle id
 * @return If successful, JsonObject response from Watson IoT Platform.
 * @throws IoTFCReSTException if failed.
 * @see IoTFCReSTException
 */
public JsonObject getDeviceManagementExtension(String bundleId) throws IoTFCReSTException {
  final String METHOD=""String_Node_Str"";
  HttpResponse response=null;
  JsonElement jsonResponse=null;
  int code=0;
  try {
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    sb.append(orgId).append('.').append(this.domain).append(BASIC_API_V0002_URL).append(""String_Node_Str"" + bundleId);
    response=connect(""String_Node_Str"",sb.toString(),null,null);
    code=response.getStatusLine().getStatusCode();
    if (code == 200 || code == 400 || code == 401 || code == 403 || code == 404 || code == 500) {
      String result=this.readContent(response,METHOD);
      jsonResponse=new JsonParser().parse(result);
      if (code == 200) {
        return jsonResponse.getAsJsonObject();
      }
 else {
        String reason=null;
switch (code) {
case 400:
          reason=new String(""String_Node_Str"");
        break;
case 401:
      reason=new String(""String_Node_Str"");
    break;
case 403:
  reason=new String(""String_Node_Str"");
break;
case 404:
reason=new String(""String_Node_Str"");
break;
case 500:
reason=new String(""String_Node_Str"");
break;
}
throw new IoTFCReSTException(code,reason,jsonResponse);
}
}
 else {
throw new IoTFCReSTException(code,""String_Node_Str"");
}
}
 catch (Exception e) {
IoTFCReSTException ex=new IoTFCReSTException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
ex.initCause(e);
throw ex;
}
}",0.997000599880024
34373,"/** 
 * Publish event, on the behalf of a device, to the IBM Watson IoT Platform. <br> This method will attempt to create a JSON obejct out of the payload
 * @param deviceType object of String which denotes deviceType 
 * @param deviceId object of String which denotes deviceId
 * @param event object of String which denotes event
 * @param data Payload data
 * @param format The message format
 * @param qos Quality of Service, in int - can have values 0,1,2
 * @return Whether the send was successful.
 */
public boolean publishCommand(String deviceType,String deviceId,String command,Object data,String format,int qos) throws Exception {
  if (!isConnected()) {
    return false;
  }
  final String METHOD=""String_Node_Str"";
  String topic=""String_Node_Str"" + deviceType + ""String_Node_Str""+ deviceId+ ""String_Node_Str""+ command+ ""String_Node_Str""+ format;
  Object payload=null;
  MqttMessage msg=null;
  if (data == null) {
    data=new JsonObject();
  }
  if (data.getClass() == String.class) {
    payload=data;
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
 else   if (data.getClass().getName().equals(""String_Node_Str"")) {
    msg=new MqttMessage((byte[])data);
    payload=Arrays.toString((byte[])data);
  }
 else {
    payload=(JsonObject)gson.toJsonTree(data);
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + topic);
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + payload.toString());
  msg.setQos(qos);
  msg.setRetained(false);
  try {
    if (isConnected() && !isAutomaticReconnect()) {
      mqttAsyncClient.publish(topic,msg).waitForCompletion();
    }
 else {
      mqttAsyncClient.publish(topic,msg);
    }
  }
 catch (  MqttPersistenceException e) {
    e.printStackTrace();
    return false;
  }
catch (  MqttException e) {
    e.printStackTrace();
    return false;
  }
  return true;
}","/** 
 * Publish event, on the behalf of a device, to the IBM Watson IoT Platform. <br> This method will attempt to create a JSON obejct out of the payload
 * @param deviceType object of String which denotes deviceType 
 * @param deviceId object of String which denotes deviceId
 * @param command object of String which denotes the command
 * @param data Payload data
 * @param format The message format
 * @param qos Quality of Service, in int - can have values 0,1,2
 * @return Whether the send was successful.
 * @throws Exception when the publish operation fails
 */
public boolean publishCommand(String deviceType,String deviceId,String command,Object data,String format,int qos) throws Exception {
  if (!isConnected()) {
    return false;
  }
  final String METHOD=""String_Node_Str"";
  String topic=""String_Node_Str"" + deviceType + ""String_Node_Str""+ deviceId+ ""String_Node_Str""+ command+ ""String_Node_Str""+ format;
  Object payload=null;
  MqttMessage msg=null;
  if (data == null) {
    data=new JsonObject();
  }
  if (data.getClass() == String.class) {
    payload=data;
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
 else   if (data.getClass().getName().equals(""String_Node_Str"")) {
    msg=new MqttMessage((byte[])data);
    payload=Arrays.toString((byte[])data);
  }
 else {
    payload=(JsonObject)gson.toJsonTree(data);
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + topic);
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + payload.toString());
  msg.setQos(qos);
  msg.setRetained(false);
  try {
    if (isConnected() && !isAutomaticReconnect()) {
      mqttAsyncClient.publish(topic,msg).waitForCompletion();
    }
 else {
      mqttAsyncClient.publish(topic,msg);
    }
  }
 catch (  MqttPersistenceException e) {
    e.printStackTrace();
    return false;
  }
catch (  MqttException e) {
    e.printStackTrace();
    return false;
  }
  return true;
}",0.9795409181636726
34374,"/** 
 * Publish event, on the behalf of a device, to the IBM Watson IoT Platform. <br> This method will attempt to create a JSON obejct out of the payload
 * @param deviceType object of String which denotes deviceType 
 * @param deviceId object of String which denotes deviceId
 * @param event object of String which denotes event
 * @param data Payload data
 * @param format The message format
 * @param qos Quality of Service, in int - can have values 0,1,2
 * @return Whether the send was successful.
 */
public boolean publishEvent(String deviceType,String deviceId,String event,Object data,String format,int qos) throws Exception {
  if (!isConnected()) {
    return false;
  }
  final String METHOD=""String_Node_Str"";
  String topic=""String_Node_Str"" + deviceType + ""String_Node_Str""+ deviceId+ ""String_Node_Str""+ event+ ""String_Node_Str""+ format;
  Object payload=null;
  MqttMessage msg=null;
  if (data == null) {
    data=new JsonObject();
  }
  if (data.getClass() == String.class) {
    payload=data;
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
 else   if (data.getClass().getName().equals(""String_Node_Str"")) {
    msg=new MqttMessage((byte[])data);
    payload=Arrays.toString((byte[])data);
  }
 else {
    payload=gson.toJsonTree(data);
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + topic);
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + payload.toString());
  msg.setQos(qos);
  msg.setRetained(false);
  try {
    if (isConnected() && !isAutomaticReconnect()) {
      mqttAsyncClient.publish(topic,msg).waitForCompletion();
    }
 else {
      mqttAsyncClient.publish(topic,msg);
    }
  }
 catch (  MqttPersistenceException e) {
    e.printStackTrace();
    return false;
  }
catch (  MqttException e) {
    e.printStackTrace();
    return false;
  }
  return true;
}","/** 
 * Publish event, on the behalf of a device, to the IBM Watson IoT Platform. <br> This method will attempt to create a JSON obejct out of the payload
 * @param deviceType object of String which denotes deviceType 
 * @param deviceId object of String which denotes deviceId
 * @param event object of String which denotes event
 * @param data Payload data
 * @param format The message format
 * @param qos Quality of Service, in int - can have values 0,1,2
 * @return Whether the send was successful.
 * @throws Exception when the publish operation fails
 */
public boolean publishEvent(String deviceType,String deviceId,String event,Object data,String format,int qos) throws Exception {
  if (!isConnected()) {
    return false;
  }
  final String METHOD=""String_Node_Str"";
  String topic=""String_Node_Str"" + deviceType + ""String_Node_Str""+ deviceId+ ""String_Node_Str""+ event+ ""String_Node_Str""+ format;
  Object payload=null;
  MqttMessage msg=null;
  if (data == null) {
    data=new JsonObject();
  }
  if (data.getClass() == String.class) {
    payload=data;
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
 else   if (data.getClass().getName().equals(""String_Node_Str"")) {
    msg=new MqttMessage((byte[])data);
    payload=Arrays.toString((byte[])data);
  }
 else {
    payload=gson.toJsonTree(data);
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + topic);
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + payload.toString());
  msg.setQos(qos);
  msg.setRetained(false);
  try {
    if (isConnected() && !isAutomaticReconnect()) {
      mqttAsyncClient.publish(topic,msg).waitForCompletion();
    }
 else {
      mqttAsyncClient.publish(topic,msg);
    }
  }
 catch (  MqttPersistenceException e) {
    e.printStackTrace();
    return false;
  }
catch (  MqttException e) {
    e.printStackTrace();
    return false;
  }
  return true;
}",0.986377396569122
34375,"/** 
 * Publish data to the IBM Watson IoT Platform.<br>
 * @param event object of String which denotes event
 * @param data Payload data
 * @param format The message format
 * @param qos Quality of Service, in int - can have values 0,1,2
 * @return Whether the send was successful.
 */
public boolean publishEvent(String event,Object data,String format,int qos) throws Exception {
  if (!isConnected()) {
    return false;
  }
  final String METHOD=""String_Node_Str"";
  String topic=""String_Node_Str"" + event + ""String_Node_Str""+ format;
  Object payload=null;
  MqttMessage msg=null;
  if (data == null) {
    data=new JsonObject();
  }
  if (data.getClass() == String.class) {
    payload=data;
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
 else   if (data.getClass().getName().equals(""String_Node_Str"")) {
    payload=Arrays.toString((byte[])data);
    msg=new MqttMessage((byte[])data);
  }
 else {
    payload=gson.toJsonTree(data);
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + topic);
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + payload.toString());
  msg.setQos(qos);
  msg.setRetained(false);
  try {
    mqttAsyncClient.publish(topic,msg).waitForCompletion();
  }
 catch (  MqttPersistenceException e) {
    e.printStackTrace();
    return false;
  }
catch (  MqttException e) {
    e.printStackTrace();
    return false;
  }
  return true;
}","/** 
 * Publish data to the IBM Watson IoT Platform.<br>
 * @param event object of String which denotes event
 * @param data Payload data
 * @param format The message format
 * @param qos Quality of Service, in int - can have values 0,1,2
 * @return Whether the send was successful.
 * @throws Exception when the publish operation fails
 */
public boolean publishEvent(String event,Object data,String format,int qos) throws Exception {
  if (!isConnected()) {
    return false;
  }
  final String METHOD=""String_Node_Str"";
  String topic=""String_Node_Str"" + event + ""String_Node_Str""+ format;
  Object payload=null;
  MqttMessage msg=null;
  if (data == null) {
    data=new JsonObject();
  }
  if (data.getClass() == String.class) {
    payload=data;
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
 else   if (data.getClass().getName().equals(""String_Node_Str"")) {
    payload=Arrays.toString((byte[])data);
    msg=new MqttMessage((byte[])data);
  }
 else {
    payload=gson.toJsonTree(data);
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + topic);
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + payload.toString());
  msg.setQos(qos);
  msg.setRetained(false);
  try {
    if (isConnected() && !isAutomaticReconnect()) {
      mqttAsyncClient.publish(topic,msg).waitForCompletion();
    }
 else {
      mqttAsyncClient.publish(topic,msg);
    }
  }
 catch (  MqttPersistenceException e) {
    e.printStackTrace();
    return false;
  }
catch (  MqttException e) {
    e.printStackTrace();
    return false;
  }
  return true;
}",0.947172156619018
34376,"/** 
 * Publish event, on the behalf of a device, to the IBM Watson IoT Platform. <br>
 * @param deviceType object of String which denotes deviceType 
 * @param deviceId object of String which denotes deviceId
 * @param event object of String which denotes event
 * @param data Payload data
 * @param format The message format
 * @param qos Quality of Service, in int - can have values 0,1,2
 * @return Whether the send was successful.
 */
public boolean publishDeviceEvent(String deviceType,String deviceId,String event,Object data,String format,int qos) throws Exception {
  if (!isConnected()) {
    return false;
  }
  final String METHOD=""String_Node_Str"";
  String topic=""String_Node_Str"" + deviceType + ""String_Node_Str""+ deviceId+ ""String_Node_Str""+ event+ ""String_Node_Str""+ format;
  Object payload=null;
  MqttMessage msg=null;
  if (data == null) {
    data=new JsonObject();
  }
  if (data.getClass() == String.class) {
    payload=data;
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
 else   if (data.getClass().getName().equals(""String_Node_Str"")) {
    msg=new MqttMessage((byte[])data);
    payload=Arrays.toString((byte[])data);
  }
 else {
    payload=gson.toJsonTree(data);
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + topic);
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + payload.toString());
  msg.setQos(qos);
  msg.setRetained(false);
  try {
    if (isConnected() && !isAutomaticReconnect()) {
      mqttAsyncClient.publish(topic,msg).waitForCompletion();
    }
 else {
      mqttAsyncClient.publish(topic,msg);
    }
  }
 catch (  MqttPersistenceException e) {
    e.printStackTrace();
    return false;
  }
catch (  MqttException e) {
    e.printStackTrace();
    return false;
  }
  return true;
}","/** 
 * Publish event, on the behalf of a device, to the IBM Watson IoT Platform. <br>
 * @param deviceType object of String which denotes deviceType 
 * @param deviceId object of String which denotes deviceId
 * @param event object of String which denotes event
 * @param data Payload data
 * @param format The message format
 * @param qos Quality of Service, in int - can have values 0,1,2
 * @return Whether the send was successful.
 * @throws Exception when the publish operation fails
 */
public boolean publishDeviceEvent(String deviceType,String deviceId,String event,Object data,String format,int qos) throws Exception {
  if (!isConnected()) {
    return false;
  }
  final String METHOD=""String_Node_Str"";
  String topic=""String_Node_Str"" + deviceType + ""String_Node_Str""+ deviceId+ ""String_Node_Str""+ event+ ""String_Node_Str""+ format;
  Object payload=null;
  MqttMessage msg=null;
  if (data == null) {
    data=new JsonObject();
  }
  if (data.getClass() == String.class) {
    payload=data;
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
 else   if (data.getClass().getName().equals(""String_Node_Str"")) {
    msg=new MqttMessage((byte[])data);
    payload=Arrays.toString((byte[])data);
  }
 else {
    payload=gson.toJsonTree(data);
    msg=new MqttMessage(payload.toString().getBytes(Charset.forName(""String_Node_Str"")));
  }
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + topic);
  LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"" + payload.toString());
  msg.setQos(qos);
  msg.setRetained(false);
  try {
    if (isConnected() && !isAutomaticReconnect()) {
      mqttAsyncClient.publish(topic,msg).waitForCompletion();
    }
 else {
      mqttAsyncClient.publish(topic,msg);
    }
  }
 catch (  MqttPersistenceException e) {
    e.printStackTrace();
    return false;
  }
catch (  MqttException e) {
    e.printStackTrace();
    return false;
  }
  return true;
}",0.9859375
34377,"/** 
 * <p>While Gateway publishes events on behalf of the devices connected to it,  the Gateway can publish its own events as well. This method publishes event with the  specified name and specified QOS.</p> This method allows QoS to be passed as an argument
 * @param event Name of the dataset under which to publish the data
 * @param data Object to be added to the payload as the dataset
 * @param qos Quality of Service - should be 0, 1 or 2
 * @return Whether the send was successful.
 * @throws Exception 
 */
public boolean publishGatewayEvent(String event,Object data,String format,int qos) throws Exception {
  return publishDeviceEvent(this.getGWDeviceType(),this.getGWDeviceId(),event,data,format,qos);
}","/** 
 * <p>While Gateway publishes events on behalf of the devices connected to it,  the Gateway can publish its own events as well. This method publishes event with the  specified name and specified QOS.</p> This method allows QoS to be passed as an argument
 * @param event Name of the dataset under which to publish the data
 * @param data Object to be added to the payload as the dataset
 * @param format the format of the event
 * @param qos Quality of Service - should be 0, 1 or 2
 * @return Whether the send was successful.
 * @throws Exception when the publish operation fails
 */
public boolean publishGatewayEvent(String event,Object data,String format,int qos) throws Exception {
  return publishDeviceEvent(this.getGWDeviceType(),this.getGWDeviceId(),event,data,format,qos);
}",0.9514950166112957
34378,"/** 
 * Following are actions that needs to be taken after receiving the command If mgmt.firmware.state is not 0 (""Idle"") an error should be reported with  response code 400, and an optional message text. If the action can be initiated immediately, set rc to 202. If mgmt.firmware.url is not set or is not a valid URL, set rc to 400. If firmware download attempt fails, set rc to 500 and optionally set message accordingly. If firmware download is not supported, set rc to 501 and optionally set message accordingly.
 */
@Override public void handleRequest(JsonObject jsonRequest){
  final String METHOD=""String_Node_Str"";
  ResponseCode rc;
  JsonObject response=new JsonObject();
  response.add(""String_Node_Str"",jsonRequest.get(""String_Node_Str""));
  DeviceFirmware deviceFirmware=getDMClient().getDeviceData().getDeviceFirmware();
  if (deviceFirmware == null || getDMClient().getFirmwareHandler() == null) {
    rc=ResponseCode.DM_FUNCTION_NOT_IMPLEMENTED;
  }
 else   if (deviceFirmware.getState() != DeviceFirmware.FirmwareState.IDLE.getState()) {
    rc=ResponseCode.DM_BAD_REQUEST;
  }
 else {
    if (deviceFirmware.getUrl() != null) {
      LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"");
      getDMClient().getFirmwareHandler().downloadFirmware(deviceFirmware);
      rc=ResponseCode.DM_ACCEPTED;
    }
 else {
      rc=ResponseCode.DM_BAD_REQUEST;
      LoggerUtility.severe(CLASS_NAME,METHOD,""String_Node_Str"");
    }
  }
  response.add(""String_Node_Str"",new JsonPrimitive(rc.getCode()));
  respond(response);
}","/** 
 * Following are actions that needs to be taken after receiving the command If mgmt.firmware.state is not 0 (""Idle"") an error should be reported with  response code 400, and an optional message text. If the action can be initiated immediately, set rc to 202. If mgmt.firmware.url is not set or is not a valid URL, set rc to 400. If firmware download attempt fails, set rc to 500 and optionally set message accordingly. If firmware download is not supported, set rc to 501 and optionally set message accordingly.
 */
@Override public void handleRequest(JsonObject jsonRequest){
  final String METHOD=""String_Node_Str"";
  ResponseCode rc;
  JsonObject response=new JsonObject();
  response.add(""String_Node_Str"",jsonRequest.get(""String_Node_Str""));
  DeviceFirmware deviceFirmware=getDMClient().getDeviceData().getDeviceFirmware();
  if (deviceFirmware == null || getDMClient().getFirmwareHandler() == null) {
    rc=ResponseCode.DM_FUNCTION_NOT_IMPLEMENTED;
  }
 else   if (deviceFirmware.getState() != DeviceFirmware.FirmwareState.IDLE.getState()) {
    rc=ResponseCode.DM_BAD_REQUEST;
  }
 else {
    if (deviceFirmware.getUrl() != null) {
      rc=ResponseCode.DM_ACCEPTED;
    }
 else {
      rc=ResponseCode.DM_BAD_REQUEST;
      LoggerUtility.severe(CLASS_NAME,METHOD,""String_Node_Str"");
    }
  }
  response.add(""String_Node_Str"",new JsonPrimitive(rc.getCode()));
  respond(response);
  if (rc == ResponseCode.DM_ACCEPTED) {
    LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"");
    getDMClient().getFirmwareHandler().downloadFirmware(deviceFirmware);
  }
}",0.8379421221864952
34379,"/** 
 * If this operation can be initiated immediately, rc should be set to 202. If firmware was not previously downloaded successfully, rc should be set to 400. If firmware update attempt fails, rc should be set to 500  and the message field can optionally be set to contain relevant information. If firmware update is not supported rc should be set to 501 and the message  field can optionally be set to contain relevant information. If mgmt.firmware.state is not 2 (Downloaded), an error should be reported  with rc set to 400 and an optional message text. Otherwise,  mgmt.firmware.updateStatus should be set to 1 (In Progress) and firmware  installation should start. If firmware installation fails, mgmt.firmware.updateStatus should be set to either: 2 (Out of Memory) 5 (Unsupported Image) Once firmware update is complete, mgmt.firmware.updateStatus  should be set to 0 (Success), mgmt.firmware.state should be set to 0 (Idle),  downloaded firmware image can be deleted from the device and deviceInfo.fwVersion  should be set to the value of mgmt.firmware.version.
 */
@Override public void handleRequest(JsonObject jsonRequest){
  final String METHOD=""String_Node_Str"";
  ResponseCode rc;
  JsonObject response=new JsonObject();
  response.add(""String_Node_Str"",jsonRequest.get(""String_Node_Str""));
  DeviceFirmware firmware=getDMClient().getDeviceData().getDeviceFirmware();
  if (firmware == null || getDMClient().getFirmwareHandler() == null) {
    rc=ResponseCode.DM_FUNCTION_NOT_IMPLEMENTED;
  }
 else {
    if (firmware.getUrl() != null) {
      LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"");
      getDMClient().getFirmwareHandler().updateFirmware(firmware);
      rc=ResponseCode.DM_ACCEPTED;
    }
 else {
      rc=ResponseCode.DM_BAD_REQUEST;
      response.add(""String_Node_Str"",new JsonPrimitive(""String_Node_Str""));
    }
  }
  response.add(""String_Node_Str"",new JsonPrimitive(rc.getCode()));
  respond(response);
}","/** 
 * If this operation can be initiated immediately, rc should be set to 202. If firmware was not previously downloaded successfully, rc should be set to 400. If firmware update attempt fails, rc should be set to 500  and the message field can optionally be set to contain relevant information. If firmware update is not supported rc should be set to 501 and the message  field can optionally be set to contain relevant information. If mgmt.firmware.state is not 2 (Downloaded), an error should be reported  with rc set to 400 and an optional message text. Otherwise,  mgmt.firmware.updateStatus should be set to 1 (In Progress) and firmware  installation should start. If firmware installation fails, mgmt.firmware.updateStatus should be set to either: 2 (Out of Memory) 5 (Unsupported Image) Once firmware update is complete, mgmt.firmware.updateStatus  should be set to 0 (Success), mgmt.firmware.state should be set to 0 (Idle),  downloaded firmware image can be deleted from the device and deviceInfo.fwVersion  should be set to the value of mgmt.firmware.version.
 */
@Override public void handleRequest(JsonObject jsonRequest){
  final String METHOD=""String_Node_Str"";
  ResponseCode rc;
  JsonObject response=new JsonObject();
  response.add(""String_Node_Str"",jsonRequest.get(""String_Node_Str""));
  DeviceFirmware firmware=getDMClient().getDeviceData().getDeviceFirmware();
  if (firmware == null || getDMClient().getFirmwareHandler() == null) {
    rc=ResponseCode.DM_FUNCTION_NOT_IMPLEMENTED;
  }
 else {
    if (firmware.getUrl() != null) {
      rc=ResponseCode.DM_ACCEPTED;
    }
 else {
      rc=ResponseCode.DM_BAD_REQUEST;
      response.add(""String_Node_Str"",new JsonPrimitive(""String_Node_Str""));
    }
  }
  response.add(""String_Node_Str"",new JsonPrimitive(rc.getCode()));
  respond(response);
  if (rc == ResponseCode.DM_ACCEPTED) {
    LoggerUtility.fine(CLASS_NAME,METHOD,""String_Node_Str"");
    getDMClient().getFirmwareHandler().updateFirmware(firmware);
  }
}",0.8581596339603457
34380,"/** 
 * Initiates a device management request, such as reboot.
 * @param request JSON object containing the management request
 * @return JSON object containing the response from Watson IoT Platform
 * @throws IoTFCReSTException Failure in initiating a DM request
 */
public JsonObject initiateDMRequest(JsonObject request) throws IoTFCReSTException {
  final String METHOD=""String_Node_Str"";
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(orgId).append('.').append(this.domain).append(BASIC_API_V0002_URL).append(""String_Node_Str"");
  int code=0;
  HttpResponse response=null;
  JsonElement jsonResponse=null;
  String method=""String_Node_Str"";
  try {
    response=connect(method,sb.toString(),request.toString(),null);
    code=response.getStatusLine().getStatusCode();
    if (code == 202) {
      String result=this.readContent(response,METHOD);
      jsonResponse=new JsonParser().parse(result);
      return jsonResponse.getAsJsonObject();
    }
    String reason=null;
switch (code) {
case 500:
      reason=IoTFCReSTException.HTTP_INITIATE_DM_REQUEST_ERR_500;
    break;
default :
  reason=IoTFCReSTException.HTTP_ERR_UNEXPECTED;
}
throw new IoTFCReSTException(method,sb.toString(),request.toString(),code,reason,null);
}
 catch (Exception e) {
IoTFCReSTException ex=new IoTFCReSTException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
ex.initCause(e);
throw ex;
}
}","/** 
 * Initiates a device management request, such as reboot.
 * @param request JSON object containing the management request
 * @return JSON object containing the response from Watson IoT Platform
 * @throws IoTFCReSTException Failure in initiating a DM request
 */
public JsonObject initiateDMRequest(JsonObject request) throws IoTFCReSTException {
  final String METHOD=""String_Node_Str"";
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(orgId).append('.').append(this.domain).append(BASIC_API_V0002_URL).append(""String_Node_Str"");
  int code=0;
  HttpResponse response=null;
  JsonElement jsonResponse=null;
  String method=""String_Node_Str"";
  IoTFCReSTException ex=null;
  try {
    response=connect(method,sb.toString(),request.toString(),null);
    code=response.getStatusLine().getStatusCode();
switch (code) {
case 202:
      String result=this.readContent(response,METHOD);
    jsonResponse=new JsonParser().parse(result);
  break;
case 500:
ex=new IoTFCReSTException(method,sb.toString(),request.toString(),code,IoTFCReSTException.HTTP_INITIATE_DM_REQUEST_ERR_500,null);
break;
default :
ex=new IoTFCReSTException(method,sb.toString(),request.toString(),code,IoTFCReSTException.HTTP_ERR_UNEXPECTED,null);
}
}
 catch (Exception e) {
ex=new IoTFCReSTException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
ex.initCause(e);
}
if (jsonResponse != null) {
return jsonResponse.getAsJsonObject();
}
 else {
if (ex != null) {
throw ex;
}
return null;
}
}",0.7336093857832988
34381,"public APIClient(Properties opt) throws NoSuchAlgorithmException, KeyManagementException {
  boolean isGateway=false;
  String authKeyPassed=null;
  if (""String_Node_Str"".equals(getAuthMethod(opt))) {
    isGateway=true;
  }
 else {
    authKeyPassed=opt.getProperty(""String_Node_Str"");
    if (authKeyPassed == null) {
      authKeyPassed=opt.getProperty(""String_Node_Str"");
    }
    authKey=trimedValue(authKeyPassed);
  }
  String token=opt.getProperty(""String_Node_Str"");
  if (token == null) {
    token=opt.getProperty(""String_Node_Str"");
  }
  authToken=trimedValue(token);
  String org=null;
  org=opt.getProperty(""String_Node_Str"");
  if (org == null) {
    org=opt.getProperty(""String_Node_Str"");
  }
  this.orgId=trimedValue(org);
  this.domain=getDomain(opt);
  if (isGateway) {
    authKey=""String_Node_Str"" + this.orgId + '/'+ this.getGWDeviceType(opt)+ '/'+ this.getGWDeviceId(opt);
  }
  sslContext=SSLContext.getInstance(""String_Node_Str"");
  sslContext.init(null,null,null);
}","public APIClient(Properties opt) throws NoSuchAlgorithmException, KeyManagementException {
  boolean isGateway=false;
  String authKeyPassed=null;
  if (""String_Node_Str"".equals(getAuthMethod(opt))) {
    isGateway=true;
  }
 else {
    authKeyPassed=opt.getProperty(""String_Node_Str"");
    if (authKeyPassed == null) {
      authKeyPassed=opt.getProperty(""String_Node_Str"");
    }
    authKey=trimedValue(authKeyPassed);
  }
  String token=opt.getProperty(""String_Node_Str"");
  if (token == null) {
    token=opt.getProperty(""String_Node_Str"");
  }
  authToken=trimedValue(token);
  String org=null;
  org=opt.getProperty(""String_Node_Str"");
  if (org == null) {
    org=opt.getProperty(""String_Node_Str"");
  }
  this.orgId=trimedValue(org);
  this.domain=getDomain(opt);
  if (isGateway) {
    authKey=""String_Node_Str"" + this.orgId + '/'+ this.getGWDeviceType(opt)+ '/'+ this.getGWDeviceId(opt);
  }
  TrustManager[] trustAllCerts=new TrustManager[]{new X509TrustManager(){
    public java.security.cert.X509Certificate[] getAcceptedIssuers(){
      return new X509Certificate[0];
    }
    public void checkClientTrusted(    java.security.cert.X509Certificate[] certs,    String authType){
    }
    public void checkServerTrusted(    java.security.cert.X509Certificate[] certs,    String authType){
    }
  }
};
  sslContext=SSLContext.getInstance(""String_Node_Str"");
  sslContext.init(null,trustAllCerts,null);
}",0.8213841690841276
34382,"/** 
 * Note that this class does not have a default constructor <br> This class has only accessors and no mutators and later on might be made final <br>
 * @param command Actual command in the form of String passed
 * @param format Format is a String which can contain values such as ""json""
 * @param msg MqttMessage 
 * @see <a href=""http://www.eclipse.org/paho/files/javadoc/index.html"">Paho Client Library</a> 
 * @throws UnsupportedEncodingException
 */
public Command(String command,String format,MqttMessage msg) throws UnsupportedEncodingException {
  super(msg);
  this.command=command;
  this.format=format;
}","/** 
 * Note that this class does not have a default constructor <br> This class has only accessors and no mutators and later on might be made final <br>
 * @param command Actual command in the form of String passed
 * @param format Format is a String which can contain values such as ""json""
 * @param msg MqttMessage 
 * @see <a href=""http://www.eclipse.org/paho/files/javadoc/index.html"">Paho Client Library</a> 
 * @throws UnsupportedEncodingException When the Format is not UTF-8
 */
public Command(String command,String format,MqttMessage msg) throws UnsupportedEncodingException {
  super(msg);
  this.command=command;
  this.format=format;
}",0.9771112865035516
34383,"/** 
 * Create a device client for the IBM Watson IoT Platform. <br> Connecting to a specific account on the IoTF.
 * @throws Exception When there is a failure in parsing the properties passed 
 */
public DeviceClient(Properties options) throws Exception {
  super(options);
  LoggerUtility.fine(CLASS_NAME,""String_Node_Str"",""String_Node_Str"" + options);
  this.clientId=""String_Node_Str"" + CLIENT_ID_DELIMITER + getOrgId()+ CLIENT_ID_DELIMITER+ getDeviceType()+ CLIENT_ID_DELIMITER+ getDeviceId();
  if (getAuthMethod() == null) {
    this.clientUsername=null;
    this.clientPassword=null;
  }
 else   if (!getAuthMethod().equals(""String_Node_Str"")) {
    throw new Exception(""String_Node_Str"" + getAuthMethod());
  }
 else {
    this.clientUsername=""String_Node_Str"";
    this.clientPassword=getAuthToken();
  }
  createClient(this.new MqttDeviceCallBack());
}","/** 
 * Create a device client for the IBM Watson IoT Platform. <br>
 * @param options the list of options containing the device registration details
 * @throws Exception When there is a failure in parsing the properties passed 
 */
public DeviceClient(Properties options) throws Exception {
  super(options);
  LoggerUtility.fine(CLASS_NAME,""String_Node_Str"",""String_Node_Str"" + options);
  this.clientId=""String_Node_Str"" + CLIENT_ID_DELIMITER + getOrgId()+ CLIENT_ID_DELIMITER+ getDeviceType()+ CLIENT_ID_DELIMITER+ getDeviceId();
  if (getAuthMethod() == null) {
    this.clientUsername=null;
    this.clientPassword=null;
  }
 else   if (!getAuthMethod().equals(""String_Node_Str"")) {
    throw new Exception(""String_Node_Str"" + getAuthMethod());
  }
 else {
    this.clientUsername=""String_Node_Str"";
    this.clientPassword=getAuthToken();
  }
  createClient(this.new MqttDeviceCallBack());
}",0.9290176036342986
34384,"/** 
 * Note that this class does not have a default constructor
 * @param type Object of String which denotes command type
 * @param id Object of String which denotes command id
 * @param command Object of String which denotes actual command type
 * @param format Object of String which denotes command format, say json
 * @param msg MqttMessage
 * @see <a href=""http://www.eclipse.org/paho/files/javadoc/index.html"">Paho Client Library</a> 
 * @throws UnsupportedEncodingException 
 */
public Command(String type,String id,String command,String format,MqttMessage msg) throws UnsupportedEncodingException {
  super(msg,format);
  this.type=type;
  this.id=id;
  this.command=command;
  this.format=format;
}","/** 
 * Note that this class does not have a default constructor
 * @param type Object of String which denotes command type
 * @param id Object of String which denotes command id
 * @param command Object of String which denotes actual command type
 * @param format Object of String which denotes command format, say json
 * @param msg MqttMessage
 * @see <a href=""http://www.eclipse.org/paho/files/javadoc/index.html"">Paho Client Library</a> 
 * @throws UnsupportedEncodingException when the format is not UTF-8
 */
public Command(String type,String id,String command,String format,MqttMessage msg) throws UnsupportedEncodingException {
  super(msg,format);
  this.type=type;
  this.id=id;
  this.command=command;
  this.format=format;
}",0.9806362378976486
34385,"/** 
 * <p>Connects the Gateway to IBM Watson Internet of Things Platform.  After the successful connection to the IBM Watson IoT Platform,  the Gateway client can perform the following operations,</p> <ul class=""simple""> <li>Publish events for itself and on behalf of devices connected behind the Gateway. <li>Subscribe to commands for itself and on behalf of devices behind the Gateway. </ul> </p> <p>The GatewayClient retries when there is a connect exception based on the  value set in retry parameter. <br> This method does not retry when the following exceptions occur.</p> <ul class=""simple""> <li> MqttSecurityException - One or more credentials are wrong <li>UnKnownHostException - Host doesn't exist. For example, a wrong organization name is used to connect. </ul>
 * @param numberOfRetryAttempts - How many number of times to retry when there is a failure in connecting to WatsonIoT Platform.
 * @throws MqttException see above
 */
@Override public void connect(int numberOfRetryAttempts) throws MqttException {
  super.connect(numberOfRetryAttempts);
  subscribeToGatewayCommands();
}","/** 
 * <p>Connects the Gateway to IBM Watson Internet of Things Platform.  After the successful connection to the IBM Watson IoT Platform,  the Gateway client can perform the following operations,</p> <ul class=""simple""> <li>Publish events for itself and on behalf of devices connected behind the Gateway. <li>Subscribe to commands for itself and on behalf of devices behind the Gateway. </ul> <p>The GatewayClient retries when there is a connect exception based on the  value set in retry parameter. <br> This method does not retry when the following exceptions occur.</p> <ul class=""simple""> <li> MqttSecurityException - One or more credentials are wrong <li>UnKnownHostException - Host doesn't exist. For example, a wrong organization name is used to connect. </ul>
 * @param numberOfRetryAttempts - How many number of times to retry when there is a failure in connecting to WatsonIoT Platform.
 * @throws MqttException see above
 */
@Override public void connect(int numberOfRetryAttempts) throws MqttException {
  super.connect(numberOfRetryAttempts);
  subscribeToGatewayCommands();
}",0.997713763145862
34386,"/** 
 * <p>This method connects the Gateway to the IBM IBM Watson IoT Platform.</p> <p>Note that the Gateway needs to make a call manage() to participate in Device Management activities.<p>  <p> This method does nothing if the Gateway is already connected. This method does not retry when the following exceptions occur.</p> <ul class=""simple""> <li> MqttSecurityException - One or more credentials are wrong <li>UnKnownHostException - Host doesn't exist. For example, a wrong organization name is used to connect. </ul>
 * @throws MqttException refer above
 */
public void connect() throws MqttException {
  final String METHOD=""String_Node_Str"";
  if (this.isConnected()) {
    LoggerUtility.log(Level.WARNING,CLASS_NAME,METHOD,""String_Node_Str"");
    return;
  }
  super.connect();
}","/** 
 * <p>This method connects the Gateway to the IBM IBM Watson IoT Platform.</p> <p>Note that the Gateway needs to make a call manage() to participate in Device Management activities.</p>  <p> This method does nothing if the Gateway is already connected. This method does not retry when the following exceptions occur.</p> <ul class=""simple""> <li> MqttSecurityException - One or more credentials are wrong <li>UnKnownHostException - Host doesn't exist. For example, a wrong organization name is used to connect. </ul>
 * @throws MqttException refer above
 */
public void connect() throws MqttException {
  final String METHOD=""String_Node_Str"";
  if (this.isConnected()) {
    LoggerUtility.log(Level.WARNING,CLASS_NAME,METHOD,""String_Node_Str"");
    return;
  }
  super.connect();
}",0.9993634627625716
34387,"/** 
 * Add a new listener to be notified when device action status is changed. 
 * @param listener
 */
public synchronized void addPropertyChangeListener(PropertyChangeListener listener){
  pcs.addPropertyChangeListener(DEVICE_ACTION_STATUS_UPDATE,listener);
}","/** 
 * Add a new listener to be notified when device action status is changed. 
 * @param listener PropertyChangeListener
 */
public synchronized void addPropertyChangeListener(PropertyChangeListener listener){
  pcs.addPropertyChangeListener(DEVICE_ACTION_STATUS_UPDATE,listener);
}",0.9577981651376148
34388,"/** 
 * Clear all the request handlers - this is called when unmanage request is called by the agent Do a bulk unsubscribe to improve performance
 * @param dmClient
 * @throws MqttException 
 */
public static void clearRequestHandlers(ManagedClient dmClient) throws MqttException {
  String[] topics=new String[7];
  IMqttMessageListener[] listener=new IMqttMessageListener[7];
  int index=0;
  DeviceUpdateRequestHandler device=deviceUpdateHandlers.remove(dmClient);
  if (device != null) {
    topics[index]=device.getTopic();
    listener[index++]=device;
  }
  ObserveRequestHandler observe=observeHandlers.remove(dmClient);
  if (observe != null) {
    topics[index]=observe.getTopic();
    listener[index++]=observe;
  }
  CancelRequestHandler cancel=cancelHandlers.remove(dmClient);
  if (cancel != null) {
    topics[index]=cancel.getTopic();
    listener[index++]=cancel;
  }
  RebootRequestHandler reboot=rebootHandlers.remove(dmClient);
  if (reboot != null) {
    topics[index]=reboot.getTopic();
    listener[index++]=reboot;
  }
  FactoryResetRequestHandler reset=resetHandlers.remove(dmClient);
  if (reset != null) {
    topics[index]=reset.getTopic();
    listener[index++]=reset;
  }
  FirmwareDownloadRequestHandler fwDownload=fwDownloadHandlers.remove(dmClient);
  if (fwDownload != null) {
    topics[index]=fwDownload.getTopic();
    listener[index++]=fwDownload;
  }
  FirmwareUpdateRequestHandler fwUpdate=fwUpdateHandlers.remove(dmClient);
  if (fwUpdate != null) {
    topics[index]=fwUpdate.getTopic();
    listener[index++]=fwUpdate;
  }
  if (index > 0) {
    int[] qos=new int[index];
    Arrays.fill(qos,1);
    dmClient.unsubscribe(topics);
  }
}","/** 
 * Clear all the request handlers - this is called when unmanage request is called by the agent Do a bulk unsubscribe to improve performance
 * @param dmClient The Managed device instance
 * @throws MqttException failure in unsubscription
 */
public static void clearRequestHandlers(ManagedClient dmClient) throws MqttException {
  String[] topics=new String[7];
  IMqttMessageListener[] listener=new IMqttMessageListener[7];
  int index=0;
  DeviceUpdateRequestHandler device=deviceUpdateHandlers.remove(dmClient);
  if (device != null) {
    topics[index]=device.getTopic();
    listener[index++]=device;
  }
  ObserveRequestHandler observe=observeHandlers.remove(dmClient);
  if (observe != null) {
    topics[index]=observe.getTopic();
    listener[index++]=observe;
  }
  CancelRequestHandler cancel=cancelHandlers.remove(dmClient);
  if (cancel != null) {
    topics[index]=cancel.getTopic();
    listener[index++]=cancel;
  }
  RebootRequestHandler reboot=rebootHandlers.remove(dmClient);
  if (reboot != null) {
    topics[index]=reboot.getTopic();
    listener[index++]=reboot;
  }
  FactoryResetRequestHandler reset=resetHandlers.remove(dmClient);
  if (reset != null) {
    topics[index]=reset.getTopic();
    listener[index++]=reset;
  }
  FirmwareDownloadRequestHandler fwDownload=fwDownloadHandlers.remove(dmClient);
  if (fwDownload != null) {
    topics[index]=fwDownload.getTopic();
    listener[index++]=fwDownload;
  }
  FirmwareUpdateRequestHandler fwUpdate=fwUpdateHandlers.remove(dmClient);
  if (fwUpdate != null) {
    topics[index]=fwUpdate.getTopic();
    listener[index++]=fwUpdate;
  }
  if (index > 0) {
    int[] qos=new int[index];
    Arrays.fill(qos,1);
    dmClient.unsubscribe(topics);
  }
}",0.9844529187444998
34389,"/** 
 * Create all the necessary request handlers - this is called when manage request is called by the agent Do a bulk subscribe to improve the performance
 * @param dmClient
 * @throws MqttException
 */
public static void setRequestHandlers(ManagedClient dmClient) throws MqttException {
  String[] topics=new String[7];
  IMqttMessageListener[] listener=new IMqttMessageListener[7];
  int index=0;
  DeviceUpdateRequestHandler device=deviceUpdateHandlers.get(dmClient);
  if (device == null) {
    device=new DeviceUpdateRequestHandler(dmClient);
    topics[index]=device.getTopic();
    listener[index++]=device;
    deviceUpdateHandlers.put(dmClient,device);
  }
  ObserveRequestHandler observe=observeHandlers.get(dmClient);
  if (observe == null) {
    observe=new ObserveRequestHandler(dmClient);
    topics[index]=observe.getTopic();
    listener[index++]=observe;
    observeHandlers.put(dmClient,observe);
  }
  CancelRequestHandler cancel=cancelHandlers.get(dmClient);
  if (cancel == null) {
    cancel=new CancelRequestHandler(dmClient);
    topics[index]=cancel.getTopic();
    listener[index++]=cancel;
    cancelHandlers.put(dmClient,cancel);
  }
  RebootRequestHandler reboot=rebootHandlers.get(dmClient);
  if (reboot == null) {
    reboot=new RebootRequestHandler(dmClient);
    topics[index]=reboot.getTopic();
    listener[index++]=reboot;
    rebootHandlers.put(dmClient,reboot);
  }
  FactoryResetRequestHandler reset=resetHandlers.get(dmClient);
  if (reset == null) {
    reset=new FactoryResetRequestHandler(dmClient);
    topics[index]=reset.getTopic();
    listener[index++]=reset;
    resetHandlers.put(dmClient,reset);
  }
  FirmwareDownloadRequestHandler fwDownload=fwDownloadHandlers.get(dmClient);
  if (fwDownload == null) {
    fwDownload=new FirmwareDownloadRequestHandler(dmClient);
    topics[index]=fwDownload.getTopic();
    listener[index++]=fwDownload;
    fwDownloadHandlers.put(dmClient,fwDownload);
  }
  FirmwareUpdateRequestHandler fwUpdate=fwUpdateHandlers.get(dmClient);
  if (fwUpdate == null) {
    fwUpdate=new FirmwareUpdateRequestHandler(dmClient);
    topics[index]=fwUpdate.getTopic();
    listener[index++]=fwUpdate;
    fwUpdateHandlers.put(dmClient,fwUpdate);
  }
  if (index > 0) {
    int[] qos=new int[index];
    Arrays.fill(qos,1);
    dmClient.subscribe(topics,qos,listener);
  }
}","/** 
 * Create all the necessary request handlers - this is called when manage request is called by the agent Do a bulk subscribe to improve the performance
 * @param dmClient The managedDevice client instance
 * @throws MqttException when there is a failure in subscription
 */
public static void setRequestHandlers(ManagedClient dmClient) throws MqttException {
  String[] topics=new String[7];
  IMqttMessageListener[] listener=new IMqttMessageListener[7];
  int index=0;
  DeviceUpdateRequestHandler device=deviceUpdateHandlers.get(dmClient);
  if (device == null) {
    device=new DeviceUpdateRequestHandler(dmClient);
    topics[index]=device.getTopic();
    listener[index++]=device;
    deviceUpdateHandlers.put(dmClient,device);
  }
  ObserveRequestHandler observe=observeHandlers.get(dmClient);
  if (observe == null) {
    observe=new ObserveRequestHandler(dmClient);
    topics[index]=observe.getTopic();
    listener[index++]=observe;
    observeHandlers.put(dmClient,observe);
  }
  CancelRequestHandler cancel=cancelHandlers.get(dmClient);
  if (cancel == null) {
    cancel=new CancelRequestHandler(dmClient);
    topics[index]=cancel.getTopic();
    listener[index++]=cancel;
    cancelHandlers.put(dmClient,cancel);
  }
  RebootRequestHandler reboot=rebootHandlers.get(dmClient);
  if (reboot == null) {
    reboot=new RebootRequestHandler(dmClient);
    topics[index]=reboot.getTopic();
    listener[index++]=reboot;
    rebootHandlers.put(dmClient,reboot);
  }
  FactoryResetRequestHandler reset=resetHandlers.get(dmClient);
  if (reset == null) {
    reset=new FactoryResetRequestHandler(dmClient);
    topics[index]=reset.getTopic();
    listener[index++]=reset;
    resetHandlers.put(dmClient,reset);
  }
  FirmwareDownloadRequestHandler fwDownload=fwDownloadHandlers.get(dmClient);
  if (fwDownload == null) {
    fwDownload=new FirmwareDownloadRequestHandler(dmClient);
    topics[index]=fwDownload.getTopic();
    listener[index++]=fwDownload;
    fwDownloadHandlers.put(dmClient,fwDownload);
  }
  FirmwareUpdateRequestHandler fwUpdate=fwUpdateHandlers.get(dmClient);
  if (fwUpdate == null) {
    fwUpdate=new FirmwareUpdateRequestHandler(dmClient);
    topics[index]=fwUpdate.getTopic();
    listener[index++]=fwUpdate;
    fwUpdateHandlers.put(dmClient,fwUpdate);
  }
  if (index > 0) {
    int[] qos=new int[index];
    Arrays.fill(qos,1);
    dmClient.subscribe(topics,qos,listener);
  }
}",0.984479865771812
34390,"/** 
 * This constructor allows external user to pass the existing MqttClient 
 * @param mqttClient
 */
protected AbstractClient(MqttClient mqttClient){
  this.mqttClient=mqttClient;
}","/** 
 * This constructor allows external user to pass the existing MqttClient 
 * @param mqttClient the MQTTClient that has the connectivity parameters set
 */
protected AbstractClient(MqttClient mqttClient){
  this.mqttClient=mqttClient;
}",0.8679245283018868
34391,"public String getOrgId(){
  String org=null;
  org=options.getProperty(""String_Node_Str"");
  if (org == null) {
    org=options.getProperty(""String_Node_Str"");
  }
  return trimedValue(org);
}","/** 
 * @return the organization id
 */
public String getOrgId(){
  String org=null;
  org=options.getProperty(""String_Node_Str"");
  if (org == null) {
    org=options.getProperty(""String_Node_Str"");
  }
  return trimedValue(org);
}",0.9056603773584906
34392,"/** 
 * @param msg MqttMessage
 * @param format an object of String which comtains format such as json
 * @throws UnsupportedEncodingException
 */
public Message(MqttMessage msg,String format) throws UnsupportedEncodingException {
  final String METHOD=""String_Node_Str"";
  this.payload=new String(msg.getPayload(),""String_Node_Str"");
  if (format.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      JsonObject payloadJson=JSON_PARSER.parse(payload).getAsJsonObject();
      if (payloadJson.has(""String_Node_Str"")) {
        data=payloadJson.get(""String_Node_Str"").getAsJsonObject().toString();
      }
 else {
        data=payloadJson.toString();
      }
      if (payloadJson.has(""String_Node_Str"")) {
        try {
          timestamp=DT_PARSER.parseDateTime(payloadJson.get(""String_Node_Str"").getAsString());
        }
 catch (        IllegalArgumentException e) {
          timestamp=DateTime.now();
        }
      }
 else {
        timestamp=DateTime.now();
      }
    }
 catch (    JsonSyntaxException e) {
      LoggerUtility.warn(CLASS_NAME,METHOD,""String_Node_Str"");
    }
catch (    JsonParseException jpe) {
      LoggerUtility.warn(CLASS_NAME,METHOD,""String_Node_Str"");
    }
  }
 else {
    data=this.payload;
    timestamp=DateTime.now();
  }
}","/** 
 * @param msg MqttMessage
 * @param format an object of String which contains format such as json
 * @throws UnsupportedEncodingException if encoding is other than UTF-8
 */
public Message(MqttMessage msg,String format) throws UnsupportedEncodingException {
  final String METHOD=""String_Node_Str"";
  this.payload=new String(msg.getPayload(),""String_Node_Str"");
  if (format.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      JsonObject payloadJson=JSON_PARSER.parse(payload).getAsJsonObject();
      if (payloadJson.has(""String_Node_Str"")) {
        data=payloadJson.get(""String_Node_Str"").getAsJsonObject().toString();
      }
 else {
        data=payloadJson.toString();
      }
      if (payloadJson.has(""String_Node_Str"")) {
        try {
          timestamp=DT_PARSER.parseDateTime(payloadJson.get(""String_Node_Str"").getAsString());
        }
 catch (        IllegalArgumentException e) {
          timestamp=DateTime.now();
        }
      }
 else {
        timestamp=DateTime.now();
      }
    }
 catch (    JsonSyntaxException e) {
      LoggerUtility.warn(CLASS_NAME,METHOD,""String_Node_Str"");
    }
catch (    JsonParseException jpe) {
      LoggerUtility.warn(CLASS_NAME,METHOD,""String_Node_Str"");
    }
  }
 else {
    data=this.payload;
    timestamp=DateTime.now();
  }
}",0.98671875
34393,"/** 
 * Create the Paho MQTT Client that will underpin the Device client.
 * @param callback MqttCallback 
 * @see <a href=""Paho Client Library"">http://www.eclipse.org/paho/files/javadoc/index.html</a> 
 */
protected void createClient(MqttCallback callback){
  LoggerUtility.info(CLASS_NAME,""String_Node_Str"",""String_Node_Str"" + getOrgId() + ""String_Node_Str""+ clientId);
  this.mqttAsyncClient=null;
  this.mqttClientOptions=new MqttConnectOptions();
  this.mqttCallback=callback;
}","/** 
 * Create the Paho MQTT Client that will underpin the Device client.
 * @param callback MqttCallback 
 * @see <a href=""http://www.eclipse.org/paho/files/javadoc/index.html"">Paho Client Library</a> 
 */
protected void createClient(MqttCallback callback){
  LoggerUtility.info(CLASS_NAME,""String_Node_Str"",""String_Node_Str"" + getOrgId() + ""String_Node_Str""+ clientId);
  this.mqttAsyncClient=null;
  this.mqttClientOptions=new MqttConnectOptions();
  this.mqttCallback=callback;
}",0.9565217391304348
34394,"/** 
 * Accessor method to retrieve Authendication Method old style - auth-method new style - Authentication-Method
 */
public String getAuthMethod(){
  String method=options.getProperty(""String_Node_Str"");
  if (method == null) {
    method=options.getProperty(""String_Node_Str"");
  }
  return trimedValue(method);
}","/** 
 * Accessor method to retrieve Authendication Method old style - auth-method new style - Authentication-Method
 * @return The Authentication method
 */
public String getAuthMethod(){
  String method=options.getProperty(""String_Node_Str"");
  if (method == null) {
    method=options.getProperty(""String_Node_Str"");
  }
  return trimedValue(method);
}",0.9448584202682564
34395,"/** 
 * <p>Connects the application to IBM Watson IoT Platform and retries when there is an exception  based on the value set in retry parameter. </br> This method does not retry when the following exceptions occur.</p> <ul class=""simple""> <li> MqttSecurityException - One or more credentials are wrong <li>UnKnownHostException - Host doesn't exist. For example, a wrong organization name is used to connect. </ul>
 * @param autoRetry - tells whether to retry the connection when the connection attempt fails.
 * @throws MqttSecurityException
 */
public void connect(boolean autoRetry) throws MqttException {
  if (autoRetry == false) {
    connect(0);
  }
 else {
    connect(Integer.MAX_VALUE);
  }
}","/** 
 * <p>Connects the application to IBM Watson IoT Platform and retries when there is an exception  based on the value set in retry parameter. <br> This method does not retry when the following exceptions occur.</p> <ul class=""simple""> <li> MqttSecurityException - One or more credentials are wrong <li>UnKnownHostException - Host doesn't exist. For example, a wrong organization name is used to connect. </ul>
 * @param autoRetry - tells whether to retry the connection when the connection attempt fails.
 * @throws MqttException refer above
 */
public void connect(boolean autoRetry) throws MqttException {
  if (autoRetry == false) {
    connect(0);
  }
 else {
    connect(Integer.MAX_VALUE);
  }
}",0.9850746268656716
34396,"/** 
 * Gets diagnostic log for a device.	  <p> Refer to the <a href=""https://docs.internetofthings.ibmcloud.com/swagger/v0002.html#!/Device_Diagnostics/delete_device_types_typeId_devices_deviceId_diag_logs_logId"">link</a> for more information about the JSON Format</p>.
 * @param deviceType object of String which represents device Type
 * @param deviceId object of String which represents device id
 * @param logId object of String which represents log id
 * @return JsonObject the DiagnosticLog in JSON Format
 * @throws IOException Failure in retrieving the diagnostic log
 */
public JsonObject getDiagnosticLog(String deviceType,String deviceId,String logId) throws IoTFCReSTException {
  final String METHOD=""String_Node_Str"";
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(orgId).append('.').append(BASIC_API_V0002_URL).append(""String_Node_Str"").append(deviceType).append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(logId);
  int code=0;
  HttpResponse response=null;
  try {
    response=connect(""String_Node_Str"",sb.toString(),null,null);
    code=response.getStatusLine().getStatusCode();
    if (code == 200) {
      String result=this.readContent(response,METHOD);
      JsonElement jsonResponse=new JsonParser().parse(result);
      return jsonResponse.getAsJsonObject();
    }
  }
 catch (  Exception e) {
    IoTFCReSTException ex=new IoTFCReSTException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
    ex.initCause(e);
    throw ex;
  }
  if (code == 404) {
    throw new IoTFCReSTException(code,""String_Node_Str"");
  }
 else   if (code == 500) {
    throw new IoTFCReSTException(500,""String_Node_Str"");
  }
  throwException(response,METHOD);
  return null;
}","/** 
 * Gets diagnostic log for a device.	  <p> Refer to the <a href=""https://docs.internetofthings.ibmcloud.com/swagger/v0002.html#!/Device_Diagnostics/delete_device_types_typeId_devices_deviceId_diag_logs_logId"">link</a> for more information about the JSON Format</p>.
 * @param deviceType object of String which represents device Type
 * @param deviceId object of String which represents device id
 * @param logId object of String which represents log id
 * @return JsonObject the DiagnosticLog in JSON Format
 * @throws IoTFCReSTException Failure in retrieving the diagnostic log
 */
public JsonObject getDiagnosticLog(String deviceType,String deviceId,String logId) throws IoTFCReSTException {
  final String METHOD=""String_Node_Str"";
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(orgId).append('.').append(BASIC_API_V0002_URL).append(""String_Node_Str"").append(deviceType).append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(logId);
  int code=0;
  HttpResponse response=null;
  try {
    response=connect(""String_Node_Str"",sb.toString(),null,null);
    code=response.getStatusLine().getStatusCode();
    if (code == 200) {
      String result=this.readContent(response,METHOD);
      JsonElement jsonResponse=new JsonParser().parse(result);
      return jsonResponse.getAsJsonObject();
    }
  }
 catch (  Exception e) {
    IoTFCReSTException ex=new IoTFCReSTException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
    ex.initCause(e);
    throw ex;
  }
  if (code == 404) {
    throw new IoTFCReSTException(code,""String_Node_Str"");
  }
 else   if (code == 500) {
    throw new IoTFCReSTException(500,""String_Node_Str"");
  }
  throwException(response,METHOD);
  return null;
}",0.997410071942446
34397,"/** 
 * Adds an entry in the log of diagnostic information for the device.  The log may be pruned as the new entry is added. If no date is supplied,  the entry is added with the current date and time. <p> Refer to   <a href=""https://docs.internetofthings.ibmcloud.com/swagger/v0002.html#!/Device_Diagnostics/post_device_types_typeId_devices_deviceId_diag_logs"">link</a>  for more information about the schema to be used </p>
 * @param deviceType String which contains device type
 * @param deviceId String which contains device id
 * @return boolean containing the status of the load addition.
 * @throws IoTFCReSTException Failure in adding the diagnostic logs
 */
public boolean addDiagnosticLog(String deviceType,String deviceId,JsonElement log) throws IoTFCReSTException {
  final String METHOD=""String_Node_Str"";
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(orgId).append('.').append(BASIC_API_V0002_URL).append(""String_Node_Str"").append(deviceType).append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"");
  int code=0;
  HttpResponse response=null;
  try {
    response=connect(""String_Node_Str"",sb.toString(),log.toString(),null);
    code=response.getStatusLine().getStatusCode();
    if (code == 201) {
      return true;
    }
  }
 catch (  Exception e) {
    IoTFCReSTException ex=new IoTFCReSTException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
    ex.initCause(e);
    throw ex;
  }
  if (code == 500) {
    throw new IoTFCReSTException(500,""String_Node_Str"");
  }
  throwException(response,METHOD);
  return false;
}","/** 
 * Adds an entry in the log of diagnostic information for the device.  The log may be pruned as the new entry is added. If no date is supplied,  the entry is added with the current date and time. <p> Refer to   <a href=""https://docs.internetofthings.ibmcloud.com/swagger/v0002.html#!/Device_Diagnostics/post_device_types_typeId_devices_deviceId_diag_logs"">link</a>  for more information about the schema to be used </p>
 * @param deviceType String which contains device type
 * @param deviceId String which contains device id
 * @param log the Log message to be added
 * @return boolean containing the status of the load addition.
 * @throws IoTFCReSTException Failure in adding the diagnostic logs
 */
public boolean addDiagnosticLog(String deviceType,String deviceId,JsonElement log) throws IoTFCReSTException {
  final String METHOD=""String_Node_Str"";
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(orgId).append('.').append(BASIC_API_V0002_URL).append(""String_Node_Str"").append(deviceType).append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"");
  int code=0;
  HttpResponse response=null;
  try {
    response=connect(""String_Node_Str"",sb.toString(),log.toString(),null);
    code=response.getStatusLine().getStatusCode();
    if (code == 201) {
      return true;
    }
  }
 catch (  Exception e) {
    IoTFCReSTException ex=new IoTFCReSTException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
    ex.initCause(e);
    throw ex;
  }
  if (code == 500) {
    throw new IoTFCReSTException(500,""String_Node_Str"");
  }
  throwException(response,METHOD);
  return false;
}",0.9869077306733168
34398,"/** 
 * Updates device type details.
 * @param updatedValues contains the parameters to be updated<p> Refer to the <a href=""https://docs.internetofthings.ibmcloud.com/swagger/v0002.html#!/Device_Types/put_device_types_typeId"">link</a> for more information about the response</p>.
 * @param deviceType The type of device in String  
 * @updatedValues List of properties to be updated in Json
 * @return A JSON response containing the status of the update operation.
 * @throws IoTFCReSTException Failure in updating the device type
 */
public JsonObject updateDeviceType(String deviceType,JsonElement updatedValues) throws IoTFCReSTException {
  final String METHOD=""String_Node_Str"";
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(orgId).append('.').append(BASIC_API_V0002_URL).append(""String_Node_Str"").append(deviceType);
  int code=0;
  JsonElement jsonResponse=null;
  HttpResponse response=null;
  try {
    response=connect(""String_Node_Str"",sb.toString(),updatedValues.toString(),null);
    code=response.getStatusLine().getStatusCode();
    if (code == 200 || code == 409) {
      String result=this.readContent(response,METHOD);
      jsonResponse=new JsonParser().parse(result);
      if (code == 200) {
        return jsonResponse.getAsJsonObject();
      }
    }
  }
 catch (  Exception e) {
    IoTFCReSTException ex=new IoTFCReSTException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
    ex.initCause(e);
    throw ex;
  }
  if (code == 401) {
    throw new IoTFCReSTException(code,""String_Node_Str"");
  }
 else   if (code == 403) {
    throw new IoTFCReSTException(code,""String_Node_Str"");
  }
 else   if (code == 404) {
    throw new IoTFCReSTException(code,""String_Node_Str"");
  }
 else   if (code == 409) {
    throw new IoTFCReSTException(code,""String_Node_Str"",jsonResponse);
  }
 else   if (code == 500) {
    throw new IoTFCReSTException(500,""String_Node_Str"");
  }
  throwException(response,METHOD);
  return null;
}","/** 
 * Updates device type details.
 * @param updatedValues contains the parameters to be updated<p> Refer to the <a href=""https://docs.internetofthings.ibmcloud.com/swagger/v0002.html#!/Device_Types/put_device_types_typeId"">link</a> for more information about the response</p>.
 * @param deviceType The type of device in String  
 * @return A JSON response containing the status of the update operation.
 * @throws IoTFCReSTException Failure in updating the device type
 */
public JsonObject updateDeviceType(String deviceType,JsonElement updatedValues) throws IoTFCReSTException {
  final String METHOD=""String_Node_Str"";
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(orgId).append('.').append(BASIC_API_V0002_URL).append(""String_Node_Str"").append(deviceType);
  int code=0;
  JsonElement jsonResponse=null;
  HttpResponse response=null;
  try {
    response=connect(""String_Node_Str"",sb.toString(),updatedValues.toString(),null);
    code=response.getStatusLine().getStatusCode();
    if (code == 200 || code == 409) {
      String result=this.readContent(response,METHOD);
      jsonResponse=new JsonParser().parse(result);
      if (code == 200) {
        return jsonResponse.getAsJsonObject();
      }
    }
  }
 catch (  Exception e) {
    IoTFCReSTException ex=new IoTFCReSTException(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
    ex.initCause(e);
    throw ex;
  }
  if (code == 401) {
    throw new IoTFCReSTException(code,""String_Node_Str"");
  }
 else   if (code == 403) {
    throw new IoTFCReSTException(code,""String_Node_Str"");
  }
 else   if (code == 404) {
    throw new IoTFCReSTException(code,""String_Node_Str"");
  }
 else   if (code == 409) {
    throw new IoTFCReSTException(code,""String_Node_Str"",jsonResponse);
  }
 else   if (code == 500) {
    throw new IoTFCReSTException(500,""String_Node_Str"");
  }
  throwException(response,METHOD);
  return null;
}",0.9848211988680216
34399,"/** 
 * Note that this class does not have a default constructor
 * @param type Object of String which denotes command type
 * @param id Object of String which denotes command id
 * @param command Object of String which denotes actual command type
 * @param format Object of String which denotes command format, say json
 * @param msg MqttMessage
 * @see <a href=""http://www.eclipse.org/paho/files/javadoc/index.html>Paho Client Library</a> 
 * @throws UnsupportedEncodingException When the encoding format id not UTF-8 
 */
public Command(String type,String id,String command,String format,MqttMessage msg) throws UnsupportedEncodingException {
  super(msg,format);
  this.type=type;
  this.id=id;
  this.command=command;
  this.format=format;
}","/** 
 * Note that this class does not have a default constructor
 * @param type Object of String which denotes command type
 * @param id Object of String which denotes command id
 * @param command Object of String which denotes actual command type
 * @param format Object of String which denotes command format, say json
 * @param msg MqttMessage
 * @see <a href=""http://www.eclipse.org/paho/files/javadoc/index.html"">Paho Client Library</a> 
 * @throws UnsupportedEncodingException When the encoding format id not UTF-8 
 */
public Command(String type,String id,String command,String format,MqttMessage msg) throws UnsupportedEncodingException {
  super(msg,format);
  this.type=type;
  this.id=id;
  this.command=command;
  this.format=format;
}",0.999330207635633
34400,"/** 
 * This class does not have a default constructor and has a single argument constructor
 * @param msg
 * @throws UnsupportedEncodingException
 */
public Status(MqttMessage msg) throws UnsupportedEncodingException {
  this.payload=new String(msg.getPayload(),""String_Node_Str"");
  JsonObject payloadJson=JSON_PARSER.parse(payload).getAsJsonObject();
  clientAddr=payloadJson.get(""String_Node_Str"").getAsString();
  protocol=payloadJson.get(""String_Node_Str"").getAsString();
  clientId=payloadJson.get(""String_Node_Str"").getAsString();
  user=payloadJson.get(""String_Node_Str"").getAsString();
  time=DT_PARSER.parseDateTime(payloadJson.get(""String_Node_Str"").getAsString());
  action=payloadJson.get(""String_Node_Str"").getAsString();
  connectTime=payloadJson.get(""String_Node_Str"").getAsString();
  port=payloadJson.get(""String_Node_Str"").getAsInt();
  if (action.equals(""String_Node_Str"")) {
    writeMsg=payloadJson.get(""String_Node_Str"").getAsInt();
    readMsg=payloadJson.get(""String_Node_Str"").getAsInt();
    readBytes=payloadJson.get(""String_Node_Str"").getAsInt();
    writeBytes=payloadJson.get(""String_Node_Str"").getAsInt();
    reason=payloadJson.get(""String_Node_Str"").getAsString();
  }
}","/** 
 * This class does not have a default constructor and has a single argument constructor
 * @param msg The MQTT message
 * @throws UnsupportedEncodingException Failure when the Format is not UTF-8
 */
public Status(MqttMessage msg) throws UnsupportedEncodingException {
  this.payload=new String(msg.getPayload(),""String_Node_Str"");
  JsonObject payloadJson=JSON_PARSER.parse(payload).getAsJsonObject();
  clientAddr=payloadJson.get(""String_Node_Str"").getAsString();
  protocol=payloadJson.get(""String_Node_Str"").getAsString();
  clientId=payloadJson.get(""String_Node_Str"").getAsString();
  user=payloadJson.get(""String_Node_Str"").getAsString();
  time=DT_PARSER.parseDateTime(payloadJson.get(""String_Node_Str"").getAsString());
  action=payloadJson.get(""String_Node_Str"").getAsString();
  connectTime=payloadJson.get(""String_Node_Str"").getAsString();
  port=payloadJson.get(""String_Node_Str"").getAsInt();
  if (action.equals(""String_Node_Str"")) {
    writeMsg=payloadJson.get(""String_Node_Str"").getAsInt();
    readMsg=payloadJson.get(""String_Node_Str"").getAsInt();
    readBytes=payloadJson.get(""String_Node_Str"").getAsInt();
    writeBytes=payloadJson.get(""String_Node_Str"").getAsInt();
    reason=payloadJson.get(""String_Node_Str"").getAsString();
  }
}",0.9780844155844156
34401,"/** 
 * Note that this class does not have a default constructor <br> This class has only accessors and no mutators and later on might be made final <br>
 * @param command Actual command in the form of String passed
 * @param format Format is a String which can contain values such as ""json""
 * @param msg MqttMessage 
 * @see <a href=""Paho Client Library"">http://www.eclipse.org/paho/files/javadoc/index.html</a> 
 * @throws UnsupportedEncodingException
 */
public Command(String command,String format,MqttMessage msg) throws UnsupportedEncodingException {
  super(msg);
  this.command=command;
  this.format=format;
}","/** 
 * Note that this class does not have a default constructor <br> This class has only accessors and no mutators and later on might be made final <br>
 * @param command Actual command in the form of String passed
 * @param format Format is a String which can contain values such as ""json""
 * @param msg MqttMessage 
 * @see <a href=""http://www.eclipse.org/paho/files/javadoc/index.html"">Paho Client Library</a> 
 * @throws UnsupportedEncodingException
 */
public Command(String command,String format,MqttMessage msg) throws UnsupportedEncodingException {
  super(msg);
  this.command=command;
  this.format=format;
}",0.9660743134087236
34402,"/** 
 * Create a device client for the IBM Watson IoT Platform. <br> Connecting to a specific account on the IoTF.
 * @throws Exception 
 */
public DeviceClient(Properties options) throws Exception {
  super(options);
  LoggerUtility.fine(CLASS_NAME,""String_Node_Str"",""String_Node_Str"" + options);
  this.clientId=""String_Node_Str"" + CLIENT_ID_DELIMITER + getOrgId()+ CLIENT_ID_DELIMITER+ getDeviceType()+ CLIENT_ID_DELIMITER+ getDeviceId();
  if (getAuthMethod() == null) {
    this.clientUsername=null;
    this.clientPassword=null;
  }
 else   if (!getAuthMethod().equals(""String_Node_Str"")) {
    throw new Exception(""String_Node_Str"" + getAuthMethod());
  }
 else {
    this.clientUsername=""String_Node_Str"";
    this.clientPassword=getAuthToken();
  }
  createClient(this.new MqttDeviceCallBack());
}","/** 
 * Create a device client for the IBM Watson IoT Platform. <br> Connecting to a specific account on the IoTF.
 * @throws Exception When there is a failure in parsing the properties passed 
 */
public DeviceClient(Properties options) throws Exception {
  super(options);
  LoggerUtility.fine(CLASS_NAME,""String_Node_Str"",""String_Node_Str"" + options);
  this.clientId=""String_Node_Str"" + CLIENT_ID_DELIMITER + getOrgId()+ CLIENT_ID_DELIMITER+ getDeviceType()+ CLIENT_ID_DELIMITER+ getDeviceId();
  if (getAuthMethod() == null) {
    this.clientUsername=null;
    this.clientPassword=null;
  }
 else   if (!getAuthMethod().equals(""String_Node_Str"")) {
    throw new Exception(""String_Node_Str"" + getAuthMethod());
  }
 else {
    this.clientUsername=""String_Node_Str"";
    this.clientPassword=getAuthToken();
  }
  createClient(this.new MqttDeviceCallBack());
}",0.9658478130617136
34403,"/** 
 * <p>Connects the device to IBM Watson IoT Platform and retries when there is an exception  based on the value set in retry parameter. <br> This method does not retry when the following exceptions occur.</p> <ul class=""simple""> <li> MqttSecurityException - One or more credentials are wrong <li>UnKnownHostException - Host doesn't exist. For example, a wrong organization name is used to connect. </ul>
 * @param numberOfRetryAttempts - How many number of times to retry when there is a failure in connecting to WatsonIoT Platform.
 * @throws MqttSecurityException
 */
@Override public void connect(int numberOfRetryAttempts) throws MqttException {
  super.connect(numberOfRetryAttempts);
  if (!getOrgId().equals(""String_Node_Str"")) {
    subscribeToCommands();
  }
}","/** 
 * <p>Connects the device to IBM Watson IoT Platform and retries when there is an exception  based on the value set in retry parameter. <br> This method does not retry when the following exceptions occur.</p> <ul class=""simple""> <li> MqttSecurityException - One or more credentials are wrong <li>UnKnownHostException - Host doesn't exist. For example, a wrong organization name is used to connect. </ul>
 * @param numberOfRetryAttempts - How many number of times to retry when there is a failure in connecting to WatsonIoT Platform.
 * @throws MqttException see above
 */
@Override public void connect(int numberOfRetryAttempts) throws MqttException {
  super.connect(numberOfRetryAttempts);
  if (!getOrgId().equals(""String_Node_Str"")) {
    subscribeToCommands();
  }
}",0.9883870967741936
34404,"/** 
 * Note that this class does not have a default constructor
 * @param type Object of String which denotes command type
 * @param id Object of String which denotes command id
 * @param command Object of String which denotes actual command type
 * @param format Object of String which denotes command format, say json
 * @param msg MqttMessage
 * @see <a href=""Paho Client Library"">http://www.eclipse.org/paho/files/javadoc/index.html</a> 
 * @throws UnsupportedEncodingException 
 */
public Command(String type,String id,String command,String format,MqttMessage msg) throws UnsupportedEncodingException {
  super(msg,format);
  this.type=type;
  this.id=id;
  this.command=command;
  this.format=format;
}","/** 
 * Note that this class does not have a default constructor
 * @param type Object of String which denotes command type
 * @param id Object of String which denotes command id
 * @param command Object of String which denotes actual command type
 * @param format Object of String which denotes command format, say json
 * @param msg MqttMessage
 * @see <a href=""http://www.eclipse.org/paho/files/javadoc/index.html"">Paho Client Library</a> 
 * @throws UnsupportedEncodingException 
 */
public Command(String type,String id,String command,String format,MqttMessage msg) throws UnsupportedEncodingException {
  super(msg,format);
  this.type=type;
  this.id=id;
  this.command=command;
  this.format=format;
}",0.923836389280677
34405,"/** 
 * <p> If a gateways subscribes to a topic of a device or sends data on behalf of a device  where the gateway does not have permission for, the message or the subscription is being ignored.  This behavior is different compared to applications where the connection will be terminated.  The Gateway will be notified on the notification topic:.<</p> <ul class=""simple""> <li>iot-2/type/+/id/+/notify </ul>
 */
public void processNotification(Notification notification);","/** 
 * <p> If a gateways subscribes to a topic of a device or sends data on behalf of a device  where the gateway does not have permission for, the message or the subscription is being ignored.  This behavior is different compared to applications where the connection will be terminated.  The Gateway will be notified on the notification topic:.</p> <ul class=""simple""> <li>iot-2/type/+/id/+/notify </ul>
 * @param notification Notification from the Watson IoT Platform that needs to be processed.
 */
public void processNotification(Notification notification);",0.9089147286821704
34406,"/** 
 * This constructor allows external user to pass the existing MqttClient 
 * @param mqttClient
 */
protected GatewayClient(MqttClient mqttClient){
  super(mqttClient);
}","/** 
 * This constructor allows external user to pass the existing MqttClient 
 * @param mqttClient MqttClient with the Watson IoT Platform connectivity details
 */
protected GatewayClient(MqttClient mqttClient){
  super(mqttClient);
}",0.8508557457212714
34407,"/** 
 * <p>Connects the Gateway to IBM Watson Internet of Things Platform.  After the successful connection to the IBM Watson IoT Platform,  the Gateway client can perform the following operations,</p> <ul class=""simple""> <li>Publish events for itself and on behalf of devices connected behind the Gateway. <li>Subscribe to commands for itself and on behalf of devices behind the Gateway. </ul> </p> <p>The GatewayClient retries when there is a connect exception based on the  value set in retry parameter. <br> This method does not retry when the following exceptions occur.</p> <ul class=""simple""> <li> MqttSecurityException - One or more credentials are wrong <li>UnKnownHostException - Host doesn't exist. For example, a wrong organization name is used to connect. </ul>
 * @param numberOfRetryAttempts - How many number of times to retry when there is a failure in connecting to WatsonIoT Platform.
 * @throws MqttSecurityException
 */
@Override public void connect(int numberOfRetryAttempts) throws MqttException {
  super.connect(numberOfRetryAttempts);
  subscribeToGatewayCommands();
}","/** 
 * <p>Connects the Gateway to IBM Watson Internet of Things Platform.  After the successful connection to the IBM Watson IoT Platform,  the Gateway client can perform the following operations,</p> <ul class=""simple""> <li>Publish events for itself and on behalf of devices connected behind the Gateway. <li>Subscribe to commands for itself and on behalf of devices behind the Gateway. </ul> </p> <p>The GatewayClient retries when there is a connect exception based on the  value set in retry parameter. <br> This method does not retry when the following exceptions occur.</p> <ul class=""simple""> <li> MqttSecurityException - One or more credentials are wrong <li>UnKnownHostException - Host doesn't exist. For example, a wrong organization name is used to connect. </ul>
 * @param numberOfRetryAttempts - How many number of times to retry when there is a failure in connecting to WatsonIoT Platform.
 * @throws MqttException see above
 */
@Override public void connect(int numberOfRetryAttempts) throws MqttException {
  super.connect(numberOfRetryAttempts);
  subscribeToGatewayCommands();
}",0.9917808219178084
34408,"/** 
 * Note that this class does not have a default constructor
 * @param type Object of String which denotes command type
 * @param id Object of String which denotes command id
 * @param msg Object of MqttMessage which denotes actual message
 * @throws UnsupportedEncodingException 
 */
public Notification(String type,String id,MqttMessage msg) throws UnsupportedEncodingException {
  this.type=type;
  this.id=id;
  this.message=msg;
}","/** 
 * Note that this class does not have a default constructor
 * @param type Object of String which denotes command type
 * @param id Object of String which denotes command id
 * @param msg Object of MqttMessage which denotes actual message
 * @throws UnsupportedEncodingException When the format is not UTF-8 
 */
public Notification(String type,String id,MqttMessage msg) throws UnsupportedEncodingException {
  this.type=type;
  this.id=id;
  this.message=msg;
}",0.968026460859978
34409,"/** 
 * Returns the DeviceFirmware object 
 */
public DeviceFirmware getDeviceFirmware(){
  if (mgmt != null) {
    return mgmt.getDeviceFirmware();
  }
  return null;
}","/** 
 * Returns the DeviceFirmware object
 * @return  DeviceFirmware returns the device firmware object
 */
public DeviceFirmware getDeviceFirmware(){
  if (mgmt != null) {
    return mgmt.getDeviceFirmware();
  }
  return null;
}",0.8421052631578947
34410,"/** 
 * Returns the Device type
 */
public String getTypeId(){
  return typeId;
}","/** 
 * Returns the Device type
 * @return returns the typeID
 */
public String getTypeId(){
  return typeId;
}",0.84375
34411,"/** 
 * Return the DeviceLocation object
 */
public DeviceLocation getDeviceLocation(){
  return deviceLocation;
}","/** 
 * Return the DeviceLocation object
 * @return DeviceLocation returns location of the device
 */
public DeviceLocation getDeviceLocation(){
  return deviceLocation;
}",0.8
34412,"/** 
 * Returns the Device ID
 */
public String getDeviceId(){
  return deviceId;
}","/** 
 * Returns the Device ID
 * @return returns the device ID
 */
public String getDeviceId(){
  return deviceId;
}",0.8341708542713567
34413,"/** 
 * Returns the DeviceInfo object
 */
public DeviceInfo getDeviceInfo(){
  return deviceInfo;
}","/** 
 * Returns the DeviceInfo object
 * @return DeviceInfo returns the deviceinfo object
 */
public DeviceInfo getDeviceInfo(){
  return deviceInfo;
}",0.792
34414,"/** 
 * Returns the name of the firmware
 */
public String getName(){
  if (this.name != null) {
    return this.name.getValue();
  }
 else {
    return null;
  }
}","/** 
 * Returns the name of the firmware
 * @return returns the name of the firmware
 */
public String getName(){
  if (this.name != null) {
    return this.name.getValue();
  }
 else {
    return null;
  }
}",0.8817204301075269
34415,"/** 
 * Update the Firmware object with new values
 * @param firmware
 * @param fireEvent - whether to fire an update event of not
 * @return code indicating whether the update is successful or not (200 means success, otherwise unsuccessful)
 */
public int update(JsonElement firmware,boolean fireEvent){
  JsonObject json=(JsonObject)firmware;
  Iterator<Map.Entry<String,JsonElement>> iter=json.entrySet().iterator();
  while (iter.hasNext()) {
    Entry<String,JsonElement> e=iter.next();
    Resource child=this.getChild(e.getKey());
    if (child != null) {
      child.update(e.getValue(),fireEvent);
    }
 else {
switch (e.getKey()) {
case VERSION:
        this.setVersion(e.getValue().getAsString(),fireEvent);
      break;
case NAME:
    this.setName(e.getValue().getAsString(),fireEvent);
  break;
case URL:
this.setUrl(e.getValue().getAsString(),fireEvent);
break;
case VERIFIER:
this.setVerifier(e.getValue().getAsString(),fireEvent);
break;
}
}
}
fireEvent(fireEvent);
return this.getRC();
}","/** 
 * Update the Firmware object with new values
 * @param firmware The device firmware object to be updated
 * @param fireEvent - whether to fire an update event of not
 * @return code indicating whether the update is successful or not (200 means success, otherwise unsuccessful)
 */
public int update(JsonElement firmware,boolean fireEvent){
  JsonObject json=(JsonObject)firmware;
  Iterator<Map.Entry<String,JsonElement>> iter=json.entrySet().iterator();
  while (iter.hasNext()) {
    Entry<String,JsonElement> e=iter.next();
    Resource child=this.getChild(e.getKey());
    if (child != null) {
      child.update(e.getValue(),fireEvent);
    }
 else {
switch (e.getKey()) {
case VERSION:
        this.setVersion(e.getValue().getAsString(),fireEvent);
      break;
case NAME:
    this.setName(e.getValue().getAsString(),fireEvent);
  break;
case URL:
this.setUrl(e.getValue().getAsString(),fireEvent);
break;
case VERIFIER:
this.setVerifier(e.getValue().getAsString(),fireEvent);
break;
}
}
}
fireEvent(fireEvent);
return this.getRC();
}",0.9800097513408094
34416,"/** 
 * Returns the firmware URL
 */
public String getUrl(){
  if (this.url != null) {
    return url.getValue();
  }
 else {
    return null;
  }
}","/** 
 * Returns the firmware URL
 * @return String the Firmware URL
 */
public String getUrl(){
  if (this.url != null) {
    return url.getValue();
  }
 else {
    return null;
  }
}",0.8942598187311178
34417,"/** 
 * Returns the Firmware Update status
 */
public int getUpdateStatus(){
  return this.updateStatus.getValue().intValue();
}","/** 
 * Returns the Firmware Update status
 * @return Returns the Firmware Update status.
 */
public int getUpdateStatus(){
  return this.updateStatus.getValue().intValue();
}",0.8448844884488449
34418,"/** 
 * Returns the firmware state
 */
public int getState(){
  return this.state.getValue().intValue();
}","/** 
 * Returns the firmware state
 * @return returns the state of the Firmware
 */
public int getState(){
  return this.state.getValue().intValue();
}",0.8249027237354085
34419,"/** 
 * Returns the firmware Verifier
 */
public String getVerifier(){
  if (this.verifier != null) {
    return verifier.getValue();
  }
 else {
    return null;
  }
}","/** 
 * Returns the firmware Verifier
 * @return String returns the Firmware verifier or null
 */
public String getVerifier(){
  if (this.verifier != null) {
    return verifier.getValue();
  }
 else {
    return null;
  }
}",0.8571428571428571
34420,"/** 
 * Updates each of the resources with the new value
 * @param fromLocation
 * @param fireEvent - boolean to indicate whether to fire the update event.
 * @return code indicating whether the update is successful or not (200 means success, otherwise unsuccessful)
 */
public int update(JsonElement fromLocation,boolean fireEvent){
  JsonObject json=(JsonObject)fromLocation;
  Iterator<Map.Entry<String,JsonElement>> iter=json.entrySet().iterator();
  while (iter.hasNext()) {
    Entry<String,JsonElement> e=iter.next();
    Resource child=this.getChild(e.getKey());
    if (child != null) {
      child.update(e.getValue(),fireEvent);
    }
 else {
switch (e.getKey()) {
case DeviceLocation.LATITUDE:
        this.latitude=new NumberResource(LATITUDE,e.getValue().getAsNumber());
      this.add(this.latitude);
    break;
case DeviceLocation.LONGITUDE:
  this.longitude=new NumberResource(LONGITUDE,e.getValue().getAsNumber());
this.add(this.longitude);
break;
case DeviceLocation.ELEVATION:
this.elevation=new NumberResource(ELEVATION,e.getValue().getAsNumber());
this.add(this.elevation);
break;
case DeviceLocation.MEASUREDDATETIME:
this.measuredDateTime=new DateResource(ACCURACY,new Date(e.getValue().getAsString()));
this.add(this.measuredDateTime);
break;
case DeviceLocation.ACCURACY:
this.accuracy=new NumberResource(ACCURACY,e.getValue().getAsNumber());
this.add(this.accuracy);
break;
}
}
}
fireEvent(true);
return this.getRC();
}","/** 
 * Updates each of the resources with the new value
 * @param fromLocation The location that needs to be updated
 * @param fireEvent - boolean to indicate whether to fire the update event.
 * @return code indicating whether the update is successful or not (200 means success, otherwise unsuccessful)
 */
public int update(JsonElement fromLocation,boolean fireEvent){
  JsonObject json=(JsonObject)fromLocation;
  Iterator<Map.Entry<String,JsonElement>> iter=json.entrySet().iterator();
  while (iter.hasNext()) {
    Entry<String,JsonElement> e=iter.next();
    Resource child=this.getChild(e.getKey());
    if (child != null) {
      child.update(e.getValue(),fireEvent);
    }
 else {
switch (e.getKey()) {
case DeviceLocation.LATITUDE:
        this.latitude=new NumberResource(LATITUDE,e.getValue().getAsNumber());
      this.add(this.latitude);
    break;
case DeviceLocation.LONGITUDE:
  this.longitude=new NumberResource(LONGITUDE,e.getValue().getAsNumber());
this.add(this.longitude);
break;
case DeviceLocation.ELEVATION:
this.elevation=new NumberResource(ELEVATION,e.getValue().getAsNumber());
this.add(this.elevation);
break;
case DeviceLocation.MEASUREDDATETIME:
this.measuredDateTime=new DateResource(ACCURACY,new Date(e.getValue().getAsString()));
this.add(this.measuredDateTime);
break;
case DeviceLocation.ACCURACY:
this.accuracy=new NumberResource(ACCURACY,e.getValue().getAsNumber());
this.add(this.accuracy);
break;
}
}
}
fireEvent(true);
return this.getRC();
}",0.9870307167235496
34421,"/** 
 * <p>A sample firmware update method that pretends to install the arduino.hex sketch to Arduino Uno.</p> This method adds a diagnostic log containing the progress to the IoT Platform.
 */
@Override public void updateFirmware(DeviceFirmware deviceFirmware){
  System.out.println(CLASS_NAME + ""String_Node_Str"" + deviceFirmware.getDeviceId());
  updateInProgress=true;
  ManagedGateway gateway=((ManagedGateway)this.gwClient);
  Date timestamp=new Date();
  String message=""String_Node_Str"";
  LogSeverity severity=LogSeverity.informational;
  gateway.addDeviceLog(this.deviceType,this.deviceId,message,timestamp,severity);
  for (int i=1; i < 21; i++) {
    try {
      Thread.sleep(200);
    }
 catch (    Exception e) {
    }
    gateway.addDeviceLog(this.deviceType,this.deviceId,""String_Node_Str"" + (i * 5),new Date(),severity);
    System.out.println(""String_Node_Str"" + (i * 5));
  }
  message=""String_Node_Str"";
  gateway.addDeviceLog(this.deviceType,this.deviceId,message,new Date(),severity);
  System.out.println(""String_Node_Str"");
  deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.SUCCESS);
  deviceFirmware.setState(FirmwareState.IDLE);
  GatewayFirmwareHandlerSample.deleteFile(downloadedFirmwareName);
  this.downloadedFirmwareName=null;
  System.out.println(CLASS_NAME + ""String_Node_Str"");
  firmwareUpdated=true;
  updateInProgress=false;
}","/** 
 * <p>A sample firmware update method that pretends to install the arduino.hex sketch to Arduino Uno.</p> This method adds a diagnostic log containing the progress to the IoT Platform.
 */
@Override public void updateFirmware(DeviceFirmware deviceFirmware){
  System.out.println(CLASS_NAME + ""String_Node_Str"" + deviceFirmware.getDeviceId());
  updateInProgress=true;
  ManagedGateway gateway=((ManagedGateway)this.gwClient);
  Date timestamp=new Date();
  String message=""String_Node_Str"";
  LogSeverity severity=LogSeverity.informational;
  gateway.addDeviceLog(this.deviceType,this.deviceId,message,timestamp,severity);
  System.out.println(""String_Node_Str"");
  for (int i=1; i < 21; i++) {
    try {
      Thread.sleep(200);
    }
 catch (    Exception e) {
    }
    gateway.addDeviceLog(this.deviceType,this.deviceId,""String_Node_Str"" + (i * 5),new Date(),severity);
    System.out.print(""String_Node_Str"" + (i * 5) + ""String_Node_Str"");
  }
  message=""String_Node_Str"";
  gateway.addDeviceLog(this.deviceType,this.deviceId,message,new Date(),severity);
  System.out.println(""String_Node_Str"");
  deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.SUCCESS);
  deviceFirmware.setState(FirmwareState.IDLE);
  GatewayFirmwareHandlerSample.deleteFile(downloadedFirmwareName);
  this.downloadedFirmwareName=null;
  System.out.println(CLASS_NAME + ""String_Node_Str"");
  firmwareUpdated=true;
  updateInProgress=false;
}",0.9774436090225564
34422,"/** 
 * Add a device under the given gateway using the Java Client Library.
 * @throws IoTFCReSTException
 */
private void addDevice(String deviceId) throws IoTFCReSTException {
  try {
    String deviceToBeAdded=""String_Node_Str"" + deviceId + ""String_Node_Str"";
    JsonParser parser=new JsonParser();
    JsonElement input=parser.parse(deviceToBeAdded);
    JsonObject response=this.gwClient.api().registerDeviceUnderGateway(DEVICE_TYPE,this.gwDeviceId,this.gwDeviceType,input);
    System.out.println(response);
  }
 catch (  IoTFCReSTException e) {
    System.out.println(""String_Node_Str"" + e.getHttpCode() + ""String_Node_Str""+ e.getMessage());
    System.out.println(e.getResponse());
  }
}","/** 
 * Add a device under the given gateway using the Java Client Library.
 * @throws IoTFCReSTException
 */
private void addDevice(String deviceType,String deviceId) throws IoTFCReSTException {
  try {
    String deviceToBeAdded=""String_Node_Str"" + deviceId + ""String_Node_Str"";
    JsonParser parser=new JsonParser();
    JsonElement input=parser.parse(deviceToBeAdded);
    JsonObject response=this.gwClient.api().registerDeviceUnderGateway(deviceType,this.gwDeviceId,this.gwDeviceType,input);
    System.out.println(response);
  }
 catch (  IoTFCReSTException e) {
    System.out.println(""String_Node_Str"" + e.getHttpCode() + ""String_Node_Str""+ e.getMessage());
    System.out.println(e.getResponse());
  }
}",0.9723207948899928
34423,"public static void main(String[] args) throws IoTFCReSTException {
  SampleRasPiGateway sample=new SampleRasPiGateway();
  String fileName=Utility.getDefaultFilePath(PROPERTIES_FILE_NAME,DEFAULT_PATH);
  sample.createGatewayClient(fileName);
  sample.addDeviceType();
  sample.addDevice(ARDUINO_DEVICE_ID);
  sample.addCommandCallback();
  System.out.println(""String_Node_Str"");
  while (true) {
    sample.publishGatewayEvent();
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ie) {
    }
  }
}","public static void main(String[] args) throws IoTFCReSTException {
  SampleRasPiGateway sample=new SampleRasPiGateway();
  String fileName=Utility.getDefaultFilePath(PROPERTIES_FILE_NAME,DEFAULT_PATH);
  sample.createGatewayClient(fileName);
  sample.addDeviceType();
  sample.addDevice(DEVICE_TYPE,ARDUINO_DEVICE_ID);
  sample.addCommandCallback();
  System.out.println(""String_Node_Str"");
  while (true) {
    sample.publishGatewayEvent();
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ie) {
    }
  }
}",0.9886363636363636
34424,"/** 
 * Add a device under the given gateway using the Java Client Library.
 * @throws IoTFCReSTException
 */
private void addDevice(String deviceId) throws IoTFCReSTException {
  try {
    String deviceToBeAdded=""String_Node_Str"" + deviceId + ""String_Node_Str"";
    System.out.println(deviceToBeAdded);
    JsonParser parser=new JsonParser();
    JsonElement input=parser.parse(deviceToBeAdded);
    JsonObject response=this.gwClient.api().registerDeviceUnderGateway(DEVICE_TYPE,this.gwDeviceId,this.gwDeviceType,input);
    System.out.println(response);
  }
 catch (  IoTFCReSTException e) {
    System.out.println(""String_Node_Str"" + e.getHttpCode() + ""String_Node_Str""+ e.getMessage());
    System.out.println(e.getResponse());
  }
}","/** 
 * Add a device under the given gateway using the Java Client Library.
 * @throws IoTFCReSTException
 */
private void addDevice(String deviceType,String deviceId) throws IoTFCReSTException {
  try {
    String deviceToBeAdded=""String_Node_Str"" + deviceId + ""String_Node_Str"";
    System.out.println(deviceToBeAdded);
    JsonParser parser=new JsonParser();
    JsonElement input=parser.parse(deviceToBeAdded);
    JsonObject response=this.gwClient.api().registerDeviceUnderGateway(deviceType,this.gwDeviceId,this.gwDeviceType,input);
    System.out.println(response);
  }
 catch (  IoTFCReSTException e) {
    System.out.println(""String_Node_Str"" + e.getHttpCode() + ""String_Node_Str""+ e.getMessage());
    System.out.println(e.getResponse());
  }
}",0.9738430583501008
34425,"public static void main(String[] args) throws IoTFCReSTException {
  SimpleGatewayExample sample=new SimpleGatewayExample();
  String fileName=Utility.getDefaultFilePath(PROPERTIES_FILE_NAME,DEFAULT_PATH);
  sample.createGatewayClient(fileName);
  sample.addDeviceType();
  sample.addDevice(SIMULATOR_DEVICE_ID);
  System.out.println(""String_Node_Str"");
  while (true) {
    sample.publishGatewayEvent();
    sample.publishDeviceEvent();
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ie) {
    }
  }
}","public static void main(String[] args) throws IoTFCReSTException {
  SimpleGatewayExample sample=new SimpleGatewayExample();
  String fileName=Utility.getDefaultFilePath(PROPERTIES_FILE_NAME,DEFAULT_PATH);
  sample.createGatewayClient(fileName);
  sample.addDeviceType();
  sample.addDevice(DEVICE_TYPE,SIMULATOR_DEVICE_ID);
  System.out.println(""String_Node_Str"");
  while (true) {
    sample.publishGatewayEvent();
    sample.publishDeviceEvent();
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ie) {
    }
  }
}",0.9888059701492538
34426,"/** 
 * A sample method that downloads a firmware image from a HTTP server
 */
@Override public void downloadFirmware(DeviceFirmware deviceFirmware){
  System.out.println(CLASS_NAME + ""String_Node_Str"" + deviceFirmware.getDeviceId());
  boolean success=false;
  URL firmwareURL=null;
  URLConnection urlConnection=null;
  String downloadedFirmwareName=""String_Node_Str"";
  DeviceInterface device=this.deviceMap.get(deviceFirmware.getDeviceId());
  try {
    System.out.println(CLASS_NAME + ""String_Node_Str"" + deviceFirmware.getUrl());
    firmwareURL=new URL(deviceFirmware.getUrl());
    urlConnection=firmwareURL.openConnection();
    if (deviceFirmware.getName() != null && !""String_Node_Str"".equals(deviceFirmware.getName())) {
      downloadedFirmwareName=deviceFirmware.getName();
    }
 else {
      downloadedFirmwareName=deviceFirmware.getDeviceId() + ""String_Node_Str"" + new Date().getTime()+ ""String_Node_Str"";
    }
    File file=new File(downloadedFirmwareName);
    BufferedInputStream bis=new BufferedInputStream(urlConnection.getInputStream());
    BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(file.getName()));
    int data=bis.read();
    if (data != -1) {
      bos.write(data);
      byte[] block=new byte[1024];
      while (true) {
        int len=bis.read(block,0,block.length);
        if (len != -1) {
          bos.write(block,0,len);
        }
 else {
          break;
        }
      }
      bos.close();
      bis.close();
      success=true;
    }
 else {
      deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.INVALID_URI);
    }
    if (deviceFirmware.getVerifier() != null && !deviceFirmware.getVerifier().equals(""String_Node_Str"")) {
      success=verifyFirmware(file,deviceFirmware.getVerifier());
      if (success == false) {
        deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.VERIFICATION_FAILED);
      }
    }
  }
 catch (  MalformedURLException me) {
    deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.INVALID_URI);
    me.printStackTrace();
  }
catch (  IOException e) {
    deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.CONNECTION_LOST);
    e.printStackTrace();
  }
catch (  OutOfMemoryError oom) {
    deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.OUT_OF_MEMORY);
  }
  if (success == true) {
    deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.SUCCESS);
    deviceFirmware.setState(FirmwareState.DOWNLOADED);
    if (device != null) {
      device.setFirmwareName(downloadedFirmwareName);
    }
 else {
      gatewayDownloadFirmwareName=downloadedFirmwareName;
    }
  }
 else {
    deviceFirmware.setState(FirmwareState.IDLE);
  }
  System.out.println(CLASS_NAME + ""String_Node_Str"" + success+ ""String_Node_Str"");
}","/** 
 * A sample method that downloads a firmware image from a HTTP server
 */
@Override public void downloadFirmware(DeviceFirmware deviceFirmware){
  System.out.println(CLASS_NAME + ""String_Node_Str"" + deviceFirmware.getDeviceId());
  boolean success=false;
  URL firmwareURL=null;
  URLConnection urlConnection=null;
  String downloadedFirmwareName=""String_Node_Str"";
  DeviceInterface device=this.deviceMap.get(deviceFirmware.getDeviceId());
  try {
    System.out.println(CLASS_NAME + ""String_Node_Str"" + deviceFirmware.getUrl());
    firmwareURL=new URL(deviceFirmware.getUrl());
    urlConnection=firmwareURL.openConnection();
    int fileSize=urlConnection.getContentLength();
    if (deviceFirmware.getName() != null && !""String_Node_Str"".equals(deviceFirmware.getName())) {
      downloadedFirmwareName=deviceFirmware.getName();
    }
 else {
      downloadedFirmwareName=deviceFirmware.getDeviceId() + ""String_Node_Str"" + new Date().getTime()+ ""String_Node_Str"";
    }
    File file=new File(downloadedFirmwareName);
    BufferedInputStream bis=new BufferedInputStream(urlConnection.getInputStream());
    BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(file.getName()));
    int downloadedSize=0;
    int data=bis.read();
    downloadedSize+=1;
    if (data != -1) {
      bos.write(data);
      byte[] block=new byte[1024];
      while (true) {
        int len=bis.read(block,0,block.length);
        downloadedSize+=len;
        if (fileSize > 0) {
          int progress=(int)(((float)downloadedSize / fileSize) * 100);
          String message=""String_Node_Str"" + progress + ""String_Node_Str"";
          if (device != null) {
            device.sendLog(message,new Date(),LogSeverity.informational);
          }
 else {
            gateway.addGatewayLog(message,new Date(),LogSeverity.informational);
          }
          System.out.println(message);
        }
 else {
          String message=""String_Node_Str"" + downloadedSize + ""String_Node_Str"";
          if (device != null) {
            device.sendLog(message,new Date(),LogSeverity.informational);
          }
 else {
            gateway.addGatewayLog(message,new Date(),LogSeverity.informational);
          }
          System.out.println(message);
        }
        if (len != -1) {
          bos.write(block,0,len);
        }
 else {
          break;
        }
      }
      bos.close();
      bis.close();
      success=true;
    }
 else {
      deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.INVALID_URI);
    }
    if (deviceFirmware.getVerifier() != null && !deviceFirmware.getVerifier().equals(""String_Node_Str"")) {
      success=verifyFirmware(file,deviceFirmware.getVerifier());
      if (success == false) {
        deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.VERIFICATION_FAILED);
      }
    }
  }
 catch (  MalformedURLException me) {
    deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.INVALID_URI);
    me.printStackTrace();
  }
catch (  IOException e) {
    deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.CONNECTION_LOST);
    e.printStackTrace();
  }
catch (  OutOfMemoryError oom) {
    deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.OUT_OF_MEMORY);
  }
  if (success == true) {
    deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.SUCCESS);
    deviceFirmware.setState(FirmwareState.DOWNLOADED);
    if (device != null) {
      device.setFirmwareName(downloadedFirmwareName);
    }
 else {
      gatewayDownloadFirmwareName=downloadedFirmwareName;
    }
  }
 else {
    deviceFirmware.setState(FirmwareState.IDLE);
  }
  System.out.println(CLASS_NAME + ""String_Node_Str"" + success+ ""String_Node_Str"");
}",0.8542287776557351
34427,"/** 
 * This method adds a Firmware handler where the device agent will get notified when there is a firmware action from the server. 
 */
private void addFirmwareHandler() throws Exception {
  if (this.mgdGateway != null) {
    GatewayFirmwareHandlerSample fwHandler=new GatewayFirmwareHandlerSample();
    fwHandler.addDeviceInterface(ARDUINO_DEVICE_ID,arduino);
    fwHandler.setGatewayDeviceId(this.mgdGateway.getGWDeviceId());
    mgdGateway.addFirmwareHandler(fwHandler);
    System.out.println(""String_Node_Str"");
  }
}","/** 
 * This method adds a Firmware handler where the device agent will get notified when there is a firmware action from the server. 
 */
private void addFirmwareHandler() throws Exception {
  if (this.mgdGateway != null) {
    GatewayFirmwareHandlerSample fwHandler=new GatewayFirmwareHandlerSample();
    fwHandler.addDeviceInterface(ARDUINO_DEVICE_ID,arduino);
    fwHandler.setGateway(this.mgdGateway);
    mgdGateway.addFirmwareHandler(fwHandler);
    System.out.println(""String_Node_Str"");
  }
}",0.9766536964980544
34428,"public static void main(String[] args) throws Exception {
  System.out.println(""String_Node_Str"");
  String fileName=Utility.getDefaultFilePath(PROPERTIES_FILE_NAME,DEFAULT_PATH);
  ManagedRasPiGateway sample=new ManagedRasPiGateway();
  try {
    sample.createManagedClient(fileName);
    sample.createArduinoDeviceInterface();
    sample.addDeviceType();
    sample.addDevice(ARDUINO_DEVICE_ID);
    sample.addDeviceActionHandler();
    sample.addFirmwareHandler();
    sample.addCommandCallback();
    sample.arduino.toggleDisplay();
    sample.userAction();
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    e.printStackTrace();
    System.err.flush();
  }
 finally {
    sample.disconnect();
  }
  System.out.println(""String_Node_Str"");
}","public static void main(String[] args) throws Exception {
  System.out.println(""String_Node_Str"");
  String fileName=Utility.getDefaultFilePath(PROPERTIES_FILE_NAME,DEFAULT_PATH);
  ManagedRasPiGateway sample=new ManagedRasPiGateway();
  try {
    sample.createManagedClient(fileName);
    sample.createArduinoDeviceInterface();
    sample.addDeviceType();
    sample.addDevice(DEVICE_TYPE,ARDUINO_DEVICE_ID);
    sample.addDeviceActionHandler();
    sample.addFirmwareHandler();
    sample.addCommandCallback();
    sample.arduino.toggleDisplay();
    sample.userAction();
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    e.printStackTrace();
    System.err.flush();
  }
 finally {
    sample.disconnect();
  }
  System.out.println(""String_Node_Str"");
}",0.9922279792746114
34429,"/** 
 * Add a device under the given gateway using the Java Client Library.
 * @throws IoTFCReSTException
 */
private void addDevice(String deviceId) throws IoTFCReSTException {
  try {
    String deviceToBeAdded=""String_Node_Str"" + deviceId + ""String_Node_Str"";
    System.out.println(deviceToBeAdded);
    JsonParser parser=new JsonParser();
    JsonElement input=parser.parse(deviceToBeAdded);
    JsonObject response=this.apiClient.registerDeviceUnderGateway(DEVICE_TYPE,this.mgdGateway.getGWDeviceId(),this.mgdGateway.getGWTypeId(),input);
    System.out.println(response);
  }
 catch (  IoTFCReSTException e) {
    if (e.getHttpCode() != 409) {
      System.out.println(""String_Node_Str"" + e.getHttpCode() + ""String_Node_Str""+ e.getMessage());
      System.out.println(e.getResponse());
    }
  }
}","/** 
 * Add a device under the given gateway using the Java Client Library.
 * @throws IoTFCReSTException
 */
private void addDevice(String deviceType,String deviceId) throws IoTFCReSTException {
  try {
    String deviceToBeAdded=""String_Node_Str"" + deviceId + ""String_Node_Str"";
    System.out.println(deviceToBeAdded);
    JsonParser parser=new JsonParser();
    JsonElement input=parser.parse(deviceToBeAdded);
    JsonObject response=this.apiClient.registerDeviceUnderGateway(deviceType,this.mgdGateway.getGWDeviceId(),this.mgdGateway.getGWTypeId(),input);
    System.out.println(response);
  }
 catch (  IoTFCReSTException e) {
    if (e.getHttpCode() != 409) {
      System.out.println(""String_Node_Str"" + e.getHttpCode() + ""String_Node_Str""+ e.getMessage());
      System.out.println(e.getResponse());
    }
  }
}",0.976
34430,"/** 
 * The RXTX library calls the serialEvent() method when the data is available to  read from the serial port. This is where the Raspberry Pi gets the sensor  readings (the PIR movement sensor and the internal temperature) from Arduino.  Arduino sends the values in the following format, a. The name of the event - Required by Watson IoT Platform followed by space b. comma separated datapoints, for example, temp and pir readings as shown below, ""status temp:35.22,pir:0"" This method converts the above data into from Arduino Uno into JSON format send it to Watson Iot Platform. 
 */
public void serialEvent(SerialPortEvent oEvent){
  String line=null;
synchronized (this) {
    if (oEvent.getEventType() == SerialPortEvent.DATA_AVAILABLE) {
      try {
        line=input.readLine();
        if (bDisplay)         System.out.println(line);
      }
 catch (      Exception e) {
        System.err.println(e.toString());
      }
    }
  }
  try {
    String[] tokens=line.split(""String_Node_Str"");
    if (tokens.length != 2) {
      return;
    }
    String eventName=tokens[0];
    JsonElement event=new JsonParser().parse(""String_Node_Str"" + tokens[1] + ""String_Node_Str"");
    boolean status=this.gwClient.publishDeviceEvent(this.deviceType,this.deviceId,eventName,event);
    if (status == false) {
      System.err.println(""String_Node_Str"");
    }
 else {
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}","/** 
 * The RXTX library calls the serialEvent() method when the data is available to  read from the serial port. This is where the Raspberry Pi gets the sensor  readings (the PIR movement sensor and the internal temperature) from Arduino.  Arduino sends the values in the following format, a. The name of the event - Required by Watson IoT Platform followed by space b. comma separated datapoints, for example, temp and pir readings as shown below, ""status temp:35.22,pir:0"" This method converts the above data into from Arduino Uno into JSON format send it to Watson Iot Platform. 
 */
public void serialEvent(SerialPortEvent oEvent){
  String line=null;
synchronized (this) {
    if (oEvent.getEventType() == SerialPortEvent.DATA_AVAILABLE) {
      try {
        line=input.readLine();
        if (bDisplay)         System.out.println(line);
      }
 catch (      Exception e) {
        System.err.println(e.toString());
      }
    }
  }
  try {
    String[] tokens=line.split(""String_Node_Str"");
    if (tokens.length != 2) {
      return;
    }
    String eventName=tokens[0];
    JsonElement event=new JsonParser().parse(""String_Node_Str"" + tokens[1] + ""String_Node_Str"");
    boolean status=this.gwClient.publishDeviceEvent(this.deviceType,this.deviceId,eventName,event);
    if (status == false) {
      System.err.println(""String_Node_Str"");
    }
 else {
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
}",0.9915454852891444
34431,"/** 
 * A sample method to handle the Arduino's reboot request from the DM server. <p>In this case its assumed that the sketch program running in Arduino Uno will reboot when it receives 0 in the serial port.</p> This method just sends a 0 and reinitializes the connection to Arduino Uno.
 */
@Override public void reboot(DeviceAction action){
  sendCommand(""String_Node_Str"");
  close();
  try {
    Thread.sleep(1000 * 10);
  }
 catch (  InterruptedException ie) {
  }
  this.initialize();
  System.out.println(""String_Node_Str"");
  try {
    ManagedGateway gateway=((ManagedGateway)this.gwClient);
    gateway.sendDeviceManageRequest(this.deviceType,this.deviceId,0,true,true);
  }
 catch (  MqttException e) {
    e.printStackTrace();
  }
}","/** 
 * A sample method to handle the Arduino's reboot request from the DM server. <p>In this case its assumed that the sketch program running in Arduino Uno will reboot when it receives 0 in the serial port.</p> This method just sends a 0 and reinitializes the connection to Arduino Uno.
 */
@Override public void reboot(DeviceAction action){
  sendCommand(""String_Node_Str"");
  updateInProgress=true;
  close();
  try {
    Thread.sleep(1000 * 10);
  }
 catch (  InterruptedException ie) {
  }
  this.initialize();
  System.out.println(""String_Node_Str"");
  try {
    ManagedGateway gateway=((ManagedGateway)this.gwClient);
    gateway.sendDeviceManageRequest(this.deviceType,this.deviceId,0,true,true);
  }
 catch (  MqttException e) {
    e.printStackTrace();
  }
  updateInProgress=false;
}",0.9668615984405458
34432,"/** 
 * The Raspberry Pi gateway can send data to Arduino Uno by writing data  on the output stream that we opened earlier:
 */
public void sendCommand(String cmd){
  if (this.output != null) {
    try {
      System.out.println(""String_Node_Str"" + cmd);
      this.output.write(cmd);
      this.output.write(""String_Node_Str"");
      this.output.flush();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * The Raspberry Pi gateway can send data to Arduino Uno by writing data  on the output stream that we opened earlier:
 */
public void sendCommand(String cmd){
  if (this.output != null && updateInProgress == false) {
    try {
      System.out.println(""String_Node_Str"" + cmd);
      this.output.write(cmd);
      this.output.write(""String_Node_Str"");
      this.output.flush();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.9673055242390078
34433,"/** 
 * <p>A sample firmware update method that installs the arduino.hex sketch to Arduino Uno with the following command,</p> <p>avrdude -q -V -p atmega328p -C /etc/avrdude.conf -c arduino -b 115200 -P /dev/ttyACM0 -U flash:w:arduino_v1.hex:i</p>
 */
@Override public void updateFirmware(DeviceFirmware deviceFirmware){
  System.out.println(CLASS_NAME + ""String_Node_Str"" + deviceFirmware.getDeviceId());
  final String INSTALL_LOG_FILE=""String_Node_Str"";
  ProcessBuilder pkgInstaller=null;
  Process p=null;
  Properties prop=new Properties();
  try {
    FileInputStream in=new FileInputStream(""String_Node_Str"");
    prop.load(in);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  ManagedGateway gateway=((ManagedGateway)this.gwClient);
  Date timestamp=new Date();
  String message=""String_Node_Str"";
  LogSeverity severity=LogSeverity.informational;
  int rc=gateway.addDeviceLog(this.deviceType,this.deviceId,message,timestamp,severity);
  close();
  try {
    pkgInstaller=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",trimedValue(prop.getProperty(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"",trimedValue(prop.getProperty(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.port,""String_Node_Str"",""String_Node_Str"" + downloadedFirmwareName + ""String_Node_Str"");
    pkgInstaller.redirectErrorStream(true);
    pkgInstaller.redirectOutput(new File(INSTALL_LOG_FILE));
    try {
      p=pkgInstaller.start();
      boolean status=GatewayFirmwareHandlerSample.waitForCompletion(p,5);
      String log=GatewayFirmwareHandlerSample.getInstallLog(INSTALL_LOG_FILE);
      System.out.println(log);
      gateway.addDeviceLog(this.deviceType,this.deviceId,log,timestamp,severity);
      if (status == false) {
        p.destroy();
        deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.UNSUPPORTED_IMAGE);
        gateway.addDeviceLog(this.deviceType,this.deviceId,""String_Node_Str"",timestamp,LogSeverity.error);
        return;
      }
      message=""String_Node_Str"" + status;
      gateway.addDeviceLog(this.deviceType,this.deviceId,message,timestamp,severity);
      System.out.println(""String_Node_Str"" + status);
      deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.SUCCESS);
      deviceFirmware.setState(FirmwareState.IDLE);
    }
 catch (    IOException e) {
      e.printStackTrace();
      deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.UNSUPPORTED_IMAGE);
    }
catch (    InterruptedException e) {
      e.printStackTrace();
      deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.UNSUPPORTED_IMAGE);
    }
  }
 catch (  OutOfMemoryError oom) {
    deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.OUT_OF_MEMORY);
  }
  GatewayFirmwareHandlerSample.deleteFile(downloadedFirmwareName);
  GatewayFirmwareHandlerSample.deleteFile(INSTALL_LOG_FILE);
  this.downloadedFirmwareName=null;
  System.out.println(CLASS_NAME + ""String_Node_Str"");
  this.initialize();
}","/** 
 * <p>A sample firmware update method that installs the arduino.hex sketch to Arduino Uno with the following command,</p> <p>avrdude -q -V -p atmega328p -C /etc/avrdude.conf -c arduino -b 115200 -P /dev/ttyACM0 -U flash:w:arduino_v1.hex:i</p>
 */
@Override public void updateFirmware(DeviceFirmware deviceFirmware){
  if (downloadedFirmwareName == null) {
    deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.UNSUPPORTED_IMAGE);
    deviceFirmware.setState(FirmwareState.IDLE);
    return;
  }
  updateInProgress=true;
  System.out.println(CLASS_NAME + ""String_Node_Str"" + deviceFirmware.getDeviceId());
  final String INSTALL_LOG_FILE=""String_Node_Str"";
  ProcessBuilder pkgInstaller=null;
  Process p=null;
  Properties prop=new Properties();
  try {
    FileInputStream in=new FileInputStream(""String_Node_Str"");
    prop.load(in);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  ManagedGateway gateway=((ManagedGateway)this.gwClient);
  Date timestamp=new Date();
  String message=""String_Node_Str"";
  LogSeverity severity=LogSeverity.informational;
  int rc=gateway.addDeviceLog(this.deviceType,this.deviceId,message,timestamp,severity);
  close();
  try {
    pkgInstaller=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",trimedValue(prop.getProperty(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"",trimedValue(prop.getProperty(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.port,""String_Node_Str"",""String_Node_Str"" + downloadedFirmwareName + ""String_Node_Str"");
    pkgInstaller.redirectErrorStream(true);
    pkgInstaller.redirectOutput(new File(INSTALL_LOG_FILE));
    try {
      p=pkgInstaller.start();
      boolean status=GatewayFirmwareHandlerSample.waitForCompletion(p,5);
      String log=GatewayFirmwareHandlerSample.getInstallLog(INSTALL_LOG_FILE);
      System.out.println(log);
      gateway.addDeviceLog(this.deviceType,this.deviceId,log,new Date(),severity);
      if (status == false) {
        p.destroy();
        deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.UNSUPPORTED_IMAGE);
        gateway.addDeviceLog(this.deviceType,this.deviceId,""String_Node_Str"",new Date(),LogSeverity.error);
        return;
      }
      message=""String_Node_Str"" + status;
      gateway.addDeviceLog(this.deviceType,this.deviceId,message,new Date(),severity);
      System.out.println(""String_Node_Str"" + status);
      deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.SUCCESS);
      deviceFirmware.setState(FirmwareState.IDLE);
    }
 catch (    IOException e) {
      e.printStackTrace();
      deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.UNSUPPORTED_IMAGE);
    }
catch (    InterruptedException e) {
      e.printStackTrace();
      deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.UNSUPPORTED_IMAGE);
    }
  }
 catch (  OutOfMemoryError oom) {
    deviceFirmware.setUpdateStatus(FirmwareUpdateStatus.OUT_OF_MEMORY);
  }
  GatewayFirmwareHandlerSample.deleteFile(downloadedFirmwareName);
  GatewayFirmwareHandlerSample.deleteFile(INSTALL_LOG_FILE);
  this.downloadedFirmwareName=null;
  System.out.println(CLASS_NAME + ""String_Node_Str"");
  this.initialize();
  updateInProgress=false;
}",0.3431201396603713
34434,"/** 
 * This method does the following, 1. Iterate through all of the system ports looking for a match for the Arduino Uno,  and then attempts to connect to it.  2. Connnect to the port, configure the communication parameters, like the bit rate, timeout and etc.. 3. Open the input and output streams for communication 4. Add an event listener to receive events from the Arduino,  and tell it to call us back when there's data available
 */
public void initialize(){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  CommPortIdentifier portId=null;
  Enumeration portEnum=CommPortIdentifier.getPortIdentifiers();
  while (portEnum.hasMoreElements()) {
    CommPortIdentifier currPortId=(CommPortIdentifier)portEnum.nextElement();
    if (currPortId.getName().equals(this.port)) {
      portId=currPortId;
      break;
    }
  }
  if (portId == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  try {
    serialPort=(SerialPort)portId.open(this.getClass().getName(),TIME_OUT);
    serialPort.setSerialPortParams(DATA_RATE,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
    input=new BufferedReader(new InputStreamReader(serialPort.getInputStream()));
    output=new BufferedWriter(new OutputStreamWriter(serialPort.getOutputStream()));
    serialPort.addEventListener(this);
    serialPort.notifyOnDataAvailable(true);
  }
 catch (  Exception|Error e) {
    System.err.println(e.toString());
  }
}","/** 
 * This method does the following, 1. Iterate through all of the system ports looking for a match for the Arduino Uno,  and then attempts to connect to it.  2. Connnect to the port, configure the communication parameters, like the bit rate, timeout and etc.. 3. Open the input and output streams for communication 4. Add an event listener to receive events from the Arduino,  and tell it to call us back when there's data available
 */
public boolean initialize(){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    CommPortIdentifier portId=null;
    Enumeration portEnum=CommPortIdentifier.getPortIdentifiers();
    while (portEnum.hasMoreElements()) {
      CommPortIdentifier currPortId=(CommPortIdentifier)portEnum.nextElement();
      if (currPortId.getName().equals(this.port)) {
        portId=currPortId;
        break;
      }
    }
    if (portId == null) {
      System.out.println(""String_Node_Str"");
      return false;
    }
    serialPort=(SerialPort)portId.open(this.getClass().getName(),TIME_OUT);
    serialPort.setSerialPortParams(DATA_RATE,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
    input=new BufferedReader(new InputStreamReader(serialPort.getInputStream()));
    output=new BufferedWriter(new OutputStreamWriter(serialPort.getOutputStream()));
    serialPort.addEventListener(this);
    serialPort.notifyOnDataAvailable(true);
  }
 catch (  Exception|Error e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    return false;
  }
  return true;
}",0.943737441393168
34435,"public SootClass instrumentDestination(String destination){
  System.out.println(""String_Node_Str"" + destination);
  SootClass sc=Scene.v().getSootClass(destination);
  SootField intent_for_ipc=generateIntentFieldForIpc(sc);
  SootField intent_for_ar=generateIntentFieldForActivityResult(sc);
  generateInitMethod(sc,intent_for_ipc);
  generateGetIntentMethod(sc,intent_for_ipc);
  generateGetIntentForActivityResultMethod(sc,intent_for_ar);
  List<SootMethod> sms=sc.getMethods();
  for (  SootMethod sm : sms) {
    instrumentSetIntentARStmt(sm,intent_for_ar);
  }
  generateDummyMainMethod(destination);
  instrumentDummyMainMethod(sc,intent_for_ipc);
  if (isService(sc) && containOnBindMethod(sc)) {
    Type binderType=extractBinderType(sc);
    SootField ibinder_for_ipc=generateFieldForIBinder(sc,binderType);
    generateGetIBinderMethod(sc,ibinder_for_ipc,binderType);
    instrumentOnBindMethod(sc,ibinder_for_ipc);
  }
  for (  SootMethod sm : sc.getMethods())   System.out.println(""String_Node_Str"" + sm + ""String_Node_Str""+ sm.retrieveActiveBody());
  return sc;
}","public SootClass instrumentDestination(String destination){
  System.out.println(""String_Node_Str"" + destination);
  SootClass sc=Scene.v().getSootClass(destination);
  if (sc.getName().equals(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + sc);
  }
  SootField intent_for_ipc=generateIntentFieldForIpc(sc);
  SootField intent_for_ar=generateIntentFieldForActivityResult(sc);
  generateInitMethod(sc,intent_for_ipc);
  generateGetIntentMethod(sc,intent_for_ipc);
  generateGetIntentForActivityResultMethod(sc,intent_for_ar);
  List<SootMethod> sms=sc.getMethods();
  for (  SootMethod sm : sms) {
    instrumentSetIntentARStmt(sm,intent_for_ar);
  }
  generateDummyMainMethod(destination);
  instrumentDummyMainMethod(sc,intent_for_ipc);
  if (isService(sc) && containOnBindMethod(sc)) {
    Type binderType=extractBinderType(sc);
    SootField ibinder_for_ipc=generateFieldForIBinder(sc,binderType);
    generateGetIBinderMethod(sc,ibinder_for_ipc,binderType);
    instrumentOnBindMethod(sc,ibinder_for_ipc);
  }
  for (  SootMethod sm : sc.getMethods())   System.out.println(""String_Node_Str"" + sm + ""String_Node_Str""+ sm.retrieveActiveBody());
  return sc;
}",0.9556737588652482
34436,"/** 
 * generate construct method for this component, this construct method should take one Intent as their parameter. the best way is to use a place holder parameter to avoid exist construct method and  use exist construct to build the new <init> method.
 * @param compSootClass
 * @param intentSootField
 * @return
 */
public SootMethod generateInitMethod(SootClass compSootClass,SootField intentSootField){
  String name=""String_Node_Str"";
  List<Type> parameters=new ArrayList<Type>();
  parameters.add(INTENT_TYPE);
  Type returnType=VoidType.v();
  int modifiers=Modifier.PUBLIC;
  SootMethod newConstructor=new SootMethod(name,parameters,returnType,modifiers);
  compSootClass.addMethod(newConstructor);
{
    Body b=Jimple.v().newBody(newConstructor);
    newConstructor.setActiveBody(b);
    LocalGenerator lg=new LocalGenerator(b);
    Local thisLocal=lg.generateLocal(compSootClass.getType());
    Unit thisU=Jimple.v().newIdentityStmt(thisLocal,Jimple.v().newThisRef(compSootClass.getType()));
    Local intentParameterLocal=lg.generateLocal(INTENT_TYPE);
    Unit intentParameterU=Jimple.v().newIdentityStmt(intentParameterLocal,Jimple.v().newParameterRef(INTENT_TYPE,0));
    Unit superU=(Unit)Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(thisLocal,compSootClass.getMethod(name,new ArrayList<Type>(),VoidType.v()).makeRef()));
    Unit storeIntentU=Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(intentSootField.makeRef()),intentParameterLocal);
    b.getUnits().add(thisU);
    b.getUnits().add(intentParameterU);
    b.getUnits().add(superU);
    b.getUnits().add(storeIntentU);
    b.getUnits().add(Jimple.v().newReturnVoidStmt());
  }
  return newConstructor;
}","/** 
 * generate construct method for this component, this construct method should take one Intent as their parameter. the best way is to use a place holder parameter to avoid exist construct method and  use exist construct to build the new <init> method.
 * @param compSootClass
 * @param intentSootField
 * @return
 */
public SootMethod generateInitMethod(SootClass compSootClass,SootField intentSootField){
  String name=""String_Node_Str"";
  List<Type> parameters=new ArrayList<Type>();
  parameters.add(INTENT_TYPE);
  Type returnType=VoidType.v();
  int modifiers=Modifier.PUBLIC;
  SootMethod newConstructor=new SootMethod(name,parameters,returnType,modifiers);
  compSootClass.addMethod(newConstructor);
{
    Body b=Jimple.v().newBody(newConstructor);
    newConstructor.setActiveBody(b);
    LocalGenerator lg=new LocalGenerator(b);
    Local thisLocal=lg.generateLocal(compSootClass.getType());
    Unit thisU=Jimple.v().newIdentityStmt(thisLocal,Jimple.v().newThisRef(compSootClass.getType()));
    Local intentParameterLocal=lg.generateLocal(INTENT_TYPE);
    Unit intentParameterU=Jimple.v().newIdentityStmt(intentParameterLocal,Jimple.v().newParameterRef(INTENT_TYPE,0));
    boolean noDefaultConstructMethod=false;
    Unit superU=null;
    try {
      superU=(Unit)Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(thisLocal,compSootClass.getMethod(name,new ArrayList<Type>(),VoidType.v()).makeRef()));
    }
 catch (    Exception ex) {
      noDefaultConstructMethod=true;
    }
    if (noDefaultConstructMethod) {
      List<SootMethod> sootMethods=compSootClass.getMethods();
      for (      SootMethod sm : sootMethods) {
        if (sm.getName().equals(""String_Node_Str"")) {
          if (sm.getParameterCount() == 1 && sm.getParameterType(0).equals(INTENT_TYPE)) {
            continue;
          }
          List<Value> args=new ArrayList<Value>();
          for (int i=0; i < sm.getParameterCount(); i++) {
            args.add(NullConstant.v());
          }
          superU=(Unit)Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(thisLocal,sm.makeRef(),args));
          break;
        }
      }
    }
    Unit storeIntentU=Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(intentSootField.makeRef()),intentParameterLocal);
    b.getUnits().add(thisU);
    b.getUnits().add(intentParameterU);
    b.getUnits().add(superU);
    b.getUnits().add(storeIntentU);
    b.getUnits().add(Jimple.v().newReturnVoidStmt());
  }
  return newConstructor;
}",0.8112756808408982
34437,"public SootMethod generateRedirectMethodForBindService(SootClass serviceConnection,SootClass destComp){
  String newSM_name=""String_Node_Str"" + num++;
  List<Type> newSM_parameters=new ArrayList<Type>();
  newSM_parameters.add(serviceConnection.getType());
  newSM_parameters.add(INTENT_TYPE);
  Type newSM_return_type=VoidType.v();
  int modifiers=Modifier.STATIC | Modifier.PUBLIC;
  SootMethod newSM=new SootMethod(newSM_name,newSM_parameters,newSM_return_type,modifiers);
  ipcSC.addMethod(newSM);
  JimpleBody b=Jimple.v().newBody(newSM);
  newSM.setActiveBody(b);
  LocalGenerator lg=new LocalGenerator(b);
  Local originActivityParameterLocal=lg.generateLocal(serviceConnection.getType());
  Unit originActivityParameterU=Jimple.v().newIdentityStmt(originActivityParameterLocal,Jimple.v().newParameterRef(serviceConnection.getType(),0));
  Local intentParameterLocal=lg.generateLocal(INTENT_TYPE);
  Unit intentParameterU=Jimple.v().newIdentityStmt(intentParameterLocal,Jimple.v().newParameterRef(INTENT_TYPE,1));
  Local destCompLocal=lg.generateLocal(destComp.getType());
  Unit newU=(Unit)Jimple.v().newAssignStmt(destCompLocal,Jimple.v().newNewExpr(destComp.getType()));
  List<Type> parameters=new ArrayList<Type>();
  parameters.add(INTENT_TYPE);
  SootMethod method=destComp.getMethod(""String_Node_Str"",parameters,VoidType.v());
  List<Value> args=new ArrayList<Value>();
  args.add(intentParameterLocal);
  Unit initU=(Unit)Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(destCompLocal,method.makeRef(),args));
  List<SootMethod> sms=destComp.getMethods();
  for (  SootMethod sm : sms) {
    System.out.println(sm);
  }
  method=destComp.getMethodByName(ICCDummyMainCreator.DUMMY_MAIN_METHOD);
  InvokeExpr invoke=Jimple.v().newVirtualInvokeExpr(destCompLocal,method.makeRef());
  Unit callU=(Unit)Jimple.v().newInvokeStmt(invoke);
  method=destComp.getMethodByName(""String_Node_Str"");
  Type binderType=method.getReturnType();
  Local ibinderLocal=lg.generateLocal(binderType);
  Unit nullarIntentLocalParamU=(Unit)Jimple.v().newAssignStmt(ibinderLocal,NullConstant.v());
  invoke=Jimple.v().newVirtualInvokeExpr(destCompLocal,method.makeRef());
  Unit destCompCallU=(Unit)Jimple.v().newAssignStmt(ibinderLocal,invoke);
  method=serviceConnection.getMethodByName(""String_Node_Str"");
  changeParameterType(method,IBINDER_TYPE,binderType);
  Local iLocal1=lg.generateLocal(NullType.v());
  Unit defaultValueParamU1=(Unit)Jimple.v().newAssignStmt(iLocal1,NullConstant.v());
  args=new ArrayList<Value>();
  args.add(iLocal1);
  args.add(ibinderLocal);
  invoke=Jimple.v().newVirtualInvokeExpr(originActivityParameterLocal,method.makeRef(),args);
  Unit onActivityResultCall=(Unit)Jimple.v().newInvokeStmt(invoke);
  b.getUnits().add(originActivityParameterU);
  b.getUnits().add(intentParameterU);
  b.getUnits().add(newU);
  b.getUnits().add(initU);
  b.getUnits().add(callU);
  b.getUnits().add(nullarIntentLocalParamU);
  b.getUnits().add(destCompCallU);
  b.getUnits().add(defaultValueParamU1);
  b.getUnits().add(onActivityResultCall);
  b.getUnits().add(Jimple.v().newReturnVoidStmt());
  System.out.println(""String_Node_Str"" + newSM + ""String_Node_Str""+ newSM.retrieveActiveBody());
  return newSM;
}","public SootMethod generateRedirectMethodForBindService(SootClass serviceConnection,SootClass destComp){
  String newSM_name=""String_Node_Str"" + num++;
  List<Type> newSM_parameters=new ArrayList<Type>();
  newSM_parameters.add(serviceConnection.getType());
  newSM_parameters.add(INTENT_TYPE);
  Type newSM_return_type=VoidType.v();
  int modifiers=Modifier.STATIC | Modifier.PUBLIC;
  SootMethod newSM=new SootMethod(newSM_name,newSM_parameters,newSM_return_type,modifiers);
  ipcSC.addMethod(newSM);
  JimpleBody b=Jimple.v().newBody(newSM);
  newSM.setActiveBody(b);
  LocalGenerator lg=new LocalGenerator(b);
  Local originActivityParameterLocal=lg.generateLocal(serviceConnection.getType());
  Unit originActivityParameterU=Jimple.v().newIdentityStmt(originActivityParameterLocal,Jimple.v().newParameterRef(serviceConnection.getType(),0));
  Local intentParameterLocal=lg.generateLocal(INTENT_TYPE);
  Unit intentParameterU=Jimple.v().newIdentityStmt(intentParameterLocal,Jimple.v().newParameterRef(INTENT_TYPE,1));
  Local destCompLocal=lg.generateLocal(destComp.getType());
  Unit newU=(Unit)Jimple.v().newAssignStmt(destCompLocal,Jimple.v().newNewExpr(destComp.getType()));
  List<Type> parameters=new ArrayList<Type>();
  parameters.add(INTENT_TYPE);
  SootMethod method=destComp.getMethod(""String_Node_Str"",parameters,VoidType.v());
  List<Value> args=new ArrayList<Value>();
  args.add(intentParameterLocal);
  Unit initU=(Unit)Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(destCompLocal,method.makeRef(),args));
  List<SootMethod> sms=destComp.getMethods();
  for (  SootMethod sm : sms) {
    System.out.println(sm);
  }
  method=destComp.getMethodByName(ICCDummyMainCreator.DUMMY_MAIN_METHOD);
  InvokeExpr invoke=Jimple.v().newVirtualInvokeExpr(destCompLocal,method.makeRef());
  Unit callU=(Unit)Jimple.v().newInvokeStmt(invoke);
  method=destComp.getMethodByName(""String_Node_Str"");
  Type binderType=method.getReturnType();
  Local ibinderLocal=lg.generateLocal(binderType);
  Unit nullarIntentLocalParamU=(Unit)Jimple.v().newAssignStmt(ibinderLocal,NullConstant.v());
  invoke=Jimple.v().newVirtualInvokeExpr(destCompLocal,method.makeRef());
  Unit destCompCallU=(Unit)Jimple.v().newAssignStmt(ibinderLocal,invoke);
  method=serviceConnection.getMethodByName(""String_Node_Str"");
  changeParameterType(method,IBINDER_TYPE,binderType);
  Local iLocal1=lg.generateLocal(NullType.v());
  Unit defaultValueParamU1=(Unit)Jimple.v().newAssignStmt(iLocal1,NullConstant.v());
  args=new ArrayList<Value>();
  args.add(iLocal1);
  args.add(ibinderLocal);
  PointsToSet pointsToSet=Scene.v().getPointsToAnalysis().reachingObjects(originActivityParameterLocal);
  System.out.println(pointsToSet.possibleClassConstants());
  System.out.println(pointsToSet.possibleStringConstants());
  System.out.println(pointsToSet.possibleTypes());
  SootClass sc=Scene.v().getSootClass(originActivityParameterLocal.getType().toString());
  if (sc.isInterface()) {
    invoke=Jimple.v().newInterfaceInvokeExpr(originActivityParameterLocal,method.makeRef(),args);
  }
 else {
    invoke=Jimple.v().newVirtualInvokeExpr(originActivityParameterLocal,method.makeRef(),args);
  }
  Unit onActivityResultCall=(Unit)Jimple.v().newInvokeStmt(invoke);
  b.getUnits().add(originActivityParameterU);
  b.getUnits().add(intentParameterU);
  b.getUnits().add(newU);
  b.getUnits().add(initU);
  b.getUnits().add(callU);
  b.getUnits().add(nullarIntentLocalParamU);
  b.getUnits().add(destCompCallU);
  b.getUnits().add(defaultValueParamU1);
  b.getUnits().add(onActivityResultCall);
  b.getUnits().add(Jimple.v().newReturnVoidStmt());
  System.out.println(""String_Node_Str"" + newSM + ""String_Node_Str""+ newSM.retrieveActiveBody());
  return newSM;
}",0.9249533649017077
34438,"/** 
 * generate construct method for this component, this construct method should take one Intent as their parameter. the best way is to use a place holder parameter to avoid exist construct method and  use exist construct to build the new <init> method.
 * @param compSootClass
 * @param intentSootField
 * @return
 */
public SootMethod generateInitMethod(SootClass compSootClass,SootField intentSootField){
  String name=""String_Node_Str"";
  List<Type> parameters=new ArrayList<Type>();
  parameters.add(INTENT_TYPE);
  Type returnType=VoidType.v();
  int modifiers=Modifier.PUBLIC;
  SootMethod newConstructor=new SootMethod(name,parameters,returnType,modifiers);
  compSootClass.addMethod(newConstructor);
{
    Body b=Jimple.v().newBody(newConstructor);
    newConstructor.setActiveBody(b);
    LocalGenerator lg=new LocalGenerator(b);
    Local thisLocal=lg.generateLocal(compSootClass.getType());
    Unit thisU=Jimple.v().newIdentityStmt(thisLocal,Jimple.v().newThisRef(compSootClass.getType()));
    Local intentParameterLocal=lg.generateLocal(INTENT_TYPE);
    Unit intentParameterU=Jimple.v().newIdentityStmt(intentParameterLocal,Jimple.v().newParameterRef(INTENT_TYPE,0));
    boolean noDefaultConstructMethod=false;
    Unit superU=null;
    try {
      superU=(Unit)Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(thisLocal,compSootClass.getMethod(name,new ArrayList<Type>(),VoidType.v()).makeRef()));
    }
 catch (    Exception ex) {
      noDefaultConstructMethod=true;
    }
    if (noDefaultConstructMethod) {
      List<SootMethod> sootMethods=compSootClass.getMethods();
      for (      SootMethod sm : sootMethods) {
        if (sm.getName().equals(""String_Node_Str"")) {
          if (sm.getParameterCount() == 1 && sm.getParameterType(0).equals(INTENT_TYPE)) {
            continue;
          }
          List<Value> args=new ArrayList<Value>();
          for (int i=0; i < sm.getParameterCount(); i++) {
            args.add(NullConstant.v());
          }
          superU=(Unit)Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(thisLocal,sm.makeRef(),args));
          break;
        }
      }
    }
    Unit storeIntentU=Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(intentSootField.makeRef()),intentParameterLocal);
    b.getUnits().add(thisU);
    b.getUnits().add(intentParameterU);
    b.getUnits().add(superU);
    b.getUnits().add(storeIntentU);
    b.getUnits().add(Jimple.v().newReturnVoidStmt());
  }
  return newConstructor;
}","/** 
 * generate construct method for this component, this construct method should take one Intent as their parameter. the best way is to use a place holder parameter to avoid exist construct method and  use exist construct to build the new <init> method.
 * @param compSootClass
 * @param intentSootField
 * @return
 */
public SootMethod generateInitMethod(SootClass compSootClass,SootField intentSootField){
  String name=""String_Node_Str"";
  List<Type> parameters=new ArrayList<Type>();
  parameters.add(INTENT_TYPE);
  Type returnType=VoidType.v();
  int modifiers=Modifier.PUBLIC;
  SootMethod newConstructor=new SootMethod(name,parameters,returnType,modifiers);
  compSootClass.addMethod(newConstructor);
{
    Body b=Jimple.v().newBody(newConstructor);
    newConstructor.setActiveBody(b);
    LocalGenerator lg=new LocalGenerator(b);
    Local thisLocal=lg.generateLocal(compSootClass.getType());
    Unit thisU=Jimple.v().newIdentityStmt(thisLocal,Jimple.v().newThisRef(compSootClass.getType()));
    Local intentParameterLocal=lg.generateLocal(INTENT_TYPE);
    Unit intentParameterU=Jimple.v().newIdentityStmt(intentParameterLocal,Jimple.v().newParameterRef(INTENT_TYPE,0));
    boolean noDefaultConstructMethod=false;
    Unit superU=null;
    try {
      superU=(Unit)Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(thisLocal,compSootClass.getMethod(name,new ArrayList<Type>(),VoidType.v()).makeRef()));
    }
 catch (    Exception ex) {
      noDefaultConstructMethod=true;
    }
    if (noDefaultConstructMethod) {
      List<SootMethod> sootMethods=compSootClass.getMethods();
      for (      SootMethod sm : sootMethods) {
        if (sm.getName().equals(""String_Node_Str"")) {
          if (sm.getParameterCount() == 1 && sm.getParameterType(0).equals(INTENT_TYPE)) {
            List<Value> args=new ArrayList<Value>();
            args.add(intentParameterLocal);
            superU=(Unit)Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(thisLocal,sm.makeRef(),args));
            continue;
          }
          List<Value> args=new ArrayList<Value>();
          for (int i=0; i < sm.getParameterCount(); i++) {
            args.add(NullConstant.v());
          }
          superU=(Unit)Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(thisLocal,sm.makeRef(),args));
          break;
        }
      }
    }
    Unit storeIntentU=Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(intentSootField.makeRef()),intentParameterLocal);
    b.getUnits().add(thisU);
    b.getUnits().add(intentParameterU);
    b.getUnits().add(superU);
    b.getUnits().add(storeIntentU);
    b.getUnits().add(Jimple.v().newReturnVoidStmt());
  }
  return newConstructor;
}",0.9595063632857692
34439,"public Map<String,List<ICCLink>> parse(){
  Map<String,List<ICCLink>> pkg2links=new HashMap<String,List<ICCLink>>();
  try {
    BufferedReader br=new BufferedReader(new FileReader(configFilePath));
    String line=null;
    while ((line=br.readLine()) != null) {
      if (line.isEmpty() || line.startsWith(""String_Node_Str"")) {
        continue;
      }
      int endPos=line.indexOf(':');
      String pkg=line.substring(0,endPos);
      int startPos=line.indexOf('<');
      endPos=line.lastIndexOf('>');
      String fromSMString=line.substring(startPos,endPos + 1);
      startPos=line.indexOf('[');
      endPos=line.indexOf(']');
      String lineNumberAndExitKind=line.substring(startPos + 1,endPos);
      String lineNumber=lineNumberAndExitKind.split(""String_Node_Str"")[0];
      String exitKind=lineNumberAndExitKind.split(""String_Node_Str"")[1];
      startPos=endPos + 1;
      endPos=line.indexOf('{');
      String destinationC=line.substring(startPos,endPos).trim();
      startPos=endPos + 1;
      endPos=line.lastIndexOf('}');
      String numbers=line.substring(startPos,endPos);
      List<Integer> instructions=new ArrayList<Integer>();
      String[] ss=numbers.split(""String_Node_Str"");
      for (      String s : ss) {
        Integer i=Integer.parseInt(s.trim());
        instructions.add(i);
      }
      ICCLink link=new ICCLink(fromSMString,Integer.parseInt(lineNumber),exitKind,destinationC,instructions);
      put(pkg2links,pkg,link);
    }
    br.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return pkg2links;
}","public Map<String,List<ICCLink>> parse(){
  Map<String,List<ICCLink>> pkg2links=new HashMap<String,List<ICCLink>>();
  try {
    BufferedReader br=new BufferedReader(new FileReader(configFilePath));
    String line=null;
    while ((line=br.readLine()) != null) {
      if (line.isEmpty() || line.startsWith(""String_Node_Str"")) {
        continue;
      }
      int endPos=line.indexOf(':');
      String pkg=line.substring(0,endPos);
      int startPos=line.indexOf('<');
      endPos=line.lastIndexOf('>');
      String fromSMString=line.substring(startPos,endPos + 1);
      startPos=line.indexOf('[');
      endPos=line.indexOf(']');
      String lineNumberAndExitKind=line.substring(startPos + 1,endPos);
      String lineNumber=lineNumberAndExitKind.split(""String_Node_Str"")[0];
      String exitKind=lineNumberAndExitKind.split(""String_Node_Str"")[1];
      startPos=endPos + 1;
      endPos=line.indexOf('{');
      String destinationC=line.substring(startPos,endPos).trim();
      startPos=endPos + 1;
      endPos=line.lastIndexOf('}');
      String numbers=line.substring(startPos,endPos);
      List<Integer> instructions=new ArrayList<Integer>();
      String[] ss=numbers.split(""String_Node_Str"");
      for (      String s : ss) {
        Integer i=Integer.parseInt(s.trim());
        instructions.add(i);
      }
      ICCLink link=new ICCLink(fromSMString,Integer.parseInt(lineNumber),exitKind,destinationC,instructions);
      if (!UnreasonableLinksRemover.isUnreasonable(link)) {
        put(pkg2links,pkg,link);
      }
    }
    br.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return pkg2links;
}",0.9782202862476664
34440,"public List<ICCLink> fetchICCLinks(String[] appNames){
  String params=""String_Node_Str"";
  String[] paramValues=new String[appNames.length * 2];
  paramValues[0]=paramValues[appNames.length]=appNames[0];
  for (int i=1; i < appNames.length; i++) {
    params+=""String_Node_Str"";
    paramValues[i]=paramValues[appNames.length + i]=appNames[i];
  }
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + params + ""String_Node_Str""+ params+ ""String_Node_Str"";
  sql=sql + ""String_Node_Str"" + Constants.INTENT_MATCH_LEVEL+ ""String_Node_Str"";
  final String[] names=appNames;
  DBAdapter adapter=new DBAdapter(){
    @Override protected Object processResultSet(    ResultSet rs){
      List<ICCLink> links=new ArrayList<ICCLink>();
      try {
        while (rs.next()) {
          String fromSMString=rs.getString(1);
          int instruction=rs.getInt(2);
          String exitKind=rs.getString(3);
          String destinationC=rs.getString(5);
          List<Integer> instructions=fetchInstructions(fromSMString,names);
          ICCLink link=new ICCLink(fromSMString,instruction,exitKind,destinationC,instructions);
          links.add(link);
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
      return links;
    }
  }
;
  List<ICCLink> links=null;
  try {
    links=(List<ICCLink>)adapter.executeQuery(sql,paramValues,Constants.DB_NAME);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  List<ICCLink> providerLinks=fetchProviderLinks(appNames);
  links.addAll(providerLinks);
  return links;
}","public List<ICCLink> fetchICCLinks(String[] appNames){
  String params=""String_Node_Str"";
  String[] paramValues=new String[appNames.length * 2];
  paramValues[0]=paramValues[appNames.length]=appNames[0];
  for (int i=1; i < appNames.length; i++) {
    params+=""String_Node_Str"";
    paramValues[i]=paramValues[appNames.length + i]=appNames[i];
  }
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + params + ""String_Node_Str""+ params+ ""String_Node_Str"";
  sql=sql + ""String_Node_Str"" + Constants.INTENT_MATCH_LEVEL+ ""String_Node_Str"";
  final String[] names=appNames;
  DBAdapter adapter=new DBAdapter(){
    @Override protected Object processResultSet(    ResultSet rs){
      List<ICCLink> links=new ArrayList<ICCLink>();
      try {
        while (rs.next()) {
          String fromSMString=rs.getString(1);
          int instruction=rs.getInt(2);
          String exitKind=rs.getString(3);
          String destinationC=rs.getString(5);
          List<Integer> instructions=fetchInstructions(fromSMString,names);
          ICCLink link=new ICCLink(fromSMString,instruction,exitKind,destinationC,instructions);
          if (!UnreasonableLinksRemover.isUnreasonable(link)) {
            links.add(link);
          }
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
      return links;
    }
  }
;
  List<ICCLink> links=null;
  try {
    links=(List<ICCLink>)adapter.executeQuery(sql,paramValues,Constants.DB_NAME);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  List<ICCLink> providerLinks=fetchProviderLinks(appNames);
  links.addAll(providerLinks);
  return links;
}",0.966438781852082
34441,"public List<ICCLink> fetchProviderLinks(String[] appNames){
  String params=""String_Node_Str"";
  String[] paramValues=new String[appNames.length * 2];
  paramValues[0]=paramValues[appNames.length]=appNames[0];
  for (int i=1; i < appNames.length; i++) {
    params+=""String_Node_Str"";
    paramValues[i]=paramValues[appNames.length + i]=appNames[i];
  }
  String sql=""String_Node_Str"" + ""String_Node_Str"" + params + ""String_Node_Str""+ params+ ""String_Node_Str"";
  final String[] names=appNames;
  DBAdapter adapter=new DBAdapter(){
    @Override protected Object processResultSet(    ResultSet rs){
      List<ICCLink> links=new ArrayList<ICCLink>();
      try {
        while (rs.next()) {
          String fromSMString=rs.getString(1);
          int instruction=rs.getInt(2);
          String exitKind=rs.getString(3);
          String destinationC=rs.getString(4);
          List<Integer> instructions=fetchInstructions(fromSMString,names);
          ICCLink link=new ICCLink(fromSMString,instruction,exitKind,destinationC,instructions);
          links.add(link);
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
      return links;
    }
  }
;
  List<ICCLink> links=null;
  try {
    System.out.println(sql);
    links=(List<ICCLink>)adapter.executeQuery(sql,paramValues,Constants.DB_NAME);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return links;
}","public List<ICCLink> fetchProviderLinks(String[] appNames){
  String params=""String_Node_Str"";
  String[] paramValues=new String[appNames.length * 2];
  paramValues[0]=paramValues[appNames.length]=appNames[0];
  for (int i=1; i < appNames.length; i++) {
    params+=""String_Node_Str"";
    paramValues[i]=paramValues[appNames.length + i]=appNames[i];
  }
  String sql=""String_Node_Str"" + ""String_Node_Str"" + params + ""String_Node_Str""+ params+ ""String_Node_Str"";
  final String[] names=appNames;
  DBAdapter adapter=new DBAdapter(){
    @Override protected Object processResultSet(    ResultSet rs){
      List<ICCLink> links=new ArrayList<ICCLink>();
      try {
        while (rs.next()) {
          String fromSMString=rs.getString(1);
          int instruction=rs.getInt(2);
          String exitKind=rs.getString(3);
          String destinationC=rs.getString(4);
          List<Integer> instructions=fetchInstructions(fromSMString,names);
          ICCLink link=new ICCLink(fromSMString,instruction,exitKind,destinationC,instructions);
          if (!UnreasonableLinksRemover.isUnreasonable(link)) {
            links.add(link);
          }
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
      return links;
    }
  }
;
  List<ICCLink> links=null;
  try {
    System.out.println(sql);
    links=(List<ICCLink>)adapter.executeQuery(sql,paramValues,Constants.DB_NAME);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return links;
}",0.9620951068228808
34442,"private void collectStartTime(MirrorAnimator animator,List<Pair<MirrorObjectAnimator,Long>> output,int startTime){
  if (animator instanceof MirrorAnimatorSet) {
    MirrorAnimatorSet set=(MirrorAnimatorSet)animator;
    int accuTimeBefore=0;
    for (    MirrorAnimator c : set.getChildAnimations()) {
      if (set.getOrdering() == MirrorAnimatorSet.Ordering.Together) {
        collectStartTime(c,output,startTime);
      }
 else {
        collectStartTime(c,output,startTime + accuTimeBefore);
      }
      accuTimeBefore+=c.getStartDelay() + c.getDuration();
    }
  }
 else   if (animator instanceof MirrorObjectAnimator) {
    MirrorObjectAnimator o=(MirrorObjectAnimator)animator;
    output.add(new Pair<>(o,startTime + o.getStartDelay()));
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + animator);
  }
}","private void collectStartTime(MirrorAnimator animator,List<Pair<MirrorObjectAnimator,Long>> output,long startTime){
  if (animator instanceof MirrorAnimatorSet) {
    MirrorAnimatorSet set=(MirrorAnimatorSet)animator;
    long accuTimeBeforeMe=set.getStartDelay();
    for (    MirrorAnimator c : set.getChildAnimations()) {
      collectStartTime(c,output,startTime + accuTimeBeforeMe);
      if (set.getOrdering() == MirrorAnimatorSet.Ordering.Sequentially) {
        accuTimeBeforeMe+=c.getStartDelay() + c.getDuration();
      }
    }
  }
 else   if (animator instanceof MirrorObjectAnimator) {
    MirrorObjectAnimator o=(MirrorObjectAnimator)animator;
    output.add(new Pair<>(o,startTime + o.getStartDelay()));
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + animator);
  }
}",0.8229548229548229
34443,"@Override public long getDuration(){
  return mSet.getDuration();
}","@Override public long getDuration(){
  if (mOrdering == Ordering.Together) {
    return maxDuration(mAnimators);
  }
 else {
    return consecutiveDuration(mAnimators);
  }
}",0.4979253112033195
34444,"public Environment setUp(AbstractBuild build,Launcher launcher,BuildListener listener) throws IOException, InterruptedException {
  GolangInstallation installation=getGoInstallation();
  if (installation != null) {
    EnvVars env=build.getEnvironment(listener);
    env.overrideAll(build.getBuildVariables());
    installation=installation.forNode(Computer.currentComputer().getNode(),listener).forEnvironment(env);
  }
  final GolangInstallation install=installation;
  return new Environment(){
    @Override public void buildEnvVars(    Map<String,String> env){
      if (install != null) {
        EnvVars envVars=new EnvVars();
        install.buildEnvVars(envVars);
        env.putAll(envVars);
      }
    }
  }
;
}","@SuppressFBWarnings(""String_Node_Str"") public Environment setUp(AbstractBuild build,Launcher launcher,BuildListener listener) throws IOException, InterruptedException {
  GolangInstallation installation=getGoInstallation();
  if (installation != null) {
    EnvVars env=build.getEnvironment(listener);
    env.overrideAll(build.getBuildVariables());
    installation=installation.forNode(Computer.currentComputer().getNode(),listener).forEnvironment(env);
  }
  final GolangInstallation install=installation;
  return new Environment(){
    @Override public void buildEnvVars(    Map<String,String> env){
      if (install != null) {
        EnvVars envVars=new EnvVars();
        install.buildEnvVars(envVars);
        env.putAll(envVars);
      }
    }
  }
;
}",0.9737373737373738
34445,"public GolangInstallation[] getInstallations(){
  return installations;
}","@SuppressFBWarnings(""String_Node_Str"") public GolangInstallation[] getInstallations(){
  return installations;
}",0.7891891891891892
34446,"@Override public void setInstallations(GolangInstallation... installations){
  Jenkins.getInstance().getDescriptorByType(GolangBuildWrapper.DescriptorImpl.class).setInstallations(installations);
}","@Override public void setInstallations(GolangInstallation... installations){
  Jenkins.getActiveInstance().getDescriptorByType(GolangBuildWrapper.DescriptorImpl.class).setInstallations(installations);
}",0.984924623115578
34447,"@Override public GolangInstallation[] getInstallations(){
  return Jenkins.getInstance().getDescriptorByType(GolangBuildWrapper.DescriptorImpl.class).getInstallations();
}","@Override public GolangInstallation[] getInstallations(){
  return Jenkins.getActiveInstance().getDescriptorByType(GolangBuildWrapper.DescriptorImpl.class).getInstallations();
}",0.9827586206896552
34448,"private Installable getInstallable(Node node) throws IOException, InterruptedException {
  GolangRelease release=getConfiguredRelease();
  if (release == null) {
    return null;
  }
  String[] properties=node.getChannel().call(new GetSystemProperties(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  return getInstallCandidate(release,properties[0],properties[1],properties[2]);
}","@SuppressFBWarnings(""String_Node_Str"") private Installable getInstallable(Node node) throws IOException, InterruptedException {
  GolangRelease release=getConfiguredRelease();
  if (release == null) {
    return null;
  }
  String[] properties=node.getChannel().call(new GetSystemProperties(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  return getInstallCandidate(release,properties[0],properties[1],properties[2]);
}",0.9524969549330086
34449,"public int compareTo(GolangInstallable o){
  if (osxversion != null && o.osxversion != null) {
    return new VersionNumber(o.osxversion).compareTo(new VersionNumber(osxversion));
  }
  return os.compareTo(o.os);
}","@SuppressFBWarnings(""String_Node_Str"") public int compareTo(GolangInstallable o){
  if (osxversion != null && o.osxversion != null) {
    return new VersionNumber(o.osxversion).compareTo(new VersionNumber(osxversion));
  }
  return os.compareTo(o.os);
}",0.9164882226980728
34450,"public List<GolangRelease> getInstallableReleases(){
  return GolangReleaseList.all().get(GolangReleaseList.class).toList();
}","@SuppressFBWarnings(""String_Node_Str"") public List<GolangRelease> getInstallableReleases(){
  return GolangReleaseList.all().get(GolangReleaseList.class).toList();
}",0.865979381443299
34451,"public static <A,B>Class<A> resolveType(Model<B> model,Path path){
  PropertyDescription propertyDescription=resolveProperty(model,path);
  if (propertyDescription != null) {
    return (Class<A>)propertyDescription.getClazz();
  }
  return null;
}","public static <A,B>Class<A> resolveType(Model<B> model,Path path){
  if (path.size() == 0) {
    return (Class<A>)model.getLeafType();
  }
  PropertyDescription propertyDescription=resolveProperty(model,path);
  if (propertyDescription != null) {
    return (Class<A>)propertyDescription.getClazz();
  }
  return null;
}",0.8732394366197183
34452,"@Override public <A,B extends Editor>boolean visit(Context<B> context){
  Editor editor=context.getEditor();
  ModelDriver<?> driver=context.getDriver();
  MessageHelper messageHelper=driver.getMessageHelper();
  if (messageHelper != null && editor instanceof EditorLabel) {
    EditorLabel editorLabel=(EditorLabel)editor;
    Model<?> model=driver.getModel();
    Class<?> propertyType=model.getLeafType();
    Model<?> propertyModel=ModelUtils.resolveModel(model,context.getPath());
    if (propertyModel != null) {
      propertyType=propertyModel.getLeafType();
    }
    String defaulText=editorLabel.getText();
    String label=defaulText;
    Path path=context.getPath();
    String labelKey=editorLabel.getLabelKey();
    String firstKey=null;
    if (label == null) {
      for (      String suffix : editorLabel.getSuffix()) {
        String key=null;
        if (labelKey == null) {
          key=messageHelper.getMessageKey(path,suffix);
          label=messageHelper.getMessage(propertyType,path,suffix);
        }
 else {
          key=labelKey + suffix;
          label=messageHelper.findMessage(propertyType,key);
        }
        if (firstKey == null) {
          firstKey=key;
        }
        if (label != null) {
          break;
        }
      }
    }
    if (label == null && editorLabel.isLabelMandatory()) {
      label=messageHelper.createDefaultMessage(firstKey);
    }
    if (label != null) {
      editorLabel.setText(label);
    }
  }
  return true;
}","@Override public <A,B extends Editor>boolean visit(Context<B> context){
  Editor editor=context.getEditor();
  ModelDriver<?> driver=context.getDriver();
  MessageHelper messageHelper=driver.getMessageHelper();
  if (messageHelper != null && editor instanceof EditorLabel) {
    EditorLabel editorLabel=(EditorLabel)editor;
    Class<?> parentPropertyType=null;
    Path path=context.getPath();
    Path parentPath=path.subPath(0,path.size() - 1);
    Model<?> model=ModelUtils.resolveModel(driver.getModel(),parentPath);
    if (model instanceof ModelCollection) {
      parentPropertyType=model.getLeafType();
    }
 else {
      parentPropertyType=ModelUtils.resolveType(driver.getModel(),parentPath);
    }
    String defaulText=editorLabel.getText();
    String label=defaulText;
    String labelKey=editorLabel.getLabelKey();
    String firstKey=null;
    if (label == null) {
      for (      String suffix : editorLabel.getSuffix()) {
        String key=null;
        if (labelKey == null) {
          key=messageHelper.getMessageKey(path,suffix);
          label=messageHelper.getMessage(parentPropertyType,path,suffix);
        }
 else {
          key=labelKey + suffix;
          label=messageHelper.findMessage(parentPropertyType,key);
        }
        if (firstKey == null) {
          firstKey=key;
        }
        if (label != null) {
          break;
        }
      }
    }
    if (label == null && editorLabel.isLabelMandatory()) {
      label=messageHelper.createDefaultMessage(firstKey);
    }
    if (label != null) {
      editorLabel.setText(label);
    }
  }
  return true;
}",0.780045351473923
34453,"@Override public <A,B extends Editor>boolean visit(Context<B> context){
  Editor editor=context.getEditor();
  if (editor instanceof HasPlaceholder) {
    ModelDriver<?> driver=context.getDriver();
    MessageHelper messageHelper=driver.getMessageHelper();
    Model<?> model=driver.getModel();
    Class<?> propertyType=ModelUtils.resolveType(model,context.getPath());
    HasPlaceholder hasPlaceholder=(HasPlaceholder)editor;
    String defaulText=hasPlaceholder.getPlaceholder();
    Path path=context.getPath();
    if (messageHelper != null && defaulText == null && path != null) {
      String label=messageHelper.getMessage(propertyType,path,HasPlaceholder.PLACEHOLDER_SUFFIX);
      if (label != null) {
        hasPlaceholder.setPlaceholder(label);
      }
    }
  }
  return true;
}","@Override public <A,B extends Editor>boolean visit(Context<B> context){
  Editor editor=context.getEditor();
  if (editor instanceof HasPlaceholder) {
    ModelDriver<?> driver=context.getDriver();
    MessageHelper messageHelper=driver.getMessageHelper();
    Class<?> parentPropertyType=null;
    Path path=context.getPath();
    Path parentPath=path.subPath(0,path.size() - 1);
    Model<?> model=ModelUtils.resolveModel(driver.getModel(),parentPath);
    if (model instanceof ModelCollection) {
      parentPropertyType=model.getLeafType();
    }
 else {
      parentPropertyType=ModelUtils.resolveType(driver.getModel(),parentPath);
    }
    HasPlaceholder hasPlaceholder=(HasPlaceholder)editor;
    String defaulText=hasPlaceholder.getPlaceholder();
    if (messageHelper != null && defaulText == null && path != null) {
      String label=messageHelper.getMessage(parentPropertyType,path,HasPlaceholder.PLACEHOLDER_SUFFIX);
      if (label != null) {
        hasPlaceholder.setPlaceholder(label);
      }
    }
  }
  return true;
}",0.6280720917531404
34454,"@Override public <A,B extends Editor>boolean visit(Context<B> context){
  Editor editor=context.getEditor();
  ModelDriver<?> driver=context.getDriver();
  MessageHelper messageHelper=driver.getMessageHelper();
  if (messageHelper != null && editor instanceof EditorLeaf) {
    Path path=context.getPath();
    Model<?> model=driver.getModel();
    Class<?> propertyType=model.getLeafType();
    Model<?> propertyModel=ModelUtils.resolveModel(model,context.getPath());
    if (propertyModel != null) {
      propertyType=propertyModel.getLeafType();
    }
    String label=messageHelper.getMessage(propertyType,path,EditorLabel.TOOLTIP_SUFFIX);
    if (label != null && editor instanceof EditorInput) {
      EditorFactoryManager.get().createTooltip((IsWidget)editor,label);
    }
  }
  return true;
}","@Override public <A,B extends Editor>boolean visit(Context<B> context){
  Editor editor=context.getEditor();
  ModelDriver<?> driver=context.getDriver();
  MessageHelper messageHelper=driver.getMessageHelper();
  if (messageHelper != null && editor instanceof EditorLeaf) {
    Class<?> parentPropertyType=null;
    Path path=context.getPath();
    Path parentPath=path.subPath(0,path.size() - 1);
    Model<?> model=ModelUtils.resolveModel(driver.getModel(),parentPath);
    if (model instanceof ModelCollection) {
      parentPropertyType=model.getLeafType();
    }
 else {
      parentPropertyType=ModelUtils.resolveType(driver.getModel(),parentPath);
    }
    String label=messageHelper.getMessage(parentPropertyType,path,EditorLabel.TOOLTIP_SUFFIX);
    if (label != null && editor instanceof EditorInput) {
      EditorFactoryManager.get().createTooltip((IsWidget)editor,label);
    }
  }
  return true;
}",0.6654991243432574
34455,"@Override public boolean apply(Context<?> input){
  return context.equals(input.getParentContext());
}","@Override public boolean apply(Context<?> context){
  return context.getEditor() == editor;
}",0.7487179487179487
34456,"public boolean removeContext(final Context<?> context){
  if (contexts.remove(context)) {
    Iterable<Context<?>> children=Iterables.filter(contexts,new Predicate<Context<?>>(){
      @Override public boolean apply(      Context<?> input){
        return context.equals(input.getParentContext());
      }
    }
);
    for (    Context<?> childContext : children) {
      removeContext(childContext);
    }
    return true;
  }
  return false;
}","public boolean removeContext(final Context<?> context){
  if (contexts.remove(context)) {
    List<Context<?>> children=Lists.newArrayList();
    for (    Context<?> child : contexts) {
      if (context.equals(child.getParentContext())) {
        children.add(context);
      }
    }
    for (    Context<?> childContext : children) {
      removeContext(childContext);
    }
    return true;
  }
  return false;
}",0.3744186046511628
34457,"@Override public boolean apply(Context<?> input){
  return context.equals(input.getParentContext());
}","@Override public boolean apply(Context<?> context){
  return context.getEditor() == editor;
}",0.7487179487179487
34458,"public boolean removeContext(final Context<?> context){
  if (contexts.remove(context)) {
    Iterable<Context<?>> children=Iterables.filter(contexts,new Predicate<Context<?>>(){
      @Override public boolean apply(      Context<?> input){
        return context.equals(input.getParentContext());
      }
    }
);
    for (    Context<?> childContext : children) {
      removeContext(childContext);
    }
    return true;
  }
  return false;
}","public boolean removeContext(final Context<?> context){
  if (contexts.remove(context)) {
    List<Context<?>> children=Lists.newArrayList();
    for (    Context<?> child : contexts) {
      if (context.equals(child.getParentContext())) {
        children.add(context);
      }
    }
    for (    Context<?> childContext : children) {
      removeContext(childContext);
    }
    return true;
  }
  return false;
}",0.3744186046511628
34459,"@Override public boolean equals(Object obj){
  if (obj instanceof Path) {
    Path other=(Path)obj;
    return Objects.equal(elements,other.elements);
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (obj instanceof Path) {
    Path other=(Path)obj;
    return Objects.equal(elements,other.elements);
  }
  return obj == null && isRoot();
}",0.9337016574585636
34460,"@Override public <A,B extends Editor>boolean visit(Context<B> context){
  B editor=context.getEditor();
  if (editor instanceof EditorError) {
    Class<?> propertyType=ModelUtils.resolveType(model,context.getPath());
    Path path=context.getPath();
    EditorError editorError=(EditorError)editor;
    editorError.clearErrors();
    List<Error> toDisplay=Lists.newArrayList();
    for (    Error error : errors) {
      if (error.getPath() != null && error.getPath().equals(path)) {
        String messageKey=error.getMessageKey();
        messageKey=fixMessageKey(messageKey);
        String message=messageHelper.findMessage(propertyType,messageKey);
        if (error.getParameters() != null) {
          message=messageHelper.replaceParams(message,error.getParameters());
        }
        SimpleError errorToDisplay=new SimpleError(editorError,message,error.getValue(),error.getParameters());
        toDisplay.add(errorToDisplay);
        error.consume();
      }
    }
    if (!toDisplay.isEmpty() && editorError instanceof HasDrawable) {
      editorError.displayErrors(toDisplay);
      ((HasDrawable)editorError).redraw();
    }
  }
  return true;
}","@Override public <A,B extends Editor>boolean visit(Context<B> context){
  B editor=context.getEditor();
  if (editor instanceof EditorError) {
    Class<?> propertyType=ModelUtils.resolveType(model,context.getPath());
    Path path=context.getPath();
    EditorError editorError=(EditorError)editor;
    editorError.clearErrors();
    List<Error> toDisplay=Lists.newArrayList();
    for (    Error error : errors) {
      if (path.equals(error.getPath())) {
        String messageKey=error.getMessageKey();
        messageKey=fixMessageKey(messageKey);
        String message=messageHelper.findMessage(propertyType,messageKey);
        if (error.getParameters() != null) {
          message=messageHelper.replaceParams(message,error.getParameters());
        }
        if (message == null) {
          message=messageKey;
        }
        SimpleError errorToDisplay=new SimpleError(editorError,message,error.getValue(),error.getParameters());
        toDisplay.add(errorToDisplay);
        error.consume();
      }
    }
    if (!toDisplay.isEmpty() && editorError instanceof HasDrawable) {
      editorError.displayErrors(toDisplay);
      ((HasDrawable)editorError).redraw();
    }
  }
  return true;
}",0.3863060016906171
34461,"@Override public void clearErrors(){
  getElement().removeAllChildren();
}","@Override public void clearErrors(){
  this.errors.clear();
  getElement().removeAllChildren();
}",0.8654970760233918
34462,"@Override public void displayErrors(Iterable<Error> errors){
  clearErrors();
  for (  Error error : errors) {
    LIElement errorElement=Document.get().createLIElement();
    errorElement.setInnerText(error.getMessageKey());
    this.getElement().appendChild(errorElement);
  }
}","@Override public void displayErrors(Iterable<Error> errors){
  this.errors.clear();
  Iterables.addAll(this.errors,errors);
}",0.4493827160493827
34463,"@Override public void displayErrors(Iterable<Error> errors){
  if (error == null) {
    error=new ErrorGroup();
  }
  error.displayErrors(errors);
  StyleUtils.toggleStyle(this,STYLE_ERROR,!Boolean.TRUE.equals(readonly) && error != null && error.hasError());
}","@Override public void displayErrors(Iterable<Error> errors){
  if (error == null) {
    error=new ErrorGroup();
  }
  error.displayErrors(errors);
  error.redraw();
  StyleUtils.toggleStyle(this,STYLE_ERROR,!Boolean.TRUE.equals(readonly) && error != null && error.hasError());
}",0.966542750929368
34464,"public void setText(String text){
  append(new Text(text));
}","public void setText(String text){
  getElement().appendChild(Document.get().createTextNode(HTMLUtils.unescapeHTML(text)));
}",0.6378378378378379
34465,"@Override public void edit(String value){
  getElement().removeAllChildren();
  if (value != null) {
    AnchorElement anchor=Document.get().createAnchorElement();
    Icon icon=new Icon();
    icon.setType(IconFont.ICON_MAIL);
    anchor.setHref(""String_Node_Str"" + value);
    anchor.appendChild(icon.getElement());
    anchor.appendChild(new Text(value).getElement());
    getElement().appendChild(anchor);
  }
}","@Override public void edit(String value){
  getElement().removeAllChildren();
  if (value != null) {
    AnchorElement anchor=Document.get().createAnchorElement();
    Icon icon=new Icon();
    icon.setType(IconFont.ICON_MAIL);
    anchor.setHref(""String_Node_Str"" + value);
    anchor.appendChild(icon.getElement());
    anchor.appendChild(Document.get().createTextNode(value));
    getElement().appendChild(anchor);
  }
}",0.9164677804295944
34466,"public Text(Text source){
  this();
  textElement.setData(source.text);
}","public Text(Text source){
  this();
  span.setInnerText(source.text);
}",0.8333333333333334
34467,"@Override public void setText(String text){
  this.text=HTMLUtils.unescapeHTML(text);
  textElement.setData(this.text == null ? ""String_Node_Str"" : this.text);
}","@Override public void setText(String text){
  this.text=HTMLUtils.unescapeHTML(text);
  span.setInnerText(this.text == null ? ""String_Node_Str"" : this.text);
}",0.925
34468,"public void onMouseUp(Event event){
  if (this.dragging) {
    this.dragging=false;
    Event.releaseCapture(InputSlider.this.getElement());
    handleWidget.moveHandleToPosition(getRelativeX(event));
  }
}","public void onMouseUp(Event event){
  if (this.dragging) {
    this.dragging=false;
    Event.releaseCapture(InputSlider.this.getElement());
  }
}",0.8295454545454546
34469,"@Override protected void endConstruct(){
  content.add(codeInput);
  content.add(codeOutput);
  setTabIndex(0);
  codeInput.asWidget().setVisible(false);
  compositeFocus=CompositeFocusHelper.createFocusHelper(codeInput,codeInput);
  addFocusHandler(this);
  compositeFocus.addBlurHandler(this);
  StyleUtils.removeStyle(this,STYLE_CONTROL);
  StyleUtils.addStyle(codeInput.asWidget(),STYLE_CONTROL);
  super.endConstruct();
}","@Override protected void endConstruct(){
  content.add(codeOutput);
  setTabIndex(0);
  compositeFocus=CompositeFocusHelper.createFocusHelper(codeInput,codeInput);
  addFocusHandler(this);
  codeOutput.asWidget().addDomHandler(this,ClickEvent.getType());
  compositeFocus.addBlurHandler(this);
  StyleUtils.removeStyle(this,STYLE_CONTROL);
  StyleUtils.addStyle(codeInput.asWidget(),STYLE_CONTROL);
  super.endConstruct();
}",0.6705882352941176
34470,"@Override public void onFocus(FocusEvent event){
  codeInput.asWidget().getElement().getStyle().setHeight(codeOutput.asWidget().getElement().getOffsetHeight(),Unit.PX);
  codeInput.asWidget().setVisible(true);
  codeOutput.asWidget().setVisible(false);
  codeInput.setFocus(true);
}","@Override public void onFocus(FocusEvent event){
  showInput();
}",0.3573487031700288
34471,"@Override public void onBlur(BlurEvent event){
  codeInput.asWidget().setVisible(false);
  codeOutput.asWidget().setVisible(true);
}","@Override public void onBlur(BlurEvent event){
  hideInput();
}",0.6256410256410256
34472,"@Override public boolean isWordPart(char c){
  if (c == '/' || c == '>' || c == ':') {
    return true;
  }
  return CharMatcher.JAVA_LETTER_OR_DIGIT.matches(c);
}","@Override public boolean isWordPart(char c){
  if (c == '/' || c == '>' || c == ':' || c == '.') {
    return true;
  }
  return CharMatcher.JAVA_LETTER_OR_DIGIT.matches(c);
}",0.9644970414201184
34473,"@Override public void annotate(GLSLFunctionCallExpression expr,AnnotationHolder holder){
  if (!expr.isConstructor())   return;
  final GLSLType constructorType=expr.getType();
  final GLSLType[] parameters=expr.getParameterTypes();
  if (!(constructorType instanceof GLSLArrayType)) {
    final GLSLFunctionType[] constructors=constructorType.getConstructors();
    if (constructors.length == 0)     return;
    boolean found=false;
    for (    GLSLFunctionType constructor : constructors) {
      if (constructor.getParameterCompatibilityLevel(parameters) != GLSLTypeCompatibilityLevel.INCOMPATIBLE) {
        found=true;
        break;
      }
    }
    if (!found) {
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"").append(constructorType.getTypename()).append('(');
      if (parameters.length != 0) {
        final String PARAMETER_SEPARATOR=""String_Node_Str"";
        for (        GLSLType parameter : parameters) {
          sb.append(parameter.getTypename()).append(PARAMETER_SEPARATOR);
        }
        sb.setLength(sb.length() - PARAMETER_SEPARATOR.length());
      }
      sb.append(""String_Node_Str"");
      final String baseMessage=sb.toString();
      sb.setLength(0);
      sb.append(""String_Node_Str"");
      sb.append(baseMessage);
      sb.append(""String_Node_Str"");
      if (constructorType instanceof GLSLVectorType || constructorType instanceof GLSLMatrixType) {
        sb.append(GLSLVectorType.countVectorOrMatrixConstructorElements(parameters));
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
      for (      GLSLFunctionType constructor : constructors) {
        sb.append(constructor.getTypename()).append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
      holder.createAnnotation(HighlightSeverity.ERROR,expr.getTextRange(),baseMessage,sb.toString());
    }
  }
}","@Override public void annotate(GLSLFunctionCallExpression expr,AnnotationHolder holder){
  if (!expr.isConstructor())   return;
  final GLSLType constructorType=expr.getType();
  if (constructorType instanceof GLSLArrayType)   return;
  final GLSLType[] parameters=expr.getParameterTypes();
  for (  GLSLType paramType : parameters) {
    if (!paramType.isValidType()) {
      return;
    }
  }
  final GLSLFunctionType[] constructors=constructorType.getConstructors();
  if (constructors.length == 0)   return;
  boolean found=false;
  for (  GLSLFunctionType constructor : constructors) {
    if (constructor.getParameterCompatibilityLevel(parameters) != GLSLTypeCompatibilityLevel.INCOMPATIBLE) {
      found=true;
      break;
    }
  }
  if (!found) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"").append(constructorType.getTypename()).append('(');
    if (parameters.length != 0) {
      final String PARAMETER_SEPARATOR=""String_Node_Str"";
      for (      GLSLType parameter : parameters) {
        sb.append(parameter.getTypename()).append(PARAMETER_SEPARATOR);
      }
      sb.setLength(sb.length() - PARAMETER_SEPARATOR.length());
    }
    sb.append(""String_Node_Str"");
    final String baseMessage=sb.toString();
    sb.setLength(0);
    sb.append(""String_Node_Str"");
    sb.append(baseMessage);
    sb.append(""String_Node_Str"");
    if (constructorType instanceof GLSLVectorType || constructorType instanceof GLSLMatrixType) {
      sb.append(GLSLVectorType.countVectorOrMatrixConstructorElements(parameters));
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    for (    GLSLFunctionType constructor : constructors) {
      sb.append(constructor.getTypename()).append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    holder.createAnnotation(HighlightSeverity.ERROR,expr.getTextRange(),baseMessage,sb.toString());
  }
}",0.9162483487450462
34474,"@Override public void parseLight(IElementType root,PsiBuilder builder){
  final PsiBuilder.Marker rootMarker=builder.mark();
  if (!builder.eof()) {
    final GLSLParsing theRealParser=new GLSLParsing(builder);
    theRealParser.parseTranslationUnit();
    while (!builder.eof())     builder.advanceLexer();
  }
  rootMarker.done(root);
}","@Override public void parseLight(IElementType root,PsiBuilder builder){
  if (crashing) {
    builder.setDebugMode(true);
  }
  final PsiBuilder.Marker rootMarker=builder.mark();
  if (!builder.eof()) {
    final GLSLParsing theRealParser=new GLSLParsing(builder);
    theRealParser.parseTranslationUnit();
    while (!builder.eof())     builder.advanceLexer();
  }
  rootMarker.done(root);
}",0.926027397260274
34475,"@Override @NotNull public ASTNode parse(IElementType root,PsiBuilder builder){
  parseLight(root,builder);
  return builder.getTreeBuilt();
}","@Override @NotNull public ASTNode parse(@NotNull IElementType root,@NotNull PsiBuilder builder){
  try {
    parseLight(root,builder);
    return builder.getTreeBuilt();
  }
 catch (  ProcessCanceledException|BlockSupport.ReparsedSuccessfullyException ignore) {
    throw ignore;
  }
catch (  Exception ex) {
    crashing=true;
    Logger.getLogger(""String_Node_Str"").log(Level.WARNING,""String_Node_Str"" + root,ex);
    throw ex;
  }
}",0.4895833333333333
34476,"private boolean parseOperatorExpression(int level){
  PsiBuilder.Marker mark=b.mark();
  if (!parseOperatorExpressionLevel(level + 1)) {
    mark.drop();
    return false;
  }
  OperatorLevelTraits operatorLevel=operatorPrecedence[level];
  while (tryMatch(operatorLevel.getOperatorTokens())) {
    if (parseOperatorExpressionLevel(level + 1)) {
      mark.done(operatorLevel.getElementType());
      mark=mark.precede();
    }
 else {
      PsiBuilder.Marker operatorMark=b.mark();
      if (tryMatch(OPERATORS)) {
        do {
          operatorMark.error(""String_Node_Str"");
          if (parseOperatorExpressionLevel(level + 1)) {
            mark.done(operatorLevel.getElementType());
            mark=mark.precede();
            break;
          }
 else {
            operatorMark=b.mark();
          }
        }
 while (tryMatch(OPERATORS));
      }
 else {
        operatorMark.drop();
        mark.error(""String_Node_Str"" + operatorLevel.getPartName() + ""String_Node_Str"");
        return false;
      }
    }
  }
  mark.drop();
  return true;
}","private boolean parseOperatorExpression(int level){
  PsiBuilder.Marker mark=b.mark();
  if (!parseOperatorExpressionLevel(level + 1)) {
    mark.drop();
    return false;
  }
  final OperatorLevelTraits operatorLevel=operatorPrecedence[level];
  while (tryMatch(operatorLevel.getOperatorTokens())) {
    if (parseOperatorExpressionLevel(level + 1)) {
      mark.done(operatorLevel.getElementType());
      mark=mark.precede();
    }
 else {
      PsiBuilder.Marker operatorMark=b.mark();
      outOfPlace:       if (tryMatch(OPERATORS)) {
        do {
          operatorMark.error(""String_Node_Str"");
          if (parseOperatorExpressionLevel(level + 1)) {
            mark.done(operatorLevel.getElementType());
            mark=mark.precede();
            break outOfPlace;
          }
 else {
            operatorMark=b.mark();
          }
        }
 while (tryMatch(OPERATORS));
        operatorMark.drop();
      }
 else {
        operatorMark.drop();
        mark.error(""String_Node_Str"" + operatorLevel.getPartName() + ""String_Node_Str"");
        return false;
      }
    }
  }
  mark.drop();
  return true;
}",0.9705340699815838
34477,"private boolean parseCaseStatement(){
  PsiBuilder.Marker mark=mark();
  match(CASE_KEYWORD,""String_Node_Str"");
  parseConstantExpression();
  match(COLON,""String_Node_Str"");
  mark.done(CASE_STATEMENT);
  return true;
}","private boolean parseCaseStatement(){
  PsiBuilder.Marker mark=b.mark();
  match(CASE_KEYWORD,""String_Node_Str"");
  parseConstantExpression();
  match(COLON,""String_Node_Str"");
  mark.done(CASE_STATEMENT);
  return true;
}",0.995475113122172
34478,"private boolean parseDefaultStatement(){
  PsiBuilder.Marker mark=mark();
  match(DEFAULT_KEYWORD,""String_Node_Str"");
  match(COLON,""String_Node_Str"");
  mark.done(DEFAULT_STATEMENT);
  return true;
}","private boolean parseDefaultStatement(){
  PsiBuilder.Marker mark=b.mark();
  match(DEFAULT_KEYWORD,""String_Node_Str"");
  match(COLON,""String_Node_Str"");
  mark.done(DEFAULT_STATEMENT);
  return true;
}",0.9950248756218906
34479,"private boolean parseSwitchStatement(){
  PsiBuilder.Marker mark=mark();
  match(SWITCH_KEYWORD,""String_Node_Str"");
  match(LEFT_PAREN,""String_Node_Str"");
  parseCondition();
  match(RIGHT_PAREN,""String_Node_Str"");
  parseCompoundStatement();
  mark.done(SWITCH_STATEMENT);
  return true;
}","private boolean parseSwitchStatement(){
  PsiBuilder.Marker mark=b.mark();
  match(SWITCH_KEYWORD,""String_Node_Str"");
  match(LEFT_PAREN,""String_Node_Str"");
  parseCondition();
  match(RIGHT_PAREN,""String_Node_Str"");
  parseCompoundStatement();
  mark.done(SWITCH_STATEMENT);
  return true;
}",0.9965635738831616
34480,"/** 
 * Verifies that the current token is of the given type, if not it will flag an error.
 * @param type  the expected token type.
 * @param error an appropriate error message if any other token is found instead.
 * @return indicates whether the match was successful or not.
 */
protected final boolean match(IElementType type,String error){
  if (isEof()) {
    return false;
  }
  boolean match=tokenType() == type;
  if (match) {
    advanceLexer();
  }
 else {
    error(error);
  }
  return match;
}","/** 
 * Verifies that the current token is of the given type, if not it will flag an error.
 * @param type  the expected token type.
 * @param error an appropriate error message if any other token is found instead.
 * @return indicates whether the match was successful or not.
 */
protected final boolean match(IElementType type,String error){
  final boolean matched=!isEof() && tokenType() == type;
  if (matched) {
    advanceLexer();
  }
 else {
    error(error);
  }
  return matched;
}",0.9227683049147444
34481,"public void annotate(GLSLStatement expr,AnnotationHolder holder){
  if (expr instanceof GLSLReturnStatement) {
    GLSLFunctionDefinition function=expr.findParentByClass(GLSLFunctionDefinition.class);
    if (function != null) {
      GLSLType functionType=function.getTypeSpecifierNode().getType();
      GLSLType returnType=((GLSLReturnStatement)expr).getReturnType();
      if (!returnType.isValidType() || !functionType.isConvertibleTo(returnType)) {
        holder.createErrorAnnotation(expr,""String_Node_Str"" + functionType.getTypename() + ""String_Node_Str""+ returnType.getTypename());
      }
    }
  }
}","public void annotate(GLSLStatement expr,AnnotationHolder holder){
  if (expr instanceof GLSLReturnStatement) {
    GLSLFunctionDefinition function=expr.findParentByClass(GLSLFunctionDefinition.class);
    if (function != null) {
      GLSLType functionType=function.getTypeSpecifierNode().getType();
      GLSLType returnType=((GLSLReturnStatement)expr).getReturnType();
      if (returnType.isValidType() && !functionType.isConvertibleTo(returnType)) {
        holder.createErrorAnnotation(expr,""String_Node_Str"" + functionType.getTypename() + ""String_Node_Str""+ returnType.getTypename());
      }
    }
  }
}",0.995904995904996
34482,"@Override public <U>ThrowingStream<U,X> mapToObj(ThrowingDoubleFunction<? extends U,? extends X> mapper){
  return ThrowingBridge.of(getDelegate().mapToObj(getBridge().convert(mapper)),getBridge());
}","@Override public <U>ThrowingStream<U,X> mapToObj(ThrowingDoubleFunction<? extends U,? extends X> mapper){
  DoubleFunction<? extends U> f=getBridge().convert(mapper);
  return ThrowingBridge.of(getDelegate().mapToObj(f),getBridge());
}",0.7954022988505747
34483,"@Override public <U>ThrowingStream<U,X> mapToObj(ThrowingIntFunction<? extends U,? extends X> mapper){
  return ThrowingBridge.of(getDelegate().mapToObj(getBridge().convert(mapper)),getBridge());
}","@Override public <U>ThrowingStream<U,X> mapToObj(ThrowingIntFunction<? extends U,? extends X> mapper){
  IntFunction<? extends U> f=getBridge().convert(mapper);
  return ThrowingBridge.of(getDelegate().mapToObj(f),getBridge());
}",0.7981220657276995
34484,"@Override public <U>ThrowingStream<U,X> mapToObj(ThrowingLongFunction<? extends U,? extends X> mapper){
  return ThrowingBridge.of(getDelegate().mapToObj(getBridge().convert(mapper)),getBridge());
}","@Override public <U>ThrowingStream<U,X> mapToObj(ThrowingLongFunction<? extends U,? extends X> mapper){
  LongFunction<? extends U> f=getBridge().convert(mapper);
  return ThrowingBridge.of(getDelegate().mapToObj(f),getBridge());
}",0.7972027972027972
34485,"@Override public <U>Stream<U> mapToObj(DoubleFunction<? extends U> mapper){
  return ThrowingBridge.of(getDelegate().mapToObj(mapper::apply),getExceptionClass());
}","@Override public <U>Stream<U> mapToObj(DoubleFunction<? extends U> mapper){
  ThrowingDoubleFunction<? extends U,? extends X> f=mapper::apply;
  return ThrowingBridge.of(getDelegate().mapToObj(f),getExceptionClass());
}",0.6527415143603134
34486,"@Override public <U>Stream<U> mapToObj(IntFunction<? extends U> mapper){
  return ThrowingBridge.of(getDelegate().mapToObj(mapper::apply),getExceptionClass());
}","@Override public <U>Stream<U> mapToObj(IntFunction<? extends U> mapper){
  ThrowingIntFunction<? extends U,? extends X> f=mapper::apply;
  return ThrowingBridge.of(getDelegate().mapToObj(f),getExceptionClass());
}",0.7914438502673797
34487,"@Override public <U>Stream<U> mapToObj(LongFunction<? extends U> mapper){
  return ThrowingBridge.of(getDelegate().mapToObj(mapper::apply),getExceptionClass());
}","@Override public <U>Stream<U> mapToObj(LongFunction<? extends U> mapper){
  ThrowingLongFunction<? extends U,? extends X> f=mapper::apply;
  return ThrowingBridge.of(getDelegate().mapToObj(f),getExceptionClass());
}",0.7904509283819628
34488,"@Override public <R>Stream<R> map(Function<? super T,? extends R> mapper){
  return newStream(getDelegate().map(mapper::apply));
}","@Override public <R>Stream<R> map(Function<? super T,? extends R> mapper){
  ThrowingFunction<? super T,? extends R,? extends X> f=mapper::apply;
  return newStream(getDelegate().map(f));
}",0.7335423197492164
34489,"public void bind(ResourceResolverFactory resourceResolverFactory) throws LoginException {
  if (resourceResolverFactory == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.resolver=resourceResolverFactory.getAdministrativeResourceResolver(null);
}","public void bind(ResourceResolverFactory factory) throws LoginException {
  if (factory == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.resolver=factory.getAdministrativeResourceResolver(null);
}",0.8928571428571429
34490,"/** 
 * @see org.apache.sling.api.resource.ResourceResolver#resolve(javax.servlet.http.HttpServletRequest,String)
 */
public Resource resolve(SlingHttpServletRequest request,String path){
  ensureInitialization();
  return this.resolver.resolve(request,path);
}","/** 
 * @see org.apache.sling.api.resource.ResourceResolver#resolve(javax.servlet.http.HttpServletRequest,String)
 */
public Resource resolve(SlingHttpServletRequest request,String path){
  return getResolver().resolve(request,path);
}",0.782258064516129
34491,"public void unbind(ResourceResolverFactory resourceResolverFactory){
  closeResourceResolver();
}","/** 
 * @param ignored can be null.
 * @see #closeResourceResolver()
 */
public void unbind(@SuppressWarnings(""String_Node_Str"") ResourceResolverFactory ignored){
  closeResourceResolver();
}",0.5277777777777778
34492,"/** 
 * @see ResourceResolver#getResource(String)
 */
public Resource get(String path){
  ensureInitialization();
  return this.resolver.getResource(path);
}","/** 
 * @see ResourceResolver#getResource(String)
 */
public Resource get(String path){
  return getResolver().getResource(path);
}",0.875
34493,"@PreDestroy public void closeResourceResolver(){
  if (this.resolver != null && this.resolver.isLive()) {
    this.resolver.close();
  }
}","/** 
 * Closes and removes the reference to the current administrative resource resolver, as any resolver instance obtained before a factory changed is malfunctioning, even if   {@link ResourceResolver#isLive()} is true. Doesalso discard the reference to the factory as it is a service proxy and may not be accessed before it is {@link #bind(ResourceResolverFactory) bound} again, as this would result in a deadlock.
 */
@PreDestroy public void closeResourceResolver(){
  if (this.resolver != null && this.resolver.isLive()) {
    this.resolver.close();
  }
  this.resolver=null;
}",0.3838664812239221
34494,"/** 
 * Exposes the administrative resource resolver. Warning: The returned resource resolver will seize to function if its factory changes and must thus not be retained.
 * @return never <code>null</code>.
 */
public ResourceResolver getResolver(){
  ensureInitialization();
  return resolver;
}","/** 
 * Exposes the administrative resource resolver. Warning: The returned resource resolver will seize to function if its factory changes and must thus not be retained.
 * @return never <code>null</code>.
 */
public ResourceResolver getResolver(){
  if (this.resolver == null) {
    IllegalStateException e=new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
    logger.error(""String_Node_Str"",e);
    throw e;
  }
  return resolver;
}",0.7121820615796519
34495,"public static void load(){
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockMarble=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
    blockMarble.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockMarble.carverHelper.register(blockMarble,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockMarble);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    if (Chisel.multipartLoaded) {
    }
    blockMarbleSlab=(BlockMarbleSlab)new BlockMarbleSlab(blockMarble).setHardness(2.0F).setResistance(10F);
    blockMarbleSlab.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockMarbleSlab.carverHelper.register(blockMarbleSlab,""String_Node_Str"",ItemMarbleSlab.class);
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      if (Configurations.oldPillars) {
        blockMarblePillar=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
        blockMarblePillar.carverHelper.setChiselBlockName(""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
 else {
        blockMarblePillar=(BlockCarvable)new BlockMarblePillar(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
        blockMarblePillar.carverHelper.setChiselBlockName(""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
      blockMarblePillar.carverHelper.register(blockMarblePillar,""String_Node_Str"");
      Carving.chisel.setGroupClass(""String_Node_Str"",""String_Node_Str"");
      blockMarblePillarSlab=(BlockMarbleSlab)new BlockMarbleSlab(blockMarblePillar).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
      blockMarblePillarSlab.carverHelper.setChiselBlockName(""String_Node_Str"");
      if (Configurations.oldPillars) {
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
 else {
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
      blockMarblePillarSlab.carverHelper.register(blockMarblePillarSlab,""String_Node_Str"",ItemMarbleSlab.class);
    }
    BlockMarbleStairsMaker makerMarbleStairs=new BlockMarbleStairsMaker(blockMarble);
    makerMarbleStairs.carverHelper.setChiselBlockName(""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    makerMarbleStairs.create(""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockLimestone=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
    blockLimestone.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockLimestone.carverHelper.register(blockLimestone,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockLimestone);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    blockLimestoneSlab=(BlockMarbleSlab)new BlockMarbleSlab(blockLimestone).setHardness(2.0F).setResistance(10F);
    blockLimestoneSlab.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.register(blockLimestoneSlab,""String_Node_Str"",ItemMarbleSlab.class);
    BlockMarbleStairsMaker makerLimestoneStairs=new BlockMarbleStairsMaker(blockLimestone);
    makerLimestoneStairs.carverHelper.setChiselBlockName(""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    makerLimestoneStairs.create(""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockCobblestone=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.cobblestone,0,0);
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockCobblestone.carverHelper.register(blockCobblestone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockGlass=(BlockCarvableGlass)new BlockCarvableGlass().setHardness(0.3F).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.glass,0,0);
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockGlass.carverHelper.register(blockGlass,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockSandstone=(BlockCarvable)new BlockCarvable().setStepSound(Block.soundTypeStone).setHardness(0.8F);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.sandstone,0,0);
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,Blocks.sandstone,1);
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,Blocks.sandstone,2);
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockSandstone.carverHelper.register(blockSandstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      blockSandSnakestone=(BlockSnakestone)new BlockSnakestone(""String_Node_Str"").setBlockName(""String_Node_Str"");
      GameRegistry.registerBlock(blockSandSnakestone,ItemCarvable.class,blockSandSnakestone.getUnlocalizedName());
      Carving.chisel.addVariation(""String_Node_Str"",blockSandSnakestone,1,16);
      Carving.chisel.addVariation(""String_Node_Str"",blockSandSnakestone,13,17);
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockSandstoneScribbles=(BlockCarvable)new BlockCarvable().setStepSound(Block.soundTypeStone).setHardness(0.8F);
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.register(blockSandstoneScribbles,""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockConcrete=(BlockConcrete)new BlockConcrete().setStepSound(Block.soundTypeStone).setHardness(0.5F);
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockConcrete.carverHelper.register(blockConcrete,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockConcrete);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockRoadLine=(BlockRoadLine)new BlockRoadLine().setStepSound(Block.soundTypeStone).setHardness(0.01F).setBlockName(""String_Node_Str"");
    GameRegistry.registerBlock(blockRoadLine,ItemCarvable.class,""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockIron=(BlockBeaconBase)new BlockBeaconBase().setHardness(5F).setResistance(10F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.iron_block,0,0);
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockIron.carverHelper.register(blockIron,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockGold=(BlockBeaconBase)new BlockBeaconBase().setHardness(3F).setResistance(10F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.gold_block,0,0);
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockGold.carverHelper.register(blockGold,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockDiamond=(BlockBeaconBase)new BlockBeaconBase().setHardness(5F).setResistance(10F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.diamond_block,0,0);
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockDiamond.carverHelper.register(blockDiamond,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockLightstone=(BlockLightstoneCarvable)new BlockLightstoneCarvable().setHardness(0.3F).setLightLevel(1.0F).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.glowstone,0,0);
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockLightstone.carverHelper.register(blockLightstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockLapis=(BlockCarvable)new BlockCarvable().setHardness(3F).setResistance(5F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.lapis_block,0,0);
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockLapis.carverHelper.register(blockLapis,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockEmerald=(BlockBeaconBase)new BlockBeaconBase().setHardness(5.0F).setResistance(10.0F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.emerald_block,0,0);
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockEmerald.carverHelper.register(blockEmerald,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockNetherBrick=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.nether_brick,0,0);
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockNetherBrick.carverHelper.register(blockNetherBrick,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockNetherrack=(BlockCarvable)new BlockCarvable().setHardness(0.4F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.netherrack,0,0);
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockNetherrack.carverHelper.register(blockNetherrack,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockCobblestoneMossy=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.mossy_cobblestone,0,0);
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.register(blockCobblestoneMossy,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    stoneBrick=(BlockCarvable)new BlockCarvable().setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundTypeStone);
    for (int i=0; i < 4; i++) {
      if (i == 1) {
        if (Configurations.allowMossy)         Carving.chisel.addVariation(""String_Node_Str"",Blocks.stonebrick,i,i);
      }
 else       Carving.chisel.addVariation(""String_Node_Str"",Blocks.stonebrick,i,i);
    }
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    stoneBrick.carverHelper.register(stoneBrick,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockSnakestone=(BlockSnakestone)new BlockSnakestone(""String_Node_Str"").setBlockName(""String_Node_Str"");
    GameRegistry.registerBlock(blockSnakestone,ItemCarvable.class,blockSnakestone.getUnlocalizedName());
    Carving.chisel.addVariation(""String_Node_Str"",blockSnakestone,1,16);
    Carving.chisel.addVariation(""String_Node_Str"",blockSnakestone,13,17);
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockDirt=(BlockCarvable)new BlockCarvable(Material.ground).setHardness(0.5F).setStepSound(Block.soundTypeGravel).setBlockName(""String_Node_Str"");
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.dirt,0,0);
    blockDirt.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockDirt.carverHelper.register(blockDirt,""String_Node_Str"");
    blockDirt.setHarvestLevel(""String_Node_Str"",0);
    OreDictionary.registerOre(""String_Node_Str"",blockDirt);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockIce=(BlockMarbleIce)new BlockMarbleIce().setHardness(0.5F).setLightOpacity(3).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.ice,0,0);
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockIce.carverHelper.register(blockIce,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      blockIcePillar=(BlockMarbleIce)new BlockMarbleIce().setHardness(0.5F).setLightOpacity(3).setStepSound(Block.soundTypeGlass);
      blockIcePillar.carverHelper.setChiselBlockName(""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      blockIcePillar.carverHelper.register(blockIcePillar,""String_Node_Str"");
      Carving.chisel.setGroupClass(""String_Node_Str"",""String_Node_Str"");
    }
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      BlockMarbleStairsMaker makerIceStairs=new BlockMarbleStairsMaker(Blocks.ice);
      makerIceStairs.carverHelper.setChiselBlockName(""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,Blocks.ice);
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      makerIceStairs.create(new BlockMarbleStairsMakerCreator(){
        @Override public BlockMarbleStairs create(        Block block,        int meta,        CarvableHelper helper){
          return new BlockMarbleIceStairs(block,meta,helper);
        }
      }
,""String_Node_Str"");
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    String[] plank_names={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] plank_ucnames={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    for (int i=0; i < 6; i++) {
      String n=plank_names[i];
      String u=plank_ucnames[i];
      blockPlanks[i]=(BlockCarvable)(new BlockCarvable()).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood);
      blockPlanks[i].carverHelper.setChiselBlockName(u + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",1,""String_Node_Str"" + n + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",2,""String_Node_Str"" + n + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",6,""String_Node_Str"" + n + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(u + ""String_Node_Str"",8,""String_Node_Str"" + n + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(u + ""String_Node_Str"",9,""String_Node_Str"" + n + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(u + ""String_Node_Str"",10,""String_Node_Str"" + n + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",11,""String_Node_Str"" + n + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",13,""String_Node_Str"" + n + ""String_Node_Str"");
      if (i < 4) {
        blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",3,""String_Node_Str"" + n + ""String_Node_Str"");
        blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",4,""String_Node_Str"" + n + ""String_Node_Str"");
        blockPlanks[i].carverHelper.addVariation(u + ""String_Node_Str"",5,""String_Node_Str"" + n + ""String_Node_Str"");
        blockPlanks[i].carverHelper.addVariation(u + ""String_Node_Str"",7,""String_Node_Str"" + n + ""String_Node_Str"");
        blockPlanks[i].carverHelper.addVariation(u + ""String_Node_Str"",12,""String_Node_Str"" + n + ""String_Node_Str"");
        blockPlanks[i].carverHelper.addVariation(u + ""String_Node_Str"",14,""String_Node_Str"" + n + ""String_Node_Str"");
        blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",15,""String_Node_Str"" + n + ""String_Node_Str"");
      }
      blockPlanks[i].carverHelper.register(blockPlanks[i],""String_Node_Str"" + n);
      Carving.chisel.addVariation(""String_Node_Str"" + n,Blocks.planks,i,0);
      Blocks.planks.setHarvestLevel(""String_Node_Str"",0,i);
      blockPlanks[i].setHarvestLevel(""String_Node_Str"",0);
      Carving.chisel.setVariationSound(""String_Node_Str"" + n,""String_Node_Str"");
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockObsidian=(BlockCarvable)new BlockCarvable().setHardness(50.0F).setResistance(2000.0F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.obsidian,0,0);
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockObsidian.carverHelper.register(blockObsidian,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockObsidianSnakestone=(BlockSnakestoneObsidian)new BlockSnakestoneObsidian(""String_Node_Str"").setBlockName(""String_Node_Str"").setHardness(50.0F).setResistance(2000.0F);
    GameRegistry.registerBlock(blockObsidianSnakestone,ItemCarvable.class,blockObsidianSnakestone.getUnlocalizedName());
    Carving.chisel.addVariation(""String_Node_Str"",blockObsidianSnakestone,1,16);
    Carving.chisel.addVariation(""String_Node_Str"",blockObsidianSnakestone,13,17);
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockPaneIron=(BlockCarvablePane)new BlockCarvablePane(Material.iron,true).setHardness(0.3F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.iron_bars,0,0);
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockPaneIron.carverHelper.register(blockPaneIron,""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockPaneGlass=(BlockCarvablePane)new BlockCarvablePane(Material.glass,false).setHardness(0.3F).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.glass_pane,0,0);
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
    blockPaneGlass.carverHelper.register(blockPaneGlass,""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockRedstone=(BlockCarvablePowered)(new BlockCarvablePowered(Material.iron)).setHardness(5.0F).setResistance(10.0F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.redstone_block,0,0);
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
    blockRedstone.carverHelper.register(blockRedstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockHolystone=(BlockHolystone)new BlockHolystone(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundHolystoneFootstep);
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockHolystone.carverHelper.register(blockHolystone,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockHolystone);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockLavastone=(BlockLavastone)new BlockLavastone(Material.rock,""String_Node_Str"").setHardness(2.0F).setResistance(10F);
    blockLavastone.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockLavastone.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockLavastone.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockLavastone.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockLavastone.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockLavastone.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockLavastone.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockLavastone.carverHelper.register(blockLavastone,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockLavastone);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockFft=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10F);
    blockFft.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
    blockFft.carverHelper.register(blockFft,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockFft);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockCarpet=(BlockCarvable)new BlockCarvable(Material.cloth).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeCloth);
    blockCarpet.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
    blockCarpet.carverHelper.forbidChiseling=true;
    blockCarpet.carverHelper.register(blockCarpet,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockCarpet);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockCarpetFloor=(BlockMarbleCarpet)new BlockMarbleCarpet(Material.cloth).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeCloth);
    blockCarpetFloor.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
    blockCarpetFloor.carverHelper.forbidChiseling=true;
    blockCarpetFloor.carverHelper.register(blockCarpetFloor,""String_Node_Str"");
    for (int i=0; i < 16; i++) {
      String group=""String_Node_Str"" + i;
      Carving.needle.addVariation(group,Blocks.carpet,i,0);
      Carving.needle.addVariation(group,blockCarpetFloor,i,2);
      Carving.needle.addVariation(group,blockCarpet,i,1);
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockBookshelf=(BlockCarvable)new BlockMarbleBookshelf().setHardness(1.5F).setStepSound(Block.soundTypeWood);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.bookshelf,0,0);
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockBookshelf.carverHelper.register(blockBookshelf,""String_Node_Str"");
    blockBookshelf.setHarvestLevel(""String_Node_Str"",0);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockTyrian=(BlockCarvable)new BlockCarvable(Material.iron).setHardness(5.0F).setResistance(10.0F).setStepSound(Block.soundTypeMetal);
    blockTyrian.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
    blockTyrian.carverHelper.register(blockTyrian,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockTyrian);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockTemple=(BlockCarvable)new BlockEldritch().setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundTempleFootstep);
    blockTemple.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
    blockTemple.carverHelper.register(blockTemple,""String_Node_Str"");
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      blockTempleMossy=(BlockCarvable)new BlockEldritch().setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundTempleFootstep);
      blockTempleMossy.carverHelper.setChiselBlockName(""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
      blockTempleMossy.carverHelper.register(blockTempleMossy,""String_Node_Str"");
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockCloud=(BlockCloud)new BlockCloud().setHardness(0.2F).setLightOpacity(3).setStepSound(Block.soundTypeCloth);
    blockCloud.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockCloud.carverHelper.register(blockCloud,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockCloud);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockFactory=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundMetalFootstep);
    blockFactory.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockFactory.carverHelper.register(blockFactory,""String_Node_Str"");
  }
  String[] sGNames=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  if (Configurations.featureEnabled(""String_Node_Str""))   for (int i=0; i < 16; i++) {
    String nameWithoutSpace=sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
    String blockName=""String_Node_Str"" + nameWithoutSpace;
    String oreName=""String_Node_Str"" + nameWithoutSpace;
    String texName=""String_Node_Str"" + sGNames[i].toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    int glassPrefix=(i & 3) << 2;
    int glassId=i >> 2;
    if (glassPrefix == 0) {
      blockStainedGlass[glassId]=(BlockCarvableGlass)new BlockCarvableGlass().setStained(true).setHardness(0.3F).setStepSound(Block.soundTypeGlass).setBlockName(""String_Node_Str"");
      blockStainedGlass[glassId].carverHelper.registerBlock(blockStainedGlass[glassId],blockName);
      blockStainedGlass[glassId].carverHelper.blockName=""String_Node_Str"";
    }
    blockStainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix,texName + ""String_Node_Str"");
    blockStainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 1,texName + ""String_Node_Str"");
    blockStainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 2,texName + ""String_Node_Str"");
    blockStainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 3,texName + ""String_Node_Str"");
    OreDictionary.registerOre(oreName,new ItemStack(Blocks.stained_glass,1,i));
    Carving.chisel.registerOre(blockName,oreName);
    for (    CarvableVariation cv : blockStainedGlass[glassId].carverHelper.variations) {
      if (cv.metadata < glassPrefix || cv.metadata >= glassPrefix + 4)       continue;
      blockStainedGlass[glassId].carverHelper.registerVariation(blockName,cv,blockStainedGlass[glassId],cv.metadata);
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str""))   for (int i=0; i < 16; i++) {
    String blockName=""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
    String oreName=""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
    String texName=""String_Node_Str"" + sGNames[i].toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    int glassPrefix=(i & 1) << 3;
    int glassId=i >> 1;
    if (glassPrefix == 0) {
      blockStainedGlassPane[glassId]=(BlockCarvablePane)new BlockCarvablePane(Material.glass,false).setStained(true).setHardness(0.3F).setStepSound(Block.soundTypeGlass).setBlockName(""String_Node_Str"");
      blockStainedGlassPane[glassId].carverHelper.registerBlock(blockStainedGlassPane[glassId],blockName);
      blockStainedGlassPane[glassId].carverHelper.blockName=""String_Node_Str"";
    }
    blockStainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix,texName + ""String_Node_Str"");
    blockStainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 1,texName + ""String_Node_Str"");
    blockStainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 2,texName + ""String_Node_Str"");
    blockStainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 3,texName + ""String_Node_Str"");
    blockStainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 4,texName + ""String_Node_Str"");
    blockStainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 5,texName + ""String_Node_Str"");
    OreDictionary.registerOre(oreName,new ItemStack(Blocks.stained_glass_pane,1,i));
    Carving.chisel.registerOre(blockName,oreName);
    for (    CarvableVariation cv : blockStainedGlassPane[glassId].carverHelper.variations) {
      if (cv.metadata < glassPrefix || cv.metadata >= glassPrefix + 8)       continue;
      blockStainedGlassPane[glassId].carverHelper.registerVariation(blockName,cv,blockStainedGlassPane[glassId],cv.metadata);
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockPaperwall=(BlockCarvablePane)new BlockCarvablePane(Material.ground,true).setCreativeTab(Chisel.tabChisel).setHardness(0.5F).setResistance(10F);
    blockPaperwall.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockPaperwall.carverHelper.register(blockPaperwall,""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockWoolenClay=(BlockCarvable)new BlockCarvable().setCreativeTab(Chisel.tabChisel).setHardness(2F).setResistance(10F);
    blockWoolenClay.carverHelper.setChiselBlockName(""String_Node_Str"");
    for (int i=0; i < 16; i++)     blockWoolenClay.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str"" + i + ""String_Node_Str""),i,""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    blockWoolenClay.carverHelper.register(blockWoolenClay,""String_Node_Str"");
  }
  Blocks.stone.setHarvestLevel(""String_Node_Str"",0,0);
}","public static void load(){
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockMarble=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
    blockMarble.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockMarble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockMarble.carverHelper.register(blockMarble,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockMarble);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    if (Chisel.multipartLoaded) {
    }
    blockMarbleSlab=(BlockMarbleSlab)new BlockMarbleSlab(blockMarble).setHardness(2.0F).setResistance(10F);
    blockMarbleSlab.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockMarbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockMarbleSlab.carverHelper.register(blockMarbleSlab,""String_Node_Str"",ItemMarbleSlab.class);
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      if (Configurations.oldPillars) {
        blockMarblePillar=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
        blockMarblePillar.carverHelper.setChiselBlockName(""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
 else {
        blockMarblePillar=(BlockCarvable)new BlockMarblePillar(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
        blockMarblePillar.carverHelper.setChiselBlockName(""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        blockMarblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
      blockMarblePillar.carverHelper.register(blockMarblePillar,""String_Node_Str"");
      Carving.chisel.setGroupClass(""String_Node_Str"",""String_Node_Str"");
      blockMarblePillarSlab=(BlockMarbleSlab)new BlockMarbleSlab(blockMarblePillar).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
      blockMarblePillarSlab.carverHelper.setChiselBlockName(""String_Node_Str"");
      if (Configurations.oldPillars) {
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
 else {
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        blockMarblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
      blockMarblePillarSlab.carverHelper.register(blockMarblePillarSlab,""String_Node_Str"",ItemMarbleSlab.class);
    }
    BlockMarbleStairsMaker makerMarbleStairs=new BlockMarbleStairsMaker(blockMarble);
    makerMarbleStairs.carverHelper.setChiselBlockName(""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    makerMarbleStairs.create(""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockLimestone=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
    blockLimestone.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockLimestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockLimestone.carverHelper.register(blockLimestone,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockLimestone);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    blockLimestoneSlab=(BlockMarbleSlab)new BlockMarbleSlab(blockLimestone).setHardness(2.0F).setResistance(10F);
    blockLimestoneSlab.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockLimestoneSlab.carverHelper.register(blockLimestoneSlab,""String_Node_Str"",ItemMarbleSlab.class);
    BlockMarbleStairsMaker makerLimestoneStairs=new BlockMarbleStairsMaker(blockLimestone);
    makerLimestoneStairs.carverHelper.setChiselBlockName(""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    makerLimestoneStairs.create(""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockCobblestone=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.cobblestone,0,0);
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockCobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockCobblestone.carverHelper.register(blockCobblestone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockGlass=(BlockCarvableGlass)new BlockCarvableGlass().setHardness(0.3F).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.glass,0,0);
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockGlass.carverHelper.register(blockGlass,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockSandstone=(BlockCarvable)new BlockCarvable().setStepSound(Block.soundTypeStone).setHardness(0.8F);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.sandstone,0,0);
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,Blocks.sandstone,1);
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,Blocks.sandstone,2);
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockSandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockSandstone.carverHelper.register(blockSandstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      blockSandSnakestone=(BlockSnakestone)new BlockSnakestone(""String_Node_Str"").setBlockName(""String_Node_Str"");
      GameRegistry.registerBlock(blockSandSnakestone,ItemCarvable.class,blockSandSnakestone.getUnlocalizedName());
      Carving.chisel.addVariation(""String_Node_Str"",blockSandSnakestone,1,16);
      Carving.chisel.addVariation(""String_Node_Str"",blockSandSnakestone,13,17);
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockSandstoneScribbles=(BlockCarvable)new BlockCarvable().setStepSound(Block.soundTypeStone).setHardness(0.8F);
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockSandstoneScribbles.carverHelper.register(blockSandstoneScribbles,""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockConcrete=(BlockConcrete)new BlockConcrete().setStepSound(Block.soundTypeStone).setHardness(0.5F);
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockConcrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockConcrete.carverHelper.register(blockConcrete,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockConcrete);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockRoadLine=(BlockRoadLine)new BlockRoadLine().setStepSound(Block.soundTypeStone).setHardness(0.01F).setBlockName(""String_Node_Str"");
    GameRegistry.registerBlock(blockRoadLine,ItemCarvable.class,""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockIron=(BlockBeaconBase)new BlockBeaconBase().setHardness(5F).setResistance(10F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.iron_block,0,0);
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockIron.carverHelper.register(blockIron,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockGold=(BlockBeaconBase)new BlockBeaconBase().setHardness(3F).setResistance(10F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.gold_block,0,0);
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockGold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockGold.carverHelper.register(blockGold,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockDiamond=(BlockBeaconBase)new BlockBeaconBase().setHardness(5F).setResistance(10F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.diamond_block,0,0);
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockDiamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockDiamond.carverHelper.register(blockDiamond,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockLightstone=(BlockLightstoneCarvable)new BlockLightstoneCarvable().setHardness(0.3F).setLightLevel(1.0F).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.glowstone,0,0);
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockLightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockLightstone.carverHelper.register(blockLightstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockLapis=(BlockCarvable)new BlockCarvable().setHardness(3F).setResistance(5F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.lapis_block,0,0);
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockLapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockLapis.carverHelper.register(blockLapis,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockEmerald=(BlockBeaconBase)new BlockBeaconBase().setHardness(5.0F).setResistance(10.0F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.emerald_block,0,0);
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockEmerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockEmerald.carverHelper.register(blockEmerald,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockNetherBrick=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.nether_brick,0,0);
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockNetherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockNetherBrick.carverHelper.register(blockNetherBrick,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockNetherrack=(BlockCarvable)new BlockCarvable().setHardness(0.4F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.netherrack,0,0);
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockNetherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockNetherrack.carverHelper.register(blockNetherrack,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockCobblestoneMossy=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.mossy_cobblestone,0,0);
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockCobblestoneMossy.carverHelper.register(blockCobblestoneMossy,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    stoneBrick=(BlockCarvable)new BlockCarvable().setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundTypeStone);
    for (int i=0; i < 4; i++) {
      if (i == 1) {
        if (Configurations.allowMossy)         Carving.chisel.addVariation(""String_Node_Str"",Blocks.stonebrick,i,i);
      }
 else       Carving.chisel.addVariation(""String_Node_Str"",Blocks.stonebrick,i,i);
    }
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    stoneBrick.carverHelper.register(stoneBrick,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockSnakestone=(BlockSnakestone)new BlockSnakestone(""String_Node_Str"").setBlockName(""String_Node_Str"");
    GameRegistry.registerBlock(blockSnakestone,ItemCarvable.class,blockSnakestone.getUnlocalizedName());
    Carving.chisel.addVariation(""String_Node_Str"",blockSnakestone,1,16);
    Carving.chisel.addVariation(""String_Node_Str"",blockSnakestone,13,17);
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockDirt=(BlockCarvable)new BlockCarvable(Material.ground).setHardness(0.5F).setStepSound(Block.soundTypeGravel).setBlockName(""String_Node_Str"");
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.dirt,0,0);
    blockDirt.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockDirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockDirt.carverHelper.register(blockDirt,""String_Node_Str"");
    blockDirt.setHarvestLevel(""String_Node_Str"",0);
    OreDictionary.registerOre(""String_Node_Str"",blockDirt);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockIce=(BlockMarbleIce)new BlockMarbleIce().setHardness(0.5F).setLightOpacity(3).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.ice,0,0);
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockIce.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockIce.carverHelper.register(blockIce,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      blockIcePillar=(BlockMarbleIce)new BlockMarbleIce().setHardness(0.5F).setLightOpacity(3).setStepSound(Block.soundTypeGlass);
      blockIcePillar.carverHelper.setChiselBlockName(""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
      blockIcePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      blockIcePillar.carverHelper.register(blockIcePillar,""String_Node_Str"");
      Carving.chisel.setGroupClass(""String_Node_Str"",""String_Node_Str"");
    }
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      BlockMarbleStairsMaker makerIceStairs=new BlockMarbleStairsMaker(Blocks.ice);
      makerIceStairs.carverHelper.setChiselBlockName(""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,Blocks.ice);
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      makerIceStairs.create(new BlockMarbleStairsMakerCreator(){
        @Override public BlockMarbleStairs create(        Block block,        int meta,        CarvableHelper helper){
          return new BlockMarbleIceStairs(block,meta,helper);
        }
      }
,""String_Node_Str"");
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    String[] plank_names={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] plank_ucnames={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    for (int i=0; i < 6; i++) {
      String n=plank_names[i];
      String u=plank_ucnames[i];
      blockPlanks[i]=(BlockCarvable)(new BlockCarvable()).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood);
      blockPlanks[i].carverHelper.setChiselBlockName(u + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",1,""String_Node_Str"" + n + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",2,""String_Node_Str"" + n + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",6,""String_Node_Str"" + n + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(u + ""String_Node_Str"",8,""String_Node_Str"" + n + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(u + ""String_Node_Str"",9,""String_Node_Str"" + n + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(u + ""String_Node_Str"",10,""String_Node_Str"" + n + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",11,""String_Node_Str"" + n + ""String_Node_Str"");
      blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",13,""String_Node_Str"" + n + ""String_Node_Str"");
      if (i < 4) {
        blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",3,""String_Node_Str"" + n + ""String_Node_Str"");
        blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",4,""String_Node_Str"" + n + ""String_Node_Str"");
        blockPlanks[i].carverHelper.addVariation(u + ""String_Node_Str"",5,""String_Node_Str"" + n + ""String_Node_Str"");
        blockPlanks[i].carverHelper.addVariation(u + ""String_Node_Str"",7,""String_Node_Str"" + n + ""String_Node_Str"");
        blockPlanks[i].carverHelper.addVariation(u + ""String_Node_Str"",12,""String_Node_Str"" + n + ""String_Node_Str"");
        blockPlanks[i].carverHelper.addVariation(u + ""String_Node_Str"",14,""String_Node_Str"" + n + ""String_Node_Str"");
        blockPlanks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",15,""String_Node_Str"" + n + ""String_Node_Str"");
      }
      blockPlanks[i].carverHelper.register(blockPlanks[i],""String_Node_Str"" + n);
      Carving.chisel.addVariation(""String_Node_Str"" + n,Blocks.planks,i,0);
      Blocks.planks.setHarvestLevel(""String_Node_Str"",0,i);
      blockPlanks[i].setHarvestLevel(""String_Node_Str"",0);
      Carving.chisel.setVariationSound(""String_Node_Str"" + n,""String_Node_Str"");
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockObsidian=(BlockCarvable)new BlockCarvable().setHardness(50.0F).setResistance(2000.0F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.obsidian,0,0);
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockObsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockObsidian.carverHelper.register(blockObsidian,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockObsidianSnakestone=(BlockSnakestoneObsidian)new BlockSnakestoneObsidian(""String_Node_Str"").setBlockName(""String_Node_Str"").setHardness(50.0F).setResistance(2000.0F);
    GameRegistry.registerBlock(blockObsidianSnakestone,ItemCarvable.class,blockObsidianSnakestone.getUnlocalizedName());
    Carving.chisel.addVariation(""String_Node_Str"",blockObsidianSnakestone,1,16);
    Carving.chisel.addVariation(""String_Node_Str"",blockObsidianSnakestone,13,17);
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockPaneIron=(BlockCarvablePane)new BlockCarvablePane(Material.iron,true).setHardness(0.3F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.iron_bars,0,0);
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockPaneIron.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockPaneIron.carverHelper.register(blockPaneIron,""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockPaneGlass=(BlockCarvablePane)new BlockCarvablePane(Material.glass,false).setHardness(0.3F).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.glass_pane,0,0);
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
    blockPaneGlass.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
    blockPaneGlass.carverHelper.register(blockPaneGlass,""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockRedstone=(BlockCarvablePowered)(new BlockCarvablePowered(Material.iron)).setHardness(5.0F).setResistance(10.0F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.redstone_block,0,0);
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
    blockRedstone.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
    blockRedstone.carverHelper.register(blockRedstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockHolystone=(BlockHolystone)new BlockHolystone(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundHolystoneFootstep);
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockHolystone.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockHolystone.carverHelper.register(blockHolystone,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockHolystone);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockLavastone=(BlockLavastone)new BlockLavastone(Material.rock,""String_Node_Str"").setHardness(2.0F).setResistance(10F);
    blockLavastone.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockLavastone.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockLavastone.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockLavastone.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockLavastone.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockLavastone.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockLavastone.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockLavastone.carverHelper.register(blockLavastone,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockLavastone);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockFft=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10F);
    blockFft.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
    blockFft.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
    blockFft.carverHelper.register(blockFft,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockFft);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockCarpet=(BlockCarvable)new BlockCarvable(Material.cloth).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeCloth);
    blockCarpet.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
    blockCarpet.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
    blockCarpet.carverHelper.forbidChiseling=true;
    blockCarpet.carverHelper.register(blockCarpet,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockCarpet);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockCarpetFloor=(BlockMarbleCarpet)new BlockMarbleCarpet(Material.cloth).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeCloth);
    blockCarpetFloor.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
    blockCarpetFloor.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
    blockCarpetFloor.carverHelper.forbidChiseling=true;
    blockCarpetFloor.carverHelper.register(blockCarpetFloor,""String_Node_Str"");
    for (int i=0; i < 16; i++) {
      String group=""String_Node_Str"" + i;
      Carving.needle.addVariation(group,Blocks.carpet,i,0);
      Carving.needle.addVariation(group,blockCarpetFloor,i,2);
      Carving.needle.addVariation(group,blockCarpet,i,1);
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockBookshelf=(BlockCarvable)new BlockMarbleBookshelf().setHardness(1.5F).setStepSound(Block.soundTypeWood);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.bookshelf,0,0);
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockBookshelf.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockBookshelf.carverHelper.register(blockBookshelf,""String_Node_Str"");
    blockBookshelf.setHarvestLevel(""String_Node_Str"",0);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockTyrian=(BlockCarvable)new BlockCarvable(Material.iron).setHardness(5.0F).setResistance(10.0F).setStepSound(Block.soundTypeMetal);
    blockTyrian.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
    blockTyrian.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
    blockTyrian.carverHelper.register(blockTyrian,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockTyrian);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockTemple=(BlockCarvable)new BlockEldritch().setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundTempleFootstep);
    blockTemple.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
    blockTemple.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
    blockTemple.carverHelper.register(blockTemple,""String_Node_Str"");
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      blockTempleMossy=(BlockCarvable)new BlockEldritch().setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundTempleFootstep);
      blockTempleMossy.carverHelper.setChiselBlockName(""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",1,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",2,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",3,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",4,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",5,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",6,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",7,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",8,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",9,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",10,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",11,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",12,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",13,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",14,""String_Node_Str"");
      blockTempleMossy.carverHelper.addVariation(""String_Node_Str"",15,""String_Node_Str"");
      blockTempleMossy.carverHelper.register(blockTempleMossy,""String_Node_Str"");
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockCloud=(BlockCloud)new BlockCloud().setHardness(0.2F).setLightOpacity(3).setStepSound(Block.soundTypeCloth);
    blockCloud.carverHelper.addVariation(""String_Node_Str"",0,""String_Node_Str"");
    blockCloud.carverHelper.register(blockCloud,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockCloud);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockFactory=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundMetalFootstep);
    blockFactory.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    blockFactory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    blockFactory.carverHelper.register(blockFactory,""String_Node_Str"");
  }
  String[] sGNames=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  if (Configurations.featureEnabled(""String_Node_Str""))   for (int i=0; i < 16; i++) {
    String blockName=""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
    String oreName=""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
    String texName=""String_Node_Str"" + sGNames[i].toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    int glassPrefix=(i & 3) << 2;
    int glassId=i >> 2;
    Carving.chisel.addVariation(blockName,Blocks.stained_glass,i,0);
    if (glassPrefix == 0) {
      blockStainedGlass[glassId]=(BlockCarvableGlass)new BlockCarvableGlass().setStained(true).setHardness(0.3F).setStepSound(Block.soundTypeGlass).setBlockName(""String_Node_Str"");
      blockStainedGlass[glassId].carverHelper.registerBlock(blockStainedGlass[glassId],blockName);
    }
    blockStainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix,texName + ""String_Node_Str"");
    blockStainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 1,texName + ""String_Node_Str"");
    blockStainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 2,texName + ""String_Node_Str"");
    blockStainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 3,texName + ""String_Node_Str"");
    OreDictionary.registerOre(oreName,new ItemStack(Blocks.stained_glass,1,i));
    Carving.chisel.registerOre(blockName,oreName);
    for (    CarvableVariation cv : blockStainedGlass[glassId].carverHelper.variations) {
      if (cv.metadata < glassPrefix || cv.metadata >= glassPrefix + 4)       continue;
      blockStainedGlass[glassId].carverHelper.registerVariation(blockName,cv,blockStainedGlass[glassId],cv.metadata);
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str""))   for (int i=0; i < 16; i++) {
    String blockName=""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
    String oreName=""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
    String texName=""String_Node_Str"" + sGNames[i].toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    Carving.chisel.addVariation(blockName,Blocks.stained_glass_pane,i,0);
    int glassPrefix=(i & 1) << 3;
    int glassId=i >> 1;
    if (glassPrefix == 0) {
      blockStainedGlassPane[glassId]=(BlockCarvablePane)new BlockCarvablePane(Material.glass,false).setStained(true).setHardness(0.3F).setStepSound(Block.soundTypeGlass).setBlockName(""String_Node_Str"");
      blockStainedGlassPane[glassId].carverHelper.registerBlock(blockStainedGlassPane[glassId],blockName);
      blockStainedGlassPane[glassId].carverHelper.blockName=""String_Node_Str"";
    }
    blockStainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix,texName + ""String_Node_Str"");
    blockStainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 1,texName + ""String_Node_Str"");
    blockStainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 2,texName + ""String_Node_Str"");
    blockStainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 3,texName + ""String_Node_Str"");
    blockStainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 4,texName + ""String_Node_Str"");
    blockStainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 5,texName + ""String_Node_Str"");
    OreDictionary.registerOre(oreName,new ItemStack(Blocks.stained_glass_pane,1,i));
    Carving.chisel.registerOre(blockName,oreName);
    for (    CarvableVariation cv : blockStainedGlassPane[glassId].carverHelper.variations) {
      if (cv.metadata < glassPrefix || cv.metadata >= glassPrefix + 8)       continue;
      blockStainedGlassPane[glassId].carverHelper.registerVariation(blockName,cv,blockStainedGlassPane[glassId],cv.metadata);
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockPaperwall=(BlockCarvablePane)new BlockCarvablePane(Material.ground,true).setCreativeTab(Chisel.tabChisel).setHardness(0.5F).setResistance(10F);
    blockPaperwall.carverHelper.setChiselBlockName(""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    blockPaperwall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    blockPaperwall.carverHelper.register(blockPaperwall,""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    blockWoolenClay=(BlockCarvable)new BlockCarvable().setCreativeTab(Chisel.tabChisel).setHardness(2F).setResistance(10F);
    blockWoolenClay.carverHelper.setChiselBlockName(""String_Node_Str"");
    for (int i=0; i < 16; i++)     blockWoolenClay.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str"" + i + ""String_Node_Str""),i,""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    blockWoolenClay.carverHelper.register(blockWoolenClay,""String_Node_Str"");
  }
  Blocks.stone.setHarvestLevel(""String_Node_Str"",0,0);
}",0.9975545778511636
34496,"@Override public void harvestBlock(World par1World,EntityPlayer par2EntityPlayer,int par3,int par4,int par5,int par6){
  if (!Chisel.dropIceShards) {
    super.harvestBlock(par1World,par2EntityPlayer,par3,par4,par5,par6);
    return;
  }
  par2EntityPlayer.addStat(StatList.mineBlockStatArray[Block.getIdFromBlock(this)],1);
  par2EntityPlayer.addExhaustion(0.025F);
  if (par1World.isRemote)   return;
  if (this.canSilkHarvest(par1World,par2EntityPlayer,par3,par4,par5,par6) && EnchantmentHelper.getSilkTouchModifier(par2EntityPlayer)) {
    ItemStack itemstack=this.createStackedBlock(par6);
    if (itemstack != null) {
      this.dropBlockAsItem(par1World,par3,par4,par5,itemstack);
    }
  }
 else {
    int i1=EnchantmentHelper.getFortuneModifier(par2EntityPlayer);
    this.dropBlockAsItem(par1World,par3,par4,par5,par6,i1);
  }
}","@Override public void harvestBlock(World par1World,EntityPlayer par2EntityPlayer,int par3,int par4,int par5,int par6){
  super.harvestBlock(par1World,par2EntityPlayer,par3,par4,par5,par6);
  return;
}",0.3853564547206166
34497,"public BlockLavastone(Material mat,String baseIcon){
  super(mat,baseIcon);
}","public BlockLavastone(Material mat,String baseIcon){
  super(mat,baseIcon);
  setLightLevel(1F);
}",0.88
34498,"@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hx,float hy,float hz){
  BlockMarbleSlab block=(BlockMarbleSlab)Block.getBlockFromItem(this);
  Block targetBlock=world.getBlock(x,y,z);
  int meta=world.getBlockMetadata(x,y,z);
  boolean metaMatches=meta == stack.getItemDamage();
  if (metaMatches && side == 0 && targetBlock.equals(block.top)) {
    world.setBlock(x,y,z,block.master,meta,2);
    return true;
  }
 else   if (metaMatches && side == 1 && targetBlock.equals(block.bottom)) {
    world.setBlock(x,y,z,block.master,meta,2);
    return true;
  }
  boolean result=super.onItemUse(stack,player,world,x,y,z,side,hz,hy,hz);
switch (side) {
case 0:
    --y;
  break;
case 1:
++y;
break;
case 2:
--z;
break;
case 3:
++z;
break;
case 4:
--x;
break;
case 5:
++x;
break;
}
targetBlock=world.getBlock(x,y,z);
meta=world.getBlockMetadata(x,y,z);
if (!result && (targetBlock.equals(block.top) || targetBlock.equals(block.bottom)) && meta == stack.getItemDamage()) {
world.setBlock(x,y,z,block.master,meta,2);
return true;
}
if (!result) return false;
if (side != 0 && (side == 1 || hy <= 0.5D)) return true;
world.setBlock(x,y,z,block.top,meta,2);
return true;
}","@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hx,float hy,float hz){
  BlockMarbleSlab block=(BlockMarbleSlab)Block.getBlockFromItem(this);
  Block targetBlock=world.getBlock(x,y,z);
  int meta=world.getBlockMetadata(x,y,z);
  boolean metaMatches=meta == stack.getItemDamage();
  if (metaMatches && side == 0 && targetBlock.equals(block.top)) {
    world.setBlock(x,y,z,block.master,meta,2);
    return true;
  }
 else   if (metaMatches && side == 1 && targetBlock.equals(block.bottom)) {
    world.setBlock(x,y,z,block.master,meta,2);
    return true;
  }
  boolean result=super.onItemUse(stack,player,world,x,y,z,side,hz,hy,hz);
switch (side) {
case 0:
    --y;
  break;
case 1:
++y;
break;
case 2:
--z;
break;
case 3:
++z;
break;
case 4:
--x;
break;
case 5:
++x;
break;
}
targetBlock=world.getBlock(x,y,z);
meta=world.getBlockMetadata(x,y,z);
if (!result && (targetBlock.equals(block.top) || targetBlock.equals(block.bottom)) && meta == stack.getItemDamage()) {
world.setBlock(x,y,z,block.master,meta,2);
return true;
}
if (!result) return false;
if (side != 0 && (side == 1 || hy <= 0.5D)) return true;
return true;
}",0.9834847233691164
34499,"public static <Q extends Quantity<Q>>String format(Q quantity,int digitCount,boolean keepTraillingZero,boolean displayUnit,Unit<Q> ptargetUnit){
  String result=StringUtils.EMPTY;
  Unit<Q> localTargetUnit=ptargetUnit;
  DecimalFormat df=new DecimalFormat(""String_Node_Str"",DecimalFormatSymbols.getInstance(Locale.ENGLISH));
  if (keepTraillingZero) {
    df.setMinimumFractionDigits(digitCount);
  }
  df.setMaximumFractionDigits(digitCount);
  result=df.format(quantity.doubleValue(localTargetUnit));
  if (displayUnit) {
    result+=quantity.getUnit().getSymbol();
  }
  return result;
}","public static <Q extends Quantity<Q>>String format(Q quantity,int digitCount,boolean keepTraillingZero,boolean displayUnit,Unit<Q> ptargetUnit){
  String result=StringUtils.EMPTY;
  Unit<Q> localTargetUnit=ptargetUnit;
  DecimalFormat df=new DecimalFormat(""String_Node_Str"",DecimalFormatSymbols.getInstance(Locale.ENGLISH));
  if (keepTraillingZero) {
    df.setMinimumFractionDigits(digitCount);
  }
  df.setMaximumFractionDigits(digitCount);
  result=df.format(quantity.doubleValue(localTargetUnit));
  if (displayUnit) {
    result+=ptargetUnit.getSymbol();
  }
  return result;
}",0.9752770673486786
34500,"/** 
 * (inheritDoc)
 * @see org.goko.core.common.service.IGokoService#start()
 */
@Override public void startService() throws GkException {
  this.inputListeners=new ArrayList<WeakReference<IConnectionDataListener>>();
  this.outputListeners=new ArrayList<WeakReference<IConnectionDataListener>>();
  this.connectionListeners=new ArrayList<WeakReference<IConnectionListener>>();
}","/** 
 * (inheritDoc)
 * @see org.goko.core.common.service.IGokoService#start()
 */
@Override public void startService() throws GkException {
  this.inputListeners=new CopyOnWriteArrayList<WeakReference<IConnectionDataListener>>();
  this.outputListeners=new CopyOnWriteArrayList<WeakReference<IConnectionDataListener>>();
  this.connectionListeners=new ArrayList<WeakReference<IConnectionListener>>();
}",0.971938775510204
34501,"/** 
 * @param controllerService the controllerService to set
 */
public void setControllerAdapter(IFourAxisControllerAdapter controllerService){
  this.controllerAdapter=controllerService;
}","/** 
 * @param controllerService the controllerService to set
 * @throws GkException GkException 
 */
public void setControllerAdapter(IFourAxisControllerAdapter controllerService) throws GkException {
  this.controllerAdapter=controllerService;
  if (toolRenderer == null) {
    toolRenderer=new ToolRenderer(getControllerAdapter());
    addRenderer(toolRenderer);
  }
}",0.6797153024911032
34502,"/** 
 * (inheritDoc)
 * @see org.goko.core.common.service.IGokoService#start()
 */
@Override public void start() throws GkException {
  JoglViewerSettings.getInstance().addPropertyChangeListener(this);
  jogWarnFont=new Font(""String_Node_Str"",Font.BOLD,16);
  LOG.info(""String_Node_Str"" + this.getServiceId());
  this.gridRenderer=new GridRenderer();
  addRenderer(gridRenderer);
  TextRenderer xTextRenderer=new TextRenderer(""String_Node_Str"",2,new Point3d(10,-0.1,0),TextRenderer.MIDDLE | TextRenderer.LEFT);
  xTextRenderer.setColor(1,0,0,1);
  addRenderer(new ArrowRenderer(new Point3d(10,0,0),new Vector3d(1,0,0),new Vector3d(0,1,0),new Color4f(1,0,0,1)));
  TextRenderer yTextRenderer=new TextRenderer(""String_Node_Str"",2,new Point3d(-0.5,10,0),TextRenderer.BOTTOM | TextRenderer.LEFT);
  yTextRenderer.setColor(0,1,0,1);
  addRenderer(new ArrowRenderer(new Point3d(0,10,0),new Vector3d(0,1,0),new Vector3d(1,0,0),new Color4f(0,1,0,1)));
  TextRenderer zTextRenderer=new TextRenderer(""String_Node_Str"",2,new Point3d(-0.5,0,10),new Vector3d(1,0,0),new Vector3d(0,0,1),TextRenderer.BOTTOM | TextRenderer.LEFT);
  addRenderer(new ArrowRenderer(new Point3d(0,0,10),new Vector3d(0,0,1),new Vector3d(1,0,0),new Color4f(0,0,1,1)));
  zTextRenderer.setColor(0,0,1,1);
  addRenderer(xTextRenderer);
  addRenderer(yTextRenderer);
  addRenderer(zTextRenderer);
  zeroRenderer=new FourAxisRenderer(10,JoglViewerSettings.getInstance().getRotaryAxisDirection(),new Color3f(1,0,0),new Color3f(0,1,0),new Color3f(0,0,1),new Color3f(1,1,0));
  zeroRenderer.setDisplayRotaryAxis(JoglViewerSettings.getInstance().isRotaryAxisEnabled());
  addRenderer(zeroRenderer);
  toolRenderer=new ToolRenderer(getControllerAdapter());
  addRenderer(toolRenderer);
}","/** 
 * (inheritDoc)
 * @see org.goko.core.common.service.IGokoService#start()
 */
@Override public void start() throws GkException {
  JoglViewerSettings.getInstance().addPropertyChangeListener(this);
  jogWarnFont=new Font(""String_Node_Str"",Font.BOLD,16);
  LOG.info(""String_Node_Str"" + this.getServiceId());
  this.gridRenderer=new GridRenderer();
  addRenderer(gridRenderer);
  TextRenderer xTextRenderer=new TextRenderer(""String_Node_Str"",2,new Point3d(10,-0.1,0),TextRenderer.MIDDLE | TextRenderer.LEFT);
  xTextRenderer.setColor(1,0,0,1);
  addRenderer(new ArrowRenderer(new Point3d(10,0,0),new Vector3d(1,0,0),new Vector3d(0,1,0),new Color4f(1,0,0,1)));
  TextRenderer yTextRenderer=new TextRenderer(""String_Node_Str"",2,new Point3d(-0.5,10,0),TextRenderer.BOTTOM | TextRenderer.LEFT);
  yTextRenderer.setColor(0,1,0,1);
  addRenderer(new ArrowRenderer(new Point3d(0,10,0),new Vector3d(0,1,0),new Vector3d(1,0,0),new Color4f(0,1,0,1)));
  TextRenderer zTextRenderer=new TextRenderer(""String_Node_Str"",2,new Point3d(-0.5,0,10),new Vector3d(1,0,0),new Vector3d(0,0,1),TextRenderer.BOTTOM | TextRenderer.LEFT);
  addRenderer(new ArrowRenderer(new Point3d(0,0,10),new Vector3d(0,0,1),new Vector3d(1,0,0),new Color4f(0,0,1,1)));
  zTextRenderer.setColor(0,0,1,1);
  addRenderer(xTextRenderer);
  addRenderer(yTextRenderer);
  addRenderer(zTextRenderer);
  zeroRenderer=new FourAxisRenderer(10,JoglViewerSettings.getInstance().getRotaryAxisDirection(),new Color3f(1,0,0),new Color3f(0,1,0),new Color3f(0,0,1),new Color3f(1,1,0));
  zeroRenderer.setDisplayRotaryAxis(JoglViewerSettings.getInstance().isRotaryAxisEnabled());
  addRenderer(zeroRenderer);
}",0.9746611667648792
34503,"protected void load(String bffFileName) throws GkTechnicalException {
  try {
    URL url=new URL(""String_Node_Str"" + bffFileName);
    InputStream uStream=url.openConnection().getInputStream();
    byte[] head=new byte[20];
    int bytesRead=uStream.read(head,0,20);
    LOG.info(""String_Node_Str"");
    if (bytesRead < 20) {
      throw new IOException(""String_Node_Str"");
    }
    ByteBuffer headBuf=ByteBuffer.wrap(head);
    int h0=getUnsignedByteVal(headBuf.get());
    int h1=getUnsignedByteVal(headBuf.get());
    if (h0 != 0xBF || h1 != 0xF2) {
      uStream.close();
      throw new IOException(""String_Node_Str"");
    }
    LOG.info(""String_Node_Str"");
    textureWidth=flipEndian(headBuf.getInt());
    textureHeight=flipEndian(headBuf.getInt());
    LOG.info(""String_Node_Str"" + textureWidth);
    LOG.info(""String_Node_Str"" + textureHeight);
    cellWidth=flipEndian(headBuf.getInt());
    cellHeight=flipEndian(headBuf.getInt());
    LOG.info(""String_Node_Str"" + cellWidth);
    LOG.info(""String_Node_Str"" + cellHeight);
    if (cellWidth <= 0 || cellHeight <= 0) {
      throw new IOException(""String_Node_Str"");
    }
    columnCount=textureWidth / cellWidth;
    bitsPerPixel=getUnsignedByteVal(headBuf.get());
    firstCharOffset=getUnsignedByteVal(headBuf.get());
    LOG.info(""String_Node_Str"" + columnCount);
    LOG.info(""String_Node_Str"" + bitsPerPixel);
    LOG.info(""String_Node_Str"" + firstCharOffset);
    for (int wLoop=0; wLoop < 256; ++wLoop) {
      charWidth[wLoop]=uStream.read();
    }
    int bitLen=(textureHeight * textureWidth) * (bitsPerPixel / 8);
    byte bits[]=new byte[bitLen];
    LOG.info(""String_Node_Str"" + bitLen);
    int received=0;
    do {
      received+=uStream.read(bits,received,bitLen - received);
    }
 while (uStream.available() > 0);
    pix=ByteBuffer.allocate(bits.length);
    pix.rewind();
    int lineLen=textureWidth * (bitsPerPixel / 8);
    LOG.info(""String_Node_Str"" + lineLen);
    for (int lines=textureHeight - 1; lines > 0; --lines) {
      pix.put(bits,lines * lineLen,lineLen);
    }
    pix.rewind();
    uStream.close();
  }
 catch (  IOException e) {
    throw new GkTechnicalException(e);
  }
}","protected void load(String bffFileName) throws GkTechnicalException {
  try {
    URL url=new URL(""String_Node_Str"" + bffFileName);
    InputStream uStream=url.openConnection().getInputStream();
    byte[] head=new byte[20];
    int bytesRead=uStream.read(head,0,20);
    if (bytesRead < 20) {
      throw new IOException(""String_Node_Str"");
    }
    ByteBuffer headBuf=ByteBuffer.wrap(head);
    int h0=getUnsignedByteVal(headBuf.get());
    int h1=getUnsignedByteVal(headBuf.get());
    if (h0 != 0xBF || h1 != 0xF2) {
      uStream.close();
      throw new IOException(""String_Node_Str"");
    }
    textureWidth=flipEndian(headBuf.getInt());
    textureHeight=flipEndian(headBuf.getInt());
    cellWidth=flipEndian(headBuf.getInt());
    cellHeight=flipEndian(headBuf.getInt());
    if (cellWidth <= 0 || cellHeight <= 0) {
      throw new IOException(""String_Node_Str"");
    }
    columnCount=textureWidth / cellWidth;
    bitsPerPixel=getUnsignedByteVal(headBuf.get());
    firstCharOffset=getUnsignedByteVal(headBuf.get());
    for (int wLoop=0; wLoop < 256; ++wLoop) {
      charWidth[wLoop]=uStream.read();
    }
    int bitLen=(textureHeight * textureWidth) * (bitsPerPixel / 8);
    byte bits[]=new byte[bitLen];
    int received=0;
    do {
      received+=uStream.read(bits,received,bitLen - received);
    }
 while (uStream.available() > 0);
    pix=ByteBuffer.allocate(bits.length);
    pix.rewind();
    int lineLen=textureWidth * (bitsPerPixel / 8);
    for (int lines=textureHeight - 1; lines > 0; --lines) {
      pix.put(bits,lines * lineLen,lineLen);
    }
    pix.rewind();
    uStream.close();
  }
 catch (  IOException e) {
    throw new GkTechnicalException(e);
  }
}",0.7495476867407599
34504,"public void onResult(int id,Response response){
  try {
    int httpStatus=response.getStatusCode();
    log.logEndProcessingStepNonBlocking(id,httpStatus);
    int noOfRes=noOfResults.incrementAndGet();
    result+=response.getResponseBody() + '\n';
    if (noOfRes >= noOfCalls) {
      onAllCompleted();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public void onResult(int id,Response response){
  try {
    int httpStatus=response.getStatusCode();
    log.logEndProcessingStepNonBlocking(id,httpStatus);
    int noOfRes=noOfResults.incrementAndGet();
synchronized (result) {
      result+=response.getResponseBody() + '\n';
    }
    if (noOfRes >= noOfCalls) {
      onAllCompleted();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.96
34505,"private CreateServiceInstanceRequest buildCreateRequest(){
  return new CreateServiceInstanceRequest(SVC_DEF_ID,SVC_PLAN_ID,""String_Node_Str"",""String_Node_Str"").withServiceInstanceId(ServiceInstanceFixture.getServiceInstance().getServiceInstanceId());
}","private CreateServiceInstanceRequest buildCreateRequest(){
  return new CreateServiceInstanceRequest(SVC_DEF_ID,SVC_PLAN_ID,""String_Node_Str"",""String_Node_Str"",null).withServiceInstanceId(ServiceInstanceFixture.getServiceInstance().getServiceInstanceId());
}",0.9902152641878668
34506,"protected FutureEx<String> pushFile(final FileBlob blob,final TaskService taskService){
  final FutureBox<String> remotePath=new FutureBox<String>();
  remotePath.addListener(new Box<String>(){
    @Override public void setData(    String data){
      uploadLimit.release();
    }
    @Override public void setError(    Throwable e){
      uploadLimit.release();
    }
  }
);
  try {
    uploadLimit.acquire();
    connection.pushFile(cachePath + ""String_Node_Str"" + blob.getContentHash()+ ""String_Node_Str""+ blob.getFileName(),new FileHandler(){
      @Override public void failed(      String path,      String error){
        remotePath.setError(new RuntimeException(""String_Node_Str"" + error));
      }
      @Override public void confirmed(      String path,      long size){
        System.out.println(""String_Node_Str"" + path);
        remotePath.setData(path);
      }
      @Override public void accepted(      final OutputStream out){
        System.out.println(""String_Node_Str"");
        taskService.schedule(new TaskService.Task(){
          @Override public void run(){
            try {
              StreamHelper.copy(blob.getContent(),out);
              out.close();
            }
 catch (            IOException e) {
              remotePath.setError(e);
            }
          }
          @Override public void interrupt(          Thread taskThread){
          }
          @Override public void canceled(){
            remotePath.setErrorIfWaiting(new RejectedExecutionException());
          }
        }
);
      }
    }
);
  }
 catch (  IOException e) {
    remotePath.setError(e);
  }
catch (  InterruptedException e) {
    return FutureBox.errorFuture(e);
  }
  return remotePath;
}","protected FutureEx<String> pushFile(final FileBlob blob,final TaskService taskService){
  final FutureBox<String> remotePath=new FutureBox<String>();
  remotePath.addListener(new Box<String>(){
    @Override public void setData(    String data){
      uploadLimit.release();
    }
    @Override public void setError(    Throwable e){
      uploadLimit.release();
    }
  }
);
  try {
    uploadLimit.acquire();
    connection.pushFile(cachePath + ""String_Node_Str"" + blob.getContentHash()+ ""String_Node_Str""+ blob.getFileName(),new FileHandler(){
      @Override public void failed(      String path,      String error){
        remotePath.setError(new RuntimeException(""String_Node_Str"" + error));
      }
      @Override public void confirmed(      String path,      long size){
        remotePath.setData(path);
      }
      @Override public void accepted(      final OutputStream out){
        taskService.schedule(new TaskService.Task(){
          @Override public void run(){
            try {
              StreamHelper.copy(blob.getContent(),out);
              out.close();
            }
 catch (            IOException e) {
              remotePath.setError(e);
            }
          }
          @Override public void interrupt(          Thread taskThread){
          }
          @Override public void canceled(){
            remotePath.setErrorIfWaiting(new RejectedExecutionException());
          }
        }
);
      }
    }
);
  }
 catch (  IOException e) {
    remotePath.setError(e);
  }
catch (  InterruptedException e) {
    return FutureBox.errorFuture(e);
  }
  return remotePath;
}",0.9695140356172652
34507,"@Override public void confirmed(String path,long size){
  System.out.println(""String_Node_Str"" + path);
  remotePath.setData(path);
}","@Override public void confirmed(String path,long size){
  remotePath.setData(path);
}",0.7798165137614679
34508,"public RemoteNode setSshPrivateKey(String path){
  config.setProp(SSH_KEY_FILE,path);
  return this;
}","public RemoteNode setSshPrivateKey(String path){
  config.setProp(SSH_KEY_FILE,path);
  config.setProp(SshSpiConf.SSH_PRIVATE_KEY_FILE,path);
  return this;
}",0.7846153846153846
34509,"public RemoteNode useSimpleRemoting(){
  setRemoteNodeType();
  setRemoteJarCachePath(""String_Node_Str"");
  config.setProp(SshSpiConf.REMOTE_FALLBACK_JVM_EXEC,""String_Node_Str"");
  setHostsConfigFile(""String_Node_Str"");
  setRemoteHost(""String_Node_Str"");
  return this;
}","public RemoteNode useSimpleRemoting(){
  setRemoteNodeType();
  setRemoteJarCachePath(""String_Node_Str"");
  config.setProp(SshSpiConf.REMOTE_FALLBACK_JVM_EXEC,""String_Node_Str"");
  setHostsConfigFile(""String_Node_Str"");
  setRemoteHost(""String_Node_Str"");
  config.setConfigElement(""String_Node_Str"",new ViEngine.InitTimePragmaHandler());
  return this;
}",0.8676236044657097
34510,"@SuppressWarnings({""String_Node_Str""}) public Class[] toClassObjects(String[] names) throws ClassNotFoundException {
  Class[] classes=new Class[names.length];
  for (int i=0; i != names.length; ++i) {
    classes[i]=classForName(names[i]);
  }
  return classes;
}","@SuppressWarnings({""String_Node_Str""}) public Class[] toClassObjects(String[] names) throws ClassNotFoundException {
  Class[] classes=new Class[names.length];
  for (int i=0; i != names.length; ++i) {
    Class<?> c=ReflectionHelper.primitiveToClass(names[i]);
    classes[i]=c != null ? c : classForName(names[i]);
  }
  return classes;
}",0.8377483443708609
34511,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private Class<?>[] detectRemoteInterfaces(Class<?> objClass) throws IOException {
  Class<?>[] result;
  List<Class> iflist=new ArrayList<Class>();
  iflist.addAll(Arrays.asList(objClass.getInterfaces()));
  Iterator<Class> it=iflist.iterator();
  while (it.hasNext()) {
    Class intf=it.next();
    if (!isRemoteInterface(intf)) {
      it.remove();
      continue;
    }
    for (    Class other : iflist) {
      if (intf != other && intf.isAssignableFrom(other)) {
        it.remove();
      }
    }
  }
  if (iflist.isEmpty()) {
    for (    Class intf : objClass.getInterfaces()) {
      if (!isRemoteInterface(intf)) {
        iflist.add(intf);
      }
    }
    reduceSuperTypes(iflist);
  }
  if (iflist.isEmpty()) {
    throw new IOException(""String_Node_Str"" + objClass.getName());
  }
  result=iflist.toArray(new Class[iflist.size()]);
  return result;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) Class<?>[] detectRemoteInterfaces(Class<?> objClass) throws IOException {
  Class<?>[] result;
  List<Class<?>> iflist=new ArrayList<Class<?>>();
  collect(iflist,objClass);
  Iterator<Class<?>> it=iflist.iterator();
  while (it.hasNext()) {
    Class intf=it.next();
    if (!isRemoteInterface(intf)) {
      it.remove();
      continue;
    }
    for (    Class other : new ArrayList<Class<?>>(iflist)) {
      if (intf != other && intf.isAssignableFrom(other)) {
        it.remove();
      }
    }
  }
  if (iflist.isEmpty()) {
    for (    Class intf : objClass.getInterfaces()) {
      if (!isRemoteInterface(intf)) {
        iflist.add(intf);
      }
    }
    reduceSuperTypes(iflist);
  }
  if (iflist.isEmpty()) {
    throw new IOException(""String_Node_Str"" + objClass.getName());
  }
  result=iflist.toArray(new Class[iflist.size()]);
  return result;
}",0.911062906724512
34512,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void reduceSuperTypes(List<Class> iflist){
  Iterator<Class> it=iflist.iterator();
  while (it.hasNext()) {
    Class intf=it.next();
    for (    Class other : iflist) {
      if (intf != other && intf.isAssignableFrom(other)) {
        it.remove();
      }
    }
  }
}","private void reduceSuperTypes(List<Class<?>> iflist){
  Iterator<Class<?>> it=iflist.iterator();
  while (it.hasNext()) {
    Class<?> intf=it.next();
    for (    Class<?> other : iflist) {
      if (intf != other && intf.isAssignableFrom(other)) {
        it.remove();
      }
    }
  }
}",0.8288
34513,"private void enqueue(TaskWrapper wrapper,long delay,TimeUnit tu){
synchronized (this) {
    if (!terminated) {
      delegate.schedule(wrapper,delay,tu);
      return;
    }
  }
  wrapper.abort();
}","private void enqueue(TaskWrapper wrapper,long delay,TimeUnit tu){
synchronized (this) {
    if (!terminated) {
      tasks.add(wrapper);
      delegate.schedule(wrapper,delay,tu);
      return;
    }
  }
  wrapper.abort();
}",0.9383886255924172
34514,"@Override public void interrupt(Thread taskThread){
synchronized (this) {
    if (canceled) {
      return;
    }
  }
  task.interrupt(taskThread);
}","@Override public void interrupt(Thread taskThread){
synchronized (this) {
    if (canceled || finished) {
      return;
    }
  }
  task.interrupt(taskThread);
}",0.9612903225806452
34515,"public void stop(){
  try {
    queue.offer(STOP,1000,TimeUnit.SECONDS);
    while (queue != null) {
      Thread.sleep(50);
    }
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  NullPointerException e) {
  }
  stdErr.println(""String_Node_Str"");
  if (threadPool != null) {
    threadPool.shutdown();
    try {
      threadPool.awaitTermination(100,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
    }
  }
  while (true) {
    while (0 < kill(threadGroup) + removeShutdownHooks() + removeAppContexts()) {
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException e) {
      }
      ++shutdownRetry;
      if (shutdownRetry > 1000) {
        break;
      }
    }
    try {
      if (!threadGroup.isDestroyed()) {
        threadGroup.destroy();
      }
      break;
    }
 catch (    IllegalThreadStateException e) {
      stdErr.println(e);
    }
    if (shutdownRetry > 1000) {
      stdErr.println(""String_Node_Str"");
      break;
    }
  }
  cl=null;
  threadGroup=null;
  isolateControlThread=null;
  sysProps=null;
  stdErr.println(""String_Node_Str"");
  System.gc();
  Runtime.getRuntime().runFinalization();
}","public void stop(){
  try {
    queue.offer(STOP,1000,TimeUnit.SECONDS);
    while (queue != null) {
      Thread.sleep(50);
    }
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  NullPointerException e) {
  }
  stdErr.println(""String_Node_Str"");
  if (threadPool != null) {
    threadPool.shutdown();
    try {
      threadPool.awaitTermination(100,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
    }
  }
  while (true) {
    while (0 < kill(threadGroup) + removeShutdownHooks() + removeAppContexts()) {
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException e) {
      }
      ++shutdownRetry;
      if (shutdownRetry > 1000) {
        break;
      }
    }
    try {
      if (!threadGroup.isDestroyed()) {
        threadGroup.destroy();
      }
      break;
    }
 catch (    IllegalThreadStateException e) {
      stdErr.println(e);
    }
    if (shutdownRetry > 1000) {
      stdErr.println(""String_Node_Str"");
      break;
    }
  }
  threadKillers=null;
  cl=null;
  threadGroup=null;
  isolateControlThread=null;
  sysProps=null;
  stdErr.println(""String_Node_Str"");
  System.gc();
  Runtime.getRuntime().runFinalization();
}",0.9908256880733946
34516,"/** 
 * Creates   {@link ViManager} with {@link Isolate} provider.
 * @param packages - list of packages to ""isolate""
 */
public static ViManager createIsolateCloud(String... packages){
  return IsolateCloudFactory.createCloud(packages);
}","/** 
 * Creates   {@link ViManager} with {@link Isolate} provider.
 * @param packages - list of packages to ""isolate""
 */
@Deprecated public static ViManager createIsolateCloud(String... packages){
  throw new UnsupportedOperationException();
}",0.8033126293995859
34517,"@SuppressWarnings(""String_Node_Str"") private int kill(ThreadGroup tg){
  int threadCount=0;
  Thread[] threads=new Thread[2 * tg.activeCount()];
  int n=tg.enumerate(threads);
  for (int i=0; i != n; ++i) {
    ++threadCount;
    Thread t=threads[i];
    try {
      if (Runtime.getRuntime().removeShutdownHook(t)) {
        stdErr.println(""String_Node_Str"" + t.getName());
      }
    }
 catch (    IllegalStateException e) {
    }
    if (t.getState() != State.TERMINATED) {
      stdErr.println(""String_Node_Str"" + t.getName());
      try {
        t.resume();
      }
 catch (      Exception e) {
      }
      ;
      try {
        t.start();
      }
 catch (      Exception e) {
      }
      ;
      try {
        t.interrupt();
      }
 catch (      Exception e) {
      }
      ;
      try {
        t.stop(new ThreadDoomError());
      }
 catch (      IllegalStateException e) {
      }
      ;
    }
 else {
      if (shutdownRetry % 10 == 9) {
        stdErr.println(""String_Node_Str"" + t.getName());
      }
    }
    if (t.isAlive() && shutdownRetry > 24) {
      if (shutdownRetry > 10 && (shutdownRetry % 10 == 5)) {
        StackTraceElement[] trace=t.getStackTrace();
        for (        StackTraceElement e : trace) {
          stdErr.println(""String_Node_Str"" + e);
        }
      }
      try {
        try {
          t.interrupt();
        }
 catch (        Exception e) {
        }
        ;
        trySocketInterrupt(t);
        try {
          t.interrupt();
        }
 catch (        Exception e) {
        }
        ;
        try {
          t.stop(new ThreadDoomError());
        }
 catch (        IllegalStateException e) {
        }
        ;
      }
 catch (      Exception e) {
        stdErr.println(""String_Node_Str"" + e.toString());
      }
    }
  }
  ThreadGroup[] groups=new ThreadGroup[2 * tg.activeGroupCount()];
  n=tg.enumerate(groups);
  for (  ThreadGroup g : groups) {
    if (g != null) {
      threadCount+=kill(g);
    }
  }
  return threadCount;
}","private int kill(ThreadGroup tg){
  int threadCount=0;
  Thread[] threads=new Thread[2 * tg.activeCount()];
  int n=tg.enumerate(threads);
  for (int i=0; i != n; ++i) {
    ++threadCount;
    Thread t=threads[i];
    try {
      if (Runtime.getRuntime().removeShutdownHook(t)) {
        stdErr.println(""String_Node_Str"" + t.getName());
      }
    }
 catch (    IllegalStateException e) {
    }
    if (t.getState() != State.TERMINATED) {
      killThread(t,false);
    }
 else {
      if (shutdownRetry % 10 == 9) {
        stdErr.println(""String_Node_Str"" + t.getName());
      }
    }
    if (t.isAlive() && shutdownRetry > 24) {
      stdErr.println(""String_Node_Str"" + t.getName());
      if (shutdownRetry > 30 && (shutdownRetry % 10 == 5)) {
        StackTraceElement[] trace=t.getStackTrace();
        for (        StackTraceElement e : trace) {
          stdErr.println(""String_Node_Str"" + e);
        }
      }
      try {
        killThread(t,true);
      }
 catch (      Exception e) {
        stdErr.println(""String_Node_Str"" + e.toString());
      }
    }
  }
  ThreadGroup[] groups=new ThreadGroup[2 * tg.activeGroupCount()];
  n=tg.enumerate(groups);
  for (  ThreadGroup g : groups) {
    if (g != null) {
      threadCount+=kill(g);
    }
  }
  return threadCount;
}",0.4799025578562728
34518,"public ShareJreClasses(){
  try {
    jvmHome=new File(System.getProperty(""String_Node_Str"")).toURI().toURL();
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(e);
  }
}","public ShareJreClasses(){
  try {
    jvmHome=getJreRoot();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.778816199376947
34519,"@SuppressWarnings(""String_Node_Str"") private void tryStop(Thread thread){
  Object target=getField(thread,""String_Node_Str"");
  if (target != null) {
    try {
      Method m=target.getClass().getMethod(""String_Node_Str"");
      m.setAccessible(true);
      m.invoke(target);
      stdErr.println(""String_Node_Str"" + thread.getName());
    }
 catch (    Exception e) {
    }
  }
}","private void tryStop(Thread thread){
  Object target=getField(thread,""String_Node_Str"");
  if (target != null) {
    try {
      Method m=target.getClass().getMethod(""String_Node_Str"");
      m.setAccessible(true);
      m.invoke(target);
      stdErr.println(""String_Node_Str"" + thread.getName());
    }
 catch (    Exception e) {
    }
  }
}",0.9488243430152145
34520,"public void enableHeartbeatDeatchWatch(){
  Thread t=new Thread(){
    @Override public void run(){
      while (true) {
        Thread.currentThread().setName(""String_Node_Str"" + SimpleDateFormat.getDateTimeInstance().format(new Date()));
        long stale=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - lastHeartBeat);
        if (stale > heartBeatTimeout) {
          System.err.println(""String_Node_Str"");
          Runtime.getRuntime().halt(0);
        }
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
;
  t.setDaemon(true);
  t.setName(""String_Node_Str"");
  t.start();
}","public void enableHeartbeatDeatchWatch(){
  if (heartBeatTimeout != Integer.MAX_VALUE) {
    Thread t=new Thread(){
      @Override public void run(){
        while (true) {
          Thread.currentThread().setName(""String_Node_Str"" + SimpleDateFormat.getDateTimeInstance().format(new Date()));
          long stale=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - lastHeartBeat);
          if (stale > heartBeatTimeout) {
            System.err.println(""String_Node_Str"");
            Runtime.getRuntime().halt(0);
          }
          try {
            Thread.sleep(1000);
          }
 catch (          InterruptedException e) {
          }
        }
      }
    }
;
    t.setDaemon(true);
    t.setName(""String_Node_Str"");
    t.start();
  }
}",0.9081850533807828
34521,"public void init() throws JSchException, SftpException, IOException {
  sftp=(ChannelSftp)session.openChannel(""String_Node_Str"");
  sftp.connect();
  try {
    sftp.mkdir(agentHome);
  }
 catch (  SftpException e) {
  }
  sftp.cd(agentHome);
  agentHomePath=sftp.pwd();
  sftpMkdir(sftp,CACHE_PATH);
}","public void init() throws JSchException, SftpException, IOException {
  sftp=(ChannelSftp)session.openChannel(""String_Node_Str"");
  sftp.connect();
  try {
    sftp.mkdir(agentHome);
  }
 catch (  SftpException e) {
  }
  try {
    sftp.cd(agentHome);
  }
 catch (  SftpException e) {
    throw new SftpException(e.id,""String_Node_Str"" + agentHome + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
  }
  agentHomePath=sftp.pwd();
  sftpMkdir(sftp,CACHE_PATH);
}",0.7828348504551366
34522,"public void init() throws JSchException, SftpException, IOException, InterruptedException {
  remoteCache=new RemoteFileCache();
  remoteCache.setAgentHome(agentHome);
  remoteCache.setSession(getSession());
  remoteCache.init();
  initRemoteClassPath();
  ExecCommand halloWorldCmd=new ExecCommand(javaExecPath);
  halloWorldCmd.setWorkDir(agentHome);
  halloWorldCmd.addArg(""String_Node_Str"").addArg(bootJarPath).addArg(HalloWorld.class.getName());
  Process rp=createDirectProcess(halloWorldCmd);
  rp.getOutputStream().close();
  BackgroundStreamDumper.link(rp.getInputStream(),System.out,false);
  BackgroundStreamDumper.link(rp.getErrorStream(),System.err,false);
  int rcode=rp.waitFor();
  if (rcode != 0) {
    throw new IOException(""String_Node_Str"");
  }
  ;
  if (USE_EXEC_RELAY) {
    initControlSession();
  }
}","public void init() throws JSchException, SftpException, IOException, InterruptedException {
  remoteCache=new RemoteFileCache();
  remoteCache.setAgentHome(agentHome);
  remoteCache.setSession(getSession());
  remoteCache.init();
  initRemoteClassPath();
  ExecCommand halloWorldCmd=new ExecCommand(javaExecPath);
  halloWorldCmd.setWorkDir(agentHome);
  halloWorldCmd.addArg(""String_Node_Str"").addArg(bootJarPath).addArg(HalloWelt.class.getName());
  Process rp=createDirectProcess(halloWorldCmd);
  rp.getOutputStream().close();
  BackgroundStreamDumper.link(rp.getInputStream(),System.out,false);
  BackgroundStreamDumper.link(rp.getErrorStream(),System.err,false);
  int rcode=rp.waitFor();
  if (rcode != 0) {
    throw new IOException(""String_Node_Str"");
  }
  ;
  if (USE_EXEC_RELAY) {
    initControlSession();
  }
}",0.9957550030321408
34523,"private int bufferRead(byte[] target,int offs,int size) throws IOException {
  int pending=waitForData();
  if (pending == 0) {
    return -1;
  }
  int run=Math.min(size,pending);
  run=Math.min(run,buffer.length - in);
  System.arraycopy(buffer,in,target,offs,run);
  in=(in + run) % buffer.length;
  readNotify(run);
  return run;
}","private int bufferRead(byte[] target,int offs,int size) throws IOException {
  if (size == 0) {
    if (closedByWriter) {
      return -1;
    }
 else {
      return 0;
    }
  }
  int pending=waitForData();
  if (pending == 0) {
    return -1;
  }
  int run=Math.min(size,pending);
  run=Math.min(run,buffer.length - in);
  System.arraycopy(buffer,in,target,offs,run);
  in=(in + run) % buffer.length;
  readNotify(run);
  return run;
}",0.8678756476683938
34524,"@Override public void streamError(DuplexStream socket,Object stream,Exception error){
synchronized (pingSingnal) {
    pingSingnal.notifyAll();
  }
  try {
    if (socket != null) {
      socket.close();
    }
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + socket,e);
  }
}","@Override public void streamError(DuplexStream socket,Object stream,Exception error){
  LOGGER.warn(""String_Node_Str"" + error.toString());
synchronized (pingSingnal) {
    pingSingnal.notifyAll();
  }
  try {
    if (socket != null) {
      socket.close();
    }
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + socket,e);
  }
}",0.9173166926677068
34525,"public boolean hasName(){
  return name != null && name.hasFullName();
}","public boolean hasName(){
  return name != null && name.hasName();
}",0.9714285714285714
34526,"public boolean hasExpirationDate(){
  return expirationDate != null;
}","public boolean hasExpirationDate(){
  return expirationDate != null && expirationDate.hasExpirationDate();
}",0.7865168539325843
34527,"public BankCard(final PrimaryAccountNumber pan,final Name name,final ExpirationDate expirationDate,final ServiceCode serviceCode){
  this.pan=pan;
  this.name=name;
  this.expirationDate=expirationDate;
  this.serviceCode=serviceCode;
}","public BankCard(final PrimaryAccountNumber pan,final Name name,final ExpirationDate expirationDate,final ServiceCode serviceCode){
  if (pan != null) {
    this.pan=pan;
  }
 else {
    this.pan=new PrimaryAccountNumber();
  }
  if (name != null) {
    this.name=name;
  }
 else {
    this.name=new Name();
  }
  if (expirationDate != null) {
    this.expirationDate=expirationDate;
  }
 else {
    this.expirationDate=new ExpirationDate();
  }
  if (serviceCode != null) {
    this.serviceCode=serviceCode;
  }
 else {
    this.serviceCode=new ServiceCode();
  }
}",0.3320848938826466
34528,"public Name(final String rawName){
  super(rawName);
  final String[] splitName=trimToEmpty(rawName).split(""String_Node_Str"");
  firstName=capitalize(splitName[splitName.length - 1]);
  if (splitName.length > 1) {
    lastName=capitalize(splitName[0]);
  }
 else {
    lastName=""String_Node_Str"";
  }
}","public Name(final String rawName){
  super(rawName);
  final String[] splitName=trimToEmpty(rawName).split(""String_Node_Str"");
  firstName=name(splitName,1);
  lastName=name(splitName,0);
}",0.745417515274949
34529,"public String getFullName(){
  final StringBuilder buffer=new StringBuilder();
  buffer.append(trimToEmpty(firstName));
  if (!isBlank(lastName)) {
    buffer.append(""String_Node_Str"").append(trimToEmpty(lastName));
  }
  return buffer.toString();
}","public String getFullName(){
  final StringBuilder buffer=new StringBuilder();
  if (hasFirstName()) {
    buffer.append(trimToEmpty(firstName));
  }
  if (hasFullName()) {
    buffer.append(""String_Node_Str"");
  }
  if (hasLastName()) {
    buffer.append(trimToEmpty(lastName));
  }
  return buffer.toString();
}",0.8113879003558719
34530,"public boolean hasName(){
  return name != null && name.hasFullName();
}","public boolean hasName(){
  return name != null && name.hasName();
}",0.9714285714285714
34531,"public boolean hasExpirationDate(){
  return expirationDate != null;
}","public boolean hasExpirationDate(){
  return expirationDate != null && expirationDate.hasExpirationDate();
}",0.7865168539325843
34532,"@Test public void trackA() throws Exception {
  final BankCardMagneticTrack trackA=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackA.toCardInfo();
  System.out.println(trackA);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.MasterCard,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(YearMonth.of(2016,4),cardInfo.getExpirationDate());
}","@Test public void trackA() throws Exception {
  final BankCardMagneticTrack trackA=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackA.toCardInfo();
  System.out.println(trackA);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.MasterCard,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(YearMonth.of(2016,4),cardInfo.getExpirationDate().getExpirationDate());
}",0.9810246679316889
34533,"@Test public void trackB() throws Exception {
  final BankCardMagneticTrack trackB=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackB.toCardInfo();
  System.out.println(trackB);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.Visa,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(YearMonth.of(2016,5),cardInfo.getExpirationDate());
}","@Test public void trackB() throws Exception {
  final BankCardMagneticTrack trackB=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackB.toCardInfo();
  System.out.println(trackB);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.Visa,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(YearMonth.of(2016,5),cardInfo.getExpirationDate().getExpirationDate());
}",0.980806142034549
34534,"@Ignore @Test public void trackI() throws Exception {
  final BankCardMagneticTrack trackI=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackI.toCardInfo();
  System.out.println(trackI);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.unknown,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(null,cardInfo.getExpirationDate());
}","@Ignore @Test public void trackI() throws Exception {
  final BankCardMagneticTrack trackI=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackI.toCardInfo();
  System.out.println(trackI);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.unknown,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(null,cardInfo.getExpirationDate().getExpirationDate());
}",0.9806201550387597
34535,"@Test public void trackJ() throws Exception {
  final BankCardMagneticTrack trackJ=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackJ.toCardInfo();
  System.out.println(trackJ);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.unknown,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(null,cardInfo.getExpirationDate());
}","@Test public void trackJ() throws Exception {
  final BankCardMagneticTrack trackJ=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackJ.toCardInfo();
  System.out.println(trackJ);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.unknown,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(null,cardInfo.getExpirationDate().getExpirationDate());
}",0.9803149606299212
34536,"@Test public void trackG() throws Exception {
  final BankCardMagneticTrack trackG=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackG.toCardInfo();
  System.out.println(trackG);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.AmericanExpress,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(YearMonth.of(2015,8),cardInfo.getExpirationDate());
}","@Test public void trackG() throws Exception {
  final BankCardMagneticTrack trackG=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackG.toCardInfo();
  System.out.println(trackG);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.AmericanExpress,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(YearMonth.of(2015,8),cardInfo.getExpirationDate().getExpirationDate());
}",0.981203007518797
34537,"@Test public void trackH() throws Exception {
  final BankCardMagneticTrack trackH=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackH.toCardInfo();
  System.out.println(trackH);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.Visa,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(null,cardInfo.getExpirationDate());
}","@Test public void trackH() throws Exception {
  final BankCardMagneticTrack trackH=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackH.toCardInfo();
  System.out.println(trackH);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.Visa,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(null,cardInfo.getExpirationDate().getExpirationDate());
}",0.9801980198019802
34538,"@Test public void trackE() throws Exception {
  final BankCardMagneticTrack trackE=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackE.toCardInfo();
  System.out.println(trackE);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.unknown,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(YearMonth.of(2049,12),cardInfo.getExpirationDate());
}","@Test public void trackE() throws Exception {
  final BankCardMagneticTrack trackE=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackE.toCardInfo();
  System.out.println(trackE);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.unknown,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(YearMonth.of(2049,12),cardInfo.getExpirationDate().getExpirationDate());
}",0.9809523809523808
34539,"@Test public void trackF() throws Exception {
  final BankCardMagneticTrack trackF=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackF.toCardInfo();
  System.out.println(trackF);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.Visa,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(YearMonth.of(2015,2),cardInfo.getExpirationDate());
}","@Test public void trackF() throws Exception {
  final BankCardMagneticTrack trackF=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackF.toCardInfo();
  System.out.println(trackF);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.Visa,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(YearMonth.of(2015,2),cardInfo.getExpirationDate().getExpirationDate());
}",0.980806142034549
34540,"@Test public void trackC() throws Exception {
  final BankCardMagneticTrack trackC=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackC.toCardInfo();
  System.out.println(trackC);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.MasterCard,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(YearMonth.of(2017,1),cardInfo.getExpirationDate());
}","@Test public void trackC() throws Exception {
  final BankCardMagneticTrack trackC=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackC.toCardInfo();
  System.out.println(trackC);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.MasterCard,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(YearMonth.of(2017,1),cardInfo.getExpirationDate().getExpirationDate());
}",0.9810246679316889
34541,"@Test public void trackD() throws Exception {
  final BankCardMagneticTrack trackD=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackD.toCardInfo();
  System.out.println(trackD);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.Discover,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(YearMonth.of(2015,10),cardInfo.getExpirationDate());
}","@Test public void trackD() throws Exception {
  final BankCardMagneticTrack trackD=BankCardMagneticTrack.from(""String_Node_Str"");
  final BankCard cardInfo=trackD.toCardInfo();
  System.out.println(trackD);
  assertEquals(""String_Node_Str"",cardInfo.getPrimaryAccountNumber().getAccountNumber());
  assertEquals(CardBrand.Discover,cardInfo.getPrimaryAccountNumber().getCardBrand());
  assertEquals(""String_Node_Str"",cardInfo.getName().toString());
  assertEquals(YearMonth.of(2015,10),cardInfo.getExpirationDate().getExpirationDate());
}",0.9809885931558936
34542,"HeeMessage(String modid,String key,String data,NBTTagCompound nbt){
  this.modid=modid;
  this.key=key;
  this.data=data;
  this.nbt=nbt;
}","HeeMessage(String modid,String key,String data,NBTTagCompound nbt){
  this.modid=modid;
  this.key=StringUtils.removeStart(key,""String_Node_Str"");
  this.data=data;
  this.nbt=nbt;
}",0.8660436137071651
34543,"public static boolean runMessage(String key,NBTTagCompound root){
  MessagePattern pattern=registry.get(StringUtils.removeStart(key,""String_Node_Str""));
  if (pattern == null) {
    MessageLogger.logError(""String_Node_Str"",key);
    return false;
  }
  return pattern.tryRun(root);
}","public static boolean runMessage(String key,NBTTagCompound root){
  MessagePattern pattern=registry.get(key);
  if (pattern == null) {
    MessageLogger.logError(""String_Node_Str"",key);
    return false;
  }
  return pattern.tryRun(root);
}",0.9177820267686424
34544,"public static void logError(String message,Object... data){
  Log.error(prefixError + message,data);
}","public static void logError(String message,Object... data){
  Log.info(prefixError + message,data);
}",0.9655172413793104
34545,"@Override public void tick(World world,NBTTagCompound nbt){
  if (++tickLimiter > tickRate) {
    tickLimiter=0;
    for (int attempt=0; attempt < attemptsPerTick; attempt++) {
      spawnEntries.getRandomItem(world.rand).trySpawn(world,attemptsPerMob);
    }
  }
}","@Override public void tick(World world,NBTTagCompound nbt){
  if (++tickLimiter > tickRate) {
    tickLimiter=0;
    if (EntitySelector.living(world,area.toAABB()).size() > mobLimit.applyAsInt(world))     return;
    for (int attempt=0; attempt < attemptsPerTick; attempt++) {
      spawnEntries.getRandomItem(world.rand).trySpawn(world,attemptsPerMob);
    }
  }
}",0.8412698412698413
34546,"@Override public T trySpawn(World world,int attempts){
  int amount=groupSize.next(world.rand);
  if (amount == 0)   return null;
  T first=super.trySpawn(world,attempts);
  if (first == null)   return null;
  while (--amount > 0) {
    T entity=constructor.apply(world);
    for (int attempt=0; attempt < attempts; attempt++) {
      groupLocationFinder.accept(first,entity);
      if (spawnCondition.test(entity))       world.spawnEntityInWorld(entity);
    }
  }
  return first;
}","@Override public T trySpawn(World world,int attempts){
  int amount=groupSize.next(world.rand);
  if (amount == 0)   return null;
  T first=super.trySpawn(world,attempts);
  if (first == null)   return null;
  while (--amount > 0) {
    T entity=constructor.apply(world);
    for (int attempt=0; attempt < attempts; attempt++) {
      groupLocationFinder.accept(first,entity);
      if (spawnCondition.test(entity)) {
        world.spawnEntityInWorld(entity);
        break;
      }
    }
  }
  return first;
}",0.944612286002014
34547,"@Override public void onUpdate(){
}","@Override public void onUpdate(){
  if (--updatePedestalTimer <= 0) {
    updatePedestalTimer=20;
    int maxPedestals=8;
    int range=maxPedestals == 12 ? 4 : 3;
    long currentHash=0L;
    if (lastMaxPedestals != maxPedestals) {
      lastMaxPedestals=(byte)maxPedestals;
      pedestalAreaHash=0L;
    }
    World world=altar.getWorldObj();
    for (int xx=-range, id; xx <= range; xx++) {
      for (int zz=-range; zz <= range; zz++) {
        id=Block.getIdFromBlock(Pos.at(altar.xCoord + xx,altar.yCoord,altar.zCoord + zz).getBlock(world));
        currentHash+=((4 + xx) * 7 + (4 + zz) + id) * 262144L + (xx * id) + (zz * id);
      }
    }
    if (pedestalAreaHash != currentHash) {
      pedestalAreaHash=currentHash;
      pedestals.clear();
      IdentityHashMap<Block,Byte> blockCounts=new IdentityHashMap<>();
      Block[][] blocks=new Block[range * 2 + 1][range * 2 + 1];
      Pos tilePos=Pos.at(altar);
      Pos.forEachBlock(tilePos.offset(-range,0,-range),tilePos.offset(range,0,range),pos -> {
        if (Math.abs(pos.x - tilePos.getX()) <= 1 && Math.abs(pos.z - tilePos.getZ()) <= 1)         return;
        if (!(pos.getUp().isAir(world) && hasCollisionBox(altar,pos.getX(),pos.getY(),pos.getZ())))         return;
        for (        Facing4 facing : Facing4.list) {
          Pos offset=pos.offset(facing);
          if (!(offset.isAir(world) || !hasCollisionBox(altar,offset.getX(),offset.getY(),offset.getZ())))           return;
        }
        Block block=pos.getBlock(world);
        if (block.getMaterial() == Material.air)         return;
        blocks[range + pos.getX() - tilePos.getX()][range + pos.getZ() - tilePos.getZ()]=block;
        if (blockCounts.containsKey(block))         blockCounts.put(block,(byte)(blockCounts.get(block) + 1));
 else         blockCounts.put(block,(byte)1);
      }
);
      SortedSet<Entry<Block,Byte>> sorted=CollectionUtil.sortMapByValueDesc(blockCounts);
      for (      Entry<Block,Byte> entry : sorted) {
        if (entry.getValue() > maxPedestals)         continue;
        for (int xx=-range; xx <= range; xx++) {
          for (int zz=-range; zz <= range; zz++) {
            if (blocks[range + xx][range + zz] != entry.getKey())             continue;
            pedestals.add(Pos.at(altar.xCoord + xx,altar.yCoord,altar.zCoord + zz));
          }
        }
        break;
      }
    }
    for (    Pos pos : pedestals) {
      if (world.rand.nextInt(5) <= 1) {
        PacketPipeline.sendToAllAround(altar,64D,new C11ParticleAltarOrb(altar,pos.getX() + 0.5D,pos.getY() + 0.5D,pos.getZ() + 0.5D));
      }
    }
  }
  if (itemBoundingBox == null) {
    itemBoundingBox=AxisAlignedBB.getBoundingBox(altar.xCoord + 0.5D - 4.5D,altar.yCoord + 0.9D,altar.zCoord + 0.5D - 4.5D,altar.xCoord + 0.5 + 4.5D,altar.yCoord + 1.6D,altar.zCoord + 0.5D + 4.5D);
  }
  World world=altar.getWorldObj();
  List<EntityItem> thrownItems=EntitySelector.type(world,EntityItem.class,itemBoundingBox);
  double targX, targY, targZ;
  for (  EntityItem item : thrownItems) {
    for (    Pos pos : pedestals) {
      targX=pos.getX() + 0.5D;
      targY=pos.getY() + 1.15D;
      targZ=pos.getZ() + 0.5D;
      if (Math.abs(item.posX - targX) > 0.001D || Math.abs(item.posY - targY) > 0.001D || Math.abs(item.posZ - targZ) > 0.001D) {
        if (EntitySelector.type(world,EntityItemAltar.class,AxisAlignedBB.getBoundingBox(targX,targY,targZ,targX,targY,targZ)).isEmpty() && Math.sqrt(MathUtil.square(targX - item.posX) + MathUtil.square(targY - item.posY) + MathUtil.square(targZ - item.posZ)) < 0.275D) {
          world.spawnEntityInWorld(new EntityItemAltar(world,targX,targY,targZ,item,EssenceType.DRAGON.id));
        }
      }
 else       if ((updatePedestalTimer & 3) == 1 && item instanceof EntityItemAltar) {
        EntityItemAltar altarItem=(EntityItemAltar)item;
        altarItem.pedestalUpdate=0;
        if (altar.getEssenceLevel() > 0) {
          updatePedestalItem(altarItem);
          if (world.rand.nextInt(5) == 0) {
            PacketPipeline.sendToAllAround(altar.getWorldObj().provider.dimensionId,targX,pos.getY() + 0.5D,targZ,64D,new C11ParticleAltarOrb(targX,pos.getY() + 0.5D,targZ,item.posX,item.posY + 0.3D,item.posZ,altar.getEssenceType().id,(byte)1));
          }
        }
      }
    }
  }
}",0.0161999537144179
34548,"public static final EnumSet<?> getVariations(ItemStack is){
  EndTerritory territory=getTerritory(is);
  if (territory == null)   return EmptyEnumSet.get();
  return territory.properties.deserialize(ItemUtil.getTagRoot(is,false).getInteger(""String_Node_Str""));
}","public static final EnumSet<? extends Enum<?>> getVariations(ItemStack is){
  EndTerritory territory=getTerritory(is);
  if (territory == null)   return EmptyEnumSet.get();
  return territory.properties.deserialize(ItemUtil.getTagRoot(is,false).getInteger(""String_Node_Str""));
}",0.9703703703703704
34549,"public static void register(){
  if (instance != null)   throw new RuntimeException(""String_Node_Str"");
  instance=new DragonChunkManager();
  MinecraftForge.EVENT_BUS.register(instance);
  ForgeChunkManager.setForcedChunkLoadingCallback(HardcoreEnderExpansion.instance,instance);
}","public static void register(){
  MinecraftForge.EVENT_BUS.register(instance);
  ForgeChunkManager.setForcedChunkLoadingCallback(HardcoreEnderExpansion.instance,instance);
}",0.7577092511013216
34550,public String getModId();,String getModId();,0.8372093023255814
34551,public void integrate();,void integrate();,0.8292682926829268
34552,"public static final void sendIMCs(){
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","public static void sendIMCs(){
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9936170212765958
34553,"public static final void integrateMods(){
  Stopwatch.time(""String_Node_Str"");
  Class[] handlerClasses=new Class[]{ThaumcraftIntegration.class,MineFactoryReloadedIntegration.class,ArsMagicaFixIntegration.class};
  for (  Class<? extends IIntegrationHandler> cls : handlerClasses) {
    try {
      IIntegrationHandler handler=cls.newInstance();
      String modId=handler.getModId();
      if (Loader.isModLoaded(modId) && !blacklistedMods.contains(modId))       handler.integrate();
    }
 catch (    Throwable e) {
      Log.throwable(e,""String_Node_Str"",cls.getSimpleName());
    }
  }
  Stopwatch.finish(""String_Node_Str"");
}","public static void integrateMods(){
  Stopwatch.time(""String_Node_Str"");
  Class[] handlerClasses=new Class[]{ThaumcraftIntegration.class,MineFactoryReloadedIntegration.class,ArsMagicaFixIntegration.class};
  for (  Class<? extends IIntegrationHandler> cls : handlerClasses) {
    try {
      IIntegrationHandler handler=cls.newInstance();
      String modId=handler.getModId();
      if (Loader.isModLoaded(modId) && !blacklistedMods.contains(modId))       handler.integrate();
    }
 catch (    Throwable e) {
      Log.throwable(e,""String_Node_Str"",cls.getSimpleName());
    }
  }
  Stopwatch.finish(""String_Node_Str"");
}",0.9952153110047848
34554,"/** 
 * Enhances a new ItemStack returned by the tile entity and returns it.
 */
public static <T extends Enum<T>>ItemStack createItemStack(IEnhanceableTile<T> tile){
  ItemStack is=tile.getEnhancementItemStack();
  EnhancementRegistry.<T>getEnhancementList(is).replace(tile.getEnhancements());
  return is;
}","/** 
 * Enhances a new ItemStack returned by the tile entity and returns it.
 */
static <T extends Enum<T>>ItemStack createItemStack(IEnhanceableTile<T> tile){
  ItemStack is=tile.getEnhancementItemStack();
  EnhancementRegistry.<T>getEnhancementList(is).replace(tile.getEnhancements());
  return is;
}",0.9885433715220948
34555,public int getWeight();,int getWeight();,0.8205128205128205
34556,"@UnitTest(runTime=RunTime.INGAME,trigger=testTrigger) public void testDecompositionTable(){
  int[] stardust=new int[]{59,59,63,61,57,57,64};
  final List<PosMutable> decomposition=storedLocs.get(""String_Node_Str"");
  for (int a=0; a < stardust.length; a++) {
    pos.set(decomposition.get(a));
    Assert.equal(getTile(TileEntityDecompositionTable.class).getStackInSlot(1).stackSize,stardust[a],""String_Node_Str"");
  }
  Function<Integer,TileEntityChest> get=new Function<Integer,TileEntityChest>(){
    @Override public TileEntityChest apply(    Integer input){
      return (TileEntityChest)pos.set(decomposition.get(input)).move(0,-2,0).getTileEntity(world);
    }
  }
;
  Assert.equal(get.apply(0).getStackInSlot(0).getItem(),Items.diamond,""String_Node_Str"");
  Assert.isTrue(get.apply(0).getStackInSlot(0).stackSize > 3,""String_Node_Str"");
  Assert.equal(get.apply(1).getStackInSlot(0).getItem(),Items.diamond,""String_Node_Str"");
  Assert.equal(get.apply(1).getStackInSlot(0).stackSize,1,""String_Node_Str"");
  Assert.equal(get.apply(2).getStackInSlot(0).getItem(),Item.getItemFromBlock(Blocks.log),""String_Node_Str"");
  Assert.notNull(get.apply(3).getStackInSlot(0),""String_Node_Str"");
  Assert.notNull(get.apply(4).getStackInSlot(0),""String_Node_Str"");
  Assert.notNull(get.apply(5).getStackInSlot(0),""String_Node_Str"");
  Assert.isNull(get.apply(6).getStackInSlot(0),""String_Node_Str"");
}","@UnitTest(runTime=RunTime.INGAME,trigger=testTrigger) public void testDecompositionTable(){
  int[] stardust=new int[]{59,59,63,61,57,57,64};
  final List<PosMutable> decomposition=storedLocs.get(""String_Node_Str"");
  for (int a=0; a < stardust.length; a++) {
    pos.set(decomposition.get(a));
    Assert.equal(getTile(TileEntityDecompositionTable.class).getStackInSlot(1).stackSize,stardust[a],""String_Node_Str"");
  }
  Function<Integer,TileEntityChest> get=input -> {
    return (TileEntityChest)pos.set(decomposition.get(input)).move(0,-2,0).getTileEntity(world);
  }
;
  Assert.equal(get.apply(0).getStackInSlot(0).getItem(),Items.diamond,""String_Node_Str"");
  Assert.isTrue(get.apply(0).getStackInSlot(0).stackSize > 3,""String_Node_Str"");
  Assert.equal(get.apply(1).getStackInSlot(0).getItem(),Items.diamond,""String_Node_Str"");
  Assert.equal(get.apply(1).getStackInSlot(0).stackSize,1,""String_Node_Str"");
  Assert.equal(get.apply(2).getStackInSlot(0).getItem(),Item.getItemFromBlock(Blocks.log),""String_Node_Str"");
  Assert.notNull(get.apply(3).getStackInSlot(0),""String_Node_Str"");
  Assert.notNull(get.apply(4).getStackInSlot(0),""String_Node_Str"");
  Assert.notNull(get.apply(5).getStackInSlot(0),""String_Node_Str"");
  Assert.isNull(get.apply(6).getStackInSlot(0),""String_Node_Str"");
}",0.4087699739873653
34557,"@Override public boolean isItemValidForSlot(int slot,ItemStack is){
  return slot == slotStardust ? is.getItem() == ItemList.stardust : slot == 0;
}","@Override public boolean isItemValidForSlot(int slot,ItemStack is){
  return slot == slotStardust ? is.getItem() == ItemList.stardust : slot == slotSubject;
}",0.9607843137254902
34558,"public ItemStack processItem(ItemStack is,Random rand);","ItemStack processItem(ItemStack is,Random rand);",0.9320388349514565
34559,"/** 
 * Generates a list of corridor pieces and the next room piece. It only uses connections on the generated pieces, not on the starting piece. The new pieces are not added to the generated piece list, that is up to the calling method after validating the list. If the list has a different size than the selected corridor amount, it returns null instead.
 */
private List<StructureDungeonPieceInst> generateCorridorList(StructureDungeonPieceInst startPiece,Connection startConnection,StructureDungeonPieceArray roomArray,Random rand){
  int corridorAmount=piecesBetweenRooms.random(rand);
  final List<StructureDungeonPieceInst> pieces=new ArrayList<>(corridorAmount);
  final WeightedList<StructureDungeonPieceArray> corridorsAvailable=new WeightedList<>(corridors);
  final TObjectIntHashMap<StructureDungeonPieceArray> corridorCount=new TObjectIntHashMap<>(corridorAmount,Constants.DEFAULT_LOAD_FACTOR,0);
  for (int index=0; index < corridorAmount && corridorsAvailable.getTotalWeight() > 0; index++) {
    final StructureDungeonPieceInst targetPieceInst=index == 0 ? startPiece : pieces.get(index - 1);
    final Connection targetConnection=index == 0 ? startConnection : CollectionUtil.randomOrNull(targetPieceInst.findConnections(),rand);
    if (targetConnection == null)     break;
    for (int attempt=0; attempt < 51; attempt++) {
      if (attempt == 50)       return null;
      StructureDungeonPieceArray nextArray=corridorsAvailable.getRandomItem(rand);
      if (isDoor(nextArray) && !((index == 0 || index == corridorAmount - 1) && ((ISpreadingGeneratorPieceType)targetPieceInst.piece.type).isRoom()))       continue;
      if (corridorCount.get(nextArray) >= nextArray.amount.max)       continue;
      Pair<StructureDungeonPiece,Connection> nextPiece=findSuitablePiece(nextArray,targetConnection.facing,targetPieceInst.piece.type,rand);
      if (nextPiece != null && attempt < 50) {
        final Pos aligned=alignConnections(targetPieceInst,targetConnection,nextPiece.getRight());
        final Size pieceSize=nextPiece.getLeft().size;
        if (canPlaceAreaExtended(aligned,aligned.offset(pieceSize.sizeX - 1,pieceSize.sizeY - 1,pieceSize.sizeZ - 1),pieces)) {
          StructureDungeonPieceInst inst=new StructureDungeonPieceInst(nextPiece.getLeft(),aligned);
          inst.useConnection(nextPiece.getRight());
          if (index > 0)           targetPieceInst.useConnection(targetConnection);
          pieces.add(inst);
          corridorCount.adjustOrPutValue(nextArray,1,1);
          break;
        }
      }
    }
  }
  for (  StructureDungeonPieceArray corridorArray : corridors) {
    if (!corridorArray.amount.in(corridorCount.get(corridorArray)))     return null;
  }
  if (pieces.size() == corridorAmount) {
    final StructureDungeonPieceInst targetPieceInst=pieces.isEmpty() ? startPiece : pieces.get(pieces.size() - 1);
    final Connection targetConnection=pieces.isEmpty() ? startConnection : CollectionUtil.randomOrNull(targetPieceInst.findConnections(),rand);
    final Pair<StructureDungeonPiece,Connection> finalRoom=findSuitablePiece(roomArray,targetConnection.facing,targetPieceInst.piece.type,rand);
    if (finalRoom != null) {
      final Pos aligned=alignConnections(targetPieceInst,targetConnection,finalRoom.getRight());
      final Size pieceSize=finalRoom.getLeft().size;
      if (canPlaceAreaExtended(aligned,aligned.offset(pieceSize.sizeX - 1,pieceSize.sizeY - 1,pieceSize.sizeZ - 1),pieces)) {
        StructureDungeonPieceInst inst=new StructureDungeonPieceInst(finalRoom.getLeft(),aligned);
        inst.useConnection(finalRoom.getRight());
        pieces.get(pieces.size() - 1).useConnection(targetConnection);
        pieces.add(inst);
        return pieces;
      }
    }
  }
  return null;
}","/** 
 * Generates a list of corridor pieces and the next room piece. It only uses connections on the generated pieces, not on the starting piece. The new pieces are not added to the generated piece list, that is up to the calling method after validating the list. If the list has a different size than the selected corridor amount, it returns null instead.
 */
private List<StructureDungeonPieceInst> generateCorridorList(StructureDungeonPieceInst startPiece,Connection startConnection,StructureDungeonPieceArray roomArray,Random rand){
  int corridorAmount=piecesBetweenRooms.random(rand);
  final List<StructureDungeonPieceInst> pieces=new ArrayList<>(corridorAmount);
  final WeightedList<StructureDungeonPieceArray> corridorsAvailable=new WeightedList<>(corridors);
  final TObjectIntHashMap<StructureDungeonPieceArray> corridorCount=new TObjectIntHashMap<>(corridorAmount,Constants.DEFAULT_LOAD_FACTOR,0);
  for (int index=0; index < corridorAmount && corridorsAvailable.getTotalWeight() > 0; index++) {
    final StructureDungeonPieceInst targetPieceInst=index == 0 ? startPiece : pieces.get(index - 1);
    final Connection targetConnection=index == 0 ? startConnection : CollectionUtil.randomOrNull(targetPieceInst.findConnections(),rand);
    if (targetConnection == null)     break;
    for (int attempt=0; attempt < 51; attempt++) {
      if (attempt == 50)       return null;
      StructureDungeonPieceArray nextArray=corridorsAvailable.getRandomItem(rand);
      if (isDoor(nextArray) && !((index == 0 || index == corridorAmount - 1) && ((ISpreadingGeneratorPieceType)targetPieceInst.piece.type).isRoom()))       continue;
      if (corridorCount.get(nextArray) >= nextArray.amount.max)       continue;
      Pair<StructureDungeonPiece,Connection> nextPiece=findSuitablePiece(nextArray,targetConnection.facing,targetPieceInst.piece.type,rand);
      if (nextPiece != null) {
        final Pos aligned=alignConnections(targetPieceInst,targetConnection,nextPiece.getRight());
        final Size pieceSize=nextPiece.getLeft().size;
        if (canPlaceAreaExtended(aligned,aligned.offset(pieceSize.sizeX - 1,pieceSize.sizeY - 1,pieceSize.sizeZ - 1),pieces)) {
          StructureDungeonPieceInst inst=new StructureDungeonPieceInst(nextPiece.getLeft(),aligned);
          inst.useConnection(nextPiece.getRight());
          if (index > 0)           targetPieceInst.useConnection(targetConnection);
          pieces.add(inst);
          corridorCount.adjustOrPutValue(nextArray,1,1);
          break;
        }
      }
    }
  }
  for (  StructureDungeonPieceArray corridorArray : corridors) {
    if (!corridorArray.amount.in(corridorCount.get(corridorArray)))     return null;
  }
  if (pieces.size() == corridorAmount) {
    final StructureDungeonPieceInst targetPieceInst=pieces.isEmpty() ? startPiece : pieces.get(pieces.size() - 1);
    final Connection targetConnection=pieces.isEmpty() ? startConnection : CollectionUtil.randomOrNull(targetPieceInst.findConnections(),rand);
    final Pair<StructureDungeonPiece,Connection> finalRoom=findSuitablePiece(roomArray,targetConnection.facing,targetPieceInst.piece.type,rand);
    if (finalRoom != null) {
      final Pos aligned=alignConnections(targetPieceInst,targetConnection,finalRoom.getRight());
      final Size pieceSize=finalRoom.getLeft().size;
      if (canPlaceAreaExtended(aligned,aligned.offset(pieceSize.sizeX - 1,pieceSize.sizeY - 1,pieceSize.sizeZ - 1),pieces)) {
        StructureDungeonPieceInst inst=new StructureDungeonPieceInst(finalRoom.getLeft(),aligned);
        inst.useConnection(finalRoom.getRight());
        pieces.get(pieces.size() - 1).useConnection(targetConnection);
        pieces.add(inst);
        return pieces;
      }
    }
  }
  return null;
}",0.9978683719690914
34560,"public static IBlockPicker basic(final Block block,final int meta){
  return new BlockInfo(block,meta);
}","static IBlockPicker basic(final Block block,final int meta){
  return new BlockInfo(block,meta);
}",0.9655172413793104
34561,"@Override protected void renderToolTip(ItemStack is,int screenX,int screenY){
  isHoveringToken=is.getItem() == ItemList.portal_token && screenY * height / mc.displayHeight < 52;
  super.renderToolTip(is,screenX,screenY);
  isHoveringToken=false;
}","@Override protected void renderToolTip(ItemStack is,int mouseX,int mouseY){
  isHoveringToken=is.getItem() == ItemList.portal_token && mouseY - guiTop < 72;
  super.renderToolTip(is,mouseX,mouseY);
  isHoveringToken=false;
}",0.8050847457627118
34562,"@Override protected void drawHoveringText(List textLines,int screenX,int screenY,FontRenderer fontRenderer){
  if (isHoveringToken)   textLines.add(EnumChatFormatting.GREEN + ""String_Node_Str"");
  super.drawHoveringText(textLines,screenX,screenY,fontRenderer);
}","@Override protected void drawHoveringText(List textLines,int mouseX,int mouseY,FontRenderer fontRenderer){
  if (isHoveringToken)   textLines.add(EnumChatFormatting.GREEN + ""String_Node_Str"");
  super.drawHoveringText(textLines,mouseX,mouseY,fontRenderer);
}",0.9153846153846154
34563,"@Override protected void onRender(){
  EntityTechnicalVoidPortal data=BlockVoidPortal.getData(tile.getWorldObj(),tile.xCoord,tile.yCoord,tile.zCoord).orElse(null);
  alpha=data == null ? 0F : data.prevRenderAlpha + (data.renderAlpha - data.prevRenderAlpha) * ptt;
  translation=data == null ? 0F : data.prevRenderTranslation + (data.renderTranslation - data.prevRenderTranslation) * ptt;
  ItemStack tokenIS=data.getActiveToken();
  if (tokenIS != null) {
    EndTerritory territory=ItemPortalToken.getTerritory(tokenIS);
    if (territory != null)     activeEnvironment=territory.environment;
  }
}","@Override protected void onRender(){
  EntityTechnicalVoidPortal data=BlockVoidPortal.getData(tile.getWorldObj(),tile.xCoord,tile.yCoord,tile.zCoord).orElse(null);
  alpha=data == null ? 0F : data.prevRenderAlpha + (data.renderAlpha - data.prevRenderAlpha) * ptt;
  translation=data == null ? 0F : data.prevRenderTranslation + (data.renderTranslation - data.prevRenderTranslation) * ptt;
  ItemStack tokenIS=data == null ? null : data.getActiveToken();
  if (tokenIS != null) {
    EndTerritory territory=ItemPortalToken.getTerritory(tokenIS);
    if (territory != null)     activeEnvironment=territory.environment;
  }
}",0.981967213114754
34564,"@Override public void registerRenderers(){
  Stopwatch.time(""String_Node_Str"");
  renderIdObsidianSpecial=RenderingRegistry.getNextAvailableRenderId();
  renderIdFlowerPot=RenderingRegistry.getNextAvailableRenderId();
  renderIdSpookyLeaves=RenderingRegistry.getNextAvailableRenderId();
  renderIdCrossedDecoration=RenderingRegistry.getNextAvailableRenderId();
  renderIdRavishBell=RenderingRegistry.getNextAvailableRenderId();
  renderIdLootChest=RenderingRegistry.getNextAvailableRenderId();
  renderIdGloomtorch=RenderingRegistry.getNextAvailableRenderId();
  RenderingRegistry.registerBlockHandler(new RenderBlockObsidianSpecial());
  RenderingRegistry.registerBlockHandler(new RenderBlockEndFlowerPot());
  RenderingRegistry.registerBlockHandler(new RenderBlockSpookyLeaves());
  RenderingRegistry.registerBlockHandler(new RenderBlockCrossedDecoration());
  RenderingRegistry.registerBlockHandler(new RenderBlockRavishBell());
  RenderingRegistry.registerBlockHandler(new RenderBlockGloomtorch());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityEssenceAltar.class,new RenderTileEssenceAltar());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityEndermanHead.class,new RenderTileEndermanHead());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityCustomSpawner.class,new RenderTileCustomSpawner());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityLaserBeam.class,new RenderTileLaserBeam());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityEndPortal.class,new RenderTileEndPortal());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityLootChest.class,new RenderTileLootChest());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(BlockList.loot_chest),new RenderItemLootChest());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(BlockList.enderman_head),new RenderItemEndermanHead());
  RenderingRegistry.registerEntityRenderingHandler(EntityBossDragon.class,new RenderBossDragon());
  RenderingRegistry.registerEntityRenderingHandler(EntityMiniBossEnderEye.class,new RenderMiniBossEnderEye());
  RenderingRegistry.registerEntityRenderingHandler(EntityMiniBossFireFiend.class,new RenderMiniBossFireFiend());
  RenderingRegistry.registerEntityRenderingHandler(EntityMobEnderman.class,new RenderMobEnderman());
  RenderingRegistry.registerEntityRenderingHandler(EntityMobBabyEnderman.class,new RenderMobBabyEnderman());
  RenderingRegistry.registerEntityRenderingHandler(EntityMobEnderGuardian.class,new RenderTexturedMob(new ModelEnderGuardian(),0.3F,""String_Node_Str""));
  RenderingRegistry.registerEntityRenderingHandler(EntityMobVampiricBat.class,new RenderTexturedMob(new ModelBat(),0.25F,""String_Node_Str"",0.35F));
  RenderingRegistry.registerEntityRenderingHandler(EntityMobInfestedBat.class,new RenderMobInfestedBat());
  RenderingRegistry.registerEntityRenderingHandler(EntityMobLouse.class,new RenderMobLouse());
  RenderingRegistry.registerEntityRenderingHandler(EntityMobFireGolem.class,new RenderTexturedMob(new ModelFireGolem(),0.3F,""String_Node_Str""));
  RenderingRegistry.registerEntityRenderingHandler(EntityMobScorchingLens.class,new RenderTexturedMob(new ModelScorchingLens(),0.3F,""String_Node_Str""));
  RenderingRegistry.registerEntityRenderingHandler(EntityMobHauntedMiner.class,new RenderTexturedMob(new ModelHauntedMiner(),0.5F,""String_Node_Str"",1.5F));
  RenderingRegistry.registerEntityRenderingHandler(EntityMobEndermage.class,new RenderTexturedMob(new ModelEndermage(),0.3F,""String_Node_Str""));
  RenderingRegistry.registerEntityRenderingHandler(EntityMobSilverfish.class,new RenderTexturedMob(new ModelSilverfish(),0.3F,""String_Node_Str"",""String_Node_Str""));
  RenderingRegistry.registerEntityRenderingHandler(EntityBlockEnderCrystal.class,new RenderEnderCrystal());
  RenderingRegistry.registerEntityRenderingHandler(EntityBlockFallingObsidian.class,new RenderFallingBlock());
  RenderingRegistry.registerEntityRenderingHandler(EntityBlockFallingDragonEgg.class,new RenderFallingBlock());
  RenderingRegistry.registerEntityRenderingHandler(EntityBlockEnhancedTNTPrimed.class,new RenderBlockEnhancedTNTPrimed());
  RenderingRegistry.registerEntityRenderingHandler(EntityBlockTokenHolder.class,new RenderBlockTokenHolder());
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileFlamingBall.class,new RenderNothing());
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileMinerShot.class,new RenderNothing());
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileGolemFireball.class,new RenderFireball(0.5F));
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileDragonFireball.class,new RenderFireball(1F));
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectilePotion.class,new RenderProjectilePotion());
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileSpatialDash.class,new RenderNothing());
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileCorruptedEnergy.class,new RenderNothing());
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileFiendFireball.class,new RenderProjectileFiendFireball(0.5F));
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileCurse.class,new RenderProjectileCurse());
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileExpBottleConsistent.class,new RenderSnowball(ItemList.exp_bottle));
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileEyeOfEnder.class,new RenderProjectileEyeOfEnder());
  RenderingRegistry.registerEntityRenderingHandler(EntityWeatherLightningBoltSafe.class,new RenderLightningBolt());
  RenderingRegistry.registerEntityRenderingHandler(EntityTechnicalBase.class,new RenderNothing());
  Stopwatch.finish(""String_Node_Str"");
  Baconizer.load();
}","@Override public void registerRenderers(){
  Stopwatch.time(""String_Node_Str"");
  renderIdObsidianSpecial=RenderingRegistry.getNextAvailableRenderId();
  renderIdFlowerPot=RenderingRegistry.getNextAvailableRenderId();
  renderIdSpookyLeaves=RenderingRegistry.getNextAvailableRenderId();
  renderIdCrossedDecoration=RenderingRegistry.getNextAvailableRenderId();
  renderIdRavishBell=RenderingRegistry.getNextAvailableRenderId();
  renderIdLootChest=RenderingRegistry.getNextAvailableRenderId();
  renderIdGloomtorch=RenderingRegistry.getNextAvailableRenderId();
  RenderingRegistry.registerBlockHandler(new RenderBlockObsidianSpecial());
  RenderingRegistry.registerBlockHandler(new RenderBlockEndFlowerPot());
  RenderingRegistry.registerBlockHandler(new RenderBlockSpookyLeaves());
  RenderingRegistry.registerBlockHandler(new RenderBlockCrossedDecoration());
  RenderingRegistry.registerBlockHandler(new RenderBlockRavishBell());
  RenderingRegistry.registerBlockHandler(new RenderBlockLootChest());
  RenderingRegistry.registerBlockHandler(new RenderBlockGloomtorch());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityEssenceAltar.class,new RenderTileEssenceAltar());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityEndermanHead.class,new RenderTileEndermanHead());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityCustomSpawner.class,new RenderTileCustomSpawner());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityLaserBeam.class,new RenderTileLaserBeam());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityEndPortal.class,new RenderTileEndPortal());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityLootChest.class,new RenderTileLootChest());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(BlockList.loot_chest),new RenderItemLootChest());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(BlockList.enderman_head),new RenderItemEndermanHead());
  RenderingRegistry.registerEntityRenderingHandler(EntityBossDragon.class,new RenderBossDragon());
  RenderingRegistry.registerEntityRenderingHandler(EntityMiniBossEnderEye.class,new RenderMiniBossEnderEye());
  RenderingRegistry.registerEntityRenderingHandler(EntityMiniBossFireFiend.class,new RenderMiniBossFireFiend());
  RenderingRegistry.registerEntityRenderingHandler(EntityMobEnderman.class,new RenderMobEnderman());
  RenderingRegistry.registerEntityRenderingHandler(EntityMobBabyEnderman.class,new RenderMobBabyEnderman());
  RenderingRegistry.registerEntityRenderingHandler(EntityMobEnderGuardian.class,new RenderTexturedMob(new ModelEnderGuardian(),0.3F,""String_Node_Str""));
  RenderingRegistry.registerEntityRenderingHandler(EntityMobVampiricBat.class,new RenderTexturedMob(new ModelBat(),0.25F,""String_Node_Str"",0.35F));
  RenderingRegistry.registerEntityRenderingHandler(EntityMobInfestedBat.class,new RenderMobInfestedBat());
  RenderingRegistry.registerEntityRenderingHandler(EntityMobLouse.class,new RenderMobLouse());
  RenderingRegistry.registerEntityRenderingHandler(EntityMobFireGolem.class,new RenderTexturedMob(new ModelFireGolem(),0.3F,""String_Node_Str""));
  RenderingRegistry.registerEntityRenderingHandler(EntityMobScorchingLens.class,new RenderTexturedMob(new ModelScorchingLens(),0.3F,""String_Node_Str""));
  RenderingRegistry.registerEntityRenderingHandler(EntityMobHauntedMiner.class,new RenderTexturedMob(new ModelHauntedMiner(),0.5F,""String_Node_Str"",1.5F));
  RenderingRegistry.registerEntityRenderingHandler(EntityMobEndermage.class,new RenderTexturedMob(new ModelEndermage(),0.3F,""String_Node_Str""));
  RenderingRegistry.registerEntityRenderingHandler(EntityMobSilverfish.class,new RenderTexturedMob(new ModelSilverfish(),0.3F,""String_Node_Str"",""String_Node_Str""));
  RenderingRegistry.registerEntityRenderingHandler(EntityBlockEnderCrystal.class,new RenderEnderCrystal());
  RenderingRegistry.registerEntityRenderingHandler(EntityBlockFallingObsidian.class,new RenderFallingBlock());
  RenderingRegistry.registerEntityRenderingHandler(EntityBlockFallingDragonEgg.class,new RenderFallingBlock());
  RenderingRegistry.registerEntityRenderingHandler(EntityBlockEnhancedTNTPrimed.class,new RenderBlockEnhancedTNTPrimed());
  RenderingRegistry.registerEntityRenderingHandler(EntityBlockTokenHolder.class,new RenderBlockTokenHolder());
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileFlamingBall.class,new RenderNothing());
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileMinerShot.class,new RenderNothing());
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileGolemFireball.class,new RenderFireball(0.5F));
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileDragonFireball.class,new RenderFireball(1F));
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectilePotion.class,new RenderProjectilePotion());
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileSpatialDash.class,new RenderNothing());
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileCorruptedEnergy.class,new RenderNothing());
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileFiendFireball.class,new RenderProjectileFiendFireball(0.5F));
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileCurse.class,new RenderProjectileCurse());
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileExpBottleConsistent.class,new RenderSnowball(ItemList.exp_bottle));
  RenderingRegistry.registerEntityRenderingHandler(EntityProjectileEyeOfEnder.class,new RenderProjectileEyeOfEnder());
  RenderingRegistry.registerEntityRenderingHandler(EntityWeatherLightningBoltSafe.class,new RenderLightningBolt());
  RenderingRegistry.registerEntityRenderingHandler(EntityTechnicalBase.class,new RenderNothing());
  Stopwatch.finish(""String_Node_Str"");
  Baconizer.load();
}",0.9939675973802136
34565,"@Override public void renderTileEntityAt(TileEntity tile,double x,double y,double z,float partialTickTime){
  int meta=tile.hasWorldObj() ? tile.getBlockMetadata() : 0;
  TileEntityLootChest chest=(TileEntityLootChest)tile;
  bindTexture(texture);
  GL11.glPushMatrix();
  GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  GL11.glColor4f(1F,1F,1F,1F);
  GL11.glTranslated(x,y + 1D,z + 1D);
  GL11.glScalef(1F,-1F,-1F);
  GL11.glTranslatef(0.5F,0.5F,0.5F);
  GL11.glRotatef(meta == 2 ? 180 : meta == 4 ? 90 : meta == 5 ? -90 : 0,0F,1F,0F);
  GL11.glTranslatef(-0.5F,-0.5F,-0.5F);
  model.chestLid.rotateAngleX=-((1F - (float)Math.pow(1F - chest.lidAnim + (chest.prevLidAnim - chest.lidAnim) * partialTickTime,3)) * (float)Math.PI * 0.5F);
  model.renderAll();
  GL11.glDisable(GL12.GL_RESCALE_NORMAL);
  GL11.glPopMatrix();
  GL11.glColor4f(1F,1F,1F,1F);
}","@Override public void renderTileEntityAt(TileEntity tile,double x,double y,double z,float partialTickTime){
  int meta=tile.hasWorldObj() ? tile.getBlockMetadata() : 0;
  TileEntityLootChest chest=(TileEntityLootChest)tile;
  bindTexture(texture);
  GL11.glPushMatrix();
  GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  GL11.glColor4f(1F,1F,1F,1F);
  GL11.glTranslated(x,y + 1D,z + 1D);
  GL11.glScalef(1F,-1F,-1F);
  GL11.glTranslatef(0.5F,0.5F,0.5F);
  GL11.glRotatef(meta == 2 ? 180 : meta == 4 ? 90 : meta == 5 ? -90 : 0,0F,1F,0F);
  GL11.glTranslatef(-0.5F,-0.5F,-0.5F);
  model.chestLid.rotateAngleX=Math.min(0F,-((1F - (float)Math.pow(1F - chest.lidAnim + (chest.prevLidAnim - chest.lidAnim) * partialTickTime,3)) * MathUtil.HALF_PI));
  model.renderAll();
  GL11.glDisable(GL12.GL_RESCALE_NORMAL);
  GL11.glPopMatrix();
  GL11.glColor4f(1F,1F,1F,1F);
}",0.9776470588235294
34566,"@Override public void run(String... args){
  int amtX=DragonUtil.tryParse(args.length > 0 ? args[0] : ""String_Node_Str"",1);
  int amtZ=DragonUtil.tryParse(args.length > 1 ? args[1] : ""String_Node_Str"",1);
  GenerateOres gen=new GenerateOres(Blocks.air,BlockList.end_powder_ore);
  gen.setChunkSize(12);
  gen.setY(16,16);
  gen.setAttemptsPerChunk(1);
  gen.setClustersPerChunk(1,1);
  gen.setOresPerCluster(4,4,RandomAmount.preferSmaller);
  gen.setOreGenerator(new IOreGenerator.AttachingLines(new RangeGenerator(4,4,RandomAmount.aroundCenter)));
  StructureWorld structureWorld=new StructureWorld(world,12 + 6 * amtX,33,12 + 6 * amtZ);
  gen.generateSplit(structureWorld,world.rand);
  structureWorld.generateInWorld(world,world.rand,MathUtil.floor(player.posX),MathUtil.floor(player.posY) - 24,MathUtil.floor(player.posZ));
}","@Override public void run(String... args){
  int amtX=DragonUtil.tryParse(args.length > 0 ? args[0] : ""String_Node_Str"",1);
  int amtZ=DragonUtil.tryParse(args.length > 1 ? args[1] : ""String_Node_Str"",1);
  GenerateOres gen=new GenerateOres(Blocks.air,BlockList.end_powder_ore);
  gen.setChunkSize(12);
  gen.setY(16,16);
  gen.setAttemptsPerChunk(1);
  gen.setClustersPerChunk(1,1);
  gen.setOresPerCluster(4,4,RandomAmount.preferSmaller);
  gen.setOreGenerator(new IOreGenerator.AttachingLines(new RangeGenerator(4,4,RandomAmount.aroundCenter),false));
  StructureWorld structureWorld=new StructureWorld(world,12 + 6 * amtX,33,12 + 6 * amtZ);
  gen.generateSplit(structureWorld,world.rand);
  structureWorld.generateInWorld(world,world.rand,MathUtil.floor(player.posX),MathUtil.floor(player.posY) - 24,MathUtil.floor(player.posZ));
}",0.9963942307692308
34567,"public static void initialize(){
  HELP.setHidden().addFragments(new KnowledgeFragment[]{new FragmentText(0).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(1).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(2).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(3).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(4).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(5).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(6).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(7).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(8).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(9).setType(KnowledgeFragmentType.VISIBLE)});
  TEST2.setParent(TEST1,0,4).addFragments(new KnowledgeFragment[]{new FragmentText(20).setType(KnowledgeFragmentType.ESSENTIAL),new FragmentText(21).setType(KnowledgeFragmentType.DISCOVERY)});
  TEST3.setParent(TEST2,-5,3).addParentLine(0,-2).addParentLine(2,-2).addParentLine(2,-3);
  TEST4.setParent(TEST2,3,3).setImportant().addChildLine(0,2).addFragments(new KnowledgeFragment[]{new FragmentText(40).setType(KnowledgeFragmentType.ESSENTIAL),new FragmentText(41).setType(KnowledgeFragmentType.DISCOVERY)});
  TEST5.setParent(TEST4,0,200);
  TEST6.setParent(TEST4,3,8).addParentLine(-3,0);
}","public static void initialize(){
  HELP.setHidden().addFragments(new KnowledgeFragment[]{new FragmentText(0).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(1).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(2).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(3).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(4).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(5).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(6).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(7).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(8).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(9).setType(KnowledgeFragmentType.VISIBLE)});
  TEST2.setParent(TEST1,0,4).addFragments(new KnowledgeFragment[]{new FragmentText(20).setType(KnowledgeFragmentType.ESSENTIAL),new FragmentText(21).setType(KnowledgeFragmentType.DISCOVERY)});
  TEST3.setParent(TEST2,-5,3).addParentLine(0,-2).addParentLine(2,-2).addParentLine(2,-3);
  TEST4.setParent(TEST2,3,3).setImportant().addChildLine(0,2).addFragments(new KnowledgeFragment[]{new FragmentText(40).setType(KnowledgeFragmentType.ESSENTIAL),new FragmentText(41).setType(KnowledgeFragmentType.DISCOVERY),new FragmentText(42).setType(KnowledgeFragmentType.SECRET,10)});
  TEST5.setParent(TEST4,0,200);
  TEST6.setParent(TEST4,3,8).addParentLine(-3,0);
}",0.9762633996937212
34568,"@Override @SideOnly(Side.CLIENT) protected void handle(EntityClientPlayerMP player){
  if (file != null)   CompendiumEventsClient.loadClientData(file);
  if (discovered != null) {
    OverlayManager.addNotification(discovered);
    player.worldObj.playSound(player.posX,player.posY,player.posZ,""String_Node_Str"",0.25F,0.5F * ((player.getRNG().nextFloat() - player.getRNG().nextFloat()) * 0.7F + 1.6F),false);
  }
  GuiEnderCompendium.pausesGame=GuiEnderCompendium.wasPaused;
  System.out.println(""String_Node_Str"" + GuiEnderCompendium.wasPaused);
}","@Override @SideOnly(Side.CLIENT) protected void handle(EntityClientPlayerMP player){
  if (file != null)   CompendiumEventsClient.loadClientData(file);
  if (discovered != null) {
    OverlayManager.addNotification(discovered);
    player.worldObj.playSound(player.posX,player.posY,player.posZ,""String_Node_Str"",0.25F,0.5F * ((player.getRNG().nextFloat() - player.getRNG().nextFloat()) * 0.7F + 1.6F),false);
  }
  GuiEnderCompendium.pausesGame=GuiEnderCompendium.wasPaused;
}",0.9296875
34569,"@EventHandler public void onPostInit(FMLPostInitializationEvent e){
  Stopwatch.time(""String_Node_Str"");
  HeeIMC.runPostInit();
  ModIntegrationManager.integrateMods();
  DimensionOverride.postInit();
  Stopwatch.finish(""String_Node_Str"");
}","@EventHandler public void onPostInit(FMLPostInitializationEvent e){
  Stopwatch.time(""String_Node_Str"");
  HeeIMC.runPostInit();
  KnowledgeRegistrations.initialize();
  ModIntegrationManager.integrateMods();
  DimensionOverride.postInit();
  Stopwatch.finish(""String_Node_Str"");
}",0.9254302103250478
34570,"public boolean canSeeFragment(KnowledgeObject<? extends IObjectHolder<?>> obj,KnowledgeFragment fragment){
switch (fragment.getType()) {
case VISIBLE:
    return true;
case ESSENTIAL:
  return getDiscoveryDistance(obj,distanceLimit) != distanceLimit;
case DISCOVERY:
return getDiscoveryDistance(obj,distanceLimit) == 0;
default :
return extraFragments.contains(fragment.globalID);
}
}","public boolean canSeeFragment(KnowledgeObject<? extends IObjectHolder<?>> obj,KnowledgeFragment fragment){
switch (fragment.getType()) {
case VISIBLE:
    return true;
case ESSENTIAL:
  return getDiscoveryDistance(obj) != distanceLimit;
case DISCOVERY:
return getDiscoveryDistance(obj) == 0;
default :
return extraFragments.contains(fragment.globalID);
}
}",0.9621621621621622
34571,"public int getDiscoveryDistance(KnowledgeObject<? extends IObjectHolder<?>> obj,int limit){
  for (int level=0; level < limit; level++) {
    if (discoveredObjects.contains(obj))     return level;
 else     obj=obj.getParent();
  }
  return limit;
}","public int getDiscoveryDistance(KnowledgeObject<? extends IObjectHolder<?>> obj){
  for (int level=0; level < distanceLimit; level++) {
    if (discoveredObjects.contains(obj))     return level;
 else     obj=obj.getParent();
  }
  return distanceLimit;
}",0.9404761904761904
34572,"public void moveToCurrentObject(boolean animate){
  if (currentObject == null)   return;
  int newY=Integer.MIN_VALUE;
  for (  ObjectDisplayElement element : objectElements) {
    if (element.object.getObject() == currentObject.getObject()) {
      newY=-(element.y + element.object.getY() - (height >> 1) + 11);
      break;
    }
  }
  if (newY == Integer.MIN_VALUE) {
    for (    CategoryDisplayElement element : categoryElements) {
      if (element.category.getCategoryObject().getObject() == currentObject.getObject()) {
        newY=-(element.y + element.category.getCategoryObject().getY() - (height >> 1) + 20);
        break;
      }
    }
  }
  if (newY != Integer.MIN_VALUE) {
    if (animate)     offsetY.startAnimation(offsetY.value(),newY,0.5F);
 else     offsetY.set(newY);
  }
}","public void moveToCurrentObject(boolean animate){
  if (currentObject == null)   return;
  int newY=Integer.MIN_VALUE;
  for (  ObjectDisplayElement element : objectElements) {
    if (element.object == currentObject) {
      newY=-(element.y + element.object.getY() - (height >> 1) + 11);
      break;
    }
  }
  if (newY != Integer.MIN_VALUE) {
    if (animate)     offsetY.startAnimation(offsetY.value(),newY,0.5F);
 else     offsetY.set(newY);
  }
}",0.7082334132693845
34573,"public void showObject(KnowledgeObject<? extends IObjectHolder<?>> object){
  if (currentObject != null) {
    currentObjectPages.clear();
    purchaseElements.clear();
    if (currentObject != object) {
      pageIndex=0;
      btnHelp.forcedHover=false;
    }
  }
  if ((currentObject=object) == null)   return;
  byte page=0;
  int yy=0, height=0;
  boolean isUnlocked=false;
  Map<KnowledgeFragment,Boolean> pageMap=new LinkedHashMap<>();
  Iterator<KnowledgeFragment> iter=currentObject.getFragments().iterator();
  while (true) {
    KnowledgeFragment fragment=iter.hasNext() ? iter.next() : null;
    if (fragment == null || yy + (height=8 + fragment.getHeight(this,isUnlocked=(object == KnowledgeRegistrations.HELP || compendiumFile.hasUnlockedFragment(fragment)))) > guiPageHeight) {
      currentObjectPages.put(page++,pageMap);
      if (fragment == null)       break;
 else {
        pageMap=new LinkedHashMap<>();
        pageMap.put(fragment,isUnlocked);
        yy=height;
        continue;
      }
    }
    pageMap.put(fragment,isUnlocked);
    yy+=height;
  }
  if (object == KnowledgeRegistrations.HELP) {
    btnHelp.forcedHover=true;
    if (!compendiumFile.seenHelp()) {
      PacketPipeline.sendToServer(new S03SimpleEvent(EventType.OPEN_COMPENDIUM_HELP));
      compendiumFile.setSeenHelp();
    }
    purchaseElements.clear();
    return;
  }
  updatePurchaseElements();
}","public void showObject(KnowledgeObject<? extends IObjectHolder<?>> object){
  if (currentObject != null) {
    currentObjectPages.clear();
    purchaseElements.clear();
    if (currentObject != object) {
      pageIndex=0;
      btnHelp.forcedHover=false;
    }
  }
  if ((currentObject=object) == null)   return;
  byte page=0;
  int yy=0, height=0;
  boolean isUnlocked=false;
  Map<KnowledgeFragment,Boolean> pageMap=new LinkedHashMap<>();
  Iterator<KnowledgeFragment> iter=currentObject.getFragments().iterator();
  while (true) {
    KnowledgeFragment fragment=iter.hasNext() ? iter.next() : null;
    if (fragment == null || yy + (height=8 + fragment.getHeight(this,isUnlocked=compendiumFile.canSeeFragment(object,fragment))) > guiPageHeight) {
      currentObjectPages.put(page++,pageMap);
      if (fragment == null)       break;
 else {
        pageMap=new LinkedHashMap<>();
        pageMap.put(fragment,isUnlocked);
        yy=height;
        continue;
      }
    }
    pageMap.put(fragment,isUnlocked);
    yy+=height;
  }
  updatePurchaseElements();
}",0.8282582216808769
34574,"private void renderScreen(int mouseX,int mouseY,float partialTickTime){
  GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  GL11.glColor4f(1F,1F,1F,1F);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  renderBackgroundGUI();
  float offY=ptt(offsetY.value(),prevOffsetY,partialTickTime);
  int yLowerBound=-(int)offY - 32, yUpperBound=-(int)offY + height;
  GL11.glPushMatrix();
  GL11.glTranslatef(0F,offY,0F);
  for (  CategoryDisplayElement element : categoryElements)   element.render(this,yLowerBound,yUpperBound);
  for (  ObjectDisplayElement element : objectElements)   element.render(this,compendiumFile,yLowerBound,yUpperBound);
  RenderHelper.disableStandardItemLighting();
  GL11.glPopMatrix();
  if (!(mouseX < 24 || mouseX > width - 24 || mouseY < 24 || mouseY > height - 24)) {
    for (    CategoryDisplayElement element : categoryElements) {
      if (element.isMouseOver(mouseX,mouseY,(int)offY)) {
        GuiItemRenderHelper.setupTooltip(mouseX,mouseY,element.category.getTooltip());
      }
    }
    for (    ObjectDisplayElement element : objectElements) {
      if (element.isMouseOver(mouseX,mouseY,(int)offY)) {
        GuiItemRenderHelper.setupTooltip(mouseX,mouseY,element.object.getTooltip());
      }
    }
  }
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  renderFragmentCount((width >> 1) - 25,24);
  for (int a=0; a < 2; a++)   pageArrows[a].visible=false;
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  if (currentObject == KnowledgeRegistrations.HELP)   renderPaper(width >> 1,height >> 1,mouseX,mouseY);
 else   if (currentObject != null)   renderPaper((width >> 1) + (width >> 2) + 4,height >> 1,mouseX,mouseY);
  prevMouseX=mouseX;
}","private void renderScreen(int mouseX,int mouseY,float partialTickTime){
  GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  GL11.glColor4f(1F,1F,1F,1F);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  renderBackgroundGUI();
  float offY=ptt(offsetY.value(),prevOffsetY,partialTickTime);
  int yLowerBound=-(int)offY - 32, yUpperBound=-(int)offY + height;
  GL11.glPushMatrix();
  GL11.glTranslatef(0F,offY,0F);
  for (  CategoryDisplayElement element : categoryElements)   element.render(this,yLowerBound,yUpperBound);
  for (  ObjectDisplayElement element : objectElements)   element.render(this,compendiumFile,yLowerBound,yUpperBound);
  RenderHelper.disableStandardItemLighting();
  GL11.glPopMatrix();
  if (!(mouseX < 24 || mouseX > width - 24 || mouseY < 24 || mouseY > height - 24)) {
    for (    CategoryDisplayElement element : categoryElements) {
      if (element.isMouseOver(mouseX,mouseY,(int)offY)) {
        GuiItemRenderHelper.setupTooltip(mouseX,mouseY,element.category.getTranslatedTooltip());
      }
    }
    for (    ObjectDisplayElement element : objectElements) {
      if (element.isMouseOver(mouseX,mouseY,(int)offY)) {
        GuiItemRenderHelper.setupTooltip(mouseX,mouseY,element.object.getTranslatedTooltip());
      }
    }
  }
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  renderFragmentCount((width >> 1) - 25,24);
  for (int a=0; a < 2; a++)   pageArrows[a].visible=false;
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  if (currentObject == KnowledgeRegistrations.HELP)   renderPaper(width >> 1,height >> 1,mouseX,mouseY);
 else   if (currentObject != null)   renderPaper((width >> 1) + (width >> 2) + 4,height >> 1,mouseX,mouseY);
  prevMouseX=mouseX;
}",0.9945414847161572
34575,"private void updatePurchaseElements(){
  purchaseElements.clear();
  if (currentObject != null) {
    if (!compendiumFile.hasDiscoveredObject(currentObject)) {
      if (currentObject.isBuyable())       purchaseElements.add(new PurchaseDisplayElement(currentObject,(this.height >> 1) - 3,compendiumFile.getPoints() >= currentObject.getUnlockPrice() ? FragmentPurchaseStatus.CAN_PURCHASE : FragmentPurchaseStatus.NOT_ENOUGH_POINTS));
      return;
    }
    int yy=((this.height - guiPageTexHeight) >> 1) + guiPageTop, height;
    for (    Entry<KnowledgeFragment,Boolean> entry : currentObjectPages.get(pageIndex).entrySet()) {
      height=entry.getKey().getHeight(this,entry.getValue());
      if (!entry.getValue())       purchaseElements.add(new PurchaseDisplayElement(entry.getKey(),yy + (height >> 1) + 2,compendiumFile.canPurchaseFragment(entry.getKey())));
      yy+=8 + height;
    }
  }
}","private void updatePurchaseElements(){
  purchaseElements.clear();
  if (currentObject != null) {
    if (!compendiumFile.isDiscovered(currentObject)) {
      purchaseElements.add(new PurchaseDisplayElement(currentObject,(this.height >> 1) - 3));
      return;
    }
    int yy=((this.height - guiPageTexHeight) >> 1) + guiPageTop, height;
    for (    Entry<KnowledgeFragment,Boolean> entry : currentObjectPages.get(pageIndex).entrySet()) {
      height=entry.getKey().getHeight(this,entry.getValue());
      if (!entry.getValue())       purchaseElements.add(new PurchaseDisplayElement(entry.getKey(),yy + (height >> 1) + 2));
      yy+=8 + height;
    }
  }
}",0.359204618345093
34576,"public GuiEnderCompendium(CompendiumFile compendiumData){
  if (!(this.compendiumFile=compendiumData).seenHelp())   hoverTriggerTimer=0;
  animationList.add(offsetY=new AnimatedFloat(Easing.CUBIC));
  animationList.add(portalSpeed=new AnimatedFloat(Easing.CUBIC));
  int y=0, maxY=0;
  for (  KnowledgeCategory category : KnowledgeCategories.categoryList) {
    y+=32;
    categoryElements.add(new CategoryDisplayElement(category,y));
    y+=44;
    for (    KnowledgeObject obj : category.getAllObjects()) {
      if (!obj.isCategoryObject()) {
        objectElements.add(new ObjectDisplayElement(obj,y));
        if (obj.getY() > maxY)         maxY=obj.getY();
      }
    }
    y+=maxY + 30;
    maxY=0;
  }
  this.totalHeight=y;
  portalSpeed.startAnimation(30F,15F,1.5F);
}","public GuiEnderCompendium(CompendiumFile compendiumFile){
  this.compendiumFile=compendiumFile;
  animationList.add(offsetY=new AnimatedFloat(Easing.CUBIC));
  animationList.add(portalSpeed=new AnimatedFloat(Easing.CUBIC));
  int y=0, maxY=0;
  for (  KnowledgeObject<?> obj : KnowledgeObject.getAllObjects()) {
    objectElements.add(new ObjectDisplayElement(obj,y));
    if (obj.getY() > maxY)     maxY=obj.getY();
  }
  this.totalHeight=y;
  portalSpeed.startAnimation(30F,15F,1.5F);
}",0.6398104265402843
34577,"@Override public void updateScreen(){
  prevOffsetY=offsetY.value();
  if (!portalSpeed.isAnimating()) {
    if (currentObject != null) {
      if (MathUtil.floatEquals(portalSpeed.value(),15F))       portalSpeed.startAnimation(15F,5F,0.5F);
    }
 else     if (MathUtil.floatEquals(portalSpeed.value(),5F))     portalSpeed.startAnimation(5F,15F,0.5F);
  }
  portalRenderer.update((int)portalSpeed.value());
  for (  AnimatedFloat animation : animationList)   animation.update(0.05F);
  int wheel=Mouse.getDWheel();
  if (wheel != 0) {
    if (currentObject != null && (currentObject == KnowledgeRegistrations.HELP || prevMouseX >= width >> 1)) {
      if (wheel > 0)       actionPerformed((GuiButton)buttonList.get(3));
 else       if (wheel < 0)       actionPerformed((GuiButton)buttonList.get(4));
    }
 else     offsetY.set(offsetY.value() + (wheel > 0 ? 80 : -80));
  }
  if (!MathUtil.floatEquals(prevDragOffsetY,0F)) {
    offsetY.set(offsetY.value() - prevDragOffsetY);
    prevDragOffsetY=0F;
  }
  if (offsetY.value() > 0)   offsetY.set(0F);
 else   if (offsetY.value() < -totalHeight + height - 32)   offsetY.set(-totalHeight + height - 32);
  if (hoverTriggerTimer != Byte.MIN_VALUE && ++hoverTriggerTimer > 12) {
    if (!compendiumFile.seenHelp())     btnHelp.forcedHover=!btnHelp.forcedHover;
 else     if (currentObject == KnowledgeRegistrations.HELP) {
      if (pageIndex == 0)       pageArrows[1].forcedHover=!pageArrows[1].forcedHover;
 else {
        hoverTriggerTimer=Byte.MIN_VALUE;
        pageArrows[1].forcedHover=false;
      }
    }
    if (hoverTriggerTimer != Byte.MIN_VALUE)     hoverTriggerTimer=0;
  }
}","@Override public void updateScreen(){
  prevOffsetY=offsetY.value();
  if (!portalSpeed.isAnimating()) {
    if (currentObject != null) {
      if (MathUtil.floatEquals(portalSpeed.value(),15F))       portalSpeed.startAnimation(15F,5F,0.5F);
    }
 else     if (MathUtil.floatEquals(portalSpeed.value(),5F))     portalSpeed.startAnimation(5F,15F,0.5F);
  }
  portalRenderer.update((int)portalSpeed.value());
  for (  AnimatedFloat animation : animationList)   animation.update(0.05F);
  int wheel=Mouse.getDWheel();
  if (wheel != 0) {
    if (currentObject != null && (currentObject == KnowledgeRegistrations.HELP || prevMouseX >= width >> 1)) {
      if (wheel > 0)       actionPerformed((GuiButton)buttonList.get(3));
 else       if (wheel < 0)       actionPerformed((GuiButton)buttonList.get(4));
    }
 else     offsetY.set(offsetY.value() + (wheel > 0 ? 80 : -80));
  }
  if (!MathUtil.floatEquals(prevDragOffsetY,0F)) {
    offsetY.set(offsetY.value() - prevDragOffsetY);
    prevDragOffsetY=0F;
  }
  if (offsetY.value() > 0)   offsetY.set(0F);
 else   if (offsetY.value() < -totalHeight + height - 32)   offsetY.set(-totalHeight + height - 32);
}",0.8273638968481375
34578,"@Override protected void actionPerformed(GuiButton button){
  hasClickedButton=true;
  if (!(button.enabled && button.visible))   return;
  if (button.id == 0 && !offsetY.isAnimating()) {
    mc.displayGuiScreen(new GuiAchievementsCustom(this,mc.thePlayer.getStatFileWriter()));
  }
 else   if (button.id == 1)   showObject(KnowledgeRegistrations.HELP);
 else   if (button.id == 2 && !offsetY.isAnimating()) {
    if (currentObject != null)     showObject(null);
 else {
      mc.displayGuiScreen((GuiScreen)null);
      mc.setIngameFocus();
    }
  }
 else   if (button.id == 3)   pageIndex=(byte)Math.max(0,pageIndex - 1);
 else   if (button.id == 4)   pageIndex=(byte)Math.min(currentObjectPages.size() - 1,pageIndex + 1);
 else   if (button.id == 5) {
    if (++KnowledgeFragmentText.smoothRenderingMode > 2)     KnowledgeFragmentText.smoothRenderingMode=0;
    for (    IConfigElement element : ConfigHandler.getGuiConfigElements()) {
      if (element.getName().equals(""String_Node_Str"") && element.isProperty()) {
        element.set(KnowledgeFragmentText.smoothRenderingMode);
        break;
      }
    }
    HardcoreEnderExpansion.proxy.loadConfiguration();
  }
  if (button.id == 3 || button.id == 4)   updatePurchaseElements();
}","@Override protected void actionPerformed(GuiButton button){
  hasClickedButton=true;
  if (!(button.enabled && button.visible))   return;
  if (button.id == 0 && !offsetY.isAnimating()) {
    mc.displayGuiScreen(new GuiAchievementsCustom(this,mc.thePlayer.getStatFileWriter()));
  }
 else   if (button.id == 1)   showObject(KnowledgeRegistrations.HELP);
 else   if (button.id == 2 && !offsetY.isAnimating()) {
    if (currentObject != null)     showObject(null);
 else {
      mc.displayGuiScreen((GuiScreen)null);
      mc.setIngameFocus();
    }
  }
 else   if (button.id == 3)   pageIndex=(byte)Math.max(0,pageIndex - 1);
 else   if (button.id == 4)   pageIndex=(byte)Math.min(currentObjectPages.size() - 1,pageIndex + 1);
 else   if (button.id == 5) {
  }
  if (button.id == 3 || button.id == 4)   updatePurchaseElements();
}",0.8009661835748793
34579,"@Override protected void mouseClicked(int mouseX,int mouseY,int buttonId){
  if (buttonId == 1)   actionPerformed((GuiButton)buttonList.get(2));
 else   if (buttonId == 0 && !(mouseX < 24 || mouseX > width - 24 || mouseY < 24 || mouseY > height - 24)) {
    int offY=(int)offsetY.value();
    for (    CategoryDisplayElement element : categoryElements) {
      if (element.isMouseOver(mouseX,mouseY,offY)) {
        showObject(element.category.getCategoryObject());
        return;
      }
    }
    for (    ObjectDisplayElement element : objectElements) {
      if (element.isMouseOver(mouseX,mouseY,offY)) {
        showObject(element.object);
        return;
      }
    }
    KnowledgeObject<? extends IObjectHolder<?>> redirect=null;
    for (    PurchaseDisplayElement element : purchaseElements) {
      if (element.isMouseOver(mouseX,mouseY,(width >> 1) + (width >> 2) + 4)) {
        if (element.getStatus() == FragmentPurchaseStatus.NOT_BUYABLE && element.fragmentHasRedirect) {
          redirect=((KnowledgeFragment)element.object).getUnlockRedirect();
          break;
        }
 else         if (element.getStatus() == FragmentPurchaseStatus.CAN_PURCHASE && compendiumFile.getPoints() >= element.price) {
          Object obj=element.object;
          if (obj instanceof KnowledgeObject)           PacketPipeline.sendToServer(new S02CompendiumPurchase((KnowledgeObject)obj));
 else           if (obj instanceof KnowledgeFragment)           PacketPipeline.sendToServer(new S02CompendiumPurchase((KnowledgeFragment)obj));
 else           continue;
          return;
        }
      }
    }
    if (redirect != null) {
      showObject(redirect);
      moveToCurrentObject(true);
    }
  }
  if (currentObject != null) {
    int x=(width >> 1) + (width >> 2) + 4 - (guiPageTexWidth >> 1) + guiPageLeft;
    int y=(height >> 1) - (guiPageTexHeight >> 1) + guiPageTop;
    for (    Entry<KnowledgeFragment,Boolean> entry : currentObjectPages.get(pageIndex).entrySet()) {
      if (entry.getKey().onClick(this,x,y,mouseX,mouseY,buttonId,entry.getValue()))       return;
      y+=8 + entry.getKey().getHeight(this,entry.getValue());
    }
  }
  hasClickedButton=false;
  super.mouseClicked(mouseX,mouseY,buttonId);
  if (hasClickedButton)   hasClickedButton=false;
 else   dragMouseY=mouseY;
}","@Override protected void mouseClicked(int mouseX,int mouseY,int buttonId){
  if (buttonId == 1)   actionPerformed((GuiButton)buttonList.get(2));
 else   if (buttonId == 0 && !(mouseX < 24 || mouseX > width - 24 || mouseY < 24 || mouseY > height - 24)) {
    int offY=(int)offsetY.value();
    for (    ObjectDisplayElement element : objectElements) {
      if (element.isMouseOver(mouseX,mouseY,offY)) {
        showObject(element.object);
        return;
      }
    }
    for (    PurchaseDisplayElement element : purchaseElements) {
      if (element.isMouseOver(mouseX,mouseY,(width >> 1) + (width >> 2) + 4) && compendiumFile.getPoints() >= element.price) {
        Object obj=element.object;
        if (obj instanceof KnowledgeObject)         PacketPipeline.sendToServer(new S02CompendiumPurchase((KnowledgeObject)obj));
 else         if (obj instanceof KnowledgeFragment)         PacketPipeline.sendToServer(new S02CompendiumPurchase((KnowledgeFragment)obj));
 else         continue;
        return;
      }
    }
  }
  if (currentObject != null) {
    int x=(width >> 1) + (width >> 2) + 4 - (guiPageTexWidth >> 1) + guiPageLeft;
    int y=(height >> 1) - (guiPageTexHeight >> 1) + guiPageTop;
    for (    Entry<KnowledgeFragment,Boolean> entry : currentObjectPages.get(pageIndex).entrySet()) {
      if (entry.getKey().onClick(this,x,y,mouseX,mouseY,buttonId,entry.getValue()))       return;
      y+=8 + entry.getKey().getHeight(this,entry.getValue());
    }
  }
  hasClickedButton=false;
  super.mouseClicked(mouseX,mouseY,buttonId);
  if (hasClickedButton)   hasClickedButton=false;
 else   dragMouseY=mouseY;
}",0.6938359653591442
34580,"private void renderPaper(int x,int y,int mouseX,int mouseY){
  GL11.glDisable(GL11.GL_DEPTH_TEST);
  pageArrows[0].xPosition=x - (guiPageTexWidth * 3 / 10) - 10;
  pageArrows[1].xPosition=x + (guiPageTexWidth * 3 / 10) - 10;
  GL11.glColor4f(1F,1F,1F,1F);
  RenderHelper.disableStandardItemLighting();
  mc.getTextureManager().bindTexture(texPage);
  drawTexturedModalRect(x - (guiPageTexWidth >> 1),y - (guiPageTexHeight >> 1),0,0,guiPageTexWidth,guiPageTexHeight);
  if (compendiumFile.hasDiscoveredObject(currentObject)) {
    x=x - (guiPageTexWidth >> 1) + guiPageLeft;
    y=y - (guiPageTexHeight >> 1) + guiPageTop;
    for (    Entry<KnowledgeFragment,Boolean> entry : currentObjectPages.get(pageIndex).entrySet()) {
      entry.getKey().onRender(this,x,y,mouseX,mouseY,entry.getValue());
      y+=8 + entry.getKey().getHeight(this,entry.getValue());
    }
    for (int a=0; a < 2; a++)     pageArrows[a].visible=true;
    pageArrows[0].visible=pageIndex > 0;
    pageArrows[1].visible=pageIndex < currentObjectPages.size() - 1;
    x=x + (guiPageTexWidth >> 1) - guiPageLeft;
  }
  for (  PurchaseDisplayElement element : purchaseElements)   element.render(this,mouseX,mouseY,x);
  if (!currentObject.isBuyable() && !compendiumFile.hasDiscoveredObject(currentObject)) {
    RenderHelper.disableStandardItemLighting();
    String msg=I18n.format(""String_Node_Str"");
    mc.fontRenderer.drawString(msg,x - (mc.fontRenderer.getStringWidth(msg) >> 1),y - 7,0x404040);
  }
  GL11.glEnable(GL11.GL_DEPTH_TEST);
}","private void renderPaper(int x,int y,int mouseX,int mouseY){
  GL11.glDisable(GL11.GL_DEPTH_TEST);
  pageArrows[0].xPosition=x - (guiPageTexWidth * 3 / 10) - 10;
  pageArrows[1].xPosition=x + (guiPageTexWidth * 3 / 10) - 10;
  GL11.glColor4f(1F,1F,1F,1F);
  RenderHelper.disableStandardItemLighting();
  mc.getTextureManager().bindTexture(texPage);
  drawTexturedModalRect(x - (guiPageTexWidth >> 1),y - (guiPageTexHeight >> 1),0,0,guiPageTexWidth,guiPageTexHeight);
  if (compendiumFile.isDiscovered(currentObject)) {
    x=x - (guiPageTexWidth >> 1) + guiPageLeft;
    y=y - (guiPageTexHeight >> 1) + guiPageTop;
    for (    Entry<KnowledgeFragment,Boolean> entry : currentObjectPages.get(pageIndex).entrySet()) {
      entry.getKey().onRender(this,x,y,mouseX,mouseY,entry.getValue());
      y+=8 + entry.getKey().getHeight(this,entry.getValue());
    }
    for (int a=0; a < 2; a++)     pageArrows[a].visible=true;
    pageArrows[0].visible=pageIndex > 0;
    pageArrows[1].visible=pageIndex < currentObjectPages.size() - 1;
    x=x + (guiPageTexWidth >> 1) - guiPageLeft;
  }
  for (  PurchaseDisplayElement element : purchaseElements)   element.render(this,mouseX,mouseY,x);
  if (!compendiumFile.isDiscovered(currentObject)) {
    RenderHelper.disableStandardItemLighting();
    String msg=I18n.format(""String_Node_Str"");
    mc.fontRenderer.drawString(msg,x - (mc.fontRenderer.getStringWidth(msg) >> 1),y - 7,0x404040);
  }
  GL11.glEnable(GL11.GL_DEPTH_TEST);
}",0.6729222520107239
34581,"private void renderScreenPost(int mouseX,int mouseY,float partialTickTime){
  mc.getTextureManager().bindTexture(texBack);
  GuiButton button=(GuiButton)buttonList.get(5);
  drawTexturedModalRect(button.xPosition,button.yPosition,KnowledgeFragmentText.smoothRenderingMode > 0 ? 56 : 77,29,20,20);
  if (mouseX >= button.xPosition && mouseX <= button.xPosition + button.width && mouseY > button.yPosition && mouseY < button.yPosition + button.height) {
    StringBuilder build=new StringBuilder(110);
    build.append(I18n.format(""String_Node_Str"")).append('\n');
    build.append(EnumChatFormatting.GRAY).append(I18n.format(""String_Node_Str"")).append('\n');
    build.append(EnumChatFormatting.GRAY).append(I18n.format(""String_Node_Str"")).append('\n');
    build.append(EnumChatFormatting.DARK_GREEN).append(I18n.format(""String_Node_Str"")).append(""String_Node_Str"");
    build.append(KnowledgeFragmentText.smoothRenderingMode == 0 ? I18n.format(""String_Node_Str"") : String.valueOf(KnowledgeFragmentText.smoothRenderingMode));
    GuiItemRenderHelper.setupTooltip(mouseX,mouseY - 24,build.toString());
  }
  GuiItemRenderHelper.drawTooltip(this,fontRendererObj);
}","private void renderScreenPost(int mouseX,int mouseY,float partialTickTime){
}",0.1241935483870967
34582,"public static <T extends IObjectHolder<?>>KnowledgeObject<T> fromObject(ItemStack is){
  if (!KnowledgeUtils.isItemStackViable(is))   return null;
  return (KnowledgeObject<T>)allObjects.valueCollection().stream().filter(knowledgeObj -> knowledgeObj.holder.checkEquality(is)).findFirst().orElse(null);
}","public static final <T extends IObjectHolder<?>>KnowledgeObject<T> fromObject(ItemStack is){
  if (!KnowledgeUtils.isItemStackViable(is))   return null;
  return (KnowledgeObject<T>)getAllObjects().stream().filter(knowledgeObj -> knowledgeObj.holder.checkEquality(is)).findFirst().orElse(null);
}",0.9248747913188649
34583,"public static <T extends IObjectHolder<?>>KnowledgeObject<T> fromID(int id){
  return (KnowledgeObject<T>)allObjects.get(id);
}","public static final <T extends IObjectHolder<?>>KnowledgeObject<T> fromID(int id){
  return (KnowledgeObject<T>)allObjects.get(id);
}",0.9769230769230768
34584,"@SideOnly(Side.CLIENT) public CompendiumFile(NBTTagCompound nbt){
  super(""String_Node_Str"",""String_Node_Str"");
  onLoad(nbt);
}","@SideOnly(Side.CLIENT) public CompendiumFile(NBTTagCompound nbt){
  super(""String_Node_Str"",""String_Node_Str"");
  onLoad(nbt);
  discoveredObjects.add(KnowledgeRegistrations.HELP);
}",0.8258064516129032
34585,"@Override public void updateScreen(){
  prevOffsetY=offsetY.value();
  if (!portalSpeed.isAnimating()) {
    if (currentObject != null) {
      if (MathUtil.floatEquals(portalSpeed.value(),15F))       portalSpeed.startAnimation(15F,5F,0.5F);
    }
 else     if (MathUtil.floatEquals(portalSpeed.value(),5F))     portalSpeed.startAnimation(5F,15F,0.5F);
  }
  portalRenderer.update((int)portalSpeed.value());
  for (  AnimatedFloat animation : animationList)   animation.update(0.05F);
  int wheel=Mouse.getDWheel();
  if (wheel != 0) {
    if (currentObject != null && (currentObject == KnowledgeRegistrations.HELP || prevMouseX >= width >> 1)) {
      if (wheel > 0)       actionPerformed((GuiButton)buttonList.get(3));
 else       if (wheel < 0)       actionPerformed((GuiButton)buttonList.get(4));
    }
 else     offsetY.set(offsetY.value() + (wheel > 0 ? 80 : -80));
  }
  if (!MathUtil.floatEquals(prevDragOffsetY,0F)) {
    offsetY.set(offsetY.value() - prevDragOffsetY);
    prevDragOffsetY=0F;
  }
  if (offsetY.value() > 0)   offsetY.set(0F);
 else   if (offsetY.value() < -totalHeight + height - 32)   offsetY.set(-totalHeight + height - 32);
}","@Override public void updateScreen(){
  prevOffsetY=offsetY.value();
  if (!portalSpeed.isAnimating()) {
    if (currentObject != null) {
      if (MathUtil.floatEquals(portalSpeed.value(),15F))       portalSpeed.startAnimation(15F,5F,0.5F);
    }
 else     if (MathUtil.floatEquals(portalSpeed.value(),5F))     portalSpeed.startAnimation(5F,15F,0.5F);
  }
  portalRenderer.update((int)portalSpeed.value());
  for (  AnimatedFloat animation : animationList)   animation.update(0.05F);
  int wheel=Mouse.getDWheel();
  if (wheel != 0) {
    if (currentObject != null && (currentObject == KnowledgeRegistrations.HELP || prevMouseX >= width >> 1)) {
      if (wheel > 0)       actionPerformed((GuiButton)buttonList.get(3));
 else       if (wheel < 0)       actionPerformed((GuiButton)buttonList.get(4));
    }
 else     offsetY.set(offsetY.value() + (wheel > 0 ? 80 : -80));
  }
  if (!MathUtil.floatEquals(prevDragOffsetY,0F)) {
    offsetY.set(offsetY.value() - prevDragOffsetY);
    prevDragOffsetY=0F;
  }
  if (offsetY.value() > 0)   offsetY.set(0F);
 else   if (offsetY.value() < -totalHeight + height - 32)   offsetY.set(totalHeight > height ? -totalHeight + height - 32F : 0F);
}",0.9876015391192816
34586,"public static void initialize(){
  TEST2.setParent(TEST1,0,4);
}","public static void initialize(){
  HELP.addFragments(new FragmentText(0).setType(KnowledgeFragmentType.VISIBLE));
  HELP.addFragments(new FragmentText(1).setType(KnowledgeFragmentType.VISIBLE));
  HELP.addFragments(new FragmentText(2).setType(KnowledgeFragmentType.VISIBLE));
  HELP.addFragments(new FragmentText(3).setType(KnowledgeFragmentType.VISIBLE));
  TEST2.setParent(TEST1,0,4);
}",0.2831858407079646
34587,"public T setType(KnowledgeFragmentType type,int price){
  if ((price == 0) ^ (type == KnowledgeFragmentType.SECRET)) {
    throw new IllegalArgumentException(price == 0 ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  this.type=type;
  this.price=0;
  return (T)this;
}","public T setType(KnowledgeFragmentType type,int price){
  if ((price != 0) ^ (type == KnowledgeFragmentType.SECRET)) {
    throw new IllegalArgumentException(price == 0 ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  this.type=type;
  this.price=0;
  return (T)this;
}",0.996268656716418
34588,"@SideOnly(Side.CLIENT) private static void renderString(String str,int x,int y,int maxWidth,int normalColor,int smoothColor){
  Minecraft mc=Minecraft.getMinecraft();
  FontRenderer fontRenderer=mc.fontRenderer;
  boolean origFont=fontRenderer.getUnicodeFlag();
  fontRenderer.setUnicodeFlag(true);
  if (mc.gameSettings.guiScale == 2) {
    fontRenderer.drawSplitString(str,x,y,maxWidth,smoothColor);
  }
 else   fontRenderer.drawSplitString(str,x,y,maxWidth,normalColor);
  fontRenderer.setUnicodeFlag(origFont);
}","@SideOnly(Side.CLIENT) private static void renderString(String str,int x,int y,int maxWidth,int color){
  Minecraft mc=Minecraft.getMinecraft();
  FontRenderer fontRenderer=mc.fontRenderer;
  boolean origFont=fontRenderer.getUnicodeFlag();
  fontRenderer.setUnicodeFlag(true);
  if (mc.gameSettings.guiScale == 3) {
    float dist=0.08F;
    for (int cycle=0; cycle < 2; cycle++) {
      GL11.glTranslatef(-dist,0F,0F);
      fontRenderer.drawSplitString(str,x,y,maxWidth,color);
      GL11.glTranslatef(dist,0F,0F);
      GL11.glTranslatef(0F,-dist,0F);
      fontRenderer.drawSplitString(str,x,y,maxWidth,color);
      GL11.glTranslatef(0F,dist,0F);
      GL11.glTranslatef(dist,-dist,0F);
      fontRenderer.drawSplitString(str,x,y,maxWidth,color);
      GL11.glTranslatef(-dist,dist,0F);
      dist=-dist;
    }
  }
 else   fontRenderer.drawSplitString(str,x,y,maxWidth,color);
  fontRenderer.setUnicodeFlag(origFont);
}",0.6361111111111111
34589,"@Override @SideOnly(Side.CLIENT) public void onRender(GuiEnderCompendium gui,int x,int y,int mouseX,int mouseY,boolean isUnlocked){
  String str=getString(isUnlocked);
  renderString(str,x + 1,y,GuiEnderCompendium.guiPageWidth - 10,255 << 24,240 << 24);
  if (isUnlocked) {
    KnowledgeObject<?> obj=getHoveredObject(gui.mc.fontRenderer,mouseX,mouseY,x,y);
    if (obj != null)     GuiItemRenderHelper.setupTooltip(mouseX,mouseY,obj.getTranslatedTooltip() + ""String_Node_Str"" + EnumChatFormatting.DARK_PURPLE+ I18n.format(""String_Node_Str""));
  }
}","@Override @SideOnly(Side.CLIENT) public void onRender(GuiEnderCompendium gui,int x,int y,int mouseX,int mouseY,boolean isUnlocked){
  String str=getString(isUnlocked);
  renderString(str,x + 1,y,GuiEnderCompendium.guiPageWidth - 10,255 << 24);
  if (isUnlocked) {
    KnowledgeObject<?> obj=getHoveredObject(gui.mc.fontRenderer,mouseX,mouseY,x,y);
    if (obj != null)     GuiItemRenderHelper.setupTooltip(mouseX,mouseY,obj.getTranslatedTooltip() + ""String_Node_Str"" + EnumChatFormatting.DARK_PURPLE+ I18n.format(""String_Node_Str""));
  }
}",0.9908088235294118
34590,"public static boolean tryDiscover(EntityPlayer player,ItemStack is){
  return getPlayerData(player).tryDiscoverObject(KnowledgeObject.fromObject(is));
}","public static boolean tryDiscover(EntityPlayer player,ItemStack is){
  KnowledgeObject knowledgeObj=KnowledgeObject.fromObject(is);
  return knowledgeObj != null && getPlayerData(player).tryDiscoverObject(knowledgeObj);
}",0.5630026809651475
34591,"@SubscribeEvent(priority=EventPriority.LOWEST) public void onContainerOpen(PlayerOpenContainerEvent e){
  final EntityPlayer player=e.entityPlayer;
  final World world=player.worldObj;
  if (e.canInteractWith && !world.isRemote && player.openContainer != player.inventoryContainer && playerContainerTicks.update(player.getGameProfile().getId())) {
    System.out.println(""String_Node_Str"");
    for (    Slot slot : (List<Slot>)player.openContainer.inventorySlots) {
      if (slot.getHasStack())       tryDiscover(player,slot.getStack());
    }
  }
}","@SubscribeEvent(priority=EventPriority.LOWEST) public void onContainerOpen(PlayerOpenContainerEvent e){
  final EntityPlayer player=e.entityPlayer;
  final World world=player.worldObj;
  if (e.canInteractWith && !world.isRemote && player.openContainer != player.inventoryContainer && playerContainerTicks.update(player.getGameProfile().getId())) {
    for (    Slot slot : (List<Slot>)player.openContainer.inventorySlots) {
      if (slot.getHasStack())       tryDiscover(player,slot.getStack());
    }
  }
}",0.6931067044381491
34592,"private void collideWithEntities(List<? extends Entity> list){
  double bodyCenterX=(dragonPartBody.boundingBox.minX + dragonPartBody.boundingBox.maxX) * 0.5D;
  double bodyCenterZ=(dragonPartBody.boundingBox.minZ + dragonPartBody.boundingBox.maxZ) * 0.5D;
  for (  Entity entity : list) {
    if (entity instanceof EntityLivingBase || entity instanceof EntityBlockFallingObsidian) {
      while (entity.ridingEntity != null)       entity=entity.ridingEntity;
      double[] vec=DragonUtil.getNormalizedVector(entity.posX - bodyCenterX,entity.posZ - bodyCenterZ);
      CollisionEvent event=new CollisionEvent(entity,vec[0] * 2D,0.2D,vec[1] * 2D);
      currentAttack.onCollisionEvent(event);
      event.collidedEntity.motionX=event.velocityX;
      event.collidedEntity.motionY=event.velocityY;
      event.collidedEntity.motionZ=event.velocityZ;
      if (entity instanceof EntityPlayerMP)       PacketPipeline.sendToPlayer((EntityPlayerMP)entity,new C06SetPlayerVelocity(event.velocityX,event.velocityY,event.velocityZ));
    }
  }
}","private void collideWithEntities(List<? extends Entity> list){
  double bodyCenterX=(dragonPartBody.boundingBox.minX + dragonPartBody.boundingBox.maxX) * 0.5D;
  double bodyCenterZ=(dragonPartBody.boundingBox.minZ + dragonPartBody.boundingBox.maxZ) * 0.5D;
  for (  Entity entity : list) {
    if (entity instanceof EntityLivingBase || entity instanceof EntityBlockFallingObsidian) {
      while (entity.ridingEntity != null)       entity=entity.ridingEntity;
      Vec vec=Vec.xz(entity.posX - bodyCenterX,entity.posZ - bodyCenterZ).normalized();
      CollisionEvent event=new CollisionEvent(entity,vec.x * 2D,0.2D,vec.z * 2D);
      currentAttack.onCollisionEvent(event);
      event.collidedEntity.motionX=event.velocityX;
      event.collidedEntity.motionY=event.velocityY;
      event.collidedEntity.motionZ=event.velocityZ;
      if (entity instanceof EntityPlayerMP)       PacketPipeline.sendToPlayer((EntityPlayerMP)entity,new C06SetPlayerVelocity(event.velocityX,event.velocityY,event.velocityZ));
    }
  }
}",0.9669260700389104
34593,"@Override protected void mouseClicked(int mouseX,int mouseY,int buttonId){
  if (buttonId == 0 && achievements != null && screenType == 0) {
    if (mouseX < width / 2 - 113 || mouseX > width / 2 + 113 || mouseY < height / 2 - 84 || mouseY > height / 2 + 68) {
      super.mouseClicked(mouseX,mouseY,buttonId);
      return;
    }
    int offsetX=MathUtil.clamp(MathUtil.floor(field_146567_u),AchievementList.minDisplayColumn * 24 - 112,AchievementList.maxDisplayColumn * 24 - 78);
    int offsetY=MathUtil.clamp(MathUtil.floor(field_146566_v),AchievementList.minDisplayRow * 24 - 112,AchievementList.maxDisplayRow * 24 - 78);
    int centerX=(width - field_146555_f) / 2 + 16;
    int centerY=(height - field_146557_g) / 2 + 17;
    float realMouseX=(mouseX - centerX) * field_146570_r;
    float realMouseY=(mouseY - centerY) * field_146570_r;
    for (    Achievement achievement : achievements.getAchievements()) {
      int x=achievement.displayColumn * 24 - offsetX;
      int y=achievement.displayRow * 24 - offsetY;
      if (x >= -24 && y >= -24 && x <= 224F * field_146570_r && y <= 155F * field_146570_r && realMouseX >= x && realMouseX <= x + 22 && realMouseY >= y && realMouseY <= y + 22) {
        KnowledgeObject<? extends IObjectHolder<?>> obj=((HeeAchievement)achievement).getKnowledgeObj();
        if (obj == null)         obj=KnowledgeUtils.tryGetFromItemStack(achievement.theItemStack);
        if (obj != null)         CompendiumEventsClient.openCompendium(obj);
      }
    }
  }
 else   if (buttonId == 1) {
    mc.displayGuiScreen(field_146562_a);
  }
  super.mouseClicked(mouseX,mouseY,buttonId);
}","@Override protected void mouseClicked(int mouseX,int mouseY,int buttonId){
  if (buttonId == 0 && achievements != null && screenType == 0) {
    if (mouseX < width / 2 - 113 || mouseX > width / 2 + 113 || mouseY < height / 2 - 84 || mouseY > height / 2 + 68) {
      super.mouseClicked(mouseX,mouseY,buttonId);
      return;
    }
    int offsetX=MathUtil.clamp(MathUtil.floor(field_146567_u),AchievementList.minDisplayColumn * 24 - 112,AchievementList.maxDisplayColumn * 24 - 78);
    int offsetY=MathUtil.clamp(MathUtil.floor(field_146566_v),AchievementList.minDisplayRow * 24 - 112,AchievementList.maxDisplayRow * 24 - 78);
    int centerX=(width - field_146555_f) / 2 + 16;
    int centerY=(height - field_146557_g) / 2 + 17;
    float realMouseX=(mouseX - centerX) * field_146570_r;
    float realMouseY=(mouseY - centerY) * field_146570_r;
    for (    Achievement achievement : achievements.getAchievements()) {
      int x=achievement.displayColumn * 24 - offsetX;
      int y=achievement.displayRow * 24 - offsetY;
      if (x >= -24 && y >= -24 && x <= 224F * field_146570_r && y <= 155F * field_146570_r && realMouseX >= x && realMouseX <= x + 22 && realMouseY >= y && realMouseY <= y + 22) {
        KnowledgeObject<? extends IObjectHolder<?>> obj=((HeeAchievement)achievement).getKnowledgeObj();
        if (obj == null)         obj=KnowledgeObject.fromObject(achievement.theItemStack);
        if (obj != null)         CompendiumEventsClient.openCompendium(obj);
      }
    }
  }
 else   if (buttonId == 1) {
    mc.displayGuiScreen(field_146562_a);
  }
  super.mouseClicked(mouseX,mouseY,buttonId);
}",0.987037037037037
34594,"@SubscribeEvent public void onClientTick(ClientTickEvent e){
  if (e.phase != Phase.START)   return;
  if ((keyOpenCompendium.isPressed() || Keyboard.getEventKeyState() && Keyboard.getEventKey() == keyOpenCompendium.getKeyCode()) && (mc.inGameHasFocus || mc.currentScreen instanceof GuiContainer)) {
    if (canOpenCompendium()) {
      KnowledgeObject<? extends IObjectHolder<?>> obj=null;
      if (mc.inGameHasFocus) {
      }
 else {
        GuiContainer container=(GuiContainer)mc.currentScreen;
        List<Slot> slots=container.inventorySlots.inventorySlots;
        ScaledResolution res=new ScaledResolution(mc,mc.displayWidth,mc.displayHeight);
        int mouseX=Mouse.getX() * res.getScaledWidth() / mc.displayWidth, mouseY=res.getScaledHeight() - Mouse.getY() * res.getScaledHeight() / mc.displayHeight - 1;
        mouseX-=(container.width - container.xSize) / 2;
        mouseY-=(container.height - container.ySize) / 2;
        for (        Slot slot : slots) {
          if (slot.getHasStack() && slot.func_111238_b() && mouseX >= slot.xDisplayPosition - 1 && mouseX <= slot.xDisplayPosition + 16 && mouseY >= slot.yDisplayPosition - 1 && mouseY <= slot.yDisplayPosition + 16) {
            obj=KnowledgeUtils.tryGetFromItemStack(slot.getStack());
            break;
          }
        }
        if (obj == null)         return;
      }
      openCompendium(obj);
      if (!mc.thePlayer.getStatFileWriter().hasAchievementUnlocked(AchievementManager.ENDER_COMPENDIUM)) {
        PacketPipeline.sendToServer(new S03SimpleEvent(EventType.OPEN_COMPENDIUM));
      }
    }
  }
}","@SubscribeEvent public void onClientTick(ClientTickEvent e){
  if (e.phase != Phase.START)   return;
  if ((keyOpenCompendium.isPressed() || Keyboard.getEventKeyState() && Keyboard.getEventKey() == keyOpenCompendium.getKeyCode()) && (mc.inGameHasFocus || mc.currentScreen instanceof GuiContainer)) {
    if (canOpenCompendium()) {
      KnowledgeObject<? extends IObjectHolder<?>> obj=null;
      if (mc.inGameHasFocus) {
      }
 else {
        GuiContainer container=(GuiContainer)mc.currentScreen;
        List<Slot> slots=container.inventorySlots.inventorySlots;
        ScaledResolution res=new ScaledResolution(mc,mc.displayWidth,mc.displayHeight);
        int mouseX=Mouse.getX() * res.getScaledWidth() / mc.displayWidth, mouseY=res.getScaledHeight() - Mouse.getY() * res.getScaledHeight() / mc.displayHeight - 1;
        mouseX-=(container.width - container.xSize) / 2;
        mouseY-=(container.height - container.ySize) / 2;
        for (        Slot slot : slots) {
          if (slot.getHasStack() && slot.func_111238_b() && mouseX >= slot.xDisplayPosition - 1 && mouseX <= slot.xDisplayPosition + 16 && mouseY >= slot.yDisplayPosition - 1 && mouseY <= slot.yDisplayPosition + 16) {
            obj=KnowledgeObject.fromObject(slot.getStack());
            break;
          }
        }
        if (obj == null)         return;
      }
      openCompendium(obj);
      if (!mc.thePlayer.getStatFileWriter().hasAchievementUnlocked(AchievementManager.ENDER_COMPENDIUM)) {
        PacketPipeline.sendToServer(new S03SimpleEvent(EventType.OPEN_COMPENDIUM));
      }
    }
  }
}",0.9867758186397984
34595,"@Override public void processCommand(ICommandSender sender,String[] args){
  if (!Log.isDebugEnabled()) {
    sendMessage(sender,""String_Node_Str"");
    return;
  }
  if (args.length == 0) {
    for (    String s : (EnumChatFormatting.GREEN + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").split(""String_Node_Str"")) {
      sendMessage(sender,s);
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && args.length == 2) {
    EntityBossDragon dragon=getDragon();
    if (dragon == null)     return;
    if (args[1].equals(""String_Node_Str"")) {
      dragon.target=null;
      sendMessage(sender,""String_Node_Str"");
      return;
    }
    boolean found=false;
    for (    EntityPlayer player : (List<EntityPlayer>)dragon.worldObj.playerEntities) {
      if (player.getCommandSenderName().equalsIgnoreCase(args[1])) {
        dragon.trySetTarget(player);
        found=true;
        break;
      }
    }
    if (!found) {
      sendMessage(sender,""String_Node_Str"");
      return;
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") && args.length == 2) {
    try {
      overrideWingSpeed=Float.parseFloat(args[1]);
    }
 catch (    NumberFormatException e) {
      sendMessage(sender,""String_Node_Str"");
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    EntityBossDragon dragon=getDragon();
    if (dragon != null)     dragon.forceAttackEnd=true;
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    EntityBossDragon dragon=getDragon();
    if (dragon != null)     dragon.frozen=!dragon.frozen;
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    DebugBoard.startDebug(DimensionManager.getWorld(1));
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    DebugBoard.stopDebug();
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    HardcoreEnderExpansion.proxy.openGui(""String_Node_Str"");
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    HardcoreEnderExpansion.proxy.openGui(""String_Node_Str"");
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    WorldServer world : DimensionManager.getWorlds()) {
      WorldInfo info=world.getWorldInfo();
      info.setRaining(false);
      info.setThundering(false);
      info.setRainTime(Integer.MAX_VALUE);
      info.setThunderTime(Integer.MAX_VALUE);
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    Stopwatch.isEnabled=!Stopwatch.isEnabled;
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") && args.length >= 2 && sender instanceof EntityPlayer && ItemList.debug_stick != null) {
    ItemStack stick=new ItemStack(ItemList.debug_stick);
    ItemUtil.getTagRoot(stick,true).setString(""String_Node_Str"",args[1]);
    EntityPlayer player=(EntityPlayer)sender;
    player.inventory.mainInventory[player.inventory.currentItem]=stick;
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") && args.length >= 2 && sender instanceof EntityPlayer) {
    try {
      Stopwatch.time(""String_Node_Str"");
      boolean found=false;
      ClassPath path=ClassPath.from(HeeDebugCommand.class.getClassLoader());
      for (      ClassInfo clsInfo : path.getAllClasses()) {
        if (clsInfo.getSimpleName().equals(args[1]) && clsInfo.getPackageName().startsWith(""String_Node_Str"")) {
          HeeTest test=(HeeTest)clsInfo.load().getField(""String_Node_Str"").get(null);
          test.player=(EntityPlayer)sender;
          test.world=test.player.worldObj;
          try {
            test.run(ArrayUtils.subarray(args,2,args.length));
            sendMessage(sender,""String_Node_Str"");
          }
 catch (          Throwable t) {
            t.printStackTrace();
            sendMessage(sender,""String_Node_Str"");
          }
          found=true;
          break;
        }
      }
      if (!found)       sendMessage(sender,""String_Node_Str"");
      Stopwatch.finish(""String_Node_Str"");
    }
 catch (    Throwable t) {
      sendMessage(sender,""String_Node_Str"");
    }
    return;
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") && sender instanceof EntityPlayer) {
    StringBuilder build=new StringBuilder();
    for (int a=1; a < args.length; a++)     build.append(args[a]).append(' ');
    UnitTester.trigger(RunTime.INGAME,args.length > 1 ? build.deleteCharAt(build.length() - 1).toString() : ""String_Node_Str"");
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") && sender instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)sender;
    player.worldObj.loadedEntityList.stream().filter(e -> e instanceof EntityItem).forEach(item -> ((EntityItem)item).setDead());
    Pos c=Pos.at(player).getDown();
    Pos.forEachBlock(c.offset(-25,0,-25),c.offset(25,-38,25),pos -> pos.setBlock(player.worldObj,BlockList.enhanced_tnt));
  }
 else {
    sendMessage(sender,""String_Node_Str"");
    return;
  }
  sendMessage(sender,""String_Node_Str"");
}","@Override public void processCommand(ICommandSender sender,String[] args){
  if (!Log.isDebugEnabled()) {
    sendMessage(sender,""String_Node_Str"");
    return;
  }
  if (args.length == 0) {
    for (    String s : (EnumChatFormatting.GREEN + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").split(""String_Node_Str"")) {
      sendMessage(sender,s);
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && args.length == 2) {
    EntityBossDragon dragon=getDragon();
    if (dragon == null)     return;
    if (args[1].equals(""String_Node_Str"")) {
      dragon.target=null;
      sendMessage(sender,""String_Node_Str"");
      return;
    }
    boolean found=false;
    for (    EntityPlayer player : (List<EntityPlayer>)dragon.worldObj.playerEntities) {
      if (player.getCommandSenderName().equalsIgnoreCase(args[1])) {
        dragon.trySetTarget(player);
        found=true;
        break;
      }
    }
    if (!found) {
      sendMessage(sender,""String_Node_Str"");
      return;
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") && args.length == 2) {
    try {
      overrideWingSpeed=Float.parseFloat(args[1]);
    }
 catch (    NumberFormatException e) {
      sendMessage(sender,""String_Node_Str"");
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    EntityBossDragon dragon=getDragon();
    if (dragon != null)     dragon.forceAttackEnd=true;
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    EntityBossDragon dragon=getDragon();
    if (dragon != null)     dragon.frozen=!dragon.frozen;
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    DebugBoard.startDebug(DimensionManager.getWorld(1));
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    DebugBoard.stopDebug();
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    KnowledgeObject<?> obj : KnowledgeObject.getAllObjects())     obj.reset();
    KnowledgeRegistrations.initialize();
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    HardcoreEnderExpansion.proxy.openGui(""String_Node_Str"");
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    HardcoreEnderExpansion.proxy.openGui(""String_Node_Str"");
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    WorldServer world : DimensionManager.getWorlds()) {
      WorldInfo info=world.getWorldInfo();
      info.setRaining(false);
      info.setThundering(false);
      info.setRainTime(Integer.MAX_VALUE);
      info.setThunderTime(Integer.MAX_VALUE);
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    Stopwatch.isEnabled=!Stopwatch.isEnabled;
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") && args.length >= 2 && sender instanceof EntityPlayer && ItemList.debug_stick != null) {
    ItemStack stick=new ItemStack(ItemList.debug_stick);
    ItemUtil.getTagRoot(stick,true).setString(""String_Node_Str"",args[1]);
    EntityPlayer player=(EntityPlayer)sender;
    player.inventory.mainInventory[player.inventory.currentItem]=stick;
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") && args.length >= 2 && sender instanceof EntityPlayer) {
    try {
      Stopwatch.time(""String_Node_Str"");
      boolean found=false;
      ClassPath path=ClassPath.from(HeeDebugCommand.class.getClassLoader());
      for (      ClassInfo clsInfo : path.getAllClasses()) {
        if (clsInfo.getSimpleName().equals(args[1]) && clsInfo.getPackageName().startsWith(""String_Node_Str"")) {
          HeeTest test=(HeeTest)clsInfo.load().getField(""String_Node_Str"").get(null);
          test.player=(EntityPlayer)sender;
          test.world=test.player.worldObj;
          try {
            test.run(ArrayUtils.subarray(args,2,args.length));
            sendMessage(sender,""String_Node_Str"");
          }
 catch (          Throwable t) {
            t.printStackTrace();
            sendMessage(sender,""String_Node_Str"");
          }
          found=true;
          break;
        }
      }
      if (!found)       sendMessage(sender,""String_Node_Str"");
      Stopwatch.finish(""String_Node_Str"");
    }
 catch (    Throwable t) {
      sendMessage(sender,""String_Node_Str"");
    }
    return;
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") && sender instanceof EntityPlayer) {
    StringBuilder build=new StringBuilder();
    for (int a=1; a < args.length; a++)     build.append(args[a]).append(' ');
    UnitTester.trigger(RunTime.INGAME,args.length > 1 ? build.deleteCharAt(build.length() - 1).toString() : ""String_Node_Str"");
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") && sender instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)sender;
    player.worldObj.loadedEntityList.stream().filter(e -> e instanceof EntityItem).forEach(item -> ((EntityItem)item).setDead());
    Pos c=Pos.at(player).getDown();
    Pos.forEachBlock(c.offset(-25,0,-25),c.offset(25,-38,25),pos -> pos.setBlock(player.worldObj,BlockList.enhanced_tnt));
  }
 else {
    sendMessage(sender,""String_Node_Str"");
    return;
  }
  sendMessage(sender,""String_Node_Str"");
}",0.9798375537505972
34596,"public boolean tryPurchaseFragment(KnowledgeFragment fragment){
  if (points >= fragment.getPrice() && unlockFragment(fragment)) {
    offsetPoints(-fragment.getPrice());
    return true;
  }
 else   return false;
}","public boolean tryPurchaseFragment(EntityPlayer player,KnowledgeFragment fragment){
  if (points >= fragment.getPrice() && unlockFragment(fragment)) {
    offsetPoints(-fragment.getPrice());
    PacketPipeline.sendToPlayer(player,new C19CompendiumData(this));
    return true;
  }
 else   return false;
}",0.7861271676300579
34597,"public boolean tryDiscoverObject(KnowledgeObject<? extends IObjectHolder<?>> obj){
  if (unlockObject(obj)) {
    points+=obj.getReward();
    return true;
  }
 else   return false;
}","public boolean tryDiscoverObject(EntityPlayer player,KnowledgeObject<? extends IObjectHolder<?>> obj){
  if (unlockObject(obj)) {
    points+=obj.getReward();
    PacketPipeline.sendToPlayer(player,new C19CompendiumData(this));
    return true;
  }
 else   return false;
}",0.8043956043956044
34598,"public boolean unlockObject(KnowledgeObject<? extends IObjectHolder<?>> obj){
  boolean added=discoveredObjects.add(obj);
  if (added)   setModified();
  return added;
}","private boolean unlockObject(KnowledgeObject<? extends IObjectHolder<?>> obj){
  boolean added=discoveredObjects.add(obj);
  if (added)   setModified();
  return added;
}",0.9734513274336284
34599,"public boolean unlockFragment(KnowledgeFragment fragment){
  if (fragment.getType() != KnowledgeFragmentType.SECRET || fragment.getType() != KnowledgeFragmentType.HINT)   return false;
  boolean added=extraFragments.add(fragment.globalID);
  if (added)   setModified();
  return added;
}","private boolean unlockFragment(KnowledgeFragment fragment){
  if (fragment.getType() != KnowledgeFragmentType.SECRET || fragment.getType() != KnowledgeFragmentType.HINT)   return false;
  boolean added=extraFragments.add(fragment.globalID);
  if (added)   setModified();
  return added;
}",0.9808695652173912
34600,"public boolean tryPurchaseObject(KnowledgeObject<? extends IObjectHolder<?>> obj){
  if (points >= obj.getPrice() && unlockObject(obj)) {
    offsetPoints(-obj.getPrice());
    return true;
  }
 else   return false;
}","public boolean tryPurchaseObject(EntityPlayer player,KnowledgeObject<? extends IObjectHolder<?>> obj){
  if (points >= obj.getPrice() && unlockObject(obj)) {
    offsetPoints(-obj.getPrice());
    PacketPipeline.sendToPlayer(player,new C19CompendiumData(this));
    return true;
  }
 else   return false;
}",0.7877629063097514
34601,"private void renderScreen(int mouseX,int mouseY,float partialTickTime){
  GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  GL11.glColor4f(1F,1F,1F,1F);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  renderBackgroundGUI();
  float offY=ptt(offsetY.value(),prevOffsetY,partialTickTime);
  int yLowerBound=-(int)offY - 32, yUpperBound=-(int)offY + height;
  GL11.glPushMatrix();
  GL11.glTranslatef(0F,offY,0F);
  for (  CategoryDisplayElement element : categoryElements)   element.render(this,yLowerBound,yUpperBound);
  for (  ObjectDisplayElement element : objectElements)   element.render(this,compendiumFile,yLowerBound,yUpperBound);
  RenderHelper.disableStandardItemLighting();
  GL11.glPopMatrix();
  if (!(mouseX < 24 || mouseX > width - 24 || mouseY < 24 || mouseY > height - 24)) {
    for (    CategoryDisplayElement element : categoryElements) {
      if (element.isMouseOver(mouseX,mouseY,(int)offY)) {
        GuiItemRenderHelper.setupTooltip(mouseX,mouseY,element.category.getTranslatedTooltip());
      }
    }
    for (    ObjectDisplayElement element : objectElements) {
      if (element.isMouseOver(mouseX,mouseY,(int)offY)) {
        GuiItemRenderHelper.setupTooltip(mouseX,mouseY,element.object.getTranslatedTooltip());
      }
    }
  }
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  renderFragmentCount(width - 90,24);
  for (int a=0; a < 2; a++)   pageArrows[a].visible=false;
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  if (currentObject != null)   renderPaper(width / 2,height / 2,mouseX,mouseY);
  prevMouseX=mouseX;
}","private void renderScreen(int mouseX,int mouseY,float partialTickTime){
  GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  GL11.glColor4f(1F,1F,1F,1F);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  renderBackgroundGUI();
  float offY=ptt(offsetY.value(),prevOffsetY,partialTickTime);
  int yLowerBound=-(int)offY - 32, yUpperBound=-(int)offY + height;
  GL11.glPushMatrix();
  GL11.glTranslatef(0F,offY,0F);
  for (  CategoryDisplayElement element : categoryElements)   element.render(this,yLowerBound,yUpperBound);
  for (  ObjectDisplayElement element : objectElements) {
    if (!element.object.isHidden()) {
      element.render(this,compendiumFile,yLowerBound,yUpperBound);
      element.object.connectToChildren(width / 2,48,ObjectDisplayElement.lineRenderer);
    }
  }
  RenderHelper.disableStandardItemLighting();
  GL11.glPopMatrix();
  if (!(mouseX < 24 || mouseX > width - 24 || mouseY < 24 || mouseY > height - 24)) {
    for (    CategoryDisplayElement element : categoryElements) {
      if (element.isMouseOver(mouseX,mouseY,(int)offY)) {
        GuiItemRenderHelper.setupTooltip(mouseX,mouseY,element.category.getTranslatedTooltip());
      }
    }
    for (    ObjectDisplayElement element : objectElements) {
      if (element.isMouseOver(mouseX,mouseY,width / 2,(int)offY)) {
        GuiItemRenderHelper.setupTooltip(mouseX,mouseY,element.object.getTranslatedTooltip());
      }
    }
  }
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  renderFragmentCount(width - 90,24);
  for (int a=0; a < 2; a++)   pageArrows[a].visible=false;
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  if (currentObject != null)   renderPaper(width / 2,height / 2,mouseX,mouseY);
  prevMouseX=mouseX;
}",0.7343837929093978
34602,"public GuiEnderCompendium(CompendiumFile compendiumFile){
  this.compendiumFile=compendiumFile;
  animationList.add(offsetY=new AnimatedFloat(Easing.CUBIC));
  animationList.add(portalSpeed=new AnimatedFloat(Easing.CUBIC));
  int y=32, maxY=0;
  for (  KnowledgeObject<?> obj : KnowledgeObject.getAllObjects()) {
    if (!obj.isHidden())     objectElements.add(new ObjectDisplayElement(obj,y));
    if (obj.getY() > maxY)     maxY=obj.getY();
  }
  this.totalHeight=y;
  portalSpeed.startAnimation(30F,15F,1.5F);
}","public GuiEnderCompendium(CompendiumFile compendiumFile){
  this.compendiumFile=compendiumFile;
  animationList.add(offsetY=new AnimatedFloat(Easing.CUBIC));
  animationList.add(portalSpeed=new AnimatedFloat(Easing.CUBIC));
  int y=48, maxY=0;
  for (  KnowledgeObject<?> obj : KnowledgeObject.getAllObjects()) {
    if (!obj.isHidden())     objectElements.add(new ObjectDisplayElement(obj,y));
    if (obj.getY() > maxY)     maxY=obj.getY();
  }
  this.totalHeight=y;
  portalSpeed.startAnimation(30F,15F,1.5F);
}",0.9961089494163424
34603,"@Override protected void mouseClicked(int mouseX,int mouseY,int buttonId){
  if (buttonId == 1)   actionPerformed((GuiButton)buttonList.get(2));
 else   if (buttonId == 0 && !(mouseX < 24 || mouseX > width - 24 || mouseY < 24 || mouseY > height - 24)) {
    int offY=(int)offsetY.value();
    for (    ObjectDisplayElement element : objectElements) {
      if (element.isMouseOver(mouseX,mouseY,offY)) {
        showObject(element.object);
        return;
      }
    }
    for (    PurchaseDisplayElement element : purchaseElements) {
      if (element.isMouseOver(mouseX,mouseY,(width >> 1) + (width >> 2) + 4) && compendiumFile.getPoints() >= element.price) {
        Object obj=element.object;
        if (obj instanceof KnowledgeObject)         PacketPipeline.sendToServer(new S02CompendiumPurchase((KnowledgeObject)obj));
 else         if (obj instanceof KnowledgeFragment)         PacketPipeline.sendToServer(new S02CompendiumPurchase((KnowledgeFragment)obj));
 else         continue;
        return;
      }
    }
  }
  if (currentObject != null) {
    int x=(width >> 1) + (width >> 2) + 4 - (guiPageTexWidth >> 1) + guiPageLeft;
    int y=(height >> 1) - (guiPageTexHeight >> 1) + guiPageTop;
    for (    Entry<KnowledgeFragment,Boolean> entry : currentObjectPages.get(pageIndex).entrySet()) {
      if (entry.getKey().onClick(this,x,y,mouseX,mouseY,buttonId,entry.getValue()))       return;
      y+=8 + entry.getKey().getHeight(this,entry.getValue());
    }
  }
  hasClickedButton=false;
  super.mouseClicked(mouseX,mouseY,buttonId);
  if (hasClickedButton)   hasClickedButton=false;
 else   dragMouseY=mouseY;
}","@Override protected void mouseClicked(int mouseX,int mouseY,int buttonId){
  if (buttonId == 1)   actionPerformed((GuiButton)buttonList.get(2));
 else   if (buttonId == 0 && !(mouseX < 24 || mouseX > width - 24 || mouseY < 24 || mouseY > height - 24)) {
    int offY=(int)offsetY.value();
    for (    ObjectDisplayElement element : objectElements) {
      if (element.isMouseOver(mouseX,mouseY,width / 2,offY)) {
        showObject(element.object);
        return;
      }
    }
    for (    PurchaseDisplayElement element : purchaseElements) {
      if (element.isMouseOver(mouseX,mouseY,(width >> 1) + (width >> 2) + 4) && compendiumFile.getPoints() >= element.price) {
        Object obj=element.object;
        if (obj instanceof KnowledgeObject)         PacketPipeline.sendToServer(new S02CompendiumPurchase((KnowledgeObject)obj));
 else         if (obj instanceof KnowledgeFragment)         PacketPipeline.sendToServer(new S02CompendiumPurchase((KnowledgeFragment)obj));
 else         continue;
        return;
      }
    }
  }
  if (currentObject != null) {
    int x=(width >> 1) + (width >> 2) + 4 - (guiPageTexWidth >> 1) + guiPageLeft;
    int y=(height >> 1) - (guiPageTexHeight >> 1) + guiPageTop;
    for (    Entry<KnowledgeFragment,Boolean> entry : currentObjectPages.get(pageIndex).entrySet()) {
      if (entry.getKey().onClick(this,x,y,mouseX,mouseY,buttonId,entry.getValue()))       return;
      y+=8 + entry.getKey().getHeight(this,entry.getValue());
    }
  }
  hasClickedButton=false;
  super.mouseClicked(mouseX,mouseY,buttonId);
  if (hasClickedButton)   hasClickedButton=false;
 else   dragMouseY=mouseY;
}",0.9969325153374232
34604,"public static void initialize(){
  HELP.setHidden().addFragments(new KnowledgeFragment[]{new FragmentText(0).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(1).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(2).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(3).setType(KnowledgeFragmentType.VISIBLE)});
  TEST2.setParent(TEST1,0,4);
}","public static void initialize(){
  HELP.setHidden().addFragments(new KnowledgeFragment[]{new FragmentText(0).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(1).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(2).setType(KnowledgeFragmentType.VISIBLE),new FragmentText(3).setType(KnowledgeFragmentType.VISIBLE)});
  TEST2.setParent(TEST1,0,4);
  TEST3.setParent(TEST2,-5,3).addParentLine(0,-2).addParentLine(2,-2).addParentLine(2,-3);
  TEST4.setHidden();
  TEST5.setHidden();
  TEST6.setHidden();
}",0.823394495412844
34605,"public KnowledgeObject(T holder,String unlocalizedTooltip){
  this.globalID=++prevID;
  this.holder=holder;
  this.tooltip=unlocalizedTooltip;
  this.children=new ArrayList<>(4);
  this.fragments=new LinkedHashSet<>(6);
  allObjects.put(globalID,this);
}","public KnowledgeObject(T holder,String unlocalizedTooltip){
  this.globalID=++prevID;
  this.holder=holder;
  this.tooltip=unlocalizedTooltip;
  this.children=new ArrayList<>(4);
  this.fragments=new LinkedHashSet<>(6);
  this.parentLineNodes=CollectionUtil.newList(new byte[]{0,0});
  this.childLineNodes=CollectionUtil.newList(new byte[]{0,0});
  allObjects.put(globalID,this);
}",0.8
34606,"public KnowledgeObject<T> setPos(int x,int y){
  this.x=x;
  this.y=y;
  return this;
}","public KnowledgeObject<T> setPos(int x,int y){
  this.x=x * 12;
  this.y=y * 12;
  return this;
}",0.9456521739130436
34607,"public int getX(){
  return x * 12;
}","public int getX(){
  return x;
}",0.927536231884058
34608,"public int getY(){
  return y * 12;
}","public int getY(){
  return y;
}",0.927536231884058
34609,"public KnowledgeObject<T> setParent(KnowledgeObject<?> obj,int offX,int offY){
  this.x=obj.x + offX;
  this.y=obj.y + offY;
  this.parent=obj;
  this.parent.children.add(this);
  return this;
}","public KnowledgeObject<T> setParent(KnowledgeObject<?> obj,int offX,int offY){
  this.x=obj.x + offX * 12;
  this.y=obj.y + offY * 12;
  this.parent=obj;
  this.parent.children.add(this);
  return this;
}",0.9748743718592964
34610,"@SideOnly(Side.CLIENT) private static void renderString(String str,int x,int y,int maxWidth,int color){
  Minecraft mc=Minecraft.getMinecraft();
  FontRenderer fontRenderer=mc.fontRenderer;
  boolean origFont=fontRenderer.getUnicodeFlag();
  fontRenderer.setUnicodeFlag(true);
  if (mc.gameSettings.guiScale == 3) {
    float dist=0.08F;
    for (int cycle=0; cycle < 2; cycle++) {
      GL11.glTranslatef(-dist,0F,0F);
      fontRenderer.drawSplitString(str,x,y,maxWidth,color);
      GL11.glTranslatef(dist,-dist,0F);
      fontRenderer.drawSplitString(str,x,y,maxWidth,color);
      GL11.glTranslatef(dist,0F,0F);
      fontRenderer.drawSplitString(str,x,y,maxWidth,color);
      GL11.glTranslatef(-dist,dist,0F);
      dist=-dist;
    }
  }
 else   fontRenderer.drawSplitString(str,x,y,maxWidth,color);
  fontRenderer.setUnicodeFlag(origFont);
}","@SideOnly(Side.CLIENT) private static void renderString(String str,int x,int y,int maxWidth,int color){
  Minecraft mc=Minecraft.getMinecraft();
  FontRenderer fontRenderer=mc.fontRenderer;
  boolean origFont=fontRenderer.getUnicodeFlag();
  fontRenderer.setUnicodeFlag(true);
  if ((mc.gameSettings.guiScale & 1) == 1) {
    float dist=0.08F;
    for (int cycle=0; cycle < 2; cycle++) {
      GL11.glTranslatef(-dist,0F,0F);
      fontRenderer.drawSplitString(str,x,y,maxWidth,color);
      GL11.glTranslatef(dist,-dist,0F);
      fontRenderer.drawSplitString(str,x,y,maxWidth,color);
      GL11.glTranslatef(dist,0F,0F);
      fontRenderer.drawSplitString(str,x,y,maxWidth,color);
      GL11.glTranslatef(-dist,dist,0F);
      dist=-dist;
    }
  }
 else   fontRenderer.drawSplitString(str,x,y,maxWidth,color);
  fontRenderer.setUnicodeFlag(origFont);
}",0.9953051643192488
34611,"public static boolean tryDiscover(EntityPlayer player,ItemStack is){
  KnowledgeObject knowledgeObj=KnowledgeObject.fromObject(is);
  return knowledgeObj != null && getPlayerData(player).tryDiscoverObject(knowledgeObj);
}","public static boolean tryDiscover(EntityPlayer player,ItemStack is){
  KnowledgeObject knowledgeObj=KnowledgeObject.fromObject(is);
  return knowledgeObj != null && getPlayerData(player).tryDiscoverObject(player,knowledgeObj);
}",0.9844097995545658
34612,"@SubscribeEvent public void onPlayerTick(PlayerTickEvent e){
  if (e.phase != Phase.START || e.player.worldObj.isRemote || playerLivingTicks.update(e.player.getGameProfile().getId()))   return;
  KnowledgeObject<?> obj=KnowledgeUtils.getObservedObject(e.player);
  if (obj != null)   getPlayerData(e.player).tryDiscoverObject(obj);
}","@SubscribeEvent public void onPlayerTick(PlayerTickEvent e){
  if (e.phase != Phase.START || e.player.worldObj.isRemote || !playerLivingTicks.update(e.player.getGameProfile().getId()))   return;
  KnowledgeObject<?> obj=KnowledgeUtils.getObservedObject(e.player);
  if (obj != null)   getPlayerData(e.player).tryDiscoverObject(e.player,obj);
}",0.985207100591716
34613,"@SideOnly(Side.CLIENT) private void loadClientConfig(){
  currentCategory=""String_Node_Str"";
  KnowledgeFragmentText.smoothRenderingMode=(byte)getInt(""String_Node_Str"",0,""String_Node_Str"").getInt();
  if (firstTimeClient) {
    ModClientProxy.loadEnderbacon(getInt(""String_Node_Str"",0,""String_Node_Str"").setShowInGui(false).getInt());
    MusicManager.enableCustomMusic=getBool(""String_Node_Str"",true,""String_Node_Str"").setRequiresMcRestart(true).getBoolean();
    MusicManager.removeVanillaDelay=getBool(""String_Node_Str"",false,""String_Node_Str"").setRequiresMcRestart(true).getBoolean();
    firstTimeClient=false;
  }
  if (config.hasChanged())   config.save();
}","@SideOnly(Side.CLIENT) private void loadClientConfig(){
  currentCategory=""String_Node_Str"";
  if (firstTimeClient) {
    ModClientProxy.loadEnderbacon(getInt(""String_Node_Str"",0,""String_Node_Str"").setShowInGui(false).getInt());
    MusicManager.enableCustomMusic=getBool(""String_Node_Str"",true,""String_Node_Str"").setRequiresMcRestart(true).getBoolean();
    MusicManager.removeVanillaDelay=getBool(""String_Node_Str"",false,""String_Node_Str"").setRequiresMcRestart(true).getBoolean();
    firstTimeClient=false;
  }
  if (config.hasChanged())   config.save();
}",0.826797385620915
34614,"public HeeAchievement setKnowledgeObj(KnowledgeObject<? extends IKnowledgeObjectInstance<?>> obj){
  this.knowledgeObj=obj;
  return this;
}","public HeeAchievement setKnowledgeObj(KnowledgeObject<? extends IObjectHolder<?>> obj){
  this.knowledgeObj=obj;
  return this;
}",0.9219330855018588
34615,"public KnowledgeObject<? extends IKnowledgeObjectInstance<?>> getKnowledgeObj(){
  return knowledgeObj;
}","public KnowledgeObject<? extends IObjectHolder<?>> getKnowledgeObj(){
  return knowledgeObj;
}",0.8944723618090452
34616,"public HeeAdminCommand(){
  super(""String_Node_Str"");
  sub.add(new SubCommand(""String_Node_Str"",""String_Node_Str"",0,false){
    @Override void run(    ICommandSender sender,    String[] args){
    }
  }
);
  sub.add(new SubCommand(""String_Node_Str"",0,false){
    @Override void run(    ICommandSender sender,    String[] args){
      sendMessage(sender,DARK_PURPLE + ""String_Node_Str"");
      sendMessage(sender,LIGHT_PURPLE + ""String_Node_Str"" + RESET+ HardcoreEnderExpansion.modVersion+ ""String_Node_Str""+ HardcoreEnderExpansion.buildId);
      sendMessage(sender,LIGHT_PURPLE + ""String_Node_Str"" + RESET+ (Log.isDeobfEnvironment ? ""String_Node_Str"" : HardcoreEnderExpansion.sourceFile.getName()));
      if (UpdateNotificationManager.enableNotifications || UpdateNotificationManager.enableBuildCheck) {
        sendMessage(sender,LIGHT_PURPLE + ""String_Node_Str"" + RESET+ UpdateNotificationManager.mcVersions);
        sendMessage(sender,LIGHT_PURPLE + ""String_Node_Str"" + RESET+ UpdateNotificationManager.releaseDate);
      }
 else       sendMessage(sender,GRAY + ""String_Node_Str"");
    }
  }
);
  sub.add(new SubCommand(""String_Node_Str"",0,true){
    @Override void run(    ICommandSender sender,    String[] args){
      int counter=0;
      for (      Object o : sender.getEntityWorld().loadedEntityList) {
        if (o instanceof IBossDisplayData && o instanceof EntityLiving) {
          ((EntityLiving)o).setHealth(0F);
          ++counter;
        }
      }
      sendMessage(sender,pre + ""String_Node_Str"" + counter+ ""String_Node_Str""+ (counter == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
  }
);
  sub.add(new SubCommand(""String_Node_Str"",""String_Node_Str"",1,true){
    @Override void run(    ICommandSender sender,    String[] args){
      EntityPlayer player=(EntityPlayer)sender;
      int amount=DragonUtil.tryParse(args[0],-1);
      if (amount == -1) {
        sendMessage(sender,""String_Node_Str"");
        return;
      }
      CompendiumFile file=CompendiumEvents.getPlayerData(player);
      file.payPoints(file.getPoints());
      file.givePoints(amount);
      PacketPipeline.sendToPlayer(player,new C19CompendiumData(player));
      sendMessage(sender,""String_Node_Str"");
    }
  }
);
  sub.add(new SubCommand(""String_Node_Str"",0,true){
    @Override void run(    ICommandSender sender,    String[] args){
      EntityPlayer player=(EntityPlayer)sender;
      CompendiumFile file=CompendiumEvents.getPlayerData(player);
      for (      KnowledgeObject<?> object : KnowledgeObject.getAllObjects())       file.tryDiscoverObject(object,false);
      for (      KnowledgeFragment fragment : KnowledgeFragment.getAllFragments())       file.tryUnlockFragment(fragment);
      PacketPipeline.sendToPlayer(player,new C19CompendiumData(player));
      sendMessage(sender,pre + ""String_Node_Str"");
    }
  }
);
  sub.add(new SubCommand(""String_Node_Str"",0,true){
    @Override void run(    ICommandSender sender,    String[] args){
      EntityPlayer player=(EntityPlayer)sender;
      CompendiumEvents.getPlayerData(player).reset();
      PacketPipeline.sendToPlayer(player,new C19CompendiumData(player));
      sendMessage(sender,pre + ""String_Node_Str"");
    }
  }
);
  sub.add(new SubCommand(""String_Node_Str"",""String_Node_Str"",1,true){
    @Override void run(    ICommandSender sender,    String[] args){
      EntityPlayer player=(EntityPlayer)sender;
      Entity e=null;
switch (args[0]) {
case ""String_Node_Str"":
        e=new EntityBlockEnderCrystal(player.worldObj);
      break;
  }
  if (e == null)   sendMessage(sender,pre + ""String_Node_Str"");
 else {
    e.setPosition(player.posX,player.posY,player.posZ);
    player.worldObj.spawnEntityInWorld(e);
    sendMessage(sender,pre + ""String_Node_Str"");
  }
}
}
);
sub.add(new SubCommand(""String_Node_Str"",0,true){
@Override void run(ICommandSender sender,String[] args){
  CausatumFile file=SaveData.player((EntityPlayer)sender,CausatumFile.class);
  sendMessage(sender,DARK_PURPLE + ""String_Node_Str"");
}
}
);
sub.add(new SubCommand(""String_Node_Str"",0,false){
@Override void run(ICommandSender sender,String[] args){
  EntityBossDragon dragon=HeeDebugCommand.getDragon();
  if (dragon == null)   sendMessage(sender,pre + ""String_Node_Str"");
 else {
    dragon.setAngry(true);
    sendMessage(sender,pre + ""String_Node_Str"");
  }
}
}
);
sub.add(new SubCommand(""String_Node_Str"",""String_Node_Str"",1,false){
@Override void run(ICommandSender sender,String[] args){
  EntityBossDragon dragon=HeeDebugCommand.getDragon();
  if (dragon == null) {
    sendMessage(sender,""String_Node_Str"");
    return;
  }
  String[] ids=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  DragonSpecialAttackBase att=dragon.attacks.getSpecialAttackById(ArrayUtils.indexOf(ids,args[0]));
  if (att != null) {
    dragon.forceSpecialAttack(att);
    sendMessage(sender,pre + ""String_Node_Str"");
  }
 else   sendMessage(sender,pre + ""String_Node_Str"");
}
}
);
sub.add(new SubCommand(""String_Node_Str"",0,true){
@Override void run(ICommandSender sender,String[] args){
  int counter=0;
  for (  Entity entity : (List<Entity>)sender.getEntityWorld().loadedEntityList) {
    if (entity instanceof ICurseCaller) {
      entity.setDead();
      ((ICurseCaller)entity).onPurify();
      ++counter;
    }
  }
  sendMessage(sender,pre + ""String_Node_Str"" + counter+ ""String_Node_Str""+ (counter == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
}
}
);
sub.add(new SubCommand(""String_Node_Str"",""String_Node_Str"",1,true){
@Override void run(ICommandSender sender,String[] args){
  for (  Achievement achievement : (List<Achievement>)AchievementList.achievementList) {
    if (achievement.statId.equals(args[0])) {
      ((EntityPlayer)sender).addStat(achievement,1);
      sendMessage(sender,pre + ""String_Node_Str"");
      return;
    }
  }
  sendMessage(sender,pre + ""String_Node_Str"");
}
}
);
}","public HeeAdminCommand(){
  super(""String_Node_Str"");
  sub.add(new SubCommand(""String_Node_Str"",""String_Node_Str"",0,false){
    @Override void run(    ICommandSender sender,    String[] args){
    }
  }
);
  sub.add(new SubCommand(""String_Node_Str"",0,false){
    @Override void run(    ICommandSender sender,    String[] args){
      sendMessage(sender,DARK_PURPLE + ""String_Node_Str"");
      sendMessage(sender,LIGHT_PURPLE + ""String_Node_Str"" + RESET+ HardcoreEnderExpansion.modVersion+ ""String_Node_Str""+ HardcoreEnderExpansion.buildId);
      sendMessage(sender,LIGHT_PURPLE + ""String_Node_Str"" + RESET+ (Log.isDeobfEnvironment ? ""String_Node_Str"" : HardcoreEnderExpansion.sourceFile.getName()));
      if (UpdateNotificationManager.enableNotifications || UpdateNotificationManager.enableBuildCheck) {
        sendMessage(sender,LIGHT_PURPLE + ""String_Node_Str"" + RESET+ UpdateNotificationManager.mcVersions);
        sendMessage(sender,LIGHT_PURPLE + ""String_Node_Str"" + RESET+ UpdateNotificationManager.releaseDate);
      }
 else       sendMessage(sender,GRAY + ""String_Node_Str"");
    }
  }
);
  sub.add(new SubCommand(""String_Node_Str"",0,true){
    @Override void run(    ICommandSender sender,    String[] args){
      int counter=0;
      for (      Object o : sender.getEntityWorld().loadedEntityList) {
        if (o instanceof IBossDisplayData && o instanceof EntityLiving) {
          ((EntityLiving)o).setHealth(0F);
          ++counter;
        }
      }
      sendMessage(sender,pre + ""String_Node_Str"" + counter+ ""String_Node_Str""+ (counter == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
  }
);
  sub.add(new SubCommand(""String_Node_Str"",""String_Node_Str"",1,true){
    @Override void run(    ICommandSender sender,    String[] args){
      EntityPlayer player=(EntityPlayer)sender;
      int amount=DragonUtil.tryParse(args[0],-1);
      if (amount == -1) {
        sendMessage(sender,""String_Node_Str"");
        return;
      }
      CompendiumFile file=CompendiumEvents.getPlayerData(player);
      file.offsetPoints(-file.getPoints() + amount);
      PacketPipeline.sendToPlayer(player,new C19CompendiumData(player));
      sendMessage(sender,""String_Node_Str"");
    }
  }
);
  sub.add(new SubCommand(""String_Node_Str"",0,true){
    @Override void run(    ICommandSender sender,    String[] args){
      EntityPlayer player=(EntityPlayer)sender;
      CompendiumFile file=CompendiumEvents.getPlayerData(player);
      PacketPipeline.sendToPlayer(player,new C19CompendiumData(player));
      sendMessage(sender,pre + ""String_Node_Str"");
    }
  }
);
  sub.add(new SubCommand(""String_Node_Str"",0,true){
    @Override void run(    ICommandSender sender,    String[] args){
      EntityPlayer player=(EntityPlayer)sender;
      CompendiumEvents.getPlayerData(player).reset();
      PacketPipeline.sendToPlayer(player,new C19CompendiumData(player));
      sendMessage(sender,pre + ""String_Node_Str"");
    }
  }
);
  sub.add(new SubCommand(""String_Node_Str"",""String_Node_Str"",1,true){
    @Override void run(    ICommandSender sender,    String[] args){
      EntityPlayer player=(EntityPlayer)sender;
      Entity e=null;
switch (args[0]) {
case ""String_Node_Str"":
        e=new EntityBlockEnderCrystal(player.worldObj);
      break;
  }
  if (e == null)   sendMessage(sender,pre + ""String_Node_Str"");
 else {
    e.setPosition(player.posX,player.posY,player.posZ);
    player.worldObj.spawnEntityInWorld(e);
    sendMessage(sender,pre + ""String_Node_Str"");
  }
}
}
);
sub.add(new SubCommand(""String_Node_Str"",0,true){
@Override void run(ICommandSender sender,String[] args){
  CausatumFile file=SaveData.player((EntityPlayer)sender,CausatumFile.class);
  sendMessage(sender,DARK_PURPLE + ""String_Node_Str"");
}
}
);
sub.add(new SubCommand(""String_Node_Str"",0,false){
@Override void run(ICommandSender sender,String[] args){
  EntityBossDragon dragon=HeeDebugCommand.getDragon();
  if (dragon == null)   sendMessage(sender,pre + ""String_Node_Str"");
 else {
    dragon.setAngry(true);
    sendMessage(sender,pre + ""String_Node_Str"");
  }
}
}
);
sub.add(new SubCommand(""String_Node_Str"",""String_Node_Str"",1,false){
@Override void run(ICommandSender sender,String[] args){
  EntityBossDragon dragon=HeeDebugCommand.getDragon();
  if (dragon == null) {
    sendMessage(sender,""String_Node_Str"");
    return;
  }
  String[] ids=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  DragonSpecialAttackBase att=dragon.attacks.getSpecialAttackById(ArrayUtils.indexOf(ids,args[0]));
  if (att != null) {
    dragon.forceSpecialAttack(att);
    sendMessage(sender,pre + ""String_Node_Str"");
  }
 else   sendMessage(sender,pre + ""String_Node_Str"");
}
}
);
sub.add(new SubCommand(""String_Node_Str"",0,true){
@Override void run(ICommandSender sender,String[] args){
  int counter=0;
  for (  Entity entity : (List<Entity>)sender.getEntityWorld().loadedEntityList) {
    if (entity instanceof ICurseCaller) {
      entity.setDead();
      ((ICurseCaller)entity).onPurify();
      ++counter;
    }
  }
  sendMessage(sender,pre + ""String_Node_Str"" + counter+ ""String_Node_Str""+ (counter == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
}
}
);
sub.add(new SubCommand(""String_Node_Str"",""String_Node_Str"",1,true){
@Override void run(ICommandSender sender,String[] args){
  for (  Achievement achievement : (List<Achievement>)AchievementList.achievementList) {
    if (achievement.statId.equals(args[0])) {
      ((EntityPlayer)sender).addStat(achievement,1);
      sendMessage(sender,pre + ""String_Node_Str"");
      return;
    }
  }
  sendMessage(sender,pre + ""String_Node_Str"");
}
}
);
}",0.9756559139784946
34617,"@Override protected void mouseClicked(int mouseX,int mouseY,int buttonId){
  if (buttonId == 0 && achievements != null && screenType == 0) {
    if (mouseX < width / 2 - 113 || mouseX > width / 2 + 113 || mouseY < height / 2 - 84 || mouseY > height / 2 + 68) {
      super.mouseClicked(mouseX,mouseY,buttonId);
      return;
    }
    int offsetX=MathUtil.clamp(MathUtil.floor(field_146567_u),AchievementList.minDisplayColumn * 24 - 112,AchievementList.maxDisplayColumn * 24 - 78);
    int offsetY=MathUtil.clamp(MathUtil.floor(field_146566_v),AchievementList.minDisplayRow * 24 - 112,AchievementList.maxDisplayRow * 24 - 78);
    int centerX=(width - field_146555_f) / 2 + 16;
    int centerY=(height - field_146557_g) / 2 + 17;
    float realMouseX=(mouseX - centerX) * field_146570_r;
    float realMouseY=(mouseY - centerY) * field_146570_r;
    for (    Achievement achievement : achievements.getAchievements()) {
      int x=achievement.displayColumn * 24 - offsetX;
      int y=achievement.displayRow * 24 - offsetY;
      if (x >= -24 && y >= -24 && x <= 224F * field_146570_r && y <= 155F * field_146570_r && realMouseX >= x && realMouseX <= x + 22 && realMouseY >= y && realMouseY <= y + 22) {
        KnowledgeObject<? extends IKnowledgeObjectInstance<?>> obj=((HeeAchievement)achievement).getKnowledgeObj();
        if (obj == null)         obj=KnowledgeUtils.tryGetFromItemStack(achievement.theItemStack);
        if (obj != null)         CompendiumEventsClient.openCompendium(obj);
      }
    }
  }
 else   if (buttonId == 1) {
    mc.displayGuiScreen(field_146562_a);
  }
  super.mouseClicked(mouseX,mouseY,buttonId);
}","@Override protected void mouseClicked(int mouseX,int mouseY,int buttonId){
  if (buttonId == 0 && achievements != null && screenType == 0) {
    if (mouseX < width / 2 - 113 || mouseX > width / 2 + 113 || mouseY < height / 2 - 84 || mouseY > height / 2 + 68) {
      super.mouseClicked(mouseX,mouseY,buttonId);
      return;
    }
    int offsetX=MathUtil.clamp(MathUtil.floor(field_146567_u),AchievementList.minDisplayColumn * 24 - 112,AchievementList.maxDisplayColumn * 24 - 78);
    int offsetY=MathUtil.clamp(MathUtil.floor(field_146566_v),AchievementList.minDisplayRow * 24 - 112,AchievementList.maxDisplayRow * 24 - 78);
    int centerX=(width - field_146555_f) / 2 + 16;
    int centerY=(height - field_146557_g) / 2 + 17;
    float realMouseX=(mouseX - centerX) * field_146570_r;
    float realMouseY=(mouseY - centerY) * field_146570_r;
    for (    Achievement achievement : achievements.getAchievements()) {
      int x=achievement.displayColumn * 24 - offsetX;
      int y=achievement.displayRow * 24 - offsetY;
      if (x >= -24 && y >= -24 && x <= 224F * field_146570_r && y <= 155F * field_146570_r && realMouseX >= x && realMouseX <= x + 22 && realMouseY >= y && realMouseY <= y + 22) {
        KnowledgeObject<? extends IObjectHolder<?>> obj=((HeeAchievement)achievement).getKnowledgeObj();
        if (obj == null)         obj=KnowledgeUtils.tryGetFromItemStack(achievement.theItemStack);
        if (obj != null)         CompendiumEventsClient.openCompendium(obj);
      }
    }
  }
 else   if (buttonId == 1) {
    mc.displayGuiScreen(field_146562_a);
  }
  super.mouseClicked(mouseX,mouseY,buttonId);
}",0.9929426204357163
34618,"public void showObject(KnowledgeObject<? extends IKnowledgeObjectInstance<?>> object){
  if (currentObject != null) {
    currentObjectPages.clear();
    purchaseElements.clear();
    if (currentObject != object) {
      pageIndex=0;
      btnHelp.forcedHover=false;
    }
  }
  if ((currentObject=object) == null)   return;
  byte page=0;
  int yy=0, height=0;
  boolean isUnlocked=false;
  Map<KnowledgeFragment,Boolean> pageMap=new LinkedHashMap<>();
  Iterator<KnowledgeFragment> iter=currentObject.getFragments().iterator();
  while (true) {
    KnowledgeFragment fragment=iter.hasNext() ? iter.next() : null;
    if (fragment == null || yy + (height=8 + fragment.getHeight(this,isUnlocked=(object == KnowledgeRegistrations.HELP || compendiumFile.hasUnlockedFragment(fragment)))) > guiPageHeight) {
      currentObjectPages.put(page++,pageMap);
      if (fragment == null)       break;
 else {
        pageMap=new LinkedHashMap<>();
        pageMap.put(fragment,isUnlocked);
        yy=height;
        continue;
      }
    }
    pageMap.put(fragment,isUnlocked);
    yy+=height;
  }
  if (object == KnowledgeRegistrations.HELP) {
    btnHelp.forcedHover=true;
    if (!compendiumFile.seenHelp()) {
      PacketPipeline.sendToServer(new S03SimpleEvent(EventType.OPEN_COMPENDIUM_HELP));
      compendiumFile.setSeenHelp();
    }
    purchaseElements.clear();
    return;
  }
  updatePurchaseElements();
}","public void showObject(KnowledgeObject<? extends IObjectHolder<?>> object){
  if (currentObject != null) {
    currentObjectPages.clear();
    purchaseElements.clear();
    if (currentObject != object) {
      pageIndex=0;
      btnHelp.forcedHover=false;
    }
  }
  if ((currentObject=object) == null)   return;
  byte page=0;
  int yy=0, height=0;
  boolean isUnlocked=false;
  Map<KnowledgeFragment,Boolean> pageMap=new LinkedHashMap<>();
  Iterator<KnowledgeFragment> iter=currentObject.getFragments().iterator();
  while (true) {
    KnowledgeFragment fragment=iter.hasNext() ? iter.next() : null;
    if (fragment == null || yy + (height=8 + fragment.getHeight(this,isUnlocked=(object == KnowledgeRegistrations.HELP || compendiumFile.hasUnlockedFragment(fragment)))) > guiPageHeight) {
      currentObjectPages.put(page++,pageMap);
      if (fragment == null)       break;
 else {
        pageMap=new LinkedHashMap<>();
        pageMap.put(fragment,isUnlocked);
        yy=height;
        continue;
      }
    }
    pageMap.put(fragment,isUnlocked);
    yy+=height;
  }
  if (object == KnowledgeRegistrations.HELP) {
    btnHelp.forcedHover=true;
    if (!compendiumFile.seenHelp()) {
      PacketPipeline.sendToServer(new S03SimpleEvent(EventType.OPEN_COMPENDIUM_HELP));
      compendiumFile.setSeenHelp();
    }
    purchaseElements.clear();
    return;
  }
  updatePurchaseElements();
}",0.9918003565062388
34619,"@Override protected void mouseClicked(int mouseX,int mouseY,int buttonId){
  if (buttonId == 1)   actionPerformed((GuiButton)buttonList.get(2));
 else   if (buttonId == 0 && !(mouseX < 24 || mouseX > width - 24 || mouseY < 24 || mouseY > height - 24)) {
    int offY=(int)offsetY.value();
    for (    CategoryDisplayElement element : categoryElements) {
      if (element.isMouseOver(mouseX,mouseY,offY)) {
        showObject(element.category.getCategoryObject());
        return;
      }
    }
    for (    ObjectDisplayElement element : objectElements) {
      if (element.isMouseOver(mouseX,mouseY,offY)) {
        showObject(element.object);
        return;
      }
    }
    KnowledgeObject<? extends IKnowledgeObjectInstance<?>> redirect=null;
    for (    PurchaseDisplayElement element : purchaseElements) {
      if (element.isMouseOver(mouseX,mouseY,(width >> 1) + (width >> 2) + 4)) {
        if (element.getStatus() == FragmentPurchaseStatus.NOT_BUYABLE && element.fragmentHasRedirect) {
          redirect=((KnowledgeFragment)element.object).getUnlockRedirect();
          break;
        }
 else         if (element.getStatus() == FragmentPurchaseStatus.CAN_PURCHASE && compendiumFile.getPoints() >= element.price) {
          Object obj=element.object;
          if (obj instanceof KnowledgeObject)           PacketPipeline.sendToServer(new S02CompendiumPurchase((KnowledgeObject)obj));
 else           if (obj instanceof KnowledgeFragment)           PacketPipeline.sendToServer(new S02CompendiumPurchase((KnowledgeFragment)obj));
 else           continue;
          return;
        }
      }
    }
    if (redirect != null) {
      showObject(redirect);
      moveToCurrentObject(true);
    }
  }
  if (currentObject != null) {
    int x=(width >> 1) + (width >> 2) + 4 - (guiPageTexWidth >> 1) + guiPageLeft;
    int y=(height >> 1) - (guiPageTexHeight >> 1) + guiPageTop;
    for (    Entry<KnowledgeFragment,Boolean> entry : currentObjectPages.get(pageIndex).entrySet()) {
      if (entry.getKey().onClick(this,x,y,mouseX,mouseY,buttonId,entry.getValue()))       return;
      y+=8 + entry.getKey().getHeight(this,entry.getValue());
    }
  }
  hasClickedButton=false;
  super.mouseClicked(mouseX,mouseY,buttonId);
  if (hasClickedButton)   hasClickedButton=false;
 else   dragMouseY=mouseY;
}","@Override protected void mouseClicked(int mouseX,int mouseY,int buttonId){
  if (buttonId == 1)   actionPerformed((GuiButton)buttonList.get(2));
 else   if (buttonId == 0 && !(mouseX < 24 || mouseX > width - 24 || mouseY < 24 || mouseY > height - 24)) {
    int offY=(int)offsetY.value();
    for (    CategoryDisplayElement element : categoryElements) {
      if (element.isMouseOver(mouseX,mouseY,offY)) {
        showObject(element.category.getCategoryObject());
        return;
      }
    }
    for (    ObjectDisplayElement element : objectElements) {
      if (element.isMouseOver(mouseX,mouseY,offY)) {
        showObject(element.object);
        return;
      }
    }
    KnowledgeObject<? extends IObjectHolder<?>> redirect=null;
    for (    PurchaseDisplayElement element : purchaseElements) {
      if (element.isMouseOver(mouseX,mouseY,(width >> 1) + (width >> 2) + 4)) {
        if (element.getStatus() == FragmentPurchaseStatus.NOT_BUYABLE && element.fragmentHasRedirect) {
          redirect=((KnowledgeFragment)element.object).getUnlockRedirect();
          break;
        }
 else         if (element.getStatus() == FragmentPurchaseStatus.CAN_PURCHASE && compendiumFile.getPoints() >= element.price) {
          Object obj=element.object;
          if (obj instanceof KnowledgeObject)           PacketPipeline.sendToServer(new S02CompendiumPurchase((KnowledgeObject)obj));
 else           if (obj instanceof KnowledgeFragment)           PacketPipeline.sendToServer(new S02CompendiumPurchase((KnowledgeFragment)obj));
 else           continue;
          return;
        }
      }
    }
    if (redirect != null) {
      showObject(redirect);
      moveToCurrentObject(true);
    }
  }
  if (currentObject != null) {
    int x=(width >> 1) + (width >> 2) + 4 - (guiPageTexWidth >> 1) + guiPageLeft;
    int y=(height >> 1) - (guiPageTexHeight >> 1) + guiPageTop;
    for (    Entry<KnowledgeFragment,Boolean> entry : currentObjectPages.get(pageIndex).entrySet()) {
      if (entry.getKey().onClick(this,x,y,mouseX,mouseY,buttonId,entry.getValue()))       return;
      y+=8 + entry.getKey().getHeight(this,entry.getValue());
    }
  }
  hasClickedButton=false;
  super.mouseClicked(mouseX,mouseY,buttonId);
  if (hasClickedButton)   hasClickedButton=false;
 else   dragMouseY=mouseY;
}",0.9950140906134836
34620,"@Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){
  fontRendererObj.drawString(invLootChest.hasCustomInventoryName() ? invLootChest.getInventoryName() : I18n.format(invPlayer.player.capabilities.isCreativeMode ? ""String_Node_Str"" : ""String_Node_Str""),8,6,4210752);
  fontRendererObj.drawString(invPlayer.hasCustomInventoryName() ? invPlayer.getInventoryName() : I18n.format(invPlayer.getInventoryName()),8,ySize - 94,4210752);
}","@Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){
  fontRendererObj.drawString(invPlayer.player.capabilities.isCreativeMode ? I18n.format(""String_Node_Str"") : I18n.format(invLootChest.getInventoryName()),8,6,4210752);
  fontRendererObj.drawString(invPlayer.hasCustomInventoryName() ? invPlayer.getInventoryName() : I18n.format(invPlayer.getInventoryName()),8,ySize - 94,4210752);
}",0.7278989667049368
34621,"public static void loadBlocks(){
  FluidRegistry.registerFluid(BlockEnderGoo.fluid);
  register(""String_Node_Str"",stone_brick_wall=new BlockStoneBrickWall().setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",gloomrock=new BlockGloomrock().setHardness(5F).setResistance(7F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",gloomrock_smooth_slab=new BlockBasicSlab(gloomrock,BlockGloomrock.Meta.SMOOTH.value).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",gloomrock_smooth_stairs=new BlockBasicStairs(gloomrock,BlockGloomrock.Meta.SMOOTH.value).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",gloomrock_brick_slab=new BlockBasicSlab(gloomrock,BlockGloomrock.Meta.BRICK.value).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",gloomrock_brick_stairs=new BlockBasicStairs(gloomrock,BlockGloomrock.Meta.BRICK.value).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",obsidian_falling=new BlockObsidianEnd().setHardness(50F).setResistance(2000F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",obsidian_stairs=new BlockBasicStairs(Blocks.obsidian,0).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",obsidian_special=new BlockObsidianSpecial(false).setHardness(28F).setResistance(2000F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",obsidian_special_glow=new BlockObsidianSpecial(true).setHardness(28F).setResistance(2000F).setLightLevel(1F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",end_terrain=new BlockEndstoneTerrain().setHardness(2.5F).setResistance(15F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick=new BlockRavagedBrick().setHardness(3.5F).setResistance(28F).setStepSound(Block.soundTypePiston).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_smooth=new BlockRavagedBrickSmooth().setHardness(1F).setResistance(6F).setStepSound(Block.soundTypePiston).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_glow=new BlockBasic(Material.rock).setHardness(1F).setResistance(6F).setLightLevel(1F).setStepSound(Block.soundTypePiston).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_slab=new BlockBasicSlab(ravaged_brick).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_stairs=new BlockBasicStairs(ravaged_brick).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_fence=new BlockFence(""String_Node_Str"",Material.rock).setHardness(1.5F).setResistance(6F).setStepSound(Block.soundTypePiston).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",dungeon_puzzle=new BlockDungeonPuzzle().setBlockUnbreakable().setResistance(6000000F).setStepSound(Block.soundTypeMetal).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",cinder=new BlockBasic(Material.rock).setHardness(1F).setResistance(10F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",persegrit=new BlockPersegrit().setHardness(4F).setResistance(0.2F).setStepSound(Block.soundTypeGravel).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",laboratory_obsidian=new BlockBasic(Material.rock).setHardness(40F).setResistance(500F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",laboratory_floor=new BlockBasic(Material.rock).setHardness(30F).setResistance(100F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",laboratory_stairs=new BlockBasicStairs(laboratory_floor).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",end_powder_ore=new BlockEndPowderOre().setHardness(3F).setResistance(12F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",endium_ore=new BlockEndiumOre().setHardness(18F).setResistance(100F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",stardust_ore=new BlockStardustOre().setHardness(7F).setResistance(4F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",igneous_rock_ore=new BlockIgneousRockOre().setHardness(2F).setResistance(5F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",instability_orb_ore=new BlockInstabilityOrbOre().setHardness(5.5F).setResistance(3F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",sphalerite=new BlockSphalerite().setHardness(1.8F).setResistance(40F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",essence_altar=new BlockEssenceAltar().setHardness(8F).setResistance(20F).setLightOpacity(0).setLightLevel(0.4F).setStepSound(Block.soundTypeMetal).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",enhanced_brewing_stand=new BlockEnhancedBrewingStand().setHardness(0.65F).setLightLevel(0.125F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",enhanced_tnt=new BlockEnhancedTNT().setHardness(0F).setStepSound(Block.soundTypeGrass).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",decomposition_table=new BlockDecompositionTable().setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",experience_table=new BlockExperienceTable().setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",accumulation_table=new BlockAccumulationTable().setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",extraction_table=new BlockExtractionTable().setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",loot_chest=new BlockLootChest().setBlockUnbreakable().setResistance(6000000F).setStepSound(Block.soundTypePiston).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",endium_block=new BlockCompressed(MapColor.pinkColor).setHardness(14F).setResistance(800F).setStepSound(Block.soundTypeMetal).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",spooky_log=new BlockSpookyLog().setHardness(0.7F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",spooky_leaves=new BlockSpookyLeaves().setHardness(0.1F).setStepSound(Block.soundTypeGrass).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",ender_goo=new BlockEnderGoo().setHardness(150F).setLightOpacity(2).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",dry_vine=new BlockDryVine().setHardness(0.15F).setStepSound(Block.soundTypeGrass).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",ancient_web=new BlockAncientCobweb().setLightOpacity(1).setHardness(3.5F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",crossed_decoration=new BlockCrossedDecoration().setHardness(0F).setStepSound(Block.soundTypeGrass).setCreativeTab(null).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",enderman_head=new BlockEndermanHead().setHardness(1F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",death_flower=new BlockDeathFlower().setHardness(0F).setResistance(4F).setStepSound(Block.soundTypeGrass).setCreativeTab(null).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",energy_cluster=new BlockEnergyCluster().setHardness(0.7F).setResistance(0.2F).setStepSound(BlockEnergyCluster.soundTypeEnergyCluster).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",corrupted_energy_high=new BlockCorruptedEnergy(true).setBlockUnbreakable().setResistance(6000000F));
  register(""String_Node_Str"",corrupted_energy_low=new BlockCorruptedEnergy(false).setBlockUnbreakable().setResistance(6000000F));
  register(""String_Node_Str"",laboratory_glass=new BlockLaboratoryGlass().setHardness(5F).setResistance(50F).setLightOpacity(5).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",end_portal_frame=new BlockEndPortalFrame().setBlockUnbreakable().setResistance(6000000F).setLightLevel(0.125F).setStepSound(Block.soundTypeGlass).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",death_flower_pot=new BlockDeathFlowerPot().setHardness(0F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",laser_beam=new BlockLaserBeam().setBlockUnbreakable().setResistance(6000000F).setLightLevel(1F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",custom_spawner=new BlockCustomSpawner().setHardness(5F).setStepSound(Block.soundTypeMetal).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",biome_core=new BlockBiomeIslandCore().setBlockUnbreakable().setResistance(6000000F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",special_effects=new BlockSpecialEffects());
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockSlab.class);
  setItemClass(""String_Node_Str"",ItemBlockSlab.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockEssenceAltar.class);
  setItemClass(""String_Node_Str"",ItemBlockEnhanceableTile.class);
  setItemClass(""String_Node_Str"",ItemBlockEnhanceableTile.class);
  setItemClass(""String_Node_Str"",ItemBlockWithTooltip.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockDynamicColor.class);
  setItemClass(""String_Node_Str"",ItemBlockDynamicColor.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockEndFlower.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockSlab.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
}","public static void loadBlocks(){
  FluidRegistry.registerFluid(BlockEnderGoo.fluid);
  register(""String_Node_Str"",stone_brick_wall=new BlockStoneBrickWall().setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",gloomrock=new BlockGloomrock().setHardness(5F).setResistance(7F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",gloomrock_smooth_slab=new BlockBasicSlab(gloomrock,BlockGloomrock.Meta.SMOOTH.value).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",gloomrock_smooth_stairs=new BlockBasicStairs(gloomrock,BlockGloomrock.Meta.SMOOTH.value).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",gloomrock_brick_slab=new BlockBasicSlab(gloomrock,BlockGloomrock.Meta.BRICK.value).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",gloomrock_brick_stairs=new BlockBasicStairs(gloomrock,BlockGloomrock.Meta.BRICK.value).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",obsidian_falling=new BlockObsidianEnd().setHardness(50F).setResistance(2000F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",obsidian_stairs=new BlockBasicStairs(Blocks.obsidian,0).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",obsidian_special=new BlockObsidianSpecial(false).setHardness(28F).setResistance(2000F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",obsidian_special_glow=new BlockObsidianSpecial(true).setHardness(28F).setResistance(2000F).setLightLevel(1F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",end_terrain=new BlockEndstoneTerrain().setHardness(2.5F).setResistance(15F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick=new BlockRavagedBrick().setHardness(3.5F).setResistance(28F).setStepSound(Block.soundTypePiston).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_smooth=new BlockRavagedBrickSmooth().setHardness(1F).setResistance(6F).setStepSound(Block.soundTypePiston).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_glow=new BlockBasic(Material.rock).setHardness(1F).setResistance(6F).setLightLevel(1F).setStepSound(Block.soundTypePiston).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_slab=new BlockBasicSlab(ravaged_brick).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_stairs=new BlockBasicStairs(ravaged_brick).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_fence=new BlockFence(""String_Node_Str"",Material.rock).setHardness(1.5F).setResistance(6F).setStepSound(Block.soundTypePiston).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",dungeon_puzzle=new BlockDungeonPuzzle().setBlockUnbreakable().setResistance(6000000F).setStepSound(Block.soundTypeMetal).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",cinder=new BlockBasic(Material.rock).setHardness(1F).setResistance(10F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",persegrit=new BlockPersegrit().setHardness(4F).setResistance(0.2F).setStepSound(Block.soundTypeGravel).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",laboratory_obsidian=new BlockBasic(Material.rock).setHardness(40F).setResistance(500F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",laboratory_floor=new BlockBasic(Material.rock).setHardness(30F).setResistance(100F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",laboratory_stairs=new BlockBasicStairs(laboratory_floor).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",end_powder_ore=new BlockEndPowderOre().setHardness(3F).setResistance(12F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",endium_ore=new BlockEndiumOre().setHardness(18F).setResistance(100F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",stardust_ore=new BlockStardustOre().setHardness(7F).setResistance(4F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",igneous_rock_ore=new BlockIgneousRockOre().setHardness(2F).setResistance(5F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",instability_orb_ore=new BlockInstabilityOrbOre().setHardness(5.5F).setResistance(3F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",sphalerite=new BlockSphalerite().setHardness(1.8F).setResistance(40F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",essence_altar=new BlockEssenceAltar().setHardness(8F).setResistance(20F).setLightOpacity(0).setLightLevel(0.4F).setStepSound(Block.soundTypeMetal).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",enhanced_brewing_stand=new BlockEnhancedBrewingStand().setHardness(0.65F).setLightLevel(0.125F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",enhanced_tnt=new BlockEnhancedTNT().setHardness(0F).setStepSound(Block.soundTypeGrass).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",decomposition_table=new BlockDecompositionTable().setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",experience_table=new BlockExperienceTable().setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",accumulation_table=new BlockAccumulationTable().setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",extraction_table=new BlockExtractionTable().setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",loot_chest=new BlockLootChest().setBlockUnbreakable().setResistance(6000000F).setLightLevel(0.875F).setStepSound(Block.soundTypePiston).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",endium_block=new BlockCompressed(MapColor.pinkColor).setHardness(14F).setResistance(800F).setStepSound(Block.soundTypeMetal).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",spooky_log=new BlockSpookyLog().setHardness(0.7F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",spooky_leaves=new BlockSpookyLeaves().setHardness(0.1F).setStepSound(Block.soundTypeGrass).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",ender_goo=new BlockEnderGoo().setHardness(150F).setLightOpacity(2).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",dry_vine=new BlockDryVine().setHardness(0.15F).setStepSound(Block.soundTypeGrass).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",ancient_web=new BlockAncientCobweb().setLightOpacity(1).setHardness(3.5F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",crossed_decoration=new BlockCrossedDecoration().setHardness(0F).setStepSound(Block.soundTypeGrass).setCreativeTab(null).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",enderman_head=new BlockEndermanHead().setHardness(1F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",death_flower=new BlockDeathFlower().setHardness(0F).setResistance(4F).setStepSound(Block.soundTypeGrass).setCreativeTab(null).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",energy_cluster=new BlockEnergyCluster().setHardness(0.7F).setResistance(0.2F).setStepSound(BlockEnergyCluster.soundTypeEnergyCluster).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",corrupted_energy_high=new BlockCorruptedEnergy(true).setBlockUnbreakable().setResistance(6000000F));
  register(""String_Node_Str"",corrupted_energy_low=new BlockCorruptedEnergy(false).setBlockUnbreakable().setResistance(6000000F));
  register(""String_Node_Str"",laboratory_glass=new BlockLaboratoryGlass().setHardness(5F).setResistance(50F).setLightOpacity(5).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",end_portal_frame=new BlockEndPortalFrame().setBlockUnbreakable().setResistance(6000000F).setLightLevel(0.125F).setStepSound(Block.soundTypeGlass).setBlockName(""String_Node_Str""));
  register(""String_Node_Str"",death_flower_pot=new BlockDeathFlowerPot().setHardness(0F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",laser_beam=new BlockLaserBeam().setBlockUnbreakable().setResistance(6000000F).setLightLevel(1F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",custom_spawner=new BlockCustomSpawner().setHardness(5F).setStepSound(Block.soundTypeMetal).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",biome_core=new BlockBiomeIslandCore().setBlockUnbreakable().setResistance(6000000F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str""));
  register(""String_Node_Str"",special_effects=new BlockSpecialEffects());
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockSlab.class);
  setItemClass(""String_Node_Str"",ItemBlockSlab.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockEssenceAltar.class);
  setItemClass(""String_Node_Str"",ItemBlockEnhanceableTile.class);
  setItemClass(""String_Node_Str"",ItemBlockEnhanceableTile.class);
  setItemClass(""String_Node_Str"",ItemBlockWithTooltip.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockDynamicColor.class);
  setItemClass(""String_Node_Str"",ItemBlockDynamicColor.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockEndFlower.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockSlab.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
}",0.99906015037594
34622,"@Override public void onUpdate(){
  super.onUpdate();
  if (!worldObj.isRemote) {
    ItemStack is=getEntityItem();
    if ((rockLife-=rand.nextInt(isInWater() ? 5 : 3)) < 0) {
      if (--is.stackSize == 0)       setDead();
 else {
        rockLife=700;
        setEntityItemStack(is);
      }
    }
    if (rand.nextInt(64 - Math.min(32,is.stackSize / 2)) == 0) {
      for (int attempt=0; attempt < 4 + (is.stackSize / 8); attempt++) {
        Pos pos=Pos.at(this);
        pos=pos.offset(MathUtil.floor((rand.nextDouble() - 0.5D) * 4D),MathUtil.floor((rand.nextDouble() - 0.5D) * 4D),MathUtil.floor((rand.nextDouble() - 0.5D) * 4D));
        Block block=pos.getBlock(worldObj);
        Block target=blockTransformations.get(block);
        if (target != null)         pos.setBlock(worldObj,target);
 else         if (block.getMaterial() == Material.air) {
          if (rand.nextInt(5) == 0)           pos.setBlock(worldObj,Blocks.fire);
 else           continue;
        }
 else         if (block == Blocks.tnt) {
          pos.setAir(worldObj);
          worldObj.createExplosion(null,pos.getX(),pos.getY(),pos.getZ(),3.9F,true);
        }
 else         if (block == Blocks.tallgrass && pos.getMetadata(worldObj) != 0) {
          pos.setMetadata(worldObj,0,2);
        }
 else         continue;
        if (block.getMaterial() != Material.air) {
          PacketPipeline.sendToAllAround(this,64D,new C20Effect(FXType.Basic.IGNEOUS_ROCK_MELT,pos));
        }
        if (rand.nextInt(3) == 0)         break;
      }
    }
    if (rand.nextInt(80 - Math.min(32,is.stackSize / 3)) == 0) {
      CollectionUtil.<EntityLivingBase>random(worldObj.getEntitiesWithinAABB(EntityLivingBase.class,boundingBox.expand(3D,3D,3D)),rand).ifPresent(entity -> {
        entity.setFire(1 + rand.nextInt(4) + getEntityItem().stackSize / 10);
      }
);
    }
  }
  Pos pos=Pos.at(this);
  Pos below=pos.getDown();
  if (rand.nextInt(6) == 0 && pos.getMaterial(worldObj) == Material.water) {
    HardcoreEnderExpansion.fx.global(""String_Node_Str"",posX + 0.2F * (rand.nextFloat() - 0.5F),posY + 0.2F * (rand.nextFloat() - 0.5F),posZ + 0.2F * (rand.nextFloat() - 0.5F),0D,0.6D,0D);
  }
  if (below.getBlock(worldObj) == BlockList.dungeon_puzzle && BlockDungeonPuzzle.canTrigger(below.getMetadata(worldObj))) {
    for (int a=0; a < 4; a++)     HardcoreEnderExpansion.fx.igneousRockBreak(this);
    if (!worldObj.isRemote && onGround) {
      worldObj.spawnEntityInWorld(new EntityTechnicalPuzzleChain(worldObj,below,Facing4.list[thrownDirection]));
      setDead();
    }
  }
  if (rand.nextInt(30) == 0) {
    FXHelper.create(""String_Node_Str"").pos(this).fluctuatePos(0.1D).spawn(rand,2);
  }
}","@Override public void onUpdate(){
  super.onUpdate();
  if (!worldObj.isRemote) {
    ItemStack is=getEntityItem();
    if ((rockLife-=rand.nextInt(isInWater() ? 5 : 3)) < 0) {
      if (--is.stackSize == 0)       setDead();
 else {
        rockLife=700;
        setEntityItemStack(is);
      }
    }
    if (rand.nextInt(64 - Math.min(32,is.stackSize / 2)) == 0) {
      for (int attempt=0; attempt < 4 + (is.stackSize / 8); attempt++) {
        Pos pos=Pos.at(this);
        pos=pos.offset(MathUtil.floor((rand.nextDouble() - 0.5D) * 4D),MathUtil.floor((rand.nextDouble() - 0.5D) * 4D),MathUtil.floor((rand.nextDouble() - 0.5D) * 4D));
        Block block=pos.getBlock(worldObj);
        Block target=blockTransformations.get(block);
        if (target != null)         pos.setBlock(worldObj,target);
 else         if (block.getMaterial() == Material.air) {
          if (rand.nextInt(5) == 0)           pos.setBlock(worldObj,Blocks.fire);
 else           continue;
        }
 else         if (block == Blocks.tnt) {
          pos.setAir(worldObj);
          worldObj.createExplosion(null,pos.getX(),pos.getY(),pos.getZ(),3.9F,true);
        }
 else         if (block == Blocks.tallgrass && pos.getMetadata(worldObj) != 0) {
          pos.setMetadata(worldObj,0,2);
        }
 else         continue;
        if (block.getMaterial() != Material.air) {
          PacketPipeline.sendToAllAround(this,64D,new C20Effect(FXType.Basic.IGNEOUS_ROCK_MELT,pos));
        }
        if (rand.nextInt(3) == 0)         break;
      }
    }
    if (rand.nextInt(80 - Math.min(32,is.stackSize / 3)) == 0) {
      CollectionUtil.random(worldObj.getEntitiesWithinAABB(EntityLivingBase.class,boundingBox.expand(3D,3D,3D)),rand).ifPresent(entity -> {
        ((EntityLivingBase)entity).setFire(1 + rand.nextInt(4) + getEntityItem().stackSize / 10);
      }
);
    }
  }
  Pos pos=Pos.at(this);
  Pos below=pos.getDown();
  if (rand.nextInt(6) == 0 && pos.getMaterial(worldObj) == Material.water) {
    HardcoreEnderExpansion.fx.global(""String_Node_Str"",posX + 0.2F * (rand.nextFloat() - 0.5F),posY + 0.2F * (rand.nextFloat() - 0.5F),posZ + 0.2F * (rand.nextFloat() - 0.5F),0D,0.6D,0D);
  }
  if (below.getBlock(worldObj) == BlockList.dungeon_puzzle && BlockDungeonPuzzle.canTrigger(below.getMetadata(worldObj))) {
    for (int a=0; a < 4; a++)     HardcoreEnderExpansion.fx.igneousRockBreak(this);
    if (!worldObj.isRemote && onGround) {
      worldObj.spawnEntityInWorld(new EntityTechnicalPuzzleChain(worldObj,below,Facing4.list[thrownDirection]));
      setDead();
    }
  }
  if (rand.nextInt(30) == 0) {
    FXHelper.create(""String_Node_Str"").pos(this).fluctuatePos(0.1D).spawn(rand,2);
  }
}",0.9925373134328358
34623,"@Override public void onLivingUpdate(){
  if (isWet()) {
    attackEntityFrom(DamageSource.drown,1F);
  }
  isJumping=false;
  if (entityToAttack != null) {
    faceEntity(entityToAttack,100F,100F);
  }
  boolean hasIS=isCarrying();
  if (!worldObj.isRemote) {
    if (target == null) {
      if (!hasIS && !isScared && rand.nextInt(550) == 0 && worldObj.getGameRules().getGameRuleBooleanValue(""String_Node_Str"")) {
        CollectionUtil.<EntityPlayer>random(worldObj.getEntitiesWithinAABB(EntityPlayer.class,boundingBox.expand(6D,3D,6D)),rand).ifPresent(player -> {
          target=player;
          ItemStack headArmor=target.getCurrentArmor(3);
          if (headArmor != null && headArmor.getItem() == ItemList.enderman_head)           target=null;
 else           attentionLossTimer=(byte)(64 + rand.nextInt(62));
        }
);
      }
 else {
        List<EntityItem> list=worldObj.getEntitiesWithinAABB(EntityItem.class,boundingBox.expand(1D,0D,1D));
        if (!list.isEmpty() && ++itemDecisionTimer > rand.nextInt(70) + 15) {
          int carryingLevelIndex=itemPriorities.indexOf(carryingLevel);
          EntityItem item=list.get(rand.nextInt(list.size()));
          ItemStack is=item.getEntityItem();
          for (          ItemPriorityLevel level : itemPriorities) {
            if (level.isValid(is)) {
              if (itemPriorities.indexOf(level) < carryingLevelIndex) {
                if (hasIS) {
                  EntityItem newItem=new EntityItem(worldObj,posX,posY,posZ,getCarrying());
                  float power=0.3F, yawRadians=(float)Math.toRadians(rotationYaw), randomAngle=rand.nextFloat() * (float)Math.PI * 2F;
                  newItem.motionX=(-MathHelper.sin(yawRadians) * MathHelper.cos(yawRadians) * power);
                  newItem.motionZ=(MathHelper.cos(yawRadians) * MathHelper.cos(yawRadians) * power);
                  newItem.motionY=(-MathHelper.sin((float)Math.toRadians(rotationPitch)) * power + 0.1F);
                  power=0.02F * rand.nextFloat();
                  newItem.motionX+=MathHelper.cos(randomAngle) * power;
                  newItem.motionY+=(rand.nextFloat() - rand.nextFloat()) * 0.1F;
                  newItem.motionZ+=MathHelper.sin(randomAngle) * power;
                  worldObj.spawnEntityInWorld(newItem);
                }
                setCarriedItemStack(is);
                item.setDead();
              }
              break;
            }
          }
          itemDecisionTimer=0;
        }
      }
    }
 else     if (target != null) {
      if (--attentionLossTimer < -124 || target.isDead)       target=null;
 else       if (!hasIS && getDistanceToEntity(target) < 1.8D) {
        for (int attempt=0, slot; attempt < 60; attempt++) {
          slot=rand.nextInt(target.inventory.mainInventory.length);
          if (slot == target.inventory.currentItem)           continue;
          ItemStack is=target.inventory.mainInventory[slot];
          if (is != null) {
            ItemStack carrying=is.copy();
            carrying.stackSize=1;
            setCarriedItemStack(carrying);
            if (--target.inventory.mainInventory[slot].stackSize == 0) {
              target.inventory.mainInventory[slot]=null;
              PacketPipeline.sendToPlayer(target,new C00ClearInventorySlot(slot));
            }
            break;
          }
        }
        PathEntity escapePath=null;
        BlockPosM tmpPos=BlockPosM.tmp();
        for (int pathatt=0; pathatt < 100; pathatt++) {
          double ang=rand.nextDouble() * 2D * Math.PI, len=8D + rand.nextDouble() * 6D;
          tmpPos.set(posX + Math.cos(ang) * len,posY + rand.nextInt(4) - 2,posZ + Math.sin(ang) * len);
          Block low=tmpPos.getBlock(worldObj);
          if ((low.getMaterial() == Material.air || low == BlockList.crossed_decoration) && tmpPos.moveUp().getMaterial(worldObj) == Material.air) {
            escapePath=worldObj.getEntityPathToXYZ(this,tmpPos.x,tmpPos.y,tmpPos.z,16F,false,true,false,false);
            break;
          }
        }
        if (escapePath != null)         setPathToEntity(escapePath);
        target=null;
      }
    }
    entityToAttack=target;
  }
  super.onLivingUpdate();
}","@Override public void onLivingUpdate(){
  if (isWet()) {
    attackEntityFrom(DamageSource.drown,1F);
  }
  isJumping=false;
  if (entityToAttack != null) {
    faceEntity(entityToAttack,100F,100F);
  }
  boolean hasIS=isCarrying();
  if (!worldObj.isRemote) {
    if (target == null) {
      if (!hasIS && !isScared && rand.nextInt(550) == 0 && worldObj.getGameRules().getGameRuleBooleanValue(""String_Node_Str"")) {
        CollectionUtil.random(worldObj.getEntitiesWithinAABB(EntityPlayer.class,boundingBox.expand(6D,3D,6D)),rand).ifPresent(player -> {
          target=(EntityPlayer)player;
          ItemStack headArmor=target.getCurrentArmor(3);
          if (headArmor != null && headArmor.getItem() == ItemList.enderman_head)           target=null;
 else           attentionLossTimer=(byte)(64 + rand.nextInt(62));
        }
);
      }
 else {
        List<EntityItem> list=worldObj.getEntitiesWithinAABB(EntityItem.class,boundingBox.expand(1D,0D,1D));
        if (!list.isEmpty() && ++itemDecisionTimer > rand.nextInt(70) + 15) {
          int carryingLevelIndex=itemPriorities.indexOf(carryingLevel);
          EntityItem item=list.get(rand.nextInt(list.size()));
          ItemStack is=item.getEntityItem();
          for (          ItemPriorityLevel level : itemPriorities) {
            if (level.isValid(is)) {
              if (itemPriorities.indexOf(level) < carryingLevelIndex) {
                if (hasIS) {
                  EntityItem newItem=new EntityItem(worldObj,posX,posY,posZ,getCarrying());
                  float power=0.3F, yawRadians=(float)Math.toRadians(rotationYaw), randomAngle=rand.nextFloat() * (float)Math.PI * 2F;
                  newItem.motionX=(-MathHelper.sin(yawRadians) * MathHelper.cos(yawRadians) * power);
                  newItem.motionZ=(MathHelper.cos(yawRadians) * MathHelper.cos(yawRadians) * power);
                  newItem.motionY=(-MathHelper.sin((float)Math.toRadians(rotationPitch)) * power + 0.1F);
                  power=0.02F * rand.nextFloat();
                  newItem.motionX+=MathHelper.cos(randomAngle) * power;
                  newItem.motionY+=(rand.nextFloat() - rand.nextFloat()) * 0.1F;
                  newItem.motionZ+=MathHelper.sin(randomAngle) * power;
                  worldObj.spawnEntityInWorld(newItem);
                }
                setCarriedItemStack(is);
                item.setDead();
              }
              break;
            }
          }
          itemDecisionTimer=0;
        }
      }
    }
 else     if (target != null) {
      if (--attentionLossTimer < -124 || target.isDead)       target=null;
 else       if (!hasIS && getDistanceToEntity(target) < 1.8D) {
        for (int attempt=0, slot; attempt < 60; attempt++) {
          slot=rand.nextInt(target.inventory.mainInventory.length);
          if (slot == target.inventory.currentItem)           continue;
          ItemStack is=target.inventory.mainInventory[slot];
          if (is != null) {
            ItemStack carrying=is.copy();
            carrying.stackSize=1;
            setCarriedItemStack(carrying);
            if (--target.inventory.mainInventory[slot].stackSize == 0) {
              target.inventory.mainInventory[slot]=null;
              PacketPipeline.sendToPlayer(target,new C00ClearInventorySlot(slot));
            }
            break;
          }
        }
        PathEntity escapePath=null;
        BlockPosM tmpPos=BlockPosM.tmp();
        for (int pathatt=0; pathatt < 100; pathatt++) {
          double ang=rand.nextDouble() * 2D * Math.PI, len=8D + rand.nextDouble() * 6D;
          tmpPos.set(posX + Math.cos(ang) * len,posY + rand.nextInt(4) - 2,posZ + Math.sin(ang) * len);
          Block low=tmpPos.getBlock(worldObj);
          if ((low.getMaterial() == Material.air || low == BlockList.crossed_decoration) && tmpPos.moveUp().getMaterial(worldObj) == Material.air) {
            escapePath=worldObj.getEntityPathToXYZ(this,tmpPos.x,tmpPos.y,tmpPos.z,16F,false,true,false,false);
            break;
          }
        }
        if (escapePath != null)         setPathToEntity(escapePath);
        target=null;
      }
    }
    entityToAttack=target;
  }
  super.onLivingUpdate();
}",0.9966547192353644
34624,"@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase entity,ItemStack is){
  super.onBlockPlacedBy(world,x,y,z,entity,is);
  IEnhanceableTile tile=(IEnhanceableTile)world.getTileEntity(x,y,z);
  if (tile != null)   tile.getEnhancements().addAll(EnhancementHandler.getEnhancements(is));
}","@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase entity,ItemStack is){
  super.onBlockPlacedBy(world,x,y,z,entity,is);
  IEnhanceableTile tile=(IEnhanceableTile)world.getTileEntity(x,y,z);
  if (tile != null)   tile.getEnhancements().replace(EnhancementRegistry.getEnhancementList(is));
}",0.948678071539658
34625,"@Override public void breakBlock(World world,int x,int y,int z,Block oldBlock,int oldMeta){
  TileEntity tile=world.getTileEntity(x,y,z);
  if (tile instanceof IEnhanceableTile)   dropBlockAsItem(world,x,y,z,((IEnhanceableTile)tile).createEnhancedItemStack());
  super.breakBlock(world,x,y,z,oldBlock,oldMeta);
}","@Override public void breakBlock(World world,int x,int y,int z,Block oldBlock,int oldMeta){
  Pos.at(x,y,z).castTileEntity(world,TileEntityEnhancedBrewingStand.class).ifPresent(tile -> dropBlockAsItem(world,x,y,z,IEnhanceableTile.createItemStack(tile)));
  super.breakBlock(world,x,y,z,oldBlock,oldMeta);
}",0.6181229773462783
34626,"private boolean tryIgniteTNT(World world,int x,int y,int z,boolean ignite,EntityLivingBase igniter){
  if (!world.isRemote) {
    TileEntityEnhancedTNT tile=(TileEntityEnhancedTNT)world.getTileEntity(x,y,z);
    if (tile != null && (ignite || tile.getEnhancements().contains(TNTEnhancements.TRAP))) {
      EntityBlockEnhancedTNTPrimed tnt=new EntityBlockEnhancedTNTPrimed(world,x + 0.5F,y + 0.5F,z + 0.5F,igniter,tile.getEnhancements());
      world.spawnEntityInWorld(tnt);
      world.playSoundAtEntity(tnt,""String_Node_Str"",1F,1F);
      return true;
    }
  }
  return false;
}","private boolean tryIgniteTNT(World world,int x,int y,int z,boolean ignite,EntityLivingBase igniter){
  if (!world.isRemote) {
    TileEntityEnhancedTNT tile=(TileEntityEnhancedTNT)world.getTileEntity(x,y,z);
    if (tile != null && (ignite)) {
      EntityBlockEnhancedTNTPrimed tnt=new EntityBlockEnhancedTNTPrimed(world,x + 0.5F,y + 0.5F,z + 0.5F,igniter,tile.getEnhancements());
      world.spawnEntityInWorld(tnt);
      world.playSoundAtEntity(tnt,""String_Node_Str"",1F,1F);
      return true;
    }
  }
  return false;
}",0.948509485094851
34627,"@Override public void onBlockExploded(World world,int x,int y,int z,Explosion explosion){
  if (!world.isRemote) {
    TileEntityEnhancedTNT tile=(TileEntityEnhancedTNT)world.getTileEntity(x,y,z);
    if (tile != null) {
      EntityBlockEnhancedTNTPrimed tnt=new EntityBlockEnhancedTNTPrimed(world,x + 0.5F,y + 0.5F,z + 0.5F,explosion.getExplosivePlacedBy(),tile.getEnhancements());
      tnt.fuse=tile.getEnhancements().contains(TNTEnhancements.NO_FUSE) ? 1 : world.rand.nextInt(tnt.fuse / 4) + tnt.fuse / 8;
      world.spawnEntityInWorld(tnt);
    }
  }
  super.onBlockExploded(world,x,y,z,explosion);
}","@Override public void onBlockExploded(World world,int x,int y,int z,Explosion explosion){
  if (!world.isRemote) {
    TileEntityEnhancedTNT tile=(TileEntityEnhancedTNT)world.getTileEntity(x,y,z);
    if (tile != null) {
      EntityBlockEnhancedTNTPrimed tnt=new EntityBlockEnhancedTNTPrimed(world,x + 0.5F,y + 0.5F,z + 0.5F,explosion.getExplosivePlacedBy(),tile.getEnhancements());
      tnt.fuse=world.rand.nextInt(tnt.fuse / 4) + tnt.fuse / 8;
      world.spawnEntityInWorld(tnt);
    }
  }
  super.onBlockExploded(world,x,y,z,explosion);
}",0.945264986967854
34628,"@Override public boolean removedByPlayer(World world,EntityPlayer player,int x,int y,int z,boolean willHarvest){
  boolean exploded=false;
  if (!player.capabilities.isCreativeMode)   exploded=tryIgniteTNT(world,x,y,z,false,null);
  if (!exploded) {
    TileEntity tile=world.getTileEntity(x,y,z);
    if (tile instanceof IEnhanceableTile)     dropBlockAsItem(world,x,y,z,((IEnhanceableTile)tile).createEnhancedItemStack());
  }
  return super.removedByPlayer(world,player,x,y,z,willHarvest);
}","@Override public boolean removedByPlayer(World world,EntityPlayer player,int x,int y,int z,boolean willHarvest){
  boolean exploded=false;
  if (!player.capabilities.isCreativeMode)   exploded=tryIgniteTNT(world,x,y,z,false,null);
  if (!exploded)   Pos.at(x,y,z).castTileEntity(world,TileEntityEnhancedTNT.class).ifPresent(tile -> dropBlockAsItem(world,x,y,z,IEnhanceableTile.createItemStack(tile)));
  return super.removedByPlayer(world,player,x,y,z,willHarvest);
}",0.7658688865764828
34629,"@Override public void breakBlock(World world,int x,int y,int z,Block oldBlock,int oldMeta){
  if (!world.isRemote) {
    TileEntityEssenceAltar altar=(TileEntityEssenceAltar)world.getTileEntity(x,y,z);
    if (altar != null) {
      altar.onBlockDestroy();
      dropBlockAsItem(world,x,y,z,((IEnhanceableTile)altar).createEnhancedItemStack());
    }
  }
  super.breakBlock(world,x,y,z,oldBlock,oldMeta);
}","@Override public void breakBlock(World world,int x,int y,int z,Block oldBlock,int oldMeta){
  if (!world.isRemote) {
    Pos.at(x,y,z).castTileEntity(world,TileEntityEssenceAltar.class).ifPresent(tile -> {
      tile.onBlockDestroy();
      dropBlockAsItem(world,x,y,z,IEnhanceableTile.createItemStack(tile));
    }
);
  }
  super.breakBlock(world,x,y,z,oldBlock,oldMeta);
}",0.6153846153846154
34630,"@Override public void writeEntityToNBT(NBTTagCompound nbt){
  super.writeEntityToNBT(nbt);
  nbt.setString(""String_Node_Str"",EnhancementEnumHelper.serialize(tntEnhancements));
  nbt.setBoolean(""String_Node_Str"",wentIntoWall);
}","@Override public void writeEntityToNBT(NBTTagCompound nbt){
  super.writeEntityToNBT(nbt);
  nbt.setString(""String_Node_Str"",enhancements.serialize());
  nbt.setBoolean(""String_Node_Str"",wentIntoWall);
}",0.9348837209302324
34631,"@Override public void readEntityFromNBT(NBTTagCompound nbt){
  super.readEntityFromNBT(nbt);
  tntEnhancements=EnhancementEnumHelper.deserialize(nbt.getString(""String_Node_Str""),TNTEnhancements.class);
  wentIntoWall=nbt.getBoolean(""String_Node_Str"");
}","@Override public void readEntityFromNBT(NBTTagCompound nbt){
  super.readEntityFromNBT(nbt);
  enhancements.deserialize(nbt.getString(""String_Node_Str""));
  wentIntoWall=nbt.getBoolean(""String_Node_Str"");
}",0.4836601307189542
34632,"public EntityBlockEnhancedTNTPrimed(World world,double x,double y,double z,EntityLivingBase igniter,List<Enum> enhancements){
  super(world,x,y,z,igniter);
  this.tntEnhancements.addAll(enhancements);
  if (tntEnhancements.contains(TNTEnhancements.NOCLIP)) {
    noClip=true;
    fuse=40;
  }
  if (tntEnhancements.contains(TNTEnhancements.NO_FUSE))   fuse=1;
}","public EntityBlockEnhancedTNTPrimed(World world,double x,double y,double z,EntityLivingBase igniter,EnhancementList<TNTEnhancements> enhancements){
  super(world,x,y,z,igniter);
  this.enhancements=enhancements;
}",0.5679442508710801
34633,"@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  pearlTypes=EnhancementEnumHelper.deserialize(nbt.getString(""String_Node_Str""),EnderPearlEnhancements.class);
  life=nbt.getShort(""String_Node_Str"");
}","@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  enhancements.deserialize(nbt.getString(""String_Node_Str""));
  life=nbt.getShort(""String_Node_Str"");
}",0.8776978417266187
34634,"@Override protected void onImpact(MovingObjectPosition mop){
  if (mop.entityHit != null) {
    if (ride != null && mop.entityHit.equals(ride))     return;
    mop.entityHit.attackEntityFrom(DamageSource.causeThrownDamage(this,getThrower()),0F);
  }
  for (int i=0; i < 32; ++i) {
    worldObj.spawnParticle(""String_Node_Str"",posX,posY + rand.nextDouble() * 2D,posZ,rand.nextGaussian(),0D,rand.nextGaussian());
  }
  if (!worldObj.isRemote) {
    if (getThrower() != null && getThrower() instanceof EntityPlayerMP) {
      EntityPlayerMP player=(EntityPlayerMP)getThrower();
      if (player.playerNetServerHandler.func_147362_b().isChannelOpen() && player.worldObj == worldObj) {
        EnderTeleportEvent event=new EnderTeleportEvent(player,posX,posY,posZ,5F);
        if (!MinecraftForge.EVENT_BUS.post(event)) {
          if (pearlTypes.contains(EnderPearlEnhancements.EXPLOSIVE))           worldObj.newExplosion(this,posX,posY,posZ,2.7F,false,true);
          if (pearlTypes.contains(EnderPearlEnhancements.FREEZE)) {
            for (            EntityLivingBase entity : (List<EntityLivingBase>)worldObj.getEntitiesWithinAABB(EntityLivingBase.class,boundingBox.expand(5D,3D,5D))) {
              double dist=entity.getDistanceSqToEntity(this);
              if (dist <= 5D)               entity.addPotionEffect(new PotionEffect(Potion.moveSlowdown.id,80 + (int)(10D * (6D - dist)),3,true));
            }
          }
          if (player.isRiding())           player.mountEntity((Entity)null);
          player.setPositionAndUpdate(event.targetX,event.targetY,event.targetZ);
          player.fallDistance=0F;
          if (!pearlTypes.contains(EnderPearlEnhancements.NO_FALL_DAMAGE))           player.attackEntityFrom(DamageSource.fall,event.attackDamage);
          if (pearlTypes.contains(EnderPearlEnhancements.FREEZE))           PacketPipeline.sendToAllAround(this,64D,new C20Effect(FXType.Basic.ENDER_PEARL_FREEZE,this));
        }
      }
    }
    setDead();
  }
}","@Override protected void onImpact(MovingObjectPosition mop){
  if (mop.entityHit != null) {
    if (ride != null && mop.entityHit.equals(ride))     return;
    mop.entityHit.attackEntityFrom(DamageSource.causeThrownDamage(this,getThrower()),0F);
  }
  for (int i=0; i < 32; ++i) {
    worldObj.spawnParticle(""String_Node_Str"",posX,posY + rand.nextDouble() * 2D,posZ,rand.nextGaussian(),0D,rand.nextGaussian());
  }
  if (!worldObj.isRemote) {
    if (getThrower() != null && getThrower() instanceof EntityPlayerMP) {
      EntityPlayerMP player=(EntityPlayerMP)getThrower();
      if (player.playerNetServerHandler.func_147362_b().isChannelOpen() && player.worldObj == worldObj) {
        EnderTeleportEvent event=new EnderTeleportEvent(player,posX,posY,posZ,5F);
        if (!MinecraftForge.EVENT_BUS.post(event)) {
          if (player.isRiding())           player.mountEntity((Entity)null);
          player.setPositionAndUpdate(event.targetX,event.targetY,event.targetZ);
          player.fallDistance=0F;
        }
      }
    }
    setDead();
  }
}",0.6769940672379697
34635,"public EntityProjectileEnhancedEnderPearl(World world,EntityLivingBase thrower){
  super(world,thrower);
  if (thrower instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)thrower;
    ItemStack is=player.inventory.getCurrentItem();
    if (is != null)     pearlTypes.addAll(EnhancementHandler.getEnhancements(is));
    if (pearlTypes.contains(EnderPearlEnhancements.RIDING)) {
      ride=(EntityPlayer)thrower;
      for (      Object o : world.loadedEntityList) {
        if (o instanceof EntityProjectileEnhancedEnderPearl) {
          EntityProjectileEnhancedEnderPearl pearl=(EntityProjectileEnhancedEnderPearl)o;
          if (pearl.ride != null && pearl.ride.getCommandSenderName().equals(player.getCommandSenderName())) {
            pearl.ride=null;
            if (!pearl.pearlTypes.contains(EnderPearlEnhancements.NO_FALL_DAMAGE))             player.attackEntityFrom(DamageSource.fall,5F);
            pearl.setDead();
            break;
          }
        }
      }
    }
  }
}","public EntityProjectileEnhancedEnderPearl(World world,EntityLivingBase thrower,EnhancementList<EnderPearlEnhancements> enhancements){
  super(world,thrower);
  this.enhancements=enhancements;
  if (thrower instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)thrower;
  }
}",0.3076923076923077
34636,"@Override protected float getGravityVelocity(){
  return pearlTypes.contains(EnderPearlEnhancements.NO_GRAVITY) ? 0F : (super.getGravityVelocity() * (pearlTypes.contains(EnderPearlEnhancements.INCREASED_RANGE) ? 0.75F : 1F));
}","@Override protected float getGravityVelocity(){
  return 1F;
}",0.4290657439446367
34637,"@Override public void onUpdate(){
  super.onUpdate();
  if (!worldObj.isRemote) {
    if (ride != null) {
      dataWatcher.updateObject(16,ride.getCommandSenderName());
      updateRidePosition();
      ride.fallDistance=0F;
      ride.setPosition(posX,posY + ride.height,posZ);
    }
    if (pearlTypes.contains(EnderPearlEnhancements.DOUBLE_SPEED)) {
      if (inGround) {
        motionX*=0.2D;
        motionY*=0.2D;
        motionZ*=0.2D;
      }
 else {
        super.onUpdate();
        if (ride != null)         updateRidePosition();
      }
    }
    if (++life > 200)     setDead();
  }
 else {
    EntityClientPlayerMP clientPlayer=FMLClientHandler.instance().getClient().thePlayer;
    if (dataWatcher.getWatchableObjectString(16).equals(clientPlayer.getCommandSenderName()))     clientPlayer.setPosition(posX,posY + clientPlayer.height,posZ);
  }
}","@Override public void onUpdate(){
  super.onUpdate();
  if (!worldObj.isRemote) {
    if (ride != null) {
      dataWatcher.updateObject(16,ride.getCommandSenderName());
      updateRidePosition();
      ride.fallDistance=0F;
      ride.setPosition(posX,posY + ride.height,posZ);
    }
    if (++life > 200)     setDead();
  }
 else {
    EntityClientPlayerMP clientPlayer=FMLClientHandler.instance().getClient().thePlayer;
    if (dataWatcher.getWatchableObjectString(16).equals(clientPlayer.getCommandSenderName()))     clientPlayer.setPosition(posX,posY + clientPlayer.height,posZ);
  }
}",0.8134893324156917
34638,"@Override public void writeToNBT(NBTTagCompound nbt){
  super.writeToNBT(nbt);
  nbt.setString(""String_Node_Str"",EnhancementEnumHelper.serialize(pearlTypes));
  nbt.setShort(""String_Node_Str"",life);
}","@Override public void writeToNBT(NBTTagCompound nbt){
  super.writeToNBT(nbt);
  nbt.setString(""String_Node_Str"",enhancements.serialize());
  nbt.setShort(""String_Node_Str"",life);
}",0.9396325459317584
34639,"@Override public void writeEntityToNBT(NBTTagCompound nbt){
  super.writeEntityToNBT(nbt);
  nbt.setByte(""String_Node_Str"",ticks);
  nbt.setString(""String_Node_Str"",EnhancementEnumHelper.serialize(enhancements));
  nbt.removeTag(""String_Node_Str"");
  nbt.removeTag(""String_Node_Str"");
}","@Override public void writeEntityToNBT(NBTTagCompound nbt){
  super.writeEntityToNBT(nbt);
  nbt.setByte(""String_Node_Str"",ticks);
  nbt.setString(""String_Node_Str"",enhancements.serialize());
  nbt.removeTag(""String_Node_Str"");
  nbt.removeTag(""String_Node_Str"");
}",0.9328493647912884
34640,"@SideOnly(Side.CLIENT) public EntityProjectileSpatialDash(World world,double x,double y,double z){
  super(world,x,y,z);
}","@SideOnly(Side.CLIENT) public EntityProjectileSpatialDash(World world,double x,double y,double z){
  super(world,x,y,z);
  this.enhancements=new EnhancementList<>(SpatialDashGemEnhancements.class);
}",0.7601246105919003
34641,"@Override public void readEntityFromNBT(NBTTagCompound nbt){
  super.readEntityFromNBT(nbt);
  ticks=nbt.getByte(""String_Node_Str"");
  enhancements=EnhancementEnumHelper.deserialize(""String_Node_Str"",SpatialDashGemEnhancements.class);
}","@Override public void readEntityFromNBT(NBTTagCompound nbt){
  super.readEntityFromNBT(nbt);
  ticks=nbt.getByte(""String_Node_Str"");
  enhancements.deserialize(nbt.getString(""String_Node_Str""));
}",0.8379629629629629
34642,"@Override public void onUpdate(){
  lastTickPosX=posX;
  lastTickPosY=posY;
  lastTickPosZ=posZ;
  onEntityUpdate();
  if (!worldObj.isRemote) {
    for (int cycles=enhancements.contains(SpatialDashGemEnhancements.INSTANT) ? 48 : 1; cycles > 0; cycles--) {
      if (++ticks > (enhancements.contains(SpatialDashGemEnhancements.RANGE) ? 48 : 28))       setDead();
      Vec3 vecPos=Vec3.createVectorHelper(posX,posY,posZ);
      Vec3 vecPosWithMotion=Vec3.createVectorHelper(posX + motionX,posY + motionY,posZ + motionZ);
      Vec3 hitVec;
      MovingObjectPosition mop=worldObj.rayTraceBlocks(vecPos,vecPosWithMotion);
      vecPos=Vec3.createVectorHelper(posX,posY,posZ);
      if (mop != null)       hitVec=Vec3.createVectorHelper(mop.hitVec.xCoord,mop.hitVec.yCoord,mop.hitVec.zCoord);
 else       hitVec=Vec3.createVectorHelper(posX + motionX,posY + motionY,posZ + motionZ);
      Entity finalEntity=null;
      List<Entity> collisionList=worldObj.getEntitiesWithinAABBExcludingEntity(this,boundingBox.addCoord(motionX,motionY,motionZ).expand(1D,1D,1D));
      double minDist=Double.MAX_VALUE, dist;
      EntityLivingBase thrower=getThrower();
      for (      Entity e : collisionList) {
        if (e.canBeCollidedWith() && (e != thrower || ticks >= 5)) {
          AxisAlignedBB aabb=e.boundingBox.expand(0.3F,0.3F,0.3F);
          MovingObjectPosition mopTest=aabb.calculateIntercept(vecPos,hitVec);
          if (mopTest != null) {
            dist=vecPos.distanceTo(mopTest.hitVec);
            if (dist < minDist) {
              finalEntity=e;
              minDist=dist;
            }
          }
        }
      }
      if (finalEntity != null)       mop=new MovingObjectPosition(finalEntity);
      if (mop != null) {
        onImpact(mop);
        break;
      }
      posX+=motionX;
      posY+=motionY;
      posZ+=motionZ;
      setPosition(posX,posY,posZ);
    }
    PacketPipeline.sendToAllAround(this,128D,new C22EffectLine(FXType.Line.SPATIAL_DASH_MOVE,lastTickPosX,lastTickPosY,lastTickPosZ,posX,posY,posZ));
  }
}","@Override public void onUpdate(){
  lastTickPosX=posX;
  lastTickPosY=posY;
  lastTickPosZ=posZ;
  onEntityUpdate();
  if (!worldObj.isRemote) {
    for (int cycles=1; cycles > 0; cycles--) {
      if (++ticks > (28))       setDead();
      Vec3 vecPos=Vec3.createVectorHelper(posX,posY,posZ);
      Vec3 vecPosWithMotion=Vec3.createVectorHelper(posX + motionX,posY + motionY,posZ + motionZ);
      Vec3 hitVec;
      MovingObjectPosition mop=worldObj.rayTraceBlocks(vecPos,vecPosWithMotion);
      vecPos=Vec3.createVectorHelper(posX,posY,posZ);
      if (mop != null)       hitVec=Vec3.createVectorHelper(mop.hitVec.xCoord,mop.hitVec.yCoord,mop.hitVec.zCoord);
 else       hitVec=Vec3.createVectorHelper(posX + motionX,posY + motionY,posZ + motionZ);
      Entity finalEntity=null;
      List<Entity> collisionList=worldObj.getEntitiesWithinAABBExcludingEntity(this,boundingBox.addCoord(motionX,motionY,motionZ).expand(1D,1D,1D));
      double minDist=Double.MAX_VALUE, dist;
      EntityLivingBase thrower=getThrower();
      for (      Entity e : collisionList) {
        if (e.canBeCollidedWith() && (e != thrower || ticks >= 5)) {
          AxisAlignedBB aabb=e.boundingBox.expand(0.3F,0.3F,0.3F);
          MovingObjectPosition mopTest=aabb.calculateIntercept(vecPos,hitVec);
          if (mopTest != null) {
            dist=vecPos.distanceTo(mopTest.hitVec);
            if (dist < minDist) {
              finalEntity=e;
              minDist=dist;
            }
          }
        }
      }
      if (finalEntity != null)       mop=new MovingObjectPosition(finalEntity);
      if (mop != null) {
        onImpact(mop);
        break;
      }
      posX+=motionX;
      posY+=motionY;
      posZ+=motionZ;
      setPosition(posX,posY,posZ);
    }
    PacketPipeline.sendToAllAround(this,128D,new C22EffectLine(FXType.Line.SPATIAL_DASH_MOVE,lastTickPosX,lastTickPosY,lastTickPosZ,posX,posY,posZ));
  }
}",0.9676277187658068
34643,"public ContainerEndPowderEnhancements(InventoryPlayer inv,IEnhanceableTile tileOptional){
  containerInv=new InventoryBasic(""String_Node_Str"",false,1);
  this.enhanceableTile=tileOptional;
  if (isEnhancingTile()) {
    addSlotToContainer(new SlotShowCase(containerInv,0,80,8));
    containerInv.setInventorySlotContents(0,tileOptional.createEnhancedItemStack());
  }
 else {
    addSlotToContainer(new SlotEnhancementsSubject(this,containerInv,0,80,8));
  }
  for (int i=0; i < 3; ++i) {
    for (int j=0; j < 9; ++j)     addSlotToContainer(new Slot(inv,j + i * 9 + 9,8 + j * 18,112 + i * 18));
  }
  for (int i=0; i < 9; ++i)   addSlotToContainer(new Slot(inv,i,8 + i * 18,170));
}","public ContainerEndPowderEnhancements(InventoryPlayer inv,IEnhanceableTile tileOptional){
  containerInv=new InventoryBasic(""String_Node_Str"",false,1);
  this.enhanceableTile=tileOptional;
  if (isEnhancingTile()) {
    addSlotToContainer(new SlotShowCase(containerInv,0,80,8));
    containerInv.setInventorySlotContents(0,IEnhanceableTile.createItemStack(tileOptional));
  }
 else {
    addSlotToContainer(new SlotEnhancementsSubject(this,containerInv,0,80,8));
  }
  for (int i=0; i < 3; ++i) {
    for (int j=0; j < 9; ++j)     addSlotToContainer(new Slot(inv,j + i * 9 + 9,8 + j * 18,112 + i * 18));
  }
  for (int i=0; i < 9; ++i)   addSlotToContainer(new Slot(inv,i,8 + i * 18,170));
}",0.9577874818049492
34644,"@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack is,EntityPlayer player,List textLines,boolean showAdvancedInfo){
}","@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack is,EntityPlayer player,List textLines,boolean showAdvancedInfo){
  EnhancementRegistry.getEnhancementList(is).addTooltip(textLines,EnumChatFormatting.YELLOW);
}",0.7431693989071039
34645,"@Override public T removeRandomItem(Random rand){
  T item=getRandomItem(rand);
  if (item != null)   items.remove(item);
  return item;
}","@Override public T removeRandomItem(Random rand){
  T item=getRandomItem(rand);
  if (item != null) {
    items.remove(item);
    dirty=true;
  }
  return item;
}",0.92
34646,"@Override protected void updateEntityActionState(){
  if (lastAttacker != null && (lastAttacker.isDead || !lastAttacker.playerNetServerHandler.func_147362_b().isChannelOpen()))   lastAttacker=null;
  float health=getHealth();
  if (health <= 0)   return;
  if (lightningTarget == null && --healthRegenTimer < 0 && health < getMaxHealth())   setHealth(health + 1);
  if (healthRegenTimer < 0)   healthRegenTimer=9;
  if (lightningStartCounter <= 0) {
    lightningStartCounter=40;
    lightningCounter=0;
    lightningTarget=lastAttacker == null ? worldObj.getClosestPlayerToEntity(this,512D) : lastAttacker;
  }
  if (lightningTarget != null) {
    if (ticksExisted % 18 == 0) {
      double xx=lightningTarget.posX + (rand.nextDouble() - 0.5D) * 1.5D, yy=lightningTarget.posY, zz=lightningTarget.posZ + (rand.nextDouble() - 0.5D) * 1.5D;
      lightningTarget.attackEntityFrom(new DamageSourceMobUnscaled(this),DamageSourceMobUnscaled.getDamage(ModCommonProxy.opMobs ? 7F : 4F,worldObj.difficultySetting));
      EntityWeatherEffect bolt=new EntityWeatherLightningBoltDemon(worldObj,xx,yy,zz,this,false);
      worldObj.weatherEffects.add(bolt);
      PacketPipeline.sendToAllAround(bolt,512D,new C05CustomWeather(bolt,(byte)0));
      if (++lightningCounter >= 6)       lightningTarget=null;
    }
  }
 else {
    if (--endermanSpawnTimer < -100) {
      endermanSpawnTimer=(byte)(125 - rand.nextInt(40));
      if (obsidianSpawnTimer < -105)       obsidianSpawnTimer+=20;
      for (      EntityPlayer player : (List<EntityPlayer>)worldObj.getEntitiesWithinAABB(EntityPlayer.class,boundingBox.expand(128D,64D,128D))) {
        int attempt, ix, iy, iz;
        for (attempt=0; attempt < 40; attempt++) {
          double ang=rand.nextDouble() * Math.PI * 2D, len=3.5D + rand.nextDouble() * 2D;
          ix=MathUtil.floor(player.posX + Math.cos(ang) * len);
          iz=MathUtil.floor(player.posZ + Math.sin(ang) * len);
          for (iy=MathUtil.floor(player.posY) - 2; iy < player.posY + 3; iy++) {
            if (worldObj.isAirBlock(ix,iy,iz) && worldObj.isAirBlock(ix,iy + 1,iz) && worldObj.isAirBlock(ix,iy + 2,iz)) {
              for (int a=0; a < (ModCommonProxy.opMobs ? 4 : 3); a++) {
                EntityMobAngryEnderman enderman=new EntityMobAngryEnderman(worldObj,ix + rand.nextDouble(),iy,iz + rand.nextDouble());
                enderman.rotationYaw=rand.nextFloat() * 360F;
                enderman.setTarget(player);
                enderman.addPotionEffect(endermanStrength);
                worldObj.spawnEntityInWorld(enderman);
                attempt=999;
              }
              EntityWeatherEffect bolt=new EntityWeatherLightningBoltDemon(worldObj,ix + 0.5D,iy,iz + 0.5D,this,false);
              worldObj.addWeatherEffect(bolt);
              PacketPipeline.sendToAllAround(bolt,512D,new C05CustomWeather(bolt,(byte)0));
              break;
            }
          }
        }
      }
    }
    if (--obsidianSpawnTimer < -120) {
      obsidianSpawnTimer=(byte)(20 + rand.nextInt(80));
      List<EntityPlayer> list=worldObj.getEntitiesWithinAABB(EntityPlayer.class,boundingBox.expand(128D,64D,128D));
      if (!list.isEmpty()) {
        EntityPlayer player=list.get(rand.nextInt(list.size()));
        for (int attempt=0, placed=0, xx, yy, zz; attempt < 25 && placed < 12 + worldObj.difficultySetting.getDifficultyId() * 2; attempt++) {
          xx=MathUtil.floor(player.posX) + rand.nextInt(9) - 4;
          yy=MathUtil.floor(player.posY) + 9 + rand.nextInt(6);
          zz=MathUtil.floor(player.posZ) + rand.nextInt(9) - 4;
          if (worldObj.isAirBlock(xx,yy,zz) && worldObj.isAirBlock(xx,yy - 1,zz)) {
            worldObj.setBlock(xx,yy,zz,BlockList.obsidian_falling,0,3);
            ++placed;
          }
          if (placed > 5 && rand.nextInt(15) <= 1)           break;
        }
      }
    }
  }
  if (worldObj.isRemote)   return;
  boolean hasBlockBelow=false;
  for (int ix=MathUtil.floor(posX), iz=MathUtil.floor(posZ), yy=MathUtil.floor(posY); yy > posY - 22; yy--) {
    if (!worldObj.isAirBlock(ix,yy,iz)) {
      hasBlockBelow=true;
      break;
    }
  }
  if (hasBlockBelow) {
    motionY*=0.9D;
    if (Math.abs(motionY) < 0.04D)     motionY=0D;
  }
 else {
    motionY=-0.3D;
    ++endermanSpawnTimer;
    ++obsidianSpawnTimer;
    rotationPitch=-90F;
    lastAttacker=(EntityPlayerMP)worldObj.getClosestPlayerToEntity(this,512D);
  }
  if (lastAttacker != null) {
    double diffX=posX - lastAttacker.posX;
    double diffY=posY - lastAttacker.posY;
    double diffZ=posZ - lastAttacker.posZ;
    double distance=Math.sqrt(diffX * diffX + diffZ * diffZ);
    rotationYaw=DragonUtil.rotateSmoothly(rotationYaw,(float)(Math.atan2(diffZ,diffX) * 180D / Math.PI) - 270F,2F);
    rotationPitch=DragonUtil.rotateSmoothly(rotationPitch,(float)(-(Math.atan2(diffY,distance) * 180D / Math.PI)),8F);
  }
 else   if (rotationPitch < 0F)   rotationPitch-=2F;
}","@Override protected void updateEntityActionState(){
  if (lastAttacker != null && (lastAttacker.isDead || !lastAttacker.playerNetServerHandler.func_147362_b().isChannelOpen()))   lastAttacker=null;
  float health=getHealth();
  if (health <= 0)   return;
  if (lightningTarget == null && --healthRegenTimer < 0 && health < getMaxHealth())   setHealth(health + 1);
  if (healthRegenTimer < 0)   healthRegenTimer=9;
  if (lightningStartCounter <= 0) {
    lightningStartCounter=40;
    lightningCounter=0;
    lightningTarget=lastAttacker == null ? worldObj.getClosestPlayerToEntity(this,512D) : lastAttacker;
  }
  if (lightningTarget != null) {
    if (ticksExisted % 18 == 0) {
      double xx=lightningTarget.posX + (rand.nextDouble() - 0.5D) * 1.5D, yy=lightningTarget.posY, zz=lightningTarget.posZ + (rand.nextDouble() - 0.5D) * 1.5D;
      lightningTarget.attackEntityFrom(new DamageSourceMobUnscaled(this),DamageSourceMobUnscaled.getDamage(ModCommonProxy.opMobs ? 7F : 4F,worldObj.difficultySetting));
      EntityWeatherEffect bolt=new EntityWeatherLightningBoltDemon(worldObj,xx,yy,zz,this,false);
      worldObj.weatherEffects.add(bolt);
      PacketPipeline.sendToAllAround(bolt,512D,new C05CustomWeather(bolt,(byte)0));
      if (++lightningCounter >= 6)       lightningTarget=null;
    }
  }
 else {
    if (--endermanSpawnTimer < -100) {
      endermanSpawnTimer=(byte)(125 - rand.nextInt(40));
      if (obsidianSpawnTimer < -105)       obsidianSpawnTimer+=20;
      for (      EntityPlayer player : (List<EntityPlayer>)worldObj.getEntitiesWithinAABB(EntityPlayer.class,boundingBox.expand(128D,64D,128D))) {
        int attempt, ix, iy, iz;
        for (attempt=0; attempt < 40; attempt++) {
          double ang=rand.nextDouble() * Math.PI * 2D, len=3.5D + rand.nextDouble() * 2D;
          ix=MathUtil.floor(player.posX + Math.cos(ang) * len);
          iz=MathUtil.floor(player.posZ + Math.sin(ang) * len);
          for (iy=MathUtil.floor(player.posY) - 2; iy < player.posY + 3; iy++) {
            if (worldObj.isAirBlock(ix,iy,iz) && worldObj.isAirBlock(ix,iy + 1,iz) && worldObj.isAirBlock(ix,iy + 2,iz)) {
              for (int a=0; a < (ModCommonProxy.opMobs ? 4 : 3); a++) {
                EntityMobAngryEnderman enderman=new EntityMobAngryEnderman(worldObj,ix + rand.nextDouble(),iy,iz + rand.nextDouble());
                enderman.rotationYaw=rand.nextFloat() * 360F;
                enderman.setTarget(player);
                enderman.addPotionEffect(endermanStrength);
                worldObj.spawnEntityInWorld(enderman);
                attempt=999;
              }
              EntityWeatherEffect bolt=new EntityWeatherLightningBoltDemon(worldObj,ix + 0.5D,iy,iz + 0.5D,this,false);
              worldObj.addWeatherEffect(bolt);
              PacketPipeline.sendToAllAround(bolt,512D,new C05CustomWeather(bolt,(byte)0));
              break;
            }
          }
        }
      }
    }
    if (--obsidianSpawnTimer < -120) {
      obsidianSpawnTimer=(byte)(20 + rand.nextInt(80));
      EntityPlayer player=CollectionUtil.<EntityPlayer>randomOrNull(worldObj.getEntitiesWithinAABB(EntityPlayer.class,boundingBox.expand(128D,64D,128D)),rand);
      if (player != null) {
        for (int attempt=0, placed=0, xx, yy, zz; attempt < 25 && placed < 12 + worldObj.difficultySetting.getDifficultyId() * 2; attempt++) {
          xx=MathUtil.floor(player.posX) + rand.nextInt(9) - 4;
          yy=MathUtil.floor(player.posY) + 9 + rand.nextInt(6);
          zz=MathUtil.floor(player.posZ) + rand.nextInt(9) - 4;
          if (worldObj.isAirBlock(xx,yy,zz) && worldObj.isAirBlock(xx,yy - 1,zz)) {
            worldObj.setBlock(xx,yy,zz,BlockList.obsidian_falling,0,3);
            ++placed;
          }
          if (placed > 5 && rand.nextInt(15) <= 1)           break;
        }
      }
    }
  }
  if (worldObj.isRemote)   return;
  boolean hasBlockBelow=false;
  for (int ix=MathUtil.floor(posX), iz=MathUtil.floor(posZ), yy=MathUtil.floor(posY); yy > posY - 22; yy--) {
    if (!worldObj.isAirBlock(ix,yy,iz)) {
      hasBlockBelow=true;
      break;
    }
  }
  if (hasBlockBelow) {
    motionY*=0.9D;
    if (Math.abs(motionY) < 0.04D)     motionY=0D;
  }
 else {
    motionY=-0.3D;
    ++endermanSpawnTimer;
    ++obsidianSpawnTimer;
    rotationPitch=-90F;
    lastAttacker=(EntityPlayerMP)worldObj.getClosestPlayerToEntity(this,512D);
  }
  if (lastAttacker != null) {
    double diffX=posX - lastAttacker.posX;
    double diffY=posY - lastAttacker.posY;
    double diffZ=posZ - lastAttacker.posZ;
    double distance=Math.sqrt(diffX * diffX + diffZ * diffZ);
    rotationYaw=DragonUtil.rotateSmoothly(rotationYaw,(float)(Math.atan2(diffZ,diffX) * 180D / Math.PI) - 270F,2F);
    rotationPitch=DragonUtil.rotateSmoothly(rotationPitch,(float)(-(Math.atan2(diffY,distance) * 180D / Math.PI)),8F);
  }
 else   if (rotationPitch < 0F)   rotationPitch-=2F;
}",0.9816700610997964
34647,"@Override protected void updateEntityActionState(){
  EntityPlayer closest=worldObj.getClosestPlayerToEntity(this,164D);
  if (closest == null)   return;
  rotationYaw=MathUtil.toDeg((float)Math.atan2(posZ - closest.posZ,posX - closest.posX)) + 90F;
  rotationPitch=MathUtil.toDeg((float)Math.atan2(posY - (closest.posY + closest.getEyeHeight()),MathUtil.distance(posX - closest.posX,posZ - closest.posZ)));
  double targetYDiff=posY - (closest.posY + 9D);
  BlockPosM tmpPos=BlockPosM.tmp(this);
  for (int a=1; a <= 7; a+=2) {
    if (!tmpPos.moveDown().moveDown().isAir(worldObj)) {
      targetYDiff=-1.5D;
      break;
    }
  }
  if (Math.abs(targetYDiff) > 1D)   motionY-=Math.abs(targetYDiff) * 0.0045D * Math.signum(targetYDiff);
  if (ticksExisted == 1)   targetAngleChangeDir=rand.nextBoolean();
 else   if (rand.nextInt(195) == 0 || (targetAngleTimer > 122 || (targetAngleTimer+=rand.nextInt(2)) > 122)) {
    targetAngleChangeDir=!targetAngleChangeDir;
    targetAngleTimer=0;
  }
  targetAngle+=(targetAngleChangeDir ? 1 : -1) * 0.02F;
  double[] vec=DragonUtil.getNormalizedVector((closest.posX + MathHelper.cos(targetAngle) * 40D) - posX + (rand.nextDouble() - 0.5D) * 4D,(closest.posZ + MathHelper.sin(targetAngle) * 40D) - posZ + (rand.nextDouble() - 0.5D) * 4D);
  motionVec.xCoord=vec[0] * 0.5D;
  motionVec.zCoord=vec[1] * 0.5D;
  motionX=motionVec.xCoord * 0.1D + motionX * 0.9D;
  motionZ=motionVec.zCoord * 0.1D + motionZ * 0.9D;
  if (currentAttack == ATTACK_NONE) {
    if (++timer > 125 - worldObj.difficultySetting.getDifficultyId() * 7 - (isAngry ? 18 : 0) - (ModCommonProxy.opMobs ? 12 : 0)) {
      boolean hasCalledGolems=false;
      if (isAngry && worldObj.difficultySetting != EnumDifficulty.PEACEFUL && rand.nextInt(5) == 0) {
        for (        EntityPlayer player : getNearbyPlayers()) {
          int targeted=0;
          List<EntityMobFireGolem> golems=worldObj.getEntitiesWithinAABB(EntityMobFireGolem.class,player.boundingBox.expand(32D,32D,32D));
          for (          EntityMobFireGolem golem : golems) {
            if (golem.getEntityToAttack() == player && ++targeted >= 2)             break;
          }
          if (targeted >= 2)           continue;
          golems=worldObj.getEntitiesWithinAABB(EntityMobFireGolem.class,player.boundingBox.expand(16D,16D,16D));
          if (golems.isEmpty())           continue;
          for (int attempt=0, called=ModCommonProxy.opMobs ? 3 : 2; attempt < 3 && !golems.isEmpty() && called > 0; attempt++) {
            EntityMobFireGolem golem=golems.remove(rand.nextInt(golems.size()));
            if (player.getDistanceToEntity(golem) <= 16D) {
              golem.setTarget(player);
              PacketPipeline.sendToAllAround(this,128D,new C22EffectLine(FXType.Line.FIRE_FIEND_GOLEM_CALL,this,golem));
              called-=rand.nextInt(2) + 1;
            }
          }
        }
        timer>>=1;
      }
      if (!hasCalledGolems) {
        currentAttack=rand.nextInt(3) != 0 ? ATTACK_FIREBALLS : ATTACK_FLAMES;
        if (currentAttack == ATTACK_FLAMES && prevAttack == ATTACK_FLAMES)         currentAttack=ATTACK_FIREBALLS;
        dataWatcher.updateObject(16,currentAttack);
        prevAttack=currentAttack;
        timer=0;
      }
    }
  }
 else   if (currentAttack == ATTACK_FIREBALLS) {
    int amt=ModCommonProxy.opMobs ? 8 : 6, speed=isAngry ? 8 : 12;
    if (++timer == 1) {
      double ang=360D / amt;
      for (int a=0; a < amt; a++) {
        controlledFireballs.add(new EntityProjectileFiendFireball(worldObj,this,posX,posY + height * 0.5F,posZ,-a * ang,speed * (a + 2)));
        worldObj.spawnEntityInWorld(controlledFireballs.get(a));
      }
    }
 else     if (timer >= (amt + 2) * speed) {
      dataWatcher.updateObject(16,currentAttack=ATTACK_NONE);
      timer=0;
      controlledFireballs.clear();
    }
 else     if (timer >= 2) {
      for (      EntityProjectileFiendFireball fireball : controlledFireballs) {
        if (fireball.timer > 1)         fireball.updateCenter(this);
 else         if (fireball.timer == 1) {
          List<EntityPlayer> players=getNearbyPlayers();
          fireball.shootAt(players.isEmpty() ? null : players.get(rand.nextInt(players.size())));
        }
      }
    }
  }
 else   if (currentAttack == ATTACK_FLAMES) {
    if (++timer > (isAngry ? 18 : 26)) {
      int fireLength=3 + (worldObj.difficultySetting.getDifficultyId() >> 1);
      for (      EntityPlayer player : getNearbyPlayers()) {
        player.setFire(fireLength);
        player.attackEntityFrom(new DamageSourceMobUnscaled(this),DamageSourceMobUnscaled.getDamage(ModCommonProxy.opMobs ? 12F : 8F,worldObj.difficultySetting));
        PacketPipeline.sendToAllAround(player,64D,new C20Effect(FXType.Basic.FIRE_FIEND_FLAME_ATTACK,player));
      }
      timer=0;
      dataWatcher.updateObject(16,currentAttack=ATTACK_NONE);
    }
  }
  for (  EntityLivingBase e : (List<EntityLivingBase>)worldObj.getEntitiesWithinAABB(EntityLivingBase.class,boundingBox.expand(0.8D,1.65D,0.8D))) {
    if (e == this || e.isImmuneToFire())     continue;
    e.setFire(2 + rand.nextInt(4));
    e.hurtResistantTime=0;
    e.attackEntityFrom(new DamageSourceMobUnscaled(this),ModCommonProxy.opMobs ? 9F : 5F);
    e.hurtResistantTime=7;
  }
  moveForward*=0.6F;
  wingAnimationStep=1F;
  if (Math.abs(moveForward) > 0.01D)   wingAnimationStep+=1F;
  if (motionY > 0.001D)   wingAnimationStep+=1.5F;
 else   if (motionY < 0.001D)   wingAnimationStep-=0.75F;
  wingAnimation+=wingAnimationStep * 0.01F;
}","@Override protected void updateEntityActionState(){
  EntityPlayer closest=worldObj.getClosestPlayerToEntity(this,164D);
  if (closest == null)   return;
  rotationYaw=MathUtil.toDeg((float)Math.atan2(posZ - closest.posZ,posX - closest.posX)) + 90F;
  rotationPitch=MathUtil.toDeg((float)Math.atan2(posY - (closest.posY + closest.getEyeHeight()),MathUtil.distance(posX - closest.posX,posZ - closest.posZ)));
  double targetYDiff=posY - (closest.posY + 9D);
  BlockPosM tmpPos=BlockPosM.tmp(this);
  for (int a=1; a <= 7; a+=2) {
    if (!tmpPos.moveDown().moveDown().isAir(worldObj)) {
      targetYDiff=-1.5D;
      break;
    }
  }
  if (Math.abs(targetYDiff) > 1D)   motionY-=Math.abs(targetYDiff) * 0.0045D * Math.signum(targetYDiff);
  if (ticksExisted == 1)   targetAngleChangeDir=rand.nextBoolean();
 else   if (rand.nextInt(195) == 0 || (targetAngleTimer > 122 || (targetAngleTimer+=rand.nextInt(2)) > 122)) {
    targetAngleChangeDir=!targetAngleChangeDir;
    targetAngleTimer=0;
  }
  targetAngle+=(targetAngleChangeDir ? 1 : -1) * 0.02F;
  double[] vec=DragonUtil.getNormalizedVector((closest.posX + MathHelper.cos(targetAngle) * 40D) - posX + (rand.nextDouble() - 0.5D) * 4D,(closest.posZ + MathHelper.sin(targetAngle) * 40D) - posZ + (rand.nextDouble() - 0.5D) * 4D);
  motionVec.xCoord=vec[0] * 0.5D;
  motionVec.zCoord=vec[1] * 0.5D;
  motionX=motionVec.xCoord * 0.1D + motionX * 0.9D;
  motionZ=motionVec.zCoord * 0.1D + motionZ * 0.9D;
  if (currentAttack == ATTACK_NONE) {
    if (++timer > 125 - worldObj.difficultySetting.getDifficultyId() * 7 - (isAngry ? 18 : 0) - (ModCommonProxy.opMobs ? 12 : 0)) {
      boolean hasCalledGolems=false;
      if (isAngry && worldObj.difficultySetting != EnumDifficulty.PEACEFUL && rand.nextInt(5) == 0) {
        for (        EntityPlayer player : getNearbyPlayers()) {
          int targeted=0;
          List<EntityMobFireGolem> golems=worldObj.getEntitiesWithinAABB(EntityMobFireGolem.class,player.boundingBox.expand(32D,32D,32D));
          for (          EntityMobFireGolem golem : golems) {
            if (golem.getEntityToAttack() == player && ++targeted >= 2)             break;
          }
          if (targeted >= 2)           continue;
          golems=worldObj.getEntitiesWithinAABB(EntityMobFireGolem.class,player.boundingBox.expand(16D,16D,16D));
          if (golems.isEmpty())           continue;
          for (int attempt=0, called=ModCommonProxy.opMobs ? 3 : 2; attempt < 3 && !golems.isEmpty() && called > 0; attempt++) {
            EntityMobFireGolem golem=golems.remove(rand.nextInt(golems.size()));
            if (player.getDistanceToEntity(golem) <= 16D) {
              golem.setTarget(player);
              PacketPipeline.sendToAllAround(this,128D,new C22EffectLine(FXType.Line.FIRE_FIEND_GOLEM_CALL,this,golem));
              called-=rand.nextInt(2) + 1;
            }
          }
        }
        timer>>=1;
      }
      if (!hasCalledGolems) {
        currentAttack=rand.nextInt(3) != 0 ? ATTACK_FIREBALLS : ATTACK_FLAMES;
        if (currentAttack == ATTACK_FLAMES && prevAttack == ATTACK_FLAMES)         currentAttack=ATTACK_FIREBALLS;
        dataWatcher.updateObject(16,currentAttack);
        prevAttack=currentAttack;
        timer=0;
      }
    }
  }
 else   if (currentAttack == ATTACK_FIREBALLS) {
    int amt=ModCommonProxy.opMobs ? 8 : 6, speed=isAngry ? 8 : 12;
    if (++timer == 1) {
      double ang=360D / amt;
      for (int a=0; a < amt; a++) {
        controlledFireballs.add(new EntityProjectileFiendFireball(worldObj,this,posX,posY + height * 0.5F,posZ,-a * ang,speed * (a + 2)));
        worldObj.spawnEntityInWorld(controlledFireballs.get(a));
      }
    }
 else     if (timer >= (amt + 2) * speed) {
      dataWatcher.updateObject(16,currentAttack=ATTACK_NONE);
      timer=0;
      controlledFireballs.clear();
    }
 else     if (timer >= 2) {
      for (      EntityProjectileFiendFireball fireball : controlledFireballs) {
        if (fireball.timer > 1)         fireball.updateCenter(this);
 else         if (fireball.timer == 1)         fireball.shootAt(CollectionUtil.randomOrNull(getNearbyPlayers(),rand));
      }
    }
  }
 else   if (currentAttack == ATTACK_FLAMES) {
    if (++timer > (isAngry ? 18 : 26)) {
      int fireLength=3 + (worldObj.difficultySetting.getDifficultyId() >> 1);
      for (      EntityPlayer player : getNearbyPlayers()) {
        player.setFire(fireLength);
        player.attackEntityFrom(new DamageSourceMobUnscaled(this),DamageSourceMobUnscaled.getDamage(ModCommonProxy.opMobs ? 12F : 8F,worldObj.difficultySetting));
        PacketPipeline.sendToAllAround(player,64D,new C20Effect(FXType.Basic.FIRE_FIEND_FLAME_ATTACK,player));
      }
      timer=0;
      dataWatcher.updateObject(16,currentAttack=ATTACK_NONE);
    }
  }
  for (  EntityLivingBase e : (List<EntityLivingBase>)worldObj.getEntitiesWithinAABB(EntityLivingBase.class,boundingBox.expand(0.8D,1.65D,0.8D))) {
    if (e == this || e.isImmuneToFire())     continue;
    e.setFire(2 + rand.nextInt(4));
    e.hurtResistantTime=0;
    e.attackEntityFrom(new DamageSourceMobUnscaled(this),ModCommonProxy.opMobs ? 9F : 5F);
    e.hurtResistantTime=7;
  }
  moveForward*=0.6F;
  wingAnimationStep=1F;
  if (Math.abs(moveForward) > 0.01D)   wingAnimationStep+=1F;
  if (motionY > 0.001D)   wingAnimationStep+=1.5F;
 else   if (motionY < 0.001D)   wingAnimationStep-=0.75F;
  wingAnimation+=wingAnimationStep * 0.01F;
}",0.9789137380191694
34648,"@Override public void onUpdate(){
  super.onUpdate();
  if (!worldObj.isRemote) {
    ItemStack is=getEntityItem();
    if ((rockLife-=rand.nextInt(isInWater() ? 5 : 3)) < 0) {
      if (--is.stackSize == 0)       setDead();
 else {
        rockLife=700;
        setEntityItemStack(is);
      }
    }
    if (rand.nextInt(64 - Math.min(32,is.stackSize / 2)) == 0) {
      for (int attempt=0; attempt < 4 + (is.stackSize / 8); attempt++) {
        Pos pos=Pos.at(this);
        pos=pos.offset(MathUtil.floor((rand.nextDouble() - 0.5D) * 4D),MathUtil.floor((rand.nextDouble() - 0.5D) * 4D),MathUtil.floor((rand.nextDouble() - 0.5D) * 4D));
        Block block=pos.getBlock(worldObj);
        Block target=blockTransformations.get(block);
        if (target != null)         pos.setBlock(worldObj,target);
 else         if (block.getMaterial() == Material.air) {
          if (rand.nextInt(5) == 0)           pos.setBlock(worldObj,Blocks.fire);
 else           continue;
        }
 else         if (block == Blocks.tnt) {
          pos.setAir(worldObj);
          worldObj.createExplosion(null,pos.getX(),pos.getY(),pos.getZ(),3.9F,true);
        }
 else         if (block == Blocks.tallgrass && pos.getMetadata(worldObj) != 0) {
          pos.setMetadata(worldObj,0,2);
        }
 else         continue;
        if (block.getMaterial() != Material.air) {
          PacketPipeline.sendToAllAround(this,64D,new C20Effect(FXType.Basic.IGNEOUS_ROCK_MELT,pos));
        }
        if (rand.nextInt(3) == 0)         break;
      }
    }
    if (rand.nextInt(80 - Math.min(32,is.stackSize / 3)) == 0) {
      List<EntityLivingBase> nearbyEntities=worldObj.getEntitiesWithinAABB(EntityLivingBase.class,boundingBox.expand(3D,3D,3D));
      if (!nearbyEntities.isEmpty())       nearbyEntities.get(rand.nextInt(nearbyEntities.size())).setFire(1 + rand.nextInt(4) + getEntityItem().stackSize / 10);
    }
  }
  int ix=MathUtil.floor(posX), iy=MathUtil.floor(posY), iz=MathUtil.floor(posZ);
  if (rand.nextInt(6) == 0 && worldObj.getBlock(ix,iy,iz).getMaterial() == Material.water) {
    HardcoreEnderExpansion.fx.global(""String_Node_Str"",posX + 0.2F * (rand.nextFloat() - 0.5F),posY + 0.2F * (rand.nextFloat() - 0.5F),posZ + 0.2F * (rand.nextFloat() - 0.5F),0D,0.6D,0D);
  }
  if (worldObj.getBlock(ix,iy - 1,iz) == BlockList.dungeon_puzzle) {
    int meta=worldObj.getBlockMetadata(ix,iy - 1,iz);
    if (BlockDungeonPuzzle.canTrigger(meta)) {
      for (int a=0; a < 4; a++)       HardcoreEnderExpansion.fx.igneousRockBreak(this);
      if (!worldObj.isRemote && onGround) {
        worldObj.spawnEntityInWorld(new EntityTechnicalPuzzleChain(worldObj,ix,iy - 1,iz,thrownDirection));
        setDead();
      }
    }
  }
  if (rand.nextInt(30) == 0) {
    FXHelper.create(""String_Node_Str"").pos(this).fluctuatePos(0.1D).spawn(rand,2);
  }
}","@Override public void onUpdate(){
  super.onUpdate();
  if (!worldObj.isRemote) {
    ItemStack is=getEntityItem();
    if ((rockLife-=rand.nextInt(isInWater() ? 5 : 3)) < 0) {
      if (--is.stackSize == 0)       setDead();
 else {
        rockLife=700;
        setEntityItemStack(is);
      }
    }
    if (rand.nextInt(64 - Math.min(32,is.stackSize / 2)) == 0) {
      for (int attempt=0; attempt < 4 + (is.stackSize / 8); attempt++) {
        Pos pos=Pos.at(this);
        pos=pos.offset(MathUtil.floor((rand.nextDouble() - 0.5D) * 4D),MathUtil.floor((rand.nextDouble() - 0.5D) * 4D),MathUtil.floor((rand.nextDouble() - 0.5D) * 4D));
        Block block=pos.getBlock(worldObj);
        Block target=blockTransformations.get(block);
        if (target != null)         pos.setBlock(worldObj,target);
 else         if (block.getMaterial() == Material.air) {
          if (rand.nextInt(5) == 0)           pos.setBlock(worldObj,Blocks.fire);
 else           continue;
        }
 else         if (block == Blocks.tnt) {
          pos.setAir(worldObj);
          worldObj.createExplosion(null,pos.getX(),pos.getY(),pos.getZ(),3.9F,true);
        }
 else         if (block == Blocks.tallgrass && pos.getMetadata(worldObj) != 0) {
          pos.setMetadata(worldObj,0,2);
        }
 else         continue;
        if (block.getMaterial() != Material.air) {
          PacketPipeline.sendToAllAround(this,64D,new C20Effect(FXType.Basic.IGNEOUS_ROCK_MELT,pos));
        }
        if (rand.nextInt(3) == 0)         break;
      }
    }
    if (rand.nextInt(80 - Math.min(32,is.stackSize / 3)) == 0) {
      CollectionUtil.<EntityLivingBase>random(worldObj.getEntitiesWithinAABB(EntityLivingBase.class,boundingBox.expand(3D,3D,3D)),rand).ifPresent(entity -> {
        entity.setFire(1 + rand.nextInt(4) + getEntityItem().stackSize / 10);
      }
);
    }
  }
  Pos pos=Pos.at(this);
  Pos below=pos.getDown();
  if (rand.nextInt(6) == 0 && pos.getMaterial(worldObj) == Material.water) {
    HardcoreEnderExpansion.fx.global(""String_Node_Str"",posX + 0.2F * (rand.nextFloat() - 0.5F),posY + 0.2F * (rand.nextFloat() - 0.5F),posZ + 0.2F * (rand.nextFloat() - 0.5F),0D,0.6D,0D);
  }
  if (below.getBlock(worldObj) == BlockList.dungeon_puzzle && BlockDungeonPuzzle.canTrigger(below.getMetadata(worldObj))) {
    for (int a=0; a < 4; a++)     HardcoreEnderExpansion.fx.igneousRockBreak(this);
    if (!worldObj.isRemote && onGround) {
      worldObj.spawnEntityInWorld(new EntityTechnicalPuzzleChain(worldObj,below,Facing4.list[thrownDirection]));
      setDead();
    }
  }
  if (rand.nextInt(30) == 0) {
    FXHelper.create(""String_Node_Str"").pos(this).fluctuatePos(0.1D).spawn(rand,2);
  }
}",0.8995458673932788
34649,"@Override public void run(String... args){
  if (args.length < 1)   return;
  if (args[0].equals(""String_Node_Str"")) {
    StructureDungeon<DungeonGeneratorSpreading> stronghold=new StructureDungeon<>(128,32,128,DungeonGeneratorSpreading::new);
    stronghold.setGeneratorSetupFunc(generator -> {
      generator.setPiecesBetweenRooms(3,10);
    }
);
    stronghold.setPieceAmount(220,250);
    stronghold.setStartingPiece(new StrongholdRoomEndPortal());
    stronghold.tryGenerateInWorld(world,world.rand,MathUtil.floor(player.posX) - 8,MathUtil.floor(player.posY) - 30,MathUtil.floor(player.posZ) - 8,1);
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    CustomArrayList<StrongholdPiece> pieces=new CustomArrayList<>();
    pieces.add(new StrongholdRoomEndPortal());
    int fullWidth=pieces.stream().mapToInt(piece -> piece.size.sizeX + 2).sum();
    StructureWorld structureWorld=new StructureWorld(fullWidth / 2,48,32);
    PosMutable pos=new PosMutable(-fullWidth / 2,0,0);
    pieces.stream().map(piece -> new StructureDungeonPieceInst(piece,pos.move(piece.size.sizeX + 2,0,0).offset(-piece.size.sizeX,0,-piece.size.sizeZ / 2))).forEach(inst -> {
      Pos piecePos=inst.boundingBox.getTopLeft();
      inst.useAllConnections();
      inst.clearArea(structureWorld,world.rand);
      inst.generatePiece(structureWorld,world.rand);
      for (      Connection connection : inst.piece.getConnections()) {
        Block block=connection.facing == Facing4.NORTH_NEGZ ? Blocks.netherrack : connection.facing == Facing4.SOUTH_POSZ ? Blocks.sandstone : connection.facing == Facing4.EAST_POSX ? Blocks.emerald_block : Blocks.wool;
        structureWorld.setBlock(piecePos.getX() + connection.offsetX,piecePos.getY() + connection.offsetY,piecePos.getZ() + connection.offsetZ,block);
      }
    }
);
    structureWorld.generateInWorld(world,world.rand,MathUtil.floor(player.posX) - 8,MathUtil.floor(player.posY) + 3,MathUtil.floor(player.posZ) - 8);
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    MapGenStronghold stronghold=new MapGenStronghold();
    int x=MathUtil.floor(player.posX) >> 4, z=MathUtil.floor(player.posZ) >> 4;
    StructureBoundingBox box=new StructureBoundingBox(-99999,0,-99999,99999,256,99999);
    try {
      Field f=MapGenStructure.class.getDeclaredField(""String_Node_Str"");
      Method m=MapGenStronghold.class.getDeclaredMethod(""String_Node_Str"",int.class,int.class);
      f.setAccessible(true);
      f.set(stronghold,new MapGenStructureData(""String_Node_Str""));
      m.setAccessible(true);
      StructureStart start=(StructureStart)m.invoke(stronghold,x,z);
      f=MapGenStructure.class.getDeclaredField(""String_Node_Str"");
      f.setAccessible(true);
      ((Map)f.get(stronghold)).put(Long.valueOf(ChunkCoordIntPair.chunkXZ2Int(x,z)),start);
      start.generateStructure(world,world.rand,box);
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
}","@Override public void run(String... args){
  if (args.length < 1)   return;
  if (args[0].equals(""String_Node_Str"")) {
    StructureDungeon<DungeonGeneratorSpreading> stronghold=new StructureDungeon<>(128,64,128,DungeonGeneratorSpreading::new);
    stronghold.setGeneratorSetupFunc(generator -> {
      generator.setPiecesBetweenRooms(2,8);
    }
);
    stronghold.setPieceAmount(20,20);
    stronghold.setStartingPiece(new StrongholdRoomEndPortal());
    stronghold.addPieces(12,new Range(0,8),StrongholdCorridorStraight.generateCorridors(3,5,7));
    stronghold.addPieces(6,new Range(0,8),StrongholdCorridorIntersection.generateCorners());
    stronghold.addPieces(8,new Range(0,5),StrongholdCorridorIntersection.generateThreeWay());
    stronghold.addPieces(3,new Range(0,5),StrongholdCorridorIntersection.generateFourWay());
    stronghold.addPieces(2,new Range(0,1),StrongholdCorridorChest.generateCorridors());
    stronghold.addPieces(1,new Range(0,1),StrongholdCorridorDoubleChest.generateCorridors());
    stronghold.addPieces(5,new Range(0,1),StrongholdStairsStraight.generateStairs());
    stronghold.addPieces(4,new Range(0,1),StrongholdStairsVertical.generateStairs(1));
    stronghold.addPieces(1,new Range(0,1),StrongholdStairsVertical.generateStairs(2));
    stronghold.addPieces(10,new Range(0,1),StrongholdDoorSmall.generateDoors());
    stronghold.addPieces(10,new Range(0,1),StrongholdDoorWooden.generateDoors());
    stronghold.addPieces(10,new Range(0,1),StrongholdDoorGrates.generateDoors());
    stronghold.addPieces(10,new Range(0,1),StrongholdDoorTorches.generateDoors());
    stronghold.addPieces(2,new Range(1,1),StrongholdRoomRelicDungeon.generateRelicRooms());
    stronghold.addPieces(2,new Range(1,1),StrongholdRoomRelicFountains.generateRelicRooms());
    stronghold.addPiece(3,new Range(0,1),new StrongholdRoomSilverfishTrap());
    stronghold.addPiece(3,new Range(0,1),new StrongholdRoomLargeIntersectionTrap());
    stronghold.addPieces(3,new Range(0,2),StrongholdRoomPrisonTrap.generatePrisons());
    stronghold.addPiece(5,new Range(0,6),new StrongholdRoomFountain());
    stronghold.addPiece(4,new Range(0,8),new StrongholdRoomLargeIntersection());
    stronghold.addPiece(5,new Range(0,5),new StrongholdRoomSmallIntersection());
    stronghold.addPiece(5,new Range(0,4),new StrongholdRoomLitPole());
    stronghold.addPiece(5,new Range(0,2),new StrongholdRoomLitTotem());
    stronghold.addPieces(4,new Range(0,7),StrongholdRoomLitCorners.generateColors());
    stronghold.tryGenerateInWorld(world,world.rand,MathUtil.floor(player.posX) - 8,MathUtil.floor(player.posY) - 30,MathUtil.floor(player.posZ) - 8,10);
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    CustomArrayList<StrongholdPiece> pieces=new CustomArrayList<>();
    pieces.add(new StrongholdRoomEndPortal());
    pieces.addAll(StrongholdStairsStraight.generateStairs());
    int fullWidth=pieces.stream().mapToInt(piece -> piece.size.sizeX + 2).sum();
    StructureWorld structureWorld=new StructureWorld(fullWidth / 2,48,32);
    PosMutable pos=new PosMutable(-fullWidth / 2,0,0);
    pieces.stream().map(piece -> new StructureDungeonPieceInst(piece,pos.move(piece.size.sizeX + 2,0,0).offset(-piece.size.sizeX,0,-piece.size.sizeZ / 2))).forEach(inst -> {
      Pos piecePos=inst.boundingBox.getTopLeft();
      inst.useAllConnections();
      inst.clearArea(structureWorld,world.rand);
      inst.generatePiece(structureWorld,world.rand);
      for (      Connection connection : inst.piece.getConnections()) {
        Block block=connection.facing == Facing4.NORTH_NEGZ ? Blocks.netherrack : connection.facing == Facing4.SOUTH_POSZ ? Blocks.sandstone : connection.facing == Facing4.EAST_POSX ? Blocks.emerald_block : Blocks.wool;
        structureWorld.setBlock(piecePos.getX() + connection.offsetX,piecePos.getY() + connection.offsetY,piecePos.getZ() + connection.offsetZ,block);
      }
    }
);
    structureWorld.generateInWorld(world,world.rand,MathUtil.floor(player.posX) - 8,MathUtil.floor(player.posY) + 3,MathUtil.floor(player.posZ) - 8);
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    MapGenStronghold stronghold=new MapGenStronghold();
    int x=MathUtil.floor(player.posX) >> 4, z=MathUtil.floor(player.posZ) >> 4;
    StructureBoundingBox box=new StructureBoundingBox(-99999,0,-99999,99999,256,99999);
    try {
      Field f=MapGenStructure.class.getDeclaredField(""String_Node_Str"");
      Method m=MapGenStronghold.class.getDeclaredMethod(""String_Node_Str"",int.class,int.class);
      f.setAccessible(true);
      f.set(stronghold,new MapGenStructureData(""String_Node_Str""));
      m.setAccessible(true);
      StructureStart start=(StructureStart)m.invoke(stronghold,x,z);
      f=MapGenStructure.class.getDeclaredField(""String_Node_Str"");
      f.setAccessible(true);
      ((Map)f.get(stronghold)).put(Long.valueOf(ChunkCoordIntPair.chunkXZ2Int(x,z)),start);
      start.generateStructure(world,world.rand,box);
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
}",0.7131704860236716
34650,"@Override public void generate(Random rand,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  if (world.provider.dimensionId != 0)   return;
  Optional<ChunkCoordIntPair> chunk=findSpawnChunk(chunkX,chunkZ,world);
  if (!chunk.isPresent())   return;
  if (chunk.get().chunkXPos == chunkX && chunk.get().chunkZPos == chunkZ) {
  }
}","@Override public void generate(Random rand,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  if (world.provider.dimensionId != 0)   return;
  Optional<ChunkCoordIntPair> chunk=findSpawnChunk(chunkX,chunkZ,world);
  if (!chunk.isPresent())   return;
  if (chunk.get().chunkXPos == chunkX && chunk.get().chunkZPos == chunkZ) {
    HardcoreEnderExpansion.notifications.report(""String_Node_Str"");
    stronghold.tryGenerateInWorld(world,rand,chunkX * 16 + 8,4 + rand.nextInt(11),chunkZ * 16 + 8,10);
  }
}",0.8151351351351351
34651,"public RandomList(List<T> collection,Random rand){
  this.collection=collection;
  this.rand=rand;
}","public RandomList(List<T> collection,Random rand){
  this.collection=new ArrayList<>(collection);
  this.rand=rand;
}",0.9216589861751152
34652,"public void add(T item,int weight){
  items.put(item,weight);
}","public void add(T item,int weight){
  items.put(item,weight);
  dirty=true;
}",0.9
34653,"@Override protected boolean onWorkFinished(){
  ItemStack[] itemsCopy=new ItemStack[9];
  for (int slot=2; slot < items.length; slot++)   itemsCopy[slot - 2]=items[slot] == null ? null : items[slot].copy();
  for (  ItemStack ingredient : chosenIngredients) {
    boolean canAdd=false;
    for (int slot=0; slot < itemsCopy.length; slot++) {
      if (itemsCopy[slot] == null)       itemsCopy[slot]=ingredient.copy();
 else       if (DragonUtil.canAddOneItemTo(itemsCopy[slot],ingredient))       ++itemsCopy[slot].stackSize;
 else       continue;
      canAdd=true;
      break;
    }
    if (!canAdd)     return false;
  }
  for (  ItemStack ingredient : chosenIngredients) {
    for (int slot=2; slot < items.length; slot++) {
      if (items[slot] == null)       items[slot]=ingredient.copy();
 else       if (DragonUtil.canAddOneItemTo(items[slot],ingredient))       ++items[slot].stackSize;
 else       continue;
      break;
    }
  }
  items[0]=null;
  if ((items[1].stackSize-=requiredStardust) <= 0)   items[1]=null;
  chosenIngredients.clear();
  return true;
}","@Override protected boolean onWorkFinished(){
  ItemStack[] itemsCopy=new ItemStack[9];
  for (int slot=2; slot < items.length; slot++)   itemsCopy[slot - 2]=items[slot] == null ? null : items[slot].copy();
  for (  ItemStack ingredient : chosenIngredients) {
    boolean canAdd=false;
    for (int slot=0; slot < itemsCopy.length; slot++) {
      if (itemsCopy[slot] == null)       itemsCopy[slot]=ingredient.copy();
 else       if (ItemUtil.canAddOneItemTo(itemsCopy[slot],ingredient))       ++itemsCopy[slot].stackSize;
 else       continue;
      canAdd=true;
      break;
    }
    if (!canAdd)     return false;
  }
  for (  ItemStack ingredient : chosenIngredients) {
    for (int slot=2; slot < items.length; slot++) {
      if (items[slot] == null)       items[slot]=ingredient.copy();
 else       if (ItemUtil.canAddOneItemTo(items[slot],ingredient))       ++items[slot].stackSize;
 else       continue;
      break;
    }
  }
  items[0]=null;
  if ((items[1].stackSize-=requiredStardust) <= 0)   items[1]=null;
  chosenIngredients.clear();
  return true;
}",0.990645463049579
34654,"public static List<Enum> getEnhancements(ItemStack is){
  List<Enum> enhancements=new ArrayList<>();
  if (!is.hasTagCompound() || !canEnhanceItem(is.getItem()))   return enhancements;
  EnhancementData enhancementData=itemMap.get(is.getItem());
  NBTUtil.readStringList(is.getTagCompound(),""String_Node_Str"").map(name -> EnumUtils.getEnum(enhancementData.clsEnum,name)).filter(ele -> ele != null).forEach(enhancements::add);
  return enhancements;
}","public static List<Enum> getEnhancements(ItemStack is){
  List<Enum> enhancements=new ArrayList<>();
  if (!is.hasTagCompound() || !canEnhanceItem(is.getItem()))   return enhancements;
  NBTUtil.readStringList(is.getTagCompound(),""String_Node_Str"").forEach(name -> {
    Enum ele=EnumUtils.getEnum(itemMap.get(is.getItem()).clsEnum,name);
    if (ele != null)     enhancements.add(ele);
  }
);
  return enhancements;
}",0.7004608294930875
34655,"@Override protected void onImpact(MovingObjectPosition mop){
  if (mop.entityHit instanceof EntityMiniBossFireFiend || mop.entityHit instanceof EntityProjectileFiendFireball)   return;
  if (mop.entityHit != null)   mop.entityHit.attackEntityFrom(DamageSource.causeFireballDamage(this,shootingEntity),ModCommonProxy.opMobs ? 9F : 4F);
  if (!worldObj.isRemote) {
    Explosion explosion=new FieryExplosion(worldObj,shootingEntity,worldObj.isRemote ? actualPosX : posX,posY,worldObj.isRemote ? actualPosZ : posZ,ModCommonProxy.opMobs ? 3.5F : 2.7F);
    explosion.doExplosionA();
    explosion.doExplosionB(true);
    PacketPipeline.sendToAllAround(this,128D,new C12FiendFireballExplosion(this));
  }
  setDead();
}","@Override protected void onImpact(MovingObjectPosition mop){
  if (mop.entityHit instanceof EntityMiniBossFireFiend || mop.entityHit instanceof EntityProjectileFiendFireball)   return;
  if (mop.entityHit != null)   mop.entityHit.attackEntityFrom(DamageSource.causeFireballDamage(this,shootingEntity),ModCommonProxy.opMobs ? 9F : 4F);
  if (!worldObj.isRemote) {
    Explosion explosion=new FieryExplosion(worldObj,shootingEntity,posX,posY,posZ,ModCommonProxy.opMobs ? 3.5F : 2.7F);
    explosion.doExplosionA();
    explosion.doExplosionB(true);
    PacketPipeline.sendToAllAround(this,128D,new C12FiendFireballExplosion(this));
  }
  setDead();
}",0.9500734214390602
34656,"public ModelEnderEye(){
  textureWidth=128;
  textureHeight=64;
  head=new ModelRenderer(this,0,0);
  head.addBox(-9F,-8F,-9F,18,18,18);
  head.setRotationPoint(0F,0F,0F);
  head.setTextureSize(128,64);
  head.mirror=true;
  setRotation(head,0F,0F,0F);
  rightArm=new ModelRenderer(this,116,0);
  rightArm.addBox(-12F,-27F,-3F,3,30,3);
  rightArm.setRotationPoint(0F,0F,0F);
  rightArm.setTextureSize(128,64);
  rightArm.mirror=true;
  setRotation(rightArm,1.570796F,0F,0F);
  leftArm=new ModelRenderer(this,116,0);
  leftArm.addBox(9F,-27F,-3F,3,30,3);
  leftArm.setRotationPoint(0F,0F,0F);
  leftArm.setTextureSize(128,64);
  leftArm.mirror=true;
  setRotation(leftArm,1.570796F,0F,0F);
  leftArm.mirror=false;
}","public ModelEnderEye(){
  textureWidth=128;
  textureHeight=64;
  head=new ModelRenderer(this,0,0);
  head.addBox(-9F,-8F,-9F,18,18,18);
  head.setRotationPoint(0F,0F,0F);
  head.setTextureSize(128,64);
  head.mirror=true;
  setRotation(head,0F,0F,0F);
  rightArm=new ModelRenderer(this,116,0);
  rightArm.addBox(-12F,-27F,-3F,3,30,3);
  rightArm.setRotationPoint(0F,0F,0F);
  rightArm.setTextureSize(128,64);
  rightArm.mirror=true;
  setRotation(rightArm,MathUtil.PI * 0.5F,0F,0F);
  leftArm=new ModelRenderer(this,116,0);
  leftArm.addBox(9F,-27F,-3F,3,30,3);
  leftArm.setRotationPoint(0F,0F,0F);
  leftArm.setTextureSize(128,64);
  leftArm.mirror=true;
  setRotation(leftArm,MathUtil.PI * 0.5F,0F,0F);
  leftArm.mirror=false;
}",0.970954356846473
34657,"@Override public void setRotationAngles(float limbSwing,float limbSwingAngle,float entityTickTime,float rotationYaw,float rotationPitch,float unitPixel,Entity entity){
  super.setRotationAngles(limbSwing,limbSwingAngle,entityTickTime,rotationYaw,rotationPitch,unitPixel,entity);
  float yawRad=MathUtil.toRad(rotationYaw), pitchRad=-MathUtil.toRad(rotationPitch);
  EntityMiniBossEnderEye eye=(EntityMiniBossEnderEye)entity;
  byte anim=eye.getAttackAnimationTime();
  if (anim == 0 && animationAngle > 0F)   animationAngle=Math.max(0F,animationAngle - 0.10472F);
 else   if (anim > 0)   animationAngle=Math.min(1.570796F,animationAngle + 0.071399F);
  if (eye.isAsleep())   wakeupAngle=Math.min(-pitchRad + 1.570796F,wakeupAngle + 0.098175F);
 else   if (wakeupAngle != 0F)   wakeupAngle=Math.max(0F,wakeupAngle - 0.098175F);
  head.rotateAngleY=yawRad;
  head.rotateAngleX=pitchRad;
  leftArm.rotateAngleY=yawRad;
  leftArm.rotateAngleX=pitchRad + 1.570796F - animationAngle + wakeupAngle;
  rightArm.rotateAngleY=yawRad;
  rightArm.rotateAngleX=pitchRad + 1.570796F - animationAngle + wakeupAngle;
}","@Override public void setRotationAngles(float limbSwing,float limbSwingAngle,float entityTickTime,float rotationYaw,float rotationPitch,float unitPixel,Entity entity){
  super.setRotationAngles(limbSwing,limbSwingAngle,entityTickTime,rotationYaw,rotationPitch,unitPixel,entity);
  float yawRad=MathUtil.toRad(rotationYaw), pitchRad=-MathUtil.toRad(rotationPitch);
  EntityMiniBossEnderEye eye=(EntityMiniBossEnderEye)entity;
  byte anim=eye.getAttackAnimationTime();
  if (anim == 0 && animationAngle > 0F)   animationAngle=Math.max(0F,animationAngle - 0.10472F);
 else   if (anim > 0)   animationAngle=Math.min(MathUtil.PI * 0.5F,animationAngle + 0.071399F);
  if (eye.isAsleep())   wakeupAngle=Math.min(-pitchRad + 1.570796F,wakeupAngle + 0.098175F);
 else   if (wakeupAngle != 0F)   wakeupAngle=Math.max(0F,wakeupAngle - 0.098175F);
  head.rotateAngleY=yawRad;
  head.rotateAngleX=pitchRad;
  leftArm.rotateAngleY=yawRad;
  leftArm.rotateAngleX=pitchRad + 1.570796F - animationAngle + wakeupAngle;
  rightArm.rotateAngleY=yawRad;
  rightArm.rotateAngleX=pitchRad + 1.570796F - animationAngle + wakeupAngle;
}",0.990510619069137
34658,"public ModelLouse(){
  textureWidth=64;
  textureHeight=128;
  headMain=new ModelRenderer(this,15,0);
  headMain.addBox(-2F,-1.5F,-4F,4,4,4);
  headMain.setRotationPoint(0F,19F,-10F);
  setRotation(headMain,0.0872665F,0F,0F);
  headFront=new ModelRenderer(this,39,0);
  headFront.addBox(-1.5F,-1F,-6F,3,3,2);
  setRotation(headFront,0F,0F,0F);
  eyes=new ModelRenderer(this,0,0);
  eyes.addBox(-2.5F,-1F,-3F,5,2,2);
  setRotation(eyes,0F,0F,0F);
  antR=new ModelRenderer(this,46,28);
  antR.addBox(-10F,0.5F,-2.5F,7,1,1);
  setRotation(antR,-0.0872665F,-0.8235988F,0F);
  antL=new ModelRenderer(this,0,28);
  antL.addBox(3F,0.5F,-2.5F,7,1,1);
  setRotation(antL,-0.0872665F,0.8235988F,0F);
  mandible=new ModelRenderer(this,52,0);
  mandible.addBox(-1F,0F,-7F,2,2,1);
  setRotation(mandible,0F,0F,0F);
  thx=new ModelRenderer(this,11,9);
  thx.addBox(-4F,-3F,-1F,8,6,12);
  thx.setRotationPoint(0F,19.5F,-9F);
  setRotation(thx,0F,0F,0F);
  legBase1=new ModelRenderer(this,17,28);
  legBase1.addBox(-5F,-2F,0F,10,4,4);
  legBase1.setRotationPoint(0F,19.5F,-9F);
  setRotation(legBase1,0F,0F,0F);
  legBase2=new ModelRenderer(this,16,37);
  legBase2.addBox(-5.5F,-2F,5F,11,4,4);
  legBase2.setRotationPoint(0F,19.5F,-9F);
  setRotation(legBase2,0F,0F,0F);
  legBase3=new ModelRenderer(this,15,46);
  legBase3.addBox(-6F,-2F,10F,12,4,4);
  legBase3.setRotationPoint(0F,19.5F,-9F);
  setRotation(legBase3,0F,0F,0F);
  abMain=new ModelRenderer(this,6,55);
  abMain.addBox(-4.5F,-4.5F,4F,9,7,16);
  abMain.setRotationPoint(0F,20F,-2F);
  setRotation(abMain,-0.0872665F,0F,0F);
  abSide=new ModelRenderer(this,5,79);
  abSide.addBox(-7F,-2F,9F,14,4,12);
  abSide.setRotationPoint(0F,19F,-4F);
  setRotation(abSide,-0.0872665F,0F,0F);
  abBack=new ModelRenderer(this,23,96);
  abBack.addBox(-3F,-2F,13F,6,4,2);
  abBack.setRotationPoint(0F,20F,5F);
  setRotation(abBack,-0.0872665F,0F,0F);
  rFLeg1=new ModelRenderer(this,25,103);
  rFLeg1.addBox(-1.033333F,-3F,-1F,2,4,2);
  rFLeg1.setRotationPoint(-5F,20F,-7F);
  setRotation(rFLeg1,0F,2.617994F,-0.8726646F);
  rFLeg2=new ModelRenderer(this,25,110);
  rFLeg2.addBox(1F,-3F,-1.5F,6,2,3);
  setRotation(rFLeg2,0F,0F,-0.8726646F);
  rFLeg3=new ModelRenderer(this,25,116);
  rFLeg3.addBox(2F,-7.5F,-1F,6,2,2);
  setRotation(rFLeg3,0F,0F,0F);
  rFLegClaw=new ModelRenderer(this,25,122);
  rFLegClaw.addBox(8F,-7.5F,-0.5F,3,1,1);
  setRotation(rFLegClaw,0F,0F,0F);
  rBLeg1=new ModelRenderer(this,25,103);
  rBLeg1.addBox(-1.033333F,-3F,-1F,2,4,2);
  rBLeg1.setRotationPoint(-6.5F,20F,3F);
  setRotation(rBLeg1,0F,-2.617994F,-0.8726646F);
  rBLeg2=new ModelRenderer(this,25,110);
  rBLeg2.addBox(1F,-3F,-1.5F,6,2,3);
  setRotation(rBLeg2,0F,0F,-0.8726646F);
  rBLeg3=new ModelRenderer(this,25,116);
  rBLeg3.addBox(2F,-7.5F,-1F,6,2,2);
  setRotation(rBLeg3,0F,0F,0F);
  rBLegClaw=new ModelRenderer(this,25,122);
  rBLegClaw.addBox(8F,-7.5F,-0.5F,3,1,1);
  setRotation(rBLegClaw,0F,0F,0F);
  lBLeg1=new ModelRenderer(this,25,103);
  lBLeg1.addBox(-1.033333F,-3F,-1F,2,4,2);
  lBLeg1.setRotationPoint(6.5F,20F,3F);
  setRotation(lBLeg1,0F,-0.5235988F,0.8726646F);
  lBLeg2=new ModelRenderer(this,25,110);
  lBLeg2.addBox(1F,-3F,-1.5F,6,2,3);
  setRotation(lBLeg2,0F,0F,-0.8726646F);
  lBLeg3=new ModelRenderer(this,25,116);
  lBLeg3.addBox(2F,-7.5F,-1F,6,2,2);
  setRotation(lBLeg3,0F,0F,0F);
  lBLegClaw=new ModelRenderer(this,25,122);
  lBLegClaw.addBox(8F,-7.5F,-0.5F,3,1,1);
  setRotation(lBLegClaw,0F,0F,0F);
  lFLeg1=new ModelRenderer(this,25,103);
  lFLeg1.addBox(-1F,-3F,-1F,2,4,2);
  lFLeg1.setRotationPoint(5F,20F,-7F);
  setRotation(lFLeg1,0F,0.5235988F,0.8726646F);
  lFLeg2=new ModelRenderer(this,25,110);
  lFLeg2.addBox(1F,-3F,-1.5F,6,2,3);
  setRotation(lFLeg2,0F,0F,-0.8726646F);
  lFLeg3=new ModelRenderer(this,25,116);
  lFLeg3.addBox(2F,-7.5F,-1F,6,2,2);
  setRotation(lFLeg3,0F,0F,0F);
  lFLegClaw=new ModelRenderer(this,25,122);
  lFLegClaw.addBox(8F,-7.5F,-0.5F,3,1,1);
  setRotation(lFLegClaw,0F,0F,0F);
  rMLeg1=new ModelRenderer(this,25,103);
  rMLeg1.addBox(-1.033333F,-3F,-1F,2,4,2);
  rMLeg1.setRotationPoint(-6F,20F,-2F);
  setRotation(rMLeg1,0F,3.141593F,-0.8726646F);
  rMLeg2=new ModelRenderer(this,25,110);
  rMLeg2.addBox(1F,-3F,-1.5F,6,2,3);
  setRotation(rMLeg2,0F,0F,-0.8726646F);
  rMLeg3=new ModelRenderer(this,25,116);
  rMLeg3.addBox(2F,-7.5F,-1F,6,2,2);
  setRotation(rMLeg3,0F,0F,0F);
  rMLegClaw=new ModelRenderer(this,25,122);
  rMLegClaw.addBox(8F,-7.5F,-0.5F,3,1,1);
  setRotation(rMLegClaw,0F,0F,0F);
  lMLeg1=new ModelRenderer(this,25,103);
  lMLeg1.addBox(-1F,-3F,-1F,2,4,2);
  lMLeg1.setRotationPoint(6F,20F,-2F);
  setRotation(lMLeg1,0F,0F,0.8726646F);
  lMLeg2=new ModelRenderer(this,25,110);
  lMLeg2.addBox(1F,-3F,-1.5F,6,2,3);
  setRotation(lMLeg2,0F,0F,-0.8726646F);
  lMLeg3=new ModelRenderer(this,25,116);
  lMLeg3.addBox(2F,-7.5F,-1F,6,2,2);
  setRotation(lMLeg3,0F,0F,0F);
  lMLegClaw=new ModelRenderer(this,25,122);
  lMLegClaw.addBox(8F,-7.5F,-0.5F,3,1,1);
  setRotation(lMLegClaw,0F,0F,0F);
  rFLeg1.addChild(rFLeg2);
  rFLeg1.addChild(rFLeg3);
  rFLeg1.addChild(rFLegClaw);
  rMLeg1.addChild(rMLeg2);
  rMLeg1.addChild(rMLeg3);
  rMLeg1.addChild(rMLegClaw);
  rBLeg1.addChild(rBLeg2);
  rBLeg1.addChild(rBLeg3);
  rBLeg1.addChild(rBLegClaw);
  lFLeg1.addChild(lFLeg2);
  lFLeg1.addChild(lFLeg3);
  lFLeg1.addChild(lFLegClaw);
  lMLeg1.addChild(lMLeg2);
  lMLeg1.addChild(lMLeg3);
  lMLeg1.addChild(lMLegClaw);
  lBLeg1.addChild(lBLeg2);
  lBLeg1.addChild(lBLeg3);
  lBLeg1.addChild(lBLegClaw);
  headMain.addChild(headFront);
  headMain.addChild(eyes);
  headMain.addChild(antR);
  headMain.addChild(antL);
}","public ModelLouse(){
  textureWidth=64;
  textureHeight=128;
  headMain=new ModelRenderer(this,15,0);
  headMain.addBox(-2F,-1.5F,-4F,4,4,4);
  headMain.setRotationPoint(0F,19F,-10F);
  setRotation(headMain,0.0872665F,0F,0F);
  headFront=new ModelRenderer(this,39,0);
  headFront.addBox(-1.5F,-1F,-6F,3,3,2);
  setRotation(headFront,0F,0F,0F);
  eyes=new ModelRenderer(this,0,0);
  eyes.addBox(-2.5F,-1F,-3F,5,2,2);
  setRotation(eyes,0F,0F,0F);
  antR=new ModelRenderer(this,46,28);
  antR.addBox(-10F,0.5F,-2.5F,7,1,1);
  setRotation(antR,-0.0872665F,-0.8235988F,0F);
  antL=new ModelRenderer(this,0,28);
  antL.addBox(3F,0.5F,-2.5F,7,1,1);
  setRotation(antL,-0.0872665F,0.8235988F,0F);
  mandible=new ModelRenderer(this,52,0);
  mandible.addBox(-1F,0F,-7F,2,2,1);
  setRotation(mandible,0F,0F,0F);
  thx=new ModelRenderer(this,11,9);
  thx.addBox(-4F,-3F,-1F,8,6,12);
  thx.setRotationPoint(0F,19.5F,-9F);
  setRotation(thx,0F,0F,0F);
  legBase1=new ModelRenderer(this,17,28);
  legBase1.addBox(-5F,-2F,0F,10,4,4);
  legBase1.setRotationPoint(0F,19.5F,-9F);
  setRotation(legBase1,0F,0F,0F);
  legBase2=new ModelRenderer(this,16,37);
  legBase2.addBox(-5.5F,-2F,5F,11,4,4);
  legBase2.setRotationPoint(0F,19.5F,-9F);
  setRotation(legBase2,0F,0F,0F);
  legBase3=new ModelRenderer(this,15,46);
  legBase3.addBox(-6F,-2F,10F,12,4,4);
  legBase3.setRotationPoint(0F,19.5F,-9F);
  setRotation(legBase3,0F,0F,0F);
  abMain=new ModelRenderer(this,6,55);
  abMain.addBox(-4.5F,-4.5F,4F,9,7,16);
  abMain.setRotationPoint(0F,20F,-2F);
  setRotation(abMain,-0.0872665F,0F,0F);
  abSide=new ModelRenderer(this,5,79);
  abSide.addBox(-7F,-2F,9F,14,4,12);
  abSide.setRotationPoint(0F,19F,-4F);
  setRotation(abSide,-0.0872665F,0F,0F);
  abBack=new ModelRenderer(this,23,96);
  abBack.addBox(-3F,-2F,13F,6,4,2);
  abBack.setRotationPoint(0F,20F,5F);
  setRotation(abBack,-0.0872665F,0F,0F);
  rFLeg1=new ModelRenderer(this,25,103);
  rFLeg1.addBox(-1.033333F,-3F,-1F,2,4,2);
  rFLeg1.setRotationPoint(-5F,20F,-7F);
  setRotation(rFLeg1,0F,2.617994F,-0.8726646F);
  rFLeg2=new ModelRenderer(this,25,110);
  rFLeg2.addBox(1F,-3F,-1.5F,6,2,3);
  setRotation(rFLeg2,0F,0F,-0.8726646F);
  rFLeg3=new ModelRenderer(this,25,116);
  rFLeg3.addBox(2F,-7.5F,-1F,6,2,2);
  setRotation(rFLeg3,0F,0F,0F);
  rFLegClaw=new ModelRenderer(this,25,122);
  rFLegClaw.addBox(8F,-7.5F,-0.5F,3,1,1);
  setRotation(rFLegClaw,0F,0F,0F);
  rBLeg1=new ModelRenderer(this,25,103);
  rBLeg1.addBox(-1.033333F,-3F,-1F,2,4,2);
  rBLeg1.setRotationPoint(-6.5F,20F,3F);
  setRotation(rBLeg1,0F,-2.617994F,-0.8726646F);
  rBLeg2=new ModelRenderer(this,25,110);
  rBLeg2.addBox(1F,-3F,-1.5F,6,2,3);
  setRotation(rBLeg2,0F,0F,-0.8726646F);
  rBLeg3=new ModelRenderer(this,25,116);
  rBLeg3.addBox(2F,-7.5F,-1F,6,2,2);
  setRotation(rBLeg3,0F,0F,0F);
  rBLegClaw=new ModelRenderer(this,25,122);
  rBLegClaw.addBox(8F,-7.5F,-0.5F,3,1,1);
  setRotation(rBLegClaw,0F,0F,0F);
  lBLeg1=new ModelRenderer(this,25,103);
  lBLeg1.addBox(-1.033333F,-3F,-1F,2,4,2);
  lBLeg1.setRotationPoint(6.5F,20F,3F);
  setRotation(lBLeg1,0F,-0.5235988F,0.8726646F);
  lBLeg2=new ModelRenderer(this,25,110);
  lBLeg2.addBox(1F,-3F,-1.5F,6,2,3);
  setRotation(lBLeg2,0F,0F,-0.8726646F);
  lBLeg3=new ModelRenderer(this,25,116);
  lBLeg3.addBox(2F,-7.5F,-1F,6,2,2);
  setRotation(lBLeg3,0F,0F,0F);
  lBLegClaw=new ModelRenderer(this,25,122);
  lBLegClaw.addBox(8F,-7.5F,-0.5F,3,1,1);
  setRotation(lBLegClaw,0F,0F,0F);
  lFLeg1=new ModelRenderer(this,25,103);
  lFLeg1.addBox(-1F,-3F,-1F,2,4,2);
  lFLeg1.setRotationPoint(5F,20F,-7F);
  setRotation(lFLeg1,0F,0.5235988F,0.8726646F);
  lFLeg2=new ModelRenderer(this,25,110);
  lFLeg2.addBox(1F,-3F,-1.5F,6,2,3);
  setRotation(lFLeg2,0F,0F,-0.8726646F);
  lFLeg3=new ModelRenderer(this,25,116);
  lFLeg3.addBox(2F,-7.5F,-1F,6,2,2);
  setRotation(lFLeg3,0F,0F,0F);
  lFLegClaw=new ModelRenderer(this,25,122);
  lFLegClaw.addBox(8F,-7.5F,-0.5F,3,1,1);
  setRotation(lFLegClaw,0F,0F,0F);
  rMLeg1=new ModelRenderer(this,25,103);
  rMLeg1.addBox(-1.033333F,-3F,-1F,2,4,2);
  rMLeg1.setRotationPoint(-6F,20F,-2F);
  setRotation(rMLeg1,0F,MathUtil.PI,-0.8726646F);
  rMLeg2=new ModelRenderer(this,25,110);
  rMLeg2.addBox(1F,-3F,-1.5F,6,2,3);
  setRotation(rMLeg2,0F,0F,-0.8726646F);
  rMLeg3=new ModelRenderer(this,25,116);
  rMLeg3.addBox(2F,-7.5F,-1F,6,2,2);
  setRotation(rMLeg3,0F,0F,0F);
  rMLegClaw=new ModelRenderer(this,25,122);
  rMLegClaw.addBox(8F,-7.5F,-0.5F,3,1,1);
  setRotation(rMLegClaw,0F,0F,0F);
  lMLeg1=new ModelRenderer(this,25,103);
  lMLeg1.addBox(-1F,-3F,-1F,2,4,2);
  lMLeg1.setRotationPoint(6F,20F,-2F);
  setRotation(lMLeg1,0F,0F,0.8726646F);
  lMLeg2=new ModelRenderer(this,25,110);
  lMLeg2.addBox(1F,-3F,-1.5F,6,2,3);
  setRotation(lMLeg2,0F,0F,-0.8726646F);
  lMLeg3=new ModelRenderer(this,25,116);
  lMLeg3.addBox(2F,-7.5F,-1F,6,2,2);
  setRotation(lMLeg3,0F,0F,0F);
  lMLegClaw=new ModelRenderer(this,25,122);
  lMLegClaw.addBox(8F,-7.5F,-0.5F,3,1,1);
  setRotation(lMLegClaw,0F,0F,0F);
  rFLeg1.addChild(rFLeg2);
  rFLeg1.addChild(rFLeg3);
  rFLeg1.addChild(rFLegClaw);
  rMLeg1.addChild(rMLeg2);
  rMLeg1.addChild(rMLeg3);
  rMLeg1.addChild(rMLegClaw);
  rBLeg1.addChild(rBLeg2);
  rBLeg1.addChild(rBLeg3);
  rBLeg1.addChild(rBLegClaw);
  lFLeg1.addChild(lFLeg2);
  lFLeg1.addChild(lFLeg3);
  lFLeg1.addChild(lFLegClaw);
  lMLeg1.addChild(lMLeg2);
  lMLeg1.addChild(lMLeg3);
  lMLeg1.addChild(lMLegClaw);
  lBLeg1.addChild(lBLeg2);
  lBLeg1.addChild(lBLeg3);
  lBLeg1.addChild(lBLegClaw);
  headMain.addChild(headFront);
  headMain.addChild(eyes);
  headMain.addChild(antR);
  headMain.addChild(antL);
}",0.998218421521468
34659,"protected static final void placeCube(StructureWorld world,Random rand,IBlockPicker picker,int x1,int y1,int z1,int x2,int y2,int z2){
  int xMin=Math.min(x1,x2), xMax=Math.max(x1,x2);
  int yMin=Math.min(y1,y2), yMax=Math.max(y1,y2);
  int zMin=Math.min(z1,z2), zMax=Math.max(z1,z2);
  PosMutable mutablePos=new PosMutable();
  for (int x=xMin; x <= xMax; x++) {
    for (int y=yMin; y <= yMax; y++) {
      for (int z=zMin; z <= zMax; z++) {
        world.setBlock(x,y,z,picker.pick(rand));
      }
    }
  }
}","protected static final void placeCube(StructureWorld world,Random rand,IBlockPicker picker,int x1,int y1,int z1,int x2,int y2,int z2){
  int xMin=Math.min(x1,x2), xMax=Math.max(x1,x2);
  int yMin=Math.min(y1,y2), yMax=Math.max(y1,y2);
  int zMin=Math.min(z1,z2), zMax=Math.max(z1,z2);
  for (int x=xMin; x <= xMax; x++) {
    for (int y=yMin; y <= yMax; y++) {
      for (int z=zMin; z <= zMax; z++) {
        world.setBlock(x,y,z,picker.pick(rand));
      }
    }
  }
}",0.6945010183299389
34660,"public long toLong(){
  return (x & (1L << 26) - 1L) << 38 | (y & (1L << 12) - 1L) << 26 | (z & (1L << 26) - 1L);
}","public long toLong(){
  return (getX() & (1L << 26) - 1L) << 38 | (getY() & (1L << 12) - 1L) << 26 | (getZ() & (1L << 26) - 1L);
}",0.9142857142857144
34661,"protected void tryDeliverNotifications(){
  boolean delivered=false;
  ServerConfigurationManager manager=MinecraftServer.getServer().getConfigurationManager();
  List<EntityPlayer> players=manager.playerEntityList;
  for (  EntityPlayer player : players) {
    if (manager.func_152596_g(player.getGameProfile())) {
      deliverNotificationsToPlayer(player);
      delivered=true;
    }
  }
  if (delivered)   clearNotifications();
}","protected void tryDeliverNotifications(){
  ServerConfigurationManager manager=MinecraftServer.getServer().getConfigurationManager();
  if (manager == null)   return;
  boolean delivered=false;
  List<EntityPlayer> players=manager.playerEntityList;
  for (  EntityPlayer player : players) {
    if (manager.func_152596_g(player.getGameProfile())) {
      deliverNotificationsToPlayer(player);
      delivered=true;
    }
  }
  if (delivered)   clearNotifications();
}",0.7591564927857936
34662,"@Override @SideOnly(Side.CLIENT) public void registerIcons(IIconRegister iconRegister){
  iconArray=new IIcon[totalIcons];
  for (int a=0; a < 10; a++)   iconArray[a]=iconRegister.registerIcon(""String_Node_Str"" + a);
  char c='a';
  for (int a=10; a < 18; a++)   iconArray[a]=iconRegister.registerIcon(""String_Node_Str"" + (c++));
  iconArray[18]=iconRegister.registerIcon(""String_Node_Str"");
  iconArray[19]=iconRegister.registerIcon(""String_Node_Str"");
  iconArray[23]=iconRegister.registerIcon(""String_Node_Str"");
  iconArray[24]=iconRegister.registerIcon(""String_Node_Str"");
  itemIcon=iconArray[0];
}","@Override @SideOnly(Side.CLIENT) public void registerIcons(IIconRegister iconRegister){
  iconArray=new IIcon[totalIcons];
  for (int a=0; a < 10; a++)   iconArray[a]=iconRegister.registerIcon(""String_Node_Str"" + a);
  char c='a';
  for (int a=10; a < 18; a++)   iconArray[a]=iconRegister.registerIcon(""String_Node_Str"" + (c++));
  iconArray[18]=iconRegister.registerIcon(""String_Node_Str"");
  iconArray[19]=iconRegister.registerIcon(""String_Node_Str"");
  iconArray[20]=iconRegister.registerIcon(""String_Node_Str"");
  iconArray[21]=iconRegister.registerIcon(""String_Node_Str"");
  itemIcon=iconArray[0];
}",0.9966887417218544
34663,"public static void initialize(){
  Stopwatch.time(""String_Node_Str"");
  HELP.setNonBuyable().addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(0),new KnowledgeFragmentText(1),new KnowledgeFragmentText(2),new KnowledgeFragmentText(3),new KnowledgeFragmentText(4),new KnowledgeFragmentText(5),new KnowledgeFragmentText(6),new KnowledgeFragmentText(7),new KnowledgeFragmentText(8),new KnowledgeFragmentText(9),new KnowledgeFragmentText(18)});
  if (Loader.isModLoaded(""String_Node_Str"")) {
    HELP.addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(19)});
  }
  ESSENCE.setNonBuyable().setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(80).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentText(81).setPrice(2).setUnlockCascade(704),new KnowledgeFragmentText(82).setPrice(2).setUnlockCascade(614,623)});
  KnowledgeCategories.OVERWORLD.addKnowledgeObjects(new KnowledgeObject[]{STRONGHOLD.setCategoryObject(KnowledgeCategories.OVERWORLD).setUnlockPrice(5).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(710).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(711).setPrice(2).setUnlockRequirements(710),new KnowledgeFragmentText(712).setPrice(2).setUnlockRequirements(710),new KnowledgeFragmentText(713).setPrice(3).setUnlockRequirements(712)}),ENDERMAN_HEAD.setPos(2,0).setUnlockPrice(5).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(20).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentText(21).setPrice(2).setUnlockRequirements(20)}),MUSIC_DISKS.setPos(4,0).setUnlockPrice(5).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(30).setPrice(2)}),END_PORTAL.setPos(2,6).setNonBuyable().setDiscoveryReward(28).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1410).setNonBuyable().setUnlockOnDiscovery(),new KnowledgeFragmentText(1411).setNonBuyable().setUnlockOnDiscovery(),new KnowledgeFragmentText(1412).setNonBuyable().setUnlockOnDiscovery(),new KnowledgeFragmentText(1413).setNonBuyable().setUnlockOnDiscovery()}),BASIC_ESSENCE_ALTAR.setPos(3,9).setNonBuyable().setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentCrafting(50).setRecipeFromRegistry(new ItemStack(BlockList.essence_altar)).setPrice(8).setUnlockCascade(42),new KnowledgeFragmentText(51).setUnlockOnDiscovery().setPrice(5).setUnlockRequirements(50),new KnowledgeFragmentText(52).setPrice(2).setUnlockRequirements(51)}),ENDERMAN.setPos(1,3).setUnlockPrice(5).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(60).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(61).setPrice(2).setUnlockRequirements(60),new KnowledgeFragmentText(62).setPrice(2).setUnlockRequirements(60),new KnowledgeFragmentText(63).setPrice(3).setUnlockRequirements(60)}),SILVERFISH.setPos(3,3).setUnlockPrice(5).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(70).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(71).setPrice(2).setUnlockRequirements(70),new KnowledgeFragmentText(72).setPrice(3).setUnlockRequirements(71)})});
  KnowledgeCategories.DRAGON_LAIR.addKnowledgeObjects(new KnowledgeObject[]{DRAGON_LAIR.setCategoryObject(KnowledgeCategories.DRAGON_LAIR).setUnlockPrice(45).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(750).setPrice(5),new KnowledgeFragmentText(751).setPrice(2).setUnlockRequirements(750).setUnlockCascade(191),new KnowledgeFragmentText(752).setPrice(1).setUnlockRequirements(751),new KnowledgeFragmentText(753).setPrice(2).setUnlockRequirements(752),new KnowledgeFragmentText(754).setPrice(2).setUnlockRequirements(752),new KnowledgeFragmentText(755).setPrice(2).setUnlockRequirements(752)}),END_STONE.setPos(0,0).setUnlockPrice(5).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(90).setPrice(2).setUnlockOnDiscovery()}),FALLING_OBSIDIAN.setPos(2,0).setUnlockPrice(8).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(100).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentText(101).setPrice(2),new KnowledgeFragmentText(102).setPrice(2).setUnlockRequirements(100),new KnowledgeFragmentText(103).setPrice(2).setUnlockRequirements(100),new KnowledgeFragmentText(104).setPrice(2).setUnlockRequirements(100)}),DRAGON_ESSENCE_ALTAR.setPos(3,10).setUnlockPrice(25).setDiscoveryReward(22).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(110).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(111).setPrice(8).setUnlockRequirements(110),new KnowledgeFragmentText(112).setPrice(3).setUnlockRequirements(111),new KnowledgeFragmentText(113).setPrice(5).setUnlockRequirements(110),new KnowledgeFragmentText(114).setPrice(2).setUnlockRequirements(110),new KnowledgeFragmentItemConversion(115).setItems(new ItemStack(Items.brewing_stand),new ItemStack(ItemList.enhanced_brewing_stand)).setPrice(3).setUnlockRequirements(114).setUnlockCascade(130),new KnowledgeFragmentItemConversion(117).setItems(new ItemStack(ItemList.ghost_amulet),new ItemStack(ItemList.ghost_amulet,1,1)).setNonBuyableRedirect(GHOST_AMULET)}),END_POWDER_ORE.setPos(6,0).setUnlockPrice(15).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(120).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(121).setPrice(2).setUnlockOnDiscovery().setUnlockRequirements(120),new KnowledgeFragmentText(122).setPrice(5).setUnlockRequirements(120),new KnowledgeFragmentText(123).setPrice(3).setUnlockRequirements(122)}),ENHANCED_BREWING_STAND.setPos(4,12).setUnlockPrice(18).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(130).setPrice(3).setUnlockCascade(115),new KnowledgeFragmentText(131).setPrice(2).setUnlockRequirements(130),new KnowledgeFragmentText(132).setPrice(5).setUnlockRequirements(130).setUnlockCascade(166),new KnowledgeFragmentText(137).setPrice(5).setUnlockRequirements(132),new KnowledgeFragmentText(133).setPrice(2).setUnlockRequirements(130),new KnowledgeFragmentItemConversion(134).setItems(new ItemStack(ItemList.instability_orb),new ItemStack(ItemList.potion_of_instability)).setNonBuyableRedirect(INSTABILITY_ORB),new KnowledgeFragmentItemConversion(135).setItems(new ItemStack(ItemList.silverfish_blood),new ItemStack(ItemList.infestation_remedy)).setNonBuyableRedirect(SILVERFISH),new KnowledgeFragmentItemConversion(136).setItems(new ItemStack(ItemList.ectoplasm),new ItemStack(ItemList.potion_of_purity)).setNonBuyableRedirect(ECTOPLASM)}),DRAGON_EGG.setPos(1,8).setUnlockPrice(12).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(150).setPrice(5).setUnlockOnDiscovery().setUnlockCascade(705),new KnowledgeFragmentText(151).setPrice(2).setUnlockRequirements(150),new KnowledgeFragmentText(152).setPrice(8).setUnlockRequirements(150),new KnowledgeFragmentText(153).setPrice(3).setUnlockRequirements(150)}),DRAGON_ESSENCE.setPos(3,8),END_POWDER.setPos(8,0).setUnlockPrice(20).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(160).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(161).setPrice(5).setUnlockOnDiscovery().setUnlockRequirements(160),new KnowledgeFragmentText(162).setPrice(2).setUnlockRequirements(161),new KnowledgeFragmentText(163).setPrice(2).setUnlockRequirements(161),new KnowledgeFragmentText(164).setPrice(3).setUnlockRequirements(163),new KnowledgeFragmentText(165).setPrice(2).setUnlockRequirements(161),new KnowledgeFragmentText(166).setPrice(5).setUnlockRequirements(160).setUnlockCascade(132),new KnowledgeFragmentText(167).setPrice(3).setUnlockCascade(244)}),ENDER_DRAGON.setPos(1,3).setUnlockPrice(20).setDiscoveryReward(55).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(190).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(191).setPrice(2).setUnlockOnDiscovery().setUnlockRequirements(190).setUnlockCascade(751),new KnowledgeFragmentText(192).setPrice(3).setUnlockRequirements(190),new KnowledgeFragmentText(193).setPrice(3).setUnlockRequirements(191),new KnowledgeFragmentText(194).setPrice(3).setUnlockRequirements(192,193),new KnowledgeFragmentText(195).setPrice(3).setUnlockRequirements(194),new KnowledgeFragmentText(196).setPrice(5).setUnlockRequirements(194),new KnowledgeFragmentText(197).setPrice(2).setUnlockRequirements(196),new KnowledgeFragmentText(198).setPrice(2).setUnlockRequirements(196),new KnowledgeFragmentText(700).setPrice(2).setUnlockRequirements(196),new KnowledgeFragmentText(702).setPrice(2).setUnlockRequirements(196),new KnowledgeFragmentText(703).setPrice(2).setUnlockRequirements(196).setUnlockCascade(210),new KnowledgeFragmentText(704).setPrice(2).setUnlockRequirements(190).setUnlockCascade(81),new KnowledgeFragmentText(705).setPrice(2).setUnlockRequirements(704).setUnlockCascade(150)}),ANGRY_ENDERMAN.setPos(0,5).setUnlockPrice(8).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(200).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(201).setPrice(3).setUnlockRequirements(200)}),VAMPIRE_BAT.setPos(2,5).setUnlockPrice(8).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(210).setPrice(5).setUnlockOnDiscovery().setUnlockCascade(703),new KnowledgeFragmentText(211).setPrice(2).setUnlockRequirements(210),new KnowledgeFragmentText(212).setPrice(3).setUnlockRequirements(210)}),ENDER_PEARL_ENHANCEMENTS.setPos(11,0).setUnlockPrice(8).setDiscoveryReward(10).addFragments(KnowledgeUtils.createEnhancementFragments(EnderPearlEnhancements.class,170,3,10,new int[]{160})),ESSENCE_ALTAR_ENHANCEMENTS.setPos(11,2).setUnlockPrice(10).setDiscoveryReward(10).addFragments(KnowledgeUtils.createEnhancementFragments(EssenceAltarEnhancements.class,1470,5,10,new int[]{160,51})),ENHANCED_BREWING_STAND_ENHANCEMENTS.setPos(11,4).setUnlockPrice(10).setDiscoveryReward(10).addFragments(KnowledgeUtils.createEnhancementFragments(EnhancedBrewingStandEnhancements.class,1500,4,10,new int[]{160,130})),TNT_ENHANCEMENTS.setPos(13,0).setUnlockPrice(10).setDiscoveryReward(10).addFragments(KnowledgeUtils.createEnhancementFragments(TNTEnhancements.class,140,3,10,new int[]{160})),SPATIAL_DASH_GEM_ENHANCEMENTS.setPos(13,2).setUnlockPrice(12).setDiscoveryReward(10).addFragments(KnowledgeUtils.createEnhancementFragments(SpatialDashGemEnhancements.class,1480,4,10,new int[]{160,290})),TRANSFERENCE_GEM_ENHANCEMENTS.setPos(13,4).setUnlockPrice(12).setDiscoveryReward(10).addFragments(KnowledgeUtils.createEnhancementFragments(TransferenceGemEnhancements.class,1490,4,10,new int[]{160,1440}))});
  KnowledgeCategories.ENDSTONE_BLOBS.addKnowledgeObjects(new KnowledgeObject[]{ENDSTONE_BLOB.setCategoryObject(KnowledgeCategories.ENDSTONE_BLOBS).setUnlockPrice(40).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(220).setPrice(5),new KnowledgeFragmentText(221).setPrice(3).setUnlockRequirements(220),new KnowledgeFragmentText(222).setPrice(5).setUnlockRequirements(221),new KnowledgeFragmentText(223).setPrice(5).setUnlockRequirements(221),new KnowledgeFragmentText(224).setPrice(5).setUnlockRequirements(221)}),IGNEOUS_ROCK_ORE.setPos(0,0).setUnlockPrice(10).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(230).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(231).setPrice(2).setUnlockRequirements(230),new KnowledgeFragmentText(232).setPrice(3).setUnlockRequirements(230)}),DEATH_FLOWER.setPos(3,0).setUnlockPrice(15).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(240).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(241).setPrice(2).setUnlockRequirements(240),new KnowledgeFragmentText(242).setPrice(3).setUnlockRequirements(241),new KnowledgeFragmentText(243).setPrice(5).setUnlockRequirements(241),new KnowledgeFragmentText(244).setPrice(3).setUnlockRequirements(241).setUnlockCascade(167),new KnowledgeFragmentCrafting(245).setRecipeFromRegistry(new ItemStack(Items.dye,2,13),new ItemStack[]{new ItemStack(BlockList.death_flower,1,0)}).setPrice(2).setUnlockRequirements(240),new KnowledgeFragmentCrafting(246).setRecipeFromRegistry(new ItemStack(Items.dye,2,8),new ItemStack[]{new ItemStack(BlockList.death_flower,1,15)}).setPrice(2).setUnlockRequirements(243)}),ENDER_GOO.setPos(6,0).setUnlockPrice(8).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(250).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentText(251).setPrice(5).setUnlockRequirements(250),new KnowledgeFragmentText(252).setPrice(2).setUnlockRequirements(251),new KnowledgeFragmentText(253).setPrice(3).setUnlockRequirements(250)}),IGNEOUS_ROCK.setPos(0,2).setUnlockPrice(18).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(260).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentText(261).setPrice(2).setUnlockRequirements(260),new KnowledgeFragmentText(262).setPrice(3).setUnlockRequirements(260),new KnowledgeFragmentText(263).setPrice(3).setUnlockRequirements(260)}),TRANSPORT_BEACON.setPos(9,0).setUnlockPrice(20).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(960).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(961).setPrice(5).setUnlockRequirements(960),new KnowledgeFragmentText(962).setPrice(5).setUnlockRequirements(960),new KnowledgeFragmentText(963).setPrice(3).setUnlockRequirements(960)})});
  KnowledgeCategories.DUNGEON_TOWER.addKnowledgeObjects(new KnowledgeObject[]{DUNGEON_TOWER.setCategoryObject(KnowledgeCategories.DUNGEON_TOWER).setUnlockPrice(55).setDiscoveryReward(25).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(270).setPrice(5),new KnowledgeFragmentText(271).setPrice(3).setUnlockRequirements(270),new KnowledgeFragmentText(272).setPrice(2).setUnlockRequirements(270),new KnowledgeFragmentText(273).setPrice(3).setUnlockRequirements(272),new KnowledgeFragmentText(274).setPrice(5).setUnlockRequirements(272),new KnowledgeFragmentText(275).setPrice(2).setUnlockRequirements(272)}),OBSIDIAN_STAIRS.setPos(3,4).setUnlockPrice(1).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(280).setPrice(2).setUnlockOnDiscovery()}),OBSIDIAN_SMOOTH.setPos(1,0).setUnlockPrice(1).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(281).setPrice(1).setUnlockOnDiscovery()}),OBSIDIAN_CHISELED.setPos(3,0).setUnlockPrice(1).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(282).setPrice(1).setUnlockOnDiscovery()}),OBSIDIAN_PILLAR.setPos(5,0).setUnlockPrice(1).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(283).setPrice(1).setUnlockOnDiscovery()}),OBSIDIAN_SMOOTH_GLOWING.setPos(1,2).setUnlockPrice(1).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(284).setPrice(1).setUnlockOnDiscovery()}),OBSIDIAN_CHISELED_GLOWING.setPos(3,2).setUnlockPrice(1).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(285).setPrice(1).setUnlockOnDiscovery()}),OBSIDIAN_PILLAR_GLOWING.setPos(5,2).setUnlockPrice(1).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(286).setPrice(1).setUnlockOnDiscovery()}),ENERGY.setPos(3,16).setUnlockPrice(35).setDiscoveryReward(25).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(890).setPrice(8),new KnowledgeFragmentText(891).setPrice(5).setUnlockRequirements(890),new KnowledgeFragmentText(892).setPrice(5).setUnlockRequirements(891),new KnowledgeFragmentText(893).setPrice(4).setUnlockRequirements(892),new KnowledgeFragmentText(894).setPrice(8).setUnlockRequirements(893),new KnowledgeFragmentText(895).setPrice(4).setUnlockRequirements(891),new KnowledgeFragmentText(289).setPrice(5).setUnlockRequirements(892),new KnowledgeFragmentText(896).setPrice(5).setUnlockRequirements(892),new KnowledgeFragmentText(897).setPrice(4).setUnlockRequirements(896),new KnowledgeFragmentText(898).setPrice(5).setUnlockRequirements(891),new KnowledgeFragmentText(899).setPrice(5).setUnlockRequirements(891)}),ENDIUM_ORE.setPos(0,12).setUnlockPrice(25).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(760).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(761).setPrice(8).setUnlockOnDiscovery().setUnlockRequirements(760)}),ENDIUM_BLOCK.setPos(4,11).setUnlockPrice(5).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(770).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(771).setRecipeFromRegistry(new ItemStack(BlockList.endium_block)).setPrice(2).setUnlockOnDiscovery().setUnlockRequirements(770).setUnlockCascade(781),new KnowledgeFragmentCrafting(772).setRecipeFromRegistry(new ItemStack(BlockList.void_chest)).setNonBuyableRedirect(VOID_CHEST),new KnowledgeFragmentCrafting(773).setRecipeFromRegistry(new ItemStack(ItemList.blank_gem)).setNonBuyableRedirect(BLANK_GEM)}),VOID_CHEST.setPos(6,11).setUnlockPrice(20).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(800).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(801).setRecipeFromRegistry(new ItemStack(BlockList.void_chest)).setPrice(8).setUnlockRequirements(800).setUnlockCascade(772),new KnowledgeFragmentText(802).setPrice(3).setUnlockRequirements(800)}),SPATIAL_DASH_GEM.setPos(6,7).setUnlockPrice(25).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(290).setPrice(5).setUnlockOnDiscovery().setUnlockCascade(319),new KnowledgeFragmentText(291).setPrice(2).setUnlockRequirements(290),new KnowledgeFragmentText(292).setPrice(3).setUnlockRequirements(291),new KnowledgeFragmentText(293).setPrice(2).setUnlockRequirements(291),new KnowledgeFragmentText(294).setPrice(2).setUnlockRequirements(293),new KnowledgeFragmentCrafting(295).setRecipeFromRegistry(new ItemStack(ItemList.spatial_dash_gem)).setNonBuyableRedirect(ARCANE_SHARD)}),ENDIUM_INGOT.setPos(2,12).setUnlockPrice(30).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(780).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(781).setRecipeFromRegistry(new ItemStack(BlockList.endium_block)).setPrice(2).setUnlockOnDiscovery().setUnlockRequirements(780).setUnlockCascade(771)}),ENDER_EYE.setPos(3,7).setUnlockPrice(20).setDiscoveryReward(32).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(310).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(311).setPrice(2).setUnlockOnDiscovery().setUnlockRequirements(310),new KnowledgeFragmentText(312).setPrice(3).setUnlockRequirements(311),new KnowledgeFragmentText(313).setPrice(2).setUnlockRequirements(310),new KnowledgeFragmentText(314).setPrice(3).setUnlockRequirements(313),new KnowledgeFragmentText(315).setPrice(2).setUnlockRequirements(310),new KnowledgeFragmentText(316).setPrice(2).setUnlockRequirements(315),new KnowledgeFragmentText(317).setPrice(2).setUnlockRequirements(315),new KnowledgeFragmentText(318).setPrice(2).setUnlockRequirements(315),new KnowledgeFragmentText(319).setPrice(3).setUnlockRequirements(310).setUnlockCascade(290)}),ANGRY_ENDERMAN_LINKED.setPos(0,7)});
  KnowledgeCategories.METEOROIDS.addKnowledgeObjects(new KnowledgeObject[]{METEOROID.setCategoryObject(KnowledgeCategories.METEOROIDS).setUnlockPrice(40).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(320).setPrice(7)}),SPHALERITE.setPos(0,0).setUnlockPrice(12).setDiscoveryReward(6).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(330).setPrice(4).setUnlockOnDiscovery(),new KnowledgeFragmentText(331).setPrice(4).setUnlockOnDiscovery().setUnlockRequirements(330)}),SPHALERITE_WITH_STARDUST.setPos(2,2).setUnlockPrice(12).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(340).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(341).setPrice(5).setUnlockRequirements(340),new KnowledgeFragmentText(342).setPrice(4).setUnlockRequirements(341)}),STARDUST.setPos(4,4).setUnlockPrice(20).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(350).setPrice(4).setUnlockOnDiscovery()}),DECOMPOSITION_TABLE.setPos(5,7).setUnlockPrice(12).setDiscoveryReward(6).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(880).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(881).setRecipeFromRegistry(new ItemStack(BlockList.decomposition_table)).setPrice(10).setUnlockRequirements(880),new KnowledgeFragmentText(882).setPrice(4).setUnlockRequirements(880),new KnowledgeFragmentText(883).setPrice(5).setUnlockRequirements(880),new KnowledgeFragmentText(884).setPrice(4).setUnlockRequirements(883),new KnowledgeFragmentText(885).setPrice(4).setUnlockRequirements(882)}),EXPERIENCE_TABLE.setPos(7,7).setUnlockPrice(12).setDiscoveryReward(6).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(970).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(971).setRecipeFromRegistry(new ItemStack(BlockList.experience_table)).setPrice(10).setUnlockRequirements(970),new KnowledgeFragmentText(972).setPrice(4).setUnlockRequirements(970),new KnowledgeFragmentText(973).setPrice(7).setUnlockRequirements(970),new KnowledgeFragmentText(974).setPrice(4).setUnlockRequirements(973)}),ACCUMULATION_TABLE.setPos(5,9).setUnlockPrice(18).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(980).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(981).setRecipeFromRegistry(new ItemStack(BlockList.accumulation_table)).setPrice(10).setUnlockRequirements(980),new KnowledgeFragmentText(982).setPrice(4).setUnlockRequirements(980),new KnowledgeFragmentText(983).setPrice(4).setUnlockRequirements(980)}),EXTRACTION_TABLE.setPos(7,9).setUnlockPrice(18).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(990).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(991).setRecipeFromRegistry(new ItemStack(BlockList.extraction_table)).setPrice(10).setUnlockRequirements(990),new KnowledgeFragmentText(992).setPrice(5).setUnlockRequirements(990),new KnowledgeFragmentText(993).setPrice(5).setUnlockRequirements(990),new KnowledgeFragmentText(994).setPrice(4).setUnlockRequirements(993),new KnowledgeFragmentText(995).setPrice(4).setUnlockRequirements(990)})});
  KnowledgeCategories.BIOME_ISLANDS.addKnowledgeObjects(new KnowledgeObject[]{BIOME_ISLANDS.setCategoryObject(KnowledgeCategories.BIOME_ISLANDS).setUnlockPrice(50).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(720).setPrice(7),new KnowledgeFragmentText(721).setPrice(4).setUnlockRequirements(720),new KnowledgeFragmentText(722).setPrice(4).setUnlockRequirements(721),new KnowledgeFragmentText(723).setPrice(4).setUnlockRequirements(721)}),INSTABILITY_ORB_ORE.setPos(0,3).setUnlockPrice(15).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(360).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(361).setPrice(4).setUnlockRequirements(360),new KnowledgeFragmentText(362).setPrice(4).setUnlockRequirements(360),new KnowledgeFragmentText(363).setPrice(5).setUnlockRequirements(362)}),STARDUST_ORE.setPos(0,0).setUnlockPrice(15).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(370).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(371).setPrice(4).setUnlockRequirements(370),new KnowledgeFragmentText(372).setPrice(4).setUnlockRequirements(371),new KnowledgeFragmentText(373).setPrice(5).setUnlockRequirements(372)}),INSTABILITY_ORB.setPos(2,3).setUnlockPrice(20).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(380).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(381).setPrice(7).setUnlockRequirements(380),new KnowledgeFragmentText(382).setPrice(5).setUnlockRequirements(381),new KnowledgeFragmentText(383).setNonBuyableRedirect(POTION_OF_INSTABILITY)}),POTION_OF_INSTABILITY.setPos(4,3).setUnlockPrice(15).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(740).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentItemConversion(741).setItems(new ItemStack(ItemList.instability_orb),new ItemStack(ItemList.potion_of_instability)).setPrice(3).setUnlockRequirements(740).setUnlockCascade(134,383)}),STARDUST_LINKED.setPos(2,0)});
  KnowledgeCategories.BIOME_ISLAND_FOREST.addKnowledgeObjects(new KnowledgeObject[]{INFESTED_FOREST_BIOME.setCategoryObject(KnowledgeCategories.BIOME_ISLAND_FOREST).setUnlockPrice(60).setDiscoveryReward(45).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(390).setPrice(7),new KnowledgeFragmentText(391).setPrice(4).setUnlockRequirements(390),new KnowledgeFragmentText(392).setPrice(4).setUnlockRequirements(391),new KnowledgeFragmentText(393).setPrice(15).setUnlockRequirements(391),new KnowledgeFragmentText(394).setPrice(15).setUnlockRequirements(391)}),INFESTED_END_STONE.setPos(0,0).setUnlockPrice(7).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(400).setPrice(2).setUnlockOnDiscovery()}),INFESTED_GRASS.setPos(2,0).setUnlockPrice(2).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(410).setPrice(2).setUnlockOnDiscovery()}),INFESTED_TALL_GRASS.setPos(4,0).setUnlockPrice(2).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(411).setPrice(2).setUnlockOnDiscovery()}),INFESTED_FERN.setPos(6,0).setUnlockPrice(2).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(412).setPrice(2).setUnlockOnDiscovery()}),INFESTATION_REMEDY.setPos(4,2).setUnlockPrice(12).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(730).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentItemConversion(731).setItems(new ItemStack(ItemList.silverfish_blood),new ItemStack(ItemList.infestation_remedy)).setPrice(2).setUnlockRequirements(730).setUnlockCascade(135)}),INFESTED_BAT.setPos(2,2).setUnlockPrice(8).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(480).setPrice(4).setUnlockOnDiscovery()}),SILVERFISH_LINKED.setPos(0,2),THORNY_BUSH.setPos(0,7).setUnlockPrice(8).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(420).setPrice(4).setUnlockOnDiscovery(),new KnowledgeFragmentText(421).setPrice(4).setUnlockRequirements(420)}),SPOOKY_LOG.setPos(2,8).setUnlockPrice(25).setDiscoveryReward(22).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(430).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(431).setPrice(4).setUnlockRequirements(430),new KnowledgeFragmentText(432).setPrice(7).setUnlockRequirements(430).setUnlockCascade(451),new KnowledgeFragmentText(433).setPrice(5).setUnlockRequirements(430),new KnowledgeFragmentText(434).setPrice(4).setUnlockRequirements(433),new KnowledgeFragmentText(435).setPrice(4).setUnlockRequirements(433),new KnowledgeFragmentText(436).setPrice(10).setUnlockRequirements(435).setUnlockCascade(461),new KnowledgeFragmentCrafting(437).setRecipeFromRegistry(new ItemStack(BlockList.spooky_log)).setPrice(5).setUnlockRequirements(430).setUnlockCascade(452)}),SPOOKY_LEAVES.setPos(2,6).setUnlockPrice(12).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(440).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(441).setPrice(4).setUnlockRequirements(440),new KnowledgeFragmentCrafting(442).setRecipeFromRegistry(new ItemStack(BlockList.spooky_leaves)).setPrice(5).setUnlockRequirements(440).setUnlockCascade(453)}),DRY_SPLINTER.setPos(4,7).setUnlockPrice(15).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(450).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentText(451).setPrice(3).setUnlockRequirements(450).setUnlockCascade(432),new KnowledgeFragmentCrafting(452).setRecipeFromRegistry(new ItemStack(BlockList.spooky_log)).setPrice(5).setUnlockRequirements(450).setUnlockCascade(437),new KnowledgeFragmentCrafting(453).setRecipeFromRegistry(new ItemStack(BlockList.spooky_leaves)).setPrice(5).setUnlockRequirements(450).setUnlockCascade(442)}),GHOST_AMULET.setPos(7,7).setUnlockPrice(24).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(460).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(461).setPrice(10).setUnlockRequirements(460).setUnlockCascade(436),new KnowledgeFragmentText(462).setPrice(10).setUnlockRequirements(460),new KnowledgeFragmentText(463).setPrice(7).setUnlockRequirements(462).setUnlockCascade(117)}),ECTOPLASM.setPos(9,7).setUnlockPrice(35).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(470).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(471).setRecipeFromRegistry(new ItemStack(ItemList.spectral_tear)).setNonBuyableRedirect(SPECTRAL_TEAR)}),SPECTRAL_TEAR.setPos(9,9).setUnlockPrice(10).setDiscoveryReward(6).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(920).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(921).setRecipeFromRegistry(new ItemStack(ItemList.spectral_tear)).setPrice(7).setUnlockRequirements(920).setUnlockCascade(471),new KnowledgeFragmentCrafting(922).setRecipeFromRegistry(new ItemStack(ItemList.living_matter)).setNonBuyableRedirect(LIVING_MATTER)}),LIVING_MATTER.setPos(11,9).setUnlockPrice(20).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(930).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(931).setRecipeFromRegistry(new ItemStack(ItemList.living_matter)).setPrice(10).setUnlockRequirements(930).setUnlockCascade(922)}),CURSE.setPos(13,9).setUnlockPrice(40).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(940).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(941).setPrice(7).setUnlockRequirements(940),new KnowledgeFragmentText(942).setPrice(5).setUnlockRequirements(941),new KnowledgeFragmentText(943).setPrice(5).setUnlockRequirements(941),new KnowledgeFragmentText(944).setPrice(4).setUnlockRequirements(943),new KnowledgeFragmentText(945).setPrice(7).setUnlockRequirements(941)}).addFragments(KnowledgeUtils.createCurseFragments(1300,941)),POTION_OF_PURITY.setPos(15,8).setUnlockPrice(15).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(950).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(951).setPrice(5).setUnlockRequirements(950).setUnlockCascade(136)}),CURSE_AMULET.setPos(15,10).setUnlockPrice(10).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1400).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(1401).setPrice(4).setUnlockRequirements(1400)}),RAVAGED_DUNGEON.setPos(4,13).setUnlockPrice(30).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(490).setPrice(7),new KnowledgeFragmentText(491).setPrice(5).setUnlockRequirements(490),new KnowledgeFragmentText(492).setPrice(4).setUnlockRequirements(491),new KnowledgeFragmentText(493).setPrice(5).setUnlockRequirements(492),new KnowledgeFragmentText(494).setPrice(4).setUnlockRequirements(492)}),RAVAGED_BRICK.setPos(4,15).setUnlockPrice(10).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(500).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(501).setPrice(4).setUnlockOnDiscovery(),new KnowledgeFragmentText(505).setPrice(7).setUnlockRequirements(500),new KnowledgeFragmentCrafting(502).setRecipeFromRegistry(new ItemStack(BlockList.ravaged_brick_stairs,4)).setPrice(4).setUnlockRequirements(500).setUnlockCascade(513),new KnowledgeFragmentCrafting(503).setRecipeFromRegistry(new ItemStack(BlockList.ravaged_brick_slab,6)).setPrice(4).setUnlockRequirements(500).setUnlockCascade(515),new KnowledgeFragmentCrafting(504).setRecipeFromRegistry(new ItemStack(BlockList.ravaged_brick_fence,6)).setPrice(4).setUnlockRequirements(500).setUnlockCascade(517)}),RAVAGED_BRICK_GLOWING.setPos(6,15).setUnlockPrice(2).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(510).setPrice(5).setUnlockOnDiscovery()}),RAVAGED_BRICK_STAIRS.setPos(2,15).setUnlockPrice(2).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(512).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(513).setRecipeFromRegistry(new ItemStack(BlockList.ravaged_brick_stairs,4)).setPrice(4).setUnlockRequirements(512).setUnlockCascade(502)}),RAVAGED_BRICK_SLAB.setPos(0,15).setUnlockPrice(2).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(514).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(515).setRecipeFromRegistry(new ItemStack(BlockList.ravaged_brick_slab,6)).setPrice(4).setUnlockRequirements(514).setUnlockCascade(503)}),RAVAGED_BRICK_FENCE.setPos(8,15).setUnlockPrice(2).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(516).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(517).setRecipeFromRegistry(new ItemStack(BlockList.ravaged_brick_fence,6)).setPrice(4).setUnlockRequirements(516).setUnlockCascade(504)}),CHARM_POUCH.setPos(7,18).setUnlockPrice(40).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(520).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(521).setRecipeFromRegistry(new ItemStack(ItemList.charm_pouch)).setPrice(10).setUnlockRequirements(520).setUnlockCascade(533),new KnowledgeFragmentText(522).setPrice(5).setUnlockRequirements(520)}),RUNES.setPos(3,18).setUnlockPrice(25).setDiscoveryReward(18).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(530).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(531).setPrice(5).setUnlockRequirements(530),new KnowledgeFragmentText(532).setPrice(5).setUnlockRequirements(530),new KnowledgeFragmentCrafting(533).setRecipeFromRegistry(new ItemStack(ItemList.charm_pouch)).setNonBuyableRedirect(CHARM_POUCH)}),CHARMS.setPos(5,18).setUnlockPrice(35).setDiscoveryReward(25).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(540).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(541).setPrice(7).setUnlockRequirements(540)}).addFragments(KnowledgeUtils.createCharmFragments(1000,541)),LOUSE.setPos(1,18).setUnlockPrice(15).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(550).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(551).setPrice(5).setUnlockRequirements(550),new KnowledgeFragmentText(552).setPrice(7).setUnlockRequirements(551),new KnowledgeFragmentText(553).setPrice(5).setUnlockRequirements(552)})});
  KnowledgeCategories.BIOME_ISLAND_MOUNTAINS.addKnowledgeObjects(new KnowledgeObject[]{BURNING_MOUNTAINS_BIOME.setCategoryObject(KnowledgeCategories.BIOME_ISLAND_MOUNTAINS).setUnlockPrice(60).setDiscoveryReward(45).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(560).setPrice(7),new KnowledgeFragmentText(561).setPrice(4).setUnlockRequirements(560),new KnowledgeFragmentText(562).setPrice(15).setUnlockRequirements(561),new KnowledgeFragmentText(563).setPrice(15).setUnlockRequirements(561)}),BURNED_END_STONE.setPos(0,0).setUnlockPrice(5).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(570).setPrice(2).setUnlockOnDiscovery()}),FLAMEWEED_1.setPos(5,0).setUnlockPrice(3).setDiscoveryReward(4).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(582).setPrice(4).setUnlockOnDiscovery()}),FLAMEWEED_2.setPos(7,0).setUnlockPrice(3).setDiscoveryReward(4).addFragments(new KnowledgeFragment[]{FLAMEWEED_1.getFragments().iterator().next()}),FLAMEWEED_3.setPos(9,0).setUnlockPrice(3).setDiscoveryReward(4).addFragments(new KnowledgeFragment[]{FLAMEWEED_1.getFragments().iterator().next()}),IGNEOUS_ROCK_ORE_LINKED.setPos(2,0),IGNEOUS_ROCK_LINKED.setPos(2,2),CINDER.setPos(0,7).setUnlockPrice(5).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(590).setPrice(5).setUnlockOnDiscovery()}),LILYFIRE.setPos(13,7).setUnlockPrice(4).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(580).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(581).setRecipeFromRegistry(new ItemStack(Items.dye,2,14),new ItemStack[]{new ItemStack(BlockList.crossed_decoration,1,BlockCrossedDecoration.dataLilyFire)}).setPrice(4).setUnlockRequirements(580)}),DUNGEON_PUZZLE.setPos(10,7).setUnlockPrice(15).setDiscoveryReward(25).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(900).setPrice(10).setUnlockOnDiscovery(),new KnowledgeFragmentText(901).setPrice(7).setUnlockRequirements(900),new KnowledgeFragmentText(902).setPrice(7).setUnlockRequirements(901),new KnowledgeFragmentText(903).setPrice(10).setUnlockRequirements(901)}),FIERY_ESSENCE_ALTAR.setPos(5,9).setUnlockPrice(25).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(600).setPrice(10).setUnlockOnDiscovery(),new KnowledgeFragmentText(601).setPrice(8).setUnlockRequirements(600),new KnowledgeFragmentText(602).setPrice(5).setUnlockRequirements(600)}),FIERY_ESSENCE.setPos(5,7),FIRE_GOLEM.setPos(2,6).setUnlockPrice(20).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(610).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(611).setPrice(4).setUnlockRequirements(610),new KnowledgeFragmentText(612).setPrice(5).setUnlockRequirements(611),new KnowledgeFragmentText(613).setPrice(5).setUnlockRequirements(611),new KnowledgeFragmentText(614).setPrice(5).setUnlockRequirements(610).setUnlockCascade(82)}),SCORCHING_LENS.setPos(2,8).setUnlockPrice(20).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(620).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(621).setPrice(4).setUnlockRequirements(620),new KnowledgeFragmentText(622).setPrice(5).setUnlockRequirements(621),new KnowledgeFragmentText(623).setPrice(5).setUnlockRequirements(620).setUnlockCascade(82)}),FIRE_FIEND.setPos(8,7).setUnlockPrice(30).setDiscoveryReward(18).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(910).setPrice(10).setUnlockOnDiscovery(),new KnowledgeFragmentText(911).setPrice(5).setUnlockRequirements(910),new KnowledgeFragmentText(912).setPrice(4).setUnlockRequirements(910),new KnowledgeFragmentText(913).setPrice(5).setUnlockRequirements(912),new KnowledgeFragmentText(914).setPrice(5).setUnlockRequirements(912),new KnowledgeFragmentText(915).setPrice(7).setUnlockRequirements(912),new KnowledgeFragmentText(916).setPrice(7).setUnlockRequirements(915),new KnowledgeFragmentText(917).setPrice(5).setUnlockRequirements(910)}),INFERNIUM.setPos(2,13).setUnlockPrice(15).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(630).setPrice(7).setUnlockOnDiscovery().setUnlockCascade(657),new KnowledgeFragmentCrafting(631).setRecipeFromRegistry(new ItemStack(ItemList.scorching_pickaxe)).setNonBuyableRedirect(SCORCHING_PICKAXE)}),SCORCHING_PICKAXE.setPos(4,13).setUnlockPrice(40).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(640).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(641).setPrice(7).setUnlockRequirements(640),new KnowledgeFragmentText(642).setPrice(5).setUnlockRequirements(641),new KnowledgeFragmentCrafting(643).setRecipeFromRegistry(new ItemStack(ItemList.scorching_pickaxe)).setPrice(10).setUnlockRequirements(640).setUnlockCascade(631)}),HAUNTED_MINER.setPos(0,13).setUnlockPrice(25).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(650).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(651).setPrice(7).setUnlockRequirements(651),new KnowledgeFragmentText(652).setPrice(4).setUnlockRequirements(650),new KnowledgeFragmentText(653).setPrice(4).setUnlockRequirements(650),new KnowledgeFragmentText(654).setPrice(4).setUnlockRequirements(653),new KnowledgeFragmentText(655).setPrice(4).setUnlockRequirements(653),new KnowledgeFragmentText(656).setPrice(4).setUnlockRequirements(653),new KnowledgeFragmentText(657).setPrice(5).setUnlockRequirements(650).setUnlockCascade(630)})});
  KnowledgeCategories.BIOME_ISLAND_ENCHISLAND.addKnowledgeObjects(new KnowledgeObject[]{ENCHANTED_ISLAND_BIOME.setCategoryObject(KnowledgeCategories.BIOME_ISLAND_ENCHISLAND).setUnlockPrice(60).setDiscoveryReward(45).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(660).setPrice(5),new KnowledgeFragmentText(661).setPrice(4).setUnlockRequirements(660),new KnowledgeFragmentText(662).setPrice(15).setUnlockRequirements(661),new KnowledgeFragmentText(663).setPrice(15).setUnlockRequirements(661),new KnowledgeFragmentText(665).setPrice(7).setUnlockRequirements(661).setUnlockCascade(810)}),ENCHANTED_END_STONE.setPos(0,0).setUnlockPrice(5).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(670).setPrice(2).setUnlockOnDiscovery()}),FALLING_OBSIDIAN_LINKED.setPos(2,0),PERSEGRIT.setPos(4,0).setUnlockPrice(7).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(810).setPrice(5).setUnlockOnDiscovery().setUnlockCascade(665),new KnowledgeFragmentText(811).setPrice(5).setUnlockRequirements(810),new KnowledgeFragmentText(812).setPrice(2).setUnlockRequirements(810)}),ENDERMAN_LINKED.setPos(0,2),ARCANE_SHARD.setPos(5,6).setUnlockPrice(28).setDiscoveryReward(27).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1420).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(1421).setPrice(2),new KnowledgeFragmentCrafting(1422).setRecipeFromRegistry(new ItemStack(ItemList.blank_gem)).setPrice(5).setUnlockCascade(773,1431),new KnowledgeFragmentCrafting(1423).setRecipeFromRegistry(new ItemStack(ItemList.spatial_dash_gem)).setPrice(7).setUnlockCascade(295),new KnowledgeFragmentCrafting(1424).setRecipeFromRegistry(new ItemStack(ItemList.transference_gem)).setPrice(7).setUnlockCascade(1441)}),BLANK_GEM.setPos(7,6).setUnlockPrice(15).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1430).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(1431).setRecipeFromRegistry(new ItemStack(ItemList.blank_gem)).setNonBuyableRedirect(ARCANE_SHARD)}),SPATIAL_DASH_GEM_LINKED.setPos(9,6),TRANSFERENCE_GEM.setPos(11,6).setUnlockPrice(20).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1440).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(1441).setRecipeFromRegistry(new ItemStack(ItemList.transference_gem)).setNonBuyableRedirect(ARCANE_SHARD),new KnowledgeFragmentText(1442).setPrice(5).setUnlockRequirements(1440),new KnowledgeFragmentText(1443).setPrice(5).setUnlockRequirements(1442),new KnowledgeFragmentText(1444).setPrice(4).setUnlockRequirements(1443),new KnowledgeFragmentText(1445).setPrice(4).setUnlockRequirements(1444),new KnowledgeFragmentText(1446).setPrice(5).setUnlockRequirements(1443)}),BABY_ENDERMAN.setPos(0,6).setUnlockPrice(25).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(680).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(681).setPrice(4).setUnlockRequirements(680),new KnowledgeFragmentText(682).setPrice(4).setUnlockRequirements(680),new KnowledgeFragmentText(683).setPrice(5).setUnlockRequirements(682),new KnowledgeFragmentText(684).setPrice(5).setUnlockRequirements(682)}),HOMELAND_ENDERMAN.setPos(2,6).setUnlockPrice(25).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(790).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(791).setPrice(5).setUnlockRequirements(790),new KnowledgeFragmentText(792).setPrice(5).setUnlockRequirements(791),new KnowledgeFragmentText(793).setPrice(5).setUnlockRequirements(791)}),LABORATORY.setPos(3,10).setUnlockPrice(30).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1460).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(1461).setPrice(5).setUnlockRequirements(1460),new KnowledgeFragmentText(1462).setPrice(5).setUnlockRequirements(1461),new KnowledgeFragmentText(1463).setPrice(5).setUnlockRequirements(1462)}),LABORATORY_OBSIDIAN.setPos(0,12).setUnlockPrice(5).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1450).setPrice(4).setUnlockOnDiscovery()}),LABORATORY_GLASS.setPos(2,12).setUnlockPrice(5).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1451).setPrice(4).setUnlockOnDiscovery()}),LABORATORY_FLOOR.setPos(4,12).setUnlockPrice(5).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1452).setPrice(4).setUnlockOnDiscovery()}),LABORATORY_STAIRS.setPos(6,12).setUnlockPrice(5).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1453).setPrice(4).setUnlockOnDiscovery()}),OBSIDIAN_FRAGMENT.setPos(2,15).setUnlockPrice(15).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(820).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(821).setRecipeFromRegistry(new ItemStack(ItemList.obsidian_rod)).setNonBuyableRedirect(OBSIDIAN_ROD),new KnowledgeFragmentCrafting(822).setRecipeFromRegistry(new ItemStack(Blocks.obsidian)).setPrice(5).setUnlockRequirements(820),new KnowledgeFragmentCrafting(823).setRecipeFromRegistry(new ItemStack(BlockList.obsidian_special,1,0)).setPrice(4).setUnlockRequirements(822),new KnowledgeFragmentCrafting(824).setRecipeFromRegistry(new ItemStack(BlockList.obsidian_special,1,1)).setPrice(4).setUnlockRequirements(822),new KnowledgeFragmentCrafting(825).setRecipeFromRegistry(new ItemStack(BlockList.obsidian_special,1,2)).setPrice(4).setUnlockRequirements(822)}),OBSIDIAN_ROD.setPos(4,15).setUnlockPrice(7).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(830).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(831).setRecipeFromRegistry(new ItemStack(ItemList.obsidian_rod)).setPrice(5).setUnlockRequirements(830).setUnlockCascade(821),new KnowledgeFragmentCrafting(832).setRecipeFromRegistry(new ItemStack(ItemList.energy_wand)).setNonBuyableRedirect(ENERGY_WAND)}),AURICION.setPos(12,15).setUnlockPrice(7).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(870).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(871).setPrice(5).setUnlockRequirements(870),new KnowledgeFragmentCrafting(872).setRecipeFromRegistry(new ItemStack(ItemList.energy_wand_core)).setPrice(7).setUnlockRequirements(870).setUnlockCascade(841)}),ENERGY_WAND_CORE.setPos(10,15).setUnlockPrice(7).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(840).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(841).setRecipeFromRegistry(new ItemStack(ItemList.energy_wand_core)).setPrice(7).setUnlockRequirements(840).setUnlockCascade(872),new KnowledgeFragmentCrafting(842).setRecipeFromRegistry(new ItemStack(ItemList.energy_wand)).setNonBuyableRedirect(ENERGY_WAND)}),ENERGY_WAND.setPos(7,15).setUnlockPrice(35).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(850).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(851).setRecipeFromRegistry(new ItemStack(ItemList.energy_wand)).setPrice(10).setUnlockRequirements(850).setUnlockCascade(832,842),new KnowledgeFragmentText(852).setPrice(7).setUnlockRequirements(850),new KnowledgeFragmentText(853).setPrice(5).setUnlockRequirements(852)}),ENDER_GUARDIAN.setPos(0,15).setUnlockPrice(20).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(690).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(691).setPrice(5).setUnlockRequirements(690),new KnowledgeFragmentText(692).setPrice(7).setUnlockRequirements(690),new KnowledgeFragmentText(694).setPrice(5).setUnlockRequirements(690),new KnowledgeFragmentText(693).setPrice(5).setUnlockRequirements(690)}),ENDERMAGE.setPos(14,15).setUnlockPrice(20).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(860).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(861).setPrice(5).setUnlockRequirements(860),new KnowledgeFragmentText(862).setPrice(7).setUnlockRequirements(860),new KnowledgeFragmentText(863).setPrice(5).setUnlockRequirements(860),new KnowledgeFragmentText(864).setPrice(4).setUnlockRequirements(863)})});
  Stopwatch.finish(""String_Node_Str"");
  if (Log.isDebugEnabled()) {
    Stopwatch.time(""String_Node_Str"");
    for (    KnowledgeCategory category : KnowledgeCategories.categoryList) {
      if (category.getCategoryObject() == null)       throw new IllegalStateException(""String_Node_Str"" + category.getTooltip() + ""String_Node_Str"");
    }
    int amtObjects=0, amtFragments=0, totalObjPrice=0, totalFragPrice=0, totalFragPriceExcCascaded=0, totalFragPriceExcDiscovery=0, totalReward=0;
    TIntHashSet cascaded=new TIntHashSet();
    for (    KnowledgeObject<?> obj : KnowledgeObject.getAllObjects()) {
      if (obj == HELP)       continue;
 else       if (obj.getDiscoveryReward() == 0 || obj.getUnlockPrice() == 0)       throw new IllegalStateException(""String_Node_Str"" + obj.globalID + ""String_Node_Str""+ obj.getUnlocalizedTooltip()+ ""String_Node_Str""+ obj.getDiscoveryReward()+ ""String_Node_Str""+ obj.getUnlockPrice()+ ""String_Node_Str"");
      for (      KnowledgeFragment fragment : obj.getFragments()) {
        if (fragment.getPrice() == 0)         throw new IllegalStateException(""String_Node_Str"" + fragment.globalID + ""String_Node_Str"");
 else         if (!fragment.isBuyable())         continue;
        totalFragPrice+=fragment.getPrice();
        if (!fragment.isUnlockedOnDiscovery())         totalFragPriceExcDiscovery+=fragment.getPrice();
        if (!cascaded.contains(fragment.globalID))         totalFragPriceExcCascaded+=fragment.getPrice();
        for (        int id : fragment.getUnlockRequirements()) {
          if (KnowledgeFragment.getById(id) == null)           throw new IllegalStateException(""String_Node_Str"" + fragment.globalID + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
        for (        int id : fragment.getUnlockCascade()) {
          if (KnowledgeFragment.getById(id) == null)           throw new IllegalStateException(""String_Node_Str"" + fragment.globalID + ""String_Node_Str""+ id+ ""String_Node_Str"");
          cascaded.add(id);
        }
      }
      ++amtObjects;
      amtFragments+=obj.getFragments().size();
      totalObjPrice+=obj.getUnlockPrice();
      totalReward+=obj.getDiscoveryReward();
    }
    for (    IEnhancementEnum enhancement : EnhancementHandler.getAllEnhancements()) {
      if (KnowledgeFragmentEnhancement.getEnhancementFragment(enhancement) == null)       throw new IllegalStateException(""String_Node_Str"" + enhancement);
    }
    Log.debug(""String_Node_Str"",amtObjects);
    Log.debug(""String_Node_Str"",amtFragments);
    Log.debug(""String_Node_Str"",totalObjPrice);
    Log.debug(""String_Node_Str"",totalFragPrice);
    Log.debug(""String_Node_Str"",totalFragPriceExcCascaded);
    Log.debug(""String_Node_Str"",totalFragPriceExcDiscovery);
    Log.debug(""String_Node_Str"",totalFragPriceExcCascaded - (totalFragPrice - totalFragPriceExcDiscovery));
    Log.debug(""String_Node_Str"",totalObjPrice + totalFragPriceExcCascaded - (totalFragPrice - totalFragPriceExcDiscovery));
    Log.debug(""String_Node_Str"",totalReward);
    Stopwatch.finish(""String_Node_Str"");
  }
}","public static void initialize(){
  Stopwatch.time(""String_Node_Str"");
  HELP.setNonBuyable().addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(0),new KnowledgeFragmentText(1),new KnowledgeFragmentText(2),new KnowledgeFragmentText(3),new KnowledgeFragmentText(4),new KnowledgeFragmentText(5),new KnowledgeFragmentText(6),new KnowledgeFragmentText(7),new KnowledgeFragmentText(8),new KnowledgeFragmentText(9),new KnowledgeFragmentText(18)});
  if (Loader.isModLoaded(""String_Node_Str"")) {
    HELP.addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(19)});
  }
  ESSENCE.setNonBuyable().setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(80).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentText(81).setPrice(2).setUnlockCascade(704),new KnowledgeFragmentText(82).setPrice(2).setUnlockCascade(614,623)});
  KnowledgeCategories.OVERWORLD.addKnowledgeObjects(new KnowledgeObject[]{STRONGHOLD.setCategoryObject(KnowledgeCategories.OVERWORLD).setUnlockPrice(5).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(710).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(711).setPrice(2).setUnlockRequirements(710),new KnowledgeFragmentText(712).setPrice(2).setUnlockRequirements(710),new KnowledgeFragmentText(713).setPrice(3).setUnlockRequirements(712)}),ENDERMAN_HEAD.setPos(2,0).setUnlockPrice(5).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(20).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentText(21).setPrice(2).setUnlockRequirements(20)}),MUSIC_DISKS.setPos(4,0).setUnlockPrice(5).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(30).setPrice(2)}),END_PORTAL.setPos(2,6).setNonBuyable().setDiscoveryReward(28).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1410).setNonBuyable().setUnlockOnDiscovery(),new KnowledgeFragmentText(1411).setNonBuyable().setUnlockOnDiscovery(),new KnowledgeFragmentText(1412).setNonBuyable().setUnlockOnDiscovery(),new KnowledgeFragmentText(1413).setNonBuyable().setUnlockOnDiscovery()}),BASIC_ESSENCE_ALTAR.setPos(3,9).setNonBuyable().setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentCrafting(50).setRecipeFromRegistry(new ItemStack(BlockList.essence_altar)).setPrice(8).setUnlockCascade(42),new KnowledgeFragmentText(51).setUnlockOnDiscovery().setPrice(5).setUnlockRequirements(50),new KnowledgeFragmentText(52).setPrice(2).setUnlockRequirements(51)}),ENDERMAN.setPos(1,3).setUnlockPrice(5).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(60).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(61).setPrice(2).setUnlockRequirements(60),new KnowledgeFragmentText(62).setPrice(2).setUnlockRequirements(60),new KnowledgeFragmentText(63).setPrice(3).setUnlockRequirements(60)}),SILVERFISH.setPos(3,3).setUnlockPrice(5).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(70).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(71).setPrice(2).setUnlockRequirements(70),new KnowledgeFragmentText(72).setPrice(3).setUnlockRequirements(71)})});
  KnowledgeCategories.DRAGON_LAIR.addKnowledgeObjects(new KnowledgeObject[]{DRAGON_LAIR.setCategoryObject(KnowledgeCategories.DRAGON_LAIR).setUnlockPrice(45).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(750).setPrice(5),new KnowledgeFragmentText(751).setPrice(2).setUnlockRequirements(750).setUnlockCascade(191),new KnowledgeFragmentText(752).setPrice(1).setUnlockRequirements(751),new KnowledgeFragmentText(753).setPrice(2).setUnlockRequirements(752),new KnowledgeFragmentText(754).setPrice(2).setUnlockRequirements(752),new KnowledgeFragmentText(755).setPrice(2).setUnlockRequirements(752)}),END_STONE.setPos(0,0).setUnlockPrice(5).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(90).setPrice(2).setUnlockOnDiscovery()}),FALLING_OBSIDIAN.setPos(2,0).setUnlockPrice(8).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(100).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentText(101).setPrice(2),new KnowledgeFragmentText(102).setPrice(2).setUnlockRequirements(100),new KnowledgeFragmentText(103).setPrice(2).setUnlockRequirements(100),new KnowledgeFragmentText(104).setPrice(2).setUnlockRequirements(100)}),DRAGON_ESSENCE_ALTAR.setPos(3,10).setUnlockPrice(25).setDiscoveryReward(22).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(110).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(111).setPrice(8).setUnlockRequirements(110),new KnowledgeFragmentText(112).setPrice(3).setUnlockRequirements(111),new KnowledgeFragmentText(113).setPrice(5).setUnlockRequirements(110),new KnowledgeFragmentText(114).setPrice(2).setUnlockRequirements(110),new KnowledgeFragmentItemConversion(115).setItems(new ItemStack(Items.brewing_stand),new ItemStack(ItemList.enhanced_brewing_stand)).setPrice(3).setUnlockRequirements(114).setUnlockCascade(130),new KnowledgeFragmentItemConversion(117).setItems(new ItemStack(ItemList.ghost_amulet),new ItemStack(ItemList.ghost_amulet,1,1)).setNonBuyableRedirect(GHOST_AMULET)}),END_POWDER_ORE.setPos(6,0).setUnlockPrice(15).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(120).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(121).setPrice(2).setUnlockOnDiscovery().setUnlockRequirements(120),new KnowledgeFragmentText(122).setPrice(5).setUnlockRequirements(120),new KnowledgeFragmentText(123).setPrice(3).setUnlockRequirements(122)}),ENHANCED_BREWING_STAND.setPos(4,12).setUnlockPrice(18).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(130).setPrice(3).setUnlockCascade(115),new KnowledgeFragmentText(131).setPrice(2).setUnlockRequirements(130),new KnowledgeFragmentText(132).setPrice(5).setUnlockRequirements(130).setUnlockCascade(166),new KnowledgeFragmentText(137).setPrice(5).setUnlockRequirements(132),new KnowledgeFragmentText(133).setPrice(2).setUnlockRequirements(130),new KnowledgeFragmentItemConversion(134).setItems(new ItemStack(ItemList.instability_orb),new ItemStack(ItemList.potion_of_instability)).setNonBuyableRedirect(INSTABILITY_ORB),new KnowledgeFragmentItemConversion(135).setItems(new ItemStack(ItemList.silverfish_blood),new ItemStack(ItemList.infestation_remedy)).setNonBuyableRedirect(SILVERFISH),new KnowledgeFragmentItemConversion(136).setItems(new ItemStack(ItemList.ectoplasm),new ItemStack(ItemList.potion_of_purity)).setNonBuyableRedirect(ECTOPLASM)}),DRAGON_EGG.setPos(1,8).setUnlockPrice(12).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(150).setPrice(5).setUnlockOnDiscovery().setUnlockCascade(705),new KnowledgeFragmentText(151).setPrice(2).setUnlockRequirements(150),new KnowledgeFragmentText(152).setPrice(8).setUnlockRequirements(150),new KnowledgeFragmentText(153).setPrice(3).setUnlockRequirements(150)}),DRAGON_ESSENCE.setPos(3,8),END_POWDER.setPos(8,0).setUnlockPrice(20).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(160).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(161).setPrice(5).setUnlockOnDiscovery().setUnlockRequirements(160),new KnowledgeFragmentText(162).setPrice(2).setUnlockRequirements(161),new KnowledgeFragmentText(163).setPrice(2).setUnlockRequirements(161),new KnowledgeFragmentText(164).setPrice(3).setUnlockRequirements(163),new KnowledgeFragmentText(165).setPrice(2).setUnlockRequirements(161),new KnowledgeFragmentText(166).setPrice(5).setUnlockRequirements(160).setUnlockCascade(132),new KnowledgeFragmentText(167).setPrice(3).setUnlockCascade(244)}),ENDER_DRAGON.setPos(1,3).setUnlockPrice(20).setDiscoveryReward(55).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(190).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(191).setPrice(2).setUnlockOnDiscovery().setUnlockRequirements(190).setUnlockCascade(751),new KnowledgeFragmentText(192).setPrice(3).setUnlockRequirements(190),new KnowledgeFragmentText(193).setPrice(3).setUnlockRequirements(191),new KnowledgeFragmentText(194).setPrice(3).setUnlockRequirements(192,193),new KnowledgeFragmentText(195).setPrice(3).setUnlockRequirements(194),new KnowledgeFragmentText(196).setPrice(5).setUnlockRequirements(194),new KnowledgeFragmentText(197).setPrice(2).setUnlockRequirements(196),new KnowledgeFragmentText(198).setPrice(2).setUnlockRequirements(196),new KnowledgeFragmentText(700).setPrice(2).setUnlockRequirements(196),new KnowledgeFragmentText(702).setPrice(2).setUnlockRequirements(196),new KnowledgeFragmentText(703).setPrice(2).setUnlockRequirements(196).setUnlockCascade(210),new KnowledgeFragmentText(704).setPrice(2).setUnlockRequirements(190).setUnlockCascade(81),new KnowledgeFragmentText(705).setPrice(2).setUnlockRequirements(704).setUnlockCascade(150)}),ANGRY_ENDERMAN.setPos(0,5).setUnlockPrice(8).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(200).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(201).setPrice(3).setUnlockRequirements(200)}),VAMPIRE_BAT.setPos(2,5).setUnlockPrice(8).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(210).setPrice(5).setUnlockOnDiscovery().setUnlockCascade(703),new KnowledgeFragmentText(211).setPrice(2).setUnlockRequirements(210),new KnowledgeFragmentText(212).setPrice(3).setUnlockRequirements(210)}),ENDER_PEARL_ENHANCEMENTS.setPos(11,0).setUnlockPrice(8).setDiscoveryReward(10).addFragments(KnowledgeUtils.createEnhancementFragments(EnderPearlEnhancements.class,170,3,10,new int[]{160})),ESSENCE_ALTAR_ENHANCEMENTS.setPos(11,2).setUnlockPrice(10).setDiscoveryReward(10).addFragments(KnowledgeUtils.createEnhancementFragments(EssenceAltarEnhancements.class,1470,5,10,new int[]{160,51})),ENHANCED_BREWING_STAND_ENHANCEMENTS.setPos(11,4).setUnlockPrice(10).setDiscoveryReward(10).addFragments(KnowledgeUtils.createEnhancementFragments(EnhancedBrewingStandEnhancements.class,1500,4,10,new int[]{160,130})),TNT_ENHANCEMENTS.setPos(13,0).setUnlockPrice(10).setDiscoveryReward(10).addFragments(KnowledgeUtils.createEnhancementFragments(TNTEnhancements.class,140,3,10,new int[]{160})),SPATIAL_DASH_GEM_ENHANCEMENTS.setPos(13,2).setUnlockPrice(12).setDiscoveryReward(10).addFragments(KnowledgeUtils.createEnhancementFragments(SpatialDashGemEnhancements.class,1480,4,10,new int[]{160,290})),TRANSFERENCE_GEM_ENHANCEMENTS.setPos(13,4).setUnlockPrice(12).setDiscoveryReward(10).addFragments(KnowledgeUtils.createEnhancementFragments(TransferenceGemEnhancements.class,1490,4,10,new int[]{160,1440}))});
  KnowledgeCategories.ENDSTONE_BLOBS.addKnowledgeObjects(new KnowledgeObject[]{ENDSTONE_BLOB.setCategoryObject(KnowledgeCategories.ENDSTONE_BLOBS).setUnlockPrice(40).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(220).setPrice(5),new KnowledgeFragmentText(221).setPrice(3).setUnlockRequirements(220),new KnowledgeFragmentText(222).setPrice(5).setUnlockRequirements(221),new KnowledgeFragmentText(223).setPrice(5).setUnlockRequirements(221),new KnowledgeFragmentText(224).setPrice(5).setUnlockRequirements(221)}),IGNEOUS_ROCK_ORE.setPos(0,0).setUnlockPrice(10).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(230).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(231).setPrice(2).setUnlockRequirements(230),new KnowledgeFragmentText(232).setPrice(3).setUnlockRequirements(230)}),DEATH_FLOWER.setPos(3,0).setUnlockPrice(15).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(240).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(241).setPrice(2).setUnlockRequirements(240),new KnowledgeFragmentText(242).setPrice(3).setUnlockRequirements(241),new KnowledgeFragmentText(243).setPrice(5).setUnlockRequirements(241),new KnowledgeFragmentText(244).setPrice(3).setUnlockRequirements(241).setUnlockCascade(167),new KnowledgeFragmentCrafting(245).setRecipeFromRegistry(new ItemStack(Items.dye,2,13),new ItemStack[]{new ItemStack(BlockList.death_flower,1,0)}).setPrice(2).setUnlockRequirements(240),new KnowledgeFragmentCrafting(246).setRecipeFromRegistry(new ItemStack(Items.dye,2,8),new ItemStack[]{new ItemStack(BlockList.death_flower,1,15)}).setPrice(2).setUnlockRequirements(243)}),ENDER_GOO.setPos(6,0).setUnlockPrice(8).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(250).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentText(251).setPrice(5).setUnlockRequirements(250),new KnowledgeFragmentText(252).setPrice(2).setUnlockRequirements(251),new KnowledgeFragmentText(253).setPrice(3).setUnlockRequirements(250)}),IGNEOUS_ROCK.setPos(0,2).setUnlockPrice(18).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(260).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentText(261).setPrice(2).setUnlockRequirements(260),new KnowledgeFragmentText(262).setPrice(3).setUnlockRequirements(260),new KnowledgeFragmentText(263).setPrice(3).setUnlockRequirements(260)}),TRANSPORT_BEACON.setPos(9,0).setUnlockPrice(20).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(960).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(961).setPrice(5).setUnlockRequirements(960),new KnowledgeFragmentText(962).setPrice(5).setUnlockRequirements(960),new KnowledgeFragmentText(963).setPrice(3).setUnlockRequirements(960)})});
  KnowledgeCategories.DUNGEON_TOWER.addKnowledgeObjects(new KnowledgeObject[]{DUNGEON_TOWER.setCategoryObject(KnowledgeCategories.DUNGEON_TOWER).setUnlockPrice(55).setDiscoveryReward(25).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(270).setPrice(5),new KnowledgeFragmentText(271).setPrice(3).setUnlockRequirements(270),new KnowledgeFragmentText(272).setPrice(2).setUnlockRequirements(270),new KnowledgeFragmentText(273).setPrice(3).setUnlockRequirements(272),new KnowledgeFragmentText(274).setPrice(5).setUnlockRequirements(272),new KnowledgeFragmentText(275).setPrice(2).setUnlockRequirements(272)}),OBSIDIAN_STAIRS.setPos(3,4).setUnlockPrice(1).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(280).setPrice(2).setUnlockOnDiscovery()}),OBSIDIAN_SMOOTH.setPos(1,0).setUnlockPrice(1).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(281).setPrice(1).setUnlockOnDiscovery()}),OBSIDIAN_CHISELED.setPos(3,0).setUnlockPrice(1).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(282).setPrice(1).setUnlockOnDiscovery()}),OBSIDIAN_PILLAR.setPos(5,0).setUnlockPrice(1).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(283).setPrice(1).setUnlockOnDiscovery()}),OBSIDIAN_SMOOTH_GLOWING.setPos(1,2).setUnlockPrice(1).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(284).setPrice(1).setUnlockOnDiscovery()}),OBSIDIAN_CHISELED_GLOWING.setPos(3,2).setUnlockPrice(1).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(285).setPrice(1).setUnlockOnDiscovery()}),OBSIDIAN_PILLAR_GLOWING.setPos(5,2).setUnlockPrice(1).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(286).setPrice(1).setUnlockOnDiscovery()}),ENERGY.setPos(3,16).setUnlockPrice(35).setDiscoveryReward(25).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(890).setPrice(8),new KnowledgeFragmentText(891).setPrice(5).setUnlockRequirements(890),new KnowledgeFragmentText(892).setPrice(5).setUnlockRequirements(891),new KnowledgeFragmentText(893).setPrice(4).setUnlockRequirements(892),new KnowledgeFragmentText(894).setPrice(8).setUnlockRequirements(893),new KnowledgeFragmentText(895).setPrice(4).setUnlockRequirements(891),new KnowledgeFragmentText(289).setPrice(5).setUnlockRequirements(892),new KnowledgeFragmentText(896).setPrice(5).setUnlockRequirements(892),new KnowledgeFragmentText(897).setPrice(4).setUnlockRequirements(896),new KnowledgeFragmentText(898).setPrice(5).setUnlockRequirements(891),new KnowledgeFragmentText(899).setPrice(5).setUnlockRequirements(891)}),ENDIUM_ORE.setPos(0,12).setUnlockPrice(25).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(760).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(761).setPrice(8).setUnlockOnDiscovery().setUnlockRequirements(760)}),ENDIUM_BLOCK.setPos(4,11).setUnlockPrice(5).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(770).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(771).setRecipeFromRegistry(new ItemStack(BlockList.endium_block)).setPrice(2).setUnlockOnDiscovery().setUnlockRequirements(770).setUnlockCascade(781),new KnowledgeFragmentCrafting(772).setRecipeFromRegistry(new ItemStack(BlockList.void_chest)).setNonBuyableRedirect(VOID_CHEST),new KnowledgeFragmentCrafting(773).setRecipeFromRegistry(new ItemStack(ItemList.blank_gem)).setNonBuyableRedirect(BLANK_GEM)}),VOID_CHEST.setPos(6,11).setUnlockPrice(20).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(800).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(801).setRecipeFromRegistry(new ItemStack(BlockList.void_chest)).setPrice(8).setUnlockRequirements(800).setUnlockCascade(772),new KnowledgeFragmentText(802).setPrice(3).setUnlockRequirements(800)}),SPATIAL_DASH_GEM.setPos(6,7).setUnlockPrice(25).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(290).setPrice(5).setUnlockOnDiscovery().setUnlockCascade(319),new KnowledgeFragmentText(291).setPrice(2).setUnlockRequirements(290),new KnowledgeFragmentText(292).setPrice(3).setUnlockRequirements(291),new KnowledgeFragmentText(293).setPrice(2).setUnlockRequirements(291),new KnowledgeFragmentText(294).setPrice(2).setUnlockRequirements(293),new KnowledgeFragmentCrafting(295).setRecipeFromRegistry(new ItemStack(ItemList.spatial_dash_gem)).setNonBuyableRedirect(ARCANE_SHARD)}),ENDIUM_INGOT.setPos(2,12).setUnlockPrice(30).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(780).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(781).setRecipeFromRegistry(new ItemStack(BlockList.endium_block)).setPrice(2).setUnlockOnDiscovery().setUnlockRequirements(780).setUnlockCascade(771)}),ENDER_EYE.setPos(3,7).setUnlockPrice(20).setDiscoveryReward(32).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(310).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(311).setPrice(2).setUnlockOnDiscovery().setUnlockRequirements(310),new KnowledgeFragmentText(312).setPrice(3).setUnlockRequirements(311),new KnowledgeFragmentText(313).setPrice(2).setUnlockRequirements(310),new KnowledgeFragmentText(314).setPrice(3).setUnlockRequirements(313),new KnowledgeFragmentText(315).setPrice(2).setUnlockRequirements(310),new KnowledgeFragmentText(316).setPrice(2).setUnlockRequirements(315),new KnowledgeFragmentText(317).setPrice(2).setUnlockRequirements(315),new KnowledgeFragmentText(318).setPrice(2).setUnlockRequirements(315),new KnowledgeFragmentText(319).setPrice(3).setUnlockRequirements(310).setUnlockCascade(290)}),ANGRY_ENDERMAN_LINKED.setPos(0,7)});
  KnowledgeCategories.METEOROIDS.addKnowledgeObjects(new KnowledgeObject[]{METEOROID.setCategoryObject(KnowledgeCategories.METEOROIDS).setUnlockPrice(40).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(320).setPrice(7)}),SPHALERITE.setPos(0,0).setUnlockPrice(12).setDiscoveryReward(6).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(330).setPrice(4).setUnlockOnDiscovery(),new KnowledgeFragmentText(331).setPrice(4).setUnlockOnDiscovery().setUnlockRequirements(330)}),SPHALERITE_WITH_STARDUST.setPos(2,2).setUnlockPrice(12).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(340).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(341).setPrice(5).setUnlockRequirements(340),new KnowledgeFragmentText(342).setPrice(4).setUnlockRequirements(341)}),STARDUST.setPos(4,4).setUnlockPrice(20).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(350).setPrice(4).setUnlockOnDiscovery()}),DECOMPOSITION_TABLE.setPos(5,7).setUnlockPrice(12).setDiscoveryReward(6).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(880).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(881).setRecipeFromRegistry(new ItemStack(BlockList.decomposition_table)).setPrice(10).setUnlockRequirements(880),new KnowledgeFragmentText(882).setPrice(4).setUnlockRequirements(880),new KnowledgeFragmentText(883).setPrice(5).setUnlockRequirements(880),new KnowledgeFragmentText(884).setPrice(4).setUnlockRequirements(883),new KnowledgeFragmentText(885).setPrice(4).setUnlockRequirements(882)}),EXPERIENCE_TABLE.setPos(7,7).setUnlockPrice(12).setDiscoveryReward(6).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(970).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(971).setRecipeFromRegistry(new ItemStack(BlockList.experience_table)).setPrice(10).setUnlockRequirements(970),new KnowledgeFragmentText(972).setPrice(4).setUnlockRequirements(970),new KnowledgeFragmentText(973).setPrice(7).setUnlockRequirements(970),new KnowledgeFragmentText(974).setPrice(4).setUnlockRequirements(973)}),ACCUMULATION_TABLE.setPos(5,9).setUnlockPrice(18).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(980).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(981).setRecipeFromRegistry(new ItemStack(BlockList.accumulation_table)).setPrice(10).setUnlockRequirements(980),new KnowledgeFragmentText(982).setPrice(4).setUnlockRequirements(980),new KnowledgeFragmentText(983).setPrice(4).setUnlockRequirements(980)}),EXTRACTION_TABLE.setPos(7,9).setUnlockPrice(18).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(990).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(991).setRecipeFromRegistry(new ItemStack(BlockList.extraction_table)).setPrice(10).setUnlockRequirements(990),new KnowledgeFragmentText(992).setPrice(5).setUnlockRequirements(990),new KnowledgeFragmentText(993).setPrice(5).setUnlockRequirements(990),new KnowledgeFragmentText(994).setPrice(4).setUnlockRequirements(993),new KnowledgeFragmentText(995).setPrice(4).setUnlockRequirements(990)})});
  KnowledgeCategories.BIOME_ISLANDS.addKnowledgeObjects(new KnowledgeObject[]{BIOME_ISLANDS.setCategoryObject(KnowledgeCategories.BIOME_ISLANDS).setUnlockPrice(50).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(720).setPrice(7),new KnowledgeFragmentText(721).setPrice(4).setUnlockRequirements(720),new KnowledgeFragmentText(722).setPrice(4).setUnlockRequirements(721),new KnowledgeFragmentText(723).setPrice(4).setUnlockRequirements(721)}),INSTABILITY_ORB_ORE.setPos(0,3).setUnlockPrice(15).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(360).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(361).setPrice(4).setUnlockRequirements(360),new KnowledgeFragmentText(362).setPrice(4).setUnlockRequirements(360),new KnowledgeFragmentText(363).setPrice(5).setUnlockRequirements(362)}),STARDUST_ORE.setPos(0,0).setUnlockPrice(15).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(370).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(371).setPrice(4).setUnlockRequirements(370),new KnowledgeFragmentText(372).setPrice(4).setUnlockRequirements(371),new KnowledgeFragmentText(373).setPrice(5).setUnlockRequirements(372)}),INSTABILITY_ORB.setPos(2,3).setUnlockPrice(20).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(380).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(381).setPrice(7).setUnlockRequirements(380),new KnowledgeFragmentText(382).setPrice(5).setUnlockRequirements(381),new KnowledgeFragmentText(383).setNonBuyableRedirect(POTION_OF_INSTABILITY)}),POTION_OF_INSTABILITY.setPos(4,3).setUnlockPrice(15).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(740).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentItemConversion(741).setItems(new ItemStack(ItemList.instability_orb),new ItemStack(ItemList.potion_of_instability)).setPrice(3).setUnlockRequirements(740).setUnlockCascade(134,383)}),STARDUST_LINKED.setPos(2,0)});
  KnowledgeCategories.BIOME_ISLAND_FOREST.addKnowledgeObjects(new KnowledgeObject[]{INFESTED_FOREST_BIOME.setCategoryObject(KnowledgeCategories.BIOME_ISLAND_FOREST).setUnlockPrice(60).setDiscoveryReward(45).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(390).setPrice(7),new KnowledgeFragmentText(391).setPrice(4).setUnlockRequirements(390),new KnowledgeFragmentText(392).setPrice(4).setUnlockRequirements(391),new KnowledgeFragmentText(393).setPrice(15).setUnlockRequirements(391),new KnowledgeFragmentText(394).setPrice(15).setUnlockRequirements(391)}),INFESTED_END_STONE.setPos(0,0).setUnlockPrice(7).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(400).setPrice(2).setUnlockOnDiscovery()}),INFESTED_GRASS.setPos(2,0).setUnlockPrice(2).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(410).setPrice(2).setUnlockOnDiscovery()}),INFESTED_TALL_GRASS.setPos(4,0).setUnlockPrice(2).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(411).setPrice(2).setUnlockOnDiscovery()}),INFESTED_FERN.setPos(6,0).setUnlockPrice(2).setDiscoveryReward(3).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(412).setPrice(2).setUnlockOnDiscovery()}),INFESTATION_REMEDY.setPos(4,2).setUnlockPrice(12).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(730).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentItemConversion(731).setItems(new ItemStack(ItemList.silverfish_blood),new ItemStack(ItemList.infestation_remedy)).setPrice(2).setUnlockRequirements(730).setUnlockCascade(135)}),INFESTED_BAT.setPos(2,2).setUnlockPrice(8).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(480).setPrice(4).setUnlockOnDiscovery()}),SILVERFISH_LINKED.setPos(0,2),THORNY_BUSH.setPos(0,7).setUnlockPrice(8).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(420).setPrice(4).setUnlockOnDiscovery(),new KnowledgeFragmentText(421).setPrice(4).setUnlockRequirements(420)}),SPOOKY_LOG.setPos(2,8).setUnlockPrice(25).setDiscoveryReward(22).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(430).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(431).setPrice(4).setUnlockRequirements(430),new KnowledgeFragmentText(432).setPrice(7).setUnlockRequirements(430).setUnlockCascade(451),new KnowledgeFragmentText(433).setPrice(5).setUnlockRequirements(430),new KnowledgeFragmentText(434).setPrice(4).setUnlockRequirements(433),new KnowledgeFragmentText(435).setPrice(4).setUnlockRequirements(433),new KnowledgeFragmentText(436).setPrice(10).setUnlockRequirements(435).setUnlockCascade(461),new KnowledgeFragmentCrafting(437).setRecipeFromRegistry(new ItemStack(BlockList.spooky_log)).setPrice(5).setUnlockRequirements(430).setUnlockCascade(452)}),SPOOKY_LEAVES.setPos(2,6).setUnlockPrice(12).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(440).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(441).setPrice(4).setUnlockRequirements(440),new KnowledgeFragmentCrafting(442).setRecipeFromRegistry(new ItemStack(BlockList.spooky_leaves)).setPrice(5).setUnlockRequirements(440).setUnlockCascade(453)}),DRY_SPLINTER.setPos(4,7).setUnlockPrice(15).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(450).setPrice(2).setUnlockOnDiscovery(),new KnowledgeFragmentText(451).setPrice(3).setUnlockRequirements(450).setUnlockCascade(432),new KnowledgeFragmentCrafting(452).setRecipeFromRegistry(new ItemStack(BlockList.spooky_log)).setPrice(5).setUnlockRequirements(450).setUnlockCascade(437),new KnowledgeFragmentCrafting(453).setRecipeFromRegistry(new ItemStack(BlockList.spooky_leaves)).setPrice(5).setUnlockRequirements(450).setUnlockCascade(442)}),GHOST_AMULET.setPos(7,7).setUnlockPrice(24).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(460).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(461).setPrice(10).setUnlockRequirements(460).setUnlockCascade(436),new KnowledgeFragmentText(462).setPrice(10).setUnlockRequirements(460),new KnowledgeFragmentText(463).setPrice(7).setUnlockRequirements(462).setUnlockCascade(117)}),ECTOPLASM.setPos(9,7).setUnlockPrice(35).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(470).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(471).setRecipeFromRegistry(new ItemStack(ItemList.spectral_tear)).setNonBuyableRedirect(SPECTRAL_TEAR)}),SPECTRAL_TEAR.setPos(9,9).setUnlockPrice(10).setDiscoveryReward(6).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(920).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(921).setRecipeFromRegistry(new ItemStack(ItemList.spectral_tear)).setPrice(7).setUnlockRequirements(920).setUnlockCascade(471),new KnowledgeFragmentCrafting(922).setRecipeFromRegistry(new ItemStack(ItemList.living_matter)).setNonBuyableRedirect(LIVING_MATTER)}),LIVING_MATTER.setPos(11,9).setUnlockPrice(20).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(930).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(931).setRecipeFromRegistry(new ItemStack(ItemList.living_matter)).setPrice(10).setUnlockRequirements(930).setUnlockCascade(922)}),CURSE.setPos(13,9).setUnlockPrice(40).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(940).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(941).setPrice(7).setUnlockRequirements(940),new KnowledgeFragmentText(942).setPrice(5).setUnlockRequirements(941),new KnowledgeFragmentText(943).setPrice(5).setUnlockRequirements(941),new KnowledgeFragmentText(944).setPrice(4).setUnlockRequirements(943),new KnowledgeFragmentText(945).setPrice(7).setUnlockRequirements(941)}).addFragments(KnowledgeUtils.createCurseFragments(1300,941)),POTION_OF_PURITY.setPos(15,8).setUnlockPrice(15).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(950).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(951).setPrice(5).setUnlockRequirements(950).setUnlockCascade(136)}),CURSE_AMULET.setPos(15,10).setUnlockPrice(10).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1400).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(1401).setPrice(4).setUnlockRequirements(1400)}),RAVAGED_DUNGEON.setPos(4,13).setUnlockPrice(30).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(490).setPrice(7),new KnowledgeFragmentText(491).setPrice(5).setUnlockRequirements(490),new KnowledgeFragmentText(492).setPrice(4).setUnlockRequirements(491),new KnowledgeFragmentText(493).setPrice(5).setUnlockRequirements(492),new KnowledgeFragmentText(494).setPrice(4).setUnlockRequirements(492)}),RAVAGED_BRICK.setPos(4,15).setUnlockPrice(10).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(500).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentText(501).setPrice(4).setUnlockOnDiscovery(),new KnowledgeFragmentText(505).setPrice(7).setUnlockRequirements(500),new KnowledgeFragmentCrafting(502).setRecipeFromRegistry(new ItemStack(BlockList.ravaged_brick_stairs,4)).setPrice(4).setUnlockRequirements(500).setUnlockCascade(513),new KnowledgeFragmentCrafting(503).setRecipeFromRegistry(new ItemStack(BlockList.ravaged_brick_slab,6)).setPrice(4).setUnlockRequirements(500).setUnlockCascade(515),new KnowledgeFragmentCrafting(504).setRecipeFromRegistry(new ItemStack(BlockList.ravaged_brick_fence,6)).setPrice(4).setUnlockRequirements(500).setUnlockCascade(517)}),RAVAGED_BRICK_GLOWING.setPos(6,15).setUnlockPrice(2).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(510).setPrice(5).setUnlockOnDiscovery()}),RAVAGED_BRICK_STAIRS.setPos(2,15).setUnlockPrice(2).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(512).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(513).setRecipeFromRegistry(new ItemStack(BlockList.ravaged_brick_stairs,4)).setPrice(4).setUnlockRequirements(512).setUnlockCascade(502)}),RAVAGED_BRICK_SLAB.setPos(0,15).setUnlockPrice(2).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(514).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(515).setRecipeFromRegistry(new ItemStack(BlockList.ravaged_brick_slab,6)).setPrice(4).setUnlockRequirements(514).setUnlockCascade(503)}),RAVAGED_BRICK_FENCE.setPos(8,15).setUnlockPrice(2).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(516).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(517).setRecipeFromRegistry(new ItemStack(BlockList.ravaged_brick_fence,6)).setPrice(4).setUnlockRequirements(516).setUnlockCascade(504)}),CHARM_POUCH.setPos(7,18).setUnlockPrice(40).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(520).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(521).setRecipeFromRegistry(new ItemStack(ItemList.charm_pouch)).setPrice(10).setUnlockRequirements(520).setUnlockCascade(533),new KnowledgeFragmentText(522).setPrice(5).setUnlockRequirements(520)}),RUNES.setPos(3,18).setUnlockPrice(25).setDiscoveryReward(18).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(530).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(531).setPrice(5).setUnlockRequirements(530),new KnowledgeFragmentText(532).setPrice(5).setUnlockRequirements(530),new KnowledgeFragmentCrafting(533).setRecipeFromRegistry(new ItemStack(ItemList.charm_pouch)).setNonBuyableRedirect(CHARM_POUCH)}),CHARMS.setPos(5,18).setUnlockPrice(35).setDiscoveryReward(25).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(540).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(541).setPrice(7).setUnlockRequirements(540)}).addFragments(KnowledgeUtils.createCharmFragments(1000,541)),LOUSE.setPos(1,18).setUnlockPrice(15).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(550).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(551).setPrice(5).setUnlockRequirements(550),new KnowledgeFragmentText(552).setPrice(7).setUnlockRequirements(551),new KnowledgeFragmentText(553).setPrice(5).setUnlockRequirements(552)})});
  KnowledgeCategories.BIOME_ISLAND_MOUNTAINS.addKnowledgeObjects(new KnowledgeObject[]{BURNING_MOUNTAINS_BIOME.setCategoryObject(KnowledgeCategories.BIOME_ISLAND_MOUNTAINS).setUnlockPrice(60).setDiscoveryReward(45).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(560).setPrice(7),new KnowledgeFragmentText(561).setPrice(4).setUnlockRequirements(560),new KnowledgeFragmentText(562).setPrice(15).setUnlockRequirements(561),new KnowledgeFragmentText(563).setPrice(15).setUnlockRequirements(561)}),BURNED_END_STONE.setPos(0,0).setUnlockPrice(5).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(570).setPrice(2).setUnlockOnDiscovery()}),FLAMEWEED_1.setPos(5,0).setUnlockPrice(3).setDiscoveryReward(4).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(582).setPrice(4).setUnlockOnDiscovery()}),FLAMEWEED_2.setPos(7,0).setUnlockPrice(3).setDiscoveryReward(4).addFragments(new KnowledgeFragment[]{FLAMEWEED_1.getFragments().iterator().next()}),FLAMEWEED_3.setPos(9,0).setUnlockPrice(3).setDiscoveryReward(4).addFragments(new KnowledgeFragment[]{FLAMEWEED_1.getFragments().iterator().next()}),IGNEOUS_ROCK_ORE_LINKED.setPos(2,0),IGNEOUS_ROCK_LINKED.setPos(2,2),CINDER.setPos(0,7).setUnlockPrice(5).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(590).setPrice(5).setUnlockOnDiscovery()}),LILYFIRE.setPos(13,7).setUnlockPrice(4).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(580).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(581).setRecipeFromRegistry(new ItemStack(Items.dye,2,14),new ItemStack[]{new ItemStack(BlockList.crossed_decoration,1,BlockCrossedDecoration.dataLilyFire)}).setPrice(4).setUnlockRequirements(580)}),DUNGEON_PUZZLE.setPos(10,7).setUnlockPrice(15).setDiscoveryReward(25).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(900).setPrice(10).setUnlockOnDiscovery(),new KnowledgeFragmentText(901).setPrice(7).setUnlockRequirements(900),new KnowledgeFragmentText(902).setPrice(7).setUnlockRequirements(901),new KnowledgeFragmentText(903).setPrice(10).setUnlockRequirements(901)}),FIERY_ESSENCE_ALTAR.setPos(5,9).setUnlockPrice(25).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(600).setPrice(10).setUnlockOnDiscovery(),new KnowledgeFragmentText(601).setPrice(8).setUnlockRequirements(600),new KnowledgeFragmentText(602).setPrice(5).setUnlockRequirements(600)}),FIERY_ESSENCE.setPos(5,7),FIRE_GOLEM.setPos(2,6).setUnlockPrice(20).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(610).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(611).setPrice(4).setUnlockRequirements(610),new KnowledgeFragmentText(612).setPrice(5).setUnlockRequirements(611),new KnowledgeFragmentText(613).setPrice(5).setUnlockRequirements(611),new KnowledgeFragmentText(614).setPrice(5).setUnlockRequirements(610).setUnlockCascade(82)}),SCORCHING_LENS.setPos(2,8).setUnlockPrice(20).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(620).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(621).setPrice(4).setUnlockRequirements(620),new KnowledgeFragmentText(622).setPrice(5).setUnlockRequirements(621),new KnowledgeFragmentText(623).setPrice(5).setUnlockRequirements(620).setUnlockCascade(82)}),FIRE_FIEND.setPos(8,7).setUnlockPrice(30).setDiscoveryReward(18).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(910).setPrice(10).setUnlockOnDiscovery(),new KnowledgeFragmentText(911).setPrice(5).setUnlockRequirements(910),new KnowledgeFragmentText(912).setPrice(4).setUnlockRequirements(910),new KnowledgeFragmentText(913).setPrice(5).setUnlockRequirements(912),new KnowledgeFragmentText(914).setPrice(5).setUnlockRequirements(912),new KnowledgeFragmentText(915).setPrice(7).setUnlockRequirements(912),new KnowledgeFragmentText(916).setPrice(7).setUnlockRequirements(915),new KnowledgeFragmentText(917).setPrice(5).setUnlockRequirements(910)}),INFERNIUM.setPos(2,13).setUnlockPrice(15).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(630).setPrice(7).setUnlockOnDiscovery().setUnlockCascade(657),new KnowledgeFragmentCrafting(631).setRecipeFromRegistry(new ItemStack(ItemList.scorching_pickaxe)).setNonBuyableRedirect(SCORCHING_PICKAXE)}),SCORCHING_PICKAXE.setPos(4,13).setUnlockPrice(40).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(640).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(641).setPrice(7).setUnlockRequirements(640),new KnowledgeFragmentText(642).setPrice(5).setUnlockRequirements(641),new KnowledgeFragmentCrafting(643).setRecipeFromRegistry(new ItemStack(ItemList.scorching_pickaxe)).setPrice(10).setUnlockRequirements(640).setUnlockCascade(631)}),HAUNTED_MINER.setPos(0,13).setUnlockPrice(25).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(650).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(651).setPrice(7).setUnlockRequirements(651),new KnowledgeFragmentText(652).setPrice(4).setUnlockRequirements(650),new KnowledgeFragmentText(653).setPrice(4).setUnlockRequirements(650),new KnowledgeFragmentText(654).setPrice(4).setUnlockRequirements(653),new KnowledgeFragmentText(655).setPrice(4).setUnlockRequirements(653),new KnowledgeFragmentText(656).setPrice(4).setUnlockRequirements(653),new KnowledgeFragmentText(657).setPrice(5).setUnlockRequirements(650).setUnlockCascade(630)})});
  KnowledgeCategories.BIOME_ISLAND_ENCHISLAND.addKnowledgeObjects(new KnowledgeObject[]{ENCHANTED_ISLAND_BIOME.setCategoryObject(KnowledgeCategories.BIOME_ISLAND_ENCHISLAND).setUnlockPrice(60).setDiscoveryReward(45).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(660).setPrice(5),new KnowledgeFragmentText(661).setPrice(4).setUnlockRequirements(660),new KnowledgeFragmentText(662).setPrice(15).setUnlockRequirements(661),new KnowledgeFragmentText(663).setPrice(15).setUnlockRequirements(661),new KnowledgeFragmentText(665).setPrice(7).setUnlockRequirements(661).setUnlockCascade(810)}),ENCHANTED_END_STONE.setPos(0,0).setUnlockPrice(5).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(670).setPrice(2).setUnlockOnDiscovery()}),FALLING_OBSIDIAN_LINKED.setPos(2,0),PERSEGRIT.setPos(4,0).setUnlockPrice(7).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(810).setPrice(5).setUnlockOnDiscovery().setUnlockCascade(665),new KnowledgeFragmentText(811).setPrice(5).setUnlockRequirements(810),new KnowledgeFragmentText(812).setPrice(2).setUnlockRequirements(810)}),ENDERMAN_LINKED.setPos(0,2),ARCANE_SHARD.setPos(5,6).setUnlockPrice(28).setDiscoveryReward(27).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1420).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(1421).setPrice(2),new KnowledgeFragmentCrafting(1422).setRecipeFromRegistry(new ItemStack(ItemList.blank_gem)).setPrice(5).setUnlockCascade(773,1431),new KnowledgeFragmentCrafting(1423).setRecipeFromRegistry(new ItemStack(ItemList.spatial_dash_gem)).setPrice(7).setUnlockCascade(295),new KnowledgeFragmentCrafting(1424).setRecipeFromRegistry(new ItemStack(ItemList.transference_gem)).setPrice(7).setUnlockCascade(1441)}),BLANK_GEM.setPos(7,6).setUnlockPrice(15).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1430).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(1431).setRecipeFromRegistry(new ItemStack(ItemList.blank_gem)).setNonBuyableRedirect(ARCANE_SHARD)}),SPATIAL_DASH_GEM_LINKED.setPos(9,6),TRANSFERENCE_GEM.setPos(11,6).setUnlockPrice(20).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1440).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(1441).setRecipeFromRegistry(new ItemStack(ItemList.transference_gem)).setNonBuyableRedirect(ARCANE_SHARD),new KnowledgeFragmentText(1442).setPrice(5).setUnlockRequirements(1440),new KnowledgeFragmentText(1443).setPrice(5).setUnlockRequirements(1442),new KnowledgeFragmentText(1444).setPrice(4).setUnlockRequirements(1443),new KnowledgeFragmentText(1445).setPrice(4).setUnlockRequirements(1444),new KnowledgeFragmentText(1446).setPrice(5).setUnlockRequirements(1443)}),BABY_ENDERMAN.setPos(0,6).setUnlockPrice(25).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(680).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(681).setPrice(4).setUnlockRequirements(680),new KnowledgeFragmentText(682).setPrice(4).setUnlockRequirements(680),new KnowledgeFragmentText(683).setPrice(5).setUnlockRequirements(682),new KnowledgeFragmentText(684).setPrice(5).setUnlockRequirements(682)}),HOMELAND_ENDERMAN.setPos(2,6).setUnlockPrice(25).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(790).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(791).setPrice(5).setUnlockRequirements(790),new KnowledgeFragmentText(792).setPrice(5).setUnlockRequirements(791),new KnowledgeFragmentText(793).setPrice(5).setUnlockRequirements(791)}),LABORATORY.setPos(3,10).setUnlockPrice(30).setDiscoveryReward(20).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1460).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(1461).setPrice(5).setUnlockRequirements(1460),new KnowledgeFragmentText(1462).setPrice(5).setUnlockRequirements(1461),new KnowledgeFragmentText(1463).setPrice(5).setUnlockRequirements(1462)}),LABORATORY_OBSIDIAN.setPos(0,12).setUnlockPrice(5).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1450).setPrice(4).setUnlockOnDiscovery()}),LABORATORY_GLASS.setPos(2,12).setUnlockPrice(5).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1451).setPrice(4).setUnlockOnDiscovery()}),LABORATORY_FLOOR.setPos(4,12).setUnlockPrice(5).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1452).setPrice(4).setUnlockOnDiscovery()}),LABORATORY_STAIRS.setPos(6,12).setUnlockPrice(5).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(1453).setPrice(4).setUnlockOnDiscovery()}),OBSIDIAN_FRAGMENT.setPos(2,15).setUnlockPrice(15).setDiscoveryReward(10).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(820).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(821).setRecipeFromRegistry(new ItemStack(ItemList.obsidian_rod)).setNonBuyableRedirect(OBSIDIAN_ROD),new KnowledgeFragmentCrafting(822).setRecipeFromRegistry(new ItemStack(Blocks.obsidian)).setPrice(5).setUnlockRequirements(820),new KnowledgeFragmentCrafting(823).setRecipeFromRegistry(new ItemStack(BlockList.obsidian_special,1,0)).setPrice(4).setUnlockRequirements(822),new KnowledgeFragmentCrafting(824).setRecipeFromRegistry(new ItemStack(BlockList.obsidian_special,1,1)).setPrice(4).setUnlockRequirements(822),new KnowledgeFragmentCrafting(825).setRecipeFromRegistry(new ItemStack(BlockList.obsidian_special,1,2)).setPrice(4).setUnlockRequirements(822)}),OBSIDIAN_ROD.setPos(4,15).setUnlockPrice(7).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(830).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(831).setRecipeFromRegistry(new ItemStack(ItemList.obsidian_rod)).setPrice(5).setUnlockRequirements(830).setUnlockCascade(821),new KnowledgeFragmentCrafting(832).setRecipeFromRegistry(new ItemStack(ItemList.energy_wand)).setNonBuyableRedirect(ENERGY_WAND)}),AURICION.setPos(12,15).setUnlockPrice(7).setDiscoveryReward(12).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(870).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(871).setPrice(5).setUnlockRequirements(870),new KnowledgeFragmentCrafting(872).setRecipeFromRegistry(new ItemStack(ItemList.energy_wand_core)).setPrice(7).setUnlockRequirements(870).setUnlockCascade(841)}),ENERGY_WAND_CORE.setPos(10,15).setUnlockPrice(7).setDiscoveryReward(5).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(840).setPrice(5).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(841).setRecipeFromRegistry(new ItemStack(ItemList.energy_wand_core)).setPrice(7).setUnlockRequirements(840).setUnlockCascade(872),new KnowledgeFragmentCrafting(842).setRecipeFromRegistry(new ItemStack(ItemList.energy_wand)).setNonBuyableRedirect(ENERGY_WAND)}),ENERGY_WAND.setPos(7,15).setUnlockPrice(35).setDiscoveryReward(8).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(850).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentCrafting(851).setRecipeFromRegistry(new ItemStack(ItemList.energy_wand)).setPrice(10).setUnlockRequirements(850).setUnlockCascade(832,842),new KnowledgeFragmentText(852).setPrice(7).setUnlockRequirements(850),new KnowledgeFragmentText(853).setPrice(5).setUnlockRequirements(852)}),ENDER_GUARDIAN.setPos(0,15).setUnlockPrice(20).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(690).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(691).setPrice(5).setUnlockRequirements(690),new KnowledgeFragmentText(692).setPrice(7).setUnlockRequirements(690),new KnowledgeFragmentText(694).setPrice(5).setUnlockRequirements(690),new KnowledgeFragmentText(693).setPrice(5).setUnlockRequirements(690)}),ENDERMAGE.setPos(14,15).setUnlockPrice(20).setDiscoveryReward(15).addFragments(new KnowledgeFragment[]{new KnowledgeFragmentText(860).setPrice(7).setUnlockOnDiscovery(),new KnowledgeFragmentText(861).setPrice(5).setUnlockRequirements(860),new KnowledgeFragmentText(862).setPrice(7).setUnlockRequirements(860),new KnowledgeFragmentText(863).setPrice(5).setUnlockRequirements(860),new KnowledgeFragmentText(864).setPrice(4).setUnlockRequirements(863)})});
  Stopwatch.finish(""String_Node_Str"");
  if (Log.isDebugEnabled()) {
    Stopwatch.time(""String_Node_Str"");
    for (    KnowledgeCategory category : KnowledgeCategories.categoryList) {
      if (category.getCategoryObject() == null)       throw new IllegalStateException(""String_Node_Str"" + category.getTooltip() + ""String_Node_Str"");
    }
    int amtObjects=0, amtFragments=0, totalObjPrice=0, totalFragPrice=0, totalFragPriceExcCascaded=0, totalFragPriceExcDiscovery=0, totalReward=0;
    TIntHashSet cascaded=new TIntHashSet();
    Log.debug(""String_Node_Str"",amtObjects);
    Log.debug(""String_Node_Str"",amtFragments);
    Log.debug(""String_Node_Str"",totalObjPrice);
    Log.debug(""String_Node_Str"",totalFragPrice);
    Log.debug(""String_Node_Str"",totalFragPriceExcCascaded);
    Log.debug(""String_Node_Str"",totalFragPriceExcDiscovery);
    Log.debug(""String_Node_Str"",totalFragPriceExcCascaded - (totalFragPrice - totalFragPriceExcDiscovery));
    Log.debug(""String_Node_Str"",totalObjPrice + totalFragPriceExcCascaded - (totalFragPrice - totalFragPriceExcDiscovery));
    Log.debug(""String_Node_Str"",totalReward);
    Stopwatch.finish(""String_Node_Str"");
  }
}",0.9729104821248372
34664,"private void onDebugInfo(NBTTagCompound nbt,EntityPlayer player,Pos pos){
  player.addChatMessage(new ChatComponentText(EnumChatFormatting.GOLD + ""String_Node_Str"" + EnumChatFormatting.RESET+ GameData.getBlockRegistry().getNameForObject(pos.getBlock(player.worldObj))));
  player.addChatMessage(new ChatComponentText(EnumChatFormatting.GOLD + ""String_Node_Str"" + EnumChatFormatting.RESET+ pos.getMetadata(player.worldObj)));
}","private void onDebugInfo(NBTTagCompound nbt,EntityPlayer player,Pos pos){
  if (pos != null) {
    player.addChatMessage(new ChatComponentText(EnumChatFormatting.GOLD + ""String_Node_Str"" + EnumChatFormatting.RESET+ GameData.getBlockRegistry().getNameForObject(pos.getBlock(player.worldObj))));
    player.addChatMessage(new ChatComponentText(EnumChatFormatting.GOLD + ""String_Node_Str"" + EnumChatFormatting.RESET+ pos.getMetadata(player.worldObj)));
  }
}",0.9670828603859252
34665,"@Override public String getUnlocalizedName(ItemStack is){
  CharmType type=CharmType.getFromDamage(is.getItemDamage()).getLeft();
  return ""String_Node_Str"" + (type == null ? ""String_Node_Str"" : type.name().toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str""));
}","@Override public String getUnlocalizedName(ItemStack is){
  CharmType type=CharmType.getFromDamage(is.getItemDamage()).getLeft();
  return ""String_Node_Str"" + (type == null ? ""String_Node_Str"" : type.name().toLowerCase(Locale.ENGLISH).replaceAll(""String_Node_Str"",""String_Node_Str""));
}",0.974910394265233
34666,"@Override public String getUnlocalizedName(ItemStack is){
  CurseType type=CurseType.getFromDamage(is.getItemDamage());
  return ""String_Node_Str"" + (type == null ? ""String_Node_Str"" : type.name().toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str""));
}","@Override public String getUnlocalizedName(ItemStack is){
  CurseType type=CurseType.getFromDamage(is.getItemDamage());
  return ""String_Node_Str"" + (type == null ? ""String_Node_Str"" : type.name().toLowerCase(Locale.ENGLISH).replaceAll(""String_Node_Str"",""String_Node_Str""));
}",0.9739776951672864
34667,"@Override public String getUnlocalizedName(ItemStack is){
  int damage=is.getItemDamage();
  return ""String_Node_Str"" + (damage >= 0 && damage < RuneType.values.length ? RuneType.values[damage].name().toLowerCase() : damage == OreDictionary.WILDCARD_VALUE ? ""String_Node_Str"" : ""String_Node_Str"");
}","@Override public String getUnlocalizedName(ItemStack is){
  int damage=is.getItemDamage();
  return ""String_Node_Str"" + (damage >= 0 && damage < RuneType.values.length ? RuneType.values[damage].name().toLowerCase(Locale.ENGLISH) : damage == OreDictionary.WILDCARD_VALUE ? ""String_Node_Str"" : ""String_Node_Str"");
}",0.977124183006536
34668,"@Override public String getUnlocalizedName(ItemStack is){
  if (is.getItemDamage() < 20)   return ""String_Node_Str"" + getTypeFromDamage(is.getItemDamage()).toString().toLowerCase();
 else   return ""String_Node_Str"" + getCoreFromDamage(is.getItemDamage()).toString().toLowerCase();
}","@Override public String getUnlocalizedName(ItemStack is){
  if (is.getItemDamage() < 20)   return ""String_Node_Str"" + getTypeFromDamage(is.getItemDamage()).toString().toLowerCase(Locale.ENGLISH);
 else   return ""String_Node_Str"" + getCoreFromDamage(is.getItemDamage()).toString().toLowerCase(Locale.ENGLISH);
}",0.9527027027027029
34669,"public static String getName(Enum enhancementEnum,EnumChatFormatting color){
  return new StringBuilder().append(EnumChatFormatting.RESET).append(color).append(enhancementEnum.name().substring(0,1).toUpperCase()).append(enhancementEnum.name().substring(1).toLowerCase().replace('_',' ')).toString();
}","public static String getName(Enum enhancementEnum,EnumChatFormatting color){
  return new StringBuilder().append(EnumChatFormatting.RESET).append(color).append(enhancementEnum.name().substring(0,1).toUpperCase(Locale.ENGLISH)).append(enhancementEnum.name().substring(1).toLowerCase(Locale.ENGLISH).replace('_',' ')).toString();
}",0.9555555555555556
34670,"public static String sentence(String text){
  if (!ModCommonProxy.hardcoreEnderbacon)   return text;
  String lc=StatCollector.translateToLocal(""String_Node_Str""), fc=Character.toUpperCase(lc.charAt(0)) + lc.substring(1), uc=lc.toUpperCase();
  text=lcword.matcher(text).replaceAll(lc);
  text=fcword.matcher(text).replaceAll(fc);
  text=ucword.matcher(text).replaceAll(uc);
  return text;
}","public static String sentence(String text){
  if (!ModCommonProxy.hardcoreEnderbacon)   return text;
  String lc=StatCollector.translateToLocal(""String_Node_Str""), fc=Character.toUpperCase(lc.charAt(0)) + lc.substring(1), uc=lc.toUpperCase(Locale.ENGLISH);
  text=lcword.matcher(text).replaceAll(lc);
  text=fcword.matcher(text).replaceAll(fc);
  text=ucword.matcher(text).replaceAll(uc);
  return text;
}",0.9824120603015076
34671,"public StrongholdPiece(int weight,int minAmount,int maxAmount,Size size){
  super(weight,minAmount,maxAmount,size);
}","public StrongholdPiece(Type type,int weight,int minAmount,int maxAmount,Size size){
  super(type,weight,minAmount,maxAmount,size);
}",0.9397590361445785
34672,"public StrongholdPieceCorridor(int weight){
  super(weight,0,20,new Size(5,5,3));
  addConnection(new Connection(Facing4.NORTH_NEGZ,0,0,2));
  addConnection(new Connection(Facing4.SOUTH_POSZ,2,0,2));
}","public StrongholdPieceCorridor(int weight){
  super(Type.CORRIDOR,weight,0,20,new Size(5,5,3));
  addConnection(Facing4.NORTH_NEGZ,0,0,2);
  addConnection(Facing4.SOUTH_POSZ,2,0,2);
}",0.8802083333333334
34673,"public StrongholdPieceEndPortal(){
  super(new Size(9,10,9));
  addConnection(new Connection(Facing4.NORTH_NEGZ,0,0,4));
  addConnection(new Connection(Facing4.SOUTH_POSZ,8,0,4));
}","public StrongholdPieceEndPortal(){
  super(Type.ROOM,new Size(9,10,9));
  addConnection(Facing4.NORTH_NEGZ,0,0,4);
  addConnection(Facing4.SOUTH_POSZ,8,0,4);
}",0.8764705882352941
34674,"public void generateInWorld(World world,Random rand,int centerX,int bottomY,int centerZ){
  PosMutable pos=new PosMutable();
  int x, y, z, index=0;
  for (y=0; y < sizeY; y++) {
    for (x=-radX; x <= radX; x++) {
      for (z=-radZ; z <= radZ; z++) {
        pos.set(centerX + x,bottomY + y,centerZ + z).setBlock(world,blocks[index],metadata[index],2);
        ++index;
      }
    }
  }
  tileEntityMap.forEachEntry((ind,value) -> {
    toPos(ind,pos);
    value.generateTile(pos.getTileEntity(world),rand);
    return true;
  }
);
  scheduledUpdates.forEach(ind -> {
    toPos(ind,pos);
    world.markBlockForUpdate(pos.getX(),pos.getY(),pos.getZ());
    return true;
  }
);
  entityList.forEach(entity -> {
    entity.setPosition(centerX + entity.posX,bottomY + entity.posY,centerZ + entity.posZ);
    world.spawnEntityInWorld(entity);
  }
);
}","public void generateInWorld(World world,Random rand,int centerX,int bottomY,int centerZ){
  PosMutable pos=new PosMutable();
  int x, y, z, index=0;
  for (z=-radZ; z <= radZ; z++) {
    for (x=-radX; x <= radX; x++) {
      for (y=0; y < sizeY; y++) {
        if (blocks[index] != null)         pos.set(centerX + x,bottomY + y,centerZ + z).setBlock(world,blocks[index],metadata[index],2);
        ++index;
      }
    }
  }
  tileEntityMap.forEachEntry((ind,value) -> {
    toPos(ind,pos);
    value.generateTile(pos.getTileEntity(world),rand);
    return true;
  }
);
  scheduledUpdates.forEach(ind -> {
    toPos(ind,pos);
    world.markBlockForUpdate(pos.getX(),pos.getY(),pos.getZ());
    return true;
  }
);
  entityList.forEach(entity -> {
    entity.setPosition(centerX + entity.posX,bottomY + entity.posY,centerZ + entity.posZ);
    world.spawnEntityInWorld(entity);
  }
);
}",0.8990190421234853
34675,"/** 
 * Returns a random piece or null if the search fails.
 */
private StructureDungeonPiece selectNextPiece(Random rand){
  StructureDungeonPiece nextPiece=pieces.getRandomItem(rand);
  return pieceCount.get(nextPiece) >= nextPiece.maxAmount ? null : nextPiece;
}","/** 
 * Returns a random piece or null if the search fails.
 */
private StructureDungeonPiece selectNextPiece(Random rand){
  StructureDungeonPiece nextPiece=pieces.getRandomItem(rand);
  return nextPiece != null && pieceCount.get(nextPiece) >= nextPiece.maxAmount ? null : nextPiece;
}",0.9618874773139746
34676,"/** 
 * Generates the dungeon.
 */
@Override public boolean generate(StructureWorld world,Random rand){
  int targetAmount=minPieces + rand.nextInt(maxPieces - minPieces + 1);
  StructureDungeonPiece startPiece=startingPiece == null ? pieces.getRandomItem(rand) : startingPiece;
  addPiece(startPiece,Pos.at(-startPiece.size.sizeX / 2,sizeY / 2 - startPiece.size.sizeY / 2,-startPiece.size.sizeZ));
  for (int cycleAttempt=0, count; cycleAttempt < 1000; cycleAttempt++) {
    StructureDungeonPiece nextPiece=selectNextPiece(rand);
    if (nextPiece == null)     continue;
    Connection nextPieceConnection=nextPiece.getRandomConnection(rand);
    for (int placeAttempt=0; placeAttempt < 10; placeAttempt++) {
      StructureDungeonPieceInst connected=weightedInstances.getRandomItem(rand);
      if (cycleConnections(connected,nextPieceConnection.facing,rand,connection -> {
        Pos aligned=alignConnections(connected,connection,nextPieceConnection);
        if (canPlaceArea(aligned,aligned.offset(nextPiece.size.sizeX,nextPiece.size.sizeY,nextPiece.size.sizeZ))) {
          addPiece(nextPiece,aligned);
          return true;
        }
 else         return false;
      }
)) {
        if (connected.getWeight() == 0)         weightedInstances.remove(connected);
        if (generated.size() >= targetAmount)         cycleAttempt=Integer.MAX_VALUE;
        break;
      }
    }
  }
  if (!MathUtil.inRangeIncl(generated.size(),minPieces,maxPieces))   return false;
  for (  StructureDungeonPiece piece : pieces) {
    if (!MathUtil.inRangeIncl(pieceCount.get(piece),piece.minAmount,piece.maxAmount))     return false;
  }
  for (  StructureDungeonPieceInst pieceInst : generated) {
    pieceInst.piece.generate(world,rand,pieceInst.boundingBox.getTopLeft());
  }
  return true;
}","/** 
 * Generates the dungeon.
 */
@Override public boolean generate(StructureWorld world,Random rand){
  int targetAmount=minPieces + rand.nextInt(maxPieces - minPieces + 1);
  StructureDungeonPiece startPiece=startingPiece == null ? pieces.getRandomItem(rand) : startingPiece;
  addPiece(startPiece,Pos.at(-startPiece.size.sizeX / 2,sizeY / 2 - startPiece.size.sizeY / 2,-startPiece.size.sizeZ));
  for (int cycleAttempt=0, count; cycleAttempt < 1000; cycleAttempt++) {
    StructureDungeonPiece nextPiece=selectNextPiece(rand);
    if (nextPiece == null)     continue;
    Connection nextPieceConnection=nextPiece.getRandomConnection(rand);
    for (int placeAttempt=0; placeAttempt < 10; placeAttempt++) {
      StructureDungeonPieceInst connected=weightedInstances.getRandomItem(rand);
      if (cycleConnections(connected,nextPieceConnection.facing,rand,connection -> {
        Pos aligned=alignConnections(connected,connection,nextPieceConnection);
        if (canPlaceArea(aligned,aligned.offset(nextPiece.size.sizeX,nextPiece.size.sizeY,nextPiece.size.sizeZ))) {
          addPiece(nextPiece,aligned);
          return true;
        }
 else         return false;
      }
)) {
        if (connected.getWeight() == 0)         weightedInstances.remove(connected);
        if (generated.size() >= targetAmount)         cycleAttempt=Integer.MAX_VALUE;
        break;
      }
    }
  }
  if (!MathUtil.inRangeIncl(generated.size(),minPieces,maxPieces))   return false;
  for (  StructureDungeonPiece piece : pieces) {
    if (!MathUtil.inRangeIncl(pieceCount.get(piece),piece.minAmount,piece.maxAmount))     return false;
  }
  for (  StructureDungeonPieceInst pieceInst : generated) {
    pieceInst.piece.generate(world,rand,pieceInst.boundingBox.x1,pieceInst.boundingBox.y1,pieceInst.boundingBox.z1);
  }
  return true;
}",0.982281284606866
34677,"public abstract void generate(StructureWorld world,Random rand,Pos topLeft);","public abstract void generate(StructureWorld world,Random rand,int x,int y,int z);",0.8607594936708861
34678,"public UpdateNotificationManager(){
  UpdateSavefile.prepare();
  saveFile=new UpdateSavefile();
  saveFile.load();
}","public UpdateNotificationManager(){
  UpdateSavefile.prepare();
  saveFile=new UpdateSavefile();
  saveFile.load();
  lastCheckedMod=saveFile.newestModVersion;
}",0.841726618705036
34679,"@SubscribeEvent public void onPlayerLogin(PlayerLoggedInEvent e){
  if (enableNotifications || enableBuildCheck) {
    long time=System.currentTimeMillis();
    if (lastNotificationTime == -1 || time - lastNotificationTime > 43200000) {
      lastNotificationTime=time;
      new UpdateThread().start();
    }
  }
}","@SubscribeEvent public void onPlayerLogin(PlayerLoggedInEvent e){
  if (enableNotifications || enableBuildCheck) {
    long time=Calendar.getInstance().getTimeInMillis();
    if (time - saveFile.lastCheckTime > 86400000L) {
      saveFile.lastCheckTime=time;
      new UpdateThread().start();
    }
  }
}",0.7302100161550888
34680,"@Override public void run(){
  try {
    JsonElement root=new JsonParser().parse(IOUtils.toString(new URL(url),Charsets.UTF_8));
    List<VersionEntry> versionList=new ArrayList<>();
    VersionEntry currentVersion=null, newestVersion=null, newestVersionForCurrentMC=null;
    int counter=-1, buildId=0;
    String downloadURL=""String_Node_Str"";
    Log.debug(""String_Node_Str"");
    for (    Entry<String,JsonElement> entry : root.getAsJsonObject().entrySet()) {
      if (entry.getKey().charAt(0) == '~') {
switch (entry.getKey().substring(1)) {
case ""String_Node_Str"":
          downloadURL=entry.getValue().getAsString();
        break;
    }
  }
 else   versionList.add(new VersionEntry(entry.getKey(),entry.getValue().getAsJsonObject()));
}
Collections.sort(versionList);
for (VersionEntry version : versionList) {
  Log.debug(""String_Node_Str"",version.versionIdentifier);
  if (newestVersion == null)   newestVersion=version;
  if (version.isSupportedByMC(mcVersion)) {
    if (newestVersionForCurrentMC == null)     newestVersionForCurrentMC=version;
    ++counter;
  }
  if (version.modVersion.equals(modVersion)) {
    buildId=version.buildId;
    UpdateNotificationManager.refreshUpdateData(version);
    currentVersion=version;
    break;
  }
}
if (currentVersion == null) {
  Log.debug(""String_Node_Str"");
  return;
}
 else Log.debug(""String_Node_Str"");
UpdateSavefile saveFile=new UpdateSavefile();
saveFile.newestModVersion=counter > 0 ? newestVersionForCurrentMC.versionIdentifier : newestVersion.versionIdentifier;
saveFile.lastCheckTime=Calendar.getInstance().getTimeInMillis();
saveFile.save();
StringBuilder message=null;
boolean notifications=UpdateNotificationManager.enableNotifications;
if (buildId != HardcoreEnderExpansion.buildId) {
  message=new StringBuilder().append(EnumChatFormatting.LIGHT_PURPLE).append(""String_Node_Str"").append(modVersion).append(""String_Node_Str"").append(EnumChatFormatting.RESET).append(""String_Node_Str"").append(counter == 0 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
}
 else if (counter > 0 && notifications && (!UpdateNotificationManager.enableOneReportPerUpdate || !newestVersionForCurrentMC.versionIdentifier.equals(saveFile.newestModVersion))) {
  message=new StringBuilder().append(EnumChatFormatting.LIGHT_PURPLE).append(""String_Node_Str"").append(modVersion).append(""String_Node_Str"").append(EnumChatFormatting.RESET).append(""String_Node_Str"").append(EnumChatFormatting.YELLOW).append(newestVersionForCurrentMC.modVersionName).append(EnumChatFormatting.RESET).append(""String_Node_Str"").append(mcVersion).append(""String_Node_Str"").append(newestVersionForCurrentMC.releaseDate).append(""String_Node_Str"");
  if (counter >= 1) {
    int days=DragonUtil.getDayDifference(Calendar.getInstance(),currentVersion.convertReleaseDate());
    int months=MathUtil.floor((days + 8D) / 30D);
    if (months > 0)     message.append(""String_Node_Str"").append(months).append(months == 1 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
 else     message.append(""String_Node_Str"");
    message.append(counter).append(counter == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (UpdateNotificationManager.enableNewerMC && newestVersion != newestVersionForCurrentMC) {
    message.append(""String_Node_Str"").append(EnumChatFormatting.GREEN).append(newestVersion.modVersion).append(EnumChatFormatting.RESET).append(""String_Node_Str"").append(CommandBase.joinNiceString(newestVersion.mcVersions)).append('.');
  }
}
 else if (UpdateNotificationManager.enableNewerMC && notifications && newestVersion != newestVersionForCurrentMC && (!UpdateNotificationManager.enableOneReportPerUpdate || !newestVersion.versionIdentifier.equals(saveFile.newestModVersion))) {
  message=new StringBuilder().append(EnumChatFormatting.LIGHT_PURPLE).append(""String_Node_Str"").append(modVersion).append(""String_Node_Str"").append(EnumChatFormatting.RESET).append(""String_Node_Str"").append(EnumChatFormatting.GREEN).append(newestVersion.modVersion).append(EnumChatFormatting.RESET).append(""String_Node_Str"").append(CommandBase.joinNiceString(newestVersion.mcVersions)).append(""String_Node_Str"").append(newestVersion.releaseDate).append(""String_Node_Str"");
}
if (message != null) {
  message.append(""String_Node_Str"").append(EnumChatFormatting.GOLD).append(""String_Node_Str"").append(downloadURL);
  message.append(""String_Node_Str"").append(EnumChatFormatting.GOLD).append(""String_Node_Str"").append(EnumChatFormatting.RESET).append(""String_Node_Str"");
  for (  String s : message.toString().split(""String_Node_Str""))   HardcoreEnderExpansion.notifications.report(s,true);
}
}
 catch (UnknownHostException e) {
}
catch (Exception e) {
Log.throwable(e,""String_Node_Str"");
}
}","@Override public void run(){
  try {
    JsonElement root=new JsonParser().parse(IOUtils.toString(new URL(url),Charsets.UTF_8));
    List<VersionEntry> versionList=new ArrayList<>();
    VersionEntry currentVersion=null, newestVersion=null, newestVersionForCurrentMC=null;
    int counter=-1, buildId=0;
    String downloadURL=""String_Node_Str"";
    Log.debug(""String_Node_Str"");
    for (    Entry<String,JsonElement> entry : root.getAsJsonObject().entrySet()) {
      if (entry.getKey().charAt(0) == '~') {
switch (entry.getKey().substring(1)) {
case ""String_Node_Str"":
          downloadURL=entry.getValue().getAsString();
        break;
    }
  }
 else   versionList.add(new VersionEntry(entry.getKey(),entry.getValue().getAsJsonObject()));
}
Collections.sort(versionList);
for (VersionEntry version : versionList) {
  Log.debug(""String_Node_Str"",version.versionIdentifier);
  if (newestVersion == null)   newestVersion=version;
  if (version.isSupportedByMC(mcVersion)) {
    if (newestVersionForCurrentMC == null)     newestVersionForCurrentMC=version;
    ++counter;
  }
  if (version.modVersion.equals(modVersion)) {
    buildId=version.buildId;
    UpdateNotificationManager.refreshUpdateData(version);
    currentVersion=version;
    break;
  }
}
if (currentVersion == null) {
  Log.debug(""String_Node_Str"");
  return;
}
 else Log.debug(""String_Node_Str"");
UpdateSavefile saveFile=new UpdateSavefile();
saveFile.newestModVersion=counter > 0 ? newestVersionForCurrentMC.versionIdentifier : newestVersion.versionIdentifier;
saveFile.lastCheckTime=Calendar.getInstance().getTimeInMillis();
saveFile.save();
StringBuilder message=null;
boolean notifications=UpdateNotificationManager.enableNotifications;
String prevMod=UpdateNotificationManager.lastCheckedMod;
if (buildId != HardcoreEnderExpansion.buildId && UpdateNotificationManager.enableBuildCheck) {
  message=new StringBuilder().append(EnumChatFormatting.LIGHT_PURPLE).append(""String_Node_Str"").append(modVersion).append(""String_Node_Str"").append(EnumChatFormatting.RESET).append(""String_Node_Str"").append(counter == 0 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
}
 else if (counter > 0 && notifications) {
  if (!UpdateNotificationManager.enableOneReportPerUpdate || !newestVersionForCurrentMC.versionIdentifier.equals(prevMod)) {
    message=new StringBuilder().append(EnumChatFormatting.LIGHT_PURPLE).append(""String_Node_Str"").append(modVersion).append(""String_Node_Str"").append(EnumChatFormatting.RESET).append(""String_Node_Str"").append(EnumChatFormatting.YELLOW).append(newestVersionForCurrentMC.modVersionName).append(EnumChatFormatting.RESET).append(""String_Node_Str"").append(EnumChatFormatting.YELLOW).append(""String_Node_Str"").append(mcVersion).append(EnumChatFormatting.RESET).append(""String_Node_Str"").append(newestVersionForCurrentMC.releaseDate).append(""String_Node_Str"");
    if (counter >= 1) {
      int days=DragonUtil.getDayDifference(Calendar.getInstance(),currentVersion.convertReleaseDate());
      int months=MathUtil.floor((days + 8D) / 30D);
      if (months > 0)       message.append(""String_Node_Str"").append(months).append(months == 1 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
 else       message.append(""String_Node_Str"");
      message.append(counter).append(counter == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
    }
    if (UpdateNotificationManager.enableNewerMC && newestVersion != newestVersionForCurrentMC) {
      message.append(""String_Node_Str"").append(EnumChatFormatting.YELLOW).append(newestVersion.modVersion).append(EnumChatFormatting.RESET).append(""String_Node_Str"").append(EnumChatFormatting.YELLOW).append(""String_Node_Str"").append(CommandBase.joinNiceString(newestVersion.mcVersions)).append(EnumChatFormatting.RESET).append('.');
    }
  }
}
 else if (UpdateNotificationManager.enableNewerMC && notifications && newestVersion != newestVersionForCurrentMC && (!UpdateNotificationManager.enableOneReportPerUpdate || !newestVersion.versionIdentifier.equals(prevMod))) {
  message=new StringBuilder().append(EnumChatFormatting.LIGHT_PURPLE).append(""String_Node_Str"").append(modVersion).append(""String_Node_Str"").append(EnumChatFormatting.RESET).append(""String_Node_Str"").append(EnumChatFormatting.YELLOW).append(newestVersion.modVersion).append(EnumChatFormatting.RESET).append(""String_Node_Str"").append(EnumChatFormatting.YELLOW).append(""String_Node_Str"").append(CommandBase.joinNiceString(newestVersion.mcVersions)).append(EnumChatFormatting.RESET).append(""String_Node_Str"").append(newestVersion.releaseDate).append(""String_Node_Str"");
}
if (message != null) {
  message.append(""String_Node_Str"").append(EnumChatFormatting.GOLD).append(""String_Node_Str"").append(downloadURL);
  message.append(""String_Node_Str"").append(EnumChatFormatting.GOLD).append(""String_Node_Str"").append(EnumChatFormatting.RESET).append(""String_Node_Str"");
  for (  String s : message.toString().split(""String_Node_Str""))   HardcoreEnderExpansion.notifications.report(s,true);
}
}
 catch (UnknownHostException e) {
}
catch (Exception e) {
Log.throwable(e,""String_Node_Str"");
}
}",0.9500203169443316
34681,"@SubscribeEvent public void onRenderBlockOutline(DrawBlockHighlightEvent e){
  BlockPosM tmp=BlockPosM.tmp(e.target.blockX,e.target.blockY,e.target.blockZ);
  if (tmp.getBlock(e.player.worldObj) == BlockList.energy_cluster) {
    clusterLookedAt=(TileEntityEnergyCluster)tmp.getTileEntity(e.player.worldObj);
    e.setCanceled(true);
  }
}","@SubscribeEvent public void onRenderBlockOutline(DrawBlockHighlightEvent e){
  BlockPosM tmp=tmpPos.set(e.target.blockX,e.target.blockY,e.target.blockZ);
  if (tmp.getBlock(e.player.worldObj) == BlockList.energy_cluster) {
    clusterLookedAt=(TileEntityEnergyCluster)tmp.getTileEntity(e.player.worldObj);
    e.setCanceled(true);
  }
}",0.9748148148148148
34682,"public static BlockPosM tmp(long serialized){
  return temporary.set(serialized);
}","public static BlockPosM tmp(long serialized){
  return temporary.get().set(serialized);
}",0.9651162790697676
34683,"@SideOnly(Side.CLIENT) @Override public void registerBlockIcons(IIconRegister iconRegister){
}","@Override @SideOnly(Side.CLIENT) public void registerBlockIcons(IIconRegister iconRegister){
}",0.8936170212765957
34684,"@SideOnly(Side.CLIENT) @Override public IIcon getIcon(int side,int meta){
  return Blocks.soul_sand.getIcon(side,0);
}","@Override @SideOnly(Side.CLIENT) public IIcon getIcon(int side,int meta){
  return Blocks.soul_sand.getIcon(side,0);
}",0.9152542372881356
34685,"public static void finalizeEventTests() throws Throwable {
  if (!isLoaded)   return;
  Builder<String> unitDataList=ImmutableList.builder();
  unitDataList.add(""String_Node_Str"");
  unitDataList.add(""String_Node_Str"" + menuDisplayOk + ""String_Node_Str""+ menuDisplayFailed+ ""String_Node_Str"");
  Field field=FMLCommonHandler.class.getDeclaredField(""String_Node_Str"");
  field.setAccessible(true);
  field.set(FMLCommonHandler.instance(),unitDataList.build());
  field=ForgeVersion.class.getDeclaredField(""String_Node_Str"");
  field.setAccessible(true);
  field.set(null,ForgeVersion.Status.UP_TO_DATE);
}","public static void finalizeEventTests() throws Throwable {
  if (!isLoaded)   return;
  Builder<String> unitDataList=ImmutableList.builder();
  unitDataList.add(""String_Node_Str"");
  unitDataList.add(""String_Node_Str"" + menuDisplayOk + ""String_Node_Str""+ menuDisplayFailed+ ""String_Node_Str"");
  Field field=FMLCommonHandler.class.getDeclaredField(""String_Node_Str"");
  field.setAccessible(true);
  field.set(FMLCommonHandler.instance(),unitDataList.build());
  field=FMLCommonHandler.class.getDeclaredField(""String_Node_Str"");
  field.setAccessible(true);
  field.set(FMLCommonHandler.instance(),unitDataList.build());
  field=ForgeVersion.class.getDeclaredField(""String_Node_Str"");
  field.setAccessible(true);
  field.set(null,ForgeVersion.Status.UP_TO_DATE);
}",0.8830409356725146
34686,"@SuppressWarnings(""String_Node_Str"") @Override public void onUpdate(){
  prevPosX=posX;
  prevPosY=posY;
  prevPosZ=posZ;
  if (++field_145812_b == 1 && !worldObj.isRemote) {
    BlockPosM tmpPos=BlockPosM.tmp(this);
    if (tmpPos.getBlock(worldObj) != func_145805_f()) {
      setDead();
      return;
    }
    tmpPos.setAir(worldObj);
    for (int origX=tmpPos.x, origZ=tmpPos.z, x=origX + 2; x < origX + 5; x++) {
      for (int z=origZ - 1; z <= origZ + 1; z++) {
        if (tmpPos.set(x,tmpPos.y - 1,z).getBlock(worldObj) == BlockList.temple_end_portal)         tmpPos.setMetadata(worldObj,1,2);
      }
    }
  }
  moveEntity(motionX,motionY,motionZ);
  for (int y=5; y >= 0; y--) {
    for (int a=0; a < Math.min(10,field_145812_b / 4F); a++) {
      worldObj.spawnParticle(""String_Node_Str"",posX + rand.nextDouble() - 0.5D,posY + y + rand.nextDouble() - 0.3D,posZ + rand.nextDouble() - 0.5D,0D,0D,0D);
    }
  }
  if (field_145812_b >= 24) {
    motionY=0.01D;
    double deltaY=posY - ItemTempleCaller.templeY - 2;
    if (!worldObj.isRemote) {
      if (deltaY > 4D && rand.nextInt(6 - (deltaY > 6D ? 2 : 0)) == 0) {
        double xx=-5D, zz=-5D;
switch (rand.nextInt(4)) {
case 0:
          zz=ItemTempleCaller.templeZ;
case 1:
        xx=ItemTempleCaller.templeX + rand.nextFloat() * 18D;
      if (zz == -5D)       zz=ItemTempleCaller.templeZ + 13D;
    break;
case 2:
  xx=ItemTempleCaller.templeX;
case 3:
zz=ItemTempleCaller.templeZ + rand.nextFloat() * 13D;
if (xx == -5D) xx=ItemTempleCaller.templeX + 18D;
break;
}
worldObj.createExplosion(this,xx,ItemTempleCaller.templeY + rand.nextFloat() * 8D,zz,1.5F + (float)((deltaY - 4F) * 0.5F),true);
}
if (deltaY > 6D) {
for (EntityPlayerMP player : new ArrayList<EntityPlayerMP>(worldObj.playerEntities)) {
if (player.ridingEntity != null) player.mountEntity(null);
DragonUtil.teleportToOverworld(player);
}
TempleEvents.destroyWorld();
}
}
}
}","@SuppressWarnings(""String_Node_Str"") @Override public void onUpdate(){
  prevPosX=posX;
  prevPosY=posY;
  prevPosZ=posZ;
  if (++field_145812_b == 1 && !worldObj.isRemote) {
    BlockPosM tmpPos=BlockPosM.tmp(this);
    if (tmpPos.getBlock(worldObj) != func_145805_f()) {
      setDead();
      return;
    }
    tmpPos.setAir(worldObj);
    tmpPos.moveDown();
    for (int origX=tmpPos.x, origZ=tmpPos.z, x=origX + 2; x < origX + 5; x++) {
      for (int z=origZ - 1; z <= origZ + 1; z++) {
        if (tmpPos.set(x,tmpPos.y,z).getBlock(worldObj) == BlockList.temple_end_portal)         tmpPos.setMetadata(worldObj,1,2);
      }
    }
  }
  moveEntity(motionX,motionY,motionZ);
  for (int y=5; y >= 0; y--) {
    for (int a=0; a < Math.min(10,field_145812_b / 4F); a++) {
      worldObj.spawnParticle(""String_Node_Str"",posX + rand.nextDouble() - 0.5D,posY + y + rand.nextDouble() - 0.3D,posZ + rand.nextDouble() - 0.5D,0D,0D,0D);
    }
  }
  if (field_145812_b >= 24) {
    motionY=0.01D;
    double deltaY=posY - ItemTempleCaller.templeY - 2;
    if (!worldObj.isRemote) {
      if (deltaY > 4D && rand.nextInt(6 - (deltaY > 6D ? 2 : 0)) == 0) {
        double xx=-5D, zz=-5D;
switch (rand.nextInt(4)) {
case 0:
          zz=ItemTempleCaller.templeZ;
case 1:
        xx=ItemTempleCaller.templeX + rand.nextFloat() * 18D;
      if (zz == -5D)       zz=ItemTempleCaller.templeZ + 13D;
    break;
case 2:
  xx=ItemTempleCaller.templeX;
case 3:
zz=ItemTempleCaller.templeZ + rand.nextFloat() * 13D;
if (xx == -5D) xx=ItemTempleCaller.templeX + 18D;
break;
}
worldObj.createExplosion(this,xx,ItemTempleCaller.templeY + rand.nextFloat() * 8D,zz,1.5F + (float)((deltaY - 4F) * 0.5F),true);
}
if (deltaY > 6D) {
for (EntityPlayerMP player : new ArrayList<EntityPlayerMP>(worldObj.playerEntities)) {
if (player.ridingEntity != null) player.mountEntity(null);
DragonUtil.teleportToOverworld(player);
}
TempleEvents.destroyWorld();
}
}
}
}",0.9929742388758782
34687,"@Override public void sendMessage(MessageType msgType,int[] data){
switch (msgType) {
case TRANSPORT_BEACON_GUI:
    GuiScreen gui=Minecraft.getMinecraft().currentScreen;
  if (gui instanceof GuiTransportBeacon && data.length == 5) {
    GuiTransportBeacon beacon=(GuiTransportBeacon)gui;
    if (beacon.centerX == data[0] && beacon.centerY == data[1] && beacon.centerZ == data[2])     beacon.updateStatusEvent(data[3],data[4] == 1);
  }
break;
case ENHANCEMENT_SLOT_RESET:
Container container=Minecraft.getMinecraft().thePlayer.openContainer;
if (container instanceof ContainerEndPowderEnhancements) ((ContainerEndPowderEnhancements)container).onEnhancementSlotChangeClient(-1);
break;
}
}","@Override public void sendMessage(MessageType msgType,int[] data){
switch (msgType) {
case TRANSPORT_BEACON_GUI:
    GuiScreen gui=Minecraft.getMinecraft().currentScreen;
  if (gui instanceof GuiTransportBeacon && data.length == 5) {
    GuiTransportBeacon beacon=(GuiTransportBeacon)gui;
    if (beacon.centerX == data[0] && beacon.centerY == data[1] && beacon.centerZ == data[2])     beacon.updateStatusEvent(data[3],data[4] == 1);
  }
break;
case ENHANCEMENT_SLOT_RESET:
Container container=Minecraft.getMinecraft().thePlayer.openContainer;
if (container instanceof ContainerEndPowderEnhancements) ((ContainerEndPowderEnhancements)container).onEnhancementSlotChangeClient(-1);
break;
case DEBUG_TITLE_SET:
Display.setTitle(Display.getTitle() + ""String_Node_Str"" + (Log.isDeobfEnvironment ? ""String_Node_Str"" : ""String_Node_Str"")+ ' '+ HardcoreEnderExpansion.modVersion);
break;
}
}",0.8767471410419314
34688,"public static void initializeDebug(){
  if (forceDebugEnabled || isDeobfEnvironment) {
    Display.setTitle(new StringBuilder().append(Display.getTitle()).append(""String_Node_Str"").append(isDeobfEnvironment ? ""String_Node_Str"" : ""String_Node_Str"").append(' ').append(HardcoreEnderExpansion.modVersion).toString());
  }
}","public static void initializeDebug(){
  if (forceDebugEnabled || isDeobfEnvironment) {
    HardcoreEnderExpansion.proxy.sendMessage(MessageType.DEBUG_TITLE_SET,ArrayUtils.EMPTY_INT_ARRAY);
  }
}",0.4980544747081712
34689,"@Override public void call(MessageRunner runner){
  WeightedLootList list=lootNames.get(runner.getString(""String_Node_Str""));
  int limit=runner.getInt(""String_Node_Str"");
  ItemPattern pattern=runner.<ItemPattern>getValue(""String_Node_Str"");
  pattern.setDamageValues(ArrayUtils.EMPTY_INT_ARRAY);
  pattern.setNBT(null);
  int size=list.size();
  for (Iterator<LootItemStack> iter=list.iterator(); iter.hasNext(); ) {
    if (pattern.matches(new ItemStack(iter.next().getItem()))) {
      iter.remove();
      if (limit > 0 && --limit == 0)       break;
    }
  }
  size=size - DragonEssenceHandler.recipes.size();
  if (size == 0)   MessageLogger.logWarn(""String_Node_Str"");
 else   MessageLogger.logOk(""String_Node_Str"",size);
}","@Override public void call(MessageRunner runner){
  WeightedLootList list=lootNames.get(runner.getString(""String_Node_Str""));
  int limit=runner.getInt(""String_Node_Str"");
  ItemPattern pattern=runner.<ItemPattern>getValue(""String_Node_Str"");
  pattern.setDamageValues(ArrayUtils.EMPTY_INT_ARRAY);
  int size=list.size();
  for (Iterator<LootItemStack> iter=list.iterator(); iter.hasNext(); ) {
    if (pattern.matches(new ItemStack(iter.next().getItem()))) {
      iter.remove();
      if (limit > 0 && --limit == 0)       break;
    }
  }
  size=size - DragonEssenceHandler.recipes.size();
  if (size == 0)   MessageLogger.logWarn(""String_Node_Str"");
 else   MessageLogger.logOk(""String_Node_Str"",size);
}",0.9833101529902644
34690,"@Override public void drawScreen(int mouseX,int mouseY,float partialTickTime){
  if (isLoaded) {
    int wheel=Mouse.getDWheel();
    float prevScale=field_146570_r;
    if (wheel < 0)     field_146570_r+=0.5F;
 else     if (wheel > 0)     field_146570_r-=0.5F;
    field_146570_r=MathUtil.clamp(field_146570_r,1F,2F);
    if (field_146570_r != prevScale) {
      field_146567_u-=((field_146570_r * field_146555_f) - (prevScale * field_146555_f)) * 0.5F;
      field_146566_v-=((field_146570_r * field_146557_g) - (prevScale * field_146557_g)) * 0.5F;
      field_146565_w=field_146569_s=field_146567_u;
      field_146573_x=field_146568_t=field_146566_v;
    }
  }
  super.drawScreen(mouseX,mouseY,partialTickTime);
}","@Override public void drawScreen(int mouseX,int mouseY,float partialTickTime){
  if (isLoaded) {
    int wheel=Mouse.getDWheel();
    float prevScale=field_146570_r;
    if (wheel < 0)     field_146570_r+=0.5F;
 else     if (wheel > 0)     field_146570_r-=0.5F;
    field_146570_r=MathUtil.clamp(field_146570_r,1F,2F);
    if (!MathUtil.floatEquals(field_146570_r,prevScale)) {
      field_146567_u-=((field_146570_r * field_146555_f) - (prevScale * field_146555_f)) * 0.5F;
      field_146566_v-=((field_146570_r * field_146557_g) - (prevScale * field_146557_g)) * 0.5F;
      field_146565_w=field_146569_s=field_146567_u;
      field_146573_x=field_146568_t=field_146566_v;
    }
  }
  super.drawScreen(mouseX,mouseY,partialTickTime);
}",0.962912087912088
34691,"public ItemStack tryTeleportEntity(ItemStack is,EntityPlayer player,Entity entity){
  if (entity.isRiding() || entity.riddenByEntity != null)   return is;
  if (is.stackTagCompound != null && is.stackTagCompound.hasKey(""String_Node_Str""))   return is;
  GemData gemData=new GemData();
  gemData.set(is.stackTagCompound);
  if (gemData.isLinked() && entity.dimension == gemData.dim) {
    int itemDamage=is.getItemDamage();
    if (itemDamage >= is.getMaxDamage())     return is;
    boolean isLiving=entity instanceof EntityLivingBase;
    PacketPipeline.sendToAllAround(entity,64D,new C21EffectEntity(FXType.Entity.GEM_TELEPORT_FROM,entity));
    damageItem(is,player);
    if (isLiving)     ((EntityLivingBase)entity).setPositionAndUpdate(gemData.x + 0.5D,gemData.y + 1.001D,gemData.z + 0.5D);
    entity.setLocationAndAngles(gemData.x + 0.5D,gemData.y + 1.001D,gemData.z + 0.5D,entity.rotationYaw,entity.rotationPitch);
    entity.fallDistance=0F;
    float percBroken=itemDamage / (float)is.getMaxDamage();
    if (percBroken > 0.66F && entity.worldObj.rand.nextFloat() * 1.4F < percBroken) {
      GemSideEffects.performRandomEffect(entity,percBroken);
    }
    if (is.stackTagCompound == null)     is.stackTagCompound=new NBTTagCompound();
    is.stackTagCompound.setByte(""String_Node_Str"",(byte)50);
    PacketPipeline.sendToAllAround(entity,64D,new C20Effect(FXType.Basic.GEM_TELEPORT_TO,entity));
    CausatumUtils.increase(player,CausatumMeters.ITEM_USAGE,1F);
  }
  return is;
}","public ItemStack tryTeleportEntity(ItemStack is,EntityPlayer player,Entity entity){
  if (entity.isRiding() || entity.riddenByEntity != null || is.stackTagCompound == null)   return is;
  if (is.stackTagCompound != null && is.stackTagCompound.hasKey(""String_Node_Str""))   return is;
  GemData gemData=new GemData();
  gemData.set(is.stackTagCompound);
  if (gemData.isLinked() && entity.dimension == gemData.dim) {
    int itemDamage=is.getItemDamage();
    if (itemDamage >= is.getMaxDamage())     return is;
    boolean isLiving=entity instanceof EntityLivingBase;
    PacketPipeline.sendToAllAround(entity,64D,new C21EffectEntity(FXType.Entity.GEM_TELEPORT_FROM,entity));
    damageItem(is,player);
    if (isLiving)     ((EntityLivingBase)entity).setPositionAndUpdate(gemData.x + 0.5D,gemData.y + 1.001D,gemData.z + 0.5D);
    entity.setLocationAndAngles(gemData.x + 0.5D,gemData.y + 1.001D,gemData.z + 0.5D,entity.rotationYaw,entity.rotationPitch);
    entity.fallDistance=0F;
    float percBroken=itemDamage / (float)is.getMaxDamage();
    if (percBroken > 0.66F && entity.worldObj.rand.nextFloat() * 1.4F < percBroken) {
      GemSideEffects.performRandomEffect(entity,percBroken);
    }
    if (is.stackTagCompound == null)     is.stackTagCompound=new NBTTagCompound();
    is.stackTagCompound.setByte(""String_Node_Str"",(byte)50);
    PacketPipeline.sendToAllAround(entity,64D,new C20Effect(FXType.Basic.GEM_TELEPORT_TO,entity));
    CausatumUtils.increase(player,CausatumMeters.ITEM_USAGE,1F);
  }
  return is;
}",0.9897044171371636
34692,"@Override public void run(String... args){
  int variation=args.length == 0 ? -1 : Ints.tryParse(args[0]);
  for (  IslandBiomeBase biome : new ArrayList<IslandBiomeBase>(IslandBiomeBase.biomeList)) {
    if (biome.isValidMetadata(variation)) {
      List<IslandBiomeBase> prevBiomes=new ArrayList<>(IslandBiomeBase.biomeList);
      IslandBiomeBase.biomeList.clear();
      IslandBiomeBase.biomeList.add(biome);
      try {
        Field fieldVariations=IslandBiomeBase.class.getDeclaredField(""String_Node_Str"");
        fieldVariations.setAccessible(true);
        Object prevVariations=fieldVariations.get(biome);
        BiomeContentVariation variationInst=null;
        for (        BiomeContentVariation var : (WeightedList<BiomeContentVariation>)prevVariations) {
          if (var.id == variation) {
            variationInst=var;
            break;
          }
        }
        if (variationInst != null) {
          fieldVariations.set(biome,new WeightedList<BiomeContentVariation>(variationInst));
          generate();
          fieldVariations.set(biome,prevVariations);
          variation=-2;
        }
      }
 catch (      NoSuchFieldException|SecurityException|IllegalArgumentException|IllegalAccessException e) {
        e.printStackTrace();
      }
      IslandBiomeBase.biomeList.clear();
      IslandBiomeBase.biomeList.addAll(prevBiomes);
    }
  }
  if (variation == -1)   generate();
}","@Override public void run(String... args){
  int variation=args.length == 0 ? -1 : DragonUtil.tryParse(args[0],-1);
  for (  IslandBiomeBase biome : new ArrayList<IslandBiomeBase>(IslandBiomeBase.biomeList)) {
    if (biome.isValidMetadata(variation)) {
      List<IslandBiomeBase> prevBiomes=new ArrayList<>(IslandBiomeBase.biomeList);
      IslandBiomeBase.biomeList.clear();
      IslandBiomeBase.biomeList.add(biome);
      try {
        Field fieldVariations=IslandBiomeBase.class.getDeclaredField(""String_Node_Str"");
        fieldVariations.setAccessible(true);
        Object prevVariations=fieldVariations.get(biome);
        BiomeContentVariation variationInst=null;
        for (        BiomeContentVariation var : (WeightedList<BiomeContentVariation>)prevVariations) {
          if (var.id == variation) {
            variationInst=var;
            break;
          }
        }
        if (variationInst != null) {
          fieldVariations.set(biome,new WeightedList<BiomeContentVariation>(variationInst));
          generate();
          fieldVariations.set(biome,prevVariations);
          variation=-2;
        }
      }
 catch (      NoSuchFieldException|SecurityException|IllegalArgumentException|IllegalAccessException e) {
        e.printStackTrace();
      }
      IslandBiomeBase.biomeList.clear();
      IslandBiomeBase.biomeList.addAll(prevBiomes);
    }
  }
  if (variation == -1)   generate();
}",0.9939950547509714
34693,"public void generateInWorld(LargeStructureWorld world,Random rand){
  int xx, yy, zz, offX, offZ, fromX, fromZ, dir, dist;
  boolean prevStairs=false;
  List<int[]> stairs=new ArrayList<>();
  for (  LaboratoryElement room : roomElements) {
    if (room.type == LaboratoryElementType.SMALL_ROOM)     LaboratoryElementPlacer.generateSmallRoom(world,rand,room.x,room.y,room.z);
 else     LaboratoryElementPlacer.generateLargeRoom(world,rand,room.x,room.y,room.z);
  }
  for (  LaboratoryElement room : roomElements) {
    for (dir=0; dir < 4; dir++) {
      if (room.connected[dir]) {
        room.connected[dir]=false;
        offX=Direction.offsetX[dir];
        offZ=Direction.offsetZ[dir];
        fromX=xx=room.x + offX * (room.type.halfSizeX + 1);
        fromZ=zz=room.z + offZ * (room.type.halfSizeZ + 1);
        yy=room.y;
        dist=1;
        LaboratoryElementPlacer.generateRoomEntrance(world,rand,fromX - offX,yy,fromZ - offZ,offX != 0);
        CycleProtection.setCounter(512);
        while (CycleProtection.proceed()) {
          xx+=offX;
          zz+=offZ;
          ++dist;
          LaboratoryElement hall=getAt(xx,zz);
          if (hall == null) {
            LaboratoryElement nextRoom=null;
            for (int test=0, tx=xx, tz=zz; test < 16; test++) {
              LaboratoryElement element=getAt(tx+=offX,tz+=offZ);
              if (element != null) {
                nextRoom=element;
                break;
              }
            }
            if (nextRoom.y != yy) {
              xx-=offX;
              zz-=offZ;
              stairs.add(new int[]{xx,yy,zz,nextRoom.y - yy,dir});
            }
            LaboratoryElementPlacer.generateHall(world,rand,fromX,fromZ,xx - offX,zz - offZ,yy,offX != 0);
            if (nextRoom.y != yy) {
              xx+=offX;
              zz+=offZ;
              yy=nextRoom.y;
            }
            LaboratoryElementPlacer.generateRoomEntrance(world,rand,xx,yy,zz,offX != 0);
            break;
          }
 else           if (hall.y != yy) {
            LaboratoryElementPlacer.generateHall(world,rand,fromX,fromZ,xx - offX,zz - offZ,yy,offX != 0);
            stairs.add(new int[]{xx,yy,zz,hall.y - yy,dir});
            fromX=xx+=offX;
            fromZ=zz+=offZ;
            yy=hall.y;
            continue;
          }
          prevStairs=false;
        }
        CycleProtection.reset();
        dist+=room.type.halfSizeX * offX + room.type.halfSizeZ * offZ - 1;
        while (--dist >= 0) {
          LaboratoryElement ele=getAt(xx,zz);
          if (ele != null && ele.type.isRoom()) {
            ele.connected[Direction.rotateOpposite[dir]]=false;
            break;
          }
 else {
            xx+=offX;
            zz+=offZ;
          }
        }
      }
    }
  }
  for (  LaboratoryElement room : roomElements) {
    if (room.type == LaboratoryElementType.SMALL_ROOM)     LaboratoryContent.populateSmallRoom(world,rand,room.x,room.y,room.z);
 else     LaboratoryContent.populateLargeRoom(world,rand,room.x,room.y,room.z);
  }
  for (  int[] array : stairs)   LaboratoryElementPlacer.generateHallStairs(world,rand,array[0],array[1],array[2],Direction.offsetX[array[4]],array[3],Direction.offsetZ[array[4]]);
}","public void generateInWorld(LargeStructureWorld world,Random rand){
  int xx, yy, zz, offX, offZ, fromX, fromZ, dir, dist;
  boolean prevStairs=false;
  List<int[]> stairs=new ArrayList<>();
  for (  LaboratoryElement room : roomElements) {
    if (room.type == LaboratoryElementType.SMALL_ROOM)     LaboratoryElementPlacer.generateSmallRoom(world,rand,room.x,room.y,room.z);
 else     LaboratoryElementPlacer.generateLargeRoom(world,rand,room.x,room.y,room.z);
  }
  for (  LaboratoryElement room : roomElements) {
    for (dir=0; dir < 4; dir++) {
      if (room.connected[dir]) {
        room.connected[dir]=false;
        offX=Direction.offsetX[dir];
        offZ=Direction.offsetZ[dir];
        fromX=xx=room.x + offX * (room.type.halfSizeX + 1);
        fromZ=zz=room.z + offZ * (room.type.halfSizeZ + 1);
        yy=room.y;
        dist=1;
        LaboratoryElementPlacer.generateRoomEntrance(world,rand,fromX - offX,yy,fromZ - offZ,offX != 0);
        CycleProtection.setCounter(512);
        while (CycleProtection.proceed()) {
          xx+=offX;
          zz+=offZ;
          ++dist;
          LaboratoryElement hall=getAt(xx,zz);
          if (hall == null) {
            LaboratoryElement nextRoom=null;
            for (int test=0, tx=xx, tz=zz; test < 16; test++) {
              LaboratoryElement element=getAt(tx+=offX,tz+=offZ);
              if (element != null) {
                nextRoom=element;
                break;
              }
            }
            if (nextRoom == null) {
              Log.error(""String_Node_Str"");
              continue;
            }
            if (nextRoom.y != yy) {
              xx-=offX;
              zz-=offZ;
              stairs.add(new int[]{xx,yy,zz,nextRoom.y - yy,dir});
            }
            LaboratoryElementPlacer.generateHall(world,rand,fromX,fromZ,xx - offX,zz - offZ,yy,offX != 0);
            if (nextRoom.y != yy) {
              xx+=offX;
              zz+=offZ;
              yy=nextRoom.y;
            }
            LaboratoryElementPlacer.generateRoomEntrance(world,rand,xx,yy,zz,offX != 0);
            break;
          }
 else           if (hall.y != yy) {
            LaboratoryElementPlacer.generateHall(world,rand,fromX,fromZ,xx - offX,zz - offZ,yy,offX != 0);
            stairs.add(new int[]{xx,yy,zz,hall.y - yy,dir});
            fromX=xx+=offX;
            fromZ=zz+=offZ;
            yy=hall.y;
            continue;
          }
          prevStairs=false;
        }
        CycleProtection.reset();
        dist+=room.type.halfSizeX * offX + room.type.halfSizeZ * offZ - 1;
        while (--dist >= 0) {
          LaboratoryElement ele=getAt(xx,zz);
          if (ele != null && ele.type.isRoom()) {
            ele.connected[Direction.rotateOpposite[dir]]=false;
            break;
          }
 else {
            xx+=offX;
            zz+=offZ;
          }
        }
      }
    }
  }
  for (  LaboratoryElement room : roomElements) {
    if (room.type == LaboratoryElementType.SMALL_ROOM)     LaboratoryContent.populateSmallRoom(world,rand,room.x,room.y,room.z);
 else     LaboratoryContent.populateLargeRoom(world,rand,room.x,room.y,room.z);
  }
  for (  int[] array : stairs)   LaboratoryElementPlacer.generateHallStairs(world,rand,array[0],array[1],array[2],Direction.offsetX[array[4]],array[3],Direction.offsetZ[array[4]]);
}",0.9819571865443424
34694,"public static void load(){
  if (!DragonUtil.checkSystemProperty(""String_Node_Str""))   return;
  Log.debug(""String_Node_Str"");
  try {
    for (    ClassInfo clsInfo : ClassPath.from(UnitTester.class.getClassLoader()).getTopLevelClassesRecursive(""String_Node_Str"")) {
      Class<?> cls=clsInfo.load();
      Constructor<?> constr=null;
      try {
        constr=cls.getConstructor();
      }
 catch (      Exception e) {
      }
      if (constr == null) {
        Log.error(""String_Node_Str"",cls.getSimpleName());
        continue;
      }
      for (      Method method : cls.getMethods()) {
        UnitTest test=method.getAnnotation(UnitTest.class);
        if (test != null) {
          if ((method.getModifiers() & Modifier.STATIC) == Modifier.STATIC) {
            Log.error(""String_Node_Str"",cls.getSimpleName(),method.getName());
            continue;
          }
          if (test.runTime() != RunTime.INGAME && !test.trigger().isEmpty()) {
            Log.error(""String_Node_Str"",cls.getSimpleName(),method.getName(),test.runTime());
            continue;
          }
          if (test.type() == MethodType.PREPARATION)           registryPrep.put(test.runTime(),method);
 else           registryTests.put(test.runTime(),method);
          Log.debug(""String_Node_Str"",cls.getSimpleName(),method.getName(),test.type() == MethodType.PREPARATION ? ""String_Node_Str"" : ""String_Node_Str"");
        }
      }
    }
  }
 catch (  IOException e) {
    Log.throwable(e,""String_Node_Str"");
  }
}","public static void load(){
  if (!DragonUtil.checkSystemProperty(""String_Node_Str""))   return;
  Log.debug(prefix + ""String_Node_Str"");
  try {
    for (    ClassInfo clsInfo : ClassPath.from(UnitTester.class.getClassLoader()).getTopLevelClassesRecursive(""String_Node_Str"")) {
      Class<?> cls=clsInfo.load();
      Constructor<?> constr=null;
      try {
        constr=cls.getConstructor();
      }
 catch (      Exception e) {
      }
      if (constr == null) {
        Log.error(prefix + ""String_Node_Str"",cls.getSimpleName());
        continue;
      }
      for (      Method method : cls.getMethods()) {
        UnitTest test=method.getAnnotation(UnitTest.class);
        if (test != null) {
          if ((method.getModifiers() & Modifier.STATIC) == Modifier.STATIC) {
            Log.error(prefix + ""String_Node_Str"",cls.getSimpleName(),method.getName());
            continue;
          }
          if (test.runTime() != RunTime.INGAME && !test.trigger().isEmpty()) {
            Log.error(prefix + ""String_Node_Str"",cls.getSimpleName(),method.getName(),test.runTime());
            continue;
          }
          if (test.type() == MethodType.PREPARATION)           registryPrep.put(test.runTime(),method);
 else           registryTests.put(test.runTime(),method);
          Log.debug(prefix + ""String_Node_Str"",cls.getSimpleName(),method.getName(),test.type() == MethodType.PREPARATION ? ""String_Node_Str"" : ""String_Node_Str"");
        }
      }
    }
  }
 catch (  IOException e) {
    Log.throwable(e,prefix + ""String_Node_Str"");
  }
}",0.9823066841415464
34695,"public static void trigger(RunTime time,String trigger){
  Set<Method> prepList=new HashSet<>(), testList=new HashSet<>();
  for (  Method prep : registryPrep.get(time)) {
    if (trigger.equals(prep.getAnnotation(UnitTest.class).trigger()))     prepList.add(prep);
  }
  for (  Method test : registryTests.get(time)) {
    if (trigger.equals(test.getAnnotation(UnitTest.class).trigger()))     testList.add(test);
  }
  if (prepList.isEmpty() && testList.isEmpty())   return;
  Log.debug(""String_Node_Str"",prepList.size(),testList.size());
  Map<Class<?>,Object> objects=new HashMap<>();
  int succeeded=0, failed=0;
  for (  Method method : Iterables.concat(prepList,testList)) {
    try {
      Class<?> cls=method.getDeclaringClass();
      Object obj=objects.get(cls);
      if (obj == null)       objects.put(cls,obj=cls.newInstance());
      boolean isTest=testList.contains(method);
      try {
        method.invoke(obj);
        if (isTest)         ++succeeded;
      }
 catch (      InvocationTargetException e) {
        if (!isTest)         Log.throwable(e.getCause(),""String_Node_Str"");
 else {
          Throwable cause=e.getCause();
          Log.error(""String_Node_Str"",cls.getSimpleName(),method.getName(),cause.getStackTrace()[0].getLineNumber(),cause.getMessage());
          ++failed;
        }
      }
    }
 catch (    Exception e) {
      Log.throwable(e,""String_Node_Str"");
    }
  }
  Log.debug(""String_Node_Str"",succeeded,failed);
}","public static void trigger(RunTime time,String trigger){
  Set<Method> prepList=new HashSet<>(), testList=new HashSet<>();
  for (  Method prep : registryPrep.get(time)) {
    if (trigger.equals(prep.getAnnotation(UnitTest.class).trigger()))     prepList.add(prep);
  }
  for (  Method test : registryTests.get(time)) {
    if (trigger.equals(test.getAnnotation(UnitTest.class).trigger()))     testList.add(test);
  }
  if (prepList.isEmpty() && testList.isEmpty())   return;
  Log.debug(prefix + ""String_Node_Str"",prepList.size(),testList.size());
  Map<Class<?>,Object> objects=new HashMap<>();
  int succeeded=0, failed=0;
  for (  Method method : Iterables.concat(prepList,testList)) {
    try {
      Class<?> cls=method.getDeclaringClass();
      Object obj=objects.get(cls);
      if (obj == null)       objects.put(cls,obj=cls.newInstance());
      boolean isTest=testList.contains(method);
      try {
        method.invoke(obj);
        if (isTest)         ++succeeded;
      }
 catch (      InvocationTargetException e) {
        if (!isTest)         Log.throwable(e.getCause(),prefix + ""String_Node_Str"");
 else {
          Throwable cause=e.getCause();
          Log.error(prefix + ""String_Node_Str"",cls.getSimpleName(),method.getName(),cause.getStackTrace()[1].getLineNumber(),cause.getMessage());
          ++failed;
        }
      }
    }
 catch (    Exception e) {
      Log.throwable(e,prefix + ""String_Node_Str"");
    }
  }
  Log.debug(prefix + ""String_Node_Str"",succeeded,failed);
}",0.984126984126984
34696,"@Override protected void mouseClicked(int mouseX,int mouseY,int buttonId){
  if (buttonId == 0 && achievements != null) {
    int offsetX=MathUtil.clamp(MathUtil.floor(field_146567_u),AchievementList.minDisplayColumn * 24 - 112,AchievementList.maxDisplayColumn * 24 - 78);
    int offsetY=MathUtil.clamp(MathUtil.floor(field_146566_v),AchievementList.minDisplayRow * 24 - 112,AchievementList.maxDisplayRow * 24 - 78);
    int centerX=(width - field_146555_f) / 2 + 16;
    int centerY=(height - field_146557_g) / 2 + 17;
    float realMouseX=(mouseX - centerX) * field_146570_r;
    float realMouseY=(mouseY - centerY) * field_146570_r;
    for (    Achievement achievement : achievements.getAchievements()) {
      int x=achievement.displayColumn * 24 - offsetX;
      int y=achievement.displayRow * 24 - offsetY;
      if (x >= -24 && y >= -24 && x <= 224F * field_146570_r && y <= 155F * field_146570_r && realMouseX >= x && realMouseX <= x + 22 && realMouseY >= y && realMouseY <= y + 22) {
        KnowledgeObject<? extends IKnowledgeObjectInstance<?>> obj=KnowledgeUtils.tryGetFromItemStack(achievement.theItemStack);
        if (obj != null)         CompendiumEventsClient.openCompendium(obj);
      }
    }
  }
  super.mouseClicked(mouseX,mouseY,buttonId);
}","@Override protected void mouseClicked(int mouseX,int mouseY,int buttonId) throws IOException {
  if (buttonId == 0 && achievements != null) {
    int offsetX=MathUtil.clamp(MathUtil.floor(field_146567_u),AchievementList.minDisplayColumn * 24 - 112,AchievementList.maxDisplayColumn * 24 - 78);
    int offsetY=MathUtil.clamp(MathUtil.floor(field_146566_v),AchievementList.minDisplayRow * 24 - 112,AchievementList.maxDisplayRow * 24 - 78);
    int centerX=(width - field_146555_f) / 2 + 16;
    int centerY=(height - field_146557_g) / 2 + 17;
    float realMouseX=(mouseX - centerX) * field_146570_r;
    float realMouseY=(mouseY - centerY) * field_146570_r;
    for (    Achievement achievement : achievements.getAchievements()) {
      int x=achievement.displayColumn * 24 - offsetX;
      int y=achievement.displayRow * 24 - offsetY;
      if (x >= -24 && y >= -24 && x <= 224F * field_146570_r && y <= 155F * field_146570_r && realMouseX >= x && realMouseX <= x + 22 && realMouseY >= y && realMouseY <= y + 22) {
        KnowledgeObject<? extends IKnowledgeObjectInstance<?>> obj=KnowledgeUtils.tryGetFromItemStack(achievement.theItemStack);
        if (obj != null)         CompendiumEventsClient.openCompendium(obj);
      }
    }
  }
  super.mouseClicked(mouseX,mouseY,buttonId);
}",0.9921630094043888
34697,"@Override public void onUpdate(ItemStack is,World world,Entity entity,int slot,boolean isHeld){
  if (world.isRemote) {
    if (is.hasTagCompound() && entity instanceof EntityPlayer) {
      NBTTagCompound nbt=ItemUtil.getNBT(is,false);
      currentBiome=nbt.getByte(""String_Node_Str"");
      if (lastSavedX == Integer.MAX_VALUE && lastSavedZ == Integer.MAX_VALUE) {
        for (int x=entity.chunkCoordX - 96, z; x <= entity.chunkCoordX + 96; x++) {
          for (z=entity.chunkCoordZ - 96; z <= entity.chunkCoordZ + 96; z++) {
            byte biome=IslandSpawnChecker.getIslandBiomeAt(x,z,nbt.getLong(""String_Node_Str""),nbt.getInteger(""String_Node_Str""));
            if (biome != -1)             locations.get(biome).add(new BlockPosM(x * 16 + (IslandSpawnChecker.featureSize >> 1),0,z * 16 + (IslandSpawnChecker.featureSize >> 1)));
          }
        }
        lastSavedX=entity.chunkCoordX;
        lastSavedZ=entity.chunkCoordZ;
      }
 else       if (MathUtil.square(entity.chunkCoordX - lastSavedX) + MathUtil.square(entity.chunkCoordZ - lastSavedZ) > 250F) {
        lastSavedX=lastSavedZ=Integer.MAX_VALUE;
      }
    }
  }
 else {
    NBTTagCompound nbt=ItemUtil.getNBT(is,true);
    if (entity instanceof EntityPlayerMP) {
      EntityPlayerMP player=(EntityPlayerMP)entity;
      if (!player.func_147099_x().hasAchievementUnlocked(AchievementManager.BIOME_COMPASS))       player.addStat(AchievementManager.BIOME_COMPASS,1);
    }
    if (is.stackTagCompound == null)     is.stackTagCompound=new NBTTagCompound();
    if (!nbt.hasKey(""String_Node_Str"")) {
      nbt.setLong(""String_Node_Str"",world.getSeed());
      nbt.setShort(""String_Node_Str"",(short)(1 + WorldDataHandler.<DragonSavefile>get(DragonSavefile.class).getDragonDeathAmount()));
    }
 else     if (isHeld && entity.dimension == 1 && entity.ticksExisted % 100 == 0) {
      int seed2=1 + WorldDataHandler.<DragonSavefile>get(DragonSavefile.class).getDragonDeathAmount();
      if (seed2 != nbt.getShort(""String_Node_Str""))       nbt.setShort(""String_Node_Str"",(short)seed2);
    }
  }
}","@Override public void onUpdate(ItemStack is,World world,Entity entity,int slot,boolean isHeld){
  if (world.isRemote) {
    if (is.hasTagCompound() && entity instanceof EntityPlayer) {
      NBTTagCompound nbt=ItemUtil.getNBT(is,false);
      currentBiome=nbt.getByte(""String_Node_Str"");
      if (lastSavedX == Integer.MAX_VALUE && lastSavedZ == Integer.MAX_VALUE) {
        for (int x=entity.chunkCoordX - 96, z; x <= entity.chunkCoordX + 96; x++) {
          for (z=entity.chunkCoordZ - 96; z <= entity.chunkCoordZ + 96; z++) {
            byte biome=IslandSpawnChecker.getIslandBiomeAt(x,z,nbt.getLong(""String_Node_Str""),nbt.getInteger(""String_Node_Str""));
            if (biome != -1)             locations.get(biome).add(new BlockPosM(x * 16 + (IslandSpawnChecker.featureSize >> 1),0,z * 16 + (IslandSpawnChecker.featureSize >> 1)));
          }
        }
        lastSavedX=entity.chunkCoordX;
        lastSavedZ=entity.chunkCoordZ;
      }
 else       if (MathUtil.square(entity.chunkCoordX - lastSavedX) + MathUtil.square(entity.chunkCoordZ - lastSavedZ) > 250F) {
        lastSavedX=lastSavedZ=Integer.MAX_VALUE;
      }
    }
  }
 else {
    NBTTagCompound nbt=ItemUtil.getNBT(is,true);
    if (entity instanceof EntityPlayerMP) {
      EntityPlayerMP player=(EntityPlayerMP)entity;
      if (!player.getStatFile().hasAchievementUnlocked(AchievementManager.BIOME_COMPASS))       player.addStat(AchievementManager.BIOME_COMPASS,1);
    }
    if (!nbt.hasKey(""String_Node_Str"")) {
      nbt.setLong(""String_Node_Str"",world.getSeed());
      nbt.setShort(""String_Node_Str"",(short)(1 + WorldDataHandler.<DragonSavefile>get(DragonSavefile.class).getDragonDeathAmount()));
    }
 else     if (isHeld && entity.dimension == 1 && entity.ticksExisted % 100 == 0) {
      int seed2=1 + WorldDataHandler.<DragonSavefile>get(DragonSavefile.class).getDragonDeathAmount();
      if (seed2 != nbt.getShort(""String_Node_Str""))       nbt.setShort(""String_Node_Str"",(short)seed2);
    }
  }
}",0.973612823674476
34698,"@Override public boolean hasEffect(ItemStack is,int pass){
  return is.getItemDamage() == 1 || super.hasEffect(is,pass);
}","@Override public boolean hasEffect(ItemStack is){
  return is.getItemDamage() == 1 || super.hasEffect(is);
}",0.9391304347826088
34699,"public BlockDeathFlowerPot(){
  setTickRandomly(true);
  setDefaultState(blockState.getBaseState().withProperty(BlockDeathFlower.DECAY,0));
}","public BlockDeathFlowerPot(){
  super(Material.circuits);
  setTickRandomly(true);
  createSimpleMeta(BlockDeathFlower.DECAY,0,15);
}",0.6788321167883211
34700,"public static void loadBlocks(){
  FluidRegistry.registerFluid(BlockEnderGoo.fluid);
  register(""String_Node_Str"",obsidian_falling=new BlockObsidianEnd().setHardness(50F).setResistance(2000F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",obsidian_stairs=new BlockBasicStairs(Blocks.obsidian.getDefaultState()).setHardness(25F).setResistance(1000F).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",obsidian_special=(BlockAbstractState)new BlockObsidianSpecial(false).setHardness(28F).setResistance(2000F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",obsidian_special_glow=(BlockAbstractState)new BlockObsidianSpecial(true).setHardness(28F).setResistance(2000F).setLightLevel(1F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",end_terrain=(BlockAbstractState)new BlockEndstoneTerrain().setHardness(2.5F).setResistance(15F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick=(BlockAbstractState)new BlockRavagedBrick().setHardness(3.5F).setResistance(28F).setStepSound(Block.soundTypePiston).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_smooth=new BlockBasic(Material.rock).setHardness(1F).setResistance(6F).setStepSound(Block.soundTypePiston).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_glow=new BlockBasic(Material.rock).setHardness(1F).setResistance(6F).setLightLevel(1F).setStepSound(Block.soundTypePiston).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_slab=new BlockBasicSlab(ravaged_brick).setHardness(1.75F).setResistance(14F).setStepSound(Block.soundTypePiston).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_stairs=new BlockBasicStairs(ravaged_brick.getDefaultState()).setHardness(2.25F).setResistance(22F).setStepSound(Block.soundTypePiston).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_fence=new BlockFence(Material.rock).setHardness(1.5F).setResistance(6F).setStepSound(Block.soundTypePiston).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",dungeon_puzzle=(BlockAbstractState)new BlockDungeonPuzzle().setBlockUnbreakable().setResistance(6000000F).setStepSound(Block.soundTypeMetal).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",cinder=new BlockBasic(Material.rock).setHardness(1F).setResistance(10F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",persegrit=(BlockAbstractState)new BlockPersegrit().setHardness(4F).setResistance(0.2F).setStepSound(Block.soundTypeGravel).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",laboratory_obsidian=new BlockBasic(Material.rock).setHardness(40F).setResistance(500F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",laboratory_floor=new BlockBasic(Material.rock).setHardness(30F).setResistance(100F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",laboratory_stairs=new BlockBasicStairs(laboratory_floor.getDefaultState()).setHardness(20F).setResistance(80F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",end_powder_ore=new BlockEndPowderOre().setHardness(3F).setResistance(12F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",endium_ore=new BlockEndiumOre().setHardness(18F).setResistance(100F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",stardust_ore=(BlockAbstractState)new BlockStardustOre().setHardness(7F).setResistance(4F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",igneous_rock_ore=new BlockIgneousRockOre().setHardness(2F).setResistance(5F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",instability_orb_ore=new BlockInstabilityOrbOre().setHardness(5.5F).setResistance(3F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",sphalerite=(BlockAbstractState)new BlockSphalerite().setHardness(1.8F).setResistance(40F).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",essence_altar=(BlockAbstractState)new BlockEssenceAltar().setHardness(8F).setResistance(20F).setLightOpacity(0).setLightLevel(0.4F).setStepSound(Block.soundTypeMetal).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",enhanced_brewing_stand=new BlockEnhancedBrewingStand().setHardness(0.65F).setLightLevel(0.125F).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",enhanced_tnt=new BlockEnhancedTNT().setHardness(0F).setStepSound(Block.soundTypeGrass).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",void_chest=new BlockVoidChest().setHardness(5F).setResistance(140F).setStepSound(Block.soundTypePiston).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",decomposition_table=new BlockDecompositionTable().setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",experience_table=new BlockExperienceTable().setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",accumulation_table=new BlockAccumulationTable().setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",extraction_table=new BlockExtractionTable().setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",transport_beacon=new BlockTransportBeacon().setBlockUnbreakable().setResistance(6000000F).setLightLevel(1F).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",endium_block=new BlockCompressed(MapColor.pinkColor).setHardness(14F).setResistance(800F).setStepSound(Block.soundTypeMetal).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",spooky_log=(BlockAbstractState)new BlockSpookyLog().setHardness(0.7F).setStepSound(Block.soundTypeWood).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",spooky_leaves=new BlockSpookyLeaves().setHardness(0.1F).setStepSound(Block.soundTypeGrass).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",ender_goo=new BlockEnderGoo().setHardness(150F).setLightOpacity(2).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",crossed_decoration=new BlockCrossedDecoration().setHardness(0F).setStepSound(Block.soundTypeGrass).setCreativeTab(null).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",enderman_head=new BlockEndermanHead().setHardness(1F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",death_flower=new BlockDeathFlower().setHardness(0F).setResistance(4F).setStepSound(Block.soundTypeGrass).setCreativeTab(null).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",energy_cluster=new BlockEnergyCluster().setHardness(0.7F).setResistance(0.2F).setStepSound(BlockEnergyCluster.soundTypeEnergyCluster).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",corrupted_energy_high=(BlockAbstractState)new BlockCorruptedEnergy(true).setBlockUnbreakable().setResistance(6000000F));
  register(""String_Node_Str"",corrupted_energy_low=(BlockAbstractState)new BlockCorruptedEnergy(false).setBlockUnbreakable().setResistance(6000000F));
  register(""String_Node_Str"",laboratory_glass=new BlockLaboratoryGlass().setHardness(5F).setResistance(50F).setLightOpacity(5).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",death_flower_pot=new BlockDeathFlowerPot().setHardness(0F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",laser_beam=new BlockLaserBeam().setBlockUnbreakable().setLightLevel(1F).setResistance(6000000F).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",custom_spawner=new BlockCustomSpawner().setHardness(5F).setStepSound(Block.soundTypeMetal).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",temple_end_portal=new BlockTempleEndPortal().setHardness(-1F).setResistance(6000000F).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",biome_core=(BlockAbstractState)new BlockBiomeIslandCore().setBlockUnbreakable().setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",special_effects=new BlockSpecialEffects());
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockEssenceAltar.class);
  setItemClass(""String_Node_Str"",ItemBlockEnhancedTNT.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockEndFlower.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockSlab.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
}","public static void loadBlocks(){
  FluidRegistry.registerFluid(BlockEnderGoo.fluid);
  register(""String_Node_Str"",obsidian_falling=new BlockObsidianEnd().setHardness(50F).setResistance(2000F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",obsidian_stairs=new BlockBasicStairs(Blocks.obsidian.getDefaultState()).setHardness(25F).setResistance(1000F).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",obsidian_special=(BlockAbstractState)new BlockObsidianSpecial(false).setHardness(28F).setResistance(2000F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",obsidian_special_glow=(BlockAbstractState)new BlockObsidianSpecial(true).setHardness(28F).setResistance(2000F).setLightLevel(1F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",end_terrain=(BlockAbstractState)new BlockEndstoneTerrain().setHardness(2.5F).setResistance(15F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick=(BlockAbstractState)new BlockRavagedBrick().setHardness(3.5F).setResistance(28F).setStepSound(Block.soundTypePiston).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_smooth=new BlockBasic(Material.rock).setHardness(1F).setResistance(6F).setStepSound(Block.soundTypePiston).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_glow=new BlockBasic(Material.rock).setHardness(1F).setResistance(6F).setLightLevel(1F).setStepSound(Block.soundTypePiston).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_slab=new BlockBasicSlab(ravaged_brick).setHardness(1.75F).setResistance(14F).setStepSound(Block.soundTypePiston).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_stairs=new BlockBasicStairs(ravaged_brick.getDefaultState()).setHardness(2.25F).setResistance(22F).setStepSound(Block.soundTypePiston).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",ravaged_brick_fence=new BlockFence(Material.rock).setHardness(1.5F).setResistance(6F).setStepSound(Block.soundTypePiston).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",dungeon_puzzle=(BlockAbstractState)new BlockDungeonPuzzle().setBlockUnbreakable().setResistance(6000000F).setStepSound(Block.soundTypeMetal).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",cinder=new BlockBasic(Material.rock).setHardness(1F).setResistance(10F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",persegrit=(BlockAbstractState)new BlockPersegrit().setHardness(4F).setResistance(0.2F).setStepSound(Block.soundTypeGravel).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",laboratory_obsidian=new BlockBasic(Material.rock).setHardness(40F).setResistance(500F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",laboratory_floor=new BlockBasic(Material.rock).setHardness(30F).setResistance(100F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",laboratory_stairs=new BlockBasicStairs(laboratory_floor.getDefaultState()).setHardness(20F).setResistance(80F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",end_powder_ore=new BlockEndPowderOre().setHardness(3F).setResistance(12F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",endium_ore=new BlockEndiumOre().setHardness(18F).setResistance(100F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",stardust_ore=new BlockStardustOre().setHardness(7F).setResistance(4F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",igneous_rock_ore=new BlockIgneousRockOre().setHardness(2F).setResistance(5F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",instability_orb_ore=new BlockInstabilityOrbOre().setHardness(5.5F).setResistance(3F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",sphalerite=(BlockAbstractState)new BlockSphalerite().setHardness(1.8F).setResistance(40F).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",essence_altar=(BlockAbstractContainerState)new BlockEssenceAltar().setHardness(8F).setResistance(20F).setLightOpacity(0).setLightLevel(0.4F).setStepSound(Block.soundTypeMetal).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",enhanced_brewing_stand=new BlockEnhancedBrewingStand().setHardness(0.65F).setLightLevel(0.125F).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",enhanced_tnt=new BlockEnhancedTNT().setHardness(0F).setStepSound(Block.soundTypeGrass).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",void_chest=new BlockVoidChest().setHardness(5F).setResistance(140F).setStepSound(Block.soundTypePiston).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",decomposition_table=new BlockDecompositionTable().setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",experience_table=new BlockExperienceTable().setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",accumulation_table=new BlockAccumulationTable().setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",extraction_table=new BlockExtractionTable().setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",transport_beacon=new BlockTransportBeacon().setBlockUnbreakable().setResistance(6000000F).setLightLevel(1F).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",endium_block=new BlockCompressed(MapColor.pinkColor).setHardness(14F).setResistance(800F).setStepSound(Block.soundTypeMetal).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",spooky_log=(BlockAbstractState)new BlockSpookyLog().setHardness(0.7F).setStepSound(Block.soundTypeWood).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",spooky_leaves=new BlockSpookyLeaves().setHardness(0.1F).setStepSound(Block.soundTypeGrass).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",ender_goo=new BlockEnderGoo().setHardness(150F).setLightOpacity(2).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",crossed_decoration=new BlockCrossedDecoration().setHardness(0F).setStepSound(Block.soundTypeGrass).setCreativeTab(null).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",enderman_head=new BlockEndermanHead().setHardness(1F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",death_flower=new BlockDeathFlower().setHardness(0F).setResistance(4F).setStepSound(Block.soundTypeGrass).setCreativeTab(null).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",energy_cluster=new BlockEnergyCluster().setHardness(0.7F).setResistance(0.2F).setStepSound(BlockEnergyCluster.soundTypeEnergyCluster).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",corrupted_energy_high=(BlockAbstractState)new BlockCorruptedEnergy(true).setBlockUnbreakable().setResistance(6000000F));
  register(""String_Node_Str"",corrupted_energy_low=(BlockAbstractState)new BlockCorruptedEnergy(false).setBlockUnbreakable().setResistance(6000000F));
  register(""String_Node_Str"",laboratory_glass=new BlockLaboratoryGlass().setHardness(5F).setResistance(50F).setLightOpacity(5).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",death_flower_pot=new BlockDeathFlowerPot().setHardness(0F).setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",laser_beam=new BlockLaserBeam().setBlockUnbreakable().setLightLevel(1F).setResistance(6000000F).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",custom_spawner=new BlockCustomSpawner().setHardness(5F).setStepSound(Block.soundTypeMetal).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",temple_end_portal=new BlockTempleEndPortal().setHardness(-1F).setResistance(6000000F).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",biome_core=(BlockAbstractState)new BlockBiomeIslandCore().setBlockUnbreakable().setStepSound(Block.soundTypeStone).setUnlocalizedName(""String_Node_Str""));
  register(""String_Node_Str"",special_effects=new BlockSpecialEffects());
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockEssenceAltar.class);
  setItemClass(""String_Node_Str"",ItemBlockEnhancedTNT.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockEndFlower.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockSlab.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
  setItemClass(""String_Node_Str"",ItemBlockWithSubtypes.class);
}",0.9984710286286708
34701,"public BlockAbstractStateInt(Material materialIn){
  super(materialIn);
}","public BlockAbstractStateInt(Material material){
  super(material);
}",0.971830985915493
34702,"private PropertyEnumSimple(String name,Class valueClass){
  super(name,String.class);
  Set<String> valuesSetup=new HashSet<>();
  for (  Object o : valueClass.getEnumConstants()) {
    Enum e=(Enum)o;
    if (!valuesSetup.add(e.name()))     throw new IllegalArgumentException(""String_Node_Str"" + e + ""String_Node_Str"");
  }
  values=ImmutableSet.copyOf(valuesSetup);
}","private PropertyEnumSimple(String name,Class valueClass){
  super(name,String.class);
  Set<Enum> valuesSetup=new HashSet<>();
  for (  Object o : valueClass.getEnumConstants()) {
    Enum e=(Enum)o;
    if (!valuesSetup.add(e))     throw new IllegalArgumentException(""String_Node_Str"" + e + ""String_Node_Str"");
  }
  values=ImmutableSet.copyOf(valuesSetup);
}",0.9766803840877916
34703,"public EntityMobBabyEnderman(World world){
  super(world);
  setSize(0.5F,1.26F);
  stepHeight=1F;
  for (  ItemPriorityLevel level : ItemPriorityLevel.values)   itemPriorities.add(level);
  for (int a=0, index1, index2, size=itemPriorities.size(); a < rand.nextInt(20); a++) {
    index1=rand.nextInt(size);
    index2=rand.nextInt(size);
    if (index1 == index2)     continue;
    Collections.swap(itemPriorities,index1,index2);
  }
}","public EntityMobBabyEnderman(World world){
  super(world);
  EntityAIOldTarget.insertOldAI(this);
  setSize(0.5F,1.26F);
  stepHeight=1F;
  for (  ItemPriorityLevel level : ItemPriorityLevel.values)   itemPriorities.add(level);
  for (int a=0, index1, index2, size=itemPriorities.size(); a < rand.nextInt(20); a++) {
    index1=rand.nextInt(size);
    index2=rand.nextInt(size);
    if (index1 == index2)     continue;
    Collections.swap(itemPriorities,index1,index2);
  }
}",0.9572836801752465
34704,"@Override public void onLivingUpdate(){
  if (isWet()) {
    attackEntityFrom(DamageSource.drown,1F);
  }
  isJumping=false;
  if (getAttackTarget() != null) {
    faceEntity(getAttackTarget(),100F,100F);
  }
  boolean hasIS=isCarrying();
  if (!worldObj.isRemote) {
    if (target == null) {
      if (!hasIS && !isScared && rand.nextInt(550) == 0) {
        List<EntityPlayer> list=worldObj.getEntitiesWithinAABB(EntityPlayer.class,boundingBox.expand(6D,3D,6D));
        if (!list.isEmpty()) {
          target=list.get(rand.nextInt(list.size()));
          ItemStack headArmor=target.getCurrentArmor(3);
          if (headArmor != null && headArmor.getItem() == ItemList.enderman_head)           target=null;
 else           attentionLossTimer=(byte)(64 + rand.nextInt(62));
        }
      }
 else {
        List<EntityItem> list=worldObj.getEntitiesWithinAABB(EntityItem.class,boundingBox.expand(1D,0D,1D));
        if (!list.isEmpty() && ++itemDecisionTimer > rand.nextInt(70) + 15) {
          int carryingLevelIndex=itemPriorities.indexOf(carryingLevel);
          EntityItem item=list.get(rand.nextInt(list.size()));
          ItemStack is=item.getEntityItem();
          for (          ItemPriorityLevel level : itemPriorities) {
            if (level.isValid(is)) {
              if (itemPriorities.indexOf(level) < carryingLevelIndex) {
                if (hasIS) {
                  EntityItem newItem=new EntityItem(worldObj,posX,posY,posZ,getCarrying());
                  float power=0.3F, yawRadians=(float)Math.toRadians(rotationYaw), randomAngle=rand.nextFloat() * (float)Math.PI * 2F;
                  newItem.motionX=(-MathHelper.sin(yawRadians) * MathHelper.cos(yawRadians) * power);
                  newItem.motionZ=(MathHelper.cos(yawRadians) * MathHelper.cos(yawRadians) * power);
                  newItem.motionY=(-MathHelper.sin((float)Math.toRadians(rotationPitch)) * power + 0.1F);
                  power=0.02F * rand.nextFloat();
                  newItem.motionX+=MathHelper.cos(randomAngle) * power;
                  newItem.motionY+=(rand.nextFloat() - rand.nextFloat()) * 0.1F;
                  newItem.motionZ+=MathHelper.sin(randomAngle) * power;
                  worldObj.spawnEntityInWorld(newItem);
                }
                setCarriedItemStack(is);
                item.setDead();
              }
              break;
            }
          }
          itemDecisionTimer=0;
        }
      }
    }
 else     if (target != null) {
      if (--attentionLossTimer < -124 || target.isDead)       target=null;
 else       if (!hasIS && getDistanceToEntity(target) < 1.8D) {
        for (int attempt=0, slot; attempt < 60; attempt++) {
          slot=rand.nextInt(target.inventory.mainInventory.length);
          if (slot == target.inventory.currentItem)           continue;
          ItemStack is=target.inventory.mainInventory[slot];
          if (is != null) {
            ItemStack carrying=is.copy();
            carrying.stackSize=1;
            setCarriedItemStack(carrying);
            if (--target.inventory.mainInventory[slot].stackSize == 0) {
              target.inventory.mainInventory[slot]=null;
              PacketPipeline.sendToPlayer(target,new C00ClearInventorySlot(slot));
            }
            break;
          }
        }
        PathEntity escapePath=null;
        BlockPosM pos=new BlockPosM();
        for (int pathatt=0; pathatt < 100; pathatt++) {
          double ang=rand.nextDouble() * 2D * Math.PI, len=8D + rand.nextDouble() * 6D;
          pos.moveTo(this).moveBy(MathUtil.floor(Math.cos(ang) * len),rand.nextInt(4) - 2,MathUtil.floor(Math.sin(ang) * len));
          Block low=pos.getBlock(worldObj);
          if ((low.getMaterial() == Material.air || low == BlockList.crossed_decoration) && pos.moveUp().isAir(worldObj)) {
            escapePath=worldObj.getEntityPathToXYZ(this,xx,yy,zz,16F,false,true,false,false);
            break;
          }
        }
        if (escapePath != null)         setPathToEntity(escapePath);
        target=null;
      }
    }
    setAttackTarget(target);
  }
  super.onLivingUpdate();
}","@Override public void onLivingUpdate(){
  if (isWet()) {
    attackEntityFrom(DamageSource.drown,1F);
  }
  isJumping=false;
  if (getAttackTarget() != null) {
    faceEntity(getAttackTarget(),100F,100F);
  }
  boolean hasIS=isCarrying();
  if (!worldObj.isRemote) {
    if (target == null) {
      if (!hasIS && !isScared && rand.nextInt(550) == 0) {
        List<EntityPlayer> list=worldObj.getEntitiesWithinAABB(EntityPlayer.class,boundingBox.expand(6D,3D,6D));
        if (!list.isEmpty()) {
          target=list.get(rand.nextInt(list.size()));
          ItemStack headArmor=target.getCurrentArmor(3);
          if (headArmor != null && headArmor.getItem() == ItemList.enderman_head)           target=null;
 else           attentionLossTimer=(byte)(64 + rand.nextInt(62));
        }
      }
 else {
        List<EntityItem> list=worldObj.getEntitiesWithinAABB(EntityItem.class,boundingBox.expand(1D,0D,1D));
        if (!list.isEmpty() && ++itemDecisionTimer > rand.nextInt(70) + 15) {
          int carryingLevelIndex=itemPriorities.indexOf(carryingLevel);
          EntityItem item=list.get(rand.nextInt(list.size()));
          ItemStack is=item.getEntityItem();
          for (          ItemPriorityLevel level : itemPriorities) {
            if (level.isValid(is)) {
              if (itemPriorities.indexOf(level) < carryingLevelIndex) {
                if (hasIS) {
                  EntityItem newItem=new EntityItem(worldObj,posX,posY,posZ,getCarrying());
                  float power=0.3F, yawRadians=(float)Math.toRadians(rotationYaw), randomAngle=rand.nextFloat() * (float)Math.PI * 2F;
                  newItem.motionX=(-MathHelper.sin(yawRadians) * MathHelper.cos(yawRadians) * power);
                  newItem.motionZ=(MathHelper.cos(yawRadians) * MathHelper.cos(yawRadians) * power);
                  newItem.motionY=(-MathHelper.sin((float)Math.toRadians(rotationPitch)) * power + 0.1F);
                  power=0.02F * rand.nextFloat();
                  newItem.motionX+=MathHelper.cos(randomAngle) * power;
                  newItem.motionY+=(rand.nextFloat() - rand.nextFloat()) * 0.1F;
                  newItem.motionZ+=MathHelper.sin(randomAngle) * power;
                  worldObj.spawnEntityInWorld(newItem);
                }
                setCarriedItemStack(is);
                item.setDead();
              }
              break;
            }
          }
          itemDecisionTimer=0;
        }
      }
    }
 else     if (target != null) {
      if (--attentionLossTimer < -124 || target.isDead)       target=null;
 else       if (!hasIS && getDistanceToEntity(target) < 1.8D) {
        for (int attempt=0, slot; attempt < 60; attempt++) {
          slot=rand.nextInt(target.inventory.mainInventory.length);
          if (slot == target.inventory.currentItem)           continue;
          ItemStack is=target.inventory.mainInventory[slot];
          if (is != null) {
            ItemStack carrying=is.copy();
            carrying.stackSize=1;
            setCarriedItemStack(carrying);
            if (--target.inventory.mainInventory[slot].stackSize == 0) {
              target.inventory.mainInventory[slot]=null;
              PacketPipeline.sendToPlayer(target,new C00ClearInventorySlot(slot));
            }
            break;
          }
        }
        PathEntity escapePath=null;
        BlockPosM pos=new BlockPosM();
        for (int pathatt=0; pathatt < 100; pathatt++) {
          double ang=rand.nextDouble() * 2D * Math.PI, len=8D + rand.nextDouble() * 6D;
          pos.moveTo(this).moveBy(MathUtil.floor(Math.cos(ang) * len),rand.nextInt(4) - 2,MathUtil.floor(Math.sin(ang) * len));
          Block low=pos.getBlock(worldObj);
          if ((low.getMaterial() == Material.air || low == BlockList.crossed_decoration) && pos.moveUp().isAir(worldObj)) {
            escapePath=navigator.getPathToXYZ(pos.x + 0.5D,pos.y,pos.z + 0.5D);
            break;
          }
        }
        if (escapePath != null)         navigator.setPath(escapePath,1D);
        target=null;
      }
    }
    setAttackTarget(target);
  }
  super.onLivingUpdate();
}",0.9612063723701813
34705,"public EntityMobEnderGuardian(World world){
  super(world);
  setSize(1.5F,3.2F);
}","public EntityMobEnderGuardian(World world){
  super(world);
  EntityAIOldTarget.insertOldAI(this);
  setSize(1.5F,3.2F);
}",0.8097560975609757
34706,"@Override protected void applyEntityAttributes(){
  super.applyEntityAttributes();
  getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(0.55D);
  getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue(ModCommonProxy.opMobs ? 42D : 24D);
  getEntityAttribute(SharedMonsterAttributes.attackDamage).setBaseValue(ModCommonProxy.opMobs ? 4D : 2D);
}","@Override protected void applyEntityAttributes(){
  super.applyEntityAttributes();
  getEntityAttribute(SharedMonsterAttributes.followRange).setBaseValue(22D);
  getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(0.55D);
  getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue(ModCommonProxy.opMobs ? 42D : 24D);
  getEntityAttribute(SharedMonsterAttributes.attackDamage).setBaseValue(ModCommonProxy.opMobs ? 4D : 2D);
}",0.9071170084439084
34707,"public EntityMobFireGolem(World world){
  super(world);
  setSize(0.9F,1.4F);
  isImmuneToFire=true;
  experienceValue=8;
}","public EntityMobFireGolem(World world){
  super(world);
  EntityAIOldTarget.insertOldAI(this);
  setSize(0.9F,1.4F);
  isImmuneToFire=true;
  experienceValue=8;
}",0.8631578947368421
34708,"@EventHandler public void onPreInit(FMLPreInitializationEvent e){
  Stopwatch.time(""String_Node_Str"");
  ReflectionPublicizer.load();
  modVersion=e.getModMetadata().version;
  configPath=e.getSuggestedConfigurationFile().getParentFile().getName();
  sourceFile=e.getSourceFile();
  Log.initializeDebug();
  ConfigHandler.register(e.getSuggestedConfigurationFile());
  ModCreativeTab.registerTabs();
  BlockList.loadBlocks();
  ItemList.loadItems();
  proxy.loadConfiguration();
  BlockReplaceHelper.replaceBlock(Blocks.dragon_egg,new BlockDragonEggCustom(),ItemBlockDragonEgg.class);
  BlockList.registerBlocks();
  BlockList.obsidian_falling.setHarvestLevel(""String_Node_Str"",3);
  BlockList.obsidian_stairs.setHarvestLevel(""String_Node_Str"",3);
  BlockList.obsidian_special.setHarvestLevel(""String_Node_Str"",3);
  BlockList.obsidian_special_glow.setHarvestLevel(""String_Node_Str"",3);
  BlockList.stardust_ore.setHarvestLevel(""String_Node_Str"",3);
  BlockList.igneous_rock_ore.setHarvestLevel(""String_Node_Str"",2);
  BlockList.instability_orb_ore.setHarvestLevel(""String_Node_Str"",3);
  BlockList.sphalerite.setHarvestLevel(""String_Node_Str"",1);
  BlockList.end_terrain.setHarvestLevel(""String_Node_Str"",1);
  BlockList.cinder.setHarvestLevel(""String_Node_Str"",2);
  BlockList.spooky_log.setHarvestLevel(""String_Node_Str"",0);
  BlockList.persegrit.setHarvestLevel(""String_Node_Str"",0);
  BlockList.laboratory_obsidian.setHarvestLevel(""String_Node_Str"",2);
  BlockList.laboratory_floor.setHarvestLevel(""String_Node_Str"",2);
  Blocks.fire.setFireInfo(BlockList.spooky_log,10,10);
  Blocks.fire.setFireInfo(BlockList.spooky_leaves,40,30);
  OreDictionary.registerOre(""String_Node_Str"",BlockList.endium_block);
  OreDictionary.registerOre(""String_Node_Str"",BlockList.endium_ore);
  OreDictionary.registerOre(""String_Node_Str"",BlockList.end_powder_ore);
  OreDictionary.registerOre(""String_Node_Str"",BlockList.stardust_ore);
  OreDictionary.registerOre(""String_Node_Str"",BlockList.igneous_rock_ore);
  OreDictionary.registerOre(""String_Node_Str"",BlockList.instability_orb_ore);
  MinecraftForge.EVENT_BUS.register(BlockList.essence_altar);
  MinecraftForge.EVENT_BUS.register(BlockList.ender_goo);
  ItemList.registerItems();
  OreDictionary.registerOre(""String_Node_Str"",ItemList.endium_ingot);
  MinecraftForge.EVENT_BUS.register(ItemList.enderman_head);
  MinecraftForge.EVENT_BUS.register(ItemList.scorching_pickaxe);
  GameRegistry.registerFuelHandler((IFuelHandler)ItemList.igneous_rock);
  FluidContainerRegistry.registerFluidContainer(BlockEnderGoo.fluid,new ItemStack(ItemList.bucket_ender_goo),FluidContainerRegistry.EMPTY_BUCKET);
  Stopwatch.time(""String_Node_Str"");
  EntityList.stringToClassMapping.remove(""String_Node_Str"");
  EntityList.IDtoClassMapping.remove(Integer.valueOf(58));
  EntityList.addMapping(EntityMobEnderman.class,""String_Node_Str"",58);
  EntityList.stringToClassMapping.remove(""String_Node_Str"");
  EntityList.IDtoClassMapping.remove(Integer.valueOf(200));
  EntityList.addMapping(EntityBlockEnderCrystal.class,""String_Node_Str"",200);
  EntityRegistry.registerModEntity(EntityBossDragon.class,""String_Node_Str"",8,this,320,1,true);
  EntityRegistry.registerModEntity(EntityBossEnderDemon.class,""String_Node_Str"",21,this,512,1,true);
  EntityRegistry.registerModEntity(EntityMiniBossEnderEye.class,""String_Node_Str"",11,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMiniBossFireFiend.class,""String_Node_Str"",23,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobEnderman.class,""String_Node_Str"",51,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobAngryEnderman.class,""String_Node_Str"",1,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobBabyEnderman.class,""String_Node_Str"",16,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobParalyzedEnderman.class,""String_Node_Str"",24,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobHomelandEnderman.class,""String_Node_Str"",39,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobEnderGuardian.class,""String_Node_Str"",22,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobVampiricBat.class,""String_Node_Str"",10,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobInfestedBat.class,""String_Node_Str"",12,this,128,1,true);
  EntityRegistry.registerModEntity(EntityMobForestGhost.class,""String_Node_Str"",13,this,32,1,true);
  EntityRegistry.registerModEntity(EntityMobLouse.class,""String_Node_Str"",34,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobFireGolem.class,""String_Node_Str"",14,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobScorchingLens.class,""String_Node_Str"",15,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobHauntedMiner.class,""String_Node_Str"",35,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobEndermage.class,""String_Node_Str"",41,this,256,1,true);
  EntityRegistry.registerModEntity(EntityBlockFallingDragonEgg.class,""String_Node_Str"",25,this,128,1,true);
  EntityRegistry.registerModEntity(EntityBlockFallingObsidian.class,""String_Node_Str"",26,this,128,1,true);
  EntityRegistry.registerModEntity(EntityBlockTempleDragonEgg.class,""String_Node_Str"",7,this,420,1,true);
  EntityRegistry.registerModEntity(EntityBlockEnhancedTNTPrimed.class,""String_Node_Str"",31,this,128,1,true);
  EntityRegistry.registerModEntity(EntityBlockHomelandCache.class,""String_Node_Str"",50,this,256,1,true);
  EntityRegistry.registerModEntity(EntityItemIgneousRock.class,""String_Node_Str"",9,this,64,1,true);
  EntityRegistry.registerModEntity(EntityItemInstabilityOrb.class,""String_Node_Str"",6,this,64,1,true);
  EntityRegistry.registerModEntity(EntityItemAltar.class,""String_Node_Str"",19,this,128,1,false);
  EntityRegistry.registerModEntity(EntityItemEndPowder.class,""String_Node_Str"",27,this,64,1,true);
  EntityRegistry.registerModEntity(EntityItemDragonEgg.class,""String_Node_Str"",37,this,64,1,true);
  EntityRegistry.registerModEntity(EntityProjectileDragonFireball.class,""String_Node_Str"",2,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileEnhancedEnderPearl.class,""String_Node_Str"",5,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileFlamingBall.class,""String_Node_Str"",17,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileGolemFireball.class,""String_Node_Str"",18,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileMinerShot.class,""String_Node_Str"",36,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectilePotion.class,""String_Node_Str"",30,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileSpatialDash.class,""String_Node_Str"",32,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileCorruptedEnergy.class,""String_Node_Str"",42,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileFiendFireball.class,""String_Node_Str"",45,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileCurse.class,""String_Node_Str"",48,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileExpBottleConsistent.class,""String_Node_Str"",49,this,128,1,true);
  EntityRegistry.registerModEntity(EntityWeatherLightningBoltSafe.class,""String_Node_Str"",4,this,512,1,false);
  EntityRegistry.registerModEntity(EntityWeatherLightningBoltDemon.class,""String_Node_Str"",21,this,512,1,false);
  EntityRegistry.registerModEntity(EntityTechnicalBiomeInteraction.class,""String_Node_Str"",38,this,0,Integer.MAX_VALUE,false);
  EntityRegistry.registerModEntity(EntityTechnicalVoidChest.class,""String_Node_Str"",40,this,0,1,false);
  EntityRegistry.registerModEntity(EntityTechnicalPuzzleChain.class,""String_Node_Str"",43,this,0,Integer.MAX_VALUE,false);
  EntityRegistry.registerModEntity(EntityTechnicalPuzzleSolved.class,""String_Node_Str"",44,this,0,Integer.MAX_VALUE,false);
  EntityRegistry.registerModEntity(EntityTechnicalCurseBlock.class,""String_Node_Str"",46,this,64,1,false);
  EntityRegistry.registerModEntity(EntityTechnicalCurseEntity.class,""String_Node_Str"",47,this,64,1,false);
  Stopwatch.finish(""String_Node_Str"");
  Stopwatch.time(""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEssenceAltar.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEnhancedBrewingStand.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEndermanHead.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityLaserBeam.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityCustomSpawner.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityDecompositionTable.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityExperienceTable.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityAccumulationTable.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityExtractionTable.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEnergyCluster.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEnhancedTNT.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityVoidChest.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityTransportBeacon.class,""String_Node_Str"");
  Stopwatch.finish(""String_Node_Str"");
  DimensionOverride.setup();
  AchievementManager.register();
  AchievementEvents.register();
  Stopwatch.time(""String_Node_Str"");
  MinecraftForge.EVENT_BUS.register(new MiscEvents());
  FMLCommonHandler.instance().bus().register(new UpdateNotificationManager());
  PlayerDataHandler.register();
  CompendiumEvents.register();
  CharmPouchHandler.register();
  WorldDataHandler.register();
  VoidChestEvents.register();
  EnergyEvents.register();
  TempleEvents.register();
  InfestationEvents.register();
  CurseEvents.register();
  PlayerTransportBeacons.register();
  Stopwatch.finish(""String_Node_Str"");
  proxy.registerSidedEvents();
  proxy.registerRenderers();
  notifications.register();
  Stopwatch.finish(""String_Node_Str"");
}","@EventHandler public void onPreInit(FMLPreInitializationEvent e){
  Stopwatch.time(""String_Node_Str"");
  ReflectionPublicizer.load();
  modVersion=e.getModMetadata().version;
  configPath=e.getSuggestedConfigurationFile().getParentFile().getName();
  sourceFile=e.getSourceFile();
  Log.initializeDebug();
  ConfigHandler.register(e.getSuggestedConfigurationFile());
  ModCreativeTab.registerTabs();
  BlockList.loadBlocks();
  ItemList.loadItems();
  proxy.loadConfiguration();
  BlockReplaceHelper.replaceBlock(Blocks.dragon_egg,new BlockDragonEggCustom());
  BlockList.registerBlocks();
  BlockList.obsidian_falling.setHarvestLevel(""String_Node_Str"",3);
  BlockList.obsidian_stairs.setHarvestLevel(""String_Node_Str"",3);
  BlockList.obsidian_special.setHarvestLevel(""String_Node_Str"",3);
  BlockList.obsidian_special_glow.setHarvestLevel(""String_Node_Str"",3);
  BlockList.stardust_ore.setHarvestLevel(""String_Node_Str"",3);
  BlockList.igneous_rock_ore.setHarvestLevel(""String_Node_Str"",2);
  BlockList.instability_orb_ore.setHarvestLevel(""String_Node_Str"",3);
  BlockList.sphalerite.setHarvestLevel(""String_Node_Str"",1);
  BlockList.end_terrain.setHarvestLevel(""String_Node_Str"",1);
  BlockList.cinder.setHarvestLevel(""String_Node_Str"",2);
  BlockList.spooky_log.setHarvestLevel(""String_Node_Str"",0);
  BlockList.persegrit.setHarvestLevel(""String_Node_Str"",0);
  BlockList.laboratory_obsidian.setHarvestLevel(""String_Node_Str"",2);
  BlockList.laboratory_floor.setHarvestLevel(""String_Node_Str"",2);
  Blocks.fire.setFireInfo(BlockList.spooky_log,10,10);
  Blocks.fire.setFireInfo(BlockList.spooky_leaves,40,30);
  OreDictionary.registerOre(""String_Node_Str"",BlockList.endium_block);
  OreDictionary.registerOre(""String_Node_Str"",BlockList.endium_ore);
  OreDictionary.registerOre(""String_Node_Str"",BlockList.end_powder_ore);
  OreDictionary.registerOre(""String_Node_Str"",BlockList.stardust_ore);
  OreDictionary.registerOre(""String_Node_Str"",BlockList.igneous_rock_ore);
  OreDictionary.registerOre(""String_Node_Str"",BlockList.instability_orb_ore);
  MinecraftForge.EVENT_BUS.register(BlockList.essence_altar);
  MinecraftForge.EVENT_BUS.register(BlockList.ender_goo);
  ItemList.registerItems();
  OreDictionary.registerOre(""String_Node_Str"",ItemList.endium_ingot);
  MinecraftForge.EVENT_BUS.register(ItemList.enderman_head);
  MinecraftForge.EVENT_BUS.register(ItemList.scorching_pickaxe);
  GameRegistry.registerFuelHandler((IFuelHandler)ItemList.igneous_rock);
  FluidContainerRegistry.registerFluidContainer(BlockEnderGoo.fluid,new ItemStack(ItemList.bucket_ender_goo),FluidContainerRegistry.EMPTY_BUCKET);
  Stopwatch.time(""String_Node_Str"");
  EntityList.stringToClassMapping.remove(""String_Node_Str"");
  EntityList.IDtoClassMapping.remove(Integer.valueOf(58));
  EntityList.addMapping(EntityMobEnderman.class,""String_Node_Str"",58);
  EntityList.stringToClassMapping.remove(""String_Node_Str"");
  EntityList.IDtoClassMapping.remove(Integer.valueOf(200));
  EntityList.addMapping(EntityBlockEnderCrystal.class,""String_Node_Str"",200);
  EntityRegistry.registerModEntity(EntityBossDragon.class,""String_Node_Str"",8,this,320,1,true);
  EntityRegistry.registerModEntity(EntityBossEnderDemon.class,""String_Node_Str"",21,this,512,1,true);
  EntityRegistry.registerModEntity(EntityMiniBossEnderEye.class,""String_Node_Str"",11,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMiniBossFireFiend.class,""String_Node_Str"",23,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobEnderman.class,""String_Node_Str"",51,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobAngryEnderman.class,""String_Node_Str"",1,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobBabyEnderman.class,""String_Node_Str"",16,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobParalyzedEnderman.class,""String_Node_Str"",24,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobHomelandEnderman.class,""String_Node_Str"",39,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobEnderGuardian.class,""String_Node_Str"",22,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobVampiricBat.class,""String_Node_Str"",10,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobInfestedBat.class,""String_Node_Str"",12,this,128,1,true);
  EntityRegistry.registerModEntity(EntityMobForestGhost.class,""String_Node_Str"",13,this,32,1,true);
  EntityRegistry.registerModEntity(EntityMobLouse.class,""String_Node_Str"",34,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobFireGolem.class,""String_Node_Str"",14,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobScorchingLens.class,""String_Node_Str"",15,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobHauntedMiner.class,""String_Node_Str"",35,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobEndermage.class,""String_Node_Str"",41,this,256,1,true);
  EntityRegistry.registerModEntity(EntityBlockFallingDragonEgg.class,""String_Node_Str"",25,this,128,1,true);
  EntityRegistry.registerModEntity(EntityBlockFallingObsidian.class,""String_Node_Str"",26,this,128,1,true);
  EntityRegistry.registerModEntity(EntityBlockTempleDragonEgg.class,""String_Node_Str"",7,this,420,1,true);
  EntityRegistry.registerModEntity(EntityBlockEnhancedTNTPrimed.class,""String_Node_Str"",31,this,128,1,true);
  EntityRegistry.registerModEntity(EntityBlockHomelandCache.class,""String_Node_Str"",50,this,256,1,true);
  EntityRegistry.registerModEntity(EntityItemIgneousRock.class,""String_Node_Str"",9,this,64,1,true);
  EntityRegistry.registerModEntity(EntityItemInstabilityOrb.class,""String_Node_Str"",6,this,64,1,true);
  EntityRegistry.registerModEntity(EntityItemAltar.class,""String_Node_Str"",19,this,128,1,false);
  EntityRegistry.registerModEntity(EntityItemEndPowder.class,""String_Node_Str"",27,this,64,1,true);
  EntityRegistry.registerModEntity(EntityItemDragonEgg.class,""String_Node_Str"",37,this,64,1,true);
  EntityRegistry.registerModEntity(EntityProjectileDragonFireball.class,""String_Node_Str"",2,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileEnhancedEnderPearl.class,""String_Node_Str"",5,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileFlamingBall.class,""String_Node_Str"",17,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileGolemFireball.class,""String_Node_Str"",18,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileMinerShot.class,""String_Node_Str"",36,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectilePotion.class,""String_Node_Str"",30,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileSpatialDash.class,""String_Node_Str"",32,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileCorruptedEnergy.class,""String_Node_Str"",42,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileFiendFireball.class,""String_Node_Str"",45,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileCurse.class,""String_Node_Str"",48,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileExpBottleConsistent.class,""String_Node_Str"",49,this,128,1,true);
  EntityRegistry.registerModEntity(EntityWeatherLightningBoltSafe.class,""String_Node_Str"",4,this,512,1,false);
  EntityRegistry.registerModEntity(EntityWeatherLightningBoltDemon.class,""String_Node_Str"",21,this,512,1,false);
  EntityRegistry.registerModEntity(EntityTechnicalBiomeInteraction.class,""String_Node_Str"",38,this,0,Integer.MAX_VALUE,false);
  EntityRegistry.registerModEntity(EntityTechnicalVoidChest.class,""String_Node_Str"",40,this,0,1,false);
  EntityRegistry.registerModEntity(EntityTechnicalPuzzleChain.class,""String_Node_Str"",43,this,0,Integer.MAX_VALUE,false);
  EntityRegistry.registerModEntity(EntityTechnicalPuzzleSolved.class,""String_Node_Str"",44,this,0,Integer.MAX_VALUE,false);
  EntityRegistry.registerModEntity(EntityTechnicalCurseBlock.class,""String_Node_Str"",46,this,64,1,false);
  EntityRegistry.registerModEntity(EntityTechnicalCurseEntity.class,""String_Node_Str"",47,this,64,1,false);
  Stopwatch.finish(""String_Node_Str"");
  Stopwatch.time(""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEssenceAltar.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEnhancedBrewingStand.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEndermanHead.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityLaserBeam.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityCustomSpawner.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityDecompositionTable.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityExperienceTable.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityAccumulationTable.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityExtractionTable.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEnergyCluster.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEnhancedTNT.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityVoidChest.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityTransportBeacon.class,""String_Node_Str"");
  Stopwatch.finish(""String_Node_Str"");
  DimensionOverride.setup();
  AchievementManager.register();
  AchievementEvents.register();
  Stopwatch.time(""String_Node_Str"");
  MinecraftForge.EVENT_BUS.register(new MiscEvents());
  FMLCommonHandler.instance().bus().register(new UpdateNotificationManager());
  PlayerDataHandler.register();
  CompendiumEvents.register();
  CharmPouchHandler.register();
  WorldDataHandler.register();
  VoidChestEvents.register();
  EnergyEvents.register();
  TempleEvents.register();
  InfestationEvents.register();
  CurseEvents.register();
  PlayerTransportBeacons.register();
  Stopwatch.finish(""String_Node_Str"");
  proxy.registerSidedEvents();
  proxy.registerRenderers();
  notifications.register();
  Stopwatch.finish(""String_Node_Str"");
}",0.9987533037450756
34709,"public static void replaceBlock(Block toReplace,Block replacement,Class<? extends ItemBlock> itemBlockClass){
  Stopwatch.time(""String_Node_Str"");
  Class<?>[] classTest=new Class<?>[4];
  Exception exception=null;
  try {
    for (    Field blockField : Blocks.class.getDeclaredFields()) {
      if (Block.class.isAssignableFrom(blockField.getType())) {
        Block block=(Block)blockField.get(null);
        if (block == toReplace) {
          String registryName=Block.blockRegistry.getNameForObject(block);
          int id=Block.getIdFromBlock(block);
          Log.debug(""String_Node_Str"",id,registryName);
          FMLControlledNamespacedRegistry<Block> registryBlocks=GameData.getBlockRegistry();
          registryBlocks.registryObjects.put(registryName,replacement);
          registryBlocks.underlyingIntegerMap.func_148746_a(replacement,id);
          blockField.setAccessible(true);
          Unfinalizer.unfinalizeField(blockField);
          blockField.set(null,replacement);
          ItemBlock itemBlock=itemBlockClass.getConstructor(Block.class).newInstance(replacement);
          FMLControlledNamespacedRegistry<Item> registryItems=GameData.getItemRegistry();
          registryItems.registryObjects.put(registryName,itemBlock);
          registryItems.underlyingIntegerMap.func_148746_a(itemBlock,id);
          int itemID=Item.getIdFromItem(itemBlock);
          StatBase stat=StatList.mineBlockStatArray[itemID];
          StatList.allStats.remove(stat);
          StatList.objectMineStats.remove(stat);
          StatList.generalStats.remove(stat);
          StatList.objectBreakStats[itemID]=StatList.objectUseStats[itemID]=null;
          StatList.objectCraftStats[itemID]=StatList.mineBlockStatArray[itemID]=null;
          classTest[0]=blockField.get(null).getClass();
          classTest[1]=Block.blockRegistry.getObjectById(id).getClass();
          classTest[2]=((ItemBlock)Item.getItemFromBlock(replacement)).field_150939_a.getClass();
          classTest[3]=Item.getItemFromBlock(replacement).getClass();
        }
      }
    }
  }
 catch (  Exception e) {
    exception=e;
  }
  Stopwatch.finish(""String_Node_Str"");
  Log.debug(""String_Node_Str"",classTest[0]);
  Log.debug(""String_Node_Str"",classTest[1]);
  Log.debug(""String_Node_Str"",classTest[2]);
  Log.debug(""String_Node_Str"",classTest[3]);
  if (classTest[0] != classTest[1] || classTest[0] != classTest[2] || classTest[0] == null || classTest[3] != itemBlockClass) {
    throw new RuntimeException(""String_Node_Str"" + toReplace.getUnlocalizedName() + ""String_Node_Str""+ classTest[0]+ ""String_Node_Str""+ classTest[1]+ ""String_Node_Str""+ classTest[2]+ ""String_Node_Str""+ classTest[3],exception);
  }
}","public static void replaceBlock(Block toReplace,Block replacement){
  Stopwatch.time(""String_Node_Str"");
  Class<?>[] classTest=new Class<?>[4];
  Exception exception=null;
  try {
    for (    Field blockField : Blocks.class.getDeclaredFields()) {
      if (Block.class.isAssignableFrom(blockField.getType())) {
        Block block=(Block)blockField.get(null);
        if (block == toReplace) {
          String registryName=Block.blockRegistry.getNameForObject(block);
          int id=Block.getIdFromBlock(block);
          Log.debug(""String_Node_Str"",id,registryName);
          ((ItemBlock)Item.getItemFromBlock(block)).field_150939_a=replacement;
          FMLControlledNamespacedRegistry<Block> registryBlocks=GameData.getBlockRegistry();
          registryBlocks.registryObjects.put(registryName,replacement);
          registryBlocks.underlyingIntegerMap.func_148746_a(replacement,id);
          blockField.setAccessible(true);
          Unfinalizer.unfinalizeField(blockField);
          blockField.set(null,replacement);
          classTest[0]=blockField.get(null).getClass();
          classTest[1]=Block.blockRegistry.getObjectById(id).getClass();
          classTest[2]=((ItemBlock)Item.getItemFromBlock(replacement)).field_150939_a.getClass();
        }
      }
    }
  }
 catch (  Exception e) {
    exception=e;
  }
  Stopwatch.finish(""String_Node_Str"");
  Log.debug(""String_Node_Str"",classTest[0]);
  Log.debug(""String_Node_Str"",classTest[1]);
  Log.debug(""String_Node_Str"",classTest[2]);
  if (classTest[0] != classTest[1] || classTest[0] != classTest[2] || classTest[0] == null) {
    throw new RuntimeException(""String_Node_Str"" + toReplace.getUnlocalizedName() + ""String_Node_Str""+ classTest[0]+ ""String_Node_Str""+ classTest[1]+ ""String_Node_Str""+ classTest[2],exception);
  }
}",0.7654650645304851
34710,"@Override public void onUpdate(){
  super.onUpdate();
  lifespan=Integer.MAX_VALUE;
  overrideDeath=false;
}","@Override public void onUpdate(){
  super.onUpdate();
  lifespan=Integer.MAX_VALUE;
  overrideDeath=false;
  if (posY < -60D) {
    BlockDragonEggCustom.teleportEntityToPortal(this);
    super.setDead();
  }
}",0.6813880126182965
34711,"public void forceSpecialAttack(DragonSpecialAttackBase newAttack){
  lastAttack=currentAttack;
  if (currentAttack != null)   currentAttack.end();
  currentAttack=newAttack;
  currentAttack.init();
}","public void forceSpecialAttack(DragonSpecialAttackBase newAttack){
  lastAttack=currentAttack;
  if (currentAttack != null) {
    currentAttack.end();
    nextAttackTicks=currentAttack.getNextAttackTimer();
  }
  currentAttack=newAttack;
  currentAttack.init();
}",0.8614718614718615
34712,"@Override public void onLivingUpdate(){
  if (noPlayers) {
    if (ticksExisted % 10 == 0 && !attacks.getViablePlayers().isEmpty())     noPlayers=false;
 else     return;
  }
 else   if (ticksExisted % 40 == 0 && attacks.getViablePlayers().isEmpty()) {
    noPlayers=true;
    return;
  }
  if (currentAttack == null)   currentAttack=defaultAttack;
  angryStatus=isAngry();
  if (!worldObj.isRemote) {
    if (spawnCooldown > 0 && --spawnCooldown > 0 && ticksExisted % 20 == 0) {
      for (      EntityPlayer player : attacks.getViablePlayers()) {
        if (worldObj.getBlock(MathUtil.floor(player.posX),MathUtil.floor(player.posY) - 1,MathUtil.floor(player.posZ)) == Blocks.end_stone) {
          spawnCooldown=0;
          break;
        }
      }
    }
    if (loadTimer > 0 && --loadTimer == 1) {
      for (int chunkX=-6; chunkX <= 6; chunkX++) {
        for (int chunkZ=-6; chunkZ <= 6; chunkZ++)         worldObj.getChunkFromChunkCoords(chunkX,chunkZ);
      }
    }
    if (loadTimer == 0 && !angryStatus && ticksExisted % 10 == 0) {
      DragonSavefile save=WorldDataHandler.get(DragonSavefile.class);
      if (save.countCrystals() <= 2 + save.getDragonDeathAmount() || attacks.getHealthPercentage() <= 80) {
        setAngry(true);
        spawnCooldown=0;
      }
    }
    currentAttack.update();
    if (angryStatus) {
      DebugBoard.updateValue(""String_Node_Str"",currentAttack.id);
      if (currentAttack.equals(defaultAttack)) {
        if (nextAttackTicks-- <= 0 && target == null) {
          lastAttack=currentAttack;
          if ((currentAttack=attacks.pickSpecialAttack(lastAttack)) == null)           nextAttackTicks=(currentAttack=defaultAttack).getNextAttackTimer();
          currentAttack.init();
        }
      }
 else       if (currentAttack.hasEnded() || forceAttackEnd) {
        forceAttackEnd=false;
        currentAttack.end();
        nextAttackTicks=MathUtil.ceil(currentAttack.getNextAttackTimer() * (0.5D + attacks.getHealthPercentage() / 200D));
        (currentAttack=defaultAttack).init();
      }
    }
    if (getHealth() > 0) {
      rewards.updateManager();
      achievements.updateManager();
      if (dragonHurtTime > 0)       --dragonHurtTime;
      double spd=currentAttack.overrideMovementSpeed();
      if (moveSpeedMp > spd)       moveSpeedMp=moveSpeedMp < 0.2D && spd == 0D ? 0D : Math.max(spd,moveSpeedMp - 0.0175D);
 else       if (moveSpeedMp < spd)       moveSpeedMp=Math.min(spd,moveSpeedMp + 0.0175D);
      float wng=frozen ? HeeDebugCommand.overrideWingSpeed : currentAttack.overrideWingSpeed(), curWng=getWingSpeed();
      if (curWng > wng)       curWng=Math.max(wng,curWng - 0.015F);
 else       if (curWng < wng)       curWng=Math.min(wng,curWng + 0.015F);
      if (curWng != getWingSpeed())       setWingSpeed(curWng);
      if (ticksExisted % 2 == 0) {
        int perc=attacks.getHealthPercentage();
        if (perc < 40 && rand.nextInt(500 - (50 - perc) * 8) == 0) {
          int x=(int)posX + rand.nextInt(301) - 150, z=(int)posZ + rand.nextInt(301) - 150;
          int y=1 + DragonUtil.getTopBlockY(worldObj,Blocks.end_stone,x,z);
          EntityMobAngryEnderman buddy=new EntityMobAngryEnderman(worldObj);
          buddy.setPosition(x,y,z);
          worldObj.addWeatherEffect(new EntityWeatherLightningBoltSafe(worldObj,x,y,z));
          worldObj.spawnEntityInWorld(buddy);
        }
        lastUpdate=worldObj.getTotalWorldTime();
      }
    }
    if (Log.isDebugEnabled())     DragonDebugManager.updateBoard(this);
  }
  if (worldObj.isRemote && MathHelper.cos(prevAnimTime * (float)Math.PI * 2F) <= -0.3F && MathHelper.cos(animTime * (float)Math.PI * 2F) >= -0.3F) {
    worldObj.playSound(posX,posY,posZ,""String_Node_Str"",5F,0.8F + rand.nextFloat() * 0.3F,false);
  }
  prevAnimTime=animTime;
  if (getHealth() <= 0F)   worldObj.spawnParticle(""String_Node_Str"",posX + (rand.nextFloat() - 0.5F) * 8F,posY + 2D + (rand.nextFloat() - 0.5F) * 4F,posZ + (rand.nextFloat() - 0.5F) * 8F,0D,0D,0D);
 else {
    updateEnderCrystal();
    float animAdvance=0.2F / (MathHelper.sqrt_double(motionX * motionX + motionZ * motionZ) * 10F + 1F);
    animAdvance*=(float)Math.pow(2D,motionY);
    animAdvance*=getWingSpeed();
    animTime+=slowed ? animAdvance * 0.5F : animAdvance;
    rotationYaw=MathHelper.wrapAngleTo180_float(rotationYaw);
    if (movementBufferIndex < 0) {
      for (int index=0; index < movementBuffer.length; ++index) {
        movementBuffer[index][0]=rotationYaw;
        movementBuffer[index][1]=posY;
      }
    }
    if (++movementBufferIndex == movementBuffer.length)     movementBufferIndex=0;
    movementBuffer[movementBufferIndex][0]=rotationYaw;
    movementBuffer[movementBufferIndex][1]=posY;
    if (worldObj.isRemote) {
      if (newPosRotationIncrements > 0) {
        double finalPosX=posX + (newPosX - posX) / newPosRotationIncrements, finalPosY=posY + (newPosY - posY) / newPosRotationIncrements, finalPosZ=posZ + (newPosZ - posZ) / newPosRotationIncrements;
        rotationYaw=(float)(rotationYaw + MathHelper.wrapAngleTo180_double(newRotationYaw - rotationYaw) / newPosRotationIncrements);
        rotationPitch=(float)(rotationPitch + (newRotationPitch - rotationPitch) / newPosRotationIncrements);
        --newPosRotationIncrements;
        setPosition(finalPosX,finalPosY,finalPosZ);
        setRotation(rotationYaw,rotationPitch);
      }
    }
 else {
      double xDiff=targetX - posX, yDiff=targetY - posY, zDiff=targetZ - posZ;
      double distFromTargetSq=xDiff * xDiff + yDiff * yDiff + zDiff * zDiff;
      if (target != null) {
        targetX=target.posX;
        targetZ=target.posZ;
        targetY=target.boundingBox.minY + Math.min(0.4D + Math.sqrt(Math.pow(targetX - posX,2) + Math.pow(targetZ - posZ,2)) / 80D - 1D,10D);
      }
 else       trySetTargetPosition(targetX + rand.nextGaussian() * 2D,targetY,targetZ + rand.nextGaussian() * 2D);
      if ((target != null && target.isDead) || distFromTargetSq > 22500D)       forceAttackEnd=forceNewTarget=true;
      if (forceNewTarget || distFromTargetSq < 64D || distFromTargetSq > 22500D || isCollidedHorizontally || isCollidedVertically) {
        setNewTarget();
      }
      yDiff=MathUtil.clamp(yDiff / MathUtil.distance(xDiff,zDiff),-0.6F,0.6F);
      motionY+=yDiff * 0.1D;
      rotationYaw=MathHelper.wrapAngleTo180_float(rotationYaw);
      double d9=MathUtil.clamp(MathHelper.wrapAngleTo180_double(180D - MathUtil.toDeg(Math.atan2(xDiff,zDiff)) - rotationYaw),-50D,50D);
      Vec3 targetDiffVec=Vec3.createVectorHelper(targetX - posX,targetY - posY,targetZ - posZ).normalize();
      Vec3 rotationVec=Vec3.createVectorHelper(MathHelper.sin(MathUtil.toRad(rotationYaw)),motionY,(-MathHelper.cos(MathUtil.toRad(rotationYaw)))).normalize();
      float f4=Math.max((float)(rotationVec.dotProduct(targetDiffVec) + 0.5D) / 1.5F,0F);
      randomYawVelocity*=0.8F;
      float speed=MathHelper.sqrt_double(motionX * motionX + motionZ * motionZ) + 1F;
      double speedLimited=Math.min(Math.sqrt(motionX * motionX + motionZ * motionZ) + 1D,40D);
      randomYawVelocity=(float)(randomYawVelocity + d9 * (0.7D / speedLimited / speed));
      rotationYaw+=randomYawVelocity * 0.1F;
      float f6=(float)(2D / (speedLimited + 1D));
      moveFlying(0F,-1F,0.06F * (f4 * f6 + (1F - f6)));
      if (frozen)       motionX=motionY=motionZ=0D;
      MotionUpdateEvent event=new MotionUpdateEvent(motionX,motionY,motionZ);
      currentAttack.onMotionUpdateEvent(event);
      motionX=event.motionX;
      motionY=event.motionY;
      motionZ=event.motionZ;
      if (slowed)       moveEntity(motionX * moveSpeedMp * 0.8D,motionY * moveSpeedMp * 0.8D,motionZ * moveSpeedMp * 0.8D);
 else       moveEntity(motionX * moveSpeedMp,motionY * moveSpeedMp,motionZ * moveSpeedMp);
      double motionMultiplier=0.8D + 0.15D * ((Vec3.createVectorHelper(motionX,motionY,motionZ).normalize().dotProduct(rotationVec) + 1D) * 0.5D);
      motionX*=motionMultiplier;
      motionZ*=motionMultiplier;
      motionY*=0.91D;
    }
    renderYawOffset=rotationYaw;
    dragonPartHead.width=dragonPartHead.height=3F;
    dragonPartTail1.width=dragonPartTail1.height=2F;
    dragonPartTail2.width=dragonPartTail2.height=2F;
    dragonPartTail3.width=dragonPartTail3.height=2F;
    dragonPartBody.width=5F;
    dragonPartBody.height=3F;
    dragonPartWing1.width=4F;
    dragonPartWing1.height=2F;
    dragonPartWing2.width=4F;
    dragonPartWing2.height=3F;
    float offsetAngle=MathUtil.toRad((float)(getMovementOffsets(5,1F)[1] - getMovementOffsets(10,1F)[1]) * 10F);
    float angleCos=MathHelper.cos(offsetAngle);
    float angleSin=-MathHelper.sin(offsetAngle);
    float yawRad=MathUtil.toRad(rotationYaw);
    float yawSin=MathHelper.sin(yawRad);
    float yawCos=MathHelper.cos(yawRad);
    dragonPartBody.onUpdate();
    dragonPartBody.setLocationAndAngles(posX + yawSin * 0.5F,posY,posZ - yawCos * 0.5F,0F,0F);
    dragonPartWing1.onUpdate();
    dragonPartWing1.setLocationAndAngles(posX + yawCos * 4.5F,posY + 2D,posZ + yawSin * 4.5F,0F,0F);
    dragonPartWing2.onUpdate();
    dragonPartWing2.setLocationAndAngles(posX - yawCos * 4.5F,posY + 2D,posZ - yawSin * 4.5F,0F,0F);
    collideWithEntities(worldObj.getEntitiesWithinAABBExcludingEntity(this,dragonPartWing1.boundingBox.expand(3.5D,2D,3.5D).offset(0D,-2D,0D)));
    collideWithEntities(worldObj.getEntitiesWithinAABBExcludingEntity(this,dragonPartWing2.boundingBox.expand(3.5D,2D,3.5D).offset(0D,-2D,0D)));
    collideWithEntities(worldObj.getEntitiesWithinAABBExcludingEntity(this,dragonPartHead.boundingBox.expand(0.7D,1D,0.7D)));
    double[] oldOffsets=getMovementOffsets(5,1F), currentOffsets=getMovementOffsets(0,1F);
    float moveX=MathHelper.sin(MathUtil.toRad(rotationYaw) - randomYawVelocity * 0.01F);
    float moveZ=MathHelper.cos(MathUtil.toRad(rotationYaw) - randomYawVelocity * 0.01F);
    dragonPartHead.onUpdate();
    dragonPartHead.setLocationAndAngles(posX + moveX * 5.5F * angleCos,posY + currentOffsets[1] - oldOffsets[1] + angleSin * 5.5F,posZ - moveZ * 5.5F * angleCos,0F,0F);
    for (int part=0; part < 3; part++) {
      EntityDragonPart tailPart=part == 0 ? dragonPartTail1 : part == 1 ? dragonPartTail2 : dragonPartTail3;
      double[] partOffsets=getMovementOffsets(12 + part * 2,1F);
      float partYaw=MathUtil.toRad(rotationYaw) + MathUtil.toRad((float)MathHelper.wrapAngleTo180_double(partOffsets[0] - oldOffsets[0]));
      float partYawSin=MathHelper.sin(partYaw);
      float partYawCos=MathHelper.cos(partYaw);
      float partMp=(part + 1) * 2F;
      tailPart.onUpdate();
      tailPart.setLocationAndAngles(posX - ((yawSin * 1.5F + partYawSin * partMp) * angleCos),posY + (partOffsets[1] - oldOffsets[1]) - ((partMp + 1.5F) * angleSin) + 1.5D,posZ + ((yawCos * 1.5F + partYawCos * partMp) * angleCos),0F,0F);
    }
    if (!worldObj.isRemote) {
      slowed=destroyBlocksInAABB(dragonPartHead.boundingBox) | destroyBlocksInAABB(dragonPartBody.boundingBox);
      attacks.updatePassiveAttacks(currentAttack);
      if (currentAttack.id == 10) {
        slowed|=destroyBlocksInAABB(dragonPartWing1.boundingBox) | destroyBlocksInAABB(dragonPartWing2.boundingBox) | destroyBlocksInAABB(dragonPartBody.boundingBox.expand(1D,1D,1D));
      }
    }
  }
}","@Override public void onLivingUpdate(){
  if (noPlayers) {
    if (ticksExisted % 10 == 0 && !attacks.getViablePlayers().isEmpty())     noPlayers=false;
 else     return;
  }
 else   if (ticksExisted % 40 == 0 && attacks.getViablePlayers().isEmpty()) {
    noPlayers=true;
    return;
  }
  if (currentAttack == null)   currentAttack=defaultAttack;
  angryStatus=isAngry();
  if (!worldObj.isRemote) {
    if (spawnCooldown > 0 && --spawnCooldown > 0 && ticksExisted % 20 == 0) {
      for (      EntityPlayer player : attacks.getViablePlayers()) {
        if (worldObj.getBlock(MathUtil.floor(player.posX),MathUtil.floor(player.posY) - 1,MathUtil.floor(player.posZ)) == Blocks.end_stone) {
          spawnCooldown=0;
          break;
        }
      }
    }
    if (loadTimer > 0 && --loadTimer == 1) {
      for (int chunkX=-6; chunkX <= 6; chunkX++) {
        for (int chunkZ=-6; chunkZ <= 6; chunkZ++)         worldObj.getChunkFromChunkCoords(chunkX,chunkZ);
      }
    }
    if (loadTimer == 0 && !angryStatus && ticksExisted % 10 == 0) {
      DragonSavefile save=WorldDataHandler.get(DragonSavefile.class);
      if (save.countCrystals() <= 2 + save.getDragonDeathAmount() || attacks.getHealthPercentage() <= 80) {
        setAngry(true);
        spawnCooldown=0;
      }
    }
    currentAttack.update();
    if (angryStatus) {
      DebugBoard.updateValue(""String_Node_Str"",currentAttack.id);
      if (currentAttack.equals(defaultAttack)) {
        if (nextAttackTicks-- <= 0 && target == null) {
          lastAttack=currentAttack;
          if ((currentAttack=attacks.pickSpecialAttack(lastAttack)) == null)           nextAttackTicks=(currentAttack=defaultAttack).getNextAttackTimer();
          currentAttack.init();
        }
      }
 else       if (currentAttack.hasEnded() || forceAttackEnd) {
        forceAttackEnd=false;
        currentAttack.end();
        nextAttackTicks=MathUtil.ceil(currentAttack.getNextAttackTimer() * (0.5D + attacks.getHealthPercentage() / 200D));
        (currentAttack=defaultAttack).init();
      }
    }
    if (getHealth() > 0) {
      rewards.updateManager();
      achievements.updateManager();
      if (dragonHurtTime > 0)       --dragonHurtTime;
      double spd=currentAttack.overrideMovementSpeed();
      if (moveSpeedMp > spd)       moveSpeedMp=moveSpeedMp < 0.2D && spd == 0D ? 0D : Math.max(spd,moveSpeedMp - 0.0175D);
 else       if (moveSpeedMp < spd)       moveSpeedMp=Math.min(spd,moveSpeedMp + 0.0175D);
      float wng=frozen ? HeeDebugCommand.overrideWingSpeed : currentAttack.overrideWingSpeed(), curWng=getWingSpeed();
      if (curWng > wng)       curWng=Math.max(wng,curWng - 0.015F);
 else       if (curWng < wng)       curWng=Math.min(wng,curWng + 0.015F);
      if (curWng != getWingSpeed())       setWingSpeed(curWng);
      if (ticksExisted % 2 == 0) {
        int perc=attacks.getHealthPercentage();
        if (perc < 40 && rand.nextInt(500 - (50 - perc) * 8) == 0) {
          int x=(int)posX + rand.nextInt(301) - 150, z=(int)posZ + rand.nextInt(301) - 150;
          int y=1 + DragonUtil.getTopBlockY(worldObj,Blocks.end_stone,x,z);
          EntityMobAngryEnderman buddy=new EntityMobAngryEnderman(worldObj);
          buddy.setPosition(x,y,z);
          worldObj.addWeatherEffect(new EntityWeatherLightningBoltSafe(worldObj,x,y,z));
          worldObj.spawnEntityInWorld(buddy);
        }
        lastUpdate=worldObj.getTotalWorldTime();
      }
    }
    if (Log.isDebugEnabled())     DragonDebugManager.updateBoard(this);
  }
  if (worldObj.isRemote && MathHelper.cos(prevAnimTime * (float)Math.PI * 2F) <= -0.3F && MathHelper.cos(animTime * (float)Math.PI * 2F) >= -0.3F) {
    worldObj.playSound(posX,posY,posZ,""String_Node_Str"",5F,0.8F + rand.nextFloat() * 0.3F,false);
  }
  prevAnimTime=animTime;
  if (getHealth() <= 0F)   worldObj.spawnParticle(""String_Node_Str"",posX + (rand.nextFloat() - 0.5F) * 8F,posY + 2D + (rand.nextFloat() - 0.5F) * 4F,posZ + (rand.nextFloat() - 0.5F) * 8F,0D,0D,0D);
 else {
    updateEnderCrystal();
    float animAdvance=0.2F / (MathHelper.sqrt_double(motionX * motionX + motionZ * motionZ) * 10F + 1F);
    animAdvance*=(float)Math.pow(2D,motionY);
    animAdvance*=getWingSpeed();
    animTime+=slowed ? animAdvance * 0.5F : animAdvance;
    rotationYaw=MathHelper.wrapAngleTo180_float(rotationYaw);
    if (movementBufferIndex < 0) {
      for (int index=0; index < movementBuffer.length; ++index) {
        movementBuffer[index][0]=rotationYaw;
        movementBuffer[index][1]=posY;
      }
    }
    if (++movementBufferIndex == movementBuffer.length)     movementBufferIndex=0;
    movementBuffer[movementBufferIndex][0]=rotationYaw;
    movementBuffer[movementBufferIndex][1]=posY;
    if (worldObj.isRemote) {
      if (newPosRotationIncrements > 0) {
        double finalPosX=posX + (newPosX - posX) / newPosRotationIncrements, finalPosY=posY + (newPosY - posY) / newPosRotationIncrements, finalPosZ=posZ + (newPosZ - posZ) / newPosRotationIncrements;
        rotationYaw=(float)(rotationYaw + MathHelper.wrapAngleTo180_double(newRotationYaw - rotationYaw) / newPosRotationIncrements);
        rotationPitch=(float)(rotationPitch + (newRotationPitch - rotationPitch) / newPosRotationIncrements);
        --newPosRotationIncrements;
        setPosition(finalPosX,finalPosY,finalPosZ);
        setRotation(rotationYaw,rotationPitch);
      }
    }
 else {
      double xDiff=targetX - posX, yDiff=targetY - posY, zDiff=targetZ - posZ;
      double distFromTargetSq=xDiff * xDiff + yDiff * yDiff + zDiff * zDiff;
      if (target != null) {
        targetX=target.posX;
        targetZ=target.posZ;
        targetY=target.boundingBox.minY + Math.min(0.4D + Math.sqrt(Math.pow(targetX - posX,2) + Math.pow(targetZ - posZ,2)) / 80D - 1D,10D);
      }
 else       trySetTargetPosition(targetX + rand.nextGaussian() * 2D,targetY,targetZ + rand.nextGaussian() * 2D);
      if ((target != null && target.isDead) || distFromTargetSq > 22500D)       forceAttackEnd=forceNewTarget=true;
      if (forceNewTarget || distFromTargetSq < 90D || distFromTargetSq > 22500D || isCollidedHorizontally || isCollidedVertically) {
        setNewTarget();
      }
      yDiff=MathUtil.clamp(yDiff / MathUtil.distance(xDiff,zDiff),-0.6F,0.6F);
      motionY+=yDiff * 0.1D;
      rotationYaw=MathHelper.wrapAngleTo180_float(rotationYaw);
      double d9=MathUtil.clamp(MathHelper.wrapAngleTo180_double(180D - MathUtil.toDeg(Math.atan2(xDiff,zDiff)) - rotationYaw),-50D,50D);
      Vec3 targetDiffVec=Vec3.createVectorHelper(targetX - posX,targetY - posY,targetZ - posZ).normalize();
      Vec3 rotationVec=Vec3.createVectorHelper(MathHelper.sin(MathUtil.toRad(rotationYaw)),motionY,(-MathHelper.cos(MathUtil.toRad(rotationYaw)))).normalize();
      float f4=Math.max((float)(rotationVec.dotProduct(targetDiffVec) + 0.5D) / 1.5F,0F);
      randomYawVelocity*=0.8F;
      float speed=MathHelper.sqrt_double(motionX * motionX + motionZ * motionZ) + 1F;
      double speedLimited=Math.min(Math.sqrt(motionX * motionX + motionZ * motionZ) + 1D,40D);
      randomYawVelocity=(float)(randomYawVelocity + d9 * (0.7D / speedLimited / speed));
      rotationYaw+=randomYawVelocity * 0.1F;
      float f6=(float)(2D / (speedLimited + 1D));
      moveFlying(0F,-1F,0.06F * (f4 * f6 + (1F - f6)));
      if (frozen)       motionX=motionY=motionZ=0D;
      MotionUpdateEvent event=new MotionUpdateEvent(motionX,motionY,motionZ);
      currentAttack.onMotionUpdateEvent(event);
      motionX=event.motionX;
      motionY=event.motionY;
      motionZ=event.motionZ;
      if (slowed)       moveEntity(motionX * moveSpeedMp * 0.8D,motionY * moveSpeedMp * 0.8D,motionZ * moveSpeedMp * 0.8D);
 else       moveEntity(motionX * moveSpeedMp,motionY * moveSpeedMp,motionZ * moveSpeedMp);
      double motionMultiplier=0.8D + 0.15D * ((Vec3.createVectorHelper(motionX,motionY,motionZ).normalize().dotProduct(rotationVec) + 1D) * 0.5D);
      motionX*=motionMultiplier;
      motionZ*=motionMultiplier;
      motionY*=0.91D;
    }
    renderYawOffset=rotationYaw;
    dragonPartHead.width=dragonPartHead.height=3F;
    dragonPartTail1.width=dragonPartTail1.height=2F;
    dragonPartTail2.width=dragonPartTail2.height=2F;
    dragonPartTail3.width=dragonPartTail3.height=2F;
    dragonPartBody.width=5F;
    dragonPartBody.height=3F;
    dragonPartWing1.width=4F;
    dragonPartWing1.height=2F;
    dragonPartWing2.width=4F;
    dragonPartWing2.height=3F;
    float offsetAngle=MathUtil.toRad((float)(getMovementOffsets(5,1F)[1] - getMovementOffsets(10,1F)[1]) * 10F);
    float angleCos=MathHelper.cos(offsetAngle);
    float angleSin=-MathHelper.sin(offsetAngle);
    float yawRad=MathUtil.toRad(rotationYaw);
    float yawSin=MathHelper.sin(yawRad);
    float yawCos=MathHelper.cos(yawRad);
    dragonPartBody.onUpdate();
    dragonPartBody.setLocationAndAngles(posX + yawSin * 0.5F,posY,posZ - yawCos * 0.5F,0F,0F);
    dragonPartWing1.onUpdate();
    dragonPartWing1.setLocationAndAngles(posX + yawCos * 4.5F,posY + 2D,posZ + yawSin * 4.5F,0F,0F);
    dragonPartWing2.onUpdate();
    dragonPartWing2.setLocationAndAngles(posX - yawCos * 4.5F,posY + 2D,posZ - yawSin * 4.5F,0F,0F);
    collideWithEntities(worldObj.getEntitiesWithinAABBExcludingEntity(this,dragonPartWing1.boundingBox.expand(1.5D,2D,1.5D).offset(0D,-2D,0D)));
    collideWithEntities(worldObj.getEntitiesWithinAABBExcludingEntity(this,dragonPartWing2.boundingBox.expand(1.5D,2D,1.5D).offset(0D,-2D,0D)));
    collideWithEntities(worldObj.getEntitiesWithinAABBExcludingEntity(this,dragonPartTail3.boundingBox.expand(0.8D,1D,0.8D)));
    collideWithEntities(worldObj.getEntitiesWithinAABBExcludingEntity(this,dragonPartHead.boundingBox.expand(0.6D,1D,0.6D)));
    double[] oldOffsets=getMovementOffsets(5,1F), currentOffsets=getMovementOffsets(0,1F);
    float moveX=MathHelper.sin(MathUtil.toRad(rotationYaw) - randomYawVelocity * 0.01F);
    float moveZ=MathHelper.cos(MathUtil.toRad(rotationYaw) - randomYawVelocity * 0.01F);
    dragonPartHead.onUpdate();
    dragonPartHead.setLocationAndAngles(posX + moveX * 5.5F * angleCos,posY + currentOffsets[1] - oldOffsets[1] + angleSin * 5.5F,posZ - moveZ * 5.5F * angleCos,0F,0F);
    for (int part=0; part < 3; part++) {
      EntityDragonPart tailPart=part == 0 ? dragonPartTail1 : part == 1 ? dragonPartTail2 : dragonPartTail3;
      double[] partOffsets=getMovementOffsets(12 + part * 2,1F);
      float partYaw=MathUtil.toRad(rotationYaw) + MathUtil.toRad((float)MathHelper.wrapAngleTo180_double(partOffsets[0] - oldOffsets[0]));
      float partYawSin=MathHelper.sin(partYaw);
      float partYawCos=MathHelper.cos(partYaw);
      float partMp=(part + 1) * 2F;
      tailPart.onUpdate();
      tailPart.setLocationAndAngles(posX - ((yawSin * 1.5F + partYawSin * partMp) * angleCos),posY + (partOffsets[1] - oldOffsets[1]) - ((partMp + 1.5F) * angleSin) + 1.5D,posZ + ((yawCos * 1.5F + partYawCos * partMp) * angleCos),0F,0F);
    }
    if (!worldObj.isRemote) {
      slowed=destroyBlocksInAABB(dragonPartHead.boundingBox) | destroyBlocksInAABB(dragonPartBody.boundingBox);
      if (currentAttack.id == 1)       slowed|=destroyBlocksInAABB(dragonPartWing1.boundingBox.expand(0.5D,0.5D,0.5D)) | destroyBlocksInAABB(dragonPartWing2.boundingBox.expand(0.5D,0.5D,0.5D));
      attacks.updatePassiveAttacks(currentAttack);
    }
  }
}",0.854636480439502
34713,"private boolean destroyBlocksInAABB(AxisAlignedBB aabb){
  if (!worldObj.getGameRules().getGameRuleBooleanValue(""String_Node_Str""))   return false;
  boolean wasBlocked=false;
  boolean spawnParticles=false;
  int minX=MathUtil.floor(aabb.minX - Math.min(3,rand.nextGaussian() * 2.5D - 0.25D));
  int minY=MathUtil.floor(aabb.minY - Math.min(3,rand.nextGaussian() * 2.5D - 0.25D));
  int minZ=MathUtil.floor(aabb.minZ - Math.min(3,rand.nextGaussian() * 2.5D - 0.25D));
  int maxX=MathUtil.floor(aabb.maxX + Math.min(3,rand.nextGaussian() * 2.5D - 0.25D));
  int maxY=MathUtil.floor(aabb.maxY + Math.min(3,rand.nextGaussian() * 2.5D - 0.25D));
  int maxZ=MathUtil.floor(aabb.maxZ + Math.min(3,rand.nextGaussian() * 2.5D - 0.25D));
  double rad=2.8D + Math.min((aabb.maxX - aabb.minX) * 0.5D,(aabb.maxZ - aabb.minZ) * 0.5D);
  int cx=(int)((aabb.maxX - aabb.minX) * 0.5D + aabb.minX);
  int cy=(int)((aabb.maxY - aabb.minY) * 0.5D + aabb.minY);
  int cz=(int)((aabb.maxZ - aabb.minZ) * 0.5D + aabb.minZ);
  for (int xx=minX; xx <= maxX; xx++) {
    for (int yy=minY; yy <= maxY; yy++) {
      for (int zz=minZ; zz <= maxZ; zz++) {
        Block block=worldObj.getBlock(xx,yy,zz);
        if (angryStatus && block == BlockList.obsidian_falling) {
          worldObj.setBlockToAir(xx,yy,zz);
          EntityBlockFallingObsidian obsidian=new EntityBlockFallingObsidian(worldObj,xx,yy,zz);
          obsidian.motionY=-0.2;
          worldObj.spawnEntityInWorld(obsidian);
          spawnParticles=true;
        }
 else         if (block == Blocks.bedrock || (!angryStatus && (block == Blocks.obsidian || block == BlockList.obsidian_falling || (block == Blocks.iron_bars && worldObj.getBlock(xx,yy - 1,zz) == BlockList.obsidian_falling)))) {
          wasBlocked=true;
        }
 else         if (MathUtil.distance(xx - cx,yy - cy,zz - cz) <= rad + 0.3D * rand.nextDouble()) {
          spawnParticles=worldObj.setBlockToAir(xx,yy,zz) || spawnParticles;
        }
      }
    }
  }
  if (spawnParticles)   worldObj.spawnParticle(""String_Node_Str"",aabb.minX + (aabb.maxX - aabb.minX) * rand.nextFloat(),aabb.minY + (aabb.maxY - aabb.minY) * rand.nextFloat(),aabb.minZ + (aabb.maxZ - aabb.minZ) * rand.nextFloat(),0D,0D,0D);
  return wasBlocked;
}","private boolean destroyBlocksInAABB(AxisAlignedBB aabb){
  if (!worldObj.getGameRules().getGameRuleBooleanValue(""String_Node_Str""))   return false;
  boolean wasBlocked=false;
  boolean spawnParticles=false;
  int minX=MathUtil.floor(aabb.minX + 0.5D - rand.nextDouble() * rand.nextDouble() * 5D);
  int minY=MathUtil.floor(aabb.minY + 0.5D - rand.nextDouble() * rand.nextDouble() * 5D);
  int minZ=MathUtil.floor(aabb.minZ + 0.5D - rand.nextDouble() * rand.nextDouble() * 5D);
  int maxX=MathUtil.floor(aabb.maxX - 0.5D + rand.nextDouble() * rand.nextDouble() * 5D);
  int maxY=MathUtil.floor(aabb.maxY - 0.5D + rand.nextDouble() * rand.nextDouble() * 5D);
  int maxZ=MathUtil.floor(aabb.maxZ - 0.5D + rand.nextDouble() * rand.nextDouble() * 5D);
  double rad=2.8D + Math.min((aabb.maxX - aabb.minX) * 0.5D,(aabb.maxZ - aabb.minZ) * 0.5D);
  int cx=(int)((aabb.maxX - aabb.minX) * 0.5D + aabb.minX);
  int cy=(int)((aabb.maxY - aabb.minY) * 0.5D + aabb.minY);
  int cz=(int)((aabb.maxZ - aabb.minZ) * 0.5D + aabb.minZ);
  for (int xx=minX; xx <= maxX; xx++) {
    for (int yy=minY; yy <= maxY; yy++) {
      for (int zz=minZ; zz <= maxZ; zz++) {
        Block block=worldObj.getBlock(xx,yy,zz);
        if (angryStatus && block == BlockList.obsidian_falling) {
          worldObj.setBlockToAir(xx,yy,zz);
          EntityBlockFallingObsidian obsidian=new EntityBlockFallingObsidian(worldObj,xx,yy,zz);
          obsidian.motionY=-0.2;
          worldObj.spawnEntityInWorld(obsidian);
          spawnParticles=true;
        }
 else         if (block == Blocks.bedrock || (!angryStatus && (block == Blocks.obsidian || block == BlockList.obsidian_falling || (block == Blocks.iron_bars && worldObj.getBlock(xx,yy - 1,zz) == BlockList.obsidian_falling)))) {
          wasBlocked=true;
        }
 else         if (MathUtil.distance(xx - cx,yy - cy,zz - cz) <= rad + (0.9D * rand.nextDouble() - 0.4D)) {
          spawnParticles=worldObj.setBlockToAir(xx,yy,zz) || spawnParticles;
        }
      }
    }
  }
  if (spawnParticles)   worldObj.spawnParticle(""String_Node_Str"",aabb.minX + (aabb.maxX - aabb.minX) * rand.nextFloat(),aabb.minY + (aabb.maxY - aabb.minY) * rand.nextFloat(),aabb.minZ + (aabb.maxZ - aabb.minZ) * rand.nextFloat(),0D,0D,0D);
  return wasBlocked;
}",0.8923418423973363
34714,"@Override public void update(){
  if (dragon.target != null && biteCooldown == 0) {
    if (dragon.attacks.biteClosePlayers() && ++biteCounter >= (dragon.angryStatus ? 3 : 1)) {
      dragon.trySetTarget(null);
      biteCounter=0;
    }
    biteCooldown=(byte)(dragon.angryStatus ? 7 : 9);
  }
  if (biteCooldown > 0)   --biteCooldown;
}","@Override public void update(){
  if (biteCooldown == 0 || --biteCooldown == 0) {
    if (dragon.attacks.biteClosePlayers() && ++biteCounter >= (dragon.angryStatus ? 3 : 1)) {
      dragon.trySetTarget(null);
      biteCounter=0;
    }
    biteCooldown=(byte)(dragon.angryStatus ? 7 : 9);
  }
}",0.6613924050632911
34715,"@Override public void update(){
  if (dragon.target != null && ++timer >= (24 - dragon.worldObj.difficultySetting.getDifficultyId() * 4) + (dragon.angryStatus ? 10 : 30) - ((100 - dragon.attacks.getHealthPercentage()) >> 3)) {
    if (dragon.target.getDistanceSqToEntity(dragon.dragonPartHead) > 400D) {
      dragon.shots.createNew(ShotType.FIREBALL).setTarget(dragon.target).shoot();
      timer=0;
    }
 else     --timer;
  }
 else   timer=8;
}","@Override public void update(){
  if (dragon.target == null)   timer=8;
 else   if (dragon.target != null && ++timer >= (24 - dragon.worldObj.difficultySetting.getDifficultyId() * 4) + (dragon.angryStatus ? 5 : 20) - (ModCommonProxy.opMobs ? 5 : 0) - ((100 - dragon.attacks.getHealthPercentage()) >> 4)) {
    if (dragon.target.getDistanceSqToEntity(dragon.dragonPartHead) > 400D) {
      dragon.shots.createNew(ShotType.FIREBALL).setTarget(dragon.target).shoot();
      timer=0;
    }
 else     --timer;
  }
}",0.8914405010438413
34716,"@Override public void update(){
  super.update();
  List<EntityPlayer> viablePlayers=dragon.attacks.getViablePlayers();
  if (++summonTimer > 35 - Math.min(viablePlayers.size() * 4 + (ModCommonProxy.opMobs ? 5 : 0),20)) {
    summonTimer=0;
    boolean didSummon=false;
    for (int amt=MathUtil.clamp(MathUtil.ceil(viablePlayers.size() * (0.2D + rand.nextDouble() * 0.25D)),1,viablePlayers.size()), aggro=0; amt > 0; amt--) {
      EntityPlayer player=viablePlayers.remove(rand.nextInt(viablePlayers.size()));
      for (      EntityMobAngryEnderman enderman : (List<EntityMobAngryEnderman>)dragon.worldObj.getEntitiesWithinAABB(EntityMobAngryEnderman.class,player.boundingBox.expand(7D,3D,7D))) {
        if (enderman.getEntityToAttack() == player)         ++aggro;
      }
      if (aggro < 1 + getDifficulty()) {
        boolean flying=true;
        for (int a=0, xx=MathUtil.floor(player.posX), zz=MathUtil.floor(player.posZ), testY=MathUtil.floor(player.posY) - 1; a < 4; a++) {
          if (!dragon.worldObj.isAirBlock(xx,testY - a,zz)) {
            flying=false;
            break;
          }
        }
        if (flying) {
          if (lastStriked.adjustOrPutValue(player.getPersistentID(),(byte)-1,(byte)0) <= 0) {
            player.attackEntityFrom(DamageSource.magic,1F);
            player.hurtResistantTime=0;
            player.attackEntityFrom(DamageSource.causeMobDamage(dragon),7F);
            player.setFire(5);
            dragon.worldObj.addWeatherEffect(new EntityWeatherLightningBoltSafe(dragon.worldObj,player.posX,player.posY,player.posZ));
            lastStriked.put(player.getPersistentID(),(byte)(2 + rand.nextInt(3)));
          }
          continue;
        }
        for (int a=0; a < 3 + rand.nextInt(2 + getDifficulty()); a++) {
          double x=player.posX + (rand.nextDouble() - 0.5D) * 11D, z=player.posZ + (rand.nextDouble() - 0.5D) * 11D;
          int y=1 + DragonUtil.getTopBlockY(dragon.worldObj,Blocks.end_stone,MathUtil.floor(x),MathUtil.floor(z),MathUtil.floor(player.posY + 8));
          EntityMobAngryEnderman enderman=new EntityMobAngryEnderman(dragon.worldObj);
          enderman.setPosition(x,y,z);
          enderman.setTarget(player);
          if ((getDifficulty() > 1 || ModCommonProxy.opMobs) && rand.nextInt(100) < 5 + getDifficulty() * 10 + (ModCommonProxy.opMobs ? 25 : 0)) {
            enderman.addPotionEffect(new PotionEffect(Potion.damageBoost.id,2400,0,true));
          }
          dragon.worldObj.addWeatherEffect(new EntityWeatherLightningBoltSafe(dragon.worldObj,x,y,z));
          dragon.worldObj.spawnEntityInWorld(enderman);
        }
        didSummon=true;
      }
    }
    if (didSummon && ++summoned > 5 + getDifficulty())     ended=true;
  }
}","@Override public void update(){
  super.update();
  List<EntityPlayer> viablePlayers=dragon.attacks.getViablePlayers();
  if (++summonTimer > 35 - Math.min(viablePlayers.size() * 4 + (ModCommonProxy.opMobs ? 5 : 0),20)) {
    summonTimer=0;
    boolean didSummon=false;
    for (int amt=MathUtil.clamp(MathUtil.ceil(viablePlayers.size() * (0.2D + rand.nextDouble() * 0.25D)),1,viablePlayers.size()), aggro=0, total=0; amt > 0; amt--) {
      EntityPlayer player=viablePlayers.remove(rand.nextInt(viablePlayers.size()));
      for (      EntityMobAngryEnderman enderman : (List<EntityMobAngryEnderman>)dragon.worldObj.getEntitiesWithinAABB(EntityMobAngryEnderman.class,player.boundingBox.expand(7D,3D,7D))) {
        if (enderman.getEntityToAttack() == player)         ++aggro;
        ++total;
      }
      if (aggro < 1 + getDifficulty() && total < 7 + getDifficulty()) {
        boolean flying=true;
        for (int a=0, xx=MathUtil.floor(player.posX), zz=MathUtil.floor(player.posZ), testY=MathUtil.floor(player.posY) - 1; a < 4; a++) {
          if (!dragon.worldObj.isAirBlock(xx,testY - a,zz)) {
            flying=false;
            break;
          }
        }
        if (flying) {
          if (lastStriked.adjustOrPutValue(player.getPersistentID(),(byte)-1,(byte)0) <= 0) {
            player.attackEntityFrom(DamageSource.magic,1F);
            player.hurtResistantTime=0;
            player.attackEntityFrom(DamageSource.causeMobDamage(dragon),7F);
            player.setFire(5);
            dragon.worldObj.addWeatherEffect(new EntityWeatherLightningBoltSafe(dragon.worldObj,player.posX,player.posY,player.posZ));
            lastStriked.put(player.getPersistentID(),(byte)(2 + rand.nextInt(3)));
          }
          continue;
        }
        for (int a=0; a < 3 + rand.nextInt(2 + getDifficulty()); a++) {
          double x=player.posX + (rand.nextDouble() - 0.5D) * 11D, z=player.posZ + (rand.nextDouble() - 0.5D) * 11D;
          int y=1 + DragonUtil.getTopBlockY(dragon.worldObj,Blocks.end_stone,MathUtil.floor(x),MathUtil.floor(z),MathUtil.floor(player.posY + 8));
          EntityMobAngryEnderman enderman=new EntityMobAngryEnderman(dragon.worldObj);
          enderman.setPosition(x,y,z);
          enderman.setTarget(player);
          if ((getDifficulty() > 1 || ModCommonProxy.opMobs) && rand.nextInt(100) < 5 + getDifficulty() * 10 + (ModCommonProxy.opMobs ? 25 : 0)) {
            enderman.addPotionEffect(new PotionEffect(Potion.damageBoost.id,2400,0,true));
          }
          dragon.worldObj.addWeatherEffect(new EntityWeatherLightningBoltSafe(dragon.worldObj,x,y,z));
          dragon.worldObj.spawnEntityInWorld(enderman);
        }
        didSummon=true;
      }
    }
    if (didSummon && ++summoned > 5 + getDifficulty())     ended=true;
  }
}",0.9896720420366008
34717,"public boolean biteClosePlayers(){
  boolean res=false;
  for (  EntityPlayer player : (List<EntityPlayer>)dragon.worldObj.getEntitiesWithinAABB(EntityPlayer.class,dragon.dragonPartHead.boundingBox.expand(2.8D,2.4D,2.8D))) {
    int diff=dragon.worldObj.difficultySetting.getDifficultyId(), rm;
    player.attackEntityFrom(DamageSource.causeMobDamage(dragon),(ModCommonProxy.opMobs ? 9F : 4F) + diff);
switch (diff) {
case 3:
      rm=34;
    break;
case 2:
  rm=22;
break;
case 1:
rm=15;
break;
default :
rm=10;
}
if (dragon.worldObj.rand.nextInt(100) < rm) {
player.addPotionEffect(new PotionEffect(Potion.poison.id,180 + 25 * diff,0));
dragon.rewards.addHandicap(0.1F,false);
if (dragon.worldObj.rand.nextInt(100) < 35 + diff * 12) {
player.addPotionEffect(new PotionEffect(Potion.blindness.id,200 + 18 * diff,0));
player.addPotionEffect(new PotionEffect(Potion.confusion.id,160 + 20 * diff,0));
}
}
res=true;
}
return res;
}","public boolean biteClosePlayers(){
  boolean res=false;
  for (  EntityPlayer player : (List<EntityPlayer>)dragon.worldObj.getEntitiesWithinAABB(EntityPlayer.class,dragon.dragonPartHead.boundingBox.expand(2.2D,1.5D,2.2D))) {
    int diff=dragon.worldObj.difficultySetting.getDifficultyId(), rm;
    player.attackEntityFrom(DamageSource.causeMobDamage(dragon),(ModCommonProxy.opMobs ? 9F : 4F) + diff);
switch (diff) {
case 3:
      rm=34;
    break;
case 2:
  rm=22;
break;
case 1:
rm=15;
break;
default :
rm=10;
}
if (dragon.worldObj.rand.nextInt(100) < rm) {
player.addPotionEffect(new PotionEffect(Potion.poison.id,120 + 35 * diff,ModCommonProxy.opMobs ? 1 : 0));
dragon.rewards.addHandicap(0.1F,false);
if (dragon.worldObj.rand.nextInt(100) < 35 + diff * 12) {
player.addPotionEffect(new PotionEffect(Potion.blindness.id,160 + 24 * diff,0));
player.addPotionEffect(new PotionEffect(Potion.confusion.id,100 + 24 * diff,0));
}
}
res=true;
}
return res;
}",0.8715498938428875
34718,"private void updateEnderCrystal(){
  if (healingEnderCrystal != null) {
    if (healingEnderCrystal.isDead) {
      if (!worldObj.isRemote) {
        attackEntityFromPart(dragonPartHead,DamageSource.setExplosionSource(null),10F);
        if (target == null)         trySetTarget(attacks.getRandomPlayer());
      }
      healingEnderCrystal=null;
    }
 else     if (ticksExisted % 10 == 0 && getHealth() < getMaxHealth())     setHealth(getHealth() + (ModCommonProxy.opMobs ? 2F : 1F));
  }
  if (rand.nextInt(10) == 0) {
    float dist=30F + 4F * worldObj.difficultySetting.getDifficultyId() + (ModCommonProxy.opMobs ? 8F : 0F);
    healingEnderCrystal=DragonUtil.getClosestEntity(this,worldObj.getEntitiesWithinAABB(EntityEnderCrystal.class,boundingBox.expand(dist,dist,dist)));
  }
}","private void updateEnderCrystal(){
  if (healingEnderCrystal != null) {
    if (healingEnderCrystal.isDead) {
      if (!worldObj.isRemote) {
        attackEntityFromPart(dragonPartHead,DamageSource.setExplosionSource(null),10F);
        if (target == null)         trySetTarget(attacks.getRandomPlayer());
      }
      healingEnderCrystal=null;
    }
 else     if (ticksExisted % 10 == 0 && getHealth() < getMaxHealth())     setHealth(getHealth() + (ModCommonProxy.opMobs ? 2F : 1F));
  }
  if (rand.nextInt(10) == 0) {
    float dist=30F + 4F * worldObj.difficultySetting.getDifficultyId() + (ModCommonProxy.opMobs ? 8F : 0F);
    healingEnderCrystal=DragonUtil.getClosestEntity(this,(List<EntityEnderCrystal>)worldObj.getEntitiesWithinAABB(EntityEnderCrystal.class,boundingBox.expand(dist,dist,dist)));
  }
}",0.983729662077597
34719,"@Override public void update(){
  super.update();
  if (++timer > 125 - getDifficulty() * 10) {
    timer=-10;
    for (    EntityPlayer player : dragon.attacks.getViablePlayers()) {
      EntityEnderman enderman=DragonUtil.getClosestEntity(player,dragon.worldObj.getEntitiesWithinAABB(EntityEnderman.class,player.boundingBox.expand(18D,8D,18D)));
      if (enderman == null) {
        int px=0, py=0, pz=0;
        for (int attempt=0; attempt < 40; attempt++) {
          float rad=rand.nextFloat() * (float)Math.PI * 2F;
          double len=10D + rand.nextDouble() * 8D;
          px=(int)Math.round(player.posX + MathHelper.sin(rad) * len);
          py=(int)Math.round(player.posY - (rand.nextDouble() - 0.5D) * 6D);
          pz=(int)Math.round(player.posZ + MathHelper.cos(rad) * len);
          if (dragon.worldObj.isAirBlock(px,py,pz))           break;
        }
        for (int a=0, xx, yy, zz; a < 2 + rand.nextInt(3) + (getDifficulty() >> 1); a++) {
          for (int attempt=0; attempt < 6; attempt++) {
            if (dragon.worldObj.isAirBlock(xx=px + rand.nextInt(3) - 1,yy=py + rand.nextInt(3) - 1,zz=pz + rand.nextInt(3) - 1))             break;
          }
          spawnBatAt(px,py,pz,player);
        }
      }
 else {
        for (int a=0; a < 2 + rand.nextInt(3) + (getDifficulty() >> 1); a++) {
          spawnBatAt(enderman.posX + rand.nextDouble() - 0.5D,enderman.posY + rand.nextDouble() * enderman.height,enderman.posZ + rand.nextDouble() - 0.5D,player);
        }
        enderman.setDead();
        PacketPipeline.sendToAllAround(enderman,64D,new C20Effect(FXType.Basic.ENDERMAN_BLOODLUST_TRANSFORMATION,enderman));
      }
    }
    if (++counter > 3 + (getDifficulty() >> 1) + rand.nextInt(3))     ended=true;
  }
}","@Override public void update(){
  super.update();
  if (++timer > 125 - getDifficulty() * 10) {
    timer=-10;
    for (    EntityPlayer player : dragon.attacks.getViablePlayers()) {
      EntityEnderman enderman=DragonUtil.getClosestEntity(player,(List<EntityEnderman>)dragon.worldObj.getEntitiesWithinAABB(EntityEnderman.class,player.boundingBox.expand(18D,8D,18D)));
      if (enderman == null) {
        int px=0, py=0, pz=0;
        for (int attempt=0; attempt < 40; attempt++) {
          float rad=rand.nextFloat() * (float)Math.PI * 2F;
          double len=10D + rand.nextDouble() * 8D;
          px=(int)Math.round(player.posX + MathHelper.sin(rad) * len);
          py=(int)Math.round(player.posY - (rand.nextDouble() - 0.5D) * 6D);
          pz=(int)Math.round(player.posZ + MathHelper.cos(rad) * len);
          if (dragon.worldObj.isAirBlock(px,py,pz))           break;
        }
        for (int a=0, xx, yy, zz; a < 2 + rand.nextInt(3) + (getDifficulty() >> 1); a++) {
          for (int attempt=0; attempt < 6; attempt++) {
            if (dragon.worldObj.isAirBlock(xx=px + rand.nextInt(3) - 1,yy=py + rand.nextInt(3) - 1,zz=pz + rand.nextInt(3) - 1))             break;
          }
          spawnBatAt(px,py,pz,player);
        }
      }
 else {
        for (int a=0; a < 2 + rand.nextInt(3) + (getDifficulty() >> 1); a++) {
          spawnBatAt(enderman.posX + rand.nextDouble() - 0.5D,enderman.posY + rand.nextDouble() * enderman.height,enderman.posZ + rand.nextDouble() - 0.5D,player);
        }
        enderman.setDead();
        PacketPipeline.sendToAllAround(enderman,64D,new C20Effect(FXType.Basic.ENDERMAN_BLOODLUST_TRANSFORMATION,enderman));
      }
    }
    if (++counter > 3 + (getDifficulty() >> 1) + rand.nextInt(3))     ended=true;
  }
}",0.9937570942111236
34720,"public static <T extends Entity>T getClosestEntity(Entity source,List<T> list){
  double closestDist=Double.MAX_VALUE, currentDist;
  Entity closestEntity=null;
  for (  Entity entity : list) {
    if (!entity.isDead && (currentDist=source.getDistanceSqToEntity(entity)) < closestDist) {
      closestDist=currentDist;
      closestEntity=entity;
    }
  }
  return (T)closestEntity;
}","public static <T extends Entity>T getClosestEntity(Entity source,List<? extends T> list){
  double closestDist=Double.MAX_VALUE, currentDist;
  Entity closestEntity=null;
  for (  Entity entity : list) {
    if (!entity.isDead && (currentDist=source.getDistanceSqToEntity(entity)) < closestDist) {
      closestDist=currentDist;
      closestEntity=entity;
    }
  }
  return (T)closestEntity;
}",0.9871794871794872
34721,"@Override public ItemStack onItemRightClick(ItemStack is,World world,EntityPlayer player){
  if (!world.isRemote) {
    CurseType type=CurseType.getFromDamage(is.getItemDamage());
    if (type == null)     return is;
    world.spawnEntityInWorld(new EntityProjectileCurse(world,player,type,CurseType.isEternal(is.getItemDamage())));
  }
  if (!player.capabilities.isCreativeMode)   --is.stackSize;
  return is;
}","@Override public ItemStack onItemRightClick(ItemStack is,World world,EntityPlayer player){
  if (!world.isRemote) {
    CurseType type=CurseType.getFromDamage(is.getItemDamage());
    if (type == null)     return is;
    world.spawnEntityInWorld(new EntityProjectileCurse(world,player,is,type,CurseType.isEternal(is.getItemDamage())));
  }
  if (!player.capabilities.isCreativeMode)   --is.stackSize;
  return is;
}",0.996372430471584
34722,"public void addElementAt(int chunkX,int chunkZ,WorldGenElement element){
  elements.put(getFromChunkPos(chunkX,chunkZ),element);
}","public void addElementAt(int chunkX,int chunkZ,WorldGenElement element){
  elements.put(getFromChunkPos(chunkX,chunkZ),element);
  setModified();
}",0.9386281588447654
34723,"@Override protected void onSave(NBTTagCompound nbt){
}","@Override protected void onSave(NBTTagCompound nbt){
  TByteObjectHashMap<NBTTagList> saved=new TByteObjectHashMap<>();
  byte ord;
  for (TLongObjectIterator<WorldGenElement> iter=elements.iterator(); iter.hasNext(); iter.advance()) {
    ord=(byte)iter.value().ordinal();
    if (!saved.containsKey(ord))     saved.put(ord,new NBTTagList());
    saved.get(ord).appendTag(new NBTTagDouble(Double.longBitsToDouble(iter.key())));
  }
  for (TByteObjectIterator<NBTTagList> iter=saved.iterator(); iter.hasNext(); iter.advance()) {
    nbt.setTag(String.valueOf(iter.key()),iter.value());
  }
}",0.1674418604651162
34724,"public boolean isAreaBlocked(int chunkX,int chunkZ,WorldGenElement element){
  for (TLongIterator iter=elements.keySet().iterator(); iter.hasNext(); ) {
    long pos=iter.next();
    WorldGenElement ele=elements.get(pos);
    if (Math.abs(getX(pos) - chunkX) <= ele.rad + element.rad && Math.abs(getZ(pos) - chunkZ) <= ele.rad + element.rad) {
      return true;
    }
  }
  return false;
}","public boolean isAreaBlocked(int chunkX,int chunkZ,WorldGenElement element){
  for (TLongObjectIterator<WorldGenElement> iter=elements.iterator(); iter.hasNext(); iter.advance()) {
    if (Math.abs(getX(iter.key()) - chunkX) <= iter.value().rad + element.rad && Math.abs(getZ(iter.key()) - chunkZ) <= iter.value().rad + element.rad) {
      return true;
    }
  }
  return false;
}",0.6459143968871596
34725,"@Override protected void onLoad(NBTTagCompound nbt){
}","@Override protected void onLoad(NBTTagCompound nbt){
  WorldGenElement[] vals=WorldGenElement.values();
  for (int a=0; a < vals.length; a++) {
    NBTTagList list=nbt.getTagList(String.valueOf(a),NBT.TAG_LONG);
    for (int index=0; index < list.tagCount(); index++) {
      elements.put(Double.doubleToLongBits(list.func_150309_d(index)),vals[a]);
    }
  }
}",0.2602409638554216
34726,"private final long getFromChunkPos(int x,int z){
  if (x >= -1875000 && z >= -1875000 && x < 1875000 && z < 1875000)   return ((x + 1875000) << 24) | (z + 1875000);
 else   return Long.MIN_VALUE;
}","private final long getFromChunkPos(int x,int z){
  if (x >= -1875000 && z >= -1875000 && x < 1875000 && z < 1875000)   return ((x + 1875000) << 24) | (z + 1875000);
 else   return Long.MAX_VALUE;
}",0.9898477157360406
34727,"public ComponentIsland(Random rand,int x,int z){
  super(rand,x,20,z,208,140,208);
  this.startX=x;
  this.startZ=z;
  coordBaseMode=0;
  boundingBox=new StructureBoundingBox(x,20,z,x + sizeX - 1,140 + sizeY - 1,z + sizeZ - 1);
  structure=new LargeStructureWorld(this);
}","public ComponentIsland(Random rand,int x,int z){
  super(rand,x,20,z,208,140,208);
  this.startX=x;
  this.startZ=z;
  coordBaseMode=0;
  boundingBox=new StructureBoundingBox(x,20,z,x + sizeX - 1,140 + sizeY - 1,z + sizeZ - 1);
  structure=new LargeStructureWorld(this);
  WorldDataHandler.<WorldGenSavefile>get(WorldGenSavefile.class).addElementAt(startX >> 4,startZ >> 4,WorldGenElement.BIOME_ISLAND);
}",0.8035450516986706
34728,"protected ComponentTower(Random rand,int x,int z){
  super(rand,x,32,z,32,140,32);
  startX=x;
  startZ=z;
}","protected ComponentTower(Random rand,int x,int z){
  super(rand,x,32,z,32,140,32);
  startX=x;
  startZ=z;
  WorldDataHandler.<WorldGenSavefile>get(WorldGenSavefile.class).addElementAt(startX >> 4,startZ >> 4,WorldGenElement.DUNGEON_TOWER);
}",0.6171428571428571
34729,"@Override protected boolean canStructureSpawn(int x,int z,Random rand){
  ChunkPosition island=worldObj.getChunkProvider().func_147416_a(worldObj,""String_Node_Str"",x * 16,50,z * 16);
  return island == null || MathUtil.distance(x * 16 - island.chunkPosX,z * 16 - island.chunkPosZ) > 170;
}","@Override protected boolean canStructureSpawn(int x,int z,Random rand){
  return !WorldDataHandler.<WorldGenSavefile>get(WorldGenSavefile.class).isAreaBlocked(x >> 4,z >> 4,WorldGenElement.DUNGEON_TOWER);
}",0.3353535353535353
34730,"public static void handleBasic(World world,EntityClientPlayerMP player,FXType.Basic fx,double x,double y,double z){
switch (fx) {
case ESSENCE_ALTAR_SMOKE:
    for (int a=0; a < 15; a++)     world.spawnParticle(""String_Node_Str"",x + randCenter(0.5D),y + 0.6D + rand.nextDouble() * 0.25D,z + randCenter(0.5D),0D,0.15D,0D);
  break;
case LASER_BEAM_DESTROY:
String[] particles=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
for (int a=0; a < 10; a++) {
for (String pt : particles) world.spawnParticle(pt,x + randCenter(0.5D),y + randCenter(0.5D),z + randCenter(0.5D),0D,0D,0D);
}
break;
case SPOOKY_LOG_DECAY:
((BlockSpookyLog)BlockList.spooky_log).addDestroyEffectsCustom(world,(int)x,(int)y,(int)z);
break;
case SPOOKY_LEAVES_DECAY:
((BlockSpookyLeaves)BlockList.spooky_leaves).addDestroyEffectsCustom(world,(int)x,(int)y,(int)z);
break;
case DUNGEON_PUZZLE_BURN:
for (int a=0; a < 6; a++) world.spawnParticle(""String_Node_Str"",x + randCenter(0.3D),y + 0.6D * rand.nextDouble(),z + randCenter(0.3D),0D,0.04D,0D);
world.playSoundEffect(x,y,z,""String_Node_Str"",0.6F,2.6F + (rand.nextFloat() - rand.nextFloat()) * 0.8F);
break;
case DRAGON_EGG_RESET:
for (int a=0; a < 40; a++) {
world.spawnParticle(""String_Node_Str"",x + randCenter(0.8D),y + randCenter(0.8D),z + randCenter(0.8D),randCenter(0.01D),randCenter(0.01D),randCenter(0.01D));
world.spawnParticle(""String_Node_Str"",x + randCenter(0.8D),y + randCenter(0.8D) - 0.5D,z + randCenter(0.8D),randCenter(2D),randCenter(2D),randCenter(2D));
}
world.playSound(x,y,z,""String_Node_Str"",1.2F,world.rand.nextFloat() * 0.05F + 0.85F,false);
break;
case GEM_LINK:
for (int a=0; a < 25; a++) HardcoreEnderExpansion.fx.portalOrbiting(world,x + 0.5D,y + 0.38D + rand.nextDouble() * 0.6D,z + 0.5D,rand.nextDouble() * 0.045D + 0.015D);
world.playSound(x + 0.5D,y + 1D,z + 0.5D,""String_Node_Str"",1F,rand.nextFloat() * 0.02F + 0.64F,false);
break;
case GEM_TELEPORT_TO:
for (int a=0; a < 25; a++) HardcoreEnderExpansion.fx.portalOrbiting(world,x,y + 1.63D + rand.nextDouble() * 0.6D,z,rand.nextDouble() * 0.045D + 0.015D);
world.playSound(x,y + 1.63D,z,""String_Node_Str"",1.2F,world.rand.nextFloat() * 0.05F + 0.85F,false);
break;
case ENDER_PEARL_FREEZE:
for (double xx=x - 5; xx <= x + 5; xx++) {
for (double yy=y - 5; yy <= y + 5; yy++) {
for (double zz=z - 5; zz <= z + 5; zz++) {
if (MathUtil.distance(xx - x,yy - y,zz - z) > 5D) continue;
for (int i=0; i < 2; ++i) world.spawnParticle(""String_Node_Str"",xx + rand.nextDouble() - 0.5D,yy,zz + rand.nextDouble() - 0.5D,0D,0D,0D);
}
}
}
world.playSound(x,y,z,""String_Node_Str"",1F,rand.nextFloat() * 0.1F + 0.9F,false);
break;
case IGNEOUS_ROCK_MELT:
for (int a=0; a < 40; a++) HardcoreEnderExpansion.fx.flame(player.worldObj,x + randCenter(1.25D),y + randCenter(1.25D),z + randCenter(1.25D),12 + rand.nextInt(9));
break;
case ENDERMAN_BLOODLUST_TRANSFORMATION:
for (int a=0; a < 20; a++) world.spawnParticle(""String_Node_Str"",x + randCenter(0.3D),y + rand.nextDouble() * 2.8D,z + randCenter(0.3D),0D,0D,0D);
break;
case LOUSE_ARMOR_HIT:
for (int a=0; a < 10; a++) world.spawnParticle(""String_Node_Str"",x + randCenter(0.4D),y + rand.nextDouble() * 0.45D,z + randCenter(0.4D),randCenter(0.2D),randCenter(0.2D),randCenter(0.2D));
break;
case HOMELAND_ENDERMAN_TP_OVERWORLD:
for (int a=30 + rand.nextInt(20); a > 0; a--) {
HardcoreEnderExpansion.fx.omnipresent(""String_Node_Str"",world,x + randCenter(1D),y + rand.nextDouble() * 96D,z + randCenter(1D),randCenter(0.1D),randCenter(0.05D),randCenter(0.1D));
}
break;
default :
}
}","public static void handleBasic(World world,EntityClientPlayerMP player,FXType.Basic fx,double x,double y,double z){
switch (fx) {
case ESSENCE_ALTAR_SMOKE:
    for (int a=0; a < 15; a++)     world.spawnParticle(""String_Node_Str"",x + randCenter(0.5D),y + 0.6D + rand.nextDouble() * 0.25D,z + randCenter(0.5D),0D,0.15D,0D);
  break;
case LASER_BEAM_DESTROY:
String[] particles=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
for (int a=0; a < 10; a++) {
for (String pt : particles) world.spawnParticle(pt,x + randCenter(0.5D),y + randCenter(0.5D),z + randCenter(0.5D),0D,0D,0D);
}
break;
case SPOOKY_LOG_DECAY:
((BlockSpookyLog)BlockList.spooky_log).addDestroyEffectsCustom(world,(int)x,(int)y,(int)z);
break;
case SPOOKY_LEAVES_DECAY:
((BlockSpookyLeaves)BlockList.spooky_leaves).addDestroyEffectsCustom(world,(int)x,(int)y,(int)z);
break;
case DUNGEON_PUZZLE_BURN:
for (int a=0; a < 6; a++) world.spawnParticle(""String_Node_Str"",x + randCenter(0.3D),y + 0.6D * rand.nextDouble(),z + randCenter(0.3D),0D,0.04D,0D);
world.playSoundEffect(x,y,z,""String_Node_Str"",0.6F,2.6F + (rand.nextFloat() - rand.nextFloat()) * 0.8F);
break;
case DRAGON_EGG_RESET:
for (int a=0; a < 40; a++) {
world.spawnParticle(""String_Node_Str"",x + randCenter(0.8D),y + randCenter(0.8D),z + randCenter(0.8D),randCenter(0.01D),randCenter(0.01D),randCenter(0.01D));
world.spawnParticle(""String_Node_Str"",x + randCenter(0.8D),y + randCenter(0.8D) - 0.5D,z + randCenter(0.8D),randCenter(2D),randCenter(2D),randCenter(2D));
}
world.playSound(x,y,z,""String_Node_Str"",1.2F,world.rand.nextFloat() * 0.05F + 0.85F,false);
break;
case GEM_LINK:
for (int a=0; a < 25; a++) HardcoreEnderExpansion.fx.portalOrbiting(world,x + 0.5D,y + 0.38D + rand.nextDouble() * 0.6D,z + 0.5D,rand.nextDouble() * 0.045D + 0.015D);
world.playSound(x + 0.5D,y + 1D,z + 0.5D,""String_Node_Str"",1F,rand.nextFloat() * 0.02F + 0.64F,false);
break;
case GEM_TELEPORT_TO:
for (int a=0; a < 25; a++) HardcoreEnderExpansion.fx.portalOrbiting(world,x,y + 1.63D + rand.nextDouble() * 0.6D,z,rand.nextDouble() * 0.045D + 0.015D);
world.playSound(x,y + 1.63D,z,""String_Node_Str"",1.2F,world.rand.nextFloat() * 0.05F + 0.85F,false);
break;
case ENDER_PEARL_FREEZE:
for (double xx=x - 5; xx <= x + 5; xx++) {
for (double yy=y - 5; yy <= y + 5; yy++) {
for (double zz=z - 5; zz <= z + 5; zz++) {
if (MathUtil.distance(xx - x,yy - y,zz - z) > 5D) continue;
for (int i=0; i < 2; ++i) world.spawnParticle(""String_Node_Str"",xx + rand.nextDouble() - 0.5D,yy,zz + rand.nextDouble() - 0.5D,0D,0D,0D);
}
}
}
world.playSound(x,y,z,""String_Node_Str"",1F,rand.nextFloat() * 0.1F + 0.9F,false);
break;
case IGNEOUS_ROCK_MELT:
for (int a=0; a < 40; a++) HardcoreEnderExpansion.fx.flame(player.worldObj,x + randCenter(1.25D),y + randCenter(1.25D),z + randCenter(1.25D),12 + rand.nextInt(9));
break;
case ENDERMAN_BLOODLUST_TRANSFORMATION:
for (int a=0; a < 20; a++) world.spawnParticle(""String_Node_Str"",x + randCenter(0.3D),y + rand.nextDouble() * 2.8D,z + randCenter(0.3D),0D,0D,0D);
break;
case LOUSE_ARMOR_HIT:
for (int a=0; a < 10; a++) world.spawnParticle(""String_Node_Str"",x + randCenter(0.4D),y + rand.nextDouble() * 0.45D,z + randCenter(0.4D),randCenter(0.2D),randCenter(0.2D),randCenter(0.2D));
break;
case HOMELAND_ENDERMAN_TP_OVERWORLD:
for (int a=0; a < 50; a++) {
HardcoreEnderExpansion.fx.omnipresent(""String_Node_Str"",world,x + randCenter(1D),y + rand.nextDouble() * 2.9,z + randCenter(1D),randCenter(0.1D),randCenter(0.05D),randCenter(0.1D));
}
for (int a=120 + rand.nextInt(30); a > 0; a--) {
HardcoreEnderExpansion.fx.omnipresent(""String_Node_Str"",world,x + randCenter(1D),y + rand.nextDouble() * rand.nextDouble() * 60D,z + randCenter(1D),randCenter(0.1D),randCenter(0.05D),randCenter(0.1D));
}
world.playSound(x,y + 1D,z,""String_Node_Str"",1F,1F,false);
break;
default :
}
}",0.954984360125119
34731,"public static void handleLine(World world,EntityClientPlayerMP player,FXType.Line fx,double x1,double y1,double z1,double x2,double y2,double z2){
  Vec3 lineVec=Vec3.createVectorHelper(x2 - x1,y2 - y1,z2 - z1);
  double len=lineVec.lengthVector();
  lineVec=lineVec.normalize();
  double addX, addY, addZ;
switch (fx) {
case CHARM_SLAUGHTER_IMPACT:
case CHARM_DAMAGE_REDIRECTION:
    addX=lineVec.xCoord * 0.5D;
  addY=lineVec.yCoord * 0.5D;
addZ=lineVec.zCoord * 0.5D;
float red=0F, green=0F, blue=0F;
if (fx == FXType.Line.CHARM_SLAUGHTER_IMPACT) {
red=1F;
green=0.25F;
blue=0.4F;
}
 else if (fx == FXType.Line.CHARM_DAMAGE_REDIRECTION) {
red=0.3F;
green=0.5F;
blue=1F;
}
for (int a=0; a < len * 2D; a++) {
for (int b=0; b < 3; b++) HardcoreEnderExpansion.fx.magicCrit(world,x1 + randCenter(0.4D),y1 + 0.2D + randCenter(0.4D),z1 + randCenter(0.4D),randCenter(0.1D),randCenter(0.1D),randCenter(0.1D),red,green,blue);
x1+=addX;
y1+=addY;
z1+=addZ;
}
break;
case DRAGON_EGG_TELEPORT:
addX=lineVec.xCoord * 0.25D;
addY=lineVec.yCoord * 0.25D;
addZ=lineVec.zCoord * 0.25D;
for (int a=0; a < 35; a++) world.spawnParticle(""String_Node_Str"",x1 + randCenter(0.8D),y1 + randCenter(0.8D),z1 + randCenter(0.8D),randCenter(0.01D),randCenter(0.01D),randCenter(0.01D));
for (int a=0; a < len * 4D; a++) {
for (int b=0; b < 4; b++) HardcoreEnderExpansion.fx.portalBig(world,x1,y1,z1,randCenter(0.01D),randCenter(0.01D),randCenter(0.01D),0.15F);
x1+=addX;
y1+=addY;
z1+=addZ;
}
world.playSound(x1,y1,z1,""String_Node_Str"",1.2F,1F,false);
break;
case LOUSE_HEAL_ENTITY:
addX=lineVec.xCoord * 0.125D;
addY=lineVec.yCoord * 0.125D;
addZ=lineVec.zCoord * 0.125D;
for (int a=0; a < len * 8D; a++) {
HardcoreEnderExpansion.fx.aura(world,x1 + randCenter(0.1D),y1 + randCenter(0.1D),z1 + randCenter(0.1D),0F,0.7F,0F,20 + rand.nextInt(20));
x1+=addX;
y1+=addY;
z1+=addZ;
}
break;
case ENDERMAN_TELEPORT:
for (int a=0, particleAmt=128; a < particleAmt; a++) {
double linePosition=a / (particleAmt - 1D);
double particleX=x1 + (x2 - x1) * linePosition + (rand.nextDouble() - 0.5D) * 1.2D;
double particleY=y1 + (y2 - y1) * linePosition + rand.nextDouble() * 2.9D;
double particleZ=z1 + (z2 - z1) * linePosition + (rand.nextDouble() - 0.5D) * 1.2D;
world.spawnParticle(""String_Node_Str"",particleX,particleY,particleZ,(rand.nextFloat() - 0.5F) * 0.2F,(rand.nextFloat() - 0.5F) * 0.2F,(rand.nextFloat() - 0.5F) * 0.2F);
}
world.playSound(x1,y1,z1,""String_Node_Str"",1F,1F,false);
world.playSound(x2,y2,z2,""String_Node_Str"",1F,1F,false);
break;
case HOMELAND_ENDERMAN_GUARD_CALL:
addX=lineVec.xCoord * 0.25D;
addY=lineVec.yCoord * 0.25D;
addZ=lineVec.zCoord * 0.25D;
HomelandRole role=HomelandRole.GUARD;
for (int a=0; a < len * 4D; a++) {
HardcoreEnderExpansion.fx.portalColor(world,x1 + randCenter(0.25D),y1 + randCenter(0.25D),z1 + randCenter(0.25D),randCenter(1D),-rand.nextDouble(),randCenter(1D),role.red,role.green,role.blue);
x1+=addX;
y1+=addY;
z1+=addZ;
}
break;
}
}","public static void handleLine(World world,EntityClientPlayerMP player,FXType.Line fx,double x1,double y1,double z1,double x2,double y2,double z2){
  Vec3 lineVec=Vec3.createVectorHelper(x2 - x1,y2 - y1,z2 - z1);
  double len=lineVec.lengthVector();
  lineVec=lineVec.normalize();
  double addX, addY, addZ;
switch (fx) {
case CHARM_SLAUGHTER_IMPACT:
case CHARM_DAMAGE_REDIRECTION:
    addX=lineVec.xCoord * 0.5D;
  addY=lineVec.yCoord * 0.5D;
addZ=lineVec.zCoord * 0.5D;
float red=0F, green=0F, blue=0F;
if (fx == FXType.Line.CHARM_SLAUGHTER_IMPACT) {
red=1F;
green=0.25F;
blue=0.4F;
}
 else if (fx == FXType.Line.CHARM_DAMAGE_REDIRECTION) {
red=0.3F;
green=0.5F;
blue=1F;
}
for (int a=0; a < len * 2D; a++) {
for (int b=0; b < 3; b++) HardcoreEnderExpansion.fx.magicCrit(world,x1 + randCenter(0.4D),y1 + 0.2D + randCenter(0.4D),z1 + randCenter(0.4D),randCenter(0.1D),randCenter(0.1D),randCenter(0.1D),red,green,blue);
x1+=addX;
y1+=addY;
z1+=addZ;
}
break;
case DRAGON_EGG_TELEPORT:
addX=lineVec.xCoord * 0.25D;
addY=lineVec.yCoord * 0.25D;
addZ=lineVec.zCoord * 0.25D;
for (int a=0; a < 35; a++) world.spawnParticle(""String_Node_Str"",x1 + randCenter(0.8D),y1 + randCenter(0.8D),z1 + randCenter(0.8D),randCenter(0.01D),randCenter(0.01D),randCenter(0.01D));
for (int a=0; a < len * 4D; a++) {
for (int b=0; b < 4; b++) HardcoreEnderExpansion.fx.portalBig(world,x1,y1,z1,randCenter(0.01D),randCenter(0.01D),randCenter(0.01D),0.15F);
x1+=addX;
y1+=addY;
z1+=addZ;
}
world.playSound(x1,y1,z1,""String_Node_Str"",1.2F,1F,false);
break;
case LOUSE_HEAL_ENTITY:
addX=lineVec.xCoord * 0.125D;
addY=lineVec.yCoord * 0.125D;
addZ=lineVec.zCoord * 0.125D;
for (int a=0; a < len * 8D; a++) {
HardcoreEnderExpansion.fx.aura(world,x1 + randCenter(0.1D),y1 + randCenter(0.1D),z1 + randCenter(0.1D),0F,0.7F,0F,20 + rand.nextInt(20));
x1+=addX;
y1+=addY;
z1+=addZ;
}
break;
case ENDERMAN_TELEPORT:
for (int a=0, particleAmt=128; a < particleAmt; a++) {
double linePosition=a / (particleAmt - 1D);
double particleX=x1 + (x2 - x1) * linePosition + (rand.nextDouble() - 0.5D) * 1.2D;
double particleY=y1 + (y2 - y1) * linePosition + rand.nextDouble() * 2.9D;
double particleZ=z1 + (z2 - z1) * linePosition + (rand.nextDouble() - 0.5D) * 1.2D;
world.spawnParticle(""String_Node_Str"",particleX,particleY,particleZ,(rand.nextFloat() - 0.5F) * 0.2F,(rand.nextFloat() - 0.5F) * 0.2F,(rand.nextFloat() - 0.5F) * 0.2F);
}
world.playSound(x1,y1,z1,""String_Node_Str"",1F,1F,false);
world.playSound(x2,y2,z2,""String_Node_Str"",1F,1F,false);
break;
case HOMELAND_ENDERMAN_GUARD_CALL:
addX=lineVec.xCoord * 0.25D;
addY=lineVec.yCoord * 0.25D;
addZ=lineVec.zCoord * 0.25D;
HomelandRole role=HomelandRole.GUARD;
for (int a=0; a < len * 4D; a++) {
if (rand.nextBoolean()) HardcoreEnderExpansion.fx.portalColor(world,x1 + randCenter(0.25D),y1 + randCenter(0.25D),z1 + randCenter(0.25D),randCenter(1D),-rand.nextDouble(),randCenter(1D),role.red,role.green,role.blue);
x1+=addX;
y1+=addY;
z1+=addZ;
}
break;
}
}",0.9959418329387894
34732,"private boolean teleportTo(double x,double y,double z,boolean ignoreChecks){
  if (prevTeleportAttempt != null)   return prevTeleportAttempt.booleanValue();
 else   if (!(prevTeleportAttempt=Boolean.valueOf(canTeleport())))   return false;
  double oldX=posX, oldY=posY, oldZ=posZ;
  posX=x;
  posY=y;
  posZ=z;
  boolean hasTeleported=false;
  int ix=MathHelper.floor_double(posX), iy=MathHelper.floor_double(posY), iz=MathHelper.floor_double(posZ);
  if (worldObj.blockExists(ix,iy,iz)) {
    boolean foundTopBlock=ignoreChecks;
    while (!foundTopBlock && iy > 0) {
      if (worldObj.getBlock(ix,iy - 1,iz).getMaterial().blocksMovement())       foundTopBlock=true;
 else {
        --posY;
        --iy;
      }
    }
    if (foundTopBlock) {
      setPosition(posX,posY,posZ);
      if ((worldObj.getCollidingBoundingBoxes(this,boundingBox).isEmpty() && !worldObj.isAnyLiquid(boundingBox)) || ignoreChecks) {
        hasTeleported=true;
      }
    }
  }
  if (!hasTeleported) {
    setPosition(oldX,oldY,oldZ);
    return false;
  }
 else {
    if (!worldObj.isRemote)     PacketPipeline.sendToAllAround(this,256D,new C22EffectLine(FXType.Line.ENDERMAN_TELEPORT,oldX,oldY,oldZ,posX,posY,posZ));
    return true;
  }
}","private boolean teleportTo(double x,double y,double z,boolean ignoreChecks){
  if (prevTeleportAttempt != null)   return prevTeleportAttempt.booleanValue();
 else   if (!(prevTeleportAttempt=Boolean.valueOf(canTeleport())))   return false;
  double oldX=posX, oldY=posY, oldZ=posZ;
  posX=x;
  posY=y;
  posZ=z;
  boolean hasTeleported=false;
  int ix=MathHelper.floor_double(posX), iy=MathHelper.floor_double(posY), iz=MathHelper.floor_double(posZ);
  if (worldObj.blockExists(ix,iy,iz) || ignoreChecks) {
    boolean foundTopBlock=ignoreChecks;
    while (!foundTopBlock && iy > 0) {
      if (worldObj.getBlock(ix,iy - 1,iz).getMaterial().blocksMovement())       foundTopBlock=true;
 else {
        --posY;
        --iy;
      }
    }
    if (foundTopBlock) {
      setPosition(posX,posY,posZ);
      if ((worldObj.getCollidingBoundingBoxes(this,boundingBox).isEmpty() && !worldObj.isAnyLiquid(boundingBox)) || ignoreChecks) {
        hasTeleported=true;
      }
    }
  }
  if (!hasTeleported) {
    setPosition(oldX,oldY,oldZ);
    return false;
  }
 else {
    if (!worldObj.isRemote && !ignoreChecks)     PacketPipeline.sendToAllAround(this,256D,new C22EffectLine(FXType.Line.ENDERMAN_TELEPORT,oldX,oldY,oldZ,posX,posY,posZ));
    return true;
  }
}",0.9866881807180314
34733,"@Override public boolean attackEntityFrom(DamageSource source,float amount){
  if (isEntityInvulnerable())   return false;
  attackedRecentlyTimer=120;
  if (worldObj.difficultySetting == EnumDifficulty.PEACEFUL && source.getEntity() instanceof EntityPlayer) {
    if (super.attackEntityFrom(DamageSource.generic,amount)) {
      double diffX=source.getEntity().posX - posX, diffZ=source.getEntity().posZ - posZ;
      while (diffX * diffX + diffZ * diffZ < 1E-4D) {
        diffX=(Math.random() - Math.random()) * 0.01D;
        diffZ=(Math.random() - Math.random()) * 0.01D;
      }
      attackedAtYaw=(float)(Math.atan2(diffZ,diffX) * 180D / Math.PI) - rotationYaw;
      knockBack(source.getEntity(),amount,diffX,diffZ);
      if (homelandRole == HomelandRole.ISLAND_LEADERS || homelandRole == HomelandRole.GUARD || rand.nextInt(3) == 0) {
        for (int attempt=0; attempt < 10; attempt++) {
          if (teleportRandomly())           break;
        }
      }
      return true;
    }
 else     return false;
  }
  if (source.getEntity() instanceof EntityPlayer || source.getEntity() instanceof EntityMobHomelandEnderman) {
    boolean callGuards=entityToAttack == null || rand.nextInt(4) == 0;
    setTarget(source.getEntity());
    setScreaming(true);
    if (callGuards) {
      float guardPerc=0F, guardDist=0F;
switch (homelandRole) {
case ISLAND_LEADERS:
        guardPerc=0.95F;
      guardDist=260F;
    break;
case GUARD:
  guardPerc=0.4F;
guardDist=100F;
break;
case WORKER:
guardPerc=rand.nextFloat() * 0.2F;
guardDist=30F;
break;
case BUSINESSMAN:
case INTELLIGENCE:
guardPerc=0.1F + rand.nextFloat() * 0.15F;
guardDist=60F;
break;
case COLLECTOR:
case OVERWORLD_EXPLORER:
guardPerc=0.2F + rand.nextFloat() * 0.1F;
guardDist=80F;
break;
default :
}
guardPerc*=0.7F + rand.nextFloat() * 0.3F;
List<EntityMobHomelandEnderman> list=worldObj.getEntitiesWithinAABB(EntityMobHomelandEnderman.class,boundingBox.expand(guardDist,128D,guardDist));
for (Iterator<EntityMobHomelandEnderman> iter=list.iterator(); iter.hasNext(); ) {
if (iter.next().homelandRole != HomelandRole.GUARD) iter.remove();
}
for (int a=0, amt=Math.max(2,Math.round(list.size() * guardPerc)); a < amt && !list.isEmpty(); a++) {
EntityMobHomelandEnderman guard=list.remove(rand.nextInt(list.size()));
guard.setTarget(source.getEntity());
guard.setScreaming(true);
PacketPipeline.sendToAllAround(this,256D,new C22EffectLine(FXType.Line.HOMELAND_ENDERMAN_GUARD_CALL,this,guard));
}
}
}
 else if (source instanceof EntityDamageSourceIndirect) {
for (int attempt=0; attempt < 64; attempt++) {
if (teleportRandomly()) {
setTarget(null);
setScreaming(false);
return true;
}
}
}
return super.attackEntityFrom(source,amount);
}","@Override public boolean attackEntityFrom(DamageSource source,float amount){
  if (isEntityInvulnerable())   return false;
  attackedRecentlyTimer=120;
  if (worldObj.isRemote)   return super.attackEntityFrom(source,amount);
  if (worldObj.difficultySetting == EnumDifficulty.PEACEFUL && source.getEntity() instanceof EntityPlayer) {
    if (super.attackEntityFrom(DamageSource.generic,amount)) {
      double diffX=source.getEntity().posX - posX, diffZ=source.getEntity().posZ - posZ;
      while (diffX * diffX + diffZ * diffZ < 1E-4D) {
        diffX=(Math.random() - Math.random()) * 0.01D;
        diffZ=(Math.random() - Math.random()) * 0.01D;
      }
      attackedAtYaw=(float)(Math.atan2(diffZ,diffX) * 180D / Math.PI) - rotationYaw;
      knockBack(source.getEntity(),amount,diffX,diffZ);
      if (homelandRole == HomelandRole.ISLAND_LEADERS || homelandRole == HomelandRole.GUARD || rand.nextInt(3) == 0) {
        for (int attempt=0; attempt < 10; attempt++) {
          if (teleportRandomly())           break;
        }
      }
      return true;
    }
 else     return false;
  }
  if (source.getEntity() instanceof EntityPlayer || source.getEntity() instanceof EntityMobHomelandEnderman) {
    boolean callGuards=entityToAttack == null || rand.nextInt(4) == 0;
    setTarget(source.getEntity());
    setScreaming(true);
    if (callGuards) {
      float guardPerc=0F, guardDist=0F;
switch (homelandRole) {
case ISLAND_LEADERS:
        guardPerc=0.95F;
      guardDist=260F;
    break;
case GUARD:
  guardPerc=0.4F;
guardDist=100F;
break;
case WORKER:
guardPerc=rand.nextFloat() * 0.2F;
guardDist=30F;
break;
case BUSINESSMAN:
case INTELLIGENCE:
guardPerc=0.1F + rand.nextFloat() * 0.15F;
guardDist=60F;
break;
case COLLECTOR:
case OVERWORLD_EXPLORER:
guardPerc=0.2F + rand.nextFloat() * 0.1F;
guardDist=80F;
break;
default :
}
guardPerc*=0.7F + rand.nextFloat() * 0.3F;
List<EntityMobHomelandEnderman> list=worldObj.getEntitiesWithinAABB(EntityMobHomelandEnderman.class,boundingBox.expand(guardDist,128D,guardDist));
for (Iterator<EntityMobHomelandEnderman> iter=list.iterator(); iter.hasNext(); ) {
if (iter.next().homelandRole != HomelandRole.GUARD) iter.remove();
}
for (int a=0, amt=Math.max(2,Math.round(list.size() * guardPerc)); a < amt && !list.isEmpty(); a++) {
EntityMobHomelandEnderman guard=list.remove(rand.nextInt(list.size()));
guard.teleportToEntity(source.getEntity());
guard.setTarget(source.getEntity());
guard.setScreaming(true);
PacketPipeline.sendToAllAround(this,256D,new C22EffectLine(FXType.Line.HOMELAND_ENDERMAN_GUARD_CALL,this,guard));
}
}
}
 else if (source instanceof EntityDamageSourceIndirect) {
for (int attempt=0; attempt < 64; attempt++) {
if (teleportRandomly()) {
setTarget(null);
setScreaming(false);
return true;
}
}
}
return super.attackEntityFrom(source,amount);
}",0.9788235294117648
34734,"@Override public void onLivingUpdate(){
  entityAge=0;
  if (worldObj.isRemote) {
    refreshRoles();
    int chance=1 + (int)Math.floor(HardcoreEnderExpansion.proxy.getClientSidePlayer().getDistanceToEntity(this) / 20F);
    if (rand.nextInt(chance) == 0) {
      float colFactor=rand.nextFloat() * 0.6F + 0.4F;
      HardcoreEnderExpansion.fx.portalColor(worldObj,posX + (rand.nextDouble() - 0.5D) * width,posY + rand.nextDouble() * height - 0.25D,posZ + (rand.nextDouble() - 0.5D) * width,(rand.nextDouble() - 0.5D) * 2D,-rand.nextDouble(),(rand.nextDouble() - 0.5D) * 2D,colFactor * 0.9F,colFactor * 0.3F,colFactor);
      if (homelandRole != null && rand.nextInt(3) == 0) {
        HardcoreEnderExpansion.fx.portalColor(worldObj,posX + (rand.nextDouble() - 0.5D) * width,posY + rand.nextDouble() * height - 0.25D,posZ + (rand.nextDouble() - 0.5D) * width,(rand.nextDouble() - 0.5D) * 2D,-rand.nextDouble(),(rand.nextDouble() - 0.5D) * 2D,homelandRole.red,homelandRole.green,homelandRole.blue);
      }
      if (overtakeGroupRole != null && rand.nextInt(7) == 0) {
        HardcoreEnderExpansion.fx.portalColor(worldObj,posX + (rand.nextDouble() - 0.5D) * width,posY + rand.nextDouble() * height - 0.25D,posZ + (rand.nextDouble() - 0.5D) * width,(rand.nextDouble() - 0.5D) * 2D,-rand.nextDouble(),(rand.nextDouble() - 0.5D) * 2D,0.3F,0.3F,0.3F);
      }
    }
  }
 else   if (isEntityAlive()) {
    if (isWet())     attackEntityFrom(DamageSource.drown,1F);
    if (isWet() || isBurning()) {
      setTarget(null);
      setScreaming(false);
    }
    if (!onGround && ++fallTimer > 17 + rand.nextInt(15)) {
      fallTimer=0;
      for (int attempt=0; attempt < 500; attempt++) {
        if (teleportRandomly(48D)) {
          resetTask();
          break;
        }
      }
    }
    prevTeleportAttempt=null;
    if (attackedRecentlyTimer > 0)     attackedRecentlyTimer-=rand.nextInt(2);
    long overtakeGroup=HomelandEndermen.getOvertakeGroup(this);
    if (currentTask == EndermanTask.WAIT || currentTask == EndermanTask.GET_TNT) {
      moveForward=moveStrafing=0F;
      fallDistance=0F;
      fallTimer=0;
      posY=10000D;
      if (--currentTaskTimer == 0) {
        int tpX, tpY, tpZ;
        for (int attempt=0; attempt < 100; attempt++) {
          tpX=(int)Math.floor(posX) + rand.nextInt(41) - 20;
          tpZ=(int)Math.floor(posZ) + rand.nextInt(41) - 20;
          tpY=worldObj.getTopSolidOrLiquidBlock(tpX,tpZ) - 1;
          if (worldObj.getBlock(tpX,tpY,tpZ) == BlockList.end_terrain) {
            teleportTo(tpX + 0.3D + rand.nextDouble() * 0.4D,tpY + 1D,tpZ + 0.3D + rand.nextDouble() * 0.4D,true);
            PacketPipeline.sendToAllAround(this,256D,new C20Effect(FXType.Basic.HOMELAND_ENDERMAN_TP_OVERWORLD,this));
            if (overtakeGroupRole == OvertakeGroupRole.CHAOSMAKER) {
              setCarrying(new ItemStack(Blocks.tnt));
            }
 else             if (homelandRole == HomelandRole.COLLECTOR && rand.nextInt(4) != 0) {
              setCarrying(new ItemStack(endermanBlockList[rand.nextInt(endermanBlockList.length)]));
            }
            break;
          }
        }
        resetTask();
      }
    }
    if (overtakeGroup == -1) {
      if (currentTask != EndermanTask.NONE && currentTask != EndermanTask.WAIT) {
        --currentTaskTimer;
        if (currentTask == EndermanTask.LISTEN_TO_RECRUITER || currentTask == EndermanTask.RECRUIT_TO_GROUP) {
          moveForward=moveStrafing=0F;
          if (currentTaskTimer == 0 && currentTask == EndermanTask.RECRUIT_TO_GROUP) {
            int chance=50, reportChance=10;
            EntityMobHomelandEnderman target=(EntityMobHomelandEnderman)currentTaskData;
switch (target.homelandRole) {
case WORKER:
              chance=30;
            break;
case GUARD:
          chance=15;
        reportChance=35;
      break;
case INTELLIGENCE:
    chance=80;
  reportChance=22;
break;
case BUSINESSMAN:
chance=40;
reportChance=14;
break;
default :
}
if (rand.nextInt(100) < chance) {
target.setGroupMember(groupId,OvertakeGroupRole.getRandomMember(rand));
PacketPipeline.sendToAllAround(this,64D,new C21EffectEntity(FXType.Entity.HOMELAND_ENDERMAN_RECRUIT,this));
PacketPipeline.sendToAllAround(this,64D,new C21EffectEntity(FXType.Entity.HOMELAND_ENDERMAN_RECRUIT,target));
for (int attempt=0; attempt < 50; attempt++) {
if (teleportRandomly()) break;
}
}
 else if (rand.nextInt(100) < reportChance) {
boolean escaped=false;
double oldX=posX, oldY=posY, oldZ=posZ;
if (rand.nextInt(5) != 0) {
for (int attempt=0; attempt < 20; attempt++) {
if (teleportRandomly()) {
escaped=true;
break;
}
}
}
List<EntityMobHomelandEnderman> guards=HomelandEndermen.getByHomelandRole(this,HomelandRole.GUARD);
for (int a=0, amt=Math.max(3,(int)Math.round(guards.size() * 0.3D)); a < amt; a++) {
EntityMobHomelandEnderman guard=guards.get(rand.nextInt(guards.size()));
guard.setScreaming(true);
PacketPipeline.sendToAllAround(this,256D,new C22EffectLine(FXType.Line.HOMELAND_ENDERMAN_GUARD_CALL,target,guard));
if (!escaped) guard.setTarget(this);
 else if (rand.nextInt(4) != 0) guard.teleportTo(oldX + 4D * (rand.nextDouble() - 0.5D),oldY + 2D + rand.nextDouble() * 4D,oldZ + 4D * (rand.nextDouble() - 0.5D));
}
}
recruitCooldown=120;
}
}
 else if (currentTask == EndermanTask.STROLL) {
if (currentTaskTimer > 0 && currentTaskTimer < 20 && rand.nextInt(3) == 0) {
Vec3 obj=(Vec3)currentTaskData;
if ((obj.distanceTo(Vec3.createVectorHelper(posX,posY,posZ)) <= 0.5D || rand.nextInt(10) == 0) && randomTpTimer > 30) {
for (int attempt=0; attempt < 30; attempt++) {
if (teleportRandomly(48D)) {
currentTaskData=Vec3.createVectorHelper(posX,posY,posZ);
randomTpTimer-=40 + rand.nextInt(30);
break;
}
}
}
}
if (currentTaskTimer == 0 && rand.nextInt(5) == 0) {
currentTaskTimer=10 + rand.nextInt(60);
}
}
 else if (currentTask == EndermanTask.WALK) {
ChunkPosition pos=(ChunkPosition)currentTaskData;
if (MathUtil.distance(posX - pos.chunkPosX,posY - pos.chunkPosY,posZ - pos.chunkPosZ) < 3D) resetTask();
}
 else if (currentTask == EndermanTask.COMMUNICATE) {
moveForward=moveStrafing=0F;
}
if (currentTaskTimer <= 0) resetTask();
}
 else if (entityToAttack == null) {
if (groupId != -1 && rand.nextInt(400) == 0 && (recruitCooldown < -120 || --recruitCooldown < -120)) {
List<EntityMobHomelandEnderman> total=HomelandEndermen.getAll(this);
int groupAmt=HomelandEndermen.getInSameGroup(this).size();
int totalAmt=total.size();
if (totalAmt > 8 && (rand.nextInt(5) <= 2 || groupAmt < (totalAmt >> 2) + rand.nextInt(totalAmt >> 3) - rand.nextInt(4))) {
for (int attempt=0; attempt < 5; attempt++) {
EntityMobHomelandEnderman enderman=total.get(rand.nextInt(totalAmt));
if (enderman == this || enderman.groupId != -1 || !enderman.onGround || enderman.homelandRole == HomelandRole.ISLAND_LEADERS || enderman.getDistanceToEntity(this) > 80D) continue;
if (groupAmt > 3 && ((enderman.homelandRole == HomelandRole.GUARD || enderman.homelandRole == HomelandRole.WORKER) && rand.nextInt(5) != 0)) continue;
boolean tp=false;
for (int tpAttempt=0; tpAttempt < 30; tpAttempt++) {
if (teleportTo(enderman.posX + (rand.nextDouble() - 0.5D) * 2D,enderman.posY,enderman.posZ + (rand.nextDouble() - 0.5D) * 2D)) {
tp=true;
break;
}
}
if (!tp) continue;
currentTask=EndermanTask.RECRUIT_TO_GROUP;
currentTaskData=enderman;
enderman.currentTask=EndermanTask.LISTEN_TO_RECRUITER;
enderman.currentTaskTimer=currentTaskTimer=20 + rand.nextInt(60);
break;
}
}
}
if (currentTask == EndermanTask.NONE && rand.nextInt(80) == 0) {
switch (homelandRole) {
case ISLAND_LEADERS:
if (rand.nextInt(13) == 0) {
teleportRandomly();
}
 else {
Vec3 look=getLookVec();
for (int attempt=0, pathX, pathY, pathZ; attempt < 12; attempt++) {
if (attempt > 8 || rand.nextInt(6) == 0) look=Vec3.createVectorHelper(rand.nextDouble() - 0.5D,0D,rand.nextDouble() - 0.5D).normalize();
pathX=(int)(posX + look.xCoord * 16D + (rand.nextDouble() - 0.5D) * 5D);
pathZ=(int)(posZ + look.zCoord * 16D + (rand.nextDouble() - 0.5D) * 5D);
pathY=worldObj.getTopSolidOrLiquidBlock(pathX,pathZ) - 1;
if (worldObj.getBlock(pathX,pathY,pathZ) == BlockList.end_terrain && MathUtil.distance(posX - pathX,posY - pathY,posZ - pathZ) > 5D) {
setPathToEntity(worldObj.getEntityPathToXYZ(this,pathX,pathY + 1,pathZ,30F,true,false,false,true));
currentTask=EndermanTask.STROLL;
currentTaskTimer=65 + rand.nextInt(60);
currentTaskData=Vec3.createVectorHelper(posX,posY,posZ);
break;
}
}
}
break;
case BUSINESSMAN:
if (rand.nextInt(18) == 0) {
List<EntityMobHomelandEnderman> businessmen=HomelandEndermen.getByHomelandRole(this,HomelandRole.BUSINESSMAN);
if (!businessmen.isEmpty()) {
EntityMobHomelandEnderman enderman=businessmen.get(rand.nextInt(businessmen.size()));
if (enderman.currentTask == EndermanTask.NONE) {
for (int tpAttempt=0; tpAttempt < 20; tpAttempt++) {
if (teleportTo(enderman.posX + (rand.nextDouble() - 0.5D) * 2D,enderman.posY,enderman.posZ + (rand.nextDouble() - 0.5D) * 2D)) {
currentTask=enderman.currentTask=EndermanTask.COMMUNICATE;
currentTaskTimer=enderman.currentTaskTimer=30 + rand.nextInt(50 + rand.nextInt(80));
break;
}
}
}
}
}
 else if (rand.nextInt(10) == 0) {
int walkToX, walkToY, walkToZ;
for (int attempt=0; attempt < 10; attempt++) {
walkToX=(int)posX + rand.nextInt(251) - 125;
walkToZ=(int)posZ + rand.nextInt(251) - 125;
walkToY=worldObj.getTopSolidOrLiquidBlock(walkToX,walkToZ) - 1;
if (worldObj.getBlock(walkToX,walkToY,walkToZ) == BlockList.end_terrain) {
setPathToEntity(worldObj.getEntityPathToXYZ(this,walkToX,walkToY + 1,walkToZ,100F,true,false,false,true));
currentTask=EndermanTask.WALK;
currentTaskTimer=200 + rand.nextInt(100);
currentTaskData=new ChunkPosition(walkToX,walkToY,walkToZ);
break;
}
}
}
break;
case WORKER:
if (rand.nextInt(270) == 0 && worldObj.getBlock((int)Math.floor(posX),(int)Math.floor(posY) + 1,(int)Math.floor(posZ)) != BlockList.ender_goo) {
for (int attempt=0, tpX, tpY, tpZ; attempt < 50; attempt++) {
tpX=(int)posX + rand.nextInt(71) - 35;
tpZ=(int)posZ + rand.nextInt(71) - 35;
tpY=worldObj.getTopSolidOrLiquidBlock(tpX,tpZ) - 1;
if (worldObj.getBlock(tpX,tpY,tpZ) == BlockList.ender_goo) {
teleportTo(tpX + 0.5D + (rand.nextDouble() - 0.5D) * 0.3D,tpY + 1D,tpZ + 0.5D + (rand.nextDouble() - 0.5D) * 0.3D,true);
break;
}
}
}
break;
case COLLECTOR:
if (rand.nextInt(50) == 0 && (!isCarrying() || rand.nextInt(4) == 0)) {
currentTask=EndermanTask.WAIT;
currentTaskTimer=150 + rand.nextInt(600 + rand.nextInt(1800));
setCarrying(null);
teleportTo(posX,10000D,posZ,true);
PacketPipeline.sendToAllAround(this,256D,new C20Effect(FXType.Basic.HOMELAND_ENDERMAN_TP_OVERWORLD,this));
}
break;
case OVERWORLD_EXPLORER:
if (rand.nextInt(200) == 0) {
currentTask=EndermanTask.WAIT;
currentTaskTimer=500 + rand.nextInt(800) + rand.nextInt(1000) * (1 + rand.nextInt(4));
List<EntityMobHomelandEnderman> explorers=HomelandEndermen.getByHomelandRole(this,HomelandRole.OVERWORLD_EXPLORER);
for (int a=0; a < 1 + rand.nextInt(7) && !explorers.isEmpty(); a++) {
if (rand.nextInt(3) == 0) break;
EntityMobHomelandEnderman enderman=explorers.remove(rand.nextInt(explorers.size()));
if (enderman == this) continue;
enderman.currentTask=EndermanTask.WAIT;
enderman.currentTaskTimer=currentTaskTimer + rand.nextInt(500);
enderman.teleportTo(enderman.posX,10000D,enderman.posZ,true);
PacketPipeline.sendToAllAround(this,256D,new C20Effect(FXType.Basic.HOMELAND_ENDERMAN_TP_OVERWORLD,enderman));
}
teleportTo(posX,10000D,posZ,true);
PacketPipeline.sendToAllAround(this,256D,new C20Effect(FXType.Basic.HOMELAND_ENDERMAN_TP_OVERWORLD,this));
}
break;
default :
}
}
}
}
if (overtakeGroup != -1) {
if (overtakeGroup == groupId) {
if (currentTask == EndermanTask.NONE) {
switch (overtakeGroupRole) {
case TELEPORTER:
if (rand.nextInt(8) == 0) teleportRandomly(12D);
break;
case CHAOSMAKER:
if (isCarrying() && getCarrying().getItem() == Item.getItemFromBlock(Blocks.tnt)) {
if (rand.nextInt(50) == 0) {
for (int attempt=0, xx, yy, zz; attempt < 30; attempt++) {
xx=(int)Math.floor(posX) + rand.nextInt(7) - 3;
yy=(int)Math.floor(posY) + rand.nextInt(3) - 1;
zz=(int)Math.floor(posZ) + rand.nextInt(7) - 3;
if (worldObj.getBlock(xx,yy,zz) == BlockList.end_terrain && worldObj.isAirBlock(xx,yy + 1,zz)) {
worldObj.spawnEntityInWorld(new EntityTNTPrimed(worldObj,xx + 0.5D,yy + 1.5D,zz + 0.5D,this));
setCarrying(null);
break;
}
}
}
}
 else {
currentTask=EndermanTask.GET_TNT;
currentTaskTimer=30 + rand.nextInt(80);
setPosition(posX,10000D,posZ);
PacketPipeline.sendToAllAround(this,256D,new C20Effect(FXType.Basic.HOMELAND_ENDERMAN_TP_OVERWORLD,this));
}
break;
case LEADER:
case FIGHTER:
if (!(entityToAttack instanceof EntityMobHomelandEnderman)) {
EntityMobHomelandEnderman target=null;
if (overtakeGroupRole == OvertakeGroupRole.LEADER || rand.nextInt(4) == 0) {
List<EntityMobHomelandEnderman> list=HomelandEndermen.getByHomelandRole(this,HomelandRole.ISLAND_LEADERS);
if (!list.isEmpty()) target=list.get(rand.nextInt(list.size()));
}
if (target == null) {
List<EntityMobHomelandEnderman> other=HomelandEndermen.getAll(this);
for (int attempt=0, size=other.size(); attempt < 10; attempt++) {
EntityMobHomelandEnderman potentialTarget=other.get(rand.nextInt(size));
if (potentialTarget == this || potentialTarget.isInSameGroup(this)) continue;
HomelandRole role=potentialTarget.homelandRole;
if (role == HomelandRole.GUARD && rand.nextInt(3) != 0) target=potentialTarget;
 else if (role != HomelandRole.WORKER || rand.nextInt(5) <= 1) target=potentialTarget;
break;
}
}
setTarget(target);
}
break;
default :
}
}
if (!worldObj.getEntitiesWithinAABB(EntityTNTPrimed.class,boundingBox.expand(5D,3D,5D)).isEmpty()) teleportRandomly();
}
 else if (groupId != -1) {
if (rand.nextInt(3) == 0) setGroupMember(overtakeGroup,OvertakeGroupRole.getRandomMember(rand));
 else setGroupMember(-1,null);
}
 else if (entityToAttack == null && ((homelandRole == HomelandRole.GUARD && rand.nextInt(30) == 0) || rand.nextInt(200) == 0)) {
List<EntityMobHomelandEnderman> all=HomelandEndermen.getAll(this);
for (int attempt=0; attempt < 4 && !all.isEmpty(); attempt++) {
EntityMobHomelandEnderman enderman=all.remove(rand.nextInt(all.size()));
if (enderman.groupId == overtakeGroup) {
setTarget(enderman);
break;
}
}
}
}
if (entityToAttack != null) {
++attackTpTimer;
if (((attackTpTimer > 50 + rand.nextInt(30) && rand.nextInt(20) == 0) || attackTpTimer > 120) && entityToAttack.getDistanceSqToEntity(this) < 16D) {
teleportRandomly(8D);
attackTpTimer=-80;
}
 else if (entityToAttack.getDistanceSqToEntity(this) > 256D && attackTpTimer > 30 && teleportToEntity(entityToAttack)) {
attackTpTimer=-80;
}
}
 else {
attackTpTimer=-80;
if (currentTask == EndermanTask.NONE && entityToAttack == null && ++randomTpTimer > 70 + rand.nextInt(50)) {
if (rand.nextInt(19) == 0) {
for (int attempt=0; attempt < 5; attempt++) {
if (teleportRandomly(10D)) break;
}
}
randomTpTimer-=110 + rand.nextInt(40);
}
if (screamTimer > 0 && --screamTimer == 0 && isScreaming()) setScreaming(false);
}
if (lastEntityToAttack != entityToAttack) {
IAttributeInstance attribute=getEntityAttribute(SharedMonsterAttributes.movementSpeed);
attribute.removeModifier(attackingSpeedBoostModifier);
if (entityToAttack != null) attribute.applyModifier(attackingSpeedBoostModifier);
lastEntityToAttack=entityToAttack;
}
}
isJumping=false;
if (entityToAttack != null) faceEntity(entityToAttack,100F,100F);
super.onLivingUpdate();
}","@Override public void onLivingUpdate(){
  entityAge=0;
  if (worldObj.isRemote) {
    refreshRoles();
    int chance=1 + (int)Math.floor(HardcoreEnderExpansion.proxy.getClientSidePlayer().getDistanceToEntity(this) / 20F);
    if (rand.nextInt(chance) == 0) {
      float colFactor=rand.nextFloat() * 0.6F + 0.4F;
      HardcoreEnderExpansion.fx.portalColor(worldObj,posX + (rand.nextDouble() - 0.5D) * width,posY + rand.nextDouble() * height - 0.25D,posZ + (rand.nextDouble() - 0.5D) * width,(rand.nextDouble() - 0.5D) * 2D,-rand.nextDouble(),(rand.nextDouble() - 0.5D) * 2D,colFactor * 0.9F,colFactor * 0.3F,colFactor);
      if (homelandRole != null && rand.nextInt(3) == 0) {
        HardcoreEnderExpansion.fx.portalColor(worldObj,posX + (rand.nextDouble() - 0.5D) * width,posY + rand.nextDouble() * height - 0.25D,posZ + (rand.nextDouble() - 0.5D) * width,(rand.nextDouble() - 0.5D) * 2D,-rand.nextDouble(),(rand.nextDouble() - 0.5D) * 2D,homelandRole.red,homelandRole.green,homelandRole.blue);
      }
      if (overtakeGroupRole != null && rand.nextInt(7) == 0) {
        HardcoreEnderExpansion.fx.portalColor(worldObj,posX + (rand.nextDouble() - 0.5D) * width,posY + rand.nextDouble() * height - 0.25D,posZ + (rand.nextDouble() - 0.5D) * width,(rand.nextDouble() - 0.5D) * 2D,-rand.nextDouble(),(rand.nextDouble() - 0.5D) * 2D,0.3F,0.3F,0.3F);
      }
    }
  }
 else   if (isEntityAlive()) {
    if (isWet())     attackEntityFrom(DamageSource.drown,1F);
    if (isWet() || isBurning()) {
      setTarget(null);
      setScreaming(false);
    }
    if (!onGround && ++fallTimer > 17 + rand.nextInt(15)) {
      fallTimer=0;
      for (int attempt=0; attempt < 500; attempt++) {
        if (teleportRandomly(48D)) {
          resetTask();
          break;
        }
      }
    }
    prevTeleportAttempt=null;
    if (attackedRecentlyTimer > 0)     attackedRecentlyTimer-=rand.nextInt(2);
    long overtakeGroup=HomelandEndermen.getOvertakeGroup(this);
    if (currentTask == EndermanTask.WAIT || currentTask == EndermanTask.GET_TNT) {
      moveForward=moveStrafing=0F;
      fallDistance=0F;
      fallTimer=0;
      posY=10000D;
      if (--currentTaskTimer == 0) {
        int tpX, tpY, tpZ;
        for (int attempt=0; attempt < 100; attempt++) {
          tpX=(int)Math.floor(posX) + rand.nextInt(41) - 20;
          tpZ=(int)Math.floor(posZ) + rand.nextInt(41) - 20;
          tpY=worldObj.getTopSolidOrLiquidBlock(tpX,tpZ) - 1;
          if (worldObj.getBlock(tpX,tpY,tpZ) == BlockList.end_terrain) {
            teleportTo(tpX + 0.3D + rand.nextDouble() * 0.4D,tpY + 1D,tpZ + 0.3D + rand.nextDouble() * 0.4D,true);
            PacketPipeline.sendToAllAround(this,256D,new C20Effect(FXType.Basic.HOMELAND_ENDERMAN_TP_OVERWORLD,this));
            if (overtakeGroupRole == OvertakeGroupRole.CHAOSMAKER) {
              setCarrying(new ItemStack(Blocks.tnt));
            }
 else             if (homelandRole == HomelandRole.COLLECTOR && rand.nextInt(4) != 0) {
              setCarrying(new ItemStack(endermanBlockList[rand.nextInt(endermanBlockList.length)]));
            }
            break;
          }
        }
        resetTask();
      }
    }
    if (overtakeGroup == -1) {
      if (currentTask != EndermanTask.NONE && currentTask != EndermanTask.WAIT) {
        --currentTaskTimer;
        if (currentTask == EndermanTask.LISTEN_TO_RECRUITER || currentTask == EndermanTask.RECRUIT_TO_GROUP) {
          moveForward=moveStrafing=0F;
          if (currentTaskTimer == 0 && currentTask == EndermanTask.RECRUIT_TO_GROUP) {
            int chance=50, reportChance=10;
            EntityMobHomelandEnderman target=(EntityMobHomelandEnderman)currentTaskData;
switch (target.homelandRole) {
case WORKER:
              chance=30;
            break;
case GUARD:
          chance=15;
        reportChance=35;
      break;
case INTELLIGENCE:
    chance=80;
  reportChance=22;
break;
case BUSINESSMAN:
chance=40;
reportChance=14;
break;
default :
}
if (rand.nextInt(100) < chance) {
target.setGroupMember(groupId,OvertakeGroupRole.getRandomMember(rand));
PacketPipeline.sendToAllAround(this,64D,new C21EffectEntity(FXType.Entity.HOMELAND_ENDERMAN_RECRUIT,this));
PacketPipeline.sendToAllAround(this,64D,new C21EffectEntity(FXType.Entity.HOMELAND_ENDERMAN_RECRUIT,target));
for (int attempt=0; attempt < 50; attempt++) {
if (teleportRandomly()) break;
}
}
 else if (rand.nextInt(100) < reportChance) {
boolean escaped=false;
double oldX=posX, oldY=posY, oldZ=posZ;
if (rand.nextInt(5) != 0) {
for (int attempt=0; attempt < 20; attempt++) {
if (teleportRandomly()) {
escaped=true;
break;
}
}
}
List<EntityMobHomelandEnderman> guards=HomelandEndermen.getByHomelandRole(this,HomelandRole.GUARD);
for (int a=0, amt=Math.max(3,(int)Math.round(guards.size() * 0.3D)); a < amt; a++) {
EntityMobHomelandEnderman guard=guards.get(rand.nextInt(guards.size()));
guard.setScreaming(true);
PacketPipeline.sendToAllAround(this,256D,new C22EffectLine(FXType.Line.HOMELAND_ENDERMAN_GUARD_CALL,target,guard));
if (!escaped) guard.setTarget(this);
 else if (rand.nextInt(4) != 0) guard.teleportTo(oldX + 4D * (rand.nextDouble() - 0.5D),oldY + 2D + rand.nextDouble() * 4D,oldZ + 4D * (rand.nextDouble() - 0.5D));
}
}
recruitCooldown=120;
}
}
 else if (currentTask == EndermanTask.STROLL) {
if (currentTaskTimer > 0 && currentTaskTimer < 20 && rand.nextInt(3) == 0) {
Vec3 obj=(Vec3)currentTaskData;
if ((obj.distanceTo(Vec3.createVectorHelper(posX,posY,posZ)) <= 0.5D || rand.nextInt(10) == 0) && randomTpTimer > 30) {
for (int attempt=0; attempt < 30; attempt++) {
if (teleportRandomly(48D)) {
currentTaskData=Vec3.createVectorHelper(posX,posY,posZ);
randomTpTimer-=40 + rand.nextInt(30);
break;
}
}
}
}
if (currentTaskTimer == 0 && rand.nextInt(5) == 0) {
currentTaskTimer=10 + rand.nextInt(60);
}
}
 else if (currentTask == EndermanTask.WALK) {
ChunkPosition pos=(ChunkPosition)currentTaskData;
if (MathUtil.distance(posX - pos.chunkPosX,posY - pos.chunkPosY,posZ - pos.chunkPosZ) < 3D) resetTask();
}
 else if (currentTask == EndermanTask.COMMUNICATE) {
moveForward=moveStrafing=0F;
}
if (currentTaskTimer <= 0) resetTask();
}
 else if (entityToAttack == null) {
if (groupId != -1 && rand.nextInt(400) == 0 && (recruitCooldown < -120 || --recruitCooldown < -120)) {
List<EntityMobHomelandEnderman> total=HomelandEndermen.getAll(this);
int groupAmt=HomelandEndermen.getInSameGroup(this).size();
int totalAmt=total.size();
if (totalAmt > 8 && (rand.nextInt(5) <= 2 || groupAmt < (totalAmt >> 2) + rand.nextInt(totalAmt >> 3) - rand.nextInt(4))) {
for (int attempt=0; attempt < 5; attempt++) {
EntityMobHomelandEnderman enderman=total.get(rand.nextInt(totalAmt));
if (enderman == this || enderman.groupId != -1 || !enderman.onGround || enderman.homelandRole == HomelandRole.ISLAND_LEADERS || enderman.getDistanceToEntity(this) > 80D) continue;
if (groupAmt > 3 && ((enderman.homelandRole == HomelandRole.GUARD || enderman.homelandRole == HomelandRole.WORKER) && rand.nextInt(5) != 0)) continue;
boolean tp=false;
for (int tpAttempt=0; tpAttempt < 30; tpAttempt++) {
if (teleportTo(enderman.posX + (rand.nextDouble() - 0.5D) * 2D,enderman.posY,enderman.posZ + (rand.nextDouble() - 0.5D) * 2D)) {
tp=true;
break;
}
}
if (!tp) continue;
currentTask=EndermanTask.RECRUIT_TO_GROUP;
currentTaskData=enderman;
enderman.currentTask=EndermanTask.LISTEN_TO_RECRUITER;
enderman.currentTaskTimer=currentTaskTimer=20 + rand.nextInt(60);
break;
}
}
}
if (currentTask == EndermanTask.NONE && rand.nextInt(80) == 0) {
switch (homelandRole) {
case ISLAND_LEADERS:
if (rand.nextInt(13) == 0) {
teleportRandomly();
}
 else {
Vec3 look=getLookVec();
for (int attempt=0, pathX, pathY, pathZ; attempt < 12; attempt++) {
if (attempt > 8 || rand.nextInt(6) == 0) look=Vec3.createVectorHelper(rand.nextDouble() - 0.5D,0D,rand.nextDouble() - 0.5D).normalize();
pathX=(int)(posX + look.xCoord * 16D + (rand.nextDouble() - 0.5D) * 5D);
pathZ=(int)(posZ + look.zCoord * 16D + (rand.nextDouble() - 0.5D) * 5D);
pathY=worldObj.getTopSolidOrLiquidBlock(pathX,pathZ) - 1;
if (worldObj.getBlock(pathX,pathY,pathZ) == BlockList.end_terrain && MathUtil.distance(posX - pathX,posY - pathY,posZ - pathZ) > 5D) {
setPathToEntity(worldObj.getEntityPathToXYZ(this,pathX,pathY + 1,pathZ,30F,true,false,false,true));
currentTask=EndermanTask.STROLL;
currentTaskTimer=65 + rand.nextInt(60);
currentTaskData=Vec3.createVectorHelper(posX,posY,posZ);
break;
}
}
}
break;
case BUSINESSMAN:
if (rand.nextInt(18) == 0) {
List<EntityMobHomelandEnderman> businessmen=HomelandEndermen.getByHomelandRole(this,HomelandRole.BUSINESSMAN);
if (!businessmen.isEmpty()) {
EntityMobHomelandEnderman enderman=businessmen.get(rand.nextInt(businessmen.size()));
if (enderman.currentTask == EndermanTask.NONE) {
for (int tpAttempt=0; tpAttempt < 20; tpAttempt++) {
if (teleportTo(enderman.posX + (rand.nextDouble() - 0.5D) * 2D,enderman.posY,enderman.posZ + (rand.nextDouble() - 0.5D) * 2D)) {
currentTask=enderman.currentTask=EndermanTask.COMMUNICATE;
currentTaskTimer=enderman.currentTaskTimer=30 + rand.nextInt(50 + rand.nextInt(80));
break;
}
}
}
}
}
 else if (rand.nextInt(10) == 0) {
int walkToX, walkToY, walkToZ;
for (int attempt=0; attempt < 10; attempt++) {
walkToX=(int)posX + rand.nextInt(251) - 125;
walkToZ=(int)posZ + rand.nextInt(251) - 125;
walkToY=worldObj.getTopSolidOrLiquidBlock(walkToX,walkToZ) - 1;
if (worldObj.getBlock(walkToX,walkToY,walkToZ) == BlockList.end_terrain) {
setPathToEntity(worldObj.getEntityPathToXYZ(this,walkToX,walkToY + 1,walkToZ,100F,true,false,false,true));
currentTask=EndermanTask.WALK;
currentTaskTimer=200 + rand.nextInt(100);
currentTaskData=new ChunkPosition(walkToX,walkToY,walkToZ);
break;
}
}
}
break;
case WORKER:
if (rand.nextInt(270) == 0 && worldObj.getBlock((int)Math.floor(posX),(int)Math.floor(posY) + 1,(int)Math.floor(posZ)) != BlockList.ender_goo) {
for (int attempt=0, tpX, tpY, tpZ; attempt < 50; attempt++) {
tpX=(int)posX + rand.nextInt(71) - 35;
tpZ=(int)posZ + rand.nextInt(71) - 35;
tpY=worldObj.getTopSolidOrLiquidBlock(tpX,tpZ) - 1;
if (worldObj.getBlock(tpX,tpY,tpZ) == BlockList.ender_goo) {
tpX+=0.5D + (rand.nextDouble() - 0.5D) * 0.3D;
tpY+=1D;
tpZ+=0.5D + (rand.nextDouble() - 0.5D) * 0.3D;
PacketPipeline.sendToAllAround(this,256D,new C22EffectLine(FXType.Line.ENDERMAN_TELEPORT,posX,posY,posZ,tpX,tpY,tpZ));
teleportTo(tpX,tpY,tpZ,true);
break;
}
}
}
break;
case COLLECTOR:
if (rand.nextInt(30) == 0 && (!isCarrying() || rand.nextInt(4) == 0)) {
PacketPipeline.sendToAllAround(this,256D,new C20Effect(FXType.Basic.HOMELAND_ENDERMAN_TP_OVERWORLD,this));
currentTask=EndermanTask.WAIT;
currentTaskTimer=150 + rand.nextInt(600 + rand.nextInt(1800));
setCarrying(null);
teleportTo(posX,10000D,posZ,true);
}
break;
case OVERWORLD_EXPLORER:
if (rand.nextInt(140) == 0) {
currentTask=EndermanTask.WAIT;
currentTaskTimer=500 + rand.nextInt(800) + rand.nextInt(1000) * (1 + rand.nextInt(4));
List<EntityMobHomelandEnderman> explorers=HomelandEndermen.getByHomelandRole(this,HomelandRole.OVERWORLD_EXPLORER);
for (int a=0; a < 1 + rand.nextInt(7) && !explorers.isEmpty(); a++) {
if (rand.nextInt(3) == 0) break;
EntityMobHomelandEnderman enderman=explorers.remove(rand.nextInt(explorers.size()));
if (enderman == this) continue;
PacketPipeline.sendToAllAround(this,256D,new C20Effect(FXType.Basic.HOMELAND_ENDERMAN_TP_OVERWORLD,enderman));
enderman.currentTask=EndermanTask.WAIT;
enderman.currentTaskTimer=currentTaskTimer + rand.nextInt(500);
enderman.teleportTo(enderman.posX,10000D,enderman.posZ,true);
}
PacketPipeline.sendToAllAround(this,256D,new C20Effect(FXType.Basic.HOMELAND_ENDERMAN_TP_OVERWORLD,this));
teleportTo(posX,10000D,posZ,true);
}
break;
default :
}
}
}
}
if (overtakeGroup != -1) {
if (overtakeGroup == groupId) {
if (currentTask == EndermanTask.NONE) {
switch (overtakeGroupRole) {
case TELEPORTER:
if (rand.nextInt(8) == 0) teleportRandomly(12D);
break;
case CHAOSMAKER:
if (isCarrying() && getCarrying().getItem() == Item.getItemFromBlock(Blocks.tnt)) {
if (rand.nextInt(50) == 0) {
for (int attempt=0, xx, yy, zz; attempt < 30; attempt++) {
xx=(int)Math.floor(posX) + rand.nextInt(7) - 3;
yy=(int)Math.floor(posY) + rand.nextInt(3) - 1;
zz=(int)Math.floor(posZ) + rand.nextInt(7) - 3;
if (worldObj.getBlock(xx,yy,zz) == BlockList.end_terrain && worldObj.isAirBlock(xx,yy + 1,zz)) {
worldObj.spawnEntityInWorld(new EntityTNTPrimed(worldObj,xx + 0.5D,yy + 1.5D,zz + 0.5D,this));
setCarrying(null);
break;
}
}
}
}
 else {
PacketPipeline.sendToAllAround(this,256D,new C20Effect(FXType.Basic.HOMELAND_ENDERMAN_TP_OVERWORLD,this));
currentTask=EndermanTask.GET_TNT;
currentTaskTimer=30 + rand.nextInt(80);
setPosition(posX,10000D,posZ);
}
break;
case LEADER:
case FIGHTER:
if (!(entityToAttack instanceof EntityMobHomelandEnderman)) {
EntityMobHomelandEnderman target=null;
if (overtakeGroupRole == OvertakeGroupRole.LEADER || rand.nextInt(4) == 0) {
List<EntityMobHomelandEnderman> list=HomelandEndermen.getByHomelandRole(this,HomelandRole.ISLAND_LEADERS);
if (!list.isEmpty()) target=list.get(rand.nextInt(list.size()));
}
if (target == null) {
List<EntityMobHomelandEnderman> other=HomelandEndermen.getAll(this);
for (int attempt=0, size=other.size(); attempt < 10; attempt++) {
EntityMobHomelandEnderman potentialTarget=other.get(rand.nextInt(size));
if (potentialTarget == this || potentialTarget.isInSameGroup(this)) continue;
HomelandRole role=potentialTarget.homelandRole;
if (role == HomelandRole.GUARD && rand.nextInt(3) != 0) target=potentialTarget;
 else if (role != HomelandRole.WORKER || rand.nextInt(5) <= 1) target=potentialTarget;
break;
}
}
setTarget(target);
}
break;
default :
}
}
if (!worldObj.getEntitiesWithinAABB(EntityTNTPrimed.class,boundingBox.expand(5D,3D,5D)).isEmpty()) teleportRandomly();
}
 else if (groupId != -1) {
if (rand.nextInt(3) == 0) setGroupMember(overtakeGroup,OvertakeGroupRole.getRandomMember(rand));
 else setGroupMember(-1,null);
}
 else if (entityToAttack == null && ((homelandRole == HomelandRole.GUARD && rand.nextInt(30) == 0) || rand.nextInt(200) == 0)) {
List<EntityMobHomelandEnderman> all=HomelandEndermen.getAll(this);
for (int attempt=0; attempt < 4 && !all.isEmpty(); attempt++) {
EntityMobHomelandEnderman enderman=all.remove(rand.nextInt(all.size()));
if (enderman.groupId == overtakeGroup) {
setTarget(enderman);
break;
}
}
}
}
if (entityToAttack != null) {
++attackTpTimer;
if (((attackTpTimer > 50 + rand.nextInt(30) && rand.nextInt(20) == 0) || attackTpTimer > 120) && entityToAttack.getDistanceSqToEntity(this) < 16D) {
teleportRandomly(8D);
attackTpTimer=-80;
}
 else if (entityToAttack.getDistanceSqToEntity(this) > 256D && attackTpTimer > 30 && teleportToEntity(entityToAttack)) {
attackTpTimer=-80;
}
}
 else {
attackTpTimer=-80;
if (currentTask == EndermanTask.NONE && entityToAttack == null && ++randomTpTimer > 70 + rand.nextInt(50)) {
if (rand.nextInt(19) == 0) {
for (int attempt=0; attempt < 5; attempt++) {
if (teleportRandomly(10D)) break;
}
}
randomTpTimer-=110 + rand.nextInt(40);
}
if (screamTimer > 0 && --screamTimer == 0 && isScreaming()) setScreaming(false);
}
if (lastEntityToAttack != entityToAttack) {
IAttributeInstance attribute=getEntityAttribute(SharedMonsterAttributes.movementSpeed);
attribute.removeModifier(attackingSpeedBoostModifier);
if (entityToAttack != null) attribute.applyModifier(attackingSpeedBoostModifier);
lastEntityToAttack=entityToAttack;
}
}
isJumping=false;
if (entityToAttack != null) faceEntity(entityToAttack,100F,100F);
super.onLivingUpdate();
}",0.9561776249635084
34735,"protected IslandBiomeEnchantedIsland(int biomeID){
  super(biomeID);
  contentVariations.add(HOMELAND);
  contentVariations.add(LABORATORY);
  randomDeviations.add(TALL_PILES);
  getSpawnEntries(HOMELAND).addAll(new SpawnEntry[]{new SpawnEntry(EntityEnderman.class,22,38),new SpawnEntry(EntityMobBabyEnderman.class,14,20)});
  getSpawnEntries(LABORATORY).addAll(new SpawnEntry[]{new SpawnEntry(EntityMobEndermage.class,6,15),new SpawnEntry(EntityEnderman.class,12,10),new SpawnEntry(EntityMobEnderGuardian.class,20,7)});
  getInteractions(HOMELAND).addAll(new BiomeInteraction[]{new BiomeInteraction(""String_Node_Str"",InteractionOvertake.class,50,1),new BiomeInteraction(""String_Node_Str"",InteractionCellarSounds.class,10,20)});
  getInteractions(LABORATORY).addAll(new BiomeInteraction[]{new BiomeInteraction(""String_Node_Str"",InteractionCellarSounds.class,10,20)});
}","protected IslandBiomeEnchantedIsland(int biomeID){
  super(biomeID);
  contentVariations.add(HOMELAND);
  randomDeviations.add(TALL_PILES);
  getSpawnEntries(HOMELAND).addAll(new SpawnEntry[]{new SpawnEntry(EntityEnderman.class,22,38),new SpawnEntry(EntityMobBabyEnderman.class,14,20)});
  getInteractions(HOMELAND).addAll(new BiomeInteraction[]{new BiomeInteraction(""String_Node_Str"",InteractionOvertake.class,50,1),new BiomeInteraction(""String_Node_Str"",InteractionCellarSounds.class,10,20)});
}",0.6559297218155198
34736,"@Override @SideOnly(Side.CLIENT) public void registerIcons(IIconRegister iconRegister){
  ((TextureMap)iconRegister).setTextureEntry(""String_Node_Str"",(TextureAtlasSprite)(itemIcon=new TextureBiomeCompass(""String_Node_Str"")));
  if (locations == null) {
    locations=new ArrayList<>(IslandBiomeBase.biomeList.size());
    for (int a=0; a < IslandBiomeBase.biomeList.size(); a++)     locations.add(a,new HashSet<ChunkCoordinates>());
    lastSavedX=lastSavedZ=Integer.MAX_VALUE;
  }
}","@Override @SideOnly(Side.CLIENT) public void registerIcons(IIconRegister iconRegister){
  ((TextureMap)iconRegister).setTextureEntry(""String_Node_Str"",(TextureAtlasSprite)(itemIcon=new TextureBiomeCompass(""String_Node_Str"")));
  locations=new ArrayList<>(IslandBiomeBase.biomeList.size());
  for (int a=0; a < IslandBiomeBase.biomeList.size(); a++)   locations.add(a,new HashSet<ChunkCoordinates>());
  lastSavedX=lastSavedZ=Integer.MAX_VALUE;
  Log.info(""String_Node_Str"");
}",0.93125
34737,"@Override public void onUpdate(ItemStack is,World world,Entity owner,int slot,boolean isHeld){
  if (!world.isRemote) {
    if (is.stackTagCompound == null)     is.stackTagCompound=new NBTTagCompound();
    byte timer=is.stackTagCompound.getByte(""String_Node_Str"");
    if (++timer > 8) {
      timer=0;
      if (owner instanceof EntityPlayer) {
        Class<?> cls;
        for (        Object o : world.getEntitiesWithinAABB(EntityMob.class,owner.boundingBox.expand(2.75D,1.5D,2.75D))) {
          cls=o.getClass();
          if (cls == EntityEnderman.class || cls == EntityMobAngryEnderman.class) {
            EntityMob mob=(EntityMob)o;
            if (mob.getEntityToAttack() != owner)             continue;
            EntityWeatherEffect bolt=new EntityWeatherLightningBoltDemon(world,mob.posX,mob.posY,mob.posZ,null,false);
            world.addWeatherEffect(bolt);
            PacketPipeline.sendToAllAround(bolt,512D,new C05CustomWeather(bolt,(byte)0));
            EntityMobParalyzedEnderman paralyzed=new EntityMobParalyzedEnderman(world);
            paralyzed.copyLocationAndAnglesFrom(mob);
            if (mob.getLastAttacker() != owner && world.rand.nextInt(3) == 0) {
              List<EntityLiving> otherEntities=world.getEntitiesWithinAABB(EntityLiving.class,paralyzed.boundingBox.expand(8D,4D,8D));
              if (!otherEntities.isEmpty()) {
                EntityLiving target=otherEntities.get(world.rand.nextInt(otherEntities.size()));
                if (!paralyzed.canEntityBeSeen(target))                 target=null;
                paralyzed.setTarget(target);
              }
            }
            world.removeEntity(mob);
            world.spawnEntityInWorld(paralyzed);
            is.damageItem(1,(EntityPlayer)owner);
            break;
          }
        }
      }
    }
    is.stackTagCompound.setByte(""String_Node_Str"",timer);
  }
}","@Override public void onUpdate(ItemStack is,World world,Entity owner,int slot,boolean isHeld){
  if (!world.isRemote) {
    if (is.stackTagCompound == null)     is.stackTagCompound=new NBTTagCompound();
    byte timer=is.stackTagCompound.getByte(""String_Node_Str"");
    if (++timer > 8) {
      timer=0;
      if (owner instanceof EntityPlayer) {
        Class<?> cls;
        for (        Object o : world.getEntitiesWithinAABB(EntityMob.class,owner.boundingBox.expand(2.75D,1.5D,2.75D))) {
          cls=o.getClass();
          if (cls == EntityEnderman.class || cls == EntityMobAngryEnderman.class) {
            EntityMob mob=(EntityMob)o;
            if (mob.getEntityToAttack() != owner)             continue;
            EntityWeatherEffect bolt=new EntityWeatherLightningBoltDemon(world,mob.posX,mob.posY,mob.posZ,null,false);
            world.addWeatherEffect(bolt);
            PacketPipeline.sendToAllAround(bolt,512D,new C05CustomWeather(bolt,(byte)0));
            EntityMobParalyzedEnderman paralyzed=new EntityMobParalyzedEnderman(world);
            paralyzed.copyLocationAndAnglesFrom(mob);
            if (mob.getLastAttacker() != owner && world.rand.nextInt(3) == 0) {
              List<EntityLiving> otherEntities=world.getEntitiesWithinAABB(EntityLiving.class,paralyzed.boundingBox.expand(8D,4D,8D));
              if (!otherEntities.isEmpty()) {
                EntityLiving target=otherEntities.get(world.rand.nextInt(otherEntities.size()));
                if (!paralyzed.canEntityBeSeen(target))                 target=null;
                paralyzed.setTarget(target);
              }
            }
            world.removeEntity(mob);
            world.spawnEntityInWorld(paralyzed);
            is.damageItem(getEnergyPerUse(is),(EntityPlayer)owner);
            break;
          }
        }
      }
    }
    is.stackTagCompound.setByte(""String_Node_Str"",timer);
  }
}",0.9947089947089948
34738,"@Override public ItemStack onItemRightClick(ItemStack is,World world,EntityPlayer player){
  if (is.getItemDamage() < getMaxDamage()) {
    if (!world.isRemote) {
      is.setItemDamage(is.getItemDamage() + getEnergyPerUse(is));
      world.spawnEntityInWorld(new EntityProjectileSpatialDash(world,player));
    }
 else     world.playSound(player.posX,player.posY,player.posZ,""String_Node_Str"",0.8F,0.9F,false);
  }
  return is;
}","@Override public ItemStack onItemRightClick(ItemStack is,World world,EntityPlayer player){
  if (is.getItemDamage() < getMaxDamage()) {
    if (!world.isRemote) {
      is.damageItem(getEnergyPerUse(is),player);
      world.spawnEntityInWorld(new EntityProjectileSpatialDash(world,player));
    }
 else     world.playSound(player.posX,player.posY,player.posZ,""String_Node_Str"",0.8F,0.9F,false);
  }
  return is;
}",0.937129300118624
34739,"public ItemStack tryTeleportEntity(ItemStack is,EntityPlayer player,Entity entity){
  if (entity.isRiding() || entity.riddenByEntity != null)   return is;
  GemData gemData=GemData.loadFromItemStack(is);
  if (gemData.isLinked() && entity.dimension == gemData.getDimension()) {
    int itemDamage=is.getItemDamage();
    if (itemDamage >= is.getMaxDamage())     return is;
    boolean isLiving=entity instanceof EntityLivingBase;
    PacketPipeline.sendToAllAround(entity,64D,new C21EffectEntity(FXType.Entity.GEM_TELEPORT_FROM,entity));
    is.setItemDamage(itemDamage + getEnergyPerUse(is));
    entity.fallDistance=0F;
    if (isLiving)     ((EntityLivingBase)entity).setPositionAndUpdate(gemData.getX() + 0.5D,gemData.getY() + 1.001D,gemData.getZ() + 0.5D);
    entity.setLocationAndAngles(gemData.getX() + 0.5D,gemData.getY() + 1.001D,gemData.getZ() + 0.5D,entity.rotationYaw,entity.rotationPitch);
    float percBroken=itemDamage / (float)is.getMaxDamage();
    if (percBroken > 0.66F && entity.worldObj.rand.nextFloat() * 1.4F < percBroken) {
      GemSideEffects.performRandomEffect(entity,percBroken);
    }
    if (EnhancementHandler.hasEnhancement(is,TransferenceGemEnhancements.HEAL) && isLiving) {
      EntityLivingBase e=(EntityLivingBase)entity;
      e.addPotionEffect(new PotionEffect(Potion.regeneration.id,120,1,true));
      e.addPotionEffect(new PotionEffect(Potion.field_76443_y.id,1,0,true));
      e.extinguish();
    }
    PacketPipeline.sendToAllAround(entity,64D,new C20Effect(FXType.Basic.GEM_TELEPORT_TO,entity));
  }
  return is;
}","public ItemStack tryTeleportEntity(ItemStack is,EntityPlayer player,Entity entity){
  if (entity.isRiding() || entity.riddenByEntity != null)   return is;
  GemData gemData=GemData.loadFromItemStack(is);
  if (gemData.isLinked() && entity.dimension == gemData.getDimension()) {
    int itemDamage=is.getItemDamage();
    if (itemDamage >= is.getMaxDamage())     return is;
    boolean isLiving=entity instanceof EntityLivingBase;
    PacketPipeline.sendToAllAround(entity,64D,new C21EffectEntity(FXType.Entity.GEM_TELEPORT_FROM,entity));
    is.damageItem(getEnergyPerUse(is),player);
    if (isLiving)     ((EntityLivingBase)entity).setPositionAndUpdate(gemData.getX() + 0.5D,gemData.getY() + 1.001D,gemData.getZ() + 0.5D);
    entity.setLocationAndAngles(gemData.getX() + 0.5D,gemData.getY() + 1.001D,gemData.getZ() + 0.5D,entity.rotationYaw,entity.rotationPitch);
    entity.fallDistance=0F;
    float percBroken=itemDamage / (float)is.getMaxDamage();
    if (percBroken > 0.66F && entity.worldObj.rand.nextFloat() * 1.4F < percBroken) {
      GemSideEffects.performRandomEffect(entity,percBroken);
    }
    if (EnhancementHandler.hasEnhancement(is,TransferenceGemEnhancements.HEAL) && isLiving) {
      EntityLivingBase e=(EntityLivingBase)entity;
      e.addPotionEffect(new PotionEffect(Potion.regeneration.id,120,1,true));
      e.addPotionEffect(new PotionEffect(Potion.field_76443_y.id,1,0,true));
      e.extinguish();
    }
    PacketPipeline.sendToAllAround(entity,64D,new C20Effect(FXType.Basic.GEM_TELEPORT_TO,entity));
  }
  return is;
}",0.7974317817014446
34740,"public static <K,V extends Comparable<? super V>>SortedSet<Entry<K,V>> sortMapByValueAscending(Map<K,V> map){
  SortedSet<Entry<K,V>> sorted=new TreeSet<>(new Comparator<Entry<K,V>>(){
    @Override public int compare(    Entry<K,V> e1,    Entry<K,V> e2){
      int r=e1.getValue().compareTo(e2.getValue());
      return r == 0 ? 1 : r;
    }
  }
);
  sorted.addAll(map.entrySet());
  return sorted;
}","public static <K,V extends Comparable<? super V>>SortedSet<Entry<K,V>> sortMapByValueAscending(Map<K,V> map){
  SortedSet<Entry<K,V>> sorted=new TreeSet<>(new Comparator<Entry<K,V>>(){
    @Override public int compare(    Entry<K,V> e1,    Entry<K,V> e2){
      int r=e1.getValue().compareTo(e2.getValue());
      return r == 0 ? 1 : r;
    }
  }
);
  for (  Entry<K,V> entry : map.entrySet())   sorted.add(new SimpleEntry(entry));
  return sorted;
}",0.8836662749706228
34741,"public static <K,V extends Comparable<? super V>>SortedSet<Entry<K,V>> sortMapByValueDescending(Map<K,V> map){
  SortedSet<Entry<K,V>> sorted=new TreeSet<>(new Comparator<Entry<K,V>>(){
    @Override public int compare(    Entry<K,V> e1,    Entry<K,V> e2){
      int r=e2.getValue().compareTo(e1.getValue());
      return r == 0 ? 1 : r;
    }
  }
);
  sorted.addAll(map.entrySet());
  return sorted;
}","public static <K,V extends Comparable<? super V>>SortedSet<Entry<K,V>> sortMapByValueDescending(Map<K,V> map){
  SortedSet<Entry<K,V>> sorted=new TreeSet<>(new Comparator<Entry<K,V>>(){
    @Override public int compare(    Entry<K,V> e1,    Entry<K,V> e2){
      int r=e2.getValue().compareTo(e1.getValue());
      return r == 0 ? 1 : r;
    }
  }
);
  for (  Entry<K,V> entry : map.entrySet())   sorted.add(new SimpleEntry(entry));
  return sorted;
}",0.8839390386869871
34742,"public BiomeDecoratorHardcoreEnd(){
  spikeGen=new WorldGenSpikes();
  blobGen=new WorldGenBlob();
  meteoroidGen=new WorldGenMeteoroid();
  endPowderOreGen=new WorldGenEndPowderOre();
  endiumOreGen=new WorldGenEndiumOre();
}","public BiomeDecoratorHardcoreEnd(){
  spikeGen=new WorldGenObsidianSpike();
  blobGen=new WorldGenBlob();
  meteoroidGen=new WorldGenMeteoroid();
  endPowderOreGen=new WorldGenEndPowderOre();
  endiumOreGen=new WorldGenEndiumOre();
}",0.9803921568627452
34743,"private boolean shouldActHostile(){
  if (homelandRole == HomelandRole.ISLAND_LEADERS || (groupId != -1 && rand.nextInt(5) != 0) || HomelandEndermen.isOvertakeHappening(this)) {
    return false;
  }
 else   return rand.nextInt(4) != 0;
}","private boolean shouldActHostile(){
  if (homelandRole == HomelandRole.ISLAND_LEADERS || (groupId != -1 && rand.nextInt(5) != 0) || HomelandEndermen.isOvertakeHappening(this)) {
    return false;
  }
 else   return rand.nextInt(3) != 0;
}",0.9957983193277312
34744,"@Override public void readEntityFromNBT(NBTTagCompound nbt){
  super.readEntityFromNBT(nbt);
  byte homelandRoleId=nbt.getByte(""String_Node_Str"");
  homelandRole=homelandRoleId >= 0 && homelandRoleId < HomelandRole.values.length ? HomelandRole.values[homelandRoleId] : null;
  if ((groupId=nbt.getLong(""String_Node_Str"")) != -1) {
    byte groupRoleId=nbt.getByte(""String_Node_Str"");
    overtakeGroupRole=groupRoleId >= 0 && groupRoleId < OvertakeGroupRole.values.length ? OvertakeGroupRole.values[groupRoleId] : null;
  }
  if (groupId != -1 && overtakeGroupRole == null) {
    Log.warn(""String_Node_Str"");
    groupId=-1;
  }
  if (nbt.hasKey(""String_Node_Str"")) {
    currentTask=EndermanTask.WAIT;
    currentTaskTimer=nbt.getInteger(""String_Node_Str"");
  }
  if (nbt.hasKey(""String_Node_Str""))   setCarrying(ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str"")));
  if (homelandRole == null || (groupId != -1 && overtakeGroupRole == null))   setDead();
 else   if (!worldObj.isRemote)   refreshRoles();
}","@Override public void readEntityFromNBT(NBTTagCompound nbt){
  super.readEntityFromNBT(nbt);
  byte homelandRoleId=nbt.getByte(""String_Node_Str"");
  homelandRole=homelandRoleId >= 0 && homelandRoleId < HomelandRole.values.length ? HomelandRole.values[homelandRoleId] : null;
  if ((groupId=nbt.getLong(""String_Node_Str"")) != -1) {
    byte groupRoleId=nbt.getByte(""String_Node_Str"");
    overtakeGroupRole=groupRoleId >= 0 && groupRoleId < OvertakeGroupRole.values.length ? OvertakeGroupRole.values[groupRoleId] : null;
  }
  if (groupId != -1 && overtakeGroupRole == null) {
    Log.warn(""String_Node_Str"");
    groupId=-1;
  }
  if (nbt.hasKey(""String_Node_Str"")) {
    currentTask=EndermanTask.WAIT;
    currentTaskTimer=nbt.getInteger(""String_Node_Str"");
    posY=10000D;
  }
 else   if (nbt.hasKey(""String_Node_Str"")) {
    currentTask=EndermanTask.GET_TNT;
    currentTaskTimer=nbt.getInteger(""String_Node_Str"");
    posY=10000D;
  }
  if (nbt.hasKey(""String_Node_Str""))   setCarrying(ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str"")));
  if (homelandRole == null || (groupId != -1 && overtakeGroupRole == null))   setDead();
 else   if (!worldObj.isRemote)   refreshRoles();
}",0.9205921938088828
34745,"@Override public void setTarget(Entity target){
  super.setTarget(target);
  if (entityToAttack != null)   resetTask();
}","@Override public void setTarget(Entity target){
  super.setTarget(target);
  if (entityToAttack != null) {
    resetTask();
    setPathToEntity(worldObj.getPathEntityToEntity(this,entityToAttack,16F,true,false,false,true));
  }
}",0.6914285714285714
34746,"@Override public void writeEntityToNBT(NBTTagCompound nbt){
  super.writeEntityToNBT(nbt);
  nbt.setByte(""String_Node_Str"",(byte)homelandRole.ordinal());
  nbt.setLong(""String_Node_Str"",groupId);
  if (groupId != -1)   nbt.setByte(""String_Node_Str"",(byte)overtakeGroupRole.ordinal());
  if (currentTask == EndermanTask.WAIT)   nbt.setInteger(""String_Node_Str"",currentTaskTimer);
  ItemStack carrying=getCarrying();
  if (carrying != null)   nbt.setTag(""String_Node_Str"",carrying.writeToNBT(new NBTTagCompound()));
}","@Override public void writeEntityToNBT(NBTTagCompound nbt){
  super.writeEntityToNBT(nbt);
  nbt.setByte(""String_Node_Str"",(byte)homelandRole.ordinal());
  nbt.setLong(""String_Node_Str"",groupId);
  if (groupId != -1)   nbt.setByte(""String_Node_Str"",(byte)overtakeGroupRole.ordinal());
  if (currentTask == EndermanTask.WAIT)   nbt.setInteger(""String_Node_Str"",currentTaskTimer);
 else   if (currentTask == EndermanTask.GET_TNT)   nbt.setInteger(""String_Node_Str"",currentTaskTimer);
  ItemStack carrying=getCarrying();
  if (carrying != null)   nbt.setTag(""String_Node_Str"",carrying.writeToNBT(new NBTTagCompound()));
}",0.9090909090909092
34747,"@Override public void onLivingUpdate(){
  if (worldObj.isRemote) {
    refreshRoles();
    int chance=1 + (int)Math.floor(HardcoreEnderExpansion.proxy.getClientSidePlayer().getDistanceToEntity(this) / 12F);
    if (rand.nextInt(chance) == 0) {
      float colFactor=rand.nextFloat() * 0.6F + 0.4F;
      HardcoreEnderExpansion.fx.portalColor(worldObj,posX + (rand.nextDouble() - 0.5D) * width,posY + rand.nextDouble() * height - 0.25D,posZ + (rand.nextDouble() - 0.5D) * width,(rand.nextDouble() - 0.5D) * 2D,-rand.nextDouble(),(rand.nextDouble() - 0.5D) * 2D,colFactor * 0.9F,colFactor * 0.3F,colFactor);
      if (homelandRole != null && rand.nextInt(3) == 0) {
        HardcoreEnderExpansion.fx.portalColor(worldObj,posX + (rand.nextDouble() - 0.5D) * width,posY + rand.nextDouble() * height - 0.25D,posZ + (rand.nextDouble() - 0.5D) * width,(rand.nextDouble() - 0.5D) * 2D,-rand.nextDouble(),(rand.nextDouble() - 0.5D) * 2D,homelandRole.red,homelandRole.green,homelandRole.blue);
      }
      if (overtakeGroupRole != null && rand.nextInt(7) == 0) {
        HardcoreEnderExpansion.fx.portalColor(worldObj,posX + (rand.nextDouble() - 0.5D) * width,posY + rand.nextDouble() * height - 0.25D,posZ + (rand.nextDouble() - 0.5D) * width,(rand.nextDouble() - 0.5D) * 2D,-rand.nextDouble(),(rand.nextDouble() - 0.5D) * 2D,0.3F,0.3F,0.3F);
      }
    }
  }
 else   if (isEntityAlive()) {
    if (isWet())     attackEntityFrom(DamageSource.drown,1F);
    if (isWet() || isBurning()) {
      setTarget(null);
      setScreaming(false);
    }
    if (!onGround && ++fallTimer > 11 + rand.nextInt(10)) {
      fallTimer=0;
      for (int attempt=0; attempt < 500; attempt++) {
        if (teleportRandomly(92D)) {
          resetTask();
          System.out.println(""String_Node_Str"");
          break;
        }
      }
    }
    long overtakeGroup=HomelandEndermen.getOvertakeGroup(this);
    if (currentTask == EndermanTask.WAIT || currentTask == EndermanTask.GET_TNT) {
      moveForward=moveStrafing=0F;
      fallDistance=0F;
      posY=10000D;
      if (--currentTaskTimer == 0) {
        int tpX, tpY, tpZ;
        for (int attempt=0; attempt < 100; attempt++) {
          tpX=(int)Math.floor(posX) + rand.nextInt(40) - 20;
          tpZ=(int)Math.floor(posZ) + rand.nextInt(40) - 20;
          tpY=worldObj.getTopSolidOrLiquidBlock(tpX,tpZ) - 1;
          if (worldObj.getBlock(tpX,tpY,tpZ) == BlockList.end_terrain) {
            teleportTo(tpX + 0.3D + rand.nextDouble() * 0.4D,tpY + 1D,tpZ + 0.3D + rand.nextDouble() * 0.4D,true);
            if (overtakeGroupRole == OvertakeGroupRole.CHAOSMAKER) {
              setCarrying(new ItemStack(Blocks.tnt));
            }
 else             if (homelandRole == HomelandRole.COLLECTOR && rand.nextInt(4) != 0) {
              setCarrying(new ItemStack(StructureEndermanStash.getRandomBlock(rand)));
            }
            break;
          }
        }
        resetTask();
      }
    }
    if (overtakeGroup == -1) {
      if (currentTask != EndermanTask.NONE && currentTask != EndermanTask.WAIT) {
        --currentTaskTimer;
        if (currentTask == EndermanTask.LISTEN_TO_RECRUITER || currentTask == EndermanTask.RECRUIT_TO_GROUP) {
          moveForward=moveStrafing=0F;
          System.out.println(""String_Node_Str"" + currentTaskTimer);
          if (currentTaskTimer == 0 && currentTask == EndermanTask.RECRUIT_TO_GROUP) {
            int chance=50, reportChance=10;
            EntityMobHomelandEnderman target=(EntityMobHomelandEnderman)currentTaskData;
switch (target.homelandRole) {
case WORKER:
              chance=30;
            break;
case GUARD:
          chance=15;
        reportChance=35;
      break;
case INTELLIGENCE:
    chance=80;
  reportChance=22;
break;
case BUSINESSMAN:
chance=40;
reportChance=14;
break;
default :
}
if (rand.nextInt(100) < chance) {
target.setGroupMember(groupId,OvertakeGroupRole.getRandomMember(rand));
for (int attempt=0; attempt < 50; attempt++) {
if (teleportRandomly()) break;
}
System.out.println(""String_Node_Str"");
}
 else if (rand.nextInt(100) < reportChance) {
boolean escaped=false;
double oldX=posX, oldY=posY, oldZ=posZ;
if (rand.nextInt(5) != 0) {
for (int attempt=0; attempt < 20; attempt++) {
if (teleportRandomly()) {
escaped=true;
break;
}
}
}
List<EntityMobHomelandEnderman> guards=HomelandEndermen.getByHomelandRole(this,HomelandRole.GUARD);
System.out.println(""String_Node_Str"");
for (int a=0, amt=Math.max(3,(int)Math.round(guards.size() * 0.3D)); a < amt; a++) {
EntityMobHomelandEnderman guard=guards.get(rand.nextInt(guards.size()));
guard.setScreaming(true);
if (!escaped) guard.setTarget(this);
 else if (rand.nextBoolean()) guard.teleportTo(oldX + 4D * (rand.nextDouble() - 0.5D),oldY + 2D + rand.nextDouble() * 4D,oldZ + 4D * (rand.nextDouble() - 0.5D));
}
}
}
}
 else if (currentTask == EndermanTask.STROLL) {
if (currentTaskTimer > 0 && currentTaskTimer < 20 && rand.nextInt(3) == 0) {
Vec3 obj=(Vec3)currentTaskData;
if (obj.distanceTo(Vec3.createVectorHelper(posX,posY,posZ)) <= 0.5D || rand.nextInt(10) == 0) {
for (int attempt=0; attempt < 30; attempt++) {
if (teleportRandomly(48D)) {
currentTaskData=Vec3.createVectorHelper(posX,posY,posZ);
break;
}
}
}
}
if (currentTaskTimer == 0 && rand.nextInt(5) == 0) {
currentTaskTimer=10 + rand.nextInt(60);
System.out.println(""String_Node_Str"");
}
}
 else if (currentTask == EndermanTask.WALK) {
ChunkPosition pos=(ChunkPosition)currentTaskData;
if (MathUtil.distance(posX - pos.chunkPosX,posY - pos.chunkPosY,posZ - pos.chunkPosZ) < 3D) resetTask();
}
 else if (currentTask == EndermanTask.COMMUNICATE) {
moveForward=moveStrafing=0F;
}
if (currentTaskTimer <= 0) resetTask();
}
 else if (entityToAttack == null) {
if (groupId != -1 && rand.nextInt(400) == 0) {
List<EntityMobHomelandEnderman> total=HomelandEndermen.getAll(this);
int groupAmt=HomelandEndermen.getInSameGroup(this).size();
int totalAmt=total.size();
if (totalAmt > 8 && (rand.nextInt(5) <= 2 || groupAmt < (totalAmt >> 2) + rand.nextInt(totalAmt >> 3) - rand.nextInt(4))) {
for (int attempt=0; attempt < 5; attempt++) {
EntityMobHomelandEnderman enderman=total.get(rand.nextInt(totalAmt));
if (enderman == this || enderman.groupId != -1 || !enderman.onGround || enderman.homelandRole == HomelandRole.ISLAND_LEADERS || enderman.getDistanceToEntity(this) > 80D) continue;
if (groupAmt > 3 && ((enderman.homelandRole == HomelandRole.GUARD || enderman.homelandRole == HomelandRole.WORKER) && rand.nextInt(5) != 0)) continue;
boolean tp=false;
for (int tpAttempt=0; tpAttempt < 30; tpAttempt++) {
if (teleportTo(enderman.posX + (rand.nextDouble() - 0.5D) * 2D,enderman.posY,enderman.posZ + (rand.nextDouble() - 0.5D) * 2D)) {
tp=true;
break;
}
}
if (!tp) continue;
currentTask=EndermanTask.RECRUIT_TO_GROUP;
currentTaskData=enderman;
enderman.currentTask=EndermanTask.LISTEN_TO_RECRUITER;
enderman.currentTaskTimer=currentTaskTimer=20 + rand.nextInt(60);
System.out.println(""String_Node_Str"" + posX + ""String_Node_Str""+ posY+ ""String_Node_Str""+ posZ);
break;
}
}
}
if (currentTask == EndermanTask.NONE && rand.nextInt(80) == 0) {
switch (homelandRole) {
case ISLAND_LEADERS:
if (rand.nextInt(10) == 0) {
teleportRandomly();
}
 else {
Vec3 look=getLookVec();
for (int attempt=0, pathX, pathY, pathZ; attempt < 12; attempt++) {
if (attempt > 8 || rand.nextInt(6) == 0) look=Vec3.createVectorHelper(rand.nextDouble() - 0.5D,0D,rand.nextDouble() - 0.5D).normalize();
pathX=(int)(posX + look.xCoord * 16D + (rand.nextDouble() - 0.5D) * 5D);
pathZ=(int)(posZ + look.zCoord * 16D + (rand.nextDouble() - 0.5D) * 5D);
pathY=worldObj.getTopSolidOrLiquidBlock(pathX,pathZ) - 1;
if (worldObj.getBlock(pathX,pathY,pathZ) == BlockList.end_terrain && MathUtil.distance(posX - pathX,posY - pathY,posZ - pathZ) > 5D) {
setPathToEntity(worldObj.getEntityPathToXYZ(this,pathX,pathY + 1,pathZ,30F,true,false,false,true));
currentTask=EndermanTask.STROLL;
currentTaskTimer=45 + rand.nextInt(70);
currentTaskData=Vec3.createVectorHelper(posX,posY,posZ);
System.out.println(""String_Node_Str"" + pathX + ""String_Node_Str""+ pathY+ ""String_Node_Str""+ pathZ);
break;
}
}
}
break;
case BUSINESSMAN:
if (rand.nextInt(18) == 0) {
List<EntityMobHomelandEnderman> businessmen=HomelandEndermen.getByHomelandRole(this,HomelandRole.BUSINESSMAN);
if (!businessmen.isEmpty()) {
EntityMobHomelandEnderman enderman=businessmen.get(rand.nextInt(businessmen.size()));
if (enderman.currentTask == EndermanTask.NONE) {
currentTask=enderman.currentTask=EndermanTask.COMMUNICATE;
currentTaskTimer=enderman.currentTaskTimer=30 + rand.nextInt(50 + rand.nextInt(80));
System.out.println(""String_Node_Str"" + posX + ""String_Node_Str""+ posY+ ""String_Node_Str""+ posZ);
}
}
}
 else if (rand.nextInt(10) == 0) {
int walkToX, walkToY, walkToZ;
for (int attempt=0; attempt < 10; attempt++) {
walkToX=(int)posX + rand.nextInt(250) - 125;
walkToZ=(int)posZ + rand.nextInt(250) - 125;
walkToY=worldObj.getTopSolidOrLiquidBlock(walkToX,walkToZ) - 1;
if (worldObj.getBlock(walkToX,walkToY,walkToZ) == BlockList.end_terrain) {
setPathToEntity(worldObj.getEntityPathToXYZ(this,walkToX,walkToY + 1,walkToZ,100F,true,false,false,true));
currentTask=EndermanTask.WALK;
currentTaskTimer=200 + rand.nextInt(100);
currentTaskData=new ChunkPosition(walkToX,walkToY,walkToZ);
System.out.println(""String_Node_Str"" + walkToX + ""String_Node_Str""+ walkToY+ ""String_Node_Str""+ walkToZ);
break;
}
}
}
break;
case WORKER:
if (rand.nextInt(270) == 0 && worldObj.getBlock((int)Math.floor(posX),(int)Math.floor(posY) + 1,(int)Math.floor(posZ)) != BlockList.ender_goo) {
for (int attempt=0, tpX, tpY, tpZ; attempt < 50; attempt++) {
tpX=(int)posX + rand.nextInt(70) - 35;
tpZ=(int)posZ + rand.nextInt(70) - 35;
tpY=worldObj.getTopSolidOrLiquidBlock(tpX,tpZ) - 1;
if (worldObj.getBlock(tpX,tpY,tpZ) == BlockList.ender_goo) {
teleportTo(tpX + 0.5D + (rand.nextDouble() - 0.5D) * 0.3D,tpY + 1D,tpZ + 0.5D + (rand.nextDouble() - 0.5D) * 0.3D,true);
System.out.println(""String_Node_Str"" + tpX + ""String_Node_Str""+ tpY+ ""String_Node_Str""+ tpZ);
break;
}
}
}
break;
case COLLECTOR:
if (rand.nextInt(50) == 0 && (!isCarrying() || rand.nextInt(4) == 0)) {
currentTask=EndermanTask.WAIT;
currentTaskTimer=150 + rand.nextInt(600 + rand.nextInt(1800));
setCarrying(null);
teleportTo(posX,10000D,posZ,true);
System.out.println(""String_Node_Str"");
}
break;
case OVERWORLD_EXPLORER:
if (rand.nextInt(200) == 0) {
currentTask=EndermanTask.WAIT;
currentTaskTimer=500 + rand.nextInt(800) + rand.nextInt(1000) * (1 + rand.nextInt(4));
List<EntityMobHomelandEnderman> explorers=HomelandEndermen.getByHomelandRole(this,HomelandRole.OVERWORLD_EXPLORER);
for (int a=0; a < 1 + rand.nextInt(7) && !explorers.isEmpty(); a++) {
if (rand.nextInt(3) == 0) break;
EntityMobHomelandEnderman enderman=explorers.remove(rand.nextInt(explorers.size()));
if (enderman == this) continue;
enderman.currentTask=EndermanTask.WAIT;
enderman.currentTaskTimer=currentTaskTimer + rand.nextInt(500);
enderman.teleportTo(enderman.posX,10000D,enderman.posZ,true);
System.out.println(""String_Node_Str"");
}
teleportTo(posX,10000D,posZ,true);
System.out.println(""String_Node_Str"");
}
break;
default :
}
}
}
}
if (overtakeGroup != -1) {
if (overtakeGroup == groupId) {
if (currentTask == EndermanTask.NONE) {
switch (overtakeGroupRole) {
case TELEPORTER:
if (rand.nextInt(8) == 0) teleportRandomly(12D);
break;
case CHAOSMAKER:
if (isCarrying() && getCarrying().getItem() == Item.getItemFromBlock(Blocks.tnt)) {
if (rand.nextInt(50) == 0) {
for (int attempt=0, xx, yy, zz; attempt < 30; attempt++) {
xx=(int)Math.floor(posX) + rand.nextInt(6) - 3;
yy=(int)Math.floor(posY) + rand.nextInt(3) - 1;
zz=(int)Math.floor(posZ) + rand.nextInt(6) - 3;
if (worldObj.getBlock(xx,yy,zz) == BlockList.end_terrain && worldObj.isAirBlock(xx,yy + 1,zz)) {
worldObj.spawnEntityInWorld(new EntityTNTPrimed(worldObj,xx + 0.5D,yy + 1.5D,zz + 0.5D,this));
setCarrying(null);
break;
}
}
}
}
 else {
currentTask=EndermanTask.GET_TNT;
currentTaskTimer=30 + rand.nextInt(80);
setPosition(posX,10000D,posZ);
}
break;
case LEADER:
case FIGHTER:
if (!(entityToAttack instanceof EntityMobHomelandEnderman)) {
EntityMobHomelandEnderman target=null;
if (overtakeGroupRole == OvertakeGroupRole.LEADER || rand.nextInt(4) == 0) {
List<EntityMobHomelandEnderman> list=HomelandEndermen.getByHomelandRole(this,HomelandRole.ISLAND_LEADERS);
if (!list.isEmpty()) target=list.get(rand.nextInt(list.size()));
}
if (target == null) {
List<EntityMobHomelandEnderman> other=HomelandEndermen.getAll(this);
for (int attempt=0, size=other.size(); attempt < 10; attempt++) {
EntityMobHomelandEnderman potentialTarget=other.get(rand.nextInt(size));
if (potentialTarget == this || potentialTarget.isInSameGroup(this)) continue;
HomelandRole role=potentialTarget.homelandRole;
if (role == HomelandRole.GUARD && rand.nextInt(3) != 0) target=potentialTarget;
 else if (role != HomelandRole.WORKER || rand.nextInt(5) <= 1) target=potentialTarget;
break;
}
}
setAttackTarget(target);
}
break;
default :
}
}
if (!worldObj.getEntitiesWithinAABB(EntityTNTPrimed.class,boundingBox.expand(5D,3D,5D)).isEmpty()) teleportRandomly();
}
 else if (groupId != -1) {
if (rand.nextInt(3) == 0) setGroupMember(overtakeGroup,OvertakeGroupRole.getRandomMember(rand));
 else setGroupMember(-1,null);
}
}
if (entityToAttack != null) {
++attackTpTimer;
if (((attackTpTimer > 50 + rand.nextInt(30) && rand.nextInt(20) == 0) || attackTpTimer > 120) && entityToAttack.getDistanceSqToEntity(this) < 16D) {
teleportRandomly(16D);
attackTpTimer=-80;
}
 else if (entityToAttack.getDistanceSqToEntity(this) > 256D && attackTpTimer > 30 && teleportToEntity(entityToAttack)) {
attackTpTimer=-80;
}
}
 else {
attackTpTimer=-80;
if (currentTask == EndermanTask.NONE && entityToAttack == null && ++randomTpTimer > 50 + rand.nextInt(70)) {
if (rand.nextInt(18) == 0) {
for (int attempt=0; attempt < 5; attempt++) {
if (teleportRandomly(16D)) break;
}
}
randomTpTimer-=80 + rand.nextInt(40);
}
if (screamTimer > 0 && --screamTimer == 0 && isScreaming()) setScreaming(false);
}
}
isJumping=false;
if (entityToAttack != null) faceEntity(entityToAttack,100F,100F);
super.onLivingUpdate();
}","@Override public void onLivingUpdate(){
  if (worldObj.isRemote) {
    refreshRoles();
    int chance=1 + (int)Math.floor(HardcoreEnderExpansion.proxy.getClientSidePlayer().getDistanceToEntity(this) / 20F);
    if (rand.nextInt(chance) == 0) {
      float colFactor=rand.nextFloat() * 0.6F + 0.4F;
      HardcoreEnderExpansion.fx.portalColor(worldObj,posX + (rand.nextDouble() - 0.5D) * width,posY + rand.nextDouble() * height - 0.25D,posZ + (rand.nextDouble() - 0.5D) * width,(rand.nextDouble() - 0.5D) * 2D,-rand.nextDouble(),(rand.nextDouble() - 0.5D) * 2D,colFactor * 0.9F,colFactor * 0.3F,colFactor);
      if (homelandRole != null && rand.nextInt(3) == 0) {
        HardcoreEnderExpansion.fx.portalColor(worldObj,posX + (rand.nextDouble() - 0.5D) * width,posY + rand.nextDouble() * height - 0.25D,posZ + (rand.nextDouble() - 0.5D) * width,(rand.nextDouble() - 0.5D) * 2D,-rand.nextDouble(),(rand.nextDouble() - 0.5D) * 2D,homelandRole.red,homelandRole.green,homelandRole.blue);
      }
      if (overtakeGroupRole != null && rand.nextInt(7) == 0) {
        HardcoreEnderExpansion.fx.portalColor(worldObj,posX + (rand.nextDouble() - 0.5D) * width,posY + rand.nextDouble() * height - 0.25D,posZ + (rand.nextDouble() - 0.5D) * width,(rand.nextDouble() - 0.5D) * 2D,-rand.nextDouble(),(rand.nextDouble() - 0.5D) * 2D,0.3F,0.3F,0.3F);
      }
    }
  }
 else   if (isEntityAlive()) {
    setCustomNameTag(homelandRole.name() + ""String_Node_Str"" + (overtakeGroupRole == null ? ""String_Node_Str"" : overtakeGroupRole.name())+ ""String_Node_Str""+ currentTask+ ""String_Node_Str""+ currentTaskTimer+ ""String_Node_Str""+ entityToAttack);
    if (isWet())     attackEntityFrom(DamageSource.drown,1F);
    if (isWet() || isBurning()) {
      setTarget(null);
      setScreaming(false);
    }
    if (!onGround && ++fallTimer > 17 + rand.nextInt(15)) {
      fallTimer=0;
      for (int attempt=0; attempt < 500; attempt++) {
        if (teleportRandomly(48D)) {
          resetTask();
          System.out.println(""String_Node_Str"" + homelandRole);
          break;
        }
      }
    }
    long overtakeGroup=HomelandEndermen.getOvertakeGroup(this);
    if (currentTask == EndermanTask.WAIT || currentTask == EndermanTask.GET_TNT) {
      moveForward=moveStrafing=0F;
      fallDistance=0F;
      fallTimer=0;
      posY=10000D;
      if (--currentTaskTimer == 0) {
        int tpX, tpY, tpZ;
        for (int attempt=0; attempt < 100; attempt++) {
          tpX=(int)Math.floor(posX) + rand.nextInt(40) - 20;
          tpZ=(int)Math.floor(posZ) + rand.nextInt(40) - 20;
          tpY=worldObj.getTopSolidOrLiquidBlock(tpX,tpZ) - 1;
          if (worldObj.getBlock(tpX,tpY,tpZ) == BlockList.end_terrain) {
            teleportTo(tpX + 0.3D + rand.nextDouble() * 0.4D,tpY + 1D,tpZ + 0.3D + rand.nextDouble() * 0.4D,true);
            if (overtakeGroupRole == OvertakeGroupRole.CHAOSMAKER) {
              setCarrying(new ItemStack(Blocks.tnt));
            }
 else             if (homelandRole == HomelandRole.COLLECTOR && rand.nextInt(4) != 0) {
              setCarrying(new ItemStack(StructureEndermanStash.getRandomBlock(rand)));
            }
            break;
          }
        }
        resetTask();
      }
    }
    if (overtakeGroup == -1) {
      if (currentTask != EndermanTask.NONE && currentTask != EndermanTask.WAIT) {
        --currentTaskTimer;
        if (currentTask == EndermanTask.LISTEN_TO_RECRUITER || currentTask == EndermanTask.RECRUIT_TO_GROUP) {
          moveForward=moveStrafing=0F;
          if (currentTaskTimer == 0 && currentTask == EndermanTask.RECRUIT_TO_GROUP) {
            int chance=50, reportChance=10;
            EntityMobHomelandEnderman target=(EntityMobHomelandEnderman)currentTaskData;
switch (target.homelandRole) {
case WORKER:
              chance=30;
            break;
case GUARD:
          chance=15;
        reportChance=35;
      break;
case INTELLIGENCE:
    chance=80;
  reportChance=22;
break;
case BUSINESSMAN:
chance=40;
reportChance=14;
break;
default :
}
if (rand.nextInt(100) < chance) {
target.setGroupMember(groupId,OvertakeGroupRole.getRandomMember(rand));
for (int attempt=0; attempt < 50; attempt++) {
if (teleportRandomly()) break;
}
System.out.println(""String_Node_Str"");
}
 else if (rand.nextInt(100) < reportChance) {
boolean escaped=false;
double oldX=posX, oldY=posY, oldZ=posZ;
if (rand.nextInt(5) != 0) {
for (int attempt=0; attempt < 20; attempt++) {
if (teleportRandomly()) {
escaped=true;
break;
}
}
}
List<EntityMobHomelandEnderman> guards=HomelandEndermen.getByHomelandRole(this,HomelandRole.GUARD);
System.out.println(""String_Node_Str"");
for (int a=0, amt=Math.max(3,(int)Math.round(guards.size() * 0.3D)); a < amt; a++) {
EntityMobHomelandEnderman guard=guards.get(rand.nextInt(guards.size()));
guard.setScreaming(true);
if (!escaped) guard.setTarget(this);
 else if (rand.nextInt(4) != 0) guard.teleportTo(oldX + 4D * (rand.nextDouble() - 0.5D),oldY + 2D + rand.nextDouble() * 4D,oldZ + 4D * (rand.nextDouble() - 0.5D));
}
}
recruitCooldown=120;
}
}
 else if (currentTask == EndermanTask.STROLL) {
if (currentTaskTimer > 0 && currentTaskTimer < 20 && rand.nextInt(3) == 0) {
Vec3 obj=(Vec3)currentTaskData;
if ((obj.distanceTo(Vec3.createVectorHelper(posX,posY,posZ)) <= 0.5D || rand.nextInt(10) == 0) && randomTpTimer > 30) {
double d=obj.distanceTo(Vec3.createVectorHelper(posX,posY,posZ));
for (int attempt=0; attempt < 30; attempt++) {
if (teleportRandomly(48D)) {
System.out.println(""String_Node_Str"" + d);
currentTaskData=Vec3.createVectorHelper(posX,posY,posZ);
randomTpTimer-=40 + rand.nextInt(30);
break;
}
}
}
}
if (currentTaskTimer == 0 && rand.nextInt(5) == 0) {
currentTaskTimer=10 + rand.nextInt(60);
System.out.println(""String_Node_Str"");
}
}
 else if (currentTask == EndermanTask.WALK) {
ChunkPosition pos=(ChunkPosition)currentTaskData;
if (MathUtil.distance(posX - pos.chunkPosX,posY - pos.chunkPosY,posZ - pos.chunkPosZ) < 3D) resetTask();
}
 else if (currentTask == EndermanTask.COMMUNICATE) {
moveForward=moveStrafing=0F;
}
if (currentTaskTimer <= 0) resetTask();
}
 else if (entityToAttack == null) {
if (groupId != -1 && rand.nextInt(400) == 0 && (recruitCooldown < -120 || --recruitCooldown < -120)) {
List<EntityMobHomelandEnderman> total=HomelandEndermen.getAll(this);
int groupAmt=HomelandEndermen.getInSameGroup(this).size();
int totalAmt=total.size();
if (totalAmt > 8 && (rand.nextInt(5) <= 2 || groupAmt < (totalAmt >> 2) + rand.nextInt(totalAmt >> 3) - rand.nextInt(4))) {
for (int attempt=0; attempt < 5; attempt++) {
EntityMobHomelandEnderman enderman=total.get(rand.nextInt(totalAmt));
if (enderman == this || enderman.groupId != -1 || !enderman.onGround || enderman.homelandRole == HomelandRole.ISLAND_LEADERS || enderman.getDistanceToEntity(this) > 80D) continue;
if (groupAmt > 3 && ((enderman.homelandRole == HomelandRole.GUARD || enderman.homelandRole == HomelandRole.WORKER) && rand.nextInt(5) != 0)) continue;
boolean tp=false;
for (int tpAttempt=0; tpAttempt < 30; tpAttempt++) {
if (teleportTo(enderman.posX + (rand.nextDouble() - 0.5D) * 2D,enderman.posY,enderman.posZ + (rand.nextDouble() - 0.5D) * 2D)) {
tp=true;
break;
}
}
if (!tp) continue;
currentTask=EndermanTask.RECRUIT_TO_GROUP;
currentTaskData=enderman;
enderman.currentTask=EndermanTask.LISTEN_TO_RECRUITER;
enderman.currentTaskTimer=currentTaskTimer=20 + rand.nextInt(60);
System.out.println(""String_Node_Str"" + posX + ""String_Node_Str""+ posY+ ""String_Node_Str""+ posZ);
break;
}
}
}
if (currentTask == EndermanTask.NONE && rand.nextInt(80) == 0) {
switch (homelandRole) {
case ISLAND_LEADERS:
if (rand.nextInt(10) == 0) {
teleportRandomly();
}
 else {
Vec3 look=getLookVec();
for (int attempt=0, pathX, pathY, pathZ; attempt < 12; attempt++) {
if (attempt > 8 || rand.nextInt(6) == 0) look=Vec3.createVectorHelper(rand.nextDouble() - 0.5D,0D,rand.nextDouble() - 0.5D).normalize();
pathX=(int)(posX + look.xCoord * 16D + (rand.nextDouble() - 0.5D) * 5D);
pathZ=(int)(posZ + look.zCoord * 16D + (rand.nextDouble() - 0.5D) * 5D);
pathY=worldObj.getTopSolidOrLiquidBlock(pathX,pathZ) - 1;
if (worldObj.getBlock(pathX,pathY,pathZ) == BlockList.end_terrain && MathUtil.distance(posX - pathX,posY - pathY,posZ - pathZ) > 5D) {
setPathToEntity(worldObj.getEntityPathToXYZ(this,pathX,pathY + 1,pathZ,30F,true,false,false,true));
currentTask=EndermanTask.STROLL;
currentTaskTimer=65 + rand.nextInt(60);
currentTaskData=Vec3.createVectorHelper(posX,posY,posZ);
System.out.println(""String_Node_Str"" + pathX + ""String_Node_Str""+ pathY+ ""String_Node_Str""+ pathZ);
break;
}
}
}
break;
case BUSINESSMAN:
if (rand.nextInt(18) == 0) {
List<EntityMobHomelandEnderman> businessmen=HomelandEndermen.getByHomelandRole(this,HomelandRole.BUSINESSMAN);
if (!businessmen.isEmpty()) {
EntityMobHomelandEnderman enderman=businessmen.get(rand.nextInt(businessmen.size()));
if (enderman.currentTask == EndermanTask.NONE) {
currentTask=enderman.currentTask=EndermanTask.COMMUNICATE;
currentTaskTimer=enderman.currentTaskTimer=30 + rand.nextInt(50 + rand.nextInt(80));
System.out.println(""String_Node_Str"" + posX + ""String_Node_Str""+ posY+ ""String_Node_Str""+ posZ);
}
}
}
 else if (rand.nextInt(10) == 0) {
int walkToX, walkToY, walkToZ;
for (int attempt=0; attempt < 10; attempt++) {
walkToX=(int)posX + rand.nextInt(250) - 125;
walkToZ=(int)posZ + rand.nextInt(250) - 125;
walkToY=worldObj.getTopSolidOrLiquidBlock(walkToX,walkToZ) - 1;
if (worldObj.getBlock(walkToX,walkToY,walkToZ) == BlockList.end_terrain) {
setPathToEntity(worldObj.getEntityPathToXYZ(this,walkToX,walkToY + 1,walkToZ,100F,true,false,false,true));
currentTask=EndermanTask.WALK;
currentTaskTimer=200 + rand.nextInt(100);
currentTaskData=new ChunkPosition(walkToX,walkToY,walkToZ);
System.out.println(""String_Node_Str"" + walkToX + ""String_Node_Str""+ walkToY+ ""String_Node_Str""+ walkToZ);
break;
}
}
}
break;
case WORKER:
if (rand.nextInt(270) == 0 && worldObj.getBlock((int)Math.floor(posX),(int)Math.floor(posY) + 1,(int)Math.floor(posZ)) != BlockList.ender_goo) {
for (int attempt=0, tpX, tpY, tpZ; attempt < 50; attempt++) {
tpX=(int)posX + rand.nextInt(70) - 35;
tpZ=(int)posZ + rand.nextInt(70) - 35;
tpY=worldObj.getTopSolidOrLiquidBlock(tpX,tpZ) - 1;
if (worldObj.getBlock(tpX,tpY,tpZ) == BlockList.ender_goo) {
teleportTo(tpX + 0.5D + (rand.nextDouble() - 0.5D) * 0.3D,tpY + 1D,tpZ + 0.5D + (rand.nextDouble() - 0.5D) * 0.3D,true);
System.out.println(""String_Node_Str"" + tpX + ""String_Node_Str""+ tpY+ ""String_Node_Str""+ tpZ);
break;
}
}
}
break;
case COLLECTOR:
if (rand.nextInt(50) == 0 && (!isCarrying() || rand.nextInt(4) == 0)) {
currentTask=EndermanTask.WAIT;
currentTaskTimer=150 + rand.nextInt(600 + rand.nextInt(1800));
setCarrying(null);
teleportTo(posX,10000D,posZ,true);
System.out.println(""String_Node_Str"");
}
break;
case OVERWORLD_EXPLORER:
if (rand.nextInt(200) == 0) {
currentTask=EndermanTask.WAIT;
currentTaskTimer=500 + rand.nextInt(800) + rand.nextInt(1000) * (1 + rand.nextInt(4));
List<EntityMobHomelandEnderman> explorers=HomelandEndermen.getByHomelandRole(this,HomelandRole.OVERWORLD_EXPLORER);
for (int a=0; a < 1 + rand.nextInt(7) && !explorers.isEmpty(); a++) {
if (rand.nextInt(3) == 0) break;
EntityMobHomelandEnderman enderman=explorers.remove(rand.nextInt(explorers.size()));
if (enderman == this) continue;
enderman.currentTask=EndermanTask.WAIT;
enderman.currentTaskTimer=currentTaskTimer + rand.nextInt(500);
enderman.teleportTo(enderman.posX,10000D,enderman.posZ,true);
System.out.println(""String_Node_Str"");
}
teleportTo(posX,10000D,posZ,true);
System.out.println(""String_Node_Str"");
}
break;
default :
}
}
}
}
if (overtakeGroup != -1) {
if (overtakeGroup == groupId) {
if (currentTask == EndermanTask.NONE) {
switch (overtakeGroupRole) {
case TELEPORTER:
if (rand.nextInt(8) == 0) teleportRandomly(12D);
break;
case CHAOSMAKER:
if (isCarrying() && getCarrying().getItem() == Item.getItemFromBlock(Blocks.tnt)) {
if (rand.nextInt(50) == 0) {
for (int attempt=0, xx, yy, zz; attempt < 30; attempt++) {
xx=(int)Math.floor(posX) + rand.nextInt(6) - 3;
yy=(int)Math.floor(posY) + rand.nextInt(3) - 1;
zz=(int)Math.floor(posZ) + rand.nextInt(6) - 3;
if (worldObj.getBlock(xx,yy,zz) == BlockList.end_terrain && worldObj.isAirBlock(xx,yy + 1,zz)) {
worldObj.spawnEntityInWorld(new EntityTNTPrimed(worldObj,xx + 0.5D,yy + 1.5D,zz + 0.5D,this));
setCarrying(null);
break;
}
}
}
}
 else {
currentTask=EndermanTask.GET_TNT;
currentTaskTimer=30 + rand.nextInt(80);
setPosition(posX,10000D,posZ);
}
break;
case LEADER:
case FIGHTER:
if (!(entityToAttack instanceof EntityMobHomelandEnderman)) {
EntityMobHomelandEnderman target=null;
if (overtakeGroupRole == OvertakeGroupRole.LEADER || rand.nextInt(4) == 0) {
List<EntityMobHomelandEnderman> list=HomelandEndermen.getByHomelandRole(this,HomelandRole.ISLAND_LEADERS);
if (!list.isEmpty()) target=list.get(rand.nextInt(list.size()));
}
if (target == null) {
List<EntityMobHomelandEnderman> other=HomelandEndermen.getAll(this);
for (int attempt=0, size=other.size(); attempt < 10; attempt++) {
EntityMobHomelandEnderman potentialTarget=other.get(rand.nextInt(size));
if (potentialTarget == this || potentialTarget.isInSameGroup(this)) continue;
HomelandRole role=potentialTarget.homelandRole;
if (role == HomelandRole.GUARD && rand.nextInt(3) != 0) target=potentialTarget;
 else if (role != HomelandRole.WORKER || rand.nextInt(5) <= 1) target=potentialTarget;
break;
}
}
setAttackTarget(target);
}
break;
default :
}
}
if (!worldObj.getEntitiesWithinAABB(EntityTNTPrimed.class,boundingBox.expand(5D,3D,5D)).isEmpty()) teleportRandomly();
}
 else if (groupId != -1) {
if (rand.nextInt(3) == 0) setGroupMember(overtakeGroup,OvertakeGroupRole.getRandomMember(rand));
 else setGroupMember(-1,null);
}
}
if (entityToAttack != null) {
++attackTpTimer;
if (((attackTpTimer > 50 + rand.nextInt(30) && rand.nextInt(20) == 0) || attackTpTimer > 120) && entityToAttack.getDistanceSqToEntity(this) < 16D) {
teleportRandomly(16D);
attackTpTimer=-80;
}
 else if (entityToAttack.getDistanceSqToEntity(this) > 256D && attackTpTimer > 30 && teleportToEntity(entityToAttack)) {
attackTpTimer=-80;
}
}
 else {
attackTpTimer=-80;
if (currentTask == EndermanTask.NONE && entityToAttack == null && ++randomTpTimer > 50 + rand.nextInt(70)) {
if (rand.nextInt(18) == 0) {
for (int attempt=0; attempt < 5; attempt++) {
if (teleportRandomly(10D)) break;
}
}
randomTpTimer-=80 + rand.nextInt(40);
}
if (screamTimer > 0 && --screamTimer == 0 && isScreaming()) setScreaming(false);
}
}
isJumping=false;
if (entityToAttack != null) faceEntity(entityToAttack,100F,100F);
super.onLivingUpdate();
}",0.9769177126917712
34748,"@Override protected Entity findPlayerToAttack(){
  EntityPlayer closestPlayer=worldObj.getClosestPlayerToEntity(this,64D);
  if (closestPlayer != null) {
    if (isPlayerStaringIntoEyes(closestPlayer)) {
      if (!shouldActHostile() && teleportRandomly())       return null;
      if (stareTimer == 0)       worldObj.playSoundEffect(closestPlayer.posX,closestPlayer.posY,closestPlayer.posZ,""String_Node_Str"",1F,1F);
 else       if (stareTimer++ == 5) {
        stareTimer=0;
        setScreaming(true);
        return closestPlayer;
      }
    }
 else     stareTimer=0;
  }
  return null;
}","@Override protected Entity findPlayerToAttack(){
  if (worldObj.isRemote)   return null;
  List<EntityPlayerMP> players=worldObj.playerEntities;
  for (  EntityPlayerMP player : players) {
    if (player.theItemInWorldManager.getGameType().isSurvivalOrAdventure() && getDistanceSqToEntity(player) <= 4096D) {
      if (isPlayerStaringIntoEyes(player)) {
        if (!shouldActHostile() && teleportRandomly())         return null;
        if (stareTimer == 0)         worldObj.playSoundEffect(posX,posY,posZ,""String_Node_Str"",1F,1F);
 else         if (stareTimer++ == 5) {
          stareTimer=0;
          setScreaming(true);
          setTarget(player);
          return null;
        }
      }
 else       stareTimer=0;
    }
  }
  return null;
}",0.3985074626865671
34749,"public void renderEnderman(IEndermanRenderer entity,double x,double y,double z,float yaw,float partialTickTime){
  endermanModel.isCarrying=false;
  endermanModel.isAttacking=entity.isScreaming();
  if (entity.isScreaming()) {
    double spazzAmount=0.02D;
    x+=rand.nextGaussian() * spazzAmount;
    z+=rand.nextGaussian() * spazzAmount;
  }
  superDoRender(entity,x,y,z,yaw,partialTickTime);
}","public void renderEnderman(IEndermanRenderer entity,double x,double y,double z,float yaw,float partialTickTime){
  endermanModel.isCarrying=entity.isCarrying();
  endermanModel.isAttacking=entity.isScreaming();
  if (entity.isScreaming()) {
    double spazzAmount=0.02D;
    x+=rand.nextGaussian() * spazzAmount;
    z+=rand.nextGaussian() * spazzAmount;
  }
  superDoRender(entity,x,y,z,yaw,partialTickTime);
}",0.9702970297029704
34750,"@Override protected void genDecorations(BiomeGenBase biome){
  if (currentWorld.provider.dimensionId != 1) {
    super.genDecorations(biome);
    return;
  }
  DragonSavefile file=WorldDataHandler.get(DragonSavefile.class);
  randomGenerator.nextInt(1 + file.getDragonDeathAmount());
  generateOres();
  double distFromCenter=Math.sqrt(MathUtil.square(chunk_X >> 4) + MathUtil.square(chunk_Z >> 4)) * 16D;
  if (distFromCenter < 120D && randomGenerator.nextInt(5) == 0) {
    int xx=randX(), zz=randZ();
    spikeGen.generate(currentWorld,randomGenerator,xx,currentWorld.getTopSolidOrLiquidBlock(xx,zz),zz);
  }
  if (distFromCenter > 102D && Math.abs(randomGenerator.nextGaussian()) < 0.285D) {
    Stopwatch.timeAverage(""String_Node_Str"",64);
    blobGen.prepare(chunk_X + 8,chunk_Z + 8);
    blobGen.generate(currentWorld,randomGenerator,chunk_X + randomGenerator.nextInt(10) + 11,32 + randomGenerator.nextInt(60),chunk_Z + randomGenerator.nextInt(10) + 11);
    Stopwatch.finish(""String_Node_Str"");
  }
  if (distFromCenter > 1280D && randomGenerator.nextFloat() * randomGenerator.nextFloat() > 0.666F && randomGenerator.nextFloat() < 0.1F + (distFromCenter / 15000D)) {
    Stopwatch.timeAverage(""String_Node_Str"",64);
    for (int attempt=0; attempt < randomGenerator.nextInt(3); attempt++) {
      meteoroidGen.generate(currentWorld,randomGenerator,randX(),8 + randomGenerator.nextInt(112),randZ());
    }
    Stopwatch.finish(""String_Node_Str"");
  }
  if (distFromCenter > 500D && randomGenerator.nextInt(1 + randomGenerator.nextInt(3) + (int)Math.floor(Math.max((11500D - distFromCenter) / 1000D,0))) <= randomGenerator.nextInt(4)) {
    Stopwatch.timeAverage(""String_Node_Str"",64);
    for (int attempt=0, max=1 + randomGenerator.nextInt(1 + Math.min(9,(int)Math.floor((distFromCenter - 1700D) / 2100D))); attempt < 440; attempt++) {
      if (endiumOreGen.generate(currentWorld,randomGenerator,randX(),10 + randomGenerator.nextInt(100),randZ()) && --max <= 0)       break;
    }
    Stopwatch.finish(""String_Node_Str"");
  }
  Stopwatch.timeAverage(""String_Node_Str"",64);
  for (int attempt=0, placed=0, xx, yy, zz; attempt < 22 && placed < 4 + randomGenerator.nextInt(5); attempt++) {
    xx=randX();
    yy=35 + randomGenerator.nextInt(92);
    zz=randZ();
    if (currentWorld.getBlock(xx,yy,zz) == Blocks.end_stone && endPowderOreGen.generate(currentWorld,randomGenerator,xx,yy,zz)) {
      ++placed;
    }
  }
  Stopwatch.finish(""String_Node_Str"");
  if (chunk_X == 0 && chunk_Z == 0) {
    EntityBossDragon dragon=new EntityBossDragon(currentWorld);
    dragon.setLocationAndAngles(0D,128D,0D,randomGenerator.nextFloat() * 360F,0F);
    currentWorld.spawnEntityInWorld(dragon);
    file.setDragonExists();
  }
}","@Override protected void genDecorations(BiomeGenBase biome){
  if (currentWorld.provider.dimensionId != 1) {
    super.genDecorations(biome);
    return;
  }
  DragonSavefile file=WorldDataHandler.get(DragonSavefile.class);
  randomGenerator.nextInt(1 + file.getDragonDeathAmount());
  generateOres();
  double distFromCenter=Math.sqrt(MathUtil.square(chunk_X >> 4) + MathUtil.square(chunk_Z >> 4)) * 16D;
  if (distFromCenter < 120D && randomGenerator.nextInt(5) == 0) {
    int xx=randX(), zz=randZ();
    spikeGen.generate(currentWorld,randomGenerator,xx,currentWorld.getTopSolidOrLiquidBlock(xx,zz),zz);
  }
  if (distFromCenter > 102D && Math.abs(randomGenerator.nextGaussian()) < 0.285D) {
    Stopwatch.timeAverage(""String_Node_Str"",64);
    blobGen.prepare(chunk_X + 8,chunk_Z + 8);
    blobGen.generate(currentWorld,randomGenerator,chunk_X + randomGenerator.nextInt(10) + 11,32 + randomGenerator.nextInt(60),chunk_Z + randomGenerator.nextInt(10) + 11);
    Stopwatch.finish(""String_Node_Str"");
  }
  if (distFromCenter > 1280D && randomGenerator.nextFloat() * randomGenerator.nextFloat() > 0.666F && randomGenerator.nextFloat() < 0.1F + (distFromCenter / 15000D)) {
    Stopwatch.timeAverage(""String_Node_Str"",64);
    for (int attempt=0; attempt < randomGenerator.nextInt(3); attempt++) {
      meteoroidGen.generate(currentWorld,randomGenerator,randX(),8 + randomGenerator.nextInt(112),randZ());
    }
    Stopwatch.finish(""String_Node_Str"");
  }
  if (distFromCenter > 500D && randomGenerator.nextInt(1 + randomGenerator.nextInt(3) + (int)Math.floor(Math.max((11500D - distFromCenter) / 1000D,0))) <= randomGenerator.nextInt(4)) {
    Stopwatch.timeAverage(""String_Node_Str"",64);
    for (int attempt=0, max=1 + randomGenerator.nextInt(1 + Math.min(9,(int)Math.floor((Math.max(0,distFromCenter - 1700D)) / 2100D))); attempt < 440; attempt++) {
      if (endiumOreGen.generate(currentWorld,randomGenerator,randX(),10 + randomGenerator.nextInt(100),randZ()) && --max <= 0)       break;
    }
    Stopwatch.finish(""String_Node_Str"");
  }
  Stopwatch.timeAverage(""String_Node_Str"",64);
  for (int attempt=0, placed=0, xx, yy, zz; attempt < 22 && placed < 4 + randomGenerator.nextInt(5); attempt++) {
    xx=randX();
    yy=35 + randomGenerator.nextInt(92);
    zz=randZ();
    if (currentWorld.getBlock(xx,yy,zz) == Blocks.end_stone && endPowderOreGen.generate(currentWorld,randomGenerator,xx,yy,zz)) {
      ++placed;
    }
  }
  Stopwatch.finish(""String_Node_Str"");
  if (chunk_X == 0 && chunk_Z == 0) {
    EntityBossDragon dragon=new EntityBossDragon(currentWorld);
    dragon.setLocationAndAngles(0D,128D,0D,randomGenerator.nextFloat() * 360F,0F);
    currentWorld.spawnEntityInWorld(dragon);
    file.setDragonExists();
  }
}",0.9978046103183316
34751,"public void genHomeland(){
  for (int attempt=0, placed=0, amount=rand.nextInt(3) + 5; attempt < 170 && placed < amount; attempt++) {
    if (generateStructure(genGooLake))     ++placed;
  }
  for (int cx=0; cx < world.getChunkAmountX(); cx++) {
    for (int cz=0; cz < world.getChunkAmountZ(); cz++) {
      if (rand.nextInt(5) <= 2) {
        int height=rand.nextInt(14) + (data.hasDeviation(IslandBiomeEnchantedIsland.TALL_PILES) ? 6 + rand.nextInt(8) : 4);
        int radius=rand.nextInt(2) + 1;
        int ox=cx * 16 + rand.nextInt(16), oz=cz * 16 + rand.nextInt(16), oy=world.getHighestY(ox,oz);
        if (oy > 0) {
          boolean generateObsidian=true;
          for (int xx=ox - radius; xx <= ox + radius && generateObsidian; ++xx) {
            for (int zz=oz - radius; zz <= oz + radius && generateObsidian; ++zz) {
              if (MathUtil.square(xx - ox) + MathUtil.square(zz - oz) <= radius * radius + 1) {
                if (Math.abs(world.getHighestY(xx,zz) - oy) > 2)                 generateObsidian=false;
              }
            }
          }
          if (generateObsidian) {
            for (int xx=ox - radius; xx <= ox + radius; ++xx) {
              for (int zz=oz - radius; zz <= oz + radius; ++zz) {
                for (int yy=world.getHighestY(xx,zz) + 1; yy < oy + height && yy < 128; ++yy) {
                  if (MathUtil.square(xx - ox) + MathUtil.square(zz - oz) <= radius * radius + 0.5D + rand.nextGaussian() * 0.7D) {
                    world.setBlock(xx,yy,zz,BlockList.obsidian_falling,0,true);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  for (int attempt=0, placed=0, placedMax=8 + rand.nextInt(5); attempt < 36 && placed < placedMax; attempt++) {
    if (generateStructure(genRoads))     ++placed;
  }
  TObjectIntHashMap<HomelandRole> map=new TObjectIntHashMap<>();
  for (int spawnAttempt=0, spawnedTotal=42 + rand.nextInt(24) + rand.nextInt(12); spawnAttempt < spawnedTotal; spawnAttempt++) {
    EntityMobHomelandEnderman enderman=new EntityMobHomelandEnderman(null);
    HomelandRole role=HomelandRole.WORKER;
    if (rand.nextInt(7) == 0)     role=HomelandRole.OVERWORLD_EXPLORER;
 else     if (rand.nextInt(6) == 0)     role=HomelandRole.BUSINESSMAN;
 else     if (rand.nextInt(4) == 0)     role=HomelandRole.COLLECTOR;
 else     if (rand.nextInt(4) == 0)     role=HomelandRole.INTELLIGENCE;
 else     if (rand.nextInt(3) == 0)     role=HomelandRole.GUARD;
    enderman.setHomelandRole(role);
    map.adjustOrPutValue(role,1,1);
    for (int posAttempt=0, xx, yy, zz; posAttempt < 20; posAttempt++) {
      xx=rand.nextInt(ComponentIsland.size - 40) + 20;
      zz=rand.nextInt(ComponentIsland.size - 40) + 20;
      yy=world.getHighestY(xx,zz);
      if (world.getBlock(xx,yy,zz) == topBlock) {
        enderman.setPosition(xx,yy + 1,zz);
        world.addEntity(enderman);
        break;
      }
    }
  }
  for (  HomelandRole role : map.keySet())   System.out.println(""String_Node_Str"" + role.name() + ""String_Node_Str""+ map.get(role));
  List<EntityMobHomelandEnderman> endermanList=world.getAllEntities(EntityMobHomelandEnderman.class);
  int size=endermanList.size();
  if (size > 0) {
    for (int leaders=1 + rand.nextInt(3 + rand.nextInt(3)); leaders > 0 && size > 0; leaders--) {
      endermanList.remove(rand.nextInt(size--)).setHomelandRole(HomelandRole.ISLAND_LEADERS);
    }
  }
  for (int groupLeaders=rand.nextInt(3 + rand.nextInt(3) * rand.nextInt(2)); groupLeaders > 0 && size > 0; groupLeaders--) {
    long groupId=endermanList.remove(rand.nextInt(size--)).setNewGroupLeader();
    if (groupId == -1)     continue;
    for (int state=rand.nextBoolean() ? rand.nextInt(1 + rand.nextInt(4 + rand.nextInt(8))) : 0; state > 0 && size > 0; state--) {
      endermanList.remove(rand.nextInt(size--)).setGroupMember(groupId,OvertakeGroupRole.getRandomMember(rand));
    }
  }
}","public void genHomeland(){
  for (int attempt=0, placed=0, amount=rand.nextInt(3) + 5; attempt < 170 && placed < amount; attempt++) {
    if (generateStructure(genGooLake))     ++placed;
  }
  for (int cx=0; cx < world.getChunkAmountX(); cx++) {
    for (int cz=0; cz < world.getChunkAmountZ(); cz++) {
      if (rand.nextInt(5) <= 2) {
        int height=rand.nextInt(14) + (data.hasDeviation(IslandBiomeEnchantedIsland.TALL_PILES) ? 6 + rand.nextInt(8) : 4);
        int radius=rand.nextInt(2) + 1;
        int ox=cx * 16 + rand.nextInt(16), oz=cz * 16 + rand.nextInt(16), oy=world.getHighestY(ox,oz);
        if (oy > 0) {
          boolean generateObsidian=true;
          for (int xx=ox - radius; xx <= ox + radius && generateObsidian; ++xx) {
            for (int zz=oz - radius; zz <= oz + radius && generateObsidian; ++zz) {
              if (MathUtil.square(xx - ox) + MathUtil.square(zz - oz) <= radius * radius + 1) {
                if (Math.abs(world.getHighestY(xx,zz) - oy) > 2)                 generateObsidian=false;
              }
            }
          }
          if (generateObsidian) {
            for (int xx=ox - radius; xx <= ox + radius; ++xx) {
              for (int zz=oz - radius; zz <= oz + radius; ++zz) {
                for (int yy=world.getHighestY(xx,zz) + 1; yy < oy + height && yy < 128; ++yy) {
                  if (MathUtil.square(xx - ox) + MathUtil.square(zz - oz) <= radius * radius + 0.5D + rand.nextGaussian() * 0.7D) {
                    world.setBlock(xx,yy,zz,BlockList.obsidian_falling,0,true);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  for (int attempt=0, placed=0, placedMax=8 + rand.nextInt(5); attempt < 36 && placed < placedMax; attempt++) {
    if (generateStructure(genRoads))     ++placed;
  }
  TObjectIntHashMap<HomelandRole> map=new TObjectIntHashMap<>();
  for (int spawnAttempt=0, spawnedTotal=42 + rand.nextInt(24) + rand.nextInt(12); spawnAttempt < spawnedTotal; spawnAttempt++) {
    EntityMobHomelandEnderman enderman=new EntityMobHomelandEnderman(null);
    HomelandRole role=HomelandRole.WORKER;
    if (rand.nextInt(10) == 0)     role=HomelandRole.OVERWORLD_EXPLORER;
 else     if (rand.nextInt(7) == 0)     role=HomelandRole.BUSINESSMAN;
 else     if (rand.nextInt(6) == 0)     role=HomelandRole.COLLECTOR;
 else     if (rand.nextInt(5) == 0)     role=HomelandRole.INTELLIGENCE;
 else     if (rand.nextInt(7) <= 2)     role=HomelandRole.GUARD;
    enderman.setHomelandRole(role);
    map.adjustOrPutValue(role,1,1);
    for (int posAttempt=0, xx, yy, zz; posAttempt < 20; posAttempt++) {
      xx=rand.nextInt(ComponentIsland.size - 40) + 20;
      zz=rand.nextInt(ComponentIsland.size - 40) + 20;
      yy=world.getHighestY(xx,zz);
      if (world.getBlock(xx,yy,zz) == topBlock) {
        enderman.setPosition(xx,yy + 1,zz);
        world.addEntity(enderman);
        break;
      }
    }
  }
  for (  HomelandRole role : map.keySet())   System.out.println(""String_Node_Str"" + role.name() + ""String_Node_Str""+ map.get(role));
  List<EntityMobHomelandEnderman> endermanList=world.getAllEntities(EntityMobHomelandEnderman.class);
  int size=endermanList.size();
  if (size > 0) {
    for (int leaders=1 + rand.nextInt(3 + rand.nextInt(3)); leaders > 0 && size > 0; leaders--) {
      endermanList.remove(rand.nextInt(size--)).setHomelandRole(HomelandRole.ISLAND_LEADERS);
    }
  }
  for (int groupLeaders=rand.nextInt(3 + rand.nextInt(3) * rand.nextInt(2)); groupLeaders > 0 && size > 0; groupLeaders--) {
    long groupId=endermanList.remove(rand.nextInt(size--)).setNewGroupLeader();
    if (groupId == -1)     continue;
    for (int state=rand.nextBoolean() ? rand.nextInt(1 + rand.nextInt(4 + rand.nextInt(8))) : 0; state > 0 && size > 0; state--) {
      endermanList.remove(rand.nextInt(size--)).setGroupMember(groupId,OvertakeGroupRole.getRandomMember(rand));
    }
  }
}",0.9970667006759342
34752,"public void generateInStructure(ComponentScatteredFeatureCustom structure,World world,StructureBoundingBox bb,int addX,int addY,int addZ){
  if (minBlockY == ySize && maxBlockY == 0)   return;
  boolean hasBlocksToUpdate=!scheduledForUpdate.isEmpty(), hasTileEntities=!storedTileEntities.isEmpty(), continueY=true;
  Block block;
  for (int x=0; x < 16; x++) {
    for (int z=0; z < 16; z++) {
      if (!alreadyGeneratedXZ.contains(x * 16 + z)) {
        for (int y=minBlockY; y <= maxBlockY && continueY; y++) {
          if (continueY && y == maxBlockY) {
            alreadyGeneratedXZ.add(x * 16 + z);
            for (Iterator<Entry<ChunkCoordIntPair,Entity>> iter=storedEntities.entrySet().iterator(); iter.hasNext(); ) {
              Entry<ChunkCoordIntPair,Entity> entry=iter.next();
              if (entry.getKey().chunkXPos == x && entry.getKey().chunkZPos == z) {
                Entity entity=entry.getValue();
                int ix=(int)Math.floor(entity.posX), iy=(int)Math.floor(entity.posY), iz=(int)Math.floor(entity.posZ);
                double fx=entity.posX - ix, fy=entity.posY - iy, fz=entity.posZ - iz;
                ix+=addX;
                iy+=addY;
                iz+=addZ;
                entity.setWorld(world);
                entity.setPosition(structure.getXWithOffset(ix,iz) + fx,structure.getYWithOffset(iy) + fy + 0.01D,structure.getZWithOffset(ix,iz) + fz);
                world.spawnEntityInWorld(entity);
                iter.remove();
              }
            }
          }
          if ((block=getBlock(x,y,z)) == Blocks.air)           continue;
          if (hasBlocksToUpdate && isBlockScheduledForUpdate(x,y,z))           continueY=structure.placeBlockAndUpdateUnsafe(block,getMetadata(x,y,z),addX + this.x * 16 + x,addY + y,addZ + this.z * 16 + z,world,bb);
 else           continueY=structure.placeBlockUnsafe(block,getMetadata(x,y,z),addX + this.x * 16 + x,addY + y,addZ + this.z * 16 + z,world,bb);
          if (continueY && hasTileEntities && storedTileEntityClues.containsKey(y * 256 + x * 16 + z)) {
            String key=storedTileEntityClues.get(y * 256 + x * 16 + z);
            TileEntity tileEntity=structure.getBlockTileEntityUnsafe(addX + this.x * 16 + x,addY + y,addZ + this.z * 16 + z,world,bb);
            if (tileEntity == null)             Log.debug(""String_Node_Str"",key,x,y,z);
 else             storedTileEntities.get(key).onTileEntityRequested(key,tileEntity,world.rand);
          }
        }
      }
      continueY=true;
    }
  }
}","public void generateInStructure(ComponentScatteredFeatureCustom structure,World world,StructureBoundingBox bb,int addX,int addY,int addZ){
  if (minBlockY == ySize && maxBlockY == 0)   return;
  boolean hasBlocksToUpdate=!scheduledForUpdate.isEmpty(), hasTileEntities=!storedTileEntities.isEmpty(), continueY=true;
  Block block;
  for (int x=0; x < 16; x++) {
    for (int z=0; z < 16; z++) {
      if (!alreadyGeneratedXZ.contains(x * 16 + z)) {
        for (int y=minBlockY; y <= maxBlockY && continueY; y++) {
          if (continueY && y == maxBlockY) {
            alreadyGeneratedXZ.add(x * 16 + z);
            for (Iterator<Entry<ChunkCoordIntPair,Entity>> iter=storedEntities.entrySet().iterator(); iter.hasNext(); ) {
              Entry<ChunkCoordIntPair,Entity> entry=iter.next();
              if (entry.getKey().chunkXPos == x && entry.getKey().chunkZPos == z) {
                Entity entity=entry.getValue();
                int ix=(int)Math.floor(entity.posX), iy=(int)Math.floor(entity.posY), iz=(int)Math.floor(entity.posZ);
                double fx=entity.posX - ix, fy=entity.posY - iy, fz=entity.posZ - iz;
                ix+=addX;
                iy+=addY;
                iz+=addZ;
                entity.dimension=world.provider.dimensionId;
                entity.setWorld(world);
                entity.setPosition(structure.getXWithOffset(ix,iz) + fx,structure.getYWithOffset(iy) + fy + 0.01D,structure.getZWithOffset(ix,iz) + fz);
                world.spawnEntityInWorld(entity);
                iter.remove();
              }
            }
          }
          if ((block=getBlock(x,y,z)) == Blocks.air)           continue;
          if (hasBlocksToUpdate && isBlockScheduledForUpdate(x,y,z))           continueY=structure.placeBlockAndUpdateUnsafe(block,getMetadata(x,y,z),addX + this.x * 16 + x,addY + y,addZ + this.z * 16 + z,world,bb);
 else           continueY=structure.placeBlockUnsafe(block,getMetadata(x,y,z),addX + this.x * 16 + x,addY + y,addZ + this.z * 16 + z,world,bb);
          if (continueY && hasTileEntities && storedTileEntityClues.containsKey(y * 256 + x * 16 + z)) {
            String key=storedTileEntityClues.get(y * 256 + x * 16 + z);
            TileEntity tileEntity=structure.getBlockTileEntityUnsafe(addX + this.x * 16 + x,addY + y,addZ + this.z * 16 + z,world,bb);
            if (tileEntity == null)             Log.debug(""String_Node_Str"",key,x,y,z);
 else             storedTileEntities.get(key).onTileEntityRequested(key,tileEntity,world.rand);
          }
        }
      }
      continueY=true;
    }
  }
}",0.9880274779195288
34753,"@Override public boolean mouseClicked(GuiContainer gui,int mouseX,int mouseY,int button){
  if (button == 0 || button == 1) {
    return handleItemStack(GuiContainerManager.getStackMouseOver(gui));
  }
 else   return false;
}","@Override public boolean mouseClicked(GuiContainer gui,int mouseX,int mouseY,int button){
  if (button == 0 || button == 1) {
    if (gui instanceof GuiRecipe)     return handleItemStack(GuiContainerManager.getStackMouseOver(gui));
 else     return handleItemStack(LayoutManager.itemPanel.getStackMouseOver(mouseX,mouseY));
  }
 else   return false;
}",0.78125
34754,"@Override public void integrate(){
  if (FMLCommonHandler.instance().getSide() != Side.CLIENT)   return;
  GuiContainerManager.inputHandlers.addFirst(new IContainerInputHandler(){
    private boolean handleItemStack(    ItemStack is){
      if (is == null)       return false;
      UniqueIdentifier uniqueId=null;
      try {
        uniqueId=GameRegistry.findUniqueIdentifierFor(is.getItem());
      }
 catch (      Exception e) {
      }
      if (uniqueId != null && uniqueId.modId.equalsIgnoreCase(""String_Node_Str"")) {
        KnowledgeObject<? extends IKnowledgeObjectInstance<?>> obj=null;
        if (is.getItem() == ItemList.spawn_eggs)         obj=KnowledgeObject.<ObjectMob>getObject(ItemSpawnEggs.getMobFromDamage(is.getItemDamage()));
 else         if (is.getItem() instanceof ItemBlock)         obj=CompendiumEvents.getBlockObject(is);
 else         obj=KnowledgeObject.<ObjectItem>getObject(is.getItem());
        CompendiumEventsClient.openCompendium(obj);
        return true;
      }
      return false;
    }
    @Override public boolean lastKeyTyped(    GuiContainer gui,    char keyChar,    int keyCode){
      if (keyCode == NEIClientConfig.getKeyBinding(""String_Node_Str"") || keyCode == NEIClientConfig.getKeyBinding(""String_Node_Str"")) {
        return handleItemStack(GuiContainerManager.getStackMouseOver(gui));
      }
 else       return false;
    }
    @Override public boolean mouseClicked(    GuiContainer gui,    int mouseX,    int mouseY,    int button){
      if (button == 0 || button == 1) {
        return handleItemStack(GuiContainerManager.getStackMouseOver(gui));
      }
 else       return false;
    }
    @Override public void onMouseUp(    GuiContainer gui,    int mouseX,    int mouseY,    int button){
    }
    @Override public void onMouseScrolled(    GuiContainer gui,    int mouseX,    int mouseY,    int scrolled){
    }
    @Override public void onMouseDragged(    GuiContainer gui,    int mouseX,    int mouseY,    int button,    long heldTime){
    }
    @Override public void onMouseClicked(    GuiContainer gui,    int mouseX,    int mouseY,    int button){
    }
    @Override public void onKeyTyped(    GuiContainer gui,    char keyChar,    int keyCode){
    }
    @Override public boolean mouseScrolled(    GuiContainer gui,    int mouseX,    int mouseY,    int scrolled){
      return false;
    }
    @Override public boolean keyTyped(    GuiContainer gui,    char keyChar,    int keyCode){
      return false;
    }
  }
);
}","@Override public void integrate(){
  if (FMLCommonHandler.instance().getSide() != Side.CLIENT)   return;
  GuiContainerManager.inputHandlers.addFirst(new IContainerInputHandler(){
    private boolean handleItemStack(    ItemStack is){
      if (is == null)       return false;
      UniqueIdentifier uniqueId=null;
      try {
        uniqueId=GameRegistry.findUniqueIdentifierFor(is.getItem());
      }
 catch (      Exception e) {
      }
      if (uniqueId != null && uniqueId.modId.equalsIgnoreCase(""String_Node_Str"")) {
        KnowledgeObject<? extends IKnowledgeObjectInstance<?>> obj=null;
        if (is.getItem() == ItemList.spawn_eggs)         obj=KnowledgeObject.<ObjectMob>getObject(ItemSpawnEggs.getMobFromDamage(is.getItemDamage()));
 else         if (is.getItem() instanceof ItemBlock)         obj=CompendiumEvents.getBlockObject(is);
 else         obj=KnowledgeObject.<ObjectItem>getObject(is.getItem());
        CompendiumEventsClient.openCompendium(obj);
        return true;
      }
      return false;
    }
    @Override public boolean lastKeyTyped(    GuiContainer gui,    char keyChar,    int keyCode){
      if (keyCode == NEIClientConfig.getKeyBinding(""String_Node_Str"") || keyCode == NEIClientConfig.getKeyBinding(""String_Node_Str"")) {
        return handleItemStack(GuiContainerManager.getStackMouseOver(gui));
      }
 else       return false;
    }
    @Override public boolean mouseClicked(    GuiContainer gui,    int mouseX,    int mouseY,    int button){
      if (button == 0 || button == 1) {
        if (gui instanceof GuiRecipe)         return handleItemStack(GuiContainerManager.getStackMouseOver(gui));
 else         return handleItemStack(LayoutManager.itemPanel.getStackMouseOver(mouseX,mouseY));
      }
 else       return false;
    }
    @Override public void onMouseUp(    GuiContainer gui,    int mouseX,    int mouseY,    int button){
    }
    @Override public void onMouseScrolled(    GuiContainer gui,    int mouseX,    int mouseY,    int scrolled){
    }
    @Override public void onMouseDragged(    GuiContainer gui,    int mouseX,    int mouseY,    int button,    long heldTime){
    }
    @Override public void onMouseClicked(    GuiContainer gui,    int mouseX,    int mouseY,    int button){
    }
    @Override public void onKeyTyped(    GuiContainer gui,    char keyChar,    int keyCode){
    }
    @Override public boolean mouseScrolled(    GuiContainer gui,    int mouseX,    int mouseY,    int scrolled){
      return false;
    }
    @Override public boolean keyTyped(    GuiContainer gui,    char keyChar,    int keyCode){
      return false;
    }
  }
);
}",0.9737666405638216
34755,"@EventHandler public void onPreInit(FMLPreInitializationEvent e){
  Stopwatch.time(""String_Node_Str"");
  ReflectionPublicizer.load();
  modVersion=e.getModMetadata().version;
  configPath=e.getSuggestedConfigurationFile().getParentFile().getName();
  ConfigHandler.register(e.getSuggestedConfigurationFile());
  ModCreativeTab.registerTab();
  BlockList.loadBlocks();
  ItemList.loadItems();
  proxy.loadConfiguration();
  DimensionOverride.setup();
  BlockReplaceHelper.replaceBlock(Blocks.dragon_egg,BlockDragonEggCustom.class,ItemBlockDragonEgg.class);
  BlockList.registerBlocks();
  BlockList.obsidian_falling.setHarvestLevel(""String_Node_Str"",3);
  BlockList.obsidian_stairs.setHarvestLevel(""String_Node_Str"",3);
  BlockList.obsidian_special.setHarvestLevel(""String_Node_Str"",3);
  BlockList.obsidian_special_glow.setHarvestLevel(""String_Node_Str"",3);
  BlockList.stardust_ore.setHarvestLevel(""String_Node_Str"",3);
  BlockList.igneous_rock_ore.setHarvestLevel(""String_Node_Str"",2);
  BlockList.instability_orb_ore.setHarvestLevel(""String_Node_Str"",3);
  BlockList.sphalerite.setHarvestLevel(""String_Node_Str"",1);
  BlockList.end_terrain.setHarvestLevel(""String_Node_Str"",1);
  BlockList.cinder.setHarvestLevel(""String_Node_Str"",2);
  BlockList.spooky_log.setHarvestLevel(""String_Node_Str"",0);
  Blocks.fire.setFireInfo(BlockList.spooky_log,10,10);
  Blocks.fire.setFireInfo(BlockList.spooky_leaves,40,30);
  MinecraftForge.EVENT_BUS.register(BlockList.essence_altar);
  MinecraftForge.EVENT_BUS.register(BlockList.ender_goo);
  ItemList.registerItems();
  MinecraftForge.EVENT_BUS.register(ItemList.enderman_head);
  MinecraftForge.EVENT_BUS.register(ItemList.scorching_pickaxe);
  GameRegistry.registerFuelHandler((IFuelHandler)ItemList.igneous_rock);
  FluidContainerRegistry.registerFluidContainer(BlockEnderGoo.fluid,new ItemStack(ItemList.bucket_ender_goo),FluidContainerRegistry.EMPTY_BUCKET);
  EntityList.stringToClassMapping.remove(""String_Node_Str"");
  EntityList.IDtoClassMapping.remove(Integer.valueOf(200));
  EntityList.addMapping(EntityBlockEnderCrystal.class,""String_Node_Str"",200);
  EntityRegistry.registerModEntity(EntityBossDragon.class,""String_Node_Str"",8,this,320,1,true);
  EntityRegistry.registerModEntity(EntityBossEnderDemon.class,""String_Node_Str"",21,this,512,1,true);
  EntityRegistry.registerModEntity(EntityMiniBossEnderEye.class,""String_Node_Str"",11,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMiniBossFireFiend.class,""String_Node_Str"",23,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobAngryEnderman.class,""String_Node_Str"",1,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobBabyEnderman.class,""String_Node_Str"",16,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobParalyzedEnderman.class,""String_Node_Str"",24,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobEnderGuardian.class,""String_Node_Str"",22,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobVampiricBat.class,""String_Node_Str"",10,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobInfestedBat.class,""String_Node_Str"",12,this,128,1,true);
  EntityRegistry.registerModEntity(EntityMobForestGhost.class,""String_Node_Str"",13,this,32,1,true);
  EntityRegistry.registerModEntity(EntityMobLouse.class,""String_Node_Str"",34,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobFireGolem.class,""String_Node_Str"",14,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobScorchingLens.class,""String_Node_Str"",15,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobHauntedMiner.class,""String_Node_Str"",35,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobCorporealMirage.class,""String_Node_Str"",29,this,256,1,true);
  EntityRegistry.registerModEntity(EntityBlockFallingDragonEgg.class,""String_Node_Str"",25,this,128,1,true);
  EntityRegistry.registerModEntity(EntityBlockFallingObsidian.class,""String_Node_Str"",26,this,128,1,true);
  EntityRegistry.registerModEntity(EntityBlockTempleDragonEgg.class,""String_Node_Str"",7,this,420,1,true);
  EntityRegistry.registerModEntity(EntityBlockEnhancedTNTPrimed.class,""String_Node_Str"",31,this,128,1,true);
  EntityRegistry.registerModEntity(EntityItemIgneousRock.class,""String_Node_Str"",9,this,64,1,true);
  EntityRegistry.registerModEntity(EntityItemInstabilityOrb.class,""String_Node_Str"",6,this,64,1,true);
  EntityRegistry.registerModEntity(EntityItemAltar.class,""String_Node_Str"",19,this,128,1,false);
  EntityRegistry.registerModEntity(EntityItemEndPowder.class,""String_Node_Str"",27,this,64,1,true);
  EntityRegistry.registerModEntity(EntityItemDragonEgg.class,""String_Node_Str"",37,this,64,1,true);
  EntityRegistry.registerModEntity(EntityProjectileDragonFireball.class,""String_Node_Str"",2,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileDragonFreezeball.class,""String_Node_Str"",3,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileEnhancedEnderPearl.class,""String_Node_Str"",5,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileFlamingBall.class,""String_Node_Str"",17,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileGolemFireball.class,""String_Node_Str"",18,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileMinerShot.class,""String_Node_Str"",36,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileCorporealMirageOrb.class,""String_Node_Str"",28,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectilePotionOfInstability.class,""String_Node_Str"",30,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileSpatialDash.class,""String_Node_Str"",32,this,128,1,true);
  EntityRegistry.registerModEntity(EntityWeatherLightningBoltSafe.class,""String_Node_Str"",4,this,512,1,false);
  EntityRegistry.registerModEntity(EntityWeatherLightningBoltDemon.class,""String_Node_Str"",21,this,512,1,false);
  EntityRegistry.registerModEntity(EntityTechnicalBiomeInteraction.class,""String_Node_Str"",38,this,0,0,false);
  GameRegistryUtil.registerTileEntity(TileEntityEssenceAltar.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEnhancedBrewingStand.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEndermanHead.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityLaserBeam.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityCustomSpawner.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntitySoulCharm.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityDecompositionTable.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEnergyExtractionTable.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEnergyCluster.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEnhancedTNT.class,""String_Node_Str"");
  AchievementManager.register();
  AchievementEvents.register();
  MinecraftForge.EVENT_BUS.register(new MiscEvents());
  FMLCommonHandler.instance().bus().register(new UpdateNotificationManager());
  CompendiumEvents.register();
  TempleEvents.register();
  InfestationEvents.register();
  CharmPouchHandler.register();
  WorldDataHandler.register();
  proxy.registerSidedEvents();
  proxy.registerRenderers();
  notifications.register();
  Stopwatch.finish(""String_Node_Str"");
}","@EventHandler public void onPreInit(FMLPreInitializationEvent e){
  Stopwatch.time(""String_Node_Str"");
  ReflectionPublicizer.load();
  modVersion=e.getModMetadata().version;
  configPath=e.getSuggestedConfigurationFile().getParentFile().getName();
  ConfigHandler.register(e.getSuggestedConfigurationFile());
  ModCreativeTab.registerTab();
  BlockList.loadBlocks();
  ItemList.loadItems();
  proxy.loadConfiguration();
  DimensionOverride.setup();
  BlockReplaceHelper.replaceBlock(Blocks.dragon_egg,BlockDragonEggCustom.class,ItemBlockDragonEgg.class);
  BlockList.registerBlocks();
  BlockList.obsidian_falling.setHarvestLevel(""String_Node_Str"",3);
  BlockList.obsidian_stairs.setHarvestLevel(""String_Node_Str"",3);
  BlockList.obsidian_special.setHarvestLevel(""String_Node_Str"",3);
  BlockList.obsidian_special_glow.setHarvestLevel(""String_Node_Str"",3);
  BlockList.stardust_ore.setHarvestLevel(""String_Node_Str"",3);
  BlockList.igneous_rock_ore.setHarvestLevel(""String_Node_Str"",2);
  BlockList.instability_orb_ore.setHarvestLevel(""String_Node_Str"",3);
  BlockList.sphalerite.setHarvestLevel(""String_Node_Str"",1);
  BlockList.end_terrain.setHarvestLevel(""String_Node_Str"",1);
  BlockList.cinder.setHarvestLevel(""String_Node_Str"",2);
  BlockList.spooky_log.setHarvestLevel(""String_Node_Str"",0);
  Blocks.fire.setFireInfo(BlockList.spooky_log,10,10);
  Blocks.fire.setFireInfo(BlockList.spooky_leaves,40,30);
  MinecraftForge.EVENT_BUS.register(BlockList.essence_altar);
  MinecraftForge.EVENT_BUS.register(BlockList.ender_goo);
  ItemList.registerItems();
  MinecraftForge.EVENT_BUS.register(ItemList.enderman_head);
  MinecraftForge.EVENT_BUS.register(ItemList.scorching_pickaxe);
  GameRegistry.registerFuelHandler((IFuelHandler)ItemList.igneous_rock);
  FluidContainerRegistry.registerFluidContainer(BlockEnderGoo.fluid,new ItemStack(ItemList.bucket_ender_goo),FluidContainerRegistry.EMPTY_BUCKET);
  EntityList.stringToClassMapping.remove(""String_Node_Str"");
  EntityList.IDtoClassMapping.remove(Integer.valueOf(200));
  EntityList.addMapping(EntityBlockEnderCrystal.class,""String_Node_Str"",200);
  EntityRegistry.registerModEntity(EntityBossDragon.class,""String_Node_Str"",8,this,320,1,true);
  EntityRegistry.registerModEntity(EntityBossEnderDemon.class,""String_Node_Str"",21,this,512,1,true);
  EntityRegistry.registerModEntity(EntityMiniBossEnderEye.class,""String_Node_Str"",11,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMiniBossFireFiend.class,""String_Node_Str"",23,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobAngryEnderman.class,""String_Node_Str"",1,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobBabyEnderman.class,""String_Node_Str"",16,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobParalyzedEnderman.class,""String_Node_Str"",24,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobEnderGuardian.class,""String_Node_Str"",22,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobVampiricBat.class,""String_Node_Str"",10,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobInfestedBat.class,""String_Node_Str"",12,this,128,1,true);
  EntityRegistry.registerModEntity(EntityMobForestGhost.class,""String_Node_Str"",13,this,32,1,true);
  EntityRegistry.registerModEntity(EntityMobLouse.class,""String_Node_Str"",34,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobFireGolem.class,""String_Node_Str"",14,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobScorchingLens.class,""String_Node_Str"",15,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobHauntedMiner.class,""String_Node_Str"",35,this,256,1,true);
  EntityRegistry.registerModEntity(EntityMobCorporealMirage.class,""String_Node_Str"",29,this,256,1,true);
  EntityRegistry.registerModEntity(EntityBlockFallingDragonEgg.class,""String_Node_Str"",25,this,128,1,true);
  EntityRegistry.registerModEntity(EntityBlockFallingObsidian.class,""String_Node_Str"",26,this,128,1,true);
  EntityRegistry.registerModEntity(EntityBlockTempleDragonEgg.class,""String_Node_Str"",7,this,420,1,true);
  EntityRegistry.registerModEntity(EntityBlockEnhancedTNTPrimed.class,""String_Node_Str"",31,this,128,1,true);
  EntityRegistry.registerModEntity(EntityItemIgneousRock.class,""String_Node_Str"",9,this,64,1,true);
  EntityRegistry.registerModEntity(EntityItemInstabilityOrb.class,""String_Node_Str"",6,this,64,1,true);
  EntityRegistry.registerModEntity(EntityItemAltar.class,""String_Node_Str"",19,this,128,1,false);
  EntityRegistry.registerModEntity(EntityItemEndPowder.class,""String_Node_Str"",27,this,64,1,true);
  EntityRegistry.registerModEntity(EntityItemDragonEgg.class,""String_Node_Str"",37,this,64,1,true);
  EntityRegistry.registerModEntity(EntityProjectileDragonFireball.class,""String_Node_Str"",2,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileDragonFreezeball.class,""String_Node_Str"",3,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileEnhancedEnderPearl.class,""String_Node_Str"",5,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileFlamingBall.class,""String_Node_Str"",17,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileGolemFireball.class,""String_Node_Str"",18,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileMinerShot.class,""String_Node_Str"",36,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileCorporealMirageOrb.class,""String_Node_Str"",28,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectilePotionOfInstability.class,""String_Node_Str"",30,this,128,1,true);
  EntityRegistry.registerModEntity(EntityProjectileSpatialDash.class,""String_Node_Str"",32,this,128,1,true);
  EntityRegistry.registerModEntity(EntityWeatherLightningBoltSafe.class,""String_Node_Str"",4,this,512,1,false);
  EntityRegistry.registerModEntity(EntityWeatherLightningBoltDemon.class,""String_Node_Str"",21,this,512,1,false);
  EntityRegistry.registerModEntity(EntityTechnicalBiomeInteraction.class,""String_Node_Str"",38,this,0,Integer.MAX_VALUE,false);
  GameRegistryUtil.registerTileEntity(TileEntityEssenceAltar.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEnhancedBrewingStand.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEndermanHead.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityLaserBeam.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityCustomSpawner.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntitySoulCharm.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityDecompositionTable.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEnergyExtractionTable.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEnergyCluster.class,""String_Node_Str"");
  GameRegistryUtil.registerTileEntity(TileEntityEnhancedTNT.class,""String_Node_Str"");
  AchievementManager.register();
  AchievementEvents.register();
  MinecraftForge.EVENT_BUS.register(new MiscEvents());
  FMLCommonHandler.instance().bus().register(new UpdateNotificationManager());
  CompendiumEvents.register();
  TempleEvents.register();
  InfestationEvents.register();
  CharmPouchHandler.register();
  WorldDataHandler.register();
  proxy.registerSidedEvents();
  proxy.registerRenderers();
  notifications.register();
  Stopwatch.finish(""String_Node_Str"");
}",0.9987783358219086
34756,"@Override public void setDead(){
  if (overrideDeath) {
    ChunkCoordinates coords=WorldDataHandler.<DragonSavefile>get(DragonSavefile.class).getPortalEggLocation();
    DimensionManager.getWorld(1).setBlock(coords.posX,coords.posY,coords.posZ,Blocks.dragon_egg);
  }
  super.setDead();
}","@Override public void setDead(){
  if (overrideDeath) {
    DragonSavefile file=WorldDataHandler.get(DragonSavefile.class);
    if (file.isDragonDead()) {
      ChunkCoordinates coords=file.getPortalEggLocation();
      DimensionManager.getWorld(1).setBlock(coords.posX,coords.posY,coords.posZ,Blocks.dragon_egg);
    }
  }
  super.setDead();
}",0.7298578199052133
34757,"@Override protected void writeEntityToNBT(NBTTagCompound nbt){
  if (interaction != null) {
    NBTTagCompound tag=new NBTTagCompound();
    interaction.saveToNBT(tag);
    nbt.setTag(""String_Node_Str"",tag);
  }
}","@Override protected void writeEntityToNBT(NBTTagCompound nbt){
  if (!worldObj.isRemote) {
    NBTTagCompound tag=new NBTTagCompound();
    interaction.saveToNBT(tag);
    nbt.setTag(""String_Node_Str"",tag);
    nbt.setString(""String_Node_Str"",interaction.getIdentifier());
  }
}",0.4073319755600815
34758,"@Override protected void readEntityFromNBT(NBTTagCompound nbt){
  if (interaction != null)   interaction.loadFromNBT(nbt.getCompoundTag(""String_Node_Str""));
}","@Override protected void readEntityFromNBT(NBTTagCompound nbt){
  if (!worldObj.isRemote) {
    interaction=BiomeInteraction.createByIdentifier(nbt.getString(""String_Node_Str""));
    if (interaction != null) {
      interaction.init(this);
      interaction.init();
      interaction.loadFromNBT(nbt.getCompoundTag(""String_Node_Str""));
    }
 else     setDead();
  }
}",0.6007604562737643
34759,"@Override protected void entityInit(){
  if (interaction != null)   interaction.init(this);
}","@Override protected void entityInit(){
}",0.6015037593984962
34760,"@Override public void onUpdate(){
  if (interaction != null)   interaction.update();
}","@Override public void onUpdate(){
  if (!worldObj.isRemote)   interaction.update();
}",0.8187134502923976
34761,"public EntityTechnicalBiomeInteraction(World world,double x,double y,double z,AbstractBiomeInteraction interaction){
  super(world);
  setPosition(x,y,z);
  this.interaction=interaction;
}","public EntityTechnicalBiomeInteraction(World world,double x,double y,double z,AbstractBiomeInteraction interaction){
  super(world);
  setPosition(x,y,z);
  this.interaction=interaction;
  this.interaction.init(this);
  this.interaction.init();
}",0.8663594470046083
34762,"/** 
 * BASIC_AGILITY, BASIC_VIGOR, EQUALITY
 */
@SubscribeEvent(priority=EventPriority.LOWEST) public void onPlayerTick(PlayerTickEvent e){
  if (e.side != Side.SERVER)   return;
  if (e.phase == Phase.START) {
    CharmPouchInfo info=CharmPouchHandler.getActivePouch(e.player);
    if (info.isIdle())     CharmPouchHandler.setActivePouch(e.player,null);
    UUID playerID=e.player.getGameProfile().getId();
    float spd=getPropSummed(e.player,""String_Node_Str"");
    float prevSpd=playerSpeed.get(playerID);
    if (MathUtil.floatEquals(prevSpd,playerSpeed.getNoEntryValue()) || !MathUtil.floatEquals(prevSpd,spd)) {
      IAttributeInstance attribute=e.player.getAttributeMap().getAttributeInstance(SharedMonsterAttributes.movementSpeed);
      if (attribute != null) {
        attribute.removeModifier(attrSpeed);
        attribute.applyModifier(new AttributeModifier(attrSpeed.getID(),attrSpeed.getName() + spd,attrSpeed.getAmount() * spd,attrSpeed.getOperation()));
      }
      playerSpeed.put(playerID,spd);
    }
    if (e.player.shouldHeal() && e.player.getFoodStats().getFoodLevel() >= 18) {
      float regen=getPropPercentDecrease(e.player,""String_Node_Str"",100F);
      if (regen > 0F && playerRegen.adjustOrPutValue(playerID,(byte)1,(byte)0) >= 100F - regen) {
        e.player.heal(1F);
        playerRegen.put(playerID,(byte)0);
      }
    }
    if (playerLastResortCooldown.containsKey(playerID)) {
      if (playerLastResortCooldown.adjustOrPutValue(playerID,(byte)-1,(byte)-100) <= -100)       playerLastResortCooldown.remove(playerID);
    }
  }
}","/** 
 * BASIC_AGILITY, BASIC_VIGOR, EQUALITY
 */
@SubscribeEvent(priority=EventPriority.LOWEST) public void onPlayerTick(PlayerTickEvent e){
  if (e.side != Side.SERVER)   return;
  if (e.phase == Phase.START) {
    CharmPouchInfo info=CharmPouchHandler.getActivePouch(e.player);
    if (info != null && info.isIdle())     CharmPouchHandler.setActivePouch(e.player,null);
    UUID playerID=e.player.getGameProfile().getId();
    float spd=getPropSummed(e.player,""String_Node_Str"");
    float prevSpd=playerSpeed.get(playerID);
    if (MathUtil.floatEquals(prevSpd,playerSpeed.getNoEntryValue()) || !MathUtil.floatEquals(prevSpd,spd)) {
      IAttributeInstance attribute=e.player.getAttributeMap().getAttributeInstance(SharedMonsterAttributes.movementSpeed);
      if (attribute != null) {
        attribute.removeModifier(attrSpeed);
        attribute.applyModifier(new AttributeModifier(attrSpeed.getID(),attrSpeed.getName() + spd,attrSpeed.getAmount() * spd,attrSpeed.getOperation()));
      }
      playerSpeed.put(playerID,spd);
    }
    if (e.player.shouldHeal() && e.player.getFoodStats().getFoodLevel() >= 18) {
      float regen=getPropPercentDecrease(e.player,""String_Node_Str"",100F);
      if (regen > 0F && playerRegen.adjustOrPutValue(playerID,(byte)1,(byte)0) >= 100F - regen) {
        e.player.heal(1F);
        playerRegen.put(playerID,(byte)0);
      }
    }
    if (playerLastResortCooldown.containsKey(playerID)) {
      if (playerLastResortCooldown.adjustOrPutValue(playerID,(byte)-1,(byte)-100) <= -100)       playerLastResortCooldown.remove(playerID);
    }
  }
}",0.9949335022165928
34763,"public static <T>T get(Class<? extends WorldSavefile> cls){
  Stopwatch.timeAverage(""String_Node_Str"",128);
  WorldSavefile savefile=instance.cache.get(cls);
  if (savefile == null) {
    try {
      instance.cache.put(cls,savefile=cls.newInstance());
      File file=new File(instance.worldSaveDir,savefile.filename);
      if (file.exists()) {
        try {
          savefile.loadFromNBT(CompressedStreamTools.readCompressed(new FileInputStream(file)));
        }
 catch (        IOException ioe) {
          Log.throwable(ioe,""String_Node_Str"",cls.getName());
        }
      }
 else       savefile.loadFromNBT(new NBTTagCompound());
    }
 catch (    InstantiationException|IllegalAccessException e) {
      throw new RuntimeException(""String_Node_Str"" + cls.getName(),e);
    }
  }
  Stopwatch.finish(""String_Node_Str"");
  return (T)savefile;
}","public static <T>T get(Class<? extends WorldSavefile> cls){
  Stopwatch.timeAverage(""String_Node_Str"",4096);
  WorldSavefile savefile=instance.cache.get(cls);
  if (savefile == null) {
    try {
      instance.cache.put(cls,savefile=cls.newInstance());
      File file=new File(instance.worldSaveDir,savefile.filename);
      if (file.exists()) {
        try {
          savefile.loadFromNBT(CompressedStreamTools.readCompressed(new FileInputStream(file)));
        }
 catch (        IOException ioe) {
          Log.throwable(ioe,""String_Node_Str"",cls.getName());
        }
      }
 else       savefile.loadFromNBT(new NBTTagCompound());
    }
 catch (    InstantiationException|IllegalAccessException e) {
      throw new RuntimeException(""String_Node_Str"" + cls.getName(),e);
    }
  }
  Stopwatch.finish(""String_Node_Str"");
  return (T)savefile;
}",0.9958847736625516
34764,"@Override protected void onSave(NBTTagCompound nbt){
  for (TObjectIntIterator<UUID> iter=infestationPower.iterator(); iter.hasNext(); ) {
    nbt.setInteger(iter.key() + ""String_Node_Str"",iter.value());
  }
  for (TObjectByteIterator<UUID> iter=infestationTimer.iterator(); iter.hasNext(); ) {
    nbt.setByte(iter.key() + ""String_Node_Str"",iter.value());
  }
}","@Override protected void onSave(NBTTagCompound nbt){
  for (TObjectIntIterator<UUID> iter=infestationPower.iterator(); iter.hasNext(); ) {
    iter.advance();
    nbt.setInteger(iter.key() + ""String_Node_Str"",iter.value());
  }
  for (TObjectByteIterator<UUID> iter=infestationTimer.iterator(); iter.hasNext(); ) {
    iter.advance();
    nbt.setByte(iter.key() + ""String_Node_Str"",iter.value());
  }
}",0.9476439790575916
34765,"@Override protected void func_143011_b(NBTTagCompound nbt){
  super.func_143011_b(nbt);
  startX=nbt.getInteger(""String_Node_Str"");
  startZ=nbt.getInteger(""String_Node_Str"");
  islandBottomY=nbt.getByte(""String_Node_Str"");
  (structure=new LargeStructureWorld(this)).loadFromNBT(nbt.getCompoundTag(""String_Node_Str""));
}","@Override protected void func_143011_b(NBTTagCompound nbt){
  super.func_143011_b(nbt);
  startX=nbt.getInteger(""String_Node_Str"");
  startZ=nbt.getInteger(""String_Node_Str"");
  islandBottomY=nbt.getByte(""String_Node_Str"");
  structure.loadFromNBT(nbt.getCompoundTag(""String_Node_Str""));
}",0.9147540983606556
34766,"protected ComponentIsland(Random rand,int x,int z){
  super(rand,x,20,z,208,140,208);
  this.startX=x;
  this.startZ=z;
  coordBaseMode=0;
  boundingBox=new StructureBoundingBox(x,20,z,x + sizeX - 1,140 + sizeY - 1,z + sizeZ - 1);
}","protected ComponentIsland(Random rand,int x,int z){
  super(rand,x,20,z,208,140,208);
  this.startX=x;
  this.startZ=z;
  coordBaseMode=0;
  boundingBox=new StructureBoundingBox(x,20,z,x + sizeX - 1,140 + sizeY - 1,z + sizeZ - 1);
  structure=new LargeStructureWorld(this);
}",0.9151873767258384
34767,"public void updateCore(World world,int x,int y,int z,int meta){
  if (world.playerEntities.isEmpty())   return;
  if (world.rand.nextInt(3) == 0) {
    int halfsz=ComponentIsland.halfSize, playerCheck=halfsz * 2;
    SpawnEntry entry=spawnEntries.containsKey((byte)meta) ? spawnEntries.get((byte)meta).getRandomItem(world.rand) : null;
    if (entry == null)     return;
    if (world.difficultySetting == EnumDifficulty.PEACEFUL && entry.isMob)     return;
    int currentAmount=world.getEntitiesWithinAABB(entry.getMobClass(),AxisAlignedBB.getBoundingBox(x - halfsz,y + 10,z - halfsz,x + halfsz,y + 55,z + halfsz)).size();
    if (currentAmount >= entry.getMaxAmount() || world.rand.nextFloat() * 1.1F < (float)currentAmount / entry.getMaxAmount())     return;
    int playerAmount=world.playerEntities.size();
    for (int a=0; a < Math.min(entry.getMaxAmount() >> 2,world.rand.nextInt(1 + entry.getMaxAmount() - currentAmount)); a++) {
      EntityLiving e=entry.createMob(world);
      for (int attempt=0; attempt < 20 + Math.min(10,playerAmount); attempt++) {
        EntityPlayer player=(EntityPlayer)world.playerEntities.get(world.rand.nextInt(playerAmount));
        if (MathUtil.distance(player.posX - x,player.posZ - z) > playerCheck)         continue;
        double ang=world.rand.nextDouble() * 2D * Math.PI, len=19 + world.rand.nextInt(55) + Math.abs(world.rand.nextGaussian() * 12D);
        double posX=player.posX + Math.cos(ang) * len, posZ=player.posZ + Math.sin(ang) * len;
        for (int yAttempt=0; yAttempt < 28; yAttempt++) {
          e.setLocationAndAngles(posX,(int)Math.floor(player.posY + (world.rand.nextDouble() - 0.65D) * (yAttempt + 4) * 3D) + 0.01D,posZ,world.rand.nextFloat() * 360F,0F);
          if (hasEntitySpace(world,e))           break;
        }
        int xx=(int)Math.floor(e.posX), zz=(int)Math.floor(e.posZ);
        boolean hasBlockBelow=false;
        for (int yy=(int)e.posY - 1; yy > e.posY - 4D; yy--) {
          if (world.getBlock(xx,yy,zz).isOpaqueCube()) {
            hasBlockBelow=true;
            break;
          }
        }
        if (!hasBlockBelow || DragonUtil.getTopBlock(world,BlockList.end_terrain,xx,zz,120) <= 30)         continue;
        e.setPositionAndUpdate(e.posX,e.posY + 0.01D,e.posZ);
        world.spawnEntityInWorld(e);
        break;
      }
    }
  }
  if (world.rand.nextFloat() < getInteractionChance(contentVariations.get(meta)) && interactions.containsKey((byte)meta) && world.getEntitiesWithinAABB(EntityTechnicalBiomeInteraction.class,AxisAlignedBB.getBoundingBox(x - 1,y - 1,z - 1,x + 2,y + 2,z + 2)).isEmpty()) {
    AbstractBiomeInteraction interaction=interactions.get((byte)meta).getRandomItem(world.rand).create();
    if (interaction != null)     world.spawnEntityInWorld(new EntityTechnicalBiomeInteraction(world,x + 0.5D,y + 0.5D,z + 0.5D,interaction));
  }
  for (  Object o : world.playerEntities) {
    EntityPlayer player=(EntityPlayer)o;
    if (isPlayerMoving(player)) {
      int ix=(int)player.posX, iy=(int)player.posY - 1, iz=(int)player.posZ;
      if (world.getBlock(ix,iy,iz) == getTopBlock() && world.getBlockMetadata(ix,iy,iz) == getTopBlockMeta()) {
        player.addStat(AchievementManager.WHOLE_NEW_CULTURES,1);
      }
    }
  }
}","public void updateCore(World world,int x,int y,int z,int meta){
  if (world.playerEntities.isEmpty())   return;
  if (world.rand.nextInt(3) == 0) {
    int halfsz=ComponentIsland.halfSize, playerCheck=halfsz * 2;
    SpawnEntry entry=spawnEntries.containsKey((byte)meta) ? spawnEntries.get((byte)meta).getRandomItem(world.rand) : null;
    if (entry == null)     return;
    if (world.difficultySetting == EnumDifficulty.PEACEFUL && entry.isMob)     return;
    int currentAmount=world.getEntitiesWithinAABB(entry.getMobClass(),AxisAlignedBB.getBoundingBox(x - halfsz,y + 10,z - halfsz,x + halfsz,y + 55,z + halfsz)).size();
    if (currentAmount >= entry.getMaxAmount() || world.rand.nextFloat() * 1.1F < (float)currentAmount / entry.getMaxAmount())     return;
    int playerAmount=world.playerEntities.size();
    for (int a=0; a < Math.min(entry.getMaxAmount() >> 2,world.rand.nextInt(1 + entry.getMaxAmount() - currentAmount)); a++) {
      EntityLiving e=entry.createMob(world);
      for (int attempt=0; attempt < 20 + Math.min(10,playerAmount); attempt++) {
        EntityPlayer player=(EntityPlayer)world.playerEntities.get(world.rand.nextInt(playerAmount));
        if (MathUtil.distance(player.posX - x,player.posZ - z) > playerCheck)         continue;
        double ang=world.rand.nextDouble() * 2D * Math.PI, len=19 + world.rand.nextInt(55) + Math.abs(world.rand.nextGaussian() * 12D);
        double posX=player.posX + Math.cos(ang) * len, posZ=player.posZ + Math.sin(ang) * len;
        for (int yAttempt=0; yAttempt < 28; yAttempt++) {
          e.setLocationAndAngles(posX,(int)Math.floor(player.posY + (world.rand.nextDouble() - 0.65D) * (yAttempt + 4) * 3D) + 0.01D,posZ,world.rand.nextFloat() * 360F,0F);
          if (hasEntitySpace(world,e))           break;
        }
        int xx=(int)Math.floor(e.posX), zz=(int)Math.floor(e.posZ);
        boolean hasBlockBelow=false;
        for (int yy=(int)e.posY - 1; yy > e.posY - 4D; yy--) {
          if (world.getBlock(xx,yy,zz).isOpaqueCube()) {
            hasBlockBelow=true;
            break;
          }
        }
        if (!hasBlockBelow || DragonUtil.getTopBlock(world,BlockList.end_terrain,xx,zz,120) <= 30)         continue;
        e.setPositionAndUpdate(e.posX,e.posY + 0.01D,e.posZ);
        world.spawnEntityInWorld(e);
        break;
      }
    }
  }
  BiomeContentVariation variation=null;
  for (  BiomeContentVariation contentVariation : contentVariations) {
    if (contentVariation.id == meta) {
      variation=contentVariation;
      break;
    }
  }
  if (variation != null && world.rand.nextFloat() < getInteractionChance(variation) && interactions.containsKey(variation.id) && world.getEntitiesWithinAABB(EntityTechnicalBiomeInteraction.class,AxisAlignedBB.getBoundingBox(x - 1,y - 1,z - 1,x + 2,y + 2,z + 2)).isEmpty()) {
    AbstractBiomeInteraction interaction=interactions.get(variation.id).getRandomItem(world.rand).create();
    if (interaction != null)     world.spawnEntityInWorld(new EntityTechnicalBiomeInteraction(world,x + 0.5D,y + 0.5D,z + 0.5D,interaction));
  }
  for (  Object o : world.playerEntities) {
    EntityPlayer player=(EntityPlayer)o;
    if (isPlayerMoving(player)) {
      int ix=(int)player.posX, iy=(int)player.posY - 1, iz=(int)player.posZ;
      if (world.getBlock(ix,iy,iz) == getTopBlock() && world.getBlockMetadata(ix,iy,iz) == getTopBlockMeta()) {
        player.addStat(AchievementManager.WHOLE_NEW_CULTURES,1);
      }
    }
  }
}",0.9529761904761904
34768,"protected IslandBiomeInfestedForest(int biomeID){
  super(biomeID);
  contentVariations.add(DEEP);
  contentVariations.add(RAVAGED);
  randomDeviations.add(TALL_TREES);
  randomDeviations.add(MORE_THORNY_BUSHES);
  getSpawnEntries(DEEP).addAll(new SpawnEntry[]{new SpawnEntry(EntitySilverfish.class,35,35),new SpawnEntry(EntityMobInfestedBat.class,8,10)});
  getInteractions(DEEP).addAll(new BiomeInteraction[]{new BiomeInteraction(InteractionCollapsingTrees.class,10)});
}","protected IslandBiomeInfestedForest(int biomeID){
  super(biomeID);
  contentVariations.add(DEEP);
  contentVariations.add(RAVAGED);
  randomDeviations.add(TALL_TREES);
  randomDeviations.add(MORE_THORNY_BUSHES);
  getSpawnEntries(DEEP).addAll(new SpawnEntry[]{new SpawnEntry(EntitySilverfish.class,35,35),new SpawnEntry(EntityMobInfestedBat.class,8,10)});
  getInteractions(DEEP).addAll(new BiomeInteraction[]{new BiomeInteraction(""String_Node_Str"",InteractionCollapsingTrees.class,10)});
}",0.9813278008298756
34769,"public AbstractBiomeInteraction create(){
  try {
    return interactionClass.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    Log.throwable(e,""String_Node_Str"",interactionClass.getSimpleName());
    return null;
  }
}","public AbstractBiomeInteraction create(){
  try {
    AbstractBiomeInteraction interaction=interactionClass.newInstance();
    interaction.identifier=identifier;
    return interaction;
  }
 catch (  InstantiationException|IllegalAccessException e) {
    Log.throwable(e,""String_Node_Str"",interactionClass.getSimpleName());
    return null;
  }
}",0.7813021702838063
34770,"public BiomeInteraction(Class<? extends AbstractBiomeInteraction> interactionClass,int weight){
  this.interactionClass=interactionClass;
  this.weight=weight;
}","public BiomeInteraction(String identifier,Class<? extends AbstractBiomeInteraction> interactionClass,int weight){
  this.identifier=identifier;
  this.interactionClass=interactionClass;
  this.weight=weight;
  idLookup.put(identifier,this);
}",0.7990074441687345
34771,"@Override public void init(){
  treesLeft=(byte)(1 + rand.nextInt(3 + rand.nextInt(4 + rand.nextInt(5))));
  for (int attempt=0; attempt < 32; attempt++) {
    x=centerX + rand.nextInt(ComponentIsland.size) - ComponentIsland.halfSize;
    z=centerZ + rand.nextInt(ComponentIsland.size) - ComponentIsland.halfSize;
    y=world.getHeightValue(x,z);
    boolean foundLog=false;
    for (int yy=y; yy > y - 10; yy--) {
      if (world.getBlock(x,y,z) == BlockList.spooky_log)       foundLog=true;
 else       if (foundLog) {
        attempt=33;
        y=yy + 1;
        break;
      }
    }
  }
}","@Override public void init(){
  treesLeft=(byte)(1 + rand.nextInt(3 + rand.nextInt(4 + rand.nextInt(5))));
  List<EntityPlayer> players=world.getEntitiesWithinAABB(EntityPlayer.class,AxisAlignedBB.getBoundingBox(centerX - ComponentIsland.halfSize,10,centerZ - ComponentIsland.halfSize,centerX + ComponentIsland.halfSize,120,centerZ + ComponentIsland.halfSize));
  if (players.isEmpty()) {
    entity.setDead();
    return;
  }
  byte dist=(byte)(8 + rand.nextInt(10 + rand.nextInt(15)));
  for (int attempt=0, amt=players.size(); attempt < 32; attempt++) {
    EntityPlayer player=players.get(rand.nextInt(amt));
    x=(int)player.posX + rand.nextInt(2 * dist) - dist;
    z=(int)player.posZ + rand.nextInt(2 * dist) - dist;
    y=world.getHeightValue(x,z);
    if (world.getClosestPlayer(x + 0.5D,y - 8,z + 0.5D,24D) == null)     continue;
    boolean foundLog=false;
    for (int yy=y; yy > y - 10; yy--) {
      if (world.getBlock(x,y,z) == BlockList.spooky_log)       foundLog=true;
 else       if (foundLog) {
        attempt=33;
        y=yy + 1;
        break;
      }
    }
  }
}",0.4714285714285714
34772,"@Override public void update(){
  if (--timer < 0) {
    if (world.getBlock(x,y,z) == BlockList.spooky_log) {
      if (rand.nextInt(8) == 0 && world.getGameRules().getGameRuleBooleanValue(""String_Node_Str"")) {
        EntityItem item=new EntityItem(world,x + rand.nextFloat() * 0.7F + 0.15F,y + rand.nextFloat() * 0.7F + 0.15F,z + rand.nextFloat() * 0.7F + 0.15F,new ItemStack(ItemList.dry_splinter));
        item.delayBeforeCanPickup=10;
        world.spawnEntityInWorld(item);
      }
      PacketPipeline.sendToAllAround(world.provider.dimensionId,x + 0.5D,y + 0.5D,z + 0.5D,64D,new C20Effect(FXType.Basic.SPOOKY_LOG_DECAY,x,y,z));
      world.setBlockToAir(x,y,z);
      ++y;
      timer=4;
    }
 else     if (--treesLeft <= 0) {
      entity.setDead();
      return;
    }
 else {
      for (int attempt=0, xx, yy, zz; attempt < 64; attempt++) {
        xx=x + rand.nextInt(14) - 7;
        zz=z + rand.nextInt(14) - 7;
        yy=world.getHeightValue(xx,zz);
        boolean foundLog=false;
        for (int yAttempt=0; yAttempt < 10; yAttempt++) {
          if (world.getBlock(xx,--yy,zz) == BlockList.spooky_log)           foundLog=true;
 else           if (foundLog) {
            attempt=65;
            x=xx;
            y=yy + 1;
            z=zz;
            break;
          }
        }
      }
    }
  }
  if (timer <= -1)   timer=(byte)(8 + rand.nextInt(10) + rand.nextInt(6) * rand.nextInt(4));
}","@Override public void update(){
  if (--timer < 0) {
    if (world.getBlock(x,y,z) == BlockList.spooky_log) {
      if (rand.nextInt(8) == 0 && world.getGameRules().getGameRuleBooleanValue(""String_Node_Str"")) {
        EntityItem item=new EntityItem(world,x + rand.nextFloat() * 0.7F + 0.15F,y + rand.nextFloat() * 0.7F + 0.15F,z + rand.nextFloat() * 0.7F + 0.15F,new ItemStack(ItemList.dry_splinter));
        item.delayBeforeCanPickup=10;
        world.spawnEntityInWorld(item);
      }
      world.playAuxSFX(2001,x,y,z,Block.getIdFromBlock(BlockList.spooky_log));
      world.setBlockToAir(x,y,z);
      ++y;
      timer=3;
    }
 else     if (--treesLeft <= 0) {
      entity.setDead();
      return;
    }
 else {
      for (int attempt=0, xx, yy, zz; attempt < 64; attempt++) {
        xx=x + rand.nextInt(10) - 5;
        zz=z + rand.nextInt(10) - 5;
        yy=world.getHeightValue(xx,zz);
        boolean foundLog=false;
        for (int yAttempt=0; yAttempt < 10; yAttempt++) {
          if (world.getBlock(xx,--yy,zz) == BlockList.spooky_log)           foundLog=true;
 else           if (foundLog) {
            attempt=65;
            x=xx;
            y=yy + 1;
            z=zz;
            break;
          }
        }
      }
    }
  }
  if (timer <= -1)   timer=(byte)(8 + rand.nextInt(10) + rand.nextInt(6) * rand.nextInt(4));
}",0.9272529858849076
34773,"public LargeStructureWorld(ComponentScatteredFeatureCustom structure){
  chunks=new LargeStructureChunk[structure.getSizeX() >> 4][structure.getSizeZ() >> 4];
  int chunkXSize=chunks.length, chunkZSize=chunks[0].length;
  for (int z=0; z < chunkZSize; z++) {
    for (int x=0; x < chunkXSize; x++) {
      chunks[x][z]=new LargeStructureChunk(x,z,structure.getSizeY());
    }
  }
}","public LargeStructureWorld(ComponentScatteredFeatureCustom structure){
  if (structure == null) {
    chunks=new LargeStructureChunk[0][0];
    return;
  }
  chunks=new LargeStructureChunk[structure.getSizeX() >> 4][structure.getSizeZ() >> 4];
  int chunkXSize=structure.getSizeX() >> 4, chunkZSize=structure.getSizeZ() >> 4;
  for (int z=0; z < chunkZSize; z++) {
    for (int x=0; x < chunkXSize; x++) {
      chunks[x][z]=new LargeStructureChunk(x,z,structure.getSizeY());
    }
  }
}",0.815668202764977
34774,"@SubscribeEvent public void onPlayerTick(PlayerTickEvent e){
  if (e.phase != Phase.START || e.player.worldObj.isRemote)   return;
  EntityPlayer player=e.player;
  if (playerTickLimiter.adjustOrPutValue(player.getGameProfile().getId(),byteOne,byteOne) >= 7) {
    Stopwatch.timeAverage(""String_Node_Str"",15);
    playerTickLimiter.put(player.getGameProfile().getId(),byteZero);
    Vec3 posVec=Vec3.createVectorHelper(player.posX,player.boundingBox.minY + player.getEyeHeight() - (player.isSneaking() ? 0.08D : 0D),player.posZ);
    Vec3 lookVec=player.getLook(8F);
    MovingObjectPosition mopBlock=player.worldObj.rayTraceBlocks(posVec,lookVec,true);
    double distBlock=mopBlock != null && mopBlock.typeOfHit == MovingObjectType.BLOCK ? MathUtil.distance(mopBlock.blockX + 0.5D - posVec.xCoord,mopBlock.blockY + 0.5D - posVec.yCoord,mopBlock.blockZ + 0.5D - posVec.zCoord) : 8D;
    double bbX=posVec.xCoord + lookVec.xCoord * 0.5D, bbY=posVec.yCoord + lookVec.yCoord * 0.5D, bbZ=posVec.zCoord + posVec.zCoord * 0.5D;
    List<Entity> list=player.worldObj.getEntitiesWithinAABB(Entity.class,AxisAlignedBB.getBoundingBox(bbX - 5D,bbY - 5D,bbZ - 5D,bbX + 5D,bbY + 5D,bbZ + 5D));
    Entity tracedEntity=null;
    double distEntity=Double.MAX_VALUE;
    for (    Entity entity : list) {
      if (entity == player)       continue;
      MovingObjectPosition mop=entity.boundingBox.expand(0.1D,0.1D,0.1D).calculateIntercept(posVec,lookVec);
      double dist;
      if (mop != null && mop.typeOfHit == MovingObjectType.ENTITY && (dist=posVec.distanceTo(mop.hitVec)) < distEntity) {
        distEntity=dist;
        tracedEntity=entity;
      }
    }
    if (distBlock < distEntity && mopBlock != null) {
      BlockMetaWrapper wrapper=new BlockMetaWrapper(player.worldObj.getBlock(mopBlock.blockX,mopBlock.blockY,mopBlock.blockZ),player.worldObj.getBlockMetadata(mopBlock.blockX,mopBlock.blockY,mopBlock.blockZ));
      KnowledgeObject<ObjectBlock> obj=KnowledgeObject.getObject(wrapper);
      if (obj != null)       getPlayerData(player).tryDiscoverBlock(obj,true);
    }
 else     if (tracedEntity != null) {
      if (tracedEntity instanceof EntityLiving)       discoverMob(player,(EntityLiving)tracedEntity);
 else       if (tracedEntity instanceof EntityItem)       discoverItemStack(player,((EntityItem)tracedEntity).getEntityItem());
    }
    Stopwatch.finish(""String_Node_Str"");
    Stopwatch.timeAverage(""String_Node_Str"",15);
    for (    ItemStack is : player.inventory.mainInventory) {
      if (is != null)       discoverItemStack(player,is);
    }
    Stopwatch.finish(""String_Node_Str"");
  }
}","@SubscribeEvent public void onPlayerTick(PlayerTickEvent e){
  if (e.phase != Phase.START || e.player.worldObj.isRemote)   return;
  EntityPlayer player=e.player;
  if (playerTickLimiter.adjustOrPutValue(player.getGameProfile().getId(),byteOne,byteOne) >= 7) {
    Stopwatch.timeAverage(""String_Node_Str"",25);
    playerTickLimiter.put(player.getGameProfile().getId(),byteZero);
    Vec3 posVec=Vec3.createVectorHelper(player.posX,player.boundingBox.minY + player.getEyeHeight() - (player.isSneaking() ? 0.08D : 0D),player.posZ);
    Vec3 lookVec=player.getLook(8F);
    MovingObjectPosition mopBlock=player.worldObj.rayTraceBlocks(posVec,lookVec,true);
    double distBlock=mopBlock != null && mopBlock.typeOfHit == MovingObjectType.BLOCK ? MathUtil.distance(mopBlock.blockX + 0.5D - posVec.xCoord,mopBlock.blockY + 0.5D - posVec.yCoord,mopBlock.blockZ + 0.5D - posVec.zCoord) : 8D;
    double bbX=posVec.xCoord + lookVec.xCoord * 0.5D, bbY=posVec.yCoord + lookVec.yCoord * 0.5D, bbZ=posVec.zCoord + posVec.zCoord * 0.5D;
    List<Entity> list=player.worldObj.getEntitiesWithinAABB(Entity.class,AxisAlignedBB.getBoundingBox(bbX - 5D,bbY - 5D,bbZ - 5D,bbX + 5D,bbY + 5D,bbZ + 5D));
    Entity tracedEntity=null;
    double distEntity=Double.MAX_VALUE;
    for (    Entity entity : list) {
      if (entity == player)       continue;
      MovingObjectPosition mop=entity.boundingBox.expand(0.1D,0.1D,0.1D).calculateIntercept(posVec,lookVec);
      double dist;
      if (mop != null && mop.typeOfHit == MovingObjectType.ENTITY && (dist=posVec.distanceTo(mop.hitVec)) < distEntity) {
        distEntity=dist;
        tracedEntity=entity;
      }
    }
    if (distBlock < distEntity && mopBlock != null) {
      BlockMetaWrapper wrapper=new BlockMetaWrapper(player.worldObj.getBlock(mopBlock.blockX,mopBlock.blockY,mopBlock.blockZ),player.worldObj.getBlockMetadata(mopBlock.blockX,mopBlock.blockY,mopBlock.blockZ));
      KnowledgeObject<ObjectBlock> obj=KnowledgeObject.getObject(wrapper);
      if (obj != null)       getPlayerData(player).tryDiscoverBlock(obj,true);
    }
 else     if (tracedEntity != null) {
      if (tracedEntity instanceof EntityLiving)       discoverMob(player,(EntityLiving)tracedEntity);
 else       if (tracedEntity instanceof EntityItem)       discoverItemStack(player,((EntityItem)tracedEntity).getEntityItem());
    }
    Stopwatch.finish(""String_Node_Str"");
    Stopwatch.timeAverage(""String_Node_Str"",25);
    for (    ItemStack is : player.inventory.mainInventory) {
      if (is != null)       discoverItemStack(player,is);
    }
    Stopwatch.finish(""String_Node_Str"");
  }
}",0.9992340099578706
34775,"public boolean tryDiscoverItem(KnowledgeObject<ObjectItem> item,boolean addReward){
  System.out.println(""String_Node_Str"" + item.getObject().getUnderlyingObject());
  if (discoveredItems.addObject(item.getObject())) {
    onDiscover(item,addReward);
    return true;
  }
 else   return false;
}","public boolean tryDiscoverItem(KnowledgeObject<ObjectItem> item,boolean addReward){
  if (discoveredItems.addObject(item.getObject())) {
    onDiscover(item,addReward);
    System.out.println(""String_Node_Str"" + item.getObject().getUnderlyingObject());
    return true;
  }
 else   return false;
}",0.5743243243243243
34776,"public boolean tryDiscoverMob(KnowledgeObject<ObjectMob> mob,boolean addReward){
  System.out.println(""String_Node_Str"" + mob.getObject().getUnderlyingObject().getSimpleName());
  if (discoveryMobs.addObject(mob.getObject())) {
    onDiscover(mob,addReward);
    return true;
  }
 else   return false;
}","public boolean tryDiscoverMob(KnowledgeObject<ObjectMob> mob,boolean addReward){
  if (discoveryMobs.addObject(mob.getObject())) {
    onDiscover(mob,addReward);
    System.out.println(""String_Node_Str"" + mob.getObject().getUnderlyingObject().getSimpleName());
    return true;
  }
 else   return false;
}",0.6052631578947368
34777,"public boolean tryDiscoverBlock(KnowledgeObject<ObjectBlock> block,boolean addReward){
  System.out.println(""String_Node_Str"" + block.getObject().getUnderlyingObject());
  if (discoveredBlocks.addObject(block.getObject())) {
    onDiscover(block,addReward);
    return true;
  }
 else   return false;
}","public boolean tryDiscoverBlock(KnowledgeObject<ObjectBlock> block,boolean addReward){
  if (discoveredBlocks.addObject(block.getObject())) {
    onDiscover(block,addReward);
    System.out.println(""String_Node_Str"" + block.getObject().getUnderlyingObject());
    return true;
  }
 else   return false;
}",0.5808580858085809
34778,"@Override public void onFinish(String identifier){
  totalTime+=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime);
  if (--currentCounter == 0 && count > 0) {
    Log.debug(""String_Node_Str"",identifier,totalTime / count);
    currentCounter=count;
    totalTime=0L;
  }
}","@Override public void onFinish(String identifier){
  totalTime+=System.nanoTime() - startTime;
  if (--currentCounter == 0 && count > 0) {
    double time=(totalTime * toMillis) / count;
    Log.debug(""String_Node_Str"",identifier,Math.round(time),numberFormat.format(time));
    currentCounter=count;
    totalTime=0L;
  }
}",0.7722772277227723
34779,"private void updateLouseData(){
  if (worldObj == null || worldObj.isRemote || louseData == null)   return;
  getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue(15D + 8D * louseData.attribute(EnumLouseAttribute.HEALTH));
  getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(0.7D + 0.06D * louseData.attribute(EnumLouseAttribute.SPEED));
  getEntityAttribute(SharedMonsterAttributes.attackDamage).setBaseValue(3D + 2.5D * louseData.attribute(EnumLouseAttribute.ATTACK));
  armorCapacity=(byte)MathUtil.square(louseData.attribute(EnumLouseAttribute.ARMOR));
  if (armorCapacity > 0)   armorCapacity*=6;
  dataWatcher.updateObject(16,louseData.serializeToString());
}","private void updateLouseData(){
  if (worldObj == null || worldObj.isRemote || louseData == null)   return;
  int attrSpeed=louseData.attribute(EnumLouseAttribute.SPEED);
  getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue(12D + 10D * louseData.attribute(EnumLouseAttribute.HEALTH));
  getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(0.68D + (attrSpeed > 0 ? 0.08D + 0.05D * louseData.attribute(EnumLouseAttribute.SPEED) : 0D));
  getEntityAttribute(SharedMonsterAttributes.attackDamage).setBaseValue(7D + 3.5D * louseData.attribute(EnumLouseAttribute.ATTACK));
  armorCapacity=(byte)MathUtil.square(louseData.attribute(EnumLouseAttribute.ARMOR));
  if (armorCapacity > 0)   armorCapacity*=5;
  dataWatcher.updateObject(16,louseData.serializeToString());
}",0.9184491978609626
34780,"private void teleport(int level){
  teleportTimer=(byte)(80 - level * 10);
}","private void teleport(int level){
  double oldPosX=posX;
  double oldPosY=posY;
  double oldPosZ=posZ;
  int maxDist=3 + level;
  boolean hasTeleported=false;
  for (int attempt=0, ix, iy, iz; attempt < 32 && !hasTeleported; attempt++) {
    posX=oldPosX + rand.nextInt(maxDist) - rand.nextInt(maxDist);
    posZ=oldPosZ + rand.nextInt(maxDist) - rand.nextInt(maxDist);
    ix=(int)Math.floor(posX);
    iy=(int)Math.floor(posY) + 1;
    iz=(int)Math.floor(posZ);
    for (int py=0; py < 3; py++) {
      if (worldObj.isAirBlock(ix,iy,iz) && !worldObj.isAirBlock(ix,iy - 1,iz)) {
        hasTeleported=true;
        break;
      }
 else       iy=(int)Math.floor(--posY) + 1;
    }
  }
  if (!hasTeleported)   return;
  teleportTimer=(byte)(80 - level * 10);
  for (int a=0; a < 64; a++) {
    worldObj.spawnParticle(""String_Node_Str"",oldPosX + (rand.nextDouble() - rand.nextDouble()) * width,oldPosY + rand.nextDouble() * height,oldPosZ + (rand.nextDouble() - rand.nextDouble()) * width,(rand.nextFloat() - 0.5F) * 0.2F,(rand.nextFloat() - 0.5F) * 0.2F,(rand.nextFloat() - 0.5F) * 0.2F);
  }
  worldObj.playSoundEffect(oldPosX,oldPosY,oldPosZ,""String_Node_Str"",1F,1F);
  playSound(""String_Node_Str"",1F,1F);
}",0.1183800623052959
34781,"@Override public boolean attackEntityFrom(DamageSource source,float amount){
  int teleportLevel=louseData.attribute(EnumLouseAttribute.TELEPORT);
  if (teleportLevel > 0 && teleportTimer == 0) {
    teleport(teleportLevel);
    return false;
  }
  if (armor > 0F) {
    entityToAttack=source.getEntity();
    playSound(""String_Node_Str"",0.5F,1.2F);
    if ((armor-=amount) <= 0F)     armor=0F;
    armorRegenTimer=(byte)(100 - louseData.attribute(EnumLouseAttribute.ARMOR) * 15);
    return true;
  }
  return super.attackEntityFrom(source,amount);
}","@Override public boolean attackEntityFrom(DamageSource source,float amount){
  int teleportLevel=louseData.attribute(EnumLouseAttribute.TELEPORT);
  if (teleportLevel > 0 && teleportTimer == 0) {
    teleport(teleportLevel);
    return false;
  }
  if (armor > 0F && hurtResistantTime == 0) {
    entityToAttack=source.getEntity();
    playSound(""String_Node_Str"",0.5F,1.2F);
    if ((armor-=amount) <= 0F)     armor=0F;
    hurtTime=maxHurtTime=10;
    hurtResistantTime=10;
    return true;
  }
  armorRegenTimer=(byte)(100 - louseData.attribute(EnumLouseAttribute.ARMOR) * 15);
  return super.attackEntityFrom(source,amount);
}",0.8975444538526672
34782,"@SubscribeEvent public void onLivingDrops(LivingDropsEvent e){
  if (e.entity.worldObj.isRemote || !e.recentlyHit)   return;
  ItemStack is=null;
  Random rand=e.entityLiving.getRNG();
  if (rand.nextInt(Math.max(1,40 - e.lootingLevel)) == 0 && e.entity instanceof EntityEnderman) {
    is=new ItemStack(ItemList.enderman_head);
    for (    EntityPlayer observer : ObservationUtil.getAllObservers(e.entityLiving,8D))     KnowledgeRegistrations.ENDERMAN_HEAD.tryUnlockFragment(observer,1F);
  }
 else   if (rand.nextInt(14 - Math.min(e.lootingLevel,4)) == 0 && e.entity instanceof EntitySilverfish) {
    boolean drop=rand.nextInt(4) == 0;
    boolean isPlayer=e.source.getEntity() instanceof EntityPlayer;
    if (!drop && isPlayer) {
      ItemStack held=((EntityPlayer)e.source.getEntity()).inventory.getCurrentItem();
      if (held != null && held.getItem() == Items.golden_sword)       drop=true;
    }
    if (drop) {
      is=new ItemStack(ItemList.silverfish_blood);
      for (      EntityPlayer observer : ObservationUtil.getAllObservers(e.entity,8D)) {
        if (KnowledgeRegistrations.SILVERFISH_BLOOD.tryUnlockFragment(observer,0.8F) == UnlockResult.NOTHING_TO_UNLOCK && !KnowledgeRegistrations.INFESTATION_REMEDY.tryUnlockFragment(observer,0.5F).stopTrying) {
          KnowledgeRegistrations.ENHANCED_BREWING_STAND.tryUnlockFragment(observer,0.4F,new byte[]{4});
        }
      }
    }
 else     if (isPlayer && KnowledgeRegistrations.SILVERFISH_BLOOD.tryUnlockFragment((EntityPlayer)e.source.getEntity(),0.65F) == UnlockResult.NOTHING_TO_UNLOCK) {
      EntityPlayer player=(EntityPlayer)e.source.getEntity();
      if (!KnowledgeRegistrations.INFESTATION_REMEDY.tryUnlockFragment(player,0.5F).stopTrying) {
        KnowledgeRegistrations.ENHANCED_BREWING_STAND.tryUnlockFragment(player,0.2F,new byte[]{4});
      }
    }
  }
 else   if (e.entity.dimension == 1 && rand.nextInt(100) == 0)   is=new ItemStack(ItemList.essence,1,EssenceType.SPECTRAL.getItemDamage());
  if (is != null) {
    EntityItem item=new EntityItem(e.entity.worldObj,e.entity.posX,e.entity.posY,e.entity.posZ,is);
    item.delayBeforeCanPickup=10;
    e.drops.add(item);
  }
}","@SubscribeEvent public void onLivingDrops(LivingDropsEvent e){
  if (e.entity.worldObj.isRemote || !e.recentlyHit)   return;
  ItemStack is=null;
  Random rand=e.entityLiving.getRNG();
  if (rand.nextInt(Math.max(1,40 - e.lootingLevel)) == 0 && e.entity instanceof EntityEnderman) {
    is=new ItemStack(ItemList.enderman_head);
    for (    EntityPlayer observer : ObservationUtil.getAllObservers(e.entityLiving,8D))     KnowledgeRegistrations.ENDERMAN_HEAD.tryUnlockFragment(observer,1F);
  }
 else   if (rand.nextInt(14 - Math.min(e.lootingLevel,4)) == 0 && e.entity instanceof EntitySilverfish) {
    boolean drop=rand.nextInt(4) == 0;
    boolean isPlayer=e.source.getEntity() instanceof EntityPlayer;
    if (!drop && isPlayer) {
      ItemStack held=((EntityPlayer)e.source.getEntity()).inventory.getCurrentItem();
      if (held != null && held.getItem() == Items.golden_sword)       drop=true;
    }
    if (drop) {
      is=new ItemStack(ItemList.silverfish_blood);
      for (      EntityPlayer observer : ObservationUtil.getAllObservers(e.entity,8D)) {
        if (KnowledgeRegistrations.SILVERFISH_BLOOD.tryUnlockFragment(observer,0.8F) == UnlockResult.NOTHING_TO_UNLOCK && !KnowledgeRegistrations.INFESTATION_REMEDY.tryUnlockFragment(observer,0.5F).stopTrying) {
          KnowledgeRegistrations.ENHANCED_BREWING_STAND.tryUnlockFragment(observer,0.4F,new byte[]{4});
        }
      }
    }
 else     if (isPlayer && KnowledgeRegistrations.SILVERFISH_BLOOD.tryUnlockFragment((EntityPlayer)e.source.getEntity(),0.65F) == UnlockResult.NOTHING_TO_UNLOCK) {
      EntityPlayer player=(EntityPlayer)e.source.getEntity();
      if (!KnowledgeRegistrations.INFESTATION_REMEDY.tryUnlockFragment(player,0.5F).stopTrying) {
        KnowledgeRegistrations.ENHANCED_BREWING_STAND.tryUnlockFragment(player,0.2F,new byte[]{4});
      }
    }
  }
  if (is != null) {
    EntityItem item=new EntityItem(e.entity.worldObj,e.entity.posX,e.entity.posY,e.entity.posZ,is);
    item.delayBeforeCanPickup=10;
    e.drops.add(item);
  }
}",0.9666348903717826
34783,"@Override protected AxisAlignedBB getSpawnerCheckBB(){
  int sx=getSpawnerX(), sy=getSpawnerY(), sz=getSpawnerZ();
  return AxisAlignedBB.getBoundingBox(sx,sy,sz,sx + 1,sy + 1,sz + 1).expand(spawnRange * 2D,0.5D,spawnRange * 2D);
}","@Override protected AxisAlignedBB getSpawnerCheckBB(){
  int sx=getSpawnerX(), sy=getSpawnerY(), sz=getSpawnerZ();
  return AxisAlignedBB.getBoundingBox(sx,sy,sz,sx + 1,sy + 1,sz + 1).expand(spawnRange * 2D,2.5D,spawnRange * 2D);
}",0.9956709956709956
34784,"@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  louseData=new LouseSpawnData(nbt.getCompoundTag(""String_Node_Str""));
  System.out.println(louseData.serializeToString());
}","@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  louseData=new LouseSpawnData(nbt.getCompoundTag(""String_Node_Str""));
}",0.8523676880222841
34785,"public LouseRavagedSpawnerLogic(TileEntityCustomSpawner spawnerTile){
  super(spawnerTile);
  this.minSpawnDelay=30;
  this.maxSpawnDelay=230;
  this.spawnRange=3;
  this.spawnCount=3;
  this.maxNearbyEntities=5;
  this.activatingRangeFromPlayer=16;
}","public LouseRavagedSpawnerLogic(TileEntityCustomSpawner spawnerTile){
  super(spawnerTile);
  this.minSpawnDelay=85;
  this.maxSpawnDelay=220;
  this.spawnRange=3;
  this.spawnCount=2;
  this.maxNearbyEntities=5;
  this.activatingRangeFromPlayer=12;
}",0.8007968127490039
34786,"@Override protected boolean checkSpawnerConditions(){
  int sx=getSpawnerX(), sy=getSpawnerY(), sz=getSpawnerZ();
  return getSpawnerWorld().getEntitiesWithinAABB(EntityMobLouse.class,AxisAlignedBB.getBoundingBox(sx,sy,sz,sx + 1,sy + 1,sz + 1).expand(8D,10D,8D)).size() <= 10;
}","@Override protected boolean checkSpawnerConditions(){
  int sx=getSpawnerX(), sy=getSpawnerY(), sz=getSpawnerZ();
  return getSpawnerWorld().getEntitiesWithinAABB(EntityMobLouse.class,AxisAlignedBB.getBoundingBox(sx,sy,sz,sx + 1,sy + 1,sz + 1).expand(10D,10D,10D)).size() <= 9;
}",0.9766606822262118
34787,"@Override protected boolean checkSpawnerConditions(){
  int sx=getSpawnerX(), sy=getSpawnerY(), sz=getSpawnerZ();
  return getSpawnerWorld().getEntitiesWithinAABB(EntitySilverfish.class,AxisAlignedBB.getBoundingBox(sx,sy,sz,sx + 1,sy + 1,sz + 1).expand(8D,10D,8D)).size() <= 10;
}","@Override protected boolean checkSpawnerConditions(){
  int sx=getSpawnerX(), sy=getSpawnerY(), sz=getSpawnerZ();
  return getSpawnerWorld().getEntitiesWithinAABB(EntitySilverfish.class,AxisAlignedBB.getBoundingBox(sx,sy,sz,sx + 1,sy + 1,sz + 1).expand(10D,10D,10D)).size() <= 10;
}",0.98932384341637
34788,"public SilverfishRavagedSpawnerLogic(TileEntityCustomSpawner spawnerTile){
  super(spawnerTile);
  this.minSpawnDelay=50;
  this.maxSpawnDelay=200;
  this.spawnRange=4;
  this.spawnCount=2;
  this.maxNearbyEntities=5;
  this.activatingRangeFromPlayer=16;
}","public SilverfishRavagedSpawnerLogic(TileEntityCustomSpawner spawnerTile){
  super(spawnerTile);
  this.minSpawnDelay=120;
  this.maxSpawnDelay=220;
  this.spawnRange=4;
  this.spawnCount=2;
  this.maxNearbyEntities=5;
  this.activatingRangeFromPlayer=12;
}",0.98635477582846
34789,"@Override public boolean addComponentParts(World world,Random rand,StructureBoundingBox bb){
  int centerX=sizeX >> 1, centerZ=sizeZ >> 1;
  if (!isSetup) {
    structure=new LargeStructureWorld(this);
    Random consistentRand=new Random(((startX / 9) * 238504L + (startZ / 9) * 10058432215L) ^ world.getWorldInfo().getSeed());
    islandBottomY=6 + consistentRand.nextInt(25);
    biome=IslandBiomeBase.pickRandomBiome(consistentRand);
    biomeData=biome.generateData(consistentRand);
    noiseGen1=new NoiseGeneratorOctaves(consistentRand,16);
    noiseGen2=new NoiseGeneratorOctaves(consistentRand,16);
    noiseGen3=new NoiseGeneratorOctaves(consistentRand,8);
    noiseGen4=new NoiseGeneratorOctaves(consistentRand,10);
    noiseGen5=new NoiseGeneratorOctaves(consistentRand,16);
    biome.prepareDecoration(biomeData);
    Block[] blocks;
    int chunkX, chunkZ, blockStartX, blockStartZ, xInChunk, zInChunk, xx, zz;
    float yMp=0.66F * biome.getIslandMassHeightMultiplier();
    TimeMeasurement.start(""String_Node_Str"");
    for (chunkX=0; chunkX < 13; chunkX++) {
      for (chunkZ=0; chunkZ < 13; chunkZ++) {
        blockStartX=chunkX * 16;
        blockStartZ=chunkZ * 16;
        blocks=new Block[32768];
        generateTerrain(chunkX - 6,chunkZ - 6,blocks);
        for (xInChunk=0; xInChunk < 16; ++xInChunk) {
          for (zInChunk=0; zInChunk < 16; ++zInChunk) {
            xx=blockStartX + xInChunk;
            zz=blockStartZ + zInChunk;
            for (int yy=0; yy < 128; ++yy) {
              Block block=blocks[xInChunk << 11 | zInChunk << 7 | yy];
              if (block != Blocks.air)               structure.setBlock(xx,(int)(yy * yMp),zz,block);
            }
            for (int y=structure.getHighestY(xx,zz); y >= 5; y--) {
              if (structure.getBlock(xx,y,zz) == Blocks.end_stone && structure.getBlock(xx,y + 1,zz).getMaterial() == Material.air) {
                structure.setBlock(xx,y,zz,IslandBiomeBase.getTopBlock(),biome.getTopBlockMeta());
              }
            }
          }
        }
      }
    }
    totalGenLen+=TimeMeasurement.finish(""String_Node_Str"");
    TimeMeasurement.start(""String_Node_Str"");
    CaveGenerator caveGen=new CaveGenerator(centerX,25,centerZ,halfSize,20,halfSize);
    caveGen.setup(consistentRand,biome);
    caveGen.generate(structure);
    totalGenLen+=TimeMeasurement.finish(""String_Node_Str"");
    TimeMeasurement.start(""String_Node_Str"");
    OreGenerator oreGen=new OreGenerator(8,0,8,size,55,size);
    oreGen.setup(consistentRand,biome);
    oreGen.generate(structure);
    totalGenLen+=TimeMeasurement.finish(""String_Node_Str"");
    TimeMeasurement.start(""String_Node_Str"");
    biome.decorateGen(structure,consistentRand,centerX,centerZ);
    totalGenLen+=TimeMeasurement.finish(""String_Node_Str"");
    structure.setBlock(104,8,104,BlockList.biome_core,biomeData.content.id,true);
    isSetup=true;
  }
  TimeMeasurement.start(""String_Node_Str"");
  for (int chunkX=0; chunkX < 13; chunkX++) {
    for (int chunkZ=0; chunkZ < 13; chunkZ++) {
      structure.getChunkFromChunkCoords(chunkX,chunkZ).generateInStructure(this,world,bb,8,islandBottomY,8);
    }
  }
  totalGenLen+=TimeMeasurement.finish(""String_Node_Str"",false);
  if (++amt == 225)   DragonUtil.info(""String_Node_Str"" + totalGenLen + ""String_Node_Str"");
  return true;
}","@Override public boolean addComponentParts(World world,Random rand,StructureBoundingBox bb){
  int centerX=sizeX >> 1, centerZ=sizeZ >> 1;
  if (!isSetup) {
    structure=new LargeStructureWorld(this);
    Random consistentRand=new Random(((startX / 9) * 238504L + (startZ / 9) * 10058432215L) ^ world.getWorldInfo().getSeed());
    islandBottomY=6 + consistentRand.nextInt(25);
    biome=IslandBiomeBase.pickRandomBiome(consistentRand);
    biomeData=biome.generateData(consistentRand);
    noiseGen1=new NoiseGeneratorOctaves(consistentRand,16);
    noiseGen2=new NoiseGeneratorOctaves(consistentRand,16);
    noiseGen3=new NoiseGeneratorOctaves(consistentRand,8);
    noiseGen4=new NoiseGeneratorOctaves(consistentRand,10);
    noiseGen5=new NoiseGeneratorOctaves(consistentRand,16);
    biome.prepareDecoration(biomeData);
    Block[] blocks;
    int chunkX, chunkZ, blockStartX, blockStartZ, xInChunk, zInChunk, xx, zz;
    float yMp=0.66F * biome.getIslandMassHeightMultiplier();
    TimeMeasurement.start(""String_Node_Str"");
    for (chunkX=0; chunkX < 13; chunkX++) {
      for (chunkZ=0; chunkZ < 13; chunkZ++) {
        blockStartX=chunkX * 16;
        blockStartZ=chunkZ * 16;
        blocks=new Block[32768];
        generateTerrain(chunkX - 6,chunkZ - 6,blocks);
        for (xInChunk=0; xInChunk < 16; ++xInChunk) {
          for (zInChunk=0; zInChunk < 16; ++zInChunk) {
            xx=blockStartX + xInChunk;
            zz=blockStartZ + zInChunk;
            for (int yy=0; yy < 128; ++yy) {
              Block block=blocks[xInChunk << 11 | zInChunk << 7 | yy];
              if (block != Blocks.air)               structure.setBlock(xx,(int)(yy * yMp),zz,block);
            }
            for (int y=structure.getHighestY(xx,zz); y >= 5; y--) {
              if (structure.getBlock(xx,y,zz) == Blocks.end_stone && structure.getBlock(xx,y + 1,zz).getMaterial() == Material.air) {
                structure.setBlock(xx,y,zz,IslandBiomeBase.getTopBlock(),biome.getTopBlockMeta());
              }
            }
          }
        }
      }
    }
    TimeMeasurement.finish(""String_Node_Str"");
    TimeMeasurement.start(""String_Node_Str"");
    CaveGenerator caveGen=new CaveGenerator(centerX,25,centerZ,halfSize,20,halfSize);
    caveGen.setup(consistentRand,biome);
    caveGen.generate(structure);
    TimeMeasurement.finish(""String_Node_Str"");
    TimeMeasurement.start(""String_Node_Str"");
    OreGenerator oreGen=new OreGenerator(8,0,8,size,55,size);
    oreGen.setup(consistentRand,biome);
    oreGen.generate(structure);
    TimeMeasurement.finish(""String_Node_Str"");
    TimeMeasurement.start(""String_Node_Str"");
    biome.decorateGen(structure,consistentRand,centerX,centerZ);
    TimeMeasurement.finish(""String_Node_Str"");
    structure.setBlock(104,8,104,BlockList.biome_core,biomeData.content.id,true);
    isSetup=true;
  }
  TimeMeasurement.start(""String_Node_Str"");
  for (int chunkX=0; chunkX < 13; chunkX++) {
    for (int chunkZ=0; chunkZ < 13; chunkZ++) {
      structure.getChunkFromChunkCoords(chunkX,chunkZ).generateInStructure(this,world,bb,8,islandBottomY,8);
    }
  }
  TimeMeasurement.finish(""String_Node_Str"");
  return true;
}",0.9749346455482084
34790,"@Override protected boolean generate(Random rand){
  islandCenterX=ComponentScatteredFeatureIsland.halfSize;
  islandCenterZ=ComponentScatteredFeatureIsland.halfSize;
  int y=25;
  while (++y < 80) {
    if (world.getBlock(islandCenterX,y,islandCenterZ) == surface())     break;
  }
  if (y >= 80)   return false;
  TimeMeasurement.start(""String_Node_Str"");
  RavagedDungeonGenerator gen=new RavagedDungeonGenerator(dungW,dungH,3);
  int xx, zz, yy, worldX, worldZ, th=hallHeight + 1, layer, visibility;
  for (xx=0; xx < dungW; xx++) {
    for (zz=0; zz < dungH; zz++) {
      worldX=islandCenterX - dungHalfW * scale + xx * scale + scaleHalf;
      worldZ=islandCenterZ - dungHalfH * scale + zz * scale + scaleHalf;
      yy=y - maxEntranceHeight;
      for (layer=0; layer < 3; layer++) {
        visibility=0;
        if (world.getBlock(worldX - scaleHalf - 1,yy - 1,worldZ) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX + scaleHalf + 1,yy - 1,worldZ) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX - scaleHalf - 1,yy + th + 1,worldZ) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX + scaleHalf + 1,yy + th + 1,worldZ) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX,yy - 1,worldZ - scaleHalf - 1) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX,yy - 1,worldZ + scaleHalf + 1) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX,yy + th + 1,worldZ - scaleHalf - 1) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX,yy + th + 1,worldZ + scaleHalf + 1) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX,yy + (hallHeight >> 1),worldZ) != Blocks.end_stone)         ++visibility;
        if (visibility > 3)         gen.blockLocation(layer,xx,zz);
        yy-=hallHeight + 2;
      }
    }
  }
  if (!gen.generate()) {
    System.out.println(""String_Node_Str"");
    return false;
  }
  TimeMeasurement.finish(""String_Node_Str"");
  TimeMeasurement.start(""String_Node_Str"");
  for (int a=0; a < gen.layers.length; a++) {
    DungeonElementList elements=gen.layers[a].getElements();
    if (a == 0)     y=generateEntrance(rand,elements,elements.getAll(DungeonElementType.ENTRANCE).get(0),y);
    if (a < gen.layers.length - 1)     generateDescendRoom(rand,elements,elements.getAll(DungeonElementType.DESCEND).get(0),y);
 else     if (a == gen.layers.length - 1)     generateEnd(rand,elements,elements.getAll(DungeonElementType.END),y);
    if (a > 0)     generateConnections(elements,elements.getAll(DungeonElementType.DESCENDBOTTOM).get(0),y);
    for (    DungeonElement hallway : elements.getAll(DungeonElementType.HALLWAY))     generateHallway(rand,elements,hallway,y);
    for (    DungeonElement room : elements.getAll(DungeonElementType.ROOM))     generateRoom(rand,elements,room,y);
    y-=hallHeight + 2;
  }
  TimeMeasurement.finish(""String_Node_Str"");
  return true;
}","@Override protected boolean generate(Random rand){
  islandCenterX=ComponentScatteredFeatureIsland.halfSize;
  islandCenterZ=ComponentScatteredFeatureIsland.halfSize;
  int y=25;
  while (++y < 80) {
    if (world.getBlock(islandCenterX,y,islandCenterZ) == surface())     break;
  }
  if (y >= 80)   return false;
  TimeMeasurement.start(""String_Node_Str"");
  RavagedDungeonGenerator gen=new RavagedDungeonGenerator(dungW,dungH,3);
  int xx, zz, yy, worldX, worldZ, th=hallHeight + 1, layer, visibility;
  for (xx=0; xx < dungW; xx++) {
    for (zz=0; zz < dungH; zz++) {
      worldX=islandCenterX - dungHalfW * scale + xx * scale + scaleHalf;
      worldZ=islandCenterZ - dungHalfH * scale + zz * scale + scaleHalf;
      yy=y - maxEntranceHeight;
      for (layer=0; layer < 3; layer++) {
        visibility=0;
        if (world.getBlock(worldX - scaleHalf - 1,yy - 1,worldZ) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX + scaleHalf + 1,yy - 1,worldZ) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX - scaleHalf - 1,yy + th + 1,worldZ) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX + scaleHalf + 1,yy + th + 1,worldZ) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX,yy - 1,worldZ - scaleHalf - 1) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX,yy - 1,worldZ + scaleHalf + 1) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX,yy + th + 1,worldZ - scaleHalf - 1) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX,yy + th + 1,worldZ + scaleHalf + 1) != Blocks.end_stone)         ++visibility;
        if (world.getBlock(worldX,yy + (hallHeight >> 1),worldZ) != Blocks.end_stone)         ++visibility;
        if (visibility > 3)         gen.blockLocation(layer,xx,zz);
        yy-=hallHeight + 2;
      }
    }
  }
  if (!gen.generate()) {
    DragonUtil.severe(""String_Node_Str"");
    return false;
  }
  TimeMeasurement.finish(""String_Node_Str"");
  TimeMeasurement.start(""String_Node_Str"");
  for (int a=0; a < gen.layers.length; a++) {
    DungeonElementList elements=gen.layers[a].getElements();
    if (a == 0)     y=generateEntrance(rand,elements,elements.getAll(DungeonElementType.ENTRANCE).get(0),y);
    if (a < gen.layers.length - 1)     generateDescendRoom(rand,elements,elements.getAll(DungeonElementType.DESCEND).get(0),y);
 else     if (a == gen.layers.length - 1)     generateEnd(rand,elements,elements.getAll(DungeonElementType.END),y);
    if (a > 0)     generateConnections(elements,elements.getAll(DungeonElementType.DESCENDBOTTOM).get(0),y);
    for (    DungeonElement hallway : elements.getAll(DungeonElementType.HALLWAY))     generateHallway(rand,elements,hallway,y);
    for (    DungeonElement room : elements.getAll(DungeonElementType.ROOM))     generateRoom(rand,elements,room,y);
    y-=hallHeight + 2;
  }
  TimeMeasurement.finish(""String_Node_Str"");
  return true;
}",0.9941695818757288
34791,"@Override public ItemStack processItem(ItemStack is,Random rand){
  if (is.getItem() == ItemList.enhanced_ender_pearl) {
    List<EnderPearlEnhancements> availableTypes=new ArrayList<>(Arrays.asList(EnderPearlEnhancements.values()));
    int amount=1 + (int)Math.abs(Math.round(rand.nextDouble() * rand.nextGaussian() * 2.25D));
    for (int a=0; a < amount; a++) {
      EnhancementHandler.addEnhancement(is,availableTypes.remove(rand.nextInt(availableTypes.size())));
      if (availableTypes.isEmpty())       break;
    }
  }
  return is;
}","@Override public ItemStack processItem(ItemStack is,Random rand){
  if (is.getItem() == ItemList.enhanced_ender_pearl) {
    List<EnderPearlEnhancements> availableTypes=new ArrayList<>(Arrays.asList(EnderPearlEnhancements.values()));
    int amount=1 + (int)Math.abs(Math.round(rand.nextDouble() * rand.nextGaussian() * 2.25D));
    for (int a=0; a < amount; a++) {
      is=EnhancementHandler.addEnhancement(is,availableTypes.remove(rand.nextInt(availableTypes.size())));
      if (availableTypes.isEmpty())       break;
    }
  }
  return is;
}",0.9972451790633609
34792,"@Override @SideOnly(Side.CLIENT) protected void handle(EntityClientPlayerMP player){
  String[] recordData=ItemMusicDisk.getRecordData(diskDamage);
  Minecraft mc=Minecraft.getMinecraft();
  SoundHandler soundHandler=mc.getSoundHandler();
  ChunkCoordinates coords=new ChunkCoordinates(x,y,z);
  Map mapSoundPositions=(Map)ReflectionPublicizer.get(ReflectionPublicizer.renderGlobalMapSoundPositions,mc.renderGlobal);
  ISound currentSound=(ISound)mapSoundPositions.get(coords);
  if (currentSound != null) {
    soundHandler.stopSound(currentSound);
    mapSoundPositions.remove(coords);
  }
  mc.ingameGUI.setRecordPlayingMessage(""String_Node_Str"" + recordData[0]);
  ResourceLocation resource=new ResourceLocation(""String_Node_Str"" + recordData[1]);
  PositionedSoundRecord snd=PositionedSoundRecord.func_147675_a(resource,x,y,z);
  mapSoundPositions.put(coords,snd);
  mc.getSoundHandler().playSound(snd);
}","@Override @SideOnly(Side.CLIENT) protected void handle(EntityClientPlayerMP player){
  String[] recordData=ItemMusicDisk.getRecordData(diskDamage);
  Minecraft mc=Minecraft.getMinecraft();
  SoundHandler soundHandler=mc.getSoundHandler();
  ChunkCoordinates coords=new ChunkCoordinates(x,y,z);
  Map mapSoundPositions=(Map)ReflectionPublicizer.get(ReflectionPublicizer.renderGlobalMapSoundPositions,mc.renderGlobal);
  ISound currentSound=(ISound)mapSoundPositions.get(coords);
  if (currentSound != null) {
    soundHandler.stopSound(currentSound);
    mapSoundPositions.remove(coords);
  }
  mc.ingameGUI.setRecordPlayingMessage(""String_Node_Str"" + recordData[0]);
  ResourceLocation resource=new ResourceLocation(""String_Node_Str"" + recordData[1]);
  PositionedSoundRecord snd=PositionedSoundRecord.func_147675_a(resource,x,y,z);
  mapSoundPositions.put(coords,snd);
  CustomMusicTicker.stopMusicAndPlayJukebox(snd);
}",0.9645002730748226
34793,"public CustomMusicTicker(Minecraft mc){
  super(mc);
  this.mc=mc;
  this.rand=new Random();
}","private CustomMusicTicker(Minecraft mc){
  super(mc);
  this.mc=mc;
  this.rand=new Random();
}",0.9523809523809524
34794,"@Override public void update(){
  MusicType type=getCurrentMusicType();
  if (currentMusic != null) {
    if (!type.getMusicTickerLocation().equals(currentMusic.getPositionedSoundLocation())) {
      mc.getSoundHandler().stopSound(currentMusic);
      timeUntilNextMusic=MathHelper.getRandomIntegerInRange(rand,0,type.func_148634_b() / 2);
    }
    if (!mc.getSoundHandler().isSoundPlaying(currentMusic)) {
      currentMusic=null;
      timeUntilNextMusic=Math.min(MathHelper.getRandomIntegerInRange(rand,type.func_148634_b(),type.func_148633_c()),timeUntilNextMusic);
    }
  }
  if (currentMusic == null && timeUntilNextMusic-- <= 0) {
    currentMusic=PositionedSoundRecord.func_147673_a(type.getMusicTickerLocation());
    mc.getSoundHandler().playSound(currentMusic);
    timeUntilNextMusic=Integer.MAX_VALUE;
  }
}","@Override public void update(){
  MusicType type=getCurrentMusicType();
  if (currentMusic != null) {
    if (!type.getMusicTickerLocation().equals(currentMusic.getPositionedSoundLocation()) && !isJukebox) {
      mc.getSoundHandler().stopSound(currentMusic);
      timeUntilNextMusic=MathHelper.getRandomIntegerInRange(rand,0,type.func_148634_b() / 2);
    }
    if (!mc.getSoundHandler().isSoundPlaying(currentMusic)) {
      currentMusic=null;
      timeUntilNextMusic=Math.min(MathHelper.getRandomIntegerInRange(rand,type.func_148634_b(),type.func_148633_c()),timeUntilNextMusic);
    }
  }
  if (currentMusic == null && timeUntilNextMusic-- <= 0) {
    currentMusic=PositionedSoundRecord.func_147673_a(type.getMusicTickerLocation());
    mc.getSoundHandler().playSound(currentMusic);
    timeUntilNextMusic=Integer.MAX_VALUE;
    isJukebox=false;
  }
}",0.9791542584871948
34795,"@SubscribeEvent public void onSoundLoad(SoundLoadEvent e){
  if (hasLoaded)   return;
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        Thread.sleep(4000L);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      Minecraft mc=Minecraft.getMinecraft();
synchronized (mc) {
        Field[] fields=Minecraft.class.getDeclaredFields();
        for (int a=0; a < fields.length; a++) {
          if (MusicTicker.class.isAssignableFrom(fields[a].getType())) {
            fields[a].setAccessible(true);
            try {
              fields[a].set(mc,new CustomMusicTicker(mc));
              DragonUtil.info(""String_Node_Str"");
            }
 catch (            Exception ex) {
              ex.printStackTrace();
              DragonUtil.severe(""String_Node_Str"");
              return;
            }
            break;
          }
        }
      }
    }
  }
).start();
  hasLoaded=true;
}","@SubscribeEvent public void onSoundLoad(SoundLoadEvent e){
  if (hasLoaded)   return;
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        Thread.sleep(4000L);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      Minecraft mc=Minecraft.getMinecraft();
synchronized (mc) {
        Field[] fields=Minecraft.class.getDeclaredFields();
        for (int a=0; a < fields.length; a++) {
          if (MusicTicker.class.isAssignableFrom(fields[a].getType())) {
            fields[a].setAccessible(true);
            try {
              fields[a].set(mc,CustomMusicTicker.getInstance());
              DragonUtil.info(""String_Node_Str"");
            }
 catch (            Exception ex) {
              ex.printStackTrace();
              DragonUtil.severe(""String_Node_Str"");
              return;
            }
            break;
          }
        }
      }
    }
  }
).start();
  hasLoaded=true;
}",0.9895397489539748
34796,"@Override public void run(){
  try {
    Thread.sleep(4000L);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  Minecraft mc=Minecraft.getMinecraft();
synchronized (mc) {
    Field[] fields=Minecraft.class.getDeclaredFields();
    for (int a=0; a < fields.length; a++) {
      if (MusicTicker.class.isAssignableFrom(fields[a].getType())) {
        fields[a].setAccessible(true);
        try {
          fields[a].set(mc,new CustomMusicTicker(mc));
          DragonUtil.info(""String_Node_Str"");
        }
 catch (        Exception ex) {
          ex.printStackTrace();
          DragonUtil.severe(""String_Node_Str"");
          return;
        }
        break;
      }
    }
  }
}","@Override public void run(){
  try {
    Thread.sleep(4000L);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  Minecraft mc=Minecraft.getMinecraft();
synchronized (mc) {
    Field[] fields=Minecraft.class.getDeclaredFields();
    for (int a=0; a < fields.length; a++) {
      if (MusicTicker.class.isAssignableFrom(fields[a].getType())) {
        fields[a].setAccessible(true);
        try {
          fields[a].set(mc,CustomMusicTicker.getInstance());
          DragonUtil.info(""String_Node_Str"");
        }
 catch (        Exception ex) {
          ex.printStackTrace();
          DragonUtil.severe(""String_Node_Str"");
          return;
        }
        break;
      }
    }
  }
}",0.9857549857549858
34797,"@SubscribeEvent public void onRenderTick(RenderWorldLastEvent e){
  Minecraft mc=Minecraft.getMinecraft();
  if (mc.thePlayer == null)   return;
  ItemStack is=mc.thePlayer.inventory.getCurrentItem();
  if (is != null && is.getItem() == ItemList.biome_compass && ItemBiomeCompass.currentBiome != -1) {
    Set<ChunkCoordinates> coords=ItemBiomeCompass.locations.get(ItemBiomeCompass.currentBiome);
    if (!coords.isEmpty()) {
      GL11.glDisable(GL11.GL_DEPTH_TEST);
      GL11.glDepthMask(false);
      GL11.glEnable(GL11.GL_BLEND);
      GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
      GL11.glPushMatrix();
      mc.renderEngine.bindTexture(TextureMap.locationItemsTexture);
      for (      ChunkCoordinates coord : coords) {
        double viewRot=90F + Math.toDegrees(Math.atan2(mc.thePlayer.posX - coord.posX,mc.thePlayer.posZ - coord.posZ));
        float dist=(float)MathUtil.distance(mc.thePlayer.posX - coord.posX,mc.thePlayer.posZ - coord.posZ);
        if (dist <= 40F)         continue;
 else         if (dist < 120F)         GL11.glColor4f(1F,1F,1F,0.5F * ((dist - 40F) / 80F));
 else         GL11.glColor4f(1F,1F,1F,0.5F);
        GL11.glPushMatrix();
        GL11.glRotated(viewRot,0F,1F,0F);
        GL11.glTranslatef(-0.5F,-0.5F,-0.5F);
        GL11.glTranslated(5F + dist * 0.05F,0F,0F);
        GL11.glPushMatrix();
        GL11.glTranslatef(0.5F,0.5F,0.5F);
        GL11.glRotated(270F,0F,1F,0F);
        GL11.glScalef(6F,6F,6F);
        GL11.glTranslatef(-0.5F,-0.5F,-0.5F);
        IIcon icon=ItemList.special_effects.getIconFromDamage(ItemSpecialEffects.biomePointStart + ItemBiomeCompass.currentBiome);
        ItemRenderer.renderItemIn2D(Tessellator.instance,icon.getMaxU(),icon.getMinV(),icon.getMinU(),icon.getMaxV(),icon.getIconWidth(),icon.getIconHeight(),0.0625F);
        GL11.glPopMatrix();
        GL11.glPopMatrix();
      }
      GL11.glPopMatrix();
      GL11.glDisable(GL11.GL_BLEND);
      GL11.glDepthMask(true);
      GL11.glEnable(GL11.GL_DEPTH_TEST);
      GL11.glColor4f(1F,1F,1F,1F);
    }
  }
}","@SubscribeEvent public void onRenderTick(RenderWorldLastEvent e){
  Minecraft mc=Minecraft.getMinecraft();
  if (mc.thePlayer == null)   return;
  mc.thePlayer.capabilities.setFlySpeed(0.3F);
  ItemStack is=mc.thePlayer.inventory.getCurrentItem();
  if (is != null && is.getItem() == ItemList.biome_compass && ItemBiomeCompass.currentBiome != -1) {
    Set<ChunkCoordinates> coords=ItemBiomeCompass.locations.get(ItemBiomeCompass.currentBiome);
    if (!coords.isEmpty()) {
      GL11.glDisable(GL11.GL_DEPTH_TEST);
      GL11.glDepthMask(false);
      GL11.glEnable(GL11.GL_BLEND);
      GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
      GL11.glPushMatrix();
      mc.renderEngine.bindTexture(TextureMap.locationItemsTexture);
      for (      ChunkCoordinates coord : coords) {
        double viewRot=90F + Math.toDegrees(Math.atan2(mc.thePlayer.posX - coord.posX,mc.thePlayer.posZ - coord.posZ));
        float dist=(float)MathUtil.distance(mc.thePlayer.posX - coord.posX,mc.thePlayer.posZ - coord.posZ);
        if (dist <= 40F)         continue;
 else         if (dist < 120F)         GL11.glColor4f(1F,1F,1F,0.5F * ((dist - 40F) / 80F));
 else         GL11.glColor4f(1F,1F,1F,0.5F);
        GL11.glPushMatrix();
        GL11.glRotated(viewRot,0F,1F,0F);
        GL11.glTranslatef(-0.5F,-0.5F,-0.5F);
        GL11.glTranslated(5F + dist * 0.05F,0F,0F);
        GL11.glPushMatrix();
        GL11.glTranslatef(0.5F,0.5F,0.5F);
        GL11.glRotated(270F,0F,1F,0F);
        GL11.glScalef(6F,6F,6F);
        GL11.glTranslatef(-0.5F,-0.5F,-0.5F);
        IIcon icon=ItemList.special_effects.getIconFromDamage(ItemSpecialEffects.biomePointStart + ItemBiomeCompass.currentBiome);
        ItemRenderer.renderItemIn2D(Tessellator.instance,icon.getMaxU(),icon.getMinV(),icon.getMinU(),icon.getMaxV(),icon.getIconWidth(),icon.getIconHeight(),0.0625F);
        GL11.glPopMatrix();
        GL11.glPopMatrix();
      }
      GL11.glPopMatrix();
      GL11.glDisable(GL11.GL_BLEND);
      GL11.glDepthMask(true);
      GL11.glEnable(GL11.GL_DEPTH_TEST);
      GL11.glColor4f(1F,1F,1F,1F);
    }
  }
}",0.988747905195116
34798,"@Override public boolean addComponentParts(World world,Random rand,StructureBoundingBox bb){
  int centerX=sizeX >> 1, centerZ=sizeZ >> 1;
  if (!isSetup) {
    structure=new LargeStructureWorld(this);
    Random consistentRand=new Random(((startX / 9) * 238504L + (startZ / 9) * 10058432215L) ^ world.getWorldInfo().getSeed());
    islandBottomY=6 + consistentRand.nextInt(25);
    biome=IslandBiomeBase.pickRandomBiome(consistentRand);
    biomeData=biome.generateData(consistentRand);
    noiseGen1=new NoiseGeneratorOctaves(consistentRand,16);
    noiseGen2=new NoiseGeneratorOctaves(consistentRand,16);
    noiseGen3=new NoiseGeneratorOctaves(consistentRand,8);
    noiseGen4=new NoiseGeneratorOctaves(consistentRand,10);
    noiseGen5=new NoiseGeneratorOctaves(consistentRand,16);
    biome.prepareDecoration(biomeData);
    Block[] blocks;
    int chunkX, chunkZ, blockStartX, blockStartZ, xInChunk, zInChunk, xx, zz;
    float yMp=0.66F * biome.getIslandMassHeightMultiplier();
    TimeMeasurement.start(""String_Node_Str"");
    for (chunkX=0; chunkX < 13; chunkX++) {
      for (chunkZ=0; chunkZ < 13; chunkZ++) {
        blockStartX=chunkX * 16;
        blockStartZ=chunkZ * 16;
        blocks=new Block[32768];
        generateTerrain(chunkX - 6,chunkZ - 6,blocks);
        for (xInChunk=0; xInChunk < 16; ++xInChunk) {
          for (zInChunk=0; zInChunk < 16; ++zInChunk) {
            xx=blockStartX + xInChunk;
            zz=blockStartZ + zInChunk;
            for (int yy=0; yy < 128; ++yy) {
              Block block=blocks[xInChunk << 11 | zInChunk << 7 | yy];
              if (block != Blocks.air)               structure.setBlock(xx,(int)(yy * yMp),zz,block);
            }
            for (int y=structure.getHighestY(xx,zz); y >= 5; y--) {
              if (structure.getBlock(xx,y,zz) == Blocks.end_stone && structure.getBlock(xx,y + 1,zz).getMaterial() == Material.air) {
                structure.setBlock(xx,y,zz,IslandBiomeBase.getTopBlock(),biome.getTopBlockMeta());
              }
            }
          }
        }
      }
    }
    CaveGenerator caveGen=new CaveGenerator(centerX,25,centerZ,halfSize,20,halfSize);
    caveGen.setup(consistentRand,biome);
    caveGen.generate(structure);
    OreGenerator oreGen=new OreGenerator(8,0,8,size,55,size);
    oreGen.setup(consistentRand,biome);
    oreGen.generate(structure);
    biome.decorateGen(structure,consistentRand,centerX,centerZ);
    structure.setBlock(104,8,104,BlockList.biome_core,biomeData.content.id,true);
    isSetup=true;
  }
  for (int chunkX=0; chunkX < 13; chunkX++) {
    for (int chunkZ=0; chunkZ < 13; chunkZ++) {
      structure.getChunkFromChunkCoords(chunkX,chunkZ).generateInStructure(this,world,bb,8,islandBottomY,8);
    }
  }
  return true;
}","@Override public boolean addComponentParts(World world,Random rand,StructureBoundingBox bb){
  int centerX=sizeX >> 1, centerZ=sizeZ >> 1;
  for (int chunkX=0; chunkX < 13; chunkX++) {
    for (int chunkZ=0; chunkZ < 13; chunkZ++) {
      for (int a=0; a < 16; a++) {
        for (int b=0; b < 16; b++) {
          placeBlockAtCurrentPosition(world,Blocks.emerald_block,0,chunkX * 16 + a,islandBottomY - 4,chunkZ * 16 + b,bb);
        }
      }
    }
  }
  for (int a=0; a < 208; a++) {
    for (int b=0; b < 208; b++) {
      placeBlockAtCurrentPosition(world,Blocks.lapis_block,0,a,islandBottomY - 5,b,bb);
    }
  }
  return true;
}",0.1256637168141593
34799,"protected ComponentScatteredFeatureIsland(Random rand,int x,int z){
  super(rand,x,20,z,224,160,224);
  this.startX=x;
  this.startZ=z;
  coordBaseMode=0;
  boundingBox=new StructureBoundingBox(x,20,z,x + sizeX - 1,160 + sizeY - 1,z + sizeZ - 1);
}","protected ComponentScatteredFeatureIsland(Random rand,int x,int z){
  super(rand,x,20,z,208,160,208);
  this.startX=x;
  this.startZ=z;
  coordBaseMode=0;
  boundingBox=new StructureBoundingBox(x,20,z,x + sizeX - 1,160 + sizeY - 1,z + sizeZ - 1);
}",0.9838709677419356
34800,"public MapGenIsland(){
  super(16,25,1600,224);
}","public MapGenIsland(){
  super(16,25,1600,208);
}",0.9591836734693876
34801,"public Block getBlock(int xInChunk,int yInChunk,int zInChunk){
  if (xInChunk < 0 || xInChunk >= 16 || yInChunk < 0 || yInChunk >= ySize || zInChunk < 0 || zInChunk >= 16) {
    Thread.dumpStack();
    DragonUtil.warning(""String_Node_Str"",xInChunk,yInChunk,zInChunk);
    return Blocks.air;
  }
  Block block=storedBlocks[yInChunk * 256 + xInChunk * 16 + zInChunk];
  return block == null ? Blocks.air : block;
}","public Block getBlock(int xInChunk,int yInChunk,int zInChunk){
  if (xInChunk < 0 || xInChunk >= 16 || yInChunk < 0 || yInChunk >= ySize || zInChunk < 0 || zInChunk >= 16) {
    DragonUtil.warning(""String_Node_Str"",xInChunk,yInChunk,zInChunk);
    return Blocks.air;
  }
  Block block=storedBlocks[yInChunk * 256 + xInChunk * 16 + zInChunk];
  return block == null ? Blocks.air : block;
}",0.97
34802,"/** 
 * Returns the execution plan, read from the given file path.
 * @param testCaseFolderName    testCaseFolderName Name of the folder created under /artifacts/CEP for the particular test case.
 * @param executionPlanFileName Execution plan file name, relative to the test artifacts folder.
 * @return execution plan as a string.
 * @throws Exception
 */
protected String getExecutionPlanFromFile(String testCaseFolderName,String executionPlanFileName) throws Exception {
  String relativeFilePath=getTestArtifactLocation() + CEPIntegrationTestConstants.RELATIVE_PATH_TO_TEST_ARTIFACTS + testCaseFolderName+ ""String_Node_Str""+ executionPlanFileName;
  relativeFilePath=relativeFilePath.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(File.separator));
  return ConfigurationUtil.readFile(relativeFilePath);
}","/** 
 * Returns the execution plan, read from the given file path.
 * @param testCaseFolderName    testCaseFolderName Name of the folder created under /artifacts/CEP for theparticular test case.
 * @param executionPlanFileName Execution plan file name, relative to the test artifacts folder.
 * @return execution plan as a string.
 * @throws Exception
 */
protected String getExecutionPlanFromFile(String testCaseFolderName,String executionPlanFileName) throws Exception {
  String relativeFilePath=getTestArtifactLocation() + CEPIntegrationTestConstants.RELATIVE_PATH_TO_TEST_ARTIFACTS + testCaseFolderName+ ""String_Node_Str""+ executionPlanFileName;
  relativeFilePath=relativeFilePath.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(File.separator));
  return ConfigurationUtil.readFile(relativeFilePath);
}",0.9993868792152054
34803,"/** 
 * @param testCaseFolderName testCaseFolderName Name of the folder created under /artifacts/CEP for the particular test case.
 * @param configFileName     Name of the JSON config-file created under above folder.
 * @return The above JSON-configuration, as a string
 * @throws Exception
 */
protected String getJSONArtifactConfiguration(String testCaseFolderName,String configFileName) throws Exception {
  String relativeFilePath=getTestArtifactLocation() + CEPIntegrationTestConstants.RELATIVE_PATH_TO_TEST_ARTIFACTS + testCaseFolderName+ ""String_Node_Str""+ configFileName;
  relativeFilePath=relativeFilePath.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(File.separator));
  JSONParser jsonParser=new JSONParser();
  return jsonParser.parse(new FileReader(relativeFilePath)).toString();
}","/** 
 * @param testCaseFolderName testCaseFolderName Name of the folder created under /artifacts/CEP for theparticular test case.
 * @param configFileName     Name of the JSON config-file created under above folder.
 * @return The above JSON-configuration, as a string
 * @throws Exception
 */
protected String getJSONArtifactConfiguration(String testCaseFolderName,String configFileName) throws Exception {
  String relativeFilePath=getTestArtifactLocation() + CEPIntegrationTestConstants.RELATIVE_PATH_TO_TEST_ARTIFACTS + testCaseFolderName+ ""String_Node_Str""+ configFileName;
  relativeFilePath=relativeFilePath.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(File.separator));
  JSONParser jsonParser=new JSONParser();
  return jsonParser.parse(new FileReader(relativeFilePath)).toString();
}",0.9993769470404984
34804,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void addTemplateConfigurationTestScenario1() throws Exception {
  String configName=""String_Node_Str"";
  DomainInfoDTO domainInfo=executionManagerAdminServiceClient.getDomainInfo(""String_Node_Str"");
  if (domainInfo == null) {
    Assert.fail(""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"");
    eventStreamCount=eventStreamManagerAdminServiceClient.getEventStreamCount();
    executionPlanCount=eventProcessorAdminServiceClient.getExecutionPlanConfigurationCount();
    eventStreamCount=eventStreamManagerAdminServiceClient.getEventStreamCount();
    log.info(""String_Node_Str"");
    ScenarioConfigurationDTO configuration=new ScenarioConfigurationDTO();
    configuration.setName(configName);
    configuration.setDomain(domainInfo.getName());
    configuration.setType(domainInfo.getScenarioInfoDTOs()[0].getType());
    configuration.setDescription(""String_Node_Str"");
    for (    ParameterDTOE parameterDTOE : domainInfo.getScenarioInfoDTOs()[0].getParameterDTOs()) {
      ParameterDTO parameterDTO=new ParameterDTO();
      parameterDTO.setName(parameterDTOE.getName());
      parameterDTO.setValue(parameterDTOE.getDefaultValue());
      configuration.addParameterDTOs(parameterDTO);
    }
    String[] streamIDsToBeMapped=executionManagerAdminServiceClient.saveConfiguration(configuration);
    Assert.assertEquals(TO_STREAM_ID,streamIDsToBeMapped[0]);
    Assert.assertEquals(eventProcessorAdminServiceClient.getExecutionPlanConfigurationCount(),++executionPlanCount);
    Assert.assertEquals(eventStreamManagerAdminServiceClient.getEventStreamCount(),eventStreamCount);
    Assert.assertEquals(executionManagerAdminServiceClient.getConfigurationsCount(domainInfo.getName()),++configurationCount);
    StreamMappingDTO streamMappingDTO=new StreamMappingDTO();
    streamMappingDTO.setFromStream(DEVICE_STREAM_ID);
    streamMappingDTO.setToStream(TO_STREAM_ID);
    AttributeMappingDTO[] attributeMappingDTOs=new AttributeMappingDTO[TO_STREAM_ATTRIBUTE_COUNT];
    AttributeMappingDTO idAttributeMappingDTO=new AttributeMappingDTO();
    idAttributeMappingDTO.setFromAttribute(""String_Node_Str"");
    idAttributeMappingDTO.setToAttribute(""String_Node_Str"");
    idAttributeMappingDTO.setAttributeType(""String_Node_Str"");
    AttributeMappingDTO valueAttributeMappingDTO=new AttributeMappingDTO();
    valueAttributeMappingDTO.setFromAttribute(""String_Node_Str"");
    valueAttributeMappingDTO.setToAttribute(""String_Node_Str"");
    valueAttributeMappingDTO.setAttributeType(""String_Node_Str"");
    attributeMappingDTOs[0]=idAttributeMappingDTO;
    attributeMappingDTOs[1]=valueAttributeMappingDTO;
    streamMappingDTO.setAttributeMappingDTOs(attributeMappingDTOs);
    StreamMappingDTO[] streamMappingDTOs={streamMappingDTO};
    boolean streamMappingSaved=executionManagerAdminServiceClient.saveStreamMapping(streamMappingDTOs,configName,domainInfo.getName());
    Assert.assertEquals(streamMappingSaved,true);
    Assert.assertEquals(eventProcessorAdminServiceClient.getExecutionPlanConfigurationCount(),++executionPlanCount);
    log.info(""String_Node_Str"");
    configuration.setDescription(""String_Node_Str"");
    executionManagerAdminServiceClient.saveConfiguration(configuration);
    Assert.assertEquals(eventProcessorAdminServiceClient.getExecutionPlanConfigurationCount(),executionPlanCount);
    Assert.assertEquals(eventStreamManagerAdminServiceClient.getEventStreamCount(),eventStreamCount);
    Assert.assertEquals(executionManagerAdminServiceClient.getConfigurationsCount(domainInfo.getName()),configurationCount);
    log.info(""String_Node_Str"");
    executionManagerAdminServiceClient.deleteConfiguration(configuration.getDomain(),configuration.getName());
    executionPlanCount=executionPlanCount - 2;
    Assert.assertEquals(eventProcessorAdminServiceClient.getExecutionPlanConfigurationCount(),executionPlanCount);
    Assert.assertEquals(eventStreamManagerAdminServiceClient.getEventStreamCount(),eventStreamCount);
    Assert.assertEquals(executionManagerAdminServiceClient.getConfigurationsCount(domainInfo.getName()),--configurationCount);
  }
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void addTemplateConfigurationTestScenario1() throws Exception {
  String configName=""String_Node_Str"";
  DomainInfoDTO domainInfo=executionManagerAdminServiceClient.getDomainInfo(""String_Node_Str"");
  if (domainInfo == null) {
    Assert.fail(""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"");
    eventStreamCount=eventStreamManagerAdminServiceClient.getEventStreamCount();
    executionPlanCount=eventProcessorAdminServiceClient.getExecutionPlanConfigurationCount();
    eventStreamCount=eventStreamManagerAdminServiceClient.getEventStreamCount();
    log.info(""String_Node_Str"");
    ScenarioConfigurationDTO configuration=new ScenarioConfigurationDTO();
    configuration.setName(configName);
    configuration.setDomain(domainInfo.getName());
    configuration.setType(domainInfo.getScenarioInfoDTOs()[0].getType());
    configuration.setDescription(""String_Node_Str"");
    for (    DomainParameterDTO parameterDTOE : domainInfo.getScenarioInfoDTOs()[0].getDomainParameterDTOs()) {
      ConfigurationParameterDTO parameterDTO=new ConfigurationParameterDTO();
      parameterDTO.setName(parameterDTOE.getName());
      parameterDTO.setValue(parameterDTOE.getDefaultValue());
      configuration.addConfigurationParameterDTOs(parameterDTO);
    }
    String[] streamIDsToBeMapped=executionManagerAdminServiceClient.saveConfiguration(configuration);
    Assert.assertEquals(TO_STREAM_ID,streamIDsToBeMapped[0]);
    Assert.assertEquals(eventProcessorAdminServiceClient.getExecutionPlanConfigurationCount(),++executionPlanCount);
    Assert.assertEquals(eventStreamManagerAdminServiceClient.getEventStreamCount(),eventStreamCount);
    Assert.assertEquals(executionManagerAdminServiceClient.getConfigurationsCount(domainInfo.getName()),++configurationCount);
    StreamMappingDTO streamMappingDTO=new StreamMappingDTO();
    streamMappingDTO.setFromStream(DEVICE_STREAM_ID);
    streamMappingDTO.setToStream(TO_STREAM_ID);
    AttributeMappingDTO[] attributeMappingDTOs=new AttributeMappingDTO[TO_STREAM_ATTRIBUTE_COUNT];
    AttributeMappingDTO idAttributeMappingDTO=new AttributeMappingDTO();
    idAttributeMappingDTO.setFromAttribute(""String_Node_Str"");
    idAttributeMappingDTO.setToAttribute(""String_Node_Str"");
    idAttributeMappingDTO.setAttributeType(""String_Node_Str"");
    AttributeMappingDTO valueAttributeMappingDTO=new AttributeMappingDTO();
    valueAttributeMappingDTO.setFromAttribute(""String_Node_Str"");
    valueAttributeMappingDTO.setToAttribute(""String_Node_Str"");
    valueAttributeMappingDTO.setAttributeType(""String_Node_Str"");
    attributeMappingDTOs[0]=idAttributeMappingDTO;
    attributeMappingDTOs[1]=valueAttributeMappingDTO;
    streamMappingDTO.setAttributeMappingDTOs(attributeMappingDTOs);
    StreamMappingDTO[] streamMappingDTOs={streamMappingDTO};
    boolean streamMappingSaved=executionManagerAdminServiceClient.saveStreamMapping(streamMappingDTOs,configName,domainInfo.getName());
    Assert.assertEquals(streamMappingSaved,true);
    Assert.assertEquals(eventProcessorAdminServiceClient.getExecutionPlanConfigurationCount(),++executionPlanCount);
    log.info(""String_Node_Str"");
    configuration.setDescription(""String_Node_Str"");
    executionManagerAdminServiceClient.saveConfiguration(configuration);
    Assert.assertEquals(eventProcessorAdminServiceClient.getExecutionPlanConfigurationCount(),executionPlanCount);
    Assert.assertEquals(eventStreamManagerAdminServiceClient.getEventStreamCount(),eventStreamCount);
    Assert.assertEquals(executionManagerAdminServiceClient.getConfigurationsCount(domainInfo.getName()),configurationCount);
    log.info(""String_Node_Str"");
    executionManagerAdminServiceClient.deleteConfiguration(configuration.getDomain(),configuration.getName());
    executionPlanCount=executionPlanCount - 2;
    Assert.assertEquals(eventProcessorAdminServiceClient.getExecutionPlanConfigurationCount(),executionPlanCount);
    Assert.assertEquals(eventStreamManagerAdminServiceClient.getEventStreamCount(),eventStreamCount);
    Assert.assertEquals(executionManagerAdminServiceClient.getConfigurationsCount(domainInfo.getName()),--configurationCount);
  }
}",0.99380066762041
34805,"public static void main(String[] args){
  String sampleNumber=args[0];
  String topicName=args[1];
  String queueName=args[2];
  String format=args[3];
  String filePath=args[4];
  String broker=args[5];
  if (format == null || ""String_Node_Str"".equals(format)) {
    format=""String_Node_Str"";
  }
  if (""String_Node_Str"".equalsIgnoreCase(broker)) {
    broker=""String_Node_Str"";
  }
  Session session=null;
  Properties properties=new Properties();
  if (!""String_Node_Str"".equalsIgnoreCase(broker) && !""String_Node_Str"".equalsIgnoreCase(broker) && !""String_Node_Str"".equalsIgnoreCase(broker)) {
    log.error(""String_Node_Str"");
    return;
  }
  try {
    if (topicName != null && !""String_Node_Str"".equalsIgnoreCase(topicName)) {
      filePath=JMSClientUtil.getEventFilePath(sampleNumber,format,topicName,filePath);
      TopicConnection topicConnection;
      TopicConnectionFactory connFactory=null;
      if (""String_Node_Str"".equalsIgnoreCase(broker)) {
        properties.load(ClassLoader.getSystemClassLoader().getResourceAsStream(""String_Node_Str""));
        Context context=new InitialContext(properties);
        connFactory=(TopicConnectionFactory)context.lookup(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(broker)) {
        properties.load(ClassLoader.getSystemClassLoader().getResourceAsStream(""String_Node_Str""));
        Context context=new InitialContext(properties);
        connFactory=(TopicConnectionFactory)context.lookup(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(broker)) {
        properties.load(ClassLoader.getSystemClassLoader().getResourceAsStream(""String_Node_Str""));
        Context context=new InitialContext(properties);
        connFactory=(TopicConnectionFactory)context.lookup(""String_Node_Str"");
      }
      if (connFactory != null) {
        topicConnection=connFactory.createTopicConnection();
        topicConnection.start();
        session=topicConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
        if (session != null) {
          Topic topic=session.createTopic(topicName);
          MessageProducer producer=session.createProducer(topic);
          List<String> messagesList=JMSClientUtil.readFile(filePath);
          try {
            if (""String_Node_Str"".equalsIgnoreCase(format)) {
              log.info(""String_Node_Str"" + topicName + ""String_Node_Str"");
              JMSClientUtil.publishMapMessage(producer,session,messagesList);
            }
 else {
              log.info(""String_Node_Str"" + format + ""String_Node_Str""+ topicName+ ""String_Node_Str"");
              JMSClientUtil.publishTextMessage(producer,session,messagesList);
            }
            log.info(""String_Node_Str"");
          }
 catch (          JMSException e) {
            log.error(""String_Node_Str"" + e.getMessage(),e);
          }
catch (          IOException e) {
            log.error(""String_Node_Str"" + e.getMessage(),e);
          }
 finally {
            producer.close();
            session.close();
            topicConnection.stop();
          }
        }
      }
 else {
        log.error(""String_Node_Str"");
      }
    }
 else     if (queueName != null && !queueName.equalsIgnoreCase(""String_Node_Str"")) {
      filePath=JMSClientUtil.getEventFilePath(sampleNumber,format,queueName,filePath);
      QueueConnection queueConnection;
      QueueConnectionFactory connFactory=null;
      if (""String_Node_Str"".equalsIgnoreCase(broker)) {
        properties.load(ClassLoader.getSystemClassLoader().getResourceAsStream(""String_Node_Str""));
        Context context=new InitialContext(properties);
        connFactory=(QueueConnectionFactory)context.lookup(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(broker)) {
        properties.load(ClassLoader.getSystemClassLoader().getResourceAsStream(""String_Node_Str""));
        Context context=new InitialContext(properties);
        connFactory=(QueueConnectionFactory)context.lookup(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(broker)) {
        properties.load(ClassLoader.getSystemClassLoader().getResourceAsStream(""String_Node_Str""));
        Context context=new InitialContext(properties);
        connFactory=(QueueConnectionFactory)context.lookup(""String_Node_Str"");
      }
      if (connFactory != null) {
        queueConnection=connFactory.createQueueConnection();
        queueConnection.start();
        session=queueConnection.createQueueSession(false,Session.AUTO_ACKNOWLEDGE);
        if (session != null) {
          Queue queue=session.createQueue(queueName);
          MessageProducer producer=session.createProducer(queue);
          List<String> messagesList=JMSClientUtil.readFile(filePath);
          try {
            if (""String_Node_Str"".equalsIgnoreCase(format)) {
              log.info(""String_Node_Str"" + queueName + ""String_Node_Str"");
              JMSClientUtil.publishMapMessage(producer,session,messagesList);
            }
 else {
              log.info(""String_Node_Str"" + format + ""String_Node_Str""+ queueName+ ""String_Node_Str"");
              JMSClientUtil.publishTextMessage(producer,session,messagesList);
            }
          }
 catch (          JMSException e) {
            log.error(""String_Node_Str"" + e.getMessage(),e);
          }
catch (          IOException e) {
            log.error(""String_Node_Str"" + e.getMessage(),e);
          }
 finally {
            producer.close();
            session.close();
            queueConnection.stop();
          }
        }
      }
 else {
        log.error(""String_Node_Str"");
      }
    }
 else {
      log.error(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"");
  }
}","public static void main(String[] args){
  String sampleNumber=args[0];
  String topicName=args[1];
  String queueName=args[2];
  String format=args[3];
  String filePath=args[4];
  String broker=args[5];
  if (format == null || ""String_Node_Str"".equals(format)) {
    format=""String_Node_Str"";
  }
  if (""String_Node_Str"".equalsIgnoreCase(broker)) {
    broker=""String_Node_Str"";
  }
  Session session=null;
  Properties properties=new Properties();
  if (!""String_Node_Str"".equalsIgnoreCase(broker) && !""String_Node_Str"".equalsIgnoreCase(broker) && !""String_Node_Str"".equalsIgnoreCase(broker)) {
    log.error(""String_Node_Str"");
    return;
  }
  try {
    if (topicName != null && !""String_Node_Str"".equalsIgnoreCase(topicName)) {
      filePath=JMSClientUtil.getEventFilePath(sampleNumber,format,topicName,filePath);
      TopicConnection topicConnection;
      TopicConnectionFactory connFactory=null;
      if (""String_Node_Str"".equalsIgnoreCase(broker)) {
        properties.load(ClassLoader.getSystemClassLoader().getResourceAsStream(""String_Node_Str""));
        Context context=new InitialContext(properties);
        connFactory=(TopicConnectionFactory)context.lookup(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(broker)) {
        properties.load(ClassLoader.getSystemClassLoader().getResourceAsStream(""String_Node_Str""));
        Context context=new InitialContext(properties);
        connFactory=(TopicConnectionFactory)context.lookup(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(broker)) {
        properties.load(ClassLoader.getSystemClassLoader().getResourceAsStream(""String_Node_Str""));
        Context context=new InitialContext(properties);
        connFactory=(TopicConnectionFactory)context.lookup(""String_Node_Str"");
      }
      if (connFactory != null) {
        topicConnection=connFactory.createTopicConnection();
        topicConnection.start();
        session=topicConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
        if (session != null) {
          Topic topic=session.createTopic(topicName);
          MessageProducer producer=session.createProducer(topic);
          List<String> messagesList=JMSClientUtil.readFile(filePath);
          try {
            if (""String_Node_Str"".equalsIgnoreCase(format)) {
              log.info(""String_Node_Str"" + topicName + ""String_Node_Str"");
              JMSClientUtil.publishMapMessage(producer,session,messagesList);
            }
 else {
              log.info(""String_Node_Str"" + format + ""String_Node_Str""+ topicName+ ""String_Node_Str"");
              JMSClientUtil.publishTextMessage(producer,session,messagesList);
            }
            log.info(""String_Node_Str"");
          }
 catch (          JMSException e) {
            log.error(""String_Node_Str"" + e.getMessage(),e);
          }
catch (          IOException e) {
            log.error(""String_Node_Str"" + e.getMessage(),e);
          }
 finally {
            producer.close();
            session.close();
            topicConnection.stop();
          }
        }
      }
 else {
        log.error(""String_Node_Str"");
      }
    }
 else     if (queueName != null && !queueName.equalsIgnoreCase(""String_Node_Str"")) {
      filePath=JMSClientUtil.getEventFilePath(sampleNumber,format,queueName,filePath);
      QueueConnection queueConnection;
      QueueConnectionFactory connFactory=null;
      if (""String_Node_Str"".equalsIgnoreCase(broker)) {
        properties.load(ClassLoader.getSystemClassLoader().getResourceAsStream(""String_Node_Str""));
        Context context=new InitialContext(properties);
        connFactory=(QueueConnectionFactory)context.lookup(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(broker)) {
        properties.load(ClassLoader.getSystemClassLoader().getResourceAsStream(""String_Node_Str""));
        Context context=new InitialContext(properties);
        connFactory=(QueueConnectionFactory)context.lookup(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(broker)) {
        properties.load(ClassLoader.getSystemClassLoader().getResourceAsStream(""String_Node_Str""));
        Context context=new InitialContext(properties);
        connFactory=(QueueConnectionFactory)context.lookup(""String_Node_Str"");
      }
      if (connFactory != null) {
        queueConnection=connFactory.createQueueConnection();
        queueConnection.start();
        session=queueConnection.createQueueSession(false,Session.AUTO_ACKNOWLEDGE);
        if (session != null) {
          Queue queue=session.createQueue(queueName);
          MessageProducer producer=session.createProducer(queue);
          List<String> messagesList=JMSClientUtil.readFile(filePath);
          try {
            if (""String_Node_Str"".equalsIgnoreCase(format)) {
              log.info(""String_Node_Str"" + queueName + ""String_Node_Str"");
              JMSClientUtil.publishMapMessage(producer,session,messagesList);
            }
 else {
              log.info(""String_Node_Str"" + format + ""String_Node_Str""+ queueName+ ""String_Node_Str"");
              JMSClientUtil.publishTextMessage(producer,session,messagesList);
            }
          }
 catch (          JMSException e) {
            log.error(""String_Node_Str"" + e.getMessage(),e);
          }
catch (          IOException e) {
            log.error(""String_Node_Str"" + e.getMessage(),e);
          }
 finally {
            producer.close();
            session.close();
            queueConnection.stop();
          }
        }
      }
 else {
        log.error(""String_Node_Str"");
      }
    }
 else {
      log.error(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.9983505512631304
34806,"public void setCoordsPoly(Coordinate[] coords){
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  for (int i=0; i < coords.length; i++) {
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"").append(coords[i].x).append(""String_Node_Str"").append(coords[i].y).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  coordinates=sb.toString();
}","public void setCoordsPoly(Coordinate[] coords){
  StringBuilder sb=new StringBuilder();
  if (coords.length != 0) {
    sb.append(""String_Node_Str"");
    for (int i=0; i < coords.length; i++) {
      if (i != 0) {
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"").append(coords[i].x).append(""String_Node_Str"").append(coords[i].y).append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  coordinates=sb.toString();
}",0.7056229327453142
34807,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testGetAllEventStreamInfoDto(){
  String samplePath=""String_Node_Str"" + File.separator + ""String_Node_Str"";
  try {
    String streamDefinitionAsString=getJSONArtifactConfiguration(samplePath,""String_Node_Str"");
    eventStreamManagerAdminServiceClient.addEventStreamAsString(streamDefinitionAsString);
    StreamDefinitionInfoDto[] allEventStreamInfoDto=eventSimulatorAdminServiceClient.getAllEventStreamInfoDto();
    Assert.assertEquals(allEventStreamInfoDto.length,1);
    Assert.assertEquals(allEventStreamInfoDto[0].getStreamName(),""String_Node_Str"");
    Assert.assertEquals(allEventStreamInfoDto[0].getStreamVersion(),""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testGetAllEventStreamInfoDto(){
  String samplePath=""String_Node_Str"" + File.separator + ""String_Node_Str"";
  try {
    String streamDefinitionAsString=getJSONArtifactConfiguration(samplePath,""String_Node_Str"");
    eventStreamManagerAdminServiceClient.addEventStreamAsString(streamDefinitionAsString);
    StreamDefinitionInfoDto[] allEventStreamInfoDto=eventSimulatorAdminServiceClient.getAllEventStreamInfoDto();
    Assert.assertEquals(allEventStreamInfoDto.length,1);
    Assert.assertEquals(allEventStreamInfoDto[0].getStreamName(),""String_Node_Str"");
    Assert.assertEquals(allEventStreamInfoDto[0].getStreamVersion(),""String_Node_Str"");
    eventStreamManagerAdminServiceClient.removeEventStream(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9415310427968656
34808,"@Override protected void process(ComplexEventChunk<StreamEvent> streamEventChunk,Processor nextProcessor,StreamEventCloner streamEventCloner){
  while (streamEventChunk.hasNext()) {
    StreamEvent streamEvent=streamEventChunk.next();
    String eventId=(String)streamEvent.getOutputData()[variablePosition];
    if (eventsBuffer.containsKey(eventId)) {
      eventsBuffer.get(eventId).add(streamEvent);
      if (eventsBuffer.get(eventId).size() == getDeployedExecutionPlansCount()) {
        ComplexEventChunk fusedEvent=eventsFuser(streamEvent);
        nextProcessor.process(fusedEvent);
        eventsBuffer.remove(eventId);
      }
    }
 else     if (getDeployedExecutionPlansCount().equals(1)) {
      nextProcessor.process(streamEventChunk);
    }
 else {
      ArrayList<StreamEvent> buffer=new ArrayList<StreamEvent>();
      buffer.add(streamEvent);
      eventsBuffer.put(eventId,buffer);
    }
  }
}","@Override protected void process(ComplexEventChunk<StreamEvent> streamEventChunk,Processor nextProcessor,StreamEventCloner streamEventCloner){
  while (streamEventChunk.hasNext()) {
    StreamEvent streamEvent=streamEventChunk.next();
    String eventId=(String)streamEvent.getOutputData()[variablePosition];
    if (eventsBuffer.containsKey(eventId)) {
      eventsBuffer.get(eventId).add(streamEvent);
      if (eventsBuffer.get(eventId).size() == getDeployedExecutionPlansCount()) {
        fuseEvent(streamEvent);
        eventsBuffer.remove(eventId);
      }
 else {
        streamEventChunk.remove();
      }
    }
 else     if (getDeployedExecutionPlansCount().equals(1)) {
      nextProcessor.process(streamEventChunk);
    }
 else {
      ArrayList<StreamEvent> buffer=new ArrayList<StreamEvent>();
      buffer.add(streamEvent);
      eventsBuffer.put(eventId,buffer);
      streamEventChunk.remove();
    }
  }
  nextProcessor.process(streamEventChunk);
}",0.8408728046833422
34809,"private void measureThroughput(List<Event> eventList){
  String threadName=Thread.currentThread().getName();
  long receivedTimeNanos=System.nanoTime();
  long producerIndex=0;
  long timeStampNanos=0;
  for (  Event event : eventList) {
    long currentTotal=totalEventCount++;
    long currentGroupCount=groupCount++;
    producerIndex=(Long)event.getMetaData()[1];
    if (groupCount >= groupSize) {
      double elapsedTimeInSec=(receivedTimeNanos - groupStartTimeNanos) / 1000000000D;
      double totalElapsedTimeInSec=(receivedTimeNanos - totalStartTimeNanos) / 1000000000D;
      double totalThroughput=totalEventCount / totalElapsedTimeInSec;
      double throughput=groupCount / elapsedTimeInSec;
      log.info(""String_Node_Str"" + threadName + ""String_Node_Str""+ totalElapsedTimeInSec+ ""String_Node_Str""+ currentGroupCount+ ""String_Node_Str""+ groupStartIndex+ ""String_Node_Str""+ producerIndex+ ""String_Node_Str""+ throughput+ ""String_Node_Str""+ currentTotal+ ""String_Node_Str""+ totalThroughput+ ""String_Node_Str"");
      groupStartTimeNanos=System.nanoTime();
      groupStartIndex=producerIndex;
      groupCount=0;
    }
  }
}","private void measureThroughput(List<Event> eventList){
  String threadName=Thread.currentThread().getName();
  long receivedTimeNanos=System.nanoTime();
  long producerIndex=0;
  long timeStampNanos=0;
  for (  Event event : eventList) {
    long currentTotal=totalEventCount++;
    long currentGroupCount=groupCount++;
    producerIndex=(Long)event.getMetaData()[1];
    if (groupCount >= receiverGroupSize) {
      double elapsedTimeInSec=(receivedTimeNanos - groupStartTimeNanos) / 1000000000D;
      double totalElapsedTimeInSec=(receivedTimeNanos - totalStartTimeNanos) / 1000000000D;
      double totalThroughput=totalEventCount / totalElapsedTimeInSec;
      double throughput=groupCount / elapsedTimeInSec;
      log.info(""String_Node_Str"" + threadName + ""String_Node_Str""+ totalElapsedTimeInSec+ ""String_Node_Str""+ currentGroupCount+ ""String_Node_Str""+ groupStartIndex+ ""String_Node_Str""+ producerIndex+ ""String_Node_Str""+ throughput+ ""String_Node_Str""+ currentTotal+ ""String_Node_Str""+ totalThroughput+ ""String_Node_Str"");
      groupStartTimeNanos=System.nanoTime();
      groupStartIndex=producerIndex;
      groupCount=0;
    }
  }
}",0.9956217162872154
34810,"public static void main(String[] args) throws DataBridgeException {
  if (args.length > 0) {
    totalEvents=Long.valueOf(args[0]);
  }
  if (args.length > 1) {
    groupSize=Integer.valueOf(args[1]);
  }
  if (args.length > 2) {
    warmUpThreshold=Integer.valueOf(args[2]);
  }
  if (args.length > 3) {
    sleepAfterWarmUpMillis=Long.valueOf(args[3]);
  }
  ThriftReceiver thriftReceiver=perfTestClient.new ThriftReceiver();
  thriftReceiver.setReceiverPort(7661);
  ThriftPublisher thriftPublisher=perfTestClient.new ThriftPublisher();
  Thread testServerThread=new Thread(thriftReceiver);
  Thread publisherClient=new Thread(thriftPublisher);
synchronized (perfTestClient) {
    try {
      testServerThread.start();
      Thread.sleep(2000);
      publisherClient.start();
      perfTestClient.wait();
      thriftReceiver.stop();
    }
 catch (    InterruptedException ignored) {
      System.out.println(""String_Node_Str"" + ignored.getMessage());
    }
  }
}","public static void main(String[] args) throws DataBridgeException {
  if (args.length > 0) {
    totalEvents=Long.valueOf(args[0]);
  }
  if (args.length > 1) {
    receiverGroupSize=Integer.valueOf(args[1]);
  }
  if (args.length > 2) {
    warmUpThreshold=Integer.valueOf(args[2]);
  }
  if (args.length > 3) {
    sleepAfterWarmUpMillis=Long.valueOf(args[3]);
  }
  ThriftReceiver thriftReceiver=perfTestClient.new ThriftReceiver();
  thriftReceiver.setReceiverPort(7661);
  ThriftPublisher thriftPublisher=perfTestClient.new ThriftPublisher();
  Thread testServerThread=new Thread(thriftReceiver);
  Thread publisherClient=new Thread(thriftPublisher);
synchronized (perfTestClient) {
    try {
      testServerThread.start();
      Thread.sleep(2000);
      publisherClient.start();
      perfTestClient.wait();
      thriftReceiver.stop();
    }
 catch (    InterruptedException ignored) {
      System.out.println(""String_Node_Str"" + ignored.getMessage());
    }
  }
}",0.9948453608247424
34811,"private void startThriftPublisher() throws InterruptedException, AgentException, MalformedStreamDefinitionException, StreamDefinitionException, DifferentStreamDefinitionAlreadyDefinedException, TransportException, AuthenticationException, MalformedURLException {
  KeyStoreUtil.setTrustStoreParams();
  DataPublisher dataPublisher=new DataPublisher(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String streamId;
  try {
    streamId=dataPublisher.findStream(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  NoStreamDefinitionExistException e) {
    StreamDefinition streamDefinition=new StreamDefinition(""String_Node_Str"",""String_Node_Str"");
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.STRING);
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.LONG);
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.LONG);
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.LONG);
    streamDefinition.addPayloadData(""String_Node_Str"",AttributeType.STRING);
    streamDefinition.addPayloadData(""String_Node_Str"",AttributeType.STRING);
    streamId=dataPublisher.defineStream(streamDefinition);
  }
  Thread.sleep(2000);
  System.out.println(""String_Node_Str"");
  long startTime=System.nanoTime();
  for (long i=0; i < totalEvents; i++) {
    Object[] metaDataArray=new Object[]{DataProvider.getMeta(),i,System.currentTimeMillis(),System.nanoTime()};
    dataPublisher.publish(streamId,metaDataArray,null,DataProvider.getPayload());
    if ((i + 1) % 100000 == 0) {
      if ((i + 1) == warmUpThreshold) {
        Thread.sleep(sleepAfterWarmUpMillis);
      }
      long elapsedTime=System.nanoTime() - startTime;
      double timeInSec=elapsedTime / 1000000000D;
      double throughputPerSec=(i + 1) / timeInSec;
      System.out.println(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ timeInSec+ ""String_Node_Str""+ throughputPerSec+ ""String_Node_Str"");
      startTime=System.nanoTime();
    }
  }
  Thread.sleep(1000);
  dataPublisher.stop();
}","private void startThriftPublisher() throws InterruptedException, AgentException, MalformedStreamDefinitionException, StreamDefinitionException, DifferentStreamDefinitionAlreadyDefinedException, TransportException, AuthenticationException, MalformedURLException {
  KeyStoreUtil.setTrustStoreParams();
  DataPublisher dataPublisher=new DataPublisher(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String streamId;
  try {
    streamId=dataPublisher.findStream(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  NoStreamDefinitionExistException e) {
    StreamDefinition streamDefinition=new StreamDefinition(""String_Node_Str"",""String_Node_Str"");
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.STRING);
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.LONG);
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.LONG);
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.LONG);
    streamDefinition.addPayloadData(""String_Node_Str"",AttributeType.STRING);
    streamDefinition.addPayloadData(""String_Node_Str"",AttributeType.STRING);
    streamId=dataPublisher.defineStream(streamDefinition);
  }
  Thread.sleep(2000);
  System.out.println(""String_Node_Str"");
  long startTime=System.nanoTime();
  for (long i=0; i < totalEvents; i++) {
    Object[] metaDataArray=new Object[]{DataProvider.getMeta(),i,System.currentTimeMillis(),System.nanoTime()};
    dataPublisher.publish(streamId,metaDataArray,null,DataProvider.getPayload());
    if ((i + 1) % GROUP_SIZE == 0) {
      if ((i + 1) == warmUpThreshold) {
        Thread.sleep(sleepAfterWarmUpMillis);
      }
      long elapsedTime=System.nanoTime() - startTime;
      double timeInSec=elapsedTime / 1000000000D;
      double throughputPerSec=GROUP_SIZE / timeInSec;
      System.out.println(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ GROUP_SIZE+ ""String_Node_Str""+ timeInSec+ ""String_Node_Str""+ throughputPerSec+ ""String_Node_Str"");
      startTime=System.nanoTime();
    }
  }
  Thread.sleep(1000);
  dataPublisher.stop();
}",0.9547466797835712
34812,"private void measureThroughput(List<Event> eventList){
  String threadName=Thread.currentThread().getName();
  long receivedTimeNanos=System.nanoTime();
  long producerIndex=0;
  long timeStampNanos=0;
  if (continuityCheckEnabled && !isEventsContinuous(eventList)) {
    log.warn(""String_Node_Str"");
  }
  for (  Event event : eventList) {
    long currentTotal=totalEventCount.incrementAndGet();
    long currentGroupCount=groupCount.incrementAndGet();
    producerIndex=(Long)event.getMetaData()[1];
    timeStampNanos=(Long)event.getMetaData()[3];
    log.trace(""String_Node_Str"" + threadName + ""String_Node_Str""+ producerIndex+ ""String_Node_Str""+ timeStampNanos+ ""String_Node_Str""+ Arrays.toString(event.getPayloadData()));
    if (groupCount.compareAndSet(groupSize,0)) {
      double elapsedTimeInSec=(receivedTimeNanos - groupStartTimeNanos) / 1000000000D;
      double totalElapsedTimeInSec=(receivedTimeNanos - totalStartTimeNanos) / 1000000000D;
      double totalThroughput=totalEventCount.get() / totalElapsedTimeInSec;
      double throughput=currentGroupCount / elapsedTimeInSec;
      log.info(""String_Node_Str"" + threadName + ""String_Node_Str""+ totalElapsedTimeInSec+ ""String_Node_Str""+ currentGroupCount+ ""String_Node_Str""+ groupStartIndex+ ""String_Node_Str""+ producerIndex+ ""String_Node_Str""+ throughput+ ""String_Node_Str""+ currentTotal+ ""String_Node_Str""+ totalThroughput+ ""String_Node_Str"");
      groupStartTimeNanos=System.nanoTime();
      groupStartIndex=producerIndex;
    }
  }
}","private void measureThroughput(List<Event> eventList){
  String threadName=Thread.currentThread().getName();
  long receivedTimeNanos=System.nanoTime();
  long producerIndex=0;
  long timeStampNanos=0;
  if (continuityCheckEnabled && !isEventsContinuous(eventList)) {
    log.warn(""String_Node_Str"");
  }
  for (  Event event : eventList) {
    long currentTotal=totalEventCount.incrementAndGet();
    long currentGroupCount=groupCount.incrementAndGet();
    producerIndex=(Long)event.getMetaData()[1];
    timeStampNanos=(Long)event.getMetaData()[3];
    log.trace(""String_Node_Str"" + threadName + ""String_Node_Str""+ producerIndex+ ""String_Node_Str""+ timeStampNanos+ ""String_Node_Str""+ Arrays.toString(event.getPayloadData()));
    if (groupCount.compareAndSet(receiverGroupSize,0)) {
      double elapsedTimeInSec=(receivedTimeNanos - groupStartTimeNanos) / 1000000000D;
      double totalElapsedTimeInSec=(receivedTimeNanos - totalStartTimeNanos) / 1000000000D;
      double totalThroughput=totalEventCount.get() / totalElapsedTimeInSec;
      double throughput=currentGroupCount / elapsedTimeInSec;
      log.info(""String_Node_Str"" + threadName + ""String_Node_Str""+ totalElapsedTimeInSec+ ""String_Node_Str""+ currentGroupCount+ ""String_Node_Str""+ groupStartIndex+ ""String_Node_Str""+ producerIndex+ ""String_Node_Str""+ throughput+ ""String_Node_Str""+ currentTotal+ ""String_Node_Str""+ totalThroughput+ ""String_Node_Str"");
      groupStartTimeNanos=System.nanoTime();
      groupStartIndex=producerIndex;
    }
  }
}",0.9966887417218544
34813,"public static void main(String[] args) throws DataBridgeException {
  if (args.length == 0) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
  if (args.length > 0) {
    totalEvents=Long.valueOf(args[0]);
    if (totalEvents <= 0) {
      longRunningMode=true;
    }
  }
  if (args.length > 1) {
    groupSize=Integer.valueOf(args[1]);
  }
  if (args.length > 2) {
    warmUpThreshold=Integer.valueOf(args[2]);
  }
  if (args.length > 3) {
    sleepAfterWarmUpMillis=Long.valueOf(args[3]);
  }
  ThriftReceiver thriftReceiver=perfTestClient.new ThriftReceiver();
  thriftReceiver.setReceiverPort(7661);
  ThriftPublisher thriftPublisher=perfTestClient.new ThriftPublisher();
  Thread testServerThread=new Thread(thriftReceiver);
  Thread publisherClient=new Thread(thriftPublisher);
synchronized (perfTestClient) {
    try {
      testServerThread.start();
      Thread.sleep(2000);
      publisherClient.start();
      perfTestClient.wait();
      thriftReceiver.stop();
    }
 catch (    InterruptedException ignored) {
      System.out.println(""String_Node_Str"" + ignored.getMessage());
    }
  }
}","public static void main(String[] args) throws DataBridgeException {
  if (args.length == 0) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
  if (args.length > 0) {
    totalEvents=Long.valueOf(args[0]);
    if (totalEvents <= 0) {
      longRunningMode=true;
    }
  }
  if (args.length > 1) {
    receiverGroupSize=Integer.valueOf(args[1]);
  }
  if (args.length > 2) {
    warmUpThreshold=Integer.valueOf(args[2]);
  }
  if (args.length > 3) {
    sleepAfterWarmUpMillis=Long.valueOf(args[3]);
  }
  ThriftReceiver thriftReceiver=null;
  Thread testServerThread=null;
  if (receiverOnSameJvm) {
    thriftReceiver=perfTestClient.new ThriftReceiver();
    thriftReceiver.setReceiverPort(7661);
    testServerThread=new Thread(thriftReceiver);
  }
  ThriftPublisher thriftPublisher=perfTestClient.new ThriftPublisher();
  Thread publisherClient=new Thread(thriftPublisher);
synchronized (perfTestClient) {
    try {
      if (testServerThread != null) {
        testServerThread.start();
        Thread.sleep(2000);
      }
      publisherClient.start();
      perfTestClient.wait();
      if (thriftReceiver != null) {
        thriftReceiver.stop();
      }
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"" + e.getMessage());
    }
  }
}",0.8153665229321835
34814,"private void startThriftPublisher() throws InterruptedException, AgentException, MalformedStreamDefinitionException, StreamDefinitionException, DifferentStreamDefinitionAlreadyDefinedException, TransportException, AuthenticationException, MalformedURLException {
  KeyStoreUtil.setTrustStoreParams();
  DataPublisher dataPublisher=new DataPublisher(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String streamId;
  try {
    streamId=dataPublisher.findStream(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  NoStreamDefinitionExistException e) {
    StreamDefinition streamDefinition=new StreamDefinition(""String_Node_Str"",""String_Node_Str"");
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.STRING);
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.LONG);
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.LONG);
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.LONG);
    streamDefinition.addPayloadData(""String_Node_Str"",AttributeType.STRING);
    streamDefinition.addPayloadData(""String_Node_Str"",AttributeType.STRING);
    streamId=dataPublisher.defineStream(streamDefinition);
  }
  Thread.sleep(2000);
  System.out.println(""String_Node_Str"");
  if (longRunningMode) {
    System.out.println(""String_Node_Str"");
    long startTime=System.nanoTime();
    boolean burstMode=false;
    for (long i=0; i < Long.MAX_VALUE; i++) {
      Object[] metaDataArray=new Object[]{DataProvider.getMeta(),i,System.currentTimeMillis(),System.nanoTime()};
      dataPublisher.publish(streamId,metaDataArray,null,DataProvider.getPayload());
      if (!burstMode) {
        int sleepTime=(int)Math.round(Math.random() * 100);
        Thread.sleep(sleepTime);
      }
      if ((i + 1) % 100000 == 0) {
        long elapsedTime=System.nanoTime() - startTime;
        double timeInSec=elapsedTime / 1000000000D;
        double throughputPerSec=(i + 1) / timeInSec;
        System.out.println(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ timeInSec+ ""String_Node_Str""+ throughputPerSec+ ""String_Node_Str"");
        burstMode=!burstMode;
        startTime=System.nanoTime();
      }
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    long startTime=System.nanoTime();
    for (long i=0; i < totalEvents; i++) {
      Object[] metaDataArray=new Object[]{DataProvider.getMeta(),i,System.currentTimeMillis(),System.nanoTime()};
      dataPublisher.publish(streamId,metaDataArray,null,DataProvider.getPayload());
      if ((i + 1) % 100000 == 0) {
        if ((i + 1) == warmUpThreshold) {
          Thread.sleep(sleepAfterWarmUpMillis);
        }
        long elapsedTime=System.nanoTime() - startTime;
        double timeInSec=elapsedTime / 1000000000D;
        double throughputPerSec=(i + 1) / timeInSec;
        System.out.println(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ timeInSec+ ""String_Node_Str""+ throughputPerSec+ ""String_Node_Str"");
        startTime=System.nanoTime();
      }
    }
  }
  Thread.sleep(1000);
  dataPublisher.stop();
}","private void startThriftPublisher() throws InterruptedException, AgentException, MalformedStreamDefinitionException, StreamDefinitionException, DifferentStreamDefinitionAlreadyDefinedException, TransportException, AuthenticationException, MalformedURLException {
  KeyStoreUtil.setTrustStoreParams();
  DataPublisher dataPublisher=new DataPublisher(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String streamId;
  try {
    streamId=dataPublisher.findStream(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  NoStreamDefinitionExistException e) {
    StreamDefinition streamDefinition=new StreamDefinition(""String_Node_Str"",""String_Node_Str"");
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.STRING);
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.LONG);
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.LONG);
    streamDefinition.addMetaData(""String_Node_Str"",AttributeType.LONG);
    streamDefinition.addPayloadData(""String_Node_Str"",AttributeType.STRING);
    streamDefinition.addPayloadData(""String_Node_Str"",AttributeType.STRING);
    streamId=dataPublisher.defineStream(streamDefinition);
  }
  Thread.sleep(2000);
  System.out.println(""String_Node_Str"");
  if (longRunningMode) {
    System.out.println(""String_Node_Str"");
    long startTime=System.nanoTime();
    boolean burstMode=false;
    for (long i=0; i < Long.MAX_VALUE; i++) {
      Object[] metaDataArray=new Object[]{DataProvider.getMeta(),i,System.currentTimeMillis(),System.nanoTime()};
      dataPublisher.publish(streamId,metaDataArray,null,DataProvider.getPayload());
      if (!burstMode) {
        int sleepTime=(int)Math.round(Math.random() * 100);
        Thread.sleep(sleepTime);
      }
      if ((i + 1) % GROUP_SIZE == 0) {
        long elapsedTime=System.nanoTime() - startTime;
        double timeInSec=elapsedTime / 1000000000D;
        double throughputPerSec=GROUP_SIZE / timeInSec;
        System.out.println(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ GROUP_SIZE+ ""String_Node_Str""+ timeInSec+ ""String_Node_Str""+ throughputPerSec+ ""String_Node_Str"");
        burstMode=!burstMode;
        startTime=System.nanoTime();
      }
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    long startTime=System.nanoTime();
    for (long i=0; i < totalEvents; i++) {
      Object[] metaDataArray=new Object[]{DataProvider.getMeta(),i,System.currentTimeMillis(),System.nanoTime()};
      dataPublisher.publish(streamId,metaDataArray,null,DataProvider.getPayload());
      if (i % GROUP_SIZE == (GROUP_SIZE - 1)) {
        if (i == (warmUpThreshold - 1)) {
          Thread.sleep(sleepAfterWarmUpMillis);
        }
        long elapsedTime=System.nanoTime() - startTime;
        double timeInSec=elapsedTime / 1000000000D;
        double throughputPerSec=GROUP_SIZE / timeInSec;
        System.out.println(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ GROUP_SIZE+ ""String_Node_Str""+ timeInSec+ ""String_Node_Str""+ throughputPerSec+ ""String_Node_Str"");
        startTime=System.nanoTime();
      }
    }
  }
  Thread.sleep(1000);
  dataPublisher.stop();
}",0.9324214297345708
34815,"/** 
 * Animates the ActionButton onto the screen so that the user may interact. Animation occurs from the bottom of the screen, moving up until it reaches the appropriate distance from the bottom.
 */
public void show(){
  final Activity activity=(Activity)getContext();
  FrameLayout.LayoutParams params=new FrameLayout.LayoutParams(toDp(activity,width),toDp(activity,height));
  this.setLayoutParams(params);
  FrameLayout parent=(FrameLayout)activity.findViewById(android.R.id.content);
  parent.addView(this);
  Display display=activity.getWindowManager().getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  float screenWidth=size.x;
  float screenHeight=size.y;
  setTranslationX(screenWidth - toDp(activity,distanceFromRight));
  ObjectAnimator animator=ObjectAnimator.ofFloat(this,View.Y,screenHeight,screenHeight - toDp(activity,distanceFromBottom) - toDp(activity,DEFAULT_HEIGHT));
  animator.setInterpolator(new DecelerateInterpolator());
  animator.setDuration(DEFAULT_ANIMATION_TIME);
  animator.start();
  isShowing=true;
}","/** 
 * Animates the ActionButton onto the screen so that the user may interact. Animation occurs from the bottom of the screen, moving up until it reaches the appropriate distance from the bottom.
 */
public void show(){
  final Activity activity=(Activity)getContext();
  ViewGroup.LayoutParams params=new FrameLayout.LayoutParams(toDp(activity,width),toDp(activity,height));
  this.setLayoutParams(params);
  FrameLayout parent=(FrameLayout)activity.findViewById(android.R.id.content);
  parent.addView(this);
  Display display=activity.getWindowManager().getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  float screenWidth=size.x;
  float screenHeight=size.y;
  setTranslationX(screenWidth - toDp(activity,distanceFromRight));
  ObjectAnimator animator=ObjectAnimator.ofFloat(this,View.Y,screenHeight,screenHeight - toDp(activity,distanceFromBottom) - toDp(activity,distanceFromBottom));
  animator.setInterpolator(new DecelerateInterpolator());
  animator.setDuration(DEFAULT_ANIMATION_TIME);
  animator.start();
  isShowing=true;
}",0.9764150943396226
34816,"public Query constructQuery(final Field field,final IndexerField indexerField,final String query,final SearchType type) throws ParseException {
  if (indexerField == null) {
    getLogger().warn(""String_Node_Str"" + field.toString() + ""String_Node_Str"");
    return null;
  }
  if (!indexerField.isIndexed()) {
    getLogger().warn(""String_Node_Str"" + field.toString() + ""String_Node_Str"");
    return null;
  }
  if (Field.NOT_PRESENT.equals(query)) {
    return new WildcardQuery(new Term(indexerField.getKey(),""String_Node_Str""));
  }
  if (SearchType.EXACT.equals(type)) {
    if (indexerField.isKeyword()) {
      if (query.contains(""String_Node_Str"") || query.contains(""String_Node_Str"")) {
        return new WildcardQuery(new Term(indexerField.getKey(),query));
      }
 else {
        return new TermQuery(new Term(indexerField.getKey(),query));
      }
    }
 else     if (!indexerField.isKeyword() && indexerField.isStored()) {
      if (JarFileContentsIndexCreator.FLD_CLASSNAMES_KW.equals(indexerField)) {
        if (query.startsWith(""String_Node_Str"")) {
          return new TermQuery(new Term(indexerField.getKey(),query.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"")));
        }
 else {
          return new TermQuery(new Term(indexerField.getKey(),""String_Node_Str"" + query.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"")));
        }
      }
 else {
        getLogger().warn(type.toString() + ""String_Node_Str"" + indexerField.getOntology().toString()+ ""String_Node_Str"");
        return null;
      }
    }
 else {
      getLogger().warn(type.toString() + ""String_Node_Str"" + indexerField.getOntology().toString()+ ""String_Node_Str"");
      return null;
    }
  }
 else   if (SearchType.SCORED.equals(type)) {
    if (JarFileContentsIndexCreator.FLD_CLASSNAMES.equals(indexerField)) {
      String qpQuery=query.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      QueryParser qp=new QueryParser(indexerField.getKey(),new NexusAnalyzer());
      qp.setDefaultOperator(Operator.AND);
      return qp.parse(qpQuery);
    }
 else     if (indexerField.isKeyword()) {
      if (query.contains(""String_Node_Str"") || query.contains(""String_Node_Str"")) {
        return new WildcardQuery(new Term(indexerField.getKey(),query));
      }
 else {
        BooleanQuery bq=new BooleanQuery();
        Term t=new Term(indexerField.getKey(),query);
        bq.add(new TermQuery(t),Occur.SHOULD);
        PrefixQuery pq=new PrefixQuery(t);
        pq.setBoost(0.8f);
        bq.add(pq,Occur.SHOULD);
        return bq;
      }
    }
 else {
      String qpQuery=query;
      QueryParser qp=new QueryParser(indexerField.getKey(),new NexusAnalyzer());
      qp.setDefaultOperator(Operator.AND);
      if (qpQuery.matches(""String_Node_Str"")) {
        qpQuery=qpQuery.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      if (!qpQuery.endsWith(""String_Node_Str"") && !qpQuery.endsWith(""String_Node_Str"")) {
        qpQuery+=""String_Node_Str"";
      }
      try {
        BooleanQuery q1=new BooleanQuery();
        q1.add(qp.parse(qpQuery),Occur.SHOULD);
        if (qpQuery.contains(""String_Node_Str"")) {
          q1.add(qp.parse(""String_Node_Str"" + qpQuery + ""String_Node_Str""),Occur.SHOULD);
        }
        Query q2=null;
        int termCount=countTerms(indexerField,query);
        if (!query.contains(""String_Node_Str"") && termCount > 1) {
          IndexerField keywordField=selectIndexerField(indexerField.getOntology(),SearchType.EXACT);
          if (keywordField.isKeyword()) {
            q2=constructQuery(indexerField.getOntology(),keywordField,query,type);
          }
        }
        if (q2 == null) {
          return q1;
        }
 else {
          BooleanQuery bq=new BooleanQuery();
          bq.add(q2,Occur.SHOULD);
          bq.add(q1,Occur.SHOULD);
          return bq;
        }
      }
 catch (      ParseException e) {
        throw e;
      }
    }
  }
 else {
    return null;
  }
}","public Query constructQuery(final Field field,final IndexerField indexerField,final String query,final SearchType type) throws ParseException {
  if (indexerField == null) {
    getLogger().warn(""String_Node_Str"" + field.toString() + ""String_Node_Str""+ ""String_Node_Str"");
    return null;
  }
  if (!indexerField.isIndexed()) {
    getLogger().warn(""String_Node_Str"" + field.toString() + ""String_Node_Str"");
    return null;
  }
  if (Field.NOT_PRESENT.equals(query)) {
    return new WildcardQuery(new Term(indexerField.getKey(),""String_Node_Str""));
  }
  if (SearchType.EXACT.equals(type)) {
    if (indexerField.isKeyword()) {
      if (query.contains(""String_Node_Str"") || query.contains(""String_Node_Str"")) {
        return new WildcardQuery(new Term(indexerField.getKey(),query));
      }
 else {
        return new TermQuery(new Term(indexerField.getKey(),query));
      }
    }
 else     if (!indexerField.isKeyword() && indexerField.isStored()) {
      if (JarFileContentsIndexCreator.FLD_CLASSNAMES_KW.equals(indexerField)) {
        if (query.startsWith(""String_Node_Str"")) {
          return new TermQuery(new Term(indexerField.getKey(),query.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"")));
        }
 else {
          return new TermQuery(new Term(indexerField.getKey(),""String_Node_Str"" + query.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"")));
        }
      }
 else {
        getLogger().warn(type.toString() + ""String_Node_Str"" + indexerField.getOntology().toString()+ ""String_Node_Str""+ ""String_Node_Str"");
        return null;
      }
    }
 else {
      getLogger().warn(type.toString() + ""String_Node_Str"" + indexerField.getOntology().toString()+ ""String_Node_Str""+ ""String_Node_Str"");
      return null;
    }
  }
 else   if (SearchType.SCORED.equals(type)) {
    if (JarFileContentsIndexCreator.FLD_CLASSNAMES.equals(indexerField)) {
      String qpQuery=query.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      QueryParser qp=new QueryParser(indexerField.getKey(),new NexusAnalyzer());
      qp.setDefaultOperator(Operator.AND);
      return qp.parse(qpQuery);
    }
 else     if (indexerField.isKeyword()) {
      if (query.contains(""String_Node_Str"") || query.contains(""String_Node_Str"")) {
        return new WildcardQuery(new Term(indexerField.getKey(),query));
      }
 else {
        BooleanQuery bq=new BooleanQuery();
        Term t=new Term(indexerField.getKey(),query);
        bq.add(new TermQuery(t),Occur.SHOULD);
        PrefixQuery pq=new PrefixQuery(t);
        pq.setBoost(0.8f);
        bq.add(pq,Occur.SHOULD);
        return bq;
      }
    }
 else {
      String qpQuery=query;
      QueryParser qp=new QueryParser(indexerField.getKey(),new NexusAnalyzer());
      qp.setDefaultOperator(Operator.AND);
      if (qpQuery.matches(""String_Node_Str"")) {
        qpQuery=qpQuery.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      if (!qpQuery.endsWith(""String_Node_Str"") && !qpQuery.endsWith(""String_Node_Str"")) {
        qpQuery+=""String_Node_Str"";
      }
      try {
        BooleanQuery q1=new BooleanQuery();
        q1.add(qp.parse(qpQuery),Occur.SHOULD);
        if (qpQuery.contains(""String_Node_Str"")) {
          q1.add(qp.parse(""String_Node_Str"" + qpQuery + ""String_Node_Str""),Occur.SHOULD);
        }
        Query q2=null;
        int termCount=countTerms(indexerField,query);
        if (!query.contains(""String_Node_Str"") && termCount > 1) {
          IndexerField keywordField=selectIndexerField(indexerField.getOntology(),SearchType.EXACT);
          if (keywordField.isKeyword()) {
            q2=constructQuery(indexerField.getOntology(),keywordField,query,type);
          }
        }
        if (q2 == null) {
          return q1;
        }
 else {
          BooleanQuery bq=new BooleanQuery();
          bq.add(q2,Occur.SHOULD);
          bq.add(q1,Occur.SHOULD);
          return bq;
        }
      }
 catch (      ParseException e) {
        throw e;
      }
    }
  }
 else {
    return null;
  }
}",0.9933744042775776
34817,"protected TopScoreDocCollector doSearchWithCeiling(final AbstractSearchRequest request,final IndexSearcher indexSearcher,final Query query) throws IOException {
  int topHitCount=getTopDocsCollectorHitNum(request,AbstractSearchRequest.UNDEFINED);
  if (AbstractSearchRequest.UNDEFINED != topHitCount) {
    final TopScoreDocCollector hits=TopScoreDocCollector.create(topHitCount);
    indexSearcher.search(query,hits);
    return hits;
  }
 else {
    topHitCount=1000;
    TopScoreDocCollector hits=TopScoreDocCollector.create(topHitCount);
    indexSearcher.search(query,hits);
    if (topHitCount < hits.getTotalHits()) {
      topHitCount=hits.getTotalHits();
      if (getLogger().isDebugEnabled()) {
        getLogger().debug(""String_Node_Str"" + topHitCount + ""String_Node_Str"");
      }
      hits=TopScoreDocCollector.create(topHitCount);
      indexSearcher.search(query,hits);
    }
    return hits;
  }
}","protected TopScoreDocCollector doSearchWithCeiling(final AbstractSearchRequest request,final IndexSearcher indexSearcher,final Query query) throws IOException {
  int topHitCount=getTopDocsCollectorHitNum(request,AbstractSearchRequest.UNDEFINED);
  if (AbstractSearchRequest.UNDEFINED != topHitCount) {
    final TopScoreDocCollector hits=TopScoreDocCollector.create(topHitCount);
    indexSearcher.search(query,hits);
    return hits;
  }
 else {
    topHitCount=1000;
    TopScoreDocCollector hits=TopScoreDocCollector.create(topHitCount);
    indexSearcher.search(query,hits);
    if (topHitCount < hits.getTotalHits()) {
      topHitCount=hits.getTotalHits();
      if (getLogger().isDebugEnabled()) {
        getLogger().debug(""String_Node_Str"" + topHitCount + ""String_Node_Str""+ ""String_Node_Str"");
      }
      hits=TopScoreDocCollector.create(topHitCount);
      indexSearcher.search(query,hits);
    }
    return hits;
  }
}",0.989724175229854
34818,"private void printStats(final long startTimeInMillis){
  long t=System.currentTimeMillis() - startTimeInMillis;
  long s=t / 1000L;
  if (t > 60 * 1000) {
    long m=t / 1000L / 60L;
    System.err.printf(""String_Node_Str"",m,s - (m * 60));
  }
 else {
    System.err.printf(""String_Node_Str"",s);
  }
  Runtime r=Runtime.getRuntime();
  System.err.printf(""String_Node_Str"",(r.totalMemory() - r.freeMemory()) / MB,r.totalMemory() / MB);
}","private void printStats(final long startTimeInMillis){
  long t=System.currentTimeMillis() - startTimeInMillis;
  long s=TimeUnit.MILLISECONDS.toSeconds(t);
  if (t > TimeUnit.MINUTES.toMillis(1)) {
    long m=TimeUnit.MILLISECONDS.toMinutes(t);
    System.err.printf(""String_Node_Str"",m,s - (m * 60));
  }
 else {
    System.err.printf(""String_Node_Str"",s);
  }
  Runtime r=Runtime.getRuntime();
  System.err.printf(""String_Node_Str"",(r.totalMemory() - r.freeMemory()) / MB,r.totalMemory() / MB);
}",0.8106951871657754
34819,"@Override public String toString(){
  return new StringBuilder().append(groupKey).append(""String_Node_Str"").append(artifactInfos.toString()).toString();
}","@Override public String toString(){
  return groupKey + ""String_Node_Str"" + artifactInfos;
}",0.6991869918699187
34820,"/** 
 * Pack a context into a target directory. If the directory does not exists, it will be created. If the directory exists, it should be writable.
 * @param context the context to pack-up
 * @param targetDir the directory where to write results, has to be non-null
 * @throws IllegalArgumentException when the targetDir already exists and is not a writable directory.
 * @throws IOException on lethal IO problem
 */
void packIndex(IndexPackingRequest request) throws IOException, IllegalArgumentException ;","/** 
 * Pack a context into a target directory. If the directory does not exists, it will be created. If the directory exists, it should be writable.
 * @param request the request to process.
 * @throws IllegalArgumentException when the targetDir already exists and is not a writable directory.
 * @throws IOException on lethal IO problem
 */
void packIndex(IndexPackingRequest request) throws IOException, IllegalArgumentException ;",0.8535031847133758
34821,"public long readHeader() throws IOException {
  final byte HDRBYTE=(byte)((IndexDataWriter.VERSION << 24) >> 24);
  if (HDRBYTE != dis.readByte()) {
    throw new IOException(""String_Node_Str"");
  }
  return dis.readLong();
}","public long readHeader() throws IOException {
  final byte hdrbyte=(byte)((IndexDataWriter.VERSION << 24) >> 24);
  if (hdrbyte != dis.readByte()) {
    throw new IOException(""String_Node_Str"");
  }
  return dis.readLong();
}",0.9377777777777778
34822,"private static String readUTF(DataInput in) throws IOException {
  int utflen=in.readInt();
  byte[] bytearr;
  char[] chararr;
  try {
    bytearr=new byte[utflen];
    chararr=new char[utflen];
  }
 catch (  OutOfMemoryError e) {
    final IOException ex=new IOException(""String_Node_Str"" + ""String_Node_Str"");
    ex.initCause(e);
    throw ex;
  }
  int c, char2, char3;
  int count=0;
  int chararr_count=0;
  in.readFully(bytearr,0,utflen);
  while (count < utflen) {
    c=bytearr[count] & 0xff;
    if (c > 127) {
      break;
    }
    count++;
    chararr[chararr_count++]=(char)c;
  }
  while (count < utflen) {
    c=bytearr[count] & 0xff;
switch (c >> 4) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
      count++;
    chararr[chararr_count++]=(char)c;
  break;
case 12:
case 13:
count+=2;
if (count > utflen) {
throw new UTFDataFormatException(""String_Node_Str"");
}
char2=bytearr[count - 1];
if ((char2 & 0xC0) != 0x80) {
throw new UTFDataFormatException(""String_Node_Str"" + count);
}
chararr[chararr_count++]=(char)(((c & 0x1F) << 6) | (char2 & 0x3F));
break;
case 14:
count+=3;
if (count > utflen) {
throw new UTFDataFormatException(""String_Node_Str"");
}
char2=bytearr[count - 2];
char3=bytearr[count - 1];
if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) {
throw new UTFDataFormatException(""String_Node_Str"" + (count - 1));
}
chararr[chararr_count++]=(char)(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
break;
default :
throw new UTFDataFormatException(""String_Node_Str"" + count);
}
}
return new String(chararr,0,chararr_count);
}","private static String readUTF(DataInput in) throws IOException {
  int utflen=in.readInt();
  byte[] bytearr;
  char[] chararr;
  try {
    bytearr=new byte[utflen];
    chararr=new char[utflen];
  }
 catch (  OutOfMemoryError e) {
    final IOException ex=new IOException(""String_Node_Str"" + ""String_Node_Str"");
    ex.initCause(e);
    throw ex;
  }
  int c, char2, char3;
  int count=0;
  int chararrCount=0;
  in.readFully(bytearr,0,utflen);
  while (count < utflen) {
    c=bytearr[count] & 0xff;
    if (c > 127) {
      break;
    }
    count++;
    chararr[chararrCount++]=(char)c;
  }
  while (count < utflen) {
    c=bytearr[count] & 0xff;
switch (c >> 4) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
      count++;
    chararr[chararrCount++]=(char)c;
  break;
case 12:
case 13:
count+=2;
if (count > utflen) {
throw new UTFDataFormatException(""String_Node_Str"");
}
char2=bytearr[count - 1];
if ((char2 & 0xC0) != 0x80) {
throw new UTFDataFormatException(""String_Node_Str"" + count);
}
chararr[chararrCount++]=(char)(((c & 0x1F) << 6) | (char2 & 0x3F));
break;
case 14:
count+=3;
if (count > utflen) {
throw new UTFDataFormatException(""String_Node_Str"");
}
char2=bytearr[count - 2];
char3=bytearr[count - 1];
if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) {
throw new UTFDataFormatException(""String_Node_Str"" + (count - 1));
}
chararr[chararrCount++]=(char)(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
break;
default :
throw new UTFDataFormatException(""String_Node_Str"" + count);
}
}
return new String(chararr,0,chararrCount);
}",0.9943679599499374
34823,"public void packIndex(IndexPackingRequest request) throws IOException, IllegalArgumentException {
  if (request.getTargetDir() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (request.getTargetDir().exists()) {
    if (!request.getTargetDir().isDirectory()) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",request.getTargetDir().getAbsolutePath()));
    }
    if (!request.getTargetDir().canWrite()) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",request.getTargetDir().getAbsolutePath()));
    }
  }
 else {
    if (!request.getTargetDir().mkdirs()) {
      throw new IllegalArgumentException(""String_Node_Str"" + request.getTargetDir().getAbsolutePath());
    }
  }
  File legacyFile=new File(request.getTargetDir(),IndexingContext.INDEX_FILE_PREFIX + ""String_Node_Str"");
  File v1File=new File(request.getTargetDir(),IndexingContext.INDEX_FILE_PREFIX + ""String_Node_Str"");
  Properties info=null;
  try {
    info=readIndexProperties(request);
    if (request.isCreateIncrementalChunks()) {
      List<Integer> chunk=incrementalHandler.getIncrementalUpdates(request,info);
      if (chunk == null) {
        getLogger().debug(""String_Node_Str"");
        incrementalHandler.initializeProperties(info);
      }
 else       if (chunk.isEmpty()) {
        getLogger().debug(""String_Node_Str"");
      }
 else {
        File file=new File(request.getTargetDir(),IndexingContext.INDEX_FILE_PREFIX + ""String_Node_Str"" + info.getProperty(IndexingContext.INDEX_CHUNK_COUNTER)+ ""String_Node_Str"");
        writeIndexData(request.getContext(),chunk,file);
        if (request.isCreateChecksumFiles()) {
          FileUtils.fileWrite(new File(file.getParentFile(),file.getName() + ""String_Node_Str"").getAbsolutePath(),DigesterUtils.getSha1Digest(file));
          FileUtils.fileWrite(new File(file.getParentFile(),file.getName() + ""String_Node_Str"").getAbsolutePath(),DigesterUtils.getMd5Digest(file));
        }
      }
    }
  }
 catch (  IOException e) {
    getLogger().info(""String_Node_Str"");
    info=new Properties();
    incrementalHandler.initializeProperties(info);
  }
  Date timestamp=request.getContext().getTimestamp();
  if (timestamp == null) {
    timestamp=new Date(0);
  }
  if (request.getFormats().contains(IndexPackingRequest.IndexFormat.FORMAT_LEGACY)) {
    info.setProperty(IndexingContext.INDEX_LEGACY_TIMESTAMP,format(timestamp));
    writeIndexArchive(request.getContext(),legacyFile);
    if (request.isCreateChecksumFiles()) {
      FileUtils.fileWrite(new File(legacyFile.getParentFile(),legacyFile.getName() + ""String_Node_Str"").getAbsolutePath(),DigesterUtils.getSha1Digest(legacyFile));
      FileUtils.fileWrite(new File(legacyFile.getParentFile(),legacyFile.getName() + ""String_Node_Str"").getAbsolutePath(),DigesterUtils.getMd5Digest(legacyFile));
    }
  }
  if (request.getFormats().contains(IndexPackingRequest.IndexFormat.FORMAT_V1)) {
    info.setProperty(IndexingContext.INDEX_TIMESTAMP,format(timestamp));
    writeIndexData(request.getContext(),null,v1File);
    if (request.isCreateChecksumFiles()) {
      FileUtils.fileWrite(new File(v1File.getParentFile(),v1File.getName() + ""String_Node_Str"").getAbsolutePath(),DigesterUtils.getSha1Digest(v1File));
      FileUtils.fileWrite(new File(v1File.getParentFile(),v1File.getName() + ""String_Node_Str"").getAbsolutePath(),DigesterUtils.getMd5Digest(v1File));
    }
  }
  writeIndexProperties(request,info);
}","public void packIndex(IndexPackingRequest request) throws IOException, IllegalArgumentException {
  if (request.getTargetDir() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (request.getTargetDir().exists()) {
    if (!request.getTargetDir().isDirectory()) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",request.getTargetDir().getAbsolutePath()));
    }
    if (!request.getTargetDir().canWrite()) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",request.getTargetDir().getAbsolutePath()));
    }
  }
 else {
    if (!request.getTargetDir().mkdirs()) {
      throw new IllegalArgumentException(""String_Node_Str"" + request.getTargetDir().getAbsolutePath());
    }
  }
  File legacyFile=new File(request.getTargetDir(),IndexingContext.INDEX_FILE_PREFIX + ""String_Node_Str"");
  File v1File=new File(request.getTargetDir(),IndexingContext.INDEX_FILE_PREFIX + ""String_Node_Str"");
  Properties info=null;
  final IndexingContext context=request.getContext();
  context.lock();
  try {
    try {
      info=readIndexProperties(request);
      if (request.isCreateIncrementalChunks()) {
        List<Integer> chunk=incrementalHandler.getIncrementalUpdates(request,info);
        if (chunk == null) {
          getLogger().debug(""String_Node_Str"");
          incrementalHandler.initializeProperties(info);
        }
 else         if (chunk.isEmpty()) {
          getLogger().debug(""String_Node_Str"");
        }
 else {
          File file=new File(request.getTargetDir(),IndexingContext.INDEX_FILE_PREFIX + ""String_Node_Str"" + info.getProperty(IndexingContext.INDEX_CHUNK_COUNTER)+ ""String_Node_Str"");
          writeIndexData(request.getContext(),chunk,file);
          if (request.isCreateChecksumFiles()) {
            FileUtils.fileWrite(new File(file.getParentFile(),file.getName() + ""String_Node_Str"").getAbsolutePath(),DigesterUtils.getSha1Digest(file));
            FileUtils.fileWrite(new File(file.getParentFile(),file.getName() + ""String_Node_Str"").getAbsolutePath(),DigesterUtils.getMd5Digest(file));
          }
        }
      }
    }
 catch (    IOException e) {
      getLogger().info(""String_Node_Str"");
      info=new Properties();
      incrementalHandler.initializeProperties(info);
    }
    Date timestamp=request.getContext().getTimestamp();
    if (timestamp == null) {
      timestamp=new Date(0);
    }
    if (request.getFormats().contains(IndexPackingRequest.IndexFormat.FORMAT_LEGACY)) {
      info.setProperty(IndexingContext.INDEX_LEGACY_TIMESTAMP,format(timestamp));
      writeIndexArchive(request.getContext(),legacyFile);
      if (request.isCreateChecksumFiles()) {
        FileUtils.fileWrite(new File(legacyFile.getParentFile(),legacyFile.getName() + ""String_Node_Str"").getAbsolutePath(),DigesterUtils.getSha1Digest(legacyFile));
        FileUtils.fileWrite(new File(legacyFile.getParentFile(),legacyFile.getName() + ""String_Node_Str"").getAbsolutePath(),DigesterUtils.getMd5Digest(legacyFile));
      }
    }
    if (request.getFormats().contains(IndexPackingRequest.IndexFormat.FORMAT_V1)) {
      info.setProperty(IndexingContext.INDEX_TIMESTAMP,format(timestamp));
      writeIndexData(request.getContext(),null,v1File);
      if (request.isCreateChecksumFiles()) {
        FileUtils.fileWrite(new File(v1File.getParentFile(),v1File.getName() + ""String_Node_Str"").getAbsolutePath(),DigesterUtils.getSha1Digest(v1File));
        FileUtils.fileWrite(new File(v1File.getParentFile(),v1File.getName() + ""String_Node_Str"").getAbsolutePath(),DigesterUtils.getMd5Digest(v1File));
      }
    }
    writeIndexProperties(request,info);
  }
  finally {
    context.unlock();
  }
}",0.9701200781904497
34824,"public ArtifactContext getArtifactContext(IndexingContext context,File file);","ArtifactContext getArtifactContext(IndexingContext context,File file);",0.9523809523809524
34825,"private static int readerIndex(int n,int[] starts,int numSubReaders){
  int lo=0;
  int hi=numSubReaders - 1;
  while (hi >= lo) {
    int mid=(lo + hi) >>> 1;
    int midValue=starts[mid];
    if (n < midValue)     hi=mid - 1;
 else     if (n > midValue)     lo=mid + 1;
 else {
      while (mid + 1 < numSubReaders && starts[mid + 1] == midValue) {
        mid++;
      }
      return mid;
    }
  }
  return hi;
}","private static int readerIndex(int n,int[] starts,int numSubReaders){
  int lo=0;
  int hi=numSubReaders - 1;
  while (hi >= lo) {
    int mid=(lo + hi) >>> 1;
    int midValue=starts[mid];
    if (n < midValue) {
      hi=mid - 1;
    }
 else     if (n > midValue) {
      lo=mid + 1;
    }
 else {
      while (mid + 1 < numSubReaders && starts[mid + 1] == midValue) {
        mid++;
      }
      return mid;
    }
  }
  return hi;
}",0.976525821596244
34826,"public void deleteArtifactFromIndex(ArtifactContext ac,IndexingContext context) throws IOException ;","void deleteArtifactFromIndex(ArtifactContext ac,IndexingContext context) throws IOException ;",0.9637305699481864
34827,"public void deleteArtifactsFromIndex(Collection<ArtifactContext> acs,IndexingContext context) throws IOException ;","void deleteArtifactsFromIndex(Collection<ArtifactContext> acs,IndexingContext context) throws IOException ;",0.9683257918552036
34828,"public void addArtifactToIndex(ArtifactContext ac,IndexingContext context) throws IOException ;","void addArtifactToIndex(ArtifactContext ac,IndexingContext context) throws IOException ;",0.9617486338797814
34829,"public void addArtifactsToIndex(Collection<ArtifactContext> acs,IndexingContext context) throws IOException ;","void addArtifactsToIndex(Collection<ArtifactContext> acs,IndexingContext context) throws IOException ;",0.966824644549763
34830,"/** 
 * Do the search in all contexts, no matter if the context is searchable or not
 */
public GroupedSearchResponse forceSearchGrouped(GroupedSearchRequest request,Collection<IndexingContext> indexingContexts) throws IOException ;","/** 
 * Do the search in all contexts, no matter if the context is searchable or not
 */
GroupedSearchResponse forceSearchGrouped(GroupedSearchRequest request,Collection<IndexingContext> indexingContexts) throws IOException ;",0.9846827133479212
34831,"@Deprecated public Set<ArtifactInfo> searchFlat(Comparator<ArtifactInfo> artifactInfoComparator,Collection<IndexingContext> indexingContexts,Query query) throws IOException ;","@Deprecated Set<ArtifactInfo> searchFlat(Comparator<ArtifactInfo> artifactInfoComparator,Collection<IndexingContext> indexingContexts,Query query) throws IOException ;",0.9794721407624634
34832,"/** 
 * Do the search only on searchable contexts
 */
public GroupedSearchResponse searchGrouped(GroupedSearchRequest request,Collection<IndexingContext> indexingContexts) throws IOException ;","/** 
 * Do the search only on searchable contexts
 */
GroupedSearchResponse searchGrouped(GroupedSearchRequest request,Collection<IndexingContext> indexingContexts) throws IOException ;",0.9814323607427056
34833,"/** 
 * Do the search only on searchable contexts
 */
public FlatSearchResponse searchFlatPaged(FlatSearchRequest request,Collection<IndexingContext> indexingContexts) throws IOException ;","/** 
 * Do the search only on searchable contexts
 */
FlatSearchResponse searchFlatPaged(FlatSearchRequest request,Collection<IndexingContext> indexingContexts) throws IOException ;",0.981029810298103
34834,"/** 
 * Do the search in all contexts, no matter if the context is searchable or not
 */
public IteratorSearchResponse forceSearchIteratorPaged(IteratorSearchRequest request,Collection<IndexingContext> indexingContexts) throws IOException ;","/** 
 * Do the search in all contexts, no matter if the context is searchable or not
 */
IteratorSearchResponse forceSearchIteratorPaged(IteratorSearchRequest request,Collection<IndexingContext> indexingContexts) throws IOException ;",0.985200845665962
34835,"/** 
 * Do the search in all contexts, no matter if the context is searchable or not
 */
public FlatSearchResponse forceSearchFlatPaged(FlatSearchRequest request,Collection<IndexingContext> indexingContexts) throws IOException ;","/** 
 * Do the search in all contexts, no matter if the context is searchable or not
 */
FlatSearchResponse forceSearchFlatPaged(FlatSearchRequest request,Collection<IndexingContext> indexingContexts) throws IOException ;",0.9844097995545658
34836,"/** 
 * Do the search only on searchable contexts
 */
public IteratorSearchResponse searchIteratorPaged(IteratorSearchRequest request,Collection<IndexingContext> indexingContexts) throws IOException ;","/** 
 * Do the search only on searchable contexts
 */
IteratorSearchResponse searchIteratorPaged(IteratorSearchRequest request,Collection<IndexingContext> indexingContexts) throws IOException ;",0.9821882951653944
34837,"/** 
 * Returns the indexer fields that this IndexCreator introduces to index.
 * @return
 */
public Collection<IndexerField> getIndexerFields();","/** 
 * Returns the indexer fields that this IndexCreator introduces to index.
 * @return
 */
Collection<IndexerField> getIndexerFields();",0.9752650176678446
34838,"private final static String readUTF(DataInput in) throws IOException {
  int utflen=in.readInt();
  byte[] bytearr=new byte[utflen];
  char[] chararr=new char[utflen];
  int c, char2, char3;
  int count=0;
  int chararr_count=0;
  in.readFully(bytearr,0,utflen);
  while (count < utflen) {
    c=bytearr[count] & 0xff;
    if (c > 127) {
      break;
    }
    count++;
    chararr[chararr_count++]=(char)c;
  }
  while (count < utflen) {
    c=bytearr[count] & 0xff;
switch (c >> 4) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
      count++;
    chararr[chararr_count++]=(char)c;
  break;
case 12:
case 13:
count+=2;
if (count > utflen) {
throw new UTFDataFormatException(""String_Node_Str"");
}
char2=bytearr[count - 1];
if ((char2 & 0xC0) != 0x80) {
throw new UTFDataFormatException(""String_Node_Str"" + count);
}
chararr[chararr_count++]=(char)(((c & 0x1F) << 6) | (char2 & 0x3F));
break;
case 14:
count+=3;
if (count > utflen) {
throw new UTFDataFormatException(""String_Node_Str"");
}
char2=bytearr[count - 2];
char3=bytearr[count - 1];
if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) {
throw new UTFDataFormatException(""String_Node_Str"" + (count - 1));
}
chararr[chararr_count++]=(char)(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
break;
default :
throw new UTFDataFormatException(""String_Node_Str"" + count);
}
}
return new String(chararr,0,chararr_count);
}","private static String readUTF(DataInput in) throws IOException {
  int utflen=in.readInt();
  byte[] bytearr=new byte[utflen];
  char[] chararr=new char[utflen];
  int c, char2, char3;
  int count=0;
  int chararr_count=0;
  in.readFully(bytearr,0,utflen);
  while (count < utflen) {
    c=bytearr[count] & 0xff;
    if (c > 127) {
      break;
    }
    count++;
    chararr[chararr_count++]=(char)c;
  }
  while (count < utflen) {
    c=bytearr[count] & 0xff;
switch (c >> 4) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
      count++;
    chararr[chararr_count++]=(char)c;
  break;
case 12:
case 13:
count+=2;
if (count > utflen) {
throw new UTFDataFormatException(""String_Node_Str"");
}
char2=bytearr[count - 1];
if ((char2 & 0xC0) != 0x80) {
throw new UTFDataFormatException(""String_Node_Str"" + count);
}
chararr[chararr_count++]=(char)(((c & 0x1F) << 6) | (char2 & 0x3F));
break;
case 14:
count+=3;
if (count > utflen) {
throw new UTFDataFormatException(""String_Node_Str"");
}
char2=bytearr[count - 2];
char3=bytearr[count - 1];
if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) {
throw new UTFDataFormatException(""String_Node_Str"" + (count - 1));
}
chararr[chararr_count++]=(char)(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
break;
default :
throw new UTFDataFormatException(""String_Node_Str"" + count);
}
}
return new String(chararr,0,chararr_count);
}",0.997878359264498
34839,"private final static void writeUTF(String str,DataOutput out) throws IOException {
  int strlen=str.length();
  int utflen=0;
  int c;
  for (int i=0; i < strlen; i++) {
    c=str.charAt(i);
    if ((c >= 0x0001) && (c <= 0x007F)) {
      utflen++;
    }
 else     if (c > 0x07FF) {
      utflen+=3;
    }
 else {
      utflen+=2;
    }
  }
  out.writeInt(utflen);
  byte[] bytearr=new byte[utflen];
  int count=0;
  int i=0;
  for (; i < strlen; i++) {
    c=str.charAt(i);
    if (!((c >= 0x0001) && (c <= 0x007F))) {
      break;
    }
    bytearr[count++]=(byte)c;
  }
  for (; i < strlen; i++) {
    c=str.charAt(i);
    if ((c >= 0x0001) && (c <= 0x007F)) {
      bytearr[count++]=(byte)c;
    }
 else     if (c > 0x07FF) {
      bytearr[count++]=(byte)(0xE0 | ((c >> 12) & 0x0F));
      bytearr[count++]=(byte)(0x80 | ((c >> 6) & 0x3F));
      bytearr[count++]=(byte)(0x80 | ((c >> 0) & 0x3F));
    }
 else {
      bytearr[count++]=(byte)(0xC0 | ((c >> 6) & 0x1F));
      bytearr[count++]=(byte)(0x80 | ((c >> 0) & 0x3F));
    }
  }
  out.write(bytearr,0,utflen);
}","private static void writeUTF(String str,DataOutput out) throws IOException {
  int strlen=str.length();
  int utflen=0;
  int c;
  for (int i=0; i < strlen; i++) {
    c=str.charAt(i);
    if ((c >= 0x0001) && (c <= 0x007F)) {
      utflen++;
    }
 else     if (c > 0x07FF) {
      utflen+=3;
    }
 else {
      utflen+=2;
    }
  }
  out.writeInt(utflen);
  byte[] bytearr=new byte[utflen];
  int count=0;
  int i=0;
  for (; i < strlen; i++) {
    c=str.charAt(i);
    if (!((c >= 0x0001) && (c <= 0x007F))) {
      break;
    }
    bytearr[count++]=(byte)c;
  }
  for (; i < strlen; i++) {
    c=str.charAt(i);
    if ((c >= 0x0001) && (c <= 0x007F)) {
      bytearr[count++]=(byte)c;
    }
 else     if (c > 0x07FF) {
      bytearr[count++]=(byte)(0xE0 | ((c >> 12) & 0x0F));
      bytearr[count++]=(byte)(0x80 | ((c >> 6) & 0x3F));
      bytearr[count++]=(byte)(0x80 | ((c >> 0) & 0x3F));
    }
 else {
      bytearr[count++]=(byte)(0xC0 | ((c >> 6) & 0x1F));
      bytearr[count++]=(byte)(0x80 | ((c >> 0) & 0x3F));
    }
  }
  out.write(bytearr,0,utflen);
}",0.9971936389148736
34840,"private static String readUTF(DataInput in) throws IOException {
  int utflen=in.readInt();
  byte[] bytearr=new byte[utflen];
  char[] chararr=new char[utflen];
  int c, char2, char3;
  int count=0;
  int chararr_count=0;
  in.readFully(bytearr,0,utflen);
  while (count < utflen) {
    c=bytearr[count] & 0xff;
    if (c > 127) {
      break;
    }
    count++;
    chararr[chararr_count++]=(char)c;
  }
  while (count < utflen) {
    c=bytearr[count] & 0xff;
switch (c >> 4) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
      count++;
    chararr[chararr_count++]=(char)c;
  break;
case 12:
case 13:
count+=2;
if (count > utflen) {
throw new UTFDataFormatException(""String_Node_Str"");
}
char2=bytearr[count - 1];
if ((char2 & 0xC0) != 0x80) {
throw new UTFDataFormatException(""String_Node_Str"" + count);
}
chararr[chararr_count++]=(char)(((c & 0x1F) << 6) | (char2 & 0x3F));
break;
case 14:
count+=3;
if (count > utflen) {
throw new UTFDataFormatException(""String_Node_Str"");
}
char2=bytearr[count - 2];
char3=bytearr[count - 1];
if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) {
throw new UTFDataFormatException(""String_Node_Str"" + (count - 1));
}
chararr[chararr_count++]=(char)(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
break;
default :
throw new UTFDataFormatException(""String_Node_Str"" + count);
}
}
return new String(chararr,0,chararr_count);
}","private static String readUTF(DataInput in) throws IOException {
  int utflen=in.readInt();
  byte[] bytearr;
  char[] chararr;
  try {
    bytearr=new byte[utflen];
    chararr=new char[utflen];
  }
 catch (  OutOfMemoryError e) {
    final IOException ex=new IOException(""String_Node_Str"");
    e.initCause(e);
    throw ex;
  }
  int c, char2, char3;
  int count=0;
  int chararr_count=0;
  in.readFully(bytearr,0,utflen);
  while (count < utflen) {
    c=bytearr[count] & 0xff;
    if (c > 127) {
      break;
    }
    count++;
    chararr[chararr_count++]=(char)c;
  }
  while (count < utflen) {
    c=bytearr[count] & 0xff;
switch (c >> 4) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
      count++;
    chararr[chararr_count++]=(char)c;
  break;
case 12:
case 13:
count+=2;
if (count > utflen) {
throw new UTFDataFormatException(""String_Node_Str"");
}
char2=bytearr[count - 1];
if ((char2 & 0xC0) != 0x80) {
throw new UTFDataFormatException(""String_Node_Str"" + count);
}
chararr[chararr_count++]=(char)(((c & 0x1F) << 6) | (char2 & 0x3F));
break;
case 14:
count+=3;
if (count > utflen) {
throw new UTFDataFormatException(""String_Node_Str"");
}
char2=bytearr[count - 2];
char3=bytearr[count - 1];
if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) {
throw new UTFDataFormatException(""String_Node_Str"" + (count - 1));
}
chararr[chararr_count++]=(char)(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
break;
default :
throw new UTFDataFormatException(""String_Node_Str"" + count);
}
}
return new String(chararr,0,chararr_count);
}",0.924105650284186
34841,"private File getPluginJAR(){
  String qualifierVersion=manifest.getMainAttributes().getValue(Constants.BUNDLE_VERSION);
  String name=manifest.getMainAttributes().getValue(Constants.BUNDLE_SYMBOLIC_NAME);
  if (name.indexOf(""String_Node_Str"") != -1) {
    name=name.substring(0,(name.indexOf(""String_Node_Str"") - 1));
  }
  getLog().debug(""String_Node_Str"" + name);
  File pluginFile=new File(outputDirectory,name + ""String_Node_Str"" + qualifierVersion+ ""String_Node_Str"");
  if (pluginFile.exists()) {
    pluginFile.delete();
  }
  return pluginFile;
}","private File getPluginJAR(){
  String qualifierVersion=manifest.getMainAttributes().getValue(Constants.BUNDLE_VERSION);
  if (qualifierVersion != null && qualifierVersion.endsWith(""String_Node_Str"")) {
    qualifierVersion=qualifierVersion.substring(0,qualifierVersion.lastIndexOf(""String_Node_Str""));
  }
  String name=manifest.getMainAttributes().getValue(Constants.BUNDLE_SYMBOLIC_NAME);
  if (name.indexOf(""String_Node_Str"") != -1) {
    name=name.substring(0,(name.indexOf(""String_Node_Str"") - 1));
  }
  getLog().debug(""String_Node_Str"" + name);
  File pluginFile=new File(outputDirectory,name + ""String_Node_Str"" + qualifierVersion+ ""String_Node_Str"");
  if (pluginFile.exists()) {
    pluginFile.delete();
  }
  return pluginFile;
}",0.8562596599690881
34842,"public static String getcalculatedOSGiVersion(String versionStr){
  Version version=parseVersion(versionStr);
  String calcQualifier=calculateQualifier(version.getQualifier());
  String fullVersion=version.getMajor() + ""String_Node_Str"" + version.getMinor()+ ""String_Node_Str""+ version.getMicro()+ ""String_Node_Str""+ calcQualifier;
  return fullVersion;
}","public static String getcalculatedOSGiVersion(String versionStr){
  Version version=parseVersion(versionStr);
  String calcQualifier=calculateQualifier(version.getQualifier());
  String fullVersion=version.getMajor() + ""String_Node_Str"" + version.getMinor()+ ""String_Node_Str""+ version.getMicro();
  if (!calcQualifier.isEmpty()) {
    fullVersion+=""String_Node_Str"" + calcQualifier;
  }
  return fullVersion;
}",0.9216710182767625
34843,"public boolean reload(final String host,final String token){
  if (host != null && token != null && !host.isEmpty() && !token.isEmpty()) {
    api=GitlabAPI.connect(host,token);
    api.ignoreCertificateErrors(true);
    return true;
  }
  return false;
}","public boolean reload(final String host,final String token){
  if (host != null && token != null && !host.isEmpty() && !token.isEmpty()) {
    api=GitlabAPI.connect(host,token);
    return true;
  }
  return false;
}",0.8067940552016986
34844,"public static void addRecipes(){
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(chargingStationBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'F',ItemLoader.fluxConductor,'K',ItemLoader.powerCapsuleTier2,'G',""String_Node_Str""));
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemLoader.powerCapsuleTier1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'G',""String_Node_Str"",'R',Blocks.redstone_block));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemLoader.powerCapsuleTier2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'D',ItemLoader.conductivePlate,'P',ItemLoader.powerCapsuleTier1));
    GameRegistry.addRecipe(new ItemStack(ItemLoader.powerCapsuleTier3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.diamond,'E',ItemLoader.conductivePlate,'P',ItemLoader.powerCapsuleTier2);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(basicDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'I',""String_Node_Str"",'S',Blocks.stone,'L',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(basicDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'I',""String_Node_Str"",'S',Blocks.stone,'L',ItemLoader.spring));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(mechanicalDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'F',ItemLoader.fluxConductor,'G',ItemLoader.grindingWheel));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(semiAutomaticDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',""String_Node_Str"",'P',Blocks.piston,'L',""String_Node_Str"",'I',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(semiAutomaticDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',""String_Node_Str"",'P',Blocks.piston,'L',ItemLoader.spring,'I',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(kineticDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'I',""String_Node_Str"",'D',Items.diamond));
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemLoader.itemIronWireUnhardened,2),""String_Node_Str"",'D',""String_Node_Str""));
    GameRegistry.addSmelting(ItemLoader.itemIronWireUnhardened,new ItemStack(ItemLoader.itemIronWire,2),0.5f);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(basicCoilBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'W',ItemLoader.itemIronWire,'I',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemLoader.goldWireUnhardened,2),""String_Node_Str"",'D',""String_Node_Str""));
    GameRegistry.addSmelting(ItemLoader.goldWireUnhardened,new ItemStack(ItemLoader.goldWire,2),0.5f);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(lavaCoilBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'W',ItemLoader.goldWire,'I',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemLoader.diamondWireUnhardened,2),""String_Node_Str"",'D',""String_Node_Str""));
    GameRegistry.addSmelting(ItemLoader.diamondWireUnhardened,new ItemStack(ItemLoader.diamondWire,2),0.5f);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(kineticCoil),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'W',ItemLoader.diamondWire,'I',""String_Node_Str""));
  }
  if (ConfigurationHandler.enabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(heatedFurnaceBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',ItemLoader.heatPlating,'F',Blocks.furnace);
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(kebT1.createEmptyKEB(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'B',ItemLoader.powerCapsuleTier1,'C',ItemLoader.fluxConductor,'D',ItemLoader.fluxDisperser));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(kebT2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'B',ItemLoader.powerCapsuleTier2,'C',ItemLoader.fluxConductor,'D',ItemLoader.fluxDisperser));
    GameRegistry.addRecipe(new ItemStack(kebT3Core),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.diamond,'B',ItemLoader.powerCapsuleTier3,'C',ItemLoader.fluxConductor,'P',ItemLoader.fluxDisperser);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(kebT3Plating),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',ItemLoader.fluxConductor,'D',ItemLoader.fluxDisperser,'G',""String_Node_Str"",'I',""String_Node_Str""));
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(refineryWalls,10),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',ItemLoader.heatPlating,'D',""String_Node_Str""));
    GameRegistry.addRecipe(new ItemStack(refineryValve,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',ItemLoader.heatPlating,'B',Blocks.iron_bars);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(coolingTowerWalls,10),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',ItemLoader.heatPlating,'D',""String_Node_Str""));
    GameRegistry.addRecipe(new ItemStack(coolingTowerValve),""String_Node_Str"",'V',refineryValve);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.AUTO_OUTPUT.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'E',Items.ender_pearl,'P',Blocks.piston,'B',ItemLoader.blankUpgrade);
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.EFFICIENCY_1.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',ItemLoader.powerCapsuleTier1,'I',Items.iron_ingot,'B',ItemLoader.blankUpgrade);
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.EFFICIENCY_2.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'C',ItemLoader.powerCapsuleTier2,'U',new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.EFFICIENCY_1.ordinal()));
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.EFFICIENCY_3.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',ItemLoader.powerCapsuleTier3,'D',Items.diamond,'U',new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.EFFICIENCY_2.ordinal()),'G',Items.gold_ingot);
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.SPEED_1.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'G',Items.glowstone_dust,'B',ItemLoader.blankUpgrade);
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.SPEED_2.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'B',Blocks.glowstone,'U',new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.SPEED_1.ordinal()));
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.SPEED_3.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'B',Blocks.glowstone,'D',Items.diamond,'U',new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.SPEED_2.ordinal()));
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.AUTO_IMPORT.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'E',Items.ender_pearl,'S',Blocks.sticky_piston,'B',ItemLoader.blankUpgrade);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(itemSorter),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'S',Blocks.stone,'U',EnumMachineUpgrades.AUTO_OUTPUT.getItemStack(),'P',BCItems.PIPE_ITEMS_LAPIS,'C',Blocks.chest,'G',BCItems.PIPE_ITEMS_GOLD);
  if (!ConfigurationHandler.forceEnableBCRefinery) {
    ItemStack stack=new ItemStack(BCItems.REFINERY);
    ArrayList recipeList=(ArrayList)CraftingManager.getInstance().getRecipeList();
    for (int t=0; t < recipeList.size(); t++) {
      IRecipe recipe=(IRecipe)recipeList.get(t);
      ItemStack recipeResult=recipe.getRecipeOutput();
      if (ItemStack.areItemStacksEqual(stack,recipeResult)) {
        recipeList.remove(t);
        break;
      }
    }
  }
}","public static void addRecipes(){
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(chargingStationBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'F',ItemLoader.fluxConductor,'K',ItemLoader.powerCapsuleTier2,'G',""String_Node_Str""));
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemLoader.powerCapsuleTier1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'G',""String_Node_Str"",'R',Blocks.redstone_block));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemLoader.powerCapsuleTier2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'D',ItemLoader.conductivePlate,'P',ItemLoader.powerCapsuleTier1));
    GameRegistry.addRecipe(new ItemStack(ItemLoader.powerCapsuleTier3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.diamond,'E',ItemLoader.conductivePlate,'P',ItemLoader.powerCapsuleTier2);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(basicDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'I',""String_Node_Str"",'S',Blocks.stone,'L',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(basicDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'I',""String_Node_Str"",'S',Blocks.stone,'L',ItemLoader.spring));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(mechanicalDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'F',ItemLoader.fluxConductor,'G',ItemLoader.grindingWheel));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(semiAutomaticDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',""String_Node_Str"",'P',Blocks.piston,'L',""String_Node_Str"",'I',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(semiAutomaticDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',""String_Node_Str"",'P',Blocks.piston,'L',ItemLoader.spring,'I',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(kineticDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'I',""String_Node_Str"",'D',Items.diamond));
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemLoader.itemIronWireUnhardened,2),""String_Node_Str"",'D',""String_Node_Str""));
    GameRegistry.addSmelting(ItemLoader.itemIronWireUnhardened,new ItemStack(ItemLoader.itemIronWire,2),0.5f);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(basicCoilBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'W',ItemLoader.itemIronWire,'I',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemLoader.goldWireUnhardened,2),""String_Node_Str"",'D',""String_Node_Str""));
    GameRegistry.addSmelting(ItemLoader.goldWireUnhardened,new ItemStack(ItemLoader.goldWire,2),0.5f);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(lavaCoilBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'W',ItemLoader.goldWire,'I',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemLoader.diamondWireUnhardened,2),""String_Node_Str"",'D',""String_Node_Str""));
    GameRegistry.addSmelting(ItemLoader.diamondWireUnhardened,new ItemStack(ItemLoader.diamondWire,2),0.5f);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(kineticCoil),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'W',ItemLoader.diamondWire,'I',""String_Node_Str""));
  }
  if (ConfigurationHandler.enabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(heatedFurnaceBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',ItemLoader.heatPlating,'F',Blocks.furnace);
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(kebT1.createEmptyKEB(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'B',ItemLoader.powerCapsuleTier1,'C',ItemLoader.fluxConductor,'D',ItemLoader.fluxDisperser));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(kebT2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'B',ItemLoader.powerCapsuleTier2,'C',ItemLoader.fluxConductor,'D',ItemLoader.fluxDisperser));
    GameRegistry.addRecipe(new ItemStack(kebT3Core),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.diamond,'B',ItemLoader.powerCapsuleTier3,'C',ItemLoader.fluxConductor,'P',ItemLoader.fluxDisperser);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(kebT3Plating),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',ItemLoader.fluxConductor,'D',ItemLoader.fluxDisperser,'G',""String_Node_Str"",'I',""String_Node_Str""));
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(refineryWalls,20),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',ItemLoader.heatPlating,'D',""String_Node_Str""));
    GameRegistry.addRecipe(new ItemStack(refineryValve,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',ItemLoader.heatPlating,'B',Blocks.iron_bars);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(coolingTowerWalls,20),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',ItemLoader.heatPlating,'D',""String_Node_Str""));
    GameRegistry.addRecipe(new ItemStack(coolingTowerValve),""String_Node_Str"",'V',refineryValve);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.AUTO_OUTPUT.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'E',Items.ender_pearl,'P',Blocks.piston,'B',ItemLoader.blankUpgrade);
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.EFFICIENCY_1.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',ItemLoader.powerCapsuleTier1,'I',Items.iron_ingot,'B',ItemLoader.blankUpgrade);
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.EFFICIENCY_2.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'C',ItemLoader.powerCapsuleTier2,'U',new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.EFFICIENCY_1.ordinal()));
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.EFFICIENCY_3.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',ItemLoader.powerCapsuleTier3,'D',Items.diamond,'U',new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.EFFICIENCY_2.ordinal()),'G',Items.gold_ingot);
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.SPEED_1.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'G',Items.glowstone_dust,'B',ItemLoader.blankUpgrade);
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.SPEED_2.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'B',Blocks.glowstone,'U',new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.SPEED_1.ordinal()));
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.SPEED_3.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'B',Blocks.glowstone,'D',Items.diamond,'U',new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.SPEED_2.ordinal()));
    GameRegistry.addRecipe(new ItemStack(ItemLoader.upgrade,1,EnumMachineUpgrades.AUTO_IMPORT.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'E',Items.ender_pearl,'S',Blocks.sticky_piston,'B',ItemLoader.blankUpgrade);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(itemSorter),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'S',Blocks.stone,'U',EnumMachineUpgrades.AUTO_OUTPUT.getItemStack(),'P',BCItems.PIPE_ITEMS_LAPIS,'C',Blocks.chest,'G',BCItems.PIPE_ITEMS_GOLD);
  if (!ConfigurationHandler.forceEnableBCRefinery) {
    ItemStack stack=new ItemStack(BCItems.REFINERY);
    ArrayList recipeList=(ArrayList)CraftingManager.getInstance().getRecipeList();
    for (int t=0; t < recipeList.size(); t++) {
      IRecipe recipe=(IRecipe)recipeList.get(t);
      ItemStack recipeResult=recipe.getRecipeOutput();
      if (ItemStack.areItemStacksEqual(stack,recipeResult)) {
        recipeList.remove(t);
        break;
      }
    }
  }
}",0.999769744416302
34845,"public static void readConfig(){
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  if (configFile.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean())   VersionCheck.start();
  shouldPrintChangelog=configFile.get(""String_Node_Str"",""String_Node_Str"",false).getBoolean();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  powerDifficultyModifiers[0]=configFile.get(""String_Node_Str"",""String_Node_Str"",1).setMinValue(0).getInt();
  powerDifficultyModifiers[1]=configFile.get(""String_Node_Str"",""String_Node_Str"",2).setMinValue(0).getInt();
  powerDifficultyModifiers[2]=configFile.get(""String_Node_Str"",""String_Node_Str"",3).setMinValue(0).getInt();
  powerDifficultyModifiers[3]=configFile.get(""String_Node_Str"",""String_Node_Str"",4).setMinValue(0).getInt();
  basePowerModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",10).setMinValue(0).getInt();
  entityHitModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",10).setMinValue(0).getInt();
  entityDamage=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",7D).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  hoeCost=configFile.get(""String_Node_Str"",""String_Node_Str"",5).setMinValue(0).getInt();
  toolEfficiencyPickaxe=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",40D).setMinValue(1.1).setMaxValue(Float.MAX_VALUE).getDouble();
  toolEfficiencyShovel=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",10D).setMinValue(1.1).setMaxValue(Float.MAX_VALUE).getDouble();
  toolEfficiencyAxe=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",30D).setMinValue(1.1).setMaxValue(Float.MAX_VALUE).getDouble();
  toolHarvestLevel=configFile.get(""String_Node_Str"",""String_Node_Str"",Integer.MAX_VALUE).setMinValue(0).getInt();
  toolEfficiencyAreaMultiplier=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",0.25).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",false).getBoolean();
  KEB1powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",10).setMinValue(0).getInt();
  KEB2powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",5).setMinValue(0).getInt();
  KEB3powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",3).setMinValue(0).getInt();
  capacityKEBTier1=configFile.get(""String_Node_Str"",""String_Node_Str"",3000000).setMinValue(0).getInt();
  capacityKEBTier2=configFile.get(""String_Node_Str"",""String_Node_Str"",25000000).setMinValue(0).getInt();
  capacityKEBTier3=configFile.get(""String_Node_Str"",""String_Node_Str"",100000000).setMinValue(0).getInt();
  maxTransferKEBTier1=configFile.get(""String_Node_Str"",""String_Node_Str"",32768).setMinValue(0).getInt();
  maxTransferKEBTier2=configFile.get(""String_Node_Str"",""String_Node_Str"",65536).setMinValue(0).getInt();
  maxTransferKEBTier3=configFile.get(""String_Node_Str"",""String_Node_Str"",131072).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  heatedFurnaceHeatRequired=configFile.get(""String_Node_Str"",""String_Node_Str"",6500,""String_Node_Str"").setMinValue(0).getInt();
  basicCoilHeat=configFile.get(""String_Node_Str"",""String_Node_Str"",16,""String_Node_Str"").setMinValue(0).getInt();
  lavaCoilHeat=configFile.get(""String_Node_Str"",""String_Node_Str"",32,""String_Node_Str"").setMinValue(0).getInt();
  kineticCoilHeatModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",15,""String_Node_Str"").setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  capacityChargingStation=configFile.get(""String_Node_Str"",""String_Node_Str"",10000).setMinValue(0).getInt();
  maxTransferChargingStation=configFile.get(""String_Node_Str"",""String_Node_Str"",8192).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  capacityFluidicCompressor=configFile.get(""String_Node_Str"",""String_Node_Str"",1000).setMinValue(0).getInt();
  maxTransferFluidicCompressor=configFile.get(""String_Node_Str"",""String_Node_Str"",128).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  capacityMechanicalDuster=configFile.get(""String_Node_Str"",""String_Node_Str"",2000).setMinValue(0).getInt();
  maxTransferMechanicalDuster=configFile.get(""String_Node_Str"",""String_Node_Str"",1024).setMinValue(0).getInt();
  energyUseMechanicalDuster=configFile.get(""String_Node_Str"",""String_Node_Str"",10).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  capacityRefinery=configFile.get(""String_Node_Str"",""String_Node_Str"",50000).setMinValue(0).getInt();
  maxTransferRefinery=configFile.get(""String_Node_Str"",""String_Node_Str"",1024).setMinValue(0).getInt();
  energyUseRefineryMultiplier=configFile.get(""String_Node_Str"",""String_Node_Str"",1).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  portableLaserPowerUse=configFile.get(""String_Node_Str"",""String_Node_Str"",8000).setMinValue(0).getInt();
  portableLaserLaserPower=configFile.get(""String_Node_Str"",""String_Node_Str"",8000).setMinValue(0).getInt();
  portableLaserEntityDamage=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",10D).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  portableLaserEntityBurnTime=configFile.get(""String_Node_Str"",""String_Node_Str"",8).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  capacityPipeColoringTool=configFile.get(""String_Node_Str"",""String_Node_Str"",100000).setMinValue(0).getInt();
  maxTransferColoringTool=configFile.get(""String_Node_Str"",""String_Node_Str"",1024).setMinValue(0).getInt();
  energyUseColoringTool=configFile.get(""String_Node_Str"",""String_Node_Str"",16).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  capacityPowerCapsuleTier1=configFile.get(""String_Node_Str"",""String_Node_Str"",100000).setMinValue(0).getInt();
  capacityPowerCapsuleTier2=configFile.get(""String_Node_Str"",""String_Node_Str"",300000).setMinValue(0).getInt();
  capacityPowerCapsuleTier3=configFile.get(""String_Node_Str"",""String_Node_Str"",1000000).setMinValue(0).getInt();
  maxTransferPowerCapsuleTier1=configFile.get(""String_Node_Str"",""String_Node_Str"",1024).setMinValue(0).getInt();
  maxTransferPowerCapsuleTier2=configFile.get(""String_Node_Str"",""String_Node_Str"",4096).setMinValue(0).getInt();
  maxTransferPowerCapsuleTier3=configFile.get(""String_Node_Str"",""String_Node_Str"",16384).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  refineryAutoExportMaxTransfer=configFile.get(""String_Node_Str"",""String_Node_Str"",100).setMinValue(0).getInt();
  refineryAutoImportMaxTransfer=configFile.get(""String_Node_Str"",""String_Node_Str"",100).setMinValue(0).getInt();
  refineryEfficiency1EnergyCostModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",-0.1).setMaxValue(0).getDouble();
  refineryEfficiency2EnergyCostModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",-0.15).setMaxValue(0).getDouble();
  refineryEfficiency3EnergyCostModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",-0.25).setMaxValue(0).getDouble();
  refinerySpeed1EnergyCostModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",0.2).setMinValue(0).getDouble();
  refinerySpeed2EnergyCostModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",0.3).setMinValue(0).getDouble();
  refinerySpeed3EnergyCostModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",0.5).setMinValue(0).getDouble();
  refinerySpeed1SpeedModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",1).setMinValue(0).getInt();
  refinerySpeed2SpeedModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",2).setMinValue(0).getInt();
  refinerySpeed3SpeedModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",3).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  coolingTowerAutoExportMaxTransfer=configFile.get(""String_Node_Str"",""String_Node_Str"",100).setMinValue(0).getInt();
  coolingTowerAutoImportMaxTransfer=configFile.get(""String_Node_Str"",""String_Node_Str"",100).setMinValue(0).getInt();
  coolingTowerSpeed1SpeedModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",1).setMinValue(0).getInt();
  coolingTowerSpeed2SpeedModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",2).setMinValue(0).getInt();
  coolingTowerSpeed3SpeedModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",3).setMinValue(0).getInt();
  coolingTowerEfficiency1CoolingModifier=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",0.25).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  coolingTowerEfficiency2CoolingModifier=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",0.5).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  coolingTowerEfficiency3CoolingModifier=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",1D).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  shouldRegisterDusts=configFile.get(""String_Node_Str"",""String_Node_Str"",true).setRequiresMcRestart(true).getBoolean();
  eurekaIntegration=configFile.get(""String_Node_Str"",""String_Node_Str"",true).setRequiresMcRestart(true).getBoolean();
  dusterParticles=configFile.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean();
  particleCount=configFile.get(""String_Node_Str"",""String_Node_Str"",100).setMinValue(0).getInt();
  forceEnableBCRefinery=!enabled(""String_Node_Str"") || configFile.get(""String_Node_Str"",""String_Node_Str"",false).setRequiresMcRestart(true).getBoolean();
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  if (configFile.hasChanged())   configFile.save();
}","public static void readConfig(){
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  if (configFile.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean())   VersionCheck.start();
  shouldPrintChangelog=configFile.get(""String_Node_Str"",""String_Node_Str"",false).getBoolean();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  powerDifficultyModifiers[0]=configFile.get(""String_Node_Str"",""String_Node_Str"",1).setMinValue(0).getInt();
  powerDifficultyModifiers[1]=configFile.get(""String_Node_Str"",""String_Node_Str"",2).setMinValue(0).getInt();
  powerDifficultyModifiers[2]=configFile.get(""String_Node_Str"",""String_Node_Str"",3).setMinValue(0).getInt();
  powerDifficultyModifiers[3]=configFile.get(""String_Node_Str"",""String_Node_Str"",4).setMinValue(0).getInt();
  basePowerModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",10).setMinValue(0).getInt();
  entityHitModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",10).setMinValue(0).getInt();
  entityDamage=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",7D).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  hoeCost=configFile.get(""String_Node_Str"",""String_Node_Str"",5).setMinValue(0).getInt();
  toolEfficiencyPickaxe=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",40D).setMinValue(1.1).setMaxValue(Float.MAX_VALUE).getDouble();
  toolEfficiencyShovel=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",10D).setMinValue(1.1).setMaxValue(Float.MAX_VALUE).getDouble();
  toolEfficiencyAxe=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",30D).setMinValue(1.1).setMaxValue(Float.MAX_VALUE).getDouble();
  toolHarvestLevel=configFile.get(""String_Node_Str"",""String_Node_Str"",Integer.MAX_VALUE).setMinValue(0).getInt();
  toolEfficiencyAreaMultiplier=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",0.25).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",false).getBoolean();
  KEB1powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",10).setMinValue(0).getInt();
  KEB2powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",5).setMinValue(0).getInt();
  KEB3powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",3).setMinValue(0).getInt();
  capacityKEBTier1=configFile.get(""String_Node_Str"",""String_Node_Str"",3000000).setMinValue(0).getInt();
  capacityKEBTier2=configFile.get(""String_Node_Str"",""String_Node_Str"",25000000).setMinValue(0).getInt();
  capacityKEBTier3=configFile.get(""String_Node_Str"",""String_Node_Str"",100000000).setMinValue(0).getInt();
  maxTransferKEBTier1=configFile.get(""String_Node_Str"",""String_Node_Str"",32768).setMinValue(0).getInt();
  maxTransferKEBTier2=configFile.get(""String_Node_Str"",""String_Node_Str"",65536).setMinValue(0).getInt();
  maxTransferKEBTier3=configFile.get(""String_Node_Str"",""String_Node_Str"",131072).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  heatedFurnaceHeatRequired=configFile.get(""String_Node_Str"",""String_Node_Str"",6500,""String_Node_Str"").setMinValue(0).getInt();
  basicCoilHeat=configFile.get(""String_Node_Str"",""String_Node_Str"",16,""String_Node_Str"").setMinValue(0).getInt();
  lavaCoilHeat=configFile.get(""String_Node_Str"",""String_Node_Str"",32,""String_Node_Str"").setMinValue(0).getInt();
  kineticCoilHeatModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",15,""String_Node_Str"").setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  capacityChargingStation=configFile.get(""String_Node_Str"",""String_Node_Str"",10000).setMinValue(0).getInt();
  maxTransferChargingStation=configFile.get(""String_Node_Str"",""String_Node_Str"",8192).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  capacityFluidicCompressor=configFile.get(""String_Node_Str"",""String_Node_Str"",1000).setMinValue(0).getInt();
  maxTransferFluidicCompressor=configFile.get(""String_Node_Str"",""String_Node_Str"",128).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  capacityMechanicalDuster=configFile.get(""String_Node_Str"",""String_Node_Str"",2000).setMinValue(0).getInt();
  maxTransferMechanicalDuster=configFile.get(""String_Node_Str"",""String_Node_Str"",1024).setMinValue(0).getInt();
  energyUseMechanicalDuster=configFile.get(""String_Node_Str"",""String_Node_Str"",10).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  capacityRefinery=configFile.get(""String_Node_Str"",""String_Node_Str"",50000).setMinValue(0).getInt();
  maxTransferRefinery=configFile.get(""String_Node_Str"",""String_Node_Str"",1024).setMinValue(0).getInt();
  energyUseRefineryMultiplier=configFile.get(""String_Node_Str"",""String_Node_Str"",1).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  portableLaserPowerUse=configFile.get(""String_Node_Str"",""String_Node_Str"",8000).setMinValue(0).getInt();
  portableLaserLaserPower=configFile.get(""String_Node_Str"",""String_Node_Str"",8000).setMinValue(0).getInt();
  portableLaserEntityDamage=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",10D).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  portableLaserEntityBurnTime=configFile.get(""String_Node_Str"",""String_Node_Str"",8).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  capacityPipeColoringTool=configFile.get(""String_Node_Str"",""String_Node_Str"",100000).setMinValue(0).getInt();
  maxTransferColoringTool=configFile.get(""String_Node_Str"",""String_Node_Str"",1024).setMinValue(0).getInt();
  energyUseColoringTool=configFile.get(""String_Node_Str"",""String_Node_Str"",16).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  capacityPowerCapsuleTier1=configFile.get(""String_Node_Str"",""String_Node_Str"",100000).setMinValue(0).getInt();
  capacityPowerCapsuleTier2=configFile.get(""String_Node_Str"",""String_Node_Str"",300000).setMinValue(0).getInt();
  capacityPowerCapsuleTier3=configFile.get(""String_Node_Str"",""String_Node_Str"",1000000).setMinValue(0).getInt();
  maxTransferPowerCapsuleTier1=configFile.get(""String_Node_Str"",""String_Node_Str"",1024).setMinValue(0).getInt();
  maxTransferPowerCapsuleTier2=configFile.get(""String_Node_Str"",""String_Node_Str"",4096).setMinValue(0).getInt();
  maxTransferPowerCapsuleTier3=configFile.get(""String_Node_Str"",""String_Node_Str"",16384).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  refineryAutoExportMaxTransfer=configFile.get(""String_Node_Str"",""String_Node_Str"",100).setMinValue(0).getInt();
  refineryAutoImportMaxTransfer=configFile.get(""String_Node_Str"",""String_Node_Str"",100).setMinValue(0).getInt();
  refineryEfficiency1EnergyCostModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",-0.1).setMaxValue(0).getDouble();
  refineryEfficiency2EnergyCostModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",-0.15).setMaxValue(0).getDouble();
  refineryEfficiency3EnergyCostModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",-0.25).setMaxValue(0).getDouble();
  refinerySpeed1EnergyCostModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",0.2).setMinValue(0).getDouble();
  refinerySpeed2EnergyCostModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",0.3).setMinValue(0).getDouble();
  refinerySpeed3EnergyCostModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",0.5).setMinValue(0).getDouble();
  refinerySpeed1SpeedModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",1).setMinValue(0).getInt();
  refinerySpeed2SpeedModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",2).setMinValue(0).getInt();
  refinerySpeed3SpeedModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",3).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  coolingTowerAutoExportMaxTransfer=configFile.get(""String_Node_Str"",""String_Node_Str"",100).setMinValue(0).getInt();
  coolingTowerAutoImportMaxTransfer=configFile.get(""String_Node_Str"",""String_Node_Str"",100).setMinValue(0).getInt();
  coolingTowerSpeed1SpeedModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",1).setMinValue(0).getInt();
  coolingTowerSpeed2SpeedModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",2).setMinValue(0).getInt();
  coolingTowerSpeed3SpeedModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",3).setMinValue(0).getInt();
  coolingTowerEfficiency1CoolingModifier=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",0.25).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  coolingTowerEfficiency2CoolingModifier=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",0.5).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  coolingTowerEfficiency3CoolingModifier=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",1D).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  shouldRegisterDusts=configFile.get(""String_Node_Str"",""String_Node_Str"",true).setRequiresMcRestart(true).getBoolean();
  eurekaIntegration=configFile.get(""String_Node_Str"",""String_Node_Str"",true).setRequiresMcRestart(true).getBoolean();
  dusterParticles=configFile.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean();
  particleCount=configFile.get(""String_Node_Str"",""String_Node_Str"",100).setMinValue(0).getInt();
  forceEnableBCRefinery=!enabled(""String_Node_Str"") | configFile.get(""String_Node_Str"",""String_Node_Str"",false).setRequiresMcRestart(true).getBoolean();
  if (configFile.hasChanged())   configFile.save();
}",0.9384725196288366
34846,"private FluidStack drain(int maxDrain,boolean doDrain,int tankID){
  Tank tank=getTanks()[tankID];
  FluidStack drained=tank.drain(maxDrain,doDrain);
  updateRecipe();
  return drained;
}","private FluidStack drain(FluidStack fluid,boolean doDrain,int tankID){
  Tank tank=getTanks()[tankID];
  FluidStack drained=tank.drain(fluid,doDrain);
  updateRecipe();
  return drained;
}",0.9173333333333332
34847,"private int fill(FluidStack resouce,boolean doFill,int tankID){
  Tank tank=getTanks()[tankID];
  int filled=tank.fill(resouce,doFill);
  updateRecipe();
  return filled;
}","private int fill(FluidStack resouce,boolean doFill,int tankID){
  Tank tank=getTanks()[tankID];
  int filled=tank.fill(resouce,doFill);
  updateRecipe();
  sync();
  return filled;
}",0.9717514124293786
34848,"@Override public void updateEntity(){
  super.updateEntity();
  if (data.moved) {
    data.afterMoveCheck(worldObj);
    worldObj.scheduleBlockUpdate(xCoord,yCoord,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord),80);
  }
  if (master == null && !isMaster())   findMaster();
  if (master == null && !isMaster())   return;
  if (valve && upgrades.hasUpgrade(EnumMachineUpgrades.AUTO_OUTPUT)) {
    for (    ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
      Location location=new Location(this).move(direction);
      TileEntity entity=location.getTileEntity();
      if (entity != null && entity instanceof IFluidHandler && !(entity instanceof TileCoolingTower) && master.output.getFluidType() != null) {
        IFluidHandler tank=(IFluidHandler)entity;
        int drain=tank.fill(direction.getOpposite(),new FluidStack(master.output.getFluidType(),ConfigurationHandler.coolingTowerAutoExportMaxTransfer),false);
        FluidStack stack=master.drain(drain,true,1);
        tank.fill(direction.getOpposite(),stack,true);
      }
    }
  }
  if (valve && upgrades.hasUpgrade(EnumMachineUpgrades.AUTO_IMPORT)) {
    if (master == null)     findMaster();
    if (master == null)     return;
    for (    ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
      Location location=new Location(this).move(direction);
      TileEntity tile=location.getTileEntity();
      if (tile != null && tile instanceof IFluidHandler && !master.input.isFull()) {
        IFluidHandler tank=(IFluidHandler)tile;
        FluidStack drain=tank.drain(direction.getOpposite(),ConfigurationHandler.coolingTowerAutoImportMaxTransfer,false);
        int fill=fill(ForgeDirection.UNKNOWN,drain,true);
        if (fill > 0) {
          tank.drain(direction.getOpposite(),fill,true);
        }
      }
    }
  }
  if (!isMaster())   return;
  if (input.getFluid() != null && input.getFluid().amount <= 0)   input.setFluid(null);
  if (output.getFluid() != null && output.getFluid().amount <= 0)   output.setFluid(null);
  while (!coolant.isEmpty() && heat > 0) {
    ICoolant cooling=CoolantManager.INSTANCE.getCoolant(coolant.getFluid().getFluid());
    if (cooling == null)     break;
    coolant.drain(1,true);
    float factor=1;
    if (upgrades.hasUpgrade(EnumMachineUpgrades.EFFICIENCY_1))     factor+=ConfigurationHandler.coolingTowerEfficiency1CoolingModifier;
    if (upgrades.hasUpgrade(EnumMachineUpgrades.EFFICIENCY_2))     factor+=ConfigurationHandler.coolingTowerEfficiency2CoolingModifier;
    if (upgrades.hasUpgrade(EnumMachineUpgrades.EFFICIENCY_3))     factor+=ConfigurationHandler.coolingTowerEfficiency3CoolingModifier;
    heat-=cooling.getDegreesCoolingPerMB(heat) * factor;
  }
  int count=1;
  if (upgrades.hasUpgrade(EnumMachineUpgrades.SPEED_1))   count+=ConfigurationHandler.coolingTowerSpeed1SpeedModifier;
  if (upgrades.hasUpgrade(EnumMachineUpgrades.SPEED_2))   count+=ConfigurationHandler.coolingTowerSpeed2SpeedModifier;
  if (upgrades.hasUpgrade(EnumMachineUpgrades.SPEED_3))   count+=ConfigurationHandler.coolingTowerSpeed3SpeedModifier;
  for (int i=0; i < count; i++) {
    if (heat > 80 || recipe == null || output.isFull() || input.isEmpty() || !input.getFluid().isFluidEqual(recipe.getInput()) || input.getFluidAmount() < recipe.getInput().amount || (!output.isEmpty() && !output.getFluid().isFluidEqual(recipe.getOutput())) || output.getFreeSpace() < recipe.getOutput().amount)     return;
    input.drain(recipe.getInput().amount,true);
    output.fill(recipe.getOutput(),true);
    heat+=recipe.getHeat();
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (data.moved) {
    data.afterMoveCheck(worldObj);
    worldObj.scheduleBlockUpdate(xCoord,yCoord,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord),80);
  }
  if (master == null && !isMaster())   findMaster();
  if (master == null && !isMaster())   return;
  if (valve && upgrades.hasUpgrade(EnumMachineUpgrades.AUTO_OUTPUT)) {
    for (    ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
      Location location=new Location(this).move(direction);
      TileEntity entity=location.getTileEntity();
      if (entity != null && entity instanceof IFluidHandler && !(entity instanceof TileCoolingTower) && master.output.getFluidType() != null) {
        IFluidHandler tank=(IFluidHandler)entity;
        int drain=tank.fill(direction.getOpposite(),new FluidStack(master.output.getFluidType(),ConfigurationHandler.coolingTowerAutoExportMaxTransfer),false);
        FluidStack stack=master.drain(drain,true,1);
        tank.fill(direction.getOpposite(),stack,true);
      }
    }
  }
  if (valve && upgrades.hasUpgrade(EnumMachineUpgrades.AUTO_IMPORT)) {
    if (master == null)     findMaster();
    if (master == null)     return;
    for (    ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
      Location location=new Location(this).move(direction);
      TileEntity tile=location.getTileEntity();
      if (tile != null && tile instanceof IFluidHandler) {
        IFluidHandler tank=(IFluidHandler)tile;
        FluidStack drain=tank.drain(direction.getOpposite(),ConfigurationHandler.coolingTowerAutoImportMaxTransfer,false);
        int fill=fill(direction.getOpposite(),drain,true);
        if (fill > 0) {
          tank.drain(direction.getOpposite(),fill,true);
        }
      }
    }
  }
  if (!isMaster())   return;
  if (input.getFluid() != null && input.getFluid().amount <= 0)   input.setFluid(null);
  if (output.getFluid() != null && output.getFluid().amount <= 0)   output.setFluid(null);
  while (!coolant.isEmpty() && heat > 0) {
    ICoolant cooling=CoolantManager.INSTANCE.getCoolant(coolant.getFluid().getFluid());
    if (cooling == null)     break;
    coolant.drain(1,true);
    float factor=1;
    if (upgrades.hasUpgrade(EnumMachineUpgrades.EFFICIENCY_1))     factor+=ConfigurationHandler.coolingTowerEfficiency1CoolingModifier;
    if (upgrades.hasUpgrade(EnumMachineUpgrades.EFFICIENCY_2))     factor+=ConfigurationHandler.coolingTowerEfficiency2CoolingModifier;
    if (upgrades.hasUpgrade(EnumMachineUpgrades.EFFICIENCY_3))     factor+=ConfigurationHandler.coolingTowerEfficiency3CoolingModifier;
    heat-=cooling.getDegreesCoolingPerMB(heat) * factor;
  }
  int count=1;
  if (upgrades.hasUpgrade(EnumMachineUpgrades.SPEED_1))   count+=ConfigurationHandler.coolingTowerSpeed1SpeedModifier;
  if (upgrades.hasUpgrade(EnumMachineUpgrades.SPEED_2))   count+=ConfigurationHandler.coolingTowerSpeed2SpeedModifier;
  if (upgrades.hasUpgrade(EnumMachineUpgrades.SPEED_3))   count+=ConfigurationHandler.coolingTowerSpeed3SpeedModifier;
  for (int i=0; i < count; i++) {
    if (heat > 80 || recipe == null || output.isFull() || input.isEmpty() || !input.getFluid().isFluidEqual(recipe.getInput()) || input.getFluidAmount() < recipe.getInput().amount || (!output.isEmpty() && !output.getFluid().isFluidEqual(recipe.getOutput())) || output.getFreeSpace() < recipe.getOutput().amount)     return;
    input.drain(recipe.getInput().amount,true);
    output.fill(recipe.getOutput(),true);
    heat+=recipe.getHeat();
  }
}",0.9902611150317572
34849,"private void updateHeat(){
  if (worldObj.isRemote || firstTick)   return;
  if (heatTimer == 0) {
    if ((currentHeat > requiredHeat || (energy < energyCost || energyCost == 0)) && currentHeat > 20) {
      currentHeat--;
      isCooling=true;
    }
    if (currentHeat < requiredHeat && (energy >= energyCost && energyCost != 0)) {
      currentHeat++;
      isCooling=false;
    }
    heatTimer=10;
  }
  if (currentHeat == 20)   isCooling=false;
  heatTimer-=1;
}","private void updateHeat(){
  if (worldObj.isRemote || firstTick)   return;
  if (heatTimer == 0) {
    if (((currentHeat > requiredHeat || (energy < energyCost || energyCost == 0)) && currentHeat > 20) || output.isFull()) {
      currentHeat--;
      isCooling=true;
    }
    if ((currentHeat < requiredHeat && (energy >= energyCost && energyCost != 0)) && !output.isFull()) {
      currentHeat++;
      isCooling=false;
    }
    heatTimer=10;
  }
  if (currentHeat == 20)   isCooling=false;
  heatTimer-=1;
}",0.9560776302349336
34850,"public FluidStack realDrain(int maxDrain,boolean doDrain){
  FluidStack result=output.drain(maxDrain,doDrain);
  updateRecipe();
  return result;
}","public FluidStack realDrain(FluidStack fluid,boolean doDrain){
  FluidStack result=output.drain(fluid,doDrain);
  updateRecipe();
  return result;
}",0.8949152542372881
34851,"@Mod.EventHandler public void load(FMLInitializationEvent event){
  proxy.registerRenderers();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,GuiHandler.INSTANCE);
  FMLCommonHandler.instance().bus().register(new EventListener.FML());
  FMLCommonHandler.instance().bus().register(new KeyListener());
  MinecraftForge.EVENT_BUS.register(new EventListener.Forge());
  IMCSender.sendMessages();
  ItemsAndBlocks.registerTileEntities();
  int meta=1;
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xD2CEC9,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF8DF17,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta,""String_Node_Str"",0x13ECFC,DustTypes.GEM_DUST);
  meta=55;
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x00B038,DustTypes.GEM_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x1B1B1B,DustTypes.COAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x53493A,DustTypes.CHARCOAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x171124,DustTypes.OBSIDIAN_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x105E51,DustTypes.ENDER_PEARL_DUST);
  BCAItemManager.dusts.addDust(meta,""String_Node_Str"",0xDBCCBF,DustTypes.NETHER_QUARTZ_DUST);
  meta=83;
  BCAItemManager.dusts.addDust(meta,""String_Node_Str"",0xFF6E1B,DustTypes.METAL_DUST);
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.redstone,10));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.coal,2));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.dye,12,4));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.quartz,2));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Blocks.gravel));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Blocks.sand));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.diamond,2));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.emerald,2));
  BCARecipeManager.duster.addRecipe(new ItemStack(Items.blaze_rod),new ItemStack(Items.blaze_powder,4));
  manager.init(event);
  ItemsAndBlocks.addRecipes();
}","@Mod.EventHandler public void load(FMLInitializationEvent event){
  proxy.registerRenderers();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,GuiHandler.INSTANCE);
  FMLCommonHandler.instance().bus().register(new EventListener.FML());
  FMLCommonHandler.instance().bus().register(new KeyListener());
  MinecraftForge.EVENT_BUS.register(new EventListener.Forge());
  IMCSender.sendMessages();
  ItemsAndBlocks.registerTileEntities();
  int meta=1;
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xD2CEC9,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF8DF17,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta,""String_Node_Str"",0x13ECFC,DustTypes.GEM_DUST);
  meta=55;
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x00B038,DustTypes.GEM_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x1B1B1B,new DustTypes.SimpleDustAlwaysValid(new ItemStack(Items.coal)));
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x53493A,new DustTypes.SimpleDustAlwaysValid(new ItemStack(Items.coal,1,1)));
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x171124,new DustTypes.SimpleDustAlwaysValid(new ItemStack(Blocks.obsidian),4));
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x105E51,new DustTypes.SimpleDustAlwaysValid(new ItemStack(Items.ender_pearl)));
  BCAItemManager.dusts.addDust(meta,""String_Node_Str"",0xDBCCBF,new DustTypes.SimpleDustAlwaysValid(new ItemStack(Items.coal,1,1)));
  meta=83;
  BCAItemManager.dusts.addDust(meta,""String_Node_Str"",0xFF6E1B,DustTypes.METAL_DUST);
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.redstone,10));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.coal,2));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.dye,12,4));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.quartz,2));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Blocks.gravel));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Blocks.sand));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.diamond,2));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.emerald,2));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.blaze_powder,4));
  manager.init(event);
  ItemsAndBlocks.addRecipes();
}",0.8927799394725465
34852,"@Mod.EventHandler public void preInit(FMLPreInitializationEvent event){
  manager.setupModules();
  ConfigurationHandler.init(event.getSuggestedConfigurationFile());
  PacketHandler.init();
  ItemsAndBlocks.init();
  proxy.registerEntities();
  SpecialListMananger.init();
  BCARecipeManager.duster=new DusterRecipeManager();
  BCARecipeManager.cooling=new CoolingTowerRecipeManager();
  BCARecipeManager.refinery=new RefineryRecipeManager();
  BCAItemManager.dusts=new DustManager();
  manager.preInit(event);
}","@Mod.EventHandler public void preInit(FMLPreInitializationEvent event){
  manager.setupModules();
  ConfigurationHandler.init(event.getSuggestedConfigurationFile());
  PacketHandler.init();
  ItemsAndBlocks.init();
  proxy.registerEntities();
  SpecialListMananger.init();
  BCARecipeManager.duster=new DusterRecipeManager();
  BCARecipeManager.cooling=new CoolingTowerRecipeManager();
  BCARecipeManager.refinery=new RefineryRecipeManager();
  BCAItemManager.dusts=new DustManager();
  OreDictionary.registerOre(""String_Node_Str"",Items.blaze_rod);
  OreDictionary.registerOre(""String_Node_Str"",Items.blaze_powder);
  OreDictionary.registerOre(""String_Node_Str"",Items.snowball);
  OreDictionary.registerOre(""String_Node_Str"",Blocks.sand);
  OreDictionary.registerOre(""String_Node_Str"",Blocks.soul_sand);
  manager.preInit(event);
}",0.7475800446760983
34853,"@Mod.EventHandler public void remap(FMLMissingMappingsEvent event){
  Iterator<? extends IDust> iterator=BCAItemManager.dusts.getDusts().iterator();
  for (  FMLMissingMappingsEvent.MissingMapping mapping : event.get()) {
    if (mapping.name.toLowerCase().contains(""String_Node_Str"")) {
      mapping.ignore();
    }
  }
}","@Mod.EventHandler public void remap(FMLMissingMappingsEvent event){
  for (  FMLMissingMappingsEvent.MissingMapping mapping : event.get()) {
    if (mapping.name.toLowerCase().contains(""String_Node_Str"")) {
      mapping.ignore();
    }
  }
}",0.856637168141593
34854,"@CompatModule.Handler public void doneLoading(FMLLoadCompleteEvent event){
  int meta=4;
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xAD6726,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF3D2D2,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x6B566B,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x3D2C1F,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xFAFA6C,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x919191,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x9E83B4,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x5F5269,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x742EA8,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x5A8156,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x495B69,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xCB6293,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x395679,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xDCA82E,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xC8D4D5,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xA99733,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x08B5C3,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x8E2727,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x7CD3C7,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xD1531E,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x547A38,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x94CC48,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF04040,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF4D603,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xFF763C,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xE87400,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x8D7565,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xEFEFEF,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xFFA826,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x55E001,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x458FAB,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xA3DEDE,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xAA5BBD,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xFF8448,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xB90000,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x887362,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x40AA7D,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xA98DB1,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xDCDFA4,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xD89634,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xDFD0AA,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xEDEDED,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF28900,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xAB7EE3,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x0064FF,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xBF5E1F,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x808096,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xBAB0A4,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xABCDEF,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xB3B3B3,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta,""String_Node_Str"",0xF2F2F2,DustTypes.METAL_DUST);
  meta=61;
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x1A89C1,DustTypes.GEM_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x92A6B8,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xFFDB50,DustTypes.SULFUR_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xDEDEDE,DustTypes.SALTPETER_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xBAC5F2,DustTypes.CERTUS_QUARTZ_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF0D467,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF4CCEC,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF0A8A4,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x959E99,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xFF5B00,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xE7D648,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x4B7A9A,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x0F7575,DustTypes.ENDERIUM_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x949494,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xE47700,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xB2D44D,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x942323,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x945758,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x2E6C3D,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x4B4B4B,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x654D31,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta,""String_Node_Str"",0x6700BE,DustTypes.METAL_DUST);
  meta=84;
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xD7EF00,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x515151,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x0087EF,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x1B00E6,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta,""String_Node_Str"",0xEF00EF,DustTypes.METAL_DUST);
  addOreDictDusterRecipe(""String_Node_Str"",""String_Node_Str"",6);
  addDustRecipe(""String_Node_Str"",4,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",4,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",4,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",3,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",4,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",4,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",4,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",4,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,Blocks.soul_sand,""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,Blocks.sand,""String_Node_Str"");
  addDustSmelting(""String_Node_Str"",1,""String_Node_Str"");
  addDustSmelting(""String_Node_Str"",1,""String_Node_Str"");
}","@CompatModule.Handler public void doneLoading(FMLLoadCompleteEvent event){
  int meta=4;
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xAD6726,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF3D2D2,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x6B566B,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x3D2C1F,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xFAFA6C,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x919191,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x9E83B4,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x5F5269,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x742EA8,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x5A8156,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x495B69,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xCB6293,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x395679,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xDCA82E,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xC8D4D5,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xA99733,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x08B5C3,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x8E2727,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x7CD3C7,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xD1531E,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x547A38,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x94CC48,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF04040,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF4D603,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xFF763C,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xE87400,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x8D7565,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xEFEFEF,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xFFA826,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x55E001,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x458FAB,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xA3DEDE,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xAA5BBD,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xFF8448,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xB90000,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x887362,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x40AA7D,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xA98DB1,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xDCDFA4,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xD89634,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xDFD0AA,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xEDEDED,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF28900,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xAB7EE3,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x0064FF,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xBF5E1F,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x808096,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xBAB0A4,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xABCDEF,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xB3B3B3,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta,""String_Node_Str"",0xF2F2F2,DustTypes.METAL_DUST);
  meta=61;
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x1A89C1,DustTypes.GEM_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x92A6B8,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xFFDB50,new DustTypes.SimpleDustWithOre(6));
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xDEDEDE,new DustTypes.SimpleDustWithOre(4));
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xBAC5F2,new DustTypes.SimpleDustWithOre(2));
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF0D467,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF4CCEC,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF0A8A4,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x959E99,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xFF5B00,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xE7D648,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x4B7A9A,DustTypes.ENDERIUM_BASE_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x0F7575,DustTypes.ENDERIUM_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x949494,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xE47700,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xB2D44D,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x942323,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x945758,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x2E6C3D,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x4B4B4B,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x654D31,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta,""String_Node_Str"",0x6700BE,DustTypes.METAL_DUST);
  meta=84;
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xD7EF00,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x515151,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x0087EF,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x1B00E6,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xEF00EF,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF8B33D,DustTypes.ONLY_ORE_DICTIONARY_REGISTRATION);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x49EFFF,DustTypes.ONLY_ORE_DICTIONARY_REGISTRATION);
  BCAItemManager.dusts.addDust(meta,""String_Node_Str"",0x8BEDFC,DustTypes.ONLY_ORE_DICTIONARY_REGISTRATION);
  addOreDictDusterRecipe(""String_Node_Str"",""String_Node_Str"",6);
  addOreDictDusterRecipe(""String_Node_Str"",""String_Node_Str"",4);
  addDustRecipe(""String_Node_Str"",4,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",4,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",4,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",3,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",4,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",4,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",4,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",4,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustRecipe(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addDustSmelting(""String_Node_Str"",1,""String_Node_Str"");
  addDustSmelting(""String_Node_Str"",1,""String_Node_Str"");
}",0.92786135771623
34855,"@Override public boolean onBlockStartBreak(ItemStack stack,int x,int y,int z,EntityPlayer player){
  if (getEnergyStored(stack) <= player.worldObj.getBlock(x,y,z).getBlockHardness(player.worldObj,x,y,z) * ConfigurationHandler.powerDifficultyModifiers[player.worldObj.difficultySetting.getDifficultyId()] * ConfigurationHandler.basePowerModifier) {
    player.addChatComponentMessage(new ChatComponentTranslation(""String_Node_Str""));
    return true;
  }
  if (!player.isSneaking() && isUpgradeInstalled(stack,""String_Node_Str"")) {
    int range=1;
    Block block=player.worldObj.getBlock(x,y,z);
    if (block.getBlockHardness(player.worldObj,x,y,z) == 0)     return false;
    if (getEfficiency(stack,block) > 1) {
      MovingObjectPosition mop=getMovingObjectPositionFromPlayer(player.worldObj,player,true);
      if (mop == null)       return false;
switch (ForgeDirection.getOrientation(mop.sideHit)) {
case UP:
case DOWN:
        for (int xx=x - range; xx <= x + range; xx++) {
          for (int zz=z - range; zz <= z + range; zz++) {
            if (xx == x && zz == z)             continue;
            block=player.worldObj.getBlock(xx,y,zz);
            if (isToolEffective(stack,block,player.worldObj.getBlockMetadata(xx,y,zz)) && getEfficiency(stack,block) > 1 && onBlockDestroyed(stack,player.worldObj,block,xx,y,zz,player))             if (canHarvestBlock(block,player.getCurrentEquippedItem()))             Utils.harvestBlock(player.worldObj,xx,y,zz,player);
          }
        }
      break;
case NORTH:
case SOUTH:
    for (int xx=x - range; xx <= x + range; xx++) {
      for (int yy=y - range; yy <= y + range; yy++) {
        if (xx == x && yy == y)         continue;
        block=player.worldObj.getBlock(xx,yy,z);
        if (isToolEffective(stack,block,player.worldObj.getBlockMetadata(xx,yy,z)) && getEfficiency(stack,block) > 1 && onBlockDestroyed(stack,player.worldObj,block,xx,yy,z,player))         if (canHarvestBlock(block,player.getCurrentEquippedItem()))         Utils.harvestBlock(player.worldObj,xx,yy,z,player);
      }
    }
  break;
case WEST:
case EAST:
for (int yy=y - range; yy <= y + range; yy++) {
  for (int zz=z - range; zz <= z + range; zz++) {
    if (yy == y && zz == z)     continue;
    block=player.worldObj.getBlock(x,yy,zz);
    if (isToolEffective(stack,block,player.worldObj.getBlockMetadata(x,yy,zz)) && getEfficiency(stack,block) > 1 && onBlockDestroyed(stack,player.worldObj,block,x,yy,zz,player))     if (canHarvestBlock(block,player.getCurrentEquippedItem()))     Utils.harvestBlock(player.worldObj,x,yy,zz,player);
  }
}
break;
}
}
}
return false;
}","@Override public boolean onBlockStartBreak(ItemStack stack,int x,int y,int z,EntityPlayer player){
  if (getEnergyStored(stack) <= player.worldObj.getBlock(x,y,z).getBlockHardness(player.worldObj,x,y,z) * ConfigurationHandler.powerDifficultyModifiers[player.worldObj.difficultySetting.getDifficultyId()] * ConfigurationHandler.basePowerModifier) {
    if (!player.worldObj.isRemote)     player.addChatComponentMessage(new ChatComponentTranslation(""String_Node_Str""));
    return true;
  }
  if (!player.isSneaking() && isUpgradeInstalled(stack,""String_Node_Str"")) {
    int range=1;
    Block block=player.worldObj.getBlock(x,y,z);
    if (block.getBlockHardness(player.worldObj,x,y,z) == 0)     return false;
    if (getEfficiency(stack,block) > 1) {
      MovingObjectPosition mop=getMovingObjectPositionFromPlayer(player.worldObj,player,true);
      if (mop == null)       return false;
switch (ForgeDirection.getOrientation(mop.sideHit)) {
case UP:
case DOWN:
        for (int xx=x - range; xx <= x + range; xx++) {
          for (int zz=z - range; zz <= z + range; zz++) {
            if (xx == x && zz == z)             continue;
            block=player.worldObj.getBlock(xx,y,zz);
            if (isToolEffective(stack,block,player.worldObj.getBlockMetadata(xx,y,zz)) && getEfficiency(stack,block) > 1 && onBlockDestroyed(stack,player.worldObj,block,xx,y,zz,player))             if (canHarvestBlock(block,player.getCurrentEquippedItem()))             Utils.harvestBlock(player.worldObj,xx,y,zz,player);
          }
        }
      break;
case NORTH:
case SOUTH:
    for (int xx=x - range; xx <= x + range; xx++) {
      for (int yy=y - range; yy <= y + range; yy++) {
        if (xx == x && yy == y)         continue;
        block=player.worldObj.getBlock(xx,yy,z);
        if (isToolEffective(stack,block,player.worldObj.getBlockMetadata(xx,yy,z)) && getEfficiency(stack,block) > 1 && onBlockDestroyed(stack,player.worldObj,block,xx,yy,z,player))         if (canHarvestBlock(block,player.getCurrentEquippedItem()))         Utils.harvestBlock(player.worldObj,xx,yy,z,player);
      }
    }
  break;
case WEST:
case EAST:
for (int yy=y - range; yy <= y + range; yy++) {
  for (int zz=z - range; zz <= z + range; zz++) {
    if (yy == y && zz == z)     continue;
    block=player.worldObj.getBlock(x,yy,zz);
    if (isToolEffective(stack,block,player.worldObj.getBlockMetadata(x,yy,zz)) && getEfficiency(stack,block) > 1 && onBlockDestroyed(stack,player.worldObj,block,x,yy,zz,player))     if (canHarvestBlock(block,player.getCurrentEquippedItem()))     Utils.harvestBlock(player.worldObj,x,yy,zz,player);
  }
}
break;
}
}
}
return false;
}",0.9933447423464536
34856,"@Override public String getName(){
  return ""String_Node_Str"";
}","@Override public String getName(){
  return ""String_Node_Str"" + dustNumber + ""String_Node_Str"";
}",0.7950310559006211
34857,"@Override public boolean isValid(int meta,String name,ItemStack dust){
  return OreDictionary.getOres(""String_Node_Str"" + name).size() > 0 || OreDictionary.getOres(""String_Node_Str"" + name).size() > 0 || OreDictionary.getOres(""String_Node_Str"" + name).size() > 0;
}","@Override public boolean isValid(int meta,String name,ItemStack dust){
  return OreDictionary.getOres(""String_Node_Str"" + name).size() > 0 || OreDictionary.getOres(""String_Node_Str"" + name).size() > 0;
}",0.8675213675213675
34858,"@Override public void register(int meta,String name,ItemStack dust){
  OreDictionary.registerOre(""String_Node_Str"" + name,dust.copy());
  BCARecipeManager.duster.addRecipe(""String_Node_Str"" + name,dust.copy());
}","@Override public void register(int meta,String name,ItemStack dust){
  OreDictionary.registerOre(""String_Node_Str"" + name,dust.copy());
  ItemStack dusts=dust.copy();
  dusts.stackSize=dustNumber;
  BCARecipeManager.duster.addRecipe(""String_Node_Str"" + name,dusts);
}",0.8559498956158664
34859,"public static String getRFInfoTooltip(int energy,int maxEnergy){
  int percent=maxEnergy > 0 ? ((energy * 100) / maxEnergy) : 0;
  String color=""String_Node_Str"";
  if (percent >= 75)   color+=EnumChatFormatting.DARK_GREEN;
 else   if (percent >= 60)   color+=EnumChatFormatting.GREEN;
 else   if (percent >= 45)   color+=EnumChatFormatting.YELLOW;
 else   if (percent >= 30)   color+=EnumChatFormatting.GOLD;
 else   if (percent >= 15)   color+=EnumChatFormatting.RED;
 else   color+=EnumChatFormatting.DARK_RED;
  return color + localizeFormatted(""String_Node_Str"",energy,maxEnergy);
}","public static String getRFInfoTooltip(int energy,int maxEnergy){
  int percent=maxEnergy > 0 ? (int)((energy / (double)maxEnergy) * 100) : 0;
  String color=""String_Node_Str"";
  if (percent >= 75)   color+=EnumChatFormatting.DARK_GREEN;
 else   if (percent >= 60)   color+=EnumChatFormatting.GREEN;
 else   if (percent >= 45)   color+=EnumChatFormatting.YELLOW;
 else   if (percent >= 30)   color+=EnumChatFormatting.GOLD;
 else   if (percent >= 15)   color+=EnumChatFormatting.RED;
 else   color+=EnumChatFormatting.DARK_RED;
  return color + localizeFormatted(""String_Node_Str"",energy,maxEnergy);
}",0.9671440606571188
34860,"@Override public void updateEntity(){
  super.updateEntity();
  if (reloadRotation) {
    setRotation(ForgeDirection.getOrientation(worldObj.getBlockMetadata(xCoord,yCoord,zCoord)));
    reloadRotation=false;
  }
  ItemStack stack=inventory.getStackInSlot(0);
  if (stack == null)   return;
  TileEntity outputTile=getTileFromDirection(getExitSide());
  if (outputTile == null || !(outputTile instanceof IInjectable))   return;
  IInjectable injectable=(IInjectable)outputTile;
  if (!injectable.canInjectItems(getExitSide().getOpposite()))   return;
  EnumColor color=null;
  for (int i=1; i < inventory.getSizeInventory() - 1; i++) {
    if (areStacksEqual(inventory.getStackInSlot(i),stack)) {
      color=EnumColor.values()[15 - colors[1 + (i - 1) / 6]];
      break;
    }
  }
  if (color == null)   color=EnumColor.values()[15 - colors[0]];
  injectable.injectItem(stack,true,getExitSide().getOpposite(),color);
  setInventorySlotContents(0,null);
  markDirty();
}","@Override public void updateEntity(){
  super.updateEntity();
  if (reloadRotation) {
    setRotation(ForgeDirection.getOrientation(worldObj.getBlockMetadata(xCoord,yCoord,zCoord)));
    reloadRotation=false;
  }
  ItemStack stack=inventory.getStackInSlot(0);
  if (stack == null)   return;
  TileEntity outputTile=getTileFromDirection(getExitSide());
  if (outputTile == null || !(outputTile instanceof IInjectable))   return;
  IInjectable injectable=(IInjectable)outputTile;
  if (!injectable.canInjectItems(getExitSide().getOpposite()))   return;
  EnumColor color=null;
  for (int i=1; i < inventory.getSizeInventory(); i++) {
    if (areStacksEqual(inventory.getStackInSlot(i),stack)) {
      color=EnumColor.values()[15 - colors[1 + (i - 1) / 6]];
      break;
    }
  }
  if (color == null)   color=EnumColor.values()[15 - colors[0]];
  injectable.injectItem(stack,true,getExitSide().getOpposite(),color);
  setInventorySlotContents(0,null);
  markDirty();
}",0.9979338842975206
34861,"@Override public boolean isTriggerActive(TileEntity target,ForgeDirection side,IStatementContainer source,IStatementParameter[] parameters){
  return target instanceof TileKineticEnergyBufferBase && ((TileKineticEnergyBufferBase)target).getEnergyLevel() == 0;
}","@Override public boolean isTriggerActive(TileEntity target,ForgeDirection side,IStatementContainer source,IStatementParameter[] parameters){
  return target instanceof TileKineticEnergyBufferBase && ((TileKineticEnergyBufferBase)target).getEnergyStored(ForgeDirection.UNKNOWN) == 0;
}",0.9357798165137616
34862,"public FluidStack drain(FluidStack resource,boolean doDrain){
  if (fluid != null && fluid.isFluidEqual(resource))   return drain(resource.amount,doDrain);
  return null;
}","public FluidStack drain(FluidStack resource,boolean doDrain){
  FluidStack drained=null;
  if (fluid != null && fluid.isFluidEqual(resource)) {
    if (tile instanceof TileBase)     ((TileBase)tile).sync();
    drained=drain(resource.amount,doDrain);
  }
  return drained;
}",0.6098654708520179
34863,"@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean advancedTooltips){
  int energy=getEnergyStored(stack);
  int maxEnergy=getMaxEnergyStored(stack);
  int percent=(energy * 100) / maxEnergy;
  String color=""String_Node_Str"";
  if (percent > 75) {
    color+=EnumChatFormatting.DARK_GREEN;
  }
 else   if (percent > 60) {
    color+=EnumChatFormatting.GREEN;
  }
 else   if (percent > 45) {
    color+=EnumChatFormatting.YELLOW;
  }
 else   if (percent > 30) {
    color+=EnumChatFormatting.GOLD;
  }
 else   if (percent > 15) {
    color+=EnumChatFormatting.RED;
  }
 else {
    color+=EnumChatFormatting.DARK_RED;
  }
  list.add((color.equals(""String_Node_Str"") ? ""String_Node_Str"" : color) + Utils.localizeFormatted(""String_Node_Str"",energy,maxEnergy));
}","@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean advancedTooltips){
  int energy=getEnergyStored(stack);
  int maxEnergy=getMaxEnergyStored(stack);
  int percent=maxEnergy != 0 ? (energy * 100) / maxEnergy : 0;
  String color=""String_Node_Str"";
  if (percent > 75) {
    color+=EnumChatFormatting.DARK_GREEN;
  }
 else   if (percent > 60) {
    color+=EnumChatFormatting.GREEN;
  }
 else   if (percent > 45) {
    color+=EnumChatFormatting.YELLOW;
  }
 else   if (percent > 30) {
    color+=EnumChatFormatting.GOLD;
  }
 else   if (percent > 15) {
    color+=EnumChatFormatting.RED;
  }
 else {
    color+=EnumChatFormatting.DARK_RED;
  }
  list.add((color.equals(""String_Node_Str"") ? ""String_Node_Str"" : color) + Utils.localizeFormatted(""String_Node_Str"",energy,maxEnergy));
}",0.9873722188815394
34864,"protected void spawnDustingParticles(){
  if (!worldObj.isRemote && worldObj instanceof WorldServer) {
    WorldServer worldServer=(WorldServer)worldObj;
    ItemStack stack=getStackInSlot(0);
    if (stack != null && stack.getItem() != null && stack.stackSize > 0) {
      Item item=stack.getItem();
      String s=null;
      double offsetY=0;
      if (item instanceof ItemBlock) {
        s=""String_Node_Str"" + Block.getIdFromBlock(((ItemBlock)item).field_150939_a) + ""String_Node_Str""+ stack.getItemDamage();
        offsetY=0.1;
      }
 else {
        s=""String_Node_Str"" + Item.getIdFromItem(item);
        if (stack.getHasSubtypes())         s+=""String_Node_Str"" + stack.getItemDamage();
        offsetY=0.5;
      }
      offsetY+=getParticleOffset();
      if (!Strings.isNullOrEmpty(s))       worldServer.func_147487_a(s,xCoord + .5,yCoord + offsetY,zCoord + .5,100,0,0,0,0.075);
    }
  }
}","protected void spawnDustingParticles(){
  if (!worldObj.isRemote && worldObj instanceof WorldServer) {
    WorldServer worldServer=(WorldServer)worldObj;
    ItemStack stack=getStackInSlot(0);
    if (stack != null && stack.getItem() != null && stack.stackSize > 0) {
      Item item=stack.getItem();
      String s=null;
      double offsetY=0;
      if (item instanceof ItemBlock) {
        s=""String_Node_Str"" + Block.getIdFromBlock(((ItemBlock)item).field_150939_a) + ""String_Node_Str""+ stack.getItemDamage();
        offsetY=0.1;
      }
 else {
        s=""String_Node_Str"" + Item.getIdFromItem(item);
        if (stack.getHasSubtypes())         s+=""String_Node_Str"" + stack.getItemDamage();
        offsetY=0.5;
      }
      offsetY+=getParticleOffset();
      if (!Strings.isNullOrEmpty(s))       worldServer.func_147487_a(s,xCoord + .5,yCoord + offsetY,zCoord + .5,particles,0,0,0,0.075);
    }
  }
}",0.9933774834437086
34865,"public TileMechanicalDuster(){
  super(Variables.Eureka.DustT2Key2);
}","public TileMechanicalDuster(){
  super(Variables.Eureka.DustT2Key2);
  particles=5;
}",0.9032258064516128
34866,"public ContainerFluidicCompressor(InventoryPlayer inventoryPlayer,TileFluidicCompressor tile){
  super(inventoryPlayer,tile);
  addSlotToContainer(new Slot(tile,0,89,39){
    @Override public boolean isItemValid(    ItemStack stack){
      return stack != null && stack.getItem() != null && (stack.getItem() instanceof IFluidContainerItem || FluidContainerRegistry.isContainer(stack));
    }
    @Override public int getSlotStackLimit(){
      return 1;
    }
  }
);
  addSlotToContainer(new SlotOutput(tile,1,126,43));
  addPlayerInventory(8,103);
}","public ContainerFluidicCompressor(InventoryPlayer inventoryPlayer,TileFluidicCompressor tile){
  super(inventoryPlayer,tile);
  addSlotToContainer(new Slot(tile,0,89,39){
    @Override public boolean isItemValid(    ItemStack stack){
      return stack != null && stack.getItem() != null && (stack.getItem() instanceof IFluidContainerItem || FluidContainerRegistry.isContainer(stack));
    }
  }
);
  addSlotToContainer(new SlotOutput(tile,1,126,43));
  addPlayerInventory(8,103);
}",0.9341085271317828
34867,"@Override public boolean isItemValidForSlot(int slot,ItemStack stack){
  ItemStack itemStack=getStackInSlot(0);
  return stack != null && slot == 0 && (stack.getItem() instanceof IFluidContainerItem || FluidContainerRegistry.isContainer(stack)) && (itemStack == null || itemStack.getItem() == null || itemStack.stackSize + stack.stackSize <= 1);
}","@Override public boolean isItemValidForSlot(int slot,ItemStack stack){
  return stack != null && stack.getItem() != null && slot == 0 && (stack.getItem() instanceof IFluidContainerItem || FluidContainerRegistry.isContainer(stack));
}",0.6620689655172414
34868,"@Override public void updateEntity(){
  super.updateEntity();
  if (worldObj.isRemote)   return;
  ItemStack stack=inventory.getStackInSlot(0);
  if (stack != null) {
    Item stackItem=stack.getItem();
    if (stackItem instanceof IFluidContainerItem) {
      IFluidContainerItem iFluidContainerItem=(IFluidContainerItem)stackItem;
      if (fill) {
        if (!tank.isEmpty()) {
          int amount=128;
          if (tank.getFluidAmount() < amount)           amount=tank.getFluidAmount();
          if (energy >= amount) {
            drain(ForgeDirection.UNKNOWN,iFluidContainerItem.fill(stack,new FluidStack(tank.getFluid().fluidID,amount),true),true);
            energy-=amount;
          }
        }
      }
 else {
        FluidStack contained=iFluidContainerItem.getFluid(stack);
        if (!fill && !tank.isFull() && contained != null && contained.amount > 0) {
          int amount=64;
          if (tank.getFreeSpace() < amount)           amount=tank.getFreeSpace();
          if (amount > contained.amount)           amount=contained.amount;
          iFluidContainerItem.drain(stack,fill(ForgeDirection.UNKNOWN,new FluidStack(contained.fluidID,amount),true),true);
        }
      }
    }
 else     if (FluidContainerRegistry.isContainer(stack)) {
      if (fill) {
        if (!tank.isEmpty()) {
          int amount=FluidContainerRegistry.getContainerCapacity(tank.getFluid(),stack);
          if (amount > 0 && energy >= amount && tank.getFluidAmount() >= amount) {
            ItemStack filledContainer=FluidContainerRegistry.fillFluidContainer(new FluidStack(tank.getFluid().fluidID,amount),stack);
            if (filledContainer != null && filledContainer.getItem() != null && filledContainer.stackSize > 0) {
              energy-=amount;
              drain(ForgeDirection.UNKNOWN,amount,true);
              inventory.setInventorySlotContents(0,filledContainer.copy());
            }
          }
        }
      }
 else {
        FluidStack contained=FluidContainerRegistry.getFluidForFilledItem(stack);
        if (contained != null && contained.amount > 0 && tank.getFreeSpace() >= contained.amount) {
          if (fill(ForgeDirection.UNKNOWN,contained,false) == contained.amount) {
            fill(ForgeDirection.UNKNOWN,contained,true);
            ItemStack drainedContainer=FluidContainerRegistry.drainFluidContainer(stack);
            if (drainedContainer != null && drainedContainer.getItem() != null && drainedContainer.stackSize > 0)             inventory.setInventorySlotContents(0,drainedContainer.copy());
          }
        }
      }
    }
    if (getProgress() >= 16) {
      stack=getStackInSlot(0);
      ItemStack outputStack=getStackInSlot(1);
      if (outputStack == null) {
        ItemStack copyStack=stack.copy();
        copyStack.stackSize=1;
        inventory.setInventorySlotContents(1,copyStack);
        inventory.decrStackSize(0,1);
      }
 else       if (Utils.areItemStacksMergeable(stack,outputStack) && outputStack.stackSize + stack.stackSize <= outputStack.getMaxStackSize()) {
        outputStack.stackSize+=stack.stackSize;
        inventory.decrStackSize(0,1);
      }
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (worldObj.isRemote)   return;
  ItemStack stack=inventory.getStackInSlot(0);
  if (stack != null) {
    Item stackItem=stack.getItem();
    if (stackItem instanceof IFluidContainerItem) {
      IFluidContainerItem iFluidContainerItem=(IFluidContainerItem)stackItem;
      if (fill) {
        if (!tank.isEmpty()) {
          int amount=128;
          if (tank.getFluidAmount() < amount)           amount=tank.getFluidAmount();
          if (energy >= amount) {
            drain(ForgeDirection.UNKNOWN,iFluidContainerItem.fill(stack,new FluidStack(tank.getFluid().fluidID,amount),true),true);
            energy-=amount;
          }
        }
      }
 else {
        FluidStack contained=iFluidContainerItem.getFluid(stack);
        if (!fill && !tank.isFull() && contained != null && contained.amount > 0) {
          int amount=64;
          if (tank.getFreeSpace() < amount)           amount=tank.getFreeSpace();
          if (amount > contained.amount)           amount=contained.amount;
          iFluidContainerItem.drain(stack,fill(ForgeDirection.UNKNOWN,new FluidStack(contained.fluidID,amount),true),true);
        }
      }
    }
 else     if (FluidContainerRegistry.isContainer(stack)) {
      if (fill) {
        if (!tank.isEmpty()) {
          int amount=FluidContainerRegistry.getContainerCapacity(tank.getFluid(),stack);
          if (amount > 0 && energy >= amount && tank.getFluidAmount() >= amount) {
            ItemStack filledContainer=FluidContainerRegistry.fillFluidContainer(new FluidStack(tank.getFluid().fluidID,amount),stack);
            if (filledContainer != null && filledContainer.getItem() != null && filledContainer.stackSize > 0) {
              energy-=amount;
              drain(ForgeDirection.UNKNOWN,amount,true);
              inventory.setInventorySlotContents(0,filledContainer.copy());
            }
          }
        }
      }
 else {
        FluidStack contained=FluidContainerRegistry.getFluidForFilledItem(stack);
        if (contained != null && contained.amount > 0 && tank.getFreeSpace() >= contained.amount) {
          if (fill(ForgeDirection.UNKNOWN,contained,false) == contained.amount) {
            fill(ForgeDirection.UNKNOWN,contained,true);
            ItemStack drainedContainer=FluidContainerRegistry.drainFluidContainer(stack);
            if (drainedContainer != null && drainedContainer.getItem() != null && drainedContainer.stackSize > 0)             inventory.setInventorySlotContents(0,drainedContainer.copy());
          }
        }
      }
    }
    if (getProgress() >= 16) {
      stack=getStackInSlot(0);
      if (stack != null) {
        ItemStack outputStack=getStackInSlot(1);
        if (outputStack == null || outputStack.getItem() == null || outputStack.stackSize <= 0) {
          ItemStack copyStack=stack.copy();
          copyStack.stackSize=1;
          inventory.setInventorySlotContents(1,copyStack);
          inventory.decrStackSize(0,1);
        }
      }
    }
  }
}",0.9461077844311376
34869,"@Mod.EventHandler public void remap(FMLMissingMappingsEvent event){
  for (  FMLMissingMappingsEvent.MissingMapping mapping : event.get()) {
    if (mapping.name.toLowerCase().contains(""String_Node_Str"")) {
      if (mapping.type == GameRegistry.Type.ITEM)       mapping.remap(Item.getItemFromBlock(FluidRegistry.getFluid(""String_Node_Str"").getBlock()));
      if (mapping.type == GameRegistry.Type.BLOCK)       mapping.remap(FluidRegistry.getFluid(""String_Node_Str"").getBlock());
      continue;
    }
 else     if (mapping.name.toLowerCase().contains(""String_Node_Str"") && Loader.isModLoaded(""String_Node_Str"")) {
      if (mapping.type == GameRegistry.Type.ITEM)       mapping.remap(Item.getItemFromBlock(FluidRegistry.getFluid(""String_Node_Str"").getBlock()));
 else       if (mapping.type == GameRegistry.Type.BLOCK)       mapping.remap(FluidRegistry.getFluid(""String_Node_Str"").getBlock());
      continue;
    }
    if (!ConfigurationHandler.shouldRegisterDusts)     return;
    for (    IDust dust : BCAItemManager.dusts.getDusts()) {
      if (dust == null)       continue;
      String name=dust.getName().toLowerCase();
      if (mapping.name.toLowerCase().contains(name)) {
        mapping.remap(GameRegistry.findItem(Variables.MOD.ID,""String_Node_Str"" + name));
        continue;
      }
    }
  }
}","@Mod.EventHandler public void remap(FMLMissingMappingsEvent event){
  Iterator<? extends IDust> iterator=BCAItemManager.dusts.getDusts().iterator();
  for (  FMLMissingMappingsEvent.MissingMapping mapping : event.get()) {
    if (mapping.name.toLowerCase().contains(""String_Node_Str"")) {
      if (mapping.type == GameRegistry.Type.ITEM)       mapping.remap(Item.getItemFromBlock(FluidRegistry.getFluid(""String_Node_Str"").getBlock()));
      if (mapping.type == GameRegistry.Type.BLOCK)       mapping.remap(FluidRegistry.getFluid(""String_Node_Str"").getBlock());
      continue;
    }
 else     if (mapping.name.toLowerCase().contains(""String_Node_Str"") && Loader.isModLoaded(""String_Node_Str"")) {
      if (mapping.type == GameRegistry.Type.ITEM)       mapping.remap(Item.getItemFromBlock(FluidRegistry.getFluid(""String_Node_Str"").getBlock()));
 else       if (mapping.type == GameRegistry.Type.BLOCK)       mapping.remap(FluidRegistry.getFluid(""String_Node_Str"").getBlock());
      continue;
    }
    if (!ConfigurationHandler.shouldRegisterDusts)     return;
    while (iterator.hasNext()) {
      IDust dust=iterator.next();
      if (dust == null)       continue;
      String name=dust.getName().toLowerCase();
      if (mapping.name.toLowerCase().contains(name)) {
        mapping.remap(GameRegistry.findItem(Variables.MOD.ID,""String_Node_Str"" + name));
        iterator.remove();
        continue;
      }
    }
  }
}",0.9276315789473684
34870,"private static void addBCRecipes(){
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    addStickRecipe(ItemsAndBlocks.ironStick,1000,""String_Node_Str"");
    addStickRecipe(ItemsAndBlocks.goldStick,2000,""String_Node_Str"");
    addStickRecipe(ItemsAndBlocks.diamondStick,3000,""String_Node_Str"",""String_Node_Str"");
    addStickRecipe(ItemsAndBlocks.netherStarStick,10000,""String_Node_Str"",Items.nether_star);
    addStickRecipe(ItemsAndBlocks.quartzStick,2000,""String_Node_Str"",""String_Node_Str"");
    addStickRecipe(ItemsAndBlocks.enderStick,5000,""String_Node_Str"",Items.ender_pearl);
    addStickRecipe(ItemsAndBlocks.redstoneStick,3000,""String_Node_Str"",""String_Node_Str"");
    addStickRecipe(ItemsAndBlocks.glowstoneStick,3000,""String_Node_Str"",""String_Node_Str"");
    addStickRecipe(ItemsAndBlocks.slimeStick,2000,""String_Node_Str"",""String_Node_Str"");
    addStickRecipe(ItemsAndBlocks.boneStick,2000,""String_Node_Str"",Items.bone);
    addStickRecipe(ItemsAndBlocks.flintStick,2000,""String_Node_Str"",Items.flint);
    addStickRecipe(ItemsAndBlocks.blazeStick,4000,""String_Node_Str"",Items.blaze_rod);
    addAssemblyRecipe(""String_Node_Str"",ItemsAndBlocks.itemKineticMultiTool,8000,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemsAndBlocks.toolCore);
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeChainsaw);
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeDrill);
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeDigger);
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeHoe);
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new ToolCoreRecipe());
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeArea,new ItemStack(Blocks.sticky_piston),new ItemStack(Items.ender_pearl),""String_Node_Str"");
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeSilky,new ItemStack(Items.string,3),""String_Node_Str"",""String_Node_Str"");
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeFortune1,new ItemStack(Items.string,3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeFortune2,new ItemStack(ItemsAndBlocks.toolUpgradeFortune1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeFortune3,new ItemStack(ItemsAndBlocks.toolUpgradeFortune2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.ironCanister,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',BCItems.SEALANT,'I',Items.iron_ingot,'G',Blocks.glass_pane);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.goldCanister),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',BCItems.SEALANT,'G',Items.gold_ingot,'I',ItemsAndBlocks.ironCanister);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.diamondCanister),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',BCItems.SEALANT,'D',Items.diamond,'G',ItemsAndBlocks.goldCanister);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.fluidicCompressorBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',BCItems.IRON_GEAR,'F',BCItems.FLOODGATE,'P',Blocks.piston,'G',ItemsAndBlocks.goldCanister,'M',BCItems.PUMP);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.chargingStationBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',BCItems.IRON_GEAR,'W',BCItems.PIPE_POWER_WOOD,'K',ItemsAndBlocks.powerCapsuleTier2);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.powerCapsuleTier1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'G',Items.gold_ingot,'R',Blocks.redstone_block);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.powerCapsuleTier2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'D',Items.diamond,'P',ItemsAndBlocks.powerCapsuleTier1);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.powerCapsuleTier3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.diamond,'E',Items.emerald,'P',ItemsAndBlocks.powerCapsuleTier2);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.basicDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',BCItems.STONE_GEAR,'I',Items.iron_ingot,'S',Blocks.stone,'L',""String_Node_Str""));
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.mechanicalDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',BCItems.IRON_GEAR,'M',Items.gold_ingot,'F',ItemsAndBlocks.itemGrindingWheel,'S',Blocks.stone);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.semiAutomaticDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',BCItems.IRON_GEAR,'M',Items.gold_ingot,'P',BCItems.PIPE_ITEMS_GOLD,'L',""String_Node_Str"",'S',Blocks.stone));
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.kineticDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Blocks.glass,'P',BCItems.PIPE_ITEMS_GOLD,'I',BCItems.GOLD_GEAR,'D',BCItems.DIAMOND_GEAR);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.itemGrindingWheel),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'F',Items.flint,'G',BCItems.STONE_GEAR);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.itemIronWireUnhardened,2),""String_Node_Str"",'D',""String_Node_Str""));
    GameRegistry.addSmelting(ItemsAndBlocks.itemIronWireUnhardened,new ItemStack(ItemsAndBlocks.itemIronWire,2),0.5f);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.basicCoilBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'W',ItemsAndBlocks.itemIronWire,'I',Items.iron_ingot);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.goldWireUnhardened,2),""String_Node_Str"",'D',""String_Node_Str""));
    GameRegistry.addSmelting(ItemsAndBlocks.goldWireUnhardened,new ItemStack(ItemsAndBlocks.goldWire,2),0.5f);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.lavaCoilBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'W',ItemsAndBlocks.goldWire,'I',Items.iron_ingot);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.diamondWireUnhardened,2),""String_Node_Str"",'D',""String_Node_Str""));
    GameRegistry.addSmelting(ItemsAndBlocks.diamondWireUnhardened,new ItemStack(ItemsAndBlocks.diamondWire,2),0.5f);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.kineticCoil),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'W',ItemsAndBlocks.diamondWire,'I',Items.iron_ingot);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.heatedFurnaceBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'F',Blocks.furnace);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.kebT1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'B',ItemsAndBlocks.powerCapsuleTier1,'P',BCItems.PIPE_POWER_GOLD);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.kebT2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'B',ItemsAndBlocks.powerCapsuleTier2,'P',BCItems.PIPE_POWER_GOLD);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.kebT3Core),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.diamond,'B',ItemsAndBlocks.powerCapsuleTier3,'P',BCItems.PIPE_POWER_DIAMOND);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.kebT3Plating),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',BCItems.PIPE_POWER_DIAMOND,'G',Items.gold_ingot,'I',Items.iron_ingot);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.refineryWalls,10),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',ItemsAndBlocks.heatPlating,'D',""String_Node_Str""));
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.refineryValve,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',ItemsAndBlocks.heatPlating,'B',Blocks.iron_bars);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.coolingTowerWalls,10),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',ItemsAndBlocks.heatPlating,'D',Items.redstone);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.coolingTowerValve),""String_Node_Str"",'V',ItemsAndBlocks.refineryValve);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.AUTO_OUTPUT.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'E',Items.ender_pearl,'P',Blocks.piston,'B',ItemsAndBlocks.blankUpgrade);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.EFFICIENCY_1.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',ItemsAndBlocks.powerCapsuleTier1,'I',Items.iron_ingot,'B',ItemsAndBlocks.blankUpgrade);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.EFFICIENCY_2.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'C',ItemsAndBlocks.powerCapsuleTier2,'U',new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.EFFICIENCY_1.ordinal()));
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.EFFICIENCY_3.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',ItemsAndBlocks.powerCapsuleTier3,'D',Items.diamond,'U',new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.EFFICIENCY_2.ordinal()),'G',Items.gold_ingot);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.SPEED_1.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'G',Items.glowstone_dust,'B',ItemsAndBlocks.blankUpgrade);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.SPEED_2.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'B',Blocks.glowstone,'U',new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.SPEED_1.ordinal()));
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.SPEED_3.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'B',Blocks.glowstone,'D',Items.diamond,'U',new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.SPEED_2.ordinal()));
  }
  addAssemblyRecipe(""String_Node_Str"",ItemsAndBlocks.portableLaser,8000,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",BCItems.LASER,ItemsAndBlocks.toolCore);
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",null,ItemRedstoneChipset.Chipset.IRON));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.GOLD));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.DIAMOND));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.EMERALD,ItemRedstoneChipset.Chipset.PULSATING));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.IRON));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.COMP));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",null,ItemRedstoneChipset.Chipset.IRON));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.RED));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.RED));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.RED));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.RED));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.RED));
  GameRegistry.addShapelessRecipe(new ItemStack(ItemsAndBlocks.itemKineticMultiTool),new ItemStack(ItemsAndBlocks.kineticTool,1,OreDictionary.WILDCARD_VALUE));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.heatPlatingRaw,2),""String_Node_Str"",""String_Node_Str"",'D',""String_Node_Str""));
  GameRegistry.addSmelting(new ItemStack(ItemsAndBlocks.heatPlatingRaw),new ItemStack(ItemsAndBlocks.heatPlating),0);
  GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.toolUpgradeChainsaw),""String_Node_Str"",'U',ItemsAndBlocks.toolUpgradeDigger);
  GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.toolUpgradeDigger),""String_Node_Str"",'U',ItemsAndBlocks.toolUpgradeDrill);
  GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.toolUpgradeDrill),""String_Node_Str"",'U',ItemsAndBlocks.toolUpgradeHoe);
  GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.toolUpgradeHoe),""String_Node_Str"",'U',ItemsAndBlocks.toolUpgradeChainsaw);
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.machineConfigurator),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',""String_Node_Str"",'I',""String_Node_Str"",'R',""String_Node_Str"",'W',BCItems.WRENCH,'Y',""String_Node_Str""));
  GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.itemSorter),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'S',Blocks.stone,'U',EnumMachineUpgrades.AUTO_OUTPUT.getItemStack(),'P',BCItems.PIPE_ITEMS_LAPIS,'C',Blocks.chest,'G',BCItems.PIPE_ITEMS_GOLD);
  GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.pipeColoringTool),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'W',new ItemStack(Blocks.wool,1,OreDictionary.WILDCARD_VALUE),'S',Items.stick);
  GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.blankUpgrade,2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'P',ItemsAndBlocks.heatPlating);
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    ItemStack stack=new ItemStack(BCItems.REFINERY);
    ArrayList recipeList=(ArrayList)CraftingManager.getInstance().getRecipeList();
    for (int t=0; t < recipeList.size(); t++) {
      IRecipe recipe=(IRecipe)recipeList.get(t);
      ItemStack recipeResult=recipe.getRecipeOutput();
      if (ItemStack.areItemStacksEqual(stack,recipeResult)) {
        recipeList.remove(t);
        break;
      }
    }
  }
}","private static void addBCRecipes(){
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    addStickRecipe(ItemsAndBlocks.ironStick,1000,""String_Node_Str"");
    addStickRecipe(ItemsAndBlocks.goldStick,2000,""String_Node_Str"");
    addStickRecipe(ItemsAndBlocks.diamondStick,3000,""String_Node_Str"",""String_Node_Str"");
    addStickRecipe(ItemsAndBlocks.netherStarStick,10000,""String_Node_Str"",Items.nether_star);
    addStickRecipe(ItemsAndBlocks.quartzStick,2000,""String_Node_Str"",""String_Node_Str"");
    addStickRecipe(ItemsAndBlocks.enderStick,5000,""String_Node_Str"",Items.ender_pearl);
    addStickRecipe(ItemsAndBlocks.redstoneStick,3000,""String_Node_Str"",""String_Node_Str"");
    addStickRecipe(ItemsAndBlocks.glowstoneStick,3000,""String_Node_Str"",""String_Node_Str"");
    addStickRecipe(ItemsAndBlocks.slimeStick,2000,""String_Node_Str"",""String_Node_Str"");
    addStickRecipe(ItemsAndBlocks.boneStick,2000,""String_Node_Str"",Items.bone);
    addStickRecipe(ItemsAndBlocks.flintStick,2000,""String_Node_Str"",Items.flint);
    addStickRecipe(ItemsAndBlocks.blazeStick,4000,""String_Node_Str"",Items.blaze_rod);
    addAssemblyRecipe(""String_Node_Str"",ItemsAndBlocks.itemKineticMultiTool,8000,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemsAndBlocks.toolCore);
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeChainsaw);
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeDrill);
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeDigger);
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeHoe);
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new ToolCoreRecipe());
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeArea,new ItemStack(Blocks.sticky_piston),new ItemStack(Items.ender_pearl),""String_Node_Str"");
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeSilky,new ItemStack(Items.string,3),""String_Node_Str"",""String_Node_Str"");
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeFortune1,new ItemStack(Items.string,3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeFortune2,new ItemStack(ItemsAndBlocks.toolUpgradeFortune1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    addUpgradeRecipe(ItemsAndBlocks.toolUpgradeFortune3,new ItemStack(ItemsAndBlocks.toolUpgradeFortune2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
    BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeUpgrade(""String_Node_Str""));
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.ironCanister,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',BCItems.SEALANT,'I',Items.iron_ingot,'G',Blocks.glass_pane);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.goldCanister),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',BCItems.SEALANT,'G',Items.gold_ingot,'I',ItemsAndBlocks.ironCanister);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.diamondCanister),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',BCItems.SEALANT,'D',Items.diamond,'G',ItemsAndBlocks.goldCanister);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.fluidicCompressorBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',BCItems.IRON_GEAR,'F',BCItems.FLOODGATE,'P',Blocks.piston,'G',ItemsAndBlocks.goldCanister,'M',BCItems.PUMP);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.chargingStationBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',BCItems.IRON_GEAR,'W',BCItems.PIPE_POWER_WOOD,'K',ItemsAndBlocks.powerCapsuleTier2);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.powerCapsuleTier1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'G',Items.gold_ingot,'R',Blocks.redstone_block);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.powerCapsuleTier2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'D',Items.diamond,'P',ItemsAndBlocks.powerCapsuleTier1);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.powerCapsuleTier3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.diamond,'E',Items.emerald,'P',ItemsAndBlocks.powerCapsuleTier2);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.basicDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',BCItems.STONE_GEAR,'I',Items.iron_ingot,'S',Blocks.stone,'L',""String_Node_Str""));
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.mechanicalDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',BCItems.IRON_GEAR,'M',Items.gold_ingot,'F',ItemsAndBlocks.itemGrindingWheel,'S',Blocks.stone);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.semiAutomaticDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',BCItems.IRON_GEAR,'M',Items.gold_ingot,'P',BCItems.PIPE_ITEMS_GOLD,'L',""String_Node_Str"",'S',Blocks.stone));
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.kineticDusterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Blocks.glass,'P',BCItems.PIPE_ITEMS_GOLD,'I',BCItems.GOLD_GEAR,'D',BCItems.DIAMOND_GEAR);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.itemGrindingWheel),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'F',Items.flint,'G',BCItems.STONE_GEAR);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.itemIronWireUnhardened,2),""String_Node_Str"",'D',""String_Node_Str""));
    GameRegistry.addSmelting(ItemsAndBlocks.itemIronWireUnhardened,new ItemStack(ItemsAndBlocks.itemIronWire,2),0.5f);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.basicCoilBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'W',ItemsAndBlocks.itemIronWire,'I',Items.iron_ingot);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.goldWireUnhardened,2),""String_Node_Str"",'D',""String_Node_Str""));
    GameRegistry.addSmelting(ItemsAndBlocks.goldWireUnhardened,new ItemStack(ItemsAndBlocks.goldWire,2),0.5f);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.lavaCoilBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'W',ItemsAndBlocks.goldWire,'I',Items.iron_ingot);
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.diamondWireUnhardened,2),""String_Node_Str"",'D',""String_Node_Str""));
    GameRegistry.addSmelting(ItemsAndBlocks.diamondWireUnhardened,new ItemStack(ItemsAndBlocks.diamondWire,2),0.5f);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.kineticCoil),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'W',ItemsAndBlocks.diamondWire,'I',Items.iron_ingot);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.heatedFurnaceBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'F',Blocks.furnace);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.kebT1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'B',ItemsAndBlocks.powerCapsuleTier1,'P',BCItems.PIPE_POWER_GOLD);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.kebT2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'B',ItemsAndBlocks.powerCapsuleTier2,'P',BCItems.PIPE_POWER_GOLD);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.kebT3Core),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.diamond,'B',ItemsAndBlocks.powerCapsuleTier3,'P',BCItems.PIPE_POWER_DIAMOND);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.kebT3Plating),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',BCItems.PIPE_POWER_DIAMOND,'G',Items.gold_ingot,'I',Items.iron_ingot);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.refineryWalls,10),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',ItemsAndBlocks.heatPlating,'D',""String_Node_Str""));
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.refineryValve,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',ItemsAndBlocks.heatPlating,'B',Blocks.iron_bars);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.coolingTowerWalls,10),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',ItemsAndBlocks.heatPlating,'D',Items.redstone);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.coolingTowerValve),""String_Node_Str"",'V',ItemsAndBlocks.refineryValve);
  }
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.AUTO_OUTPUT.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'E',Items.ender_pearl,'P',Blocks.piston,'B',ItemsAndBlocks.blankUpgrade);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.EFFICIENCY_1.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',ItemsAndBlocks.powerCapsuleTier1,'I',Items.iron_ingot,'B',ItemsAndBlocks.blankUpgrade);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.EFFICIENCY_2.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'C',ItemsAndBlocks.powerCapsuleTier2,'U',new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.EFFICIENCY_1.ordinal()));
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.EFFICIENCY_3.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',ItemsAndBlocks.powerCapsuleTier3,'D',Items.diamond,'U',new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.EFFICIENCY_2.ordinal()),'G',Items.gold_ingot);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.SPEED_1.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'G',Items.glowstone_dust,'B',ItemsAndBlocks.blankUpgrade);
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.SPEED_2.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'B',Blocks.glowstone,'U',new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.SPEED_1.ordinal()));
    GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.SPEED_3.ordinal()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'B',Blocks.glowstone,'D',Items.diamond,'U',new ItemStack(ItemsAndBlocks.upgrade,1,EnumMachineUpgrades.SPEED_2.ordinal()));
  }
  if (ConfigurationHandler.enabled(""String_Node_Str""))   addAssemblyRecipe(""String_Node_Str"",ItemsAndBlocks.portableLaser,8000,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",BCItems.LASER,ItemsAndBlocks.toolCore);
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",null,ItemRedstoneChipset.Chipset.IRON));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.GOLD));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.DIAMOND));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.EMERALD,ItemRedstoneChipset.Chipset.PULSATING));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.IRON));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.COMP));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",null,ItemRedstoneChipset.Chipset.IRON));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.RED));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.RED));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.RED));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.RED));
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new UpgradeRecipeStick(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ItemRedstoneChipset.Chipset.RED));
  GameRegistry.addShapelessRecipe(new ItemStack(ItemsAndBlocks.itemKineticMultiTool),new ItemStack(ItemsAndBlocks.kineticTool,1,OreDictionary.WILDCARD_VALUE));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.heatPlatingRaw,2),""String_Node_Str"",""String_Node_Str"",'D',""String_Node_Str""));
  GameRegistry.addSmelting(new ItemStack(ItemsAndBlocks.heatPlatingRaw),new ItemStack(ItemsAndBlocks.heatPlating),0);
  GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.toolUpgradeChainsaw),""String_Node_Str"",'U',ItemsAndBlocks.toolUpgradeDigger);
  GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.toolUpgradeDigger),""String_Node_Str"",'U',ItemsAndBlocks.toolUpgradeDrill);
  GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.toolUpgradeDrill),""String_Node_Str"",'U',ItemsAndBlocks.toolUpgradeHoe);
  GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.toolUpgradeHoe),""String_Node_Str"",'U',ItemsAndBlocks.toolUpgradeChainsaw);
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ItemsAndBlocks.machineConfigurator),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',""String_Node_Str"",'I',""String_Node_Str"",'R',""String_Node_Str"",'W',BCItems.WRENCH,'Y',""String_Node_Str""));
  if (ConfigurationHandler.enabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.itemSorter),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'S',Blocks.stone,'U',EnumMachineUpgrades.AUTO_OUTPUT.getItemStack(),'P',BCItems.PIPE_ITEMS_LAPIS,'C',Blocks.chest,'G',BCItems.PIPE_ITEMS_GOLD);
  if (ConfigurationHandler.enabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.pipeColoringTool),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'W',new ItemStack(Blocks.wool,1,OreDictionary.WILDCARD_VALUE),'S',Items.stick);
  GameRegistry.addRecipe(new ItemStack(ItemsAndBlocks.blankUpgrade,2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',Items.gold_ingot,'P',ItemsAndBlocks.heatPlating);
  if (ConfigurationHandler.enabled(""String_Node_Str"")) {
    ItemStack stack=new ItemStack(BCItems.REFINERY);
    ArrayList recipeList=(ArrayList)CraftingManager.getInstance().getRecipeList();
    for (int t=0; t < recipeList.size(); t++) {
      IRecipe recipe=(IRecipe)recipeList.get(t);
      ItemStack recipeResult=recipe.getRecipeOutput();
      if (ItemStack.areItemStacksEqual(stack,recipeResult)) {
        recipeList.remove(t);
        break;
      }
    }
  }
}",0.994956133647174
34871,"public static void readConfig(){
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  if (configFile.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean())   VersionCheck.start();
  shouldPrintChangelog=configFile.get(""String_Node_Str"",""String_Node_Str"",false).getBoolean();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  powerDifficultyModifiers[0]=configFile.get(""String_Node_Str"",""String_Node_Str"",1).setMinValue(0).getInt();
  powerDifficultyModifiers[1]=configFile.get(""String_Node_Str"",""String_Node_Str"",2).setMinValue(0).getInt();
  powerDifficultyModifiers[2]=configFile.get(""String_Node_Str"",""String_Node_Str"",3).setMinValue(0).getInt();
  powerDifficultyModifiers[3]=configFile.get(""String_Node_Str"",""String_Node_Str"",4).setMinValue(0).getInt();
  basePowerModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",10).setMinValue(0).getInt();
  entityHitModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",10).setMinValue(0).getInt();
  entityDamage=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",7D).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  hoeCost=configFile.get(""String_Node_Str"",""String_Node_Str"",5).setMinValue(0).getInt();
  toolEfficiencyPickaxe=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",40D).setMinValue(1.1).setMaxValue(Float.MAX_VALUE).getDouble();
  toolEfficiencyShovel=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",10D).setMinValue(1.1).setMaxValue(Float.MAX_VALUE).getDouble();
  toolEfficiencyAxe=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",30D).setMinValue(1.1).setMaxValue(Float.MAX_VALUE).getDouble();
  toolHarvestLevel=configFile.get(""String_Node_Str"",""String_Node_Str"",Integer.MAX_VALUE).setMinValue(0).getInt();
  toolEfficiencyAreaMultiplier=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",0.25).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",false).getBoolean();
  KEB1powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",10).setMinValue(0).getInt();
  KEB2powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",5).setMinValue(0).getInt();
  KEB3powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",3).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  heatedFurnaceHeatRequired=configFile.get(""String_Node_Str"",""String_Node_Str"",6500,""String_Node_Str"").setMinValue(0).getInt();
  basicCoilHeat=configFile.get(""String_Node_Str"",""String_Node_Str"",16,""String_Node_Str"").setMinValue(0).getInt();
  lavaCoilHeat=configFile.get(""String_Node_Str"",""String_Node_Str"",32,""String_Node_Str"").setMinValue(0).getInt();
  kineticCoilHeatModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",15,""String_Node_Str"").setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  portableLaserPowerUse=configFile.get(""String_Node_Str"",""String_Node_Str"",40).setMinValue(0).getInt();
  portableLaserLaserPower=configFile.get(""String_Node_Str"",""String_Node_Str"",40).setMinValue(0).getInt();
  portableLaserEntityDamage=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",4D).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  portableLaserEntityBurnTime=configFile.get(""String_Node_Str"",""String_Node_Str"",4).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  shouldRegisterDusts=configFile.get(""String_Node_Str"",""String_Node_Str"",true).setRequiresMcRestart(true).getBoolean();
  eurekaIntegration=configFile.get(""String_Node_Str"",""String_Node_Str"",true).setRequiresMcRestart(true).getBoolean();
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  if (configFile.hasChanged())   configFile.save();
}","public static void readConfig(){
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  if (configFile.get(""String_Node_Str"",""String_Node_Str"",true).getBoolean())   VersionCheck.start();
  shouldPrintChangelog=configFile.get(""String_Node_Str"",""String_Node_Str"",false).getBoolean();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  powerDifficultyModifiers[0]=configFile.get(""String_Node_Str"",""String_Node_Str"",1).setMinValue(0).getInt();
  powerDifficultyModifiers[1]=configFile.get(""String_Node_Str"",""String_Node_Str"",2).setMinValue(0).getInt();
  powerDifficultyModifiers[2]=configFile.get(""String_Node_Str"",""String_Node_Str"",3).setMinValue(0).getInt();
  powerDifficultyModifiers[3]=configFile.get(""String_Node_Str"",""String_Node_Str"",4).setMinValue(0).getInt();
  basePowerModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",10).setMinValue(0).getInt();
  entityHitModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",10).setMinValue(0).getInt();
  entityDamage=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",7D).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  hoeCost=configFile.get(""String_Node_Str"",""String_Node_Str"",5).setMinValue(0).getInt();
  toolEfficiencyPickaxe=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",40D).setMinValue(1.1).setMaxValue(Float.MAX_VALUE).getDouble();
  toolEfficiencyShovel=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",10D).setMinValue(1.1).setMaxValue(Float.MAX_VALUE).getDouble();
  toolEfficiencyAxe=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",30D).setMinValue(1.1).setMaxValue(Float.MAX_VALUE).getDouble();
  toolHarvestLevel=configFile.get(""String_Node_Str"",""String_Node_Str"",Integer.MAX_VALUE).setMinValue(0).getInt();
  toolEfficiencyAreaMultiplier=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",0.25).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",false).getBoolean();
  KEB1powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",10).setMinValue(0).getInt();
  KEB2powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",5).setMinValue(0).getInt();
  KEB3powerloss=configFile.get(""String_Node_Str"",""String_Node_Str"",3).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  heatedFurnaceHeatRequired=configFile.get(""String_Node_Str"",""String_Node_Str"",6500,""String_Node_Str"").setMinValue(0).getInt();
  basicCoilHeat=configFile.get(""String_Node_Str"",""String_Node_Str"",16,""String_Node_Str"").setMinValue(0).getInt();
  lavaCoilHeat=configFile.get(""String_Node_Str"",""String_Node_Str"",32,""String_Node_Str"").setMinValue(0).getInt();
  kineticCoilHeatModifier=configFile.get(""String_Node_Str"",""String_Node_Str"",15,""String_Node_Str"").setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  portableLaserPowerUse=configFile.get(""String_Node_Str"",""String_Node_Str"",40).setMinValue(0).getInt();
  portableLaserLaserPower=configFile.get(""String_Node_Str"",""String_Node_Str"",40).setMinValue(0).getInt();
  portableLaserEntityDamage=(float)configFile.get(""String_Node_Str"",""String_Node_Str"",4D).setMinValue(0).setMaxValue(Float.MAX_VALUE).getDouble();
  portableLaserEntityBurnTime=configFile.get(""String_Node_Str"",""String_Node_Str"",4).setMinValue(0).getInt();
  configFile.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  shouldRegisterDusts=configFile.get(""String_Node_Str"",""String_Node_Str"",true).setRequiresMcRestart(true).getBoolean();
  eurekaIntegration=configFile.get(""String_Node_Str"",""String_Node_Str"",true).setRequiresMcRestart(true).getBoolean();
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  registerFeature(""String_Node_Str"");
  if (configFile.hasChanged())   configFile.save();
}",0.9914740857078752
34872,"@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  IInventory inventory=(IInventory)world.getTileEntity(x,y,z);
  if (inventory != null) {
    inventory.openInventory();
    for (int t=0; t < inventory.getSizeInventory(); t++) {
      ItemStack stack=inventory.getStackInSlot(t);
      if (stack != null) {
        inventory.setInventorySlotContents(t,null);
        Utils.dropItemstack(world,x,y,z,stack);
      }
    }
    inventory.closeInventory();
  }
  super.breakBlock(world,x,y,z,block,meta);
}","@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  TileEntity tile=world.getTileEntity(x,y,z);
  if (tile != null && tile instanceof IInventory) {
    IInventory inventory=(IInventory)tile;
    for (int i=0; i < inventory.getSizeInventory(); i++) {
      ItemStack stack=inventory.getStackInSlot(i);
      if (stack != null) {
        inventory.setInventorySlotContents(i,null);
        Utils.dropItemstack(world,x,y,z,stack);
      }
    }
  }
  super.breakBlock(world,x,y,z,block,meta);
}",0.8180112570356473
34873,"private static void railcraftIntegration(){
  addNuggets(""String_Node_Str"");
  addNuggets(""String_Node_Str"");
  addNuggets(""String_Node_Str"");
  addNuggets(""String_Node_Str"");
}","private static void railcraftIntegration(){
  addNuggets(""String_Node_Str"");
  addNuggets(""String_Node_Str"");
  addNuggets(""String_Node_Str"");
  addNuggets(""String_Node_Str"");
  addNuggets(""String_Node_Str"");
}",0.9147286821705426
34874,"@Override public void onFallenUpon(World world,int x,int y,int z,Entity entity,float hit){
  if (entity instanceof EntityPlayer) {
    TileEntity tileEntity=world.getTileEntity(x,y,z);
    if (tileEntity instanceof TileBasicDuster)     ((TileBasicDuster)tileEntity).makeProgress((EntityPlayer)entity);
  }
}","@Override public void onFallenUpon(World world,int x,int y,int z,Entity entity,float fallDistance){
  if (entity instanceof EntityPlayer) {
    TileEntity tileEntity=world.getTileEntity(x,y,z);
    if (tileEntity instanceof TileBasicDuster)     ((TileBasicDuster)tileEntity).makeProgress((EntityPlayer)entity);
  }
}",0.9759229534510432
34875,"@Override public TileEntity createNewTileEntity(World p_149915_1_,int p_149915_2_){
  return new TileKineticCoil();
}","@Override public TileEntity createNewTileEntity(World world,int meta){
  return new TileKineticCoil();
}",0.8597285067873304
34876,"@Override public TileEntity createNewTileEntity(World world,int getal){
  return new TileKineticDuster();
}","@Override public TileEntity createNewTileEntity(World world,int meta){
  return new TileKineticDuster();
}",0.9859154929577464
34877,"@Override @SideOnly(Side.CLIENT) public void registerBlockIcons(IIconRegister register){
  sides=new IIcon[4];
  sides[0]=RenderUtils.registerIcon(register,""String_Node_Str"");
  sides[1]=RenderUtils.registerIcon(register,""String_Node_Str"");
  sides[2]=RenderUtils.registerIcon(register,""String_Node_Str"");
  sides[3]=RenderUtils.registerIcon(register,""String_Node_Str"");
  bottom=RenderUtils.registerIcon(register,""String_Node_Str"");
  top=RenderUtils.registerIcon(register,""String_Node_Str"");
}","@Override @SideOnly(Side.CLIENT) public void registerBlockIcons(IIconRegister register){
  sides=new IIcon[4];
  sides[0]=RenderUtils.registerIcon(register,""String_Node_Str"" + type + ""String_Node_Str"");
  sides[1]=RenderUtils.registerIcon(register,""String_Node_Str"" + type + ""String_Node_Str"");
  sides[2]=RenderUtils.registerIcon(register,""String_Node_Str"" + type + ""String_Node_Str"");
  sides[3]=RenderUtils.registerIcon(register,""String_Node_Str"" + type + ""String_Node_Str"");
  bottom=RenderUtils.registerIcon(register,""String_Node_Str"" + type + ""String_Node_Str"");
  top=RenderUtils.registerIcon(register,""String_Node_Str"" + type + ""String_Node_Str"");
}",0.859375
34878,"@Override @SideOnly(Side.CLIENT) public void registerBlockIcons(IIconRegister register){
  front=RenderUtils.registerIcon(register,""String_Node_Str"");
  sides=RenderUtils.registerIcon(register,""String_Node_Str"");
  bottom=RenderUtils.registerIcon(register,""String_Node_Str"");
  top=new IIcon[4];
  top[0]=RenderUtils.registerIcon(register,""String_Node_Str"");
  top[1]=RenderUtils.registerIcon(register,""String_Node_Str"");
  top[2]=RenderUtils.registerIcon(register,""String_Node_Str"");
  top[3]=RenderUtils.registerIcon(register,""String_Node_Str"");
}","@Override @SideOnly(Side.CLIENT) public void registerBlockIcons(IIconRegister register){
  front=RenderUtils.registerIcon(register,""String_Node_Str"" + type + ""String_Node_Str"");
  sides=RenderUtils.registerIcon(register,""String_Node_Str"" + type + ""String_Node_Str"");
  bottom=RenderUtils.registerIcon(register,""String_Node_Str"" + type + ""String_Node_Str"");
  top=new IIcon[4];
  top[0]=RenderUtils.registerIcon(register,""String_Node_Str"" + type + ""String_Node_Str"");
  top[1]=RenderUtils.registerIcon(register,""String_Node_Str"" + type + ""String_Node_Str"");
  top[2]=RenderUtils.registerIcon(register,""String_Node_Str"" + type + ""String_Node_Str"");
  top[3]=RenderUtils.registerIcon(register,""String_Node_Str"" + type + ""String_Node_Str"");
}",0.8531468531468531
34879,"@Mod.EventHandler public void remap(FMLMissingMappingsEvent event){
  for (  FMLMissingMappingsEvent.MissingMapping mapping : event.get()) {
    if (mapping.name.toLowerCase().contains(""String_Node_Str"")) {
      if (mapping.type == GameRegistry.Type.ITEM)       mapping.remap(Item.getItemFromBlock(FluidRegistry.getFluid(""String_Node_Str"").getBlock()));
      if (mapping.type == GameRegistry.Type.BLOCK)       mapping.remap(FluidRegistry.getFluid(""String_Node_Str"").getBlock());
      continue;
    }
 else     if (mapping.name.toLowerCase().contains(""String_Node_Str"") && Loader.isModLoaded(""String_Node_Str"")) {
      if (mapping.type == GameRegistry.Type.ITEM)       mapping.remap(Item.getItemFromBlock(FluidRegistry.getFluid(""String_Node_Str"").getBlock()));
 else       if (mapping.type == GameRegistry.Type.BLOCK)       mapping.remap(FluidRegistry.getFluid(""String_Node_Str"").getBlock());
      continue;
    }
    for (    IDust dust : BCAItemManager.dusts.getDusts()) {
      if (dust == null)       continue;
      String name=dust.getName().toLowerCase();
      if (mapping.name.toLowerCase().contains(name)) {
        mapping.remap(GameRegistry.findItem(Variables.MOD.ID,""String_Node_Str"" + name));
      }
    }
  }
}","@Mod.EventHandler public void remap(FMLMissingMappingsEvent event){
  for (  FMLMissingMappingsEvent.MissingMapping mapping : event.get()) {
    if (mapping.name.toLowerCase().contains(""String_Node_Str"")) {
      if (mapping.type == GameRegistry.Type.ITEM)       mapping.remap(Item.getItemFromBlock(FluidRegistry.getFluid(""String_Node_Str"").getBlock()));
      if (mapping.type == GameRegistry.Type.BLOCK)       mapping.remap(FluidRegistry.getFluid(""String_Node_Str"").getBlock());
      continue;
    }
 else     if (mapping.name.toLowerCase().contains(""String_Node_Str"") && Loader.isModLoaded(""String_Node_Str"")) {
      if (mapping.type == GameRegistry.Type.ITEM)       mapping.remap(Item.getItemFromBlock(FluidRegistry.getFluid(""String_Node_Str"").getBlock()));
 else       if (mapping.type == GameRegistry.Type.BLOCK)       mapping.remap(FluidRegistry.getFluid(""String_Node_Str"").getBlock());
      continue;
    }
    if (!ConfigurationHandler.shouldRegisterDusts)     return;
    for (    IDust dust : BCAItemManager.dusts.getDusts()) {
      if (dust == null)       continue;
      String name=dust.getName().toLowerCase();
      if (mapping.name.toLowerCase().contains(name)) {
        mapping.remap(GameRegistry.findItem(Variables.MOD.ID,""String_Node_Str"" + name));
        continue;
      }
    }
  }
}",0.9681227863046044
34880,"@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase entity,ItemStack stack){
  if (stack.stackTagCompound != null) {
    stack.stackTagCompound.setInteger(""String_Node_Str"",x);
    stack.stackTagCompound.setInteger(""String_Node_Str"",y);
    stack.stackTagCompound.setInteger(""String_Node_Str"",z);
    world.getTileEntity(x,y,z).readFromNBT(stack.stackTagCompound);
  }
  if (entity instanceof EntityPlayer) {
    TileEntity tileEntity=world.getTileEntity(x,y,z);
    if (tileEntity instanceof TileKineticEnergyBufferBase)     ((TileKineticEnergyBufferBase)tileEntity).setOwner(((EntityPlayer)entity).getDisplayName());
  }
}","@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase entity,ItemStack stack){
  TileEntity tile=world.getTileEntity(x,y,z);
  if (tile == null || !(tile instanceof TileKineticEnergyBufferBase))   return;
  if (stack.stackTagCompound != null) {
    NBTBase nbtBase=stack.stackTagCompound.copy();
    if (nbtBase instanceof NBTTagCompound) {
      NBTTagCompound tag=(NBTTagCompound)nbtBase;
      tag.setInteger(""String_Node_Str"",x);
      tag.setInteger(""String_Node_Str"",y);
      tag.setInteger(""String_Node_Str"",z);
      tile.readFromNBT(tag);
    }
  }
  if (entity instanceof EntityPlayer)   ((TileKineticEnergyBufferBase)tile).setOwner(((EntityPlayer)entity).getDisplayName());
}",0.512
34881,"@Override public ItemStack slotClick(int slotNum,int mouseButton,int modifier,EntityPlayer player){
  if (slotNum < 0 || slotNum >= inventorySlots.size())   return super.slotClick(slotNum,mouseButton,modifier,player);
  Slot slot=(Slot)inventorySlots.get(slotNum);
  if (slot instanceof SlotPhantom)   return ((SlotPhantom)slot).onClick(mouseButton,player);
  return super.slotClick(slotNum,mouseButton,modifier,player);
}","@Override public ItemStack slotClick(int slotNum,int mouseButton,int modifier,EntityPlayer player){
  if (slotNum < 0 || slotNum >= inventorySlots.size())   return null;
  Slot slot=(Slot)inventorySlots.get(slotNum);
  if (slot instanceof SlotPhantom)   return ((SlotPhantom)slot).onClick(mouseButton,player);
  return super.slotClick(slotNum,mouseButton,modifier,player);
}",0.9296482412060302
34882,"private boolean shiftItemStack(ItemStack stackToShift,int start,int end){
  boolean changed=false;
  if (stackToShift.isStackable()) {
    for (int slotIndex=start; stackToShift.stackSize > 0 && slotIndex < end; slotIndex++) {
      Slot slot=(Slot)inventorySlots.get(slotIndex);
      ItemStack stackInSlot=slot.getStack();
      if (stackInSlot != null && canStacksMerge(stackInSlot,stackToShift)) {
        int resultingStackSize=stackInSlot.stackSize + stackToShift.stackSize;
        int max=Math.min(stackToShift.getMaxStackSize(),slot.getSlotStackLimit());
        if (resultingStackSize <= max) {
          stackToShift.stackSize=0;
          stackInSlot.stackSize=resultingStackSize;
          slot.onSlotChanged();
          changed=true;
        }
 else         if (stackInSlot.stackSize < max) {
          stackToShift.stackSize-=max - stackInSlot.stackSize;
          stackInSlot.stackSize=max;
          slot.onSlotChanged();
          changed=true;
        }
      }
    }
  }
  if (stackToShift.stackSize > 0) {
    for (int slotIndex=start; stackToShift.stackSize > 0 && slotIndex < end; slotIndex++) {
      Slot slot=(Slot)inventorySlots.get(slotIndex);
      ItemStack stackInSlot=slot.getStack();
      if (stackInSlot == null) {
        int max=Math.min(stackToShift.getMaxStackSize(),slot.getSlotStackLimit());
        stackInSlot=stackToShift.copy();
        stackInSlot.stackSize=Math.min(stackToShift.stackSize,max);
        stackToShift.stackSize-=stackInSlot.stackSize;
        slot.putStack(stackInSlot);
        slot.onSlotChanged();
        changed=true;
      }
    }
  }
  return changed;
}","private boolean shiftItemStack(ItemStack stackToShift,int start,int end){
  if (!canShift)   return false;
  boolean changed=false;
  if (stackToShift.isStackable()) {
    for (int slotIndex=start; stackToShift.stackSize > 0 && slotIndex < end; slotIndex++) {
      Slot slot=(Slot)inventorySlots.get(slotIndex);
      ItemStack stackInSlot=slot.getStack();
      if (stackInSlot != null && canStacksMerge(stackInSlot,stackToShift)) {
        int resultingStackSize=stackInSlot.stackSize + stackToShift.stackSize;
        int max=Math.min(stackToShift.getMaxStackSize(),slot.getSlotStackLimit());
        if (resultingStackSize <= max) {
          stackToShift.stackSize=0;
          stackInSlot.stackSize=resultingStackSize;
          slot.onSlotChanged();
          changed=true;
        }
 else         if (stackInSlot.stackSize < max) {
          stackToShift.stackSize-=max - stackInSlot.stackSize;
          stackInSlot.stackSize=max;
          slot.onSlotChanged();
          changed=true;
        }
      }
    }
  }
  if (stackToShift.stackSize > 0) {
    for (int slotIndex=start; stackToShift.stackSize > 0 && slotIndex < end; slotIndex++) {
      Slot slot=(Slot)inventorySlots.get(slotIndex);
      ItemStack stackInSlot=slot.getStack();
      if (stackInSlot == null) {
        int max=Math.min(stackToShift.getMaxStackSize(),slot.getSlotStackLimit());
        stackInSlot=stackToShift.copy();
        stackInSlot.stackSize=Math.min(stackToShift.stackSize,max);
        stackToShift.stackSize-=stackInSlot.stackSize;
        slot.putStack(stackInSlot);
        slot.onSlotChanged();
        changed=true;
      }
    }
  }
  return changed;
}",0.989935956084172
34883,"public ContainerItemSorter(InventoryPlayer inventoryPlayer,TileItemSorter tile){
  super(inventoryPlayer,tile);
  for (int i=0; i < 8; i++)   addSorterSlotColumn(26 + i * 18,18,1 + i * 6);
  addPlayerInventory(8,160);
}","public ContainerItemSorter(InventoryPlayer inventoryPlayer,TileItemSorter tile){
  super(inventoryPlayer,tile);
  for (int i=0; i < 8; i++)   addSorterSlotColumn(26 + i * 18,18,1 + i * 6);
  addPlayerInventory(8,160);
  setCanShift(false);
}",0.9521739130434784
34884,"@Mod.EventHandler public void remap(FMLMissingMappingsEvent event){
  for (  FMLMissingMappingsEvent.MissingMapping mapping : event.get()) {
    if (mapping.name.toLowerCase().contains(""String_Node_Str"")) {
      if (mapping.type == GameRegistry.Type.ITEM)       mapping.remap(Item.getItemFromBlock(FluidRegistry.getFluid(""String_Node_Str"").getBlock()));
      if (mapping.type == GameRegistry.Type.BLOCK)       mapping.remap(FluidRegistry.getFluid(""String_Node_Str"").getBlock());
      continue;
    }
 else     if (mapping.name.toLowerCase().contains(""String_Node_Str"")) {
      if (mapping.type == GameRegistry.Type.ITEM)       mapping.remap(Item.getItemFromBlock(FluidRegistry.getFluid(""String_Node_Str"").getBlock()));
      if (mapping.type == GameRegistry.Type.BLOCK)       mapping.remap(FluidRegistry.getFluid(""String_Node_Str"").getBlock());
      continue;
    }
    for (    IDust dust : BCAItemManager.dusts.getDusts()) {
      if (dust == null)       continue;
      String name=dust.getName().toLowerCase();
      if (mapping.name.toLowerCase().contains(name)) {
        mapping.remap(GameRegistry.findItem(Variables.MOD.ID,""String_Node_Str"" + name));
      }
    }
  }
}","@Mod.EventHandler public void remap(FMLMissingMappingsEvent event){
  for (  FMLMissingMappingsEvent.MissingMapping mapping : event.get()) {
    if (mapping.name.toLowerCase().contains(""String_Node_Str"")) {
      if (mapping.type == GameRegistry.Type.ITEM)       mapping.remap(Item.getItemFromBlock(FluidRegistry.getFluid(""String_Node_Str"").getBlock()));
      if (mapping.type == GameRegistry.Type.BLOCK)       mapping.remap(FluidRegistry.getFluid(""String_Node_Str"").getBlock());
      continue;
    }
 else     if (mapping.name.toLowerCase().contains(""String_Node_Str"") && Loader.isModLoaded(""String_Node_Str"")) {
      if (mapping.type == GameRegistry.Type.ITEM)       mapping.remap(Item.getItemFromBlock(FluidRegistry.getFluid(""String_Node_Str"").getBlock()));
 else       if (mapping.type == GameRegistry.Type.BLOCK)       mapping.remap(FluidRegistry.getFluid(""String_Node_Str"").getBlock());
      continue;
    }
    for (    IDust dust : BCAItemManager.dusts.getDusts()) {
      if (dust == null)       continue;
      String name=dust.getName().toLowerCase();
      if (mapping.name.toLowerCase().contains(name)) {
        mapping.remap(GameRegistry.findItem(Variables.MOD.ID,""String_Node_Str"" + name));
      }
    }
  }
}",0.9805221715706588
34885,"@Override public IIcon getIconFromDamage(int damage){
  return icons[damage];
}","@SideOnly(Side.CLIENT) @Override public IIcon getIconFromDamage(int damage){
  return icons[damage];
}",0.8729281767955801
34886,"@Override public void registerIcons(IIconRegister register){
  for (int i=0; i < icons.length; i++) {
    icons[i]=RenderUtils.registerIcon(register,EnumMachineUpgrades.values()[i].getTextureName());
  }
}","@SideOnly(Side.CLIENT) @Override public void registerIcons(IIconRegister register){
  icons=new IIcon[EnumMachineUpgrades.values().length];
  for (int i=0; i < icons.length; i++) {
    icons[i]=RenderUtils.registerIcon(register,EnumMachineUpgrades.values()[i].getTextureName());
  }
}",0.8384458077709611
34887,"@Mod.EventHandler public void load(FMLInitializationEvent event){
  proxy.registerRenderers();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new GuiHandler());
  FMLCommonHandler.instance().bus().register(new EventListener.FML());
  MinecraftForge.EVENT_BUS.register(new EventListener.Forge());
  BucketHandler.register();
  IMCSender.sendMessages();
  ItemsAndBlocks.registerTileEntities();
  int meta=1;
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xD2CEC9,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF8DF17,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x13ECFC,DustTypes.GEM_DUST);
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.redstone,6));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.coal,2));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.dye,6,4));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.quartz,2));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Blocks.gravel));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Blocks.sand));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.diamond,2));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.emerald,2));
  BCARecipeManager.duster.addRecipe(new ItemStack(Items.blaze_rod),new ItemStack(Items.blaze_powder,4));
  for (  IDust dust : BCAItemManager.dusts.getDusts()) {
    if (dust != null) {
      dust.getDustType().register(dust.getMeta(),dust.getName(),dust.getDustStack());
    }
  }
}","@Mod.EventHandler public void load(FMLInitializationEvent event){
  proxy.registerRenderers();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new GuiHandler());
  FMLCommonHandler.instance().bus().register(new EventListener.FML());
  MinecraftForge.EVENT_BUS.register(new EventListener.Forge());
  BucketHandler.register();
  IMCSender.sendMessages();
  ItemsAndBlocks.registerTileEntities();
  int meta=1;
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xD2CEC9,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0xF8DF17,DustTypes.METAL_DUST);
  BCAItemManager.dusts.addDust(meta++,""String_Node_Str"",0x13ECFC,DustTypes.GEM_DUST);
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.redstone,6));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.coal,2));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.dye,6,4));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.quartz,2));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Blocks.gravel));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Blocks.sand));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.diamond,2));
  BCARecipeManager.duster.addRecipe(""String_Node_Str"",new ItemStack(Items.emerald,2));
  BCARecipeManager.duster.addRecipe(new ItemStack(Items.blaze_rod),new ItemStack(Items.blaze_powder,4));
  ModIntegration.integrateBCBuilders();
}",0.9324452901998096
34888,"@Mod.EventHandler public void postInit(FMLPostInitializationEvent event){
  ModIntegration.integrate();
}","@Mod.EventHandler public void postInit(FMLPostInitializationEvent event){
}",0.8333333333333334
34889,"@Mod.EventHandler public void doneLoading(FMLLoadCompleteEvent event){
  IMCHandler.handleIMC(FMLInterModComms.fetchRuntimeMessages(this));
}","@Mod.EventHandler public void doneLoading(FMLLoadCompleteEvent event){
  ModIntegration.integrate();
  IMCHandler.handleIMC(FMLInterModComms.fetchRuntimeMessages(this));
  for (  IDust dust : BCAItemManager.dusts.getDusts())   if (dust != null)   dust.getDustType().register(dust.getMeta(),dust.getName(),dust.getDustStack());
}",0.6012793176972282
34890,"public static void integrate(){
  Triggers.register();
  addBCRecipes();
  RefineryRecipeConverter.doYourThing();
  BuildcraftAdditions.proxy.addPowerplant();
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.kebT1,SchematicBCABase.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.kineticCoil,SchematicBCABase.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.kineticDusterBlock,SchematicBCABase.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.lavaCoilBlock,SchematicBCABase.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.basicCoilBlock,SchematicBCABase.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.basicDusterBlock,SchematicRotatableBCABlock.class,new int[]{2,5,3,4},true);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.heatedFurnaceBlock,SchematicRotatableBCABlock.class,new int[]{2,5,3,4},true);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.chargingStationBlock,SchematicRotatableBCABlock.class,new int[]{2,5,3,4},true);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.fluidicCompressorBlock,SchematicRotatableBCABlock.class,new int[]{2,5,3,4},true);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.mechanicalDusterBlock,SchematicRotatableBCABlock.class,new int[]{2,5,3,4},true);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.semiAutomaticDusterBlock,SchematicRotatableBCABlock.class,new int[]{2,5,3,4},true);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.refineryWalls,SchematicMulitblock.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.refineryValve,SchematicMulitblock.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.coolingTowerWalls,SchematicMulitblock.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.coolingTowerValve,SchematicMulitblock.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.kebT2,SchematicMulitblock.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.kebT3Core,SchematicMulitblock.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.kebT3Plating,SchematicMulitblock.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(ItemsAndBlocks.itemSorter,SchematicSorter.class);
}","public static void integrate(){
  Triggers.register();
  addBCRecipes();
  RefineryRecipeConverter.doYourThing();
  BuildcraftAdditions.proxy.addPowerplant();
}",0.1218119527978682
34891,"@Override public List<String> getWailaBody(ItemStack itemStack,List<String> currenttip,IWailaDataAccessor accessor,IWailaConfigHandler config){
  TileRefinery refinery=(TileRefinery)accessor.getTileEntity();
  if (!refinery.isPartOfMultiblock()) {
    currenttip.add(""String_Node_Str"");
  }
 else {
    if (refinery.master == null && (!refinery.isMaster())) {
      refinery.findMaster();
      if (refinery.master == null)       return currenttip;
    }
    TileRefinery master=refinery;
    if (!refinery.isMaster())     master=refinery.master;
    currenttip.add(""String_Node_Str"" + master.currentHeat);
    if (!master.getOutput().equals(""String_Node_Str"")) {
      currenttip.add(""String_Node_Str"" + master.requiredHeat);
      currenttip.add(""String_Node_Str"" + master.getInput() + ""String_Node_Str""+ master.getOutput());
    }
  }
  return currenttip;
}","@Override public List<String> getWailaBody(ItemStack itemStack,List<String> currenttip,IWailaDataAccessor accessor,IWailaConfigHandler config){
  TileRefinery refinery=(TileRefinery)accessor.getTileEntity();
  if (!refinery.isPartOfMultiblock()) {
    currenttip.add(Utils.localize(""String_Node_Str""));
  }
 else {
    if (refinery.master == null && (!refinery.isMaster())) {
      refinery.findMaster();
      if (refinery.master == null)       return currenttip;
    }
    TileRefinery master=refinery;
    if (!refinery.isMaster())     master=refinery.master;
    currenttip.add(Utils.localizeFormatted(""String_Node_Str"",master.currentHeat));
    if (!master.getOutput().equals(""String_Node_Str"")) {
      currenttip.add(Utils.localizeFormatted(""String_Node_Str"",master.requiredHeat));
      currenttip.add(Utils.localizeFormatted(""String_Node_Str"",master.getInput(),master.getOutput()));
    }
  }
  return currenttip;
}",0.929372197309417
34892,"@Override public List<String> getWailaBody(ItemStack itemStack,List<String> currenttip,IWailaDataAccessor accessor,IWailaConfigHandler config){
  String upgrades=""String_Node_Str"";
  IUpgradableMachine machine=(IUpgradableMachine)accessor.getTileEntity();
  if (!machine.getInstalledUpgrades().isEmpty()) {
    currenttip.add(""String_Node_Str"");
    for (    EnumMachineUpgrades upgrade : machine.getInstalledUpgrades())     upgrades+=SpecialChars.getRenderString(""String_Node_Str"",String.valueOf(upgrade.ordinal()));
  }
  currenttip.add(upgrades);
  return currenttip;
}","@Override public List<String> getWailaBody(ItemStack itemStack,List<String> currenttip,IWailaDataAccessor accessor,IWailaConfigHandler config){
  String upgrades=""String_Node_Str"";
  IUpgradableMachine machine=(IUpgradableMachine)accessor.getTileEntity();
  if (!machine.getInstalledUpgrades().isEmpty()) {
    currenttip.add(Utils.localize(""String_Node_Str""));
    for (    EnumMachineUpgrades upgrade : machine.getInstalledUpgrades())     upgrades+=SpecialChars.getRenderString(""String_Node_Str"",String.valueOf(upgrade.ordinal()));
  }
  currenttip.add(upgrades);
  return currenttip;
}",0.986206896551724
34893,"@SuppressWarnings(""String_Node_Str"") @Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean visible){
  list.add(Integer.toString(getEnergyStored(stack)) + ""String_Node_Str"" + Integer.toString(maxEnergy)+ ""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") @Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean visible){
  list.add(Utils.localizeFormatted(""String_Node_Str"",getEnergyStored(stack),maxEnergy));
}",0.7798507462686567
34894,"@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean visible){
  readBateries(stack);
  readUpgrades(stack);
  list.add(Integer.toString(getEnergy()) + ""String_Node_Str"" + Integer.toString(getCapacity())+ ""String_Node_Str"");
  if (Keyboard.isKeyDown(Minecraft.getMinecraft().gameSettings.keyBindSneak.getKeyCode())) {
    if (chainsaw)     list.add(String.format(Utils.localize(""String_Node_Str""),Utils.localize(""String_Node_Str"")));
    if (digger)     list.add(String.format(Utils.localize(""String_Node_Str""),Utils.localize(""String_Node_Str"")));
    if (drill)     list.add(String.format(Utils.localize(""String_Node_Str""),Utils.localize(""String_Node_Str"")));
    if (hoe)     list.add(String.format(Utils.localize(""String_Node_Str""),Utils.localize(""String_Node_Str"")));
    if (!(chainsaw && digger && drill&& hoe))     list.add(Utils.localize(""String_Node_Str"") + ""String_Node_Str"" + upgradesAllowed);
  }
 else   list.add(""String_Node_Str"" + Utils.localize(""String_Node_Str"") + ""String_Node_Str"");
}","@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean visible){
  readBateries(stack);
  readUpgrades(stack);
  list.add(Utils.localizeFormatted(""String_Node_Str"",getEnergy(),getCapacity()));
  if (Keyboard.isKeyDown(Minecraft.getMinecraft().gameSettings.keyBindSneak.getKeyCode())) {
    if (chainsaw)     list.add(String.format(Utils.localize(""String_Node_Str""),Utils.localize(""String_Node_Str"")));
    if (digger)     list.add(String.format(Utils.localize(""String_Node_Str""),Utils.localize(""String_Node_Str"")));
    if (drill)     list.add(String.format(Utils.localize(""String_Node_Str""),Utils.localize(""String_Node_Str"")));
    if (hoe)     list.add(String.format(Utils.localize(""String_Node_Str""),Utils.localize(""String_Node_Str"")));
    if (!(chainsaw && digger && drill&& hoe))     list.add(Utils.localize(""String_Node_Str"") + ""String_Node_Str"" + upgradesAllowed);
  }
 else   list.add(""String_Node_Str"" + Utils.localize(""String_Node_Str"") + ""String_Node_Str"");
}",0.9426934097421203
34895,"@Override public FluidStack drain(ForgeDirection from,int maxDrain,boolean doDrain){
  if (!valve)   return null;
  if (master == null)   findMaster();
  if (master != null)   return master.realDrain(maxDrain,doDrain);
  return null;
}","@Override public FluidStack drain(ForgeDirection from,int maxDrain,boolean doDrain){
  if (isMaster())   return realDrain(maxDrain,doDrain);
  if (!valve)   return null;
  if (master == null)   findMaster();
  if (master != null)   return master.realDrain(maxDrain,doDrain);
  return null;
}",0.8935361216730038
34896,"public void updateEntity(){
  super.updateEntity();
  if (worldObj.isRemote)   return;
  if (data.moved) {
    data.afterMoveCheck(worldObj);
    worldObj.scheduleBlockUpdate(xCoord,yCoord,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord),80);
  }
  sync();
  if (valve && upgrades.getUpgrades().contains(EnumMachineUpgrades.AUTO_OUTPUT)) {
    if (master == null)     findMaster();
    if (master == null)     return;
    for (    ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
      Location location=new Location(this).move(direction);
      TileEntity entity=location.getTileEntity();
      if (entity != null && entity instanceof IFluidHandler && !(entity instanceof TileRefinery)) {
        IFluidHandler tank=(IFluidHandler)entity;
        master.drain(direction,tank.fill(direction.getOpposite(),new FluidStack(master.output.getFluidType(),100),true),true);
      }
    }
  }
  if (!data.isMaster)   return;
  if (input.getFluid() != null && input.getFluid().amount <= 0)   input.setFluid(null);
  if (output.getFluid() != null && output.getFluid().amount <= 0)   output.setFluid(null);
  if (input.getFluid() == null)   updateRecipe();
  updateHeat();
  energyCost=(input.getFluid() == null || isCooling || energy < (int)(50 + (50 * ((double)currentHeat / 100)))) ? 0 : (int)(50 + (50 * ((double)currentHeat / 100)));
  energy-=energyCost;
  if (currentHeat < requiredHeat) {
    return;
  }
  if (energyCost == 0 || input.isEmpty() || output.isFull() || !input.getFluid().isFluidEqual(inputFluidStack) || input.getFluidAmount() < inputFluidStack.amount || (!output.isEmpty() && !output.getFluid().isFluidEqual(outputFluidStack)) || output.getCapacity() - output.getFluidAmount() < outputFluidStack.amount)   return;
  input.drain(inputFluidStack.amount,true);
  output.fill(outputFluidStack,true);
}","public void updateEntity(){
  super.updateEntity();
  if (worldObj.isRemote)   return;
  if (data.moved) {
    data.afterMoveCheck(worldObj);
    worldObj.scheduleBlockUpdate(xCoord,yCoord,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord),80);
  }
  sync();
  if (valve && upgrades.getUpgrades().contains(EnumMachineUpgrades.AUTO_OUTPUT)) {
    if (master == null)     findMaster();
    if (master == null)     return;
    for (    ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
      Location location=new Location(this).move(direction);
      TileEntity entity=location.getTileEntity();
      if (entity != null && entity instanceof IFluidHandler && !(entity instanceof TileRefinery) && master.output.getFluidType() != null) {
        IFluidHandler tank=(IFluidHandler)entity;
        int drain=tank.fill(direction.getOpposite(),new FluidStack(master.output.getFluidType(),100),false);
        FluidStack stack=master.drain(direction,drain,true);
        tank.fill(direction.getOpposite(),stack,true);
      }
    }
  }
  if (!data.isMaster)   return;
  if (input.getFluid() != null && input.getFluid().amount <= 0)   input.setFluid(null);
  if (output.getFluid() != null && output.getFluid().amount <= 0)   output.setFluid(null);
  if (input.getFluid() == null)   updateRecipe();
  updateHeat();
  energyCost=(input.getFluid() == null || isCooling || energy < (int)(50 + (50 * ((double)currentHeat / 100)))) ? 0 : (int)(50 + (50 * ((double)currentHeat / 100)));
  energy-=energyCost;
  if (currentHeat < requiredHeat) {
    return;
  }
  if (energyCost == 0 || input.isEmpty() || output.isFull() || !input.getFluid().isFluidEqual(inputFluidStack) || input.getFluidAmount() < inputFluidStack.amount || (!output.isEmpty() && !output.getFluid().isFluidEqual(outputFluidStack)) || output.getCapacity() - output.getFluidAmount() < outputFluidStack.amount)   return;
  input.drain(inputFluidStack.amount,true);
  output.fill(outputFluidStack,true);
}",0.9486772486772488
34897,"public BlacklistedTank(String name,int capacity,TileEntity tile,final Fluid... fluids){
  super(name,capacity,tile,new IFluidAcceptor(){
    @Override public boolean accepts(    FluidStack fluidStack){
      if (fluidStack == null)       return false;
      Fluid fluid=fluidStack.getFluid();
      if (fluid == null)       return false;
      if (fluids == null)       return true;
      for (      Fluid f : fluids)       if (f != null && f.getID() == fluid.getID())       return false;
      return true;
    }
    @Override public String getDescription(){
      ArrayList<String> list=new ArrayList<String>();
      if (fluids != null)       for (      Fluid f : fluids)       if (f != null)       list.add(f.getName());
      list.trimToSize();
      return ""String_Node_Str"" + list.toString();
    }
  }
);
}","public BlacklistedTank(String name,int capacity,TileEntity tile,final Fluid... fluids){
  super(name,capacity,tile,new IFluidAcceptor(){
    @Override public boolean accepts(    FluidStack fluidStack){
      if (fluidStack == null)       return false;
      Fluid fluid=fluidStack.getFluid();
      if (fluid == null)       return false;
      if (fluids == null)       return true;
      for (      Fluid f : fluids)       if (f != null && f.getID() == fluid.getID())       return false;
      return true;
    }
    @Override public String getDescription(){
      ArrayList<String> list=new ArrayList<String>();
      if (fluids != null)       for (      Fluid f : fluids)       if (f != null)       list.add(f.getName());
      list.trimToSize();
      return ""String_Node_Str"" + list.toString();
    }
    @Override public String toString(){
      return getDescription();
    }
  }
);
}",0.9513196480938416
34898,"public WhitelistedTank(String name,int capacity,TileEntity tile,final Fluid... fluids){
  super(name,capacity,tile,new IFluidAcceptor(){
    @Override public boolean accepts(    FluidStack fluidStack){
      if (fluids == null || fluidStack == null)       return false;
      Fluid fluid=fluidStack.getFluid();
      if (fluid == null)       return false;
      for (      Fluid f : fluids)       if (f != null && f.getID() != fluid.getID())       return false;
      return true;
    }
    @Override public String getDescription(){
      ArrayList<String> list=new ArrayList<String>();
      if (fluids != null)       for (      Fluid f : fluids)       if (f != null)       list.add(f.getName());
      list.trimToSize();
      return ""String_Node_Str"" + list.toString();
    }
  }
);
}","public WhitelistedTank(String name,int capacity,TileEntity tile,final Fluid... fluids){
  super(name,capacity,tile,new IFluidAcceptor(){
    @Override public boolean accepts(    FluidStack fluidStack){
      if (fluids == null || fluidStack == null)       return false;
      Fluid fluid=fluidStack.getFluid();
      if (fluid == null)       return false;
      for (      Fluid f : fluids)       if (f != null && f.getID() != fluid.getID())       return false;
      return true;
    }
    @Override public String getDescription(){
      ArrayList<String> list=new ArrayList<String>();
      if (fluids != null)       for (      Fluid f : fluids)       if (f != null)       list.add(f.getName());
      list.trimToSize();
      return ""String_Node_Str"" + list.toString();
    }
    @Override public String toString(){
      return getDescription();
    }
  }
);
}",0.9497274379164145
34899,"@Override public void initialize(){
  for (int i=0; i < 9; i++)   addWidget(new WidgetColor(i,guiLeft + 7 + i * 18,guiTop + 125,176,0,18,18,this,tile.colors[i],texture));
}","@Override public void initialize(){
  for (int i=0; i < 9; i++) {
    addWidget(new WidgetSortingColor(i,guiLeft + 7 + i * 18,guiTop + 125,176,0,18,18,this,tile.colors[i],texture));
  }
}",0.958217270194986
34900,"@Override public void updateEntity(){
  super.updateEntity();
  if (data.moved) {
    data.afterMoveCheck(worldObj);
    worldObj.scheduleBlockUpdate(xCoord,yCoord,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord),80);
  }
  if (master == null && !isMaster())   findMaster();
  if (master == null && !isMaster())   return;
  if (getIntalledUpgrades().contains(EnumMachineUpgrades.AUTO_OUTPUT)) {
    for (    ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
      Location location=new Location(this).move(direction);
      TileEntity entity=location.getTileEntity();
      if (entity != null && entity instanceof IFluidHandler && !(entity instanceof TileCoolingTower)) {
        IFluidHandler tank=(IFluidHandler)entity;
        master.drain(direction,tank.fill(direction.getOpposite(),new FluidStack(master.output.getFluidType(),100),true),true);
      }
    }
  }
  if (!isMaster())   return;
  if (input.getFluid() != null && input.getFluid().amount <= 0)   input.setFluid(null);
  if (output.getFluid() != null && output.getFluid().amount <= 0)   output.setFluid(null);
  int max=20;
  while (!coolant.isEmpty() && heat > 0 && max > 0) {
    ICoolant cooling=CoolantManager.INSTANCE.getCoolant(coolant.getFluid().getFluid());
    if (cooling == null)     break;
    coolant.drain(1,true);
    heat-=cooling.getDegreesCoolingPerMB(heat) * 1.5;
    max--;
  }
  if (heat > 80 || recipe == null || output.isFull() || input.isEmpty() || !input.getFluid().isFluidEqual(recipe.getInput()) || input.getFluidAmount() < recipe.getInput().amount || (!output.isEmpty() && !output.getFluid().isFluidEqual(recipe.getOutput())) || output.getCapacity() - output.getFluidAmount() < recipe.getOutput().amount)   return;
  input.drain(recipe.getInput().amount,true);
  output.fill(recipe.getOutput(),true);
  heat+=recipe.getHeat();
}","@Override public void updateEntity(){
  super.updateEntity();
  if (data.moved) {
    data.afterMoveCheck(worldObj);
    worldObj.scheduleBlockUpdate(xCoord,yCoord,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord),80);
  }
  if (master == null && !isMaster())   findMaster();
  if (master == null && !isMaster())   return;
  if (getIntalledUpgrades().contains(EnumMachineUpgrades.AUTO_OUTPUT)) {
    for (    ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
      Location location=new Location(this).move(direction);
      TileEntity entity=location.getTileEntity();
      if (entity != null && entity instanceof IFluidHandler && !(entity instanceof TileCoolingTower) && master.output.getFluidType() != null) {
        IFluidHandler tank=(IFluidHandler)entity;
        int drain=tank.fill(direction.getOpposite(),new FluidStack(master.output.getFluidType(),100),false);
        FluidStack stack=master.drain(direction,drain,true);
        tank.fill(direction.getOpposite(),stack,true);
      }
    }
  }
  if (!isMaster())   return;
  if (input.getFluid() != null && input.getFluid().amount <= 0)   input.setFluid(null);
  if (output.getFluid() != null && output.getFluid().amount <= 0)   output.setFluid(null);
  int max=20;
  while (!coolant.isEmpty() && heat > 0 && max > 0) {
    ICoolant cooling=CoolantManager.INSTANCE.getCoolant(coolant.getFluid().getFluid());
    if (cooling == null)     break;
    coolant.drain(1,true);
    heat-=cooling.getDegreesCoolingPerMB(heat) * 1.5;
    max--;
  }
  if (heat > 80 || recipe == null || output.isFull() || input.isEmpty() || !input.getFluid().isFluidEqual(recipe.getInput()) || input.getFluidAmount() < recipe.getInput().amount || (!output.isEmpty() && !output.getFluid().isFluidEqual(recipe.getOutput())) || output.getCapacity() - output.getFluidAmount() < recipe.getOutput().amount)   return;
  input.drain(recipe.getInput().amount,true);
  output.fill(recipe.getOutput(),true);
  heat+=recipe.getHeat();
}",0.9489473684210528
34901,"@Override public int receiveEnergy(ForgeDirection from,int maxReceive,boolean simulate){
  if (data.isMaster) {
    int recieved=maxReceive;
    if (recieved > maxEnergy - energy)     recieved=maxEnergy - energy;
    if (!simulate)     energy+=recieved;
    return recieved;
  }
 else {
    if (master == null)     findMaster();
    if (master != null)     return master.receiveEnergy(from,maxReceive,simulate);
  }
  return 0;
}","@Override public int receiveEnergy(ForgeDirection from,int maxReceive,boolean simulate){
  if (isMaster()) {
    int recieved=maxReceive;
    if (recieved > maxEnergy - energy)     recieved=maxEnergy - energy;
    if (!simulate)     energy+=recieved;
    return recieved;
  }
 else {
    if (master == null)     findMaster();
    if (master != null)     return master.receiveEnergy(from,maxReceive,simulate);
  }
  return 0;
}",0.991812865497076
34902,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float hitX,float hitY,float hitZ){
  if (player.isSneaking())   return false;
  if (!world.isRemote && (player.getCurrentEquippedItem() == null || !(player.getCurrentEquippedItem().getItem() instanceof IToolWrench))) {
    player.openGui(BuildcraftAdditions.instance,Variables.Gui.ITEM_SORTER,world,x,y,z);
    return true;
  }
  Item equipped=player.getCurrentEquippedItem() != null ? player.getCurrentEquippedItem().getItem() : null;
  if (equipped != null && equipped instanceof IToolWrench && ((IToolWrench)equipped).canWrench(player,x,y,z)) {
    getSorterTile(world,x,y,z).setRotation(ForgeDirection.getOrientation(rotate(world.getBlockMetadata(x,y,z))));
    ((IToolWrench)equipped).wrenchUsed(player,x,y,z);
    return true;
  }
  return false;
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float hitX,float hitY,float hitZ){
  if (player.isSneaking())   return false;
  Item equipped=player.getCurrentEquippedItem() != null ? player.getCurrentEquippedItem().getItem() : null;
  if (equipped != null && equipped instanceof IToolWrench && ((IToolWrench)equipped).canWrench(player,x,y,z)) {
    getSorterTile(world,x,y,z).setRotation(ForgeDirection.getOrientation(rotate(world.getBlockMetadata(x,y,z))));
    ((IToolWrench)equipped).wrenchUsed(player,x,y,z);
    return true;
  }
  if (!world.isRemote)   player.openGui(BuildcraftAdditions.instance,Variables.Gui.ITEM_SORTER,world,x,y,z);
  return true;
}",0.3864795918367347
34903,"public WidgetFluidTank(int id,int x,int y,int width,int height,GuiBase gui,Tank tank){
  super(id,x,y,0,0,width,height,gui);
  setEnableClockSound(false);
  this.tank=tank;
}","public WidgetFluidTank(int id,int x,int y,int width,int height,GuiBase gui,Tank tank){
  super(id,x,y,0,0,width,height,gui,""String_Node_Str"");
  setEnableClockSound(false);
  this.tank=tank;
}",0.9508196721311476
34904,"public ContainerBase(InventoryPlayer inventoryPlayer,T tile){
  this.inventoryPlayer=inventoryPlayer;
  inventory=tile;
}","public ContainerBase(InventoryPlayer inventoryPlayer,T inventory){
  this.inventoryPlayer=inventoryPlayer;
  this.inventory=inventory;
}",0.8949416342412452
34905,"@Override public ItemStack transferStackInSlot(EntityPlayer player,int slotIndex){
  ItemStack originalStack=null;
  Slot slot=(Slot)inventorySlots.get(slotIndex);
  int numSlots=inventorySlots.size();
  if (slot != null && slot.getHasStack()) {
    ItemStack stackInSlot=slot.getStack();
    originalStack=stackInSlot.copy();
    if (slotIndex >= numSlots - 9 * 4 && tryShiftItem(stackInSlot,numSlots)) {
    }
 else     if (slotIndex >= numSlots - 9 * 4 && slotIndex < numSlots - 9) {
      if (!shiftItemStack(stackInSlot,numSlots - 9,numSlots)) {
        return null;
      }
    }
 else     if (slotIndex >= numSlots - 9 && slotIndex < numSlots) {
      if (!shiftItemStack(stackInSlot,numSlots - 9 * 4,numSlots - 9)) {
        return null;
      }
    }
 else     if (!shiftItemStack(stackInSlot,numSlots - 9 * 4,numSlots)) {
      return null;
    }
    slot.onSlotChange(stackInSlot,originalStack);
    if (stackInSlot.stackSize <= 0) {
      slot.putStack(null);
    }
 else {
      slot.onSlotChanged();
    }
    if (stackInSlot.stackSize == originalStack.stackSize) {
      return null;
    }
    slot.onPickupFromSlot(player,stackInSlot);
  }
  return originalStack;
}","@Override public ItemStack transferStackInSlot(EntityPlayer player,int slotIndex){
  int numSlots=inventorySlots.size();
  if (slotIndex < 0 || slotIndex >= numSlots)   return null;
  Slot slot=(Slot)inventorySlots.get(slotIndex);
  ItemStack originalStack=null;
  if (slot != null && slot.getHasStack()) {
    ItemStack stackInSlot=slot.getStack();
    originalStack=stackInSlot.copy();
    if (slotIndex >= numSlots - 9 * 4 && tryShiftItem(stackInSlot,numSlots)) {
    }
 else     if (slotIndex >= numSlots - 9 * 4 && slotIndex < numSlots - 9) {
      if (!shiftItemStack(stackInSlot,numSlots - 9,numSlots)) {
        return null;
      }
    }
 else     if (slotIndex >= numSlots - 9 && slotIndex < numSlots) {
      if (!shiftItemStack(stackInSlot,numSlots - 9 * 4,numSlots - 9)) {
        return null;
      }
    }
 else     if (!shiftItemStack(stackInSlot,numSlots - 9 * 4,numSlots)) {
      return null;
    }
    slot.onSlotChange(stackInSlot,originalStack);
    if (stackInSlot.stackSize <= 0) {
      slot.putStack(null);
    }
 else {
      slot.onSlotChanged();
    }
    if (stackInSlot.stackSize == originalStack.stackSize) {
      return null;
    }
    slot.onPickupFromSlot(player,stackInSlot);
  }
  return originalStack;
}",0.9286009079653322
34906,"public void addPlayerInventory(int x,int y){
  for (int inventoryRowIndex=0; inventoryRowIndex < 3; ++inventoryRowIndex)   for (int inventoryColumnIndex=0; inventoryColumnIndex < 9; ++inventoryColumnIndex)   addSlotToContainer(new Slot(inventoryPlayer,9 + inventoryColumnIndex + inventoryRowIndex * 9,x + inventoryColumnIndex * 18,y + inventoryRowIndex * 18));
  for (int hotBarIndex=0; hotBarIndex < 9; ++hotBarIndex)   addSlotToContainer(new Slot(inventoryPlayer,hotBarIndex,8 + hotBarIndex * 18,y + 58));
}","protected void addPlayerInventory(int x,int y){
  if (inventoryPlayer != null) {
    for (int inventoryRowIndex=0; inventoryRowIndex < 3; ++inventoryRowIndex)     for (int inventoryColumnIndex=0; inventoryColumnIndex < 9; ++inventoryColumnIndex)     addSlotToContainer(new Slot(inventoryPlayer,9 + inventoryColumnIndex + inventoryRowIndex * 9,x + inventoryColumnIndex * 18,y + inventoryRowIndex * 18));
    for (int hotBarIndex=0; hotBarIndex < 9; ++hotBarIndex)     addSlotToContainer(new Slot(inventoryPlayer,hotBarIndex,8 + hotBarIndex * 18,y + 58));
  }
}",0.9456928838951312
34907,"protected boolean shiftItemStack(ItemStack stackToShift,int start,int end){
  boolean changed=false;
  if (stackToShift.isStackable()) {
    for (int slotIndex=start; stackToShift.stackSize > 0 && slotIndex < end; slotIndex++) {
      Slot slot=(Slot)inventorySlots.get(slotIndex);
      ItemStack stackInSlot=slot.getStack();
      if (stackInSlot != null && canStacksMerge(stackInSlot,stackToShift)) {
        int resultingStackSize=stackInSlot.stackSize + stackToShift.stackSize;
        int max=Math.min(stackToShift.getMaxStackSize(),slot.getSlotStackLimit());
        if (resultingStackSize <= max) {
          stackToShift.stackSize=0;
          stackInSlot.stackSize=resultingStackSize;
          slot.onSlotChanged();
          changed=true;
        }
 else         if (stackInSlot.stackSize < max) {
          stackToShift.stackSize-=max - stackInSlot.stackSize;
          stackInSlot.stackSize=max;
          slot.onSlotChanged();
          changed=true;
        }
      }
    }
  }
  if (stackToShift.stackSize > 0) {
    for (int slotIndex=start; stackToShift.stackSize > 0 && slotIndex < end; slotIndex++) {
      Slot slot=(Slot)inventorySlots.get(slotIndex);
      ItemStack stackInSlot=slot.getStack();
      if (stackInSlot == null) {
        int max=Math.min(stackToShift.getMaxStackSize(),slot.getSlotStackLimit());
        stackInSlot=stackToShift.copy();
        stackInSlot.stackSize=Math.min(stackToShift.stackSize,max);
        stackToShift.stackSize-=stackInSlot.stackSize;
        slot.putStack(stackInSlot);
        slot.onSlotChanged();
        changed=true;
      }
    }
  }
  return changed;
}","private boolean shiftItemStack(ItemStack stackToShift,int start,int end){
  boolean changed=false;
  if (stackToShift.isStackable()) {
    for (int slotIndex=start; stackToShift.stackSize > 0 && slotIndex < end; slotIndex++) {
      Slot slot=(Slot)inventorySlots.get(slotIndex);
      ItemStack stackInSlot=slot.getStack();
      if (stackInSlot != null && canStacksMerge(stackInSlot,stackToShift)) {
        int resultingStackSize=stackInSlot.stackSize + stackToShift.stackSize;
        int max=Math.min(stackToShift.getMaxStackSize(),slot.getSlotStackLimit());
        if (resultingStackSize <= max) {
          stackToShift.stackSize=0;
          stackInSlot.stackSize=resultingStackSize;
          slot.onSlotChanged();
          changed=true;
        }
 else         if (stackInSlot.stackSize < max) {
          stackToShift.stackSize-=max - stackInSlot.stackSize;
          stackInSlot.stackSize=max;
          slot.onSlotChanged();
          changed=true;
        }
      }
    }
  }
  if (stackToShift.stackSize > 0) {
    for (int slotIndex=start; stackToShift.stackSize > 0 && slotIndex < end; slotIndex++) {
      Slot slot=(Slot)inventorySlots.get(slotIndex);
      ItemStack stackInSlot=slot.getStack();
      if (stackInSlot == null) {
        int max=Math.min(stackToShift.getMaxStackSize(),slot.getSlotStackLimit());
        stackInSlot=stackToShift.copy();
        stackInSlot.stackSize=Math.min(stackToShift.stackSize,max);
        stackToShift.stackSize-=stackInSlot.stackSize;
        slot.putStack(stackInSlot);
        slot.onSlotChanged();
        changed=true;
      }
    }
  }
  return changed;
}",0.996305418719212
34908,"@Override public ItemStack slotClick(int slotNum,int mouseButton,int modifier,EntityPlayer player){
  if (slotNum < 0 || inventorySlots.size() == 0 || inventorySlots == null)   return super.slotClick(slotNum,mouseButton,modifier,player);
  Slot slot=(Slot)inventorySlots.get(slotNum);
  if (slot instanceof SlotPhantom)   return clickPhantom(slot,mouseButton,player);
  return super.slotClick(slotNum,mouseButton,modifier,player);
}","@Override public ItemStack slotClick(int slotNum,int mouseButton,int modifier,EntityPlayer player){
  if (slotNum < 0 || slotNum >= inventorySlots.size())   return super.slotClick(slotNum,mouseButton,modifier,player);
  Slot slot=(Slot)inventorySlots.get(slotNum);
  if (slot instanceof SlotPhantom)   return ((SlotPhantom)slot).onClick(mouseButton,player);
  return super.slotClick(slotNum,mouseButton,modifier,player);
}",0.9133489461358314
34909,"@Override protected void drawGuiContainerForegroundLayer(int x,int y){
  if (drawPlayerInv)   drawString(StatCollector.translateToLocal(""String_Node_Str""),5,ySize + 6,textColor);
  String name=Utils.localize(String.format(""String_Node_Str"",getInventoryName()));
  drawString(name,centerTitle ? getXSize() / 2 - (name.length() * 2) : titleXoffset,titleYoffset,textColor);
  drawForegroundExtra(x,y);
}","@Override protected void drawGuiContainerForegroundLayer(int x,int y){
  if (drawPlayerInv)   drawString(StatCollector.translateToLocal(""String_Node_Str""),5,tileGuiYSize + 6,textColor);
  String name=Utils.localize(String.format(""String_Node_Str"",getInventoryName()));
  drawString(name,centerTitle ? getXSize() / 2 - (name.length() * 2) : titleXoffset,titleYoffset,textColor);
  drawForegroundExtra(x,y);
}",0.9888475836431226
34910,"@Override protected void drawGuiContainerBackgroundLayer(float f,int x,int y){
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  bindTexture(texture());
  drawTexturedModalRect(guiLeft,guiTop,0,0,xSize,ySize);
  if (drawPlayerInv) {
    bindTexture(PLAYER_INV_TEXTURE);
    drawTexturedModalRect(guiLeft,guiTop + ySize,0,0,xSizePlayerInv,ySizePlayerInv);
  }
  bindTexture(texture());
  drawBackgroundPreWidgets(f,x,y);
  if (shouldDrawWidgets)   drawWidgets(x,y);
  bindTexture(texture());
  drawBackgroundPostWidgets(f,x,y);
}","@Override protected void drawGuiContainerBackgroundLayer(float f,int x,int y){
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  bindTexture(texture());
  drawTexturedModalRect(guiLeft,guiTop,0,0,xSize,tileGuiYSize);
  if (drawPlayerInv) {
    bindTexture(PLAYER_INV_TEXTURE);
    drawTexturedModalRect(guiLeft,guiTop + tileGuiYSize,0,0,xSizePlayerInv,ySizePlayerInv);
  }
  bindTexture(texture());
  drawBackgroundPreWidgets(f,x,y);
  if (shouldDrawWidgets)   drawWidgets(x,y);
  bindTexture(texture());
  drawBackgroundPostWidgets(f,x,y);
}",0.9828897338403042
34911,"public GuiBase(Container container){
  super(container);
  this.texture=texture();
  this.xSize=getXSize();
  this.ySize=getYSize();
}","public GuiBase(Container container){
  super(container);
  texture=texture();
  xSize=getXSize();
  ySize=drawPlayerInv ? getYSize() + ySizePlayerInv : getYSize();
  tileGuiYSize=getYSize();
}",0.7423312883435583
34912,"@Override public void initGui(){
  super.initGui();
  if (drawPlayerInv)   this.guiTop=(this.height - (this.ySize + ySizePlayerInv)) / 2;
  initialize();
}","@Override public void initGui(){
  super.initGui();
  if (drawPlayerInv) {
    this.guiTop=(this.height - this.ySize) / 2;
  }
  initialize();
}",0.9096989966555185
34913,"@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int meta,float hitX,float hitY,float hitZ){
  if (world.getTileEntity(x,y,z) instanceof IConfigurableOutput) {
    player.openGui(BuildcraftAdditions.instance,Variables.Gui.MACHINE_CONFIGURATOR,world,x,y,z);
    return true;
  }
  return false;
}","@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int meta,float hitX,float hitY,float hitZ){
  if (world.getTileEntity(x,y,z) instanceof TileBase)   ((TileBase)world.getTileEntity(x,y,z)).sync();
  if (world.getTileEntity(x,y,z) instanceof IConfigurableOutput) {
    player.openGui(BuildcraftAdditions.instance,Variables.Gui.MACHINE_CONFIGURATOR,world,x,y,z);
    return true;
  }
  return false;
}",0.8707653701380176
34914,"@Override public IMessage onMessage(MessageConfiguration message,MessageContext ctx){
  TileEntity entity=ctx.getServerHandler().playerEntity.worldObj.getTileEntity(message.x,message.y,message.z);
  if (entity != null && entity instanceof TileKineticEnergyBufferBase) {
    IConfigurableOutput configurableOutput=(IConfigurableOutput)entity;
    configurableOutput.overrideConfiguration(message.configuration);
  }
  return null;
}","@Override public IMessage onMessage(MessageConfiguration message,MessageContext ctx){
  TileEntity entity=ctx.getServerHandler().playerEntity.worldObj.getTileEntity(message.x,message.y,message.z);
  if (entity != null && entity instanceof IConfigurableOutput) {
    IConfigurableOutput configurableOutput=(IConfigurableOutput)entity;
    configurableOutput.overrideConfiguration(message.configuration);
  }
  return null;
}",0.9461358313817332
34915,"@Override public void registerRenderers(){
  MinecraftForgeClient.registerItemRenderer(ItemsAndBlocks.ironCanister,new CanisterItemRender(ItemsAndBlocks.ironCanister));
  MinecraftForgeClient.registerItemRenderer(ItemsAndBlocks.goldCanister,new CanisterItemRender(ItemsAndBlocks.goldCanister));
  MinecraftForgeClient.registerItemRenderer(ItemsAndBlocks.diamondCanister,new CanisterItemRender(ItemsAndBlocks.diamondCanister));
  ClientRegistry.bindTileEntitySpecialRenderer(TileBasicDuster.class,new RendererDuster());
  ClientRegistry.bindTileEntitySpecialRenderer(TileSemiAutomaticDuster.class,new RendererDuster());
  ClientRegistry.bindTileEntitySpecialRenderer(TileMechanicalDuster.class,new RendererDuster());
  ClientRegistry.bindTileEntitySpecialRenderer(TileKineticDuster.class,new RendererDusterKinetic());
  ClientRegistry.bindTileEntitySpecialRenderer(TileKEBT2.class,new RendererKEBT2());
}","@Override public void registerRenderers(){
  MinecraftForgeClient.registerItemRenderer(ItemsAndBlocks.ironCanister,new CanisterItemRender(ItemsAndBlocks.ironCanister));
  MinecraftForgeClient.registerItemRenderer(ItemsAndBlocks.goldCanister,new CanisterItemRender(ItemsAndBlocks.goldCanister));
  MinecraftForgeClient.registerItemRenderer(ItemsAndBlocks.diamondCanister,new CanisterItemRender(ItemsAndBlocks.diamondCanister));
  ClientRegistry.bindTileEntitySpecialRenderer(TileBasicDuster.class,new RendererDuster());
  ClientRegistry.bindTileEntitySpecialRenderer(TileSemiAutomaticDuster.class,new RendererDuster());
  ClientRegistry.bindTileEntitySpecialRenderer(TileMechanicalDuster.class,new RendererDuster());
  ClientRegistry.bindTileEntitySpecialRenderer(TileKineticDuster.class,new RendererDusterKinetic());
  ClientRegistry.bindTileEntitySpecialRenderer(TileKEBT2.class,new RendererKEBT2());
  ClientRegistry.bindTileEntitySpecialRenderer(TileKEBT3.class,new RendererKEBT3());
}",0.9550502379693284
34916,"@Override public void updateEntity(){
  if (selfDestruct) {
    fuse--;
    if (fuse % 20 == 0)     destroyer.addChatComponentMessage(new ChatComponentText(""String_Node_Str"" + fuse / 20));
  }
  if (fuse <= 0 && selfDestruct)   byeBye();
  if (sync) {
    if (timer == 0) {
      sync();
      timer=20;
    }
    timer--;
  }
  if (ConfigurationHandler.powerloss)   energy=energy - loss;
  if (energy < 0)   energy=0;
  outputEnergy();
}","@Override public void updateEntity(){
  if (selfDestruct) {
    fuse--;
    if (fuse % 20 == 0)     destroyer.addChatComponentMessage(new ChatComponentText(""String_Node_Str"" + fuse / 20));
  }
  if (fuse <= 0 && selfDestruct)   byeBye();
  if (timer == 0) {
    sync();
    timer=20;
  }
  timer--;
  if (ConfigurationHandler.powerloss)   energy=energy - loss;
  if (energy < 0)   energy=0;
  outputEnergy();
}",0.6509433962264151
34917,"@Override public void formMultiblock(int masterX,int masterY,int masterZ){
  partOfMultiBlock=true;
  this.masterX=masterX;
  this.masterY=masterY;
  this.masterZ=masterZ;
  renderUpdate=true;
}","@Override public void formMultiblock(int masterX,int masterY,int masterZ){
  partOfMultiBlock=true;
  this.masterX=masterX;
  this.masterY=masterY;
  this.masterZ=masterZ;
}",0.9427792915531336
34918,"@Override public void updateEntity(){
  if (moved) {
    if (!patern.isPaternValid(worldObj,masterX,masterY,masterZ)) {
      patern.destroyMultiblock(worldObj,masterX,masterY,masterZ);
      patern.destroyMultiblock(worldObj,oldmasterX,oldmasterY,oldmasterZ);
    }
    moved=false;
  }
  if (renderUpdate) {
    sync();
  }
  if (!isMaster || worldObj.isRemote) {
    return;
  }
  super.updateEntity();
  energyState=(energy * 5) / maxEnergy;
  if (energyState != lastEnergyState)   renderUpdate=true;
  lastEnergyState=energyState;
}","@Override public void updateEntity(){
  if (moved) {
    if (!patern.isPaternValid(worldObj,masterX,masterY,masterZ)) {
      patern.destroyMultiblock(worldObj,masterX,masterY,masterZ);
      patern.destroyMultiblock(worldObj,oldmasterX,oldmasterY,oldmasterZ);
    }
    moved=false;
  }
  if (!isMaster || worldObj.isRemote) {
    return;
  }
  super.updateEntity();
  energyState=(energy * 5) / maxEnergy;
}",0.864693446088795
34919,"@Override public void invalidateBlock(){
  partOfMultiBlock=false;
  isMaster=false;
  energy=0;
  for (int teller=0; teller < 6; teller++) {
    configuration[teller]=0;
  }
  energyState=0;
  lastEnergyState=0;
  worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,0,2);
  worldObj.scheduleBlockUpdate(xCoord,yCoord,zCoord,ItemsAndBlocks.kebT2,80);
  sync();
}","@Override public void invalidateBlock(){
  partOfMultiBlock=false;
  isMaster=false;
  energy=0;
  for (int teller=0; teller < 6; teller++) {
    configuration[teller]=0;
  }
  energyState=0;
  worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,0,2);
  worldObj.scheduleBlockUpdate(xCoord,yCoord,zCoord,ItemsAndBlocks.kebT2,80);
  sync();
}",0.97054698457223
34920,"@Override public void makeMaster(){
  isMaster=true;
  partOfMultiBlock=true;
}","@Override public void makeMaster(){
  isMaster=true;
  partOfMultiBlock=true;
  sync();
}",0.9404761904761904
34921,"@Override public void updateEntity(){
  if (moved) {
    if (!patern.isPaternValid(worldObj,masterX,masterY,masterZ)) {
      patern.destroyMultiblock(worldObj,masterX,masterY,masterZ);
      patern.destroyMultiblock(worldObj,oldmasterX,oldmasterY,oldmasterZ);
    }
    moved=false;
  }
  if (renderUpdate) {
    sync();
    renderUpdate=false;
  }
  if (!isMaster || worldObj.isRemote) {
    return;
  }
  super.updateEntity();
}","@Override public void updateEntity(){
  if (moved) {
    if (!patern.isPaternValid(worldObj,masterX,masterY,masterZ)) {
      patern.destroyMultiblock(worldObj,masterX,masterY,masterZ);
      patern.destroyMultiblock(worldObj,oldmasterX,oldmasterY,oldmasterZ);
    }
    moved=false;
  }
  if (!isMaster || worldObj.isRemote) {
    return;
  }
  super.updateEntity();
  energyState=(int)(((long)energy) * 4) / maxEnergy;
}",0.8651817116060961
34922,"@Override public void invalidateBlock(){
  if (isMaster)   worldObj.scheduleBlockUpdate(xCoord,yCoord,zCoord,ItemsAndBlocks.kebT3Core,80);
  partOfMultiBlock=false;
  isMaster=false;
  energy=0;
  for (int teller=0; teller < 6; teller++) {
    configuration[teller]=0;
  }
  energyState=0;
  lastEnergyState=0;
  worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,0,2);
  sync();
}","@Override public void invalidateBlock(){
  if (isMaster)   worldObj.scheduleBlockUpdate(xCoord,yCoord,zCoord,ItemsAndBlocks.kebT3Core,80);
  partOfMultiBlock=false;
  isMaster=false;
  energy=0;
  for (int teller=0; teller < 6; teller++) {
    configuration[teller]=0;
  }
  energyState=0;
  worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,0,2);
  sync();
}",0.9721115537848606
34923,"private void addMaster(World world,int x,int y,int z,int rotationIndex){
  TileEntity entity=world.getTileEntity(x,y,z);
  if (entity != null && entity instanceof IMultiBlockTile) {
    IMultiBlockTile master=(IMultiBlockTile)entity;
    master.makeMaster(rotationIndex);
    master.sync();
  }
}","protected void addMaster(World world,int x,int y,int z,int rotationIndex){
  TileEntity entity=world.getTileEntity(x,y,z);
  if (entity != null && entity instanceof IMultiBlockTile) {
    IMultiBlockTile master=(IMultiBlockTile)entity;
    master.makeMaster(rotationIndex);
    master.sync();
  }
}",0.9797979797979798
34924,"@Override public boolean onBlockActivated(EntityPlayer player){
  if (!worldObj.isRemote)   sync();
  if (!partOfMultiBlock)   return false;
  if (isMaster) {
    player.openGui(BuildcraftAdditions.instance,Variables.GuiKEB,worldObj,xCoord,yCoord,zCoord);
    Logger.info(""String_Node_Str"" + energy + ""String_Node_Str""+ worldObj.isRemote+ ""String_Node_Str"");
  }
 else {
    if (master == null)     findMaster();
    if (master != null)     master.onBlockActivated(player);
  }
  return true;
}","@Override public boolean onBlockActivated(EntityPlayer player){
  if (!worldObj.isRemote)   sync();
  if (!partOfMultiBlock)   return false;
  if (isMaster) {
    player.openGui(BuildcraftAdditions.instance,Variables.GuiKEB,worldObj,xCoord,yCoord,zCoord);
  }
 else {
    if (master == null)     findMaster();
    if (master != null)     master.onBlockActivated(player);
  }
  return true;
}",0.8836158192090395
34925,"private static void addDusts(String metalName,int color){
  Item itemDust;
  ArrayList<ItemStack> list;
  list=OreDictionary.getOres(""String_Node_Str"" + metalName);
  if (list.isEmpty())   return;
  if (ConfigurationHandeler.shouldRegisterDusts) {
    itemDust=new ItemDust(color).setUnlocalizedName(""String_Node_Str"" + metalName);
    list=OreDictionary.getOres(""String_Node_Str"" + metalName);
    if (!list.isEmpty())     itemDust.setUnlocalizedName(list.get(0).getUnlocalizedName().substring(5));
    GameRegistry.registerItem(itemDust,""String_Node_Str"" + metalName);
    OreDictionary.registerOre(""String_Node_Str"" + metalName,itemDust);
    GameRegistry.addSmelting(itemDust,OreDictionary.getOres(""String_Node_Str"" + metalName).get(0),0);
  }
 else {
    ArrayList<ItemStack> tempList=OreDictionary.getOres(""String_Node_Str"" + metalName);
    if (tempList.isEmpty())     return;
    ItemStack stack=tempList.get(0);
    if (stack == null)     return;
    itemDust=stack.getItem();
  }
  for (  ItemStack stack : list)   DusterRecipes.dusting().addDusterRecipe(stack,new ItemStack(itemDust,2));
  list=OreDictionary.getOres(""String_Node_Str"" + metalName);
  for (  ItemStack stack : list)   DusterRecipes.dusting().addDusterRecipe(stack,new ItemStack(itemDust,1));
}","private static void addDusts(String metalName,int color){
  Item itemDust;
  ArrayList<ItemStack> list;
  list=OreDictionary.getOres(""String_Node_Str"" + metalName);
  if (list.isEmpty())   return;
  if (ConfigurationHandeler.shouldRegisterDusts) {
    itemDust=new ItemDust(color).setUnlocalizedName(""String_Node_Str"" + metalName);
    list=OreDictionary.getOres(""String_Node_Str"" + metalName);
    if (!list.isEmpty())     itemDust.setUnlocalizedName(list.get(0).getUnlocalizedName().substring(5));
    GameRegistry.registerItem(itemDust,""String_Node_Str"" + metalName);
    OreDictionary.registerOre(""String_Node_Str"" + metalName,itemDust);
    GameRegistry.addSmelting(itemDust,OreDictionary.getOres(""String_Node_Str"" + metalName).get(0),0);
  }
 else {
    ArrayList<ItemStack> tempList=OreDictionary.getOres(""String_Node_Str"" + metalName);
    if (tempList.isEmpty())     return;
    ItemStack stack=tempList.get(0);
    if (stack == null)     return;
    itemDust=stack.getItem();
  }
  list=OreDictionary.getOres(""String_Node_Str"" + metalName);
  for (  ItemStack stack : list)   DusterRecipes.dusting().addDusterRecipe(stack,new ItemStack(itemDust,2));
  list=OreDictionary.getOres(""String_Node_Str"" + metalName);
  for (  ItemStack stack : list)   DusterRecipes.dusting().addDusterRecipe(stack,new ItemStack(itemDust,1));
}",0.9765474817377932
34926,"public ItemStack getDustingResult(ItemStack input){
  ItemStack result=dustingList.get(new ItemData(input)).copy();
  if (result == null)   return null;
  return result.copy();
}","public ItemStack getDustingResult(ItemStack input){
  ItemStack result=dustingList.get(new ItemData(input));
  if (result == null)   return null;
  return result.copy();
}",0.9799426934097422
34927,"@Override public void updateEntity(){
  if (worldObj.isRemote)   return;
  if (shouldUpdateCoils) {
    updateCoils();
    shouldUpdateCoils=false;
  }
  if (canCook()) {
    if (!isCooking) {
      for (      TileCoilBase coil : coils) {
        if (coil != null) {
          coil.startHeating();
          if (coil.isBurning()) {
            isCooking=true;
            doBlockUpdate();
          }
        }
      }
    }
    if (progress > 0)     isCooking=true;
    if (progress >= 6500) {
      ItemStack inputStack=getStackInSlot(0);
      ItemStack result=FurnaceRecipes.smelting().getSmeltingResult(inputStack);
      if (getStackInSlot(1) == null) {
        setInventorySlotContents(1,result.copy());
      }
 else {
        getStackInSlot(1).stackSize+=result.stackSize;
      }
      getStackInSlot(0).stackSize--;
      if (getStackInSlot(0).stackSize == 0)       setInventorySlotContents(0,null);
      progress=0;
    }
 else {
      for (      TileCoilBase coil : coils)       if (coil != null) {
        progress+=coil.getIncrement();
      }
    }
  }
 else {
    stop();
  }
  if (sync) {
    if (timer == 0) {
      PacketHandeler.instance.sendToAllAround(new MessageHeatedFurnaceProgress(this),new NetworkRegistry.TargetPoint(worldObj.provider.dimensionId,xCoord,yCoord,zCoord,5));
      timer=15;
    }
    timer--;
  }
}","@Override public void updateEntity(){
  if (worldObj.isRemote)   return;
  if (shouldUpdateCoils) {
    updateCoils();
    shouldUpdateCoils=false;
  }
  if (canCook()) {
    if (!isCooking) {
      for (      TileCoilBase coil : coils) {
        if (coil != null) {
          coil.startHeating();
          if (coil.isBurning()) {
            isCooking=true;
            doBlockUpdate();
          }
        }
      }
    }
    if (progress > 0)     isCooking=true;
    if (progress >= 6500) {
      ItemStack inputStack=getStackInSlot(0);
      ItemStack result=FurnaceRecipes.smelting().getSmeltingResult(inputStack);
      if (getStackInSlot(1) == null) {
        setInventorySlotContents(1,result.copy());
      }
 else {
        getStackInSlot(1).stackSize+=result.stackSize;
      }
      if (getStackInSlot(0).stackSize <= 1)       setInventorySlotContents(0,null);
 else       getStackInSlot(0).stackSize--;
      progress=0;
    }
 else {
      for (      TileCoilBase coil : coils)       if (coil != null) {
        progress+=coil.getIncrement();
      }
    }
  }
 else {
    stop();
  }
  if (sync) {
    if (timer == 0) {
      PacketHandeler.instance.sendToAllAround(new MessageHeatedFurnaceProgress(this),new NetworkRegistry.TargetPoint(worldObj.provider.dimensionId,xCoord,yCoord,zCoord,5));
      timer=15;
    }
    timer--;
  }
}",0.9353640416047548
34928,"@Mod.EventHandler public void load(FMLInitializationEvent event){
  proxy.registerRenderers();
  GameRegistry.registerTileEntity(TileFluidicCompressor.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileChargingStation.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileHeatedFurnace.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileBasicCoil.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileBasicDuster.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileSemiAutomaticDuster.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileMechanicalDuster.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileKineticDuster.class,""String_Node_Str"");
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new GuiHandler());
  itemDust=new ItemDust(Integer.parseInt(""String_Node_Str"",16)).setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(itemDust,""String_Node_Str"");
  OreDictionary.registerOre(""String_Node_Str"",itemDust);
  DusterRecepies.addDusterRecepie(new ItemStack(Blocks.diamond_ore),new ItemStack(itemDust,2));
  DusterRecepies.addDusterRecepie(new ItemStack(Items.diamond),new ItemStack(itemDust,1));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  EurekaRegistry.registerKey(Variables.DustT1Key,100,1);
  EurekaRegistry.registerKey(Variables.DustT2Key1,100,1);
  EurekaRegistry.registerKey(Variables.DustT2Key2,100,1);
  EurekaRegistry.registerKey(Variables.CoilT1Key,100,1);
  EurekaRegistry.registerKey(Variables.CoilT2Key,100,1);
}","@Mod.EventHandler public void load(FMLInitializationEvent event){
  proxy.registerRenderers();
  GameRegistry.registerTileEntity(TileFluidicCompressor.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileChargingStation.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileHeatedFurnace.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileBasicCoil.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileBasicDuster.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileSemiAutomaticDuster.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileMechanicalDuster.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileKineticDuster.class,""String_Node_Str"");
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new GuiHandler());
  itemDust=new ItemDust(Integer.parseInt(""String_Node_Str"",16)).setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(itemDust,""String_Node_Str"");
  OreDictionary.registerOre(""String_Node_Str"",itemDust);
  DusterRecepies.addDusterRecepie(new ItemStack(Blocks.diamond_ore),new ItemStack(itemDust,2));
  DusterRecepies.addDusterRecepie(new ItemStack(Items.diamond),new ItemStack(itemDust,1));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  addDusts(""String_Node_Str"",Integer.parseInt(""String_Node_Str"",16));
  EurekaRegistry.registerKey(Variables.DustT1Key,60,1);
  EurekaRegistry.registerKey(Variables.DustT2Key1,60,1);
  EurekaRegistry.registerKey(Variables.DustT2Key2,60,1);
  EurekaRegistry.registerKey(Variables.CoilT1Key,60,1);
  EurekaRegistry.registerKey(""String_Node_Str"",60,1);
}",0.9704950012192148
34929,"@Override public void onBlockPlacedBy(World world,int i,int j,int k,EntityLivingBase entityliving,ItemStack stack){
  super.onBlockPlacedBy(world,i,j,k,entityliving,stack);
  ForgeDirection orientation=Utils.get2dOrientation(entityliving);
  world.setBlockMetadataWithNotify(i,j,k,orientation.getOpposite().ordinal(),1);
}","@Override public void onBlockPlacedBy(World world,int i,int j,int k,EntityLivingBase entityliving,ItemStack stack){
  super.onBlockPlacedBy(world,i,j,k,entityliving,stack);
  if (entityliving instanceof EntityPlayer)   Eureka.eurekaBlockEvent(world,this,i,j,k,(EntityPlayer)entityliving);
  ForgeDirection orientation=Utils.get2dOrientation(entityliving);
  world.setBlockMetadataWithNotify(i,j,k,orientation.getOpposite().ordinal(),1);
}",0.8473684210526315
34930,"@Override public void updateEntity(){
  if (energy >= 4) {
    if (getStackInSlot(0) != null && getDust(getStackInSlot(0)) != null) {
      progress++;
      energy-=4;
      oldProgressStage=progressStage;
      if (progress > 25)       progressStage=1;
      if (progress > 50)       progressStage=2;
      if (progress > 75)       progressStage=3;
      if (progress >= 100) {
        dust();
        if (player != null)         makeProgress(player);
        progress=0;
        progressStage=0;
      }
    }
 else {
      progress=0;
      progressStage=0;
    }
  }
  if (oldProgressStage != progressStage) {
    TargetPoint point=new TargetPoint(worldObj.provider.dimensionId,xCoord,yCoord,zCoord,30);
    PacketHandeler.instance.sendToAllAround(new MessageMechanicDuster(xCoord,yCoord,zCoord,progressStage,getStackInSlot(0)),point);
  }
}","@Override public void updateEntity(){
  if (energy >= 4) {
    if (getStackInSlot(0) != null && getDust(getStackInSlot(0)) != null) {
      progress++;
      energy-=4;
      oldProgressStage=progressStage;
      if (progress > 25)       progressStage=1;
      if (progress > 50)       progressStage=2;
      if (progress > 75)       progressStage=3;
      if (progress >= 100) {
        dust();
        if (player != null)         makeProgress(player,""String_Node_Str"");
        progress=0;
        progressStage=0;
      }
    }
 else {
      progress=0;
      progressStage=0;
    }
  }
  if (oldProgressStage != progressStage) {
    TargetPoint point=new TargetPoint(worldObj.provider.dimensionId,xCoord,yCoord,zCoord,30);
    PacketHandeler.instance.sendToAllAround(new MessageMechanicDuster(xCoord,yCoord,zCoord,progressStage,getStackInSlot(0)),point);
  }
}",0.9894736842105264
34931,"public TileMechanicalDuster(){
  super(Variables.DustT2Key2);
}","public TileMechanicalDuster(){
  super(""String_Node_Str"");
}",0.7642276422764228
34932,"public static void makeProgress(EntityPlayer player,String key){
  if (player.worldObj.isRemote)   return;
  int progress=getProgress(player,key);
  NBTTagCompound tag=getTag(player);
  if (progress < EurekaRegistry.getMaxValue(key)) {
    setKey(tag,key + ""String_Node_Str"",progress + EurekaRegistry.getIncrement(key));
  }
  if (progress == 100) {
    if (!isUnlocked(player,key)) {
      setKey(tag,key + ""String_Node_Str"",true);
      String message=Utils.localize(""String_Node_Str"" + key + ""String_Node_Str"");
      player.addChatMessage(new ChatComponentText(Utils.localize(""String_Node_Str"")));
      player.addChatComponentMessage(new ChatComponentText(message));
    }
  }
}","public static void makeProgress(EntityPlayer player,String key){
  if (player.worldObj.isRemote)   return;
  int progress=getProgress(player,key);
  NBTTagCompound tag=getTag(player);
  if (progress < EurekaRegistry.getMaxValue(key)) {
    setKey(tag,key + ""String_Node_Str"",progress + EurekaRegistry.getIncrement(key));
  }
  if (progress >= EurekaRegistry.getMaxValue(key)) {
    if (!isUnlocked(player,key)) {
      setKey(tag,key + ""String_Node_Str"",true);
      String message=Utils.localize(""String_Node_Str"" + key + ""String_Node_Str"");
      player.addChatMessage(new ChatComponentText(Utils.localize(""String_Node_Str"")));
      player.addChatComponentMessage(new ChatComponentText(message));
    }
  }
}",0.9727403156384504
34933,"/** 
 * Used to check if the player can use this or not, call the eureka system here for the check or do your own check
 */
boolean isAllowed();","/** 
 * Used to check if the player can use this or not, call the eureka system here for the check or do your own check
 */
boolean isAllowed(EntityPlayer player);",0.9381107491856676
34934,boolean isAllowed();,boolean isAllowed(EntityPlayer player);,0.6779661016949152
34935,"@Override public boolean isAllowed(){
  return false;
}","@Override public boolean isAllowed(EntityPlayer player){
  return Eureka.isUnlocked(player,Variables.DustT1Key);
}",0.6390532544378699
34936,"@SubscribeEvent public void onPlyerUsesBlock(PlayerInteractEvent event){
  if (event == null)   return;
  Block block=event.world.getBlock(event.x,event.y,event.z);
  if (block instanceof IEurekaBlock) {
    IEurekaBlock eurekaBlock=(IEurekaBlock)block;
    if (!eurekaBlock.isAllowed()) {
      World world=event.world;
      ItemStack[] stackArray=eurekaBlock.getComponents();
      for (      ItemStack stack : stackArray)       Utils.dropItemstack(world,event.x,event.y,event.z,stack);
      if (!world.isRemote)       world.setBlock(event.x,event.y,event.z,Blocks.air);
      world.markBlockForUpdate(event.x,event.y,event.z);
      if (world.isRemote)       event.entityPlayer.addChatComponentMessage(new ChatComponentText(((IEurekaBlock)block).getMessage()));
    }
  }
}","@SubscribeEvent public void onPlyerUsesBlock(PlayerInteractEvent event){
  if (event == null)   return;
  Block block=event.world.getBlock(event.x,event.y,event.z);
  if (block instanceof IEurekaBlock) {
    IEurekaBlock eurekaBlock=(IEurekaBlock)block;
    World world=event.world;
    if (!world.isRemote) {
      if (!eurekaBlock.isAllowed(event.entityPlayer)) {
        ItemStack[] stackArray=eurekaBlock.getComponents();
        for (        ItemStack stack : stackArray)         Utils.dropItemstack(world,event.x,event.y,event.z,stack);
        if (!world.isRemote)         world.setBlock(event.x,event.y,event.z,Blocks.air);
        world.markBlockForUpdate(event.x,event.y,event.z);
        event.entityPlayer.addChatComponentMessage(new ChatComponentText(((IEurekaBlock)block).getMessage()));
      }
    }
  }
}",0.906816760475297
34937,"@SubscribeEvent public void onItemUse(PlayerUseItemEvent event){
  if (event == null)   return;
  Item item=event.item.getItem();
  if (item instanceof IEurekaItem) {
    IEurekaItem eurekaItem=(IEurekaItem)item;
    if (!eurekaItem.isAllowed()) {
      event.setCanceled(true);
      if (event.entityPlayer != null)       event.entityPlayer.addChatComponentMessage(new ChatComponentText(eurekaItem.getMessage()));
    }
  }
}","@SubscribeEvent public void onItemUse(PlayerUseItemEvent event){
  if (event == null)   return;
  Item item=event.item.getItem();
  if (item instanceof IEurekaItem) {
    IEurekaItem eurekaItem=(IEurekaItem)item;
    if (!eurekaItem.isAllowed(event.entityPlayer)) {
      event.setCanceled(true);
      if (event.entityPlayer != null)       event.entityPlayer.addChatComponentMessage(new ChatComponentText(eurekaItem.getMessage()));
    }
  }
}",0.9793103448275862
34938,"public void addDusts(String metal){
  ArrayList<ItemStack> list;
  ItemStack dust=null;
  list=OreDictionary.getOres(""String_Node_Str"" + metal);
  if (list.isEmpty())   return;
  list=OreDictionary.getOres(""String_Node_Str"" + metal);
  if (list.isEmpty())   return;
  itemDust=new ItemDust(metal);
  GameRegistry.registerItem(itemDust,""String_Node_Str"" + metal);
  OreDictionary.registerOre(""String_Node_Str"" + metal,itemDust);
  GameRegistry.addSmelting(itemDust,OreDictionary.getOres(""String_Node_Str"" + metal).get(0),0);
  dust=new ItemStack(itemDust);
  dust.stackSize=2;
  for (  ItemStack stack : list)   DusterRecepies.addDusterRecepie(stack,dust);
  list=OreDictionary.getOres(""String_Node_Str"" + metal);
  for (  ItemStack stack : list)   DusterRecepies.addDusterRecepie(stack,dust);
}","public void addDusts(String metal){
  ArrayList<ItemStack> list;
  ItemStack dust=null;
  list=OreDictionary.getOres(""String_Node_Str"" + metal);
  if (list.isEmpty())   return;
  list=OreDictionary.getOres(""String_Node_Str"" + metal);
  if (list.isEmpty())   return;
  itemDust=new ItemDust(metal);
  GameRegistry.registerItem(itemDust,""String_Node_Str"" + metal);
  OreDictionary.registerOre(""String_Node_Str"" + metal,itemDust);
  GameRegistry.addSmelting(itemDust,OreDictionary.getOres(""String_Node_Str"" + metal).get(0),0);
  dust=new ItemStack(itemDust);
  dust.stackSize=2;
  for (  ItemStack stack : list)   DusterRecepies.addDusterRecepie(stack,dust);
  list=OreDictionary.getOres(""String_Node_Str"" + metal);
  dust.stackSize=1;
  for (  ItemStack stack : list)   DusterRecepies.addDusterRecepie(stack,dust);
}",0.9875621890547264
34939,"/** 
 * This function must be called with the intent Action as configured in the DataWedge Application
 */
public void setDataWedgeIntentAction(string action){
  this.dataWedgeAction=action;
}","/** 
 * This function must be called with the intent Action as configured in the DataWedge Application
 */
public void setDataWedgeIntentAction(String action){
  Log.i(TAG,""String_Node_Str"" + action);
  if (action == null || ""String_Node_Str"".equals(action))   return;
  this.dataWedgeAction=action;
}",0.7586206896551724
34940,"public void start(){
  Log.i(TAG,""String_Node_Str"");
  if (hasInitialized) {
    return;
  }
synchronized (stateLock) {
    if (hasInitialized) {
      return;
    }
    Log.i(TAG,""String_Node_Str"");
    applicationContext.registerReceiver(dataReceiver,new IntentFilter(dataWedgeAction));
    enableScanner(true);
    hasInitialized=true;
  }
}","public void start(){
  Log.i(TAG,""String_Node_Str"");
  if (hasInitialized) {
    return;
  }
synchronized (stateLock) {
    if (hasInitialized) {
      return;
    }
    Log.i(TAG,""String_Node_Str"" + dataWedgeAction);
    applicationContext.registerReceiver(dataReceiver,new IntentFilter(dataWedgeAction));
    enableScanner(true);
    hasInitialized=true;
  }
}",0.9745042492917848
34941,"protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  boolean isMultipart=ServletFileUpload.isMultipartContent(request);
  if (isMultipart) {
    FileItemFactory factory=new DiskFileItemFactory();
    ServletFileUpload upload=new ServletFileUpload(factory);
    String to=null;
    InputStream fileStream=null;
    try {
      upload.setFileSizeMax(50 * 1024 * 1024);
      List items=upload.parseRequest(request);
      Iterator iterator=items.iterator();
      while (iterator.hasNext()) {
        FileItem item=(FileItem)iterator.next();
        String name=item.getFieldName();
        InputStream stream=item.getInputStream();
        if (item.isFormField()) {
          if (name.equals(""String_Node_Str"")) {
            to=Streams.asString(stream);
          }
        }
 else         if (name.equals(""String_Node_Str"")) {
          fileStream=stream;
        }
      }
      if (to == null || fileStream == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      File file=new File(to);
      if (file.isDirectory()) {
        throw new IllegalArgumentException(""String_Node_Str"" + to + ""String_Node_Str"");
      }
      if (file.exists()) {
        if (!file.delete() || !file.createNewFile()) {
          throw new Exception(""String_Node_Str"");
        }
      }
 else       if (!file.getParentFile().mkdirs() || !file.createNewFile()) {
        throw new Exception(""String_Node_Str"");
      }
      if (!file.canWrite()) {
        throw new Exception(""String_Node_Str"");
      }
      OutputStream dst=new FileOutputStream(file);
      Streams.copy(fileStream,dst,true);
      response.getWriter().write(""String_Node_Str"");
    }
 catch (    Exception e) {
      System.out.print(e.getMessage());
      response.getWriter().write(""String_Node_Str"");
      throw new ServletException(e.getMessage(),e);
    }
  }
}","protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  boolean isMultipart=ServletFileUpload.isMultipartContent(request);
  if (isMultipart) {
    FileItemFactory factory=new DiskFileItemFactory();
    ServletFileUpload upload=new ServletFileUpload(factory);
    String to=null;
    InputStream fileStream=null;
    try {
      upload.setFileSizeMax(50 * 1024 * 1024);
      List items=upload.parseRequest(request);
      Iterator iterator=items.iterator();
      while (iterator.hasNext()) {
        FileItem item=(FileItem)iterator.next();
        String name=item.getFieldName();
        InputStream stream=item.getInputStream();
        if (item.isFormField()) {
          if (name.equals(""String_Node_Str"")) {
            to=Streams.asString(stream);
          }
        }
 else         if (name.equals(""String_Node_Str"")) {
          fileStream=stream;
        }
      }
      if (to == null || fileStream == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      File file=new File(to);
      if (file.isDirectory()) {
        throw new IllegalArgumentException(""String_Node_Str"" + to + ""String_Node_Str"");
      }
      if (file.exists()) {
        if (!file.delete() || !file.createNewFile()) {
          throw new Exception(""String_Node_Str"");
        }
      }
 else       if (!file.getParentFile().exists() && !file.getParentFile().mkdirs() || !file.createNewFile()) {
        throw new Exception(""String_Node_Str"");
      }
      if (!file.canWrite()) {
        throw new Exception(""String_Node_Str"");
      }
      OutputStream dst=new FileOutputStream(file);
      Streams.copy(fileStream,dst,true);
      response.getWriter().write(""String_Node_Str"");
    }
 catch (    Exception e) {
      System.out.print(e.getMessage());
      response.getWriter().write(""String_Node_Str"");
      throw new ServletException(e.getMessage(),e);
    }
  }
}",0.991177996886352
34942,"public String init(ServletContext context){
  dir=Settings.getString(""String_Node_Str"",dir);
  loaderType=Settings.getString(""String_Node_Str"",loaderType);
  if (loaderType.equals(""String_Node_Str"")) {
    dir=context.getRealPath(dir);
  }
  if (map == null) {
    reloadMap();
  }
  return dir;
}","public String init(ServletContext context){
  dir=Settings.getString(""String_Node_Str"",dir);
  loaderType=Settings.getString(""String_Node_Str"",loaderType);
  if (loaderType.equals(""String_Node_Str"")) {
    if (!dir.startsWith(""String_Node_Str"")) {
      dir=""String_Node_Str"" + dir;
    }
    dir=context.getRealPath(dir);
  }
  if (map == null) {
    reloadMap();
  }
  return dir;
}",0.8722466960352423
34943,"public String add(String id,Boolean deffer,String prefix,String affix,Boolean withPkg){
  if (!contains(id)) {
    return id;
  }
  JSONObject node=map.getNode(id);
  if (node.containsKey(""String_Node_Str"") && ""String_Node_Str"".equals(node.getString(""String_Node_Str""))) {
    deffer=false;
  }
  if (loaded.containsKey(id) && loaded.get(id) == deffer || deffer && loaded.containsKey(id) && !loaded.get(id)) {
    return getUri(id,true);
  }
 else   if (loaded.containsKey(id) && !deffer && loaded.get(id)) {
    remove(id,true);
  }
  Res item=new Res();
  item.setId(id);
  if (inspect) {
    if (stack.peek().getChildren() == null) {
      stack.peek().setChildren(new ArrayList<Res>());
    }
    stack.peek().getChildren().add(item);
    stack.add(item);
  }
  loaded.put(id,deffer);
  String pkg=(String)node.get(""String_Node_Str"");
  String uri=node.getString(""String_Node_Str"");
  if (withPkg && pkg != null) {
    JSONObject pkgNode=map.getNode(pkg,""String_Node_Str"");
    uri=pkgNode.getString(""String_Node_Str"");
    if (pkgNode.containsKey(""String_Node_Str"")) {
      for (      Object dep : pkgNode.getJSONArray(""String_Node_Str"")) {
        loaded.put(dep.toString(),deffer);
        if (inspect) {
          Res has=new Res();
          has.setId(dep.toString());
          if (item.getChildren() == null) {
            item.setChildren(new ArrayList<Res>());
          }
          item.getChildren().add(has);
        }
      }
    }
  }
  if (node.containsKey(""String_Node_Str"")) {
    JSONArray deps=node.getJSONArray(""String_Node_Str"");
    for (    Object dep : deps) {
      this.add(dep.toString(),deffer,prefix,affix,withPkg);
    }
  }
  if (node.containsKey(""String_Node_Str"")) {
    JSONObject extras=node.getJSONObject(""String_Node_Str"");
    if (extras.containsKey(""String_Node_Str"")) {
      JSONArray async=node.getJSONArray(""String_Node_Str"");
      for (      Object dep : async) {
        this.add(dep.toString(),true,prefix,affix,withPkg);
      }
    }
  }
  if (inspect) {
    stack.pop();
  }
  String type=node.getString(""String_Node_Str"");
  if (!type.equals(""String_Node_Str"") && !type.equals(""String_Node_Str"")) {
    return getUri(id,true);
  }
  item.setUri(uri);
  item.setPrefix(prefix);
  item.setAffix(affix);
  item.setType(type);
  item.setAsync(deffer);
  res.add(item);
  return getUri(id,true);
}","public String add(String id,Boolean deffer,String prefix,String affix,Boolean withPkg){
  if (!contains(id)) {
    return id;
  }
  JSONObject node=map.getNode(id);
  if (node.containsKey(""String_Node_Str"") && ""String_Node_Str"".equals(node.getString(""String_Node_Str""))) {
    deffer=false;
  }
  if (loaded.containsKey(id) && loaded.get(id) == deffer || deffer && loaded.containsKey(id) && !loaded.get(id)) {
    return getUri(id,true);
  }
 else   if (loaded.containsKey(id) && !deffer && loaded.get(id)) {
    remove(id,true);
  }
  Res item=new Res();
  item.setId(id);
  if (inspect) {
    if (stack.peek().getChildren() == null) {
      stack.peek().setChildren(new ArrayList<Res>());
    }
    stack.peek().getChildren().add(item);
    stack.add(item);
  }
  loaded.put(id,deffer);
  String pkg=(String)node.get(""String_Node_Str"");
  String uri=node.getString(""String_Node_Str"");
  if (withPkg && pkg != null) {
    JSONObject pkgNode=map.getNode(pkg,""String_Node_Str"");
    uri=pkgNode.getString(""String_Node_Str"");
    if (pkgNode.containsKey(""String_Node_Str"")) {
      for (      Object dep : pkgNode.getJSONArray(""String_Node_Str"")) {
        loaded.put(dep.toString(),deffer);
        if (inspect) {
          Res has=new Res();
          has.setId(dep.toString());
          if (item.getChildren() == null) {
            item.setChildren(new ArrayList<Res>());
          }
          item.getChildren().add(has);
        }
      }
    }
  }
  if (node.containsKey(""String_Node_Str"")) {
    JSONArray deps=node.getJSONArray(""String_Node_Str"");
    for (    Object dep : deps) {
      this.add(dep.toString(),deffer,prefix,affix,withPkg);
    }
  }
  if (node.containsKey(""String_Node_Str"")) {
    JSONObject extras=node.getJSONObject(""String_Node_Str"");
    if (extras.containsKey(""String_Node_Str"")) {
      JSONArray async=extras.getJSONArray(""String_Node_Str"");
      for (      Object dep : async) {
        this.add(dep.toString(),true,prefix,affix,withPkg);
      }
    }
  }
  if (inspect) {
    stack.pop();
  }
  String type=node.getString(""String_Node_Str"");
  if (!type.equals(""String_Node_Str"") && !type.equals(""String_Node_Str"")) {
    return getUri(id,true);
  }
  item.setUri(uri);
  item.setPrefix(prefix);
  item.setAffix(affix);
  item.setType(type);
  item.setAsync(deffer);
  res.add(item);
  return getUri(id,true);
}",0.9978714346530438
34944,"public void init(FilterConfig config) throws ServletException {
  ServletContext context=config.getServletContext();
  Settings.setApplicationAttribute(ServletContext.class.getName(),context);
  Settings.load(context.getResourceAsStream(Settings.DEFAULT_PATH));
  map=new MapJson();
}","public void init(FilterConfig config) throws ServletException {
}",0.3724928366762177
34945,"public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws ServletException, IOException {
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)resp;
  if (handleRewrite(request,response)) {
    return;
  }
 else   if (handlePreview(request,response)) {
    return;
  }
  chain.doFilter(req,resp);
}","public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws ServletException, IOException {
  ServletContext context=((HttpServletRequest)req).getSession().getServletContext();
  Settings.setApplicationAttribute(ServletContext.class.getName(),context);
  Settings.load(context.getResourceAsStream(Settings.DEFAULT_PATH));
  map=new MapJson();
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)resp;
  if (handleRewrite(request,response)) {
    return;
  }
 else   if (handlePreview(request,response)) {
    return;
  }
  chain.doFilter(req,resp);
}",0.7181008902077152
34946,"public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws ServletException, IOException {
  ServletContext context=((HttpServletRequest)req).getSession().getServletContext();
  Settings.init(context);
  map=MapCache.getInstance();
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)resp;
  if (handleRewrite(request,response)) {
    return;
  }
 else   if (handlePreview(request,response)) {
    return;
  }
  chain.doFilter(req,resp);
}","public void doFilter(ServletRequest req,ServletResponse resp,FilterChain chain) throws ServletException, IOException {
  map=MapCache.getInstance();
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)resp;
  if (handleRewrite(request,response)) {
    return;
  }
 else   if (handlePreview(request,response)) {
    return;
  }
  chain.doFilter(req,resp);
}",0.8571428571428571
34947,"public void contextInitialized(ServletContextEvent event){
  ServletContext ctx=event.getServletContext();
  String mdir=ctx.getRealPath(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + mdir);
  timer.schedule(new ListenerTask(mdir),sec_start,sec);
}","public void contextInitialized(ServletContextEvent event){
  ServletContext ctx=event.getServletContext();
  Settings.init(ctx);
  MapCache mc=MapCache.getInstance();
  mc.init(ctx);
  System.out.println(""String_Node_Str"" + mc.mapPath);
  timer.schedule(new ListenerTask(mc.mapPath),sec_start,sec);
}",0.701067615658363
34948,"public void contextDestroyed(ServletContextEvent event){
  event.getServletContext().log(""String_Node_Str"" + mapDir);
  timer.cancel();
}","public void contextDestroyed(ServletContextEvent event){
  event.getServletContext().log(""String_Node_Str"" + MapCache.getInstance().mapPath);
  timer.cancel();
}",0.8993288590604027
34949,"public void reloadMap(){
  if (map != null) {
    System.out.println(""String_Node_Str"" + this.dir + ""String_Node_Str""+ map.hashCode()+ ""String_Node_Str"");
  }
  map=loadAllMap(dir);
  System.out.println(""String_Node_Str"" + map.hashCode() + ""String_Node_Str"");
}","public void reloadMap(){
  if (map != null) {
    System.out.println(""String_Node_Str"" + mapDir + ""String_Node_Str""+ map.hashCode()+ ""String_Node_Str"");
  }
  map=loadAllMap(dir);
  System.out.println(""String_Node_Str"" + map.hashCode() + ""String_Node_Str"");
}",0.9807692307692308
34950,"protected JSONObject loadJson(String filename){
  InputStream input=null;
  if (this.loaderType.equals(""String_Node_Str"")) {
    File file=new File(dir,filename);
    if (file.canRead()) {
      try {
        input=new FileInputStream(file.getAbsolutePath());
      }
 catch (      FileNotFoundException ex) {
        input=null;
      }
    }
  }
 else {
    if (!dir.isEmpty()) {
      filename=dir + ""String_Node_Str"" + filename;
    }
    ServletContext ctx=(ServletContext)Settings.getApplicationAttribute(ServletContext.class.getName());
    if (ctx == null) {
      System.out.println(""String_Node_Str"");
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    input=ctx.getResourceAsStream(filename);
  }
  if (input == null) {
    return null;
  }
  String data=readStream(input);
  if (data != null) {
    return JSONObject.parseObject(data);
  }
  return null;
}","protected JSONObject loadJson(String filename){
  FileInputStream input=null;
  File file=null;
  if (loaderType.equals(""String_Node_Str"")) {
    file=new File(filename);
  }
 else   if (!mapPath.isEmpty()) {
    file=new File(mapPath,filename);
  }
  try {
    if (file.canRead()) {
      System.out.println(""String_Node_Str"" + file.toPath());
      input=new FileInputStream(file);
    }
  }
 catch (  Exception ex) {
    input=null;
  }
  if (input == null) {
    return null;
  }
  String data=readStream(input);
  if (data != null) {
    return JSONObject.parseObject(data);
  }
  return null;
}",0.4744623655913978
34951,"private MapCache(){
  dir=Settings.getString(""String_Node_Str"",dir);
  loaderType=Settings.getString(""String_Node_Str"",loaderType);
  if (map == null) {
    this.reloadMap();
  }
}","private MapCache(){
}",0.208955223880597
34952,"protected JSONObject loadAllMap(String filePath){
  JSONObject resMap=new JSONObject();
  JSONObject pkgMap=new JSONObject();
  ServletContext ctx=(ServletContext)Settings.getApplicationAttribute(ServletContext.class.getName());
  if (ctx == null) {
    System.out.println(""String_Node_Str"");
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String realDirPath=ctx.getRealPath(filePath);
  System.out.println(""String_Node_Str"" + realDirPath);
  File root=new File(realDirPath);
  File[] files=root.listFiles();
  for (  File file : files) {
    if (file.isDirectory()) {
      this.loadAllMap(file.getAbsolutePath());
    }
 else {
      String fileName=file.getName();
      if (fileName.matches(""String_Node_Str"")) {
        JSONObject json=this.loadJson(fileName);
        if (json != null) {
          System.out.println(""String_Node_Str"" + fileName);
          resMap=mergeJSONObjects(resMap,json.getJSONObject(""String_Node_Str""));
          pkgMap=mergeJSONObjects(pkgMap,json.getJSONObject(""String_Node_Str""));
        }
      }
    }
  }
  JSONObject newMap=new JSONObject();
  newMap.put(""String_Node_Str"",resMap);
  newMap.put(""String_Node_Str"",pkgMap);
  return newMap;
}","protected JSONObject loadAllMap(String filePath){
  JSONObject resMap=new JSONObject();
  JSONObject pkgMap=new JSONObject();
  System.out.println(""String_Node_Str"" + mapPath);
  File root=new File(mapPath);
  File[] files=root.listFiles();
  for (  File file : files) {
    if (file.isDirectory()) {
      this.loadAllMap(file.getAbsolutePath());
    }
 else {
      String fileName=file.getName();
      if (fileName.matches(""String_Node_Str"")) {
        JSONObject json=this.loadJson(fileName);
        if (json != null) {
          System.out.println(""String_Node_Str"" + fileName);
          resMap=mergeJSONObjects(resMap,json.getJSONObject(""String_Node_Str""));
          pkgMap=mergeJSONObjects(pkgMap,json.getJSONObject(""String_Node_Str""));
        }
      }
    }
  }
  JSONObject newMap=new JSONObject();
  newMap.put(""String_Node_Str"",resMap);
  newMap.put(""String_Node_Str"",pkgMap);
  return newMap;
}",0.8028436018957346
34953,"protected Boolean handlePreview(HttpServletRequest req,HttpServletResponse resp) throws IOException, ServletException {
  String path=req.getServletPath();
  URL url=req.getServletContext().getResource(path);
  if (url == null) {
    Pattern reg=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Matcher matcher=reg.matcher(path);
    if (matcher.find()) {
      String ns=matcher.group(1);
      String file=matcher.group(2);
      try {
        JSONObject info=ns != null ? map.getNode(ns + ""String_Node_Str"" + file) : map.getNode(""String_Node_Str"" + file);
        if (info != null) {
          String resolved=info.getString(""String_Node_Str"");
          if (resolved.endsWith(""String_Node_Str"")) {
            req.getRequestDispatcher(path).forward(req,resp);
          }
 else {
            resolved=Settings.getString(""String_Node_Str"",""String_Node_Str"") + resolved;
            req.getRequestDispatcher(resolved).forward(req,resp);
          }
          return true;
        }
 else {
          if (!path.endsWith(""String_Node_Str"")) {
            path+=""String_Node_Str"";
          }
          req.getRequestDispatcher(path).forward(req,resp);
          return true;
        }
      }
 catch (      Exception err) {
        System.out.println(err.getMessage());
      }
    }
  }
 else   if (path.endsWith(""String_Node_Str"")) {
    resp.addHeader(""String_Node_Str"",""String_Node_Str"");
  }
  return false;
}","protected Boolean handlePreview(HttpServletRequest req,HttpServletResponse resp) throws IOException, ServletException {
  String path=req.getServletPath();
  URL url=req.getServletContext().getResource(path);
  if (url == null && !path.endsWith(""String_Node_Str"")) {
    Pattern reg=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Matcher matcher=reg.matcher(path);
    if (matcher.find()) {
      String ns=matcher.group(1);
      String file=matcher.group(2);
      JSONObject info=ns != null ? map.getNode(ns + ""String_Node_Str"" + file) : map.getNode(""String_Node_Str"" + file);
      if (info != null) {
        String resolved=info.getString(""String_Node_Str"");
        if (resolved.endsWith(""String_Node_Str"")) {
          req.getRequestDispatcher(path).forward(req,resp);
        }
 else {
          resolved=Settings.getString(""String_Node_Str"",""String_Node_Str"") + resolved;
          req.getRequestDispatcher(resolved).forward(req,resp);
        }
        return true;
      }
 else {
        if (!path.endsWith(""String_Node_Str"")) {
          path+=""String_Node_Str"";
        }
        req.getRequestDispatcher(path).forward(req,resp);
        return true;
      }
    }
  }
 else   if (path.endsWith(""String_Node_Str"")) {
    resp.addHeader(""String_Node_Str"",""String_Node_Str"");
  }
  return false;
}",0.8346627991298042
34954,"public final WindowManager.LayoutParams getParam(){
  return new WindowManager.LayoutParams(Util.dp(48,getContext()),Util.dp(48,getContext()),WindowManager.LayoutParams.TYPE_PHONE,WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE| WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL,PixelFormat.TRANSLUCENT);
}","public final WindowManager.LayoutParams getParam(){
  return new WindowManager.LayoutParams(Util.dp(48,getContext()),Util.dp(48,getContext()),WindowManager.LayoutParams.TYPE_SYSTEM_ERROR,WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE| WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL,PixelFormat.TRANSLUCENT);
}",0.9791411042944784
34955,"@SuppressWarnings(""String_Node_Str"") private ValidationResult validateColumn(Object toBeValidated,AbstractAttribute attribute,ColumnValidator[] columnValidators) throws NoSuchFieldException, IllegalAccessException, InstantiationException, java.lang.reflect.InvocationTargetException, NoSuchMethodException {
  Object entityValue=getStaticFieldValue(toBeValidated.getClass(),attribute.fieldName(),toBeValidated);
  for (  ColumnValidator columnValidator : columnValidators) {
    Class<? extends Annotation> validatorAnnotation=columnValidator.getValidatorAnnotation();
    Class<?> proxyClass=Proxy.getProxyClass(Thread.currentThread().getContextClassLoader(),validatorAnnotation);
    Annotation annotationInstance=(Annotation)proxyClass.getConstructor(new Class[]{InvocationHandler.class}).newInstance(new Object[]{new DatabaseValidatorAnnotationHandler(columnValidator.getParams())});
    Class<? extends CustomValidator<?,?>> validatorClass=columnValidator.getValidatorClass();
    CustomValidator<Annotation,Object> customValidator=(CustomValidator<Annotation,Object>)validatorClass.getConstructor().newInstance();
    ValidationResult result=customValidator.onValidate(validatorAnnotation.cast(annotationInstance),entityValue);
    if (!result.isValid()) {
      return result;
    }
  }
  return ValidationResult.valid();
}","@SuppressWarnings(""String_Node_Str"") private ValidationResult validateColumn(Object toBeValidated,AbstractAttribute attribute,ColumnValidator[] columnValidators) throws NoSuchFieldException, IllegalAccessException, InstantiationException, java.lang.reflect.InvocationTargetException, NoSuchMethodException {
  Object entityValue=getStaticFieldValue(toBeValidated.getClass(),attribute.fieldName(),toBeValidated);
  for (  ColumnValidator columnValidator : columnValidators) {
    Class<? extends Annotation> validatorAnnotation=columnValidator.getValidatorAnnotation();
    Class<?> proxyClass=Proxy.getProxyClass(this.getClass().getClassLoader(),validatorAnnotation);
    Annotation annotationInstance=(Annotation)proxyClass.getConstructor(new Class[]{InvocationHandler.class}).newInstance(new Object[]{new DatabaseValidatorAnnotationHandler(columnValidator.getParams())});
    Class<? extends CustomValidator<?,?>> validatorClass=columnValidator.getValidatorClass();
    CustomValidator<Annotation,Object> customValidator=(CustomValidator<Annotation,Object>)validatorClass.getConstructor().newInstance();
    ValidationResult result=customValidator.onValidate(validatorAnnotation.cast(annotationInstance),entityValue);
    if (!result.isValid()) {
      return result;
    }
  }
  return ValidationResult.valid();
}",0.981859410430839
34956,"private ContentValues collectToOneAssociatedValuesAndSaveAssociatedObjects(final Object data,EntityData entityData,final int currentDepth){
  ContentValues contentValuesForeignKeys=new ContentValues(0);
  if (currentDepth >= maxDepth) {
    return contentValuesForeignKeys;
  }
  for (  Field toOneAssociatedField : entityData.toOneAssociations) {
    toOneAssociatedField.setAccessible(true);
    Object associatedObject=getFieldValue(data,toOneAssociatedField);
    if (associatedObject != null) {
      if (newUnsavedObjects.contains(associatedObject)) {
        Collection<ToOneUpdate> collection=toOneUpdaters.get(data);
        if (collection == null) {
          collection=new ArrayList<DatabaseSaver.ToOneUpdate>();
          toOneUpdaters.put(data,collection);
        }
        collection.add(new ToOneUpdate(SchemaConstants.FOREIGN_KEY + toOneAssociatedField.getName(),associatedObject));
      }
 else {
        int associationId=save(associatedObject,currentDepth + 1);
        contentValuesForeignKeys.put(SchemaConstants.FOREIGN_KEY + toOneAssociatedField.getName(),associationId);
      }
    }
 else {
      contentValuesForeignKeys.putNull(SchemaConstants.FOREIGN_KEY + toOneAssociatedField.getName());
    }
  }
  return contentValuesForeignKeys;
}","private ContentValues collectToOneAssociatedValuesAndSaveAssociatedObjects(final Object data,EntityData entityData,final int currentDepth){
  ContentValues contentValuesForeignKeys=new ContentValues(0);
  if (currentDepth >= maxDepth) {
    if (entityData.autoIncrement) {
      return contentValuesForeignKeys;
    }
 else {
      return resolveExistingForeignKeyValues(data,entityData);
    }
  }
  for (  Field toOneAssociatedField : entityData.toOneAssociations) {
    toOneAssociatedField.setAccessible(true);
    Object associatedObject=getFieldValue(data,toOneAssociatedField);
    if (associatedObject != null) {
      if (newUnsavedObjects.contains(associatedObject)) {
        Collection<ToOneUpdate> collection=toOneUpdaters.get(data);
        if (collection == null) {
          collection=new ArrayList<DatabaseSaver.ToOneUpdate>();
          toOneUpdaters.put(data,collection);
        }
        collection.add(new ToOneUpdate(SchemaConstants.FOREIGN_KEY + toOneAssociatedField.getName(),associatedObject));
      }
 else {
        int associationId=save(associatedObject,currentDepth + 1);
        contentValuesForeignKeys.put(SchemaConstants.FOREIGN_KEY + toOneAssociatedField.getName(),associationId);
      }
    }
 else {
      contentValuesForeignKeys.putNull(SchemaConstants.FOREIGN_KEY + toOneAssociatedField.getName());
    }
  }
  return contentValuesForeignKeys;
}",0.9544599171998496
34957,"@Test public void testSaveAndLoadToOneWithDepth1(){
  Comment c1=new Comment(""String_Node_Str"");
  EntityService<Comment> entityService=entityService(Comment.class);
  entityService.save(newArrayList(c1));
  assertInsertsAndUpdatesAmountToDB(1,0);
  Comment comment=entityService.get(c1.getId());
  assertThat(comment.getAuthor()).isNull();
  Author a=new Author();
  a.setName(""String_Node_Str"");
  Comment c2=new Comment(""String_Node_Str"");
  a.setComments(newArrayList(c1,c2));
  c1.setAuthor(a);
  c2.setAuthor(a);
  entityService.save(c1,1);
  assertInsertsAndUpdatesAmountToDB(1,1);
  assertThat(entityService.get()).hasSize(1);
  Comment savedComment=entityService.get(c1.getId());
  assertThat(savedComment.getAuthor()).isNull();
  entityService.resolveAssociations(savedComment,1);
  Author savedAuthor=savedComment.getAuthor();
  assertThat(savedAuthor).isNotNull();
  assertThat(savedAuthor.getComments()).isNull();
  assertThat(savedAuthor.getTexts()).isNull();
}","@Test public void testSaveAndLoadToOneWithDepth1(){
  Comment c1=new Comment(""String_Node_Str"");
  EntityService<Comment> entityService=entityService(Comment.class);
  entityService.save(newArrayList(c1));
  assertInsertsAndUpdatesAmountToDB(1,0);
  Comment comment=entityService.get(c1.getId());
  assertThat(comment.getAuthor()).isNull();
  Author a=new Author();
  a.setName(""String_Node_Str"");
  Comment c2=new Comment(""String_Node_Str"");
  a.setComments(newArrayList(c1,c2));
  c1.setAuthor(a);
  c2.setAuthor(a);
  entityService.save(c1,1);
  assertInsertsAndUpdatesAmountToDB(1,1);
  assertThat(entityService.get()).hasSize(1);
  Integer id=c1.getId();
  Comment savedComment=entityService.get(id);
  assertThat(savedComment.getAuthor()).isNull();
  entityService.save(savedComment,0);
  savedComment=entityService.get(id);
  assertThat(savedComment.getAuthor()).isNull();
  entityService.resolveAssociations(savedComment,1);
  Author savedAuthor=savedComment.getAuthor();
  assertThat(savedAuthor).isNotNull();
  assertThat(savedAuthor.getComments()).isNull();
  assertThat(savedAuthor.getTexts()).isNull();
}",0.8250478011472275
34958,"private void buildForeignKey(final JoinColumn joinColumn,final Attribute<?,?> jpaAttribute) throws ODataJPAModelException, ODataJPARuntimeException {
  joinColumnNames=joinColumnNames == null ? new ArrayList<String[]>() : joinColumnNames;
  String[] name={null,null};
  name[0]=joinColumn.name().equals(""String_Node_Str"") == true ? jpaAttribute.getName() : joinColumn.name();
  EntityType<?> referencedEntityType=null;
  if (jpaAttribute.isCollection()) {
    referencedEntityType=metaModel.entity(((PluralAttribute<?,?,?>)currentAttribute).getElementType().getJavaType());
  }
 else {
    referencedEntityType=metaModel.entity(jpaAttribute.getJavaType());
  }
  if (joinColumn.referencedColumnName().equals(""String_Node_Str"")) {
    for (    Attribute<?,?> referencedAttribute : referencedEntityType.getAttributes()) {
      if (referencedAttribute.getPersistentAttributeType() == PersistentAttributeType.BASIC && ((SingularAttribute<?,?>)referencedAttribute).isId()) {
        AnnotatedElement annotatedElement=(AnnotatedElement)referencedAttribute.getJavaMember();
        Column referencedColumn=null;
        if (annotatedElement != null) {
          referencedColumn=annotatedElement.getAnnotation(Column.class);
        }
        if (referencedColumn != null) {
          name[1]=referencedColumn.name();
        }
 else {
          name[1]=referencedAttribute.getName();
        }
        joinColumnNames.add(name);
        currentRefAttribute=referencedAttribute;
        break;
      }
    }
  }
 else {
    for (    Attribute<?,?> referencedAttribute : referencedEntityType.getAttributes()) {
      AnnotatedElement annotatedElement2=(AnnotatedElement)referencedAttribute.getJavaMember();
      if (annotatedElement2 != null) {
        Column referencedColumn=annotatedElement2.getAnnotation(Column.class);
        if (referencedColumn != null && referencedColumn.name().equals((joinColumn.referencedColumnName()))) {
          name[1]=referencedColumn.name();
          joinColumnNames.add(name);
          currentRefAttribute=referencedAttribute;
          break;
        }
      }
    }
  }
  if (currentRefAttribute == null) {
    throw ODataJPAModelException.throwException(ODataJPAModelException.REF_ATTRIBUTE_NOT_FOUND.addContent(referencedEntityType.getName()),null);
  }
  if (joinColumn.insertable() && joinColumn.updatable()) {
    currentSimpleProperty=new SimpleProperty();
    properties.add(buildSimpleProperty(currentRefAttribute,currentSimpleProperty,joinColumn));
    if (joinColumn.nullable()) {
      currentSimpleProperty.getFacets();
    }
  }
}","private void buildForeignKey(final JoinColumn joinColumn,final Attribute<?,?> jpaAttribute) throws ODataJPAModelException, ODataJPARuntimeException {
  joinColumnNames=joinColumnNames == null ? new ArrayList<String[]>() : joinColumnNames;
  String[] name={null,null};
  name[0]=joinColumn.name().equals(""String_Node_Str"") == true ? jpaAttribute.getName() : joinColumn.name();
  EntityType<?> referencedEntityType=null;
  if (jpaAttribute.isCollection()) {
    referencedEntityType=metaModel.entity(((PluralAttribute<?,?,?>)currentAttribute).getElementType().getJavaType());
  }
 else {
    referencedEntityType=metaModel.entity(jpaAttribute.getJavaType());
  }
  if (joinColumn.referencedColumnName().equals(""String_Node_Str"")) {
    for (    Attribute<?,?> referencedAttribute : referencedEntityType.getAttributes()) {
      if (referencedAttribute.getPersistentAttributeType() == PersistentAttributeType.BASIC && ((SingularAttribute<?,?>)referencedAttribute).isId()) {
        AnnotatedElement annotatedElement=(AnnotatedElement)referencedAttribute.getJavaMember();
        Column referencedColumn=null;
        if (annotatedElement != null) {
          referencedColumn=annotatedElement.getAnnotation(Column.class);
        }
        if (referencedColumn != null) {
          name[1]=referencedColumn.name();
        }
 else {
          name[1]=referencedAttribute.getName();
        }
        joinColumnNames.add(name);
        currentRefAttribute=referencedAttribute;
        break;
      }
    }
  }
 else {
    for (    Attribute<?,?> referencedAttribute : referencedEntityType.getAttributes()) {
      AnnotatedElement annotatedElement2=(AnnotatedElement)referencedAttribute.getJavaMember();
      if (annotatedElement2 != null) {
        String refColName=getReferenceColumnName(annotatedElement2,referencedAttribute);
        if (refColName.equals((joinColumn.referencedColumnName()))) {
          name[1]=refColName;
          joinColumnNames.add(name);
          currentRefAttribute=referencedAttribute;
          break;
        }
      }
    }
  }
  if (currentRefAttribute == null) {
    throw ODataJPAModelException.throwException(ODataJPAModelException.REF_ATTRIBUTE_NOT_FOUND.addContent(joinColumn.referencedColumnName() + ""String_Node_Str"" + referencedEntityType.getName()),null);
  }
  if (joinColumn.insertable() && joinColumn.updatable()) {
    currentSimpleProperty=new SimpleProperty();
    properties.add(buildSimpleProperty(currentRefAttribute,currentSimpleProperty,joinColumn));
    if (joinColumn.nullable()) {
      currentSimpleProperty.getFacets();
    }
  }
}",0.951625386996904
34959,"@SuppressWarnings(""String_Node_Str"") private List<Attribute<?,?>> sortInAscendingOrder(final Set<?> jpaAttributes){
  List<Attribute<?,?>> jpaAttributeList=new ArrayList<Attribute<?,?>>();
  Iterator itr=null;
  Attribute<?,?> smallestJpaAttribute;
  Attribute<?,?> currentJpaAttribute;
  while (!jpaAttributes.isEmpty()) {
    itr=jpaAttributes.iterator();
    smallestJpaAttribute=(Attribute<?,?>)itr.next();
    while (itr.hasNext()) {
      currentJpaAttribute=(Attribute<?,?>)itr.next();
      if (smallestJpaAttribute.getName().compareTo(currentJpaAttribute.getName()) > 0) {
        smallestJpaAttribute=currentJpaAttribute;
      }
    }
    jpaAttributeList.add(smallestJpaAttribute);
    jpaAttributes.remove(smallestJpaAttribute);
  }
  return jpaAttributeList;
}","@SuppressWarnings(""String_Node_Str"") private List<Attribute<?,?>> sortInAscendingOrder(final Set<?> jpaAttributes){
  List<Attribute<?,?>> jpaAttributeList=new ArrayList<Attribute<?,?>>();
  Attribute<?,?> smallestJpaAttribute;
  Attribute<?,?> currentJpaAttribute;
  while (!jpaAttributes.isEmpty()) {
    Iterator itr=jpaAttributes.iterator();
    smallestJpaAttribute=(Attribute<?,?>)itr.next();
    while (itr.hasNext()) {
      currentJpaAttribute=(Attribute<?,?>)itr.next();
      if (smallestJpaAttribute.getName().compareTo(currentJpaAttribute.getName()) > 0) {
        smallestJpaAttribute=currentJpaAttribute;
      }
    }
    jpaAttributeList.add(smallestJpaAttribute);
    jpaAttributes.remove(smallestJpaAttribute);
  }
  return jpaAttributeList;
}",0.98046875
34960,"/** 
 * Gets the root URI of this service.
 * @return absolute base URI of the request
 */
URI getServiceRoot();","/** 
 * Gets the root URI of this service. This includes any segments which can be found in the preceding segments list.
 * @return absolute base URI of the request
 */
URI getServiceRoot();",0.7417218543046358
34961,"private String getBaseUri(final ODataRequest request){
  String baseUri=request.getPathInfo().getServiceRoot().toASCIIString();
  if (baseUri.endsWith(""String_Node_Str"")) {
    baseUri=baseUri.substring(0,baseUri.length() - 1);
  }
  for (  PathSegment segment : request.getPathInfo().getPrecedingSegments()) {
    baseUri+=""String_Node_Str"" + segment.getPath();
  }
  return baseUri;
}","private String getBaseUri(final ODataRequest request){
  String baseUri=request.getPathInfo().getServiceRoot().toASCIIString();
  if (baseUri.endsWith(""String_Node_Str"")) {
    baseUri=baseUri.substring(0,baseUri.length() - 1);
  }
  return baseUri;
}",0.7441130298273155
34962,"private String getBaseUri() throws BatchException {
  String baseUri=""String_Node_Str"";
  if (batchRequestPathInfo != null && batchRequestPathInfo.getServiceRoot() != null) {
    final String uri=batchRequestPathInfo.getServiceRoot().toASCIIString();
    baseUri=addPathSegements(removeLastSlash(uri));
  }
  return baseUri;
}","private String getBaseUri() throws BatchException {
  String baseUri=""String_Node_Str"";
  if (batchRequestPathInfo != null && batchRequestPathInfo.getServiceRoot() != null) {
    final String uri=batchRequestPathInfo.getServiceRoot().toASCIIString();
    baseUri=removeLastSlash(uri);
  }
  return baseUri;
}",0.9684542586750788
34963,"/** 
 * Create a   {@link CircleStreamBuffer} with given buffer size in bytes.
 * @param bufferSize
 */
public CircleStreamBuffer(final int bufferSize){
  currentAllocateCapacity=bufferSize;
  createNewWriteBuffer();
  inStream=new InternalInputStream(this);
  outStream=new InternalOutputStream(this);
}","/** 
 * Create a   {@link CircleStreamBuffer} with given initial buffer size.
 * @param initialCapacity initial capacity of internal buffer
 */
public CircleStreamBuffer(final int initialCapacity){
  currentAllocateCapacity=initialCapacity;
  createNewWriteBuffer();
  inStream=new InternalInputStream(this);
  outStream=new InternalOutputStream(this);
}",0.7537993920972644
34964,"/** 
 * @param requestedCapacity
 * @return the buffer
 */
private ByteBuffer allocateBuffer(final int requestedCapacity){
  int allocateCapacity=requestedCapacity;
  if (allocateCapacity < currentAllocateCapacity) {
    allocateCapacity=currentAllocateCapacity * NEW_BUFFER_RESIZE_FACTOR;
  }
  if (allocateCapacity > MAX_CAPACITY) {
    allocateCapacity=MAX_CAPACITY;
  }
  currentAllocateCapacity=allocateCapacity;
  return ByteBuffer.allocate(allocateCapacity);
}","/** 
 * Allocate a new buffer with requested capacity
 * @param requestedCapacity minimal capacity of new buffer
 * @return the buffer
 */
private ByteBuffer allocateBuffer(final int requestedCapacity){
  if (requestedCapacity > MAX_CAPACITY) {
    currentAllocateCapacity=MAX_CAPACITY;
    return ByteBuffer.allocate(requestedCapacity);
  }
  if (requestedCapacity <= currentAllocateCapacity) {
    currentAllocateCapacity*=NEW_BUFFER_RESIZE_FACTOR;
    if (currentAllocateCapacity > MAX_CAPACITY) {
      currentAllocateCapacity=MAX_CAPACITY;
    }
  }
 else {
    currentAllocateCapacity=requestedCapacity;
  }
  return ByteBuffer.allocate(currentAllocateCapacity);
}",0.7036059806508356
34965,"private String readFrom(final InputStream stream,final int bufferSize) throws IOException {
  StringBuilder b=new StringBuilder();
  int count;
  byte[] buffer=new byte[bufferSize];
  while ((count=stream.read(buffer)) >= 0) {
    b.append(new String(buffer,0,count));
  }
  return b.toString();
}","private String readFrom(final InputStream stream,final Charset charset,final int bufferSize) throws IOException {
  StringBuilder b=new StringBuilder();
  int count;
  byte[] buffer=new byte[bufferSize];
  while ((count=stream.read(buffer)) >= 0) {
    b.append(new String(buffer,0,count,charset));
  }
  return b.toString();
}",0.9519230769230768
34966,"@SuppressWarnings(""String_Node_Str"") private void write(final Map<String,Object> oDataEntryProperties,final boolean isCreate) throws ODataJPARuntimeException {
  try {
    EdmStructuralType structuralType=null;
    final List<String> keyNames=oDataEntityType.getKeyPropertyNames();
    if (isCreate) {
      jpaEntity=instantiateJPAEntity();
    }
 else     if (jpaEntity == null) {
      throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.RESOURCE_NOT_FOUND,null);
    }
    if (accessModifiersWrite == null) {
      accessModifiersWrite=jpaEntityParser.getAccessModifiers(jpaEntity,oDataEntityType,JPAEntityParser.ACCESS_MODIFIER_SET);
    }
    if (oDataEntityType == null || oDataEntryProperties == null) {
      throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL,null);
    }
    final HashMap<String,String> embeddableKeys=jpaEntityParser.getJPAEmbeddableKeyMap(jpaEntity.getClass().getName());
    Set<String> propertyNames=null;
    if (embeddableKeys != null) {
      setEmbeddableKeyProperty(embeddableKeys,oDataEntityType.getKeyProperties(),oDataEntryProperties,jpaEntity);
      propertyNames=new HashSet<String>();
      propertyNames.addAll(oDataEntryProperties.keySet());
      for (      String key : embeddableKeys.keySet()) {
        propertyNames.remove(key);
      }
    }
 else {
      propertyNames=oDataEntryProperties.keySet();
    }
    for (    String propertyName : propertyNames) {
      EdmTyped edmTyped=(EdmTyped)oDataEntityType.getProperty(propertyName);
      Method accessModifier=null;
switch (edmTyped.getType().getKind()) {
case SIMPLE:
        if (isCreate == false) {
          if (keyNames.contains(edmTyped.getName())) {
            continue;
          }
        }
      accessModifier=accessModifiersWrite.get(propertyName);
    setProperty(accessModifier,jpaEntity,oDataEntryProperties.get(propertyName),(EdmSimpleType)edmTyped.getType());
  break;
case COMPLEX:
structuralType=(EdmStructuralType)edmTyped.getType();
accessModifier=accessModifiersWrite.get(propertyName);
setComplexProperty(accessModifier,jpaEntity,structuralType,(HashMap<String,Object>)oDataEntryProperties.get(propertyName));
break;
case NAVIGATION:
case ENTITY:
if (isCreate) {
structuralType=(EdmStructuralType)edmTyped.getType();
EdmNavigationProperty navProperty=(EdmNavigationProperty)edmTyped;
EdmEntitySet edmRelatedEntitySet=oDataEntitySet.getRelatedEntitySet(navProperty);
List<ODataEntry> relatedEntries=(List<ODataEntry>)oDataEntryProperties.get(propertyName);
if (relatedJPAEntityMap == null) {
relatedJPAEntityMap=new HashMap<String,List<Object>>();
}
List<Object> relatedJPAEntities=new ArrayList<Object>();
JPAEntity relatedEntity=new JPAEntity((EdmEntityType)structuralType,edmRelatedEntitySet,oDataJPAContext);
for (ODataEntry oDataEntry : relatedEntries) {
relatedEntity.setParentJPAEntity(this);
relatedEntity.setViaNavigationProperty(navProperty);
relatedEntity.create(oDataEntry);
if (oDataEntry.getProperties().size() == 0) {
if (!oDataEntry.getMetadata().getUri().isEmpty() && !relatedJPAEntityLink.contains(navProperty.getName())) {
relatedJPAEntityLink.add(navProperty.getName());
}
}
 else {
relatedJPAEntities.add(relatedEntity.getJPAEntity());
}
}
if (!relatedJPAEntities.isEmpty()) {
relatedJPAEntityMap.put(navProperty.getName(),relatedJPAEntities);
}
}
default :
continue;
}
}
}
 catch (Exception e) {
if (e instanceof ODataJPARuntimeException) {
throw (ODataJPARuntimeException)e;
}
throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
}
}","@SuppressWarnings(""String_Node_Str"") private void write(final Map<String,Object> oDataEntryProperties,final boolean isCreate) throws ODataJPARuntimeException {
  try {
    EdmStructuralType structuralType=null;
    final List<String> keyNames=oDataEntityType.getKeyPropertyNames();
    if (isCreate) {
      jpaEntity=instantiateJPAEntity();
    }
 else     if (jpaEntity == null) {
      throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.RESOURCE_NOT_FOUND,null);
    }
    if (accessModifiersWrite == null) {
      accessModifiersWrite=jpaEntityParser.getAccessModifiers(jpaEntity,oDataEntityType,JPAEntityParser.ACCESS_MODIFIER_SET);
    }
    if (oDataEntityType == null || oDataEntryProperties == null) {
      throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL,null);
    }
    final HashMap<String,String> embeddableKeys=jpaEntityParser.getJPAEmbeddableKeyMap(jpaEntity.getClass().getName());
    Set<String> propertyNames=null;
    if (embeddableKeys != null) {
      setEmbeddableKeyProperty(embeddableKeys,oDataEntityType.getKeyProperties(),oDataEntryProperties,jpaEntity);
      propertyNames=new HashSet<String>();
      propertyNames.addAll(oDataEntryProperties.keySet());
      for (      String key : embeddableKeys.keySet()) {
        propertyNames.remove(key);
      }
    }
 else {
      propertyNames=oDataEntryProperties.keySet();
    }
    for (    String propertyName : propertyNames) {
      EdmTyped edmTyped=(EdmTyped)oDataEntityType.getProperty(propertyName);
      Method accessModifier=null;
switch (edmTyped.getType().getKind()) {
case SIMPLE:
        if (isCreate == false) {
          if (keyNames.contains(edmTyped.getName())) {
            continue;
          }
        }
      accessModifier=accessModifiersWrite.get(propertyName);
    setProperty(accessModifier,jpaEntity,oDataEntryProperties.get(propertyName),(EdmSimpleType)edmTyped.getType());
  break;
case COMPLEX:
structuralType=(EdmStructuralType)edmTyped.getType();
accessModifier=accessModifiersWrite.get(propertyName);
setComplexProperty(accessModifier,jpaEntity,structuralType,(HashMap<String,Object>)oDataEntryProperties.get(propertyName));
break;
case NAVIGATION:
case ENTITY:
if (isCreate) {
structuralType=(EdmStructuralType)edmTyped.getType();
EdmNavigationProperty navProperty=(EdmNavigationProperty)edmTyped;
EdmEntitySet edmRelatedEntitySet=oDataEntitySet.getRelatedEntitySet(navProperty);
List<ODataEntry> relatedEntries=(List<ODataEntry>)oDataEntryProperties.get(propertyName);
if (relatedJPAEntityMap == null) {
relatedJPAEntityMap=new HashMap<String,List<Object>>();
}
List<Object> relatedJPAEntities=new ArrayList<Object>();
for (ODataEntry oDataEntry : relatedEntries) {
JPAEntity relatedEntity=new JPAEntity((EdmEntityType)structuralType,edmRelatedEntitySet,oDataJPAContext);
relatedEntity.setParentJPAEntity(this);
relatedEntity.setViaNavigationProperty(navProperty);
relatedEntity.create(oDataEntry);
if (oDataEntry.getProperties().size() == 0) {
if (!oDataEntry.getMetadata().getUri().isEmpty() && !relatedJPAEntityLink.contains(navProperty.getName())) {
relatedJPAEntityLink.add(navProperty.getName());
}
}
 else {
relatedJPAEntities.add(relatedEntity.getJPAEntity());
}
}
if (!relatedJPAEntities.isEmpty()) {
relatedJPAEntityMap.put(navProperty.getName(),relatedJPAEntities);
}
}
default :
continue;
}
}
}
 catch (Exception e) {
if (e instanceof ODataJPARuntimeException) {
throw (ODataJPARuntimeException)e;
}
throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
}
}",0.9869044302033992
34967,"public void append(final Writer writer,final EntityInfoAggregator entityInfo,final List<Map<String,Object>> deletedEntries) throws EntityProviderException {
  JsonStreamWriter jsonStreamWriter=new JsonStreamWriter(writer);
  try {
    if (deletedEntries.size() > 0) {
      jsonStreamWriter.separator();
      int counter=0;
      for (      Map<String,Object> deletedEntry : deletedEntries) {
        jsonStreamWriter.beginObject();
        String odataContextValue=JsonUtils.createODataContextValueForTombstone(entityInfo.getEntitySetName());
        String selfLink=AtomEntryEntityProducer.createSelfLink(entityInfo,deletedEntry,null);
        String idValue=properties.getServiceRoot().toASCIIString() + selfLink;
        jsonStreamWriter.namedStringValue(FormatJson.ODATA_CONTEXT,odataContextValue);
        jsonStreamWriter.separator();
        jsonStreamWriter.namedStringValue(FormatJson.ID,idValue);
        jsonStreamWriter.endObject();
        if (counter < deletedEntries.size() - 1) {
          jsonStreamWriter.separator();
        }
        counter++;
      }
    }
  }
 catch (  final IOException e) {
    throw new EntityProviderException(EntityProviderException.EXCEPTION_OCCURRED.addContent(e.getClass().getSimpleName()),e);
  }
}","public void append(final Writer writer,final EntityInfoAggregator entityInfo,final List<Map<String,Object>> deletedEntries,boolean noPreviousEntries) throws EntityProviderException {
  JsonStreamWriter jsonStreamWriter=new JsonStreamWriter(writer);
  try {
    if (deletedEntries.size() > 0) {
      if (!noPreviousEntries) {
        jsonStreamWriter.separator();
      }
      int counter=0;
      for (      Map<String,Object> deletedEntry : deletedEntries) {
        jsonStreamWriter.beginObject();
        String odataContextValue=JsonUtils.createODataContextValueForTombstone(entityInfo.getEntitySetName());
        String selfLink=AtomEntryEntityProducer.createSelfLink(entityInfo,deletedEntry,null);
        String idValue=properties.getServiceRoot().toASCIIString() + selfLink;
        jsonStreamWriter.namedStringValue(FormatJson.ODATA_CONTEXT,odataContextValue);
        jsonStreamWriter.separator();
        jsonStreamWriter.namedStringValue(FormatJson.ID,idValue);
        jsonStreamWriter.endObject();
        if (counter < deletedEntries.size() - 1) {
          jsonStreamWriter.separator();
        }
        counter++;
      }
    }
  }
 catch (  final IOException e) {
    throw new EntityProviderException(EntityProviderException.EXCEPTION_OCCURRED.addContent(e.getClass().getSimpleName()),e);
  }
}",0.9734996102883866
34968,"public void append(final Writer writer,final EntityInfoAggregator entityInfo,final List<Map<String,Object>> data,final boolean isRootElement) throws EntityProviderException {
  JsonStreamWriter jsonStreamWriter=new JsonStreamWriter(writer);
  TombstoneCallback callback=getTombstoneCallback();
  try {
    jsonStreamWriter.beginObject();
    if (isRootElement) {
      jsonStreamWriter.name(FormatJson.D).beginObject();
    }
    if (properties.getInlineCountType() == InlineCount.ALLPAGES) {
      final int inlineCount=properties.getInlineCount() == null ? 0 : properties.getInlineCount();
      jsonStreamWriter.namedStringValueRaw(FormatJson.COUNT,String.valueOf(inlineCount)).separator();
    }
    jsonStreamWriter.name(FormatJson.RESULTS).beginArray();
    JsonEntryEntityProducer entryProducer=new JsonEntryEntityProducer(properties);
    boolean first=true;
    for (    final Map<String,Object> entryData : data) {
      if (first) {
        first=false;
      }
 else {
        jsonStreamWriter.separator();
      }
      entryProducer.append(writer,entityInfo,entryData,false);
    }
    if (callback != null) {
      JsonDeletedEntryEntityProducer deletedEntryProducer=new JsonDeletedEntryEntityProducer(properties);
      TombstoneCallbackResult callbackResult=callback.getTombstoneCallbackResult();
      List<Map<String,Object>> deletedEntries=callbackResult.getDeletedEntriesData();
      if (deletedEntries != null) {
        deletedEntryProducer.append(writer,entityInfo,deletedEntries);
      }
    }
    jsonStreamWriter.endArray();
    appendNextLink(jsonStreamWriter);
    appendDeltaLink(callback,jsonStreamWriter);
    if (isRootElement) {
      jsonStreamWriter.endObject();
    }
    jsonStreamWriter.endObject();
  }
 catch (  final IOException e) {
    throw new EntityProviderException(EntityProviderException.EXCEPTION_OCCURRED.addContent(e.getClass().getSimpleName()),e);
  }
}","public void append(final Writer writer,final EntityInfoAggregator entityInfo,final List<Map<String,Object>> data,final boolean isRootElement) throws EntityProviderException {
  JsonStreamWriter jsonStreamWriter=new JsonStreamWriter(writer);
  TombstoneCallback callback=getTombstoneCallback();
  try {
    jsonStreamWriter.beginObject();
    if (isRootElement) {
      jsonStreamWriter.name(FormatJson.D).beginObject();
    }
    if (properties.getInlineCountType() == InlineCount.ALLPAGES) {
      final int inlineCount=properties.getInlineCount() == null ? 0 : properties.getInlineCount();
      jsonStreamWriter.namedStringValueRaw(FormatJson.COUNT,String.valueOf(inlineCount)).separator();
    }
    jsonStreamWriter.name(FormatJson.RESULTS).beginArray();
    JsonEntryEntityProducer entryProducer=new JsonEntryEntityProducer(properties);
    boolean first=true;
    for (    final Map<String,Object> entryData : data) {
      if (first) {
        first=false;
      }
 else {
        jsonStreamWriter.separator();
      }
      entryProducer.append(writer,entityInfo,entryData,false);
    }
    if (callback != null) {
      JsonDeletedEntryEntityProducer deletedEntryProducer=new JsonDeletedEntryEntityProducer(properties);
      TombstoneCallbackResult callbackResult=callback.getTombstoneCallbackResult();
      List<Map<String,Object>> deletedEntries=callbackResult.getDeletedEntriesData();
      if (deletedEntries != null) {
        deletedEntryProducer.append(writer,entityInfo,deletedEntries,data.isEmpty());
      }
    }
    jsonStreamWriter.endArray();
    appendNextLink(jsonStreamWriter);
    appendDeltaLink(callback,jsonStreamWriter);
    if (isRootElement) {
      jsonStreamWriter.endObject();
    }
    jsonStreamWriter.endObject();
  }
 catch (  final IOException e) {
    throw new EntityProviderException(EntityProviderException.EXCEPTION_OCCURRED.addContent(e.getClass().getSimpleName()),e);
  }
}",0.996086616227498
34969,"@Test public void testGetEdmAssociation(){
  assertNotNull(objAssociation.getEdmAssociation());
  assertEquals(objAssociation.getEdmAssociation().getName(),ASSOCIATION_NAME);
}","@Test public void testGetEdmAssociation(){
  assertNotNull(objAssociation.getEdmAssociation());
  assertEquals(ASSOCIATION_NAME,objAssociation.getEdmAssociation().getName());
}",0.9034090909090908
34970,"private boolean checkDebugMode(final Map<String,String> queryParameters){
  final ODataDebugCallback callback=getServiceFactory().getCallback(ODataDebugCallback.class);
  return callback == null ? getQueryDebugValue(queryParameters) != null : callback.isDebugEnabled();
}","private boolean checkDebugMode(final Map<String,String> queryParameters){
  final ODataDebugCallback callback=getServiceFactory().getCallback(ODataDebugCallback.class);
  if (callback != null) {
    return callback.isDebugEnabled();
  }
  return false;
}",0.7923809523809524
34971,"public void startServer(final ODataService service){
  startServer(FitStaticServiceFactory.class);
  if ((server != null) && server.isStarted()) {
    FitStaticServiceFactory.bindService(this,service);
  }
}","public void startServer(final ODataService service,Class<? extends FitStaticServiceFactory> clazz){
  startServer(clazz);
  if ((server != null) && server.isStarted()) {
    FitStaticServiceFactory.bindService(this,service);
  }
}",0.8146453089244852
34972,"private Object readEntity(final Object uriParserResultView,final JPQLContextType contextType) throws ODataJPAModelException, ODataJPARuntimeException {
  Object selectedObject=null;
  if (uriParserResultView instanceof DeleteUriInfo || uriParserResultView instanceof GetEntityUriInfo || uriParserResultView instanceof PutMergePatchUriInfo) {
    JPQLContext selectJPQLContext=JPQLContext.createBuilder(contextType,uriParserResultView).build();
    JPQLStatement selectJPQLStatement=JPQLStatement.createBuilder(selectJPQLContext).build();
    Query query=null;
    try {
      query=em.createQuery(selectJPQLStatement.toString());
      if (!query.getResultList().isEmpty()) {
        selectedObject=query.getResultList().get(0);
      }
    }
 catch (    IllegalArgumentException e) {
      throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.ERROR_JPQL_QUERY_CREATE,e);
    }
  }
  return selectedObject;
}","private Object readEntity(final Object uriParserResultView,final JPQLContextType contextType) throws ODataJPAModelException, ODataJPARuntimeException {
  Object selectedObject=null;
  if (uriParserResultView instanceof DeleteUriInfo || uriParserResultView instanceof GetEntityUriInfo || uriParserResultView instanceof PutMergePatchUriInfo) {
    JPQLContext selectJPQLContext=JPQLContext.createBuilder(contextType,uriParserResultView).build();
    JPQLStatement selectJPQLStatement=JPQLStatement.createBuilder(selectJPQLContext).build();
    Query query=null;
    try {
      query=em.createQuery(selectJPQLStatement.toString());
      @SuppressWarnings(""String_Node_Str"") final List resultList=query.getResultList();
      if (!resultList.isEmpty()) {
        selectedObject=resultList.get(0);
      }
    }
 catch (    IllegalArgumentException e) {
      throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.ERROR_JPQL_QUERY_CREATE,e);
    }
  }
  return selectedObject;
}",0.921793534932221
34973,"@SuppressWarnings(""String_Node_Str"") @Override public void build() throws ODataJPAModelException, ODataJPARuntimeException {
  Set<javax.persistence.metamodel.EntityType<?>> jpaEntityTypes=metaModel.getEntities();
  if (jpaEntityTypes == null || jpaEntityTypes.isEmpty() == true) {
    return;
  }
 else   if (consistentEntityTypes == null) {
    consistentEntityTypes=new EntityTypeList<EntityType>();
  }
  for (  javax.persistence.metamodel.EntityType<?> jpaEntityType : jpaEntityTypes) {
    currentEdmEntityType=new EntityType();
    currentJPAEntityType=jpaEntityType;
    if (isExcluded(JPAEdmEntityType.this)) {
      continue;
    }
    JPAEdmNameBuilder.build(JPAEdmEntityType.this);
    JPAEdmMapping jpaEdmMapping=(JPAEdmMapping)currentEdmEntityType.getMapping();
    EntityListeners entityListners=currentJPAEntityType.getJavaType().getAnnotation(EntityListeners.class);
    if (entityListners != null) {
      for (      Class<EntityListeners> entityListner : entityListners.value()) {
        if (ODataJPATombstoneEntityListener.class.isAssignableFrom(entityListner)) {
          jpaEdmMapping.setODataJPATombstoneEntityListener((Class<? extends ODataJPATombstoneEntityListener>)entityListner);
          break;
        }
      }
    }
    JPAEdmPropertyView propertyView=new JPAEdmProperty(schemaView);
    propertyView.getBuilder().build();
    currentEdmEntityType.setProperties(propertyView.getEdmPropertyList());
    if (propertyView.getJPAEdmNavigationPropertyView() != null) {
      JPAEdmNavigationPropertyView navPropView=propertyView.getJPAEdmNavigationPropertyView();
      if (navPropView.getConsistentEdmNavigationProperties() != null && !navPropView.getConsistentEdmNavigationProperties().isEmpty()) {
        currentEdmEntityType.setNavigationProperties(navPropView.getConsistentEdmNavigationProperties());
      }
    }
    JPAEdmKeyView keyView=propertyView.getJPAEdmKeyView();
    currentEdmEntityType.setKey(keyView.getEdmKey());
    consistentEntityTypes.add(currentEdmEntityType);
    consistentEntityTypeMap.put(currentJPAEntityType.getName(),currentEdmEntityType);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void build() throws ODataJPAModelException, ODataJPARuntimeException {
  Set<javax.persistence.metamodel.EntityType<?>> jpaEntityTypes=metaModel.getEntities();
  if (jpaEntityTypes == null || jpaEntityTypes.isEmpty() == true) {
    return;
  }
 else   if (consistentEntityTypes == null) {
    consistentEntityTypes=new EntityTypeList<EntityType>();
  }
  for (  javax.persistence.metamodel.EntityType<?> jpaEntityType : jpaEntityTypes) {
    currentEdmEntityType=new EntityType();
    currentJPAEntityType=jpaEntityType;
    if (isExcluded(JPAEdmEntityType.this)) {
      continue;
    }
    JPAEdmNameBuilder.build(JPAEdmEntityType.this);
    JPAEdmMapping jpaEdmMapping=(JPAEdmMapping)currentEdmEntityType.getMapping();
    EntityListeners entityListners=currentJPAEntityType.getJavaType().getAnnotation(EntityListeners.class);
    if (entityListners != null) {
      for (      Class<EntityListeners> entityListner : entityListners.value()) {
        if (ODataJPATombstoneEntityListener.class.isAssignableFrom(entityListner)) {
          jpaEdmMapping.setODataJPATombstoneEntityListener((Class<? extends ODataJPATombstoneEntityListener>)(Object)entityListner);
          break;
        }
      }
    }
    JPAEdmPropertyView propertyView=new JPAEdmProperty(schemaView);
    propertyView.getBuilder().build();
    currentEdmEntityType.setProperties(propertyView.getEdmPropertyList());
    if (propertyView.getJPAEdmNavigationPropertyView() != null) {
      JPAEdmNavigationPropertyView navPropView=propertyView.getJPAEdmNavigationPropertyView();
      if (navPropView.getConsistentEdmNavigationProperties() != null && !navPropView.getConsistentEdmNavigationProperties().isEmpty()) {
        currentEdmEntityType.setNavigationProperties(navPropView.getConsistentEdmNavigationProperties());
      }
    }
    JPAEdmKeyView keyView=propertyView.getJPAEdmKeyView();
    currentEdmEntityType.setKey(keyView.getEdmKey());
    consistentEntityTypes.add(currentEdmEntityType);
    consistentEntityTypeMap.put(currentJPAEntityType.getName(),currentEdmEntityType);
  }
}",0.9981060606060606
34974,"/** 
 * This method returns the parsed where condition corresponding to the filter input in the user query.
 * @param whereExpression
 * @return Parsed where condition String
 * @throws ODataException
 */
public static String parseToJPAWhereExpression(final CommonExpression whereExpression,final String tableAlias) throws ODataException {
switch (whereExpression.getKind()) {
case UNARY:
    final UnaryExpression unaryExpression=(UnaryExpression)whereExpression;
  final String operand=parseToJPAWhereExpression(unaryExpression.getOperand(),tableAlias);
switch (unaryExpression.getOperator()) {
case NOT:
  return JPQLStatement.Operator.NOT + ""String_Node_Str"" + operand+ ""String_Node_Str"";
case MINUS:
if (operand.startsWith(""String_Node_Str"")) {
  return operand.substring(1);
}
 else {
  return ""String_Node_Str"" + operand;
}
default :
throw new ODataNotImplementedException();
}
case FILTER:
return parseToJPAWhereExpression(((FilterExpression)whereExpression).getExpression(),tableAlias);
case BINARY:
final BinaryExpression binaryExpression=(BinaryExpression)whereExpression;
if ((binaryExpression.getLeftOperand().getKind() == ExpressionKind.METHOD) && ((binaryExpression.getOperator() == BinaryOperator.EQ) || (binaryExpression.getOperator() == BinaryOperator.NE)) && (((MethodExpression)binaryExpression.getLeftOperand()).getMethod() == MethodOperator.SUBSTRINGOF)) {
methodFlag=1;
}
final String left=parseToJPAWhereExpression(binaryExpression.getLeftOperand(),tableAlias);
final String right=parseToJPAWhereExpression(binaryExpression.getRightOperand(),tableAlias);
switch (binaryExpression.getOperator()) {
case AND:
return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.AND+ JPQLStatement.DELIMITER.SPACE+ right;
case OR:
return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.OR+ JPQLStatement.DELIMITER.SPACE+ right;
case EQ:
return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.EQ+ JPQLStatement.DELIMITER.SPACE+ right;
case NE:
return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.NE+ JPQLStatement.DELIMITER.SPACE+ right;
case LT:
return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.LT+ JPQLStatement.DELIMITER.SPACE+ right;
case LE:
return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.LE+ JPQLStatement.DELIMITER.SPACE+ right;
case GT:
return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.GT+ JPQLStatement.DELIMITER.SPACE+ right;
case GE:
return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.GE+ JPQLStatement.DELIMITER.SPACE+ right;
case PROPERTY_ACCESS:
throw new ODataNotImplementedException();
default :
throw new ODataNotImplementedException();
}
case PROPERTY:
String returnStr=tableAlias + JPQLStatement.DELIMITER.PERIOD + ((EdmProperty)((PropertyExpression)whereExpression).getEdmProperty()).getMapping().getInternalName();
return returnStr;
case MEMBER:
String memberExpStr=EMPTY;
int i=0;
MemberExpression member=null;
CommonExpression tempExp=whereExpression;
while (tempExp != null && tempExp.getKind() == ExpressionKind.MEMBER) {
member=(MemberExpression)tempExp;
if (i > 0) {
memberExpStr=JPQLStatement.DELIMITER.PERIOD + memberExpStr;
}
i++;
memberExpStr=((EdmProperty)((PropertyExpression)member.getProperty()).getEdmProperty()).getMapping().getInternalName() + memberExpStr;
tempExp=member.getPath();
}
memberExpStr=((EdmProperty)((PropertyExpression)tempExp).getEdmProperty()).getMapping().getInternalName() + JPQLStatement.DELIMITER.PERIOD + memberExpStr;
return tableAlias + JPQLStatement.DELIMITER.PERIOD + memberExpStr;
case LITERAL:
final LiteralExpression literal=(LiteralExpression)whereExpression;
final EdmSimpleType literalType=(EdmSimpleType)literal.getEdmType();
String value=literalType.valueToString(literalType.valueOfString(literal.getUriLiteral(),EdmLiteralKind.URI,null,literalType.getDefaultType()),EdmLiteralKind.DEFAULT,null);
return evaluateComparingExpression(value,literalType);
case METHOD:
final MethodExpression methodExpression=(MethodExpression)whereExpression;
String first=parseToJPAWhereExpression(methodExpression.getParameters().get(0),tableAlias);
final String second=methodExpression.getParameterCount() > 1 ? parseToJPAWhereExpression(methodExpression.getParameters().get(1),tableAlias) : null;
String third=methodExpression.getParameterCount() > 2 ? parseToJPAWhereExpression(methodExpression.getParameters().get(2),tableAlias) : null;
switch (methodExpression.getMethod()) {
case SUBSTRING:
third=third != null ? ""String_Node_Str"" + third : ""String_Node_Str"";
return String.format(""String_Node_Str"",first,second,third);
case SUBSTRINGOF:
first=first.substring(1,first.length() - 1);
if (methodFlag == 1) {
methodFlag=0;
return String.format(""String_Node_Str"",second,first);
}
 else {
return String.format(""String_Node_Str"",second,first);
}
case TOLOWER:
return String.format(""String_Node_Str"",first);
default :
throw new ODataNotImplementedException();
}
default :
throw new ODataNotImplementedException();
}
}","/** 
 * This method returns the parsed where condition corresponding to the filter input in the user query.
 * @param whereExpression
 * @return Parsed where condition String
 * @throws ODataException
 */
public static String parseToJPAWhereExpression(final CommonExpression whereExpression,final String tableAlias) throws ODataException {
switch (whereExpression.getKind()) {
case UNARY:
    final UnaryExpression unaryExpression=(UnaryExpression)whereExpression;
  final String operand=parseToJPAWhereExpression(unaryExpression.getOperand(),tableAlias);
switch (unaryExpression.getOperator()) {
case NOT:
  return JPQLStatement.Operator.NOT + JPQLStatement.DELIMITER.PARENTHESIS_LEFT + operand+ JPQLStatement.DELIMITER.PARENTHESIS_RIGHT;
case MINUS:
if (operand.startsWith(""String_Node_Str"")) {
  return operand.substring(1);
}
 else {
  return ""String_Node_Str"" + operand;
}
default :
throw new ODataNotImplementedException();
}
case FILTER:
return parseToJPAWhereExpression(((FilterExpression)whereExpression).getExpression(),tableAlias);
case BINARY:
final BinaryExpression binaryExpression=(BinaryExpression)whereExpression;
if ((binaryExpression.getLeftOperand().getKind() == ExpressionKind.METHOD) && ((binaryExpression.getOperator() == BinaryOperator.EQ) || (binaryExpression.getOperator() == BinaryOperator.NE)) && (((MethodExpression)binaryExpression.getLeftOperand()).getMethod() == MethodOperator.SUBSTRINGOF)) {
methodFlag=1;
}
final String left=parseToJPAWhereExpression(binaryExpression.getLeftOperand(),tableAlias);
final String right=parseToJPAWhereExpression(binaryExpression.getRightOperand(),tableAlias);
switch (binaryExpression.getOperator()) {
case AND:
return JPQLStatement.DELIMITER.PARENTHESIS_LEFT + left + JPQLStatement.DELIMITER.SPACE+ JPQLStatement.Operator.AND+ JPQLStatement.DELIMITER.SPACE+ right+ JPQLStatement.DELIMITER.PARENTHESIS_RIGHT;
case OR:
return JPQLStatement.DELIMITER.PARENTHESIS_LEFT + left + JPQLStatement.DELIMITER.SPACE+ JPQLStatement.Operator.OR+ JPQLStatement.DELIMITER.SPACE+ right+ JPQLStatement.DELIMITER.PARENTHESIS_RIGHT;
case EQ:
return JPQLStatement.DELIMITER.PARENTHESIS_LEFT + left + JPQLStatement.DELIMITER.SPACE+ JPQLStatement.Operator.EQ+ JPQLStatement.DELIMITER.SPACE+ right+ JPQLStatement.DELIMITER.PARENTHESIS_RIGHT;
case NE:
return JPQLStatement.DELIMITER.PARENTHESIS_LEFT + left + JPQLStatement.DELIMITER.SPACE+ JPQLStatement.Operator.NE+ JPQLStatement.DELIMITER.SPACE+ right+ JPQLStatement.DELIMITER.PARENTHESIS_RIGHT;
case LT:
return JPQLStatement.DELIMITER.PARENTHESIS_LEFT + left + JPQLStatement.DELIMITER.SPACE+ JPQLStatement.Operator.LT+ JPQLStatement.DELIMITER.SPACE+ right+ JPQLStatement.DELIMITER.PARENTHESIS_RIGHT;
case LE:
return JPQLStatement.DELIMITER.PARENTHESIS_LEFT + left + JPQLStatement.DELIMITER.SPACE+ JPQLStatement.Operator.LE+ JPQLStatement.DELIMITER.SPACE+ right+ JPQLStatement.DELIMITER.PARENTHESIS_RIGHT;
case GT:
return JPQLStatement.DELIMITER.PARENTHESIS_LEFT + left + JPQLStatement.DELIMITER.SPACE+ JPQLStatement.Operator.GT+ JPQLStatement.DELIMITER.SPACE+ right+ JPQLStatement.DELIMITER.PARENTHESIS_RIGHT;
case GE:
return JPQLStatement.DELIMITER.PARENTHESIS_LEFT + left + JPQLStatement.DELIMITER.SPACE+ JPQLStatement.Operator.GE+ JPQLStatement.DELIMITER.SPACE+ right+ JPQLStatement.DELIMITER.PARENTHESIS_RIGHT;
case PROPERTY_ACCESS:
throw new ODataNotImplementedException();
default :
throw new ODataNotImplementedException();
}
case PROPERTY:
String returnStr=tableAlias + JPQLStatement.DELIMITER.PERIOD + ((EdmProperty)((PropertyExpression)whereExpression).getEdmProperty()).getMapping().getInternalName();
return returnStr;
case MEMBER:
String memberExpStr=EMPTY;
int i=0;
MemberExpression member=null;
CommonExpression tempExp=whereExpression;
while (tempExp != null && tempExp.getKind() == ExpressionKind.MEMBER) {
member=(MemberExpression)tempExp;
if (i > 0) {
memberExpStr=JPQLStatement.DELIMITER.PERIOD + memberExpStr;
}
i++;
memberExpStr=((EdmProperty)((PropertyExpression)member.getProperty()).getEdmProperty()).getMapping().getInternalName() + memberExpStr;
tempExp=member.getPath();
}
memberExpStr=((EdmProperty)((PropertyExpression)tempExp).getEdmProperty()).getMapping().getInternalName() + JPQLStatement.DELIMITER.PERIOD + memberExpStr;
return tableAlias + JPQLStatement.DELIMITER.PERIOD + memberExpStr;
case LITERAL:
final LiteralExpression literal=(LiteralExpression)whereExpression;
final EdmSimpleType literalType=(EdmSimpleType)literal.getEdmType();
String value=literalType.valueToString(literalType.valueOfString(literal.getUriLiteral(),EdmLiteralKind.URI,null,literalType.getDefaultType()),EdmLiteralKind.DEFAULT,null);
return evaluateComparingExpression(value,literalType);
case METHOD:
final MethodExpression methodExpression=(MethodExpression)whereExpression;
String first=parseToJPAWhereExpression(methodExpression.getParameters().get(0),tableAlias);
final String second=methodExpression.getParameterCount() > 1 ? parseToJPAWhereExpression(methodExpression.getParameters().get(1),tableAlias) : null;
String third=methodExpression.getParameterCount() > 2 ? parseToJPAWhereExpression(methodExpression.getParameters().get(2),tableAlias) : null;
switch (methodExpression.getMethod()) {
case SUBSTRING:
third=third != null ? ""String_Node_Str"" + third : ""String_Node_Str"";
return String.format(""String_Node_Str"",first,second,third);
case SUBSTRINGOF:
first=first.substring(1,first.length() - 1);
if (methodFlag == 1) {
methodFlag=0;
return String.format(""String_Node_Str"",second,first);
}
 else {
return String.format(""String_Node_Str"",second,first);
}
case TOLOWER:
return String.format(""String_Node_Str"",first);
default :
throw new ODataNotImplementedException();
}
default :
throw new ODataNotImplementedException();
}
}",0.9229482293893484
34975,"private void appendChangeSet(final BatchChangeSet batchChangeSet){
  String boundary=BatchHelper.generateBoundary(BOUNDARY_PREAMBLE);
  while (boundary.equals(batchBoundary) || !boundary.matches(REG_EX_BOUNDARY)) {
    boundary=BatchHelper.generateBoundary(BOUNDARY_PREAMBLE);
  }
  writer.append(HttpHeaders.CONTENT_TYPE).append(COLON).append(SP).append(HttpContentType.MULTIPART_MIXED + ""String_Node_Str"" + boundary).append(LF);
  for (  BatchChangeSetPart request : batchChangeSet.getChangeSetParts()) {
    writer.append(LF).append(""String_Node_Str"").append(boundary).append(LF);
    appendRequestBodyPart(request.getMethod(),request.getUri(),request.getBody(),request.getHeaders(),request.getContentId());
  }
  writer.append(LF).append(""String_Node_Str"").append(boundary).append(""String_Node_Str"").append(LF);
}","private void appendChangeSet(final BatchChangeSet batchChangeSet){
  String boundary=BatchHelper.generateBoundary(BOUNDARY_PREAMBLE);
  while (boundary.equals(batchBoundary) || !boundary.matches(REG_EX_BOUNDARY)) {
    boundary=BatchHelper.generateBoundary(BOUNDARY_PREAMBLE);
  }
  writer.append(HttpHeaders.CONTENT_TYPE).append(COLON).append(SP).append(HttpContentType.MULTIPART_MIXED + ""String_Node_Str"" + boundary).append(CRLF);
  for (  BatchChangeSetPart request : batchChangeSet.getChangeSetParts()) {
    writer.append(CRLF).append(""String_Node_Str"").append(boundary).append(CRLF);
    appendRequestBodyPart(request.getMethod(),request.getUri(),request.getBody(),request.getHeaders(),request.getContentId());
  }
  writer.append(CRLF).append(""String_Node_Str"").append(boundary).append(""String_Node_Str"").append(CRLF);
}",0.9939172749391728
34976,"private void appendRequestBodyPart(final String method,final String uri,final String body,final Map<String,String> headers,final String contentId){
  boolean isContentLengthPresent=false;
  writer.append(HttpHeaders.CONTENT_TYPE).append(COLON).append(SP).append(HttpContentType.APPLICATION_HTTP).append(LF);
  writer.append(BatchHelper.HTTP_CONTENT_TRANSFER_ENCODING).append(COLON).append(SP).append(BatchHelper.BINARY_ENCODING).append(LF);
  if (contentId != null) {
    writer.append(BatchHelper.HTTP_CONTENT_ID).append(COLON).append(SP).append(contentId).append(LF);
  }
  String contentLength=getHeaderValue(headers,HttpHeaders.CONTENT_LENGTH);
  if (contentLength != null && !contentLength.isEmpty()) {
    isContentLengthPresent=true;
  }
  writer.append(LF);
  writer.append(method).append(SP).append(uri).append(SP).append(HTTP_1_1);
  writer.append(LF);
  if (!isContentLengthPresent && body != null && !body.isEmpty()) {
    writer.append(HttpHeaders.CONTENT_LENGTH).append(COLON).append(SP).append(BatchHelper.getBytes(body).length).append(LF);
  }
  appendHeader(headers);
  if (body != null && !body.isEmpty()) {
    writer.append(LF);
    writer.append(body);
  }
}","private void appendRequestBodyPart(final String method,final String uri,final String body,final Map<String,String> headers,final String contentId){
  boolean isContentLengthPresent=false;
  writer.append(HttpHeaders.CONTENT_TYPE).append(COLON).append(SP).append(HttpContentType.APPLICATION_HTTP).append(CRLF);
  writer.append(BatchHelper.HTTP_CONTENT_TRANSFER_ENCODING).append(COLON).append(SP).append(BatchHelper.BINARY_ENCODING).append(CRLF);
  if (contentId != null) {
    writer.append(BatchHelper.HTTP_CONTENT_ID).append(COLON).append(SP).append(contentId).append(CRLF);
  }
  String contentLength=getHeaderValue(headers,HttpHeaders.CONTENT_LENGTH);
  if (contentLength != null && !contentLength.isEmpty()) {
    isContentLengthPresent=true;
  }
  writer.append(CRLF);
  writer.append(method).append(SP).append(uri).append(SP).append(HTTP_1_1);
  writer.append(CRLF);
  if (!isContentLengthPresent && body != null && !body.isEmpty()) {
    writer.append(HttpHeaders.CONTENT_LENGTH).append(COLON).append(SP).append(BatchHelper.getBytes(body).length).append(CRLF);
  }
  appendHeader(headers);
  writer.append(CRLF);
  if (body != null && !body.isEmpty()) {
    writer.append(body);
  }
}",0.9755274261603376
34977,"public InputStream writeBatchRequest(final List<BatchPart> batchParts,final String boundary){
  if (boundary.matches(REG_EX_BOUNDARY)) {
    batchBoundary=boundary;
  }
 else {
    throw new IllegalArgumentException();
  }
  for (  BatchPart batchPart : batchParts) {
    writer.append(""String_Node_Str"").append(boundary).append(LF);
    if (batchPart instanceof BatchChangeSet) {
      appendChangeSet((BatchChangeSet)batchPart);
    }
 else     if (batchPart instanceof BatchQueryPart) {
      BatchQueryPart request=(BatchQueryPart)batchPart;
      appendRequestBodyPart(request.getMethod(),request.getUri(),null,request.getHeaders(),request.getContentId());
    }
  }
  writer.append(LF).append(""String_Node_Str"").append(boundary).append(""String_Node_Str"");
  InputStream batchRequestBody;
  batchRequestBody=new ByteArrayInputStream(BatchHelper.getBytes(writer.toString()));
  return batchRequestBody;
}","public InputStream writeBatchRequest(final List<BatchPart> batchParts,final String boundary){
  if (boundary.matches(REG_EX_BOUNDARY)) {
    batchBoundary=boundary;
  }
 else {
    throw new IllegalArgumentException();
  }
  for (  BatchPart batchPart : batchParts) {
    writer.append(""String_Node_Str"").append(boundary).append(CRLF);
    if (batchPart instanceof BatchChangeSet) {
      appendChangeSet((BatchChangeSet)batchPart);
    }
 else     if (batchPart instanceof BatchQueryPart) {
      BatchQueryPart request=(BatchQueryPart)batchPart;
      appendRequestBodyPart(request.getMethod(),request.getUri(),null,request.getHeaders(),request.getContentId());
    }
    writer.append(CRLF);
  }
  writer.append(""String_Node_Str"").append(boundary).append(""String_Node_Str"");
  InputStream batchRequestBody;
  batchRequestBody=new ByteArrayInputStream(BatchHelper.getBytes(writer.toString()));
  return batchRequestBody;
}",0.9890829694323144
34978,"private void appendHeader(final Map<String,String> headers){
  for (  Map.Entry<String,String> headerMap : headers.entrySet()) {
    String name=headerMap.getKey();
    writer.append(name).append(COLON).append(SP).append(headerMap.getValue()).append(LF);
  }
}","private void appendHeader(final Map<String,String> headers){
  for (  Map.Entry<String,String> headerMap : headers.entrySet()) {
    String name=headerMap.getKey();
    writer.append(name).append(COLON).append(SP).append(headerMap.getValue()).append(CRLF);
  }
}",0.9961685823754788
34979,"@Test @Ignore public void testBatchWithGetAndPost() throws BatchException, IOException {
  List<BatchPart> batch=new ArrayList<BatchPart>();
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  BatchPart request=BatchQueryPart.method(GET).uri(""String_Node_Str"").headers(headers).contentId(""String_Node_Str"").build();
  batch.add(request);
  Map<String,String> changeSetHeaders=new HashMap<String,String>();
  changeSetHeaders.put(""String_Node_Str"",""String_Node_Str"");
  String body=""String_Node_Str"";
  BatchChangeSetPart changeRequest=BatchChangeSetPart.method(POST).uri(""String_Node_Str"").body(body).headers(changeSetHeaders).contentId(""String_Node_Str"").build();
  BatchChangeSet changeSet=BatchChangeSet.newBuilder().build();
  changeSet.add(changeRequest);
  batch.add(changeSet);
  BatchRequestWriter writer=new BatchRequestWriter();
  InputStream batchRequest=writer.writeBatchRequest(batch,BOUNDARY);
  assertNotNull(batchRequest);
  StringHelper.Stream batchRequestStream=StringHelper.toStream(batchRequest);
  String requestBody=batchRequestStream.asString();
  checkMimeHeaders(requestBody);
  checkHeaders(headers,requestBody);
  checkHeaders(changeSetHeaders,requestBody);
  assertTrue(requestBody.contains(""String_Node_Str""));
  assertTrue(requestBody.contains(""String_Node_Str""));
  assertTrue(requestBody.contains(body));
  assertEquals(23,batchRequestStream.linesCount());
  String contentType=""String_Node_Str"" + BOUNDARY;
  BatchParser parser=new BatchParser(contentType,parseProperties,true);
  List<BatchRequestPart> parseResult=parser.parseBatchRequest(batchRequestStream.asStream());
  assertEquals(2,parseResult.size());
}","@Test public void testBatchWithGetAndPost() throws BatchException, IOException {
  List<BatchPart> batch=new ArrayList<BatchPart>();
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  BatchPart request=BatchQueryPart.method(GET).uri(""String_Node_Str"").headers(headers).contentId(""String_Node_Str"").build();
  batch.add(request);
  Map<String,String> changeSetHeaders=new HashMap<String,String>();
  changeSetHeaders.put(""String_Node_Str"",""String_Node_Str"");
  String body=""String_Node_Str"";
  BatchChangeSetPart changeRequest=BatchChangeSetPart.method(POST).uri(""String_Node_Str"").body(body).headers(changeSetHeaders).contentId(""String_Node_Str"").build();
  BatchChangeSet changeSet=BatchChangeSet.newBuilder().build();
  changeSet.add(changeRequest);
  batch.add(changeSet);
  BatchRequestWriter writer=new BatchRequestWriter();
  InputStream batchRequest=writer.writeBatchRequest(batch,BOUNDARY);
  assertNotNull(batchRequest);
  StringHelper.Stream batchRequestStream=StringHelper.toStream(batchRequest);
  String requestBody=batchRequestStream.asString();
  checkMimeHeaders(requestBody);
  checkHeaders(headers,requestBody);
  checkHeaders(changeSetHeaders,requestBody);
  assertTrue(requestBody.contains(""String_Node_Str""));
  assertTrue(requestBody.contains(""String_Node_Str""));
  assertTrue(requestBody.contains(body));
  assertEquals(25,batchRequestStream.linesCount());
  String contentType=""String_Node_Str"" + BOUNDARY;
  BatchParser parser=new BatchParser(contentType,parseProperties,true);
  List<BatchRequestPart> parseResult=parser.parseBatchRequest(batchRequestStream.asStream());
  assertEquals(2,parseResult.size());
}",0.9970622796709752
34980,"@Test public void testBatchWithGetAndPost() throws BatchException, IOException {
  List<BatchPart> batch=new ArrayList<BatchPart>();
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  BatchPart request=BatchQueryPart.method(GET).uri(""String_Node_Str"").headers(headers).contentId(""String_Node_Str"").build();
  batch.add(request);
  Map<String,String> changeSetHeaders=new HashMap<String,String>();
  changeSetHeaders.put(""String_Node_Str"",""String_Node_Str"");
  String body=""String_Node_Str"";
  BatchChangeSetPart changeRequest=BatchChangeSetPart.method(POST).uri(""String_Node_Str"").body(body).headers(changeSetHeaders).contentId(""String_Node_Str"").build();
  BatchChangeSet changeSet=BatchChangeSet.newBuilder().build();
  changeSet.add(changeRequest);
  batch.add(changeSet);
  BatchRequestWriter writer=new BatchRequestWriter();
  InputStream batchRequest=writer.writeBatchRequest(batch,BOUNDARY);
  String requestBody=StringHelper.inputStreamToString(batchRequest);
  assertNotNull(batchRequest);
  checkMimeHeaders(requestBody);
  checkHeaders(headers,requestBody);
  checkHeaders(changeSetHeaders,requestBody);
  assertTrue(requestBody.contains(""String_Node_Str""));
  assertTrue(requestBody.contains(""String_Node_Str""));
  assertTrue(requestBody.contains(body));
}","@Test public void testBatchWithGetAndPost() throws BatchException, IOException {
  List<BatchPart> batch=new ArrayList<BatchPart>();
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  BatchPart request=BatchQueryPart.method(GET).uri(""String_Node_Str"").headers(headers).contentId(""String_Node_Str"").build();
  batch.add(request);
  Map<String,String> changeSetHeaders=new HashMap<String,String>();
  changeSetHeaders.put(""String_Node_Str"",""String_Node_Str"");
  String body=""String_Node_Str"";
  BatchChangeSetPart changeRequest=BatchChangeSetPart.method(POST).uri(""String_Node_Str"").body(body).headers(changeSetHeaders).contentId(""String_Node_Str"").build();
  BatchChangeSet changeSet=BatchChangeSet.newBuilder().build();
  changeSet.add(changeRequest);
  batch.add(changeSet);
  BatchRequestWriter writer=new BatchRequestWriter();
  InputStream batchRequest=writer.writeBatchRequest(batch,BOUNDARY);
  String requestBody=StringHelper.inputStreamToString(batchRequest,true);
  assertNotNull(batchRequest);
  checkMimeHeaders(requestBody);
  checkHeaders(headers,requestBody);
  checkHeaders(changeSetHeaders,requestBody);
  assertTrue(requestBody.contains(""String_Node_Str""));
  assertTrue(requestBody.contains(""String_Node_Str""));
  assertTrue(requestBody.contains(body));
}",0.99812382739212
34981,"@Test public void testBatchQueryPart() throws BatchException, IOException {
  List<BatchPart> batch=new ArrayList<BatchPart>();
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  BatchPart request=BatchQueryPart.method(GET).uri(""String_Node_Str"").headers(headers).build();
  batch.add(request);
  BatchRequestWriter writer=new BatchRequestWriter();
  InputStream batchRequest=writer.writeBatchRequest(batch,BOUNDARY);
  String requestBody=StringHelper.toStream(batchRequest).asString();
  assertNotNull(batchRequest);
  checkMimeHeaders(requestBody);
  assertTrue(requestBody.contains(""String_Node_Str""));
  assertTrue(requestBody.contains(""String_Node_Str""));
  checkHeaders(headers,requestBody);
  assertEquals(8,StringHelper.countLines(requestBody));
}","@Test public void testBatchQueryPart() throws BatchException, IOException {
  List<BatchPart> batch=new ArrayList<BatchPart>();
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  BatchPart request=BatchQueryPart.method(GET).uri(""String_Node_Str"").headers(headers).build();
  batch.add(request);
  BatchRequestWriter writer=new BatchRequestWriter();
  InputStream batchRequest=writer.writeBatchRequest(batch,BOUNDARY);
  String requestBody=StringHelper.toStream(batchRequest).asString();
  assertNotNull(batchRequest);
  checkMimeHeaders(requestBody);
  assertTrue(requestBody.contains(""String_Node_Str""));
  assertTrue(requestBody.contains(""String_Node_Str""));
  checkHeaders(headers,requestBody);
  assertEquals(9,StringHelper.countLines(requestBody));
}",0.9987760097919216
34982,"private static TreeSet<Accept> getAcceptTree(){
  TreeSet<Accept> treeSet=new TreeSet<Accept>(new Comparator<Accept>(){
    @Override public int compare(    final Accept o1,    final Accept o2){
      if (o1.getQuality() <= o2.getQuality()) {
        return 1;
      }
 else {
        return -1;
      }
    }
  }
);
  return treeSet;
}","private TreeSet<Accept> getAcceptTree(){
  TreeSet<Accept> treeSet=new TreeSet<Accept>(new Comparator<Accept>(){
    @Override public int compare(    final Accept o1,    final Accept o2){
      if (o1.getQuality() <= o2.getQuality()) {
        return 1;
      }
 else {
        return -1;
      }
    }
  }
);
  return treeSet;
}",0.9894736842105264
34983,"private static double getQualityFactor(final String acceptHeaderValue,double qualityFactor){
  int paramNumber=0;
  double typeFactor=0.0;
  double subtypeFactor=0.0;
  String[] mediaRange=acceptHeaderValue.split(""String_Node_Str"");
  String[] mediaTypes=mediaRange[0].split(""String_Node_Str"");
  if (mediaTypes.length == 2) {
    String type=mediaTypes[0];
    String subtype=mediaTypes[1];
    if (!ALL.equals(type)) {
      typeFactor=0.001;
    }
    if (!ALL.equals(subtype)) {
      subtypeFactor=0.001;
    }
  }
  if (mediaRange.length == 2) {
    String[] parameters=mediaRange[1].split(""String_Node_Str"");
    paramNumber=parameters.length;
  }
  qualityFactor=qualityFactor + paramNumber * QUALITY_PARAM_FACTOR + typeFactor + subtypeFactor;
  return qualityFactor;
}","private double getQualityFactor(final String acceptHeaderValue,double qualityFactor){
  int paramNumber=0;
  double typeFactor=0.0;
  double subtypeFactor=0.0;
  String[] mediaRange=acceptHeaderValue.split(""String_Node_Str"");
  String[] mediaTypes=mediaRange[0].split(""String_Node_Str"");
  if (mediaTypes.length == 2) {
    String type=mediaTypes[0];
    String subtype=mediaTypes[1];
    if (!ALL.equals(type)) {
      typeFactor=0.001;
    }
    if (!ALL.equals(subtype)) {
      subtypeFactor=0.001;
    }
  }
  if (mediaRange.length == 2) {
    String[] parameters=mediaRange[1].split(""String_Node_Str"");
    paramNumber=parameters.length;
  }
  qualityFactor=qualityFactor + paramNumber * QUALITY_PARAM_FACTOR + typeFactor + subtypeFactor;
  return qualityFactor;
}",0.995475113122172
34984,"public static List<String> parseAcceptHeaders(final String headerValue) throws BatchException {
  TreeSet<Accept> acceptTree=getAcceptTree();
  List<String> acceptHeaders=new ArrayList<String>();
  Scanner acceptHeaderScanner=new Scanner(headerValue);
  acceptHeaderScanner.useDelimiter(""String_Node_Str"");
  while (acceptHeaderScanner.hasNext()) {
    if (acceptHeaderScanner.hasNext(REG_EX_ACCEPT_WITH_Q_FACTOR)) {
      acceptHeaderScanner.next(REG_EX_ACCEPT_WITH_Q_FACTOR);
      MatchResult result=acceptHeaderScanner.match();
      if (result.groupCount() == 2) {
        String acceptHeaderValue=result.group(1);
        double qualityFactor=result.group(2) != null ? Double.parseDouble(result.group(2)) : 1d;
        qualityFactor=getQualityFactor(acceptHeaderValue,qualityFactor);
        Accept acceptHeader=new Accept().setQuality(qualityFactor).setValue(acceptHeaderValue);
        acceptTree.add(acceptHeader);
      }
 else {
        String header=acceptHeaderScanner.next();
        acceptHeaderScanner.close();
        throw new BatchException(BatchException.INVALID_ACCEPT_HEADER.addContent(header),BAD_REQUEST);
      }
    }
 else {
      String header=acceptHeaderScanner.next();
      acceptHeaderScanner.close();
      throw new BatchException(BatchException.INVALID_ACCEPT_HEADER.addContent(header),BAD_REQUEST);
    }
  }
  for (  Accept accept : acceptTree) {
    acceptHeaders.add(accept.getValue());
  }
  acceptHeaderScanner.close();
  return acceptHeaders;
}","public List<String> parseAcceptHeaders() throws BatchException {
  final String headerValue=concatenateHeaderLines(acceptHeaderValues);
  final TreeSet<Accept> acceptTree=getAcceptTree();
  final List<String> acceptHeaders=new ArrayList<String>();
  final Scanner acceptHeaderScanner=new Scanner(headerValue);
  acceptHeaderScanner.useDelimiter(""String_Node_Str"");
  while (acceptHeaderScanner.hasNext()) {
    if (acceptHeaderScanner.hasNext(REG_EX_ACCEPT_WITH_Q_FACTOR)) {
      acceptHeaderScanner.next(REG_EX_ACCEPT_WITH_Q_FACTOR);
      MatchResult result=acceptHeaderScanner.match();
      if (result.groupCount() == 2) {
        String acceptHeaderValue=result.group(1);
        double qualityFactor=result.group(2) != null ? Double.parseDouble(result.group(2)) : 1d;
        qualityFactor=getQualityFactor(acceptHeaderValue,qualityFactor);
        Accept acceptHeader=new Accept().setQuality(qualityFactor).setValue(acceptHeaderValue);
        acceptTree.add(acceptHeader);
      }
 else {
        String header=acceptHeaderScanner.next();
        acceptHeaderScanner.close();
        throw new BatchException(BatchException.INVALID_ACCEPT_HEADER.addContent(header),BAD_REQUEST);
      }
    }
 else {
      String header=acceptHeaderScanner.next();
      acceptHeaderScanner.close();
      throw new BatchException(BatchException.INVALID_ACCEPT_HEADER.addContent(header),BAD_REQUEST);
    }
  }
  for (  Accept accept : acceptTree) {
    if (!acceptHeaders.contains(accept.getValue())) {
      acceptHeaders.add(accept.getValue());
    }
  }
  acceptHeaderScanner.close();
  return acceptHeaders;
}",0.8926955397543633
34985,"public static List<String> parseAcceptableLanguages(final String headerValue) throws BatchException {
  List<String> acceptLanguages=new LinkedList<String>();
  TreeSet<Accept> acceptTree=getAcceptTree();
  Scanner acceptLanguageScanner=new Scanner(headerValue);
  acceptLanguageScanner.useDelimiter(""String_Node_Str"");
  while (acceptLanguageScanner.hasNext()) {
    if (acceptLanguageScanner.hasNext(REG_EX_ACCEPT_LANGUAGES_WITH_Q_FACTOR)) {
      acceptLanguageScanner.next(REG_EX_ACCEPT_LANGUAGES_WITH_Q_FACTOR);
      MatchResult result=acceptLanguageScanner.match();
      if (result.groupCount() == 2) {
        String languagerange=result.group(1);
        double qualityFactor=result.group(2) != null ? Double.parseDouble(result.group(2)) : 1d;
        acceptTree.add(new Accept().setQuality(qualityFactor).setValue(languagerange));
      }
 else {
        String acceptLanguage=acceptLanguageScanner.next();
        acceptLanguageScanner.close();
        throw new BatchException(BatchException.INVALID_ACCEPT_LANGUAGE_HEADER.addContent(acceptLanguage),BAD_REQUEST);
      }
    }
 else {
      String acceptLanguage=acceptLanguageScanner.next();
      acceptLanguageScanner.close();
      throw new BatchException(BatchException.INVALID_ACCEPT_LANGUAGE_HEADER.addContent(acceptLanguage),BAD_REQUEST);
    }
  }
  for (  Accept accept : acceptTree) {
    acceptLanguages.add(accept.getValue());
  }
  acceptLanguageScanner.close();
  return acceptLanguages;
}","public List<String> parseAcceptableLanguages() throws BatchException {
  final String headerValue=concatenateHeaderLines(acceptLanguageHeaderValues);
  final List<String> acceptLanguages=new LinkedList<String>();
  final TreeSet<Accept> acceptTree=getAcceptTree();
  Scanner acceptLanguageScanner=new Scanner(headerValue);
  acceptLanguageScanner.useDelimiter(""String_Node_Str"");
  while (acceptLanguageScanner.hasNext()) {
    if (acceptLanguageScanner.hasNext(REG_EX_ACCEPT_LANGUAGES_WITH_Q_FACTOR)) {
      acceptLanguageScanner.next(REG_EX_ACCEPT_LANGUAGES_WITH_Q_FACTOR);
      MatchResult result=acceptLanguageScanner.match();
      if (result.groupCount() == 2) {
        String languagerange=result.group(1);
        double qualityFactor=result.group(2) != null ? Double.parseDouble(result.group(2)) : 1d;
        acceptTree.add(new Accept().setQuality(qualityFactor).setValue(languagerange));
      }
 else {
        String acceptLanguage=acceptLanguageScanner.next();
        acceptLanguageScanner.close();
        throw new BatchException(BatchException.INVALID_ACCEPT_LANGUAGE_HEADER.addContent(acceptLanguage),BAD_REQUEST);
      }
    }
 else {
      String acceptLanguage=acceptLanguageScanner.next();
      acceptLanguageScanner.close();
      throw new BatchException(BatchException.INVALID_ACCEPT_LANGUAGE_HEADER.addContent(acceptLanguage),BAD_REQUEST);
    }
  }
  for (  Accept accept : acceptTree) {
    if (!acceptLanguages.contains(accept.getValue())) {
      acceptLanguages.add(accept.getValue());
    }
  }
  acceptLanguageScanner.close();
  return acceptLanguages;
}",0.8713259307642064
34986,"public BatchBodyPart parse(final int contentLength) throws BatchException {
  List<String> remainingMessage=BatchParserCommon.trimStringListToLength(body,contentLength);
  requests=consumeRequest(remainingMessage);
  isParsed=true;
  return this;
}","public BatchBodyPart parse() throws BatchException {
  headers=BatchParserCommon.consumeHeaders(remainingMessage);
  BatchParserCommon.consumeBlankLine(remainingMessage,isStrict);
  isChangeSet=isChangeSet(headers);
  requests=consumeRequest(remainingMessage);
  return this;
}",0.3619047619047619
34987,"public BatchBodyPart(final List<String> bodyPartMessage,final String boundary,final boolean isStrict) throws BatchException {
  this.boundary=boundary;
  this.isStrict=isStrict;
  List<String> remainingMessage=new LinkedList<String>();
  remainingMessage.addAll(bodyPartMessage);
  headers=BatchParserCommon.consumeHeaders(remainingMessage);
  BatchParserCommon.consumeBlankLine(remainingMessage,isStrict);
  isChangeSet=isChangeSet(headers);
  body=remainingMessage;
}","public BatchBodyPart(final List<String> bodyPartMessage,final String boundary,final boolean isStrict) throws BatchException {
  this.boundary=boundary;
  this.isStrict=isStrict;
  remainingMessage.addAll(bodyPartMessage);
}",0.5809248554913294
34988,"public List<BatchQueryOperation> getRequests(){
  if (!isParsed) {
    throw new ODataRuntimeException(""String_Node_Str"");
  }
  return requests;
}","public List<BatchQueryOperation> getRequests(){
  return requests;
}",0.6325581395348837
34989,"private boolean isContentTypeMultiPartMixed(final String contentType){
  return contentType.contains(HttpContentType.MULTIPART_MIXED);
}","private boolean isContentTypeMultiPartMixed(final String contentType){
  return BatchParserCommon.PATTERN_MULTIPART_BOUNDARY.matcher(contentType).matches();
}",0.673469387755102
34990,"private List<BatchQueryOperation> consumeChangeSet(final List<String> remainingMessage) throws BatchException {
  final List<List<String>> changeRequests=splitChangeSet(remainingMessage);
  final List<BatchQueryOperation> requestList=new LinkedList<BatchQueryOperation>();
  for (  List<String> changeRequest : changeRequests) {
    requestList.add(new BatchChangeSet(changeRequest,isStrict).parse());
  }
  return requestList;
}","private List<BatchQueryOperation> consumeChangeSet(final List<String> remainingMessage) throws BatchException {
  final List<List<String>> changeRequests=splitChangeSet(remainingMessage);
  final List<BatchQueryOperation> requestList=new LinkedList<BatchQueryOperation>();
  for (  List<String> changeRequest : changeRequests) {
    requestList.add(new BatchChangeSetPart(changeRequest,isStrict).parse());
  }
  return requestList;
}",0.9953596287703016
34991,"private List<BatchParserResult> parseBatch(final InputStream in,final BatchTransformator transformator) throws BatchException, IOException {
  final String baseUri=getBaseUri();
  final String boundary=BatchParserCommon.getBoundary(contentTypeMime);
  final List<BatchParserResult> resultList=new LinkedList<BatchParserResult>();
  final List<List<String>> bodyPartStrings=splitBodyParts(in,boundary);
  for (  List<String> bodyPartString : bodyPartStrings) {
    BatchBodyPart bodyPart=new BatchBodyPart(bodyPartString,boundary,isStrict);
    resultList.addAll(transformator.transform(bodyPart,batchRequestPathInfo,baseUri));
  }
  return resultList;
}","private List<BatchParserResult> parseBatch(final InputStream in,final BatchTransformator transformator) throws BatchException, IOException {
  final String baseUri=getBaseUri();
  final String boundary=BatchParserCommon.getBoundary(contentTypeMime);
  final List<BatchParserResult> resultList=new LinkedList<BatchParserResult>();
  final List<List<String>> bodyPartStrings=splitBodyParts(in,boundary);
  for (  List<String> bodyPartString : bodyPartStrings) {
    BatchBodyPart bodyPart=new BatchBodyPart(bodyPartString,boundary,isStrict).parse();
    resultList.addAll(transformator.transform(bodyPart,batchRequestPathInfo,baseUri));
  }
  return resultList;
}",0.9939117199391172
34992,"private static String extractPathInfo(final HttpServletRequest servletRequest){
  String pathInfoString;
  final String requestUri=servletRequest.getRequestURI();
  pathInfoString=requestUri;
  int index=requestUri.indexOf(servletRequest.getContextPath());
  if (index >= 0) {
    pathInfoString=pathInfoString.substring(servletRequest.getContextPath().length());
  }
  int indexServletPath=requestUri.indexOf(servletRequest.getServletPath());
  if (indexServletPath > 0) {
    pathInfoString=pathInfoString.substring(servletRequest.getServletPath().length());
  }
  return pathInfoString;
}","private static String extractPathInfo(final HttpServletRequest servletRequest){
  String pathInfoString;
  final String requestUri=servletRequest.getRequestURI();
  pathInfoString=requestUri;
  int index=requestUri.indexOf(servletRequest.getContextPath());
  if (index >= 0) {
    pathInfoString=pathInfoString.substring(servletRequest.getContextPath().length());
  }
  int indexServletPath=requestUri.indexOf(servletRequest.getServletPath());
  if (indexServletPath >= 0) {
    pathInfoString=pathInfoString.substring(servletRequest.getServletPath().length());
  }
  return pathInfoString;
}",0.9991546914623838
34993,"@Override public EdmTyped getReturnType() throws EdmException {
  final ReturnType returnType=functionImport.getReturnType();
  return new EdmTypedImplProv(edm,functionImport.getName(),returnType.getTypeName(),returnType.getMultiplicity());
}","@Override public EdmTyped getReturnType() throws EdmException {
  if (edmReturnType == null) {
    final ReturnType returnType=functionImport.getReturnType();
    if (returnType != null) {
      edmReturnType=new EdmTypedImplProv(edm,functionImport.getName(),returnType.getTypeName(),returnType.getMultiplicity());
    }
  }
  return edmReturnType;
}",0.793918918918919
34994,"private FunctionImportParameter readFunctionImportParameter(final XMLStreamReader reader) throws EntityProviderException, XMLStreamException {
  reader.require(XMLStreamConstants.START_ELEMENT,edmNamespace,XmlMetadataConstants.EDM_FUNCTION_PARAMETER);
  FunctionImportParameter functionParameter=new FunctionImportParameter();
  List<AnnotationElement> annotationElements=new ArrayList<AnnotationElement>();
  functionParameter.setName(reader.getAttributeValue(null,XmlMetadataConstants.EDM_NAME));
  String type=reader.getAttributeValue(null,XmlMetadataConstants.EDM_TYPE);
  if (type == null) {
    throw new EntityProviderException(EntityProviderException.MISSING_ATTRIBUTE.addContent(XmlMetadataConstants.EDM_TYPE).addContent(XmlMetadataConstants.EDM_FUNCTION_PARAMETER));
  }
  functionParameter.setType(EdmSimpleTypeKind.valueOf(extractFQName(type).getName()));
  functionParameter.setFacets(readFacets(reader));
  functionParameter.setAnnotationAttributes(readAnnotationAttribute(reader));
  while (reader.hasNext() && !(reader.isEndElement() && edmNamespace.equals(reader.getNamespaceURI()) && XmlMetadataConstants.EDM_FUNCTION_IMPORT.equals(reader.getLocalName()))) {
    reader.next();
    if (reader.isStartElement()) {
      extractNamespaces(reader);
      annotationElements.add(readAnnotationElement(reader));
    }
  }
  if (!annotationElements.isEmpty()) {
    functionParameter.setAnnotationElements(annotationElements);
  }
  return functionParameter;
}","private FunctionImportParameter readFunctionImportParameter(final XMLStreamReader reader) throws EntityProviderException, XMLStreamException {
  reader.require(XMLStreamConstants.START_ELEMENT,edmNamespace,XmlMetadataConstants.EDM_FUNCTION_PARAMETER);
  FunctionImportParameter functionParameter=new FunctionImportParameter();
  List<AnnotationElement> annotationElements=new ArrayList<AnnotationElement>();
  functionParameter.setName(reader.getAttributeValue(null,XmlMetadataConstants.EDM_NAME));
  String type=reader.getAttributeValue(null,XmlMetadataConstants.EDM_TYPE);
  if (type == null) {
    throw new EntityProviderException(EntityProviderException.MISSING_ATTRIBUTE.addContent(XmlMetadataConstants.EDM_TYPE).addContent(XmlMetadataConstants.EDM_FUNCTION_PARAMETER));
  }
  functionParameter.setType(EdmSimpleTypeKind.valueOf(extractFQName(type).getName()));
  functionParameter.setFacets(readFacets(reader));
  functionParameter.setAnnotationAttributes(readAnnotationAttribute(reader));
  while (reader.hasNext() && !(reader.isEndElement() && edmNamespace.equals(reader.getNamespaceURI()) && XmlMetadataConstants.EDM_FUNCTION_PARAMETER.equals(reader.getLocalName()))) {
    reader.next();
    if (reader.isStartElement()) {
      extractNamespaces(reader);
      annotationElements.add(readAnnotationElement(reader));
    }
  }
  if (!annotationElements.isEmpty()) {
    functionParameter.setAnnotationElements(annotationElements);
  }
  return functionParameter;
}",0.995588734306074
34995,"@Test public void testFunctionImport() throws XMLStreamException, EntityProviderException {
  final String xmWithEntityContainer=""String_Node_Str"" + Edm.NAMESPACE_EDMX_2007_06 + ""String_Node_Str""+ ""String_Node_Str""+ Edm.NAMESPACE_M_2007_08+ ""String_Node_Str""+ ""String_Node_Str""+ NAMESPACE+ ""String_Node_Str""+ Edm.NAMESPACE_EDM_2008_09+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ propertyNames[0]+ ""String_Node_Str""+ ""String_Node_Str""+ propertyNames[1]+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  XmlMetadataConsumer parser=new XmlMetadataConsumer();
  XMLStreamReader reader=createStreamReader(xmWithEntityContainer);
  DataServices result=parser.readMetadata(reader,true);
  for (  Schema schema : result.getSchemas()) {
    for (    EntityContainer container : schema.getEntityContainers()) {
      assertEquals(""String_Node_Str"",container.getName());
      assertEquals(Boolean.TRUE,container.isDefaultEntityContainer());
      for (      FunctionImport functionImport : container.getFunctionImports()) {
        assertEquals(""String_Node_Str"",functionImport.getName());
        assertEquals(""String_Node_Str"",functionImport.getEntitySet());
        assertEquals(NAMESPACE,functionImport.getReturnType().getTypeName().getNamespace());
        assertEquals(""String_Node_Str"",functionImport.getReturnType().getTypeName().getName());
        assertEquals(EdmMultiplicity.MANY,functionImport.getReturnType().getMultiplicity());
        assertEquals(""String_Node_Str"",functionImport.getHttpMethod());
        for (        FunctionImportParameter parameter : functionImport.getParameters()) {
          assertEquals(""String_Node_Str"",parameter.getName());
          assertEquals(EdmSimpleTypeKind.String,parameter.getType());
          assertEquals(Boolean.TRUE,parameter.getFacets().isNullable());
        }
      }
    }
  }
}","@Test public void testFunctionImport() throws XMLStreamException, EntityProviderException {
  final String xmWithEntityContainer=""String_Node_Str"" + Edm.NAMESPACE_EDMX_2007_06 + ""String_Node_Str""+ ""String_Node_Str""+ Edm.NAMESPACE_M_2007_08+ ""String_Node_Str""+ ""String_Node_Str""+ NAMESPACE+ ""String_Node_Str""+ Edm.NAMESPACE_EDM_2008_09+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ propertyNames[0]+ ""String_Node_Str""+ ""String_Node_Str""+ propertyNames[1]+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  XmlMetadataConsumer parser=new XmlMetadataConsumer();
  XMLStreamReader reader=createStreamReader(xmWithEntityContainer);
  DataServices result=parser.readMetadata(reader,true);
  for (  Schema schema : result.getSchemas()) {
    for (    EntityContainer container : schema.getEntityContainers()) {
      assertEquals(""String_Node_Str"",container.getName());
      assertEquals(Boolean.TRUE,container.isDefaultEntityContainer());
      assertEquals(2,container.getFunctionImports().size());
      FunctionImport functionImport1=container.getFunctionImports().get(0);
      assertEquals(""String_Node_Str"",functionImport1.getName());
      assertEquals(""String_Node_Str"",functionImport1.getEntitySet());
      assertEquals(NAMESPACE,functionImport1.getReturnType().getTypeName().getNamespace());
      assertEquals(""String_Node_Str"",functionImport1.getReturnType().getTypeName().getName());
      assertEquals(EdmMultiplicity.MANY,functionImport1.getReturnType().getMultiplicity());
      assertEquals(""String_Node_Str"",functionImport1.getHttpMethod());
      assertEquals(2,functionImport1.getParameters().size());
      assertEquals(""String_Node_Str"",functionImport1.getParameters().get(0).getName());
      assertEquals(EdmSimpleTypeKind.String,functionImport1.getParameters().get(0).getType());
      assertEquals(Boolean.TRUE,functionImport1.getParameters().get(0).getFacets().isNullable());
      assertEquals(""String_Node_Str"",functionImport1.getParameters().get(1).getName());
      assertEquals(EdmSimpleTypeKind.Int32,functionImport1.getParameters().get(1).getType());
      assertEquals(Boolean.FALSE,functionImport1.getParameters().get(1).getFacets().isNullable());
      FunctionImport functionImport2=container.getFunctionImports().get(1);
      assertEquals(""String_Node_Str"",functionImport2.getName());
      assertEquals(""String_Node_Str"",functionImport2.getEntitySet());
      assertEquals(NAMESPACE,functionImport2.getReturnType().getTypeName().getNamespace());
      assertEquals(""String_Node_Str"",functionImport2.getReturnType().getTypeName().getName());
      assertEquals(EdmMultiplicity.MANY,functionImport2.getReturnType().getMultiplicity());
      assertEquals(""String_Node_Str"",functionImport2.getHttpMethod());
      assertEquals(2,functionImport2.getParameters().size());
      assertEquals(""String_Node_Str"",functionImport2.getParameters().get(0).getName());
      assertEquals(EdmSimpleTypeKind.String,functionImport2.getParameters().get(0).getType());
      assertEquals(Boolean.TRUE,functionImport2.getParameters().get(0).getFacets().isNullable());
      assertEquals(""String_Node_Str"",functionImport2.getParameters().get(1).getName());
      assertEquals(EdmSimpleTypeKind.Int32,functionImport2.getParameters().get(1).getType());
      assertEquals(Boolean.FALSE,functionImport2.getParameters().get(1).getFacets().isNullable());
    }
  }
}",0.6435781413156979
34996,"@Override public ODataResponse handleError(final ODataErrorContext context) throws ODataApplicationException {
  final String SEPARATOR=""String_Node_Str"";
  Throwable t=context.getException();
  if (t instanceof ODataJPAException) {
    StringBuilder errorBuilder=new StringBuilder();
    errorBuilder.append(t.getCause().getClass().toString());
    errorBuilder.append(SEPARATOR);
    errorBuilder.append(t.getCause().getMessage());
    context.setInnerError(errorBuilder.toString());
  }
  return EntityProvider.writeErrorDocument(context);
}","@Override public ODataResponse handleError(final ODataErrorContext context) throws ODataApplicationException {
  final String SEPARATOR=""String_Node_Str"";
  Throwable t=context.getException();
  if (t instanceof ODataJPAException && t.getCause() != null) {
    StringBuilder errorBuilder=new StringBuilder();
    errorBuilder.append(t.getCause().getClass().toString());
    errorBuilder.append(SEPARATOR);
    errorBuilder.append(t.getCause().getMessage());
    context.setInnerError(errorBuilder.toString());
  }
  return EntityProvider.writeErrorDocument(context);
}",0.9784172661870504
34997,"private void assertDeletedEntries(final String json){
  assertTrue(""String_Node_Str"",json.contains(""String_Node_Str""));
  assertTrue(""String_Node_Str"",json.contains(""String_Node_Str""));
  assertTrue(""String_Node_Str"",json.contains(""String_Node_Str""));
  assertTrue(""String_Node_Str"",json.contains(""String_Node_Str""));
}","private void assertDeletedEntries(final String json){
  assertTrue(""String_Node_Str"",json.contains(""String_Node_Str""));
  assertTrue(""String_Node_Str"",json.contains(""String_Node_Str"" + ""String_Node_Str""));
  assertTrue(""String_Node_Str"",json.contains(""String_Node_Str"" + ""String_Node_Str""));
  assertTrue(""String_Node_Str"",json.contains(""String_Node_Str"" + ""String_Node_Str""));
}",0.9140401146131804
34998,"public HashMap<String,Method> getAccessModifiers(final Object jpaEntity,final EdmStructuralType structuralType,final String accessModifier) throws ODataJPARuntimeException {
  HashMap<String,Method> accessModifierMap=new HashMap<String,Method>();
  HashMap<String,String> embeddableKey=new HashMap<String,String>();
  try {
    for (    String propertyName : structuralType.getPropertyNames()) {
      EdmProperty property=(EdmProperty)structuralType.getProperty(propertyName);
      String name=getAccessModifierName(property.getName(),property.getMapping(),accessModifier);
      String[] nameParts=name.split(""String_Node_Str"");
      if (nameParts.length > 1) {
        embeddableKey.put(propertyName,name);
      }
 else {
        if (accessModifier.equals(ACCESS_MODIFIER_SET)) {
          JPAEdmMapping jpaEdmMapping=(JPAEdmMapping)property.getMapping();
          accessModifierMap.put(propertyName,jpaEntity.getClass().getMethod(name,new Class<?>[]{jpaEdmMapping.getJPAType()}));
        }
 else {
          accessModifierMap.put(propertyName,jpaEntity.getClass().getMethod(name,(Class<?>[])null));
        }
      }
    }
  }
 catch (  NoSuchMethodException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.INNER_EXCEPTION,e);
  }
catch (  SecurityException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.INNER_EXCEPTION,e);
  }
catch (  EdmException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.INNER_EXCEPTION,e);
  }
  if (!embeddableKey.isEmpty()) {
    jpaEmbeddableKeyMap.put(jpaEntity.getClass().getName(),embeddableKey);
  }
  return accessModifierMap;
}","public HashMap<String,Method> getAccessModifiers(final Object jpaEntity,final EdmStructuralType structuralType,final String accessModifier) throws ODataJPARuntimeException {
  HashMap<String,Method> accessModifierMap=new HashMap<String,Method>();
  HashMap<String,String> embeddableKey=new HashMap<String,String>();
  Method acceserMethod=null;
  EdmProperty property=null;
  try {
    for (    String propertyName : structuralType.getPropertyNames()) {
      try {
        property=(EdmProperty)structuralType.getProperty(propertyName);
        String name=getAccessModifierName(property.getName(),property.getMapping(),accessModifier);
        String[] nameParts=name.split(""String_Node_Str"");
        if (nameParts.length > 1) {
          embeddableKey.put(propertyName,name);
        }
 else {
          if (accessModifier.equals(ACCESS_MODIFIER_SET)) {
            JPAEdmMapping jpaEdmMapping=(JPAEdmMapping)property.getMapping();
            accessModifierMap.put(propertyName,jpaEntity.getClass().getMethod(name,new Class<?>[]{jpaEdmMapping.getJPAType()}));
          }
 else {
            acceserMethod=jpaEntity.getClass().getMethod(name,(Class<?>[])null);
          }
        }
      }
 catch (      EdmException exp) {
        throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.INNER_EXCEPTION,exp);
      }
catch (      NoSuchMethodException e1) {
        try {
          EdmSimpleType edmSimpleType=(EdmSimpleType)property.getType();
          if (edmSimpleType == EdmSimpleTypeKind.Boolean.getEdmSimpleTypeInstance() && accessModifier.equals(""String_Node_Str"")) {
            String nameWithIs=getAccessModifierName(property.getName(),property.getMapping(),ACCESS_MODIFIER_IS);
            acceserMethod=jpaEntity.getClass().getMethod(nameWithIs,(Class<?>[])null);
          }
        }
 catch (        EdmException exp) {
          throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.INNER_EXCEPTION,exp);
        }
catch (        NoSuchMethodException exp) {
          throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.INNER_EXCEPTION,exp);
        }
catch (        SecurityException exp) {
          throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.INNER_EXCEPTION,exp);
        }
      }
catch (      SecurityException e1) {
        throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.INNER_EXCEPTION,e1);
      }
      if (acceserMethod != null) {
        accessModifierMap.put(propertyName,acceserMethod);
      }
    }
  }
 catch (  EdmException exp) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.INNER_EXCEPTION,exp);
  }
  if (!embeddableKey.isEmpty()) {
    jpaEmbeddableKeyMap.put(jpaEntity.getClass().getName(),embeddableKey);
  }
  return accessModifierMap;
}",0.6277567386945868
34999,"@SuppressWarnings(""String_Node_Str"") private void init(final Collection<Class<?>> annotatedClasses) throws ODataException {
  try {
    for (    Class<?> clz : annotatedClasses) {
      DataStore<Object> dhs=(DataStore<Object>)DataStore.createInMemory(clz,persistInMemory);
      String entitySetName=ANNOTATION_HELPER.extractEntitySetName(clz);
      dataStores.put(entitySetName,dhs);
    }
  }
 catch (  DataStore.DataStoreException e) {
    throw new ODataException(""String_Node_Str"" + e.getMessage(),e);
  }
}","@SuppressWarnings(""String_Node_Str"") private void init(final Collection<Class<?>> annotatedClasses) throws ODataException {
  try {
    for (    Class<?> clz : annotatedClasses) {
      String entitySetName=ANNOTATION_HELPER.extractEntitySetName(clz);
      if (entitySetName != null) {
        DataStore<Object> dhs=(DataStore<Object>)DataStore.createInMemory(clz,persistInMemory);
        dataStores.put(entitySetName,dhs);
      }
 else       if (!ANNOTATION_HELPER.isEdmAnnotated(clz)) {
        throw new ODataException(""String_Node_Str"" + clz.getName());
      }
    }
  }
 catch (  DataStore.DataStoreException e) {
    throw new ODataException(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.6776859504132231
35000,"public static Map<String,String> extractRequestHeaders(final javax.ws.rs.core.HttpHeaders httpHeaders){
  final MultivaluedMap<String,String> headers=httpHeaders.getRequestHeaders();
  Map<String,String> headerMap=new HashMap<String,String>();
  for (  final String key : headers.keySet()) {
    List<String> header=httpHeaders.getRequestHeader(key);
    if (header != null && !header.isEmpty()) {
      String value=header.get(0);
      if (value != null && !""String_Node_Str"".equals(value)) {
        headerMap.put(key,value);
      }
    }
  }
  return headerMap;
}","public static Map<String,String> extractRequestHeaders(final javax.ws.rs.core.HttpHeaders httpHeaders){
  final MultivaluedMap<String,String> headers=httpHeaders.getRequestHeaders();
  Map<String,String> headerMap=new HashMap<String,String>();
  for (  final String key : headers.keySet()) {
    String value=getSafeHeader(key,httpHeaders);
    if (value != null && !""String_Node_Str"".equals(value)) {
      headerMap.put(key,value);
    }
  }
  return headerMap;
}",0.8054211035818006
